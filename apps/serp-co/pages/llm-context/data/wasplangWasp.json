[
  {
    "owner": "wasp-lang",
    "repo": "wasp",
    "content": "TITLE: Defining Basic App Structure in Wasp\nDESCRIPTION: This snippet demonstrates how to define a basic app structure in Wasp, including an app declaration, a route, and a page. It showcases the syntax for declarations and how they are used to describe different parts of a web application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/general/language.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\"\n}\n\nroute RootRoute { path: \"/\", to: DashboardPage }\n\npage DashboardPage {\n  component: import { DashboardPage } from \"@src/Dashboard.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version\nDESCRIPTION: Command to verify current Node.js version\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/introduction/quick-start.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating User-Specific Tasks with Authentication in TypeScript\nDESCRIPTION: Provides TypeScript implementations for `createTask` and `updateTask` actions in `src/actions.ts` with type safety and authentication. Both check `context.user` and throw `HttpError(401)` if needed. `createTask` adds a task linked to the logged-in user. `updateTask` uses `updateMany` with `where` clause filtering by task `id` and `user.id`. Type definitions for payloads (`CreateTaskPayload`, `UpdateTaskPayload`) and operation signatures (`CreateTask`, `UpdateTask`) are included.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/07-auth.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { Task } from 'wasp/entities'\nimport { HttpError } from 'wasp/server'\nimport { CreateTask, UpdateTask } from 'wasp/server/operations'\n\ntype CreateTaskPayload = Pick<Task, 'description'>\n\nexport const createTask: CreateTask<CreateTaskPayload, Task> = async (\n  args,\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.create({\n    data: {\n      description: args.description,\n      user: { connect: { id: context.user.id } },\n    },\n  })\n}\n\ntype UpdateTaskPayload = Pick<Task, 'id' | 'isDone'>\n\nexport const updateTask: UpdateTask<\n  UpdateTaskPayload,\n  { count: number }\n> = async ({ id, isDone }, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.updateMany({\n    where: { id, user: { id: context.user.id } },\n    data: { isDone },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Signup Fields and User Entity in Wasp App (Wasp)\nDESCRIPTION: Defines additional user signup fields in the Wasp application configuration and the user entity schema. It imports a userSignupFields object, specifying the validation logic for extra fields received during signup, and extends the User entity to include those fields. Requires the Wasp framework and appropriate user entity definitions. Inputs are user signup values; outputs are valid and stored user records with additional fields. The password field is excluded and handled by Wasp core backend.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  // ...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {\n        userSignupFields: import { userSignupFields } from \"@src/auth/signup\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n\nentity User {=psl\n  id Int @id @default(autoincrement())\n  address String?\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Methods in Wasp\nDESCRIPTION: Illustrates how to configure authentication settings within the `main.wasp` file. This includes defining the user entity, enabling specific authentication methods (like `usernameAndPassword`, `email`, `google`, `gitHub`), and setting the redirect path (`onAuthFailedRedirectTo`) for unauthenticated users trying to access protected routes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_20\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\n  title: \"My app\",\n  //...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {}, // use this or email, not both\n      email: {}, // use this or usernameAndPassword, not both\n      google: {},\n      gitHub: {},\n    },\n    onAuthFailedRedirectTo: \"/someRoute\",\n  }\n}\n\n//...\n```\n```\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napp MyApp {\n  title: \"My app\",\n  //...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {}, // use this or email, not both\n      email: {}, // use this or usernameAndPassword, not both\n      google: {},\n      gitHub: {},\n    },\n    onAuthFailedRedirectTo: \"/someRoute\",\n  }\n}\n\n//...\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic App Settings and Authentication in Wasp\nDESCRIPTION: This Wasp configuration snippet defines the main application settings for 'RecipeApp'. It sets the application title, specifies the required Wasp version, and configures username/password authentication. It includes defining the redirect path for failed authentication and linking authentication to the 'User' entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/introduction/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napp RecipeApp {\n  title: \"My Recipes\",\n  wasp: { version: \"^0.14.0\" },\n  auth: {\n    methods: { usernameAndPassword: {} },\n    onAuthFailedRedirectTo: \"/login\",\n    userEntity: User\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sign-Up Logic with Email Validation (JavaScript)\nDESCRIPTION: This JavaScript snippet implements a secure signup flow for Wasp apps using Wasp's built-in server-side authentication functions. It validates the email and password fields using imported validators, handles user existence checks with provider IDs, hashes passwords, and sends a verification email. All error handling and mail-sending logic is included, with extensible regions for custom post-signup logic. Dependencies: wasp/server/auth, email sending configuration, and error handling with HttpError.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/email.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\\n  ensurePasswordIsPresent,\\n  ensureValidPassword,\\n  ensureValidEmail,\\n  createProviderId,\\n  sanitizeAndSerializeProviderData,\\n  deserializeAndSanitizeProviderData,\\n  findAuthIdentity,\\n  createUser,\\n  createEmailVerificationLink,\\n  sendEmailVerificationEmail,\\n} from 'wasp/server/auth'\\n\\nexport const signup = async (args, _context) => {\\n  ensureValidEmail(args)\\n  ensurePasswordIsPresent(args)\\n  ensureValidPassword(args)\\n\\n  try {\\n    const providerId = createProviderId('email', args.email)\\n    const existingAuthIdentity = await findAuthIdentity(providerId)\\n\\n    if (existingAuthIdentity) {\\n      const providerData = deserializeAndSanitizeProviderData(existingAuthIdentity.providerData)\\n      // Your custom code here\\n    } else {\\n      // sanitizeAndSerializeProviderData will hash the user's password\\n      const newUserProviderData = await sanitizeAndSerializeProviderData({\\n          hashedPassword: args.password,\\n          isEmailVerified: false,\\n          emailVerificationSentAt: null,\\n          passwordResetSentAt: null,\\n      })\\n      await createUser(\\n        providerId,\\n        providerData,\\n        // Any additional data you want to store on the User entity\\n        {},\\n      )\\n\\n      // Verification link links to a client route e.g. /email-verification\\n      const verificationLink = await createEmailVerificationLink(args.email, '/email-verification');\\n      try {\\n          await sendEmailVerificationEmail(\\n              args.email,\\n              {\\n                  from: {\\n                    name: \"My App Postman\",\\n                    email: \"hello@itsme.com\",\\n                  },\\n                  to: args.email,\\n                  subject: \"Verify your email\",\\n                  text: `Click the link below to verify your email: ${verificationLink}` ,\\n                  html: `\\n                      <p>Click the link below to verify your email</p>\\n                      <a href=\"${verificationLink}\">Verify email</a>\\n                  `,\\n              }\\n          );\\n      } catch (e: unknown) {\\n          console.error(\"Failed to send email verification email:\", e);\\n          throw new HttpError(500, \"Failed to send email verification email.\");\\n      }\\n    }\\n  } catch (e) {\\n    return {\\n      success: false,\\n      message: e.message,\\n    }\\n  }\\n\\n  // Your custom code after sign-up.\\n  // ...\\n\\n  return {\\n    success: true,\\n    message: 'User created successfully',\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Wasp Actions in a React Component (JavaScript)\nDESCRIPTION: Illustrates how to use Wasp Actions within a React functional component in JavaScript (JSX). It imports `useQuery`, `getTask`, and `markTaskAsDone` from `wasp/client/operations`, fetches data with `useQuery`, displays task details, and triggers the `markTaskAsDone` action via an `onClick` handler on a button.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\n// highlight-next-line\nimport { useQuery, getTask, markTaskAsDone } from 'wasp/client/operations'\n\nexport const TaskPage = ({ id }) => {\n  const { data: task } = useQuery(getTask, { id })\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>\n  }\n\n  const { description, isDone } = task\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n      {isDone || (\n        // highlight-next-line\n        <button onClick={() => markTaskAsDone({ id })}>Mark as done.</button>\n      )}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Wasp App Configuration Reference\nDESCRIPTION: Full reference example showing all possible configuration options including auth, client, server, database, email, and WebSocket settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/customizing-app.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"ToDo App\",\n  head: [\n    \"<link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\\\" />\"\n  ],\n  auth: {\n    // ...\n  },\n  client: {\n    // ...\n  },\n  server: {\n    // ...\n  },\n  db: {\n    // ...\n  },\n  emailSender: {\n    // ...\n  },\n  webSocket: {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Wasp Database Studio\nDESCRIPTION: This command opens the Wasp database studio in a browser, allowing users to view and edit the data in the database, including the new Task entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/04-entities.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nwasp db studio\n```\n\n----------------------------------------\n\nTITLE: Implementing getTasks Query in TypeScript\nDESCRIPTION: This code implements the getTasks Query function in TypeScript. It includes type annotations for the function and uses Prisma client to fetch all tasks from the database, ordered by id.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/05-queries.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from 'wasp/entities'\nimport { type GetTasks } from 'wasp/server/operations'\n\nexport const getTasks: GetTasks<void, Task[]> = async (args, context) => {\n  return context.entities.Task.findMany({\n    orderBy: { id: 'asc' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version in Shell (shell)\nDESCRIPTION: Displays the current active Node.js version using the 'node -v' command. The environment must have Node.js installed and present in PATH. No arguments are accepted. Prints the version string (e.g., 'v20.5.2'), which is useful for verifying runtime compatibility for Wasp and other Node.js-dependent tooling. Limitation: Does not change or set the version, only reports it.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/introduction/quick-start.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Server-Side Query Implementation in TypeScript\nDESCRIPTION: Demonstrates TypeScript implementation of server-side queries with automatic type inference.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/queries.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAllTasks, getFilteredTasks } from 'wasp/server/operations'\n\nconst user = // Get an AuthUser object, e.g., from context.user in an operation.\n\n// TypeScript automatically infers the return values and type-checks\n// the payloads.\nconst allTasks = await getAllTasks({ user })\nconst doneTasks = await getFilteredTasks({ isDone: true }, { user })\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Wasp Queries\nDESCRIPTION: Demonstrates how to handle errors in Wasp queries using HttpError for custom error responses with status codes, messages, and additional data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/queries.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const getAllTasks = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Task Entity in Prisma Schema\nDESCRIPTION: This snippet shows how to define a Task Entity using Prisma model in the schema.prisma file. It creates a table for storing Tasks with id, description, and isDone fields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/entities.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Task {\n  id          String  @id @default(uuid())\n  description String\n  isDone      Boolean @default(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UpdateTask Action - TypeScript\nDESCRIPTION: Server-side implementation of the updateTask action in TypeScript, including type definitions and Prisma-like update logic.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/06-actions.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreateTask, UpdateTask } from 'wasp/server/operations'\n\ntype UpdateTaskPayload = Pick<Task, 'id' | 'isDone'>\n\nexport const updateTask: UpdateTask<UpdateTaskPayload, Task> = async (\n  { id, isDone },\n  context\n) => {\n  return context.entities.Task.update({\n    where: { id },\n    data: {\n      isDone: isDone,\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Entering Project Directory and Starting Wasp Development Server - Shell\nDESCRIPTION: This shell snippet demonstrates entering the newly created Wasp project directory and launching the development server with 'wasp start'. Dependencies include a previously created Wasp project. The commands set up the production environment, start both the backend and frontend development servers, and open the application in a browser. First-run initialization may take extra time to install dependencies and set up the database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/01-create.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n```sh\\n$ cd TodoApp\\n$ wasp start\\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Protection for Main Page\nDESCRIPTION: Updates the main page configuration in Wasp to require authentication, redirecting unauthenticated users to the login page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/07-auth.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\npage MainPage {\n  // highlight-next-line\n  authRequired: true,\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Task Entity in Wasp\nDESCRIPTION: Demonstrates how to define a Task entity using Prisma Schema Language (PSL) within a Wasp configuration file. The entity includes fields for id, description, and completion status.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/04-entities.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nentity Task {=psl\n    id          Int     @id @default(autoincrement())\n    description String\n    isDone      Boolean @default(false)\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Using CRUD Hooks for Data Operations (JavaScript, React)\nDESCRIPTION: Demonstrates usage of the generated CRUD operations for 'Tasks' on the client side in a JavaScript React component. Shows how to use query and action hooks for each CRUD operation (getAll, get, create, update, delete). Assumes the 'Tasks' object was imported from 'wasp/client/crud'. Inputs: Potential arguments for the hooks (e.g., query filters); Outputs: Data, mutation trigger functions. Designed for integration in React components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/crud.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nconst { data } = Tasks.getAll.useQuery()\nconst { data } = Tasks.get.useQuery({ id: 1 })\nconst createAction = Tasks.create.useAction()\nconst updateAction = Tasks.update.useAction()\nconst deleteAction = Tasks.delete.useAction()\n```\n\n----------------------------------------\n\nTITLE: Server-side Custom Signup Implementation (TypeScript, Node.js)\nDESCRIPTION: Implements a custom signup action with full type safety using TypeScript. Uses type definitions for input and output, and identical validation and user creation logic as the JavaScript version. Dependencies include 'wasp/server/auth' and 'wasp/server/operations'. Ensures error messages and status are returned in a typed format. The input object must contain a username and password, both validated and sanitized before creating the user entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/username-and-pass.md#2025-04-22_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n  ensurePasswordIsPresent,\n  ensureValidPassword,\n  ensureValidUsername,\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  createUser,\n} from 'wasp/server/auth'\nimport type { CustomSignup } from 'wasp/server/operations'\n\ntype CustomSignupInput = {\n  username: string\n  password: string\n}\ntype CustomSignupOutput = {\n  success: boolean\n  message: string\n}\n\nexport const signup: CustomSignup<\n  CustomSignupInput,\n  CustomSignupOutput\n> = async (args, _context) => {\n  ensureValidUsername(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('username', args.username)\n    const providerData = await sanitizeAndSerializeProviderData<'username'>({\n      hashedPassword: args.password,\n    })\n\n    await createUser(\n      providerId,\n      providerData,\n      // Any additional data you want to store on the User entity\n      {},\n    )\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Queries with Entities (JavaScript)\nDESCRIPTION: Shows how to implement Queries that use entities in JavaScript. It demonstrates accessing the entity's Prisma API through the context object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/queries.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nexport const getAllTasks = async (args, context) => {\n  return context.entities.Task.findMany({})\n}\n\nexport const getFilteredTasks = async (args, context) => {\n  return context.entities.Task.findMany({\n    where: { isDone: args.isDone },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Actions/Queries on Client (JavaScript)\nDESCRIPTION: Shows how to import and use Actions or Queries in client-side JavaScript code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/actions.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Use it on the client\nimport { createFoo } from 'wasp/client/operations'\n\n// Use it on the server\nimport { createFoo } from 'wasp/server/operations'\n```\n\n----------------------------------------\n\nTITLE: Inferring Query Return Type with 'satisfies' in TypeScript\nDESCRIPTION: Demonstrates using the TypeScript `satisfies` keyword with a Wasp-generated query type (`GetFoo`) to infer the complex return type of the query implementation automatically. This approach provides type safety for the `context` object while avoiding the need to explicitly define the return type structure. TypeScript infers the return type as `{ foos: Foo[], message: string, queriedAt: Date }`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/queries.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst getFoo = (async (_args, context) => {\n  const foos = await context.entities.Foo.findMany()\n  return {\n    foos,\n    message: 'Here are some foos!',\n    queriedAt: new Date(),\n  }\n}) satisfies GetFoo\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Application-level Auth Configuration in Wasp (JavaScript and TypeScript)\nDESCRIPTION: Configures user authentication in a Wasp application using username/password, specifying the user entity, authentication method, and redirect behavior. This snippet is placed in the main.wasp file and is required to enable authentication and session management. Compatible with either JavaScript or TypeScript projects.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/username-and-pass.md#2025-04-22_snippet_11\n\nLANGUAGE: Wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Query in React Component (TypeScript)\nDESCRIPTION: TypeScript React component that uses the 'getTasks' query to fetch and display a list of tasks, with proper type annotations for components and props.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/05-queries.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Task } from 'wasp/entities'\nimport { getTasks, useQuery } from 'wasp/client/operations'\n\nexport const MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n\nconst TaskView = ({ task }: { task: Task }) => {\n  return (\n    <div>\n      <input type=\"checkbox\" id={String(task.id)} checked={task.isDone} />\n      {task.description}\n    </div>\n  )\n}\n\nconst TasksList = ({ tasks }: { tasks: Task[] }) => {\n  if (!tasks?.length) return <div>No tasks</div>\n\n  return (\n    <div>\n      {tasks.map((task, idx) => (\n        <TaskView task={task} key={idx} />\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database and Prisma in Wasp (JavaScript)\nDESCRIPTION: This snippet shows how to configure the database system, seeding, and Prisma client preview features in a Wasp application using JavaScript. It demonstrates setting up PostgreSQL, importing a seed function, and enabling a Prisma preview feature.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/backends.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  db: {\n    system: PostgreSQL,\n    seeds: [\n      import devSeed from \"@src/dbSeeds.js\"\n    ],\n    prisma: {\n      clientPreviewFeatures: [\"extendedWhereUnique\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CRUD Operations in Client Code\nDESCRIPTION: Demonstrates how to import and use CRUD operations in client-side components, including querying data and using actions for mutations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tasks } from 'wasp/client/crud'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data } = Tasks.getAll.useQuery()\nconst { data } = Tasks.get.useQuery({ id: 1 })\nconst createAction = Tasks.create.useAction()\nconst updateAction = Tasks.update.useAction()\nconst deleteAction = Tasks.delete.useAction()\n```\n\n----------------------------------------\n\nTITLE: Deploying a Wasp App to Fly.io with Launch Command\nDESCRIPTION: This command deploys a new Wasp application to Fly.io with a single 'launch' command. It deploys the app named 'my-wasp-app' to the Miami region and automatically sets up all required infrastructure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/cli.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly launch my-wasp-app mia\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions in TypeScript\nDESCRIPTION: This snippet shows the TypeScript implementation of 'createTask' and 'markTaskAsDone' Actions. It includes type definitions and demonstrates how to use Wasp-generated types for full-stack type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/actions.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateTask, type MarkTaskAsDone } from 'wasp/server/operations'\n\ntype Task = {\n  id: number\n  description: string\n  isDone: boolean\n}\n\nlet nextId = 4\nconst tasks = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\nexport const createTask: CreateTask<Pick<Task, 'description'>, Task> = (\n  args\n) => {\n  const newTask = {\n    id: nextId,\n    isDone: false,\n    description: args.description,\n  }\n  nextId += 1\n  tasks.push(newTask)\n  return newTask\n}\n\nexport const markTaskAsDone: MarkTaskAsDone<Pick<Task, 'id'>, void> = (\n  args\n) => {\n  const task = tasks.find((task) => task.id === args.id)\n  if (!task) {\n    return\n  }\n  task.isDone = true\n}\n```\n\n----------------------------------------\n\nTITLE: Using CRUD Operations in Client Code (TypeScript)\nDESCRIPTION: Demonstrates how to import and use CRUD operations in a TypeScript client component. Shows usage patterns for querying data and using mutations with React hooks with type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/crud.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tasks } from 'wasp/client/crud'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data } = Tasks.getAll.useQuery()\nconst { data } = Tasks.get.useQuery({ id: 1 })\nconst createAction = Tasks.create.useAction()\nconst updateAction = Tasks.update.useAction()\nconst deleteAction = Tasks.delete.useAction()\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js using nvm (Shell)\nDESCRIPTION: Uses Node Version Manager (nvm) to install a specific version of Node.js (version 20 in this example). This is useful for ensuring the required Node.js version (>= 18) for Wasp is installed.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/introduction/quick-start.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnvm install 20\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions with Entities (TypeScript)\nDESCRIPTION: Demonstrates how to implement Actions that use Entities in TypeScript. It shows creating and updating tasks using the Prisma API, with full type annotations for improved type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateTask, type MarkTaskAsDone } from 'wasp/server/operations'\nimport { type Task } from 'wasp/entities'\n\n// The 'args' object is the payload sent by the caller (most often from the client)\nexport const createTask: CreateTask<Pick<Task, 'description'>, Task> = async (\n  args,\n  context\n) => {\n  const newTask = await context.entities.Task.create({\n    data: {\n      description: args.description,\n      isDone: false,\n    },\n  })\n  return newTask\n}\n\nexport const markTaskAsDone: MarkTaskAsDone<Pick<Task, 'id'>, void> = async (\n  args,\n  context\n) => {\n  await context.entities.Task.update({\n    where: { id: args.id },\n    data: { isDone: true },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Queries in Wasp\nDESCRIPTION: Example of declaring queries in a Wasp configuration file to fetch all tasks and filtered tasks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/queries.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nquery getAllTasks {\n  fn: import { getAllTasks } from \"@src/queries.js\"\n}\n\nquery getFilteredTasks {\n  fn: import { getFilteredTasks } from \"@src/queries.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth UI Components\nDESCRIPTION: React component implementation for authentication pages including login and signup forms with Tailwind CSS styling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/username-and-pass.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm, SignupForm } from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Don't have an account yet? <Link to=\"/signup\">go to signup</Link>.\n      </span>\n    </Layout>\n  );\n}\n\nexport function Signup() {\n  return (\n    <Layout>\n      <SignupForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </Layout>\n  );\n}\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"w-full h-full bg-white\">\n      <div className=\"min-w-full min-h-[75vh] flex items-center justify-center\">\n        <div className=\"w-full h-full max-w-sm p-5 bg-white\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Wasp Action for Password Updates\nDESCRIPTION: This Wasp configuration snippet declares an action named `updatePassword`. It specifies that the implementation logic for this action resides in the `updatePassword` function, which is imported from the `@src/auth` module (e.g., `src/auth.js` or `src/auth.ts`). This connects the action definition in the `main.wasp` file to its corresponding server-side function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\n// ...\n\naction updatePassword {\n  fn: import { updatePassword } from \"@src/auth\",\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Updating User Password Securely in TypeScript (Wasp)\nDESCRIPTION: This TypeScript code implements the `updatePassword` Wasp action with strong typing. It utilizes helper functions from `wasp/server/auth` for secure password handling. It finds the user's authentication identity based on their email (`createProviderId`, `findAuthIdentity`), deserializes provider data with type specification (`deserializeAndSanitizeProviderData<'email'>`), and then calls `updateAuthIdentityProviderData`. This function takes the new password (`args.password`) and automatically hashes it before updating the user's record. Type definitions like `UpdatePassword` ensure type safety for arguments and return values.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/auth.ts\"\nimport {\n  createProviderId,\n  findAuthIdentity,\n  updateAuthIdentityProviderData,\n  deserializeAndSanitizeProviderData,\n} from 'wasp/server/auth';\nimport { type UpdatePassword } from 'wasp/server/operations'\nimport { HttpError } from 'wasp/server';\n\nexport const updatePassword: UpdatePassword<\n  { email: string; password: string },\n  void,\n> = async (args, context) => {\n  const providerId = createProviderId('email', args.email)\n  const authIdentity = await findAuthIdentity(providerId)\n  if (!authIdentity) {\n      throw new HttpError(400, \"Unknown user\")\n  }\n  \n  const providerData = deserializeAndSanitizeProviderData<'email'>(authIdentity.providerData)\n\n  // Updates the password and hashes it automatically.\n  await updateAuthIdentityProviderData(providerId, providerData, {\n      hashedPassword: args.password,\n  })\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Tasks Query Function with Type Annotations - Wasp Backend - TypeScript\nDESCRIPTION: Implements the getTasks function in TypeScript, using Wasp's generated GetTasks and Task types for strong typing of query inputs and outputs, ensuring full-stack type safety. Imports the Task entity and GetTasks types, with the function returning all tasks in ascending ID order. No arguments are required; context provides access to the Prisma Task model and other info injected by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/05-queries.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from 'wasp/entities'\\nimport { type GetTasks } from 'wasp/server/operations'\\n\\nexport const getTasks: GetTasks<void, Task[]> = async (args, context) => {\\n  return context.entities.Task.findMany({\\n    orderBy: { id: 'asc' },\\n  })\\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing SignupForm with Additional Fields in JavaScript\nDESCRIPTION: Demonstrates how to extend the SignupForm component with custom fields using both object configuration and render function approaches. Shows implementation of address and phone number fields with validation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SignupForm } from '@wasp/auth/forms/Signup'\nimport {\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from '@wasp/auth/forms/internal/Form'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Signup Fields in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement the userSignupFields object in JavaScript, including field validation logic.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring a Query in Wasp - Wasp Language\nDESCRIPTION: This snippet defines a query named getFoo using Wasp configuration language. The query is linked to an implementation function (getFoo) imported from the src/queries.js source file, and operates on the Foo entity. The declaration bridges Wasp's frontend codegen with custom backend implementations. The query must be matched by an exported function called getFoo in the specified file. Requires a corresponding JavaScript or TypeScript implementation. Inputs and outputs are determined by the implementation, and the Wasp compiler expects a valid named export.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/queries.md#2025-04-22_snippet_11\n\nLANGUAGE: wasp\nCODE:\n```\nquery getFoo {\n    fn: import { getFoo } from \"@src/queries.js\"\n    entities: [Foo]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated Wasp CRUD Operations in a React Component (JavaScript)\nDESCRIPTION: This React functional component (MainPage.jsx) demonstrates how to use Wasp's generated CRUD operations on the client. It imports `Tasks` from `wasp/client/crud`, fetches all tasks using `Tasks.getAll.useQuery()`, and provides functionality to create new tasks using `Tasks.create.useAction()`. It handles loading and error states and renders a list of tasks and an input form.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"src/MainPage.jsx\"\n// highlight-next-line\nimport { Tasks } from 'wasp/client/crud'\nimport { useState } from 'react'\n\nexport const MainPage = () => {\n  // highlight-next-line\n  const { data: tasks, isLoading, error } = Tasks.getAll.useQuery()\n  // highlight-next-line\n  const createTask = Tasks.create.useAction()\n  const [taskDescription, setTaskDescription] = useState('')\n\n  function handleCreateTask() {\n    createTask({ description: taskDescription, isDone: false })\n    setTaskDescription('')\n  }\n\n  if (isLoading) return <div>Loading...</div>\n  if (error) return <div>Error: {error.message}</div>\n  return (\n    <div\n      style={{\n        fontSize: '1.5rem',\n        display: 'grid',\n        placeContent: 'center',\n        height: '100vh',\n      }}\n    >\n      <div>\n        <input\n          value={taskDescription}\n          onChange={(e) => setTaskDescription(e.target.value)}\n        />\n        <button onClick={handleCreateTask}>Create task</button>\n      </div>\n      <ul>\n        {tasks.map((task) => (\n          <li key={task.id}>{task.description}</li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Submitting New Password on Client-Side (JavaScript/TypeScript)\nDESCRIPTION: Shows how to use the `resetPassword` action from `wasp/client/auth` on a client-side page (e.g., `PasswordResetPage`). This function takes the new `password` and the `token` (received via the password reset link) to complete the password reset process.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/email.md#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/pages/PasswordResetPage.jsx\"\nimport { resetPassword } from 'wasp/client/auth'\n...\nawait resetPassword({ password, token })\n```\n```\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/pages/PasswordResetPage.tsx\"\nimport { resetPassword } from 'wasp/client/auth'\n...\nawait resetPassword({ password, token })\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signup Action in TypeScript\nDESCRIPTION: A TypeScript implementation of a custom signup action with proper type definitions for input and output parameters. It uses Wasp's authentication utilities and provides type safety for all operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/username-and-pass.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  ensurePasswordIsPresent,\n  ensureValidPassword,\n  ensureValidUsername,\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  createUser,\n} from 'wasp/server/auth'\nimport type { CustomSignup } from 'wasp/server/operations'\n\ntype CustomSignupInput = {\n  username: string\n  password: string\n}\ntype CustomSignupOutput = {\n  success: boolean\n  message: string\n}\n\nexport const signup: CustomSignup<\n  CustomSignupInput,\n  CustomSignupOutput\n> = async (args, _context) => {\n  ensureValidUsername(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('username', args.username)\n    const providerData = await sanitizeAndSerializeProviderData<'username'>({\n      hashedPassword: args.password,\n    })\n\n    await createUser(\n      providerId,\n      providerData,\n      // Any additional data you want to store on the User entity\n      {},\n    )\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication Settings in Wasp\nDESCRIPTION: This Wasp configuration snippet shows how to set up basic authentication in `main.wasp`. It defines the application, specifies the Wasp version, sets the app title, and configures the `auth` block. Key configurations include linking the `User` entity via `userEntity`, enabling the `usernameAndPassword` method, and setting a redirect path (`onAuthFailedRedirectTo`) for failed authentication attempts. It also defines a minimal `User` entity using PSL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/username-and-pass.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  }\n}\n\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\npsl=}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication in main.wasp\nDESCRIPTION: This snippet shows how to configure email authentication in the main.wasp file, including specifying the user entity, enabling email auth, and setting up email verification and password reset options.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/email.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        fromField: {\n          name: \"My App Postman\",\n          email: \"hello@itsme.com\"\n        },\n        emailVerification: {\n          clientRoute: EmailVerificationRoute,\n        },\n        passwordReset: {\n          clientRoute: PasswordResetRoute,\n        },\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n    onAuthSucceededRedirectTo: \"/\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using CRUD Operations in Client Code (TypeScript)\nDESCRIPTION: Example of importing and using CRUD operations in a TypeScript client component. Shows how to access getAll, get, create, update, and delete operations using hooks like useQuery and useAction.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/crud.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tasks } from 'wasp/client/crud'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data } = Tasks.getAll.useQuery()\nconst { data } = Tasks.get.useQuery({ id: 1 })\nconst createAction = Tasks.create.useAction()\nconst updateAction = Tasks.update.useAction()\nconst deleteAction = Tasks.delete.useAction()\n```\n\n----------------------------------------\n\nTITLE: Complete App Configuration Reference\nDESCRIPTION: Full reference example showing all available configuration options in a Wasp app declaration, including auth, client, server, database, email, and WebSocket configurations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/customizing-app.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  wasp: {\n    version: \"^0.12.0\"\n  },\n  title: \"ToDo App\",\n  head: [\n    \"<link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\\\" />\"\n  ],\n  auth: {\n    // ...\n  },\n  client: {\n    // ...\n  },\n  server: {\n    // ...\n  },\n  db: {\n    // ...\n  },\n  emailSender: {\n    // ...\n  },\n  webSocket: {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Actions in Wasp\nDESCRIPTION: This snippet shows how to declare Actions in a Wasp file. It demonstrates declaring two Actions: createTask and markTaskAsDone.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/actions.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\naction createTask {\n  fn: import { createTask } from \"@src/actions.js\"\n}\n\naction markTaskAsDone {\n  fn: import { markTaskAsDone } from \"@src/actions.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Models and Datasource in Prisma Schema\nDESCRIPTION: Example `schema.prisma` file defining a PostgreSQL datasource using an environment variable for the URL, a Prisma client generator, and two models (`User`, `Task`) with fields and a one-to-many relationship established using `@relation`. This serves as the basis for Wasp entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/prisma-file.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\\n  provider = \"postgresql\"\\n  url      = env(\"DATABASE_URL\")\\n}\\n\\ngenerator client {\\n  provider = \"prisma-client-js\"\\n}\\n\\nmodel User {\\n  id      Int        @id @default(autoincrement())\\n  tasks   Task[]\\n}\\n\\nmodel Task {\\n  id          Int        @id @default(autoincrement())\\n  description String\\n  isDone      Boolean    @default(false)\\n  user        User       @relation(fields: [userId], references: [id])\\n  userId      Int\\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Custom HTTP Errors from Query (TypeScript)\nDESCRIPTION: Demonstrates how to throw a custom `HttpError` from a Wasp query's server-side implementation in TypeScript. Includes type definition for the query function. Throwing `HttpError` allows sending specific error details (status, message, data) to the client for codes in the 4xx range.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/queries.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport { type GetAllTasks } from 'wasp/server/operations'\nimport { HttpError } from 'wasp/server'\n\nexport const getAllTasks: GetAllTasks = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Queries from the Client - JavaScript\nDESCRIPTION: Illustrates how to consume Wasp-generated query functions on the client side in JavaScript. Imports query functions from `wasp/client/operations`, then calls `getAllTasks` and `getFilteredTasks` using `await`. The optional argument object for `getFilteredTasks` specifies a filter criterion. This interface abstracts away HTTP and state management, focusing purely on function calls and returned data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/queries.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAllTasks, getFilteredTasks } from 'wasp/client/operations'\\n\\n// ...\\n\\nconst allTasks = await getAllTasks()\\nconst doneTasks = await getFilteredTasks({ isDone: true })\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Wasp (JavaScript)\nDESCRIPTION: Example of how to configure authentication in a Wasp application using the auth field in the app declaration. This shows setting up userEntity and various authentication methods including username/password, email, Google, and GitHub.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  //...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {}, // use this or email, not both\n      email: {}, // use this or usernameAndPassword, not both\n      google: {},\n      gitHub: {},\n    },\n    onAuthFailedRedirectTo: \"/someRoute\"\n  }\n}\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Implementing Wasp Queries in JavaScript\nDESCRIPTION: Provides the JavaScript implementation for the `getAllTasks` and `getFilteredTasks` queries declared in `main.wasp`. The `getAllTasks` function returns a static array of tasks. The `getFilteredTasks` function accepts an `args` object (passed from the client) containing filter criteria (e.g., `isDone`) and returns a filtered list of tasks. These functions run on the server.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/queries.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/queries.js\"\n// our \"database\"\nconst tasks = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\n// You don't need to use the arguments if you don't need them\nexport const getAllTasks = () => {\n  return tasks\n}\n\n// The 'args' object is something sent by the caller (most often from the client)\nexport const getFilteredTasks = (args) => {\n  const { isDone } = args\n  return tasks.filter((task) => task.isDone === isDone)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication UI Components with React and Wasp (TypeScript/TSX)\nDESCRIPTION: Provides example React functional components (Login, Signup, EmailVerification, RequestPasswordReset, PasswordReset) written in TSX with type safety for handling user authentication flows. It leverages `useState` with type annotations for state and errors, `useNavigate` for redirection, and functions imported from `wasp/client/auth`. Components handle typed form events, call Wasp backend functions, manage typed error states, and display confirmation messages.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/email/create-your-own-ui.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  login,\n  requestPasswordReset,\n  resetPassword,\n  signup,\n  verifyEmail,\n} from 'wasp/client/auth'\n\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\n// This will be shown when the user wants to log in\nexport function Login() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState<Error | null>(null)\n  const navigate = useNavigate()\n\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    setError(null)\n    try {\n      await login({ email, password })\n      navigate('/')\n    } catch (error: unknown) {\n      setError(error as Error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {error && <p>Error: {error.message}</p>}\n\n      <input\n        type=\"email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        placeholder=\"Email\"\n      />\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        placeholder=\"Password\"\n      />\n      <button type=\"submit\">Log In</button>\n    </form>\n  )\n}\n\n// This will be shown when the user wants to sign up\nexport function Signup() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState<Error | null>(null)\n  const [needsConfirmation, setNeedsConfirmation] = useState(false)\n\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    setError(null)\n    try {\n      await signup({ email, password })\n      setNeedsConfirmation(true)\n    } catch (error: unknown) {\n      console.error('Error during signup:', error)\n      setError(error as Error)\n    }\n  }\n\n  if (needsConfirmation) {\n    return (\n      <p>\n        Check your email for the confirmation link. If you don't see it, check\n        spam/junk folder.\n      </p>\n    )\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {error && <p>Error: {error.message}</p>}\n\n      <input\n        type=\"email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        placeholder=\"Email\"\n      />\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        placeholder=\"Password\"\n      />\n      <button type=\"submit\">Sign Up</button>\n    </form>\n  )\n}\n\n// This will be shown has clicked on the link in their\n// email to verify their email address\nexport function EmailVerification() {\n  const [error, setError] = useState<Error | null>(null)\n  const navigate = useNavigate()\n\n  async function handleClick() {\n    setError(null)\n    try {\n      // The token is passed as a query parameter\n      const token = new URLSearchParams(window.location.search).get('token')\n      if (!token) throw new Error('Token not found in URL')\n      await verifyEmail({ token })\n      navigate('/')\n    } catch (error: unknown) {\n      console.error('Error during email verification:', error)\n      setError(error as Error)\n    }\n  }\n\n  return (\n    <>\n      {error && <p>Error: {error.message}</p>}\n\n      <button onClick={handleClick}>Verify email</button>\n    </>\n  )\n}\n\n// This will be shown when the user wants to reset their password\nexport function RequestPasswordReset() {\n  const [email, setEmail] = useState('')\n  const [error, setError] = useState<Error | null>(null)\n  const [needsConfirmation, setNeedsConfirmation] = useState(false)\n\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    setError(null)\n    try {\n      await requestPasswordReset({ email })\n      setNeedsConfirmation(true)\n    } catch (error: unknown) {\n      console.error('Error during requesting reset:', error)\n      setError(error as Error)\n    }\n  }\n\n  if (needsConfirmation) {\n    return (\n      <p>\n        Check your email for the confirmation link. If you don't see it, check\n        spam/junk folder.\n      </p>\n    )\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {error && <p>Error: {error.message}</p>}\n\n      <input\n        type=\"email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        placeholder=\"Email\"\n      />\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining Basic App Structure in Wasp\nDESCRIPTION: This snippet demonstrates how to define a basic app structure in Wasp, including an app declaration, a route, and a page. It showcases the syntax for creating declarations and how they relate to different parts of a web application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/general/language.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\"\n}\n\nroute RootRoute { path: \"/\", to: DashboardPage }\n\npage DashboardPage {\n  component: import { DashboardPage } from \"@src/Dashboard.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Wasp App Definition (Wasp)\nDESCRIPTION: Sets up full-stack authentication in the Wasp DSL including spec of the user entity, authentication methods, and redirection on failure. Requires Wasp version ^0.14.0 and links to a corresponding User entity. Accepts username/password auth and redirects unauthenticated users to '/login'.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/07-auth.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\\n  wasp: {\\n    version: \"^0.14.0\"\\n  },\\n  // highlight-start\\n  title: \"TodoApp\",\\n  auth: {\\n    // Tells Wasp which entity to use for storing users.\\n    userEntity: User,\\n    methods: {\\n      // Enable username and password auth.\\n      usernameAndPassword: {}\\n    },\\n    // We'll see how this is used in a bit.\\n    onAuthFailedRedirectTo: \"/login\"\\n  }\\n  // highlight-end\\n}\\n\\n// ...\\n\n```\n\n----------------------------------------\n\nTITLE: Defining and Exposing Server-Side Resources with Setup Function (TypeScript)\nDESCRIPTION: Demonstrates resource creation and sharing in a singleton-like pattern: a resource is initialized in an asynchronous server setup function using TypeScript types, and is exposed via a getter for other server logic (such as queries). Covers both the initialization and access patterns. Inputs and outputs follow the same pattern as in the JavaScript variant, but use explicit TypeScript types for added safety and clarity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/server-config.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ServerSetupFn } from 'wasp/server'\n\nlet someResource = undefined\n\nexport const mySetupFunction: ServerSetupFn = async () => {\n  // Let's pretend functions setUpSomeResource and startSomeCronJob\n  // are implemented below or imported from another file.\n  someResource = await setUpSomeResource()\n  startSomeCronJob()  \n}\n\nexport const getSomeResource = () => someResource\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SomeQuery } from 'wasp/server/operations'\nimport { getSomeResource } from './myServerSetupCode.js'\n\n...\n\nexport const someQuery: SomeQuery<...> = async (args, context) => {\n  const someResource = getSomeResource()\n  return queryDataFromSomeResource(args, someResource)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Entity in Wasp\nDESCRIPTION: Defines the User entity with required fields for authentication in the Wasp file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/07-auth.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\n    id       Int    @id @default(autoincrement())\n    username String @unique\n    password String\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Protecting a Page with authRequired in Wasp\nDESCRIPTION: Shows how to set the authRequired property on a page declaration to restrict access to authenticated users only.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\npage MainPage {\n  component: import Main from \"@src/pages/Main\",\n  authRequired: true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Server-Side Signup Action (TypeScript)\nDESCRIPTION: This TypeScript code defines the server-side logic for a typed custom signup action. It leverages helper functions from `wasp/server/auth` for validation, ID creation, data serialization (password hashing), and user creation. It utilizes generic types (`CustomSignup`, `CustomSignupInput`, `CustomSignupOutput`) for strong typing of arguments and return values.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/username-and-pass.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/auth/signup.ts\"\nimport {\n  ensurePasswordIsPresent,\n  ensureValidPassword,\n  ensureValidUsername,\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  createUser,\n} from 'wasp/server/auth'\nimport type { CustomSignup } from 'wasp/server/operations'\n\ntype CustomSignupInput = {\n  username: string\n  password: string\n}\ntype CustomSignupOutput = {\n  success: boolean\n  message: string\n}\n\nexport const signup: CustomSignup<\n  CustomSignupInput,\n  CustomSignupOutput\n> = async (args, _context) => {\n  ensureValidUsername(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('username', args.username)\n    const providerData = await sanitizeAndSerializeProviderData<'username'>({\n      hashedPassword: args.password,\n    })\n\n    await createUser(\n      providerId,\n      providerData,\n      // Any additional data you want to store on the User entity\n      {},\n    )\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Auth Methods in Wasp App Configuration (JavaScript)\nDESCRIPTION: This Wasp code snippet (JavaScript style) configures authentication options in main.wasp. It sets the app title, the user entity, multiple authentication methods (usernameAndPassword, email, google, gitHub), and the redirect route on failed authentication. Used in the root Wasp config to enable and control authentication flows. Requires user entity (e.g., User) and Wasp app structure. Inputs/outputs are config fields for authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_16\n\nLANGUAGE: wasp\nCODE:\n```\n  title: \"My app\",\n  //...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {}, // use this or email, not both\n      email: {}, // use this or usernameAndPassword, not both\n      google: {},\n      gitHub: {},\n    },\n    onAuthFailedRedirectTo: \"/someRoute\",\n  }\n}\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Pages with Tailwind and Wasp Auth UI Components in React (TypeScript/TSX)\nDESCRIPTION: Implements login, signup, email verification, password reset request, and password reset pages using React function components written in TypeScript and TSX. Uses type annotations and the same Auth UI and layout components as JavaScript version, requiring 'wasp/client/auth', 'react-router-dom', and React types. Inputs are credentials or email; outputs are rendered forms, leveraging TypeScript's stricter type checking for component props.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  LoginForm,\n  SignupForm,\n  VerifyEmailForm,\n  ForgotPasswordForm,\n  ResetPasswordForm,\n} from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Don't have an account yet? <Link to=\"/signup\">go to signup</Link>.\n      </span>\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Forgot your password? <Link to=\"/request-password-reset\">reset it</Link>\n        .\n      </span>\n    </Layout>\n  );\n}\n\nexport function Signup() {\n  return (\n    <Layout>\n      <SignupForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </Layout>\n  );\n}\n\nexport function EmailVerification() {\n  return (\n    <Layout>\n      <VerifyEmailForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        If everything is okay, <Link to=\"/login\">go to login</Link>\n      </span>\n    </Layout>\n  );\n}\n\nexport function RequestPasswordReset() {\n  return (\n    <Layout>\n      <ForgotPasswordForm />\n    </Layout>\n  );\n}\n\nexport function PasswordReset() {\n  return (\n    <Layout>\n      <ResetPasswordForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        If everything is okay, <Link to=\"/login\">go to login</Link>\n      </span>\n    </Layout>\n  );\n}\n\n// A layout component to center the content\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"w-full h-full bg-white\">\n      <div className=\"min-w-full min-h-[75vh] flex items-center justify-center\">\n        <div className=\"w-full h-full max-w-sm p-5 bg-white\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Queries in TypeScript\nDESCRIPTION: Demonstrates the TypeScript implementation of getAllTasks and getFilteredTasks queries, including type definitions and usage of Wasp-generated types.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/queries.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetAllTasks, type GetFilteredTasks } from 'wasp/server/operations'\n\ntype Task = {\n  id: number\n  description: string\n  isDone: boolean\n}\n\nconst tasks: Task[] = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\nexport const getAllTasks: GetAllTasks<void, Task[]> = () => {\n  return tasks\n}\n\nexport const getFilteredTasks: GetFilteredTasks<\n  Pick<Task, 'isDone'>,\n  Task[]\n> = (args) => {\n  const { isDone } = args\n  return tasks.filter((task) => task.isDone === isDone)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing updateTask Action Server Logic in TypeScript\nDESCRIPTION: Provides the TypeScript server-side implementation for the `updateTask` action. It utilizes Wasp's generated types (`UpdateTask`, `Task`) for type safety. The function accepts an object with `id` and `isDone` (typed using `UpdateTaskPayload`, derived from the `Task` entity) and the Wasp `context`. It updates the task in the database using `context.entities.Task.update`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/06-actions.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/actions.ts\"\nimport { CreateTask, UpdateTask } from 'wasp/server/operations'\n\n// ...\n\ntype UpdateTaskPayload = Pick<Task, 'id' | 'isDone'>\n\nexport const updateTask: UpdateTask<UpdateTaskPayload, Task> = async (\n  { id, isDone },\n  context\n) => {\n  return context.entities.Task.update({\n    where: { id },\n    data: {\n      isDone: isDone,\n    },\n  })\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring a Query in Wasp\nDESCRIPTION: This snippet shows how to declare a 'getTasks' query in the main.wasp file. It specifies the implementation location and the entities it interacts with.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/05-queries.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nquery getTasks {\n  fn: import { getTasks } from \"@src/queries\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authenticated Task Queries in JavaScript/TypeScript\nDESCRIPTION: Query implementation that checks user authentication and retrieves tasks specific to the logged-in user. Includes error handling for unauthorized access and proper task filtering.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/07-auth.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const getTasks = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.findMany({\n    where: { user: { id: context.user.id } },\n    orderBy: { id: 'asc' },\n  })\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from 'wasp/entities'\nimport { HttpError } from 'wasp/server'\nimport { GetTasks } from 'wasp/server/operations'\n\nexport const getTasks: GetTasks<void, Task[]> = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.findMany({\n    where: { user: { id: context.user.id } },\n    orderBy: { id: 'asc' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Auth Hooks in Wasp Configuration\nDESCRIPTION: This snippet shows how to declare authentication hooks in the Wasp configuration file. It includes declarations for onBeforeSignup, onAfterSignup, onBeforeOAuthRedirect, onBeforeLogin, and onAfterLogin hooks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/auth-hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  auth: {\n    userEntity: User,\n    methods: {\n      ...\n    },\n    onBeforeSignup: import { onBeforeSignup } from \"@src/auth/hooks\",\n    onAfterSignup: import { onAfterSignup } from \"@src/auth/hooks\",\n    onBeforeOAuthRedirect: import { onBeforeOAuthRedirect } from \"@src/auth/hooks\",\n    onBeforeLogin: import { onBeforeLogin } from \"@src/auth/hooks\",\n    onAfterLogin: import { onAfterLogin } from \"@src/auth/hooks\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Wasp Configuration\nDESCRIPTION: Sets up authentication in the main Wasp configuration file, specifying the User entity and username/password authentication method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/07-auth.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  // highlight-start\n  title: \"TodoApp\",\n  auth: {\n    // Tells Wasp which entity to use for storing users.\n    userEntity: User,\n    methods: {\n      // Enable username and password auth.\n      usernameAndPassword: {}\n    },\n    // We'll see how this is used in a bit.\n    onAuthFailedRedirectTo: \"/login\"\n  }\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Form with React and Wasp Auth (TypeScript)\nDESCRIPTION: Implements a signup form using React with TypeScript, supporting type-safe state and error handling. Leverages 'wasp/client/auth' for authentication, React's hooks, and react-router-dom. The handleSubmit function validates and submits the form data to Wasp's signup and login actions, updating navigation on success. Requires @types/react and related typings for correctness.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/username-and-pass.md#2025-04-22_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\nimport { signup, login } from 'wasp/client/auth'\n\nimport { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\n\nexport function Signup() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState<Error | null>(null)\n  const history = useHistory()\n\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    try {\n      await signup({\n        username,\n        password,\n      })\n      await login(username, password)\n      history.push(\"/\")\n    } catch (error: unknown) {\n      setError(error as Error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* ... */}\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Button in React\nDESCRIPTION: Demonstrates how to create a logout button using the logout action provided by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { logout } from 'wasp/client/auth'\n\nconst LogoutButton = () => {\n  return <button onClick={logout}>Logout</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Wasp Actions on the Client (JavaScript)\nDESCRIPTION: Demonstrates importing and calling asynchronous Wasp Actions (`createTask`, `markTasAsDone`) from the client-side using JavaScript. Assumes Wasp handles authentication implicitly in the background if the user is logged in. Requires importing specific actions from `wasp/client/operations`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { createTask, markTasAsDone } from 'wasp/client/operations'\n\n// ...\n\nconst newTask = await createTask({ description: 'Learn TypeScript' })\nawait markTasAsDone({ id: 1 })\n```\n\n----------------------------------------\n\nTITLE: Defining User Model for Authentication (Prisma)\nDESCRIPTION: Defines a simple User model in Prisma, compatible with Wasp authentication flows. This model must be present in schema.prisma to allow Wasp's userEntity reference and enable login and signup with username and password. The id field is integer-based and auto-incremented, as required by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/username-and-pass.md#2025-04-22_snippet_12\n\nLANGUAGE: Prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Query Operations in TypeScript\nDESCRIPTION: Shows how to import the generated query operation and its type definition on both client and server sides in a TypeScript application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/queries.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Use it on the client\nimport { getFoo } from 'wasp/client/operations'\n\n// Use it on the server\nimport { getFoo } from 'wasp/server/operations'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetFoo } from 'wasp/server/operations'\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth in Wasp App Declaration\nDESCRIPTION: Demonstrates how to configure authentication in the main Wasp app declaration, including setting up user entity and auth methods.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  //...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {}, // use this or email, not both\n      email: {}, // use this or usernameAndPassword, not both\n      google: {},\n      gitHub: {},\n    },\n    onAuthFailedRedirectTo: \"/someRoute\"\n  }\n}\n\n//...\n```\n\n----------------------------------------\n\nTITLE: JavaScript Google Auth Implementation\nDESCRIPTION: JavaScript implementation of Google authentication configuration and user signup fields mapping\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/google.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const userSignupFields = {\n  username: () => 'hardcoded-username',\n  displayName: (data) => data.profile.name,\n}\n\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migrations in Wasp\nDESCRIPTION: Command to create a new database migration after making changes to the Prisma schema. The migration will be stored in the migrations directory as SQL commands.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/database.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Wasp\nDESCRIPTION: Adds authentication configuration to the Wasp application, specifying the User entity and enabling username/password authentication. This tells Wasp how to handle user authentication throughout the application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/07-auth.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  // highlight-start\n  title: \"TodoApp\",\n  auth: {\n    // Tells Wasp which entity to use for storing users.\n    userEntity: User,\n    methods: {\n      // Enable username and password auth.\n      usernameAndPassword: {}\n    },\n    // We'll see how this is used in a bit.\n    onAuthFailedRedirectTo: \"/login\"\n  }\n  // highlight-end\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using the useQuery Hook in React (JavaScript)\nDESCRIPTION: Example of using the `useQuery` hook from `wasp/client/operations` within a React component (JavaScript/JSX) to make query calls reactive. The hook wraps `react-query`'s `useQuery`, automatically managing query keys. It returns data and error states for the query.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/queries.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useQuery, getAllTasks, getFilteredTasks } from 'wasp/client/operations'\n\nconst MainPage = () => {\n  const { data: allTasks, error: error1 } = useQuery(getAllTasks)\n  const { data: doneTasks, error: error2 } = useQuery(getFilteredTasks, {\n    isDone: true,\n  })\n\n  if (error1 !== null || error2 !== null) {\n    return <div>There was an error</div>\n  }\n\n  return (\n    <div>\n      <h2>All Tasks</h2>\n      {allTasks && allTasks.length > 0\n        ? allTasks.map((task) => <Task key={task.id} {...task} />)\n        : 'No tasks'}\n\n      <h2>Finished Tasks</h2>\n      {doneTasks && doneTasks.length > 0\n        ? doneTasks.map((task) => <Task key={task.id} {...task} />)\n        : 'No finished tasks'}\n    </div>\n  )\n}\n\nconst Task = ({ description, isDone }: Task) => {\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n    </div>\n  )\n}\n\nexport default MainPage\n```\n\n----------------------------------------\n\nTITLE: Implementing Wasp Actions with Type Safety in TypeScript (Node.js)\nDESCRIPTION: Provides a TypeScript implementation for the `createTask` and `markTaskAsDone` Actions. It utilizes Wasp-generated types (`CreateTask`, `MarkTaskAsDone`) for strong typing of input arguments (`args`) and return values. These generic types accept `Input` and `Output` type parameters. This enhances developer experience and ensures type safety across the full stack. The implementation logic mirrors the JavaScript version, interacting with an in-memory task list.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"src/actions.ts\"\nimport { type CreateTask, type MarkTaskAsDone } from 'wasp/server/operations'\n\ntype Task = {\n  id: number\n  description: string\n  isDone: boolean\n}\n\n// our \"database\"\nlet nextId = 4\nconst tasks = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\n// You don't need to use the arguments if you don't need them\nexport const createTask: CreateTask<Pick<Task, 'description'>, Task> = (\n  args\n) => {\n  const newTask = {\n    id: nextId,\n    isDone: false,\n    description: args.description,\n  }\n  nextId += 1\n  tasks.push(newTask)\n  return newTask\n}\n\n// The 'args' object is something sent by the caller (most often from the client)\nexport const markTaskAsDone: MarkTaskAsDone<Pick<Task, 'id'>, void> = (\n  args\n) => {\n  const task = tasks.find((task) => task.id === args.id)\n  if (!task) {\n    // We'll show how to properly handle such errors later\n    return\n  }\n  task.isDone = true\n}\n```\n```\n\n----------------------------------------\n\nTITLE: TypeScript Action Implementation\nDESCRIPTION: Example of implementing a typed Action function in TypeScript with input and output type specifications.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateFoo } from 'wasp/server/operations'\n\ntype Foo = // ...\n\nexport const createFoo: CreateFoo<{ bar: string }, Foo> = (args, context) => {\n  // implementation\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring a CRUD with All Available Options in Wasp\nDESCRIPTION: This snippet demonstrates a complex CRUD declaration for Tasks entity, showing configuration for multiple operations including public access and custom implementation overrides.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/crud.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\ncrud Tasks { // crud name here is \"Tasks\"\n  entity: Task,\n  operations: {\n    getAll: {\n      isPublic: true, // optional, defaults to false\n    },\n    get: {},\n    create: {\n      overrideFn: import { createTask } from \"@server/tasks.js\", // optional\n    },\n    update: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Main Route and Page in Wasp (TypeScript)\nDESCRIPTION: Defines a root route and a MainPage using the Wasp DSL tailored for a TypeScript project. Like the JavaScript variant, it imports the React MainPage component, but expects it at src/MainPage.tsx. This enables type-safe page registration in Wasp for TypeScript projects and is suitable for apps using TypeScript throughout.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/03-pages.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  // We specify that the React implementation of the page is exported from\n  // `src/MainPage.tsx`. This statement uses standard JS import syntax.\n  // Use `@src` to reference files inside the `src` folder.\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Wasp App Configuration Reference\nDESCRIPTION: Full reference example showing all possible configuration options in a Wasp app declaration including auth, client, server, database, email, and WebSocket configurations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/customizing-app.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"ToDo App\",\n  head: [\n    \"<link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\\\" />\"\n  ],\n  auth: {\n    // ...\n  },\n  client: {\n    // ...\n  },\n  server: {\n    // ...\n  },\n  db: {\n    // ...\n  },\n  emailSender: {\n    // ...\n  },\n  webSocket: {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Wasp Query (TypeScript)\nDESCRIPTION: Implements the server-side logic for the `getTasks` query in `src/queries.ts` using TypeScript. It leverages Wasp-generated types (`Task`, `GetTasks`) for full-stack type safety. The function fetches all `Task` entities using the injected Prisma client (`context.entities.Task`) and returns them as an array (`Task[]`), ordered by ID.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/05-queries.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/queries.ts\"\nimport { Task } from 'wasp/entities'\nimport { type GetTasks } from 'wasp/server/operations'\n\nexport const getTasks: GetTasks<void, Task[]> = async (args, context) => {\n  return context.entities.Task.findMany({\n    orderBy: { id: 'asc' },\n  })\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Client/Server Action Usage in JavaScript\nDESCRIPTION: Shows how to import and use the Action on both client and server side in JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// Use it on the client\nimport { createFoo } from 'wasp/client/operations'\n\n// Use it on the server\nimport { createFoo } from 'wasp/server/operations'\n```\n\n----------------------------------------\n\nTITLE: Implementing createTask Action in TypeScript\nDESCRIPTION: This snippet shows the TypeScript implementation of the 'createTask' Action. It includes type annotations for the function arguments and return value, providing full-stack type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/06-actions.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from 'wasp/entities'\nimport { CreateTask } from 'wasp/server/operations'\n\ntype CreateTaskPayload = Pick<Task, 'description'>\n\nexport const createTask: CreateTask<CreateTaskPayload, Task> = async (\n  args,\n  context\n) => {\n  return context.entities.Task.create({\n    data: { description: args.description },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Queries in JavaScript\nDESCRIPTION: Shows the implementation of getAllTasks and getFilteredTasks queries in JavaScript. It includes a mock database and query functions that operate on it.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/queries.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tasks = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\nexport const getAllTasks = () => {\n  return tasks\n}\n\nexport const getFilteredTasks = (args) => {\n  const { isDone } = args\n  return tasks.filter((task) => task.isDone === isDone)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication UI Components in JavaScript/React\nDESCRIPTION: A complete set of React components for handling authentication flows in a Wasp application. Includes Login, Signup, EmailVerification, RequestPasswordReset, and PasswordReset components with error handling and form management using React hooks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/email/create-your-own-ui.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  login,\n  requestPasswordReset,\n  resetPassword,\n  signup,\n  verifyEmail,\n} from 'wasp/client/auth'\n\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\nexport function Login() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState(null)\n  const navigate = useNavigate()\n\n  async function handleSubmit(event) {\n    event.preventDefault()\n    setError(null)\n    try {\n      await login({ email, password })\n      navigate('/')\n    } catch (error) {\n      setError(error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {error && <p>Error: {error.message}</p>}\n\n      <input\n        type=\"email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        placeholder=\"Email\"\n      />\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        placeholder=\"Password\"\n      />\n      <button type=\"submit\">Log In</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query in TypeScript\nDESCRIPTION: TypeScript implementation of the getFoo query with type definitions for input arguments and return value.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/queries.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetFoo } from \"@wasp/queries/types\";\n\ntype Foo = // ...\n\nexport const getFoo: GetFoo<{ id: number }, Foo> = (args, context) => {\n  // implementation\n};\n```\n\n----------------------------------------\n\nTITLE: Inferring Wasp Action Return Type using `satisfies` in TypeScript\nDESCRIPTION: Demonstrates using the TypeScript `satisfies` keyword to infer the return type of a Wasp Action implementation (here assuming a `GetFoo` type generated by Wasp). This approach ensures the function implementation adheres to the expected Action signature, including context typing (`context.entities.Foo`), while allowing TypeScript to automatically determine the specific return type (`{ newFoo: Foo, message: string, returnedAt: Date }`) based on the returned object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst createFoo = (async (_args, context) => {\n  const foo = await context.entities.Foo.create()\n  return {\n    newFoo: foo,\n    message: \"Here's your foo!\",\n    returnedAt: new Date(),\n  }\n}) satisfies GetFoo\n```\n```\n\n----------------------------------------\n\nTITLE: Defining User Model in Prisma for Wasp Authentication\nDESCRIPTION: Defines the 'User' model in Prisma schema, which acts as the application's primary user entity for business logic and authentication in Wasp. The model can be extended with any additional fields specific to the app's requirements. Required for Wasp to properly link authentication information to each user.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_17\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  // Any other fields you want to store about the user\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Typed Query in Wasp - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to type the 'getFoo' query implementation using 'GetFoo', a Wasp-generated type. The function is exported with an explicit type annotation, accepting 'args' of type '{ id: number }' and returning a custom type 'Foo'. This enables full static type checking of the query function. Dependencies include the Wasp server operations package and local type definitions. The input and output types must match those provided to the type arguments, ensuring implementation/contract correctness.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/queries.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetFoo } from 'wasp/server/operations'\n\ntype Foo = // ...\n\nexport const getFoo: GetFoo<{ id: number }, Foo> = (args, context) => {\n  // implementation\n};\n```\n\n----------------------------------------\n\nTITLE: Using CRUD Operations in Client Code (JavaScript)\nDESCRIPTION: Demonstrates how to import and use CRUD operations in a JavaScript client component. Shows usage patterns for querying data and using mutations with React hooks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/crud.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tasks } from 'wasp/client/crud'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data } = Tasks.getAll.useQuery()\nconst { data } = Tasks.get.useQuery({ id: 1 })\nconst createAction = Tasks.create.useAction()\nconst updateAction = Tasks.update.useAction()\nconst deleteAction = Tasks.delete.useAction()\n```\n\n----------------------------------------\n\nTITLE: Implementing Typed Queries in TypeScript\nDESCRIPTION: Shows how to implement queries with full type safety in TypeScript, including input/output type definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/queries.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetAllTasks, type GetFilteredTasks } from 'wasp/server/operations'\n\ntype Task = {\n  id: number\n  description: string\n  isDone: boolean\n}\n\nconst tasks: Task[] = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\nexport const getAllTasks: GetAllTasks<void, Task[]> = () => {\n  return tasks\n}\n\nexport const getFilteredTasks: GetFilteredTasks<\n  Pick<Task, 'isDone'>,\n  Task[]\n> = (args) => {\n  const { isDone } = args\n  return tasks.filter((task) => task.isDone === isDone)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Full-Stack Web Application with Wasp Configuration\nDESCRIPTION: This code demonstrates how to create a Todo application using Wasp's declarative configuration. It sets up authentication, routing, and data queries while referencing external React and Node.js files. This approach allows developers to focus on business logic while Wasp handles the integration between frontend and backend.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// file: main.wasp\n\napp todoApp {\n  title: \"ToDo App\",  // visible in the browser tab\n  wasp: { version: \"^0.15.0\" },\n  auth: { // full-stack auth out-of-the-box\n    userEntity: User, methods: { email: {...} }\n  }\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  authRequired: true, // Limit access to logged-in users.\n  component: import Main from \"@client/Main.tsx\" // Your React code.\n}\n\nquery getTasks {\n  fn: import { getTasks } from \"@server/tasks.js\", // Your Node.js code.\n  entities: [Task] // Automatic cache invalidation.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Authentication in React Components\nDESCRIPTION: Demonstrates using the useAuth hook in a React component to handle authenticated and non-authenticated states, including login/signup navigation and logout functionality.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAuth, logout } from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\nimport Todo from '../Todo'\n\nexport function Main() {\n  const { data: user } = useAuth()\n\n  if (!user) {\n    return (\n      <span>\n        Please <Link to=\"/login\">login</Link> or{' '}\n        <Link to=\"/signup\">sign up</Link>.\n      </span>\n    )\n  } else {\n    return (\n      <>\n        <button onClick={logout}>Logout</button>\n        <Todo />\n      </>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding CRUD Create Action for Task with Types - TypeScript (Node.js)\nDESCRIPTION: This TypeScript module provides a strongly-typed version of the custom \"createTask\" override for the CRUD create operation, using generics from the Wasp framework for type safety. It checks user authentication, destructures the input, and creates a Task tied to the current user. The use of \"Tasks.CreateAction\" enforces correct types for input and output, ensuring reliability when customizing CRUD implementation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/crud.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { type Tasks } from 'wasp/server/crud'\nimport { type Task } from 'wasp/entities'\nimport { HttpError } from 'wasp/server'\n\ntype CreateTaskInput = { description: string; isDone: boolean }\n\nexport const createTask: Tasks.CreateAction<CreateTaskInput, Task> = async (\n  args,\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(401, 'User not authenticated.')\n  }\n\n  const { description, isDone } = args\n  const { Task } = context.entities\n\n  return await Task.create({\n    data: {\n      description,\n      isDone,\n      // highlight-start\n      // Connect the task to the user that is creating it\n      user: {\n        connect: {\n          id: context.user.id,\n        },\n      },\n      // highlight-end\n    },\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using useQuery Hook in React Component (JavaScript)\nDESCRIPTION: Example of using the useQuery hook to fetch all tasks and filtered tasks in a React component. The hook is used to make reactive queries and handle loading and error states.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/queries.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useQuery, getAllTasks, getFilteredTasks } from 'wasp/client/operations'\n\nconst MainPage = () => {\n  const { data: allTasks, error: error1 } = useQuery(getAllTasks)\n  const { data: doneTasks, error: error2 } = useQuery(getFilteredTasks, {\n    isDone: true,\n  })\n\n  if (error1 !== null || error2 !== null) {\n    return <div>There was an error</div>\n  }\n\n  return (\n    <div>\n      <h2>All Tasks</h2>\n      {allTasks && allTasks.length > 0\n        ? allTasks.map((task) => <Task key={task.id} {...task} />)\n        : 'No tasks'}\n\n      <h2>Finished Tasks</h2>\n      {doneTasks && doneTasks.length > 0\n        ? doneTasks.map((task) => <Task key={task.id} {...task} />)\n        : 'No finished tasks'}\n    </div>\n  )\n}\n\nconst Task = ({ description, isDone }: Task) => {\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n    </div>\n  )\n}\n\nexport default MainPage\n```\n\n----------------------------------------\n\nTITLE: Declaring Wasp Actions\nDESCRIPTION: This snippet demonstrates how to declare Actions named `createTask` and `markTaskAsDone` within a `main.wasp` file. Each `action` block links the declared action to its implementation function located in `@src/actions.js` using the `fn` property and an `import` statement. Wasp uses this declaration to generate server-side and client-side code for invoking the action.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\n// ...\n\naction createTask {\n  fn: import { createTask } from \"@src/actions.js\"\n}\n\naction markTaskAsDone {\n  fn: import { markTaskAsDone } from \"@src/actions.js\"\n}\n\n```\n```\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\n// ...\n\naction createTask {\n  fn: import { createTask } from \"@src/actions.js\"\n}\n\naction markTaskAsDone {\n  fn: import { markTaskAsDone } from \"@src/actions.js\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Unit Testing a Typed Task Checker Function with Vitest - TypeScript\nDESCRIPTION: Implements a Vitest test for the TypeScript version of areThereAnyTasks, leveraging TypeScript's type checking. Depends on Vitest and the function defined in 'helpers.ts'. Asserts that the function correctly identifies an empty array, intended for automated test pipelines.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/testing.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { test, expect } from \"vitest\";\n\nimport { areThereAnyTasks } from \"./helpers\";\n\ntest(\"areThereAnyTasks\", () => {\n  expect(areThereAnyTasks([])).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Entity Implementation in Actions\nDESCRIPTION: Implementation of Actions using Entities with Prisma API integration in TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/actions.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateTask, type MarkTaskAsDone } from 'wasp/server/operations'\nimport { type Task } from 'wasp/entities'\n\nexport const createTask: CreateTask<Pick<Task, 'description'>, Task> = async (\n  args,\n  context\n) => {\n  const newTask = await context.entities.Task.create({\n    data: {\n      description: args.description,\n      isDone: false,\n    },\n  })\n  return newTask\n}\n\nexport const markTaskAsDone: MarkTaskAsDone<Pick<Task, 'id'>, void> = async (\n  args,\n  context\n) => {\n  await context.entities.Task.update({\n    where: { id: args.id },\n    data: { isDone: true },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Validating userSignupFields for Signup (JavaScript)\nDESCRIPTION: Implements userSignupFields using the defineUserSignupFields helper from Wasp in JavaScript, adding and validating an 'address' field. The function enforces type and length validation for the address and throws errors for invalid data. Depends on wasp/server/auth, suitable for basic or advanced field-level validation logic. Expected input is signup data; output is the validated address string.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Server Resource Management Example\nDESCRIPTION: Demonstration of storing and accessing server resources using setup functions and queries in both JavaScript and TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/server-config.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet someResource = undefined\n\nexport const mySetupFunction = async () => {\n  someResource = await setUpSomeResource()\n  startSomeCronJob()\n}\n\nexport const getSomeResource = () => someResource\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSomeResource } from './myServerSetupCode.js'\n\n...\n\nexport const someQuery = async (args, context) => {\n  const someResource = getSomeResource()\n  return queryDataFromSomeResource(args, someResource)\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ServerSetupFn } from 'wasp/server'\n\nlet someResource = undefined\n\nexport const mySetupFunction: ServerSetupFn = async () => {\n  someResource = await setUpSomeResource()\n  startSomeCronJob()  \n}\n\nexport const getSomeResource = () => someResource\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SomeQuery } from 'wasp/server/operations'\nimport { getSomeResource } from './myServerSetupCode.js'\n\n...\n\nexport const someQuery: SomeQuery<...> = async (args, context) => {\n  const someResource = getSomeResource()\n  return queryDataFromSomeResource(args, someResource)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic App Configuration in main.wasp (JS/TS)\nDESCRIPTION: Illustrates the default content of the `main.wasp` file generated by `wasp new`. This configuration is identical for both JavaScript and TypeScript projects. It defines the `app` (setting Wasp version and browser title), a default `route` (mapping the root path '/' to a page), and a `page` (linking the route to a React component imported from the `src` directory, e.g., `@src/MainPage` which resolves to either `.jsx` or `.tsx`).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/02-project-structure.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\\n  wasp: {\\n    version: \"^0.14.0\" // Pins the version of Wasp to use.\\n  },\\n  title: \"TodoApp\" // Used as the browser tab title. Note that all strings in Wasp are double quoted!\\n}\\n\\nroute RootRoute { path: \"/\", to: MainPage }\\npage MainPage {\\n  // We specify that the React implementation of the page is exported from\\n  // `src/MainPage.jsx`. This statement uses standard JS import syntax.\\n  // Use `@src` to reference files inside the `src` folder.\\n  component: import { MainPage } from \"@src/MainPage\"\\n}\n```\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\\n  wasp: {\\n    version: \"^0.14.0\" // Pins the version of Wasp to use.\\n  },\\n  title: \"TodoApp\" // Used as the browser tab title. Note that all strings in Wasp are double quoted!\\n}\\n\\nroute RootRoute { path: \"/\", to: MainPage }\\npage MainPage {\\n  // We specify that the React implementation of the page is exported from\\n  // `src/MainPage.tsx`. This statement uses standard JS import syntax.\\n  // Use `@src` to reference files inside the `src` folder.\\n  component: import { MainPage } from \"@src/MainPage\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing SignupForm with Additional Fields in TypeScript\nDESCRIPTION: TypeScript version of adding custom fields to the SignupForm component, showing both declarative field definitions and programmatic render functions for complex form elements.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/overview.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  SignupForm,\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Email Sign-up in TypeScript\nDESCRIPTION: TypeScript implementation of a custom email sign-up action with proper type definitions for inputs and outputs. Includes validation, user creation, and email verification functionality.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/advanced/custom-auth-actions.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\nimport {\n  createEmailVerificationLink,\n  createProviderId,\n  createUser,\n  ensurePasswordIsPresent,\n  ensureValidEmail,\n  ensureValidPassword,\n  findAuthIdentity,\n  getProviderData,\n  sanitizeAndSerializeProviderData,\n  sendEmailVerificationEmail,\n} from 'wasp/server/auth'\nimport type { CustomSignup } from 'wasp/server/operations'\n\ntype CustomSignupInput = {\n  email: string\n  password: string\n}\ntype CustomSignupOutput = {\n  success: boolean\n  message: string\n}\n\nexport const signup: CustomSignup<\n  CustomSignupInput,\n  CustomSignupOutput\n> = async (args, _context) => {\n  ensureValidEmail(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('email', args.email)\n    const existingAuthIdentity = await findAuthIdentity(providerId)\n\n    let providerData\n\n    if (existingAuthIdentity) {\n      // User already exists, handle accordingly\n\n      // For example, throw an error or return a message\n      throw new HttpError(400, 'Email already exists.')\n\n      // Or, another example, you can check if the user is already\n      // verified and re-send the verification email if not\n      providerData = getProviderData<'email'>(existingAuthIdentity.providerData)\n      if (providerData.isEmailVerified)\n        throw new HttpError(400, 'Email already verified.')\n    }\n\n    if (!providerData) {\n      providerData = await sanitizeAndSerializeProviderData<'email'>({\n        // The provider will hash the password for us, so we don't need to do it here.\n        hashedPassword: args.password,\n        isEmailVerified: false,\n        emailVerificationSentAt: null,\n        passwordResetSentAt: null,\n      })\n      await createUser(\n        providerId,\n        providerData,\n        // Any additional data you want to store on the User entity\n        {}\n      )\n    }\n\n    // Verification link links to a client route e.g. /email-verification\n    const verificationLink = await createEmailVerificationLink(\n      args.email,\n      '/email-verification'\n    )\n    try {\n      await sendEmailVerificationEmail(args.email, {\n        from: {\n          name: 'My App Postman',\n          email: 'hello@itsme.com',\n        },\n        to: args.email,\n        subject: 'Verify your email',\n        text: `Click the link below to verify your email: ${verificationLink}`,\n        html: `\n                      <p>Click the link below to verify your email</p>\n                      <a href=\"${verificationLink}\">Verify email</a>\n                  `,\n      })\n    } catch (e: unknown) {\n      console.error('Failed to send email verification email:', e)\n      throw new HttpError(500, 'Failed to send email verification email.')\n    }\n  } catch (e: any) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Actions on the Client in TypeScript\nDESCRIPTION: Shows how to import and call Actions on the client-side in TypeScript, highlighting automatic type inference for return values and payload type-checking.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTask, markTaskAsDone } from 'wasp/client/operations'\n\n// TypeScript automatically infers the return values and type-checks\n// the payloads.\nconst newTask = await createTask({ description: 'Keep learning TypeScript' })\nawait markTaskAsDone({ id: 1 })\n```\n\n----------------------------------------\n\nTITLE: Using Queries from the Client with Type Safety - TypeScript\nDESCRIPTION: Demonstrates calling query functions from the client in TypeScript with automatic type inference, ensuring arguments and results are type-checked as specified by Wasp's generated types. Imports functions from `wasp/client/operations` and invokes them with expected parameters. This approach leverages TypeScript to catch errors at compile time and provides confidence in the correctness of payloads and responses.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/queries.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAllTasks, getFilteredTasks } from 'wasp/client/operations'\\n\\n// TypeScript automatically infers the return values and type-checks\\n// the payloads.\\nconst allTasks = await getAllTasks()\\nconst doneTasks = await getFilteredTasks({ isDone: true })\\n\n```\n\n----------------------------------------\n\nTITLE: Detailed Email Authentication Configuration in Wasp\nDESCRIPTION: This snippet shows a more detailed configuration of email authentication, including user signup fields, email sender details, and email verification and password reset options.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/email.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  title: \"My app\",\n  // ...\n\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        userSignupFields: import { userSignupFields } from \"@src/auth.js\",\n        fromField: {\n          name: \"My App\",\n          email: \"hello@itsme.com\"\n        },\n        emailVerification: {\n          clientRoute: EmailVerificationRoute,\n          getEmailContentFn: import { getVerificationEmailContent } from \"@src/auth/email.js\",\n        },\n        passwordReset: {\n          clientRoute: PasswordResetRoute,\n          getEmailContentFn: import { getPasswordResetEmailContent } from \"@src/auth/email.js\",\n        },\n      },\n    },\n    onAuthFailedRedirectTo: \"/someRoute\"\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Todo List React Component with Query - TypeScript (TSX)\nDESCRIPTION: Creates a typed React Todo component that fetches and displays tasks using useQuery from Wasp's client operations. Expects props as an empty object and leverages TypeScript for better type safety. Intended for clear demonstration of testability and for maximum compatibility with TypeScript-based applications.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/testing.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQuery, getTasks } from \"wasp/client/operations\";\n\nconst Todo = (_props: {}) => {\n  const { data: tasks } = useQuery(getTasks);\n\n  return (\n    <ul>\n      {tasks &&\n        tasks.map((task) => (\n          <li key={task.id}>\n            <input type=\"checkbox\" value={task.isDone} />\n            {task.description}\n          </li>\n        ))}\n    </ul>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Calling Wasp Actions on the Server (JavaScript)\nDESCRIPTION: Explains how to call Wasp Actions from the server-side in JavaScript. This requires importing the actions from `wasp/server/operations` instead of the client path. For authenticated actions, a context object containing the authenticated `user` must be explicitly passed as the second argument.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { createTask, markTasAsDone } from 'wasp/server/operations'\n\nconst user = // Get an AuthUser object, e.g., from context.user\n\nconst newTask = await createTask(\n  { description: 'Learn TypeScript' },\n  { user },\n)\nawait markTasAsDone({ id: 1 }, { user })\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Methods and Redirects in Wasp (Data Syntax Variant 1)\nDESCRIPTION: This Wasp snippet defines application-level authentication configuration using compact dictionary syntax. It configures the app title, authentication entity, supported methods (username/password, email, Google, GitHub), and the redirect route for failed authentication. Prerequisites: Wasp application, user entity defined. Inputs include dictionary fields for userEntity, methods, and redirect paths.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_16\n\nLANGUAGE: wasp\nCODE:\n```\n  title: \"My app\",\n  //...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {}, // use this or email, not both\n      email: {}, // use this or usernameAndPassword, not both\n      google: {},\n      gitHub: {},\n    },\n    onAuthFailedRedirectTo: \"/someRoute\",\n  }\n}\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Fetch and Filter Queries with Type Safety - TypeScript (NodeJS)\nDESCRIPTION: Implements the query logic for `getAllTasks` and `getFilteredTasks` in TypeScript, adding explicit type definitions for inputs and outputs. Dependency on types auto-generated by Wasp (`GetAllTasks`, `GetFilteredTasks`) enables type-checked usage. The `Task` type describes items in an in-memory array. Queries are exported for integration with Wasp's generated infrastructure. Detailed typing means TypeScript tools validate argument and return value structures.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/queries.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetAllTasks, type GetFilteredTasks } from 'wasp/server/operations'\\n\\ntype Task = {\\n  id: number\\n  description: string\\n  isDone: boolean\\n}\\n\\n// our \"database\"\\nconst tasks: Task[] = [\\n  { id: 1, description: 'Buy some eggs', isDone: true },\\n  { id: 2, description: 'Make an omelette', isDone: false },\\n  { id: 3, description: 'Eat breakfast', isDone: false },\\n]\\n\\n// You don't need to use the arguments if you don't need them\\nexport const getAllTasks: GetAllTasks<void, Task[]> = () => {\\n  return tasks\\n}\\n\\n// The 'args' object is something sent by the caller (most often from the client)\\nexport const getFilteredTasks: GetFilteredTasks<\\n  Pick<Task, 'isDone'>,\\n  Task[]\\n> = (args) => {\\n  const { isDone } = args\\n  return tasks.filter((task) => task.isDone === isDone)\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Wasp Query (JavaScript)\nDESCRIPTION: Implements the server-side logic for the `getTasks` query in `src/queries.js`. The function receives arguments (`args`) and a `context` object injected by Wasp, containing the Prisma client (`context.entities.Task`). It uses `findMany` to fetch all tasks, ordered by ID.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/05-queries.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/queries.js\"\nexport const getTasks = async (args, context) => {\n  return context.entities.Task.findMany({\n    orderBy: { id: 'asc' },\n  })\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Queries with Entities in Wasp File\nDESCRIPTION: Shows how to declare Wasp queries in the `main.wasp` file and associate them with data model entities. The `entities` array lists the entities (e.g., `Task`) that the query implementation needs access to. These entities will be injected into the query's context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/queries.md#2025-04-22_snippet_13\n\nLANGUAGE: wasp\nCODE:\n```\nquery getAllTasks {\n  fn: import { getAllTasks } from \"@src/queries.js\",\n  entities: [Task]\n}\n\nquery getFilteredTasks {\n  fn: import { getFilteredTasks } from \"@src/queries.js\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Wasp Actions in main.wasp\nDESCRIPTION: Defines two Wasp Actions, `createTask` and `markTaskAsDone`, within the `main.wasp` file. Each `action` block specifies the implementation function (`fn`) to be imported from a corresponding JavaScript/TypeScript file (`@src/actions.js` or `@src/actions.ts`). This declaration registers the actions with Wasp, which then generates necessary client and server code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\n// ...\n\naction createTask {\n  fn: import { createTask } from \"@src/actions.js\"\n}\n\naction markTaskAsDone {\n  fn: import { markTaskAsDone } from \"@src/actions.js\"\n}\n\n```\n```\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\n// ...\n\naction createTask {\n  fn: import { createTask } from \"@src/actions.js\"\n}\n\naction markTaskAsDone {\n  fn: import { markTaskAsDone } from \"@src/actions.js\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Authentication in Wasp\nDESCRIPTION: This snippet demonstrates how to configure GitHub authentication in a Wasp application by defining the auth section in the main.wasp file. It specifies the userEntity, GitHub as an auth method with references to configuration functions, and a redirect path for failed authentication attempts.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/github.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/github.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/github.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Backend in Wasp - Wasp\nDESCRIPTION: This snippet configures the database system for a Wasp application, specifying PostgreSQL as the backend. The 'db' field configures the database type, which is essential for running migrations and connecting the app in production. Prerequisites: A running PostgreSQL instance and the appropriate environment connection strings. The key parameter 'system' controls the ORM's target and data compatibility. Used as preparation for deployment or migrations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/backends.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  db: {\n    system: PostgreSQL,\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with useAction Hook in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the useAction hook to perform optimistic updates on a task's completion status. It includes the configuration of optimisticUpdates and shows how to use the enhanced action in a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/actions.md#2025-04-22_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {\n  useQuery,\n  useAction,\n  getTask,\n  markTaskAsDone,\n} from 'wasp/client/operations'\n\nconst TaskPage = ({ id }) => {\n  const { data: task } = useQuery(getTask, { id })\n  const markTaskAsDoneOptimistically = useAction(markTaskAsDone, {\n    optimisticUpdates: [\n      {\n        getQuerySpecifier: ({ id }) => [getTask, { id }],\n        updateQuery: (_payload, oldData) => ({ ...oldData, isDone: true }),\n      },\n    ],\n  })\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>\n  }\n\n  const { description, isDone } = task\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n      {isDone || (\n        <button onClick={() => markTaskAsDoneOptimistically({ id })}>\n          Mark as done.\n        </button>\n      )}\n    </div>\n  )\n}\n\nexport default TaskPage\n```\n\n----------------------------------------\n\nTITLE: Creating a Task Form Component in TypeScript/TSX\nDESCRIPTION: A React form component in TypeScript with proper type annotations for the form event and error handling, which submits data to the createTask Action.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/06-actions.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormEvent } from 'react'\nimport { Task } from 'wasp/entities'\nimport {\n  createTask,\n  getTasks,\n  useQuery\n} from 'wasp/client/operations'\n\n// ... MainPage, TaskView, TaskList ...\n\nconst NewTaskForm = () => {\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    try {\n      const target = event.target as HTMLFormElement\n      const description = target.description.value\n      target.reset()\n      await createTask({ description })\n    } catch (err: any) {\n      window.alert('Error: ' + err.message)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"description\" type=\"text\" defaultValue=\"\" />\n      <input type=\"submit\" value=\"Create task\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wasp Actions in JavaScript (Node.js)\nDESCRIPTION: Provides a JavaScript implementation for the `createTask` and `markTaskAsDone` Actions defined in `main.wasp`. It demonstrates how to handle input arguments (`args`) passed from the client, interact with a simple in-memory data store (a `tasks` array), and return results. The `createTask` function adds a new task, while `markTaskAsDone` updates an existing task's status.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js title=\"src/actions.js\"\n// our \"database\"\nlet nextId = 4\nconst tasks = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\n// You don't need to use the arguments if you don't need them\nexport const createTask = (args) => {\n  const newTask = {\n    id: nextId,\n    isDone: false,\n    description: args.description,\n  }\n  nextId += 1\n  tasks.push(newTask)\n  return newTask\n}\n\n// The 'args' object is something sent by the caller (most often from the client)\nexport const markTaskAsDone = (args) => {\n  const task = tasks.find((task) => task.id === args.id)\n  if (!task) {\n    // We'll show how to properly handle such errors later\n    return\n  }\n  task.isDone = true\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing On-the-Fly Password Migration Logic in TypeScript\nDESCRIPTION: This TypeScript code defines a Wasp `MigratePassword` operation named `migratePassword`. It's designed to be used when a user logs in with credentials potentially stored under an old hashing algorithm. The function retrieves the user's auth identity, uses `secure-password` to verify the provided password against the old hash stored in `providerData`. If verification succeeds, it re-hashes the password using the *new* algorithm (implicitly handled by `updateAuthIdentityProviderData` when given the plain password) and updates the user's `AuthIdentity` record in the database. It throws an `HttpError` if the user is not found or password verification fails.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"src/auth.ts\"\nimport SecurePassword from \"secure-password\";\nimport { HttpError } from \"wasp/server\";\nimport {\n  createProviderId,\n  deserializeAndSanitizeProviderData,\n  findAuthIdentity,\n  updateAuthIdentityProviderData,\n} from \"wasp/server/auth\";\nimport { MigratePassword } from \"wasp/server/operations\";\n\ntype MigratePasswordInput = {\n  username: string;\n  password: string;\n};\ntype MigratePasswordOutput = {\n  message: string;\n};\n\nexport const migratePassword: MigratePassword<\n  MigratePasswordInput,\n  MigratePasswordOutput\n> = async ({ password, username }, _context) => {\n  const providerId = createProviderId(\"username\", username);\n  const authIdentity = await findAuthIdentity(providerId);\n\n  if (!authIdentity) {\n    throw new HttpError(400, \"Something went wrong\");\n  }\n\n  const providerData = deserializeAndSanitizeProviderData<\"username\">(\n    authIdentity.providerData\n  );\n\n  try {\n    const SP = new SecurePassword();\n\n    // This will verify the password using the old algorithm\n    const result = await SP.verify(\n      Buffer.from(password),\n      Buffer.from(providerData.hashedPassword, \"base64\")\n    );\n\n    if (result !== SecurePassword.VALID) {\n      throw new HttpError(400, \"Something went wrong\");\n    }\n\n    // This will hash the password using the new algorithm and update the\n    // provider data in the database.\n    await updateAuthIdentityProviderData<\"username\">(providerId, providerData, {\n      hashedPassword: password,\n    });\n  } catch (e) {\n    throw new HttpError(400, \"Something went wrong\");\n  }\n\n  return {\n    message: \"Password migrated successfully.\",\n  };\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing SignupForm with Render Function in JavaScript\nDESCRIPTION: This snippet demonstrates how to use a render function with the SignupForm component to display dynamic content based on form values. The example shows greeting a user based on their username input.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SignupForm } from '@wasp/auth/forms/Signup'\nimport { FormItemGroup } from '@wasp/auth/forms/internal/Form'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={(form, state) => {\n        const username = form.watch('username')\n        return (\n          username && (\n            <FormItemGroup>\n              Hello there <strong>{username}</strong> 👋\n            </FormItemGroup>\n          )\n        )\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signup Component in React\nDESCRIPTION: React component for handling user signup with username and password validation. Uses Wasp's auth functions for signup and login, with navigation on success and error handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/username-and-pass/create-your-own-ui.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { login, signup } from 'wasp/client/auth'\n\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\nexport function Signup() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState(null)\n  const navigate = useNavigate()\n\n  async function handleSubmit(event) {\n    event.preventDefault()\n    setError(null)\n    try {\n      await signup({ username, password })\n      await login({ username, password })\n      navigate('/')\n    } catch (error) {\n      setError(error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {error && <p>Error: {error.message}</p>}\n\n      <input\n        type=\"text\"\n        autoComplete=\"username\"\n        value={username}\n        onChange={(e) => setUsername(e.target.value)}\n        placeholder=\"Username\"\n      />\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        placeholder=\"Password\"\n      />\n      <button type=\"submit\">Sign Up</button>\n    </form>\n  )\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { login, signup } from 'wasp/client/auth'\n\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\nexport function Signup() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState<Error | null>(null)\n  const navigate = useNavigate()\n\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    setError(null)\n    try {\n      await signup({ username, password })\n      await login({ username, password })\n      navigate('/')\n    } catch (error: unknown) {\n      setError(error as Error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {error && <p>Error: {error.message}</p>}\n\n      <input\n        type=\"text\"\n        autoComplete=\"username\"\n        value={username}\n        onChange={(e) => setUsername(e.target.value)}\n        placeholder=\"Username\"\n      />\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        placeholder=\"Password\"\n      />\n      <button type=\"submit\">Sign Up</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Queries in TypeScript\nDESCRIPTION: TypeScript implementation of query functions with proper type definitions and interfaces.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/queries.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetAllTasks, type GetFilteredTasks } from 'wasp/server/operations'\n\ntype Task = {\n  id: number\n  description: string\n  isDone: boolean\n}\n\nconst tasks: Task[] = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\nexport const getAllTasks: GetAllTasks<void, Task[]> = () => {\n  return tasks\n}\n\nexport const getFilteredTasks: GetFilteredTasks<\n  Pick<Task, 'isDone'>,\n  Task[]\n> = (args) => {\n  const { isDone } = args\n  return tasks.filter((task) => task.isDone === isDone)\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Actions on the Server in TypeScript\nDESCRIPTION: Shows how to call Actions on the server-side in TypeScript. It demonstrates the usage of createTask and markTaskAsDone Actions with type inference and the necessary context object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTask, markTaskAsDone } from 'wasp/server/operations'\n\nconst user = // Get an AuthUser object, e.g., from context.user\n\n// TypeScript automatically infers the return values and type-checks\n// the payloads.\nconst newTask = await createTask(\n  { description: 'Keep learning TypeScript' },\n  { user },\n)\nawait markTaskAsDone({ id: 1 }, { user })\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Component in TypeScript (TSX)\nDESCRIPTION: Provides an example TypeScript implementation (`src/Root.tsx`) for the Wasp client's root component, referenced by `rootComponent` in `main.wasp`. It shows how to set up a Redux `Provider` and define a `Layout` component using TSX syntax. It is essential that this component renders the `<Outlet />` from `react-router-dom` to correctly display nested routes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/client-config.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/Root.tsx\"\nimport { Outlet } from 'react-router-dom'\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root() {\n  return (\n    <Provider store={store}>\n      <Layout />\n    </Provider>\n  )\n}\n\nfunction Layout() {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      // highlight-next-line\n      <Outlet />\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Checks to Task Queries\nDESCRIPTION: Updates the getTasks query to require authentication and filter tasks by the current user. Implements both JavaScript and TypeScript versions with proper error handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/07-auth.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const getTasks = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.findMany({\n    where: { user: { id: context.user.id } },\n    orderBy: { id: 'asc' },\n  })\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from 'wasp/entities'\nimport { HttpError } from 'wasp/server'\nimport { GetTasks } from 'wasp/server/operations'\n\nexport const getTasks: GetTasks<void, Task[]> = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.findMany({\n    where: { user: { id: context.user.id } },\n    orderBy: { id: 'asc' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Login Form in React (TypeScript)\nDESCRIPTION: This code snippet shows how to create a custom login form using React and TypeScript in a Wasp application. It utilizes Wasp's login function for user authentication and includes TypeScript type annotations for improved type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/username-and-pass/create-your-own-ui.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { login } from 'wasp/client/auth'\n\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\nexport function Login() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState<Error | null>(null)\n  const navigate = useNavigate()\n\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    setError(null)\n    try {\n      await login(username, password)\n      navigate('/')\n    } catch (error: unknown) {\n      setError(error as Error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {error && <p>Error: {error.message}</p>}\n\n      <input\n        type=\"text\"\n        autoComplete=\"username\"\n        value={username}\n        onChange={(e) => setUsername(e.target.value)}\n        placeholder=\"Username\"\n      />\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        placeholder=\"Password\"\n      />\n      <button type=\"submit\">Sign Up</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing SignupForm with Additional Fields (TypeScript)\nDESCRIPTION: This TypeScript version of the previous snippet shows how to customize the SignupForm component by adding additional fields. It demonstrates both object-based and function-based approaches to adding custom fields, including validation and error handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  SignupForm,\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Task Action in TypeScript\nDESCRIPTION: Server-side implementation of the updateTask action in TypeScript, with proper type definitions for the payload and return type.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/06-actions.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreateTask, UpdateTask } from 'wasp/server/operations'\n\ntype UpdateTaskPayload = Pick<Task, 'id' | 'isDone'>\n\nexport const updateTask: UpdateTask<UpdateTaskPayload, Task> = async (\n  { id, isDone },\n  context\n) => {\n  return context.entities.Task.update({\n    where: { id },\n    data: {\n      isDone: isDone,\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using CRUD Operations in Client Code (JavaScript)\nDESCRIPTION: Example of importing and using CRUD operations in a JavaScript client component. Shows how to access getAll, get, create, update, and delete operations using hooks like useQuery and useAction.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/crud.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tasks } from 'wasp/client/crud'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data } = Tasks.getAll.useQuery()\nconst { data } = Tasks.get.useQuery({ id: 1 })\nconst createAction = Tasks.create.useAction()\nconst updateAction = Tasks.update.useAction()\nconst deleteAction = Tasks.delete.useAction()\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Checks to Task Actions (JavaScript)\nDESCRIPTION: Updates createTask and updateTask actions with authentication checks and user-specific operations. Tasks are created with the current user's ID and can only be updated by their owner.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/07-auth.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const createTask = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.create({\n    data: {\n      description: args.description,\n      user: { connect: { id: context.user.id } },\n    },\n  })\n}\n\nexport const updateTask = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.updateMany({\n    where: { id: args.id, user: { id: context.user.id } },\n    data: { isDone: args.isDone },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Client-side Action Usage in JavaScript\nDESCRIPTION: Demonstrates how to import and call Actions directly from the client side using JavaScript, showing basic task creation and status update operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/actions.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTask, markTaskAsDone } from 'wasp/client/operations'\n\n// ...\n\nconst newTask = await createTask({ description: 'Learn TypeScript' })\nawait markTaskAsDone({ id: 1 })\n```\n\n----------------------------------------\n\nTITLE: Accessing User Data in React Component\nDESCRIPTION: Shows how to access the user object in a React component using the user prop provided by Wasp for authenticated pages.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Button from './Button'\nimport { logout } from 'wasp/client/auth'\n\nconst AccountPage = ({ user }) => {\n  return (\n    <div>\n      <Button onClick={logout}>Logout</Button>\n      {JSON.stringify(user, null, 2)}\n    </div>\n  )\n}\n\nexport default AccountPage\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signup in TypeScript\nDESCRIPTION: Implements a custom signup function in TypeScript with proper type definitions. It shows how to create a user with username/password authentication using Wasp's auth helper functions and includes type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/entities/entities.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  createUser,\n} from 'wasp/server/auth'\nimport type { CustomSignup } from 'wasp/server/operations'\n\ntype CustomSignupInput = {\n  username: string\n  password: string\n}\ntype CustomSignupOutput = {\n  success: boolean\n  message: string\n}\n\nexport const signup: CustomSignup<\n  CustomSignupInput,\n  CustomSignupOutput\n> = async (args, { entities: { User } }) => {\n  try {\n    // Provider ID is a combination of the provider name and the provider user ID\n    // And it is used to uniquely identify the user in your app\n    const providerId = createProviderId('username', args.username)\n    // sanitizeAndSerializeProviderData hashes the password and returns a JSON string\n    const providerData = await sanitizeAndSerializeProviderData<'username'>({\n      hashedPassword: args.password,\n    })\n\n    await createUser(\n      providerId,\n      providerData,\n      // Any additional data you want to store on the User entity\n      {}\n    )\n\n    // This is equivalent to:\n    // await User.create({\n    //   data: {\n    //     auth: {\n    //       create: {\n    //         identities: {\n    //             create: {\n    //                 providerName: 'username',\n    //                 providerUserId: args.username\n    //                 providerData,\n    //             },\n    //         },\n    //       }\n    //     },\n    //   }\n    // })\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Entity Manipulation with Prisma Client (TypeScript)\nDESCRIPTION: Shows how to create a new Task using the Prisma Client in server-side TypeScript code. Mirrors the JavaScript example but with TypeScript syntax, leveraging better type safety if types are available. The 'prisma' object is imported, and the 'create' method is called with the necessary fields. Ensure Prisma Client is installed and the Task model exists in schema.prisma.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/entities.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prisma } from 'wasp/server'\n\nprisma.task.create({\n    description: \"Read the Entities doc\",\n    isDone: true // almost :)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing createTask Action in TypeScript\nDESCRIPTION: TypeScript implementation of the createTask Action with proper type annotations for full-stack type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/06-actions.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from 'wasp/entities'\nimport { CreateTask } from 'wasp/server/operations'\n\ntype CreateTaskPayload = Pick<Task, 'description'>\n\nexport const createTask: CreateTask<CreateTaskPayload, Task> = async (\n  args,\n  context\n) => {\n  return context.entities.Task.create({\n    data: { description: args.description },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a React Component with a Mocked API using Vitest and Testing Library - JavaScript (JSX)\nDESCRIPTION: Presents a test case for the API-fetching Todo component, using Vitest and Testing Library. Sets up a mock API endpoint via Wasp's testing helpers, then validates that the component properly updates UI in response to the mocked response. This pattern supports end-to-end-like testing of fetch logic.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/testing.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { test, expect } from \"vitest\";\nimport { screen } from \"@testing-library/react\";\n\nimport { mockServer, renderInContext } from \"wasp/client/test\";\nimport Todo from \"./Todo\";\n\nconst { mockApi } = mockServer();\n\nconst mockTasks = [\n  {\n    id: 1,\n    description: \"test todo 1\",\n    isDone: true,\n    userId: 1,\n  },\n];\n\ntest(\"handles mock data\", async () => {\n  mockApi(\"/tasks\", { res: mockTasks });\n\n  renderInContext(<Todo />);\n\n  await screen.findByText(\"test todo 1\");\n\n  expect(screen.getByRole(\"checkbox\")).toBeChecked();\n\n  screen.debug();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Generated Wasp CRUD Operations in a React Component (TypeScript)\nDESCRIPTION: This React functional component (MainPage.tsx) demonstrates how to use Wasp's generated CRUD operations on the client with TypeScript. It imports `Tasks` from `wasp/client/crud`, fetches all tasks using `Tasks.getAll.useQuery()`, and provides functionality to create new tasks using `Tasks.create.useAction()`. Wasp's full-stack type safety ensures payload types are inferred automatically. It handles loading/error states and renders tasks and a creation form.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/MainPage.tsx\"\n// highlight-next-line\nimport { Tasks } from 'wasp/client/crud'\nimport { useState } from 'react'\n\nexport const MainPage = () => {\n  // highlight-next-line\n  // Thanks to full-stack type safety, all payload types are inferred\n  // highlight-next-line\n  // automatically\n  // highlight-next-line\n  const { data: tasks, isLoading, error } = Tasks.getAll.useQuery()\n  // highlight-next-line\n  const createTask = Tasks.create.useAction()\n  const [taskDescription, setTaskDescription] = useState('')\n\n  function handleCreateTask() {\n    createTask({ description: taskDescription, isDone: false })\n    setTaskDescription('')\n  }\n\n  if (isLoading) return <div>Loading...</div>\n  if (error) return <div>Error: {error.message}</div>\n  return (\n    <div\n      style={{\n        fontSize: '1.5rem',\n        display: 'grid',\n        placeContent: 'center',\n        height: '100vh',\n      }}\n    >\n      <div>\n        <input\n          value={taskDescription}\n          onChange={(e) => setTaskDescription(e.target.value)}\n        />\n        <button onClick={handleCreateTask}>Create task</button>\n      </div>\n      <ul>\n        {tasks.map((task) => (\n          <li key={task.id}>{task.description}</li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Auth Method and User Entity in main.wasp\nDESCRIPTION: This Wasp snippet defines the application setup (`myApp`), including the Wasp version and title. It configures the `auth` block, specifying `User` as the entity and enabling the `google` method. It imports `getConfig` and `userSignupFields` functions from an external JavaScript/TypeScript file (`@src/auth/google.js`) to customize Google Auth behavior. It also defines the `User` entity using Prisma Schema Language (PSL) with `id`, `username`, and `displayName` fields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/google.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/google.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/google.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\nentity User {=psl\n    id                        Int     @id @default(autoincrement())\n    username                  String  @unique\n    displayName               String\npsl=}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Simple Setup Function - TypeScript (src\\/myClientSetupCode.ts)\nDESCRIPTION: Implements an asynchronous setup function in TypeScript, simulating client startup tasks (here, logging cumulative online time every hour). Returns a Promise<void> for full type safety. Can be extended for more advanced client initialization tasks. No dependencies required.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/client-config.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nexport default async function mySetupFunction(): Promise<void> {\n  let count = 1\n  setInterval(\n    () => console.log(`You have been online for ${count++} hours.`),\n    1000 * 60 * 60\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Entity Manipulation with Prisma Client (JavaScript)\nDESCRIPTION: Demonstrates how to create a new Task entry by directly using the Prisma Client in Wasp's server code. The code imports the 'prisma' instance and calls 'prisma.task.create' with the required fields. This approach is only available on the server side. Dependencies include the Prisma Client and a correctly defined Task model in schema.prisma. The example shows JavaScript syntax, with field values set for entity creation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/entities.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { prisma } from 'wasp/server'\n\nprisma.task.create({\n    description: \"Read the Entities doc\",\n    isDone: true // almost :)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing the Action Export with Types (TypeScript)\nDESCRIPTION: Declares and implements the 'createFoo' action in TypeScript using the generated CreateFoo type for stricter type checking. The input 'args' must include a string field 'bar', and the output must match the 'Foo' type. Requires proper type definitions and imports provided by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nimport { type CreateFoo } from 'wasp/server/operations'\n\ntype Foo = // ...\n\nexport const createFoo: CreateFoo<{ bar: string }, Foo> = (args, context) => {\n  // implementation\n};\n```\n\n----------------------------------------\n\nTITLE: Defining User Signup Fields in Wasp\nDESCRIPTION: This snippet shows how to define extra user signup fields in the main.wasp file and create a userSignupFields object in a separate file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  // ...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {\n        userSignupFields: import { userSignupFields } from \"@src/auth/signup\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n\nentity User {=psl\n  id Int @id @default(autoincrement())\n  address String?\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Using useQuery Hook in React Component (JavaScript)\nDESCRIPTION: Demonstrates how to use the useQuery hook to fetch data from multiple Queries in a React component. It shows error handling and rendering of task lists based on the fetched data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/queries.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useQuery } from '@wasp/queries'\nimport getAllTasks from '@wasp/queries/getAllTasks'\nimport getFilteredTasks from '@wasp/queries/getFilteredTasks'\n\nconst MainPage = () => {\n  const { data: allTasks, error: error1 } = useQuery(getAllTasks)\n  const { data: doneTasks, error: error2 } = useQuery(getFilteredTasks, {\n    isDone: true,\n  })\n\n  if (error1 !== null || error2 !== null) {\n    return <div>There was an error</div>\n  }\n\n  return (\n    <div>\n      <h2>All Tasks</h2>\n      {allTasks && allTasks.length > 0\n        ? allTasks.map((task) => <Task key={task.id} {...task} />)\n        : 'No tasks'}\n\n      <h2>Finished Tasks</h2>\n      {doneTasks && doneTasks.length > 0\n        ? doneTasks.map((task) => <Task key={task.id} {...task} />)\n        : 'No finished tasks'}\n    </div>\n  )\n}\n\nconst Task = ({ description, isDone }: Task) => {\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n    </div>\n  )\n}\n\nexport default MainPage\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Button in MainPage Component using TSX\nDESCRIPTION: Shows the implementation of a logout button within the `MainPage.tsx` TypeScript React component. The `logout` function is imported from `wasp/client/auth` and used as the `onClick` event handler for a button, providing logout functionality.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/07-auth.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\nimport { logout } from 'wasp/client/auth'\n//...\n\nconst MainPage = () => {\n  // ...\n  return (\n    <div>\n      // ...\n      <button onClick={logout}>Logout</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring an Action in Wasp\nDESCRIPTION: Declares a Wasp Action named createFoo, binding it to the createFoo function imported from @src/actions.js and associating it with the Foo entity. This triggers Wasp to generate type definitions and operation bindings, connecting custom backend logic to the application. Prerequisites: Function must exist and be exported in src/actions.js.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/actions.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\naction createFoo {\n    fn: import { createFoo } from \"@src/actions.js\"\n    entities: [Foo]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions in JavaScript\nDESCRIPTION: This snippet demonstrates the implementation of 'createTask' and 'markTaskAsDone' Actions in JavaScript. It includes a mock database and functions to create and update tasks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/actions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet nextId = 4\nconst tasks = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\nexport const createTask = (args) => {\n  const newTask = {\n    id: nextId,\n    isDone: false,\n    description: args.description,\n  }\n  nextId += 1\n  tasks.push(newTask)\n  return newTask\n}\n\nexport const markTaskAsDone = (args) => {\n  const task = tasks.find((task) => task.id === args.id)\n  if (!task) {\n    return\n  }\n  task.isDone = true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Signup Fields in TypeScript\nDESCRIPTION: This snippet demonstrates how to define additional fields that should be set on the User entity during signup in TypeScript. It shows validation for a required address field and handling of an optional phone field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/_user-signup-fields-explainer.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: (data) => {\n    if (!data.address) {\n      throw new Error('Address is required')\n    }\n    return data.address\n  }\n  phone: (data) => data.phone,\n})\n```\n\n----------------------------------------\n\nTITLE: Using CRUD Hooks for Data Operations (TypeScript, React)\nDESCRIPTION: Provides an example of interacting with CRUD operations for the 'Tasks' resource in a TypeScript React (.tsx) component. Leverages hook-based APIs for querying and mutating data (getAll, get, create, update, delete). Requires the 'Tasks' object, imported from 'wasp/client/crud'. Inputs include typed query/action arguments; outputs are strongly typed data and mutation functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/crud.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nconst { data } = Tasks.getAll.useQuery()\nconst { data } = Tasks.get.useQuery({ id: 1 })\nconst createAction = Tasks.create.useAction()\nconst updateAction = Tasks.update.useAction()\nconst deleteAction = Tasks.delete.useAction()\n```\n\n----------------------------------------\n\nTITLE: Defining Data Models with Prisma Schema Language\nDESCRIPTION: This snippet shows data model definitions using Prisma Schema Language within a `schema.prisma` file, intended for use with Wasp. It defines a `User` model and a `Recipe` model, establishing a one-to-many relationship where a User can have multiple Recipes. These models define the database structure for the application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/introduction/introduction.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\n```prisma title=\"schema.prisma\"\n...\n\n// Data models are defined using Prisma Schema Language.\nmodel User {\n  id          Int @id @default(autoincrement())\n  recipes     Recipe[]\n}\n\nmodel Recipe {\n  id          Int @id @default(autoincrement())\n  title       String\n  description String?\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Wasp Entities Derived from Prisma Models\nDESCRIPTION: Demonstrates how Prisma models defined in `schema.prisma` (like `Task`) are used as Wasp Entities within a `main.wasp` file. The `entities` property in `query`, `job`, and `api` declarations links them to their corresponding database models.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/prisma-file.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\\n  wasp: {\\n    version: \"^0.14.0\"\\n  },\\n  title: \"My App\",\\n}\\n\\n...\\n\\n// Using Wasp Entities in the Wasp file\\n\\nquery getTasks {\\n  fn: import { getTasks } from \"@src/queries\",\\n  // highlight-next-line\\n  entities: [Task]\\n}\\n\\njob myJob {\\n  executor: PgBoss,\\n  perform: {\\n    fn: import { foo } from \"@src/workers/bar\"\\n  },\\n  // highlight-next-line\\n  entities: [Task],\\n}\\n\\napi fooBar {\\n  fn: import { fooBar } from \"@src/apis\",\\n  // highlight-next-line\\n  entities: [Task],\\n  httpRoute: (GET, \"/foo/bar/:email\")\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Wasp TypeScript Configuration\nDESCRIPTION: Complete reference implementation of a Wasp application configuration using TypeScript, including app setup, authentication, routes, queries, and actions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/general/wasp-ts-config.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App } from 'wasp-config'\n\nconst app = new App('todoApp', {\n  title: 'ToDo App',\n  wasp: { version: '^0.15.0' },\n});\n\napp.webSocket({\n  fn: { import: 'webSocketFn', from: '@src/webSocket' },\n});\n\napp.auth({\n  userEntity: 'User',\n  methods: {\n    discord: {\n      configFn: { import: 'config', from: '@src/auth/discord' },\n      userSignupFields: { import: 'userSignupFields', from: '@src/auth/discord' }\n    },\n    google: {\n      configFn: { import: 'config', from: '@src/auth/google' },\n      userSignupFields: { import: 'userSignupFields', from: '@src/auth/google' }\n    },\n    gitHub: {\n      configFn: { import: 'config', from: '@src/auth/github.js' },\n      userSignupFields: { import: 'userSignupFields', from: '@src/auth/github.js' }\n    },\n  },\n  onAuthFailedRedirectTo: '/login',\n  onAuthSucceededRedirectTo: '/profile',\n  onBeforeSignup: { import: 'onBeforeSignup', from: '@src/auth/hooks.js' },\n  onAfterSignup: { import: 'onAfterSignup', from: '@src/auth/hooks.js' },\n  onBeforeOAuthRedirect: { import: 'onBeforeOAuthRedirect', from: '@src/auth/hooks.js' },\n  onBeforeLogin: { import: 'onBeforeLogin', from: '@src/auth/hooks.js' },\n  onAfterLogin: { import: 'onAfterLogin', from: '@src/auth/hooks.js' }\n});\n\napp.server({\n  setupFn: { importDefault: 'setup', from: '@src/serverSetup' },\n  middlewareConfigFn: { import: 'serverMiddlewareFn', from: '@src/serverSetup' },\n});\n\napp.client({\n  rootComponent: { import: 'App', from: '@src/App' },\n  setupFn: { importDefault: 'setup', from: '@src/clientSetup' }\n});\n\napp.db({\n  seeds: [\n    { import: 'devSeedSimple', from: '@src/dbSeeds' },\n  ]\n});\n\napp.emailSender({\n  provider: 'SMTP',\n  defaultFrom: { email: 'test@test.com' }\n});\n\nconst loginPage = app.page('LoginPage', {\n  component: { importDefault: 'Login', from: '@src/pages/auth/Login' }\n});\napp.route('LoginRoute', { path: '/login', to: loginPage });\n\napp.query('getTasks', {\n  fn: { import: 'getTasks', from: '@src/queries' },\n  entities: ['Task']\n});\n\napp.action('createTask', {\n  fn: { import: 'createTask', from: '@src/actions' },\n  entities: ['Task']\n});\n\napp.apiNamespace('bar', {\n  middlewareConfigFn: { import: 'barNamespaceMiddlewareFn', from: '@src/apis' },\n  path: '/bar'\n});\n\napp.api('barBaz', {\n  fn: { import: 'barBaz', from: '@src/apis' },\n  auth: false,\n  entities: ['Task'],\n  httpRoute: ['GET', '/bar/baz']\n});\n\napp.job('mySpecialJob', {\n  executor: 'PgBoss',\n  perform: {\n    fn: { import: 'foo', from: '@src/jobs/bar' },\n    executorOptions: {\n      pgBoss: { retryLimit: 1 }\n    }\n  },\n  entities: ['Task']\n});\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Declaring CRUD Operations With Override Options in Wasp (JavaScript)\nDESCRIPTION: Demonstrates how to declare a complex CRUD resource for the 'Tasks' entity in a Wasp (.wasp) file using JavaScript. This declaration supports fine-grained configuration of each operation, including auth control with 'isPublic' and the ability to override backend logic by importing external functions. Requires a defined 'Task' entity and, optionally, the implementation of an override function in '@src/tasks.js'. Inputs: N/A; Outputs: Generates CRUD APIs for Tasks. Constraints: Syntax is Wasp DSL; overrideFn must be a valid JS import.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/crud.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\ncrud Tasks { // crud name here is \"Tasks\"\n  entity: Task,\n  operations: {\n    getAll: {\n      isPublic: true, // optional, defaults to false\n    },\n    get: {},\n    create: {\n      overrideFn: import { createTask } from \"@src/tasks.js\", // optional\n    },\n    update: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Action in Application Code (TypeScript)\nDESCRIPTION: Shows client and server-side imports of the 'createFoo' action in TypeScript. The server imports enable backend-side logic while the client enables frontend use of the same action. Generated by Wasp based on prior .wasp declarations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\n// Use it on the client\nimport { createFoo } from 'wasp/client/operations'\n\n// Use it on the server\nimport { createFoo } from 'wasp/server/operations'\n```\n\n----------------------------------------\n\nTITLE: Defining and Implementing a Custom Signup Action in Wasp (JavaScript)\nDESCRIPTION: Defines a Wasp action `customSignup` in `main.wasp` that points to a JavaScript implementation file (`src/auth/signup.js`). The JavaScript code implements the custom sign-up logic, including email/password validation using `ensureValidEmail`, `ensurePasswordIsPresent`, `ensureValidPassword`, checking for existing users with `findAuthIdentity`, creating new users using `createUser`, hashing passwords via `sanitizeAndSerializeProviderData`, creating verification links with `createEmailVerificationLink`, and sending verification emails using `sendEmailVerificationEmail` from Wasp server auth utilities. It handles potential errors and returns a success status.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\n// ...\n\naction customSignup {\n  fn: import { signup } from \"@src/auth/signup.js\",\n}\n```\n```\n\nLANGUAGE: javascript\nCODE:\n```\n```js title=\"src/auth/signup.js\"\nimport {\n  ensurePasswordIsPresent,\n  ensureValidPassword,\n  ensureValidEmail,\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  deserializeAndSanitizeProviderData,\n  findAuthIdentity,\n  createUser,\n  createEmailVerificationLink,\n  sendEmailVerificationEmail,\n} from 'wasp/server/auth'\n\nexport const signup = async (args, _context) => {\n  ensureValidEmail(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('email', args.email)\n    const existingAuthIdentity = await findAuthIdentity(providerId)\n\n    if (existingAuthIdentity) {\n      const providerData = deserializeAndSanitizeProviderData(existingAuthIdentity.providerData)\n      // Your custom code here\n    } else {\n      // sanitizeAndSerializeProviderData will hash the user's password\n      const newUserProviderData = await sanitizeAndSerializeProviderData({\n          hashedPassword: args.password,\n          isEmailVerified: false,\n          emailVerificationSentAt: null,\n          passwordResetSentAt: null,\n      })\n      await createUser(\n        providerId,\n        newUserProviderData, // Corrected variable name from original snippet\n        // Any additional data you want to store on the User entity\n        {},\n      )\n\n      // Verification link links to a client route e.g. /email-verification\n      const verificationLink = await createEmailVerificationLink(args.email, '/email-verification');\n      try {\n          await sendEmailVerificationEmail(\n              args.email,\n              {\n                  from: {\n                    name: \"My App Postman\",\n                    email: \"hello@itsme.com\",\n                  },\n                  to: args.email,\n                  subject: \"Verify your email\",\n                  text: `Click the link below to verify your email: ${verificationLink}`,\n                  html: `\n                      <p>Click the link below to verify your email</p>\n                      <a href=\"${verificationLink}\">Verify email</a>\n                  `,\n              }\n          );\n      } catch (e /*: unknown*/) { // Type annotation removed for JS compatibility \n          console.error(\"Failed to send email verification email:\", e);\n          // Assuming HttpError is available or replacing with a standard Error\n          // throw new HttpError(500, \"Failed to send email verification email.\"); \n          throw new Error(\"Failed to send email verification email.\");\n      } \n    }\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining App, Route, and Page Declarations in Wasp\nDESCRIPTION: This snippet demonstrates the basic structure of a Wasp file using three core declarations: `app`, `route`, and `page`. The `app` declaration (`MyApp`) sets application-level configuration, specifically the title. The `route` declaration (`RootRoute`) maps the root URL path ('/') to the `DashboardPage`. The `page` declaration (`DashboardPage`) defines the page and specifies its implementation component using an external import (`ExtImport`) from the project's `src` directory. This exemplifies how Wasp declaratively defines different parts of a web application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/general/language.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\"\n}\n\nroute RootRoute { path: \"/\", to: DashboardPage }\n\npage DashboardPage {\n  component: import { DashboardPage } from \"@src/Dashboard.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Settings in main.wasp (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up authentication settings in the main.wasp file for a TypeScript project. It covers configuring user entity, auth methods, and redirect routes for authentication failures and successes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_21\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  //...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {}, // use this or email, not both\n      email: {}, // use this or usernameAndPassword, not both\n      google: {},\n      gitHub: {},\n    },\n    onAuthFailedRedirectTo: \"/someRoute\",\n  }\n}\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Using Entity Types and Type-Safe Functions (TypeScript)\nDESCRIPTION: Shows how to import and use the Task entity type generated by Wasp, enabling type-safe operations and custom functions in TypeScript. Demonstrates the import statement, an example object, and a function that takes a Task and returns an info message. Requires TypeScript and the generated types from 'wasp/entities'. Task properties are strictly typed and updated according to schema changes, enabling type safety throughout the app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/entities.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from 'wasp/entities'\n\nconst task: Task = { ... }\n\n// You can also define functions for working with entities\nfunction getInfoMessage(task: Task): string {\n  const isDoneText = task.isDone ? \"is done\" : \"is not done\"\n  return `Task '${task.description}' is ${isDoneText}.`\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CreateTask Action in JavaScript\nDESCRIPTION: Server-side implementation of the createTask action that creates a new task in the database using the provided description.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/06-actions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const createTask = async (args, context) => {\n  return context.entities.Task.create({\n    data: { description: args.description },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API in NodeJS (TypeScript)\nDESCRIPTION: Shows the implementation of a custom API endpoint in TypeScript, including type definitions and handling request, response, and context objects.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/apis.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FooBar } from \"wasp/server/api\"; // This type is generated by Wasp based on the `api` declaration above.\n\nexport const fooBar: FooBar = (req, res, context) => {\n  res.set(\"Access-Control-Allow-Origin\", \"*\"); // Example of modifying headers to override Wasp default CORS middleware.\n  res.json({ msg: `Hello, ${context.user ? \"registered user\" : \"stranger\"}!` });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Typed Query Backend Function - TypeScript\nDESCRIPTION: This TypeScript example demonstrates how to strongly type the getFoo function for the getFoo query. It imports the generated GetFoo type from wasp/server/operations to specify the types for the arguments and return value. The exported getFoo function must conform to the signature GetFoo<{ id: number }, Foo>. The code expects an input object with an id field of type number and must return a value of type Foo, as required for correct query integration in TypeScript. Args and context parameters are required; implementation details are left to user. Ensures type safety for both inputs and outputs, and the export must match Wasp's expectations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/queries.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetFoo } from 'wasp/server/operations'\n\ntype Foo = // ...\n\nexport const getFoo: GetFoo<{ id: number }, Foo> = (args, context) => {\n  // implementation\n};\n```\n\n----------------------------------------\n\nTITLE: Password Reset Email Function in JavaScript\nDESCRIPTION: This snippet defines a function for generating the content of password reset emails in JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/email.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getPasswordResetEmailContent = ({ passwordResetLink }) => ({\n  subject: 'Password reset',\n  text: `Click the link below to reset your password: ${passwordResetLink}`,\n  html: `\n        <p>Click the link below to reset your password</p>\n        <a href=\"${passwordResetLink}\">Reset password</a>\n    `,\n})\n```\n\n----------------------------------------\n\nTITLE: Using WebSocket Client Hooks in React Components (JavaScript, TypeScript/TSX)\nDESCRIPTION: These code blocks demonstrate real-time chat functionality in React components using Wasp's WebSocket hooks. 'useSocket' exposes the socket instance and connection status; 'useSocketListener' conveniently attaches event handlers for real-time updates. In TypeScript, type-safe payloads and event names are inferred from the backend, providing autocompletion and validation. JavaScript and TypeScript versions share the overall logic: managing chat state, submitting messages, and displaying message lists, with TypeScript leveraging payload helper types. Prerequisites: a configured Wasp project and enabled WebSocket as shown above.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/web-sockets.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react'\nimport {\n  useSocket,\n  useSocketListener,\n} from 'wasp/client/webSocket'\n\nexport const ChatPage = () => {\n  const [messageText, setMessageText] = useState('')\n  const [messages, setMessages] = useState([])\n  const { socket, isConnected } = useSocket()\n\n  useSocketListener('chatMessage', logMessage)\n\n  function logMessage(msg) {\n    setMessages((priorMessages) => [msg, ...priorMessages])\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    socket.emit('chatMessage', messageText)\n    setMessageText('')\n  }\n\n  const messageList = messages.map((msg) => (\n    <li key={msg.id}>\n      <em>{msg.username}</em>: {msg.text}\n    </li>\n  ))\n  const connectionIcon = isConnected ? '🟢' : '🔴'\n\n  return (\n    <>\n      <h2>Chat {connectionIcon}</h2>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <div>\n            <div>\n              <input\n                type=\"text\"\n                value={messageText}\n                onChange={(e) => setMessageText(e.target.value)}\n              />\n            </div>\n            <div>\n              <button type=\"submit\">Submit</button>\n            </div>\n          </div>\n        </form>\n        <ul>{messageList}</ul>\n      </div>\n    </>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react'\nimport {\n  useSocket,\n  useSocketListener,\n  ServerToClientPayload,\n} from 'wasp/client/webSocket'\n\nexport const ChatPage = () => {\n  const [messageText, setMessageText] = useState<\n    // We are using a helper type to get the payload type for the \"chatMessage\" event.\n    ClientToServerPayload<'chatMessage'>\n  >('')\n  const [messages, setMessages] = useState<\n    ServerToClientPayload<'chatMessage'>[]\n  >([])\n  // The \"socket\" instance is typed with the types you defined on the server.\n  const { socket, isConnected } = useSocket()\n\n  // This is a type-safe event handler: \"chatMessage\" event and its payload type\n  // are defined on the server.\n  useSocketListener('chatMessage', logMessage)\n\n  function logMessage(msg: ServerToClientPayload<'chatMessage'>) {\n    setMessages((priorMessages) => [msg, ...priorMessages])\n  }\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    // This is a type-safe event emitter: \"chatMessage\" event and its payload type\n    // are defined on the server.\n    socket.emit('chatMessage', messageText)\n    setMessageText('')\n  }\n\n  const messageList = messages.map((msg) => (\n    <li key={msg.id}>\n      <em>{msg.username}</em>: {msg.text}\n    </li>\n  ))\n  const connectionIcon = isConnected ? '🟢' : '🔴'\n\n  return (\n    <>\n      <h2>Chat {connectionIcon}</h2>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <div>\n            <div>\n              <input\n                type=\"text\"\n                value={messageText}\n                onChange={(e) => setMessageText(e.target.value)}\n              />\n            </div>\n            <div>\n              <button type=\"submit\">Submit</button>\n            </div>\n          </div>\n        </form>\n        <ul>{messageList}</ul>\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Server Implementation - TypeScript\nDESCRIPTION: Type-safe server-side WebSocket implementation with Socket.IO, including interface definitions for events and payloads.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/web-sockets.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { v4 as uuidv4 } from 'uuid'\nimport { getFirstProviderUserId } from 'wasp/auth'\nimport { type WebSocketDefinition, type WaspSocketData } from 'wasp/server/webSocket'\n\nexport const webSocketFn: WebSocketFn = (io, context) => {\n  io.on('connection', (socket) => {\n    const username = getFirstProviderUserId(socket.data.user) ?? 'Unknown'\n    console.log('a user connected: ', username)\n\n    socket.on('chatMessage', async (msg) => {\n      console.log('message: ', msg)\n      io.emit('chatMessage', { id: uuidv4(), username, text: msg })\n    })\n  })\n}\n\ntype WebSocketFn = WebSocketDefinition<\n  ClientToServerEvents,\n  ServerToClientEvents,\n  InterServerEvents,\n  SocketData\n>\n\ninterface ServerToClientEvents {\n  chatMessage: (msg: { id: string, username: string, text: string }) => void;\n}\n\ninterface ClientToServerEvents {\n  chatMessage: (msg: string) => void;\n}\n\ninterface InterServerEvents {}\n\ninterface SocketData extends WaspSocketData {}\n```\n\n----------------------------------------\n\nTITLE: Testing React Todo Component with Mocked Queries - JavaScript\nDESCRIPTION: Presents a Vitest-based test for a React Todo component, using Wasp's 'mockServer' and 'renderInContext' helpers to mock queries and render the component. This test ensures the component handles and displays mock task data correctly, checks the presence and state of a checkbox, and uses @testing-library/react's screen APIs. Requires Wasp client testing utilities and React Testing Library.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/testing.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { test, expect } from \\\"vitest\\\";\\nimport { screen } from \\\"@testing-library/react\\\";\\n\\nimport { mockServer, renderInContext } from \\\"wasp/client/test\\\";\\nimport { getTasks } from \\\"wasp/client/operations\\\";\\nimport Todo from \\\"./Todo\\\";\\n\\nconst { mockQuery } = mockServer();\\n\\nconst mockTasks = [\\n  {\\n    id: 1,\\n    description: \\\"test todo 1\\\",\\n    isDone: true,\\n    userId: 1,\\n  },\\n];\\n\\ntest(\\\"handles mock data\\\", async () => {\\n  mockQuery(getTasks, mockTasks);\\n\\n  renderInContext(<Todo />);\\n\\n  await screen.findByText(\\\"test todo 1\\\");\\n\\n  expect(screen.getByRole(\\\"checkbox\\\")).toBeChecked();\\n\\n  screen.debug();\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing an Action Handler in TypeScript with Strong Typing\nDESCRIPTION: Defines and exports a strongly-typed createFoo Action handler in TypeScript, employing the generic CreateFoo type from Wasp (with specific args and output types). This ensures correct function signatures matching the Action's contract. Prerequisites: Wasp Action declaration, exported type from wasp/server/operations, and defined Foo type.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/actions.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport { type CreateFoo } from 'wasp/server/operations'\n\ntype Foo = // ...\n\nexport const createFoo: CreateFoo<{ bar: string }, Foo> = (args, context) => {\n  // implementation\n};\n```\n\n----------------------------------------\n\nTITLE: Invoking a Wasp Query in React (TSX)\nDESCRIPTION: Demonstrates invoking the `getTasks` query in a React component (`MainPage.tsx`) using TypeScript. It utilizes Wasp's `useQuery` hook and imports the generated client-side `getTasks` function and `Task` type. This ensures type safety throughout the component, including props for `TaskView` and `TasksList`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/05-queries.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx {1-2,5-14,17-36} title=\"src/MainPage.tsx\"\nimport { Task } from 'wasp/entities'\nimport { getTasks, useQuery } from 'wasp/client/operations'\n\nexport const MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n\nconst TaskView = ({ task }: { task: Task }) => {\n  return (\n    <div>\n      <input type=\"checkbox\" id={String(task.id)} checked={task.isDone} />\n      {task.description}\n    </div>\n  )\n}\n\nconst TasksList = ({ tasks }: { tasks: Task[] }) => {\n  if (!tasks?.length) return <div>No tasks</div>\n\n  return (\n    <div>\n      {tasks.map((task, idx) => (\n        <TaskView task={task} key={idx} />\n      ))}\n    </div>\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Routes and Pages in Wasp Configuration\nDESCRIPTION: This Wasp configuration snippet defines a route and a page for the application. It maps the root path `/` to the `HomePage` using `route HomeRoute`. It also defines the `HomePage`, linking it to the React component implementation in `@src/pages/HomePage` and specifies that authentication is required (`authRequired: true`) to access this page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/introduction/introduction.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\n...\n\nroute HomeRoute { path: \"/\", to: HomePage }\npage HomePage {\n  component: import { HomePage } from \"@src/pages/HomePage\",\n  authRequired: true // Will send user to /login if not authenticated.\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Importing CRUD Operation Type Definitions (TypeScript)\nDESCRIPTION: Illustrates how to import generic type definitions for CRUD operations for the 'Tasks' resource in TypeScript. By importing from 'wasp/server/crud', you can strongly type override handlers for actions and queries, enhancing type safety and IDE support. Inputs: N/A; Outputs: Named generic types for CRUD overrides. Requires 'wasp/server/crud' and a TypeScript backend.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/crud.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { type Tasks } from 'wasp/server/crud'\n\n// Each of the types is a generic type, so you can use it like this:\nexport const getAllOverride: Tasks.GetAllQuery<Input, Output> = async (\n  args,\n  context\n) => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Form (JSX) to Invoke a Wasp Action\nDESCRIPTION: Defines a React functional component `NewTaskForm` in JSX (`src/MainPage.jsx`). It includes an input field for the task description and a submit button. The `handleSubmit` function prevents the default form submission, extracts the description from the event target, calls the imported `createTask` Wasp action (from `wasp/client/operations`) with the description, resets the form, and includes basic error handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/06-actions.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { \n  // highlight-next-line\n  createTask, \n  getTasks, \n  useQuery \n} from 'wasp/client/operations'\n\n// ... MainPage, TaskView, TaskList ...\n\n// highlight-start\nconst NewTaskForm = () => {\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    try {\n      const target = event.target\n      const description = target.description.value\n      target.reset()\n      await createTask({ description })\n    } catch (err) {\n      window.alert('Error: ' + err.message)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"description\" type=\"text\" defaultValue=\"\" />\n      <input type=\"submit\" value=\"Create task\" />\n    </form>\n  )\n}\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Applying Combined Customizations in TypeScript (TSX)\nDESCRIPTION: Illustrates applying multiple customizations to the Wasp `LoginForm` in a TypeScript React component. It imports a typed `appearance` object and a logo image (`todoLogo`), passing them to the respective `appearance` and `logo` props for a fully customized form.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/ui.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/LoginPage.tsx\"\nimport { LoginForm } from 'wasp/client/auth'\n\nimport { authAppearance } from './appearance' // Note: Text says 'appearance', code uses 'authAppearance'. Assuming 'appearance' intended based on context.\nimport todoLogo from './todoLogo.png'\n\nexport function LoginPage() {\n  return <LoginForm appearance={appearance} logo={todoLogo} />\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement the previously declared Actions in JavaScript. It includes implementations for createTask and markTaskAsDone functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/actions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet nextId = 4\nconst tasks = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\nexport const createTask = (args) => {\n  const newTask = {\n    id: nextId,\n    isDone: false,\n    description: args.description,\n  }\n  nextId += 1\n  tasks.push(newTask)\n  return newTask\n}\n\nexport const markTaskAsDone = (args) => {\n  const task = tasks.find((task) => task.id === args.id)\n  if (!task) {\n    return\n  }\n  task.isDone = true\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Prisma Schema Configuration\nDESCRIPTION: Example of a Prisma schema file defining database configuration, client generator, and model definitions with relationships.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/prisma-file.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id      Int        @id @default(autoincrement())\n  tasks   Task[]\n}\n\nmodel Task {\n  id          Int        @id @default(autoincrement())\n  description String\n  isDone      Boolean    @default(false)\n  user        User       @relation(fields: [userId], references: [id])\n  userId      Int\n}\n```\n\n----------------------------------------\n\nTITLE: React Component with useQuery Hook in JavaScript\nDESCRIPTION: Example of using the useQuery hook in a React component for reactive queries.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/queries.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useQuery, getAllTasks, getFilteredTasks } from 'wasp/client/operations'\n\nconst MainPage = () => {\n  const { data: allTasks, error: error1 } = useQuery(getAllTasks)\n  const { data: doneTasks, error: error2 } = useQuery(getFilteredTasks, {\n    isDone: true,\n  })\n\n  if (error1 !== null || error2 !== null) {\n    return <div>There was an error</div>\n  }\n\n  return (\n    <div>\n      <h2>All Tasks</h2>\n      {allTasks && allTasks.length > 0\n        ? allTasks.map((task) => <Task key={task.id} {...task} />)\n        : 'No tasks'}\n\n      <h2>Finished Tasks</h2>\n      {doneTasks && doneTasks.length > 0\n        ? doneTasks.map((task) => <Task key={task.id} {...task} />)\n        : 'No finished tasks'}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User Data in Protected Pages (TypeScript)\nDESCRIPTION: TypeScript version of accessing the user object in a protected page component. Shows how to properly type the user prop using the AuthUser type from Wasp's auth module.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\npage AccountPage {\n  component: import Account from \"@src/pages/Account\",\n  authRequired: true\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type AuthUser } from 'wasp/auth'\nimport Button from './Button'\nimport { logout } from 'wasp/client/auth'\n\nconst AccountPage = ({ user }: { user: AuthUser }) => {\n  return (\n    <div>\n      <Button onClick={logout}>Logout</Button>\n      {JSON.stringify(user, null, 2)}\n    </div>\n  )\n}\n\nexport default AccountPage\n```\n\n----------------------------------------\n\nTITLE: Configuring User Entity in Wasp with JavaScript\nDESCRIPTION: Basic setup for declaring a user entity and Google authentication in a Wasp application using JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Prisma Schema for New Score Field (TypeScript)\nDESCRIPTION: Shows how to add the new optional 'score' JSON field to the Match model while keeping the existing fields. This allows for a gradual migration of data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2025-04-02-an-introduction-to-database-migrations.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nmodel Match {\n  // ... \n\n  player1Points String @default(\"0\")\n  player2Points String @default(\"0\")\n  player1Games  Int    @default(0)\n  player2Games  Int    @default(0)\n\n  // Adding a new optional \"score\" field\n  score Json?\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Wasp\nDESCRIPTION: Demonstrates how to configure authentication for a Wasp app, including specifying the user entity, auth methods, and redirect behavior.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  //...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {}, // use this or email, not both\n      email: {}, // use this or usernameAndPassword, not both\n      google: {},\n      gitHub: {},\n    },\n    onAuthFailedRedirectTo: \"/someRoute\"\n  }\n}\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Accessing Entities in Query Implementation (TypeScript)\nDESCRIPTION: Illustrates how a TypeScript query implementation accesses data entities declared in the `main.wasp` file. Type definitions for the query and entity improve type safety. Entities are accessed via `context.entities.Task`, which exposes the Prisma Client API for the `Task` entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/queries.md#2025-04-22_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport { type Task } from 'wasp/entities'\nimport { type GetAllTasks, type GetFilteredTasks } from 'wasp/server/operations'\n\nexport const getAllTasks: GetAllTasks<void, Task[]> = async (args, context) => {\n  return context.entities.Task.findMany({})\n}\n\nexport const getFilteredTasks: GetFilteredTasks<\n  Pick<Task, 'isDone'>,\n  Task[]\n> = async (args, context) => {\n  return context.entities.Task.findMany({\n    where: { isDone: args.isDone },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions with Type Safety in TypeScript (NodeJS)\nDESCRIPTION: This TypeScript snippet provides a type-safe implementation for the `createTask` and `markTaskAsDone` Actions. It imports Wasp-generated types (`CreateTask`, `MarkTaskAsDone`) from `wasp/server/operations` to strongly type the action functions. The `createTask` function is typed to accept `args` of type `Pick<Task, 'description'>` and return a `Task`. The `markTaskAsDone` function accepts `args` of type `Pick<Task, 'id'>` and returns `void`. This approach enables full-stack type safety when using TypeScript with Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"src/actions.ts\"\nimport { type CreateTask, type MarkTaskAsDone } from 'wasp/server/operations'\n\ntype Task = {\n  id: number\n  description: string\n  isDone: boolean\n}\n\n// our \"database\"\nlet nextId = 4\nconst tasks = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\n// You don't need to use the arguments if you don't need them\nexport const createTask: CreateTask<Pick<Task, 'description'>, Task> = (\n  args\n) => {\n  const newTask = {\n    id: nextId,\n    isDone: false,\n    description: args.description,\n  }\n  nextId += 1\n  tasks.push(newTask)\n  return newTask\n}\n\n// The 'args' object is something sent by the caller (most often from the client)\nexport const markTaskAsDone: MarkTaskAsDone<Pick<Task, 'id'>, void> = (\n  args\n) => {\n  const task = tasks.find((task) => task.id === args.id)\n  if (!task) {\n    // We'll show how to properly handle such errors later\n    return\n  }\n  task.isDone = true\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Meme Generation Action\nDESCRIPTION: Complete implementation of the createMeme action including OpenAI integration, template management, and meme generation workflow. Handles user authentication, credit checking, and database operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport HttpError from '@wasp/core/HttpError.js';\nimport OpenAI from 'openai';\nimport { fetchMemeTemplates, generateMemeImage } from './utils.js';\n\nimport type { CreateMeme } from '@wasp/actions/types';\nimport type { Meme, Template } from '@wasp/entities';\n\ntype CreateMemeArgs = { topics: string[]; audience: string };\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\nexport const createMeme: CreateMeme<CreateMemeArgs, Meme> = async ({ topics, audience }, context) => {\n  if (!context.user) {\n    throw new HttpError(401, 'You must be logged in');\n  }\n\n  if (context.user.credits === 0 && !context.user.isAdmin) {\n    throw new HttpError(403, 'You have no credits left');\n  }\n\n  const topicsStr = topics.join(', ');\n\n  let templates: Template[] = await context.entities.Template.findMany({});\n\n\tif (templates.length === 0) {\n    const memeTemplates = await fetchMemeTemplates();\n    templates = await Promise.all(\n      memeTemplates.map(async (template: any) => {\n        const addedTemplate = await context.entities.Template.upsert({\n          where: { id: template.id },\n          create: {\n            id: template.id,\n            name: template.name,\n            url: template.url,\n            width: template.width,\n            height: template.height,\n            boxCount: template.box_count\n          },\n          update: {}\n        });\n\n        return addedTemplate;\n      })\n    );\n  }\n\n  templates = templates.filter((template) => template.boxCount <= 2);\n  const randomTemplate = templates[Math.floor(Math.random() * templates.length)];\n\n  console.log('random template: ', randomTemplate);\n\n  const sysPrompt = `You are a meme idea generator. You will use the imgflip api to generate a meme based on an idea you suggest. Given a random template name and topics, generate a meme idea for the intended audience. Only use the template provided`;\n  const userPrompt = `Topics: ${topicsStr} \\n Intended Audience: ${audience} \\n Template: ${randomTemplate.name} \\n`;\n\n  let openAIResponse: OpenAI.Chat.Completions.ChatCompletion;\n  try {\n    openAIResponse = await openai.chat.completions.create({\n      messages: [\n        { role: 'system', content: sysPrompt },\n        { role: 'user', content: userPrompt },\n      ],\n      functions: [\n        {\n          name: 'generateMemeImage',\n          description: 'Generate meme via the imgflip API based on the given idea',\n          parameters: {\n            type: 'object',\n            properties: {\n              text0: { type: 'string', description: 'The text for the top caption of the meme' },\n              text1: { type: 'string', description: 'The text for the bottom caption of the meme' },\n            },\n            required: ['templateName', 'text0', 'text1'],\n          },\n        },\n      ],\n      function_call: {\n        name: 'generateMemeImage',\n      },\n      model: 'gpt-4-0613',\n    });\n  } catch (error: any) {\n    console.error('Error calling openAI: ', error);\n    throw new HttpError(500, 'Error calling openAI');\n  }\n\n  if (!openAIResponse.choices[0].message.function_call) throw new HttpError(500, 'No function call in openAI response');\n\n  const gptArgs = JSON.parse(openAIResponse.choices[0].message.function_call.arguments);\n  console.log('gptArgs: ', gptArgs);\n\n  const memeIdeaText0 = gptArgs.text0;\n  const memeIdeaText1 = gptArgs.text1;\n\n  console.log('meme Idea args: ', memeIdeaText0, memeIdeaText1);\n\n  const memeUrl = await generateMemeImage({\n    templateId: randomTemplate.id,\n    text0: memeIdeaText0,\n    text1: memeIdeaText1,\n  });\n\n  const newMeme = await context.entities.Meme.create({\n    data: {\n      text0: memeIdeaText0,\n      text1: memeIdeaText1,\n      topics: topicsStr,\n      audience: audience,\n      url: memeUrl,\n      template: { connect: { id: randomTemplate.id } },\n      user: { connect: { id: context.user.id } },\n    },\n  });\n\n  return newMeme;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Create Task Operation in TypeScript\nDESCRIPTION: This TypeScript code implements a custom create operation for tasks, ensuring the task is connected to the authenticated user creating it, with proper type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Tasks } from 'wasp/server/crud'\nimport { type Task } from 'wasp/entities'\nimport { HttpError } from 'wasp/server'\n\ntype CreateTaskInput = { description: string; isDone: boolean }\n\nexport const createTask: Tasks.CreateAction<CreateTaskInput, Task> = async (\n  args,\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(401, 'User not authenticated.')\n  }\n\n  const { description, isDone } = args\n  const { Task } = context.entities\n\n  return await Task.create({\n    data: {\n      description,\n      isDone,\n      user: {\n        connect: {\n          id: context.user.id,\n        },\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using the useAuth Hook in React\nDESCRIPTION: Demonstrates how to use the useAuth hook to access user data and conditionally render content based on authentication status.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAuth, logout } from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\nimport Todo from '../Todo'\n\nexport function Main() {\n  const { data: user } = useAuth()\n\n  if (!user) {\n    return (\n      <span>\n        Please <Link to=\"/login\">login</Link> or{' '}\n        <Link to=\"/signup\">sign up</Link>.\n      </span>\n    )\n  } else {\n    return (\n      <>\n        <button onClick={logout}>Logout</button>\n        <Todo />\n      </>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signup Action in JavaScript\nDESCRIPTION: A custom signup implementation in JavaScript that uses Wasp's authentication utilities for validation and user creation. This can be used to extend the default signup flow with custom logic or additional validation steps.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/username-and-pass.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  ensurePasswordIsPresent,\n  ensureValidPassword,\n  ensureValidUsername,\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  createUser,\n} from 'wasp/server/auth'\n\nexport const signup = async (args, _context) => {\n  ensureValidUsername(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('username', args.username)\n    const providerData = await sanitizeAndSerializeProviderData({\n      hashedPassword: args.password,\n    })\n\n    await createUser(\n      providerId,\n      providerData,\n      // Any additional data you want to store on the User entity\n      {},\n    )\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Emails with JavaScript/TypeScript\nDESCRIPTION: Example of sending an email using the emailSender.send() method, including sender details, recipient, subject, and message content in both text and HTML formats.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/email/email.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { emailSender } from \"wasp/server/email\";\n\n// In some action handler...\nconst info = await emailSender.send({\n  from: {\n    name: \"John Doe\",\n    email: \"john@doe.com\",\n  },\n  to: \"user@domain.com\",\n  subject: \"Saying hello\",\n  text: \"Hello world\",\n  html: \"Hello <strong>world</strong>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Writing a Client Unit Test with Vitest (JavaScript)\nDESCRIPTION: A unit test for the `areThereAnyTasks` function using the Vitest framework. It imports the function and uses `test` and `expect` from Vitest to assert the function's behavior with an empty array input. This file (`src/helpers.test.js`) would be automatically picked up by Wasp's test runner.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/testing.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { test, expect } from \"vitest\";\n\nimport { areThereAnyTasks } from \"./helpers\";\n\ntest(\"areThereAnyTasks\", () => {\n  expect(areThereAnyTasks([])).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Email Sign-up in JavaScript\nDESCRIPTION: JavaScript implementation of a custom email sign-up action that handles validation, user creation, and email verification. This serves as a starting point that can be customized according to specific requirements.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/advanced/custom-auth-actions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\nimport {\n  createEmailVerificationLink,\n  createProviderId,\n  createUser,\n  ensurePasswordIsPresent,\n  ensureValidEmail,\n  ensureValidPassword,\n  findAuthIdentity,\n  getProviderData,\n  sanitizeAndSerializeProviderData,\n  sendEmailVerificationEmail,\n} from 'wasp/server/auth'\n\nexport const signup = async (args, _context) => {\n  ensureValidEmail(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('email', args.email)\n    const existingAuthIdentity = await findAuthIdentity(providerId)\n\n    let providerData\n\n    if (existingAuthIdentity) {\n      // User already exists, handle accordingly\n\n      // For example, throw an error or return a message\n      throw new HttpError(400, 'Email already exists.')\n\n      // Or, another example, you can check if the user is already\n      // verified and re-send the verification email if not\n      providerData = getProviderData(existingAuthIdentity.providerData)\n      if (providerData.isEmailVerified) {\n        throw new HttpError(400, 'Email already verified.')\n      }\n    }\n\n    if (!providerData) {\n      providerData = await sanitizeAndSerializeProviderData({\n        // The provider will hash the password for us, so we don't need to do it here.\n        hashedPassword: args.password,\n        isEmailVerified: false,\n        emailVerificationSentAt: null,\n        passwordResetSentAt: null,\n      })\n      await createUser(\n        providerId,\n        providerData,\n        // Any additional data you want to store on the User entity\n        {}\n      )\n    }\n\n    // Verification link links to a client route e.g. /email-verification\n    const verificationLink = await createEmailVerificationLink(\n      args.email,\n      '/email-verification'\n    )\n    try {\n      await sendEmailVerificationEmail(args.email, {\n        from: {\n          name: 'My App Postman',\n          email: 'hello@itsme.com',\n        },\n        to: args.email,\n        subject: 'Verify your email',\n        text: `Click the link below to verify your email: ${verificationLink}`,\n        html: `\n                      <p>Click the link below to verify your email</p>\n                      <a href=\"${verificationLink}\">Verify email</a>\n                  `,\n      })\n    } catch (e) {\n      console.error('Failed to send email verification email:', e)\n      throw new HttpError(500, 'Failed to send email verification email.')\n    }\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Action Handler in JavaScript\nDESCRIPTION: Implements and exports the createFoo Action handler in native JavaScript, accepting the standard args and context positional parameters as expected by Wasp. This enables connection to backend logic for mutations. Requires linkage to Wasp action declaration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/actions.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nexport const createFoo = (args, context) => {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signup Function with Provider Authentication (JavaScript)\nDESCRIPTION: Shows the implementation of a custom signup function for Wasp authentication in JavaScript, creating provider ID and provider data, then creating a user entity using Wasp's internal helpers. Uses `createProviderId`, `sanitizeAndSerializeProviderData`, and `createUser`, handling errors and returning a success or failure object. This function expects signup arguments and returns an object with success status and message.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/entities.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  createUser,\n} from 'wasp/server/auth'\n\nexport const signup = async (args, { entities: { User } }) => {\n  try {\n    // Provider ID is a combination of the provider name and the provider user ID\n    // And it is used to uniquely identify the user in your app\n    const providerId = createProviderId('username', args.username)\n    // sanitizeAndSerializeProviderData hashes the password and returns a JSON string\n    const providerData = await sanitizeAndSerializeProviderData({\n      hashedPassword: args.password,\n    })\n\n    await createUser(\n      providerId,\n      providerData,\n      // Any additional data you want to store on the User entity\n      {},\n    )\n\n    // This is equivalent to:\n    // await User.create({\n    //   data: {\n    //     auth: {\n    //       create: {\n    //         identities: {\n    //             create: {\n    //                 providerName: 'username',\n    //                 providerUserId: args.username\n    //                 providerData,\n    //             },\n    //         },\n    //       }\n    //     },\n    //   }\n    // })\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Username Sign-up in TypeScript\nDESCRIPTION: TypeScript implementation of a custom username and password sign-up action with proper type definitions for inputs and outputs. Handles validation and user creation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/advanced/custom-auth-actions.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createProviderId,\n  createUser,\n  ensurePasswordIsPresent,\n  ensureValidPassword,\n  ensureValidUsername,\n  sanitizeAndSerializeProviderData,\n} from 'wasp/server/auth'\nimport type { CustomSignup } from 'wasp/server/operations'\n\ntype CustomSignupInput = {\n  username: string\n  password: string\n}\ntype CustomSignupOutput = {\n  success: boolean\n  message: string\n}\n\nexport const signup: CustomSignup<\n  CustomSignupInput,\n  CustomSignupOutput\n> = async (args, _context) => {\n  ensureValidUsername(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('username', args.username)\n    const providerData = await sanitizeAndSerializeProviderData<'username'>({\n      // The provider will hash the password for us, so we don't need to do it here.\n      hashedPassword: args.password,\n    })\n\n    await createUser(providerId, providerData, {})\n  } catch (e: any) {\n    console.error('Error creating user:', e)\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prisma Client Directly in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the Prisma Client directly in server-side TypeScript code for more control over Entity operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/entities.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prisma } from 'wasp/server'\n\nprisma.task.create({\n    description: \"Read the Entities doc\",\n    isDone: true // almost :)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Wasp Actions in a React Component (TypeScript)\nDESCRIPTION: Demonstrates using Wasp Actions within a React functional component written in TypeScript (TSX). It imports `useQuery`, `getTask`, and `markTaskAsDone` from `wasp/client/operations`, fetches data using `useQuery`, types the component props (`id: number`), displays task info, and calls the `markTaskAsDone` action in an `onClick` event handler, benefiting from end-to-end type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\n// highlight-next-line\nimport { useQuery, getTask, markTaskAsDone } from 'wasp/client/operations'\n\nexport const TaskPage = ({ id }: { id: number }) => {\n  const { data: task } = useQuery(getTask, { id })\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>\n  }\n\n  const { description, isDone } = task\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n      {isDone || (\n        // highlight-next-line\n        <button onClick={() => markTaskAsDone({ id })}>Mark as done.</button>\n      )}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Endpoint in TypeScript\nDESCRIPTION: Shows the TypeScript implementation of a custom API endpoint with type safety and parameter typing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/apis.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FooBar } from \"wasp/server/api\";\n\nexport const fooBar: FooBar<\n  { email: string },\n  { answer: number }\n> = (req, res, _context) => {\n  console.log(req.params.email);\n  res.json({ answer: 42 });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signup Action (TypeScript)\nDESCRIPTION: This TypeScript version of the custom signup action includes type annotations for the function parameters and return value. It demonstrates how to create a new user with proper type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/username-and-pass.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport type { User } from '@wasp/entities'\nimport type { SignupUser } from '@wasp/actions/types'\n\ntype SignupPayload = Pick<User, 'username' | 'password'>\n\nexport const signUp: SignupUser<SignupPayload, User> = async (args, context) => {\n  // Your custom code before sign-up.\n  // ...\n\n  const newUser = context.entities.User.create({\n    data: {\n      username: args.username,\n      password: args.password // password hashed automatically by Wasp! 🐝\n    }\n  })\n\n  // Your custom code after sign-up.\n  // ...\n  return newUser\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Email Authentication and User Entity in Wasp/Prisma\nDESCRIPTION: Configures basic email authentication in `main.wasp` by defining the `auth` block, linking it to the `User` entity defined in Prisma, enabling the `email` authentication method, and setting a redirect path (`/someRoute`) for failed authentication attempts. The associated `schema.prisma` file defines the minimal `User` model with an auto-incrementing integer ID.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_11\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napp myApp {\n  title: \"My app\",\n  // ...\n\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        // We'll explain these options below\n      },\n    },\n    onAuthFailedRedirectTo: \"/someRoute\"\n  },\n  // ...\n}\n```\n```\n\nLANGUAGE: prisma\nCODE:\n```\n```prisma title=\"schema.prisma\"\nmodel User {\n  id Int @id @default(autoincrement())\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Updating User Password Securely with Wasp Auth in TypeScript\nDESCRIPTION: This TypeScript function implements secure password updating using type-safe Wasp helpers and operation types. It finds the correct user auth identity by email, ensures it exists, processes the provider data, and updates the hashedPassword field. Dependencies include various Wasp server auth modules and `UpdatePassword` operation types. Inputs are a payload with email and password fields, and absence of the auth identity leads to an explicit error. Passwords are never stored unencrypted; hashing is automatic.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n  createProviderId,\n  findAuthIdentity,\n  updateAuthIdentityProviderData,\n  deserializeAndSanitizeProviderData,\n} from 'wasp/server/auth';\nimport { type UpdatePassword } from 'wasp/server/operations'\n\nexport const updatePassword: UpdatePassword<\n  { email: string; password: string },\n  void,\n> = async (args, context) => {\n  const providerId = createProviderId('email', args.email)\n  const authIdentity = await findAuthIdentity(providerId)\n  if (!authIdentity) {\n      throw new HttpError(400, \"Unknown user\")\n  }\n  \n  const providerData = deserializeAndSanitizeProviderData<'email'>(authIdentity.providerData)\n\n  // Updates the password and hashes it automatically.\n  await updateAuthIdentityProviderData(providerId, providerData, {\n      hashedPassword: args.password,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using routes Object for Type-Safe Links\nDESCRIPTION: Demonstrates how to use the routes object to create type-safe links programmatically.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/links.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { routes } from 'wasp/client/router'\n\nconst linkToTask = routes.TaskRoute.build({ params: { id: 1 } })\n```\n\n----------------------------------------\n\nTITLE: Testing a React Component with Mocked Wasp API Calls (JavaScript/JSX)\nDESCRIPTION: Provides a Vitest test case (`src/Todo.test.jsx`) for the `Todo` component that fetches data via the Wasp API client. It uses `mockServer` to get `mockApi`, mocks the `GET /tasks` API call to return predefined `mockTasks`, renders the component with `renderInContext`, and employs `@testing-library/react` (`screen`) to verify the component displays the mocked API response.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/testing.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { test, expect } from \"vitest\";\nimport { screen } from \"@testing-library/react\";\n\nimport { mockServer, renderInContext } from \"wasp/client/test\";\nimport Todo from \"./Todo\";\n\nconst { mockApi } = mockServer();\n\nconst mockTasks = [\n  {\n    id: 1,\n    description: \"test todo 1\",\n    isDone: true,\n    userId: 1,\n  },\n];\n\ntest(\"handles mock data\", async () => {\n  mockApi(\"/tasks\", { res: mockTasks });\n\n  renderInContext(<Todo />);\n\n  await screen.findByText(\"test todo 1\");\n\n  expect(screen.getByRole(\"checkbox\")).toBeChecked();\n\n  screen.debug();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Queries in TypeScript\nDESCRIPTION: TypeScript implementation of the 'getAllTasks' and 'getFilteredTasks' Queries. It shows how to use type annotations and import Query types generated by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/queries.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetAllTasks, GetFilteredTasks } from '@wasp/queries/types'\n\ntype Task = {\n  id: number\n  description: string\n  isDone: boolean\n}\n\nconst tasks: Task[] = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\nexport const getAllTasks: GetAllTasks<void, Task[]> = () => {\n  return tasks\n}\n\nexport const getFilteredTasks: GetFilteredTasks<\n  Pick<Task, 'isDone'>,\n  Task[]\n> = (args) => {\n  const { isDone } = args\n  return tasks.filter((task) => task.isDone === isDone)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query in TypeScript with Type Safety\nDESCRIPTION: Example of implementing a query function in TypeScript using the generated type to specify input and output types for better type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/queries.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetFoo } from 'wasp/server/operations'\n\ntype Foo = // ...\n\nexport const getFoo: GetFoo<{ id: number }, Foo> = (args, context) => {\n  // implementation\n};\n```\n\n----------------------------------------\n\nTITLE: Requiring Authentication for Main Page (Wasp)\nDESCRIPTION: Demonstrates how to enforce page-level authentication in the Wasp app. Adds the 'authRequired: true' property for the main page and specifies the import of its React component. Ensures only authenticated users can access the main UI, results in redirection to '/login' for unauthenticated users.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/07-auth.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\\n\\npage MainPage {\\n  // highlight-next-line\\n  authRequired: true,\\n  component: import { MainPage } from \"@src/MainPage\"\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Typed Database Seed Function in TypeScript\nDESCRIPTION: This code snippet demonstrates a database seed function in TypeScript with proper type annotations. It uses the DbSeedFn type from Wasp and includes type definitions for the Prisma Client and custom functions. The function creates a user and a task with typed parameters.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/databases.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTask } from './actions.js'\nimport { type DbSeedFn } from 'wasp/server'\nimport { sanitizeAndSerializeProviderData } from 'wasp/server/auth'\nimport { type AuthUser } from 'wasp/auth'\nimport { PrismaClient } from '@prisma/client'\n\nexport const devSeedSimple: DbSeedFn = async (prisma) => {\n  const user = await createUser(prisma, {\n    username: 'RiuTheDog',\n    password: 'bark1234',\n  })\n\n  await createTask(\n    { description: 'Chase the cat', isDone: false },\n    { user, entities: { Task: prisma.task } }\n  )\n};\n\nasync function createUser(\n  prisma: PrismaClient,\n  data: { username: string, password: string }\n): Promise<AuthUser> {\n  const newUser = await prisma.user.create({\n    data: {\n      auth: {\n        create: {\n          identities: {\n            create: {\n              providerName: 'username',\n              providerUserId: data.username,\n              providerData: await sanitizeAndSerializeProviderData<'username'>({\n                hashedPassword: data.password\n              }),\n            },\n          },\n        },\n      },\n    },\n  })\n\n  return newUser\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Wasp Project with Interactive Template Selection\nDESCRIPTION: This snippet demonstrates the interactive process of creating a new Wasp project using the 'wasp new' command. It shows the prompts for project name and template selection, as well as the output after project creation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/starter-templates.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp new\nEnter the project name (e.g. my-project) ▸ MyFirstProject\nChoose a starter template\n[1] basic (default)\n    Simple starter template with a single page.\n[2] todo-ts\n    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.\n[3] saas\n    Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.\n[4] embeddings\n    Comes with code for generating vector embeddings and performing vector similarity search.\n[5] ai-generated\n    🤖 Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)\n ▸ 1\n\n🐝 --- Creating your project from the \"basic\" template... -------------------------\n\nCreated new Wasp app in ./MyFirstProject directory!\n\nTo run your new app, do:\n    cd MyFirstProject\n    wasp db start\n```\n\n----------------------------------------\n\nTITLE: Accessing Auth Data in React Components - TypeScript\nDESCRIPTION: Example of accessing user authentication data from task objects in a React component using TypeScript, showing how to navigate the nested auth and identities structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {task.user.auth?.identities[0].providerUserId}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing SignupForm Component in JavaScript\nDESCRIPTION: JavaScript implementation of a customized SignupForm component with additional fields. This example shows how to add both declarative fields using objects and custom fields using render functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  SignupForm,\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        /* The address field is defined using an object */\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        /* The phone number is defined using a render function */\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Actions in Wasp\nDESCRIPTION: This snippet shows how to declare Actions in a Wasp file. It demonstrates declaring two Actions: createTask and markTaskAsDone, which are implemented in an external JavaScript or TypeScript file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/actions.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\naction createTask {\n  fn: import { createTask } from \"@src/actions.js\"\n}\n\naction markTaskAsDone {\n  fn: import { markTaskAsDone } from \"@src/actions.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a TypeScript API with Generic Types\nDESCRIPTION: TypeScript implementation of an API that uses generic types to specify parameters and response types, providing enhanced type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/apis.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FooBar } from \"@wasp/apis/types\";\n\nexport const fooBar: FooBar<\n  { email: string }, // params\n  { answer: number } // response\n> = (req, res, _context) => {\n  console.log(req.params.email);\n  res.json({ answer: 42 });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query in TypeScript with Type Safety\nDESCRIPTION: Demonstrates how to implement a query in TypeScript with proper type definitions for input and output.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/queries.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport { type GetFoo } from 'wasp/server/operations'\n\ntype Foo = // ...\n\nexport const getFoo: GetFoo<{ id: number }, Foo> = (args, context) => {\n  // implementation\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing and Exporting Shared Resources in Server Setup (JavaScript)\nDESCRIPTION: This JavaScript code defines a `mySetupFunction` that initializes a shared resource (`someResource`) asynchronously and starts a cron job during server startup. It also exports a getter function `getSomeResource` to allow other parts of the application (like Operations) to access the initialized resource.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/server-config.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/myServerSetupCode.js\"\nlet someResource = undefined\n\nexport const mySetupFunction = async () => {\n  // Let's pretend functions setUpSomeResource and startSomeCronJob\n  // are implemented below or imported from another file.\n  someResource = await setUpSomeResource()\n  startSomeCronJob()\n}\n\nexport const getSomeResource = () => someResource\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord OAuth in Wasp Main File - Wasp\nDESCRIPTION: Defines the Wasp application's authentication configuration, specifying the user entity, Discord OAuth provider, and references to external functions for provider configuration and user signup field mapping. Requires referenced helper files (e.g., @src/auth/discord.js/ts) and a Prisma User model. The input is the Wasp app manifest; outputs are used internally by the Wasp compiler to configure authentication flow. The configuration should match your application's user data requirements and file structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/discord.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      discord: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/discord.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/discord.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Server Setup Function to Add a Custom Route (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates implementing `mySetupFunction` with type safety. It imports `ServerSetupFn` type from `wasp/server` and `Application` from `express`. The function receives the Express `app` instance and adds a custom GET route at `/customRoute`. This function runs once at server startup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/server-config.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/myServerSetupCode.ts\"\nimport { ServerSetupFn } from 'wasp/server'\nimport { Application } from 'express'\n\nexport const mySetupFunction: ServerSetupFn = async ({ app }) => {\n  addCustomRoute(app)\n}\n\nfunction addCustomRoute(app: Application) {\n  app.get('/customRoute', (_req, res) => {\n    res.send('I am a custom route')\n  })\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Integrating the Form Component in MainPage (TSX)\nDESCRIPTION: Demonstrates how to include the previously defined `NewTaskForm` component within the main `MainPage` React component in TSX (`src/MainPage.tsx`). The form is rendered as part of the page structure, enabling users to create tasks. This snippet shows the integration alongside data fetching logic using `useQuery` and conditional rendering based on the query state.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/06-actions.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormEvent } from 'react'\nimport { Task } from 'wasp/entities'\nimport {\n  createTask,\n  getTasks,\n  useQuery\n} from 'wasp/client/operations'\n\nconst MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      // highlight-next-line\n      <NewTaskForm />\n\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n\n// ... TaskList, TaskView, NewTaskForm ...\n```\n\n----------------------------------------\n\nTITLE: Implementing an API Endpoint in TypeScript\nDESCRIPTION: Shows the TypeScript implementation of a custom API endpoint with proper type annotations. The FooBar type is generated by Wasp based on the API declaration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/apis.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FooBar } from \"wasp/server/api\"; // This type is generated by Wasp based on the `api` declaration above.\n\nexport const fooBar: FooBar = (req, res, context) => {\n  res.set(\"Access-Control-Allow-Origin\", \"*\"); // Example of modifying headers to override Wasp default CORS middleware.\n  res.json({ msg: `Hello, ${context.user ? \"registered user\" : \"stranger\"}!` });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth in Wasp Main File (JavaScript, API Reference) - wasp\nDESCRIPTION: Demonstrates minimal auth configuration in Wasp for referencing in API documentation. Focuses on linking imported JS configuration and field mapping logic in the 'main.wasp' file. Inputs are config function imports and provider settings. Output is an OAuth-authenticated app setup for API reference purposes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/github.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/github.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/github.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Rendering React Components for Testing in Wasp (JavaScript)\nDESCRIPTION: Demonstrates using the `renderInContext` helper function from `wasp/client/test` to render a React component (`MainPage`) within the necessary context providers (QueryClientProvider, Router) for testing purposes. This ensures components relying on Wasp's routing or data fetching capabilities can be tested correctly.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { renderInContext } from \"wasp/client/test\";\n\nrenderInContext(<MainPage />);\n```\n\n----------------------------------------\n\nTITLE: React Page for Migrating Password - Wasp Client - JSX (JavaScript)\nDESCRIPTION: Provides a user-facing React page for submitting username and password to migrate to the new authentication system. Uses wasp forms, custom error/success messages, and react-hook-form for state management. Inputs are 'username' and 'password'; output is a UI success message. Relies on 'wasp/client/operations' for backend submission. No email verification, so both username and password are required.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  FormItemGroup,\n  FormLabel,\n  FormInput,\n  FormError,\n} from \"wasp/client/auth\";\nimport { useForm } from \"react-hook-form\";\nimport { migratePassword } from \"wasp/client/operations\";\nimport { useState } from \"react\";\n\nexport function MigratePasswordPage() {\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const form = useForm();\n\n  const onSubmit = form.handleSubmit(async (data) => {\n    try {\n      const result = await migratePassword(data);\n      setSuccessMessage(result.message);\n    } catch (e) {\n      console.error(e);\n      if (e instanceof Error) {\n        setErrorMessage(e.message);\n      }\n    }\n  });\n\n  return (\n    <div style={{\n      maxWidth: \"400px\",\n      margin: \"auto\",\n    }}>\n      <h1>Migrate your password</h1>\n      <p>\n        If you have an account on the old version of the website, you can\n        migrate your password to the new version.\n      </p>\n      {successMessage && <div>{successMessage}</div>}\n      {errorMessage && <FormError>{errorMessage}</FormError>}\n      <form onSubmit={onSubmit}>\n        <FormItemGroup>\n          <FormLabel>Username</FormLabel>\n          <FormInput\n            {...form.register(\"username\", {\n              required: \"Username is required\",\n            })}\n          />\n          <FormError>{form.formState.errors.username?.message}</FormError>\n        </FormItemGroup>\n        <FormItemGroup>\n          <FormLabel>Password</FormLabel>\n          <FormInput\n            {...form.register(\"password\", {\n              required: \"Password is required\",\n            })}\n            type=\"password\"\n          />\n          <FormError>{form.formState.errors.password?.message}</FormError>\n        </FormItemGroup>\n        <button type=\"submit\">Migrate password</button>\n      </form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Actions in Wasp\nDESCRIPTION: This snippet shows how to declare Actions in a Wasp file. It demonstrates declaring two Actions: 'createTask' and 'markTaskAsDone', and specifies their implementation files.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\naction createTask {\n  fn: import { createTask } from \"@src/actions.js\"\n}\n\naction markTaskAsDone {\n  fn: import { markTaskAsDone } from \"@src/actions.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using useAuth Hook in React Component\nDESCRIPTION: Demonstrates how to use the useAuth hook provided by Wasp to access user data and handle authentication state in a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAuth, logout } from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\nimport Todo from '../Todo'\n\nexport function Main() {\n  const { data: user } = useAuth()\n\n  if (!user) {\n    return (\n      <span>\n        Please <Link to=\"/login\">login</Link> or{' '}\n        <Link to=\"/signup\">sign up</Link>.\n      </span>\n    )\n  } else {\n    return (\n      <>\n        <button onClick={logout}>Logout</button>\n        <Todo />\n      </>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking the Tasks Query and Displaying Results with Strong Typing - React Frontend - TypeScript\nDESCRIPTION: This TypeScript React code fetches and renders tasks using Wasp's getTasks query and useQuery hook, leveraging strong type checking with imported Task types. It includes type annotations for functional components and props, ensuring type-safe access to task fields. The hook manages networking, caching, and reactivity for task list updates, and the code robustly handles loading and error states.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/05-queries.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Task } from 'wasp/entities'\\nimport { getTasks, useQuery } from 'wasp/client/operations'\\n\\nexport const MainPage = () => {\\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\\n\\n  return (\\n    <div>\\n      {tasks && <TasksList tasks={tasks} />}\\n\\n      {isLoading && 'Loading...'}\\n      {error && 'Error: ' + error}\\n    </div>\\n  )\\n}\\n\\nconst TaskView = ({ task }: { task: Task }) => {\\n  return (\\n    <div>\\n      <input type=\"checkbox\" id={String(task.id)} checked={task.isDone} />\\n      {task.description}\\n    </div>\\n  )\\n}\\n\\nconst TasksList = ({ tasks }: { tasks: Task[] }) => {\\n  if (!tasks?.length) return <div>No tasks</div>\\n\\n  return (\\n    <div>\\n      {tasks.map((task, idx) => (\\n        <TaskView task={task} key={idx} />\\n      ))}\\n    </div>\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Updating createTask and updateTask Actions with Authentication in TypeScript\nDESCRIPTION: Implements createTask and updateTask actions in TypeScript with authentication checks, type annotations, and user-specific task operations. Uses Prisma's updateMany for task updates.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/07-auth.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from '@wasp/entities'\nimport { CreateTask, UpdateTask } from '@wasp/actions/types'\nimport HttpError from '@wasp/core/HttpError.js'\n\ntype CreateTaskPayload = Pick<Task, 'description'>\n\nexport const createTask: CreateTask<CreateTaskPayload, Task> = async (\n  args,\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.create({\n    data: {\n      description: args.description,\n      user: { connect: { id: context.user.id } },\n    },\n  })\n}\n\ntype UpdateTaskPayload = Pick<Task, 'id' | 'isDone'>\n\nexport const updateTask: UpdateTask<\n  UpdateTaskPayload,\n  { count: number }\n> = async ({ id, isDone }, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.updateMany({\n    where: { id, user: { id: context.user.id } },\n    data: { isDone },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Server-Side Signup Action (JavaScript)\nDESCRIPTION: This JavaScript code defines the server-side logic for a custom signup action. It uses helper functions from `wasp/server/auth` to validate username and password, create a provider ID, sanitize and serialize provider data (including hashing the password), and finally create the user entity. It returns a success or error message.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/username-and-pass.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/auth/signup.js\"\nimport {\n  ensurePasswordIsPresent,\n  ensureValidPassword,\n  ensureValidUsername,\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  createUser,\n} from 'wasp/server/auth'\n\nexport const signup = async (args, _context) => {\n  ensureValidUsername(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('username', args.username)\n    const providerData = await sanitizeAndSerializeProviderData({\n      hashedPassword: args.password,\n    })\n\n    await createUser(\n      providerId,\n      providerData,\n      // Any additional data you want to store on the User entity\n      {},\n    )\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Direct Prisma Client Usage in TypeScript\nDESCRIPTION: Shows how to directly interact with entities using Prisma Client in server-side TypeScript code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/entities.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prisma } from 'wasp/server'\n\nprisma.task.create({\n    description: \"Read the Entities doc\",\n    isDone: true // almost :)\n})\n```\n\n----------------------------------------\n\nTITLE: Default Wasp CRUD 'create' Operation Implementation (JavaScript)\nDESCRIPTION: This snippet illustrates the default JavaScript implementation for the `create` CRUD operation generated by Wasp. It utilizes the Prisma Client's `create` method, passing the `data` property from the `args` object directly. The surrounding text highlights a limitation: this default implementation saves all client-sent data without validation or filtering, which might be undesirable.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// ...\nreturn Task.create({ data: args.data })\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring App, Entities, and Routing for Tasks CRUD App - Wasp Language\nDESCRIPTION: Sets up the main Wasp app structure, defining the application configuration, enabling authentication, and thoroughly specifying User and Task entities, along with application routes and pages. This snippet requires Wasp CLI, Prisma for database integration, and referenced component files as dependencies. It receives no runtime input but determines the overall backend and frontend project structure upon build.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/crud.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp tasksCrudApp {\\n  wasp: {\\n    version: \"^0.13.0\"\\n  },\\n  title: \"Tasks Crud App\",\\n\\n  // We enabled auth and set the auth method to username and password\\n  auth: {\\n    userEntity: User,\\n    methods: {\\n      usernameAndPassword: {},\\n    },\\n    onAuthFailedRedirectTo: \"/login\",\\n  },\\n}\\n\\nentity User {=psl\\n  id       Int @id @default(autoincrement())\\n  tasks    Task[]\\npsl=}\\n\\n// We defined a Task entity on which we'll enable CRUD later on\\nentity Task {=psl\\n  id          Int @id @default(autoincrement())\\n  description String\\n  isDone      Boolean\\n  userId      Int\\n  user        User @relation(fields: [userId], references: [id])\\npsl=}\\n\\n// Tasks app routes\\nroute RootRoute { path: \"/\", to: MainPage }\\npage MainPage {\\n  component: import { MainPage } from \"@src/MainPage.jsx\",\\n  authRequired: true,\\n}\\n\\nroute LoginRoute { path: \"/login\", to: LoginPage }\\npage LoginPage {\\n  component: import { LoginPage } from \"@src/LoginPage.jsx\",\\n}\\n\\nroute SignupRoute { path: \"/signup\", to: SignupPage }\\npage SignupPage {\\n  component: import { SignupPage } from \"@src/SignupPage.jsx\",\\n}\n```\n\n----------------------------------------\n\nTITLE: Using the useQuery Hook in React with TypeScript\nDESCRIPTION: Demonstrates the use of the useQuery hook in a React component with TypeScript, showcasing automatic type inference and full-stack type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/queries.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { type Task } from 'wasp/entities'\nimport { useQuery, getAllTasks, getFilteredTasks } from 'wasp/client/operations'\n\nconst MainPage = () => {\n  // TypeScript automatically infers return values and type-checks payload types.\n  const { data: allTasks, error: error1 } = useQuery(getAllTasks)\n  const { data: doneTasks, error: error2 } = useQuery(getFilteredTasks, {\n    isDone: true,\n  })\n\n  if (error1 !== null || error2 !== null) {\n    return <div>There was an error</div>\n  }\n\n  return (\n    <div>\n      <h2>All Tasks</h2>\n      {allTasks && allTasks.length > 0\n        ? allTasks.map((task) => <Task key={task.id} {...task} />)\n        : 'No tasks'}\n\n      <h2>Finished Tasks</h2>\n      {doneTasks && doneTasks.length > 0\n        ? doneTasks.map((task) => <Task key={task.id} {...task} />)\n        : 'No finished tasks'}\n    </div>\n  )\n}\n\nconst Task = ({ description, isDone }: Task) => {\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n    </div>\n  )\n}\n\nexport default MainPage\n```\n\n----------------------------------------\n\nTITLE: Securing Create and Update Task Actions - Wasp Server (JavaScript)\nDESCRIPTION: This snippet shows backend action functions to create and update tasks, ensuring only authenticated users can perform these operations, and that users can only manipulate their own tasks. The actions use Wasp's HttpError for access control and Prisma for database operations. It requires the Wasp backend context and a properly configured user-task relation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/07-auth.md#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const createTask = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.create({\n    data: {\n      description: args.description,\n      user: { connect: { id: context.user.id } },\n    },\n  })\n}\n\nexport const updateTask = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.updateMany({\n    where: { id: args.id, user: { id: context.user.id } },\n    data: { isDone: args.isDone },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signup in TypeScript\nDESCRIPTION: TypeScript implementation of a custom signup function with properly typed inputs and outputs. It shows how to create a user with username/password authentication using Wasp's auth helper functions with proper type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/entities.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  createUser,\n} from 'wasp/server/auth'\nimport type { CustomSignup } from 'wasp/server/operations'\n\ntype CustomSignupInput = {\n  username: string\n  password: string\n}\ntype CustomSignupOutput = {\n  success: boolean\n  message: string\n}\n\nexport const signup: CustomSignup<\n  CustomSignupInput,\n  CustomSignupOutput\n> = async (args, { entities: { User } }) => {\n  try {\n    // Provider ID is a combination of the provider name and the provider user ID\n    // And it is used to uniquely identify the user in your app\n    const providerId = createProviderId('username', args.username)\n    // sanitizeAndSerializeProviderData hashes the password and returns a JSON string\n    const providerData = await sanitizeAndSerializeProviderData<'username'>({\n      hashedPassword: args.password,\n    })\n\n    await createUser(\n      providerId,\n      providerData,\n      // Any additional data you want to store on the User entity\n      {}\n    )\n\n    // This is equivalent to:\n    // await User.create({\n    //   data: {\n    //     auth: {\n    //       create: {\n    //         identities: {\n    //             create: {\n    //                 providerName: 'username',\n    //                 providerUserId: args.username\n    //                 providerData,\n    //             },\n    //         },\n    //       }\n    //     },\n    //   }\n    // })\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Tasks Query Function - Wasp Backend - JavaScript\nDESCRIPTION: Defines the getTasks asynchronous function for Wasp's backend, which retrieves all Task entities from the database in ascending ID order via the Prisma client. It requires the context parameter (injected by Wasp), through which access to all entities is provided. The function returns a Promise resolving to an array of task objects; no arguments are expected.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/05-queries.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getTasks = async (args, context) => {\\n  return context.entities.Task.findMany({\\n    orderBy: { id: 'asc' },\\n  })\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Management with CRUD Operations in React (JavaScript)\nDESCRIPTION: A React component that demonstrates using Wasp-generated CRUD operations to fetch and create tasks, displaying them in a list view with a form for adding new tasks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/crud.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// highlight-next-line\nimport { Tasks } from 'wasp/client/crud'\nimport { useState } from 'react'\n\nexport const MainPage = () => {\n  // highlight-next-line\n  const { data: tasks, isLoading, error } = Tasks.getAll.useQuery()\n  // highlight-next-line\n  const createTask = Tasks.create.useAction()\n  const [taskDescription, setTaskDescription] = useState('')\n\n  function handleCreateTask() {\n    createTask({ description: taskDescription, isDone: false })\n    setTaskDescription('')\n  }\n\n  if (isLoading) return <div>Loading...</div>\n  if (error) return <div>Error: {error.message}</div>\n  return (\n    <div\n      style={{\n        fontSize: '1.5rem',\n        display: 'grid',\n        placeContent: 'center',\n        height: '100vh',\n      }}\n    >\n      <div>\n        <input\n          value={taskDescription}\n          onChange={(e) => setTaskDescription(e.target.value)}\n        />\n        <button onClick={handleCreateTask}>Create task</button>\n      </div>\n      <ul>\n        {tasks.map((task) => (\n          <li key={task.id}>{task.description}</li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Calling an API from the Client in JavaScript\nDESCRIPTION: Shows how to call a custom API endpoint from the client-side JavaScript code using Wasp's Axios wrapper.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/apis.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect } from \"react\";\nimport { api } from \"wasp/client/api\";\n\nasync function fetchCustomRoute() {\n  const res = await api.get(\"/foo/bar\");\n  console.log(res.data);\n}\n\nexport const Foo = () => {\n  useEffect(() => {\n    fetchCustomRoute();\n  }, []);\n\n  return <>// ...</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Entities in Query Implementation (JavaScript)\nDESCRIPTION: Illustrates how a JavaScript query implementation accesses data entities declared in the `main.wasp` file. The entities are available via the `context.entities` object (e.g., `context.entities.Task`), providing access to the Prisma API for that entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/queries.md#2025-04-22_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nexport const getAllTasks = async (args, context) => {\n  return context.entities.Task.findMany({})\n}\n\nexport const getFilteredTasks = async (args, context) => {\n  return context.entities.Task.findMany({\n    where: { isDone: args.isDone },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Models and Relationships in Prisma Schema\nDESCRIPTION: Demonstrates how to define database options, models (User and Task), and relationships in the schema.prisma file for a Wasp project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/prisma-file.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id      Int        @id @default(autoincrement())\n  tasks   Task[]\n}\n\nmodel Task {\n  id          Int        @id @default(autoincrement())\n  description String\n  isDone      Boolean    @default(false)\n  user        User       @relation(fields: [userId], references: [id])\n  userId      Int\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Token Refresh in TypeScript\nDESCRIPTION: TypeScript implementation for refreshing OAuth access tokens with proper type definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/auth-hooks.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OnAfterLoginHook } from 'wasp/server/auth'\nimport { google } from 'wasp/server/auth'\n\nexport const onAfterLogin: OnAfterLoginHook = async ({ oauth }) => {\n  if (oauth.provider === 'google' && oauth.tokens.refreshToken !== null) {\n    const newTokens = await google.oAuthClient.refreshAccessToken(\n      oauth.tokens.refreshToken\n    )\n    log('new tokens', newTokens)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Migration Script (TypeScript)\nDESCRIPTION: A custom endpoint that migrates existing match data from the old format to the new JSON format. It finds matches without the new score field and updates them accordingly.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2025-04-02-an-introduction-to-database-migrations.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MigrateToNewSchemaApi } from \"wasp/server/api\";\nimport { Prisma } from \"@prisma/client\";\n\nexport const migrateToNewSchema: MigrateToNewSchemaApi = async (\n  _req,\n  res,\n  context\n) => {\n  // 1. Get all the matches that have an empty score field\n  const matchesWithoutJsonScore = await context.entities.Match.findMany({\n    where: {\n      score: {\n        equals: Prisma.DbNull,\n      },\n    },\n  });\n\n  let updatedCount = 0;\n  for (let match of matchesWithoutJsonScore) {\n    // 2. Copy the data from the old format to the new format\n    await context.entities.Match.update({\n      where: { id: match.id },\n      data: {\n        score: {\n          player1: {\n            points: match.player1Points,\n            games: match.player1Games,\n          },\n          player2: {\n            points: match.player2Points,\n            games: match.player2Games,\n          },\n        },\n      },\n    });\n    updatedCount++;\n  }\n\n  return res.json({ success: true, updatedCount });\n};\n```\n\n----------------------------------------\n\nTITLE: Client-side Authentication with useAuth Hook in React\nDESCRIPTION: Example showing how to use Wasp's useAuth hook in a React component to handle authenticated and non-authenticated states with login/signup navigation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAuth, logout } from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\nimport Todo from '../Todo'\n\nexport function Main() {\n  const { data: user } = useAuth()\n\n  if (!user) {\n    return (\n      <span>\n        Please <Link to=\"/login\">login</Link> or{' '}\n        <Link to=\"/signup\">sign up</Link>.\n      </span>\n    )\n  } else {\n    return (\n      <>\n        <button onClick={logout}>Logout</button>\n        <Todo />\n      </>\n    )\n  }\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuth, logout } from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\nimport Todo from '../Todo'\n\nexport function Main() {\n  const { data: user } = useAuth()\n\n  if (!user) {\n    return (\n      <span>\n        Please <Link to='/login'>login</Link> or <Link to='/signup'>sign up</Link>.\n      </span>\n    )\n  } else {\n    return (\n      <>\n        <button onClick={logout}>Logout</button>\n        <Todo />\n      </>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Reset Request in TypeScript\nDESCRIPTION: This code demonstrates how to use the requestPasswordReset action to initiate a password reset process on the client-side in TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { requestPasswordReset } from 'wasp/client/auth'\n...\nawait requestPasswordReset({ email });\n```\n\n----------------------------------------\n\nTITLE: Using useAuth Hook in React Component\nDESCRIPTION: This code shows how to use the useAuth hook in a React component to access the user object and conditionally render content based on authentication status.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport useAuth from '@wasp/auth/useAuth'\nimport { Link } from 'react-router-dom'\nimport logout from '@wasp/auth/logout'\nimport Todo from '../Todo'\n\nexport function Main() {\n  const { data: user } = useAuth()\n\n  if (!user) {\n    return (\n      <span>\n        Please <Link to=\"/login\">login</Link> or{' '}\n        <Link to=\"/signup\">sign up</Link>.\n      </span>\n    )\n  } else {\n    return (\n      <>\n        <button onClick={logout}>Logout</button>\n        <Todo />\n      </>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring an API with Entity Access in Wasp\nDESCRIPTION: Shows how to declare an API in Wasp with access to specific entities, allowing the API implementation to interact with entity data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/apis.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar {\n  fn: import { fooBar } from \"@src/apis\",\n  entities: [Task],\n  httpRoute: (GET, \"/foo/bar\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Setup Function for Client Initialization (JavaScript, src/myClientSetupCode.js)\nDESCRIPTION: Exports an asynchronous client setup function for Wasp that logs to the console every hour while the client is online. No explicit dependencies; uses setInterval and console. Used as the setupFn in main.wasp to run one-time or periodic logic on startup. Inputs: none. Outputs: side effect (logs to console at intervals).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/client-config.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function mySetupFunction() {\n  let count = 1\n  setInterval(\n    () => console.log(`You have been online for ${count++} hours.`),\n    1000 * 60 * 60\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Queries in Wasp\nDESCRIPTION: Demonstrates how to declare queries in the main.wasp file. It shows two query declarations - getAllTasks and getFilteredTasks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/queries.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nquery getAllTasks {\n  fn: import { getAllTasks } from \"@src/queries.js\"\n}\n\nquery getFilteredTasks {\n  fn: import { getFilteredTasks } from \"@src/queries.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Queries in TypeScript\nDESCRIPTION: Shows how to import and use a Wasp query on both client and server sides in TypeScript, including type imports.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/queries.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Use it on the client\nimport { getFoo } from 'wasp/client/operations'\n\n// Use it on the server\nimport { getFoo } from 'wasp/server/operations'\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Username Sign-up in JavaScript\nDESCRIPTION: JavaScript implementation of a custom username and password sign-up action that handles validation and user creation, without email verification.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/advanced/custom-auth-actions.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createProviderId,\n  createUser,\n  ensurePasswordIsPresent,\n  ensureValidPassword,\n  ensureValidUsername,\n  sanitizeAndSerializeProviderData,\n} from 'wasp/server/auth'\n\nexport const signup = async (args, _context) => {\n  ensureValidUsername(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('username', args.username)\n    const providerData = await sanitizeAndSerializeProviderData({\n      // The provider will hash the password for us, so we don't need to do it here.\n      hashedPassword: args.password,\n    })\n\n    await createUser(providerId, providerData, {})\n  } catch (e) {\n    console.error('Error creating user:', e)\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Job Function in JavaScript\nDESCRIPTION: Implementation of a job function in JavaScript that performs a task when executed. It receives arguments and context with entity access, and returns a result.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/jobs.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const foo = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Wasp Application Configuration\nDESCRIPTION: Basic Wasp configuration file that sets up the application name, version and authentication settings using username/password method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/introduction/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp RecipeApp {\n  title: \"My Recipes\",\n  wasp: { version: \"{latestWaspVersion}\" },\n  auth: {\n    methods: { usernameAndPassword: {} },\n    onAuthFailedRedirectTo: \"/login\",\n    userEntity: User\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking the Tasks Query and Displaying Results - React Frontend - JavaScript\nDESCRIPTION: This React/JSX code uses Wasp's generated getTasks query and the useQuery hook (wrapping react-query) to fetch and render tasks on the frontend. It handles loading and error states and defines sub-components (TaskView, TasksList) for displaying individual tasks and task lists. The hook ensures the component updates reactively when data changes, requiring no manual network code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/05-queries.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getTasks, useQuery } from 'wasp/client/operations'\\n\\nexport const MainPage = () => {\\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\\n\\n  return (\\n    <div>\\n      {tasks && <TasksList tasks={tasks} />}\\n\\n      {isLoading && 'Loading...'}\\n      {error && 'Error: ' + error}\\n    </div>\\n  )\\n}\\n\\nconst TaskView = ({ task }) => {\\n  return (\\n    <div>\\n      <input type=\"checkbox\" id={String(task.id)} checked={task.isDone} />\\n      {task.description}\\n    </div>\\n  )\\n}\\n\\nconst TasksList = ({ tasks }) => {\\n  if (!tasks?.length) return <div>No tasks</div>\\n\\n  return (\\n    <div>\\n      {tasks.map((task, idx) => (\\n        <TaskView task={task} key={idx} />\\n      ))}\\n    </div>\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query in TypeScript\nDESCRIPTION: This snippet shows how to implement the 'getTasks' query function in TypeScript, including type annotations for full-stack type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/05-queries.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from '@wasp/entities'\nimport { GetTasks } from '@wasp/queries/types'\n\nexport const getTasks: GetTasks<void, Task[]> = async (args, context) => {\n  return context.entities.Task.findMany({\n    orderBy: { id: 'asc' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Action Export (JavaScript)\nDESCRIPTION: Defines the 'createFoo' function as a named export in the actions.js file. The function receives 'args' and 'context', enabling custom business logic in Node.js. Parameters correspond to the payload and Wasp context passed during action invocation. No dependencies except what is provided in Wasp context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nexport const createFoo = (args, context) => {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with useAction Hook in TypeScript\nDESCRIPTION: This snippet shows how to implement optimistic updates using the useAction hook in a TypeScript React component. It includes type annotations for the task payload and demonstrates proper typing for the optimisticUpdates configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport {\n  useQuery,\n  useAction,\n  type OptimisticUpdateDefinition,\n  getTask,\n  markTaskAsDone,\n} from 'wasp/client/operations'\n\ntype TaskPayload = Pick<Task, \"id\">;\n\nconst TaskPage = ({ id }: { id: number }) => {\n  const { data: task } = useQuery(getTask, { id });\n  const markTaskAsDoneOptimistically = useAction(markTaskAsDone, {\n    optimisticUpdates: [\n      {\n        getQuerySpecifier: ({ id }) => [getTask, { id }],\n        updateQuery: (_payload, oldData) => ({ ...oldData, isDone: true }),\n      } as OptimisticUpdateDefinition<TaskPayload, Task>,\n    ],\n  });\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>;\n  }\n\n  const { description, isDone } = task;\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? \"Yes\" : \"No\"}\n      </p>\n      {isDone || (\n        <button onClick={() => markTaskAsDoneOptimistically({ id })}>\n          Mark as done.\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default TaskPage;\n```\n\n----------------------------------------\n\nTITLE: Implementing an Action in TypeScript with Type Definitions\nDESCRIPTION: Implementation of an action in TypeScript using the generated type from Wasp, demonstrating how to specify input and output types for the action.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/actions.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateFoo } from 'wasp/server/operations'\n\ntype Foo = // ...\n\nexport const createFoo: CreateFoo<{ bar: string }, Foo> = (args, context) => {\n  // implementation\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Checks in Task Query (TypeScript)\nDESCRIPTION: TypeScript version of the getTasks query that adds authentication verification and filters tasks by the current user. Imports the Task entity type and uses proper type annotations for the operation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/07-auth.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from 'wasp/entities'\n// highlight-next-line\nimport { HttpError } from 'wasp/server'\nimport { GetTasks } from 'wasp/server/operations'\n\nexport const getTasks: GetTasks<void, Task[]> = async (args, context) => {\n  // highlight-start\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  // highlight-end\n  return context.entities.Task.findMany({\n    // highlight-next-line\n    where: { user: { id: context.user.id } },\n    orderBy: { id: 'asc' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Options in Wasp\nDESCRIPTION: Demonstrates how to set up authentication options in the main Wasp configuration file, including user entity, auth methods, and redirect behavior.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  //...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {}, // use this or email, not both\n      email: {}, // use this or usernameAndPassword, not both\n      google: {},\n      gitHub: {},\n    },\n    onAuthFailedRedirectTo: \"/someRoute\"\n  }\n}\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Declaring Queries in Wasp\nDESCRIPTION: Shows how to declare queries in a .wasp file for fetching all tasks and filtered tasks. The declaration specifies the implementation file location.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/queries.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nquery getAllTasks {\n  fn: import { getAllTasks } from \"@src/queries.js\"\n}\n\nquery getFilteredTasks {\n  fn: import { getFilteredTasks } from \"@src/queries.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side Action Implementation in JavaScript\nDESCRIPTION: Shows how to implement Actions on the server side using JavaScript, including error handling with HttpError.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/actions.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const createTask = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Hooks in Wasp App\nDESCRIPTION: Shows the complete configuration of all available auth hooks in the main.wasp file. This includes hooks for before signup, after signup, before OAuth redirect, before login, and after login.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/auth-hooks.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  auth: {\n    userEntity: User,\n    methods: {\n      ...\n    },\n    onBeforeSignup: import { onBeforeSignup } from \"@src/auth/hooks\",\n    onAfterSignup: import { onAfterSignup } from \"@src/auth/hooks\",\n    onBeforeOAuthRedirect: import { onBeforeOAuthRedirect } from \"@src/auth/hooks\",\n    onBeforeLogin: import { onBeforeLogin } from \"@src/auth/hooks\",\n    onAfterLogin: import { onAfterLogin } from \"@src/auth/hooks\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Extensions in Wasp\nDESCRIPTION: This snippet demonstrates how to enable PostgreSQL extensions in a Wasp application using the app.db.prisma.dbExtensions field. It shows how to add support for extensions like hstore, pg_trgm, and postgis.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/backends.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    system: PostgreSQL,\n    prisma: {\n      clientPreviewFeatures: [\"postgresqlExtensions\"]\n      dbExtensions: [\n        { name: \"hstore\", schema: \"myHstoreSchema\" },\n        { name: \"pg_trgm\" },\n        { name: \"postgis\", version: \"2.1\" },\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Actions in React Components (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use Actions inside a TypeScript React component with proper type definitions. Shows how to handle task data and call actions with proper typing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\n// highlight-next-line\nimport { useQuery, getTask, markTaskAsDone } from 'wasp/client/operations'\n\nexport const TaskPage = ({ id }: { id: number }) => {\n  const { data: task } = useQuery(getTask, { id })\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>\n  }\n\n  const { description, isDone } = task\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n      {isDone || (\n        // highlight-next-line\n        <button onClick={() => markTaskAsDone({ id })}>Mark as done.</button>\n      )}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing createTask Action in TypeScript\nDESCRIPTION: This code defines the createTask Action function in TypeScript. It includes type annotations for the function arguments and return value, ensuring type safety across the full stack.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/06-actions.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from 'wasp/entities'\nimport { CreateTask } from 'wasp/server/operations'\n\ntype CreateTaskPayload = Pick<Task, 'description'>\n\nexport const createTask: CreateTask<CreateTaskPayload, Task> = async (\n  args,\n  context\n) => {\n  return context.entities.Task.create({\n    data: { description: args.description },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Wasp Project via CLI\nDESCRIPTION: Command to generate a new Wasp project named 'TodoApp'. This initializes the project structure and all necessary files for a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/01-create.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ wasp new TodoApp\n```\n\n----------------------------------------\n\nTITLE: Retrieving Username with Wasp Auth in JavaScript React Component\nDESCRIPTION: Demonstrates how to use the Wasp 'getUsername' utility within a React (JavaScript) component to retrieve and display a user's username in a list of tasks. Requires the 'wasp/auth' package and expects each user object to have 'auth' and 'identities' relations included. Returns the username if available; otherwise, returns null and displays this in the rendered output.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getUsername } from 'wasp/auth'\n\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {getUsername(task.user)}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using the routes Object for Programmatic Navigation\nDESCRIPTION: Demonstrates how to use the routes object to programmatically build URLs in a type-safe way. This approach provides compile-time checking of route parameters.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/links.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { routes } from 'wasp/client/router'\n\nconst linkToTask = routes.TaskRoute.build({ params: { id: 1 } })\n```\n\n----------------------------------------\n\nTITLE: React Component Test with Mocked API in JavaScript\nDESCRIPTION: Shows how to test a React component that makes direct API calls, using mockApi to mock the API responses.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/testing.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { api } from \"wasp/client/api\";\n\nconst Todo = (_props) => {\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    api\n      .get(\"/tasks\")\n      .then((res) => res.json())\n      .then((tasks) => setTasks(tasks))\n      .catch((err) => window.alert(err));\n  });\n\n  return (\n    <ul>\n      {tasks &&\n        tasks.map((task) => (\n          <li key={task.id}>\n            <input type=\"checkbox\" value={task.isDone} />\n            {task.description}\n          </li>\n        ))}\n    </ul>\n  );\n};\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { test, expect } from \"vitest\";\nimport { screen } from \"@testing-library/react\";\n\nimport { mockServer, renderInContext } from \"wasp/client/test\";\nimport Todo from \"./Todo\";\n\nconst { mockApi } = mockServer();\n\nconst mockTasks = [\n  {\n    id: 1,\n    description: \"test todo 1\",\n    isDone: true,\n    userId: 1,\n  },\n];\n\ntest(\"handles mock data\", async () => {\n  mockApi(\"/tasks\", { res: mockTasks });\n\n  renderInContext(<Todo />);\n\n  await screen.findByText(\"test todo 1\");\n\n  expect(screen.getByRole(\"checkbox\")).toBeChecked();\n\n  screen.debug();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing createTask Action in JavaScript\nDESCRIPTION: JavaScript implementation of the createTask Action that creates a new Task entity with the provided description.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/06-actions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const createTask = async (args, context) => {\n  return context.entities.Task.create({\n    data: { description: args.description },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Main Route and Page in Wasp (JavaScript)\nDESCRIPTION: Defines a root route and a MainPage using the Wasp DSL in a JavaScript project. The component field points to a React component exported from the project src folder, using an ES module import. Requires a valid React component at @src/MainPage.jsx and a Wasp application environment. This sets up the main entry point for the app and ensures that navigating to '/' renders the MainPage component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/03-pages.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  // We specify that the React implementation of the page is exported from\n  // `src/MainPage.jsx`. This statement uses standard JS import syntax.\n  // Use `@src` to reference files inside the `src` folder.\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Job Worker Function in TypeScript\nDESCRIPTION: Implementation of the worker function for a job in TypeScript with proper type annotations. It demonstrates using Wasp's generated types for job inputs and outputs to ensure type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/jobs.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type MySpecialJob } from 'wasp/server/jobs'\nimport { type Task } from 'wasp/entities'\n\ntype Input = { name: string; }\ntype Output = { tasks: Task[]; }\n\nexport const foo: MySpecialJob<Input, Output> = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Worker Function in JavaScript\nDESCRIPTION: Shows how to implement a worker function for a background job in JavaScript, including handling input parameters and database operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/jobs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const foo = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp Client with TypeScript Imports and Base Directory\nDESCRIPTION: Defines the client configuration within a Wasp application (`MyApp`) using TypeScript. It specifies the root React component (`@src/Root.tsx`) via `rootComponent`, an asynchronous setup function (`@src/myClientSetupCode.ts`) via `setupFn`, and sets the base directory (`/my-app`) using `baseDir` for serving the application from a subdirectory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/client-config.md#2025-04-22_snippet_14\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.tsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.ts\",\n    baseDir: \"/my-app\",\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: React Component with Actions in JavaScript\nDESCRIPTION: Example React component using Actions and Queries in JavaScript, showing integration with UI elements.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/actions.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useQuery, getTask, markTaskAsDone } from 'wasp/client/operations'\n\nexport const TaskPage = ({ id }) => {\n  const { data: task } = useQuery(getTask, { id })\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>\n  }\n\n  const { description, isDone } = task\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n      {isDone || (\n        <button onClick={() => markTaskAsDone({ id })}>Mark as done.</button>\n      )}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Authentication Functions in TypeScript\nDESCRIPTION: This snippet demonstrates the implementation of Google authentication functions in TypeScript. It includes type-safe functions for getting user fields and configuration settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/google.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GetUserFieldsFn } from '@wasp/types'\nimport { generateAvailableDictionaryUsername } from '@wasp/core/auth.js'\n\nexport const getUserFields: GetUserFieldsFn = async (_context, args) => {\n  const username = await generateAvailableDictionaryUsername()\n  const displayName = args.profile.displayName\n  return { username, displayName }\n}\n\nexport function getConfig() {\n  return {\n    clientID, // look up from env or elsewhere\n    clientSecret, // look up from env or elsewhere\n    scope: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring CRUD Operations in Wasp\nDESCRIPTION: Example of a complex CRUD declaration with multiple operations and configuration options. Shows how to specify entity, define operations with public access, and implement custom override functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_24\n\nLANGUAGE: wasp\nCODE:\n```\ncrud Tasks { // crud name here is \"Tasks\"\n  entity: Task,\n  operations: {\n    getAll: {\n      isPublic: true, // optional, defaults to false\n    },\n    get: {},\n    create: {\n      overrideFn: import { createTask } from \"@src/tasks.js\", // optional\n    },\n    update: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Auth and User Entities in Wasp 0.12.X – Wasp with PSL\nDESCRIPTION: This snippet demonstrates how user authentication configuration is simplified in Wasp 0.12.X. Auth logic, field management, and model setup are now handled by Wasp, allowing the developer to only specify business data in the User entity. Prerequisites involve Wasp 0.12.X and PSL support. Key parameters: 'auth' configuration block for login method (GitHub). Input: Wasp/PSL entity definitions. Output: streamlined project manifest and user entity. Limitation: only one authentication identity allowed per user (e.g., either Google or email, not both).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.12.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\nentity User {=psl\n  id Int @id @default(autoincrement())\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Importing CRUD Type Definitions in TypeScript\nDESCRIPTION: This snippet shows how to import TypeScript types for CRUD operations from Wasp's generated code, allowing for type-safe override implementations with proper Input and Output typing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/crud.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  GetAllQuery,\n  GetQuery,\n  CreateAction,\n  UpdateAction,\n  DeleteAction,\n} from '@wasp/crud/Tasks'\n\n// Each of the types is a generic type, so you can use it like this:\nexport const getAllOverride: GetAllQuery<Input, Output> = async (\n  args,\n  context\n) => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication in Wasp\nDESCRIPTION: This snippet shows the basic structure for configuring email authentication in a Wasp application, including user entity and authentication methods.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/email.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  title: \"My app\",\n  // ...\n\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        // We'll explain these options below\n      },\n    },\n    onAuthFailedRedirectTo: \"/someRoute\"\n  },\n  // ...\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n}\n```\n\n----------------------------------------\n\nTITLE: React Component with Action Integration\nDESCRIPTION: Shows how to use Actions within a React component including query usage and event handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/actions.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useQuery, getTask, markTaskAsDone } from 'wasp/client/operations'\n\nexport const TaskPage = ({ id }) => {\n  const { data: task } = useQuery(getTask, { id })\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>\n  }\n\n  const { description, isDone } = task\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n      {isDone || (\n        <button onClick={() => markTaskAsDone({ id })}>Mark as done.</button>\n      )}\n    </div>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { useQuery, getTask, markTaskAsDone } from 'wasp/client/operations'\n\nexport const TaskPage = ({ id }: { id: number }) => {\n  const { data: task } = useQuery(getTask, { id })\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>\n  }\n\n  const { description, isDone } = task\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n      {isDone || (\n        <button onClick={() => markTaskAsDone({ id })}>Mark as done.</button>\n      )}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Email Verification Content Function (TypeScript)\nDESCRIPTION: This TypeScript snippet defines the `getVerificationEmailContent` function with type safety using `GetVerificationEmailContentFn` from `wasp/server/auth`. It generates the subject, text, and HTML content for the verification email, using the provided `verificationLink`. This typed function ensures the correct structure and parameters are used when customizing the verification email content.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/email.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/email.ts\"\nimport { GetVerificationEmailContentFn } from 'wasp/server/auth'\n\nexport const getVerificationEmailContent: GetVerificationEmailContentFn = ({\n  verificationLink,\n}) => ({\n  subject: 'Verify your email',\n  text: `Click the link below to verify your email: ${verificationLink}`,\n  html: `\n        <p>Click the link below to verify your email</p>\n        <a href=\"${verificationLink}\">Verify email</a>\n    `,\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Wasp\nDESCRIPTION: This snippet demonstrates how to define the User entity in the main.wasp file, which is required for username and password authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/username-and-pass.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\n// 3. Define the user entity\nentity User {=psl\n    // highlight-next-line\n    id                        Int           @id @default(autoincrement())\n    // Add your own fields below\n    // ...\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Server-side Query Implementation in JavaScript\nDESCRIPTION: Shows how to implement Queries on the server side using JavaScript, including user context handling for authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/queries.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAllTasks, getFilteredTasks } from 'wasp/server/operations'\n\n\nconst user = // Get an AuthUser object, e.g., from context.user in an operation.\n\n// ...\n\nconst allTasks = await getAllTasks({ user })\nconst doneTasks = await getFilteredTasks({ isDone: true }, { user })\n```\n\n----------------------------------------\n\nTITLE: Defining and Exposing Server-Side Resources with Setup Function (JavaScript)\nDESCRIPTION: Shows how to initialize and persist resources in a module-scoped variable within the server setup function. The resource is made accessible through an exported getter, allowing other operations (such as queries) to use the initialized value. Input includes asynchronous initializers; output is shared module state accessed by other server modules.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/server-config.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet someResource = undefined\n\nexport const mySetupFunction = async () => {\n  // Let's pretend functions setUpSomeResource and startSomeCronJob\n  // are implemented below or imported from another file.\n  someResource = await setUpSomeResource()\n  startSomeCronJob()\n}\n\nexport const getSomeResource = () => someResource\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSomeResource } from './myServerSetupCode.js'\n\n...\n\nexport const someQuery = async (args, context) => {\n  const someResource = getSomeResource()\n  return queryDataFromSomeResource(args, someResource)\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Context User Auth Identity in a Server Action (TypeScript)\nDESCRIPTION: Depicts the use of the `findUserIdentity` utility for determining available identities within a server-side action, written in TypeScript. This pattern makes it easy to branch logic within backend operations based on a user's authentication provider. It assumes the presence of an appropriate context object and correct type parameters for enhanced type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/entities.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { findUserIdentity } from 'wasp/client/auth'\n\nexport const createTask: CreateTask<...>  = async (args, context) => {\n  const emailIdentity = findUserIdentity(context.user, 'email')\n  const googleIdentity = findUserIdentity(context.user, 'google')\n  if (emailIdentity) {\n    // ...\n  } else if (googleIdentity) {\n    // ...\n  }\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Auth Configuration in main.wasp (Basic Structure, JavaScript interpretation)\nDESCRIPTION: Shows the structure for declaring authentication settings in the main.wasp file, including enabling various authentication methods (username/password, email, google, github) and specifying the redirect route on auth failure. This is required boilerplate Wasp DSL for enabling auth features and connections with user entity business logic. Prerequisites: Wasp project setup, user entity defined.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_19\n\nLANGUAGE: wasp\nCODE:\n```\n  title: \"My app\",\\n  //...\\n  auth: {\\n    userEntity: User,\\n    methods: {\\n      usernameAndPassword: {}, // use this or email, not both\\n      email: {}, // use this or usernameAndPassword, not both\\n      google: {},\\n      gitHub: {},\\n    },\\n    onAuthFailedRedirectTo: \"/someRoute\",\\n  }\\n}//...\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Task Entity in Wasp\nDESCRIPTION: This snippet shows how to define a Task entity in the main.wasp file using Prisma Schema Language (PSL). It includes fields for id, description, and isDone.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/04-entities.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nentity Task {=psl\n    id          Int     @id @default(autoincrement())\n    description String\n    isDone      Boolean @default(false)\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Creating Authenticated Task Actions with Wasp in JavaScript\nDESCRIPTION: This JavaScript function defines a secure backend action that creates a new task for the currently authenticated user. It ensures the operation can only proceed if `context.user` is present, throwing a 403 error if not. Dependencies include Wasp's `HttpError` and the entity system accessible through `context.entities`. The input is the `task` object with its description, and the output is the result of creating a new database Task associated with the user. Proper error handling and context usage are demonstrated.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const createTask = async (task, context) => {\n  if (!context.user) {\n    throw new HttpError(403)\n  }\n\n  const Task = context.entities.Task\n  return Task.create({\n    data: {\n      description: task.description,\n      user: {\n        connect: { id: context.user.id },\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CRUD Operations in Wasp\nDESCRIPTION: Wasp configuration for enabling CRUD operations on the Task entity, specifying public access for getAll and custom implementation for create operation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/crud.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\ncrud Tasks {\n  entity: Task,\n  operations: {\n    getAll: {\n      isPublic: true, // by default only logged in users can perform operations\n    },\n    get: {},\n    create: {\n      overrideFn: import { createTask } from \"@src/tasks.js\",\n    },\n    update: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Auth Configuration in JavaScript\nDESCRIPTION: Example of configuring authentication in a Wasp application. Shows how to set up different auth methods, specify user and social login entities, and configure redirect behavior.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_18\n\nLANGUAGE: wasp\nCODE:\n```\n  title: \"My app\",\n  //...\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      usernameAndPassword: {}, // use this or email, not both\n      email: {}, // use this or usernameAndPassword, not both\n      google: {},\n      gitHub: {},\n    },\n    onAuthFailedRedirectTo: \"/someRoute\",\n    signup: { ... }\n  }\n}\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Defining the Task Entity with Prisma Model (Prisma)\nDESCRIPTION: This snippet defines a `Task` entity in the `schema.prisma` file using Prisma's modeling syntax. It introduces three fields: `id` as the primary key with autoincrement, `description` as a string, and `isDone` as a boolean with a default value of false. Required dependency is the Prisma ORM, and the model will be used by Wasp to map and interact with the database. After modifying any model, you must run the relevant migration command to update the schema.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/04-entities.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\n// ...\n\nmodel Task {\n    id          Int     @id @default(autoincrement())\n    description String\n    isDone      Boolean @default(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Action in TypeScript with Type Safety\nDESCRIPTION: Demonstrates implementing an action in TypeScript with proper type definitions for input arguments and return values, using the generated CreateFoo type from Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateFoo } from 'wasp/server/operations'\n\ntype Foo = // ...\n\nexport const createFoo: CreateFoo<{ bar: string }, Foo> = (args, context) => {\n  // implementation\n};\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint in JavaScript/Wasp\nDESCRIPTION: Example of declaring an API endpoint in Wasp that handles GET requests to '/foo/bar'. The declaration includes authentication, entity access, and middleware configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/apis.md#2025-04-22_snippet_13\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar {\n  fn: import { fooBar } from \"@src/apis\",\n  httpRoute: (GET, \"/foo/bar\"),\n  entities: [Task],\n  auth: true,\n  middlewareConfigFn: import { apiMiddleware } from \"@src/apis\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Signup Action in Wasp\nDESCRIPTION: Defines a custom signup action in the main Wasp configuration file that references an implementation function in an external JavaScript/TypeScript file and specifies required entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/entities.md#2025-04-22_snippet_17\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\naction customSignup {\n  fn: import { signup } from \"@src/auth/signup.js\",\n  entities: [User]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Todo Component with Queries - TypeScript (TSX)\nDESCRIPTION: Implements the Todo component in TypeScript with appropriate type annotations, utilizing Wasp's useQuery for retrieving tasks and rendering them. Accepts an empty object as props with explicit typing. Requires 'wasp/client/operations' and React. Outputs a list of tasks as JSX elements.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/testing.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQuery, getTasks } from \\\"wasp/client/operations\\\";\\n\\nconst Todo = (_props: {}) => {\\n  const { data: tasks } = useQuery(getTasks);\\n\\n  return (\\n    <ul>\\n      {tasks &&\\n        tasks.map((task) => (\\n          <li key={task.id}>\\n            <input type=\\\"checkbox\\\" value={task.isDone} />\\n            {task.description}\\n          </li>\\n        ))}\\n    </ul>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Extended Email Auth Fields and Options (Wasp)\nDESCRIPTION: This Wasp DSL snippet demonstrates extended configuration of email auth, including use of userSignupFields, custom sender fields for emails, and import of external functions for email verification/reset content creation. It references named client routes and applies extensible fields for security and content. Prerequisites: correctly defined import paths, existence of referenced modules and client-side routes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/email.md#2025-04-22_snippet_13\n\nLANGUAGE: Wasp\nCODE:\n```\napp myApp {\\n  title: \"My app\",\\n  // ...\\n\\n  auth: {\\n    userEntity: User,\\n    methods: {\\n      email: {\\n        userSignupFields: import { userSignupFields } from \"@src/auth.js\",\\n        fromField: {\\n          name: \"My App\",\\n          email: \"hello@itsme.com\"\\n        },\\n        emailVerification: {\\n          clientRoute: EmailVerificationRoute,\\n          getEmailContentFn: import { getVerificationEmailContent } from \"@src/auth/email.js\",\\n        },\\n        passwordReset: {\\n          clientRoute: PasswordResetRoute,\\n          getEmailContentFn: import { getPasswordResetEmailContent } from \"@src/auth/email.js\",\\n        },\\n      },\\n    },\\n    onAuthFailedRedirectTo: \"/someRoute\"\\n  },\\n  // ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Task with User Association in TypeScript (Wasp)\nDESCRIPTION: This TypeScript code defines a typed Wasp action `createTask`. It ensures a user is logged in by checking `context.user`, throwing an `HttpError(403)` otherwise. For authenticated users, it creates a new `Task` entity using `context.entities.Task`, associating it with the user identified by `context.user.id`. The use of types like `Task`, `CreateTask`, and `CreateTaskPayload` enhances type safety and clarity compared to the JavaScript version.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/actions.ts\"\nimport { type Task } from 'wasp/entities'\nimport { type CreateTask } from 'wasp/server/operations'\nimport { HttpError } from 'wasp/server'\n\ntype CreateTaskPayload = Pick<Task, 'description'>\n\nexport const createTask: CreateTask<CreateTaskPayload, Task> = async (\n  args,\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(403)\n  }\n\n  const Task = context.entities.Task\n  return Task.create({\n    data: {\n      description: args.description,\n      user: {\n        connect: { id: context.user.id },\n      },\n    },\n  })\n}\n```\n```\n\n----------------------------------------\n\nTITLE: TypeScript Database Seeding Implementation\nDESCRIPTION: Example of a strongly-typed database seeding function in TypeScript with type definitions and interfaces.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/backends.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTask } from './actions.js'\nimport { type DbSeedFn } from 'wasp/server'\nimport { sanitizeAndSerializeProviderData } from 'wasp/server/auth'\nimport { type AuthUser } from 'wasp/auth'\nimport { PrismaClient } from '@prisma/client'\n\nexport const devSeedSimple: DbSeedFn = async (prisma) => {\n  const user = await createUser(prisma, {\n    username: 'RiuTheDog',\n    password: 'bark1234',\n  })\n\n  await createTask(\n    { description: 'Chase the cat', isDone: false },\n    { user, entities: { Task: prisma.task } }\n  )\n};\n\nasync function createUser(\n  prisma: PrismaClient,\n  data: { username: string, password: string }\n): Promise<AuthUser> {\n  const newUser = await prisma.user.create({\n    data: {\n      auth: {\n        create: {\n          identities: {\n            create: {\n              providerName: 'username',\n              providerUserId: data.username,\n              providerData: sanitizeAndSerializeProviderData<'username'>({\n                hashedPassword: data.password\n              }),\n            },\n          },\n        },\n      },\n    },\n  })\n\n  return newUser\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing SignupForm with Mixed Field Types (React)\nDESCRIPTION: Demonstrates customizing the `SignupForm` by passing an array to `additionalFields` containing both field definition objects and render functions. An 'address' field is defined using an object with name, label, type, and validation rules. A 'phoneNumber' field is implemented using a render function, allowing for custom UI structure with `FormItemGroup`, `FormLabel`, `FormInput`, and `FormError`, integrating with `react-hook-form` via `form.register`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"src/SignupPage.jsx\"\nimport {\n  SignupForm,\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```\n```\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/SignupPage.tsx\"\nimport {\n  SignupForm,\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring an Action in Wasp\nDESCRIPTION: Example of declaring an Action in Wasp using the 'action' declaration. This includes defining the function import and specifying related entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/actions.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\naction createFoo {\n    fn: import { createFoo } from \"@src/actions.js\"\n    entities: [Foo]\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Values for Later Use in Setup Function (TypeScript)\nDESCRIPTION: Demonstrates how to store values during server setup for later use in operations using TypeScript. The example shows setting up a resource and starting a cron job, with a function to access the stored resource.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/server-config.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ServerSetupFn } from 'wasp/server'\n\nlet someResource = undefined\n\nexport const mySetupFunction: ServerSetupFn = async () => {\n  // Let's pretend functions setUpSomeResource and startSomeCronJob\n  // are implemented below or imported from another file.\n  someResource = await setUpSomeResource()\n  startSomeCronJob()  \n}\n\nexport const getSomeResource = () => someResource\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Username/Password Signup in JavaScript\nDESCRIPTION: This code implements a custom username and password signup process in JavaScript, including username and password validation, and user creation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/advanced/custom-auth-actions.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createProviderId,\n  createUser,\n  ensurePasswordIsPresent,\n  ensureValidPassword,\n  ensureValidUsername,\n  sanitizeAndSerializeProviderData,\n} from 'wasp/server/auth'\n\nexport const signup = async (args, _context) => {\n  ensureValidUsername(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('username', args.username)\n    const providerData = await sanitizeAndSerializeProviderData({\n      // The provider will hash the password for us, so we don't need to do it here.\n      hashedPassword: args.password,\n    })\n\n    await createUser(providerId, providerData, {})\n  } catch (e) {\n    console.error('Error creating user:', e)\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signup Function with Provider Authentication (TypeScript)\nDESCRIPTION: Implements a strongly typed custom signup function in TypeScript, using Wasp's server-side helpers to create a provider ID, serialize provider data, and create a new user. The function signature uses custom input and output types for improved type safety, and it processes registration data, handles errors, and returns a result object. Makes use of Wasp-auth utilities and expects the context to provide a User entity definition.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/entities.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  createUser,\n} from 'wasp/server/auth'\nimport type { CustomSignup } from 'wasp/server/operations'\n\ntype CustomSignupInput = {\n  username: string\n  password: string\n}\ntype CustomSignupOutput = {\n  success: boolean\n  message: string\n}\n\nexport const signup: CustomSignup<\n  CustomSignupInput,\n  CustomSignupOutput\n> = async (args, { entities: { User } }) => {\n  try {\n    // Provider ID is a combination of the provider name and the provider user ID\n    // And it is used to uniquely identify the user in your app\n    const providerId = createProviderId('username', args.username)\n    // sanitizeAndSerializeProviderData hashes the password and returns a JSON string\n    const providerData = await sanitizeAndSerializeProviderData<'username'>({\n      hashedPassword: args.password,\n    })\n\n    await createUser(\n      providerId,\n      providerData,\n      // Any additional data you want to store on the User entity\n      {},\n    )\n\n    // This is equivalent to:\n    // await User.create({\n    //   data: {\n    //     auth: {\n    //       create: {\n    //         identities: {\n    //             create: {\n    //                 providerName: 'username',\n    //                 providerUserId: args.username\n    //                 providerData,\n    //             },\n    //         },\n    //       }\n    //     },\n    //   }\n    // })\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Validation Schemas in TypeScript\nDESCRIPTION: Implementation of environment validation schemas using Zod in TypeScript. Creates validation for server and client-side environment variables with type checking provided by the defineEnvValidationSchema function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/env-vars.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as z from 'zod'\n\nimport { defineEnvValidationSchema } from 'wasp/env'\n\nexport const serverEnvValidationSchema = defineEnvValidationSchema(\n  z.object({\n    STRIPE_API_KEY: z.string({\n      required_error: 'STRIPE_API_KEY is required.',\n    }),\n  })\n)\n\nexport const clientEnvValidationSchema = defineEnvValidationSchema(\n  z.object({\n    REACT_APP_NAME: z.string().default('TODO App'),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity for Email Authentication\nDESCRIPTION: This snippet defines the User entity with required fields for email authentication. It includes email, password, email verification status, and timestamps for email verification and password reset operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/email.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    email                     String?       @unique\n    password                  String?\n    isEmailVerified           Boolean       @default(false)\n    emailVerificationSentAt   DateTime?\n    passwordResetSentAt       DateTime?\n    // Add your own fields below\n    // ...\npsl=}\n```\n\n----------------------------------------\n\nTITLE: TypeScript API with Generic Types\nDESCRIPTION: Example of an API endpoint with custom parameter and response types in TypeScript, demonstrating type safety for route parameters and response data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/apis.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FooBar } from \"wasp/server/api\";\n\nexport const fooBar: FooBar<\n  { email: string },\n  { answer: number }\n> = (req, res, _context) => {\n  console.log(req.params.email);\n  res.json({ answer: 42 });\n};\n```\n\n----------------------------------------\n\nTITLE: Inspecting Database with Wasp DB Studio\nDESCRIPTION: This shell command `wasp db studio` launches Prisma Studio via the Wasp CLI, opening a web-based GUI in the browser. This tool allows developers to view, browse, and interact with the data in the project's database, including inspecting table structures like the newly created `Task` entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/04-entities.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nwasp db studio\n```\n\n----------------------------------------\n\nTITLE: Implementing a Type-Safe Job Handler Function - TypeScript\nDESCRIPTION: Implements a type-safe Wasp job handler in TypeScript, providing clear type definitions for input and output, and strong context typing by leveraging the generated MySpecialJob job type. Suitable for projects requiring explicit typing in job handlers. The function accepts named arguments and context, logs a message, fetches Task entities, and returns them. Dependencies include TypeScript, wasp/server/jobs types, and access to Task within context.entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/jobs.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { type MySpecialJob } from 'wasp/server/jobs'\n\ntype Input = { name: string; }\ntype Output = { tasks: Task[]; }\n\nexport const foo: MySpecialJob<Input, Output> = async (args, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of MainPage React Component (JavaScript)\nDESCRIPTION: Shows the basic structure of the `MainPage` functional React component defined in `src/MainPage.jsx`. It includes imports for a logo image (`waspLogo.png`) and a CSS file (`Main.css`), demonstrating how to include local assets. The component itself is exported as `MainPage`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/03-pages.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"src/MainPage.jsx\"\nimport waspLogo from './waspLogo.png'\nimport './Main.css'\n\nexport const MainPage = () => {\n  // ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring an Action in Wasp\nDESCRIPTION: Shows how to declare a 'createFoo' action in a Wasp file. This declaration specifies the implementation function import and the entities that the action will use.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_14\n\nLANGUAGE: wasp\nCODE:\n```\nquery createFoo {\n    fn: import { createFoo } from \"@src/actions.js\"\n    entities: [Foo]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Operations in TypeScript\nDESCRIPTION: Implements the getRecipes query using TypeScript with Prisma, demonstrating type safety and database access.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/introduction/introduction.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetRecipes } from \"wasp/server/operations\";\nimport { type Recipe } from \"wasp/entities\";\n\nexport const getRecipes: GetRecipes<{}, Recipe[]> = async (_args, context) => {\n  return context.entities.Recipe.findMany(\n    { where: { user: { id: context.user.id } } }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Prisma Schema\nDESCRIPTION: Defines the User entity in the Prisma schema file. This entity represents the business logic user and can be customized with additional fields as needed for the application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/entities.md#2025-04-22_snippet_15\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  // Any other fields you want to store about the user\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Button in React\nDESCRIPTION: This code snippet shows how to implement a logout button in a React component using the logout action provided by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport logout from '@wasp/auth/logout'\n\nconst LogoutButton = () => {\n  return <button onClick={logout}>Logout</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining App Structure in Wasp\nDESCRIPTION: This snippet demonstrates how to define basic app structure using Wasp declarations. It includes an app declaration, a route declaration, and a page declaration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/general/language.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\"\n}\n\nroute RootRoute { path: \"/\", to: DashboardPage }\n\npage DashboardPage {\n  component: import Dashboard from \"@client/Dashboard.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using React Provider in Root Component - TypeScript (Wasp & React TSX)\nDESCRIPTION: Shows how to set up a root component with Redux using TypeScript typings for children. Requires 'react-redux', a TypeScript store, and proper TSX typing. By wrapping children with Provider, enables Redux for the app. Expected input is React children as React.ReactNode.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/client-config.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.tsx\",\n  }\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root({ children }: { children: React.ReactNode }) {\n  return <Provider store={store}>{children}</Provider>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth in Wasp Application\nDESCRIPTION: Basic configuration for enabling authentication in a Wasp application, including setup for different auth methods and redirect settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  //...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {}, // use this or email, not both\n      email: {}, // use this or usernameAndPassword, not both\n      google: {},\n      gitHub: {},\n    },\n    onAuthFailedRedirectTo: \"/someRoute\"\n  }\n}\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Implementing createTask Action in JavaScript\nDESCRIPTION: This code defines the createTask Action function in JavaScript. It uses the context.entities.Task.create method to add a new task to the database with the given description.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/06-actions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const createTask = async (args, context) => {\n  return context.entities.Task.create({\n    data: { description: args.description },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Client in React (JavaScript)\nDESCRIPTION: Shows how to use WebSockets in a React component using JavaScript, including the useSocket and useSocketListener hooks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/web-sockets.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react'\nimport {\n  useSocket,\n  useSocketListener,\n} from 'wasp/client/webSocket'\n\nexport const ChatPage = () => {\n  const [messageText, setMessageText] = useState('')\n  const [messages, setMessages] = useState([])\n  const { socket, isConnected } = useSocket()\n\n  useSocketListener('chatMessage', logMessage)\n\n  function logMessage(msg) {\n    setMessages((priorMessages) => [msg, ...priorMessages])\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    socket.emit('chatMessage', messageText)\n    setMessageText('')\n  }\n\n  const messageList = messages.map((msg) => (\n    <li key={msg.id}>\n      <em>{msg.username}</em>: {msg.text}\n    </li>\n  ))\n  const connectionIcon = isConnected ? '🟢' : '🔴'\n\n  return (\n    <>\n      <h2>Chat {connectionIcon}</h2>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <div>\n            <div>\n              <input\n                type=\"text\"\n                value={messageText}\n                onChange={(e) => setMessageText(e.target.value)}\n              />\n            </div>\n            <div>\n              <button type=\"submit\">Submit</button>\n            </div>\n          </div>\n        </form>\n        <ul>{messageList}</ul>\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Wasp Entity Usage Example\nDESCRIPTION: Demonstrates how to use Prisma models as Wasp entities in queries, jobs, and APIs.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/prisma-file.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n}\n\n...\n\nquery getTasks {\n  fn: import { getTasks } from \"@src/queries\",\n  entities: [Task]\n}\n\njob myJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@src/workers/bar\"\n  },\n  entities: [Task],\n}\n\napi fooBar {\n  fn: import { fooBar } from \"@src/apis\",\n  entities: [Task],\n  httpRoute: (GET, \"/foo/bar/:email\")\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring updateTask Action in Wasp Configuration\nDESCRIPTION: Defines the `updateTask` action within the `main.wasp` file. It links the action name to its server-side implementation function (imported from `@src/actions`) and specifies that it operates on the `Task` entity. This declaration registers the action with the Wasp framework.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/06-actions.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\n// ...\n\naction updateTask {\n  fn: import { updateTask } from \"@src/actions\",\n  entities: [Task]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring onBeforeOAuthRedirect Hook in Wasp\nDESCRIPTION: Demonstrates how to configure the onBeforeOAuthRedirect hook in the main.wasp file and implement it in JavaScript or TypeScript. This hook is called before redirecting the user to the OAuth provider.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/auth-hooks.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  ...\n  auth: {\n    ...\n    onBeforeOAuthRedirect: import { onBeforeOAuthRedirect } from \"@src/auth/hooks\",\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const onBeforeOAuthRedirect = async ({ url, oauth, prisma, req }) => {\n  console.log('query params before oAuth redirect', req.query)\n\n  // Saving query params for later use in onAfterSignup or onAfterLogin hooks\n  const id = oauth.uniqueRequestId\n  someKindOfStore.set(id, req.query)\n\n  return { url }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OnBeforeOAuthRedirectHook } from 'wasp/server/auth'\n\nexport const onBeforeOAuthRedirect: OnBeforeOAuthRedirectHook = async ({\n  url,\n  oauth,\n  prisma,\n  req,\n}) => {\n  console.log('query params before oAuth redirect', req.query)\n\n  // Saving query params for later use in onAfterSignup or onAfterLogin hooks\n  const id = oauth.uniqueRequestId\n  someKindOfStore.set(id, req.query)\n\n  return { url }\n}\n```\n\n----------------------------------------\n\nTITLE: Wasp React Todo Component Implementation\nDESCRIPTION: React component implementation for a Todo list using Wasp's built-in operations and React Query integration. Features built-in authentication and automatic cache invalidation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-20-django-vs-wasp.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { FormEventHandler, FormEvent } from \"react\";\nimport { type Task } from \"wasp/entities\";\nimport { type AuthUser, getUsername } from \"wasp/auth\";\nimport { logout } from \"wasp/client/auth\";\nimport { createTask, updateTask, deleteTasks, useQuery, getTasks } from \"wasp/client/operations\";\nimport waspLogo from \"./waspLogo.png\";\n\nimport \"./Main.css\";\n\nexport const MainPage = ({ user }) => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks);\n\n  if (isLoading) return \"Loading...\";\n  if (error) return \"Error: \" + error;\n\n  const completed = tasks?.filter((task) => task.isDone).map((task) => task.id);\n\n  return (\n    <main>\n      <img src={waspLogo} alt=\"wasp logo\" />\n      {user && user.identities.username && (\n        <h1>\n          {user.identities.username.id}\n          {`'s tasks :)`}\n        </h1>\n      )}\n      <NewTaskForm />\n      {tasks && <TasksList tasks={tasks} />}\n      <div className=\"buttons\">\n        <button\n          className=\"logout\"\n          onClick={() => deleteTasks(completed ?? [])}\n        >\n          Delete completed\n        </button>\n        <button className=\"logout\" onClick={logout}>\n          Logout\n        </button>\n      </div>\n    </main>\n  );\n};\n\nfunction Todo({ id, isDone, description }) {\n  const handleIsDoneChange = async (\n    event\n  ) => {\n    try {\n      await updateTask({\n        id,\n        isDone: event.currentTarget.checked,\n      });\n    } catch (err: any) {\n      window.alert(\"Error while updating task \" + err?.message);\n    }\n  };\n\n  return (\n    <li>\n      <span className=\"todo-item\">\n        <input\n          type=\"checkbox\"\n          id={id.toString()}\n          checked={isDone}\n          onChange={handleIsDoneChange}\n        />\n        <span>{description}</span>\n        <button onClick={() => void deleteTasks([id])}>Delete</button>\n      </span>\n    </li>\n  );\n}\n\nfunction TasksList({ tasks }) {\n  if (tasks.length === 0) return <p>No tasks yet.</p>;\n  return (\n    <ol className=\"tasklist\">\n      {tasks.map((task, idx) => (\n        <Todo {...task} key={idx} />\n      ))}\n    </ol>\n  );\n}\n\nfunction NewTaskForm() {\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const description = event.currentTarget.description.value;\n      console.log(description);\n      event.currentTarget.reset();\n      await createTask({ description });\n    } catch (err: any) {\n      window.alert(\"Error: \" + err?.message);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"description\" type=\"text\" defaultValue=\"\" />\n      <input type=\"submit\" value=\"Create task\" />\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing SignupForm with Additional Fields in JavaScript\nDESCRIPTION: JavaScript implementation for a customized SignupForm that adds both an address field (using object notation) and a phone number field (using a render function).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  SignupForm,\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        /* The address field is defined using an object */\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        /* The phone number is defined using a render function */\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Queries in Wasp\nDESCRIPTION: Example of declaring two Queries ('getAllTasks' and 'getFilteredTasks') in a Wasp file. This shows how to specify the implementation function for each Query.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/queries.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nquery getAllTasks {\n  fn: import { getAllTasks } from \"@server/queries.js\"\n}\n\nquery getFilteredTasks {\n  fn: import { getFilteredTasks } from \"@server/queries.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Type-Safe Job Function in TypeScript\nDESCRIPTION: This snippet shows how to implement the 'foo' function for the 'mySpecialJob' in TypeScript, using type annotations for input and output, and the MySpecialJob type for type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/jobs.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type MySpecialJob } from 'wasp/server/jobs'\n\ntype Input = { name: string; }\ntype Output = { tasks: Task[]; }\n\nexport const foo: MySpecialJob<Input, Output> = async (args, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Wasp Job with PgBoss Executor (TypeScript Context)\nDESCRIPTION: Defines a Wasp job named `mySpecialJob` within the `main.wasp` file, configured to use the `PgBoss` executor. It specifies the worker function `foo` imported from `@src/workers/bar`, sets default executor options (e.g., `retryLimit: 1`), defines a cron schedule (`*/5 * * * *`) with specific arguments (`{ \"foo\": \"bar\" }`) and schedule-level executor options (`retryLimit: 0`), and grants access to the `Task` entity. This example is presented within the TypeScript context tab, although the Wasp syntax is identical.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/jobs.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\njob mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@src/workers/bar\",\n    executorOptions: {\n      pgBoss: {=json { \"retryLimit\": 1 } json=}\n    }\n  },\n  schedule: {\n    cron: \"*/5 * * * *\",\n    args: {=json { \"foo\": \"bar\" } json=},\n    executorOptions: {\n      pgBoss: {=json { \"retryLimit\": 0 } json=}\n    }\n  },\n  entities: [Task],\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Navigating and Starting the Wasp Development Server - Shell\nDESCRIPTION: These shell commands change the directory to the newly created Wasp project and start the local development server. Running 'wasp start' sets up the client, server, and database, and opens the web application at 'http://localhost:3000'. The first startup may take extra time to complete necessary initialization.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/01-create.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n```sh\\n$ cd TodoApp\\n$ wasp start\\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Create Operation for Tasks - TypeScript\nDESCRIPTION: Implements a typesafe `createTask` function using TypeScript for handling task creation, ensuring tasks are linked with the authenticated user. Requires Wasp server types, entity models, and HttpError. Receives strongly typed input for `description` and `isDone`, validates authentication, and returns a Task entity. Will error if not run by an authenticated user and provides compile-time type checking.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/crud.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { type Tasks } from 'wasp/server/crud'\\nimport { type Task } from 'wasp/entities'\\nimport { HttpError } from 'wasp/server'\\n\\ntype CreateTaskInput = { description: string; isDone: boolean }\\n\\nexport const createTask: Tasks.CreateAction<CreateTaskInput, Task> = async (\\n  args,\\n  context\\n) => {\\n  if (!context.user) {\\n    throw new HttpError(401, 'User not authenticated.')\\n  }\\n\\n  const { description, isDone } = args\\n  const { Task } = context.entities\\n\\n  return await Task.create({\\n    data: {\\n      description,\\n      isDone,\\n      // highlight-start\\n      // Connect the task to the user that is creating it\\n      user: {\\n        connect: {\\n          id: context.user.id,\\n        },\\n      },\\n      // highlight-end\\n    },\\n  })\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak Auth in Wasp (TypeScript)\nDESCRIPTION: This Wasp configuration file (`main.wasp`) sets up Keycloak authentication for a TypeScript project. It defines the `User` entity and specifies external TypeScript functions (`getConfig`, `userSignupFields`) from `@src/auth/keycloak.ts` (referenced as `.js` due to build process) to handle Keycloak configuration and map user data during signup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/keycloak.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      keycloak: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/keycloak.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/keycloak.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Todo Component with API Calls - TypeScript (TSX)\nDESCRIPTION: Implements the Todo component in TypeScript, using useState with Task typing and api.get for fetching task data. The useEffect initiates the fetch call and error handling. Requires 'wasp/client/api', 'wasp/entities', and React. Suitable for strongly typed frontend projects.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/testing.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type Task } from \\\"wasp/entities\\\";\\nimport { api } from \\\"wasp/client/api\\\";\\n\\nconst Todo = (_props: {}) => {\\n  const [tasks, setTasks] = useState<Task>([]);\\n  useEffect(() => {\\n    api\\n      .get(\\\"/tasks\\\")\\n      .then((res) => res.json() as Task[])\\n      .then((tasks) => setTasks(tasks))\\n      .catch((err) => window.alert(err));\\n  });\\n\\n  return (\\n    <ul>\\n      {tasks &&\\n        tasks.map((task) => (\\n          <li key={task.id}>\\n            <input type=\\\"checkbox\\\" value={task.isDone} />\\n            {task.description}\\n          </li>\\n        ))}\\n    </ul>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating the Form Component in MainPage (JSX)\nDESCRIPTION: Demonstrates how to include the previously defined `NewTaskForm` component within the main `MainPage` React component in JSX (`src/MainPage.jsx`). The form is rendered within the page's layout, allowing users to interact with it to create new tasks. It coexists with the task list fetched using `useQuery`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/06-actions.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  createTask,\n  getTasks,\n  useQuery\n} from 'wasp/client/operations'\n\nconst MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      // highlight-next-line\n      <NewTaskForm />\n\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n\n// ... TaskView, TaskList, NewTaskForm ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Query for Task Info Retrieval - Wasp\nDESCRIPTION: This Wasp file snippet configures a 'getTaskInfo' query that imports an implementation from the JavaScript/TypeScript source. It specifies dependencies by listing related entities (here, 'Task') for use inside the query function. Expected to be used within a Wasp project in the '.wasp' file to link data operations with actual implementation. No additional dependencies except a proper import in '@src/queries'.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/general/typescript.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\nquery getTaskInfo {\\n  fn: import { getTaskInfo } from \"@src/queries\",\\n  entities: [Task]\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Login Page with Wasp Auth UI (TypeScript)\nDESCRIPTION: This TypeScript version of the login page component uses Wasp's Auth UI components to create a login form and includes a link to the signup page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/crud.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function LoginPage() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        placeContent: 'center',\n      }}\n    >\n      <LoginForm />\n      <div>\n        <Link to=\"/signup\">Create an account</Link>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Wasp App and Root Route Declaration After Cleanup (JavaScript)\nDESCRIPTION: Presents the Wasp DSL configuration for the base TodoApp after removing extra pages and routes. Declares the application metadata, the root route, and associates the MainPage implementation with React. This serves as the final minimum setup before further app development and requires Wasp version ^0.15.0.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/03-pages.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"TodoApp\"\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Examining Wasp Project Directory Structure\nDESCRIPTION: Shows the default file structure created when starting a new Wasp project, highlighting the key directories and files including main.wasp, src directory, and configuration files.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/02-project-structure.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── .gitignore\n├── main.wasp          # Your Wasp code goes here.\n├── package.json       # Your dependencies and project info go here.\n├── package-lock.json\n├── public             # Your static files (e.g., images, favicon) go here.\n├── src                # Your source code (TS/JS/CSS/HTML) goes here.\n│   ├── Main.css\n│   ├── MainPage.jsx\n│   ├── vite-env.d.ts\n│   └── waspLogo.png\n├── tsconfig.json\n├── vite.config.ts\n├── .waspignore\n└── .wasproot\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Detailed Email Authentication Settings in Wasp\nDESCRIPTION: Demonstrates configuring advanced email authentication options within the `auth.methods.email` block in `main.wasp`. This includes specifying custom user sign-up fields via `userSignupFields` referencing an external function, setting the sender email address details (`fromField`), and configuring email verification (`emailVerification`) and password reset (`passwordReset`) functionalities by providing client routes (e.g., `EmailVerificationRoute`, `PasswordResetRoute`) and custom email content generation functions imported from external files.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napp myApp {\n  title: \"My app\",\n  // ...\n\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        userSignupFields: import { userSignupFields } from \"@src/auth.js\",\n        fromField: {\n          name: \"My App\",\n          email: \"hello@itsme.com\"\n        },\n        emailVerification: {\n          clientRoute: EmailVerificationRoute,\n          getEmailContentFn: import { getVerificationEmailContent } from \"@src/auth/email.js\",\n        },\n        passwordReset: {\n          clientRoute: PasswordResetRoute,\n          getEmailContentFn: import { getPasswordResetEmailContent } from \"@src/auth/email.js\",\n        },\n      },\n    },\n    onAuthFailedRedirectTo: \"/someRoute\"\n  },\n  // ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic CRUD Operations in Wasp (main.wasp)\nDESCRIPTION: This Wasp configuration snippet demonstrates how to declare default CRUD operations for a `Task` entity. By defining `crud Tasks` linked to the `Task` entity and specifying empty objects `{}` for `get`, `getAll`, `create`, `update`, and `delete` operations, Wasp automatically generates the corresponding backend logic and client-side hooks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_13\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\ncrud Tasks { // crud name here is \"Tasks\"\n  entity: Task,\n  operations: {\n    get: {},\n    getAll: {},\n    create: {},\n    update: {},\n    delete: {},\n  },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Client in React (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use WebSockets on the client side in a React component using JavaScript. It showcases the usage of 'useSocket' and 'useSocketListener' hooks to handle real-time chat functionality.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/web-sockets.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react'\nimport {\n  useSocket,\n  useSocketListener,\n} from 'wasp/client/webSocket'\n\nexport const ChatPage = () => {\n  const [messageText, setMessageText] = useState('')\n  const [messages, setMessages] = useState([])\n  const { socket, isConnected } = useSocket()\n\n  useSocketListener('chatMessage', logMessage)\n\n  function logMessage(msg) {\n    setMessages((priorMessages) => [msg, ...priorMessages])\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    socket.emit('chatMessage', messageText)\n    setMessageText('')\n  }\n\n  const messageList = messages.map((msg) => (\n    <li key={msg.id}>\n      <em>{msg.username}</em>: {msg.text}\n    </li>\n  ))\n  const connectionIcon = isConnected ? '🟢' : '🔴'\n\n  return (\n    <>\n      <h2>Chat {connectionIcon}</h2>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <div>\n            <div>\n              <input\n                type=\"text\"\n                value={messageText}\n                onChange={(e) => setMessageText(e.target.value)}\n              />\n            </div>\n            <div>\n              <button type=\"submit\">Submit</button>\n            </div>\n          </div>\n        </form>\n        <ul>{messageList}</ul>\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useAction for Optimistic Updates in a React Component (JavaScript)\nDESCRIPTION: Demonstrates enhancing a Wasp Action in a React component with the useAction hook to achieve optimistic updates. The hook returns an enhanced function that, when called, updates the Query cache for getTask before the server responds (optimistic UI). Requires wasp/client/operations, a getTask Query, and a markTaskAsDone Action.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/actions.md#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {\n  useQuery,\n  useAction,\n  getTask,\n  markTaskAsDone,\n} from 'wasp/client/operations'\n\nconst TaskPage = ({ id }) => {\n  const { data: task } = useQuery(getTask, { id })\n  // highlight-start\n  const markTaskAsDoneOptimistically = useAction(markTaskAsDone, {\n    optimisticUpdates: [\n      {\n        getQuerySpecifier: ({ id }) => [getTask, { id }],\n        updateQuery: (_payload, oldData) => ({ ...oldData, isDone: true }),\n      },\n    ],\n  })\n  // highlight-end\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>\n  }\n\n  const { description, isDone } = task\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n      {isDone || (\n        <button onClick={() => markTaskAsDoneOptimistically({ id })}>\n          Mark as done.\n        </button>\n      )}\n    </div>\n  )\n}\n\nexport default TaskPage\n```\n\n----------------------------------------\n\nTITLE: Viewing Wasp Project Structure (TypeScript)\nDESCRIPTION: Shows the Wasp project file structure after manually adapting it for TypeScript. This involves renaming the default `src/MainPage.jsx` file to `src/MainPage.tsx`. The rest of the structure, including `main.wasp`, `schema.prisma`, and `package.json`, remains the same as the JavaScript version. The `css` language tag is used here primarily for highlighting purposes as shown in the source document.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/02-project-structure.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.\\n├── .gitignore\\n├── main.wasp          # Your Wasp code goes here.\\n├── schema.prisma      # Your Prisma schema goes here.\\n├── package.json       # Your dependencies and project info go here.\\n├── public             # Your static files (e.g., images, favicon) go here.\\n├── src                # Your source code (TS/JS/CSS/HTML) goes here.\\n│   ├── Main.css\\n// highlight-next-line\\n│   ├── MainPage.tsx   # Renamed from MainPage.jsx\\n│   ├── vite-env.d.ts\\n│   └── waspLogo.png\\n├── tsconfig.json\\n├── vite.config.ts\\n├── .waspignore\\n└── .wasproot\\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Username with Wasp Auth in TypeScript React Component\nDESCRIPTION: Shows usage of the 'getUsername' utility from Wasp's auth package in a TypeScript React component to display user usernames for each task. Imports from 'wasp/auth' and uses task objects that include 'auth' and 'identities' relations. The function conditionally returns the username or null, and the output is rendered accordingly.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getUsername } from 'wasp/auth'\n\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {getUsername(task.user)}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User Data in a React Component\nDESCRIPTION: Shows how to access and use the user object in a React component for an auth-required page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Button from './Button'\nimport { logout } from 'wasp/client/auth'\n\nconst AccountPage = ({ user }) => {\n  return (\n    <div>\n      <Button onClick={logout}>Logout</Button>\n      {JSON.stringify(user, null, 2)}\n    </div>\n  )\n}\n\nexport default AccountPage\n```\n\n----------------------------------------\n\nTITLE: Declaring Automatic CRUD for Task Entity - Wasp\nDESCRIPTION: This snippet configures a \"crud\" resource for the \"Task\" entity in a Wasp file, enabling selected operations including getAll, get, create (with a custom implementation), and update. It designates \"getAll\" as a public operation and links the \"create\" action to an override function imported from \"@src/tasks.js\". This declaration automatically generates backend logic per the schema.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/crud.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\ncrud Tasks {\n  entity: Task,\n  operations: {\n    getAll: {\n      isPublic: true, // by default only logged in users can perform operations\n    },\n    get: {},\n    create: {\n      overrideFn: import { createTask } from \"@src/tasks.js\",\n    },\n    update: {},\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Client in Wasp Application (TypeScript)\nDESCRIPTION: Basic configuration for the client-side of a Wasp application in TypeScript, specifying a root component and setup function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/client-config.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.tsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User Signup Fields in TypeScript\nDESCRIPTION: TypeScript implementation of additional required fields (address and phone) for user signup using defineUserSignupFields. Includes validation logic for the address field while making phone field optional.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/_user-signup-fields-explainer.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: (data) => {\n    if (!data.address) {\n      throw new Error('Address is required')\n    }\n    return data.address\n  }\n  phone: (data) => data.phone,\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling WebSockets in Wasp File\nDESCRIPTION: Demonstrates how to enable WebSockets in the Wasp configuration file by adding the 'webSocket' property to the app object and specifying the server-side function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/web-sockets.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  webSocket: {\n    fn: import { webSocketFn } from \"@src/webSocket\",\n    autoConnect: true, // optional, default: true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions with Entities (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to implement Actions that use Entities via the context parameter. Demonstrates CRUD operations on the Task entity using Prisma's API.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// The 'args' object is the payload sent by the caller (most often from the client)\nexport const createTask = async (args, context) => {\n  const newTask = await context.entities.Task.create({\n    data: {\n      description: args.description,\n      isDone: false,\n    },\n  })\n  return newTask\n}\n\nexport const markTaskAsDone = async (args, context) => {\n  await context.entities.Task.update({\n    where: { id: args.id },\n    data: { isDone: true },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Environment Variables in TypeScript\nDESCRIPTION: Shows how to import and use client environment variables in a TypeScript React component using the Wasp client env object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/env-vars.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from 'wasp/client'\n\nconsole.log(env.REACT_APP_SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Delaying and Submitting a Job - TypeScript\nDESCRIPTION: Demonstrates delayed job submission in TypeScript, using type-checked inputs and chained method calls. delay(10) schedules the job to run after 10 seconds; submit executes the job with provided arguments and an executor options object. Handles the result as a type-safe promise. The job must already be imported from Wasp's module.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/jobs.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nconst submittedJob = await mySpecialJob\n  .delay(10)\n  .submit({ job: \"args\" }, { \"retryLimit\": 2 })\n```\n\n----------------------------------------\n\nTITLE: Password Update Implementation in JavaScript\nDESCRIPTION: Demonstrates how to safely update user passwords using Wasp's auth helper functions with automatic password hashing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createProviderId,\n  findAuthIdentity,\n  updateAuthIdentityProviderData,\n  deserializeAndSanitizeProviderData,\n} from 'wasp/server/auth';\n\nexport const updatePassword = async (args, context) => {\n  const providerId = createProviderId('email', args.email)\n  const authIdentity = await findAuthIdentity(providerId)\n  if (!authIdentity) {\n      throw new HttpError(400, \"Unknown user\")\n  }\n  \n  const providerData = deserializeAndSanitizeProviderData(authIdentity.providerData)\n\n  // Updates the password and hashes it automatically.\n  await updateAuthIdentityProviderData(providerId, providerData, {\n      hashedPassword: args.password,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Default Wasp CRUD 'get' Operation Implementation (TypeScript)\nDESCRIPTION: This snippet shows the default TypeScript code generated by Wasp for the `get` CRUD operation. It leverages the Prisma Client's `findUnique` method on the `Task` entity to fetch a single record using the `id` from the operation arguments (`args.id`), corresponding to the `@id` field in the Prisma schema.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// ...\n// Wasp uses the field marked with `@id` in Prisma schema as the id field.\nreturn Task.findUnique({ where: { id: args.id } })\n```\n```\n\n----------------------------------------\n\nTITLE: Referencing Google Auth Imports in main.wasp (API Section)\nDESCRIPTION: This Wasp snippet shows the `auth` configuration block within `main.wasp`, specifically highlighting the `google` method setup. It demonstrates how the `configFn` and `userSignupFields` properties are assigned external imports from `@src/auth/google.js` to customize the Google authentication flow. This is part of the API reference section.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/google.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/google.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/google.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Field in Wasp App - JavaScript (main.wasp)\nDESCRIPTION: Configures the Wasp client application by specifying the root React component and a setup function using JavaScript modules. The 'client' field is set within the Wasp 'app' declaration. Required files must be present at the configured paths, and both modules should use JavaScript. Inputs are relative import paths for the root component and setup function; outputs are Wasp's recognition and execution of these imports during build.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/client-config.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.jsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Auth Pages with React Components\nDESCRIPTION: Implements authentication-related pages including login, signup, email verification and password reset forms using Wasp's built-in auth components and React Router. The code includes a shared Layout component for consistent styling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/email.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  LoginForm,\n  SignupForm,\n  VerifyEmailForm,\n  ForgotPasswordForm,\n  ResetPasswordForm,\n} from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Don't have an account yet? <Link to=\"/signup\">go to signup</Link>.\n      </span>\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Forgot your password? <Link to=\"/request-password-reset\">reset it</Link>.\n      </span>\n    </Layout>\n  )\n}\n\nexport function Signup() {\n  return (\n    <Layout>\n      <SignupForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </Layout>\n  )\n}\n\nexport function EmailVerification() {\n  return (\n    <Layout>\n      <VerifyEmailForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        If everything is okay, <Link to=\"/login\">go to login</Link>\n      </span>\n    </Layout>\n  )\n}\n\nexport function RequestPasswordReset() {\n  return (\n    <Layout>\n      <ForgotPasswordForm />\n    </Layout>\n  )\n}\n\nexport function PasswordReset() {\n  return (\n    <Layout>\n      <ResetPasswordForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        If everything is okay, <Link to=\"/login\">go to login</Link>\n      </span>\n    </Layout>\n  )\n}\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"h-full w-full bg-white\">\n      <div className=\"flex min-h-[75vh] min-w-full items-center justify-center\">\n        <div className=\"h-full w-full max-w-sm bg-white p-5\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Queries on the Server in TypeScript\nDESCRIPTION: Demonstrates server-side Query usage in TypeScript, showing automatic type inference for return values and type-checking for payloads.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/queries.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAllTasks, getFilteredTasks } from 'wasp/server/operations'\n\nconst user = // Get an AuthUser object, e.g., from context.user in an operation.\n\n// TypeScript automatically infers the return values and type-checks\n// the payloads.\nconst allTasks = await getAllTasks({ user })\nconst doneTasks = await getFilteredTasks({ isDone: true }, { user })\n```\n\n----------------------------------------\n\nTITLE: Accessing User Object in Main Page Component (JavaScript)\nDESCRIPTION: Shows how to access the authenticated user object in the Main Page component in JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/07-auth.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// highlight-next-line\nexport const MainPage = ({ user }) => {\n  // Do something with the user\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Wasp Application\nDESCRIPTION: This snippet shows how to configure authentication in a Wasp application. It specifies the user entity, external auth entity, and enables username/password and Google authentication methods.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-15-auth-feature-announcement.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp authExample {\n  // ...\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      usernameAndPassword: {},\n      google: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Main App with Email Auth Flow (Wasp)\nDESCRIPTION: This snippet defines a Wasp app with email-based authentication and a user entity. The 'auth' field configures the user entity, selectable methods (email in this case), and the client route to redirect upon failed authentication. The fields allow extension with further authentication options. Dependencies: user entity model defined in Prisma and matching project structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/email.md#2025-04-22_snippet_11\n\nLANGUAGE: Wasp\nCODE:\n```\napp myApp {\\n  title: \"My app\",\\n  // ...\\n\\n  auth: {\\n    userEntity: User,\\n    methods: {\\n      email: {\\n        // We'll explain these options below\\n      },\\n    },\\n    onAuthFailedRedirectTo: \"/someRoute\"\\n  },\\n  // ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Verification in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the verifyEmail action to implement email verification on the client-side in TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyEmail } from 'wasp/client/auth'\n...\nawait verifyEmail({ token });\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sign-up Form in React (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to create a custom sign-up form using React and JavaScript in a Wasp application. It utilizes Wasp's auth functions for user registration and login, and includes error handling and navigation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/username-and-pass/create-your-own-ui.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { login, signup } from 'wasp/client/auth'\n\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\nexport function Signup() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState(null)\n  const navigate = useNavigate()\n\n  async function handleSubmit(event) {\n    event.preventDefault()\n    setError(null)\n    try {\n      await signup({ username, password })\n      await login(username, password)\n      navigate('/')\n    } catch (error) {\n      setError(error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {error && <p>Error: {error.message}</p>}\n\n      <input\n        type=\"text\"\n        autoComplete=\"username\"\n        value={username}\n        onChange={(e) => setUsername(e.target.value)}\n        placeholder=\"Username\"\n      />\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        placeholder=\"Password\"\n      />\n      <button type=\"submit\">Sign Up</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Page with Idea Generation and Display in React TSX\nDESCRIPTION: This comprehensive component fetches and displays tweet drafts and ideas, allows generating new ideas, and embeds original tweets. It uses custom hooks for data fetching and state management, and integrates various sub-components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport waspLogo from './waspLogo.png';\nimport './Main.css';\nimport { useState } from 'react';\nimport generateNewIdeas from '@wasp/actions/generateNewIdeas';\nimport { useQuery } from '@wasp/queries';\nimport getTweetDraftsWithIdeas from '@wasp/queries/getTweetDraftsWithIdeas';\nimport AddNote from './AddNote';\nimport Button from './Button';\n\nconst MainPage = () => {\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  const {\n    data: tweetDrafts,\n    isLoading: isTweetDraftsLoading,\n    error: tweetDraftsError,\n  } = useQuery(getTweetDraftsWithIdeas);\n\n  const handleNewIdeas = async (e: any) => {\n    try {\n      setIsGenerating(true);\n      await generateNewIdeas();\n    } catch (error: any) {\n      alert(error.message);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  if (isTweetDraftsLoading) {\n    return 'Loading...';\n  }\n\n  if (tweetDraftsError) {\n    return 'Error: ' + tweetDraftsError.message;\n  }\n\n  return (\n    <div className='min-h-screen bg-neutral-300/70 text-center'>\n      <div className='flex flex-col gap-6 justify-center items-center mx-auto pt-12'>\n        <img src={waspLogo} className='w-5' />\n        <div className='flex flex-col gap-4 justify-center items-center w-2/4'>\n          <AddNote />\n          <hr className='border border-t-1 border-neutral-100/70 w-full' />\n          <div className='flex flex-row justify-center w-1/4'>\n            <Button onClick={handleNewIdeas} isLoading={isGenerating}>\n              Generate New Ideas\n            </Button>\n          </div>\n          <div className='flex flex-col gap-4 justify-center items-center w-full'>\n            {tweetDrafts.map((tweetDraft) => (\n              <>\n                <h2 className='text-2xl font-bold'>Generated Ideas</h2>\n                <div key={tweetDraft.id} className='flex flex-col gap-2 justify-center items-center w-full'>\n                  <h2>Tweet Draft</h2>\n                  <div className='flex flex-row gap-2 justify-center items-center w-full'>\n                    <div className='w-full p-4 h-22 bg-blue-100 border rounded-lg w-full'>{tweetDraft.content}</div>\n                  </div>\n\n                  {!!tweetDraft.notes && tweetDraft.notes !== tweetDraft.originalTweet.content && (\n                    <>\n                      <h2>Your Similar Notes</h2>\n                      {tweetDraft.notes}\n                    </>\n                  )}\n                  <div className='flex flex-col gap-2 justify-center items-center w-full'>\n                    <h2>Ideas</h2>\n                    {tweetDraft.originalTweet.ideas.map((idea) => (\n                      <div key={idea.id} className='flex flex-row gap-2 justify-center items-center w-full'>\n                        <div className='flex flex-row gap-2 justify-center items-center w-full'>\n                          <div className='w-full p-4 h-22 bg-neutral-100 border rounded-lg w-full'>{idea.content}</div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default MainPage;\n```\n\n----------------------------------------\n\nTITLE: Calling Wasp Queries from Server (TypeScript)\nDESCRIPTION: Illustrates how to call Wasp queries from server-side TypeScript code. Queries must be imported from `wasp/server/operations`. For authenticated queries, a context object containing the `user` (AuthUser object) must be explicitly passed. TypeScript provides type inference for return values and payloads.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/queries.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { getAllTasks, getFilteredTasks } from 'wasp/server/operations'\n\nconst user = // Get an AuthUser object, e.g., from context.user in an operation.\n\n// TypeScript automatically infers the return values and type-checks\n// the payloads.\nconst allTasks = await getAllTasks({ user })\nconst doneTasks = await getFilteredTasks({ isDone: true }, { user })\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with useAction Hook in TypeScript\nDESCRIPTION: TypeScript implementation of the useAction hook for optimistic updates in a Task component. This example demonstrates proper type definitions for the payload and task data, showing how TypeScript provides automatic type checking for the optimistic update configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/actions.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport {\n  useQuery,\n  useAction,\n  type OptimisticUpdateDefinition,\n  getTask,\n  markTaskAsDone,\n} from 'wasp/client/operations'\n\ntype TaskPayload = Pick<Task, \"id\">;\n\nconst TaskPage = ({ id }: { id: number }) => {\n  const { data: task } = useQuery(getTask, { id });\n  // Typescript automatically type-checks the payload type.\n  // highlight-start\n  const markTaskAsDoneOptimistically = useAction(markTaskAsDone, {\n    optimisticUpdates: [\n      {\n        getQuerySpecifier: ({ id }) => [getTask, { id }],\n        updateQuery: (_payload, oldData) => ({ ...oldData, isDone: true }),\n      } as OptimisticUpdateDefinition<TaskPayload, Task>,\n    ],\n  });\n  // highlight-end\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>;\n  }\n\n  const { description, isDone } = task;\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? \"Yes\" : \"No\"}\n      </p>\n      {isDone || (\n        <button onClick={() => markTaskAsDoneOptimistically({ id })}>\n          Mark as done.\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default TaskPage;\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions in TypeScript\nDESCRIPTION: This snippet shows how to implement the previously declared Actions in TypeScript. It includes type definitions and implementations for createTask and markTaskAsDone functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/actions.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateTask, type MarkTaskAsDone } from 'wasp/server/operations'\n\ntype Task = {\n  id: number\n  description: string\n  isDone: boolean\n}\n\nlet nextId = 4\nconst tasks = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\nexport const createTask: CreateTask<Pick<Task, 'description'>, Task> = (\n  args\n) => {\n  const newTask = {\n    id: nextId,\n    isDone: false,\n    description: args.description,\n  }\n  nextId += 1\n  tasks.push(newTask)\n  return newTask\n}\n\nexport const markTaskAsDone: MarkTaskAsDone<Pick<Task, 'id'>, void> = (\n  args\n) => {\n  const task = tasks.find((task) => task.id === args.id)\n  if (!task) {\n    return\n  }\n  task.isDone = true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User and Task Entities in Prisma Schema\nDESCRIPTION: This code defines the User and Task entities in the Prisma schema, establishing a relationship between users and their tasks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/crud.md#2025-04-22_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int    @id @default(autoincrement())\n  tasks Task[]\n}\n\n// We defined a Task entity on which we'll enable CRUD later on\nmodel Task {\n  id          Int     @id @default(autoincrement())\n  description String\n  isDone      Boolean\n  userId      Int\n  user        User    @relation(fields: [userId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query in JavaScript\nDESCRIPTION: This code demonstrates how to implement the 'getTasks' query function in JavaScript. It uses the Prisma client to fetch all tasks from the database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/05-queries.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getTasks = async (args, context) => {\n  return context.entities.Task.findMany({\n    orderBy: { id: 'asc' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Task Entity with Prisma Schema (Prisma)\nDESCRIPTION: Defines a Task entity in the schema.prisma file using Prisma's declarative schema language. This model includes an 'id' as a UUID primary key, a 'description' field, and an 'isDone' boolean with a default value. Wasp picks up this model to generate the corresponding database table and types. Required dependency: 'prisma' (Prisma Schema Language), and the 'schema.prisma' file must be located at the project root. Fields correspond to columns: 'id' (unique identifier), 'description' (task description), and 'isDone' (completion status, default false).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/entities.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Task {\n  id          String  @id @default(uuid())\n  description String\n  isDone      Boolean @default(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Zod Schema for Advanced Form Fields\nDESCRIPTION: Defines the initial Zod validation schema for an extended form including username, address, postal code, city, and country fields with basic validation rules.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2025-01-22-advanced-react-hook-form-zod-shadcn.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst formSchema = z\n    .object({\n      name: z.string().min(1, { message: 'Name is required' }),\n      surname: z.string().min(1, { message: 'Surname is required' }),\n      email: z\n        .string()\n        .email({ message: 'Invalid email address' }),\n      dateOfBirth: z.date().max(new Date(), {\n        message: 'Date of birth cannot be in the future',\n      }),\n      premiumUser: z.boolean(),\n      username: z\n        .string()\n        .min(1, { message: 'Username is required' }),\n      address: z.string().min(1, { message: 'Address is required' }),\n      postalCode: z.string().min(1, { message: 'Postal code is required' }),\n      city: z.string().min(1, { message: 'City is required' }),\n      country: z.string().min(1, { message: 'Country is required' }),\n    });\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Route to Express App in Wasp Server Setup (JavaScript)\nDESCRIPTION: Demonstrates a JavaScript setup function that adds a custom Express route during server startup. The exported async function receives the Express app instance, allowing additional routes to be defined for use across the application. Dependencies include Express; key parameters are the app object, and the route pattern. The function does not return a value and affects global routing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/server-config.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const mySetupFunction = async ({ app }) => {\n  addCustomRoute(app)\n}\n\nfunction addCustomRoute(app) {\n  app.get('/customRoute', (_req, res) => {\n    res.send('I am a custom route')\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Client-side CRUD Operations Usage\nDESCRIPTION: Demonstrates how to import and use CRUD operations on the client side using React hooks. Shows usage patterns for querying and mutating data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/crud.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tasks } from 'wasp/client/crud'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data } = Tasks.getAll.useQuery()\nconst { data } = Tasks.get.useQuery({ id: 1 })\nconst createAction = Tasks.create.useAction()\nconst updateAction = Tasks.update.useAction()\nconst deleteAction = Tasks.delete.useAction()\n```\n\n----------------------------------------\n\nTITLE: Declaring CRUD Operations With Override Options in Wasp (TypeScript)\nDESCRIPTION: Shows the same CRUD declaration for the 'Tasks' entity as in the JavaScript example, but intended for use with TypeScript projects. Allows setting public access and custom function overrides for CRUD operations in a .wasp file. Dependencies include the 'Task' entity and, optionally, a TypeScript override function in '@src/tasks.js'. Inputs: N/A; Outputs: CRUD endpoint generation for Tasks. The configuration and implementation pattern matches JavaScript usage, but can target a TypeScript codebase.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/crud.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\ncrud Tasks { // crud name here is \"Tasks\"\n  entity: Task,\n  operations: {\n    getAll: {\n      isPublic: true, // optional, defaults to false\n    },\n    get: {},\n    create: {\n      overrideFn: import { createTask } from \"@src/tasks.js\", // optional\n    },\n    update: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring createTask Action in Wasp\nDESCRIPTION: Declaration of a createTask Action in main.wasp that references an imported function and specifies the Task entity it affects.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/06-actions.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\naction createTask {\n  fn: import { createTask } from \"@src/actions\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Email Signup in TypeScript\nDESCRIPTION: This code implements a custom email signup process in TypeScript, including type definitions, email validation, user creation, and sending a verification email.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/advanced/custom-auth-actions.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\nimport {\n  createEmailVerificationLink,\n  createProviderId,\n  createUser,\n  ensurePasswordIsPresent,\n  ensureValidEmail,\n  ensureValidPassword,\n  findAuthIdentity,\n  getProviderData,\n  sanitizeAndSerializeProviderData,\n  sendEmailVerificationEmail,\n} from 'wasp/server/auth'\nimport type { CustomSignup } from 'wasp/server/operations'\n\ntype CustomSignupInput = {\n  email: string\n  password: string\n}\ntype CustomSignupOutput = {\n  success: boolean\n  message: string\n}\n\nexport const signup: CustomSignup<\n  CustomSignupInput,\n  CustomSignupOutput\n> = async (args, _context) => {\n  ensureValidEmail(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('email', args.email)\n    const existingAuthIdentity = await findAuthIdentity(providerId)\n\n    let providerData\n\n    if (existingAuthIdentity) {\n      // User already exists, handle accordingly\n\n      // For example, throw an error or return a message\n      throw new HttpError(400, 'Email already exists.')\n\n      // Or, another example, you can check if the user is already\n      // verified and re-send the verification email if not\n      providerData = getProviderData<'email'>(existingAuthIdentity.providerData)\n      if (providerData.isEmailVerified)\n        throw new HttpError(400, 'Email already verified.')\n    }\n\n    if (!providerData) {\n      providerData = await sanitizeAndSerializeProviderData<'email'>({\n        // The provider will hash the password for us, so we don't need to do it here.\n        hashedPassword: args.password,\n        isEmailVerified: false,\n        emailVerificationSentAt: null,\n        passwordResetSentAt: null,\n      })\n      await createUser(\n        providerId,\n        providerData,\n        // Any additional data you want to store on the User entity\n        {}\n      )\n    }\n\n    // Verification link links to a client route e.g. /email-verification\n    const verificationLink = await createEmailVerificationLink(\n      args.email,\n      '/email-verification'\n    )\n    try {\n      await sendEmailVerificationEmail(args.email, {\n        from: {\n          name: 'My App Postman',\n          email: 'hello@itsme.com',\n        },\n        to: args.email,\n        subject: 'Verify your email',\n        text: `Click the link below to verify your email: ${verificationLink}`,\n        html: `\n                      <p>Click the link below to verify your email</p>\n                      <a href=\"${verificationLink}\">Verify email</a>\n                  `,\n      })\n    } catch (e: unknown) {\n      console.error('Failed to send email verification email:', e)\n      throw new HttpError(500, 'Failed to send email verification email.')\n    }\n  } catch (e: any) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Login Page with Social Auth Buttons in JavaScript\nDESCRIPTION: Implementation of a custom login page component using Wasp's auth helpers to render social login buttons and links for Google and GitHub authentication. Shows both pre-built button components and custom URL-based links.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/create-your-own-ui.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  GoogleSignInButton,\n  googleSignInUrl,\n  GitHubSignInButton,\n  gitHubSignInUrl,\n} from 'wasp/client/auth'\n\nexport const LoginPage = () => {\n  return (\n    <>\n      <GoogleSignInButton />\n      <GitHubSignInButton />\n      {/* or */}\n      <a href={googleSignInUrl}>Sign in with Google</a>\n      <a href={gitHubSignInUrl}>Sign in with GitHub</a>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Per-Path Middleware in Wasp and JavaScript\nDESCRIPTION: This example shows how to customize middleware for all API routes under a common path in a Wasp application using JavaScript. It adds a custom middleware for a specific API namespace.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/middleware-config.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napiNamespace fooBar {\n  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from \"@src/apis\",\n  path: \"/foo/bar\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const fooBarNamespaceMiddlewareFn = (middlewareConfig) => {\n  const customMiddleware = (_req, _res, next) => {\n    console.log('fooBarNamespaceMiddlewareFn: custom middleware')\n    next()\n  }\n\n  middlewareConfig.set('custom.middleware', customMiddleware)\n\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Second Page with URL Parameters in Wasp (JavaScript)\nDESCRIPTION: Demonstrates adding a new page and route definition to `main.wasp` for a JavaScript project. It defines `HelloRoute` with a path `/hello/:name` that includes a URL parameter, mapping it to `HelloPage`. `HelloPage` imports its component from `src/HelloPage.jsx`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/03-pages.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\nroute HelloRoute { path: \"/hello/:name\", to: HelloPage }\npage HelloPage {\n  component: import { HelloPage } from \"@src/HelloPage\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing createTask Action in TypeScript\nDESCRIPTION: TypeScript implementation of the createTask Action with proper type annotations for full-stack type safety, creating a new Task entity in the database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/06-actions.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from 'wasp/entities'\nimport { CreateTask } from 'wasp/server/operations'\n\ntype CreateTaskPayload = Pick<Task, 'description'>\n\nexport const createTask: CreateTask<CreateTaskPayload, Task> = async (\n  args,\n  context\n) => {\n  return context.entities.Task.create({\n    data: { description: args.description },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Task Entity using Prisma Schema in Wasp\nDESCRIPTION: Defines a Prisma model named `Task` within the `schema.prisma` file for a Wasp application. This entity represents a task with an auto-incrementing integer ID, a string description, and a boolean status `isDone` which defaults to false.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/04-entities.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\n```prisma title=\"schema.prisma\"\n// ...\n\nmodel Task {\n    id          Int     @id @default(autoincrement())\n    description String\n    isDone      Boolean @default(false)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication in Wasp\nDESCRIPTION: A simple configuration for setting up username and password authentication in a Wasp application. This snippet shows how Wasp requires minimal code to enable full authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-20-django-vs-wasp.md#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n\n  title: \"Todo App\",\n\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {}\n    }\n  }\n\n  //...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Wasp Action in TypeScript\nDESCRIPTION: Provides the TypeScript implementation for the `createTask` action in `src/actions.ts`. It utilizes Wasp-generated types (`Task`, `CreateTask`, `CreateTaskPayload`) for enhanced type safety across the full stack. The function takes typed arguments (`args`, `context`) and uses `context.entities.Task.create` to add a new task based on the `description` provided in `args`, returning the typed `Task` object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/06-actions.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { Task } from 'wasp/entities'\nimport { CreateTask } from 'wasp/server/operations'\n\ntype CreateTaskPayload = Pick<Task, 'description'>\n\nexport const createTask: CreateTask<CreateTaskPayload, Task> = async (\n  args,\n  context\n) => {\n  return context.entities.Task.create({\n    data: { description: args.description },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Task with User Association in JavaScript (Wasp)\nDESCRIPTION: This JavaScript code defines a Wasp action `createTask` that creates a new task associated with the currently logged-in user. It first checks if `context.user` exists, throwing an `HttpError(403)` if the user is not authenticated. If authenticated, it uses `context.entities.Task` (presumably a Prisma model accessor provided by Wasp) to create a new task record, linking it to the authenticated user via `context.user.id`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/actions.js\"\nimport { HttpError } from 'wasp/server'\n\nexport const createTask = async (task, context) => {\n  if (!context.user) {\n    throw new HttpError(403)\n  }\n\n  const Task = context.entities.Task\n  return Task.create({\n    data: {\n      description: task.description,\n      user: {\n        connect: { id: context.user.id },\n      },\n    },\n  })\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Queries in Wasp\nDESCRIPTION: Shows how to declare queries in a Wasp configuration file using the query declaration syntax.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/queries.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nquery getAllTasks {\n  fn: import { getAllTasks } from \"@src/queries.js\"\n}\n\nquery getFilteredTasks {\n  fn: import { getFilteredTasks } from \"@src/queries.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Page Component (React, TypeScript)\nDESCRIPTION: TypeScript React version of the signup page, using Wasp's SignupForm and routing. Matches the JavaScript logic, expects no props, and provides navigation to the login page. Requires 'react-router-dom' and 'wasp/client/auth'.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/07-auth.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\\nimport { SignupForm } from 'wasp/client/auth'\\n\\nexport const SignupPage = () => {\\n  return (\\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\\n      <SignupForm />\\n      <br />\\n      <span>\\n        I already have an account (<Link to=\"/login\">go to login</Link>).\\n      </span>\\n    </div>\\n  )\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring QueryClient via Setup Function (TypeScript, src/myClientSetupCode.ts)\nDESCRIPTION: Provides a TypeScript setup function for Wasp that customizes the react-query QueryClient's global options, setting queries.staleTime to Infinity. Requires importing configureQueryClient from wasp/client/operations and configuring it as required by react-query. Used as an initialization step in the client setup flow.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/client-config.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureQueryClient } from 'wasp/client/operations'\n\nexport default async function mySetupFunction(): Promise<void> {\n  // ... some setup\n  configureQueryClient({\n    defaultOptions: {\n      queries: {\n        staleTime: Infinity,\n      },\n    },\n  })\n  // ... some more setup\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp App Client in TypeScript\nDESCRIPTION: Basic Wasp application configuration showing client setup with root component, setup function imports, and base directory configuration in TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/client-config.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@client/Root.tsx\",\n    setupFn: import mySetupFunction from \"@client/myClientSetupCode.ts\",\n    baseDir: \"/my-app\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Migration Action in JavaScript\nDESCRIPTION: Server-side implementation of the password migration function. It verifies the user's old password using the legacy hashing algorithm (SecurePassword) and updates it to use the new hashing method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport SecurePassword from \"secure-password\";\nimport { HttpError } from \"wasp/server\";\nimport {\n  createProviderId,\n  deserializeAndSanitizeProviderData,\n  findAuthIdentity,\n  updateAuthIdentityProviderData,\n} from \"wasp/server/auth\";\n\nexport const migratePassword = async ({ password, username }, _context) => {\n  const providerId = createProviderId(\"username\", username);\n  const authIdentity = await findAuthIdentity(providerId);\n\n  if (!authIdentity) {\n    throw new HttpError(400, \"Something went wrong\");\n  }\n\n  const providerData = deserializeAndSanitizeProviderData(\n    authIdentity.providerData\n  );\n\n  try {\n    const SP = new SecurePassword();\n\n    // This will verify the password using the old algorithm\n    const result = await SP.verify(\n      Buffer.from(password),\n      Buffer.from(providerData.hashedPassword, \"base64\")\n    );\n\n    if (result !== SecurePassword.VALID) {\n      throw new HttpError(400, \"Something went wrong\");\n    }\n\n    // This will hash the password using the new algorithm and update the\n    // provider data in the database.\n    await updateAuthIdentityProviderData(providerId, providerData, {\n      hashedPassword: password,\n    });\n  } catch (e) {\n    throw new HttpError(400, \"Something went wrong\");\n  }\n\n  return {\n    message: \"Password migrated successfully.\",\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Environment Variables\nDESCRIPTION: Demonstrates how to access server-side environment variables using process.env in both JavaScript and TypeScript\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/env-vars.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(process.env.SOME_VAR_NAME)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(process.env.SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp Client in JavaScript\nDESCRIPTION: This snippet shows how to configure the client in a Wasp application using JavaScript, including setting up a root component and a setup function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/client-config.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.jsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Entity Models to PostgreSQL Configuration in schema.prisma\nDESCRIPTION: Complete schema.prisma file with PostgreSQL configuration and sample User and Task entity models that demonstrate the correct model definition syntax and relationships.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_11\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\n// There are some example entities, you should move your entities here\n// highlight-start\nmodel User {\n  id       Int @id @default(autoincrement())\n  tasks    Task[]\n}\n\nmodel Task {\n  id          Int @id @default(autoincrement())\n  description String\n  isDone      Boolean\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\n}\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Creating a React Form (TSX) to Invoke a Wasp Action\nDESCRIPTION: Defines a React functional component `NewTaskForm` in TSX (`src/MainPage.tsx`) with TypeScript typings. It includes an input field and a submit button. The `handleSubmit` function, typed with `FormEvent<HTMLFormElement>`, prevents default submission, extracts the description (casting the target to `HTMLFormElement`), calls the imported `createTask` Wasp action, resets the form, and handles potential errors with typed error catching.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/06-actions.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// highlight-next-line\nimport { FormEvent } from 'react'\nimport { Task } from 'wasp/entities'\nimport {\n  // highlight-next-line\n  createTask,\n  getTasks,\n  useQuery\n} from 'wasp/client/operations'\n\n// ... MainPage, TaskView, TaskList ...\n\n// highlight-start\nconst NewTaskForm = () => {\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    try {\n      const target = event.target as HTMLFormElement\n      const description = target.description.value\n      target.reset()\n      await createTask({ description })\n    } catch (err: any) {\n      window.alert('Error: ' + err.message)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"description\" type=\"text\" defaultValue=\"\" />\n      <input type=\"submit\" value=\"Create task\" />\n    </form>\n  )\n}\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Declaring a Job in Wasp\nDESCRIPTION: This snippet shows how to declare a Job named 'mySpecialJob' in Wasp, using the PgBoss executor, with perform and schedule options, and associated entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/jobs.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\njob mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@src/workers/bar\",\n    executorOptions: {\n      pgBoss: {=json { \"retryLimit\": 1 } json=}\n    }\n  },\n  schedule: {\n    cron: \"*/5 * * * *\",\n    args: {=json { \"foo\": \"bar\" } json=},\n    executorOptions: {\n      pgBoss: {=json { \"retryLimit\": 0 } json=}\n    }\n  },\n  entities: [Task],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Google OAuth Config in TypeScript\nDESCRIPTION: TypeScript implementation of Google OAuth configuration functions. Uses defineUserSignupFields helper to provide type safety when mapping OAuth profile data to User entity fields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/google.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  username: () => \"hardcoded-username\",\n  displayName: (data) => data.profile.displayName,\n})\n\nexport function getConfig() {\n  return {\n    clientID, // look up from env or elsewhere\n    clientSecret, // look up from env or elsewhere\n    scope: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Session Entity for Session Management - Wasp Language\nDESCRIPTION: Models the Session entity for persisting session information, including session ID, expiration, and relational mapping to Auth for user scope. Built-in indexing of userId for efficient lookups. Dependencies: Wasp/PSL entity modeling. Key fields: id, expiresAt, userId, relation to Auth entity. Inputs: session records, Outputs: backend session state.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/entities.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nentity Session {=psl\\n  id        String   @id @unique\\n  expiresAt DateTime\\n  userId    String\\n  auth      Auth     @relation(references: [id], fields: [userId], onDelete: Cascade)\\n\\n  @@index([userId])\\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Calling Wasp Actions on the Server (TypeScript)\nDESCRIPTION: Shows server-side Wasp Action invocation in TypeScript. Imports are made from `wasp/server/operations`. If an action is authenticated, it requires a context object with the `user` passed as the second argument. TypeScript provides compile-time checks for action payloads and return values.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport { createTask, markTasAsDone } from 'wasp/server/operations'\n\nconst user = // Get an AuthUser object, e.g., from context.user\n\n// TypeScript automatically infers the return values and type-checks\n// the payloads.\nconst newTask = await createTask(\n  { description: 'Keep learning TypeScript' },\n  { user },\n)\nawait markTasAsDone({ id: 1 }, { user })\n```\n\n----------------------------------------\n\nTITLE: Basic Server Setup Function Implementation (TypeScript)\nDESCRIPTION: A minimal example of an async server setup function (`mySetupFunction`) in TypeScript, using the `ServerSetupFn` type imported from `wasp/server`. This function performs initial setup tasks, like resource initialization, when the server starts.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/server-config.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/myServerSetupCode.ts\"\nimport { type ServerSetupFn } from 'wasp/server'\n\nexport const mySetupFunction: ServerSetupFn = async () => {\n  await setUpSomeResource()\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Up Authentication Routes and Pages\nDESCRIPTION: Configuration of routes and pages for login, signup, password reset, and email verification.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/email.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { Signup } from \"@src/pages/auth.jsx\"\n}\n\nroute RequestPasswordResetRoute { path: \"/request-password-reset\", to: RequestPasswordResetPage }\npage RequestPasswordResetPage {\n  component: import { RequestPasswordReset } from \"@src/pages/auth.jsx\",\n}\n\nroute PasswordResetRoute { path: \"/password-reset\", to: PasswordResetPage }\npage PasswordResetPage {\n  component: import { PasswordReset } from \"@src/pages/auth.jsx\",\n}\n\nroute EmailVerificationRoute { path: \"/email-verification\", to: EmailVerificationPage }\npage EmailVerificationPage {\n  component: import { EmailVerification } from \"@src/pages/auth.jsx\",\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Task Creation Implementation - JavaScript\nDESCRIPTION: Custom implementation of task creation operation that connects tasks to authenticated users.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/crud.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport HttpError from '@wasp/core/HttpError.js'\n\nexport const createTask = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401, 'User not authenticated.')\n  }\n\n  const { description, isDone } = args\n  const { Task } = context.entities\n\n  return await Task.create({\n    data: {\n      description,\n      isDone,\n      user: {\n        connect: {\n          id: context.user.id,\n        },\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global QueryClient - JavaScript (src\\/myClientSetupCode.js)\nDESCRIPTION: Shows how to globally configure react-query's QueryClient via Wasp's configureQueryClient in JavaScript. Requires 'wasp/client/operations'. Modifies default query options so data never becomes stale. Should be placed in the exported async setup function. Outputs customized QueryClient behaviors globally.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/client-config.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport { configureQueryClient } from 'wasp/client/operations'\n\nexport default async function mySetupFunction() {\n  // ... some setup\n  configureQueryClient({\n    defaultOptions: {\n      queries: {\n        staleTime: Infinity,\n      },\n    },\n  })\n  // ... some more setup\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a React Component with a Mocked API using Vitest and Testing Library - TypeScript (TSX)\nDESCRIPTION: Tests the TypeScript Todo component that calls an API, by mocking the API endpoint and checking UI updates. Uses Vitest and Testing Library for assertions. Ensures that type safety is maintained in/component logic and verifies that mocked responses propagate to rendered output.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/testing.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { test, expect } from \"vitest\";\nimport { screen } from \"@testing-library/react\";\n\nimport { mockServer, renderInContext } from \"wasp/client/test\";\nimport Todo from \"./Todo\";\n\nconst { mockApi } = mockServer();\n\nconst mockTasks = [\n  {\n    id: 1,\n    description: \"test todo 1\",\n    isDone: true,\n    userId: 1,\n  },\n];\n\ntest(\"handles mock data\", async () => {\n  mockApi(\"/tasks\", mockTasks);\n\n  renderInContext(<Todo />);\n\n  await screen.findByText(\"test todo 1\");\n\n  expect(screen.getByRole(\"checkbox\")).toBeChecked();\n\n  screen.debug();\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Google Auth Behavior in Wasp\nDESCRIPTION: This snippet shows how to override the default Google authentication behavior by importing a custom userSignupFields function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {\n        userSignupFields: import { userSignupFields } from \"@src/auth/google.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Sending Emails in TypeScript\nDESCRIPTION: Illustrates how to send an email using the emailSender.send method in a TypeScript action handler, specifying sender details, recipient, subject, and email content.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/email/email.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { emailSender } from \"wasp/server/email\";\n\n// In some action handler...\nconst info = await emailSender.send({\n  from: {\n    name: \"John Doe\",\n    email: \"john@doe.com\",\n  },\n  to: \"user@domain.com\",\n  subject: \"Saying hello\",\n  text: \"Hello world\",\n  html: \"Hello <strong>world</strong>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Environment Variables\nDESCRIPTION: Shows how to access validated environment variables in server-side code using the env object imported from wasp/server.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/env-vars.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from 'wasp/server'\n\nconst stripeApiKey = env.STRIPE_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signup in TypeScript\nDESCRIPTION: TypeScript implementation of a custom signup action with proper type definitions. Demonstrates creating a user with username/password authentication using Wasp's auth helper functions with typed inputs and outputs.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/entities.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  createUser,\n} from 'wasp/server/auth'\nimport type { CustomSignup } from 'wasp/server/operations'\n\ntype CustomSignupInput = {\n  username: string\n  password: string\n}\ntype CustomSignupOutput = {\n  success: boolean\n  message: string\n}\n\nexport const signup: CustomSignup<\n  CustomSignupInput,\n  CustomSignupOutput\n> = async (args, { entities: { User } }) => {\n  try {\n    // Provider ID is a combination of the provider name and the provider user ID\n    // And it is used to uniquely identify the user in your app\n    const providerId = createProviderId('username', args.username)\n    // sanitizeAndSerializeProviderData hashes the password and returns a JSON string\n    const providerData = await sanitizeAndSerializeProviderData<'username'>({\n      hashedPassword: args.password,\n    })\n\n    await createUser(\n      providerId,\n      providerData,\n      // Any additional data you want to store on the User entity\n      {}\n    )\n\n    // This is equivalent to:\n    // await User.create({\n    //   data: {\n    //     auth: {\n    //       create: {\n    //         identities: {\n    //             create: {\n    //                 providerName: 'username',\n    //                 providerUserId: args.username\n    //                 providerData,\n    //             },\n    //         },\n    //       }\n    //     },\n    //   }\n    // })\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using updateTask Action in React Component (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the 'updateTask' action in a React component. It handles the checkbox change event to update a task's status.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/06-actions.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  updateTask,\n  createTask,\n  getTasks,\n  useQuery,\n} from 'wasp/client/operations'\n\nconst TaskView = ({ task }) => {\n  const handleIsDoneChange = async (event) => {\n    try {\n      await updateTask({\n        id: task.id,\n        isDone: event.target.checked,\n      })\n    } catch (error) {\n      window.alert('Error while updating task: ' + error.message)\n    }\n  }\n\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        id={String(task.id)}\n        checked={task.isDone}\n        onChange={handleIsDoneChange}\n      />\n      {task.description}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Actions in Wasp\nDESCRIPTION: This snippet shows how to declare Actions in a Wasp file. It includes declarations for 'createTask' and 'markTaskAsDone' Actions, specifying their implementation functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/actions.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\naction createTask {\n  fn: import { createTask } from \"@src/actions.js\"\n}\n\naction markTaskAsDone {\n  fn: import { markTaskAsDone } from \"@src/actions.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Server Environment Variables After Deployment\nDESCRIPTION: Command to set server-side environment variables for an already deployed Wasp application. This allows adding authentication secrets or other environment variables without redeploying.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/cli.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd secrets set GOOGLE_CLIENT_ID=<...> GOOGLE_CLIENT_SECRET=<...> --context=server\n```\n\n----------------------------------------\n\nTITLE: Accessing Google Auth User Data in TypeScript\nDESCRIPTION: Example of AuthUser object structure when a user has signed up with Google authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/entities/entities.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = {\n  // User data\n  id: 'cluqs9qyh00007cn73apj4hp7',\n  address: 'Some address',\n\n  // Auth methods specific data\n  identities: {\n    email: null,\n    google: {\n      id: '1117XXXX1301972049448',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Wasp Query (TypeScript)\nDESCRIPTION: Declares a query named `getTasks` within the `main.wasp` file for a TypeScript project. It specifies the implementation function (`getTasks`) imported from `@src/queries.ts` and links it to the `Task` entity for automatic cache invalidation and updates.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/05-queries.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\n// ...\n\nquery getTasks {\n  // Specifies where the implementation for the query function is.\n  // The path `@src/queries` resolves to `src/queries.ts`.\n  // No need to specify an extension.\n  fn: import { getTasks } from \"@src/queries\",\n  // Tell Wasp that this query reads from the `Task` entity. Wasp will\n  // automatically update the results of this query when tasks are modified.\n  entities: [Task]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using useAuth Hook in React Component\nDESCRIPTION: Shows how to use the useAuth hook provided by Wasp to access the user object and conditionally render content based on authentication status.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAuth, logout } from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\nimport Todo from '../Todo'\n\nexport function Main() {\n  const { data: user } = useAuth()\n\n  if (!user) {\n    return (\n      <span>\n        Please <Link to=\"/login\">login</Link> or{' '}\n        <Link to=\"/signup\">sign up</Link>.\n      </span>\n    )\n  } else {\n    return (\n      <>\n        <button onClick={logout}>Logout</button>\n        <Todo />\n      </>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Environment Variables in TypeScript\nDESCRIPTION: Shows how to access server-side environment variables using process.env in TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/env-vars.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(process.env.SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Behavior in Wasp\nDESCRIPTION: This snippet shows how to configure server behavior in a Wasp application using the 'server' field in the app declaration. It demonstrates setting up a setup function and a middleware config function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/server-config.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  server: {\n    setupFn: import { mySetupFunction } from \"@src/myServerSetupCode.js\",\n    middlewareConfigFn: import { myMiddlewareConfigFn } from \"@src/myServerSetupCode.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prisma Client in TypeScript\nDESCRIPTION: Shows how to directly interact with entities using Prisma Client in server-side TypeScript code. Creates a new task with description and completion status.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/entities.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prisma } from 'wasp/server'\n\nprisma.task.create({\n    description: \"Read the Entities doc\",\n    isDone: true // almost :)\n})\n```\n\n----------------------------------------\n\nTITLE: Using routes Object for Link Generation in TypeScript\nDESCRIPTION: Demonstrates how to use the routes object to generate links for different route types, including root routes and routes with parameters.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/links.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { routes } from 'wasp/client/router'\n\nconst linkToRoot = routes.RootRoute.build()\nconst linkToTask = routes.DetailRoute.build({ params: { id: 1 } })\n```\n\n----------------------------------------\n\nTITLE: Complete Wasp App Configuration with Auth and CRUD\nDESCRIPTION: This snippet shows a complete Wasp app configuration including auth setup with User and Task entities, route definitions, and page declarations. It demonstrates how to configure a todo application with username and password authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/crud.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp tasksCrudApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"Tasks Crud App\",\n\n  // We enabled auth and set the auth method to username and password\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n\nentity User {=psl\n  id       Int @id @default(autoincrement())\n  tasks    Task[]\npsl=}\n\n// We defined a Task entity on which we'll enable CRUD later on\nentity Task {=psl\n  id          Int @id @default(autoincrement())\n  description String\n  isDone      Boolean\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\npsl=}\n\n// Tasks app routes\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  component: import { MainPage } from \"@src/MainPage.jsx\",\n  authRequired: true,\n}\n\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { LoginPage } from \"@src/LoginPage.jsx\",\n}\n\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { SignupPage } from \"@src/SignupPage.jsx\",\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Worker Function in TypeScript\nDESCRIPTION: Implementation of the worker function 'foo' for the 'mySpecialJob' in TypeScript with type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/jobs.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MySpecialJob } from '@wasp/jobs/mySpecialJob'\nimport type { Task } from '@wasp/entities'\n\ntype Input = { name: string; }\ntype Output = { tasks: Task[]; }\n\nexport const foo: MySpecialJob<Input, Output> = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Server Logic in TypeScript\nDESCRIPTION: This TypeScript code defines the server-side WebSocket logic with type definitions for events and payloads. It provides full-stack type safety by defining interfaces for client-to-server and server-to-client events.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/web-sockets.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { WebSocketDefinition, WaspSocketData } from '@wasp/webSocket'\nimport { v4 as uuidv4 } from 'uuid'\n\nexport const webSocketFn: WebSocketFn = (io, context) => {\n  io.on('connection', (socket) => {\n    const username = socket.data.user?.email || socket.data.user?.username || 'unknown'\n    console.log('a user connected: ', username)\n\n    socket.on('chatMessage', async (msg) => {\n      console.log('message: ', msg)\n      io.emit('chatMessage', { id: uuidv4(), username, text: msg })\n      // You can also use your entities here:\n      // await context.entities.SomeEntity.create({ someField: msg })\n    })\n  })\n}\n\ntype WebSocketFn = WebSocketDefinition<\n  ClientToServerEvents,\n  ServerToClientEvents,\n  InterServerEvents,\n  SocketData\n>\n\ninterface ServerToClientEvents {\n  chatMessage: (msg: { id: string, username: string, text: string }) => void;\n}\n\ninterface ClientToServerEvents {\n  chatMessage: (msg: string) => void;\n}\n\ninterface InterServerEvents {}\n\ninterface SocketData extends WaspSocketData {}\n```\n\n----------------------------------------\n\nTITLE: Customizing Signup Form Fields with Render Function in React (TypeScript)\nDESCRIPTION: Mirroring the above, this example extends the SignupForm in a Wasp TypeScript React application using a render function. The function accesses the username input in the form state and renders a dynamic greeting if present, utilizing strongly typed form/state references. Dependencies and usage are identical to the JavaScript version, but in TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignupForm, FormItemGroup } from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={(form, state) => {\n        const username = form.watch('username')\n        return (\n          username && (\n            <FormItemGroup>\n              Hello there <strong>{username}</strong> 👋\n            </FormItemGroup>\n          )\n        )\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Default Wasp CRUD 'getAll' Operation Implementation (TypeScript)\nDESCRIPTION: This snippet presents the default TypeScript implementation for the `getAll` CRUD operation generated by Wasp. It uses the Prisma Client's `findMany` method on the `Task` entity to retrieve all records. As noted, Wasp implicitly handles authentication checks for non-public operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// ...\n\n// If the operation is not public, Wasp checks if an authenticated user\n// is making the request.\n\nreturn Task.findMany()\n```\n```\n\n----------------------------------------\n\nTITLE: Calling Wasp Actions on the Client (TypeScript)\nDESCRIPTION: Shows importing and invoking asynchronous Wasp Actions (`createTask`, `markTasAsDone`) on the client using TypeScript. Wasp automatically infers return values and type-checks payloads based on server-side definitions. Requires importing actions from `wasp/client/operations`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { createTask, markTasAsDone } from 'wasp/client/operations'\n\n// TypeScript automatically infers the return values and type-checks\n// the payloads.\nconst newTask = await createTask({ description: 'Keep learning TypeScript' })\nawait markTasAsDone({ id: 1 })\n```\n\n----------------------------------------\n\nTITLE: Custom Password Validation in JavaScript\nDESCRIPTION: Example of implementing custom password validation rules while creating a new user, including the option to skip default validations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst newUser = context.entities.User.create({\n  data: {\n    username: args.username,\n    password: args.password,\n  },\n  _waspSkipDefaultValidations: false,\n  _waspCustomValidations: [\n    {\n      validates: 'password',\n      message: 'password must contain an uppercase letter',\n      validator: (password) => /[A-Z]/.test(password),\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Global QueryClient - TypeScript (src\\/myClientSetupCode.ts)\nDESCRIPTION: Demonstrates configuration of react-query's QueryClient defaults in a TypeScript client setup function. Requires importing configureQueryClient from 'wasp/client/operations'. Provided object structure must match react-query's requirements. Placed inside an exported async function returning Promise<void>.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/client-config.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { configureQueryClient } from 'wasp/client/operations'\n\nexport default async function mySetupFunction(): Promise<void> {\n  // ... some setup\n  configureQueryClient({\n    defaultOptions: {\n      queries: {\n        staleTime: Infinity,\n      },\n    },\n  })\n  // ... some more setup\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Actions (TypeScript)\nDESCRIPTION: Shows how to handle errors in Actions using TypeScript. It demonstrates throwing an HttpError with a custom status code, message, and additional data, including type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateTask } from 'wasp/server/operations'\nimport { HttpError } from 'wasp/server'\n\nexport const createTask: CreateTask = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions in JavaScript (NodeJS)\nDESCRIPTION: This JavaScript snippet shows the implementation of the `createTask` and `markTaskAsDone` Actions defined in the Wasp file. It uses a simple in-memory array (`tasks`) to simulate a database. The `createTask` function takes `args` (containing a `description`), creates a new task object, adds it to the array, and returns the new task. The `markTaskAsDone` function takes `args` (containing a task `id`), finds the corresponding task, and updates its `isDone` status. These functions are exported from `src/actions.js` as specified in the Wasp declaration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js title=\"src/actions.js\"\n// our \"database\"\nlet nextId = 4\nconst tasks = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\n// You don't need to use the arguments if you don't need them\nexport const createTask = (args) => {\n  const newTask = {\n    id: nextId,\n    isDone: false,\n    description: args.description,\n  }\n  nextId += 1\n  tasks.push(newTask)\n  return newTask\n}\n\n// The 'args' object is something sent by the caller (most often from the client)\nexport const markTaskAsDone = (args) => {\n  const task = tasks.find((task) => task.id === args.id)\n  if (!task) {\n    // We'll show how to properly handle such errors later\n    return\n  }\n  task.isDone = true\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using getTasks Query in React Component (TypeScript)\nDESCRIPTION: This snippet shows how to use the getTasks query in a React component using TypeScript. It demonstrates full-stack type safety with proper type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/05-queries.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Task } from 'wasp/entities'\nimport { getTasks, useQuery } from 'wasp/client/operations'\n\nexport const MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n\nconst TaskView = ({ task }: { task: Task }) => {\n  return (\n    <div>\n      <input type=\"checkbox\" id={String(task.id)} checked={task.isDone} />\n      {task.description}\n    </div>\n  )\n}\n\nconst TasksList = ({ tasks }: { tasks: Task[] }) => {\n  if (!tasks?.length) return <div>No tasks</div>\n\n  return (\n    <div>\n      {tasks.map((task, idx) => (\n        <TaskView task={task} key={idx} />\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wasp Actions Using Entities (TypeScript)\nDESCRIPTION: Shows the TypeScript implementation for `createTask` and `markTaskAsDone` actions in `src/actions.ts`. It utilizes types imported from Wasp (`CreateTask`, `MarkTaskAsDone`, `Task`) for strong typing of arguments (`args`), context (`context`), and return values. Accesses the Prisma API via `context.entities.Task` to interact with the database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport { type CreateTask, type MarkTaskAsDone } from 'wasp/server/operations'\nimport { type Task } from 'wasp/entities'\n\n// The 'args' object is the payload sent by the caller (most often from the client)\nexport const createTask: CreateTask<Pick<Task, 'description'>, Task> = async (\n  args,\n  context\n) => {\n  const newTask = await context.entities.Task.create({\n    data: {\n      description: args.description,\n      isDone: false,\n    },\n  })\n  return newTask\n}\n\nexport const markTaskAsDone: MarkTaskAsDone<Pick<Task, 'id'>, void> = async (\n  args,\n  context\n) => {\n  await context.entities.Task.update({\n    where: { id: args.id },\n    data: { isDone: true },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Models with Prisma Schema\nDESCRIPTION: Prisma schema definition for User and Recipe models, establishing relationship between users and their recipes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/introduction/introduction.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          Int @id @default(autoincrement())\n  recipes     Recipe[]\n}\n\nmodel Recipe {\n  id          Int @id @default(autoincrement())\n  title       String\n  description String?\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Signup Fields Using Zod Library (JavaScript)\nDESCRIPTION: Uses the Zod validation library in a Wasp signup field definition to validate the 'address' field in JavaScript. Leverages schema validation to provide required and minimum length checks, throwing the first validation error as an exception. Dependencies are wasp/server/auth and zod. The function receives the client data object and returns valid field data or throws on failure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\nimport * as z from 'zod'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: (data) => {\n    const AddressSchema = z\n      .string({\n        required_error: 'Address is required',\n        invalid_type_error: 'Address must be a string',\n      })\n      .min(10, 'Address must be at least 10 characters long')\n    const result = AddressSchema.safeParse(data.address)\n    if (result.success === false) {\n      throw new Error(result.error.issues[0].message)\n    }\n    return result.data\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing SignupForm Component in TypeScript\nDESCRIPTION: TypeScript implementation of a customized SignupForm component with additional fields. This example shows how to add both declarative fields using objects and custom fields using render functions with type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  SignupForm,\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        /* The address field is defined using an object */\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        /* The phone number is defined using a render function */\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Validating userSignupFields for Signup (TypeScript)\nDESCRIPTION: Implements userSignupFields using the defineUserSignupFields helper from Wasp in TypeScript, adding and validating an 'address' field for user signup. The code checks that the given address is a string and meets minimum length requirements, throwing errors for invalid data. Requires wasp/server/auth and may extend with additional custom field validators. Accepts a data object, expects fields validated individually, and throws on error. Outputs only valid, sanitized field values.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring a Wasp Query (JavaScript)\nDESCRIPTION: Declares a query named `getTasks` within the `main.wasp` file for a JavaScript project. It specifies the implementation function (`getTasks`) imported from `@src/queries.js` and indicates that this query depends on the `Task` entity, enabling automatic updates.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/05-queries.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\n// ...\n\nquery getTasks {\n  // Specifies where the implementation for the query function is.\n  // The path `@src/queries` resolves to `src/queries.js`.\n  // No need to specify an extension.\n  fn: import { getTasks } from \"@src/queries\",\n  // Tell Wasp that this query reads from the `Task` entity. Wasp will\n  // automatically update the results of this query when tasks are modified.\n  entities: [Task]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using WebSockets in React Component (JavaScript)\nDESCRIPTION: This JavaScript React component demonstrates how to use WebSockets on the client-side using the useSocket and useSocketListener hooks provided by Wasp. It implements a simple chat interface with real-time message updates.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/web-sockets.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react'\nimport {\n  useSocket,\n  useSocketListener,\n} from '@wasp/webSocket'\n\nexport const ChatPage = () => {\n  const [messageText, setMessageText] = useState('')\n  const [messages, setMessages] = useState([])\n  const { socket, isConnected } = useSocket()\n\n  useSocketListener('chatMessage', logMessage)\n\n  function logMessage(msg) {\n    setMessages((priorMessages) => [msg, ...priorMessages])\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    socket.emit('chatMessage', messageText)\n    setMessageText('')\n  }\n\n  const messageList = messages.map((msg) => (\n    <li key={msg.id}>\n      <em>{msg.username}</em>: {msg.text}\n    </li>\n  ))\n  const connectionIcon = isConnected ? '🟢' : '🔴'\n\n  return (\n    <>\n      <h2>Chat {connectionIcon}</h2>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <div>\n            <div>\n              <input\n                type=\"text\"\n                value={messageText}\n                onChange={(e) => setMessageText(e.target.value)}\n              />\n            </div>\n            <div>\n              <button type=\"submit\">Submit</button>\n            </div>\n          </div>\n        </form>\n        <ul>{messageList}</ul>\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Reset in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement password reset functionality on the client-side using TypeScript in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/email.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { requestPasswordReset } from 'wasp/client/auth'\n...\nawait requestPasswordReset({ email });\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { resetPassword } from 'wasp/client/auth'\n...\nawait resetPassword({ password, token })\n```\n\n----------------------------------------\n\nTITLE: Registering Queries and Actions (Wasp DSL)\nDESCRIPTION: This Wasp snippet registers a type-safe query and action in main.wasp. Queries facilitate cache-invalidation and data retrieval, whereas actions handle mutations or side effects. Each operation references its implementation via an import statement from the TypeScript backend. The entities array ensures proper type generation and security handling. No runtime dependencies except standard Wasp/Prisma/Nod.js toolchain; input is operation metadata, output is integrated full-stack invocation capability.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/introduction/introduction.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\n// Queries have automatic cache invalidation and are type-safe.\nquery getRecipes {\n  fn: import { getRecipes } from \"@src/recipe/operations.ts\",\n  entities: [Recipe],\n}\n\n// Actions are type-safe and can be used to perform side-effects.\naction addRecipe {\n  fn: import { addRecipe } from \"@src/recipe/operations.ts\",\n  entities: [Recipe],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint in Wasp (TypeScript)\nDESCRIPTION: Example of declaring an API endpoint in Wasp using TypeScript. Shows configuration of route, authentication, entity access, and middleware setup for a GET endpoint at /foo/bar.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/apis.md#2025-04-22_snippet_14\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar {\n  fn: import { fooBar } from \"@server/apis.js\",\n  httpRoute: (GET, \"/foo/bar\"),\n  entities: [Task],\n  auth: true,\n  middlewareConfigFn: import { apiMiddleware } from \"@server/apis.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client in main.wasp - JavaScript (Wasp)\nDESCRIPTION: This snippet shows how to configure the client section of the Wasp app declaration using JavaScript modules. It imports a root React component and an async setup function, which are used by Wasp to initialize the client-side application. Dependencies include Wasp, a valid Root React component at '@src/Root.jsx', and a setup function at '@src/myClientSetupCode.js'. Inputs are paths to the respective modules; outputs are an app with the specified client configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/client-config.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.jsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Actions (JavaScript)\nDESCRIPTION: This snippet shows how to handle errors in Actions using HttpError in JavaScript. By default, all exceptions are hidden from the client, but HttpError allows controlled exposure of error details.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const createTask = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Queries in Wasp - Wasp\nDESCRIPTION: Declares two queries, `getAllTasks` and `getFilteredTasks`, in a Wasp configuration file. Each query specifies a function implementation to import from a separate module. These declarations instruct Wasp to generate necessary server and client bindings. No dependencies aside from Wasp are required. Each query references an implementation function but does not define its logic at this stage.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/queries.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\\n\\nquery getAllTasks {\\n  fn: import { getAllTasks } from \"@src/queries.js\"\\n}\\n\\nquery getFilteredTasks {\\n  fn: import { getFilteredTasks } from \"@src/queries.js\"\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Create Task Operation in JavaScript\nDESCRIPTION: This JavaScript code implements a custom create operation for tasks, ensuring that the task is connected to the authenticated user creating it.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/crud.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const createTask = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401, 'User not authenticated.')\n  }\n\n  const { description, isDone } = args\n  const { Task } = context.entities\n\n  return await Task.create({\n    data: {\n      description,\n      isDone,\n      // highlight-start\n      // Connect the task to the user that is creating it\n      user: {\n        connect: {\n          id: context.user.id,\n        },\n      },\n      // highlight-end\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Server Environment Validation in TypeScript\nDESCRIPTION: TypeScript implementation of server-side environment variable validation using Zod. The defineEnvValidationSchema function ensures the schema is properly type-checked.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/env-vars.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as z from 'zod'\n\nimport { defineEnvValidationSchema } from 'wasp/env'\n\nexport const envValidationSchema = defineEnvValidationSchema(\n  z.object({\n    STRIPE_API_KEY: z.string({\n      required_error: 'STRIPE_API_KEY is required.',\n    }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Using useAction for Optimistic Updates in a React Component (TypeScript)\nDESCRIPTION: Shows a TypeScript implementation of an optimistically-updating React component using Wasp's useAction hook, with full typing for the Action's payload and Query cache shape. This improves reliability by leveraging OptimisticUpdateDefinition for type safety. Requires Task and TaskPayload types, Wasp client operations, and properly declared Action.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/actions.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport {\n  useQuery,\n  useAction,\n  type OptimisticUpdateDefinition,\n  getTask,\n  markTaskAsDone,\n} from 'wasp/client/operations'\n\ntype TaskPayload = Pick<Task, \"id\">;\n\nconst TaskPage = ({ id }: { id: number }) => {\n  const { data: task } = useQuery(getTask, { id });\n  // highlight-start\n  const markTaskAsDoneOptimistically = useAction(markTaskAsDone, {\n    optimisticUpdates: [\n      {\n        getQuerySpecifier: ({ id }) => [getTask, { id }],\n        updateQuery: (_payload, oldData) => ({ ...oldData, isDone: true }),\n      } as OptimisticUpdateDefinition<TaskPayload, Task>,\n    ],\n  });\n  // highlight-end\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>;\n  }\n\n  const { description, isDone } = task;\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? \"Yes\" : \"No\"}\n      </p>\n      {isDone || (\n        <button onClick={() => markTaskAsDoneOptimistically({ id })}>\n          Mark as done.\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default TaskPage;\n```\n\n----------------------------------------\n\nTITLE: Implementing User Signup Fields Validation in TypeScript\nDESCRIPTION: TypeScript implementation of the userSignupFields object that defines validation logic for extra signup fields. This example validates the address field by checking its type and length.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Tasks with User Context in TypeScript\nDESCRIPTION: TypeScript version of task creation with proper type definitions and user context handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Task } from 'wasp/entities'\nimport { type CreateTask } from 'wasp/server/operations'\nimport { HttpError } from 'wasp/server'\n\ntype CreateTaskPayload = Pick<Task, 'description'>\n\nexport const createTask: CreateTask<CreateTaskPayload, Task> = async (\n  args,\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(403)\n  }\n\n  const Task = context.entities.Task\n  return Task.create({\n    data: {\n      description: args.description,\n      user: {\n        connect: { id: context.user.id },\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Wasp Job with PgBoss Executor (JavaScript Context)\nDESCRIPTION: Defines a Wasp job named `mySpecialJob` within the `main.wasp` file, configured to use the `PgBoss` executor. It specifies the worker function `foo` imported from `@src/workers/bar`, sets default executor options (e.g., `retryLimit: 1`), defines a cron schedule (`*/5 * * * *`) with specific arguments (`{ \"foo\": \"bar\" }`) and schedule-level executor options (`retryLimit: 0`), and grants access to the `Task` entity. This example is presented within the JavaScript context tab.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/jobs.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\njob mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@src/workers/bar\",\n    executorOptions: {\n      pgBoss: {=json { \"retryLimit\": 1 } json=}\n    }\n  },\n  schedule: {\n    cron: \"*/5 * * * *\",\n    args: {=json { \"foo\": \"bar\" } json=},\n    executorOptions: {\n      pgBoss: {=json { \"retryLimit\": 0 } json=}\n    }\n  },\n  entities: [Task],\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring a Scheduled Job with PgBoss - Wasp\nDESCRIPTION: Defines a job named 'mySpecialJob' using the PgBoss executor in a Wasp project. It specifies handler function import, executor options, scheduling via cron, and entities to be used inside the job. Requires PgBoss as a dependency (using PostgreSQL as the database provider) and a worker function exported from @src/workers/bar. Inputs are passed as job arguments, and schedules are specified by a cron format string and optional execution options.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/jobs.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\njob mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@src/workers/bar\",\n    executorOptions: {\n      pgBoss: {=json { \"retryLimit\": 1 } json=}\n    }\n  },\n  schedule: {\n    cron: \"*/5 * * * *\",\n    args: {=json { \"foo\": \"bar\" } json=},\n    executorOptions: {\n      pgBoss: {=json { \"retryLimit\": 0 } json=}\n    }\n  },\n  entities: [Task],\n}\n```\n\n----------------------------------------\n\nTITLE: Including User Data with Tasks in JavaScript\nDESCRIPTION: Example of how to include full user data, including auth and identities, when fetching tasks in a Wasp application using Prisma queries.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/entities.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getAllTasks = async (args, context) => {\n  return context.entities.Task.findMany({\n    orderBy: { id: 'desc' },\n    select: {\n      id: true,\n      title: true,\n      user: {\n        include: {\n          auth: {\n            include: {\n              identities: {\n                select: {\n                  providerName: true,\n                  providerUserId: true,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Default Wasp CRUD 'getAll' Operation Implementation (JavaScript)\nDESCRIPTION: This snippet shows the default JavaScript code generated by Wasp for the `getAll` CRUD operation. It uses the Prisma Client's `findMany` method on the `Task` entity to retrieve all records. The comment notes that if the operation is not marked as public, Wasp automatically adds a check to ensure an authenticated user is making the request.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// ...\n\n// If the operation is not public, Wasp checks if an authenticated user\n// is making the request.\n\nreturn Task.findMany()\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring a Complex CRUD in Wasp\nDESCRIPTION: Example of a complex CRUD declaration for a Task entity with various operations and configuration options. The declaration includes getAll, get, create, and update operations with options for public access and custom implementations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/crud.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\ncrud Tasks { // crud name here is \"Tasks\"\n  entity: Task,\n  operations: {\n    getAll: {\n      isPublic: true, // optional, defaults to false\n    },\n    get: {},\n    create: {\n      overrideFn: import { createTask } from \"@src/tasks.js\", // optional\n    },\n    update: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Root Layout Component - TypeScript (Wasp & React TSX)\nDESCRIPTION: Illustrates using a TypeScript root component for layout in a Wasp app, with proper typing for children. The Wasp file imports a TSX root, while the TSX file defines the component interface. Requires the file at '@src/Root.tsx'. Inputs are typed children, output is the layout structure with header and footer surrounding content.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/client-config.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.tsx\",\n  }\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Root({ children }: { children: React.ReactNode }) {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      {children}\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions in JavaScript\nDESCRIPTION: This code snippet shows the implementation of two Actions ('createTask' and 'markTaskAsDone') in JavaScript. It includes a simple in-memory database and demonstrates how to handle Action arguments and return values.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/actions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet nextId = 4\nconst tasks = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\nexport const createTask = (args) => {\n  const newTask = {\n    id: nextId,\n    isDone: false,\n    description: args.description,\n  }\n  nextId += 1\n  tasks.push(newTask)\n  return newTask\n}\n\nexport const markTaskAsDone = (args) => {\n  const task = tasks.find((task) => task.id === args.id)\n  if (!task) {\n    return\n  }\n  task.isDone = true\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Auth State Management\nDESCRIPTION: React component demonstrating how to handle auth state and redirect users based on signup completion status.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAuth } from 'wasp/client/auth'\nimport { Redirect } from 'react-router-dom'\n\nexport function HomePage() {\n  const { data: user } = useAuth()\n\n  if (user.isSignupComplete === false) {\n    return <Redirect to=\"/edit-user-details\" />\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Default Middleware Configuration in TypeScript\nDESCRIPTION: Shows the default global middleware configuration in TypeScript, with type definitions for the middleware configuration and configuration function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/middleware-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MiddlewareConfig = Map<string, express.RequestHandler>\n\n// Used in the examples below 👇\nexport type MiddlewareConfigFn = (middlewareConfig: MiddlewareConfig) => MiddlewareConfig\n\nconst defaultGlobalMiddleware: MiddlewareConfig = new Map([\n  ['helmet', helmet()],\n  ['cors', cors({ origin: config.allowedCORSOrigins })],\n  ['logger', logger('dev')],\n  ['express.json', express.json()],\n  ['express.urlencoded', express.urlencoded({ extended: false })],\n  ['cookieParser', cookieParser()]\n])\n```\n\n----------------------------------------\n\nTITLE: Accessing Entities in TypeScript API Implementation\nDESCRIPTION: Shows how to access entity operations from the context object in a TypeScript API implementation with proper typing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/apis.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FooBar } from \"wasp/server/api\";\n\nexport const fooBar: FooBar = (req, res, context) => {\n  res.json({ count: await context.entities.Task.count() });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication in Wasp\nDESCRIPTION: This snippet demonstrates how to configure email authentication options in the main.wasp file, including user signup fields, email verification, and password reset settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/email.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  title: \"My app\",\n  // ...\n\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        userSignupFields: import { userSignupFields } from \"@src/auth.js\",\n        fromField: {\n          name: \"My App\",\n          email: \"hello@itsme.com\"\n        },\n        emailVerification: {\n          clientRoute: EmailVerificationRoute,\n          getEmailContentFn: import { getVerificationEmailContent } from \"@src/auth/email.js\",\n        },\n        passwordReset: {\n          clientRoute: PasswordResetRoute,\n          getEmailContentFn: import { getPasswordResetEmailContent } from \"@src/auth/email.js\",\n        },\n      },\n    },\n    onAuthFailedRedirectTo: \"/someRoute\"\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication in Wasp\nDESCRIPTION: This snippet shows how to enable and configure email authentication in the main.wasp file. It includes setting up the user entity, specifying email settings, and configuring authentication redirects.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/email.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        fromField: {\n          name: \"My App Postman\",\n          email: \"hello@itsme.com\"\n        },\n        emailVerification: {\n          clientRoute: EmailVerificationRoute,\n        },\n        passwordReset: {\n          clientRoute: PasswordResetRoute,\n        },\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n    onAuthSucceededRedirectTo: \"/\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Models in Wasp using Prisma Schema Language\nDESCRIPTION: This code defines the data models for Users and Recipes using Prisma Schema Language (PSL). It establishes a relationship between users and recipes, where a user can have multiple recipes and each recipe belongs to a user.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/introduction/introduction.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl  // Data models are defined using Prisma Schema Language.\n  id          Int @id @default(autoincrement())\n  recipes     Recipe[]\npsl=}\n\nentity Recipe {=psl\n  id          Int @id @default(autoincrement())\n  title       String\n  description String?\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Wasp Actions with HttpError (TypeScript)\nDESCRIPTION: Shows throwing a custom `HttpError` within a TypeScript Wasp Action implementation. This enables sending detailed error information (status code, message, data) to the client. The example includes type annotation (`CreateTask`) for the action function, enhancing type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport { type CreateTask } from 'wasp/server/operations'\nimport { HttpError } from 'wasp/server'\n\nexport const createTask: CreateTask = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Schema\nDESCRIPTION: Prisma schema definition for the User entity with basic ID field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/email.md#2025-04-22_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  // Add your own fields below\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Query Operation in Wasp\nDESCRIPTION: Wasp configuration file snippet defining a getTaskInfo query operation that imports its implementation from queries file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/general/typescript.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\nquery getTaskInfo {\n  fn: import { getTaskInfo } from \"@src/queries\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authenticated Task Actions in JavaScript/TypeScript\nDESCRIPTION: Action implementations for creating and updating tasks with authentication checks. Includes user-specific task creation and updates with proper error handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/07-auth.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const createTask = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.create({\n    data: {\n      description: args.description,\n      user: { connect: { id: context.user.id } },\n    },\n  })\n}\n\nexport const updateTask = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.updateMany({\n    where: { id: args.id, user: { id: context.user.id } },\n    data: { isDone: args.isDone },\n  })\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from 'wasp/entities'\nimport { HttpError } from 'wasp/server'\nimport { CreateTask, UpdateTask } from 'wasp/server/operations'\n\ntype CreateTaskPayload = Pick<Task, 'description'>\n\nexport const createTask: CreateTask<CreateTaskPayload, Task> = async (\n  args,\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.create({\n    data: {\n      description: args.description,\n      user: { connect: { id: context.user.id } },\n    },\n  })\n}\n\ntype UpdateTaskPayload = Pick<Task, 'id' | 'isDone'>\n\nexport const updateTask: UpdateTask<\n  UpdateTaskPayload,\n  { count: number }\n> = async ({ id, isDone }, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.updateMany({\n    where: { id, user: { id: context.user.id } },\n    data: { isDone },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Main Wasp Configuration File (JavaScript)\nDESCRIPTION: Shows the default main.wasp configuration file for a JavaScript-based Wasp project, defining the app settings, routes, and page components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/02-project-structure.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"^0.11.6\" // Pins the version of Wasp to use.\n  },\n  title: \"Todo app\" // Used as the browser tab title. Note that all strings in Wasp are double quoted!\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\n\npage MainPage {\n  // We specify that the React implementation of the page is the default export\n  // of `src/client/MainPage.jsx`. This statement uses standard JS import syntax.\n  // Use `@client` to reference files inside the `src/client` folder.\n  component: import Main from \"@client/MainPage.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Wasp Action in main.wasp\nDESCRIPTION: Declares a Wasp action named `createTask`. It specifies the implementation function (`createTask` imported from `@src/actions`) and the Prisma entities it interacts with (`Task`). This declaration makes the action available for use throughout the Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/06-actions.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\naction createTask {\n  fn: import { createTask } from \"@src/actions\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Using the routes Object in TypeScript\nDESCRIPTION: Demonstrates how to use the routes object from @wasp/router to programmatically generate links with type safety in TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/links.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { routes } from '@wasp/router'\n\nconst linkToTask = routes.TaskRoute.build({ params: { id: 1 } })\n```\n\n----------------------------------------\n\nTITLE: Mocking Wasp API Calls in Client Tests (JavaScript)\nDESCRIPTION: Demonstrates using the `mockApi` helper (obtained from `mockServer`) to mock HTTP requests made through Wasp's API utilities. It takes an object specifying the HTTP method and path, and the JSON response data. This allows testing components that interact with custom API endpoints defined in the Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/testing.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { HttpMethod } from \"wasp/client\";\n\nmockApi({ method: HttpMethod.Get, path: \"/foor/bar\" }, { res: \"hello\" });\n```\n\n----------------------------------------\n\nTITLE: Implementing a Server Query in TypeScript for Wasp\nDESCRIPTION: This TypeScript snippet implements the `getRecipes` query declared in the Wasp configuration. It uses types generated by Wasp (`GetRecipes`, `Recipe`) for full-stack type safety. The function accesses the Prisma client via the `context` object to fetch recipes associated with the currently authenticated user (`context.user.id`).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/introduction/introduction.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/recipe/operations.ts\"\n// Wasp generates the types for you.\nimport { type GetRecipes } from \"wasp/server/operations\";\nimport { type Recipe } from \"wasp/entities\";\n\nexport const getRecipes: GetRecipes<{}, Recipe[]> = async (_args, context) => {\n  return context.entities.Recipe.findMany( // Prisma query\n    { where: { user: { id: context.user.id } } }\n  );\n};\n\nexport const addRecipe ...\n```\n```\n\n----------------------------------------\n\nTITLE: Registering Environment Validation Schemas in Wasp\nDESCRIPTION: Shows how to register the environment validation schemas in the Wasp configuration file. The client and server schemas are imported from the src/env file and specified in the app configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/env-vars.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  ...\n  client: {\n    envValidationSchema: import { clientEnvValidationSchema } from \"@src/env\",\n  },\n  server: {\n    envValidationSchema: import { serverEnvValidationSchema } from \"@src/env\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Setup Function in JavaScript\nDESCRIPTION: Shows an example JavaScript implementation (`src/myClientSetupCode.js`) for the client setup function, referenced by `setupFn` in `main.wasp`. This `async` function runs before the Wasp client application renders, allowing for custom initialization tasks (e.g., setting up timers, analytics). Wasp awaits its completion; it takes no arguments, and its return value is ignored.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/client-config.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n```js title=\"src/myClientSetupCode.js\"\nexport default async function mySetupFunction() {\n  // Run some code\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Queries in Wasp\nDESCRIPTION: Shows how to declare a query in Wasp syntax, specifying the implementation function and related entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/queries.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\nquery getFoo {\n    fn: import { getFoo } from \"@src/queries.js\"\n    entities: [Foo]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Main App Declaration in Wasp (TypeScript)\nDESCRIPTION: Shows the default main.wasp file for a TypeScript Wasp project. Similar to the JavaScript version but references a .tsx file instead of .jsx for component implementation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/02-project-structure.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"{latestWaspVersion}\" // Pins the version of Wasp to use.\n  },\n  title: \"TodoApp\" // Used as the browser tab title. Note that all strings in Wasp are double quoted!\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  // We specify that the React implementation of the page is exported from\n  // `src/MainPage.tsx`. This statement uses standard JS import syntax.\n  // Use `@src` to reference files inside the `src` folder.\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Colors to LoginForm in JavaScript/JSX\nDESCRIPTION: Demonstrates importing the `authAppearance` object from `./appearance` and applying it to the `LoginForm` component (imported from `wasp/client/auth`) using the `appearance` prop in a React/JSX component (`src/LoginPage.jsx`).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/ui.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"src/LoginPage.jsx\"\nimport { LoginForm } from 'wasp/client/auth'\nimport { authAppearance } from './appearance'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass the appearance object to the form\n      appearance={authAppearance}\n    />\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Password Migration Route and Page - Wasp - wasp (JavaScript/TypeScript)\nDESCRIPTION: Defines a Wasp route and page for '/migrate-password', connecting the URL path to a custom MigratePassword component. This lets users access a UI to migrate their password, linked to frontend implementation (either in JSX or TSX). Used in both JS and TS projects.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_17\n\nLANGUAGE: wasp\nCODE:\n```\nroute MigratePasswordRoute { path: \"/migrate-password\", to: MigratePassword }\npage MigratePassword {\n  component: import { MigratePasswordPage } from \"@src/pages/MigratePassword\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Route in TypeScript\nDESCRIPTION: Example of adding a custom route using the setup function in TypeScript with proper type definitions\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/server-config.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ServerSetupFn } from 'wasp/server'\nimport { Application } from 'express'\n\nexport const mySetupFunction: ServerSetupFn = async ({ app }) => {\n  addCustomRoute(app)\n}\n\nfunction addCustomRoute(app: Application) {\n  app.get('/customRoute', (_req, res) => {\n    res.send('I am a custom route')\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Wasp Application (TypeScript)\nDESCRIPTION: TypeScript version of the Wasp authentication configuration, demonstrating how to set up user entity, authentication methods, and redirect paths within a Wasp app definition.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/overview.md#2025-04-22_snippet_15\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  //...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {}, // use this or email, not both\n      email: {}, // use this or usernameAndPassword, not both\n      google: {},\n      gitHub: {},\n    },\n    onAuthFailedRedirectTo: \"/someRoute\",\n  }\n}\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Client-Side Action Usage in JavaScript\nDESCRIPTION: Example showing how to import and invoke Actions from the client side in JavaScript. Demonstrates basic Action calls for creating and updating tasks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/actions.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTask, markTaskAsDone } from 'wasp/client/operations'\n\n// ...\n\nconst newTask = await createTask({ description: 'Learn TypeScript' })\nawait markTaskAsDone({ id: 1 })\n```\n\n----------------------------------------\n\nTITLE: Refreshing Google OAuth Access Token After Login (TypeScript) - ts\nDESCRIPTION: TypeScript equivalent of refreshing the Google OAuth access token using Wasp's 'google.oAuthClient.refreshAccessToken'. Triggered in the onAfterLogin hook and properly typed via 'OnAfterLoginHook'. Relies on availability of a valid refresh token and imports both the OAuth client object and types from 'wasp/server/auth'.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nimport type { OnAfterLoginHook } from 'wasp/server/auth'\nimport { google } from 'wasp/server/auth'\n\nexport const onAfterLogin: OnAfterLoginHook = async ({ oauth }) => {\n  if (oauth.provider === 'google' && oauth.tokens.refreshToken !== null) {\n    const newTokens = await google.oAuthClient.refreshAccessToken(\n      oauth.tokens.refreshToken\n    )\n    log('new tokens', newTokens)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Task Page with CRUD Operations\nDESCRIPTION: Example of a React component implementing task management functionality using Wasp's generated CRUD operations. Includes task listing and creation with loading states.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/crud.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tasks } from 'wasp/client/crud'\nimport { useState } from 'react'\n\nexport const MainPage = () => {\n  const { data: tasks, isLoading, error } = Tasks.getAll.useQuery()\n  const createTask = Tasks.create.useAction()\n  const [taskDescription, setTaskDescription] = useState('')\n\n  function handleCreateTask() {\n    createTask({ description: taskDescription, isDone: false })\n    setTaskDescription('')\n  }\n\n  if (isLoading) return <div>Loading...</div>\n  if (error) return <div>Error: {error.message}</div>\n  return (\n    <div\n      style={{\n        fontSize: '1.5rem',\n        display: 'grid',\n        placeContent: 'center',\n        height: '100vh',\n      }}\n    >\n      <div>\n        <input\n          value={taskDescription}\n          onChange={(e) => setTaskDescription(e.target.value)}\n        />\n        <button onClick={handleCreateTask}>Create task</button>\n      </div>\n      <ul>\n        {tasks.map((task) => (\n          <li key={task.id}>{task.description}</li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Per-Path Middleware in Wasp and TypeScript\nDESCRIPTION: This example demonstrates how to customize middleware for all API routes under a common path in a Wasp application using TypeScript. It shows adding custom middleware to a specific API namespace with proper type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/middleware-config.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\napiNamespace fooBar {\n  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from \"@src/apis\",\n  path: \"/foo/bar\"\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { type MiddlewareConfigFn } from 'wasp/server'\n\nexport const fooBarNamespaceMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {\n  const customMiddleware: express.RequestHandler = (_req, _res, next) => {\n    console.log('fooBarNamespaceMiddlewareFn: custom middleware')\n    next()\n  }\n\n  middlewareConfig.set('custom.middleware', customMiddleware)\n\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting a Page with Auth Required in Wasp (JavaScript)\nDESCRIPTION: Example of how to protect a page by setting the authRequired property to true, which restricts access to authenticated users only. Unauthenticated users are redirected to the route defined in app.auth.onAuthFailedRedirectTo.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\npage MainPage {\n  component: import Main from \"@src/pages/Main\",\n  authRequired: true\n}\n```\n\n----------------------------------------\n\nTITLE: External Auth Entity Configuration in JavaScript\nDESCRIPTION: Example of configuring external authentication entities in Wasp, showing the relationship between User and SocialLogin entities for social authentication methods.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_20\n\nLANGUAGE: wasp\nCODE:\n```\n//...\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n//...\n\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    //...\n    externalAuthAssociations  SocialLogin[]\npsl=}\n\nentity SocialLogin {=psl\n  id          Int       @id @default(autoincrement())\n  provider    String\n  providerId  String\n  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId      Int\n  createdAt   DateTime  @default(now())\n  @@unique([provider, providerId, userId])\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page Component (React, JavaScript)\nDESCRIPTION: Creates a login page React component using JavaScript. Incorporates Wasp's built-in LoginForm and provides a link to the signup page for new users. Requires 'react-router-dom' for routing and 'wasp/client/auth' for authentication UI. Expects no props, displays login form, outputs navigation for sign up.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/07-auth.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\\nimport { LoginForm } from 'wasp/client/auth'\\n\\nexport const LoginPage = () => {\\n  return (\\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\\n      <LoginForm />\\n      <br />\\n      <span>\\n        I don't have an account yet (<Link to=\"/signup\">go to signup</Link>).\\n      </span>\\n    </div>\\n  )\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Updating User Entity for Social Login in Wasp (JavaScript)\nDESCRIPTION: This Wasp code snippet shows how to update the User entity to include the externalAuthAssociations field, which is necessary for implementing social login in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/overview.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    //...\n    externalAuthAssociations  SocialLogin[]\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Direct Prisma Client Usage in JavaScript\nDESCRIPTION: Shows how to directly interact with entities using Prisma Client in server-side JavaScript code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/entities.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { prisma } from 'wasp/server'\n\nprisma.task.create({\n    description: \"Read the Entities doc\",\n    isDone: true // almost :)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing CRUD Operations in React Component (TypeScript)\nDESCRIPTION: This TypeScript version of the React component demonstrates using Wasp's generated CRUD operations for managing tasks, showcasing full-stack type safety and automatic payload type inference.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/crud.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tasks } from 'wasp/client/crud'\nimport { useState } from 'react'\n\nexport const MainPage = () => {\n  const { data: tasks, isLoading, error } = Tasks.getAll.useQuery()\n  const createTask = Tasks.create.useAction()\n  const [taskDescription, setTaskDescription] = useState('')\n\n  function handleCreateTask() {\n    createTask({ description: taskDescription, isDone: false })\n    setTaskDescription('')\n  }\n\n  if (isLoading) return <div>Loading...</div>\n  if (error) return <div>Error: {error.message}</div>\n  return (\n    <div\n      style={{\n        fontSize: '1.5rem',\n        display: 'grid',\n        placeContent: 'center',\n        height: '100vh',\n      }}\n    >\n      <div>\n        <input\n          value={taskDescription}\n          onChange={(e) => setTaskDescription(e.target.value)}\n        />\n        <button onClick={handleCreateTask}>Create task</button>\n      </div>\n      <ul>\n        {tasks.map((task) => (\n          <li key={task.id}>{task.description}</li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Entity for Auth Connections - Wasp Language\nDESCRIPTION: Establishes the internal Auth entity to connect business logic users to authentication credentials, sessions, and identities. This is managed by Wasp but can be referenced when implementing custom signup or login flows. Dependencies: Wasp/PSL entity modeling. Key parameters: UUID id, user relation, arrays of identities and sessions. Inputs/Outputs: not directly handled by the developer, serves as backend support for user authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/entities.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\nentity Auth {=psl\\n  id         String         @id @default(uuid())\\n  userId     Int?           @unique\\n  // Wasp injects this relation on the User entity as well\\n  user       User?          @relation(fields: [userId], references: [id], onDelete: Cascade) \\n  identities AuthIdentity[]\\n  sessions   Session[]\\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Defining User-Task Relation in Prisma (Prisma)\nDESCRIPTION: Extends the schema to establish a one-to-many relationship between User and Task, representing that each user can own multiple tasks. 'tasks' is an array on User; 'user' and optional 'userId' are introduced on Task to allow for tasks unassigned to a user during migration. Requires follow-up migration command after editing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/07-auth.md#2025-04-22_snippet_13\n\nLANGUAGE: prisma\nCODE:\n```\n// ...\\n\\nmodel User {\\n  id    Int    @id @default(autoincrement())\\n  // highlight-next-line\\n  tasks Task[]\\n}\\n\\nmodel Task {\\n  id          Int     @id @default(autoincrement())\\n  description String\\n  isDone      Boolean @default(false)\\n  // highlight-next-line\\n  user        User?   @relation(fields: [userId], references: [id])\\n  // highlight-next-line\\n  userId      Int?\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Type-Safe Job Function in TypeScript\nDESCRIPTION: Implementation of a job function in TypeScript with type definitions for input and output. It uses the generated type from Wasp for type-safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/jobs.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type MySpecialJob } from 'wasp/server/jobs'\n\ntype Input = { name: string; }\ntype Output = { tasks: Task[]; }\n\nexport const foo: MySpecialJob<Input, Output> = async (args, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Middleware Configuration in TypeScript\nDESCRIPTION: Shows the TypeScript implementation of middleware configuration function with proper typing that can be used to enable CORS for API endpoints.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/apis.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MiddlewareConfigFn } from \"wasp/server\";\nexport const apiMiddleware: MiddlewareConfigFn = (config) => {\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Main Wasp Configuration File (TypeScript)\nDESCRIPTION: Shows the default main.wasp configuration file for a TypeScript-based Wasp project, defining the app settings, routes, and page components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/02-project-structure.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"^0.11.6\" // Pins the version of Wasp to use.\n  },\n  title: \"Todo app\" // Used as the browser tab title. Note that all strings in Wasp are double quoted!\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\n\npage MainPage {\n  // We specify that the React implementation of the page is the default export\n  // of `src/client/MainPage.tsx`. This statement uses standard JS import syntax.\n  // Use `@client` to reference files inside the `src/client` folder.\n  component: import Main from \"@client/MainPage.tsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with useAction in React Component (TypeScript)\nDESCRIPTION: TypeScript version of the TaskPage component implementing optimistic updates. Includes proper type definitions and type checking for the task payload and update definition.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react'\nimport {\n  useQuery,\n  useAction,\n  type OptimisticUpdateDefinition,\n  getTask,\n  markTaskAsDone,\n} from 'wasp/client/operations'\n\ntype TaskPayload = Pick<Task, \"id\">;\n\nconst TaskPage = ({ id }: { id: number }) => {\n  const { data: task } = useQuery(getTask, { id });\n  const markTaskAsDoneOptimistically = useAction(markTaskAsDone, {\n    optimisticUpdates: [\n      {\n        getQuerySpecifier: ({ id }) => [getTask, { id }],\n        updateQuery: (_payload, oldData) => ({ ...oldData, isDone: true }),\n      } as OptimisticUpdateDefinition<TaskPayload, Task>,\n    ],\n  });\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>;\n  }\n\n  const { description, isDone } = task;\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? \"Yes\" : \"No\"}\n      </p>\n      {isDone || (\n        <button onClick={() => markTaskAsDoneOptimistically({ id })}>\n          Mark as done.\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default TaskPage;\n```\n\n----------------------------------------\n\nTITLE: Path-Based Middleware Configuration in Wasp - TypeScript\nDESCRIPTION: Example of configuring middleware for a specific path prefix in a Wasp application using TypeScript. Shows how to set up middleware for all routes under a common path.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/middleware-config.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\napiNamespace fooBar {\n  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from \"@src/apis\",\n  path: \"/foo/bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dummy Email Sender in Wasp\nDESCRIPTION: Configures the email sending mechanism within the `main.wasp` file. This snippet sets the `emailSender` property within the `app` declaration to use the `Dummy` provider. The `Dummy` provider logs emails to the console instead of actually sending them, which is useful for development and testing purposes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/email.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napp myApp {\n  // ...\n  // 7. Set up the email sender\n  emailSender: {\n    provider: Dummy,\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Complete Wasp App Configuration Reference\nDESCRIPTION: Full reference example showing all possible configuration options including auth, client, server, database, email, and WebSocket settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/customizing-app.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"ToDo App\",\n  head: [\n    \"<link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\\\" />\"\n  ],\n  auth: {\n    // ...\n  },\n  client: {\n    // ...\n  },\n  server: {\n    // ...\n  },\n  db: {\n    // ...\n  },\n  emailSender: {\n    // ...\n  },\n  webSocket: {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Wasp Queries from Client (TypeScript)\nDESCRIPTION: Demonstrates how to import and call defined Wasp queries directly from client-side TypeScript code. Queries are imported from `wasp/client/operations`. TypeScript automatically infers return types and checks payload types for enhanced type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/queries.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { getAllTasks, getFilteredTasks } from 'wasp/client/operations'\n\n// TypeScript automatically infers the return values and type-checks\n// the payloads.\nconst allTasks = await getAllTasks()\nconst doneTasks = await getFilteredTasks({ isDone: true })\n```\n\n----------------------------------------\n\nTITLE: Defining User Signup Fields in TypeScript for Wasp\nDESCRIPTION: This snippet demonstrates how to define `userSignupFields` in TypeScript for a Wasp project. It includes validation for the 'address' field and allows setting of a 'phone' field during user signup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/_user-signup-fields-explainer.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: (data) => {\n    if (!data.address) {\n      throw new Error('Address is required')\n    }\n    return data.address\n  }\n  phone: (data) => data.phone,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Form in JavaScript with Wasp Auth\nDESCRIPTION: A React component for handling user signup with username and password, using Wasp's built-in authentication functions. It demonstrates form state management, error handling, and navigation after successful signup and login.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/username-and-pass.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { signup, login } from 'wasp/client/auth'\n\nimport { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\n\nexport function Signup() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState(null)\n  const history = useHistory()\n\n  async function handleSubmit(event) {\n    event.preventDefault()\n    try {\n      await signup({\n        username,\n        password,\n      })\n      await login(username, password)\n      history.push(\"/\")\n    } catch (error) {\n      setError(error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* ... */}\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User Email Identity Properties in TypeScript\nDESCRIPTION: This code snippet shows how to access different properties of a user's email identity in a Wasp application. It includes retrieving the email address, checking the verification status, and accessing timestamps for email verification and password reset actions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/_email-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst emailIdentity = user.identities.email\n\n// Email address the user used to sign up, e.g. \"fluffyllama@app.com\".\nemailIdentity.id\n\n// `true` if the user has verified their email address.\nemailIdentity.isEmailVerified\n\n// Datetime when the email verification email was sent.\nemailIdentity.emailVerificationSentAt\n\n// Datetime when the last password reset email was sent.\nemailIdentity.passwordResetSentAt\n```\n\n----------------------------------------\n\nTITLE: Testing a React Component with Mocked Query Data using Vitest and Testing Library - TypeScript (TSX)\nDESCRIPTION: Demonstrates a component test for the TypeScript Todo component, utilizing Vitest and @testing-library/react. Sets up a mock server and query, renders the component, and asserts presence of expected UI based on mocked data. Provides a blueprint for robust component test suites in TSX projects.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/testing.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { test, expect } from \"vitest\";\nimport { screen } from \"@testing-library/react\";\n\nimport { mockServer, renderInContext } from \"wasp/client/test\";\nimport { getTasks } from \"wasp/client/operations\";\nimport Todo from \"./Todo\";\n\nconst { mockQuery } = mockServer();\n\nconst mockTasks = [\n  {\n    id: 1,\n    description: \"test todo 1\",\n    isDone: true,\n    userId: 1,\n  },\n];\n\ntest(\"handles mock data\", async () => {\n  mockQuery(getTasks, mockTasks);\n\n  renderInContext(<Todo />);\n\n  await screen.findByText(\"test todo 1\");\n\n  expect(screen.getByRole(\"checkbox\")).toBeChecked();\n\n  screen.debug();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeSignup Hook in TypeScript\nDESCRIPTION: Demonstrates the implementation of the onBeforeSignup hook in TypeScript, including type annotations for better type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\nimport type { OnBeforeSignupHook } from 'wasp/server/auth'\n\nexport const onBeforeSignup: OnBeforeSignupHook = async ({\n  providerId,\n  prisma,\n  req,\n}) => {\n  const count = await prisma.user.count()\n  console.log('number of users before', count)\n  console.log('provider name', providerId.providerName)\n  console.log('provider user ID', providerId.providerUserId)\n\n  if (count > 100) {\n    throw new HttpError(403, 'Too many users')\n  }\n\n  if (\n    providerId.providerName === 'email' &&\n    providerId.providerUserId === 'some@email.com'\n  ) {\n    throw new HttpError(403, 'This email is not allowed')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Provider in Root Component (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set up a provider (Redux in this case) in the root component of a Wasp application using TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/client-config.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.tsx\",\n  }\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Outlet } from 'react-router-dom'\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root() {\n  return (\n    <Provider store={store}>\n      <Outlet />\n    </Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Actions (TypeScript)\nDESCRIPTION: This snippet demonstrates error handling in TypeScript Actions using HttpError with proper type annotations. Shows how to throw structured HTTP errors with status codes, messages, and additional data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateTask } from 'wasp/server/operations'\nimport { HttpError } from 'wasp/server'\n\nexport const createTask: CreateTask = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Wasp Queries in Client Tests (JavaScript)\nDESCRIPTION: Illustrates how to use the `mockQuery` helper (obtained from `mockServer`) to mock a specific Wasp query (`getTasks`). It takes the query function reference and the desired JSON data to be returned as arguments. This is particularly useful for testing components that use the `useQuery` hook, ensuring predictable data during tests. Mocks are automatically cleared between tests.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/testing.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { getTasks } from \"wasp/client/operations\";\n\nmockQuery(getTasks, []);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Queries in JavaScript\nDESCRIPTION: This snippet demonstrates how to import and use the declared query 'getFoo' on both client and server sides in JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/queries.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// Use it on the client\nimport { getFoo } from 'wasp/client/operations'\n\n// Use it on the server\nimport { getFoo } from 'wasp/server/operations'\n```\n\n----------------------------------------\n\nTITLE: Implementing React Component with TypeScript\nDESCRIPTION: Creates a React component that displays recipes using Wasp's useQuery hook with full-stack type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/introduction/introduction.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQuery, getRecipes } from 'wasp/client/operations'\nimport { type User } from 'wasp/entities'\n\nexport function HomePage({ user }: { user: User }) {\n  const { data: recipes, isLoading } = useQuery(getRecipes)\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <div>\n      <h1>Recipes</h1>\n      <ul>\n        {recipes\n          ? recipes.map((recipe) => (\n              <li key={recipe.id}>\n                <div>{recipe.title}</div>\n                <div>{recipe.description}</div>\n              </li>\n            ))\n          : 'No recipes defined yet!'}\n      </ul>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Query in a React Component with JavaScript\nDESCRIPTION: Demonstrates how to use the getTasks query in a React component using the useQuery hook, which handles loading states and errors. The component displays a list of tasks fetched from the database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/05-queries.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getTasks, useQuery } from 'wasp/client/operations'\n\nexport const MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n\nconst TaskView = ({ task }) => {\n  return (\n    <div>\n      <input type=\"checkbox\" id={String(task.id)} checked={task.isDone} />\n      {task.description}\n    </div>\n  )\n}\n\nconst TasksList = ({ tasks }) => {\n  if (!tasks?.length) return <div>No tasks</div>\n\n  return (\n    <div>\n      {tasks.map((task, idx) => (\n        <TaskView task={task} key={idx} />\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeLogin Hook for Login Validation (JavaScript) - js\nDESCRIPTION: Implements pre-login validation logic in JavaScript using Wasp's 'onBeforeLogin' auth hook. Checks incoming login credentials against business rules (in this case, blocks login for a specific email) and throws an HttpError if unauthorized. Needs access to Wasp's HttpError, the 'providerId' structure and information on incoming request. Throws a 403 error for forbidden access.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const onBeforeLogin = async ({ providerId, user, prisma, req }) => {\n  if (\n    providerId.providerName === 'email' &&\n    providerId.providerUserId === 'some@email.com'\n  ) {\n    throw new HttpError(403, 'You cannot log in with this email')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Auth Hook Registration in Wasp App (JavaScript) - wasp\nDESCRIPTION: A comprehensive main.wasp configuration block that registers all relevant auth hooks for a Wasp app using JavaScript: pre/post signup, pre/post login, pre-OAuth redirect. Shows the full structure, required Wasp version, and placeholder for auth method strategies.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_19\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  auth: {\n    userEntity: User,\n    methods: {\n      ...\n    },\n    onBeforeSignup: import { onBeforeSignup } from \"@src/auth/hooks\",\n    onAfterSignup: import { onAfterSignup } from \"@src/auth/hooks\",\n    onBeforeOAuthRedirect: import { onBeforeOAuthRedirect } from \"@src/auth/hooks\",\n    onBeforeLogin: import { onBeforeLogin } from \"@src/auth/hooks\",\n    onAfterLogin: import { onAfterLogin } from \"@src/auth/hooks\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Signup Fields in JavaScript for Wasp\nDESCRIPTION: This snippet shows how to define `userSignupFields` in JavaScript for a Wasp project. It includes validation for the 'address' field and allows setting of a 'phone' field during user signup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/_user-signup-fields-explainer.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: (data) => {\n    if (!data.address) {\n      throw new Error('Address is required')\n    }\n    return data.address\n  },\n  phone: (data) => data.phone,\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding CRUD Create Action for Task - JavaScript (Node.js)\nDESCRIPTION: This JavaScript module exports an async function \"createTask\" to be used as a custom override for the Task creation action. It validates that the user is authenticated via the context, extracts input arguments, and uses the context's Task entity to create a new task associated with the current user. Requires Wasp's server framework and is intended for server-side execution.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/crud.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const createTask = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401, 'User not authenticated.')\n  }\n\n  const { description, isDone } = args\n  const { Task } = context.entities\n\n  return await Task.create({\n    data: {\n      description,\n      isDone,\n      // highlight-start\n      // Connect the task to the user that is creating it\n      user: {\n        connect: {\n          id: context.user.id,\n        },\n      },\n      // highlight-end\n    },\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Zod Validation Example\nDESCRIPTION: Example showing how to use Zod for field validation in signup process\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\nimport * as z from 'zod'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: (data) => {\n    const AddressSchema = z\n      .string({\n        required_error: 'Address is required',\n        invalid_type_error: 'Address must be a string',\n      })\n      .min(10, 'Address must be at least 10 characters long')\n    const result = AddressSchema.safeParse(data.address)\n    if (result.success === false) {\n      throw new Error(result.error.issues[0].message)\n    }\n    return result.data\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring CRUD for Task Entity with Custom Create - Wasp\nDESCRIPTION: This Wasp snippet sets up a \"crud\" resource for \"Task\", but enables only getAll and create operations. The create action is explicitly overridden to use a custom implementation from \"@src/tasks.js\". This setup illustrates partial CRUD exposure and how to customize generated backend behavior for specific operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/crud.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\ncrud Tasks {\n  entity: Task,\n  operations: {\n    getAll: {},\n    create: {\n      overrideFn: import { createTask } from \"@src/tasks.js\",\n    },\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Complete Zod Schema for Form Validation with Asynchronous Checks\nDESCRIPTION: This is the full Zod schema implementation for form validation. It includes asynchronous checks for email and username, as well as various synchronous validations for other fields like name, date of birth, and address details.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2025-01-22-advanced-react-hook-form-zod-shadcn.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst formSchema = z\n    .object({\n      name: z.string().min(1, { message: 'Name is required' }),\n      surname: z.string().min(1, { message: 'Surname is required' }),\n      email: z\n        .string()\n        .email({ message: 'Invalid email address' })\n        .refine(\n          async (email) => {\n            if (email === customer.email && customer.email !== '') return true;\n            return !(await checkEmail(email));\n          },\n          { message: 'Email already exists' }\n        ),\n      dateOfBirth: z.date().max(new Date(), {\n        message: 'Date of birth cannot be in the future',\n      }),\n      premiumUser: z.boolean(),\n      username: z\n        .string()\n        .min(1, { message: 'Username is required' })\n        .refine(\n          async (username) => {\n            if (username === customer.username && customer.username !== '')\n              return true;\n            return !(await checkUsername(username));\n          },\n          { message: 'Username already exists' }\n        ),\n      address: z.string().min(1, { message: 'Address is required' }),\n      postalCode: z.string().min(1, { message: 'Postal code is required' }),\n      city: z.string().min(1, { message: 'City is required' }),\n      country: z.string().min(1, { message: 'Country is required' }),\n    })\n    .superRefine((data, ctx) => {\n       if (!isValidUKPostcode(data.postalCode, data.country)) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: 'Invalid UK postal code format (e.g., SW1A 1AA)',\n          path: ['postalCode'],\n        });\n      }\n\n      if (data.username.includes(' ')) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: 'Username cannot contain spaces',\n          path: ['username'],\n        });\n      }\n\n      if (/^\\d+$/.test(data.city)) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: 'City name cannot be purely numeric',\n          path: ['city'],\n        });\n      }\n    });\n```\n\n----------------------------------------\n\nTITLE: Enabling CRUD Operations for Task Entity - Wasp Language\nDESCRIPTION: Adds a CRUD declaration for the Task entity, exposing only `getAll` and `create` operations, with the `create` operation overridden by a custom function. This Wasp snippet relies on existing Task entity and the custom function for `create`. Outputs only the enabled operations for client and backend, enforcing any custom logic provided.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/crud.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\\n\\ncrud Tasks {\\n  entity: Task,\\n  operations: {\\n    getAll: {},\\n    create: {\\n      overrideFn: import { createTask } from \"@src/tasks.js\",\\n    },\\n  },\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reset Password Page with Wasp Form\nDESCRIPTION: This snippet demonstrates how to create a reset password page using the ResetPasswordForm component provided by Wasp, including the necessary Wasp configuration and React component implementation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/ui.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\nroute PasswordResetRoute { path: \"/password-reset\", to: PasswordResetPage }\npage PasswordResetPage {\n  component: import { ResetPasswordPage } from \"@src/ResetPasswordPage.tsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ResetPasswordForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function ResetPasswordPage() {\n  return <ResetPasswordForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Signup Form in React (TSX)\nDESCRIPTION: This React component (TypeScript version) demonstrates how to implement a signup form using the `signup` and `login` actions from `wasp/client/auth`. It captures username and password, calls `signup` to register the user, then immediately calls `login` to authenticate them, and finally redirects to the home page upon success. It includes type annotations for state and event handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/username-and-pass.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/pages/auth.tsx\"\nimport { signup, login } from 'wasp/client/auth'\n\nimport { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\n\nexport function Signup() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState<Error | null>(null)\n  const history = useHistory()\n\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    try {\n      await signup({\n        username,\n        password,\n      })\n      await login(username, password)\n      history.push(\"/\")\n    } catch (error: unknown) {\n      setError(error as Error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* ... */}\n    </form>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Todo List React Component Using API Calls and Type Annotations - TypeScript (TSX)\nDESCRIPTION: Implements a typed Todo component that fetches a list of Task objects from an API endpoint using the wasp/client/api client. Utilizes useState and useEffect, ensuring type safety for both state and API response. Suitable for integration testing where API responses must be controlled.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/testing.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type Task } from \"wasp/entities\";\nimport { api } from \"wasp/client/api\";\n\nconst Todo = (_props: {}) => {\n  const [tasks, setTasks] = useState<Task>([]);\n  useEffect(() => {\n    api\n      .get(\"/tasks\")\n      .then((res) => res.json() as Task[])\n      .then((tasks) => setTasks(tasks))\n      .catch((err) => window.alert(err));\n  });\n\n  return (\n    <ul>\n      {tasks &&\n        tasks.map((task) => (\n          <li key={task.id}>\n            <input type=\"checkbox\" value={task.isDone} />\n            {task.description}\n          </li>\n        ))}\n    </ul>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeScript Server Operations\nDESCRIPTION: Server-side TypeScript implementation of the getRecipes query using Prisma client with type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/introduction/introduction.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetRecipes } from \"wasp/server/operations\";\nimport { type Recipe } from \"wasp/entities\";\n\nexport const getRecipes: GetRecipes<{}, Recipe[]> = async (_args, context) => {\n  return context.entities.Recipe.findMany( // Prisma query\n    { where: { user: { id: context.user.id } } }\n  );\n};\n\nexport const addRecipe ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Provider User ID with Wasp Auth in TypeScript React Component\nDESCRIPTION: Demonstrates the use of 'getFirstProviderUserId' from Wasp's auth utilities within a TypeScript React component to show the user's primary provider ID for every task. Assumes each user object contains 'auth' and 'identities' relations. Returns a string identifier based on the first available authentication identity, or null if absent.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getFirstProviderUserId } from 'wasp/auth'\n\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {getFirstProviderUserId(task.user)}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Root Component with Common Layout in JavaScript\nDESCRIPTION: This snippet shows how to define a root component with a common layout for a Wasp application using JavaScript. It includes a header, footer, and uses the Outlet component from react-router-dom.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/client-config.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.jsx\",\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Outlet } from 'react-router-dom'\n\nexport default function Root() {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      // highlight-next-line\n      <Outlet />\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Wasp Project with TypeScript Template\nDESCRIPTION: Command to create a new Wasp project using the TypeScript todo app template that includes authentication and full-stack type safety features.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/starter-templates.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwasp new <project-name> -t todo-ts\n```\n\n----------------------------------------\n\nTITLE: Basic Action Usage in JavaScript/TypeScript\nDESCRIPTION: Demonstrates how to import and use Actions directly in client code. Shows basic action calls with async/await pattern.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/actions.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport createTask from '@wasp/actions/createTask.js'\nimport markTasAsDone from '@wasp/actions/markTasAsDone.js'\n\n// ...\n\nconst newTask = await createTask({ description: 'Learn TypeScript' })\nawait markTasAsDone({ id: 1 })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport createTask from '@wasp/actions/createTask.js'\nimport markTasAsDone from '@wasp/actions/markTasAsDone.js'\n\n// TypeScript automatically infers the return values and type-checks\n// the payloads.\nconst newTask = await createTask({ description: 'Keep learning TypeScript' })\nawait markTasAsDone({ id: 1 })\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions with Entities (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to implement Actions with full-stack type safety. It shows how to use type annotations to define expected inputs and outputs for each action.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateTask, type MarkTaskAsDone } from 'wasp/server/operations'\nimport { type Task } from 'wasp/entities'\n\n// The 'args' object is the payload sent by the caller (most often from the client)\nexport const createTask: CreateTask<Pick<Task, 'description'>, Task> = async (\n  args,\n  context\n) => {\n  const newTask = await context.entities.Task.create({\n    data: {\n      description: args.description,\n      isDone: false,\n    },\n  })\n  return newTask\n}\n\nexport const markTaskAsDone: MarkTaskAsDone<Pick<Task, 'id'>, void> = async (\n  args,\n  context\n) => {\n  await context.entities.Task.update({\n    where: { id: args.id },\n    data: { isDone: true },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Server Logic in JavaScript\nDESCRIPTION: This JavaScript code defines the server-side WebSocket logic, including event handlers for connection and chat messages. It demonstrates how to use the Socket.IO server instance and access the Wasp context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/web-sockets.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v4 as uuidv4 } from 'uuid'\n\nexport const webSocketFn = (io, context) => {\n  io.on('connection', (socket) => {\n    const username = socket.data.user?.email || socket.data.user?.username || 'unknown'\n    console.log('a user connected: ', username)\n\n    socket.on('chatMessage', async (msg) => {\n      console.log('message: ', msg)\n      io.emit('chatMessage', { id: uuidv4(), username, text: msg })\n      // You can also use your entities here:\n      // await context.entities.SomeEntity.create({ someField: msg })\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Create Task Action in TypeScript\nDESCRIPTION: Type-safe server-side implementation of the createTask action with proper type annotations for args and return value.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/06-actions.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from 'wasp/entities'\nimport { CreateTask } from 'wasp/server/operations'\n\ntype CreateTaskPayload = Pick<Task, 'description'>\n\nexport const createTask: CreateTask<CreateTaskPayload, Task> = async (\n  args,\n  context\n) => {\n  return context.entities.Task.create({\n    data: { description: args.description },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Password Reset Email Content Function (TypeScript)\nDESCRIPTION: This TypeScript snippet defines the `getPasswordResetEmailContent` function using the `GetPasswordResetEmailContentFn` type from `wasp/server/auth` for type safety. It takes the `passwordResetLink` and generates the subject, text, and HTML for the password reset email, allowing for customization while ensuring adherence to the expected function signature.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/email.md#2025-04-22_snippet_20\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/email.ts\"\nimport { GetPasswordResetEmailContentFn } from 'wasp/server/auth'\n\nexport const getPasswordResetEmailContent: GetPasswordResetEmailContentFn = ({\n  passwordResetLink,\n}) => ({\n  subject: 'Password reset',\n  text: `Click the link below to reset your password: ${passwordResetLink}`,\n  html: `\n        <p>Click the link below to reset your password</p>\n        <a href=\"${passwordResetLink}\">Reset password</a>\n    `,\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Environment Variables in JavaScript\nDESCRIPTION: Shows how to access both Wasp-defined and user-defined client environment variables in client-side JavaScript code using the env object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/env-vars.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { env } from 'wasp/client'\n\n// Wasp-defined\nconst apiUrl = env.REACT_APP_API_URL\n\n// User-defined\nconst analyticsId = env.REACT_APP_ANALYTICS_ID\n```\n\n----------------------------------------\n\nTITLE: Creating Auth Pages using Wasp Components in React (JavaScript)\nDESCRIPTION: Defines several React functional components (Login, Signup, EmailVerification, RequestPasswordReset, PasswordReset) within `src/pages/auth.jsx`. These components utilize pre-built Wasp authentication UI components (`LoginForm`, `SignupForm`, etc.) and `react-router-dom`'s `Link` for navigation between auth pages. A shared `Layout` component is included to provide consistent centering and styling using Tailwind CSS.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/email.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/pages/auth.jsx\"\nimport {\n  LoginForm,\n  SignupForm,\n  VerifyEmailForm,\n  ForgotPasswordForm,\n  ResetPasswordForm,\n} from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Don't have an account yet? <Link to=\"/signup\">go to signup</Link>.\n      </span>\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Forgot your password? <Link to=\"/request-password-reset\">reset it</Link>\n        .\n      </span>\n    </Layout>\n  );\n}\n\nexport function Signup() {\n  return (\n    <Layout>\n      <SignupForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </Layout>\n  );\n}\n\nexport function EmailVerification() {\n  return (\n    <Layout>\n      <VerifyEmailForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        If everything is okay, <Link to=\"/login\">go to login</Link>\n      </span>\n    </Layout>\n  );\n}\n\nexport function RequestPasswordReset() {\n  return (\n    <Layout>\n      <ForgotPasswordForm />\n    </Layout>\n  );\n}\n\nexport function PasswordReset() {\n  return (\n    <Layout>\n      <ResetPasswordForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        If everything is okay, <Link to=\"/login\">go to login</Link>\n      </span>\n    </Layout>\n  );\n}\n\n// A layout component to center the content\nexport function Layout({ children }) {\n  return (\n    <div className=\"w-full h-full bg-white\">\n      <div className=\"min-w-full min-h-[75vh] flex items-center justify-center\">\n        <div className=\"w-full h-full max-w-sm p-5 bg-white\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Database Seeds in WASP DSL - JavaScript\nDESCRIPTION: This snippet shows how to configure a Wasp application's database seed functions using the WASP DSL in a JavaScript project. It imports a default seed function, 'devSeed', from a JavaScript module and registers it within the app's database configuration. To use this, '@src/dbSeeds.js' should export a default function named 'devSeed'. The configuration makes the 'devSeed' function available for 'wasp db seed' commands, and supports other db setup properties as needed.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/backends.md#2025-04-22_snippet_5\n\nLANGUAGE: Wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  db: {\n    seeds: [\n      import devSeed from \"@src/dbSeeds.js\"\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Wasp Application\nDESCRIPTION: Shows how to configure authentication in a Wasp application by specifying the user entity, authentication methods, and redirect routes for authentication events.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/overview.md#2025-04-22_snippet_14\n\nLANGUAGE: wasp\nCODE:\n```\n  title: \"My app\",\n  //...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {}, // use this or email, not both\n      email: {}, // use this or usernameAndPassword, not both\n      google: {},\n      gitHub: {},\n    },\n    onAuthFailedRedirectTo: \"/someRoute\",\n  }\n}\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signup in JavaScript\nDESCRIPTION: JavaScript implementation of a custom signup function that creates a new user with username and password authentication. The function uses Wasp's authentication utilities to create provider IDs, serialize provider data, and create user records.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  createUser,\n} from 'wasp/server/auth'\n\nexport const signup = async (args, { entities: { User } }) => {\n  try {\n    // Provider ID is a combination of the provider name and the provider user ID\n    // And it is used to uniquely identify the user in your app\n    const providerId = createProviderId('username', args.username)\n    // sanitizeAndSerializeProviderData hashes the password and returns a JSON string\n    const providerData = await sanitizeAndSerializeProviderData({\n      hashedPassword: args.password,\n    })\n\n    await createUser(\n      providerId,\n      providerData,\n      // Any additional data you want to store on the User entity\n      {}\n    )\n\n    // This is equivalent to:\n    // await User.create({\n    //   data: {\n    //     auth: {\n    //       create: {\n    //         identities: {\n    //             create: {\n    //                 providerName: 'username',\n    //                 providerUserId: args.username\n    //                 providerData,\n    //             },\n    //         },\n    //       }\n    //     },\n    //   }\n    // })\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Prisma (JavaScript/TypeScript)\nDESCRIPTION: This Prisma model defines the 'User' table with an autoincrementing primary key, a unique username, and a displayName. It is used as the user entity in the authentication system, making 'username' and 'displayName' available for population via OAuth signup flows. The model may be extended as needed, but the required fields must be present for user provisioning.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/github.md#2025-04-22_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          Int    @id @default(autoincrement())\n  username    String @unique\n  displayName String\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Connecting to Production Database Using Environment Variable\nDESCRIPTION: Command showing how to connect to a production database by setting the DATABASE_URL environment variable before running the database studio command. This allows inspection of the production database while avoiding accidental modifications.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/database.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://user:password@host:port/dbname\" wasp db studio\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Create Task Operation in JavaScript\nDESCRIPTION: This JavaScript code implements a custom create operation for tasks, ensuring the task is connected to the authenticated user creating it.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const createTask = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401, 'User not authenticated.')\n  }\n\n  const { description, isDone } = args\n  const { Task } = context.entities\n\n  return await Task.create({\n    data: {\n      description,\n      isDone,\n      user: {\n        connect: {\n          id: context.user.id,\n        },\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Root Route and Main Page in Wasp\nDESCRIPTION: Declaration of a root route ('/') and a MainPage component in Wasp. The route connects the URL path to the page, and the page declaration specifies which React component to render.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/03-pages.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  // We specify that the React implementation of the page is exported from\n  // `src/MainPage.jsx`. This statement uses standard JS import syntax.\n  // Use `@src` to reference files inside the `src` folder.\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Job Worker Function in JavaScript\nDESCRIPTION: Implementation of the worker function for a job in JavaScript. The function receives input data and context, processes it, and returns a result. It demonstrates accessing entities and performing asynchronous operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/jobs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const foo = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Poll Options and Vote Interface in React\nDESCRIPTION: This snippet renders the poll options, vote buttons, and vote counts. It includes conditional rendering based on user state and vote status, as well as styled components for visual feedback.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-09-build-real-time-voting-app-websockets-react-typescript.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n        {poll && <p className='leading-relaxed text-gray-500'>Cast your vote for one of the options.</p>}\n        {poll && (\n          <div className='mt-4 flex flex-col gap-4'>\n            {poll.options.map((option) => (\n              <Card key={option.id} className='relative transition-all duration-300 min-h-[130px]'>\n                <div className='z-10'>\n                  <div className='mb-2'>\n                    <h2 className='text-xl font-semibold'>{option.text}</h2>\n                    <p className='text-gray-700'>{option.description}</p>\n                  </div>\n                  <div className='absolute bottom-5 right-5'>\n                    {randomUser && !option.votes.includes(randomUser) ? (\n                      <Button onClick={() => handleVote(option.id)}>Vote</Button>\n                    ) : (\n                      <Button disabled>Voted</Button>\n                    )}\n                  </div>\n                  {option.votes.length > 0 && (\n                    <div className='mt-2 flex gap-2 flex-wrap max-w-[75%]'>\n                      {option.votes.map((vote) => (\n                        <div\n                          key={vote}\n                          className='py-1 px-3 bg-gray-100 rounded-lg flex items-center justify-center shadow text-sm'\n                        >\n                          <div className='w-2 h-2 bg-green-500 rounded-full mr-2'></div>\n                          <div className='text-gray-700'>{vote}</div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n                <div className='absolute top-5 right-5 p-2 text-sm font-semibold bg-gray-100 rounded-lg z-10'>\n                  {option.votes.length} / {totalVotes}\n                </div>\n                <div\n                  className='absolute inset-0 bg-gradient-to-r from-yellow-400 to-orange-500 opacity-75 rounded-lg transition-all duration-300'\n                  style={{\n                    width: `${totalVotes > 0 ? (option.votes.length / totalVotes) * 100 : 0}%`,\n                  }}\n                ></div>\n              </Card>\n            ))}\n          </div>\n        )}\n```\n\n----------------------------------------\n\nTITLE: Setting Client Base Directory - Wasp (main.wasp)\nDESCRIPTION: Configures the base directory for serving the Wasp client. The baseDir option ensures correct operation if the app is served from a subpath (e.g., /my-app). Inputs include the desired base subpath. Outputs correct routing and asset path resolution when deployed to a non-root location.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/client-config.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    baseDir: \"/my-app\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Password using Wasp Client Auth (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates calling the `resetPassword` action from `wasp/client/auth`. Used within the password reset page component (`PasswordResetPage.tsx`), it sends the new password and the reset token to the server to complete the password reset operation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/email.md#2025-04-22_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/pages/PasswordResetPage.tsx\"\nimport { resetPassword } from 'wasp/client/auth'\n...\nawait resetPassword({ password, token })\n```\n```\n\n----------------------------------------\n\nTITLE: Using Wasp CRUD Operation Hooks on the Client in JS/TS\nDESCRIPTION: Illustrates invoking the imported Wasp CRUD operations (`Tasks`) within a React component using Wasp's provided hooks. It demonstrates fetching data with `Tasks.getAll.useQuery()` and `Tasks.get.useQuery({ id: 1 })`, and performing mutations (create, update, delete) using `Tasks.create.useAction()`, `Tasks.update.useAction()`, and `Tasks.delete.useAction()`. These hooks handle underlying queries and actions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/crud.md#2025-04-22_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"SomePage.jsx\"\nconst { data } = Tasks.getAll.useQuery()\nconst { data } = Tasks.get.useQuery({ id: 1 })\nconst createAction = Tasks.create.useAction()\nconst updateAction = Tasks.update.useAction()\nconst deleteAction = Tasks.delete.useAction()\n```\n```\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"SomePage.tsx\"\nconst { data } = Tasks.getAll.useQuery()\nconst { data } = Tasks.get.useQuery({ id: 1 })\nconst createAction = Tasks.create.useAction()\nconst updateAction = Tasks.update.useAction()\nconst deleteAction = Tasks.delete.useAction()\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Wasp File with Auth Extra Fields\nDESCRIPTION: Configuration in main.wasp file that sets up authentication with username and password, specifying userSignupFields to handle extra fields during signup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  // ...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {\n        userSignupFields: import { userSignupFields } from \"@src/auth/signup\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Automating Netlify Client Deployment with GitHub Actions in YAML\nDESCRIPTION: Defines a GitHub Actions workflow triggered on pushes to the `main` branch. It checks out code, sets up Node.js, installs a specific Wasp version, builds the Wasp project, builds the React client (setting `REACT_APP_API_URL`), and deploys the built client (`./.wasp/build/web-app/build`) to Netlify using the Netlify CLI. Requires `NETLIFY_AUTH_TOKEN`, `NETLIFY_SITE_NAME`, and potentially `WASP_SERVER_URL` secrets configured in the GitHub repository.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy Client to Netlify\n\non:\n  push:\n    branches:\n      - main # Deploy on every push to the main branch\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v2\n\n      - name: Setup Node.js\n        id: setup-node\n        uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n\n      - name: Install Wasp\n        run: curl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v 0.16.0 # Change to your Wasp version\n\n      - name: Wasp Build\n        run: wasp build\n\n      - name: Install dependencies and build the client\n        run: |\n          cd ./.wasp/build/web-app\n          npm install\n          REACT_APP_API_URL=${{ secrets.WASP_SERVER_URL }} npm run build\n\n      - name: Deploy to Netlify\n        run: |\n          cd ./.wasp/build/web-app\n          npx netlify-cli@17.36.1 deploy --prod --dir=build --auth=$NETLIFY_AUTH_TOKEN --site=$NETLIFY_SITE_NAME\n\n    env:\n      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}\n      NETLIFY_SITE_NAME: netlify-site-name\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Wasp (TypeScript)\nDESCRIPTION: TypeScript version of authentication configuration in Wasp, showing how to set up the auth field with userEntity and various authentication methods in a type-safe manner.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  //...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {}, // use this or email, not both\n      email: {}, // use this or usernameAndPassword, not both\n      google: {},\n      gitHub: {},\n    },\n    onAuthFailedRedirectTo: \"/someRoute\"\n  }\n}\n\n//...\n```\n\n----------------------------------------\n\nTITLE: TypeScript Query Implementation\nDESCRIPTION: Migrated TypeScript version of the query implementation with proper type annotations and Wasp-specific types.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/general/typescript.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport HttpError from 'wasp/server'\nimport { type Task } from '@wasp/entities'\nimport { type GetTaskInfo } from '@wasp/server/operations'\n\nfunction getInfoMessage(task: Pick<Task, 'isDone' | 'description'>): string {\n  const isDoneText = task.isDone ? 'is done' : 'is not done'\n  return `Task '${task.description}' is ${isDoneText}.`\n}\n\nexport const getTaskInfo: GetTaskInfo<Pick<Task, 'id'>, string> = async (\n  { id },\n  context\n) => {\n  const Task = context.entities.Task\n\n  const task = await Task.findUnique({ where: { id } })\n  if (!task) {\n    throw new HttpError(404)\n  }\n\n  return getInfoMessage(task)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Models in Prisma Schema for Wasp\nDESCRIPTION: Example of defining `User` and `Task` models within the `schema.prisma` file, intended for use in a Wasp application. Wasp supports standard Prisma model definitions, including fields, types, primary keys (`@id`), default values (`@default`), and relations (`@relation`), as long as the schema is valid.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/prisma-file.md#2025-04-22_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\\n  id      Int        @id @default(autoincrement())\\n  tasks   Task[]\\n}\\n\\nmodel Task {\\n  id          Int        @id @default(autoincrement())\\n  description String\\n  isDone      Boolean    @default(false)\\n  user        User       @relation(fields: [userId], references: [id])\\n  userId      Int\\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Web App Structure in Wasp\nDESCRIPTION: Example showing how to define a basic web application structure in Wasp, including app configuration, routing, authentication, and data model definition. The code demonstrates the declarative nature of Wasp and how it integrates with React components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-03-02-wasp-alpha.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\napp todoApp {\n  title: \"ToDo App\" /* visible in tab */\n}\n\nroute \"/\" -> page Main\npage Main {\n  component: import Main from \"@ext/Main.js\"  /* Import your React code. */\n}\n\nauth { /* full-stack auth out-of-the-box */\n  userEntity: User,\n  methods: {\n    usernameAndPassword: {}\n  }\n}\n\nentity User {=psl\n  id          Int     @id @default(autoincrement())\n  username    String  @unique\n  password    String\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Declaring Wasp CRUD Operations with Options in Wasp\nDESCRIPTION: Defines CRUD operations named `Tasks` for the `Task` entity within a `main.wasp` file. It configures specific operations (`getAll`, `get`, `create`, `update`), makes the `getAll` operation public (no authentication required), and specifies a custom implementation override function (`createTask` from `@src/tasks.js`) for the `create` operation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/crud.md#2025-04-22_snippet_13\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\ncrud Tasks { // crud name here is \"Tasks\"\n  entity: Task,\n  operations: {\n    getAll: {\n      isPublic: true, // optional, defaults to false\n    },\n    get: {},\n    create: {\n      overrideFn: import { createTask } from \"@src/tasks.js\", // optional\n    },\n    update: {},\n  },\n}\n```\n```\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\ncrud Tasks { // crud name here is \"Tasks\"\n  entity: Task,\n  operations: {\n    getAll: {\n      isPublic: true, // optional, defaults to false\n    },\n    get: {},\n    create: {\n      overrideFn: import { createTask } from \"@src/tasks.js\", // optional\n    },\n    update: {},\n  },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Username Sign-up Action with TypeScript Import\nDESCRIPTION: Defines a custom sign-up action for username/password authentication that imports from a TypeScript file instead of JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/advanced/custom-auth-actions.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\naction customSignup {\n  fn: import { signup } from \"@src/auth/signup\",\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Component in JavaScript (JSX)\nDESCRIPTION: Provides an example JavaScript implementation (`src/Root.jsx`) for the Wasp client's root component, referenced by `rootComponent` in `main.wasp`. It demonstrates setting up a Redux `Provider` and defining a `Layout` component. Crucially, it must render the `<Outlet />` component from `react-router-dom` to display the current page's content within the layout.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/client-config.md#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"src/Root.jsx\"\nimport { Outlet } from 'react-router-dom'\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root() {\n  return (\n    <Provider store={store}>\n      <Layout />\n    </Provider>\n  )\n}\n\nfunction Layout() {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      // highlight-next-line\n      <Outlet />\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Verification in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement email verification on the client-side using TypeScript in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/email.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyEmail } from 'wasp/client/auth'\n...\nawait verifyEmail({ token });\n```\n\n----------------------------------------\n\nTITLE: Project Structure with Prisma Schema\nDESCRIPTION: Shows the basic project structure of a Wasp application including the location of the schema.prisma file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/prisma-file.md#2025-04-22_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n.\n├── main.wasp\n...\n├── schema.prisma\n├── src\n├── tsconfig.json\n└── vite.config.ts\n```\n\n----------------------------------------\n\nTITLE: Storing Values for Later Use in Setup Function (JavaScript)\nDESCRIPTION: Demonstrates how to store values during server setup for later use in operations. The example shows setting up a resource and starting a cron job, with a function to access the stored resource.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/server-config.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet someResource = undefined\n\nexport const mySetupFunction = async () => {\n  // Let's pretend functions setUpSomeResource and startSomeCronJob\n  // are implemented below or imported from another file.\n  someResource = await setUpSomeResource()\n  startSomeCronJob()\n}\n\nexport const getSomeResource = () => someResource\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Prisma Schema\nDESCRIPTION: This code defines the User entity in the schema.prisma file, which is required for Keycloak authentication. It includes an id field as the primary key.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/keycloak.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  // Add your own fields below\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Production Database for Inspection\nDESCRIPTION: This command opens a web-based database management tool to inspect the production database. It requires setting the DATABASE_URL environment variable to point to the production database before running the command.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/database.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://user:password@host:port/dbname\" wasp db studio\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Preview Features in Wasp\nDESCRIPTION: Example of enabling Prisma preview features in a Wasp application. This allows using experimental features that aren't yet considered stable in Prisma.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/backends.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    system: PostgreSQL,\n    prisma: {\n      clientPreviewFeatures: [\"postgresqlExtensions\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Signup Form Component\nDESCRIPTION: React component implementing a custom signup form with additional fields\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  SignupForm,\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onAfterSignup Hook\nDESCRIPTION: Authentication hook that runs after successful user signup. Receives providerId, user, oauth, prisma, and req as input parameters. The hook's return value is ignored by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/auth-hooks.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport const onAfterSignup = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OnAfterSignupHook } from 'wasp/server/auth'\n\nexport const onAfterSignup: OnAfterSignupHook = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dummy Email Provider in Wasp App (Wasp DSL)\nDESCRIPTION: Configures the Wasp app to use the Dummy email provider for sending emails, which logs emails to console instead of sending them. This configuration must be added to the Wasp project's 'main.wasp' file in the 'app' block. Required dependency: Wasp project structure. No inputs or outputs—affects application behavior on authentication flows involving email.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  // ...\n  // 7. Set up the email sender\n  emailSender: {\n    provider: Dummy,\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Validating Signup Fields Using Zod Library (TypeScript)\nDESCRIPTION: Integrates the Zod validation library with the defineUserSignupFields Wasp helper in TypeScript. Validates the 'address' field on user signup using Zod's schema, enforcing type, required, and minimum length constraints, and converting validation errors into thrown errors. Requires wasp/server/auth and zod. Inputs are user signup data objects; outputs are validated and parsed field values. The use of Zod allows for extensible schema-based validation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\nimport * as z from 'zod'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: (data) => {\n    const AddressSchema = z\n      .string({\n        required_error: 'Address is required',\n        invalid_type_error: 'Address must be a string',\n      })\n      .min(10, 'Address must be at least 10 characters long')\n    const result = AddressSchema.safeParse(data.address)\n    if (result.success === false) {\n      throw new Error(result.error.issues[0].message)\n    }\n    return result.data\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring UpdateTask Action in Wasp\nDESCRIPTION: Defines the updateTask action in the Wasp configuration file, connecting it to the implementation function and specifying Task entity access.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/06-actions.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\naction updateTask {\n  fn: import { updateTask } from \"@src/actions\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions in TypeScript\nDESCRIPTION: This snippet shows how to implement the Actions 'createTask' and 'markTaskAsDone' in TypeScript. It includes type definitions, a simple in-memory database, and demonstrates how to use Wasp-generated types for full-stack type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateTask, type MarkTaskAsDone } from 'wasp/server/operations'\n\ntype Task = {\n  id: number\n  description: string\n  isDone: boolean\n}\n\nlet nextId = 4\nconst tasks = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\nexport const createTask: CreateTask<Pick<Task, 'description'>, Task> = (\n  args\n) => {\n  const newTask = {\n    id: nextId,\n    isDone: false,\n    description: args.description,\n  }\n  nextId += 1\n  tasks.push(newTask)\n  return newTask\n}\n\nexport const markTaskAsDone: MarkTaskAsDone<Pick<Task, 'id'>, void> = (\n  args\n) => {\n  const task = tasks.find((task) => task.id === args.id)\n  if (!task) {\n    return\n  }\n  task.isDone = true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Page Component with Wasp Query Hook\nDESCRIPTION: This TSX snippet shows a React functional component `HomePage` used as a Wasp page. It receives the authenticated `user` object as a prop. It utilizes the `useQuery` hook provided by Wasp (`wasp/client/operations`) to call the `getRecipes` server query. The component handles the loading state and renders the fetched recipes, benefiting from Wasp's full-stack type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/introduction/introduction.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/pages/HomePage.tsx\"\nimport { useQuery, getRecipes } from \"wasp/client/operations\";\nimport { type User } from \"wasp/entities\";\n\nexport function HomePage({ user }: { user: User }) {\n  // Due to full-stack type safety, `recipes` will be of type `Recipe[]` here.\n  const { data: recipes, isLoading } = useQuery(getRecipes); // Calling our query here!\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <h1>Recipes</h1>\n      <ul>\n        {recipes ? recipes.map((recipe) => (\n          <li key={recipe.id}>\n            <div>{recipe.title}</div>\n            <div>{recipe.description}</div>\n          </li>\n        )) : 'No recipes defined yet!'}\n      </ul>\n    </div>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining AuthIdentity Entity for Providers - Wasp Language\nDESCRIPTION: Specifies the AuthIdentity entity which stores user credentials and metadata for each authentication provider, supporting multiple auth methods per user. Uses dual primary keys and a JSON-string workaround. Dependencies: Wasp/PSL, adherence to Prisma JSON constraints for SQLite. Parameters: providerName, providerUserId, providerData, authId. Connects with Auth entity to link with business users.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/entities.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nentity AuthIdentity {=psl\\n  providerName   String\\n  providerUserId String\\n  providerData   String @default(\"{}\")\\n  authId         String\\n  auth           Auth   @relation(fields: [authId], references: [id], onDelete: Cascade)\\n\\n  @@id([providerName, providerUserId])  \\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Defining Root Component with Common Layout in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a root component with a common layout for a Wasp application using TypeScript. It includes a header, footer, and uses the Outlet component from react-router-dom.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/client-config.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.tsx\",\n  }\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Outlet } from 'react-router-dom'\n\nexport default function Root() {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      // highlight-next-line\n      <Outlet />\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Entities in API Declaration\nDESCRIPTION: Demonstrates how to add entity dependencies to an API declaration in Wasp to access database entities from the API handler.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/apis.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar {\n  fn: import { fooBar } from \"@src/apis\",\n  entities: [Task],\n  httpRoute: (GET, \"/foo/bar\")\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring an API in Wasp\nDESCRIPTION: Example of declaring a custom API endpoint in a Wasp file. The declaration includes the function implementation reference and HTTP route with method and path.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/apis.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\napi fooBar { // APIs and their implementations don't need to (but can) have the same name.\n  fn: import { fooBar } from \"@server/apis.js\",\n  httpRoute: (GET, \"/foo/bar\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using Entities in Queries with TypeScript\nDESCRIPTION: Demonstrates the use of Entities in Query implementations with TypeScript, including type annotations for improved full-stack type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/queries.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Task } from 'wasp/entities'\nimport { type GetAllTasks, type GetFilteredTasks } from 'wasp/server/operations'\n\nexport const getAllTasks: GetAllTasks<void, Task[]> = async (args, context) => {\n  return context.entities.Task.findMany({})\n}\n\nexport const getFilteredTasks: GetFilteredTasks<\n  Pick<Task, 'isDone'>,\n  Task[]\n> = async (args, context) => {\n  return context.entities.Task.findMany({\n    where: { isDone: args.isDone },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Worker Function in TypeScript\nDESCRIPTION: TypeScript implementation of the worker function with type definitions for input, output, and context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/jobs.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type MySpecialJob } from 'wasp/server/jobs'\nimport { type Task } from 'wasp/entities'\n\ntype Input = { name: string; }\ntype Output = { tasks: Task[]; }\n\nexport const foo: MySpecialJob<Input, Output> = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Full-Stack Web App Configuration in Wasp\nDESCRIPTION: Basic Wasp configuration file that sets up a ToDo application with authentication and routing. Demonstrates built-in auth support with multiple methods and basic page routing setup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-12-08-fast-fullstack-chatgpt.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  title: \"ToDo App\",/* visible in tab */\n\n  auth: {/* full-stack auth out-of-the-box */\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      usernameAndPassword: {},\n      google: {}\n    }\n  }\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n\t/* import your React code */\n  component: import Main from \"@client/Main.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Entity in Prisma for Wasp Internal Authentication\nDESCRIPTION: Presents the underlying Prisma model for the Wasp-managed 'Auth' entity. Used to connect business logic users to authentication identities and sessions. Contains fields for internal unique ID, user linkage, and relations to auth identities and sessions. Modified internally by Wasp, not intended for direct modification by app developers.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_18\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Auth {\n  id         String         @id @default(uuid())\n  userId     Int?           @unique\n  // Wasp injects this relation on the User entity as well\n  user       User?          @relation(fields: [userId], references: [id], onDelete: Cascade)\n  identities AuthIdentity[]\n  sessions   Session[]\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring CRUD Operations for Tasks in Wasp\nDESCRIPTION: This code snippet demonstrates how to declare CRUD operations for the Task entity in Wasp. It enables getAll, get, create, and update operations, with custom implementation for the create operation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/crud.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\ncrud Tasks {\n  entity: Task,\n  operations: {\n    getAll: {\n      isPublic: true, // by default only logged in users can perform operations\n    },\n    get: {},\n    create: {\n      overrideFn: import { createTask } from \"@src/tasks.js\",\n    },\n    update: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Database Seed Function - TypeScript\nDESCRIPTION: Implements an async development seed function in TypeScript, creating a user and seeding a task using imported helpers, with type safety from Prisma and Wasp types. Dependencies: PrismaClient, AuthUser, action and helper imports. Parameters include Prisma client, strongly-typed user data, and entities mapping. Returns created AuthUser object. Uses TypeScript generics for safer providerData construction.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/backends.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { createTask } from './actions.js'\nimport { sanitizeAndSerializeProviderData } from 'wasp/server/auth'\nimport { type AuthUser } from 'wasp/auth'\nimport { PrismaClient } from '@prisma/client'\n\nexport const devSeedSimple = async (prisma: PrismaClient) => {\n  const user = await createUser(prisma, {\n    username: 'RiuTheDog',\n    password: 'bark1234',\n  })\n\n  await createTask(\n    { description: 'Chase the cat', isDone: false },\n    { user, entities: { Task: prisma.task } }\n  )\n};\n\nasync function createUser(\n  prisma: PrismaClient,\n  data: { username: string, password: string }\n): Promise<AuthUser> {\n  const newUser = await prisma.user.create({\n    data: {\n      auth: {\n        create: {\n          identities: {\n            create: {\n              providerName: 'username',\n              providerUserId: data.username,\n              providerData: sanitizeAndSerializeProviderData<'username'>({\n                hashedPassword: data.password\n              }),\n            },\n          },\n        },\n      },\n    },\n  })\n\n  return newUser\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Database Schema Using Prisma - Prisma\nDESCRIPTION: This Prisma code defines the application's database schema directly, now required in Wasp v0.14.0 and later. It includes a datasource for PostgreSQL with a connection URL sourced from environment variables, a generator section for Prisma Client JS, and explicit model definitions for User and Task. The model fields and relations mirror those previously defined in the .wasp file. Dependencies include Prisma and PostgreSQL; the environment must provide DATABASE_URL. This schema is the source of truth, and changes here directly influence the database and generated client code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id       Int @id @default(autoincrement())\n  tasks    Task[]\n}\n\nmodel Task {\n  id          Int @id @default(autoincrement())\n  description String\n  isDone      Boolean\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Signup Fields on Server in Wasp main.wasp (TypeScript)\nDESCRIPTION: Same as the JavaScript variant, this config snippet imports a TypeScript-based implementation of userSignupFields for custom validation in the usernameAndPassword auth method. The import uses a .ts file path. Integrates tightly with the Wasp application and must match exported server-side fields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_20\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  // ...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/signup\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Auth in Wasp (JavaScript)\nDESCRIPTION: This snippet demonstrates a \"main.wasp\" file configured for GitHub OAuth authentication in JavaScript. It specifies the version, app title, user entity, and the use of custom implementation for configuration and signup field mapping via imports from the JavaScript authentication module. The config is extensible and expects that the file paths reference valid JS definitions. The application will redirect users to /login if authentication fails.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/github.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/github.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/github.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Fields Using Zod in JavaScript\nDESCRIPTION: Example of using the Zod validation library to validate the address field in JavaScript, providing detailed error messages based on validation rules.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\nimport * as z from 'zod'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: (data) => {\n    const AddressSchema = z\n      .string({\n        required_error: 'Address is required',\n        invalid_type_error: 'Address must be a string',\n      })\n      .min(10, 'Address must be at least 10 characters long')\n    const result = AddressSchema.safeParse(data.address)\n    if (result.success === false) {\n      throw new Error(result.error.issues[0].message)\n    }\n    return result.data\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Calling Wasp Queries from Client (JavaScript)\nDESCRIPTION: Demonstrates how to import and call defined Wasp queries directly from client-side JavaScript code. Queries are imported from `wasp/client/operations`. Authentication is handled automatically by Wasp if a user is logged in.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/queries.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { getAllTasks, getFilteredTasks } from 'wasp/client/operations'\n\n// ...\n\nconst allTasks = await getAllTasks()\nconst doneTasks = await getFilteredTasks({ isDone: true })\n```\n\n----------------------------------------\n\nTITLE: Accessing User in MainPage Component with JavaScript\nDESCRIPTION: Updates the MainPage component to receive the user object as a prop when authenticated. This allows the component to access user information for personalization.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/07-auth.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// highlight-next-line\nexport const MainPage = ({ user }) => {\n  // Do something with the user\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Usage in Actions Configuration\nDESCRIPTION: Wasp configuration showing how to declare Entity usage in Actions for both JavaScript and TypeScript implementations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/actions.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\naction createTask {\n  fn: import { createTask } from \"@src/actions.js\",\n  entities: [Task]\n}\n\naction markTaskAsDone {\n  fn: import { markTaskAsDone } from \"@src/actions.js\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Action for Generating New Ideas in TypeScript\nDESCRIPTION: This extensive TypeScript function implements the server action for generating new tweet ideas. It fetches tweets from favorite users, processes them, generates new ideas using GPT, and stores the results in the database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { \n\tEmbedIdea,\n\tGenerateNewIdeas // < ---- add this type here -----\n } from '@wasp/actions/types';\n// ... other imports ...\nimport { generateIdeas } from './chain.js'; // < ---- this too -----\nimport { Rettiwt } from 'rettiwt-api'; // < ---- and this here -----\n\nconst twitter = Rettiwt({ // < ---- and this -----\n  kdt: process.env.KDT!,\n  twid: process.env.TWID!,\n  ct0:  process.env.CT0!,\n  auth_token: process.env.AUTH_TOKEN!,\n}); \n\n//... other stuff ...\n\nexport const generateNewIdeas: GenerateNewIdeas<unknown, void> = async (_args, context) => {\n\ttry {\n    // get the logged in user that Wasp passes to the action via the context\n    const user = context.user\n\n    if (!user) {\n      throw new HttpError(401, 'User is not authorized');\n    }\n\n      for (let h = 0; h < user.favUsers.length; h++) {\n        const favUser = user.favUsers[h];\n        const oneDayFromNow = new Date(Date.now() + 24 * 60 * 60 * 1000);\n        // convert oneDayFromNow to format YYYY-MM-DD\n        const endDate = oneDayFromNow.toISOString().split('T')[0];\n\n        // find the most recent tweet from the favUser\n        const mostRecentTweet = await context.entities.Tweet.findFirst({\n          where: {\n            authorUsername: favUser,\n          },\n          orderBy: {\n            tweetedAt: 'desc',\n          },\n        });\n\n        console.log('mostRecentTweet: ', mostRecentTweet)\n\n        const favUserTweets = await twitter.tweets.getTweets({\n          fromUsers: [favUser],\n          sinceId: mostRecentTweet?.tweetId || undefined, // get tweets since the most recent tweet if it exists\n          endDate: endDate, // endDate in format YYYY-MM-DD\n        });\n\n        const favUserTweetTexts = favUserTweets.list\n\n        for (let i = 0; i < favUserTweetTexts.length; i++) {\n          const tweet = favUserTweetTexts[i];\n\n          const existingTweet = await context.entities.User.findFirst({\n            where: {\n              id: user.id,\n            },\n            select: {\n              originalTweets: {\n                where: {\n                  tweetId: tweet.id,\n                },\n              },\n            },\n          });\n\n          /** \n           * If the tweet already exists in the database, skip generating drafts and ideas for it.\n           */\n          if (existingTweet) {\n            console.log('tweet already exists in db, skipping generating drafts...');\n            continue;\n          }\n          \n          /**\n           * this is where the magic happens\n           */\n          const draft = await generateIdeas(tweet.fullText, user.username);\n          console.log('draft: ', draft);\n\n          const originalTweet = await context.entities.Tweet.create({\n            data: {\n              tweetId: tweet.id,\n              content: tweet.fullText,\n              authorUsername: favUser,\n              tweetedAt: new Date(tweet.createdAt),\n              userId: user.id\n            },\n          });\n\n          let newTweetIdeas = draft.newTweetIdeas.split('\\n');\n          newTweetIdeas = newTweetIdeas\n            .filter((idea) => idea.trim().length > 0)\n            .map((idea) => {\n              // remove all dashes that are not directly followed by a letter\n              idea = idea.replace(/-(?![a-zA-Z])/g, '');\n              idea = idea.replace(/\"/g, '');\n              idea = idea.replace(/{/g, '');\n              idea = idea.replace(/}/g, '');\n              // remove hashtags and the words that follow them\n              idea = idea.replace(/#[a-zA-Z0-9]+/g, '');\n              idea = idea.replace(/^\\s*[\\r\\n]/gm, ''); // remove new line breaks\n              idea = idea.trim();\n              // check if last character contains punctuation and if not add a period\n              if (idea.length > 1 && !idea[idea.length - 1].match(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g)) {\n                idea += '.';\n              }\n              return idea;\n            });\n          for (let j = 0; j < newTweetIdeas.length; j++) {\n            const newTweetIdea = newTweetIdeas[j];\n            const newIdea = await context.entities.GeneratedIdea.create({\n              data: {\n                content: newTweetIdea,\n                originalTweetId: originalTweet.id,\n                userId: user.id\n              },\n            });\n            console.log('newIdea saved to DB: ', newIdea);\n          }\n\n          const interestingTweetDraft = await context.entities.TweetDraft.create({\n            data: {\n              content: draft.interestingTweet,\n              originalTweetId: originalTweet.id,\n              notes: draft.notes,\n              userId: user.id\n            },\n          });\n\n          console.log('interestingTweetDraft saved to DB: ', interestingTweetDraft);\n\n          // create a delay to avoid rate limiting\n          await new Promise((resolve) => setTimeout(resolve, 1000));\n\n        }\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n\n  } catch (error: any) {\n    console.log('error', error);\n    throw new HttpError(500, error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing OAuth Access Token in Wasp\nDESCRIPTION: Demonstrates how to refresh an OAuth access token using the Google OAuth provider as an example. This code can be used in the onAfterLogin hook to refresh the token when it expires.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/auth-hooks.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { google } from 'wasp/server/auth'\n\nexport const onAfterLogin = async ({ oauth }) => {\n  if (oauth.provider === 'google' && oauth.tokens.refreshToken !== null) {\n    const newTokens = await google.oAuthClient.refreshAccessToken(\n      oauth.tokens.refreshToken\n    )\n    log('new tokens', newTokens)\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OnAfterLoginHook } from 'wasp/server/auth'\nimport { google } from 'wasp/server/auth'\n\nexport const onAfterLogin: OnAfterLoginHook = async ({ oauth }) => {\n  if (oauth.provider === 'google' && oauth.tokens.refreshToken !== null) {\n    const newTokens = await google.oAuthClient.refreshAccessToken(\n      oauth.tokens.refreshToken\n    )\n    log('new tokens', newTokens)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Functionality in React\nDESCRIPTION: Demonstrates how to create a logout button component using the provided logout action from Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { logout } from 'wasp/client/auth'\n\nconst LogoutButton = () => {\n  return <button onClick={logout}>Logout</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Actions on Client or Server in TypeScript\nDESCRIPTION: Demonstrates how to import a declared Action for use on either the client or server side in TypeScript code, including importing the type for server-side implementations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Use it on the client\nimport { createFoo } from 'wasp/client/operations'\n\n// Use it on the server\nimport { createFoo } from 'wasp/server/operations'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateFoo } from 'wasp/server/operations'\n```\n\n----------------------------------------\n\nTITLE: Using Task Entity Type in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the Task entity type in TypeScript, including defining a function that works with the Task type.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/entities.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from 'wasp/entities'\n\nconst task: Task = { ... }\n\n// You can also define functions for working with entities\nfunction getInfoMessage(task: Task): string {\n  const isDoneText = task.isDone ? \"is done\" : \"is not done\"\n  return `Task '${task.description}' is ${isDoneText}.`\n}\n```\n\n----------------------------------------\n\nTITLE: Using Actions in a React Component (TypeScript)\nDESCRIPTION: Shows how to use Actions within a React component in TypeScript. It includes type annotations for props and demonstrates Action usage in event handlers.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\n// highlight-next-line\nimport { useQuery, getTask, markTaskAsDone } from 'wasp/client/operations'\n\nexport const TaskPage = ({ id }: { id: number }) => {\n  const { data: task } = useQuery(getTask, { id })\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>\n  }\n\n  const { description, isDone } = task\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n      {isDone || (\n        // highlight-next-line\n        <button onClick={() => markTaskAsDone({ id })}>Mark as done.</button>\n      )}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Create Task Implementation (TypeScript)\nDESCRIPTION: This TypeScript implementation of a custom createTask function includes proper type definitions and overrides the default CRUD behavior to ensure tasks are connected to the authenticated user.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/crud.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { type Tasks } from 'wasp/server/crud'\nimport { type Task } from 'wasp/entities'\nimport { HttpError } from 'wasp/server'\n\ntype CreateTaskInput = { description: string; isDone: boolean }\n\nexport const createTask: Tasks.CreateAction<CreateTaskInput, Task> = async (\n  args,\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(401, 'User not authenticated.')\n  }\n\n  const { description, isDone } = args\n  const { Task } = context.entities\n\n  return await Task.create({\n    data: {\n      description,\n      isDone,\n      // highlight-start\n      // Connect the task to the user that is creating it\n      user: {\n        connect: {\n          id: context.user.id,\n        },\n      },\n      // highlight-end\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity - Wasp Language\nDESCRIPTION: Defines the primary user entity for the application's business logic in Wasp's entity modeling syntax. This entity is owned and extendable by the developer and normally includes a user ID plus any additional fields needed. Dependencies: Wasp/PSL entity modeling. Inputs: none. Outputs: entity type for user storage. Modification of the fields, types, or relations is permitted as the application requires.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/entities.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\\n  id Int @id @default(autoincrement())\\n  // Any other fields you want to store about the user\\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup and Login in React (JavaScript)\nDESCRIPTION: This snippet demonstrates how to implement a signup form in React using Wasp's authentication actions. It includes handling form submission, calling the signup and login actions, and basic error handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/username-and-pass.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport signup from '@wasp/auth/signup'\nimport login from '@wasp/auth/login'\n\nimport { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\n\nexport function Signup() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState(null)\n  const history = useHistory()\n\n  async function handleSubmit(event) {\n    event.preventDefault()\n    try {\n      await signup({\n        username,\n        password,\n      })\n      await login(username, password)\n      history.push(\"/\")\n    } catch (error) {\n      setError(error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* ... */}\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onAfterSignup Hook in JavaScript\nDESCRIPTION: Implementation of the onAfterSignup hook in JavaScript, demonstrating how to perform actions after user signup such as storing OAuth tokens or sending welcome emails.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/auth-hooks.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const onAfterSignup = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  const count = await prisma.user.count()\n  console.log('number of users after', count)\n  console.log('user object', user)\n\n  // If this is an OAuth signup, you have access to the OAuth tokens and the uniqueRequestId\n  if (oauth) {\n    console.log('accessToken', oauth.tokens.accessToken)\n    console.log('uniqueRequestId', oauth.uniqueRequestId)\n\n    const id = oauth.uniqueRequestId\n    const data = someKindOfStore.get(id)\n    if (data) {\n      console.log('saved data for the ID', data)\n    }\n    someKindOfStore.delete(id)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Action in JavaScript\nDESCRIPTION: Implementation of an action in JavaScript showing the basic function structure with args and context parameters.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/actions.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport const createFoo = (args, context) => {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp on Linux/OSX/WSL\nDESCRIPTION: Command to download and install Wasp using the official installer script\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/introduction/quick-start.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Auth in Wasp (TypeScript)\nDESCRIPTION: This Wasp file configures GitHub OAuth authentication for a TypeScript-based app. It is nearly identical to the JavaScript example but points to TypeScript source files for the provider configuration and signup field extraction. The imports must reference .ts modules that export the required functions/objects. Handles user authentication errors with a redirect to '/login'.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/github.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/github.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/github.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Custom HTTP Errors from Query (JavaScript)\nDESCRIPTION: Demonstrates how to throw a custom `HttpError` from a Wasp query's server-side implementation in JavaScript. This allows sending specific status codes, messages, and data to the client, which is useful for controlled error handling instead of generic 500 errors.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/queries.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const getAllTasks = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Prisma Schema\nDESCRIPTION: Creates a basic User entity model in Prisma schema that will be used for authentication purposes. This is the foundation for user management in the application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/07-auth.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\n// ...\n\nmodel User {\n  id Int @id @default(autoincrement())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing React Component with URL Parameter Access (TypeScript)\nDESCRIPTION: Provides the implementation for the `HelloPage` component in `src/HelloPage.tsx`. This functional React component accesses the URL parameter `name` using `props.match.params.name`. It uses `RouteComponentProps` from `react-router-dom` for type safety on the props, specifically defining the shape of the `params` object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/03-pages.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/HelloPage.tsx\"\nimport { RouteComponentProps } from 'react-router-dom'\n\nexport const HelloPage = (\n  props: RouteComponentProps<{ name: string }>\n) => {\n  return <div>Here's {props.match.params.name}!</div>\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing SignupForm with Additional Fields (React + TypeScript)\nDESCRIPTION: Customizes Wasp's SignupForm component by passing an array of additionalFields in a React TypeScript component, mixing both object-based field descriptors and render functions for more flexible UI composition. Requires the Wasp client auth library and React. Inputs are user-provided signup form values; outputs are extensible signup forms with validation and error display for each custom field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  SignupForm,\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        /* The address field is defined using an object */\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        /* The phone number is defined using a render function */\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing User Signup and GitHub OAuth Scopes (TypeScript) - TypeScript\nDESCRIPTION: Implements 'userSignupFields' as a function using Wasp's 'defineUserSignupFields', extracting 'username' and 'displayName' from the OAuth response. 'getConfig' returns the scopes array for the GitHub provider. This code depends on 'wasp/server/auth', expects GitHub profile data with a 'profile.name', and links the output to the Wasp auth system. Place this in 'src/auth/github.ts'.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/github.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  username: () => \"hardcoded-username\",\n  displayName: (data: any) => data.profile.name,\n})\n\nexport function getConfig() {\n  return {\n    scopes: ['user'],\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing createTask Action in JavaScript\nDESCRIPTION: JavaScript implementation of the createTask Action that uses the provided context to create a new Task entity in the database with the description from the arguments.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/06-actions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const createTask = async (args, context) => {\n  return context.entities.Task.create({\n    data: { description: args.description },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Setup and Middleware Functions in Wasp (JavaScript)\nDESCRIPTION: Defines the `server` field using a JavaScript module, specifying `setupFn` and `middlewareConfigFn` for server customization. These functions are imported from JavaScript modules and executed during server startup, enabling user-defined initialization and middleware configuration. Inputs include app-level details and import statements; outputs are the hooked server lifecycle, with the main limitation being Express/Node.js compatibility for imported functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/server-config.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  server: {\n    setupFn: import { mySetupFunction } from \"@src/myServerSetupCode.js\",\n    middlewareConfigFn: import { myMiddlewareConfigFn } from \"@src/myServerSetupCode.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signup in JavaScript\nDESCRIPTION: Implements a custom signup function in JavaScript that creates a user with username/password authentication. It demonstrates how to use Wasp's auth helper functions to create a user with an identity provider.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/entities/entities.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  createUser,\n} from 'wasp/server/auth'\n\nexport const signup = async (args, { entities: { User } }) => {\n  try {\n    // Provider ID is a combination of the provider name and the provider user ID\n    // And it is used to uniquely identify the user in your app\n    const providerId = createProviderId('username', args.username)\n    // sanitizeAndSerializeProviderData hashes the password and returns a JSON string\n    const providerData = await sanitizeAndSerializeProviderData({\n      hashedPassword: args.password,\n    })\n\n    await createUser(\n      providerId,\n      providerData,\n      // Any additional data you want to store on the User entity\n      {}\n    )\n\n    // This is equivalent to:\n    // await User.create({\n    //   data: {\n    //     auth: {\n    //       create: {\n    //         identities: {\n    //             create: {\n    //                 providerName: 'username',\n    //                 providerUserId: args.username\n    //                 providerData,\n    //             },\n    //         },\n    //       }\n    //     },\n    //   }\n    // })\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Action in TypeScript\nDESCRIPTION: Example of implementing a typed action in TypeScript with input and output type specifications.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/actions.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreateFoo } from \"@wasp/actions/types\";\n\ntype Foo = // ...\n\nexport const createFoo: CreateFoo<{ bar: string }, Foo> = (args, context) => {\n  // implementation\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Google Auth Config Function - JavaScript\nDESCRIPTION: Implements the getConfig function for Google OAuth in JavaScript, exporting required scopes as an array. No dependencies; referenced directly by main.wasp's configFn import. No input parameters. Output is a config object compatible with Wasp's Google OAuth handler.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/google.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Component with Common Layout (JavaScript)\nDESCRIPTION: JavaScript implementation of a root component that defines a common layout for the application with header, footer, and content area using React Router's Outlet.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/client-config.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Outlet } from 'react-router-dom'\n\nexport default function Root() {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      // highlight-next-line\n      <Outlet />\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord Auth in Wasp File\nDESCRIPTION: This snippet shows how to configure the auth object in the main.wasp file to enable Discord authentication. It specifies the User entity and enables the Discord auth method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/discord.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      discord: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Root Route and Main Page in Wasp (JavaScript)\nDESCRIPTION: Declares the root route (`/`) named `RootRoute` and associates it with the `MainPage`. The `MainPage` definition specifies that its implementation is imported from the `MainPage` export in `src/MainPage.jsx` using standard JS import syntax. The `@src` alias refers to the `src` directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/03-pages.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  // We specify that the React implementation of the page is exported from \n  // `src/MainPage.jsx`. This statement uses standard JS import syntax.\n  // Use `@src` to reference files inside the `src` folder.\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signup Action (JavaScript)\nDESCRIPTION: This JavaScript implementation of a custom signup action demonstrates how to create a new user with the provided username and password. It includes placeholders for custom logic before and after the signup process.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/username-and-pass.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nexport const signUp = async (args, context) => {\n  // Your custom code before sign-up.\n  // ...\n\n  const newUser = context.entities.User.create({\n    data: {\n      username: args.username,\n      password: args.password // password hashed automatically by Wasp! 🐝\n    }\n  })\n\n  // Your custom code after sign-up.\n  // ...\n  return newUser\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Setup and Middleware Functions in Wasp (TypeScript)\nDESCRIPTION: Defines the `server` field using a TypeScript module, specifying `setupFn` and `middlewareConfigFn` for server extensibility. Both functions are imported from TypeScript modules and executed by the Wasp framework at the appropriate server lifecycle stages. The key parameters are the function imports, which must comply with Wasp and Express/Node.js requirements.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/server-config.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  server: {\n    setupFn: import { mySetupFunction } from \"@src/myServerSetupCode.js\",\n    middlewareConfigFn: import { myMiddlewareConfigFn } from \"@src/myServerSetupCode.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Middleware Customization in JavaScript\nDESCRIPTION: This JavaScript code defines the `serverMiddlewareFn` function, which is imported in the Wasp file to customize global middleware. It takes the default `middlewareConfig` Map as input, modifies the 'cors' entry to allow additional origins besides the default `config.frontendUrl`, and returns the modified map. This demonstrates how to adjust existing global middleware settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/middleware-config.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport cors from 'cors'\nimport { config } from 'wasp/server'\n\nexport const serverMiddlewareFn = (middlewareConfig) => {\n  // Example of adding extra domains to CORS.\n  middlewareConfig.set('cors', cors({ origin: [config.frontendUrl, 'https://example1.com', 'https://example2.com'] }))\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Queries with Entities (TypeScript)\nDESCRIPTION: TypeScript implementation of queries using entities, showing type annotations for full-stack type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/queries.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport { type Task } from 'wasp/entities'\nimport { type GetAllTasks, type GetFilteredTasks } from 'wasp/server/operations'\n\nexport const getAllTasks: GetAllTasks<void, Task[]> = async (args, context) => {\n  return context.entities.Task.findMany({})\n}\n\nexport const getFilteredTasks: GetFilteredTasks<\n  Pick<Task, 'isDone'>,\n  Task[]\n> = async (args, context) => {\n  return context.entities.Task.findMany({\n    where: { isDone: args.isDone },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeOAuthRedirect Hook in TypeScript\nDESCRIPTION: TypeScript implementation of the onBeforeOAuthRedirect hook with type definitions and pre-OAuth redirect logic.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/auth-hooks.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OnBeforeOAuthRedirectHook } from 'wasp/server/auth'\n\nexport const onBeforeOAuthRedirect: OnBeforeOAuthRedirectHook = async ({\n  url,\n  oauth,\n  prisma,\n  req,\n}) => {\n  console.log('query params before oAuth redirect', req.query)\n\n  // Saving query params for later use in onAfterSignup or onAfterLogin hooks\n  const id = oauth.uniqueRequestId\n  someKindOfStore.set(id, req.query)\n\n  return { url }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating MainPage Component with NewTaskForm in JavaScript\nDESCRIPTION: This snippet shows how to integrate the NewTaskForm component into the MainPage component in JavaScript. It also demonstrates the use of the getTasks query.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/06-actions.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  createTask,\n  getTasks,\n  useQuery\n} from 'wasp/client/operations'\n\nconst MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      <NewTaskForm />\n\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Verification Route in Wasp\nDESCRIPTION: Configures the email verification route in Wasp to handle email verification flow.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/email.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\nemailVerification: {\n    clientRoute: EmailVerificationRoute,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User-Task Relation in Prisma Schema\nDESCRIPTION: Establishes a one-to-many relationship between User and Task entities in the Prisma schema. This allows tasks to be associated with specific users, enabling per-user task management.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/07-auth.md#2025-04-22_snippet_10\n\nLANGUAGE: prisma\nCODE:\n```\n// ...\n\nmodel User {\n  id    Int    @id @default(autoincrement())\n  // highlight-next-line\n  tasks Task[]\n}\n\nmodel Task {\n  id          Int     @id @default(autoincrement())\n  description String\n  isDone      Boolean @default(false)\n  // highlight-next-line\n  user        User?   @relation(fields: [userId], references: [id])\n  // highlight-next-line\n  userId      Int?\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side WebSocket Implementation in JavaScript\nDESCRIPTION: JavaScript implementation of the WebSocket server handler function, including connection and message handling with Socket.IO.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/web-sockets.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v4 as uuidv4 } from 'uuid'\nimport { getFirstProviderUserId } from 'wasp/auth'\n\nexport const webSocketFn = (io, context) => {\n  io.on('connection', (socket) => {\n    const username = getFirstProviderUserId(socket.data.user) ?? 'Unknown'\n    console.log('a user connected: ', username)\n\n    socket.on('chatMessage', async (msg) => {\n      console.log('message: ', msg)\n      io.emit('chatMessage', { id: uuidv4(), username, text: msg })\n      // You can also use your entities here:\n      // await context.entities.SomeEntity.create({ someField: msg })\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication UI Components\nDESCRIPTION: React components implementing the login and signup forms with routing and layout.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/username-and-pass.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from \"@wasp/auth/forms/Login\";\nimport { SignupForm } from \"@wasp/auth/forms/Signup\";\nimport { Link } from \"react-router-dom\";\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Don't have an account yet? <Link to=\"/signup\">go to signup</Link>.\n      </span>\n    </Layout>\n  );\n}\n\nexport function Signup() {\n  return (\n    <Layout>\n      <SignupForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </Layout>\n  );\n}\n\nexport function Layout({ children }) {\n  return (\n    <div className=\"w-full h-full bg-white\">\n      <div className=\"min-w-full min-h-[75vh] flex items-center justify-center\">\n        <div className=\"w-full h-full max-w-sm p-5 bg-white\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth UI Components\nDESCRIPTION: React components implementing the login and signup forms using Wasp's authentication UI components and React Router.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/username-and-pass.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm, SignupForm } from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Don't have an account yet? <Link to=\"/signup\">go to signup</Link>.\n      </span>\n    </Layout>\n  )\n}\n\nexport function Signup() {\n  return (\n    <Layout>\n      <SignupForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </Layout>\n  )\n}\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"h-full w-full bg-white\">\n      <div className=\"flex min-h-[75vh] min-w-full items-center justify-center\">\n        <div className=\"h-full w-full max-w-sm bg-white p-5\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Database Migrations and SQLite Files - Bash\nDESCRIPTION: This bash snippet deletes old migration folders and triggers Wasp's clean command to remove all SQLite-specific artifacts before switching to PostgreSQL. Dependencies: shell access, permissions to delete files, and existing Wasp CLI. Inputs: migration folder path and wasp clean command; outputs: cleaned workspace with old migrations removed. Run before initializing new migrations for a new backend.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/backends.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrm -r migrations/\nwasp clean\n```\n\n----------------------------------------\n\nTITLE: Creating Authenticated Task Actions with Wasp in TypeScript\nDESCRIPTION: This TypeScript function securely creates a new Task entity for a user, enforcing authentication by checking for `context.user`. Key dependencies include Wasp types, entity helpers, and HttpError for error signaling. `CreateTaskPayload` restricts inputs to objects with a `description` string. The function returns the newly created Task or throws a 403 error if the user isn't authenticated. Type definitions enhance safety and development experience.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { type Task } from 'wasp/entities'\nimport { type CreateTask } from 'wasp/server/operations'\nimport { HttpError } from 'wasp/server'\n\ntype CreateTaskPayload = Pick<Task, 'description'>\n\nexport const createTask: CreateTask<CreateTaskPayload, Task> = async (\n  args,\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(403)\n  }\n\n  const Task = context.entities.Task\n  return Task.create({\n    data: {\n      description: args.description,\n      user: {\n        connect: { id: context.user.id },\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query in JavaScript\nDESCRIPTION: Shows how to implement a query function in JavaScript with the two standard parameters: args and context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/queries.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getFoo = (args, context) => {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Task Entity with Prisma\nDESCRIPTION: This Prisma schema snippet defines a `Task` model within the `schema.prisma` file. It includes an auto-incrementing integer `id` as the primary key, a required `description` string, and a boolean `isDone` flag defaulting to false. This model represents the structure of the 'Task' table in the database managed by Wasp and Prisma.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/04-entities.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\n// ...\n\nmodel Task {\n    id          Int     @id @default(autoincrement())\n    description String\n    isDone      Boolean @default(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Queries with JavaScript\nDESCRIPTION: Explains how to handle errors in Queries using JavaScript, demonstrating the use of HttpError for passing additional error information to the client.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/queries.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const getAllTasks = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Component with URL Parameters\nDESCRIPTION: This snippet demonstrates how to create a React component that uses URL parameters passed from the Wasp route.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/03-pages.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst HelloPage = (props) => {\n  return <div>Here's {props.match.params.name}!</div>\n}\n\nexport default HelloPage\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for Tailwind in Wasp\nDESCRIPTION: Sets up the PostCSS configuration file to enable Tailwind and Autoprefixer in a Wasp project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/css-frameworks.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth Pages with React Components in TypeScript\nDESCRIPTION: TypeScript version of the authentication pages implementation with proper type definitions for the Layout component props.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/email.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  LoginForm,\n  SignupForm,\n  VerifyEmailForm,\n  ForgotPasswordForm,\n  ResetPasswordForm,\n} from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"h-full w-full bg-white\">\n      <div className=\"flex min-h-[75vh] min-w-full items-center justify-center\">\n        <div className=\"h-full w-full max-w-sm bg-white p-5\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side WebSocket Implementation in TypeScript\nDESCRIPTION: TypeScript implementation of the WebSocket server handler with type definitions for events and payloads, providing full-stack type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/web-sockets.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { v4 as uuidv4 } from 'uuid'\nimport { getFirstProviderUserId } from 'wasp/auth'\nimport { type WebSocketDefinition, type WaspSocketData } from 'wasp/server/webSocket'\n\nexport const webSocketFn: WebSocketFn = (io, context) => {\n  io.on('connection', (socket) => {\n    const username = getFirstProviderUserId(socket.data.user) ?? 'Unknown'\n    console.log('a user connected: ', username)\n\n    socket.on('chatMessage', async (msg) => {\n      console.log('message: ', msg)\n      io.emit('chatMessage', { id: uuidv4(), username, text: msg })\n    })\n  })\n}\n\ntype WebSocketFn = WebSocketDefinition<\n  ClientToServerEvents,\n  ServerToClientEvents,\n  InterServerEvents,\n  SocketData\n>\n\ninterface ServerToClientEvents {\n  chatMessage: (msg: { id: string, username: string, text: string }) => void;\n}\n\ninterface ClientToServerEvents {\n  chatMessage: (msg: string) => void;\n}\n\ninterface InterServerEvents {}\n\ninterface SocketData extends WaspSocketData {}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Seeds in WASP DSL - TypeScript\nDESCRIPTION: This snippet illustrates the TypeScript version of configuring database seeding in a Wasp project. It registers a default seed function, 'devSeed', imported from a TypeScript-compatible module into the app's db.seeds array. '@src/dbSeeds.js' must export 'devSeed', and the database seeds then become available to CLI seeding commands. The snippet demonstrates how to structure seeds in a strongly-typed project and can be extended with additional seeds or db configurations as needed.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/backends.md#2025-04-22_snippet_6\n\nLANGUAGE: Wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  db: {\n    seeds: [\n      import devSeed from \"@src/dbSeeds.js\"\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp App with Keycloak Auth\nDESCRIPTION: Main Wasp application configuration showing Keycloak authentication setup with user entity and redirect settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/keycloak.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      keycloak: {\n        configFn: import { getConfig } from \"@src/auth/keycloak.js\",\n        userSignupFields: import { userSignupFields } from \"@src/auth/keycloak.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Auth Components in React\nDESCRIPTION: This snippet defines React components for the authentication pages. It includes a Login component and a Layout component for centering content.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/google.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }) {\n  return (\n    <div className=\"w-full h-full bg-white\">\n      <div className=\"min-w-full min-h-[75vh] flex items-center justify-center\">\n        <div className=\"w-full h-full max-w-sm p-5 bg-white\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Username Identity in Wasp\nDESCRIPTION: This snippet demonstrates how to extract a username from a user object in Wasp. It first accesses the username identity from the user's identities collection, then retrieves the specific ID which contains the actual username string.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/entities/_username-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst usernameIdentity = user.identities.username\n\n// Username that the user used to sign up, e.g. \"fluffyllama\"\nusernameIdentity.id\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Auth in Wasp\nDESCRIPTION: Demonstrates how to enable Google authentication by configuring the auth object in the main Wasp file\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/google.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Safe Job Handler in TypeScript\nDESCRIPTION: TypeScript implementation of a job handler with proper type definitions for input and output.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/jobs.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type MySpecialJob } from 'wasp/server/jobs'\n\ntype Input = { name: string; }\ntype Output = { tasks: Task[]; }\n\nexport const foo: MySpecialJob<Input, Output> = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting a Page with authRequired in Wasp\nDESCRIPTION: Shows how to set the authRequired property on a page declaration to restrict access to authenticated users only.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\npage MainPage {\n  component: import Main from \"@src/pages/Main\",\n  authRequired: true\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Password with Hashing in TypeScript\nDESCRIPTION: Shows how to update a user's password with automatic hashing in TypeScript. It includes type definitions and uses Wasp's helper functions to manage auth identities and update the hashed password.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createProviderId,\n  findAuthIdentity,\n  updateAuthIdentityProviderData,\n  deserializeAndSanitizeProviderData,\n} from 'wasp/server/auth';\nimport { type UpdatePassword } from 'wasp/server/operations'\n\nexport const updatePassword: UpdatePassword<\n  { email: string; password: string },\n  void,\n> = async (args, context) => {\n  const providerId = createProviderId('email', args.email)\n  const authIdentity = await findAuthIdentity(providerId)\n  if (!authIdentity) {\n      throw new HttpError(400, \"Unknown user\")\n  }\n  \n  const providerData = deserializeAndSanitizeProviderData<'email'>(authIdentity.providerData)\n\n  // Updates the password and hashes it automatically.\n  await updateAuthIdentityProviderData(providerId, providerData, {\n      hashedPassword: args.password,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Prisma Data Model for a Todo Application\nDESCRIPTION: This Prisma schema defines the data model for a Task entity in a Todo application. It includes basic fields like ID, description, and completion status. This model is used by Wasp to generate the database schema and provide type-safe database access.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\n// file: schema.prisma\n\nmodel Task { // Your Prisma data model.\n  id          Int     @id @default(autoincrement())\n  description String\n  isDone      Boolean @default(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Create Task Operation in JavaScript\nDESCRIPTION: Custom implementation of the create task operation with user authentication and relation handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/crud.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const createTask = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401, 'User not authenticated.')\n  }\n\n  const { description, isDone } = args\n  const { Task } = context.entities\n\n  return await Task.create({\n    data: {\n      description,\n      isDone,\n      user: {\n        connect: {\n          id: context.user.id,\n        },\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking API Endpoints in Wasp Tests\nDESCRIPTION: Demonstrates how to mock API endpoints for testing components that make HTTP requests. Uses the mockApi helper to specify the HTTP method, path, and response data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/testing.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpMethod } from \"wasp/client\";\n\nmockApi({ method: HttpMethod.Get, path: \"/foor/bar\" }, { res: \"hello\" });\n```\n\n----------------------------------------\n\nTITLE: Implementing Idea Embedding in TypeScript\nDESCRIPTION: Defines a server action for embedding ideas into a Pinecone vector database using OpenAI embeddings. It initializes Pinecone and OpenAI clients, creates a vector store, and adds documents to it.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { EmbedIdea } from '@wasp/actions/types';\nimport type { GeneratedIdea } from '@wasp/entities';\nimport HttpError from '@wasp/core/HttpError.js';\nimport { PineconeStore } from 'langchain/vectorstores/pinecone';\nimport { Document } from 'langchain/document';\nimport { OpenAIEmbeddings } from 'langchain/embeddings/openai';\nimport { PineconeClient } from '@pinecone-database/pinecone';\n\nconst pinecone = new PineconeClient();\nexport const initPinecone = async () => {\n  await pinecone.init({\n    environment: process.env.PINECONE_ENV!,\n    apiKey: process.env.PINECONE_API_KEY!,\n  });\n  return pinecone;\n};\n\nexport const embeddings = new OpenAIEmbeddings({\n  openAIApiKey: process.env.OPENAI_API_KEY,\n});\n\n/**\n * Embeds a single idea into the vector store\n */\nexport const embedIdea: EmbedIdea<{ idea: string }, GeneratedIdea> = async ({ idea }, context) => {\n  if (!context.user) {\n    throw new HttpError(401, 'User is not authorized');\n  }\n\n  console.log('idea: ', idea);\n\n  try {\n    let newIdea = await context.entities.GeneratedIdea.create({\n        data: {\n          content: idea,\n          userId: context.user.id,\n        },\n      });\n    \n\n    if (!newIdea) {\n      throw new HttpError(404, 'Idea not found');\n    }\n\n    const pinecone = await initPinecone();\n\t\t\n    // we need to create an index to save the vector embeddings to\n    // an index is similar to a table in relational database world\n    const availableIndexes = await pinecone.listIndexes();\n    if (!availableIndexes.includes('embeds-test')) {\n      console.log('creating index');\n      await pinecone.createIndex({\n        createRequest: {\n          name: 'embeds-test',\n          // open ai uses 1536 dimensions for their embeddings\n          dimension: 1536, \n        },\n      });\n    }\n\n    const pineconeIndex = pinecone.Index('embeds-test');\n\t\t\n    // the LangChain vectorStore wrapper\n    const vectorStore = new PineconeStore(embeddings, {\n      pineconeIndex: pineconeIndex,\n      namespace: context.user.username,\n    });\n\t\t\n    // create a document with the idea's content to be embedded\n    const ideaDoc = new Document({\n      metadata: { type: 'note' },\n      pageContent: newIdea.content,\n    });\n\t\t\n    // add the document to the vectore store along with its id\n    await vectorStore.addDocuments([ideaDoc], [newIdea.id.toString()]);\n\n    newIdea = await context.entities.GeneratedIdea.update({\n      where: {\n        id: newIdea.id,\n      },\n      data: {\n        isEmbedded: true,\n      },\n    });\n    console.log('idea embedded successfully!', newIdea);\n    return newIdea;\n  } catch (error: any) {\n    throw new Error(error);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth Pages with React Components in JavaScript\nDESCRIPTION: React component implementation for authentication pages including login, signup, email verification and password reset forms using Wasp auth components and Tailwind CSS styling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/email.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  LoginForm,\n  SignupForm,\n  VerifyEmailForm,\n  ForgotPasswordForm,\n  ResetPasswordForm,\n} from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Don't have an account yet? <Link to=\"/signup\">go to signup</Link>.\n      </span>\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Forgot your password? <Link to=\"/request-password-reset\">reset it</Link>.\n      </span>\n    </Layout>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Configuration in Prisma Schema\nDESCRIPTION: Prisma schema configuration for using PostgreSQL as the database provider in Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/backends.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing onAfterLogin Hook in JavaScript and TypeScript\nDESCRIPTION: This hook runs after a user logs in. It receives providerId, user, oauth (optional), prisma, and req as input parameters, and its return value is ignored by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/auth-hooks.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const onAfterLogin = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { OnAfterLoginHook } from 'wasp/server/auth'\n\nexport const onAfterLogin: OnAfterLoginHook = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Required environment variables for Google OAuth integration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/google.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGOOGLE_CLIENT_ID=your-google-client-id\nGOOGLE_CLIENT_SECRET=your-google-client-secret\n```\n\n----------------------------------------\n\nTITLE: Implementing onAfterLogin Hook for Post-Login Actions (TypeScript) - ts\nDESCRIPTION: TypeScript version of the 'onAfterLogin' Wasp auth hook, using strong typing for hook input. Handles post-login steps, including access to OAuth tokens and reconciling pre-saved OAuth flow data. Cleans up used temporary data to prevent memory leaks or stale data issues.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport type { OnAfterLoginHook } from 'wasp/server/auth'\n\nexport const onAfterLogin: OnAfterLoginHook = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  console.log('user object', user)\n\n  // If this is an OAuth signup, you have access to the OAuth tokens and the uniqueRequestId\n  if (oauth) {\n    console.log('accessToken', oauth.tokens.accessToken)\n    console.log('uniqueRequestId', oauth.uniqueRequestId)\n\n    const id = oauth.uniqueRequestId\n    const data = someKindOfStore.get(id)\n    if (data) {\n      console.log('saved data for the ID', data)\n    }\n    someKindOfStore.delete(id)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query in JavaScript\nDESCRIPTION: Shows how to implement a query function in JavaScript with args and context parameters.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/queries.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nexport const getFoo = (args, context) => {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Wasp Development Server\nDESCRIPTION: The wasp start command initiates the development server that watches for file changes and automatically regenerates code and restarts the app. It tracks the working directory and keeps generated code and types in sync with changes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/_WaspStartNote.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwasp start\n```\n\n----------------------------------------\n\nTITLE: Creating a NewTaskForm Component in TypeScript/TSX\nDESCRIPTION: This snippet shows the TypeScript/TSX version of the NewTaskForm component. It includes type annotations for the event handler and proper error handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/06-actions.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst NewTaskForm = () => {\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    try {\n      const target = event.target as HTMLFormElement\n      const description = target.description.value\n      target.reset()\n      await createTask({ description })\n    } catch (err: any) {\n      window.alert('Error: ' + err.message)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"description\" type=\"text\" defaultValue=\"\" />\n      <input type=\"submit\" value=\"Create task\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client in Wasp (JavaScript)\nDESCRIPTION: Basic configuration for the client in a Wasp application using JavaScript. Sets up a root component and client setup function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/client-config.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.jsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server Operations in Wasp\nDESCRIPTION: This snippet defines server-side operations - a query for retrieving recipes and an action for adding recipes. It specifies the implementation files and the entities they interact with, which enables Wasp to provide automatic cache invalidation and type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/introduction/introduction.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nquery getRecipes {\n  fn: import { getRecipes } from \"@src/recipe/operations.ts\",\n  entities: [Recipe],\n}\n\naction addRecipe {\n  fn: import { addRecipe } from \"@src/recipe/operations.ts\",\n  entities: [Recipe],\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Environment Variables\nDESCRIPTION: Example of accessing validated environment variables on the server side using the env object imported from wasp/server. This provides type-safe access to both Wasp-defined and user-defined environment variables.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/env-vars.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from 'wasp/server'\n\nconst stripeApiKey = env.STRIPE_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Migrating Email Access Helper Function\nDESCRIPTION: Demonstrates how to replace the getEmail helper with direct access to user.identities.email.id in both components and server functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getEmail, AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const email = getEmail(user)\n  // ...\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const email = user.identities.email?.id\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tasks with User Authentication in JavaScript\nDESCRIPTION: Demonstrates how to create a task with user authentication using the context.user object in JavaScript. It checks if the user is authenticated and creates a new task associated with the user.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const createTask = async (task, context) => {\n  if (!context.user) {\n    throw new HttpError(403)\n  }\n\n  const Task = context.entities.Task\n  return Task.create({\n    data: {\n      description: task.description,\n      user: {\n        connect: { id: context.user.id },\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Entity in Prisma Schema\nDESCRIPTION: Defines the User entity in the Prisma schema to support authentication in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/07-auth.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\n// ...\n\nmodel User {\n  id Int @id @default(autoincrement())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Auth in Wasp File (JavaScript)\nDESCRIPTION: This snippet shows how to enable Google Authentication in the Wasp configuration file for a JavaScript project. It specifies the User entity and enables Google as an auth method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/google.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Signup Component in React\nDESCRIPTION: React component implementation for handling user signup with username and password, including state management and form submission.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/username-and-pass.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { signup, login } from 'wasp/client/auth'\n\nimport { useState } from 'react'\nimport { useNavigate, Link } from 'react-router-dom'\n\nexport function Signup() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState(null)\n  const navigate = useNavigate()\n\n  async function handleSubmit(event) {\n    event.preventDefault()\n    try {\n      await signup({\n        username,\n        password,\n      })\n      await login(username, password)\n      navigate('/')\n    } catch (error) {\n      setError(error)\n    }\n  }\n\n  return <form onSubmit={handleSubmit}>{/* ... */}</form>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Auth Providers\nDESCRIPTION: Configuration for enabling multiple authentication providers (email, Google, and Github) in Wasp\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/ui.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  //...\n  auth: {\n    methods: {\n      email: {},\n      google: {},\n      github: {},\n    },\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API-Specific Middleware Function in Wasp\nDESCRIPTION: This Wasp configuration snippet shows how to apply custom middleware to a specific API route (`webhookCallback`). Within the `api` declaration, the `middlewareConfigFn` property points to the `webhookCallbackMiddlewareFn` function imported from `@src/apis`. This allows overriding or modifying the middleware stack only for requests matching the defined `httpRoute` (POST /webhook/callback).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/middleware-config.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\napi webhookCallback {\n  fn: import { webhookCallback } from \"@src/apis\",\n  middlewareConfigFn: import { webhookCallbackMiddlewareFn } from \"@src/apis\",\n  httpRoute: (POST, \"/webhook/callback\"),\n  auth: false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Seeds in Wasp (TypeScript)\nDESCRIPTION: Shows how to configure database seeds in the main.wasp file for a TypeScript project. It imports a seed function from an external file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/databases.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  db: {\n    seeds: [\n      import devSeed from \"@src/dbSeeds.js\"\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting a Page with AuthRequired in Wasp\nDESCRIPTION: Shows how to use the authRequired property to restrict access to a page for authenticated users only.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\npage MainPage {\n  component: import Main from \"@src/pages/Main\",\n  authRequired: true\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Global Middleware in Wasp and TypeScript\nDESCRIPTION: This example demonstrates how to customize global middleware for all operations and APIs in a Wasp application using TypeScript. It shows adding extra domains to CORS configuration with proper type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/middleware-config.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  server: {\n    middlewareConfigFn: import { serverMiddlewareFn } from \"@src/serverSetup\"\n  },\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport cors from 'cors'\nimport { config, type MiddlewareConfigFn } from 'wasp/server'\n\nexport const serverMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {\n  // Example of adding an extra domains to CORS.\n  middlewareConfig.set('cors', cors({ origin: [config.frontendUrl, 'https://example1.com', 'https://example2.com'] }))\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User Signup Fields in JavaScript\nDESCRIPTION: Defines additional required fields (address and phone) for user signup using defineUserSignupFields. Includes validation logic for the address field while making phone field optional.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/_user-signup-fields-explainer.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: (data) => {\n    if (!data.address) {\n      throw new Error('Address is required')\n    }\n    return data.address\n  }\n  phone: (data) => data.phone,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Social Auth UI Components in TypeScript\nDESCRIPTION: TypeScript implementation of a login page with pre-built social authentication buttons and custom sign-in links.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/overview.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  GoogleSignInButton,\n  googleSignInUrl,\n  GitHubSignInButton,\n  gitHubSignInUrl,\n} from 'wasp/client/auth'\n\nexport const LoginPage = () => {\n  return (\n    <>\n      <GoogleSignInButton />\n      <GitHubSignInButton />\n      {/* or */}\n      <a href={googleSignInUrl}>Sign in with Google</a>\n      <a href={gitHubSignInUrl}>Sign in with GitHub</a>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LangChain Sequential Chain for Idea Generation in TypeScript\nDESCRIPTION: This code snippet sets up a LangChain sequential chain that uses OpenAI's ChatGPT to generate new ideas based on an example tweet and similar notes from a Pinecone vector store. It includes initialization of Pinecone, similarity search, and two LLM chains for idea generation and tweet drafting.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChatOpenAI } from 'langchain/chat_models/openai';\nimport { LLMChain, SequentialChain } from 'langchain/chains';\nimport { PromptTemplate } from 'langchain/prompts';\nimport { PineconeStore } from 'langchain/vectorstores/pinecone';\nimport { OpenAIEmbeddings } from 'langchain/embeddings/openai';\nimport { PineconeClient } from '@pinecone-database/pinecone';\n\nconst pinecone = new PineconeClient();\nexport const initPinecone = async () => {\n  await pinecone.init({\n    environment: process.env.PINECONE_ENV!,\n    apiKey: process.env.PINECONE_API_KEY!,\n  });\n  return pinecone;\n};\n\nconst embeddings = new OpenAIEmbeddings({\n  openAIApiKey: process.env.OPENAI_API_KEY,\n});\n\nexport const generateIdeas = async (exampleTweet: string, username: string) => {\n  try {\n    // remove quotes and curly braces as not to confuse langchain template parser\n    exampleTweet = exampleTweet.replace(/\"/g, '');\n    exampleTweet = exampleTweet.replace(/{/g, '');\n    exampleTweet = exampleTweet.replace(/}/g, '');\n\n    const pinecone = await initPinecone();\n\n    console.log('list indexes', await pinecone.listIndexes());\n\n    // find the index we created earlier\n    const pineconeIndex = pinecone.Index('embeds-test');\n\n    const vectorStore = new PineconeStore(embeddings, {\n      pineconeIndex: pineconeIndex,\n      namespace: username,\n    });\n\n    //\n    // sequential tweet chain begin --- >\n    //\n    /**\n     * vector store results for notes similar to the original tweet\n     */\n    const searchRes = await vectorStore.similaritySearchWithScore(exampleTweet, 2);\n    console.log('searchRes: ', searchRes);\n    let notes = searchRes\n      .filter((res) => res[1] > 0.7) // filter out strings that have less than %70 similarity\n      .map((res) => res[0].pageContent)\n      .join(' ');\n\n    console.log('\\n\\n similarity search results of our notes-> ', notes);\n\n\t\tif (!notes || notes.length <= 2) {\n      notes = exampleTweet;\n    }\n\n    const tweetLlm = new ChatOpenAI({\n      openAIApiKey: process.env.OPENAI_API_KEY,\n      temperature: 0.8, // 0 - 2 with 0 being more deterministic and 2 being most \"loose\". Past 1.3 the results tend to be more incoherent.\n      modelName: 'gpt-3.5-turbo',\n    });\n\n    const tweetTemplate = `You are an expert idea generator. You will be given a user's notes and your goal is to use this information to brainstorm other novel ideas. \n\n\t  Notes: {notes}\n\t\n\t  Ideas Brainstorm: \n\t  -`;\n\n    const tweetPromptTemplate = new PromptTemplate({\n      template: tweetTemplate,\n      inputVariables: ['notes'],\n    });\n\n    const tweetChain = new LLMChain({\n      llm: tweetLlm,\n      prompt: tweetPromptTemplate,\n      outputKey: 'newTweetIdeas',\n    });\n\n    const interestingTweetTemplate = `You are an expert interesting tweet generator. You will be given some tweet ideas and your goal is to choose one, and write a tweet based on it. Structure the tweet in an informal yet serious tone and do NOT include hashtags in the tweet!\n \n\t  Tweet Ideas: {newTweetIdeas}\n\t  \n\t  Interesting Tweet:`;\n\n    const interestingTweetLlm = new ChatOpenAI({\n      openAIApiKey: process.env.OPENAI_API_KEY,\n      temperature: 1.1,\n      modelName: 'gpt-3.5-turbo',\n    });\n\n    const interestingTweetPrompt = new PromptTemplate({\n      template: interestingTweetTemplate,\n      inputVariables: ['newTweetIdeas'],\n    });\n\n    const interestingTweetChain = new LLMChain({\n      llm: interestingTweetLlm,\n      prompt: interestingTweetPrompt,\n      outputKey: 'interestingTweet',\n    });\n\n    const overallChain = new SequentialChain({\n      chains: [tweetChain, interestingTweetChain],\n      inputVariables: ['notes'],\n      outputVariables: ['newTweetIdeas', 'interestingTweet'],\n      verbose: false,\n    });\n\n    type ChainDraftResponse = {\n      newTweetIdeas: string;\n      interestingTweet: string;\n      notes: string;\n    };\n\n    const res1 = (await overallChain.call({\n      notes,\n    })) as ChainDraftResponse;\n\n    return {\n      ...res1,\n      notes,\n    };\n  } catch (error: any) {\n    throw new Error(error);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Wasp 0.12.x\nDESCRIPTION: Illustrates the simplified authentication setup in `main.wasp` for Wasp version 0.12.x. Wasp now internally manages the necessary authentication models and fields. Developers only need to define their application-specific `User` entity (without mandatory auth fields like password) and specify it in the `auth.userEntity` setting. Auth methods like GitHub are enabled in the `auth.methods` block. The `externalAuthEntity` property and manual definition of fields like `password` or `SocialLogin` relations are no longer required.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.12.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\nentity User {=psl\n  id Int @id @default(autoincrement())\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email with Wasp Auth in JavaScript React Component\nDESCRIPTION: Illustrates the use of Wasp's 'getEmail' utility within a JavaScript React component to fetch and render user email addresses associated with tasks. Requires importing from 'wasp/auth' and including 'auth' and 'identities' in user objects. Displays the user's email if available under the email-based auth method or null otherwise.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getEmail } from 'wasp/auth'\n\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {getEmail(task.user)}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing API-specific Middleware in Wasp and TypeScript\nDESCRIPTION: This example demonstrates how to customize middleware for a specific API route in a Wasp application using TypeScript. It replaces the express.json middleware with express.raw for a webhook callback.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/middleware-config.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napi webhookCallback {\n  fn: import { webhookCallback } from \"@src/apis\",\n  middlewareConfigFn: import { webhookCallbackMiddlewareFn } from \"@src/apis\",\n  httpRoute: (POST, \"/webhook/callback\"),\n  auth: false\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { type WebhookCallback } from 'wasp/server/api'\nimport { type MiddlewareConfigFn } from 'wasp/server'\n\nexport const webhookCallback: WebhookCallback = (req, res, _context) => {\n  res.json({ msg: req.body.length })\n}\n\nexport const webhookCallbackMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {\n  console.log('webhookCallbackMiddlewareFn: Swap express.json for express.raw')\n\n  middlewareConfig.delete('express.json')\n  middlewareConfig.set('express.raw', express.raw({ type: '*/*' }))\n\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Functionality in JavaScript\nDESCRIPTION: Example of implementing a logout button component using the built-in logout function provided by Wasp's client auth module.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { logout } from 'wasp/client/auth'\n\nconst LogoutButton = () => {\n  return <button onClick={logout}>Logout</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring CRUD Operations in Wasp\nDESCRIPTION: Example of a CRUD declaration with all available options including entity specification, operation configurations, and visibility settings. Shows how to set up getAll, get, create, and update operations with optional overrides.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/crud.md#2025-04-22_snippet_13\n\nLANGUAGE: wasp\nCODE:\n```\ncrud Tasks { // crud name here is \"Tasks\"\n  entity: Task,\n  operations: {\n    getAll: {\n      isPublic: true, // optional, defaults to false\n    },\n    get: {},\n    create: {\n      overrideFn: import { createTask } from \"@src/tasks.js\", // optional\n    },\n    update: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication Settings\nDESCRIPTION: Detailed configuration of email authentication including user entity, email settings, and redirect paths.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/email.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        fromField: {\n          name: \"My App Postman\",\n          email: \"hello@itsme.com\"\n        },\n        emailVerification: {\n          clientRoute: EmailVerificationRoute,\n        },\n        passwordReset: {\n          clientRoute: PasswordResetRoute,\n        },\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n    onAuthSucceededRedirectTo: \"/\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CRUD Operations in Wasp\nDESCRIPTION: This code snippet demonstrates how to configure CRUD operations for the Task entity in the main.wasp file. It enables getAll, get, create, and update operations with custom settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\ncrud Tasks {\n  entity: Task,\n  operations: {\n    getAll: {\n      isPublic: true, // by default only logged in users can perform operations\n    },\n    get: {},\n    create: {\n      overrideFn: import { createTask } from \"@src/tasks.js\",\n    },\n    update: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Wasp API with Configuration\nDESCRIPTION: This Wasp code snippet defines an API endpoint named `fooBar`. It specifies the implementation function imported from '@src/apis', sets the HTTP route to handle GET requests on '/foo/bar', declares usage of the 'Task' entity, requires user authentication (`auth: true`), and applies custom middleware configured by the `apiMiddleware` function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/apis.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napi fooBar {\n  fn: import { fooBar } from \"@src/apis\",\n  httpRoute: (GET, \"/foo/bar\"),\n  entities: [Task],\n  auth: true,\n  middlewareConfigFn: import { apiMiddleware } from \"@src/apis\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Queries in TypeScript\nDESCRIPTION: Example of how to import and use the defined Queries in TypeScript. It shows how TypeScript infers return types and type-checks Query arguments.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/queries.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport getAllTasks from '@wasp/queries/getAllTasks.js'\nimport getFilteredTasks from '@wasp/queries/getFilteredTasks.js'\n\n// TypeScript automatically infers the return values and type-checks\n// the payloads.\nconst allTasks = await getAllTasks()\nconst doneTasks = await getFilteredTasks({ isDone: true })\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Routes and Pages in Wasp\nDESCRIPTION: This snippet shows how to define the routes and pages for authentication in the main.wasp file, including login, signup, password reset, and email verification pages.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/email.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { Signup } from \"@src/pages/auth.jsx\"\n}\n\nroute RequestPasswordResetRoute { path: \"/request-password-reset\", to: RequestPasswordResetPage }\npage RequestPasswordResetPage {\n  component: import { RequestPasswordReset } from \"@src/pages/auth.jsx\",\n}\n\nroute PasswordResetRoute { path: \"/password-reset\", to: PasswordResetPage }\npage PasswordResetPage {\n  component: import { PasswordReset } from \"@src/pages/auth.jsx\",\n}\n\nroute EmailVerificationRoute { path: \"/email-verification\", to: EmailVerificationPage }\npage EmailVerificationPage {\n  component: import { EmailVerification } from \"@src/pages/auth.jsx\",\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeLogin Hook for Login Validation (TypeScript) - ts\nDESCRIPTION: TypeScript implementation of the Wasp 'onBeforeLogin' hook. Uses strong types ('OnBeforeLoginHook'), checks whether login should be forbidden for certain users (matching providerName and providerUserId) and throws a 403 HttpError if validation fails. Requires 'wasp/server', TypeScript types, and an understanding of provider/account structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport { HttpError } from 'wasp/server'\nimport type { OnBeforeLoginHook } from 'wasp/server/auth'\n\nexport const onBeforeLogin: OnBeforeLoginHook = async ({\n  providerId,\n  user,\n  prisma,\n  req,\n}) => {\n  if (\n    providerId.providerName === 'email' &&\n    providerId.providerUserId === 'some@email.com'\n  ) {\n    throw new HttpError(403, 'You cannot log in with this email')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth in Wasp\nDESCRIPTION: This snippet shows how to configure authentication methods in the Wasp app declaration. It demonstrates setting up username/password, email, Google, and GitHub authentication options.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  //...\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      usernameAndPassword: {}, // use this or email, not both\n      email: {}, // use this or usernameAndPassword, not both\n      google: {},\n      gitHub: {},\n    },\n    onAuthFailedRedirectTo: \"/someRoute\"\n  }\n}\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Updating tsconfig.json for Wasp 0.14.x IDE Support\nDESCRIPTION: Shows the recommended `tsconfig.json` configuration for Wasp 0.14.x projects. This configuration is primarily for IDE support (e.g., VSCode) to ensure proper type checking, module resolution ('bundler'), JSX support, and includes specific type roots for testing libraries like jest-dom. It clarifies that these settings do not affect the actual TypeScript compilation performed by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n```json title=tsconfig.json\n// =============================== IMPORTANT =================================\n//\n// This file is only used for Wasp IDE support. You can change it to configure\n// your IDE checks, but none of these options will affect the TypeScript\n// compiler. Proper TS compiler configuration in Wasp is coming soon :)\n{\n  \"compilerOptions\": {\n    \"module\": \"esnext\",\n    \"target\": \"esnext\",\n    // We're bundling all code in the end so this is the most appropriate option,\n    // it's also important for autocomplete to work properly.\n    \"moduleResolution\": \"bundler\",\n    // JSX support\n    \"jsx\": \"preserve\",\n    \"strict\": true,\n    // Allow default imports.\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"typeRoots\": [\n      // This is needed to properly support Vitest testing with jest-dom matchers.\n      // Types for jest-dom are not recognized automatically and Typescript complains\n      // about missing types e.g. when using `toBeInTheDocument` and other matchers.\n      \"node_modules/@testing-library\",\n      // Specifying type roots overrides the default behavior of looking at the\n      // node_modules/@types folder so we had to list it explicitly.\n      // Source 1: https://www.typescriptlang.org/tsconfig#typeRoots\n      // Source 2: https://github.com/testing-library/jest-dom/issues/546#issuecomment-1889884843\n      \"node_modules/@types\"\n    ],\n    // Since this TS config is used only for IDE support and not for\n    // compilation, the following directory doesn't exist. We need to specify\n    // it to prevent this error:\n    // https://stackoverflow.com/questions/42609768/typescript-error-cannot-write-file-because-it-would-overwrite-input-file\n    \"outDir\": \".wasp/phantom\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameterized Routes in Wasp\nDESCRIPTION: Shows how to create routes with URL parameters using Wasp's routing syntax.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/03-pages.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute HelloRoute { path: \"/hello/:name\", to: HelloPage }\npage HelloPage {\n  component: import { HelloPage } from \"@src/HelloPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Values for Later Use in Server Setup (TypeScript)\nDESCRIPTION: This TypeScript example shows how to store values during server setup for later use in operations. It sets up a resource and starts a cron job in the setup function, with proper type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/server-config.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ServerSetupFn } from 'wasp/server'\n\nlet someResource = undefined\n\nexport const mySetupFunction: ServerSetupFn = async () => {\n  // Let's pretend functions setUpSomeResource and startSomeCronJob\n  // are implemented below or imported from another file.\n  someResource = await setUpSomeResource()\n  startSomeCronJob()  \n}\n\nexport const getSomeResource = () => someResource\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SomeQuery } from 'wasp/server/operations'\nimport { getSomeResource } from './myServerSetupCode.js'\n\n...\n\nexport const someQuery: SomeQuery<...> = async (args, context) => {\n  const someResource = getSomeResource()\n  return queryDataFromSomeResource(args, someResource)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page with Wasp Login Form\nDESCRIPTION: This snippet shows how to create a login page using the LoginForm component provided by Wasp, including the necessary Wasp configuration and React component implementation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/ui.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { LoginPage } from \"@src/LoginPage.tsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function LoginPage() {\n  return <LoginForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Task Entity Instance Directly Using Prisma Client (TypeScript)\nDESCRIPTION: Illustrates direct use of the Prisma Client in Wasp server-side code in TypeScript. After importing prisma from 'wasp/server', it creates a Task entity with a specific description and completion status. Prerequisites: valid TypeScript project, proper Wasp and Prisma setup, execution within server code. The snippet creates a Task instance with provided field values and applies TypeScript type-checking, ensuring proper structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/entities.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { prisma } from 'wasp/server'\\n\\nprisma.task.create({\\n    description: \"Read the Entities doc\",\\n    isDone: true // almost :)\\n})\n```\n\n----------------------------------------\n\nTITLE: Using the routes Object with Different Route Types\nDESCRIPTION: Shows practical examples of using the routes object with both simple routes and routes with parameters. Demonstrates building URLs programmatically.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/links.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { routes } from 'wasp/client/router'\n\nconst linkToRoot = routes.RootRoute.build()\nconst linkToTask = routes.DetailRoute.build({ params: { id: 1 } })\n```\n\n----------------------------------------\n\nTITLE: Importing Wasp CRUD Types for Overrides in TypeScript\nDESCRIPTION: Demonstrates importing TypeScript types generated by Wasp for a specific CRUD definition (`Tasks`) from `wasp/server/crud`. It shows how to use the main `Tasks` type and its associated generic operation types (e.g., `Tasks.GetAllQuery<Input, Output>`) to strongly type custom override function implementations for CRUD operations like `getAllOverride`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/crud.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\n```ts\nimport { type Tasks } from 'wasp/server/crud'\n\n// Each of the types is a generic type, so you can use it like this:\nexport const getAllOverride: Tasks.GetAllQuery<Input, Output> = async (\n  args,\n  context\n) => {\n  // ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Zod Validation Implementation for Signup Fields\nDESCRIPTION: Example of using the Zod validation library to validate additional signup fields with more robust validation logic.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineAdditionalSignupFields } from '@wasp/auth/index.js'\nimport * as z from 'zod'\n\nexport const fields = defineAdditionalSignupFields({\n  address: (data) => {\n    const AddressSchema = z\n      .string({\n        required_error: 'Address is required',\n        invalid_type_error: 'Address must be a string',\n      })\n      .min(10, 'Address must be at least 10 characters long')\n    const result = AddressSchema.safeParse(data.address)\n    if (result.success === false) {\n      throw new Error(result.error.issues[0].message)\n    }\n    return result.data\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Auth Configuration in Wasp\nDESCRIPTION: Basic authentication configuration in Wasp application, including user entity setup and authentication methods.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/username-and-pass.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  }\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Functionality in TypeScript\nDESCRIPTION: TypeScript version of implementing a logout button component using Wasp's client auth module, with proper type definitions for enhanced type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { logout } from 'wasp/client/auth'\n\nconst LogoutButton = () => {\n  return <button onClick={logout}>Logout</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a NewTaskForm Component in TypeScript\nDESCRIPTION: This React component creates a form for adding new tasks in TypeScript. It includes type annotations for the event handler and uses the createTask Action to submit the new task.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/06-actions.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormEvent } from 'react'\n\nconst NewTaskForm = () => {\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    try {\n      const target = event.target as HTMLFormElement\n      const description = target.description.value\n      target.reset()\n      await createTask({ description })\n    } catch (err: any) {\n      window.alert('Error: ' + err.message)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"description\" type=\"text\" defaultValue=\"\" />\n      <input type=\"submit\" value=\"Create task\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Type-Safe Wasp Job Worker Function (TypeScript)\nDESCRIPTION: Provides a TypeScript example implementation for a Wasp job's `perform.fn` located in `src/workers/bar.ts`. It imports the auto-generated job type `MySpecialJob` from `wasp/server/jobs` to ensure type safety for the input arguments (`Input`) and the return value (`Output`). The function signature explicitly uses these types, and the implementation demonstrates logging and entity interaction similar to the JavaScript version.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/jobs.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/workers/bar.ts\"\nimport { type MySpecialJob } from 'wasp/server/jobs'\n\ntype Input = { name: string; }\ntype Output = { tasks: Task[]; }\n\nexport const foo: MySpecialJob<Input, Output> = async (args, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring CRUD Operations with Default Options in Wasp\nDESCRIPTION: This snippet demonstrates how to declare CRUD operations for a Task entity in Wasp, using default options for get, getAll, create, update, and delete operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/crud.md#2025-04-22_snippet_11\n\nLANGUAGE: wasp\nCODE:\n```\ncrud Tasks { // crud name here is \"Tasks\"\n  entity: Task,\n  operations: {\n    get: {},\n    getAll: {},\n    create: {},\n    update: {},\n    delete: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Component - TypeScript (src\\/Root.tsx)\nDESCRIPTION: Implements a strongly-typed React functional component as the Wasp app's root, accepting a children prop of type React.ReactNode. Outputs a layout with header, dynamic content, and footer. TypeScript enables stricter prop validation, improving reliability and maintainability over JavaScript version.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/client-config.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Root({ children }: { children: React.ReactNode }) {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      {children}\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Root React Component (TypeScript, TSX)\nDESCRIPTION: Defines a root React component for the Wasp client in TypeScript with strong typing for children. Uses 'react-redux' Provider and a hierarchical layout with header and footer. Dependencies: 'react-redux', application store, React types. Expects children of type React.ReactNode and provides a structured wrapper for the app's pages. Limitations: Types must match usage in the respective project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/client-config.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root({ children }: { children: React.ReactNode }) {\n  return (\n    <Provider store={store}>\n      <Layout>{children}</Layout>\n    </Provider>\n  )\n}\n\nfunction Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      {children}\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Fetch and Filter Queries - JavaScript (NodeJS)\nDESCRIPTION: Defines query implementations `getAllTasks` and `getFilteredTasks` using JavaScript. A mock database lists tasks as objects, and both functions are exported to be used as Wasp Query handlers. `getAllTasks` returns all tasks, while `getFilteredTasks` filters tasks by the boolean property `isDone` from arguments. No external dependencies are required. Inputs are from the caller, and outputs are arrays of task objects.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/queries.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// our \"database\"\\nconst tasks = [\\n  { id: 1, description: 'Buy some eggs', isDone: true },\\n  { id: 2, description: 'Make an omelette', isDone: false },\\n  { id: 3, description: 'Eat breakfast', isDone: false },\\n]\\n\\n// You don't need to use the arguments if you don't need them\\nexport const getAllTasks = () => {\\n  return tasks\\n}\\n\\n// The 'args' object is something sent by the caller (most often from the client)\\nexport const getFilteredTasks = (args) => {\\n  const { isDone } = args\\n  return tasks.filter((task) => task.isDone === isDone)\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating Client-Side Auth Pages in React\nDESCRIPTION: This snippet shows how to create the client-side auth pages using React components. It includes a Login component and a Layout component for centering content.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/github.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }) {\n  return (\n    <div className=\"w-full h-full bg-white\">\n      <div className=\"min-w-full min-h-[75vh] flex items-center justify-center\">\n        <div className=\"w-full h-full max-w-sm p-5 bg-white\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing updateTask Action in TypeScript\nDESCRIPTION: This snippet shows the TypeScript implementation of the 'updateTask' action on the server side. It includes type definitions for the payload and return value.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/06-actions.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreateTask, UpdateTask } from 'wasp/server/operations'\n\ntype UpdateTaskPayload = Pick<Task, 'id' | 'isDone'>\n\nexport const updateTask: UpdateTask<UpdateTaskPayload, Task> = async (\n  { id, isDone },\n  context\n) => {\n  return context.entities.Task.update({\n    where: { id },\n    data: {\n      isDone: isDone,\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Including User Auth Data with Related Entities in TypeScript\nDESCRIPTION: Example of how to include user authentication data when fetching related entities in TypeScript using Prisma's include and select options, with proper TypeScript type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getAllTasks = (async (args, context) => {\n  return context.entities.Task.findMany({\n    orderBy: { id: 'desc' },\n    select: {\n      id: true,\n      title: true,\n      user: {\n        include: {\n          auth: {\n            include: {\n              identities: {\n                // Including only the `providerName` and `providerUserId` fields\n                select: {\n                  providerName: true,\n                  providerUserId: true,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  })\n}) satisfies tasks.GetAllQuery<{}, {}>\n```\n\n----------------------------------------\n\nTITLE: Testing a React Component with Mocked Query Data using Vitest and Testing Library - JavaScript (JSX)\nDESCRIPTION: Shows how to unit test the Todo component using Vitest, @testing-library/react, and Wasp's testing helpers. Sets up a mockServer for mocking the getTasks query, then renders the component in test context and asserts UI output. Illustrates common practices for component isolation and UI state verification in tests.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/testing.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { test, expect } from \"vitest\";\nimport { screen } from \"@testing-library/react\";\n\nimport { mockServer, renderInContext } from \"wasp/client/test\";\nimport { getTasks } from \"wasp/client/operations\";\nimport Todo from \"./Todo\";\n\nconst { mockQuery } = mockServer();\n\nconst mockTasks = [\n  {\n    id: 1,\n    description: \"test todo 1\",\n    isDone: true,\n    userId: 1,\n  },\n];\n\ntest(\"handles mock data\", async () => {\n  mockQuery(getTasks, mockTasks);\n\n  renderInContext(<Todo />);\n\n  await screen.findByText(\"test todo 1\");\n\n  expect(screen.getByRole(\"checkbox\")).toBeChecked();\n\n  screen.debug();\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing User Auth Data in React Component (JavaScript)\nDESCRIPTION: Example of accessing user authentication data within a React component in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/entities.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {task.user.auth?.identities[0].providerUserId}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UpdateTask Action - JavaScript\nDESCRIPTION: Server-side implementation of the updateTask action in JavaScript, handling task status updates using Prisma-like syntax.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/06-actions.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const updateTask = async ({ id, isDone }, context) => {\n  return context.entities.Task.update({\n    where: { id },\n    data: {\n      isDone: isDone,\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Query in React (TypeScript)\nDESCRIPTION: This snippet illustrates how to use the 'getTasks' query in a React component using TypeScript, including type annotations for the Task entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/05-queries.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport getTasks from '@wasp/queries/getTasks'\nimport { useQuery } from '@wasp/queries'\nimport { Task } from '@wasp/entities'\n\nconst MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n\nconst Task = ({ task }: { task: Task }) => {\n  return (\n    <div>\n      <input type=\"checkbox\" id={String(task.id)} checked={task.isDone} />\n      {task.description}\n    </div>\n  )\n}\n\nconst TasksList = ({ tasks }: { tasks: Task[] }) => {\n  if (!tasks?.length) return <div>No tasks</div>\n\n  return (\n    <div>\n      {tasks.map((task, idx) => (\n        <Task task={task} key={idx} />\n      ))}\n    </div>\n  )\n}\n\nexport default MainPage\n```\n\n----------------------------------------\n\nTITLE: Declaring Server Operations (Query and Action) in Wasp\nDESCRIPTION: This Wasp configuration snippet declares a server-side query (`getRecipes`) and an action (`addRecipe`). It links these declarations to their corresponding implementation functions located in `@src/recipe/operations`. It also specifies the Prisma entities (`Recipe`) these operations interact with, enabling features like automatic cache invalidation and type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/introduction/introduction.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\n// Queries have automatic cache invalidation and are type-safe.\nquery getRecipes {\n  fn: import { getRecipes } from \"@src/recipe/operations\",\n  entities: [Recipe],\n}\n\n// Actions are type-safe and can be used to perform side-effects.\naction addRecipe {\n  fn: import { addRecipe } from \"@src/recipe/operations\",\n  entities: [Recipe],\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Actions in React Components (JavaScript)\nDESCRIPTION: This snippet shows how to use Actions inside a React component in JavaScript. Actions can be called directly inside components without needing hooks, unlike Queries which require useQuery.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\n// highlight-next-line\nimport { useQuery, getTask, markTaskAsDone } from 'wasp/client/operations'\n\nexport const TaskPage = ({ id }) => {\n  const { data: task } = useQuery(getTask, { id })\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>\n  }\n\n  const { description, isDone } = task\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n      {isDone || (\n        // highlight-next-line\n        <button onClick={() => markTaskAsDone({ id })}>Mark as done.</button>\n      )}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Server Logic in JavaScript\nDESCRIPTION: Shows how to implement the server-side WebSocket logic in JavaScript, including handling connections and custom events.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/web-sockets.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v4 as uuidv4 } from 'uuid'\nimport { getFirstProviderUserId } from 'wasp/auth'\n\nexport const webSocketFn = (io, context) => {\n  io.on('connection', (socket) => {\n    const username = getFirstProviderUserId(socket.data.user) ?? 'Unknown'\n    console.log('a user connected: ', username)\n\n    socket.on('chatMessage', async (msg) => {\n      console.log('message: ', msg)\n      io.emit('chatMessage', { id: uuidv4(), username, text: msg })\n      // You can also use your entities here:\n      // await context.entities.SomeEntity.create({ someField: msg })\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Provider-Specific OAuth Tokens in TypeScript\nDESCRIPTION: Demonstrates how to access provider-specific OAuth token fields within a Wasp auth hook (like `onAfterSignup` or `onAfterLogin`) using TypeScript. It checks if the `oauth` object exists and if the `providerName` matches 'google', then narrows the type of `oauth.tokens` to access Google-specific fields like `accessToken`, `refreshToken`, `idToken`, and `accessTokenExpiresAt`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/auth-hooks.md#2025-04-22_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\n```ts\nif (oauth && oauth.providerName === 'google') {\n  console.log(oauth.tokens.accessToken)\n  //                  ^ Google specific tokens are available here\n  console.log(oauth.tokens.refreshToken)\n  console.log(oauth.tokens.idToken)\n  console.log(oauth.tokens.accessTokenExpiresAt)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Action Usage in JavaScript/TypeScript\nDESCRIPTION: Demonstrates how to import and use Actions from wasp/client/operations for basic client-side operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/actions.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTask, markTasAsDone } from 'wasp/client/operations'\n\n// ...\n\nconst newTask = await createTask({ description: 'Learn TypeScript' })\nawait markTasAsDone({ id: 1 })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTask, markTasAsDone } from 'wasp/client/operations'\n\n// TypeScript automatically infers the return values and type-checks\n// the payloads.\nconst newTask = await createTask({ description: 'Keep learning TypeScript' })\nawait markTasAsDone({ id: 1 })\n```\n\n----------------------------------------\n\nTITLE: API Namespace Configuration\nDESCRIPTION: Shows how to configure API namespaces and middleware for handling CORS and other middleware concerns.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/apis.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napiNamespace fooBar {\n  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from \"@src/apis\",\n  path: \"/foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onAfterLogin Hook\nDESCRIPTION: Authentication hook that runs after successful user login. Receives providerId, user, oauth, prisma, and req as input parameters. The hook's return value is ignored by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/auth-hooks.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport const onAfterLogin = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OnAfterLoginHook } from 'wasp/server/auth'\n\nexport const onAfterLogin: OnAfterLoginHook = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Cache Key in TypeScript\nDESCRIPTION: This snippet demonstrates how to access the query cache key for a Wasp query in TypeScript, which is necessary when using react-query's low-level API for advanced optimistic update scenarios.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_24\n\nLANGUAGE: ts\nCODE:\n```\nimport { getTasks } from 'wasp/client/operations'\n\nconst queryKey = getTasks.queryCacheKey\n```\n\n----------------------------------------\n\nTITLE: Extracting Google Identity and User ID in TypeScript\nDESCRIPTION: This snippet demonstrates how to access the Google identity from a user object and extract the Google User ID. It assumes the user object has an 'identities' property containing a 'google' field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/_google-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst googleIdentity = user.identities.google\n\n// Google User ID for example \"123456789012345678901\"\ngoogleIdentity.id\n```\n\n----------------------------------------\n\nTITLE: Implementing Wasp Application Configuration in TypeScript\nDESCRIPTION: Complete reference implementation of a Wasp application configuration using TypeScript, including auth, routes, queries, and actions\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/general/wasp-ts-config.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App } from 'wasp-config'\n\nconst app = new App('todoApp', {\n  title: 'ToDo App',\n  wasp: { version: '{latestWaspVersion}' },\n});\n\napp.webSocket({\n  fn: { import: 'webSocketFn', from: '@src/webSocket' },\n});\n\napp.auth({\n  userEntity: 'User',\n  methods: {\n    discord: {\n      configFn: { import: 'config', from: '@src/auth/discord' },\n      userSignupFields: { import: 'userSignupFields', from: '@src/auth/discord' }\n    },\n    google: {\n      configFn: { import: 'config', from: '@src/auth/google' },\n      userSignupFields: { import: 'userSignupFields', from: '@src/auth/google' }\n    },\n    gitHub: {\n      configFn: { import: 'config', from: '@src/auth/github.js' },\n      userSignupFields: { import: 'userSignupFields', from: '@src/auth/github.js' }\n    },\n  },\n  onAuthFailedRedirectTo: '/login',\n  onAuthSucceededRedirectTo: '/profile',\n  onBeforeSignup: { import: 'onBeforeSignup', from: '@src/auth/hooks.js' },\n  onAfterSignup: { import: 'onAfterSignup', from: '@src/auth/hooks.js' },\n  onBeforeOAuthRedirect: { import: 'onBeforeOAuthRedirect', from: '@src/auth/hooks.js' },\n  onBeforeLogin: { import: 'onBeforeLogin', from: '@src/auth/hooks.js' },\n  onAfterLogin: { import: 'onAfterLogin', from: '@src/auth/hooks.js' }\n});\n\napp.server({\n  setupFn: { importDefault: 'setup', from: '@src/serverSetup' },\n  middlewareConfigFn: { import: 'serverMiddlewareFn', from: '@src/serverSetup' },\n});\n\napp.client({\n  rootComponent: { import: 'App', from: '@src/App' },\n  setupFn: { importDefault: 'setup', from: '@src/clientSetup' }\n});\n\napp.db({\n  seeds: [\n    { import: 'devSeedSimple', from: '@src/dbSeeds' },\n  ]\n});\n\napp.emailSender({\n  provider: 'SMTP',\n  defaultFrom: { email: 'test@test.com' }\n});\n\nconst loginPage = app.page('LoginPage', {\n  component: { importDefault: 'Login', from: '@src/pages/auth/Login' }\n});\napp.route('LoginRoute', { path: '/login', to: loginPage });\n\napp.query('getTasks', {\n  fn: { import: 'getTasks', from: '@src/queries' },\n  entities: ['Task']\n});\n\napp.action('createTask', {\n  fn: { import: 'createTask', from: '@src/actions' },\n  entities: ['Task']\n});\n\napp.apiNamespace('bar', {\n  middlewareConfigFn: { import: 'barNamespaceMiddlewareFn', from: '@src/apis' },\n  path: '/bar'\n});\n\napp.api('barBaz', {\n  fn: { import: 'barBaz', from: '@src/apis' },\n  auth: false,\n  entities: ['Task'],\n  httpRoute: {\n    method: 'GET',\n    route: '/bar/baz',\n  },\n});\n\napp.job('mySpecialJob', {\n  executor: 'PgBoss',\n  perform: {\n    fn: { import: 'foo', from: '@src/jobs/bar' },\n    executorOptions: {\n      pgBoss: { retryLimit: 1 }\n    }\n  },\n  entities: ['Task']\n});\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Invoking a Wasp Query in React (JSX)\nDESCRIPTION: Demonstrates how to invoke the `getTasks` query within a React component (`MainPage.jsx`) using JavaScript. It imports the client-side `getTasks` function and the `useQuery` hook from `wasp/client/operations`. The hook manages fetching data, loading states, and errors, making the component reactive to data changes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/05-queries.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx {1,4-13,16-35} title=\"src/MainPage.jsx\"\nimport { getTasks, useQuery } from 'wasp/client/operations'\n\nexport const MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n\nconst TaskView = ({ task }) => {\n  return (\n    <div>\n      <input type=\"checkbox\" id={String(task.id)} checked={task.isDone} />\n      {task.description}\n    </div>\n  )\n}\n\nconst TasksList = ({ tasks }) => {\n  if (!tasks?.length) return <div>No tasks</div>\n\n  return (\n    <div>\n      {tasks.map((task, idx) => (\n        <TaskView task={task} key={idx} />\n      ))}\n    </div>\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Submitting a Delayed Job in JavaScript\nDESCRIPTION: This snippet shows how to submit a delayed job named 'mySpecialJob' with arguments and executor options in JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/jobs.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst submittedJob = await mySpecialJob\n  .delay(10)\n  .submit({ job: \"args\" }, { \"retryLimit\": 2 })\n```\n\n----------------------------------------\n\nTITLE: Configuring Username Auth in Wasp\nDESCRIPTION: Basic Wasp configuration for enabling username and password authentication with user entity specification and redirect settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/username-and-pass.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Password Validation in TypeScript\nDESCRIPTION: TypeScript implementation of custom password validation with type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst newUser = context.entities.User.create({\n  data: {\n    username: args.username,\n    password: args.password,\n  },\n  _waspSkipDefaultValidations: false,\n  _waspCustomValidations: [\n    {\n      validates: 'password',\n      message: 'password must contain an uppercase letter',\n      validator: (password) => /[A-Z]/.test(password),\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Path-Specific Middleware Customization in TypeScript\nDESCRIPTION: This TypeScript code defines the `fooBarNamespaceMiddlewareFn` function, typed using `MiddlewareConfigFn`. It demonstrates adding custom middleware to a specific path namespace. A new middleware function `customMiddleware` (typed as `express.RequestHandler`) is created, which logs a message and proceeds. This custom middleware is added to the `middlewareConfig` map under the key 'custom.middleware', and the modified map is returned.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/middleware-config.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport express from 'express'\nimport { type MiddlewareConfigFn } from 'wasp/server'\n\nexport const fooBarNamespaceMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {\n  const customMiddleware: express.RequestHandler = (_req, _res, next) => {\n    console.log('fooBarNamespaceMiddlewareFn: custom middleware')\n    next()\n  }\n\n  middlewareConfig.set('custom.middleware', customMiddleware)\n\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Testing React Todo Component with Mocked APIs - TypeScript\nDESCRIPTION: Provides a test case using Wasp's mockApi helper for a TypeScript React Todo component. The mock intercepts /tasks API calls and injects mockTasks data. Uses Vitest and React Testing Library to ensure correct rendering and interactions. Intended for TS test environments with Wasp helpers.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/testing.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { test, expect } from \\\"vitest\\\";\\nimport { screen } from \\\"@testing-library/react\\\";\\n\\nimport { mockServer, renderInContext } from \\\"wasp/client/test\\\";\\nimport Todo from \\\"./Todo\\\";\\n\\nconst { mockApi } = mockServer();\\n\\nconst mockTasks = [\\n  {\\n    id: 1,\\n    description: \\\"test todo 1\\\",\\n    isDone: true,\\n    userId: 1,\\n  },\\n];\\n\\ntest(\\\"handles mock data\\\", async () => {\\n  mockApi(\\\"/tasks\\\", mockTasks);\\n\\n  renderInContext(<Todo />);\\n\\n  await screen.findByText(\\\"test todo 1\\\");\\n\\n  expect(screen.getByRole(\\\"checkbox\\\")).toBeChecked();\\n\\n  screen.debug();\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing an API Endpoint in JavaScript\nDESCRIPTION: Shows the JavaScript implementation of a custom API endpoint. The function receives request, response, and context objects, and can modify headers and return JSON responses.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/apis.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const fooBar = (req, res, context) => {\n  res.set(\"Access-Control-Allow-Origin\", \"*\"); // Example of modifying headers to override Wasp default CORS middleware.\n  res.json({ msg: `Hello, ${context.user ? \"registered user\" : \"stranger\"}!` });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Worker Function in JavaScript\nDESCRIPTION: JavaScript implementation of the worker function that handles the job's business logic, including database operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/jobs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const foo = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cron Job for Meme Template Updates in Wasp\nDESCRIPTION: Creates a daily cron job using Wasp's PgBoss executor to fetch and store meme templates from ImgFlip API. Runs at 7 AM daily and operates on the Template entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\njob storeMemeTemplates {\n  executor: PgBoss,\n  perform: {\n    fn: import { fetchAndStoreMemeTemplates } from \"@server/workers.js\",\n  },\n  schedule: {\n    // daily at 7 a.m.\n    cron: \"0 7 * * *\" \n  },\n  entities: [Template],\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Query Implementation\nDESCRIPTION: Original JavaScript implementation of the getTaskInfo query with task info message generation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/general/typescript.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport HttpError from '@wasp/core/HttpError.js'\n\nfunction getInfoMessage(task) {\n  const isDoneText = task.isDone ? 'is done' : 'is not done'\n  return `Task '${task.description}' is ${isDoneText}.`\n}\n\nexport const getTaskInfo = async ({ id }, context) => {\n  const Task = context.entities.Task\n  const task = await Task.findUnique({ where: { id } })\n  if (!task) {\n    throw new HttpError(404)\n  }\n  return getInfoMessage(task)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Password Migration Page Component in React (TypeScript)\nDESCRIPTION: This TSX code defines a React functional component `MigratePasswordPage` for the password migration UI (TypeScript version). It utilizes `react-hook-form` with explicit types for form data and manages success/error messages using `useState` with string or null types. On form submission, it invokes the Wasp client operation `migratePassword`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/pages/MigratePassword.tsx\"\nimport {\n  FormItemGroup,\n  FormLabel,\n  FormInput,\n  FormError,\n} from \"wasp/client/auth\";\nimport { useForm } from \"react-hook-form\";\nimport { migratePassword } from \"wasp/client/operations\";\nimport { useState } from \"react\";\n\nexport function MigratePasswordPage() {\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  const form = useForm<{\n    username: string;\n    password: string;\n  }>();\n\n  const onSubmit = form.handleSubmit(async (data) => {\n    try {\n      const result = await migratePassword(data);\n      setSuccessMessage(result.message);\n    } catch (e: unknown) {\n      console.error(e);\n      if (e instanceof Error) {\n        setErrorMessage(e.message);\n      }\n    }\n  });\n\n  return (\n    <div style={{\n      maxWidth: \"400px\",\n      margin: \"auto\",\n    }}>\n      <h1>Migrate your password</h1>\n      <p>\n        If you have an account on the old version of the website, you can\n        migrate your password to the new version.\n      </p>\n      {successMessage && <div>{successMessage}</div>}\n      {errorMessage && <FormError>{errorMessage}</FormError>}\n      <form onSubmit={onSubmit}>\n        <FormItemGroup>\n          <FormLabel>Username</FormLabel>\n          <FormInput\n            {...form.register(\"username\", {\n              required: \"Username is required\",\n            })}\n          />\n          <FormError>{form.formState.errors.username?.message}</FormError>\n        </FormItemGroup>\n        <FormItemGroup>\n          <FormLabel>Password</FormLabel>\n          <FormInput\n            {...form.register(\"password\", {\n              required: \"Password is required\",\n            })}\n            type=\"password\"\n          />\n          <FormError>{form.formState.errors.password?.message}</FormError>\n        </FormItemGroup>\n        <button type=\"submit\">Migrate password</button>\n      </form>\n    </div>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Task Entity with Prisma Schema\nDESCRIPTION: Demonstrates how to define a basic Task entity using Prisma schema language with fields for id, description, and completion status.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/entities.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Task {\n  id          String  @id @default(uuid())\n  description String\n  isDone      Boolean @default(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Wasp Project Directory Structure\nDESCRIPTION: Shows the typical directory structure of a new Wasp project, including client, server, and shared code directories.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/02-project-structure.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── .gitignore\n├── main.wasp              # Your Wasp code goes here.\n├── src\n│   ├── client             # Your client code (JS/CSS/HTML) goes here.\n│   │   ├── Main.css\n│   │   ├── MainPage.jsx\n│   │   ├── tsconfig.json\n│   │   ├── vite.config.ts\n│   │   ├── vite-env.d.ts\n│   │   └── waspLogo.png\n│   ├── server             # Your server code (Node JS) goes here.\n│   │   └── tsconfig.json\n│   ├── shared             # Your shared (runtime independent) code goes here.\n│   │   └── tsconfig.json\n│   └── .waspignore\n└── .wasproot\n```\n\n----------------------------------------\n\nTITLE: Accessing Shared Resources from a Wasp Query (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how a Wasp query (`someQuery`) can access a shared resource initialized during server setup. It imports the `getSomeResource` getter function from the server setup module and uses it to retrieve the resource needed for the query logic.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/server-config.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/queries.js\"\nimport { getSomeResource } from './myServerSetupCode.js'\n\n...\n\nexport const someQuery = async (args, context) => {\n  const someResource = getSomeResource()\n  return queryDataFromSomeResource(args, someResource)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring React Query Client in Setup Function\nDESCRIPTION: Demonstrates how to configure the React Query client globally using the setup function, changing default options for all queries.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/client-config.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureQueryClient } from '@wasp/queryClient'\n\nexport default async function mySetupFunction() {\n  // ... some setup\n  configureQueryClient({\n    defaultOptions: {\n      queries: {\n        staleTime: Infinity,\n      },\n    },\n  })\n  // ... some more setup\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Password Reset on Client-Side (JavaScript/TypeScript)\nDESCRIPTION: Illustrates using the `requestPasswordReset` action from `wasp/client/auth` on a client-side page (e.g., `ForgotPasswordPage`) to initiate the password reset process. This function is called with the user's email address.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/email.md#2025-04-22_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/pages/ForgotPasswordPage.jsx\"\nimport { requestPasswordReset } from 'wasp/client/auth'\n...\nawait requestPasswordReset({ email });\n```\n```\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/pages/ForgotPasswordPage.tsx\"\nimport { requestPasswordReset } from 'wasp/client/auth'\n...\nawait requestPasswordReset({ email });\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Form Component\nDESCRIPTION: Implementation of a signup page using Wasp's SignupForm component\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/ui.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { SignupPage } from \"@src/SignupPage.jsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignupForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function SignupPage() {\n  return <SignupForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Handling User Introductions and Removing Guest Role in Discord Bot (JavaScript)\nDESCRIPTION: This code snippet shows the implementation of a Discord bot that handles user introductions in a specific channel and removes the 'Guest' role upon successful introduction. It includes error handling and validation for the introduction message length.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-04-29-discord-bot-introduction.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n...\n\nconst INTRODUCTIONS_CHANNEL_ID = \"<YOU_WILL_HAVE_TO_FIND_THIS_ON_DISCORD_SERVER>\"\nconst GUEST_ROLE_ID = \"<YOU_WILL_HAVE_TO_FIND_THIS_ON_DISCORD_SERVER>\"\n\nbot.on('message', async msg => {\n  if (msg.content.startsWith('!intro ')) {\n    if (msg.channel.id.toString() !== INTRODUCTIONS_CHANNEL_ID) {\n      const introductionsChannelName =\n        msg.guild.channels.resolve(INTRODUCTIONS_CHANNEL_ID).name\n      return msg.reply(\n      `Please use !intro command in the ${introductionsChannelName} channel!`\n      )\n    }\n\n    const introMsg = msg.content.substring('!intro '.length).trim()\n    const minMsgLength = 20\n    if (introMsg.length < minMsgLength) {\n      return msg.reply(\n        `Please write introduction at least ${minMsgLength} characters long!`\n      )\n    }\n\n    const member = msg.guild.member(msg.author)\n    try {\n      if (member.roles.cache.get(GUEST_ROLE_ID)) {\n        await member.roles.remove(GUEST_ROLE_ID)\n        return msg.reply(\n          'Nice getting to know you! You are no longer a guest' +\n          ' and have full access, welcome!'\n        )\n      }\n    } catch (error) {\n      return msg.reply(`Error: ${error}`)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication in Wasp\nDESCRIPTION: Core configuration for enabling email authentication in a Wasp application. Includes user entity specification, email settings, and redirect paths for authentication flows.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/email.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        fromField: {\n          name: \"My App Postman\",\n          email: \"hello@itsme.com\"\n        },\n        emailVerification: {\n          clientRoute: EmailVerificationRoute,\n        },\n        passwordReset: {\n          clientRoute: PasswordResetRoute,\n        },\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n    onAuthSucceededRedirectTo: \"/\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub Auth Logic in TypeScript\nDESCRIPTION: This TypeScript code provides the typed implementation for GitHub authentication logic imported into `main.wasp`. It uses `defineUserSignupFields` from `wasp/server/auth` for type safety when mapping GitHub profile data (`data.profile.name`) to the `User` model fields (`displayName`, `username`). The `getConfig` function returns the desired GitHub OAuth scopes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/github.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  username: () => \"hardcoded-username\",\n  displayName: (data: any) => data.profile.name,\n})\n\nexport function getConfig() {\n  return {\n    scopes: ['user'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GitHub Authentication Configuration in Wasp\nDESCRIPTION: This snippet shows the minimal configuration needed to enable GitHub authentication in a Wasp application. It includes the gitHub method in the auth.methods dictionary with default settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/github.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Cron Job Worker Function - TypeScript\nDESCRIPTION: This TypeScript snippet exports the asynchronous function 'generateNewIdeasWorker', which iterates through all users and invokes the generateNewIdeas action for each user using the inherited context object. The function logs progress, handles exceptions, and expects the context parameter to include an ORM-like 'entities' property for querying users. Dependencies include a local import from '../ideas.js' and contextual access provided automatically by Wasp jobs. The function takes care to reset context per user; errors are caught and logged, and no value is returned.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { generateNewIdeas } from '../ideas.js';\n\nexport default async function generateNewIdeasWorker(_args: unknown, context: any) {\n  try {\n    console.log('Running recurring task: generateNewIdeasWorker')\n    const allUsers = await context.entities.User.findMany({});\n\n    for (const user of allUsers) {\n      context.user = user;\n      console.log('Generating new ideas for user: ', user.username);\n      await generateNewIdeas(undefined as never, context);\n      console.log('Done generating new ideas for user: ', user.username)\n    }\n\n  } catch (error: any) {\n    console.log('Recurring task error: ', error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: User Entity Schema Definition\nDESCRIPTION: Prisma schema definition for the User entity with basic required fields for authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/username-and-pass.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n}\n```\n\n----------------------------------------\n\nTITLE: Using Entities in API Implementation (TypeScript)\nDESCRIPTION: Shows how to use entities in the API implementation in TypeScript, including type definitions and accessing the entity through the context object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/apis.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FooBar } from \"wasp/server/api\";\n\nexport const fooBar: FooBar = (req, res, context) => {\n  res.json({ count: await context.entities.Task.count() });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Database Seeds in Wasp\nDESCRIPTION: Specifies seed functions to populate the database with initial data in the Wasp app configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/backends.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    // ...\n    seeds: [\n      import { devSeedSimple } from \"@server/dbSeeds.js\",\n      import { prodSeed } from \"@server/dbSeeds.js\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Auth Hook Registration in Wasp App (TypeScript) - wasp\nDESCRIPTION: TypeScript variant of the full auth configuration in main.wasp, with imports for hook implementations expected from TypeScript sources. Ensures all possible hooks (before/after signup/login and OAuth redirect) are connected to the app's authentication pipeline. Must be paired with TypeScript implementations for each referenced hook.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_20\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  auth: {\n    userEntity: User,\n    methods: {\n      ...\n    },\n    onBeforeSignup: import { onBeforeSignup } from \"@src/auth/hooks\",\n    onAfterSignup: import { onAfterSignup } from \"@src/auth/hooks\",\n    onBeforeOAuthRedirect: import { onBeforeOAuthRedirect } from \"@src/auth/hooks\",\n    onBeforeLogin: import { onBeforeLogin } from \"@src/auth/hooks\",\n    onAfterLogin: import { onAfterLogin } from \"@src/auth/hooks\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Action Usage in TypeScript\nDESCRIPTION: TypeScript version of client-side Action usage, showcasing automatic type inference and payload type checking.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/actions.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTask, markTaskAsDone } from 'wasp/client/operations'\n\n// TypeScript automatically infers the return values and type-checks\n// the payloads.\nconst newTask = await createTask({ description: 'Keep learning TypeScript' })\nawait markTaskAsDone({ id: 1 })\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Page with CRUD Operations in React (JavaScript)\nDESCRIPTION: This snippet shows how to use Wasp's generated CRUD operations for Tasks in a React component. It demonstrates querying all tasks, creating new tasks, and rendering the task list.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/crud.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tasks } from '@wasp/crud/Tasks'\nimport { useState } from 'react'\n\nexport const MainPage = () => {\n  const { data: tasks, isLoading, error } = Tasks.getAll.useQuery()\n  const createTask = Tasks.create.useAction()\n  const [taskDescription, setTaskDescription] = useState('')\n\n  function handleCreateTask() {\n    createTask({ description: taskDescription, isDone: false })\n    setTaskDescription('')\n  }\n\n  if (isLoading) return <div>Loading...</div>\n  if (error) return <div>Error: {error.message}</div>\n  return (\n    <div\n      style={{\n        fontSize: '1.5rem',\n        display: 'grid',\n        placeContent: 'center',\n        height: '100vh',\n      }}\n    >\n      <div>\n        <input\n          value={taskDescription}\n          onChange={(e) => setTaskDescription(e.target.value)}\n        />\n        <button onClick={handleCreateTask}>Create task</button>\n      </div>\n      <ul>\n        {tasks.map((task) => (\n          <li key={task.id}>{task.description}</li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Email Verification Function in JavaScript\nDESCRIPTION: This snippet defines a function for generating the content of email verification emails in JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/email.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getVerificationEmailContent = ({ verificationLink }) => ({\n  subject: 'Verify your email',\n  text: `Click the link below to verify your email: ${verificationLink}`,\n  html: `\n        <p>Click the link below to verify your email</p>\n        <a href=\"${verificationLink}\">Verify email</a>\n    `,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing API Middleware in TypeScript\nDESCRIPTION: TypeScript implementation of middleware configuration function with proper typing to configure CORS and other middleware for APIs.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/apis.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MiddlewareConfigFn } from \"@wasp/middleware\";\nexport const apiMiddleware: MiddlewareConfigFn = (config) => {\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email with `getEmail` in Wasp Auth (JS/TS)\nDESCRIPTION: Shows how to use the `getEmail` helper function from `wasp/auth` in a React component (JavaScript/TypeScript) to display a user's email associated with a task. This function returns the email if the user signed up via the Email method, otherwise `null`. Requires the `user` object passed to it includes the `auth` and `identities` relations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/entities.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"src/MainPage.jsx\"\nimport { getEmail } from 'wasp/auth'\n\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {getEmail(task.user)}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n```\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/MainPage.tsx\"\nimport { getEmail } from 'wasp/auth'\n\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {getEmail(task.user)}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Entity Types in React Components (TypeScript)\nDESCRIPTION: Illustrates the usage of an entity type within a React component. The ExamplePage function defines a Task object and renders its description. This setup leverages the type safety provided by the auto-generated Task type. Assumes TypeScript, React, and Wasp's exported entity types. Any mismatch between schema and usage is caught at compile time.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/entities.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from \"wasp/entities\"\n\nexport function ExamplePage() {\n  const task: Task = {\n    id: 123,\n    description: \"Some random task\",\n    isDone: false,\n  }\n  return <div>{task.description}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: React Chat Component Implementation - JavaScript\nDESCRIPTION: Client-side React component implementing a chat interface using WebSocket hooks for real-time messaging.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/web-sockets.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react'\nimport {\n  useSocket,\n  useSocketListener,\n} from 'wasp/client/webSocket'\n\nexport const ChatPage = () => {\n  const [messageText, setMessageText] = useState('')\n  const [messages, setMessages] = useState([])\n  const { socket, isConnected } = useSocket()\n\n  useSocketListener('chatMessage', logMessage)\n\n  function logMessage(msg) {\n    setMessages((priorMessages) => [msg, ...priorMessages])\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    socket.emit('chatMessage', messageText)\n    setMessageText('')\n  }\n\n  const messageList = messages.map((msg) => (\n    <li key={msg.id}>\n      <em>{msg.username}</em>: {msg.text}\n    </li>\n  ))\n  const connectionIcon = isConnected ? '🟢' : '🔴'\n\n  return (\n    <>\n      <h2>Chat {connectionIcon}</h2>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <div>\n            <div>\n              <input\n                type=\"text\"\n                value={messageText}\n                onChange={(e) => setMessageText(e.target.value)}\n              />\n            </div>\n            <div>\n              <button type=\"submit\">Submit</button>\n            </div>\n          </div>\n        </form>\n        <ul>{messageList}</ul>\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Auth in Wasp\nDESCRIPTION: Basic Wasp configuration for enabling GitHub authentication with user entity and redirect settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/github.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Wasp Auth Settings\nDESCRIPTION: Initial Wasp configuration for enabling username and password authentication with required app settings and auth method specification.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/username-and-pass.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Auth in Wasp App\nDESCRIPTION: Main Wasp application configuration defining Google authentication method with user entity and redirect settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/google.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {\n        configFn: import { getConfig } from \"@src/auth/google.js\",\n        userSignupFields: import { userSignupFields } from \"@src/auth/google.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Fields in Wasp Main Configuration\nDESCRIPTION: Demonstrates how to set up additional authentication fields in the main Wasp configuration file, including the User entity definition and auth setup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: \"/login\",\n    signup: {\n      additionalFields: import { fields } from \"@server/auth/signup.js\",\n    },\n  },\n}\n\nentity User {=psl\n  id Int @id @default(autoincrement())\n  username String @unique\n  password String\n  address String?\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Direct Prisma Client Usage in TypeScript\nDESCRIPTION: Shows how to directly interact with entities using Prisma Client in TypeScript server code, demonstrating task creation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/entities.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport prismaClient from '@wasp/dbClient'`\n\nprismaClient.task.create({\n    description: \"Read the Entities doc\",\n    isDone: true // almost :)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Pages in React (JavaScript)\nDESCRIPTION: This code snippet defines React components for login, signup, email verification, password reset request, and password reset pages. It uses Wasp's authentication components and React Router for navigation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/email.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  LoginForm,\n  SignupForm,\n  VerifyEmailForm,\n  ForgotPasswordForm,\n  ResetPasswordForm,\n} from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Don't have an account yet? <Link to=\"/signup\">go to signup</Link>.\n      </span>\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Forgot your password? <Link to=\"/request-password-reset\">reset it</Link>.\n      </span>\n    </Layout>\n  )\n}\n\nexport function Signup() {\n  return (\n    <Layout>\n      <SignupForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </Layout>\n  )\n}\n\nexport function EmailVerification() {\n  return (\n    <Layout>\n      <VerifyEmailForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        If everything is okay, <Link to=\"/login\">go to login</Link>\n      </span>\n    </Layout>\n  )\n}\n\nexport function RequestPasswordReset() {\n  return (\n    <Layout>\n      <ForgotPasswordForm />\n    </Layout>\n  )\n}\n\nexport function PasswordReset() {\n  return (\n    <Layout>\n      <ResetPasswordForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        If everything is okay, <Link to=\"/login\">go to login</Link>\n      </span>\n    </Layout>\n  )\n}\n\n// A layout component to center the content\nexport function Layout({ children }) {\n  return (\n    <div className=\"h-full w-full bg-white\">\n      <div className=\"flex min-h-[75vh] min-w-full items-center justify-center\">\n        <div className=\"h-full w-full max-w-sm bg-white p-5\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Extending SignupForm via Render Function in React (JavaScript)\nDESCRIPTION: Demonstrates how to extend the Wasp SignupForm in a React component by passing a render function to the additionalFields prop. The render function receives the react-hook-form object and the form state, enabling dynamic addon UI (such as showing a personalized greeting if the username is present). Requires Wasp's client/auth components. Inputs include form state and username, output is additional JSX UI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SignupForm, FormItemGroup } from 'wasp/client/auth'\\n\\nexport const SignupPage = () => {\\n  return (\\n    <SignupForm\\n      additionalFields={(form, state) => {\\n        const username = form.watch('username')\\n        return (\\n          username && (\\n            <FormItemGroup>\\n              Hello there <strong>{username}</strong> 👋\\n            </FormItemGroup>\\n          )\\n        )\\n      }}\\n    />\\n  )\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signup in TypeScript\nDESCRIPTION: A TypeScript implementation of a custom signup function with type definitions for input and output. It provides the same functionality as the JavaScript version but with added type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/email.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ensurePasswordIsPresent,\n  ensureValidPassword,\n  ensureValidEmail,\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  deserializeAndSanitizeProviderData,\n  findAuthIdentity,\n  createUser,\n  createEmailVerificationLink,\n  sendEmailVerificationEmail,\n} from 'wasp/server/auth'\nimport type { CustomSignup } from 'wasp/server/operations'\n\ntype CustomSignupInput = {\n  email: string\n  password: string\n}\ntype CustomSignupOutput = {\n  success: boolean\n  message: string\n}\n\nexport const signup: CustomSignup<CustomSignupInput, CustomSignupOutput> = async (args, _context) => {\n  ensureValidEmail(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('email', args.email)\n    const existingAuthIdentity = await findAuthIdentity(providerId)\n\n    if (existingAuthIdentity) {\n      const providerData = deserializeAndSanitizeProviderData<'email'>(existingAuthIdentity.providerData)\n      // Your custom code here\n    } else {\n      // sanitizeAndSerializeProviderData will hash the user's password\n      const newUserProviderData = await sanitizeAndSerializeProviderData<'email'>({\n          hashedPassword: args.password,\n          isEmailVerified: false,\n          emailVerificationSentAt: null,\n          passwordResetSentAt: null,\n      })\n      await createUser(\n        providerId,\n        providerData,\n        // Any additional data you want to store on the User entity\n        {},\n      )\n\n      // Verification link links to a client route e.g. /email-verification\n      const verificationLink = await createEmailVerificationLink(args.email, '/email-verification');\n      try {\n          await sendEmailVerificationEmail(\n              args.email,\n              {\n                  from: {\n                    name: \"My App Postman\",\n                    email: \"hello@itsme.com\",\n                  },\n                  to: args.email,\n                  subject: \"Verify your email\",\n                  text: `Click the link below to verify your email: ${verificationLink}`,\n                  html: `\n                      <p>Click the link below to verify your email</p>\n                      <a href=\"${verificationLink}\">Verify email</a>\n                  `,\n              }\n          );\n      } catch (e: unknown) {\n          console.error(\"Failed to send email verification email:\", e);\n          throw new HttpError(500, \"Failed to send email verification email.\");\n      } \n    }\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Login Page with Wasp Auth UI in React (TypeScript)\nDESCRIPTION: A TypeScript version of the React component implementing a login page using Wasp's Auth UI components with React Router navigation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/crud.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function LoginPage() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        placeContent: 'center',\n      }}\n    >\n      <LoginForm />\n      <div>\n        <Link to=\"/signup\">Create an account</Link>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Functions with Entity Context\nDESCRIPTION: Example of implementing query functions that use entity context to access Prisma API for database operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/queries.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getAllTasks = async (args, context) => {\n  return context.entities.Task.findMany({})\n}\n\nexport const getFilteredTasks = async (args, context) => {\n  return context.entities.Task.findMany({\n    where: { isDone: args.isDone },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Verification in JavaScript\nDESCRIPTION: This snippet shows how to use the verifyEmail action to implement email verification on the client-side in JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { verifyEmail } from 'wasp/client/auth'\n...\nawait verifyEmail({ token });\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Server Logic in TypeScript\nDESCRIPTION: Demonstrates how to implement the server-side WebSocket logic in TypeScript, including type definitions for events and payloads.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/web-sockets.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { v4 as uuidv4 } from 'uuid'\nimport { getFirstProviderUserId } from 'wasp/auth'\nimport { type WebSocketDefinition, type WaspSocketData } from 'wasp/server/webSocket'\n\nexport const webSocketFn: WebSocketFn = (io, context) => {\n  io.on('connection', (socket) => {\n    const username = getFirstProviderUserId(socket.data.user) ?? 'Unknown'\n    console.log('a user connected: ', username)\n\n    socket.on('chatMessage', async (msg) => {\n      console.log('message: ', msg)\n      io.emit('chatMessage', { id: uuidv4(), username, text: msg })\n      // You can also use your entities here:\n      // await context.entities.SomeEntity.create({ someField: msg })\n    })\n  })\n}\n\ntype WebSocketFn = WebSocketDefinition<\n  ClientToServerEvents,\n  ServerToClientEvents,\n  InterServerEvents,\n  SocketData\n>\n\ninterface ServerToClientEvents {\n  chatMessage: (msg: { id: string, username: string, text: string }) => void;\n}\n\ninterface ClientToServerEvents {\n  chatMessage: (msg: string) => void;\n}\n\ninterface InterServerEvents {}\n\n// Data that is attached to the socket.\n// NOTE: Wasp automatically injects the JWT into the connection,\n// and if present/valid, the server adds a user to the socket.\ninterface SocketData extends WaspSocketData {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Login Buttons in React (TypeScript)\nDESCRIPTION: This TypeScript version of the snippet shows how to import and use Google and GitHub sign-in buttons and URLs in a React component for a Wasp application. It includes both pre-built button components and custom link implementations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  SignInButton as GoogleSignInButton,\n  signInUrl as googleSignInUrl,\n} from '@wasp/auth/helpers/Google'\nimport {\n  SignInButton as GitHubSignInButton,\n  signInUrl as gitHubSignInUrl,\n} from '@wasp/auth/helpers/GitHub'\n\nexport const LoginPage = () => {\n  return (\n    <>\n      <GoogleSignInButton />\n      <GitHubSignInButton />\n      {/* or */}\n      <a href={googleSignInUrl}>Sign in with Google</a>\n      <a href={gitHubSignInUrl}>Sign in with GitHub</a>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Action in Wasp (Wasp)\nDESCRIPTION: Declares a Wasp action named 'createFoo', importing its implementation from a JavaScript file and associating it with the Foo entity. This provides the link between backend logic and Wasp's generated operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_16\n\nLANGUAGE: wasp\nCODE:\n```\naction createFoo {\n    fn: import { createFoo } from \"@src/actions.js\"\n    entities: [Foo]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeSignup Hook in JavaScript and TypeScript\nDESCRIPTION: This hook runs before a user signs up. It receives providerId, prisma, and req as input parameters, and its return value is ignored by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/auth-hooks.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const onBeforeSignup = async ({ providerId, prisma, req }) => {\n  // Hook code goes here\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { OnBeforeSignupHook } from 'wasp/server/auth'\n\nexport const onBeforeSignup: OnBeforeSignupHook = async ({\n  providerId,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Email User Data Migration Logic in TypeScript\nDESCRIPTION: This TypeScript code provides the implementation for migrating email-based user authentication data. The `migrateEmailHandler` function serves as the API handler, calling `migrateEmailAuth`. The `migrateEmailAuth` function iterates through users fetched via Prisma, checks if they use email auth and haven't been migrated yet, constructs the new `auth` record structure with associated identity data (including email verification status and password hash), and creates the new `Auth` record using `prisma.auth.create`. It returns statistics about the migration process.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"src/migrateToNewAuth.ts\"\nimport { prisma } from \"wasp/server\";\nimport { type ProviderName, type EmailProviderData } from \"wasp/server/auth\";\nimport { MigrateEmail } from \"wasp/server/api\";\n\nexport const migrateEmailHandler: MigrateEmail =\n  async (_req, res) => {\n    const result = await migrateEmailAuth();\n\n    res.status(200).json({ message: \"Migrated users to the new auth\", result });\n  };\n\nasync function migrateEmailAuth(): Promise<{\n  numUsersAlreadyMigrated: number;\n  numUsersNotUsingThisAuthMethod: number;\n  numUsersMigratedSuccessfully: number;\n}> {\n  const users = await prisma.user.findMany({\n    include: {\n      auth: true,\n    },\n  });\n\n  const result = {\n    numUsersAlreadyMigrated: 0,\n    numUsersNotUsingThisAuthMethod: 0,\n    numUsersMigratedSuccessfully: 0,\n  };\n\n  for (const user of users) {\n    if (user.auth) {\n      result.numUsersAlreadyMigrated++;\n      console.log(\"Skipping user (already migrated) with id:\", user.id);\n      continue;\n    }\n\n    if (!user.email || !user.password) {\n      result.numUsersNotUsingThisAuthMethod++;\n      console.log(\"Skipping user (not using email auth) with id:\", user.id);\n      continue;\n    }\n\n    const providerData: EmailProviderData = {\n      isEmailVerified: user.isEmailVerified,\n      emailVerificationSentAt:\n        user.emailVerificationSentAt?.toISOString() ?? null,\n      passwordResetSentAt: user.passwordResetSentAt?.toISOString() ?? null,\n      hashedPassword: user.password,\n    };\n    const providerName: ProviderName = \"email\";\n\n    await prisma.auth.create({\n      data: {\n        identities: {\n          create: {\n            providerName,\n            providerUserId: user.email,\n            providerData: JSON.stringify(providerData),\n          },\n        },\n        user: {\n          connect: {\n            id: user.id,\n          },\n        },\n      },\n    });\n    result.numUsersMigratedSuccessfully++;\n  }\n\n  return result;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing HomePage as a React Component (React + Wasp, TSX)\nDESCRIPTION: This TSX snippet implements the HomePage React component as referenced in main.wasp. It uses Wasp's useQuery React hook and getRecipes operation to retrieve and display a user's recipes. The component manages loading state and dynamically renders a list. Required dependencies: React, Wasp client hooks, and entities. Inputs: user prop and client/server setup; output: recipe list UI. Constraints: access is auth-protected and relies on previously defined entities and operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/introduction/introduction.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQuery, getRecipes } from \"wasp/client/operations\";\nimport { type User } from \"wasp/entities\";\n\nexport function HomePage({ user }: { user: User }) {\n  // Due to full-stack type safety, `recipes` will be of type `Recipe[]` here.\n  const { data: recipes, isLoading } = useQuery(getRecipes); // Calling our query here!\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <h1>Recipes</h1>\n      <ul>\n        {recipes ? recipes.map((recipe) => (\n          <li key={recipe.id}>\n            <div>{recipe.title}</div>\n            <div>{recipe.description}</div>\n          </li>\n        )) : 'No recipes defined yet!'}\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring an API in Wasp\nDESCRIPTION: Shows how to declare an API endpoint in a Wasp file, defining the HTTP route and the function implementation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/apis.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\napi fooBar { // APIs and their implementations don't need to (but can) have the same name.\n  fn: import { fooBar } from \"@src/apis\",\n  httpRoute: (GET, \"/foo/bar\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Verification Page with Wasp Form\nDESCRIPTION: This snippet shows how to create an email verification page using the VerifyEmailForm component provided by Wasp, including the necessary Wasp configuration and React component implementation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/ui.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\nroute EmailVerificationRoute { path: \"/email-verification\", to: EmailVerificationPage }\npage EmailVerificationPage {\n  component: import { VerifyEmailPage } from \"@src/VerifyEmailPage.tsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VerifyEmailForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function VerifyEmailPage() {\n  return <VerifyEmailForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Using Queries in Client Code\nDESCRIPTION: Examples of how to import and use the defined queries in client-side code, showing both JavaScript and TypeScript usage.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/queries.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAllTasks, getFilteredTasks } from 'wasp/client/operations'\n\nconst allTasks = await getAllTasks()\nconst doneTasks = await getFilteredTasks({ isDone: true })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAllTasks, getFilteredTasks } from 'wasp/client/operations'\n\nconst allTasks = await getAllTasks()\nconst doneTasks = await getFilteredTasks({ isDone: true })\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth Pages in React (TypeScript)\nDESCRIPTION: This snippet shows how to implement the authentication pages using React components in TypeScript, including the Login form and a layout component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/google.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"h-full w-full bg-white\">\n      <div className=\"flex min-h-[75vh] min-w-full items-center justify-center\">\n        <div className=\"h-full w-full max-w-sm bg-white p-5\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Middleware Customization in TypeScript\nDESCRIPTION: This TypeScript code defines the `serverMiddlewareFn` function with the `MiddlewareConfigFn` type from Wasp. It takes the `middlewareConfig` Map, modifies the 'cors' middleware to include additional allowed origins alongside `config.frontendUrl` using the `cors` package, and returns the updated map. This function is used for customizing the global middleware stack.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/middleware-config.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport cors from 'cors'\nimport { config, type MiddlewareConfigFn } from 'wasp/server'\n\nexport const serverMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {\n  // Example of adding an extra domains to CORS.\n  middlewareConfig.set('cors', cors({ origin: [config.frontendUrl, 'https://example1.com', 'https://example2.com'] }))\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple Auth Methods in Wasp\nDESCRIPTION: Example showing how to check for multiple authentication methods and access the appropriate user identifier based on which method the user signed up with.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nif (user.identities.email !== null) {\n  const email = user.identities.email.id\n  // ...\n} else if (user.identities.google !== null) {\n  const googleId = user.identities.google.id\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing createTask Action in JavaScript\nDESCRIPTION: This code defines the 'createTask' Action function in JavaScript. It uses the context.entities.Task.create method to add a new task to the database with the given description.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/06-actions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const createTask = async (args, context) => {\n  return context.entities.Task.create({\n    data: { description: args.description },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing SignupForm with Additional Fields (React + JavaScript)\nDESCRIPTION: Demonstrates extending Wasp's SignupForm component in a React JavaScript component by specifying additionalFields as a mixed array of object descriptors and field render functions. Depends on Wasp client auth components and React. Each object or render function represents an extra input, supporting custom validation and error handling. Accepts standard signup form data and dynamically augments the UI with custom fields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  SignupForm,\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        /* The address field is defined using an object */\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        /* The phone number is defined using a render function */\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: AuthIdentity Entity Definition in Prisma Schema\nDESCRIPTION: Defines the internal AuthIdentity entity used by Wasp to store user login credentials for various authentication methods. This entity is managed by Wasp and should not be modified directly by developers.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/entities.md#2025-04-22_snippet_17\n\nLANGUAGE: prisma\nCODE:\n```\nmodel AuthIdentity {\n  providerName   String\n  providerUserId String\n  providerData   String @default(\"{}\")\n  authId         String\n  auth           Auth   @relation(fields: [authId], references: [id], onDelete: Cascade)\n\n  @@id([providerName, providerUserId])\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Keycloak Authentication Configuration\nDESCRIPTION: TypeScript implementation of Keycloak authentication configuration with type definitions and OAuth scopes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/keycloak.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  username: () => 'hardcoded-username',\n  displayName: (data: any) => data.profile.name,\n})\n\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining userSignupFields Validation Object (TypeScript)\nDESCRIPTION: This TypeScript file exports userSignupFields with backend field validation via defineUserSignupFields (Wasp backend). The address field is validated asynchronously, throwing errors if missing or shorter than 5 characters. Tied to custom signup flow configured in main.wasp for usernameAndPassword. Needs wasp/server/auth and a data parameter with address. Outputs validated field or throws error.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_21\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Testing React Component with Mocked API Endpoints in JavaScript\nDESCRIPTION: Test for a Todo component that uses direct API calls, demonstrating how to mock API responses using the mockApi helper from Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/testing.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { test, expect } from \"vitest\";\nimport { screen } from \"@testing-library/react\";\n\nimport { mockServer, renderInContext } from \"wasp/client/test\";\nimport Todo from \"./Todo\";\n\nconst { mockApi } = mockServer();\n\nconst mockTasks = [\n  {\n    id: 1,\n    description: \"test todo 1\",\n    isDone: true,\n    userId: 1,\n  },\n];\n\ntest(\"handles mock data\", async () => {\n  mockApi(\"/tasks\", { res: mockTasks });\n\n  renderInContext(<Todo />);\n\n  await screen.findByText(\"test todo 1\");\n\n  expect(screen.getByRole(\"checkbox\")).toBeChecked();\n\n  screen.debug();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Wasp\nDESCRIPTION: Configuration code for setting up authentication in a Wasp application, including GitHub OAuth and email verification with password reset functionality.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-09-17-from-idea-to-20k-in-days-how-wasp-accelerated-nuloapps-launch.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {},\n      email: {\n        fromField: {\n          name: \"My App Postman\",\n          email: \"hello@itsme.com\"\n        },\n        emailVerification: {\n          clientRoute: EmailVerificationRoute,\n        },\n        passwordReset: {\n          clientRoute: PasswordResetRoute,\n        },\n        emailSender: {\n          provider: Dummy,\n        },\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Fields with Zod in TypeScript\nDESCRIPTION: TypeScript example of using the Zod validation library to validate user signup fields. This approach provides a more declarative way to define validation rules with type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\nimport * as z from 'zod'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: (data) => {\n    const AddressSchema = z\n      .string({\n        required_error: 'Address is required',\n        invalid_type_error: 'Address must be a string',\n      })\n      .min(10, 'Address must be at least 10 characters long')\n    const result = AddressSchema.safeParse(data.address)\n    if (result.success === false) {\n      throw new Error(result.error.issues[0].message)\n    }\n    return result.data\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing API Middleware (JavaScript)\nDESCRIPTION: Shows the implementation of API middleware in JavaScript to configure CORS.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/apis.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const apiMiddleware = (config) => {\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub Auth Helpers (TypeScript)\nDESCRIPTION: This TypeScript module provides helpers for GitHub OAuth integration. It imports 'defineUserSignupFields' from the Wasp auth server library to strictly type the mapping of provider data to app user fields. The 'userSignupFields' object defines how 'username' and 'displayName' are extracted, and the 'getConfig' function returns an object with OAuth scopes required. These are consumed by the Wasp auth configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/github.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  username: () => 'hardcoded-username',\n  displayName: (data: any) => data.profile.name,\n})\n\nexport function getConfig() {\n  return {\n    scopes: ['user'],\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: TypeScript Database Seed Function Implementation\nDESCRIPTION: TypeScript version of the seed function with type definitions. It creates a user with authentication credentials and a task using the Prisma client and imported action.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/backends.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTask } from './actions.js'\nimport { sanitizeAndSerializeProviderData } from 'wasp/server/auth'\nimport { type AuthUser } from 'wasp/auth'\nimport { PrismaClient } from '@prisma/client'\n\nexport const devSeedSimple = async (prisma: PrismaClient) => {\n  const user = await createUser(prisma, {\n    username: 'RiuTheDog',\n    password: 'bark1234',\n  })\n\n  await createTask(\n    { description: 'Chase the cat', isDone: false },\n    { user, entities: { Task: prisma.task } }\n  )\n};\n\nasync function createUser(\n  prisma: PrismaClient,\n  data: { username: string, password: string }\n): Promise<AuthUser> {\n  const newUser = await prismaClient.user.create({\n    data: {\n      auth: {\n        create: {\n          identities: {\n            create: {\n              providerName: 'username',\n              providerUserId: data.username,\n              providerData: sanitizeAndSerializeProviderData<'username'>({\n                password: data.password\n              }),\n            },\n          },\n        },\n      },\n    },\n  })\n\n  return newUser\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Queries in JavaScript\nDESCRIPTION: Demonstrates how to import and use a Wasp query on both client and server sides in JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/queries.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Use it on the client\nimport { getFoo } from 'wasp/client/operations'\n\n// Use it on the server\nimport { getFoo } from 'wasp/server/operations'\n```\n\n----------------------------------------\n\nTITLE: Checking Auth Method Data Existence in TypeScript\nDESCRIPTION: Example of how to safely check and access auth method-specific data in the AuthUser object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/entities.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nif (user.identities.google !== null) {\n  const userId = user.identities.google.id\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Worker Function in TypeScript\nDESCRIPTION: TypeScript implementation of a worker function with type definitions for input and output. Includes proper type annotations for job context and entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/jobs.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type MySpecialJob } from 'wasp/server/jobs'\nimport { type Task } from 'wasp/entities'\n\ntype Input = { name: string; }\ntype Output = { tasks: Task[]; }\n\nexport const foo: MySpecialJob<Input, Output> = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Login Form Customization Example\nDESCRIPTION: Full implementation showing combined customization of colors, logo, and layout for the login form component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/ui.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport const appearance = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from '@wasp/auth/forms/Login'\n\nimport { authAppearance } from './appearance'\nimport todoLogo from './todoLogo.png'\n\nexport function LoginPage() {\n  return <LoginForm appearance={appearance} logo={todoLogo} />\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Query Implementation in JavaScript\nDESCRIPTION: Shows how to implement queries on the server side with proper user context handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/queries.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAllTasks, getFilteredTasks } from 'wasp/server/operations'\n\n\nconst user = // Get an AuthUser object, e.g., from context.user in an operation.\n\n// ...\n\nconst allTasks = await getAllTasks({ user })\nconst doneTasks = await getFilteredTasks({ isDone: true }, { user })\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Signup Action in Wasp\nDESCRIPTION: Declaration of a custom signup action in the main Wasp configuration file that imports the implementation function from a JavaScript file and gives it access to the User entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/entities.md#2025-04-22_snippet_19\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\naction customSignup {\n  fn: import { signup } from \"@src/auth/signup.js\",\n  entities: [User]\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic CRUD Operations in Wasp\nDESCRIPTION: Example of declaring basic CRUD operations for a Task entity in Wasp, showing default implementations for get, getAll, create, update, and delete operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/crud.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\ncrud Tasks { // crud name here is \"Tasks\"\n  entity: Task,\n  operations: {\n    get: {},\n    getAll: {},\n    create: {},\n    update: {},\n    delete: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using updateTask Action in React Component (JavaScript)\nDESCRIPTION: This code demonstrates how to use the 'updateTask' action in a React component written in JavaScript. It handles the checkbox change event to update a task's status.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/06-actions.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  updateTask,\n  createTask,\n  getTasks,\n  useQuery,\n} from 'wasp/client/operations'\n\nconst TaskView = ({ task }) => {\n  const handleIsDoneChange = async (event) => {\n    try {\n      await updateTask({\n        id: task.id,\n        isDone: event.target.checked,\n      })\n    } catch (error) {\n      window.alert('Error while updating task: ' + error.message)\n    }\n  }\n\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        id={String(task.id)}\n        checked={task.isDone}\n        onChange={handleIsDoneChange}\n      />\n      {task.description}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sign-up Form in React (TypeScript)\nDESCRIPTION: This code snippet shows how to create a custom sign-up form using React and TypeScript in a Wasp application. It uses Wasp's auth functions for user registration and login, and includes TypeScript type annotations for improved type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/username-and-pass/create-your-own-ui.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { login, signup } from 'wasp/client/auth'\n\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\nexport function Signup() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState<Error | null>(null)\n  const navigate = useNavigate()\n\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    setError(null)\n    try {\n      await signup({ username, password })\n      await login(username, password)\n      navigate('/')\n    } catch (error: unknown) {\n      setError(error as Error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {error && <p>Error: {error.message}</p>}\n\n      <input\n        type=\"text\"\n        autoComplete=\"username\"\n        value={username}\n        onChange={(e) => setUsername(e.target.value)}\n        placeholder=\"Username\"\n      />\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        placeholder=\"Password\"\n      />\n      <button type=\"submit\">Sign Up</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Using SuperRefine\nDESCRIPTION: Implements custom validation logic using Zod's superRefine to validate username and city fields with specific rules.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2025-01-22-advanced-react-hook-form-zod-shadcn.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n.superRefine((data, ctx) => {\n      if (data.username.includes(' ')) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: 'Username cannot contain spaces',\n          path: ['username'],\n        });\n      }\n\n      if (/^\\d+$/.test(data.city)) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: 'City name cannot be purely numeric',\n          path: ['city'],\n        });\n      }\n  });\n```\n\n----------------------------------------\n\nTITLE: Adding Type Information to API Params and Response in TypeScript\nDESCRIPTION: Demonstrates how to provide additional type information for API parameters and response in TypeScript implementation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/apis.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar {\n  fn: import { fooBar } from \"@src/apis\",\n  entities: [Task],\n  httpRoute: (GET, \"/foo/bar/:email\")\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FooBar } from \"wasp/server/api\";\n\nexport const fooBar: FooBar<\n  { email: string }, // params\n  { answer: number } // response\n> = (req, res, _context) => {\n  console.log(req.params.email);\n  res.json({ answer: 42 });\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Static Image as URL with React in Vite (TypeScript)\nDESCRIPTION: This snippet shows importing a static image asset into a React component using Vite in a TypeScript project. The mechanism is identical to the JavaScript approach, but uses a .tsx file. Vite manages the import and resolves the image's URL for use in the React component. Prerequisites include a configured TypeScript React project and the asset present at the import path. The input is TypeScript/TSX code, and the output is a rendered image in the application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/static-assets.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport imgUrl from './img.png'\n\nfunction App() {\n  return <img src={imgUrl} alt=\"img\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Auth Field Definition in TypeScript\nDESCRIPTION: Migrating from defineAdditionalSignupFields to defineUserSignupFields for Email auth, showing the implementation of field validation for an address field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// highlight-next-line\nimport { defineAdditionalSignupFields } from '@wasp/auth/index.js'\n\n// highlight-next-line\nexport const fields = defineAdditionalSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeSignup Hook in JavaScript\nDESCRIPTION: Implementation of the onBeforeSignup hook in JavaScript, showing how to validate signup attempts and reject users based on custom criteria.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/auth-hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const onBeforeSignup = async ({ providerId, prisma, req }) => {\n  const count = await prisma.user.count()\n  console.log('number of users before', count)\n  console.log('provider name', providerId.providerName)\n  console.log('provider user ID', providerId.providerUserId)\n\n  if (count > 100) {\n    throw new HttpError(403, 'Too many users')\n  }\n\n  if (\n    providerId.providerName === 'email' &&\n    providerId.providerUserId === 'some@email.com'\n  ) {\n    throw new HttpError(403, 'This email is not allowed')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Login and Signup Routes in Wasp\nDESCRIPTION: Adds route definitions for login and signup pages in the Wasp configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/07-auth.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { SignupPage } from \"@src/SignupPage\"\n}\n\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { LoginPage } from \"@src/LoginPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wasp Queries in TypeScript with Type Safety\nDESCRIPTION: Provides the TypeScript implementation for the `getAllTasks` and `getFilteredTasks` queries, incorporating type safety using Wasp's auto-generated types. It defines a `Task` type and uses `GetAllTasks<void, Task[]>` and `GetFilteredTasks<Pick<Task, 'isDone'>, Task[]>` to strongly type the function signatures, including input arguments (`args`) and return values. This ensures type consistency between client calls and server implementations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/queries.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/queries.ts\"\nimport { type GetAllTasks, type GetFilteredTasks } from 'wasp/server/operations'\n\ntype Task = {\n  id: number\n  description: string\n  isDone: boolean\n}\n\n// our \"database\"\nconst tasks: Task[] = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\n// You don't need to use the arguments if you don't need them\nexport const getAllTasks: GetAllTasks<void, Task[]> = () => {\n  return tasks\n}\n\n// The 'args' object is something sent by the caller (most often from the client)\nexport const getFilteredTasks: GetFilteredTasks<\n  Pick<Task, 'isDone'>,\n  Task[]\n> = (args) => {\n  const { isDone } = args\n  return tasks.filter((task) => task.isDone === isDone)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Sending Emails in JavaScript\nDESCRIPTION: Shows how to send an email using the emailSender.send method in a JavaScript action handler, including specifying sender details, recipient, subject, and email content.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/email/email.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { emailSender } from \"wasp/server/email\";\n\n// In some action handler...\nconst info = await emailSender.send({\n  from: {\n    name: \"John Doe\",\n    email: \"john@doe.com\",\n  },\n  to: \"user@domain.com\",\n  subject: \"Saying hello\",\n  text: \"Hello world\",\n  html: \"Hello <strong>world</strong>\",\n});\n```\n\n----------------------------------------\n\nTITLE: React Component with Actions in TypeScript\nDESCRIPTION: TypeScript version of the task management component with proper type annotations and interfaces.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/actions.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { useQuery, getTask, markTaskAsDone } from 'wasp/client/operations'\n\nexport const TaskPage = ({ id }: { id: number }) => {\n  const { data: task } = useQuery(getTask, { id })\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>\n  }\n\n  const { description, isDone } = task\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n      {isDone || (\n        <button onClick={() => markTaskAsDone({ id })}>Mark as done.</button>\n      )}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using React Components and Wasp Queries in a Client-side Page\nDESCRIPTION: This snippet demonstrates how to use React components within a Wasp application, including how to import and use Wasp-specific queries and actions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-12-02-waspello.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// \"Special\" imports provided by Wasp.\nimport { useQuery } from '@wasp/queries'\nimport getListsAndCards from '@wasp/queries/getListsAndCards'\nimport createList from '@wasp/actions/createList'\n\nconst MainPage = ({ user }) => {\n  // Fetching data via useQuery.\n  const { data: listsAndCards, isFetchingListsAndCards, errorListsAndCards }\n    = useQuery(getListsAndCards)\n\n  // A lot of data transformations and sub components.\n  ...\n\n  // Display lists and cards.\n  return (\n    ...\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Root Component Implementation (JavaScript)\nDESCRIPTION: Example of a React root component implementation in JavaScript that sets up Redux provider and custom layout with router outlet.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/client-config.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Outlet } from 'react-router-dom'\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root() {\n  return (\n    <Provider store={store}>\n      <Layout />\n    </Provider>\n  )\n}\n\nfunction Layout() {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      // highlight-next-line\n      <Outlet />\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using getEmail in Task Handler (TypeScript)\nDESCRIPTION: TypeScript implementation of getEmail helper in a task handler with generic type CreateTask for proper type checking.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/_get-email.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getEmail } from 'wasp/auth'\n\nexport const createTask: CreateTask<...>  = async (args, context) => {\n  const email = getEmail(context.user)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub OAuth Scopes Function (JavaScript) - JavaScript\nDESCRIPTION: Provides the implementation for the 'getConfig' function which returns the scopes requested from GitHub during OAuth. No dependencies except the Wasp infrastructure and expected by the Wasp import system. Input: none; output: an object with an empty scopes array, easily modifiable to request additional profile access.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/github.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nexport function getConfig() {\n  return {\n    scopes: [],\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Email Migration API Route Definition in Wasp\nDESCRIPTION: Defines an API route for email authentication migration in Wasp configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_31\n\nLANGUAGE: wasp\nCODE:\n```\napi migrateEmail {\n  httpRoute: (GET, \"/migrate-email\"),\n  fn: import { migrateEmailHandler } from \"@src/migrateToNewAuth\",\n  entities: []\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Queries in JavaScript\nDESCRIPTION: Shows how to import and use Queries on the client side in JavaScript, demonstrating basic query calls.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/queries.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAllTasks, getFilteredTasks } from 'wasp/client/operations'\n\n// ...\n\nconst allTasks = await getAllTasks()\nconst doneTasks = await getFilteredTasks({ isDone: true })\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Routes and Pages in Wasp\nDESCRIPTION: This code snippet demonstrates how to add the necessary authentication routes and pages in the main.wasp file, including the login route and page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/keycloak.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Auth Methods in Wasp App Configuration (TypeScript)\nDESCRIPTION: This Wasp code snippet (TypeScript style) defines the app and authentication configuration in main.wasp for a TypeScript-based Wasp app. It specifies the app name, user entity, supported auth methods, and the redirect route on authentication failure. Used at the root of a Wasp project. Requires a user-defined User entity and app MyApp. Inputs/outputs are Wasp auth configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_17\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  //...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {}, // use this or email, not both\n      email: {}, // use this or usernameAndPassword, not both\n      google: {},\n      gitHub: {},\n    },\n    onAuthFailedRedirectTo: \"/someRoute\",\n  }\n}\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Implementing onAfterSignup Hook in JavaScript\nDESCRIPTION: Shows the implementation of the onAfterSignup hook in JavaScript. This hook is called after user creation and can be used for actions like sending welcome emails or syncing with third-party services.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const onAfterSignup = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  const count = await prisma.user.count()\n  console.log('number of users after', count)\n  console.log('user object', user)\n\n  // If this is an OAuth signup, you have access to the OAuth tokens and the uniqueRequestId\n  if (oauth) {\n    console.log('accessToken', oauth.tokens.accessToken)\n    console.log('uniqueRequestId', oauth.uniqueRequestId)\n\n    const id = oauth.uniqueRequestId\n    const data = someKindOfStore.get(id)\n    if (data) {\n      console.log('saved data for the ID', data)\n    }\n    someKindOfStore.delete(id)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Global Middleware in Wasp and JavaScript\nDESCRIPTION: This example shows how to customize global middleware for all operations and APIs in a Wasp application. It demonstrates adding extra domains to CORS configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/middleware-config.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  server: {\n    middlewareConfigFn: import { serverMiddlewareFn } from \"@src/serverSetup\"\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport cors from 'cors'\nimport { config } from 'wasp/server'\n\nexport const serverMiddlewareFn = (middlewareConfig) => {\n  // Example of adding extra domains to CORS.\n  middlewareConfig.set('cors', cors({ origin: [config.frontendUrl, 'https://example1.com', 'https://example2.com'] }))\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Provider in Root Component (JavaScript)\nDESCRIPTION: JavaScript implementation of a root component that sets up a Redux provider to make the store available throughout the application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/client-config.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Outlet } from 'react-router-dom'\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root() {\n  return (\n    <Provider store={store}>\n      <Outlet />\n    </Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Pages with Tailwind and Wasp Auth UI Components in React (JavaScript/JSX)\nDESCRIPTION: Implements login, signup, email verification, password reset request, and password reset pages using React function components with Wasp's Auth UI elements and Tailwind CSS classes. Requires 'wasp/client/auth' and 'react-router-dom' as dependencies, and includes a reusable Layout component for consistent styling. Inputs are user credentials or email, outputs are rendered forms, and navigation is handled via React Router. Designed for a Wasp project using JavaScript and JSX.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  LoginForm,\n  SignupForm,\n  VerifyEmailForm,\n  ForgotPasswordForm,\n  ResetPasswordForm,\n} from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Don't have an account yet? <Link to=\"/signup\">go to signup</Link>.\n      </span>\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Forgot your password? <Link to=\"/request-password-reset\">reset it</Link>\n        .\n      </span>\n    </Layout>\n  );\n}\n\nexport function Signup() {\n  return (\n    <Layout>\n      <SignupForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </Layout>\n  );\n}\n\nexport function EmailVerification() {\n  return (\n    <Layout>\n      <VerifyEmailForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        If everything is okay, <Link to=\"/login\">go to login</Link>\n      </span>\n    </Layout>\n  );\n}\n\nexport function RequestPasswordReset() {\n  return (\n    <Layout>\n      <ForgotPasswordForm />\n    </Layout>\n  );\n}\n\nexport function PasswordReset() {\n  return (\n    <Layout>\n      <ResetPasswordForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        If everything is okay, <Link to=\"/login\">go to login</Link>\n      </span>\n    </Layout>\n  );\n}\n\n// A layout component to center the content\nexport function Layout({ children }) {\n  return (\n    <div className=\"w-full h-full bg-white\">\n      <div className=\"min-w-full min-h-[75vh] flex items-center justify-center\">\n        <div className=\"w-full h-full max-w-sm p-5 bg-white\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Static Asset URL in React (JavaScript)\nDESCRIPTION: Demonstrates importing a static image (`img.png`) within a JavaScript React component (`src/App.jsx`). The imported variable `imgUrl` holds the URL of the asset, processed by Vite, which is then used as the `src` for an `<img>` tag. This ensures the asset is included in the build and referenced correctly.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/static-assets.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"src/App.jsx\"\nimport imgUrl from './img.png'\n\nfunction App() {\n  return <img src={imgUrl} alt=\"img\" />\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth Pages in React\nDESCRIPTION: This snippet demonstrates how to create the Login and Signup pages using Wasp's Auth UI components in a React file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/username-and-pass.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LoginForm, SignupForm } from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Don't have an account yet? <Link to=\"/signup\">go to signup</Link>.\n      </span>\n    </Layout>\n  );\n}\n\nexport function Signup() {\n  return (\n    <Layout>\n      <SignupForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </Layout>\n  );\n}\n\n// A layout component to center the content\nexport function Layout({ children }) {\n  return (\n    <div className=\"w-full h-full bg-white\">\n      <div className=\"min-w-full min-h-[75vh] flex items-center justify-center\">\n        <div className=\"w-full h-full max-w-sm p-5 bg-white\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Auth Routes in Wasp\nDESCRIPTION: Configuration of login and signup routes with their corresponding page components in Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/username-and-pass.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { Signup } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Server Implementation - JavaScript\nDESCRIPTION: Server-side WebSocket implementation using Socket.IO. Handles connection events and chat messages, with access to user context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/web-sockets.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v4 as uuidv4 } from 'uuid'\nimport { getFirstProviderUserId } from 'wasp/auth'\n\nexport const webSocketFn = (io, context) => {\n  io.on('connection', (socket) => {\n    const username = getFirstProviderUserId(socket.data.user) ?? 'Unknown'\n    console.log('a user connected: ', username)\n\n    socket.on('chatMessage', async (msg) => {\n      console.log('message: ', msg)\n      io.emit('chatMessage', { id: uuidv4(), username, text: msg })\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Job Declaration in Wasp\nDESCRIPTION: Example of declaring a background job in a Wasp configuration file. The job uses PgBoss executor and references a worker function from an external file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/jobs.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\njob mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@src/workers/bar\"\n  },\n  entities: [Task],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Form in React\nDESCRIPTION: Example of implementing a login page using Wasp's LoginForm component in both JavaScript and TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/ui.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { LoginPage } from \"@src/LoginPage.jsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function LoginPage() {\n  return <LoginForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing URL Parameters in React Components\nDESCRIPTION: Examples of how to access URL parameters in React components implementing Wasp pages. The JavaScript version uses props directly, while the TypeScript version uses RouteComponentProps for type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/03-pages.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport const HelloPage = (props) =>  {\n  return <div>Here's {props.match.params.name}!</div>\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RouteComponentProps } from 'react-router-dom'\n\nexport const HelloPage = (\n  props: RouteComponentProps<{ name: string }>\n) => {\n  return <div>Here's {props.match.params.name}!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using getTasks Query in React Component (TypeScript)\nDESCRIPTION: This React component uses the getTasks Query with Wasp's useQuery hook in TypeScript. It includes type annotations and renders a list of tasks or a loading/error message.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/05-queries.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Task } from 'wasp/entities'\nimport { getTasks, useQuery } from 'wasp/client/operations'\n\nexport const MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n\nconst TaskView = ({ task }: { task: Task }) => {\n  return (\n    <div>\n      <input type=\"checkbox\" id={String(task.id)} checked={task.isDone} />\n      {task.description}\n    </div>\n  )\n}\n\nconst TasksList = ({ tasks }: { tasks: Task[] }) => {\n  if (!tasks?.length) return <div>No tasks</div>\n\n  return (\n    <div>\n      {tasks.map((task, idx) => (\n        <TaskView task={task} key={idx} />\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Auth in Wasp File\nDESCRIPTION: This snippet shows how to configure the auth object in the main Wasp file to enable Google authentication. It specifies the User entity and enables the Google auth method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/google.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signup Function in TypeScript\nDESCRIPTION: This code implements a custom signup function in TypeScript, handling email validation, password checks, user creation, and email verification with type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/email.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ensurePasswordIsPresent,\n  ensureValidPassword,\n  ensureValidEmail,\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  deserializeAndSanitizeProviderData,\n  findAuthIdentity,\n  createUser,\n  createEmailVerificationLink,\n  sendEmailVerificationEmail,\n} from 'wasp/server/auth'\nimport type { CustomSignup } from 'wasp/server/operations'\n\ntype CustomSignupInput = {\n  email: string\n  password: string\n}\ntype CustomSignupOutput = {\n  success: boolean\n  message: string\n}\n\nexport const signup: CustomSignup<CustomSignupInput, CustomSignupOutput> = async (args, _context) => {\n  ensureValidEmail(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('email', args.email)\n    const existingAuthIdentity = await findAuthIdentity(providerId)\n\n    if (existingAuthIdentity) {\n      const providerData = deserializeAndSanitizeProviderData<'email'>(existingAuthIdentity.providerData)\n      // Your custom code here\n    } else {\n      // sanitizeAndSerializeProviderData will hash the user's password\n      const newUserProviderData = await sanitizeAndSerializeProviderData<'email'>({\n          hashedPassword: args.password,\n          isEmailVerified: false,\n          emailVerificationSentAt: null,\n          passwordResetSentAt: null,\n      })\n      await createUser(\n        providerId,\n        providerData,\n        // Any additional data you want to store on the User entity\n        {},\n      )\n\n      // Verification link links to a client route e.g. /email-verification\n      const verificationLink = await createEmailVerificationLink(args.email, '/email-verification');\n      try {\n          await sendEmailVerificationEmail(\n              args.email,\n              {\n                  from: {\n                    name: \"My App Postman\",\n                    email: \"hello@itsme.com\",\n                  },\n                  to: args.email,\n                  subject: \"Verify your email\",\n                  text: `Click the link below to verify your email: ${verificationLink}`,\n                  html: `\n                      <p>Click the link below to verify your email</p>\n                      <a href=\"${verificationLink}\">Verify email</a>\n                  `,\n              }\n          );\n      } catch (e: unknown) {\n          console.error(\"Failed to send email verification email:\", e);\n          throw new HttpError(500, \"Failed to send email verification email.\");\n      } \n    }\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Verification Client Route in Wasp App (Wasp DSL)\nDESCRIPTION: Defines the client route for the email verification flow in the Wasp app's configuration. Placed in the main.wasp file, this block maps email verification links sent to users to a specific client route, typically directing users to the EmailVerification page after clicking the link in their email. Dependency: a defined EmailVerificationRoute. No dynamic input; configures routing behavior for email verification.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\nemailVerification: {\n    clientRoute: EmailVerificationRoute,\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing main React component with WebSocket integration\nDESCRIPTION: Main App component that utilizes the useSocket hook to establish a WebSocket connection, manage poll state, and handle voting functionality.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-09-build-real-time-voting-app-websockets-react-typescript.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useMemo, useEffect } from 'react';\nimport { Layout } from './Layout';\nimport { Button, Card } from 'flowbite-react';\nimport { useSocket } from './useSocket';\nimport type { PollState } from './useSocket';\n\nconst App = () => {\n\t// set the PollState after receiving it from the server\n  const [poll, setPoll] = useState<PollState | null>(null);\n\t \n\t// since we're not implementing Auth, let's fake it by\n\t// creating some random user names when the App mounts\n  const randomUser = useMemo(() => {\n    const randomName = Math.random().toString(36).substring(7);\n    return `User-${randomName}`;\n  }, []);\n\t\n\t// 🔌⚡️ get the connected socket client from our useSocket hook! \n  const { socket, isConnected } = useSocket({ endpoint: `http://localhost:8000`, token: randomUser });\n\n  const totalVotes = useMemo(() => {\n    return poll?.options.reduce((acc, option) => acc + option.votes.length, 0) ?? 0;\n  }, [poll]);\n\n\t// every time we receive an 'updateState' event from the server\n\t// e.g. when a user makes a new vote, we set the React's state\n\t// with the results of the new PollState \n  socket.on('updateState', (newState: PollState) => {\n    setPoll(newState);\n  });\n\n  useEffect(() => {\n    socket.emit('askForStateUpdate');\n  }, []);\n\n  function handleVote(optionId: number) {\n    socket.emit('vote', optionId);\n  }\n\n  return (\n    <Layout user={randomUser}>\n      <div className='w-full max-w-2xl mx-auto p-8'>\n        <h1 className='text-2xl font-bold'>{poll?.question ?? 'Loading...'}</h1>\n        <h2 className='text-lg italic'>{isConnected ? 'Connected ✅' : 'Disconnected 🛑'}</h2>\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining Default Global Middleware Map and Types in TypeScript\nDESCRIPTION: This snippet presents the TypeScript definition for the default global middleware in a Wasp application. It includes type definitions for `MiddlewareConfig` (a Map of string keys to Express request handlers) and `MiddlewareConfigFn` (a function type for modifying the middleware map). It then defines `defaultGlobalMiddleware` with the standard middleware stack (Helmet, CORS, Morgan, body parsers, cookie-parser), similar to the JavaScript version but with type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/middleware-config.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport type MiddlewareConfig = Map<string, express.RequestHandler>\n\n// Used in the examples below 👇\nexport type MiddlewareConfigFn = (middlewareConfig: MiddlewareConfig) => MiddlewareConfig\n\nconst defaultGlobalMiddleware: MiddlewareConfig = new Map([\n  ['helmet', helmet()],\n  ['cors', cors({ origin: config.allowedCORSOrigins })],\n  ['logger', logger('dev')],\n  ['express.json', express.json()],\n  ['express.urlencoded', express.urlencoded({ extended: false })],\n  ['cookieParser', cookieParser()]\n])\n```\n\n----------------------------------------\n\nTITLE: Declaring Entity Usage in Wasp Actions (main.wasp)\nDESCRIPTION: Shows how to declare that Wasp Actions (`createTask`, `markTaskAsDone`), implemented in JavaScript (`@src/actions.js`), use the `Task` Entity within a `main.wasp` file. Specifying entities enables Prisma API access for that entity via the action's context argument and triggers Wasp's automatic cache invalidation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_13\n\nLANGUAGE: wasp\nCODE:\n```\naction createTask {\n  fn: import { createTask } from \"@src/actions.js\",\n  entities: [Task]\n}\n\naction markTaskAsDone {\n  fn: import { markTaskAsDone } from \"@src/actions.js\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp App Client (TypeScript)\nDESCRIPTION: Basic Wasp application configuration showing client setup with TypeScript, including root component, setup function imports, and base directory configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/client-config.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.tsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.ts\",\n    baseDir: \"/my-app\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Email Signup in JavaScript\nDESCRIPTION: This code implements a custom email signup process in JavaScript, including email validation, user creation, and sending a verification email.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/advanced/custom-auth-actions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\nimport {\n  createEmailVerificationLink,\n  createProviderId,\n  createUser,\n  ensurePasswordIsPresent,\n  ensureValidEmail,\n  ensureValidPassword,\n  findAuthIdentity,\n  getProviderData,\n  sanitizeAndSerializeProviderData,\n  sendEmailVerificationEmail,\n} from 'wasp/server/auth'\n\nexport const signup = async (args, _context) => {\n  ensureValidEmail(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('email', args.email)\n    const existingAuthIdentity = await findAuthIdentity(providerId)\n\n    let providerData\n\n    if (existingAuthIdentity) {\n      // User already exists, handle accordingly\n\n      // For example, throw an error or return a message\n      throw new HttpError(400, 'Email already exists.')\n\n      // Or, another example, you can check if the user is already\n      // verified and re-send the verification email if not\n      providerData = getProviderData(existingAuthIdentity.providerData)\n      if (providerData.isEmailVerified) {\n        throw new HttpError(400, 'Email already verified.')\n      }\n    }\n\n    if (!providerData) {\n      providerData = await sanitizeAndSerializeProviderData({\n        // The provider will hash the password for us, so we don't need to do it here.\n        hashedPassword: args.password,\n        isEmailVerified: false,\n        emailVerificationSentAt: null,\n        passwordResetSentAt: null,\n      })\n      await createUser(\n        providerId,\n        providerData,\n        // Any additional data you want to store on the User entity\n        {}\n      )\n    }\n\n    // Verification link links to a client route e.g. /email-verification\n    const verificationLink = await createEmailVerificationLink(\n      args.email,\n      '/email-verification'\n    )\n    try {\n      await sendEmailVerificationEmail(args.email, {\n        from: {\n          name: 'My App Postman',\n          email: 'hello@itsme.com',\n        },\n        to: args.email,\n        subject: 'Verify your email',\n        text: `Click the link below to verify your email: ${verificationLink}`,\n        html: `\n                      <p>Click the link below to verify your email</p>\n                      <a href=\"${verificationLink}\">Verify email</a>\n                  `,\n      })\n    } catch (e) {\n      console.error('Failed to send email verification email:', e)\n      throw new HttpError(500, 'Failed to send email verification email.')\n    }\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Component Using Wasp Queries (JSX)\nDESCRIPTION: Defines a React component `Todo` in JSX (`src/Todo.jsx`). This component uses the `useQuery` hook from `wasp/client/operations` to fetch tasks via the `getTasks` query and renders them as a list.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/testing.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useQuery, getTasks } from \"wasp/client/operations\";\n\nconst Todo = (_props) => {\n  const { data: tasks } = useQuery(getTasks);\n  return (\n    <ul>\n      {tasks &&\n        tasks.map((task) => (\n          <li key={task.id}>\n            <input type=\"checkbox\" value={task.isDone} />\n            {task.description}\n          </li>\n        ))}\n    </ul>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Delaying a Wasp Job Submission (TypeScript)\nDESCRIPTION: Demonstrates how to schedule a job for execution after a delay using the `.delay()` method before `.submit()` in a TypeScript context. This example delays the `mySpecialJob` execution by 10 seconds. It also shows passing typed job arguments (`{ job: \"args\" }`) and executor-specific options (`{ \"retryLimit\": 2 }`) during submission.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/jobs.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"someAction.ts\"\nconst submittedJob = await mySpecialJob\n  .delay(10)\n  .submit({ job: \"args\" }, { \"retryLimit\": 2 })\n```\n```\n\n----------------------------------------\n\nTITLE: Using Actions/Queries on Client (TypeScript)\nDESCRIPTION: Shows how to import and use Actions or Queries in client-side TypeScript code, including type imports.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/actions.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Use it on the client\nimport { createFoo } from 'wasp/client/operations'\n\n// Use it on the server\nimport { createFoo } from 'wasp/server/operations'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateFoo } from 'wasp/server/operations'\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Auth in Wasp File\nDESCRIPTION: Basic configuration for enabling GitHub authentication in the Wasp application file, including user entity specification and auth method setup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/github.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side WebSocket React Component in JavaScript\nDESCRIPTION: JavaScript React component implementing WebSocket functionality using useSocket and useSocketListener hooks for chat functionality.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/web-sockets.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react'\nimport {\n  useSocket,\n  useSocketListener,\n} from 'wasp/client/webSocket'\n\nexport const ChatPage = () => {\n  const [messageText, setMessageText] = useState('')\n  const [messages, setMessages] = useState([])\n  const { socket, isConnected } = useSocket()\n\n  useSocketListener('chatMessage', logMessage)\n\n  function logMessage(msg) {\n    setMessages((priorMessages) => [msg, ...priorMessages])\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    socket.emit('chatMessage', messageText)\n    setMessageText('')\n  }\n\n  const messageList = messages.map((msg) => (\n    <li key={msg.id}>\n      <em>{msg.username}</em>: {msg.text}\n    </li>\n  ))\n  const connectionIcon = isConnected ? '🟢' : '🔴'\n\n  return (\n    <>\n      <h2>Chat {connectionIcon}</h2>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <div>\n            <div>\n              <input\n                type=\"text\"\n                value={messageText}\n                onChange={(e) => setMessageText(e.target.value)}\n              />\n            </div>\n            <div>\n              <button type=\"submit\">Submit</button>\n            </div>\n          </div>\n        </form>\n        <ul>{messageList}</ul>\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeLogin Hook\nDESCRIPTION: Example of implementing the onBeforeLogin hook to validate users before they log in, with the ability to reject login attempts based on specific criteria.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/auth-hooks.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  ...\n  auth: {\n    ...\n    onBeforeLogin: import { onBeforeLogin } from \"@src/auth/hooks\",\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const onBeforeLogin = async ({ providerId, user, prisma, req }) => {\n  if (\n    providerId.providerName === 'email' &&\n    providerId.providerUserId === 'some@email.com'\n  ) {\n    throw new HttpError(403, 'You cannot log in with this email')\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\nimport type { OnBeforeLoginHook } from 'wasp/server/auth'\n\nexport const onBeforeLogin: OnBeforeLoginHook = async ({\n  providerId,\n  user,\n  prisma,\n  req,\n}) => {\n  if (\n    providerId.providerName === 'email' &&\n    providerId.providerUserId === 'some@email.com'\n  ) {\n    throw new HttpError(403, 'You cannot log in with this email')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Wasp App Client with Root Component and Setup (JavaScript, WASP)\nDESCRIPTION: Defines a new Wasp app by specifying core metadata and client configuration using JavaScript. Sets the app's title and imports the root React component and setup function written in JavaScript. Dependencies include referenced JavaScript modules (e.g., @src/Root.jsx and @src/myClientSetupCode.js). Primary parameters are the app name, title, and client imports. Output is a configured Wasp project ready for initialization. Limitations: only works with files that exist and are implemented correctly.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/client-config.md#2025-04-22_snippet_11\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.jsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an API in TypeScript\nDESCRIPTION: TypeScript implementation of a custom API endpoint with proper type information. The function uses the generated FooBar type from Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/apis.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FooBar } from \"@wasp/apis/types\"; // This type is generated by Wasp based on the `api` declaration above.\n\nexport const fooBar: FooBar = (req, res, context) => {\n  res.set(\"Access-Control-Allow-Origin\", \"*\"); // Example of modifying headers to override Wasp default CORS middleware.\n  res.json({ msg: `Hello, ${context.user?.username || \"stranger\"}!` });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing User Signup Fields Validation in JavaScript\nDESCRIPTION: JavaScript implementation of the userSignupFields object that defines validation logic for extra signup fields. This example validates the address field by checking its type and length.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Testing React Todo Component with Mocked APIs - JavaScript\nDESCRIPTION: Uses Wasp's mockServer and renderInContext helpers to mock API endpoints for a Todo component. This Vitest-based test injects mock data, renders the component, checks that the UI updates as expected, and ensures mocks are triggered. Depends on React Testing Library and Vitest.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/testing.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { test, expect } from \\\"vitest\\\";\\nimport { screen } from \\\"@testing-library/react\\\";\\n\\nimport { mockServer, renderInContext } from \\\"wasp/client/test\\\";\\nimport Todo from \\\"./Todo\\\";\\n\\nconst { mockApi } = mockServer();\\n\\nconst mockTasks = [\\n  {\\n    id: 1,\\n    description: \\\"test todo 1\\\",\\n    isDone: true,\\n    userId: 1,\\n  },\\n];\\n\\ntest(\\\"handles mock data\\\", async () => {\\n  mockApi(\\\"/tasks\\\", { res: mockTasks });\\n\\n  renderInContext(<Todo />);\\n\\n  await screen.findByText(\\\"test todo 1\\\");\\n\\n  expect(screen.getByRole(\\\"checkbox\\\")).toBeChecked();\\n\\n  screen.debug();\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Settings with app.db Field in JavaScript\nDESCRIPTION: Full example of database configuration in a Wasp application using JavaScript. Shows how to set the database system to PostgreSQL, define database seeds, and configure Prisma client features.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/backends.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  db: {\n    system: PostgreSQL,\n    seeds: [\n      import devSeed from \"@src/dbSeeds.js\"\n    ],\n    prisma: {\n      clientPreviewFeatures: [\"extendedWhereUnique\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Password with Hashing in JavaScript\nDESCRIPTION: Demonstrates how to update a user's password with automatic hashing in JavaScript. It uses Wasp's helper functions to find the auth identity, deserialize provider data, and update the hashed password.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createProviderId,\n  findAuthIdentity,\n  updateAuthIdentityProviderData,\n  deserializeAndSanitizeProviderData,\n} from 'wasp/server/auth';\n\nexport const updatePassword = async (args, context) => {\n  const providerId = createProviderId('email', args.email)\n  const authIdentity = await findAuthIdentity(providerId)\n  if (!authIdentity) {\n      throw new HttpError(400, \"Unknown user\")\n  }\n  \n  const providerData = deserializeAndSanitizeProviderData(authIdentity.providerData)\n\n  // Updates the password and hashes it automatically.\n  await updateAuthIdentityProviderData(providerId, providerData, {\n      hashedPassword: args.password,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: API-Specific Middleware Implementation in TypeScript\nDESCRIPTION: TypeScript implementation of an API-specific middleware function with proper type definitions, replacing the default JSON middleware with raw body parsing for a webhook endpoint.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/middleware-config.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { type WebhookCallback } from 'wasp/server/api'\nimport { type MiddlewareConfigFn } from 'wasp/server'\n\nexport const webhookCallback: WebhookCallback = (req, res, _context) => {\n  res.json({ msg: req.body.length })\n}\n\nexport const webhookCallbackMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {\n  console.log('webhookCallbackMiddlewareFn: Swap express.json for express.raw')\n\n  middlewareConfig.delete('express.json')\n  middlewareConfig.set('express.raw', express.raw({ type: '*/*' }))\n\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Password-based Authentication in Wasp\nDESCRIPTION: This function migrates password-based authentication data to the new auth system. It verifies the old password, hashes it using a new algorithm, and updates the auth identity provider data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport const migratePassword: MigratePassword<\n  MigratePasswordInput,\n  MigratePasswordOutput\n> = async ({ password, username }, _context) => {\n  const providerId = createProviderId(\"username\", username);\n  const authIdentity = await findAuthIdentity(providerId);\n\n  if (!authIdentity) {\n    throw new HttpError(400, \"Something went wrong\");\n  }\n\n  const providerData = deserializeAndSanitizeProviderData<\"username\">(authIdentity.providerData);\n\n  try {\n    const SP = new SecurePassword();\n\n    // This will verify the password using the old algorithm\n    const result = await SP.verify(\n      Buffer.from(password),\n      Buffer.from(providerData.hashedPassword, \"base64\")\n    );\n\n    if (result !== SecurePassword.VALID) {\n      throw new HttpError(400, \"Something went wrong\");\n    }\n\n    // This will hash the password using the new algorithm and update the\n    // provider data in the database.\n    await updateAuthIdentityProviderData<\"username\">(providerId, providerData, {\n      hashedPassword: password,\n    });\n  } catch (e) {\n    throw new HttpError(400, \"Something went wrong\");\n  }\n\n  return {\n    message: \"Password migrated successfully.\",\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp Server Basic Setup\nDESCRIPTION: Basic server configuration in Wasp showing setupFn and middlewareConfigFn declarations\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/server-config.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  server: {\n    setupFn: import { mySetupFunction } from \"@src/myServerSetupCode.js\",\n    middlewareConfigFn: import { myMiddlewareConfigFn } from \"@src/myServerSetupCode.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Database Seed Function - JavaScript\nDESCRIPTION: Defines an async seed function in JavaScript to populate a development PostgreSQL database with sample data. Utilizes an action ('createTask'), user-creation helper, and Prisma client injection. Key parameters: 'prisma' for database access, user credentials, and seed logic. Dependencies: createTask, custom helper, and server-side import from Wasp's authentication utility. Outputs: new user and initial tasks in DB.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/backends.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { createTask } from './actions.js'\nimport { sanitizeAndSerializeProviderData } from 'wasp/server/auth'\n\nexport const devSeedSimple = async (prisma) => {\n  const user = await createUser(prisma, {\n    username: 'RiuTheDog',\n    password: 'bark1234',\n  })\n\n  await createTask(\n    { description: 'Chase the cat' },\n    { user, entities: { Task: prisma.task } }\n  )\n}\n\nasync function createUser(prisma, data) {\n  const newUser = await prisma.user.create({\n    data: {\n      auth: {\n        create: {\n          identities: {\n            create: {\n              providerName: 'username',\n              providerUserId: data.username,\n              providerData: sanitizeAndSerializeProviderData({\n                hashedPassword: data.password\n              }),\n            },\n          },\n        },\n      },\n    },\n  })\n\n  return newUser\n}\n```\n\n----------------------------------------\n\nTITLE: Using Queries on the Client in JavaScript\nDESCRIPTION: Demonstrates how to import and call Queries on the client-side in JavaScript. It shows that the usage doesn't change for authenticated Queries as Wasp handles authentication in the background.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/queries.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAllTasks, getFilteredTasks } from 'wasp/client/operations'\n\n// ...\n\nconst allTasks = await getAllTasks()\nconst doneTasks = await getFilteredTasks({ isDone: true })\n```\n\n----------------------------------------\n\nTITLE: Adding Logout Button - React Component (TypeScript/TSX)\nDESCRIPTION: This TSX React component provides a logout button that utilizes Wasp's logout method for authenticated users to sign out. The snippet shows TypeScript usage for the logout import and how to wire it to a button inside a functional component. Requires 'wasp/client/auth' and React with TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/07-auth.md#2025-04-22_snippet_18\n\nLANGUAGE: TSX\nCODE:\n```\n// ...\nimport { logout } from 'wasp/client/auth'\n//...\n\nconst MainPage = () => {\n  // ...\n  return (\n    <div>\n      // ...\n      <button onClick={logout}>Logout</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Password Reset Route in Wasp\nDESCRIPTION: This code shows how to create a route for the password reset page in the main.wasp file. It defines the route path and links it to a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_14\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\nroute PasswordResetRoute { path: \"/password-reset\", to: PasswordResetPage }\npage PasswordResetPage {\n  component: import { ResetPasswordPage } from \"@src/ResetPasswordPage.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Auth UI Colors in TypeScript (TSX)\nDESCRIPTION: Demonstrates importing the typed custom `authAppearance` object and the `LoginForm` component in a TypeScript React component. It applies the custom theme by passing the `authAppearance` object to the `appearance` prop of the `LoginForm`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/ui.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/LoginPage.tsx\"\nimport { LoginForm } from 'wasp/client/auth'\nimport { authAppearance } from './appearance'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass the appearance object to the form\n      appearance={authAppearance}\n    />\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Starting the Wasp Development Server (Shell)\nDESCRIPTION: Navigates into the newly created Wasp project directory (replace `<my-project-name>` with the actual directory name) and starts the Wasp development server using `wasp start`. This serves both the frontend and backend.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/introduction/quick-start.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd <my-project-name>\\nwasp start\n```\n\n----------------------------------------\n\nTITLE: Testing React Components with Mocked Queries in JavaScript\nDESCRIPTION: Demonstrates how to test a React component that uses a Wasp query, mocking the query results and rendering the component in context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/testing.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useQuery, getTasks } from \"wasp/client/operations\";\n\nconst Todo = (_props) => {\n  const { data: tasks } = useQuery(getTasks);\n  return (\n    <ul>\n      {tasks &&\n        tasks.map((task) => (\n          <li key={task.id}>\n            <input type=\"checkbox\" value={task.isDone} />\n            {task.description}\n          </li>\n        ))}\n    </ul>\n  );\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from \"vitest\";\nimport { screen } from \"@testing-library/react\";\n\nimport { mockServer, renderInContext } from \"wasp/client/test\";\nimport { getTasks } from \"wasp/client/operations\";\nimport Todo from \"./Todo\";\n\nconst { mockQuery } = mockServer();\n\nconst mockTasks = [\n  {\n    id: 1,\n    description: \"test todo 1\",\n    isDone: true,\n    userId: 1,\n  },\n];\n\ntest(\"handles mock data\", async () => {\n  mockQuery(getTasks, mockTasks);\n\n  renderInContext(<Todo />);\n\n  await screen.findByText(\"test todo 1\");\n\n  expect(screen.getByRole(\"checkbox\")).toBeChecked();\n\n  screen.debug();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Wasp Application\nDESCRIPTION: Sets up the authentication configuration for the TodoApp, specifying the User entity for storing user data and enabling username and password authentication method with redirect behavior for failed auth attempts.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/07-auth.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"TodoApp\",\n  // highlight-start\n  auth: {\n    // Tells Wasp which entity to use for storing users.\n    userEntity: User,\n    methods: {\n      // Enable username and password auth.\n      usernameAndPassword: {}\n    },\n    // We'll see how this is used in a bit.\n    onAuthFailedRedirectTo: \"/login\"\n  }\n  // highlight-end\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Task Entity in Prisma Schema\nDESCRIPTION: This snippet shows how to define a Task entity in the schema.prisma file using Prisma model syntax. It creates a Task model with an auto-incrementing ID, a description field, and a boolean isDone field with a default value of false.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/04-entities.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\n// ...\n\nmodel Task {\n    id          Int     @id @default(autoincrement())\n    description String\n    isDone      Boolean @default(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Login Page with Wasp Auth UI (JavaScript)\nDESCRIPTION: This React component (LoginPage.jsx) demonstrates creating a login page using Wasp's built-in Auth UI. It imports and renders the `LoginForm` component from `wasp/client/auth` and uses `react-router-dom`'s `Link` component to navigate to the signup page. The component provides a basic centered layout for the form.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"src/LoginPage.jsx\"\nimport { LoginForm } from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function LoginPage() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        placeContent: 'center',\n      }}\n    >\n      <LoginForm />\n      <div>\n        <Link to=\"/signup\">Create an account</Link>\n      </div>\n    </div>\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Wasp API Endpoint (main.wasp)\nDESCRIPTION: This Wasp code defines an API endpoint named `fooBar`. It links to an implementation function (`fooBar` from `@src/apis` - which could be JS or TS), specifies the HTTP route as GET `/foo/bar`, declares usage of the `Task` entity, enables authentication (`auth: true`), and points to a middleware configuration function (`apiMiddleware` from `@src/apis`). This declaration is typically placed in `main.wasp`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/apis.md#2025-04-22_snippet_13\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar {\n  fn: import { fooBar } from \"@src/apis\",\n  httpRoute: (GET, \"/foo/bar\"),\n  entities: [Task],\n  auth: true,\n  middlewareConfigFn: import { apiMiddleware } from \"@src/apis\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Auth Configuration in main.wasp (Explicit app Keyword, TypeScript interpretation)\nDESCRIPTION: Presents the Wasp DSL for authentication setup in a more explicit app block, showing multiple authentication strategies, linking to the User entity, and redirect configuration. This snippet emphasizes the 'app' keyword usage as in recent Wasp versions. Prerequisites: Wasp CLI, user entity, proper route configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_20\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\\n  title: \"My app\",\\n  //...\\n  auth: {\\n    userEntity: User,\\n    methods: {\\n      usernameAndPassword: {}, // use this or email, not both\\n      email: {}, // use this or usernameAndPassword, not both\\n      google: {},\\n      gitHub: {},\\n    },\\n    onAuthFailedRedirectTo: \"/someRoute\",\\n  }\\n}//...\\n\n```\n\n----------------------------------------\n\nTITLE: User Entity Definition in Prisma Schema\nDESCRIPTION: Minimal Prisma schema definition for the User entity required for email authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/email.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n}\n```\n\n----------------------------------------\n\nTITLE: React Chat Component Implementation - TypeScript\nDESCRIPTION: Type-safe React component implementing a chat interface with WebSocket hooks and full-stack type safety for real-time messaging.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/web-sockets.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react'\nimport {\n  useSocket,\n  useSocketListener,\n  ServerToClientPayload,\n} from 'wasp/client/webSocket'\n\nexport const ChatPage = () => {\n  const [messageText, setMessageText] = useState<\n    ClientToServerPayload<'chatMessage'>\n  >('')\n  const [messages, setMessages] = useState<\n    ServerToClientPayload<'chatMessage'>[]\n  >([])\n  const { socket, isConnected } = useSocket()\n\n  useSocketListener('chatMessage', logMessage)\n\n  function logMessage(msg: ServerToClientPayload<'chatMessage'>) {\n    setMessages((priorMessages) => [msg, ...priorMessages])\n  }\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    socket.emit('chatMessage', messageText)\n    setMessageText('')\n  }\n\n  const messageList = messages.map((msg) => (\n    <li key={msg.id}>\n      <em>{msg.username}</em>: {msg.text}\n    </li>\n  ))\n  const connectionIcon = isConnected ? '🟢' : '🔴'\n\n  return (\n    <>\n      <h2>Chat {connectionIcon}</h2>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <div>\n            <div>\n              <input\n                type=\"text\"\n                value={messageText}\n                onChange={(e) => setMessageText(e.target.value)}\n              />\n            </div>\n            <div>\n              <button type=\"submit\">Submit</button>\n            </div>\n          </div>\n        </form>\n        <ul>{messageList}</ul>\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side Task Creation with User Context\nDESCRIPTION: Server action demonstrating how to use context.user for authentication checks and creating tasks associated with authenticated users.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const createTask = async (task, context) => {\n  if (!context.user) {\n    throw new HttpError(403)\n  }\n\n  const Task = context.entities.Task\n  return Task.create({\n    data: {\n      description: task.description,\n      user: {\n        connect: { id: context.user.id },\n      },\n    },\n  })\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport { type Task } from 'wasp/entities'\nimport { type CreateTask } from 'wasp/server/operations'\nimport { HttpError } from 'wasp/server'\n\ntype CreateTaskPayload = Pick<Task, 'description'>\n\nexport const createTask: CreateTask<CreateTaskPayload, Task> = async (\n  args,\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(403)\n  }\n\n  const Task = context.entities.Task\n  return Task.create({\n    data: {\n      description: args.description,\n      user: {\n        connect: { id: context.user.id },\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Default Wasp CRUD 'create' Operation Implementation (TypeScript)\nDESCRIPTION: This snippet illustrates the default TypeScript code generated by Wasp for the `create` CRUD operation. It calls the Prisma Client's `create` method, passing the `data` received in the arguments (`args.data`). The surrounding context points out the limitation that this default passes all client data without validation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// ...\nreturn Task.create({ data: args.data })\n```\n```\n\n----------------------------------------\n\nTITLE: Using the useQuery Hook in React (TypeScript)\nDESCRIPTION: Example of using the `useQuery` hook from `wasp/client/operations` within a React component (TypeScript/TSX) for reactive data fetching. Wasp infers the return types from the backend implementation, providing full-stack type safety without explicit type annotations for the hook's return value.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/queries.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { type Task } from 'wasp/entities'\nimport { useQuery, getAllTasks, getFilteredTasks } from 'wasp/client/operations'\n\nconst MainPage = () => {\n  // TypeScript automatically infers return values and type-checks payload types.\n  const { data: allTasks, error: error1 } = useQuery(getAllTasks)\n  const { data: doneTasks, error: error2 } = useQuery(getFilteredTasks, {\n    isDone: true,\n  })\n\n  if (error1 !== null || error2 !== null) {\n    return <div>There was an error</div>\n  }\n\n  return (\n    <div>\n      <h2>All Tasks</h2>\n      {allTasks && allTasks.length > 0\n        ? allTasks.map((task) => <Task key={task.id} {...task} />)\n        : 'No tasks'}\n\n      <h2>Finished Tasks</h2>\n      {doneTasks && doneTasks.length > 0\n        ? doneTasks.map((task) => <Task key={task.id} {...task} />)\n        : 'No finished tasks'}\n    </div>\n  )\n}\n\nconst Task = ({ description, isDone }: Task) => {\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n    </div>\n  )\n}\n\nexport default MainPage\n```\n\n----------------------------------------\n\nTITLE: Migrating Task Query to TypeScript with Wasp Types - TypeScript\nDESCRIPTION: This TypeScript implementation upgrades the original JavaScript query to leverage static typing and Wasp auto-generated types. It adds explicit type annotations to function signatures, ensures type-safe handling of input, context, and output, and imports entity and operation types from Wasp. The 'getTaskInfo' function throws a HTTP 404 error if the task is missing and returns a type-safe message if found. Dependencies: TypeScript, Wasp project typings, proper entity definitions, and source file renaming from .js to .ts.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/general/typescript.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport HttpError from 'wasp/server'\\n// highlight-next-line\\nimport { type Task } from '@wasp/entities'\\n// highlight-next-line\\nimport { type GetTaskInfo } from '@wasp/server/operations'\\n\\n// highlight-next-line\\nfunction getInfoMessage(task: Pick<Task, 'isDone' | 'description'>): string {\\n  const isDoneText = task.isDone ? 'is done' : 'is not done'\\n  return `Task '${task.description}' is ${isDoneText}.`\\n}\\n\\n// highlight-next-line\\nexport const getTaskInfo: GetTaskInfo<Pick<Task, 'id'>, string> = async (\\n  { id },\\n  context\\n) => {\\n  const Task = context.entities.Task\\n\\n  const task = await Task.findUnique({ where: { id } })\\n  if (!task) {\\n    throw new HttpError(404)\\n  }\\n\\n  return getInfoMessage(task)\\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Email Auth Configuration in Wasp\nDESCRIPTION: Example showing how to migrate from additionalFields to userSignupFields in the main.wasp configuration file for email authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {},\n    },\n    onAuthFailedRedirectTo: \"/login\",\n    signup: {\n      additionalFields: import { fields } from \"@server/auth/signup.js\",\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Cache Key for react-query in Wasp (TypeScript)\nDESCRIPTION: Shows how to access the query cache key for the getTasks operation within a Wasp TypeScript client. This key, obtained from getTasks.queryCacheKey, is needed for manipulating cache directly via react-query\\'s API, particularly in advanced usage scenarios that require bypassing the useAction hook. Assumes the Wasp and react-query packages are available, and that getTasks is a valid operation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\nimport { getTasks } from 'wasp/client/operations'\\n\\nconst queryKey = getTasks.queryCacheKey\n```\n\n----------------------------------------\n\nTITLE: Password Migration Handler Implementation in TypeScript\nDESCRIPTION: Implements password migration logic using SecurePassword for verifying old passwords and updating to new hashing algorithm. Handles validation and updating of authentication identity provider data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport SecurePassword from \"secure-password\";\nimport { HttpError } from \"wasp/server\";\nimport {\n  createProviderId,\n  deserializeAndSanitizeProviderData,\n  findAuthIdentity,\n  updateAuthIdentityProviderData,\n} from \"wasp/server/auth\";\nimport { MigratePassword } from \"wasp/server/operations\";\n\ntype MigratePasswordInput = {\n  username: string;\n  password: string;\n};\ntype MigratePasswordOutput = {\n  message: string;\n};\n\nexport const migratePassword: MigratePassword<\n  MigratePasswordInput,\n  MigratePasswordOutput\n> = async ({ password, username }, _context) => {\n  const providerId = createProviderId(\"username\", username);\n  const authIdentity = await findAuthIdentity(providerId);\n\n  if (!authIdentity) {\n    throw new HttpError(400, \"Something went wrong\");\n  }\n\n  const providerData = deserializeAndSanitizeProviderData<\"username\">(\n    authIdentity.providerData\n  );\n\n  try {\n    const SP = new SecurePassword();\n\n    // This will verify the password using the old algorithm\n    const result = await SP.verify(\n      Buffer.from(password),\n      Buffer.from(providerData.hashedPassword, \"base64\")\n    );\n\n    if (result !== SecurePassword.VALID) {\n      throw new HttpError(400, \"Something went wrong\");\n    }\n\n    // This will hash the password using the new algorithm and update the\n    // provider data in the database.\n    await updateAuthIdentityProviderData<\"username\">(providerId, providerData, {\n      hashedPassword: password,\n    });\n  } catch (e) {\n    throw new HttpError(400, \"Something went wrong\");\n  }\n\n  return {\n    message: \"Password migrated successfully.\",\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Global Middleware Configuration in Wasp - JavaScript\nDESCRIPTION: Example of configuring global middleware in a Wasp application using JavaScript. This shows how to define the middleware configuration function in the main.wasp file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/middleware-config.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  server: {\n    setupFn: import setup from \"@src/serverSetup\",\n    middlewareConfigFn: import { serverMiddlewareFn } from \"@src/serverSetup\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Zod Environment Variables Validation in Wasp\nDESCRIPTION: Demonstrates how to set up environment variables validation using Zod in Wasp applications. Shows both the TypeScript schema definition and Wasp configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-15-to-0-16.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as z from 'zod'\n\nimport { defineEnvValidationSchema } from 'wasp/env'\n\nexport const serverEnvValidationSchema = defineEnvValidationSchema(\n  z.object({\n    STRIPE_API_KEY: z.string({\n      required_error: 'STRIPE_API_KEY is required.',\n    }),\n  })\n)\n```\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  ...\n  server: {\n    envValidationSchema: import { serverEnvValidationSchema } from \"@src/env\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side Action Implementation in TypeScript\nDESCRIPTION: TypeScript implementation of server-side Actions with proper type annotations and error handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/actions.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateTask } from 'wasp/server/operations'\nimport { HttpError } from 'wasp/server'\n\nexport const createTask: CreateTask = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Typed Query in TypeScript\nDESCRIPTION: Demonstrates how to implement a query function in TypeScript with proper type annotations for input arguments and return values.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/queries.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetFoo } from 'wasp/server/operations'\n\ntype Foo = // ...\n\nexport const getFoo: GetFoo<{ id: number }, Foo> = (args, context) => {\n  // implementation\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Checks to Task Actions (TypeScript)\nDESCRIPTION: TypeScript implementation of createTask and updateTask actions with proper type definitions and authentication validation. Includes user-specific data handling and type annotations for payload and return types.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/07-auth.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from 'wasp/entities'\nimport { HttpError } from 'wasp/server'\nimport { CreateTask, UpdateTask } from 'wasp/server/operations'\n\ntype CreateTaskPayload = Pick<Task, 'description'>\n\nexport const createTask: CreateTask<CreateTaskPayload, Task> = async (\n  args,\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.create({\n    data: {\n      description: args.description,\n      user: { connect: { id: context.user.id } },\n    },\n  })\n}\n\ntype UpdateTaskPayload = Pick<Task, 'id' | 'isDone'>\n\nexport const updateTask: UpdateTask<\n  UpdateTaskPayload,\n  { count: number }\n> = async ({ id, isDone }, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.updateMany({\n    where: { id, user: { id: context.user.id } },\n    data: { isDone },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Prisma Schema\nDESCRIPTION: This snippet demonstrates how to define the User entity in the Prisma schema file. It creates a basic User model with an auto-incrementing id field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/github.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  // Add your own fields below\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Reset in Wasp\nDESCRIPTION: This Wasp configuration snippet sets up password reset functionality by specifying the client route for the password reset page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/email.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\npasswordReset: {\n    clientRoute: PasswordResetRoute,\n}\n```\n\n----------------------------------------\n\nTITLE: React Form Component for Task Creation (TypeScript)\nDESCRIPTION: Type-safe frontend form component for creating tasks with proper event typing and error handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/06-actions.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst NewTaskForm = () => {\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    try {\n      const target = event.target as HTMLFormElement\n      const description = target.description.value\n      target.reset()\n      await createTask({ description })\n    } catch (err: any) {\n      window.alert('Error: ' + err.message)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"description\" type=\"text\" defaultValue=\"\" />\n      <input type=\"submit\" value=\"Create task\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Queries on Client and Server in TypeScript\nDESCRIPTION: Example of how to import and use a declared query in TypeScript, showing both client-side and server-side import syntax, including type imports.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/actions.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Use it on the client\nimport { createFoo } from 'wasp/client/operations'\n\n// Use it on the server\nimport { createFoo } from 'wasp/server/operations'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateFoo } from 'wasp/server/operations'\n```\n\n----------------------------------------\n\nTITLE: Configuring Server in Wasp Application\nDESCRIPTION: Demonstrates how to configure the server behavior using the 'server' field in the app declaration, including setup and middleware configuration functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/server-config.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  server: {\n    setupFn: import { mySetupFunction } from \"@src/myServerSetupCode.js\",\n    middlewareConfigFn: import { myMiddlewareConfigFn } from \"@src/myServerSetupCode.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Login Form in React (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to create a custom login form using React and JavaScript in a Wasp application. It uses Wasp's login function for user authentication and includes error handling and navigation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/username-and-pass/create-your-own-ui.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { login } from 'wasp/client/auth'\n\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\nexport function Login() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState(null)\n  const navigate = useNavigate()\n\n  async function handleSubmit(event) {\n    event.preventDefault()\n    setError(null)\n    try {\n      await login(username, password)\n      navigate('/')\n    } catch (error) {\n      setError(error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {error && <p>Error: {error.message}</p>}\n\n      <input\n        type=\"text\"\n        autoComplete=\"username\"\n        value={username}\n        onChange={(e) => setUsername(e.target.value)}\n        placeholder=\"Username\"\n      />\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        placeholder=\"Password\"\n      />\n      <button type=\"submit\">Sign Up</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Setup Function in TypeScript\nDESCRIPTION: Shows an example TypeScript implementation (`src/myClientSetupCode.ts`) for the client setup function, referenced by `setupFn` in `main.wasp`. This `async` function, typed to return `Promise<void>`, executes before the Wasp client renders, suitable for custom setup logic. Wasp awaits its completion; it takes no arguments, and its return value is ignored.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/client-config.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"src/myClientSetupCode.ts\"\nexport default async function mySetupFunction(): Promise<void> {\n  // Run some code\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Finding User Identities in React Components with JavaScript\nDESCRIPTION: Demonstrates how to use the findUserIdentity function in a React component to check if a user has specific authentication identities such as email or Google.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/entities.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { findUserIdentity } from 'wasp/auth'\n\nconst MainPage = ({ user }) => {\n  const emailIdentity = findUserIdentity(user, 'email')\n  const googleIdentity = findUserIdentity(user, 'google')\n  if (emailIdentity) {\n    // ...\n  } else if (googleIdentity) {\n    // ...\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Auth Setup in Wasp\nDESCRIPTION: Basic configuration for setting up authentication in a Wasp application with Google auth method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n}\n```\n\n----------------------------------------\n\nTITLE: Backend Password Migration Operation - Wasp Backend - JavaScript\nDESCRIPTION: Implements the backend operation that verifies user's old password using the 'secure-password' library and sodium-native, matching against stored base64 hashes. On successful verification it hashes the password with the new algorithm and persists the updated provider data. Relies on wasp/server and wasp/server/auth utilities, specifically for creating/finding/updating AuthIdentity entries. Throws errors on missing user or failed password validation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nimport SecurePassword from \"secure-password\";\nimport { HttpError } from \"wasp/server\";\nimport {\n  createProviderId,\n  deserializeAndSanitizeProviderData,\n  findAuthIdentity,\n  updateAuthIdentityProviderData,\n} from \"wasp/server/auth\";\n\nexport const migratePassword = async ({ password, username }, _context) => {\n  const providerId = createProviderId(\"username\", username);\n  const authIdentity = await findAuthIdentity(providerId);\n\n  if (!authIdentity) {\n    throw new HttpError(400, \"Something went wrong\");\n  }\n\n  const providerData = deserializeAndSanitizeProviderData(\n    authIdentity.providerData\n  );\n\n  try {\n    const SP = new SecurePassword();\n\n    // This will verify the password using the old algorithm\n    const result = await SP.verify(\n      Buffer.from(password),\n      Buffer.from(providerData.hashedPassword, \"base64\")\n    );\n\n    if (result !== SecurePassword.VALID) {\n      throw new HttpError(400, \"Something went wrong\");\n    }\n\n    // This will hash the password using the new algorithm and update the\n    // provider data in the database.\n    await updateAuthIdentityProviderData(providerId, providerData, {\n      hashedPassword: password,\n    });\n  } catch (e) {\n    throw new HttpError(400, \"Something went wrong\");\n  }\n\n  return {\n    message: \"Password migrated successfully.\",\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Client Environment Variables in Development (.env.client) (Shell)\nDESCRIPTION: Displays the contents and structure for a .env.client file, used to declare public environment variables available to the Wasp client code in development mode. Variables must be prefixed with REACT_APP_ and defined via NAME=VALUE syntax, one per line. These values are embedded into client-side bundles and should not contain secrets.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/env-vars.md#2025-04-22_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nREACT_APP_SOME_VAR_NAME=somevalue\n```\n\n----------------------------------------\n\nTITLE: JavaScript Discord Auth Configuration\nDESCRIPTION: JavaScript implementation of Discord authentication configuration including user signup fields and OAuth scopes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/discord.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const userSignupFields = {\n  username: (data) => data.profile.global_name,\n  avatarUrl: (data) => data.profile.avatar,\n}\n\nexport function getConfig() {\n  return {\n    scopes: ['identify'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Google OAuth Auth Method in Wasp - Wasp Language\nDESCRIPTION: Defines a Wasp app with Google OAuth authentication, referring to external configuration and user signup field mapping functions. This snippet is central to configuring authentication and references JavaScript or TypeScript functions via import. 'userEntity' must exist in your Prisma schema. Inputs are implicit via imports and defined methods; outputs are authentication behavior in your app. Requires a compatible version of Wasp (>=0.14.0) and the referenced import files.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/google.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/google.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/google.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Task Entity in Prisma Schema\nDESCRIPTION: A Prisma schema that defines a Task entity with id, description, and isDone fields. This model serves as the foundation for the TypeScript migration example.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/general/typescript.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\n// ...\n\nmodel Task {\n  id          Int @id @default(autoincrement())\n  description String\n  isDone      Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket server with ExpressJS and Socket.IO\nDESCRIPTION: Complete server-side implementation using ExpressJS and Socket.IO. It sets up a WebSocket server, defines event handlers, and manages a voting poll state.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-09-build-real-time-voting-app-websockets-react-typescript.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport cors from 'cors';\nimport express from 'express';\nimport { Server, Socket } from 'socket.io';\n\ntype PollState = {\n  question: string;\n  options: {\n    id: number;\n    text: string;\n    description: string;\n    votes: string[];\n  }[];\n};\ninterface ClientToServerEvents {\n  vote: (optionId: number) => void;\n  askForStateUpdate: () => void;\n}\ninterface ServerToClientEvents {\n  updateState: (state: PollState) => void;\n}\ninterface InterServerEvents { }\ninterface SocketData {\n  user: string;\n}\n\nconst app = express();\napp.use(cors({ origin: 'http://localhost:5173' })); // this is the default port that Vite runs your React app on\nconst server = require('http').createServer(app);\n// passing these generic type parameters to the `Server` class\n// ensures data flowing through the server are correctly typed.\nconst io = new Server<\n  ClientToServerEvents,\n  ServerToClientEvents,\n  InterServerEvents,\n  SocketData\n>(server, {\n  cors: {\n    origin: 'http://localhost:5173',\n    methods: ['GET', 'POST'],\n  },\n});\n\n// this is middleware that Socket.IO uses on initiliazation to add\n// the authenticated user to the socket instance. Note: we are not\n// actually adding real auth as this is beyond the scope of the tutorial\nio.use(addUserToSocketDataIfAuthenticated);\n\n// the client will pass an auth \"token\" (in this simple case, just the username)\n// to the server on initialize of the Socket.IO client in our React App\nasync function addUserToSocketDataIfAuthenticated(socket: Socket, next: (err?: Error) => void) {\n  const user = socket.handshake.auth.token;\n  if (user) {\n    try {\n      socket.data = { ...socket.data, user: user };\n    } catch (err) {}\n  }\n  next();\n}\n\n// the server determines the PollState object, i.e. what users will vote on\n// this will be sent to the client and displayed on the front-end\nconst poll: PollState = {\n  question: \"What are eating for lunch ✨ Let's order\",\n  options: [\n    {\n      id: 1,\n      text: 'Party Pizza Place',\n      description: 'Best pizza in town',\n      votes: [],\n    },\n    {\n      id: 2,\n      text: 'Best Burger Joint',\n      description: 'Best burger in town',\n      votes: [],\n    },\n    {\n      id: 3,\n      text: 'Sus Sushi Place',\n      description: 'Best sushi in town',\n      votes: [],\n    },\n  ],\n};\n\nio.on('connection', (socket) => {\n  console.log('a user connected', socket.data.user);\n\n\t// the client will send an 'askForStateUpdate' request on mount\n\t// to get the initial state of the poll\n  socket.on('askForStateUpdate', () => {\n    console.log('client asked For State Update');\n    socket.emit('updateState', poll);\n  });\n\n  socket.on('vote', (optionId: number) => {\n    // If user has already voted, remove their vote.\n    poll.options.forEach((option) => {\n      option.votes = option.votes.filter((user) => user !== socket.data.user);\n    });\n    // And then add their vote to the new option.\n    const option = poll.options.find((o) => o.id === optionId);\n    if (!option) {\n      return;\n    }\n    option.votes.push(socket.data.user);\n\t\t// Send the updated PollState back to all clients\n    io.emit('updateState', poll);\n  });\n\n  socket.on('disconnect', () => {\n    console.log('user disconnected');\n  });\n});\n\nserver.listen(8000, () => {\n  console.log('listening on *:8000');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Task Entity in Wasp\nDESCRIPTION: Demonstrates how to define a basic Task entity using Prisma Schema Language (PSL) in Wasp. The entity includes an auto-incrementing ID, description string, and boolean isDone field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/entities.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nentity Task {=psl\n    id          Int     @id @default(autoincrement())\n    description String\n    isDone      Boolean @default(false)\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Using the useQuery Hook in React with JavaScript\nDESCRIPTION: Shows how to use the useQuery hook to make Queries reactive in a React component. The example demonstrates fetching all tasks and filtered tasks, and rendering them conditionally.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/queries.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useQuery, getAllTasks, getFilteredTasks } from 'wasp/client/operations'\n\nconst MainPage = () => {\n  const { data: allTasks, error: error1 } = useQuery(getAllTasks)\n  const { data: doneTasks, error: error2 } = useQuery(getFilteredTasks, {\n    isDone: true,\n  })\n\n  if (error1 !== null || error2 !== null) {\n    return <div>There was an error</div>\n  }\n\n  return (\n    <div>\n      <h2>All Tasks</h2>\n      {allTasks && allTasks.length > 0\n        ? allTasks.map((task) => <Task key={task.id} {...task} />)\n        : 'No tasks'}\n\n      <h2>Finished Tasks</h2>\n      {doneTasks && doneTasks.length > 0\n        ? doneTasks.map((task) => <Task key={task.id} {...task} />)\n        : 'No finished tasks'}\n    </div>\n  )\n}\n\nconst Task = ({ description, isDone }: Task) => {\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n    </div>\n  )\n}\n\nexport default MainPage\n```\n\n----------------------------------------\n\nTITLE: Rendering React Components in Tests with Wasp Helper\nDESCRIPTION: Shows how to use the renderInContext helper to render React components properly in tests by wrapping them in QueryClientProvider and Router contexts.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { renderInContext } from \"wasp/client/test\";\n\nrenderInContext(<MainPage />);\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Configuration of Google OAuth credentials in the server environment variables file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/google.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGOOGLE_CLIENT_ID=your-google-client-id\nGOOGLE_CLIENT_SECRET=your-google-client-secret\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Auth in Wasp\nDESCRIPTION: Basic configuration for enabling Google authentication in the Wasp application file, including userEntity specification and auth method setup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/google.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Main App Declaration in Wasp (JavaScript)\nDESCRIPTION: Shows the default main.wasp file for a JavaScript Wasp project. It demonstrates how to configure the app declaration, define routes, and specify page components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/02-project-structure.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"{latestWaspVersion}\" // Pins the version of Wasp to use.\n  },\n  title: \"TodoApp\" // Used as the browser tab title. Note that all strings in Wasp are double quoted!\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  // We specify that the React implementation of the page is exported from\n  // `src/MainPage.jsx`. This statement uses standard JS import syntax.\n  // Use `@src` to reference files inside the `src` folder.\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication in Wasp\nDESCRIPTION: Complete configuration for email authentication in Wasp, including user signup fields, email sender information, and handlers for email verification and password reset.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/email.md#2025-04-22_snippet_13\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  title: \"My app\",\n  // ...\n\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        userSignupFields: import { userSignupFields } from \"@src/auth.js\",\n        fromField: {\n          name: \"My App\",\n          email: \"hello@itsme.com\"\n        },\n        emailVerification: {\n          clientRoute: EmailVerificationRoute,\n          getEmailContentFn: import { getVerificationEmailContent } from \"@src/auth/email.js\",\n        },\n        passwordReset: {\n          clientRoute: PasswordResetRoute,\n          getEmailContentFn: import { getPasswordResetEmailContent } from \"@src/auth/email.js\",\n        },\n      },\n    },\n    onAuthFailedRedirectTo: \"/someRoute\"\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Password Reset using Wasp Client Auth (TypeScript)\nDESCRIPTION: This TypeScript snippet shows the usage of the `requestPasswordReset` action from `wasp/client/auth` in a TypeScript environment. It sends the user's email to the server to trigger the password reset email flow, typically used within a `ForgotPasswordPage.tsx` component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/email.md#2025-04-22_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/pages/ForgotPasswordPage.tsx\"\nimport { requestPasswordReset } from 'wasp/client/auth'\n...\nawait requestPasswordReset({ email });\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing an Action in JavaScript\nDESCRIPTION: Shows how to implement the createFoo action in JavaScript. The function takes arguments passed from the client and a context object provided by Wasp that includes user session and entity information.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexport const createFoo = (args, context) => {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Requirement to Main Page\nDESCRIPTION: Updates the MainPage configuration to require authentication. This prevents unauthenticated users from accessing the main page by redirecting them to the login page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/07-auth.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\npage MainPage {\n  // highlight-next-line\n  authRequired: true,\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing React Query Component with useQuery Hook\nDESCRIPTION: Example of using the useQuery hook to fetch and display tasks in a React component. Shows how to handle multiple queries, error states, and render task lists.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/queries.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useQuery, getAllTasks, getFilteredTasks } from 'wasp/client/operations'\n\nconst MainPage = () => {\n  const { data: allTasks, error: error1 } = useQuery(getAllTasks)\n  const { data: doneTasks, error: error2 } = useQuery(getFilteredTasks, {\n    isDone: true,\n  })\n\n  if (error1 !== null || error2 !== null) {\n    return <div>There was an error</div>\n  }\n\n  return (\n    <div>\n      <h2>All Tasks</h2>\n      {allTasks && allTasks.length > 0\n        ? allTasks.map((task) => <Task key={task.id} {...task} />)\n        : 'No tasks'}\n\n      <h2>Finished Tasks</h2>\n      {doneTasks && doneTasks.length > 0\n        ? doneTasks.map((task) => <Task key={task.id} {...task} />)\n        : 'No finished tasks'}\n    </div>\n  )\n}\n\nconst Task = ({ description, isDone }: Task) => {\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n    </div>\n  )\n}\n\nexport default MainPage\n```\n\n----------------------------------------\n\nTITLE: Defining userSignupFields Validation Object (JavaScript)\nDESCRIPTION: This JavaScript file defines the userSignupFields export for server-side validation using Wasp's defineUserSignupFields helper. It specifies an async address validator, ensuring the address is a string and at least 5 characters. Throws errors for validation failures. Used with Wasp's usernameAndPassword signup in main.wasp. Requires wasp/server/auth. Inputs: data with address; outputs: validated address or error.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Handling onBeforeOAuthRedirect Auth Hook (JavaScript) - js\nDESCRIPTION: Implements the 'onBeforeOAuthRedirect' hook in JavaScript to capture and store request query parameters before an OAuth redirect. This function uses the OAuth request's unique ID as a key to save params for later use (in e.g. onAfterLogin). Requires a storage mechanism ('someKindOfStore') and access to the hook arguments, with Prisma and Express request object injected. Returns the processed OAuth provider URL for redirection.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nexport const onBeforeOAuthRedirect = async ({ url, oauth, prisma, req }) => {\n  console.log('query params before oAuth redirect', req.query)\n\n  // Saving query params for later use in onAfterSignup or onAfterLogin hooks\n  const id = oauth.uniqueRequestId\n  someKindOfStore.set(id, req.query)\n\n  return { url }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining onAfterSignup Auth Hook in JavaScript/TypeScript\nDESCRIPTION: Exports an asynchronous function `onAfterSignup` to be executed after a user signup is successfully completed. It receives an object containing `providerId`, the newly created `user` object, optional `oauth` details (if applicable), the Prisma client instance `prisma`, and the request object `req`. The return value of this hook is ignored by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/auth-hooks.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/auth/hooks.js\"\nexport const onAfterSignup = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n```\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/auth/hooks.ts\"\nimport type { OnAfterSignupHook } from 'wasp/server/auth'\n\nexport const onAfterSignup: OnAfterSignupHook = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Todo List React Component with Query - JavaScript (JSX)\nDESCRIPTION: Defines a functional React component named Todo which queries tasks data using Wasp's useQuery and displays them in a bullet list with checkboxes. Requires Wasp client operations (useQuery, getTasks) and React. Used as a demo subject for component tests, with the data dependency easily mockable for test isolation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/testing.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useQuery, getTasks } from \"wasp/client/operations\";\n\nconst Todo = (_props) => {\n  const { data: tasks } = useQuery(getTasks);\n  return (\n    <ul>\n      {tasks &&\n        tasks.map((task) => (\n          <li key={task.id}>\n            <input type=\"checkbox\" value={task.isDone} />\n            {task.description}\n          </li>\n        ))}\n    </ul>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Login Page with Social Auth Buttons in TypeScript\nDESCRIPTION: TypeScript version of the login page component implementation using Wasp's auth helpers for social authentication. Includes both pre-built button components and custom URL-based links for Google and GitHub login.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/create-your-own-ui.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  GoogleSignInButton,\n  googleSignInUrl,\n  GitHubSignInButton,\n  gitHubSignInUrl,\n} from 'wasp/client/auth'\n\nexport const LoginPage = () => {\n  return (\n    <>\n      <GoogleSignInButton />\n      <GitHubSignInButton />\n      {/* or */}\n      <a href={googleSignInUrl}>Sign in with Google</a>\n      <a href={gitHubSignInUrl}>Sign in with GitHub</a>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates for Task Status Toggle in React\nDESCRIPTION: This React component demonstrates how to use Wasp's optimistic updates feature when toggling a task's status, providing a more responsive user experience.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-30-optimistic-update-feature-announcement.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport updateTask from '@wasp/queries'\n\nfunction Task({ id, isDone, description }) {\n  const updateTaskOptimistically = useAction(updateTask, {\n    optimisticUpdates: [{\n      getQuerySpecifier: () => [getTasks],\n      updateQuery: ({ id, isDone }, oldTasks) => oldTasks.map(\n        task => task.id === id ? { ...task, isDone } : task\n      )\n    }]\n  })\n\n  return (\n    <div className=\"task\">\n      <label className=\"description\">\n        <input\n          type='checkbox' id={id}\n          checked={isDone}\n          onChange={\n            (e) => updateTaskOptimistically({ id, isDone: e.target.checked })\n          }\n        /><span>{description}</span></label>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Authentication in Task Query - Wasp Server (TypeScript)\nDESCRIPTION: This TypeScript snippet defines an authenticated query function to fetch tasks assigned to the current user with type safety, leveraging Wasp types and Prisma. It checks for authentication and restricts the returned tasks to those of the logged-in user. Dependencies include Wasp server types and entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/07-auth.md#2025-04-22_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Task } from 'wasp/entities'\nimport { HttpError } from 'wasp/server'\nimport { GetTasks } from 'wasp/server/operations'\n\nexport const getTasks: GetTasks<void, Task[]> = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.findMany({\n    where: { user: { id: context.user.id } },\n    orderBy: { id: 'asc' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting a Job for Execution - TypeScript\nDESCRIPTION: Performs asynchronous job submission in TypeScript using the type-safe job object, passing job arguments that match the previously defined input type. Returns a result conforming to job output types. The job must be imported from wasp/server/jobs and declared in the Wasp definition.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/jobs.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nconst submittedJob = await mySpecialJob.submit({ job: \"args\" })\n```\n\n----------------------------------------\n\nTITLE: Defining onBeforeLogin Auth Hook in JavaScript/TypeScript\nDESCRIPTION: Exports an asynchronous function `onBeforeLogin` to be executed before a user login completes. It receives an object containing `providerId`, the `user` object attempting to log in, the Prisma client instance `prisma`, and the request object `req`. The return value of this hook is ignored by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/auth-hooks.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/auth/hooks.js\"\nexport const onBeforeLogin = async ({ providerId, prisma, req }) => {\n  // Hook code goes here\n}\n```\n```\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/auth/hooks.ts\"\nimport type { OnBeforeLoginHook } from 'wasp/server/auth'\n\nexport const onBeforeLogin: OnBeforeLoginHook = async ({\n  providerId,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth UI Components\nDESCRIPTION: React components implementation for login and signup pages with routing and layout structure using Tailwind CSS.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/username-and-pass.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm, SignupForm } from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Don't have an account yet? <Link to=\"/signup\">go to signup</Link>.\n      </span>\n    </Layout>\n  );\n}\n\nexport function Signup() {\n  return (\n    <Layout>\n      <SignupForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </Layout>\n  );\n}\n\nexport function Layout({ children }) {\n  return (\n    <div className=\"w-full h-full bg-white\">\n      <div className=\"min-w-full min-h-[75vh] flex items-center justify-center\">\n        <div className=\"w-full h-full max-w-sm p-5 bg-white\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Worker Function in TypeScript\nDESCRIPTION: TypeScript implementation of the job worker function with type definitions for input, output and job context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/jobs.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type MySpecialJob } from 'wasp/server/jobs'\nimport { type Task } from 'wasp/entities'\n\ntype Input = { name: string; }\ntype Output = { tasks: Task[]; }\n\nexport const foo: MySpecialJob<Input, Output> = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Integration in TypeScript\nDESCRIPTION: Client-side React component implementation in TypeScript with proper type definitions for events and props.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/06-actions.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormEvent, ChangeEvent } from 'react'\nimport { Task } from 'wasp/entities'\nimport {\n  updateTask,\n  createTask,\n  getTasks,\n  useQuery,\n} from 'wasp/client/operations'\n\nconst TaskView = ({ task }: { task: Task }) => {\n  const handleIsDoneChange = async (event: ChangeEvent<HTMLInputElement>) => {\n    try {\n      await updateTask({\n        id: task.id,\n        isDone: event.target.checked,\n      })\n    } catch (error: any) {\n      window.alert('Error while updating task: ' + error.message)\n    }\n  }\n\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        id={String(task.id)}\n        checked={task.isDone}\n        onChange={handleIsDoneChange}\n      />\n      {task.description}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint in TypeScript\nDESCRIPTION: TypeScript version of the API endpoint declaration in Wasp, demonstrating the same configuration pattern for authenticated GET requests to /foo/bar with entity access and middleware support.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/apis.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar {\n  fn: import { fooBar } from \"@src/apis\",\n  httpRoute: (GET, \"/foo/bar\"),\n  entities: [Task],\n  auth: true,\n  middlewareConfigFn: import { apiMiddleware } from \"@src/apis\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Auth Routes and Pages in Wasp (Wasp, JavaScript Implementation)\nDESCRIPTION: Defines new /login and /signup routes and associated React page components for authentication UI in the Wasp application file, referencing JavaScript component implementations. Requires '@src/SignupPage' and '@src/LoginPage' components to be defined and exported.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/07-auth.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\\n\\nroute SignupRoute { path: \"/signup\", to: SignupPage }\\npage SignupPage {\\n  component: import { SignupPage } from \"@src/SignupPage\"\\n}\\n\\nroute LoginRoute { path: \"/login\", to: LoginPage }\\npage LoginPage {\\n  component: import { LoginPage } from \"@src/LoginPage\"\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Wasp (TypeScript)\nDESCRIPTION: This TypeScript version of the Wasp configuration for authentication is identical to the JavaScript version, as Wasp configurations are language-agnostic. It sets up username and password authentication with the required user entity fields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/username-and-pass.md#2025-04-22_snippet_11\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  }\n}\n\n// Wasp requires the `userEntity` to have at least the following fields\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    username                  String        @unique\n    password                  String\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Implementing Queries with Entities (TypeScript)\nDESCRIPTION: Demonstrates the implementation of Queries using entities in TypeScript, including type annotations for improved type safety. It shows how to use the Prisma API through the context object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/queries.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { Task } from '@wasp/entities'\nimport { GetAllTasks, GetFilteredTasks } from '@wasp/queries/types'\n\nexport const getAllTasks: GetAllTasks<void, Task[]> = async (args, context) => {\n  return context.entities.Task.findMany({})\n}\n\nexport const getFilteredTasks: GetFilteredTasks<\n  Pick<Task, 'isDone'>,\n  Task[]\n> = async (args, context) => {\n  return context.entities.Task.findMany({\n    where: { isDone: args.isDone },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Auth in Wasp File (TypeScript)\nDESCRIPTION: This snippet shows how to configure the auth object in the main.wasp file to enable Google authentication for a TypeScript project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/google.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User Data in MainPage Component (TypeScript)\nDESCRIPTION: Shows how to access and type the authenticated user data in a TypeScript React component through props when authRequired is set to true.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/07-auth.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuthUser } from 'wasp/auth'\n\n// highlight-next-line\nexport const MainPage = ({ user }: { user: AuthUser }) => {\n  // Do something with the user\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing updateTask Action (JavaScript)\nDESCRIPTION: This snippet demonstrates the server-side implementation of the 'updateTask' action in JavaScript. It updates a task's 'isDone' status in the database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/06-actions.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const updateTask = async ({ id, isDone }, context) => {\n  return context.entities.Task.update({\n    where: { id },\n    data: {\n      isDone: isDone,\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Emails with JavaScript/TypeScript\nDESCRIPTION: Example of sending an email using the emailSender API in a server action. Shows how to specify sender details, recipient, subject, and both text/HTML content.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/email/email.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { emailSender } from \"wasp/server/email\";\n\n// In some action handler...\nconst info = await emailSender.send({\n  from: {\n    name: \"John Doe\",\n    email: \"john@doe.com\",\n  },\n  to: \"user@domain.com\",\n  subject: \"Saying hello\",\n  text: \"Hello world\",\n  html: \"Hello <strong>world</strong>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring a Parameterized Route and Page in Wasp (TypeScript)\nDESCRIPTION: Gracefully registers a parameterized '/hello/:name' route in Wasp for a TypeScript-based app, linking to a HelloPage implemented at src/HelloPage.tsx. Facilitates strongly-typed route parameters and integration with React Router. Depends on the presence of the HelloPage component file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/03-pages.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\nroute HelloRoute { path: \"/hello/:name\", to: HelloPage }\npage HelloPage {\n  component: import { HelloPage } from \"@src/HelloPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: React Component with URL Parameter Access\nDESCRIPTION: React component that uses the useParams hook from react-router-dom to access URL parameters. This example shows how to retrieve the 'name' parameter from the '/hello/:name' route.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/03-pages.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useParams } from 'react-router-dom'\n\nexport const HelloPage = () => {\n  const { name } = useParams()\n  return <div>Here's {name}!</div>\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useParams } from 'react-router-dom'\n\nexport const HelloPage = () => {\n  const { name } = useParams<'name'>()\n  return <div>Here's {name}!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entities in schema.prisma (Wasp 0.14.x)\nDESCRIPTION: Shows the new approach in Wasp 0.14.x where database models (User, Task) are defined directly within a standard `schema.prisma` file. This method allows developers to utilize the full feature set of Prisma for schema definition, separate from the main Wasp configuration. Includes datasource, generator, and model definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\n```prisma title=\"schema.prisma\"\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id       Int @id @default(autoincrement())\n  tasks    Task[]\n}\n\nmodel Task {\n  id          Int @id @default(autoincrement())\n  description String\n  isDone      Boolean\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with useAction Hook in TypeScript\nDESCRIPTION: This snippet shows how to use the useAction hook for optimistic updates in a TypeScript React component. It includes type annotations and demonstrates how to configure the optimisticUpdates option.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/actions.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport {\n  useQuery,\n  useAction,\n  type OptimisticUpdateDefinition,\n  getTask,\n  markTaskAsDone,\n} from 'wasp/client/operations'\n\ntype TaskPayload = Pick<Task, \"id\">;\n\nconst TaskPage = ({ id }: { id: number }) => {\n  const { data: task } = useQuery(getTask, { id });\n  const markTaskAsDoneOptimistically = useAction(markTaskAsDone, {\n    optimisticUpdates: [\n      {\n        getQuerySpecifier: ({ id }) => [getTask, { id }],\n        updateQuery: (_payload, oldData) => ({ ...oldData, isDone: true }),\n      } as OptimisticUpdateDefinition<TaskPayload, Task>,\n    ],\n  });\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>;\n  }\n\n  const { description, isDone } = task;\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? \"Yes\" : \"No\"}\n      </p>\n      {isDone || (\n        <button onClick={() => markTaskAsDoneOptimistically({ id })}>\n          Mark as done.\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default TaskPage;\n```\n\n----------------------------------------\n\nTITLE: React Todo Component in TypeScript\nDESCRIPTION: TypeScript version of the React Todo component with proper type annotations, using Wasp's useQuery hook to fetch tasks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/testing.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQuery, getTasks } from \"wasp/client/operations\";\n\nconst Todo = (_props: {}) => {\n  const { data: tasks } = useQuery(getTasks);\n\n  return (\n    <ul>\n      {tasks &&\n        tasks.map((task) => (\n          <li key={task.id}>\n            <input type=\"checkbox\" value={task.isDone} />\n            {task.description}\n          </li>\n        ))}\n    </ul>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Authentication Routes and Pages Configuration\nDESCRIPTION: Definition of all necessary routes and pages for handling authentication flows including login, signup, password reset, and email verification.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/email.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { Signup } from \"@src/pages/auth.jsx\"\n}\n\nroute RequestPasswordResetRoute { path: \"/request-password-reset\", to: RequestPasswordResetPage }\npage RequestPasswordResetPage {\n  component: import { RequestPasswordReset } from \"@src/pages/auth.jsx\",\n}\n\nroute PasswordResetRoute { path: \"/password-reset\", to: PasswordResetPage }\npage PasswordResetPage {\n  component: import { PasswordReset } from \"@src/pages/auth.jsx\",\n}\n\nroute EmailVerificationRoute { path: \"/email-verification\", to: EmailVerificationPage }\npage EmailVerificationPage {\n  component: import { EmailVerification } from \"@src/pages/auth.jsx\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp Application with Authentication\nDESCRIPTION: Main Wasp configuration file that sets up the application title and authentication settings using username/password method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/introduction/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp RecipeApp {\n  title: \"My Recipes\",\n  wasp: { version: \"{latestWaspVersion}\" },\n  auth: {\n    methods: { usernameAndPassword: {} },\n    onAuthFailedRedirectTo: \"/login\",\n    userEntity: User\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting a Page with Auth Required in Wasp (TypeScript)\nDESCRIPTION: TypeScript version of protecting a page with the authRequired property, ensuring that only authenticated users can access the page while providing type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\npage MainPage {\n  component: import Main from \"@src/pages/Main\",\n  authRequired: true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User Entity and Google Auth in Wasp\nDESCRIPTION: This snippet demonstrates how to set up the User entity and configure Google authentication in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    //...\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Discord Authentication Configuration (TypeScript)\nDESCRIPTION: TypeScript implementation of Discord authentication configuration with type definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/discord.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  username: (data: any) => data.profile.global_name,\n  avatarUrl: (data: any) => data.profile.avatar,\n})\n\nexport function getConfig() {\n  return {\n    scopes: ['identify'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing findUserIdentity in React Component\nDESCRIPTION: Shows how to replace the findUserIdentity helper with direct checks on the user.identities object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { findUserIdentity, AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const usernameIdentity = findUserIdentity(user, 'username')\n  if (usernameIdentity) {\n    // ...\n  }\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  if (user.identities.username) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Dev Server Port in Vite\nDESCRIPTION: Configuration to change the default dev server port and corresponding environment variable setup. Includes both the Vite config and required environment variable changes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/custom-vite-config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  server: {\n    port: 4000,\n  },\n}\n```\n\nLANGUAGE: env\nCODE:\n```\nWASP_WEB_CLIENT_URL=http://localhost:4000\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  server: {\n    port: 4000,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using getFirstProviderUserId Helper in TypeScript\nDESCRIPTION: Example of using the getFirstProviderUserId helper method in TypeScript components and server functions, including type annotations for the AuthUser object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const userId = user.getFirstProviderUserId()\n  // ...\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const createTask: CreateTask<...>  = async (args, context) => {\n  const userId = context.user.getFirstProviderUserId()\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Cache Key in JavaScript and TypeScript\nDESCRIPTION: Code snippets showing how to access Wasp Query cache keys for advanced usage with react-query's low-level API. This is useful when you need more control than Wasp's useAction hook provides for optimistic updates.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/actions.md#2025-04-22_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nimport { getTasks } from 'wasp/client/operations'\n\nconst queryKey = getTasks.queryCacheKey\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport { getTasks } from 'wasp/client/operations'\n\nconst queryKey = getTasks.queryCacheKey\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Server Function in JavaScript\nDESCRIPTION: This code defines the server-side WebSocket function in JavaScript. It handles connection events, logs user connections, and processes chat messages. The function receives Socket.IO server instance and context as parameters.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/web-sockets.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v4 as uuidv4 } from 'uuid'\nimport { getFirstProviderUserId } from 'wasp/auth'\n\nexport const webSocketFn = (io, context) => {\n  io.on('connection', (socket) => {\n    const username = getFirstProviderUserId(socket.data.user) ?? 'Unknown'\n    console.log('a user connected: ', username)\n\n    socket.on('chatMessage', async (msg) => {\n      console.log('message: ', msg)\n      io.emit('chatMessage', { id: uuidv4(), username, text: msg })\n      // You can also use your entities here:\n      // await context.entities.SomeEntity.create({ someField: msg })\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp Application with Entity and Operations\nDESCRIPTION: Main Wasp configuration file that defines the app structure, including Excuse entity, queries and actions for managing excuses, routes and dependencies.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-09-05-dev-excuses-app-tutrial.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napp ItWaspsOnMyMachine {\n  wasp: {\n    version: \"^0.6.0\"\n  },\n  title: \"It Wasps On My Machine\",\n  head: [\n    \"<script src='https://cdn.tailwindcss.com'></script>\"\n  ],\n  dependencies: [ \n    (\"axios\", \"^0.21.1\")\n  ]\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\n\npage MainPage {\n  component: import Main from \"@client/MainPage.js\"\n}\n\nentity Excuse {=psl\n    id          Int     @id @default(autoincrement())\n    text        String\npsl=}\n\nquery getExcuse {\n  fn: import { getExcuse } from \"@server/queries.js\",\n  entities: [Excuse]\n}\n\nquery getAllSavedExcuses {\n  fn: import { getAllSavedExcuses } from \"@server/queries.js\",\n  entities: [Excuse]\n}\n\naction saveExcuse {\n  fn: import { saveExcuse } from \"@server/actions.js\",\n  entities: [Excuse]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TypeScript Types for CRUD Overrides\nDESCRIPTION: Shows how to import TypeScript types for CRUD operation overrides from the Wasp server library. Demonstrates the pattern for creating a properly typed override function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/crud.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Tasks } from 'wasp/server/crud'\n\n// Each of the types is a generic type, so you can use it like this:\nexport const getAllOverride: Tasks.GetAllQuery<Input, Output> = async (\n  args,\n  context\n) => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Username Auth in Wasp\nDESCRIPTION: Basic configuration for enabling username & password authentication in the main.wasp file, including userEntity specification and auth method setup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/username-and-pass.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Email Verification Content Function (JavaScript/TypeScript)\nDESCRIPTION: Shows how to define a function `getVerificationEmailContent` in `src/email.js` or `src/email.ts` to customize the content of the email verification message. This function receives an object containing the `verificationLink` and should return an object with `subject`, `text`, and `html` properties for the email.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/email.md#2025-04-22_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/email.js\"\nexport const getVerificationEmailContent = ({ verificationLink }) => ({\n  subject: 'Verify your email',\n  text: `Click the link below to verify your email: ${verificationLink}`,\n  html: `\n        <p>Click the link below to verify your email</p>\n        <a href=\"${verificationLink}\">Verify email</a>\n    `,\n})\n```\n```\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/email.ts\"\nimport { GetVerificationEmailContentFn } from 'wasp/server/auth'\n\nexport const getVerificationEmailContent: GetVerificationEmailContentFn = ({\n  verificationLink,\n}) => ({\n  subject: 'Verify your email',\n  text: `Click the link below to verify your email: ${verificationLink}`,\n  html: `\n        <p>Click the link below to verify your email</p>\n        <a href=\"${verificationLink}\">Verify email</a>\n    `,\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Button in React Component\nDESCRIPTION: Adding logout functionality to the main page component using Wasp's authentication utilities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/07-auth.md#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { logout } from 'wasp/client/auth'\n\nconst MainPage = () => {\n  return (\n    <div>\n      <button onClick={logout}>Logout</button>\n    </div>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { logout } from 'wasp/client/auth'\n\nconst MainPage = () => {\n  return (\n    <div>\n      <button onClick={logout}>Logout</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Root Layout Component with Outlet in React (JavaScript, src/Root.jsx)\nDESCRIPTION: Implements a React functional component as the root layout, providing a header, footer, and Outlet for rendering matched routes. Requires 'react-router-dom' for the Outlet component. Accepts no props and renders children at the <Outlet /> location. Used as the rootComponent in Wasp; to be imported in main.wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/client-config.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Outlet } from 'react-router-dom'\n\nexport default function Root() {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      // highlight-next-line\n      <Outlet />\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Login Page Component in React\nDESCRIPTION: This snippet shows how to create a Login page component in React. It includes a LoginForm component and a Layout component for centering the content.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/keycloak.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }) {\n  return (\n    <div className=\"h-full w-full bg-white\">\n      <div className=\"flex min-h-[75vh] min-w-full items-center justify-center\">\n        <div className=\"h-full w-full max-w-sm bg-white p-5\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Global Middleware in JavaScript\nDESCRIPTION: This snippet shows the default global middleware configuration in JavaScript for Wasp applications. It includes middleware like Helmet, CORS, Morgan, express.json, express.urlencoded, and cookieParser.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/middleware-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultGlobalMiddleware = new Map([\n  ['helmet', helmet()],\n  ['cors', cors({ origin: config.allowedCORSOrigins })],\n  ['logger', logger('dev')],\n  ['express.json', express.json()],\n  ['express.urlencoded', express.urlencoded({ extended: false })],\n  ['cookieParser', cookieParser()]\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page with Wasp Auth UI in React (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a login page using Wasp's Auth UI components in a React application. It includes a login form and a link to the signup page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/crud.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LoginForm } from '@wasp/auth/forms/Login'\nimport { Link } from 'react-router-dom'\n\nexport function LoginPage() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        placeContent: 'center',\n      }}\n    >\n      <LoginForm />\n      <div>\n        <Link to=\"/signup\">Create an account</Link>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server in Wasp App Declaration\nDESCRIPTION: This snippet shows how to configure the server behavior using the 'server' field in the Wasp app declaration. It includes setup and middleware configuration functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/server-config.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  server: {\n    setupFn: import { mySetupFunction } from \"@server/myServerSetupCode.js\",\n    middlewareConfigFn: import { myMiddlewareConfigFn } from \"@server/myServerSetupCode.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Routes and Pages in main.wasp\nDESCRIPTION: This snippet shows how to define routes and pages for authentication in the main.wasp file, including login, signup, password reset, and email verification pages.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/email.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { Signup } from \"@src/pages/auth.jsx\"\n}\n\nroute RequestPasswordResetRoute { path: \"/request-password-reset\", to: RequestPasswordResetPage }\npage RequestPasswordResetPage {\n  component: import { RequestPasswordReset } from \"@src/pages/auth.jsx\",\n}\n\nroute PasswordResetRoute { path: \"/password-reset\", to: PasswordResetPage }\npage PasswordResetPage {\n  component: import { PasswordReset } from \"@src/pages/auth.jsx\",\n}\n\nroute EmailVerificationRoute { path: \"/email-verification\", to: EmailVerificationPage }\npage EmailVerificationPage {\n  component: import { EmailVerification } from \"@src/pages/auth.jsx\",\n}\n```\n\n----------------------------------------\n\nTITLE: Using Entities in Queries with JavaScript\nDESCRIPTION: Shows how to use Entities in Query implementations in JavaScript, accessing the Entity's Prisma API through the context argument.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/queries.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getAllTasks = async (args, context) => {\n  return context.entities.Task.findMany({})\n}\n\nexport const getFilteredTasks = async (args, context) => {\n  return context.entities.Task.findMany({\n    where: { isDone: args.isDone },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Detailed Email Authentication Configuration in Wasp\nDESCRIPTION: This snippet demonstrates a more detailed configuration of email authentication, including user signup fields, email verification, and password reset options.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/email.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  title: \"My app\",\n  // ...\n\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        userSignupFields: import { userSignupFields } from \"@src/auth.js\",\n        fromField: {\n          name: \"My App\",\n          email: \"hello@itsme.com\"\n        },\n        emailVerification: {\n          clientRoute: EmailVerificationRoute,\n          getEmailContentFn: import { getVerificationEmailContent } from \"@src/auth/email.js\",\n        },\n        passwordReset: {\n          clientRoute: PasswordResetRoute,\n          getEmailContentFn: import { getPasswordResetEmailContent } from \"@src/auth/email.js\",\n        },\n      },\n    },\n    onAuthFailedRedirectTo: \"/someRoute\"\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Main Page Prop Typing for Authenticated User (React, JavaScript)\nDESCRIPTION: Shows how to accept an authenticated user as a prop to the main page React component. Expects a user object and can leverage its properties to tailor the UI. Key for ensuring only logged-in users access personalized features.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/07-auth.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n// highlight-next-line\\nexport const MainPage = ({ user }) => {\\n  // Do something with the user\\n  // ...\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication UI Components in TypeScript\nDESCRIPTION: This snippet implements the Login page component in TypeScript using Wasp's authentication forms. It includes type definitions for the Layout component's props and uses the pre-built LoginForm component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/github.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from '@wasp/auth/forms/Login'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\n// A layout component to center the content\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"w-full h-full bg-white\">\n      <div className=\"min-w-full min-h-[75vh] flex items-center justify-center\">\n        <div className=\"w-full h-full max-w-sm p-5 bg-white\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Sign-Up Action in Wasp (Wasp)\nDESCRIPTION: This snippet shows how to declare a custom authentication action in a Wasp application using the Wasp DSL. The 'customSignup' action points to a signup function imported from a JavaScript or TypeScript module. The declaration is essential to wire up custom server auth logic to the Wasp app context. The function imported here must match the Wasp action signature and handle all validation and user creation semantics.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/email.md#2025-04-22_snippet_8\n\nLANGUAGE: Wasp\nCODE:\n```\n// ...\\n\\naction customSignup {\\n  fn: import { signup } from \"@src/auth/signup.js\",\\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Actions\nDESCRIPTION: Demonstrates how to handle errors and throw custom HttpError instances in Action implementations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/actions.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const createTask = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateTask } from 'wasp/server/operations'\nimport { HttpError } from 'wasp/server'\n\nexport const createTask: CreateTask = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Username & Password Migration Handler in TypeScript\nDESCRIPTION: Server-side handler function that migrates users from the old authentication system to the new one. It creates new Auth identities for users with username/password credentials, preserving the hashed passwords and linking them to the existing user accounts.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prisma } from \"wasp/server\";\nimport { type ProviderName, type UsernameProviderData } from \"wasp/server/auth\";\nimport { MigrateUsernameAndPassword } from \"wasp/server/api\";\n\nexport const migrateUsernameAndPasswordHandler: MigrateUsernameAndPassword =\n  async (_req, res) => {\n    const result = await migrateUsernameAuth();\n\n    res.status(200).json({ message: \"Migrated users to the new auth\", result });\n  };\n\nasync function migrateUsernameAuth(): Promise<{\n  numUsersAlreadyMigrated: number;\n  numUsersNotUsingThisAuthMethod: number;\n  numUsersMigratedSuccessfully: number;\n}> {\n  const users = await prisma.user.findMany({\n    include: {\n      auth: true,\n    },\n  });\n\n  const result = {\n    numUsersAlreadyMigrated: 0,\n    numUsersNotUsingThisAuthMethod: 0,\n    numUsersMigratedSuccessfully: 0,\n  };\n\n  for (const user of users) {\n    if (user.auth) {\n      result.numUsersAlreadyMigrated++;\n      console.log(\"Skipping user (already migrated) with id:\", user.id);\n      continue;\n    }\n\n    if (!user.username || !user.password) {\n      result.numUsersNotUsingThisAuthMethod++;\n      console.log(\"Skipping user (not using username auth) with id:\", user.id);\n      continue;\n    }\n\n    const providerData: UsernameProviderData = {\n      hashedPassword: user.password,\n    };\n    const providerName: ProviderName = \"username\";\n\n    await prisma.auth.create({\n      data: {\n        identities: {\n          create: {\n            providerName,\n            providerUserId: user.username.toLowerCase(),\n            providerData: JSON.stringify(providerData),\n          },\n        },\n        user: {\n          connect: {\n            id: user.id,\n          },\n        },\n      },\n    });\n    result.numUsersMigratedSuccessfully++;\n  }\n\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Dev Server Port in Vite\nDESCRIPTION: Shows how to configure a custom port for the Vite development server and update the corresponding environment variables.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/custom-vite-config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  server: {\n    port: 4000,\n  },\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  server: {\n    port: 4000,\n  },\n})\n```\n\nLANGUAGE: env\nCODE:\n```\nWASP_WEB_CLIENT_URL=http://localhost:4000\n```\n\n----------------------------------------\n\nTITLE: Submitting a Job in JavaScript/TypeScript\nDESCRIPTION: This snippet shows how to submit a job for execution using the JavaScript API. It demonstrates passing job arguments and optional executor options.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/jobs.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst submittedJob = await mySpecialJob.submit({ job: \"args\" })\n```\n\n----------------------------------------\n\nTITLE: Overriding Google Authentication Configuration in Wasp\nDESCRIPTION: This snippet demonstrates how to override the default Google authentication settings in a Wasp application. It includes custom configuration and user field mapping functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/google.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      google: {\n        configFn: import { getConfig } from \"@server/auth/google.js\",\n        getUserFieldsFn: import { getUserFields } from \"@server/auth/google.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\nentity User {=psl\n    id                        Int     @id @default(autoincrement())\n    username                  String  @unique\n    displayName               String\n    externalAuthAssociations  SocialLogin[]\npsl=}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Listing Available Fly.io Regions using Command Line\nDESCRIPTION: Command to list all available Fly.io deployment regions using the Fly CLI. This is useful for determining where to deploy your Wasp application geographically.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/cli.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nflyctl platform regions\n```\n\n----------------------------------------\n\nTITLE: Creating Login Page Component in JavaScript\nDESCRIPTION: Implements the React component for the login page using Wasp's LoginForm component with a link to the signup page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/07-auth.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\nimport { LoginForm } from 'wasp/client/auth'\n\nexport const LoginPage = () => {\n  return (\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\n      <LoginForm />\n      <br />\n      <span>\n        I don't have an account yet (<Link to=\"/signup\">go to signup</Link>).\n      </span>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Sender in Wasp\nDESCRIPTION: Basic configuration for setting up an email sender in the Wasp application configuration file. Defines the provider and default sender details.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/email/email.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: <provider>,\n    defaultFrom: {\n      name: \"Example\",\n      email: \"hello@itsme.com\"\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Password Migration Handler Implementation in TypeScript\nDESCRIPTION: Implements password migration logic that verifies the old password and updates it using a new hashing algorithm. Includes error handling and validation of the migration process.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport SecurePassword from \"secure-password\";\nimport { HttpError } from \"wasp/server\";\nimport {\n  createProviderId,\n  deserializeAndSanitizeProviderData,\n  findAuthIdentity,\n  updateAuthIdentityProviderData,\n} from \"wasp/server/auth\";\nimport { MigratePassword } from \"wasp/server/operations\";\n\ntype MigratePasswordInput = {\n  username: string;\n  password: string;\n};\ntype MigratePasswordOutput = {\n  message: string;\n};\n\nexport const migratePassword: MigratePassword<\n  MigratePasswordInput,\n  MigratePasswordOutput\n> = async ({ password, username }, _context) => {\n  const providerId = createProviderId(\"username\", username);\n  const authIdentity = await findAuthIdentity(providerId);\n\n  if (!authIdentity) {\n    throw new HttpError(400, \"Something went wrong\");\n  }\n\n  const providerData = deserializeAndSanitizeProviderData<\"username\">(\n    authIdentity.providerData\n  );\n\n  try {\n    const SP = new SecurePassword();\n\n    // This will verify the password using the old algorithm\n    const result = await SP.verify(\n      Buffer.from(password),\n      Buffer.from(providerData.hashedPassword, \"base64\")\n    );\n\n    if (result !== SecurePassword.VALID) {\n      throw new HttpError(400, \"Something went wrong\");\n    }\n\n    // This will hash the password using the new algorithm and update the\n    // provider data in the database.\n    await updateAuthIdentityProviderData<\"username\">(providerId, providerData, {\n      hashedPassword: password,\n    });\n  } catch (e) {\n    throw new HttpError(400, \"Something went wrong\");\n  }\n\n  return {\n    message: \"Password migrated successfully.\",\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub OAuth Functions in JavaScript\nDESCRIPTION: Defines the getUserFields and getConfig functions for GitHub OAuth in JavaScript. getUserFields generates a username and returns user fields, while getConfig returns the OAuth configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/github.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { generateAvailableDictionaryUsername } from \"@wasp/core/auth.js\";\n\nexport const getUserFields = async (_context, args) => {\n  const username = await generateAvailableDictionaryUsername();\n  const displayName = args.profile.displayName;\n  return { username, displayName };\n};\n\nexport function getConfig() {\n  return {\n    clientID // look up from env or elsewhere\n    clientSecret // look up from env or elsewhere\n    scope: [],\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting a Typed Task Array Checker Function - TypeScript\nDESCRIPTION: Exports a type-safe utility function to check if a typed tasks array is empty. Relies on a Task type imported from wasp/entities. Returns a boolean indicating if there are tasks present, used in both application logic and unit tests. TypeScript is required for correct type checking.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/testing.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { type Task } from \"wasp/entities\";\n\nexport function areThereAnyTasks(tasks: Task[]): boolean {\n  return tasks.length === 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Auth Routes and Pages in Wasp\nDESCRIPTION: This snippet shows how to add the necessary routes and pages for authentication in the main.wasp file, including login, signup, password reset, and email verification pages.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { Signup } from \"@src/pages/auth.jsx\"\n}\n\nroute RequestPasswordResetRoute { path: \"/request-password-reset\", to: RequestPasswordResetPage }\npage RequestPasswordResetPage {\n  component: import { RequestPasswordReset } from \"@src/pages/auth.jsx\",\n}\n\nroute PasswordResetRoute { path: \"/password-reset\", to: PasswordResetPage }\npage PasswordResetPage {\n  component: import { PasswordReset } from \"@src/pages/auth.jsx\",\n}\n\nroute EmailVerificationRoute { path: \"/email-verification\", to: EmailVerificationPage }\npage EmailVerificationPage {\n  component: import { EmailVerification } from \"@src/pages/auth.jsx\",\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Server Environment Variable (TypeScript)\nDESCRIPTION: Demonstrates reading a server environment variable from process.env in TypeScript, which is typical in Node.js-based Wasp server code. The environment variable (like SOME_VAR_NAME) must be set correctly in .env.server or by the execution environment. Outputs the current value of the variable to the console for debugging or configuration purposes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/env-vars.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconsole.log(process.env.SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: User Entity Configuration for Email Auth in Wasp\nDESCRIPTION: Defines required fields for the User entity when implementing email authentication. Includes fields for email, password, verification status and timestamps.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/email.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    email                     String?       @unique\n    password                  String?\n    isEmailVerified           Boolean       @default(false)\n    emailVerificationSentAt   DateTime?\n    passwordResetSentAt       DateTime?\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Implementing Action in JavaScript\nDESCRIPTION: Example of implementing a declared action in JavaScript with args and context parameters.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/actions.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport const createFoo = (args, context) => {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Client API URL Environment Variable in Bash\nDESCRIPTION: Sets the REACT_APP_API_URL environment variable to point to the server's custom domain when building the client. This ensures proper configuration for CORS and API requests.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/extras.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nREACT_APP_API_URL=https://api.myapp.com\n```\n\n----------------------------------------\n\nTITLE: Disabling Wasp Telemetry via Environment Variable (Shell)\nDESCRIPTION: This shell command demonstrates how to opt out of Wasp's telemetry data collection. Setting the `WASP_TELEMETRY_DISABLE` environment variable to any non-empty value (e.g., '1') instructs the Wasp CLI and installation script to refrain from sending any usage data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/telemetry.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport WASP_TELEMETRY_DISABLE=1\n```\n\n----------------------------------------\n\nTITLE: Implementing Query in JavaScript\nDESCRIPTION: JavaScript implementation of the getFoo query function that gets exported from queries.js file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/queries.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getFoo = (args, context) => {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Query in Wasp\nDESCRIPTION: This snippet shows how to declare a query in Wasp, specifying the function containing the query logic and the entities it depends on for cache invalidation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-12-02-waspello.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nquery getListsAndCards {\n    // Points to the function which contains query logic.\n    fn: import { getListsAndCards } from \"@server/queries.js\",\n\n    // This query depends on List and Card entities.\n    // If any of them changes this query will get re-fetched (cache invalidation).\n    entities: [List, Card]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getTasks Query in JavaScript\nDESCRIPTION: This code implements the getTasks Query function in JavaScript. It uses the context.entities.Task.findMany method to fetch all tasks from the database, ordered by id.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/05-queries.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getTasks = async (args, context) => {\n  return context.entities.Task.findMany({\n    orderBy: { id: 'asc' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Password Update Implementation in TypeScript\nDESCRIPTION: TypeScript version of password update functionality with proper type definitions and auth helper functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createProviderId,\n  findAuthIdentity,\n  updateAuthIdentityProviderData,\n  deserializeAndSanitizeProviderData,\n} from 'wasp/server/auth';\nimport { type UpdatePassword } from 'wasp/server/operations'\n\nexport const updatePassword: UpdatePassword<\n  { email: string; password: string },\n  void,\n> = async (args, context) => {\n  const providerId = createProviderId('email', args.email)\n  const authIdentity = await findAuthIdentity(providerId)\n  if (!authIdentity) {\n      throw new HttpError(400, \"Unknown user\")\n  }\n  \n  const providerData = deserializeAndSanitizeProviderData<'email'>(authIdentity.providerData)\n\n  // Updates the password and hashes it automatically.\n  await updateAuthIdentityProviderData(providerId, providerData, {\n      hashedPassword: args.password,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Fields with Zod in JavaScript\nDESCRIPTION: Example of using the Zod validation library to validate user signup fields. This approach provides a more declarative way to define validation rules compared to manual validation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\nimport * as z from 'zod'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: (data) => {\n    const AddressSchema = z\n      .string({\n        required_error: 'Address is required',\n        invalid_type_error: 'Address must be a string',\n      })\n      .min(10, 'Address must be at least 10 characters long')\n    const result = AddressSchema.safeParse(data.address)\n    if (result.success === false) {\n      throw new Error(result.error.issues[0].message)\n    }\n    return result.data\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Mocking Server and Queries in Wasp Tests\nDESCRIPTION: Shows how to use the mockServer, mockQuery, and mockApi functions provided by Wasp to set up mocks for server requests and queries in tests.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mockServer } from \"wasp/client/test\";\n\nconst { mockQuery, mockApi } = mockServer();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getTasks } from \"wasp/client/operations\";\n\nmockQuery(getTasks, []);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpMethod } from \"wasp/client\";\n\nmockApi({ method: HttpMethod.Get, path: \"/foor/bar\" }, { res: \"hello\" });\n```\n\n----------------------------------------\n\nTITLE: TypeScript GitHub Auth Implementation\nDESCRIPTION: TypeScript implementation of GitHub authentication configuration with type definitions and user signup fields mapping.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/github.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  username: () => 'hardcoded-username',\n  displayName: (data: any) => data.profile.name,\n})\n\nexport function getConfig() {\n  return {\n    scopes: ['user'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Google Auth Configuration\nDESCRIPTION: JavaScript implementation of Google auth configuration including user signup fields and OAuth scopes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/google.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const userSignupFields = {\n  username: () => 'hardcoded-username',\n  displayName: (data) => data.profile.name,\n}\n\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Custom Signup Action in Wasp\nDESCRIPTION: This Wasp code snippet demonstrates how to declare a custom server-side action named `customSignup` in the `main.wasp` file. It specifies the function implementation to be imported from a JavaScript file (`@src/auth/signup.js`), allowing developers to define custom logic for user registration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/username-and-pass.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\n// ...\n\naction customSignup {\n  fn: import { signup } from \"@src/auth/signup.js\",\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining onAfterLogin Auth Hook in JavaScript/TypeScript\nDESCRIPTION: Exports an asynchronous function `onAfterLogin` to be executed after a user login is successfully completed. It receives an object containing `providerId`, the logged-in `user` object, optional `oauth` details (if applicable), the Prisma client instance `prisma`, and the request object `req`. The return value of this hook is ignored by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/auth-hooks.md#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/auth/hooks.js\"\nexport const onAfterLogin = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n```\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/auth/hooks.ts\"\nimport type { OnAfterLoginHook } from 'wasp/server/auth'\n\nexport const onAfterLogin: OnAfterLoginHook = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching User-Specific Tasks with Authentication Check in JavaScript\nDESCRIPTION: Modifies the `getTasks` query in `src/queries.js` to enforce authentication. It checks if `context.user` exists; if not, it throws an `HttpError(401)`. Otherwise, it fetches tasks using `context.entities.Task.findMany`, filtering by the `context.user.id` to ensure only the logged-in user's tasks are returned, ordered by ID.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/07-auth.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// highlight-next-line\nimport { HttpError } from 'wasp/server'\n\nexport const getTasks = async (args, context) => {\n  // highlight-start\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  // highlight-end\n  return context.entities.Task.findMany({\n    // highlight-next-line\n    where: { user: { id: context.user.id } },\n    orderBy: { id: 'asc' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions in TypeScript\nDESCRIPTION: This snippet demonstrates the implementation of Actions in TypeScript, including type annotations for improved type safety. It shows how to use Wasp-generated types for Actions and define custom types for the data model.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/actions.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreateTask, MarkTaskAsDone } from '@wasp/actions/types'\n\ntype Task = {\n  id: number\n  description: string\n  isDone: boolean\n}\n\nlet nextId = 4\nconst tasks = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\nexport const createTask: CreateTask<Pick<Task, 'description'>, Task> = (\n  args\n) => {\n  const newTask = {\n    id: nextId,\n    isDone: false,\n    description: args.description,\n  }\n  nextId += 1\n  tasks.push(newTask)\n  return newTask\n}\n\nexport const markTaskAsDone: MarkTaskAsDone<Pick<Task, 'id'>, void> = (\n  args\n) => {\n  const task = tasks.find((task) => task.id === args.id)\n  if (!task) {\n    return\n  }\n  task.isDone = true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Button\nDESCRIPTION: Creating a logout button component using Wasp's authentication utilities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { logout } from 'wasp/client/auth'\n\nconst LogoutButton = () => {\n  return <button onClick={logout}>Logout</button>\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { logout } from 'wasp/client/auth'\n\nconst LogoutButton = () => {\n  return <button onClick={logout}>Logout</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Wasp App for Deployment\nDESCRIPTION: Generates deployable code for a Wasp application in the .wasp/build/ directory. This command creates all the necessary files for deploying both the backend and frontend components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/manually.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasp build\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signup Function in JavaScript\nDESCRIPTION: This code implements a custom signup function in JavaScript, handling email validation, password checks, user creation, and email verification.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/email.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  ensurePasswordIsPresent,\n  ensureValidPassword,\n  ensureValidEmail,\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  deserializeAndSanitizeProviderData,\n  findAuthIdentity,\n  createUser,\n  createEmailVerificationLink,\n  sendEmailVerificationEmail,\n} from 'wasp/server/auth'\n\nexport const signup = async (args, _context) => {\n  ensureValidEmail(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('email', args.email)\n    const existingAuthIdentity = await findAuthIdentity(providerId)\n\n    if (existingAuthIdentity) {\n      const providerData = deserializeAndSanitizeProviderData(existingAuthIdentity.providerData)\n      // Your custom code here\n    } else {\n      // sanitizeAndSerializeProviderData will hash the user's password\n      const newUserProviderData = await sanitizeAndSerializeProviderData({\n          hashedPassword: args.password,\n          isEmailVerified: false,\n          emailVerificationSentAt: null,\n          passwordResetSentAt: null,\n      })\n      await createUser(\n        providerId,\n        providerData,\n        // Any additional data you want to store on the User entity\n        {},\n      )\n\n      // Verification link links to a client route e.g. /email-verification\n      const verificationLink = await createEmailVerificationLink(args.email, '/email-verification');\n      try {\n          await sendEmailVerificationEmail(\n              args.email,\n              {\n                  from: {\n                    name: \"My App Postman\",\n                    email: \"hello@itsme.com\",\n                  },\n                  to: args.email,\n                  subject: \"Verify your email\",\n                  text: `Click the link below to verify your email: ${verificationLink}`,\n                  html: `\n                      <p>Click the link below to verify your email</p>\n                      <a href=\"${verificationLink}\">Verify email</a>\n                  `,\n              }\n          );\n      } catch (e: unknown) {\n          console.error(\"Failed to send email verification email:\", e);\n          throw new HttpError(500, \"Failed to send email verification email.\");\n      } \n    }\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimistic Update with useAction Hook (JavaScript/JSX)\nDESCRIPTION: Shows a React component implementing optimistic UI updates for a task entity using the useAction hook from the Wasp client. The hook is configured to optimistically update a query response when an action is triggered, immediately reflecting changes in the UI for improved user experience. Requires React, wasp/client/operations, and adherence to React hooks usage.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {\n  useQuery,\n  useAction,\n  getTask,\n  markTaskAsDone,\n} from 'wasp/client/operations'\n\nconst TaskPage = ({ id }) => {\n  const { data: task } = useQuery(getTask, { id })\n  // highlight-start\n  const markTaskAsDoneOptimistically = useAction(markTaskAsDone, {\n    optimisticUpdates: [\n      {\n        getQuerySpecifier: ({ id }) => [getTask, { id }],\n        updateQuery: (_payload, oldData) => ({ ...oldData, isDone: true }),\n      },\n    ],\n  })\n  // highlight-end\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>\n  }\n\n  const { description, isDone } = task\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n      {isDone || (\n        <button onClick={() => markTaskAsDoneOptimistically({ id })}>\n          Mark as done.\n        </button>\n      )}\n    </div>\n  )\n}\n\nexport default TaskPage\n```\n\n----------------------------------------\n\nTITLE: Configuring CRUD Operations for Tasks in Wasp\nDESCRIPTION: This snippet demonstrates how to define a CRUD declaration in Wasp for a Task entity, enabling getAll, get, create, and update operations. It shows how to make specific operations public and how to override default implementations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/crud.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\ncrud Tasks {\n  entity: Task,\n  operations: {\n    getAll: {\n      isPublic: true, // by default only logged in users can perform operations\n    },\n    get: {},\n    create: {\n      overrideFn: import { createTask } from \"@src/tasks.js\",\n    },\n    update: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Redirect Hook in Wasp (JavaScript) - wasp\nDESCRIPTION: Registers a custom JavaScript 'onBeforeOAuthRedirect' hook for auth in the main.wasp config file. Requires a separately implemented and exported function at '@src/auth/hooks'. Enables execution of custom logic before redirecting for OAuth; expects the referenced function to conform to the expected Wasp auth hook interface.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  ...\n  auth: {\n    ...\n    onBeforeOAuthRedirect: import { onBeforeOAuthRedirect } from \"@src/auth/hooks\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Google OAuth Access Token After Login (JavaScript) - js\nDESCRIPTION: Shows how to refresh the Google OAuth access token after login in JavaScript. Checks for the presence of a refresh token and uses Wasp's prebuilt Google OAuth client to fetch new access tokens when needed. Requires 'wasp/server/auth' import and appropriate handling for asynchronous token refresh calls.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nimport { google } from 'wasp/server/auth'\n\nexport const onAfterLogin = async ({ oauth }) => {\n  if (oauth.provider === 'google' && oauth.tokens.refreshToken !== null) {\n    const newTokens = await google.oAuthClient.refreshAccessToken(\n      oauth.tokens.refreshToken\n    )\n    log('new tokens', newTokens)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Layout React Component\nDESCRIPTION: Defines the `App` React component in `src/client/App.tsx`, intended as the root layout wrapper. It includes a navigation bar with links, imports and uses the `useAuth` hook from Wasp to conditionally render the `AddNote` component only if a user is logged in, applies basic styling using Tailwind CSS classes, and renders the specific page content via the `children` prop. This ensures a consistent structure and appearance for all pages.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport './Main.css';\nimport AddNote from './AddNote';\nimport { ReactNode } from 'react';\nimport useAuth from '@wasp/auth/useAuth';\n\nconst App = ({ children }: { children: ReactNode }) => {\n\n  const { data: user } = useAuth();\n\n  return (\n    <div className='min-h-screen bg-neutral-300/70 text-center'>\n      <div className='flex flex-col gap-6 justify-center items-center mx-auto pt-12'>\n        <div className='flex flex-row justify-between items-center w-1/2 mb-6 text-neutral-600 px-2'>\n          <div className='flex justify-start w-1/3'>\n            <a href='/' className='hover:underline cursor-pointer'>\n              🤖 Generated Ideas\n            </a>\n          </div>\n          <div className='flex justify-center w-1/3'>\n            <a href='/notes' className='hover:underline cursor-pointer'>\n              📝 My Notes\n            </a>\n          </div>\n          <div className='flex justify-end w-1/3'>\n            <a href='/account' className='hover:underline cursor-pointer'>\n              👤 Account\n            </a>\n          </div>\n        </div>\n\n        <div className='flex flex-col gap-4 justify-center items-center w-2/4'>\n          {!!user && <AddNote />}\n          <hr className='border border-t-1 border-neutral-100/70 w-full' />\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Typed React Component Using Wasp Queries (TSX)\nDESCRIPTION: Defines a typed React component `Todo` in TSX (`src/Todo.tsx`). This component utilizes the `useQuery` hook with the `getTasks` query from `wasp/client/operations` to fetch and display a list of tasks, ensuring type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/testing.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQuery, getTasks } from \"wasp/client/operations\";\n\nconst Todo = (_props: {}) => {\n  const { data: tasks } = useQuery(getTasks);\n\n  return (\n    <ul>\n      {tasks &&\n        tasks.map((task) => (\n          <li key={task.id}>\n            <input type=\"checkbox\" value={task.isDone} />\n            {task.description}\n          </li>\n        ))}\n    </ul>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining onBeforeSignup Auth Hook in JavaScript/TypeScript\nDESCRIPTION: Exports an asynchronous function `onBeforeSignup` to be executed before a user signup completes. It receives an object containing `providerId`, the Prisma client instance `prisma`, and the request object `req`. The return value of this hook is ignored by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/auth-hooks.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/auth/hooks.js\"\nexport const onBeforeSignup = async ({ providerId, prisma, req }) => {\n  // Hook code goes here\n}\n```\n```\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/auth/hooks.ts\"\nimport type { OnBeforeSignupHook } from 'wasp/server/auth'\n\nexport const onBeforeSignup: OnBeforeSignupHook = async ({\n  providerId,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Sender in Wasp\nDESCRIPTION: Basic configuration for the email sender in the main.wasp file, where you specify the provider and default sender information.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/email/email.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: <provider>,\n    defaultFrom: {\n      name: \"Example\",\n      email: \"hello@itsme.com\"\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Custom API Endpoint in Wasp\nDESCRIPTION: Shows how to declare a custom API endpoint in a Wasp file. This connects a JavaScript/TypeScript implementation function to a specific HTTP route with method and path.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/apis.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar { // APIs and their implementations don't need to (but can) have the same name.\n  fn: import { fooBar } from \"@src/apis\",\n  httpRoute: (GET, \"/foo/bar\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing updateTask Action (JavaScript)\nDESCRIPTION: This snippet demonstrates the server-side implementation of the 'updateTask' action in JavaScript. It updates a task's 'isDone' status in the database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/06-actions.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const updateTask = async ({ id, isDone }, context) => {\n  return context.entities.Task.update({\n    where: { id },\n    data: {\n      isDone: isDone,\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Query Implementation\nDESCRIPTION: Migrated TypeScript version of the getTaskInfo query with added type annotations and Wasp-specific types.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/general/typescript.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport HttpError from 'wasp/server'\nimport { type Task } from '@wasp/entities'\nimport { type GetTaskInfo } from '@wasp/server/operations'\n\nfunction getInfoMessage(task: Pick<Task, 'isDone' | 'description'>): string {\n  const isDoneText = task.isDone ? 'is done' : 'is not done'\n  return `Task '${task.description}' is ${isDoneText}.`\n}\n\nexport const getTaskInfo: GetTaskInfo<Pick<Task, 'id'>, string> = async (\n  { id },\n  context\n) => {\n  const Task = context.entities.Task\n\n  const task = await Task.findUnique({ where: { id } })\n  if (!task) {\n    throw new HttpError(404)\n  }\n\n  return getInfoMessage(task)\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring Authentication for Main Page in Wasp\nDESCRIPTION: Updates the MainPage declaration to require authentication, redirecting unauthenticated users to the login page as specified in auth configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/07-auth.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\npage MainPage {\n  // highlight-next-line\n  authRequired: true,\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining App Setup and Routing - Wasp\nDESCRIPTION: This snippet configures an application named \"tasksCrudApp\" in a Wasp file, specifying the Wasp version, application title, and authentication method using a username and password. It defines the root, login, and signup routes, each linked to specific page components, with authentication enforced on the main route. Required for initializing a fully functional Wasp app with routing and auth.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/crud.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp tasksCrudApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"Tasks Crud App\",\n\n  // We enabled auth and set the auth method to username and password\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n\n// Tasks app routes\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  component: import { MainPage } from \"@src/MainPage.jsx\",\n  authRequired: true,\n}\n\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { LoginPage } from \"@src/LoginPage.jsx\",\n}\n\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { SignupPage } from \"@src/SignupPage.jsx\",\n}\n\n```\n\n----------------------------------------\n\nTITLE: Default Middleware Configuration in JavaScript\nDESCRIPTION: Shows the default global middleware configuration in JavaScript, including Helmet, CORS, Morgan logger, Express JSON parser, URL encoder, and cookie parser.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/middleware-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultGlobalMiddleware = new Map([\n  ['helmet', helmet()],\n  ['cors', cors({ origin: config.allowedCORSOrigins })],\n  ['logger', logger('dev')],\n  ['express.json', express.json()],\n  ['express.urlencoded', express.urlencoded({ extended: false })],\n  ['cookieParser', cookieParser()]\n])\n```\n\n----------------------------------------\n\nTITLE: Accessing Google User Identity Information in TypeScript\nDESCRIPTION: Shows how to access a user's Google identity data and ID from a user object. The code extracts the Google-specific identity information and provides access to the Google User ID.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/_google-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst googleIdentity = user.identities.google\n\n// Google User ID for example \"123456789012345678901\"\ngoogleIdentity.id\n```\n\n----------------------------------------\n\nTITLE: Server-Side Action Usage in JavaScript\nDESCRIPTION: Demonstration of server-side Action usage in JavaScript with authentication context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/actions.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTask, markTaskAsDone } from 'wasp/server/operations'\n\nconst user = // Get an AuthUser object, e.g., from context.user\n\nconst newTask = await createTask(\n  { description: 'Learn TypeScript' },\n  { user },\n)\nawait markTaskAsDone({ id: 1 }, { user })\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Queries\nDESCRIPTION: Shows how to implement custom error handling in Queries using HttpError for controlled error information exposure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/queries.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetAllTasks } from 'wasp/server/operations'\nimport { HttpError } from 'wasp/server'\n\nexport const getAllTasks: GetAllTasks = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Wasp Auth Configuration with Google Provider\nDESCRIPTION: Demonstrates the basic setup for enabling Google authentication in a Wasp application, including user entity declaration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n}\n```\n\n----------------------------------------\n\nTITLE: Updating createTask and updateTask Actions with Authentication in JavaScript\nDESCRIPTION: Modifies createTask and updateTask actions to include authentication checks and ensure tasks are associated with the logged-in user. Uses Prisma's updateMany for task updates.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/07-auth.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport HttpError from '@wasp/core/HttpError.js'\n\nexport const createTask = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.create({\n    data: {\n      description: args.description,\n      user: { connect: { id: context.user.id } },\n    },\n  })\n}\n\nexport const updateTask = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.updateMany({\n    where: { id: args.id, user: { id: context.user.id } },\n    data: { isDone: args.isDone },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Google Auth Behavior in Wasp\nDESCRIPTION: Configuration for customizing the default Google authentication behavior by specifying userSignupFields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/google.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication in Wasp\nDESCRIPTION: This snippet demonstrates how to configure email authentication in a Wasp application, including user entity definition and email-specific options.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/email.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  title: \"My app\",\n  // ...\n\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        // We'll explain these options below\n      },\n    },\n    onAuthFailedRedirectTo: \"/someRoute\"\n  },\n  // ...\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub Authentication Configuration in TypeScript\nDESCRIPTION: This TypeScript function returns the required OAuth configuration for GitHub authentication including clientID, clientSecret, and scope. These values should be retrieved from environment variables or another secure source.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/github.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getConfig() {\n  return {\n    clientID, // look up from env or elsewhere\n    clientSecret, // look up from env or elsewhere\n    scope: [],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using getUsername in React Component (TypeScript)\nDESCRIPTION: TypeScript implementation of getUsername helper in a React component, including proper type definitions for the user object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/_get-username.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getUsername, AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const username = getUsername(user)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Environment Variables in TypeScript\nDESCRIPTION: Shows how to import and use server environment variables in TypeScript server-side code using the wasp/server env object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/env-vars.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from 'wasp/server'\n\nconsole.log(env.SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Functionality in React\nDESCRIPTION: Demonstrates how to use the provided logout action in a React component to allow users to log out.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { logout } from 'wasp/client/auth'\n\nconst LogoutButton = () => {\n  return <button onClick={logout}>Logout</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Worker Template for Job Abstraction\nDESCRIPTION: Defining a standard worker template to handle different types of metrics collection jobs with consistent structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-01-27-waspleau.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst workerFunction = async (opts) => {\n  return [\n    { name: 'Metric 1 name', value: 'foo', updatedAt: ... },\n    { name: 'Metric 2 name', value: 'bar', updatedAt: ... },\n  ]\n}\n\nexport const workerTemplate = { name: 'Job Name', fn: workerFunction, schedule: '*/10 * * * *' }\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Reset Confirmation Form in React\nDESCRIPTION: This component handles the actual password reset process. It extracts a token from the URL, allows the user to enter a new password, and uses the resetPassword function from Wasp's authentication module to complete the reset.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/email/create-your-own-ui.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport function PasswordReset() {\n  const [error, setError] = useState<Error | null>(null)\n  const [newPassword, setNewPassword] = useState('')\n  const navigate = useNavigate()\n\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    setError(null)\n    try {\n      // The token is passed as a query parameter\n      const token = new URLSearchParams(window.location.search).get('token')\n      if (!token) throw new Error('Token not found in URL')\n      await resetPassword({ token, password: newPassword })\n      navigate('/')\n    } catch (error: unknown) {\n      console.error('Error during password reset:', error)\n      setError(error as Error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {error && <p>Error: {error.message}</p>}\n\n      <input\n        type=\"password\"\n        autoComplete=\"new-password\"\n        value={newPassword}\n        onChange={(e) => setNewPassword(e.target.value)}\n        placeholder=\"New password\"\n      />\n\n      <button type=\"submit\">Reset password</button>\n    </form>\n  )\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Environment Variables in JavaScript\nDESCRIPTION: Demonstrates how to import and use client environment variables in a React component using the wasp/client env object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/env-vars.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { env } from 'wasp/client'\n\nconsole.log(env.REACT_APP_SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Password Reset Email Function in TypeScript\nDESCRIPTION: This snippet defines a function for generating the content of password reset emails in TypeScript, including type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/email.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetPasswordResetEmailContentFn } from 'wasp/server/auth'\n\nexport const getPasswordResetEmailContent: GetPasswordResetEmailContentFn = ({\n  passwordResetLink,\n}) => ({\n  subject: 'Password reset',\n  text: `Click the link below to reset your password: ${passwordResetLink}`,\n  html: `\n        <p>Click the link below to reset your password</p>\n        <a href=\"${passwordResetLink}\">Reset password</a>\n    `,\n})\n```\n\n----------------------------------------\n\nTITLE: Using getEmail in Async Function (TypeScript)\nDESCRIPTION: This example shows how to use the getEmail helper in a TypeScript async function. It demonstrates its usage within a createTask function, which is typed using Wasp's CreateTask type.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/_get-email.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { getEmail } from 'wasp/auth'\n\nexport const createTask: CreateTask<...>  = async (args, context) => {\n  const email = getEmail(context.user)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling WebSockets in Wasp File\nDESCRIPTION: This snippet shows how to enable WebSockets in the Wasp configuration file by adding the webSocket property to the app object. It specifies the server-side function to handle WebSocket events and sets the auto-connect behavior.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/web-sockets.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  webSocket: {\n    fn: import { webSocketFn } from \"@server/webSocket.js\",\n    autoConnect: true, // optional, default: true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Wasp Project with Vector Similarity Search Template\nDESCRIPTION: This command creates a new Wasp project using the Vector Similarity Search template, which includes features for generating embeddings and performing vector similarity search on text data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/starter-templates.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwasp new <project-name> -t embeddings\n```\n\n----------------------------------------\n\nTITLE: Configuring onBeforeLogin Hook in Wasp\nDESCRIPTION: Shows how to set up the onBeforeLogin hook in the main.wasp file and implement it in JavaScript or TypeScript. This hook is executed before the user logs in and can be used to reject logins based on certain criteria.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/auth-hooks.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  ...\n  auth: {\n    ...\n    onBeforeLogin: import { onBeforeLogin } from \"@src/auth/hooks\",\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const onBeforeLogin = async ({ providerId, user, prisma, req }) => {\n  if (\n    providerId.providerName === 'email' &&\n    providerId.providerUserId === 'some@email.com'\n  ) {\n    throw new HttpError(403, 'You cannot log in with this email')\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\nimport type { OnBeforeLoginHook } from 'wasp/server/auth'\n\nexport const onBeforeLogin: OnBeforeLoginHook = async ({\n  providerId,\n  user,\n  prisma,\n  req,\n}) => {\n  if (\n    providerId.providerName === 'email' &&\n    providerId.providerUserId === 'some@email.com'\n  ) {\n    throw new HttpError(403, 'You cannot log in with this email')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing SignupForm with Additional Fields and Validation (JavaScript)\nDESCRIPTION: This JavaScript (React) example shows passing an array of objects and render functions to the SignupForm additionalFields prop. The first field is a validated address input, while the second is a functionally rendered phone number input with error and loading state support. Dependencies: Wasp client auth, react-hook-form. Input is the complete form state; outputs are UI elements tied to validation and submission states.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  SignupForm,\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Keycloak Config and User Mapping (JavaScript)\nDESCRIPTION: This JavaScript file (`src/auth/keycloak.js`) provides implementations for Keycloak integration. `userSignupFields` defines how Keycloak profile data maps to the Wasp User model fields (using a hardcoded username and profile name for display name). `getConfig` returns the required OAuth scopes ('profile', 'email').\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/keycloak.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const userSignupFields = {\n  username: () => \"hardcoded-username\",\n  displayName: (data) => data.profile.name,\n}\n\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing SignupForm with Additional Fields and Validation (TypeScript)\nDESCRIPTION: This TypeScript version achieves the same functionality as the JavaScript version: customizing SignupForm with both a validated address input object and a dynamically rendered phone number field. Validation and loading/error state management are present, leveraging strong typing and Wasp's client auth system.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  SignupForm,\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Keycloak OAuth Config Function - TypeScript\nDESCRIPTION: This snippet exports a TypeScript implementation of the Keycloak getConfig function, setting the OAuth scopes for authentication. The function must return an object with a scopes array and is used by Wasp to configure the provider. No additional dependencies are required except correct export and import in the app definition.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/keycloak.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Routes\nDESCRIPTION: Wasp route configuration for authentication pages.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/discord.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a React Component with Mocked Wasp Queries (JavaScript/JSX)\nDESCRIPTION: Provides a Vitest test case (`src/Todo.test.jsx`) for the `Todo` component. It uses `mockServer` to get `mockQuery`, mocks the `getTasks` query to return predefined `mockTasks`, renders the component using `renderInContext`, and uses `@testing-library/react` (`screen`) to assert that the component correctly displays the mocked data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/testing.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { test, expect } from \"vitest\";\nimport { screen } from \"@testing-library/react\";\n\nimport { mockServer, renderInContext } from \"wasp/client/test\";\nimport { getTasks } from \"wasp/client/operations\";\nimport Todo from \"./Todo\";\n\nconst { mockQuery } = mockServer();\n\nconst mockTasks = [\n  {\n    id: 1,\n    description: \"test todo 1\",\n    isDone: true,\n    userId: 1,\n  },\n];\n\ntest(\"handles mock data\", async () => {\n  mockQuery(getTasks, mockTasks);\n\n  renderInContext(<Todo />);\n\n  await screen.findByText(\"test todo 1\");\n\n  expect(screen.getByRole(\"checkbox\")).toBeChecked();\n\n  screen.debug();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Client in React (TypeScript)\nDESCRIPTION: This snippet shows how to implement WebSocket functionality on the client side using TypeScript in a React component. It demonstrates Wasp's full-stack type safety features, including typed event handlers and payloads.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/web-sockets.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react'\nimport {\n  useSocket,\n  useSocketListener,\n  ServerToClientPayload,\n} from 'wasp/client/webSocket'\n\nexport const ChatPage = () => {\n  const [messageText, setMessageText] = useState<\n    ClientToServerPayload<'chatMessage'>\n  >('')\n  const [messages, setMessages] = useState<\n    ServerToClientPayload<'chatMessage'>[]\n  >([])\n  const { socket, isConnected } = useSocket()\n\n  useSocketListener('chatMessage', logMessage)\n\n  function logMessage(msg: ServerToClientPayload<'chatMessage'>) {\n    setMessages((priorMessages) => [msg, ...priorMessages])\n  }\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    socket.emit('chatMessage', messageText)\n    setMessageText('')\n  }\n\n  const messageList = messages.map((msg) => (\n    <li key={msg.id}>\n      <em>{msg.username}</em>: {msg.text}\n    </li>\n  ))\n  const connectionIcon = isConnected ? '🟢' : '🔴'\n\n  return (\n    <>\n      <h2>Chat {connectionIcon}</h2>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <div>\n            <div>\n              <input\n                type=\"text\"\n                value={messageText}\n                onChange={(e) => setMessageText(e.target.value)}\n              />\n            </div>\n            <div>\n              <button type=\"submit\">Submit</button>\n            </div>\n          </div>\n        </form>\n        <ul>{messageList}</ul>\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Recurring Job in Wasp\nDESCRIPTION: Declaration of a recurring job in the main.wasp file with a cron schedule and predefined arguments. This configuration enables automatic job execution on the specified schedule without manual invocation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/jobs.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\njob mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@src/workers/bar\"\n  },\n  schedule: {\n    cron: \"0 * * * *\",\n    args: {=json { \"job\": \"args\" } json=} // optional\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Auth Provider Identity in TypeScript\nDESCRIPTION: Example of safely checking and accessing authentication provider data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/entities/entities.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nif (user.identities.google !== null) {\n  const userId = user.identities.google.id\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing First Provider User ID - getFirstProviderUserId in TypeScript (Backend Logic)\nDESCRIPTION: Provides a TypeScript backend function typed with CreateTask signature that calls getFirstProviderUserId with context.user to fetch the first available provider-based user identifier. Dependencies: wasp/auth TS package. Input: context.user. Output: userId string or null. Promotes type safety and reliability in backend logic.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/entities.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { getFirstProviderUserId } from 'wasp/auth'\\n\\nexport const createTask: CreateTask<...>  = async (args, context) => {\\n  const userId = getFirstProviderUserId(context.user)\\n  // ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Email Auth Migration Implementation in TypeScript\nDESCRIPTION: Implements the email authentication migration logic, including handling of email verification and password reset data\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prisma } from \"wasp/server\";\nimport { type ProviderName, type EmailProviderData } from \"wasp/server/auth\";\nimport { MigrateEmail } from \"wasp/server/api\";\n\nexport const migrateEmailHandler: MigrateEmail =\n  async (_req, res) => {\n    const result = await migrateEmailAuth();\n\n    res.status(200).json({ message: \"Migrated users to the new auth\", result });\n  };\n\nasync function migrateEmailAuth(): Promise<{\n  numUsersAlreadyMigrated: number;\n  numUsersNotUsingThisAuthMethod: number;\n  numUsersMigratedSuccessfully: number;\n}> {\n  const users = await prisma.user.findMany({\n    include: {\n      auth: true,\n    },\n  });\n\n  const result = {\n    numUsersAlreadyMigrated: 0,\n    numUsersNotUsingThisAuthMethod: 0,\n    numUsersMigratedSuccessfully: 0,\n  };\n\n  for (const user of users) {\n    if (user.auth) {\n      result.numUsersAlreadyMigrated++;\n      console.log(\"Skipping user (already migrated) with id:\", user.id);\n      continue;\n    }\n\n    if (!user.email || !user.password) {\n      result.numUsersNotUsingThisAuthMethod++;\n      console.log(\"Skipping user (not using email auth) with id:\", user.id);\n      continue;\n    }\n\n    const providerData: EmailProviderData = {\n      isEmailVerified: user.isEmailVerified,\n      emailVerificationSentAt:\n        user.emailVerificationSentAt?.toISOString() ?? null,\n      passwordResetSentAt: user.passwordResetSentAt?.toISOString() ?? null,\n      hashedPassword: user.password,\n    };\n    const providerName: ProviderName = \"email\";\n\n    await prisma.auth.create({\n      data: {\n        identities: {\n          create: {\n            providerName,\n            providerUserId: user.email,\n            providerData: JSON.stringify(providerData),\n          },\n        },\n        user: {\n          connect: {\n            id: user.id,\n          },\n        },\n      },\n    });\n    result.numUsersMigratedSuccessfully++;\n  }\n\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking API Calls in Wasp Tests\nDESCRIPTION: Demonstrates how to use mockApi to mock API calls in Wasp tests. This is useful for testing components that make direct API calls.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/testing.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpMethod } from \"wasp/client\";\n\nmockApi({ method: HttpMethod.Get, path: \"/foor/bar\" }, { res: \"hello\" });\n```\n\n----------------------------------------\n\nTITLE: Setting Up Authentication in Wasp TypeScript\nDESCRIPTION: Configures authentication for the Wasp app, including various auth methods and hooks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/general/wasp-ts-config.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.auth({\n  userEntity: 'User',\n  methods: {\n    discord: {\n      configFn: { import: 'config', from: '@src/auth/discord' },\n      userSignupFields: { import: 'userSignupFields', from: '@src/auth/discord' }\n    },\n    google: {\n      configFn: { import: 'config', from: '@src/auth/google' },\n      userSignupFields: { import: 'userSignupFields', from: '@src/auth/google' }\n    },\n    gitHub: {\n      configFn: { import: 'config', from: '@src/auth/github.js' },\n      userSignupFields: { import: 'userSignupFields', from: '@src/auth/github.js' }\n    },\n    // keycloak: {},\n    // email: {\n    //   userSignupFields: { import: 'userSignupFields', from: '@src/auth/email' },\n    //   fromField: {\n    //     name: 'ToDO App',\n    //     email: 'mihovil@ilakovac.com'\n    //   },\n    //   emailVerification: {\n    //     getEmailContentFn: { import: 'getVerificationEmailContent', from: '@src/auth/email' },\n    //     clientRoute: 'EmailVerificationRoute',\n    //   },\n    //   passwordReset: {\n    //     getEmailContentFn: { import: 'getPasswordResetEmailContent', from: '@src/auth/email' },\n    //     clientRoute: 'PasswordResetRoute'\n    //   }\n    // },\n  },\n  onAuthFailedRedirectTo: '/login',\n  onAuthSucceededRedirectTo: '/profile',\n  onBeforeSignup: { import: 'onBeforeSignup', from: '@src/auth/hooks.js' },\n  onAfterSignup: { import: 'onAfterSignup', from: '@src/auth/hooks.js' },\n  onBeforeOAuthRedirect: { import: 'onBeforeOAuthRedirect', from: '@src/auth/hooks.js' },\n  onBeforeLogin: { import: 'onBeforeLogin', from: '@src/auth/hooks.js' },\n  onAfterLogin: { import: 'onAfterLogin', from: '@src/auth/hooks.js' }\n});\n```\n\n----------------------------------------\n\nTITLE: Building Wasp Web App with Environment Variables in Bash\nDESCRIPTION: Installs dependencies and builds the React app with the specified API URL. The REACT_APP_API_URL environment variable should be set to the URL of the previously deployed Wasp backend server.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/_building-the-web-client.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install && REACT_APP_API_URL=<url_to_wasp_backend> npm run build\n```\n\n----------------------------------------\n\nTITLE: Root Layout Component with Outlet in React (TypeScript, src/Root.tsx)\nDESCRIPTION: Implements a TypeScript React root component for app layout, including header, footer, and Outlet for rendering nested routes. Depends on 'react-router-dom' (for Outlet). Input and output types are inferred; commonly used as Wasp's rootComponent. No explicit props required.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/client-config.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Outlet } from 'react-router-dom'\n\nexport default function Root() {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      // highlight-next-line\n      <Outlet />\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Routes and Pages in Wasp\nDESCRIPTION: This snippet demonstrates how to define routes and pages for authentication in the main.wasp file. It includes routes for login, signup, password reset, and email verification.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/email.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { Signup } from \"@src/pages/auth.jsx\"\n}\n\nroute RequestPasswordResetRoute { path: \"/request-password-reset\", to: RequestPasswordResetPage }\npage RequestPasswordResetPage {\n  component: import { RequestPasswordReset } from \"@src/pages/auth.jsx\",\n}\n\nroute PasswordResetRoute { path: \"/password-reset\", to: PasswordResetPage }\npage PasswordResetPage {\n  component: import { PasswordReset } from \"@src/pages/auth.jsx\",\n}\n\nroute EmailVerificationRoute { path: \"/email-verification\", to: EmailVerificationPage }\npage EmailVerificationPage {\n  component: import { EmailVerification } from \"@src/pages/auth.jsx\",\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Auth Pages in React\nDESCRIPTION: This snippet shows the implementation of Login and Signup components using Wasp's Auth UI components and React Router.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/username-and-pass.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LoginForm, SignupForm } from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Don't have an account yet? <Link to=\"/signup\">go to signup</Link>.\n      </span>\n    </Layout>\n  )\n}\n\nexport function Signup() {\n  return (\n    <Layout>\n      <SignupForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </Layout>\n  )\n}\n\n// A layout component to center the content\nexport function Layout({ children }) {\n  return (\n    <div className=\"h-full w-full bg-white\">\n      <div className=\"flex min-h-[75vh] min-w-full items-center justify-center\">\n        <div className=\"h-full w-full max-w-sm bg-white p-5\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Prisma Schema\nDESCRIPTION: This code defines the User entity in the schema.prisma file, which is required for authentication. It includes an auto-incrementing id field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/discord.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  // Add your own fields below\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Client-side Auth Components in React\nDESCRIPTION: This snippet shows the implementation of client-side authentication components in React, including the Login component and a Layout component for centering content.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/keycloak.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }) {\n  return (\n    <div className=\"h-full w-full bg-white\">\n      <div className=\"flex min-h-[75vh] min-w-full items-center justify-center\">\n        <div className=\"h-full w-full max-w-sm bg-white p-5\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Signup Fields Import in Wasp\nDESCRIPTION: Shows how to configure Wasp to use custom server-side logic for additional signup fields. Within the `auth.methods` section of `main.wasp`, the `userSignupFields` property is set to import the necessary definitions from a specified JavaScript or TypeScript file (e.g., `@src/auth/signup`). This connects the frontend form fields to backend processing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_21\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napp crudTesting {\n  // ...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/signup\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n```\n```\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napp crudTesting {\n  // ...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/signup\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Login Precheck Hook in Wasp (JavaScript) - wasp\nDESCRIPTION: Demonstrates registering a custom 'onBeforeLogin' logic in main.wasp for a JavaScript-based Wasp project. Imports the relevant function from '@src/auth/hooks', enabling pre-login validation checks and logic before Wasp completes the login process.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  ...\n  auth: {\n    ...\n    onBeforeLogin: import { onBeforeLogin } from \"@src/auth/hooks\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Validation Schemas in JavaScript\nDESCRIPTION: Shows how to create validation schemas for both server and client environment variables using Zod in JavaScript. The example validates a required STRIPE_API_KEY for the server and provides a default value for REACT_APP_NAME on the client.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/env-vars.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as z from 'zod'\n\nimport { defineEnvValidationSchema } from 'wasp/env'\n\nexport const serverEnvValidationSchema = defineEnvValidationSchema(\n  z.object({\n    STRIPE_API_KEY: z.string({\n      required_error: 'STRIPE_API_KEY is required.',\n    }),\n  })\n)\n\nexport const clientEnvValidationSchema = defineEnvValidationSchema(\n  z.object({\n    REACT_APP_NAME: z.string().default('TODO App'),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Using Link Component with Optional Static Segment\nDESCRIPTION: Shows how to use the Link component with a route containing an optional static segment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/links.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n/* You can include ... */\n<Link to=\"/task/:id/details\" params={{ id: 1 }}>\n  Task 1\n</Link>\n\n/* ... or exclude the optional segment */\n<Link to=\"/task/:id\" params={{ id: 1 }}>\n  Task 1\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Customizing API-specific Middleware in Wasp and JavaScript\nDESCRIPTION: This example shows how to customize middleware for a specific API route in a Wasp application using JavaScript. It replaces the express.json middleware with express.raw for a webhook callback.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/middleware-config.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napi webhookCallback {\n  fn: import { webhookCallback } from \"@src/apis\",\n  middlewareConfigFn: import { webhookCallbackMiddlewareFn } from \"@src/apis\",\n  httpRoute: (POST, \"/webhook/callback\"),\n  auth: false\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express'\n\nexport const webhookCallback = (req, res, _context) => {\n  res.json({ msg: req.body.length })\n}\n\nexport const webhookCallbackMiddlewareFn = (middlewareConfig) => {\n  console.log('webhookCallbackMiddlewareFn: Swap express.json for express.raw')\n\n  middlewareConfig.delete('express.json')\n  middlewareConfig.set('express.raw', express.raw({ type: '*/*' }))\n\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User-Task Relation in Prisma Schema\nDESCRIPTION: Updates the Prisma schema to establish a one-to-many relationship between User and Task entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/07-auth.md#2025-04-22_snippet_11\n\nLANGUAGE: prisma\nCODE:\n```\n// ...\n\nmodel User {\n  id    Int    @id @default(autoincrement())\n  // highlight-next-line\n  tasks Task[]\n}\n\nmodel Task {\n  id          Int     @id @default(autoincrement())\n  description String\n  isDone      Boolean @default(false)\n  // highlight-next-line\n  user        User?   @relation(fields: [userId], references: [id])\n  // highlight-next-line\n  userId      Int?\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Auth Components in React\nDESCRIPTION: This snippet shows how to create the Login component and a Layout component in React. It uses the LoginForm component from Wasp's auth module and implements a basic layout structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/github.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }) {\n  return (\n    <div className=\"h-full w-full bg-white\">\n      <div className=\"flex min-h-[75vh] min-w-full items-center justify-center\">\n        <div className=\"h-full w-full max-w-sm bg-white p-5\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub User Emails Data Structure\nDESCRIPTION: This JSON snippet shows the structure of user email data received from GitHub's API. It includes email address, verification status, and visibility information.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/github.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"email\": \"octocat@github.com\",\n    \"verified\": true,\n    \"primary\": true,\n    \"visibility\": \"public\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Wasp Action in TypeScript without Context\nDESCRIPTION: Illustrates a minimal Wasp Action implementation in TypeScript that doesn't require input arguments or the Wasp context object. This simple arrow function directly returns an object containing a name and the current date. TypeScript can infer the return type `{ name: string; date: Date; }` without explicitly using Wasp-generated types or the `satisfies` keyword, suitable for actions without external dependencies or context needs.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst createFoo = () => {{ name: 'Foo', date: new Date() }}\n```\n```\n\n----------------------------------------\n\nTITLE: Deploying with Environment Variables\nDESCRIPTION: Example of deploying a Wasp app with additional environment variables for social authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/cli.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly launch my-wasp-app mia --server-secret GOOGLE_CLIENT_ID=<...> --server-secret GOOGLE_CLIENT_SECRET=<...>\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Methods and Redirects in Wasp (App Block Variant 2)\nDESCRIPTION: This snippet configures authentication within a Wasp app block, specifying the app title, user entity, enabled authentication methods, and the redirect route for failed authentication. It demonstrates Wasp's extended block syntax for configuration files. Intended for placement in main.wasp. Requires definition of a User entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_17\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  //...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {}, // use this or email, not both\n      email: {}, // use this or usernameAndPassword, not both\n      google: {},\n      gitHub: {},\n    },\n    onAuthFailedRedirectTo: \"/someRoute\",\n  }\n}\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Component in JavaScript\nDESCRIPTION: Example of a React root component implementation in JavaScript that sets up Redux provider and custom layout structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/client-config.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root({ children }) {\n  return (\n    <Provider store={store}>\n      <Layout>{children}</Layout>\n    </Provider>\n  )\n}\n\nfunction Layout({ children }) {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      {children}\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Default Wasp CRUD 'get' Operation Implementation (JavaScript)\nDESCRIPTION: This snippet shows the default JavaScript code generated by Wasp for the `get` CRUD operation. It uses the Prisma Client's `findUnique` method on the associated entity (`Task`) to retrieve a single record based on the `id` provided in the `args` object. The ID field corresponds to the one marked with `@id` in the Prisma schema.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// ...\n// Wasp uses the field marked with `@id` in Prisma schema as the id field.\nreturn Task.findUnique({ where: { id: args.id } })\n```\n```\n\n----------------------------------------\n\nTITLE: Wasp App Head Customization\nDESCRIPTION: Example demonstrating how to add multiple custom elements to the head section including stylesheets, scripts, and meta tags.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/customizing-app.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  head: [  // optional\n    \"<link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\\\" />\",\n    \"<script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js\\\"></script>\",\n    \"<meta name=\\\"viewport\\\" content=\\\"minimum-scale=1, initial-scale=1, width=device-width\\\" />\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Query in Wasp - Wasp Language\nDESCRIPTION: This snippet demonstrates how to declare a server-side query named 'getFoo' in Wasp's DSL. The 'fn' field specifies the JS/TS implementation via import, and 'entities' declares which model types it pertains to. This declaration enables Wasp to generate client/server APIs for the query, which must be accompanied by a corresponding exported implementation in the referenced module. Inputs and outputs are dictated by the implementation signature. The query function must be exported by the file specified.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/queries.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\nquery getFoo {\n    fn: import { getFoo } from \"@src/queries.js\"\n    entities: [Foo]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of MainPage React Component (TypeScript)\nDESCRIPTION: Shows the basic structure of the `MainPage` functional React component defined in `src/MainPage.tsx`. It includes imports for a logo image (`waspLogo.png`) and a CSS file (`Main.css`), demonstrating how to include local assets. The component itself is exported as `MainPage`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/03-pages.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/MainPage.tsx\"\nimport waspLogo from './waspLogo.png'\nimport './Main.css'\n\nexport const MainPage = () => {\n  // ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions in JavaScript\nDESCRIPTION: Shows how to implement an Action in JavaScript, defining a function that takes args and context parameters.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/actions.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport const createFoo = (args, context) => {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Model with Prisma - Prisma\nDESCRIPTION: This snippet defines a basic \"Task\" entity in a Prisma schema, specifying columns for id, description, and completion state. \"id\" is an auto-incrementing integer primary key, \"description\" is a string, and \"isDone\" is a boolean. Used as the data model upon which CRUD operations are later enabled in Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/crud.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Task {\n  id          Int     @id @default(autoincrement())\n  description String\n  isDone      Boolean\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a NewTaskForm Component in JavaScript\nDESCRIPTION: JavaScript implementation of a form component that calls the createTask Action when submitted.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/06-actions.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { \n  createTask, \n  getTasks, \n  useQuery \n} from 'wasp/client/operations'\n\n// ... MainPage, TaskView, TaskList ...\n\nconst NewTaskForm = () => {\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    try {\n      const target = event.target\n      const description = target.description.value\n      target.reset()\n      await createTask({ description })\n    } catch (err) {\n      window.alert('Error: ' + err.message)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"description\" type=\"text\" defaultValue=\"\" />\n      <input type=\"submit\" value=\"Create task\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Signup Fields in Auth (Wasp DSL, JavaScript interpretation)\nDESCRIPTION: Shows how to add userSignupFields to the usernameAndPassword auth method in Wasp DSL, including importing a handler from server code. This allows for saving and validating additional fields beyond the default username/email/password, linking backend logic to the UI. Prerequisites: userSignupFields export in src/auth/signup.js, user entity defined.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_21\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\\n  // ...\\n  auth: {\\n    userEntity: User,\\n    methods: {\\n      usernameAndPassword: {\\n        // highlight-next-line\\n        userSignupFields: import { userSignupFields } from \"@src/auth/signup\",\\n      },\\n    },\\n    onAuthFailedRedirectTo: \"/login\",\\n  },\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Submitting a Job in JavaScript\nDESCRIPTION: Example of submitting a job for execution in JavaScript, passing arguments to the job handler.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/jobs.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst submittedJob = await mySpecialJob.submit({ job: \"args\" })\n```\n\n----------------------------------------\n\nTITLE: Verifying Email using Wasp Client Auth (JavaScript)\nDESCRIPTION: This snippet demonstrates how to call the `verifyEmail` action from `wasp/client/auth` within a React component (likely a page handling email verification). It sends the verification token extracted from the URL to the server to complete the email verification process. This function is typically used in the client route specified in the `emailVerification.clientRoute` configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/email.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/pages/EmailVerificationPage.jsx\"\nimport { verifyEmail } from 'wasp/client/auth'\n...\nawait verifyEmail({ token });\n```\n```\n\n----------------------------------------\n\nTITLE: Using getEmail in Task Handler (JavaScript)\nDESCRIPTION: Shows implementation of getEmail helper in a task handler function to access the authenticated user's email from the context object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/_get-email.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getEmail } from 'wasp/auth'\n\nexport const createTask = async (args, context) => {\n  const email = getEmail(context.user)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Entities in Wasp Queries\nDESCRIPTION: Shows how to declare and use entities in Wasp queries using the wasp configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/queries.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\nquery getAllTasks {\n  fn: import { getAllTasks } from \"@src/queries.js\",\n  entities: [Task]\n}\n\nquery getFilteredTasks {\n  fn: import { getFilteredTasks } from \"@src/queries.js\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User and Task Entities in Prisma Schema\nDESCRIPTION: This code defines the User and Task entities in the Prisma schema, establishing a relationship between users and their tasks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int    @id @default(autoincrement())\n  tasks Task[]\n}\n\nmodel Task {\n  id          Int     @id @default(autoincrement())\n  description String\n  isDone      Boolean\n  userId      Int\n  user        User    @relation(fields: [userId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Root Component with Redux Provider (JavaScript, src/Root.jsx)\nDESCRIPTION: Defines a root layout component for use in Wasp, wrapping the rendered Outlet with react-redux Provider, thus providing Redux store context to the whole app. Inputs: none directly; expects 'store' and 'Provider' dependencies. Output: renders Outlet inside Provider. Used for integrating Redux global state management.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/client-config.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Outlet } from 'react-router-dom'\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root() {\n  return (\n    <Provider store={store}>\n      <Outlet />\n    </Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Recurring Cron Job with PgBoss in Wasp - Wasp Syntax\nDESCRIPTION: This snippet defines a recurring cron job called \"newIdeasJob\" in the main.wasp file using Wasp's domain-specific syntax. The job leverages the PgBoss executor to schedule tasks and supports dependencies on the User, GeneratedIdea, Tweet, and TweetDraft entities. The 'perform' property imports the job worker, while 'schedule' specifies a cron pattern for execution every 30 minutes and sets PgBoss to retry failed jobs twice. This is a declarative configuration that requires the job worker function to be implemented and accessible as an ES module.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_31\n\nLANGUAGE: Wasp\nCODE:\n```\n//...\n\njob newIdeasJob {\n  executor: PgBoss,\n  perform: {\n    fn: import generateNewIdeasWorker from \"@server/worker/generateNewIdeasWorker.js\"\n  },\n  entities: [User, GeneratedIdea, Tweet, TweetDraft],\n  schedule: {\n    // run cron job every 30 minutes\n    cron: \"*/30 * * * *\",\n    executorOptions: {\n      pgBoss: {=json { \"retryLimit\": 2 } json=},\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Form Field Implementation with Validation\nDESCRIPTION: Full example showing form schema definition, form instance creation, and form control implementation with date picker and validation messaging.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-11-20-building-react-forms-with-ease-using-react-hook-form-and-zod.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Defining form schema\nconst formSchema = z.object({   \n    dateOfBirth: z.date().max(new Date(), {\n      message: 'Date of birth cannot be today, or in the future',\n    }),    \n});\n\n// Defining form  \nconst form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: defaultValues,\n});\n\n // Creating form control\n  <FormField\n  control={form.control}\n  name=\"dateOfBirth\"\n  render={({ field }) => (\n    <FormItem className=\"flex flex-col\">\n      <FormLabel>Date of birth</FormLabel>\n      <FormControl>\n        <DatePicker date={field.value} setDate={field.onChange} />\n      </FormControl>\n      <FormMessage />\n    </FormItem>\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Logo to Auth UI in TypeScript\nDESCRIPTION: Shows how to add a custom logo to the Auth UI by importing a logo image and passing it as a prop to the LoginForm component in TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\nimport Logo from './logo.png'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass in the path to your logo\n      logo={Logo}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Login and Signup Routes in Wasp\nDESCRIPTION: Declares routes and pages for login and signup in the Wasp file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/07-auth.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import Signup from \"@client/SignupPage.tsx\"\n}\n\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import Login from \"@client/LoginPage.tsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting a Wasp Job for Execution (TypeScript Context)\nDESCRIPTION: Shows the basic usage of the `.submit()` method on an imported job object (`mySpecialJob`) within a TypeScript file. This asynchronously submits the job for processing with the provided arguments (`{ job: \"args\" }`). Although shown in the TypeScript tab, the code itself is standard JavaScript compatible with TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/jobs.md#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"someAction.ts\"\nconst submittedJob = await mySpecialJob.submit({ job: \"args\" })\n```\n```\n\n----------------------------------------\n\nTITLE: Defining and Implementing a Custom Signup Action in Wasp (TypeScript)\nDESCRIPTION: Defines a Wasp action `customSignup` in `main.wasp` linked to a TypeScript implementation file (`src/auth/signup.ts`). The TypeScript code implements the custom sign-up logic with type safety using `CustomSignup` type from `wasp/server/operations`, including input/output types, email/password validation (`ensureValidEmail`, `ensurePasswordIsPresent`, `ensureValidPassword`), checking for existing users (`findAuthIdentity`), creating new users (`createUser`), hashing passwords (`sanitizeAndSerializeProviderData`), creating verification links (`createEmailVerificationLink`), and sending verification emails (`sendEmailVerificationEmail`) using Wasp server auth utilities. It includes error handling and type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\n// ...\n\naction customSignup {\n  fn: import { signup } from \"@src/auth/signup.js\", // Note: Original snippet points to .js here\n}\n```\n```\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"src/auth/signup.ts\"\nimport {\n  ensurePasswordIsPresent,\n  ensureValidPassword,\n  ensureValidEmail,\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  deserializeAndSanitizeProviderData,\n  findAuthIdentity,\n  createUser,\n  createEmailVerificationLink,\n  sendEmailVerificationEmail,\n  HttpError, // Assuming HttpError is imported or available\n} from 'wasp/server/auth'\nimport type { CustomSignup } from 'wasp/server/operations'\n\ntype CustomSignupInput = {\n  email: string\n  password: string\n}\ntype CustomSignupOutput = {\n  success: boolean\n  message: string\n}\n\nexport const signup: CustomSignup<CustomSignupInput, CustomSignupOutput> = async (args, _context) => {\n  ensureValidEmail(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('email', args.email)\n    const existingAuthIdentity = await findAuthIdentity(providerId)\n\n    if (existingAuthIdentity) {\n      const providerData = deserializeAndSanitizeProviderData<'email'>(existingAuthIdentity.providerData)\n      // Your custom code here\n    } else {\n      // sanitizeAndSerializeProviderData will hash the user's password\n      const newUserProviderData = await sanitizeAndSerializeProviderData<'email'>({\n          hashedPassword: args.password,\n          isEmailVerified: false,\n          emailVerificationSentAt: null,\n          passwordResetSentAt: null,\n      })\n      await createUser(\n        providerId,\n        newUserProviderData, // Corrected variable name from original snippet\n        // Any additional data you want to store on the User entity\n        {},\n      )\n\n      // Verification link links to a client route e.g. /email-verification\n      const verificationLink = await createEmailVerificationLink(args.email, '/email-verification');\n      try {\n          await sendEmailVerificationEmail(\n              args.email,\n              {\n                  from: {\n                    name: \"My App Postman\",\n                    email: \"hello@itsme.com\",\n                  },\n                  to: args.email,\n                  subject: \"Verify your email\",\n                  text: `Click the link below to verify your email: ${verificationLink}`,\n                  html: `\n                      <p>Click the link below to verify your email</p>\n                      <a href=\"${verificationLink}\">Verify email</a>\n                  `,\n              }\n          );\n      } catch (e: unknown) {\n          console.error(\"Failed to send email verification email:\", e);\n          throw new HttpError(500, \"Failed to send email verification email.\");\n      } \n    }\n  } catch (e) {\n    // Ensure the catch block returns the expected CustomSignupOutput type\n    if (e instanceof Error) {\n        return {\n          success: false,\n          message: e.message,\n        }\n    } else {\n        return {\n          success: false,\n          message: \"An unknown error occurred\",\n        }\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Global Middleware Implementation in TypeScript\nDESCRIPTION: TypeScript implementation of a global middleware configuration function with proper type definitions, extending the default CORS settings to include additional domains.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/middleware-config.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport cors from 'cors'\nimport { config, type MiddlewareConfigFn } from 'wasp/server'\n\nexport const serverMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {\n  // Example of adding an extra domains to CORS.\n  middlewareConfig.set('cors', cors({ origin: [config.frontendUrl, 'https://example1.com', 'https://example2.com'] }))\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring onBeforeOAuthRedirect Hook in Wasp\nDESCRIPTION: Implementation of the onBeforeOAuthRedirect hook for handling pre-OAuth redirect logic, with access to request parameters and unique request ID.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/auth-hooks.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  ...\n  auth: {\n    ...\n    onBeforeOAuthRedirect: import { onBeforeOAuthRedirect } from \"@src/auth/hooks\",\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const onBeforeOAuthRedirect = async ({ url, oauth, prisma, req }) => {\n  console.log('query params before oAuth redirect', req.query)\n\n  // Saving query params for later use in onAfterSignup or onAfterLogin hooks\n  const id = oauth.uniqueRequestId\n  someKindOfStore.set(id, req.query)\n\n  return { url }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OnBeforeOAuthRedirectHook } from 'wasp/server/auth'\n\nexport const onBeforeOAuthRedirect: OnBeforeOAuthRedirectHook = async ({\n  url,\n  oauth,\n  prisma,\n  req,\n}) => {\n  console.log('query params before oAuth redirect', req.query)\n\n  // Saving query params for later use in onAfterSignup or onAfterLogin hooks\n  const id = oauth.uniqueRequestId\n  someKindOfStore.set(id, req.query)\n\n  return { url }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak Auth in Wasp File\nDESCRIPTION: This snippet shows how to configure the auth object in the main.wasp file to enable Keycloak authentication. It specifies the User entity and enables the Keycloak auth method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/keycloak.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      keycloak: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Fields in Wasp Config\nDESCRIPTION: Wasp configuration file showing auth setup with custom signup fields\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  // ...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {\n        userSignupFields: import { userSignupFields } from \"@src/auth/signup\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing React Component with URL Parameter Access (JavaScript)\nDESCRIPTION: Provides the implementation for the `HelloPage` component in `src/HelloPage.jsx`. This functional React component accesses the URL parameter `name` (defined in the route `/hello/:name`) through `props.match.params.name`, following React Router conventions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/03-pages.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"src/HelloPage.jsx\"\nexport const HelloPage = (props) =>  {\n  return <div>Here's {props.match.params.name}!</div>\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Schema with Relations\nDESCRIPTION: Prisma schema defining User and Task entities with their relationship.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/crud.md#2025-04-22_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int    @id @default(autoincrement())\n  tasks Task[]\n}\n\nmodel Task {\n  id          Int     @id @default(autoincrement())\n  description String\n  isDone      Boolean\n  userId      Int\n  user        User    @relation(fields: [userId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating User-Specific Tasks with Authentication in JavaScript\nDESCRIPTION: Defines `createTask` and `updateTask` actions in `src/actions.js`, both requiring authentication. They check `context.user` and throw `HttpError(401)` if unauthenticated. `createTask` creates a task associated with the logged-in user. `updateTask` uses `updateMany`, filtering by task `id` and `user.id` to ensure users only modify their own tasks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/07-auth.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const createTask = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.create({\n    data: {\n      description: args.description,\n      user: { connect: { id: context.user.id } },\n    },\n  })\n}\n\nexport const updateTask = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.updateMany({\n    where: { id: args.id, user: { id: context.user.id } },\n    data: { isDone: args.isDone },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an API Handler in TypeScript\nDESCRIPTION: Example of implementing a typed API handler function in TypeScript that returns a JSON response with properly typed context parameter.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/apis.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FooBar } from \"wasp/server/api\"; // This type is generated by Wasp based on the `api` declaration above.\n\nexport const fooBar: FooBar = (req, res, context) => {\n  res.set(\"Access-Control-Allow-Origin\", \"*\"); // Example of modifying headers to override Wasp default CORS middleware.\n  res.json({ msg: `Hello, ${context.user ? \"registered user\" : \"stranger\"}!` });\n};\n```\n\n----------------------------------------\n\nTITLE: API with Entity Integration\nDESCRIPTION: Shows how to use Prisma entities within an API endpoint handler, accessing the database through the context object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/apis.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const fooBar = (req, res, context) => {\n  res.json({ count: await context.entities.Task.count() });\n};\n```\n\n----------------------------------------\n\nTITLE: Testing React Components with Mocked APIs in TypeScript\nDESCRIPTION: Demonstrates how to test a React component that uses Wasp's api utility in TypeScript, mocking the API responses and rendering the component in context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/testing.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type Task } from \"wasp/entities\";\nimport { api } from \"wasp/client/api\";\n\nconst Todo = (_props: {}) => {\n  const [tasks, setTasks] = useState<Task>([]);\n  useEffect(() => {\n    api\n      .get(\"/tasks\")\n      .then((res) => res.json() as Task[])\n      .then((tasks) => setTasks(tasks))\n      .catch((err) => window.alert(err));\n  });\n\n  return (\n    <ul>\n      {tasks &&\n        tasks.map((task) => (\n          <li key={task.id}>\n            <input type=\"checkbox\" value={task.isDone} />\n            {task.description}\n          </li>\n        ))}\n    </ul>\n  );\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { test, expect } from \"vitest\";\nimport { screen } from \"@testing-library/react\";\n\nimport { mockServer, renderInContext } from \"wasp/client/test\";\nimport Todo from \"./Todo\";\n\nconst { mockApi } = mockServer();\n\nconst mockTasks = [\n  {\n    id: 1,\n    description: \"test todo 1\",\n    isDone: true,\n    userId: 1,\n  },\n];\n\ntest(\"handles mock data\", async () => {\n  mockApi(\"/tasks\", mockTasks);\n\n  renderInContext(<Todo />);\n\n  await screen.findByText(\"test todo 1\");\n\n  expect(screen.getByRole(\"checkbox\")).toBeChecked();\n\n  screen.debug();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak OAuth in Wasp - WASP\nDESCRIPTION: This snippet illustrates configuring a Wasp application to use Keycloak authentication. It defines the app, references to @src/auth/keycloak.js for configuration and signup fields, and specifies the user entity structure. Requires Wasp version ^0.13.0, the User entity for auth, and the external functions from the auth directory. Inputs are external config functions; outputs are app and entity definitions for usage by the Wasp compiler.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/keycloak.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      keycloak: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/keycloak.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/keycloak.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\nentity User {=psl\n    id                        Int     @id @default(autoincrement())\n    username                  String  @unique\n    displayName               String\npsl=}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom userSignupFields Validator in Wasp Server (TypeScript)\nDESCRIPTION: This TypeScript snippet exports userSignupFields, leveraging defineUserSignupFields from wasp/server/auth for server-side validation. It enforces that the address field is a non-empty string of minimum length 5, throwing user-friendly errors on invalid input. Ensure that this file aligns with the import in main.wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_21\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Client in main.wasp - TypeScript (Wasp)\nDESCRIPTION: Defines the client configuration in Wasp using a TypeScript root component and setup function. Required files are '@src/Root.tsx' for the root React component and '@src/myClientSetupCode.ts' for the setup function. The configuration ensures the app boots up using these TypeScript modules.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/client-config.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.tsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket in Wasp Application - Wasp\nDESCRIPTION: Demonstrates how to define the 'webSocket' configuration in a Wasp app by specifying a handler function and the 'autoConnect' option. Requires an exported 'webSocketFn' in the '@src/webSocket' module, which supplies event handlers. The 'autoConnect' parameter (default true) determines if the client connects automatically; key inputs include the handler import and optional connection behavior. Outputs a WebSocket-enabled app configuration, with support for both JavaScript and TypeScript backends.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/web-sockets.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  webSocket: {\n    fn: import { webSocketFn } from \"@src/webSocket\",\n    autoConnect: true, // optional, default: true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Google Auth Config and User Signup Fields - JavaScript\nDESCRIPTION: Implements and exports userSignupFields, mapping Google profile data to local fields, and getConfig returning required OAuth scopes. Requires no additional dependencies, but expects data objects with 'profile' (as returned by Google). Inputs are profile data and static values; outputs are user fields and OAuth configuration. All functions are referenced within main.wasp and must be correctly exported.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/google.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nexport const userSignupFields = {\n  username: () => \"hardcoded-username\",\n  displayName: (data) => data.profile.name,\n}\n\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Wasp Actions with HttpError (JavaScript)\nDESCRIPTION: Demonstrates how to throw a custom `HttpError` from a Wasp Action implementation (JavaScript). This allows sending specific HTTP status codes, a custom error message, and optional JSON data back to the client, overriding the default behavior of sending a generic 500 error for security.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const createTask = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Login and Signup Routes in Wasp\nDESCRIPTION: Defines routes and pages for user authentication in the Wasp application, creating paths for signup and login pages with their respective React component imports.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/07-auth.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { SignupPage } from \"@src/SignupPage\"\n}\n\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { LoginPage } from \"@src/LoginPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Default Wasp CRUD 'update' Operation Implementation (TypeScript)\nDESCRIPTION: This snippet shows the default TypeScript code generated by Wasp for the `update` CRUD operation. It uses the Prisma Client's `update` method, specifying the record to update via `args.id` (based on Prisma's `@id`) and applying the updates from `args.data`. Like `create`, this default lacks input validation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// ...\n// Wasp uses the field marked with `@id` in Prisma schema as the id field.\nreturn Task.update({ where: { id: args.id }, data: args.data })\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query in Wasp - JavaScript\nDESCRIPTION: This JavaScript snippet is the server-side implementation of the 'getFoo' query for Wasp. Exported as a named export, it receives 'args' and 'context' objects, allowing for custom logic based on the query's arguments and execution context. There are no strict type requirements, but the exported name and signature must match what Wasp expects from the query declaration. Required dependencies may include database models and context utilities from the Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/queries.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getFoo = (args, context) => {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Default Wasp CRUD 'update' Operation Implementation (JavaScript)\nDESCRIPTION: This snippet displays the default JavaScript code generated by Wasp for the `update` CRUD operation. It employs the Prisma Client's `update` method, identifying the record to update using the `id` from `args` (based on the `@id` field in Prisma schema) and applying the changes provided in `args.data`. Similar to `create`, this default lacks input validation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// ...\n// Wasp uses the field marked with `@id` in Prisma schema as the id field.\nreturn Task.update({ where: { id: args.id }, data: args.data })\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering React Components in Tests with Wasp Helpers\nDESCRIPTION: Demonstrates how to use the renderInContext function provided by Wasp to render React components in tests. This helper wraps the component in necessary providers.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { renderInContext } from \"wasp/client/test\";\n\nrenderInContext(<MainPage />);\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Component with Common Layout (TypeScript)\nDESCRIPTION: TypeScript implementation of a root component that defines a common layout for the application with header, footer, and content area using React Router's Outlet.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/client-config.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Outlet } from 'react-router-dom'\n\nexport default function Root() {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      // highlight-next-line\n      <Outlet />\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Query in Wasp\nDESCRIPTION: This snippet shows how to declare a 'getTasks' Query in the main.wasp file. It specifies the implementation location and the entities it interacts with.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/05-queries.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nquery getTasks {\n  fn: import { getTasks } from \"@src/queries\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth UI Components\nDESCRIPTION: This snippet demonstrates how to create the login page component using Wasp's Auth UI components. It includes a layout for centering the content and uses Tailwind CSS for styling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/github.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }) {\n  return (\n    <div className=\"h-full w-full bg-white\">\n      <div className=\"flex min-h-[75vh] min-w-full items-center justify-center\">\n        <div className=\"h-full w-full max-w-sm bg-white p-5\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Password Update Implementation\nDESCRIPTION: Implementation of a password update action that securely handles password hashing using Wasp's auth helper functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\naction updatePassword {\n  fn: import { updatePassword } from \"@src/auth\",\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  createProviderId,\n  findAuthIdentity,\n  updateAuthIdentityProviderData,\n  getProviderDataWithPassword,\n} from 'wasp/server/auth'\n\nexport const updatePassword = async (args, context) => {\n  const providerId = createProviderId('email', args.email)\n  const authIdentity = await findAuthIdentity(providerId)\n  if (!authIdentity) {\n    throw new HttpError(400, 'Unknown user')\n  }\n\n  const providerData = getProviderDataWithPassword(authIdentity.providerData)\n\n  // Updates the password and hashes it automatically.\n  await updateAuthIdentityProviderData(providerId, providerData, {\n    hashedPassword: args.password,\n  })\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  createProviderId,\n  findAuthIdentity,\n  updateAuthIdentityProviderData,\n  getProviderDataWithPassword,\n} from 'wasp/server/auth'\nimport { type UpdatePassword } from 'wasp/server/operations'\n\nexport const updatePassword: UpdatePassword<\n  { email: string; password: string },\n  void\n> = async (args, context) => {\n  const providerId = createProviderId('email', args.email)\n  const authIdentity = await findAuthIdentity(providerId)\n  if (!authIdentity) {\n    throw new HttpError(400, 'Unknown user')\n  }\n\n  const providerData = getProviderDataWithPassword<'email'>(\n    authIdentity.providerData\n  )\n\n  // Updates the password and hashes it automatically.\n  await updateAuthIdentityProviderData(providerId, providerData, {\n    hashedPassword: args.password,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Signup Fields in JavaScript\nDESCRIPTION: This snippet demonstrates how to define additional fields that should be set on the User entity during signup in JavaScript. It shows validation for a required address field and handling of an optional phone field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/_user-signup-fields-explainer.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: (data) => {\n    if (!data.address) {\n      throw new Error('Address is required')\n    }\n    return data.address\n  },\n  phone: (data) => data.phone,\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Seed Functions in WASP DSL - JavaScript\nDESCRIPTION: This snippet demonstrates how to register multiple seed functions in your WASP app's database configuration using the JavaScript variant. It imports a named seed function, 'devSeedSimple', from a JavaScript source file and includes it in the seeds array, allowing multiple functions to be available for seeding via CLI. Each imported function can be selected when running 'wasp db seed <seed-name>'. The source module '@src/dbSeeds.js' must export 'devSeedSimple'.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/backends.md#2025-04-22_snippet_7\n\nLANGUAGE: Wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    seeds: [\n      // ...\n      import { devSeedSimple } from \"@src/dbSeeds.js\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Elements to the HTML Head in Wasp\nDESCRIPTION: Illustrates how to add multiple custom HTML elements, such as stylesheet links, script tags, or meta tags, to the `<head>` section of the generated HTML document using the optional `head` array within the `app` declaration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/customizing-app.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"My App\",\n  head: [  // optional\n    \"<link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\\\" />\",\n    \"<script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js\\\"></script>\",\n    \"<meta name=\\\"viewport\\\" content=\\\"minimum-scale=1, initial-scale=1, width=device-width\\\" />\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Form in MainPage Component in TypeScript\nDESCRIPTION: Updates to the MainPage component in TypeScript to incorporate the NewTaskForm, with proper type imports for React components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/06-actions.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormEvent } from 'react'\nimport { Task } from 'wasp/entities'\nimport {\n  createTask,\n  getTasks,\n  useQuery\n} from 'wasp/client/operations'\n\nconst MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      <NewTaskForm />\n\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n\n// ... TaskList, TaskView, NewTaskForm ...\n```\n\n----------------------------------------\n\nTITLE: JavaScript GitHub Auth Implementation\nDESCRIPTION: JavaScript implementation of GitHub authentication configuration and user signup fields mapping.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/github.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const userSignupFields = {\n  username: () => 'hardcoded-username',\n  displayName: (data) => data.profile.name,\n}\n\nexport function getConfig() {\n  return {\n    scopes: ['user'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Auth UI Colors in TypeScript\nDESCRIPTION: Defines a TypeScript object `authAppearance` in `src/appearance.ts` with explicit typing using `CustomizationOptions['appearance']` from `wasp/client/auth`. It customizes `brand`, `brandAccent`, and `submitButtonText` colors for type-safe usage with Wasp Auth UI components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/ui.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/appearance.ts\"\nimport type { CustomizationOptions } from 'wasp/client/auth'\n\nexport const authAppearance: CustomizationOptions['appearance'] = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Finding User Identities in React Components with TypeScript\nDESCRIPTION: TypeScript version of the findUserIdentity usage in a React component, with proper type definitions for the user object and authentication handlers.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/entities.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { findUserIdentity, AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const emailIdentity = findUserIdentity(user, 'email')\n  const googleIdentity = findUserIdentity(user, 'google')\n  if (emailIdentity) {\n    // ...\n  } else if (googleIdentity) {\n    // ...\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Setup Function in JavaScript\nDESCRIPTION: Basic async setup function implementation in JavaScript that runs before client initialization.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/client-config.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function mySetupFunction() {\n  // Run some code\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Job in Wasp\nDESCRIPTION: Example of job declaration in a Wasp file defining a scheduled task with PgBoss executor. It includes configuration for execution, scheduling, and entity access.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/jobs.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\njob mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@src/workers/bar\",\n    executorOptions: {\n      pgBoss: {=json { \"retryLimit\": 1 } json=}\n    }\n  },\n  schedule: {\n    cron: \"*/5 * * * *\",\n    args: {=json { \"foo\": \"bar\" } json=},\n    executorOptions: {\n      pgBoss: {=json { \"retryLimit\": 0 } json=}\n    }\n  },\n  entities: [Task],\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Email on Client-Side using Wasp Auth (JavaScript/TypeScript)\nDESCRIPTION: Demonstrates how to use the `verifyEmail` action from `wasp/client/auth` on a client-side route (e.g., `EmailVerificationPage`) to send the verification token received from the URL to the server for validating a user's email address. This action is typically called within an async function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/email.md#2025-04-22_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/pages/EmailVerificationPage.jsx\"\nimport { verifyEmail } from 'wasp/client/auth'\n...\nawait verifyEmail({ token });\n```\n```\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/pages/EmailVerificationPage.tsx\"\nimport { verifyEmail } from 'wasp/client/auth'\n...\nawait verifyEmail({ token });\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Signup Action in Wasp (TypeScript)\nDESCRIPTION: Displays how to configure a custom signup action in Wasp's configuration file, referencing a TypeScript signup function. This setup allows the backend application to invoke a strongly typed registration routine defined in a separate TypeScript file, manipulating the User entity on sign-up.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/entities.md#2025-04-22_snippet_14\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\naction customSignup {\n  fn: import { signup } from \"@src/auth/signup.js\",\n  entities: [User]\n}\n\n```\n\n----------------------------------------\n\nTITLE: SignupForm Customization with Extra Fields (JavaScript)\nDESCRIPTION: This JavaScript React component illustrates customizing the SignupForm's additionalFields with both object descriptors and a render function. Adds Address (object-based field with validation) and a Phone Number field (via render function) using Wasp auth UI helpers. Requires wasp/client/auth, react, and react-hook-form. Inputs: standard and extra signup data; outputs: extended signup form with validation and error handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  SignupForm,\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using getUsername in Tasks (TypeScript)\nDESCRIPTION: TypeScript implementation of getUsername helper in a task creation context with type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/_get-username.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getUsername } from 'wasp/auth'\n\nexport const createTask: CreateTask<...>  = async (args, context) => {\n  const username = getUsername(context.user)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onAfterSignup Hook (JavaScript)\nDESCRIPTION: Example implementation of onAfterSignup hook in JavaScript, demonstrating post-signup operations and OAuth token handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/auth-hooks.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const onAfterSignup = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  const count = await prisma.user.count()\n  console.log('number of users after', count)\n  console.log('user object', user)\n\n  // If this is an OAuth signup, you have access to the OAuth tokens and the uniqueRequestId\n  if (oauth) {\n    console.log('accessToken', oauth.tokens.accessToken)\n    console.log('uniqueRequestId', oauth.uniqueRequestId)\n\n    const id = oauth.uniqueRequestId\n    const data = someKindOfStore.get(id)\n    if (data) {\n      console.log('saved data for the ID', data)\n    }\n    someKindOfStore.delete(id)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Verification in Wasp\nDESCRIPTION: This Wasp configuration snippet sets up email verification by specifying the client route for the email verification page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/email.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\nemailVerification: {\n    clientRoute: EmailVerificationRoute,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Component in React\nDESCRIPTION: This snippet demonstrates how to implement a root component for a Wasp app. It includes setting up a provider and rendering a custom layout with the Outlet component from react-router-dom.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/client-config.md#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Outlet } from 'react-router-dom'\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root() {\n  return (\n    <Provider store={store}>\n      <Layout />\n    </Provider>\n  )\n}\n\nfunction Layout() {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      // highlight-next-line\n      <Outlet />\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Outlet } from 'react-router-dom'\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root() {\n  return (\n    <Provider store={store}>\n      <Layout />\n    </Provider>\n  )\n}\n\nfunction Layout() {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      // highlight-next-line\n      <Outlet />\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: API-Specific Middleware Implementation in TypeScript\nDESCRIPTION: Implementation of an API endpoint and its custom middleware function in TypeScript that replaces the JSON parser with a raw body parser for webhook processing, with proper type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/middleware-config.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { type WebhookCallback } from 'wasp/server/api'\nimport { type MiddlewareConfigFn } from 'wasp/server'\n\nexport const webhookCallback: WebhookCallback = (req, res, _context) => {\n  res.json({ msg: req.body.length })\n}\n\nexport const webhookCallbackMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {\n  console.log('webhookCallbackMiddlewareFn: Swap express.json for express.raw')\n\n  middlewareConfig.delete('express.json')\n  middlewareConfig.set('express.raw', express.raw({ type: '*/*' }))\n\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Logic (Node.js & Prisma, TypeScript)\nDESCRIPTION: This TypeScript snippet implements the getRecipes query referenced in Wasp configuration. It relies on Wasp's generated types and Prisma models to execute a type-safe, authenticated database lookup for a user's recipes. Inputs come via Wasp's runtime (user context); the function returns a list of Recipe objects. Dependencies include Wasp, Prisma, and Node.js runtime. Limitations: assumes prior registration in main.wasp and valid user authentication context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/introduction/introduction.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Wasp generates the types for you.\nimport { type GetRecipes } from \"wasp/server/operations\";\nimport { type Recipe } from \"wasp/entities\";\n\nexport const getRecipes: GetRecipes<{}, Recipe[]> = async (_args, context) => {\n  return context.entities.Recipe.findMany( // Prisma query\n    { where: { user: { id: context.user.id } } }\n  );\n};\n\nexport const addRecipe ...\n```\n\n----------------------------------------\n\nTITLE: Validating Fields Using Zod in TypeScript\nDESCRIPTION: Example of using the Zod validation library to validate the address field in TypeScript, providing detailed error messages based on validation rules.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\nimport * as z from 'zod'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: (data) => {\n    const AddressSchema = z\n      .string({\n        required_error: 'Address is required',\n        invalid_type_error: 'Address must be a string',\n      })\n      .min(10, 'Address must be at least 10 characters long')\n    const result = AddressSchema.safeParse(data.address)\n    if (result.success === false) {\n      throw new Error(result.error.issues[0].message)\n    }\n    return result.data\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using getEmail Function in React Component (TypeScript)\nDESCRIPTION: TypeScript version of the getEmail function usage in a React component. It displays the email of a task's creator, returning the email if the user signed up with the Email auth method, or null otherwise.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/entities.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getEmail } from 'wasp/auth'\n\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {getEmail(task.user)}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API-Specific Middleware Customization in TypeScript\nDESCRIPTION: This TypeScript code provides the implementation for an API handler `webhookCallback` (typed using `WebhookCallback` from Wasp) and its specific middleware configuration function `webhookCallbackMiddlewareFn` (typed with `MiddlewareConfigFn`). The function modifies the provided `middlewareConfig` map by removing the default JSON body parser ('express.json') and adding a raw body parser ('express.raw') using `express.raw()`. This customization applies only to the `webhookCallback` API route.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/middleware-config.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport express from 'express'\nimport { type WebhookCallback } from 'wasp/server/api'\nimport { type MiddlewareConfigFn } from 'wasp/server'\n\nexport const webhookCallback: WebhookCallback = (req, res, _context) => {\n  res.json({ msg: req.body.length })\n}\n\nexport const webhookCallbackMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {\n  console.log('webhookCallbackMiddlewareFn: Swap express.json for express.raw')\n\n  middlewareConfig.delete('express.json')\n  middlewareConfig.set('express.raw', express.raw({ type: '*/*' }))\n\n  return middlewareConfig\n}\n\n```\n\n----------------------------------------\n\nTITLE: JavaScript Database Seed Function Implementation\nDESCRIPTION: Example of a JavaScript seed function that creates a user with username/password authentication and a task. The function receives a Prisma client instance for database interaction.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/backends.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTask } from './actions.js'\nimport { sanitizeAndSerializeProviderData } from 'wasp/server/auth'\n\nexport const devSeedSimple = async (prisma) => {\n  const user = await createUser(prisma, {\n    username: 'RiuTheDog',\n    password: 'bark1234',\n  })\n\n  await createTask(\n    { description: 'Chase the cat' },\n    { user, entities: { Task: prisma.task } }\n  )\n}\n\nasync function createUser(prisma, data) {\n  const newUser = await prismaClient.user.create({\n    data: {\n      auth: {\n        create: {\n          identities: {\n            create: {\n              providerName: 'username',\n              providerUserId: data.username,\n              providerData: sanitizeAndSerializeProviderData({\n                password: data.password\n              }),\n            },\n          },\n        },\n      },\n    },\n  })\n\n  return newUser\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Provider in Root Component (TypeScript)\nDESCRIPTION: TypeScript implementation of a root component that sets up a Redux provider to make the store available throughout the application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/client-config.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Outlet } from 'react-router-dom'\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root() {\n  return (\n    <Provider store={store}>\n      <Outlet />\n    </Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a New Dependency with npm CLI - Bash\nDESCRIPTION: This Bash code snippet demonstrates how to add a new npm package (e.g., 'date-fns') as a dependency in a Wasp project by executing the install command. The command updates the 'dependencies' section of the project's package.json automatically. Prerequisite: npm must be installed and initialized in your project directory. Run the command in the project's root; the expected input is the package name, and it outputs the installation progress and updates package.json. No version argument installs the latest version by default.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/dependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install date-fns\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth in Wasp\nDESCRIPTION: Defines the app configuration in Wasp, including the GitHub OAuth method. It specifies the user entity, external auth entity, and import paths for config and user field functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/github.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      gitHub: {\n        configFn: import { getConfig } from \"@server/auth/github.js\",\n        getUserFieldsFn: import { getUserFields } from \"@server/auth/github.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\nentity User {=psl\n    id                        Int     @id @default(autoincrement())\n    username                  String  @unique\n    displayName               String\n    externalAuthAssociations  SocialLogin[]\npsl=}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Declaring Auth Routes and Pages in Wasp (Wasp, TypeScript Implementation)\nDESCRIPTION: Defines /login and /signup routes in the Wasp file specifically referencing TypeScript-based React page components. Functions the same as the JavaScript version, requiring TypeScript source components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/07-auth.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\\n\\nroute SignupRoute { path: \"/signup\", to: SignupPage }\\npage SignupPage {\\n  component: import { SignupPage } from \"@src/SignupPage\"\\n}\\n\\nroute LoginRoute { path: \"/login\", to: LoginPage }\\npage LoginPage {\\n  component: import { LoginPage } from \"@src/LoginPage\"\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Auth Routes and Pages in Wasp\nDESCRIPTION: This snippet shows how to define the routes and pages for login and signup in the main.wasp file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/username-and-pass.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n// 4. Define the routes\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { Signup } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SendGrid Email Provider\nDESCRIPTION: Configures the SendGrid email provider in a Wasp application. SendGrid is a third-party service for sending transactional emails.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/email/email.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: SendGrid,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Server Environment Validation in JavaScript\nDESCRIPTION: Example of defining server-side environment variable validation in JavaScript using Zod. Validates that STRIPE_API_KEY is a required string.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/env-vars.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as z from 'zod'\n\nimport { defineEnvValidationSchema } from 'wasp/env'\n\nexport const envValidationSchema = defineEnvValidationSchema(\n  z.object({\n    STRIPE_API_KEY: z.string({\n      required_error: 'STRIPE_API_KEY is required.',\n    }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Auth Logic in TypeScript\nDESCRIPTION: This TypeScript snippet defines two exported functions for type-safe Google authentication configuration within a Wasp app. `userSignupFields` uses `defineUserSignupFields` from Wasp to provide functions that map data received from Google (typed as `any` here, but could be more specific) to the `User` entity fields (`username`, `displayName`). `getConfig` returns an object specifying the required Google OAuth scopes ('profile', 'email').\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/google.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  username: () => \"hardcoded-username\",\n  displayName: (data: any) => data.profile.name,\n})\n\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API-Specific Middleware Configuration\nDESCRIPTION: Demonstrates how to customize middleware for a specific API endpoint by replacing the JSON parser with a raw body parser.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/middleware-config.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napi webhookCallback {\n  fn: import { webhookCallback } from \"@src/apis\",\n  middlewareConfigFn: import { webhookCallbackMiddlewareFn } from \"@src/apis\",\n  httpRoute: (POST, \"/webhook/callback\"),\n  auth: false\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { type WebhookCallback } from 'wasp/server/api'\nimport { type MiddlewareConfigFn } from 'wasp/server'\n\nexport const webhookCallback: WebhookCallback = (req, res, _context) => {\n  res.json({ msg: req.body.length })\n}\n\nexport const webhookCallbackMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {\n  console.log('webhookCallbackMiddlewareFn: Swap express.json for express.raw')\n\n  middlewareConfig.delete('express.json')\n  middlewareConfig.set('express.raw', express.raw({ type: '*/*' }))\n\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Schema in Prisma\nDESCRIPTION: Prisma schema definition for the User model with required fields for Keycloak integration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/keycloak.md#2025-04-22_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          Int    @id @default(autoincrement())\n  username    String @unique\n  displayName String\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Environment Variables in TypeScript\nDESCRIPTION: Shows how to import and use client environment variables in a TypeScript React component using the wasp/client env object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/env-vars.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from 'wasp/client'\n\nconsole.log(env.REACT_APP_SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Configuring React Hook Form with Zod\nDESCRIPTION: Setup of React Hook Form instance with Zod resolver integration for form validation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-11-20-building-react-forms-with-ease-using-react-hook-form-and-zod.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ntype FormData = z.infer<typeof formSchema>\nconst form = useForm<FormData>({\n  resolver: zodResolver(formSchema),\n  defaultValues: customer,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Auth in Wasp\nDESCRIPTION: Basic configuration for enabling Google authentication in the Wasp application file, including userEntity specification and auth method setup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/google.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Railway Static Client Dockerfile\nDESCRIPTION: Dockerfile configuration for setting up static hosting of the client application on Railway using gostatic server.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/manually.md#2025-04-22_snippet_7\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM pierrezemb/gostatic\nCMD [ \"-fallback\", \"index.html\" ]\nCOPY ./dist/ /srv/http/\n```\n\n----------------------------------------\n\nTITLE: Referencing Public Assets in Vite Project Structure\nDESCRIPTION: This snippet displays a project folder structure including a public directory, which is used to keep static assets that are not imported directly in source code or need to preserve exact filenames. Assets placed here are served at the root URL path without processing or hashing. No specific tool dependencies are required, but the assets should be manually referenced using root-absolute paths in source code. The input is the directory structure, and it illustrates how files like robots.txt and favicon.ico should be placed for static serving.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/static-assets.md#2025-04-22_snippet_2\n\nLANGUAGE: \nCODE:\n```\n.\n└── public\n    ├── favicon.ico\n    └── robots.txt\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Migration Page in TypeScript React\nDESCRIPTION: Creates a React component for the password migration page, including form handling and API interaction.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  FormItemGroup,\n  FormLabel,\n  FormInput,\n  FormError,\n} from \"wasp/client/auth\";\nimport { useForm } from \"react-hook-form\";\nimport { migratePassword } from \"wasp/client/operations\";\nimport { useState } from \"react\";\n\nexport function MigratePasswordPage() {\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  const form = useForm<{\n    username: string;\n    password: string;\n  }>();\n\n  const onSubmit = form.handleSubmit(async (data) => {\n    try {\n      const result = await migratePassword(data);\n      setSuccessMessage(result.message);\n    } catch (e: unknown) {\n      console.error(e);\n      if (e instanceof Error) {\n        setErrorMessage(e.message);\n      }\n    }\n  });\n\n  return (\n    <div style={{\n      maxWidth: \"400px\",\n      margin: \"auto\",\n    }}>\n      <h1>Migrate your password</h1>\n      <p>\n        If you have an account on the old version of the website, you can\n        migrate your password to the new version.\n      </p>\n      {successMessage && <div>{successMessage}</div>}\n      {errorMessage && <FormError>{errorMessage}</FormError>}\n      <form onSubmit={onSubmit}>\n        <FormItemGroup>\n          <FormLabel>Username</FormLabel>\n          <FormInput\n            {...form.register(\"username\", {\n              required: \"Username is required\",\n            })}\n          />\n          <FormError>{form.formState.errors.username?.message}</FormError>\n        </FormItemGroup>\n        <FormItemGroup>\n          <FormLabel>Password</FormLabel>\n          <FormInput\n            {...form.register(\"password\", {\n              required: \"Password is required\",\n            })}\n            type=\"password\"\n          />\n          <FormError>{form.formState.errors.password?.message}</FormError>\n        </FormItemGroup>\n        <button type=\"submit\">Migrate password</button>\n      </form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Session Entity Structure in Prisma Schema Language\nDESCRIPTION: Shows the structure of the Session entity, which is used to store user session information for maintaining login state.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/entities.md#2025-04-22_snippet_3\n\nLANGUAGE: psl\nCODE:\n```\nentity Session {=psl\n  id        String   @id @unique\n  expiresAt DateTime\n  userId    String\n  auth      Auth     @relation(references: [id], fields: [userId], onDelete: Cascade)\n\n  @@index([userId])\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Adding the NewTaskForm to the MainPage in TypeScript\nDESCRIPTION: TypeScript code that shows how to integrate the NewTaskForm component into the MainPage component with proper type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/06-actions.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FormEvent } from 'react'\nimport { Task } from 'wasp/entities'\nimport {\n  createTask,\n  getTasks,\n  useQuery\n} from 'wasp/client/operations'\n\nconst MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      <NewTaskForm />\n\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n\n// ... TaskList, TaskView, NewTaskForm ...\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Setting up required GitHub OAuth credentials in the environment variables file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/github.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGITHUB_CLIENT_ID=your-github-client-id\nGITHUB_CLIENT_SECRET=your-github-client-secret\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket in Wasp App Manifest - JavaScript - Wasp\nDESCRIPTION: This snippet demonstrates how to enable WebSocket support in a Wasp application's manifest file (todoApp.wasp) when using JavaScript. It defines a webSocket section inside the app configuration, specifying both the handler function (imported from '@src/webSocket') and an optional autoConnect boolean parameter. The 'fn' parameter is mandatory and provides the WebSocket event handlers, while 'autoConnect' defaults to true if not specified. The configuration expects a valid WebSocket handler implementation and is used during the application bootstrap process.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/web-sockets.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  webSocket: {\n    fn: import { webSocketFn } from \"@src/webSocket\",\n    autoConnect: true, // optional, default: true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Custom userSignupFields Validator in Wasp Server (JavaScript)\nDESCRIPTION: Defines and exports the userSignupFields object using Wasp's defineUserSignupFields function. This function provides async validation for a custom address field, ensuring it is a non-empty string of at least 5 characters. Throws errors if validation fails. Inputs: data object from signup. Output: validated address. Dependency: wasp/server/auth.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Calling Actions (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import and call Actions in TypeScript with automatic type inference. TypeScript automatically infers return values and type-checks the payloads.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTask, markTasAsDone } from 'wasp/client/operations'\n\n// TypeScript automatically infers the return values and type-checks\n// the payloads.\nconst newTask = await createTask({ description: 'Keep learning TypeScript' })\nawait markTasAsDone({ id: 1 })\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Environment Variables in TypeScript\nDESCRIPTION: Example of accessing environment variables in server-side TypeScript code. Shows how to access both Wasp-defined and user-defined variables in a type-safe manner.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/env-vars.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from 'wasp/server'\n\n// Wasp-defined\nconst serverUrl = env.WASP_SERVER_URL\n\n// User-defined\nconst stripeApiKey = env.STRIPE_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Action Type (TypeScript)\nDESCRIPTION: Shows how to import the type definition for a Wasp-generated action (CreateFoo) on the server in TypeScript. This allows explicit typing of action function parameters and return type, improving type safety in implementation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport { type CreateFoo } from 'wasp/server/operations'\n```\n\n----------------------------------------\n\nTITLE: Custom Login Implementation\nDESCRIPTION: Example of implementing a custom login form using Wasp's login action with error handling and navigation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/username-and-pass.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { login } from 'wasp/client/auth'\nimport { useState } from 'react'\nimport { useNavigate, Link } from 'react-router-dom'\n\nexport function LoginPage() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState<Error | null>(null)\n  const navigate = useNavigate()\n\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    try {\n      await login(username, password)\n      navigate('/')\n    } catch (error: unknown) {\n      setError(error as Error)\n    }\n  }\n\n  return <form onSubmit={handleSubmit}>{/* ... */}</form>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prisma Client in JavaScript\nDESCRIPTION: Shows how to directly interact with entities using Prisma Client in server-side JavaScript code. Creates a new task with description and completion status.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/entities.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { prisma } from 'wasp/server'\n\nprisma.task.create({\n    description: \"Read the Entities doc\",\n    isDone: true // almost :)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Email Verification Content Function (JavaScript)\nDESCRIPTION: This JavaScript snippet defines the `getVerificationEmailContent` function, which is responsible for generating the content of the email sent during the email verification process. It takes an object containing the `verificationLink` as input and returns an object with the email's `subject`, `text` body, and `html` body. This function should be placed in a file within the `src` directory (e.g., `src/email.js`) and referenced in the Wasp configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/email.md#2025-04-22_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/email.js\"\nexport const getVerificationEmailContent = ({ verificationLink }) => ({\n  subject: 'Verify your email',\n  text: `Click the link below to verify your email: ${verificationLink}`,\n  html: `\n        <p>Click the link below to verify your email</p>\n        <a href=\"${verificationLink}\">Verify email</a>\n    `,\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub OAuth Scopes Configuration Function (TypeScript)\nDESCRIPTION: This TypeScript snippet shows a basic implementation of the `getConfig` function, intended to be imported via `configFn` in `main.wasp`. It returns an object containing a `scopes` array to define GitHub OAuth permissions. This example requests no specific scopes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/github.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getConfig() {\n  return {\n    scopes: [],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Link Component in React JSX\nDESCRIPTION: Shows how to use the custom Link component from Wasp for type-safe routing in a React component. It demonstrates linking to a task page with a dynamic ID parameter.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/links.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'wasp/client/router'\n\nexport const TaskList = () => {\n  // ...\n\n  return (\n    <div>\n      {tasks.map((task) => (\n        <Link\n          key={task.id}\n          to=\"/task/:id\"\n          params={{ id: task.id }}>\n          {task.description}\n        </Link>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Second Page with URL Parameters in Wasp (TypeScript)\nDESCRIPTION: Demonstrates adding a new page and route definition to `main.wasp` for a TypeScript project. It defines `HelloRoute` with a path `/hello/:name` that includes a URL parameter, mapping it to `HelloPage`. `HelloPage` imports its component from `src/HelloPage.tsx`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/03-pages.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\nroute HelloRoute { path: \"/hello/:name\", to: HelloPage }\npage HelloPage {\n  component: import { HelloPage } from \"@src/HelloPage\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Task Entity in Prisma Schema\nDESCRIPTION: This snippet shows how to define a Task entity using Prisma schema. It specifies the structure of the Task model with fields for id, description, and completion status.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/crud.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Task {\n  id          Int     @id @default(autoincrement())\n  description String\n  isDone      Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Wasp\nDESCRIPTION: This snippet demonstrates how to configure username and password authentication in a Wasp application. It defines the app structure, authentication methods, and user entity using Wasp's configuration syntax and Prisma Schema Language.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-01-smol-ai-vs-wasp-ai.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// main.wasp file\n\napp RecipeApp {\n  title: \"My Recipes\",\n  wasp: { version: \"^0.11.0\" },\n  auth: {\n    methods: { usernameAndPassword: {} },\n    onAuthFailedRedirectTo: \"/login\",\n    userEntity: User\n  }\n}\n\nentity User {=psl  // Data models are defined using Prisma Schema Language.\n  id          Int        @id @default(autoincrement())\n  username    String     @unique\n  password    String\n  recipes     Recipe[]\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth UI Colors with TypeScript\nDESCRIPTION: TypeScript implementation of auth appearance configuration with proper type definitions from Wasp auth forms.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/ui.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CustomizationOptions } from '@wasp/auth/forms/types'\n\nexport const authAppearance: CustomizationOptions['appearance'] = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Login Page Component in React\nDESCRIPTION: Implements the Login page component using Wasp's LoginForm in React.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/07-auth.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\nimport { LoginForm } from '@wasp/auth/forms/Login'\n\nconst LoginPage = () => {\n  return (\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\n      <LoginForm />\n      <br />\n      <span>\n        I don't have an account yet (<Link to=\"/signup\">go to signup</Link>).\n      </span>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n----------------------------------------\n\nTITLE: Rendering Additional Fields in SignupForm (TypeScript)\nDESCRIPTION: This TypeScript version of the previous snippet shows how to add custom fields to the SignupForm component using a render function. It demonstrates accessing form data and conditionally rendering a greeting based on the username.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignupForm, FormItemGroup } from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={(form, state) => {\n        const username = form.watch('username')\n        return (\n          username && (\n            <FormItemGroup>\n              Hello there <strong>{username}</strong> 👋\n            </FormItemGroup>\n          )\n        )\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Exporting Shared Resources in Server Setup (TypeScript)\nDESCRIPTION: This TypeScript code defines a typed `mySetupFunction` using `ServerSetupFn` from `wasp/server`. It initializes a shared resource (`someResource`) asynchronously and starts a cron job during server startup. A getter function `getSomeResource` is exported to provide typed access to the resource from other modules like Operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/server-config.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/myServerSetupCode.ts\"\nimport { type ServerSetupFn } from 'wasp/server'\n\nlet someResource = undefined\n\nexport const mySetupFunction: ServerSetupFn = async () => {\n  // Let's pretend functions setUpSomeResource and startSomeCronJob\n  // are implemented below or imported from another file.\n  someResource = await setUpSomeResource()\n  startSomeCronJob()  \n}\n\nexport const getSomeResource = () => someResource\n```\n```\n\n----------------------------------------\n\nTITLE: Using mockServer, mockQuery, and mockApi Testing Helpers - JavaScript\nDESCRIPTION: Demonstrates basic use of mockServer to access mockQuery and mockApi utilities in test setup. These allow mocking of query and API responses in client tests. Should be called outside of individual test cases for setup. Typically used with Vitest and React Testing Library.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/testing.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nimport { mockServer } from \\\"wasp/client/test\\\";\\n\\nconst { mockQuery, mockApi } = mockServer();\n```\n\n----------------------------------------\n\nTITLE: Auth Entity Definition in Prisma Schema\nDESCRIPTION: Defines the internal Auth entity used by Wasp to connect the business logic user with login credentials. This entity is managed by Wasp and should not be modified directly by developers.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/entities.md#2025-04-22_snippet_16\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Auth {\n  id         String         @id @default(uuid())\n  userId     Int?           @unique\n  // Wasp injects this relation on the User entity as well\n  user       User?          @relation(fields: [userId], references: [id], onDelete: Cascade)\n  identities AuthIdentity[]\n  sessions   Session[]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Database in Prisma Schema\nDESCRIPTION: Basic Prisma schema configuration for using SQLite as the database provider in development.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/databases.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Configuration in Prisma Schema\nDESCRIPTION: PostgreSQL database configuration in the Prisma schema file using environment variables for connection.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/backends.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Signup Fields in main.wasp (JavaScript)\nDESCRIPTION: This Wasp configuration snippet shows how to connect a custom userSignupFields validation object from a JavaScript file (src/auth/signup.js) into the Wasp main.wasp configuration under the usernameAndPassword authentication method. Enables backend validation and saving of additional fields during signup. Requires definition of User entity and a userSignupFields export.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_18\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  // ...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/signup\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Client Setup Function - Logging Interval - TypeScript\nDESCRIPTION: Implements a TypeScript async function for client setup, typed with Promise<void>, to log the user's online time hourly. To be used as setupFn in Wasp. No external dependencies except standard TS. Input: none. Output: periodic logging.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/client-config.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nexport default async function mySetupFunction(): Promise<void> {\n  let count = 1\n  setInterval(\n    () => console.log(`You have been online for ${count++} hours.`),\n    1000 * 60 * 60\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Query in Wasp Configuration File\nDESCRIPTION: This snippet shows how to declare a query in the Wasp configuration file. It specifies the function to be used for the query and the entities involved, which is essential for setting up data fetching in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-03-08-building-a-full-stack-app-supabase-vs-wasp.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\napp phraseTutor {\n  ...\n}\n...\n\nquery fetchAllPhrases {\n  fn: import { getAllPhrases } from \"@server/queries.js\",\n  entities: [Phrase]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Form Component in TypeScript\nDESCRIPTION: Type-safe React form component for creating new tasks with proper event typing and error handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/06-actions.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst NewTaskForm = () => {\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    try {\n      const target = event.target as HTMLFormElement\n      const description = target.description.value\n      target.reset()\n      await createTask({ description })\n    } catch (err: any) {\n      window.alert('Error: ' + err.message)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"description\" type=\"text\" defaultValue=\"\" />\n      <input type=\"submit\" value=\"Create task\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Form\nDESCRIPTION: Setup for login page route and component implementation using Wasp's LoginForm component\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/ui.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { LoginPage } from \"@src/LoginPage.jsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function LoginPage() {\n  return <LoginForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Setup Function for Client Initialization (TypeScript, src/myClientSetupCode.ts)\nDESCRIPTION: Implements the Wasp client setup function in TypeScript, logging to the console every hour to indicate online time. Is explicitly typed as returning Promise<void>; uses setInterval and console. Used as main.wasp's setupFn to hook custom client logic. No inputs/outputs outside of side-effect (logging).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/client-config.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function mySetupFunction(): Promise<void> {\n  let count = 1\n  setInterval(\n    () => console.log(`You have been online for ${count++} hours.`),\n    1000 * 60 * 60\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering React Components in Tests with Wasp\nDESCRIPTION: Demonstrates how to use the renderInContext function provided by Wasp to render React components in tests. This function wraps the component in necessary providers.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { renderInContext } from \"wasp/client/test\";\n\nrenderInContext(<MainPage />);\n```\n\n----------------------------------------\n\nTITLE: Implementing updateTask Action in JavaScript\nDESCRIPTION: This code implements the 'updateTask' action on the server side in JavaScript. It updates a task's 'isDone' status in the database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/06-actions.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const updateTask = async ({ id, isDone }, context) => {\n  return context.entities.Task.update({\n    where: { id },\n    data: {\n      isDone: isDone,\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Data Models Using Prisma Schema Language (Wasp DSL)\nDESCRIPTION: This set of Wasp DSL snippets (main.wasp) declares User and Recipe entities using inline Prisma Schema Language. Comments indicate the schema placement, and fields define relationships and auto-incremented IDs. These models become part of the backend via Prisma ORM, and are required to support app operations and associations. Dependencies are the Wasp compiler and Prisma; input is entity definition code, output is generated Prisma schemas and ORM types.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/introduction/introduction.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\n...\n\nentity User {=psl  // Data models are defined using Prisma Schema Language.\n  id          Int @id @default(autoincrement())\n  recipes     Recipe[]\npsl=}\n\nentity Recipe {=psl\n  id          Int @id @default(autoincrement())\n  title       String\n  description String?\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub Auth Logic in JavaScript\nDESCRIPTION: This JavaScript code defines the `userSignupFields` object and the `getConfig` function, which are imported into the `main.wasp` file. `userSignupFields` maps data received from GitHub (in the `data` object) to the `User` model fields (`username`, `displayName`). `getConfig` returns an object specifying the required GitHub OAuth scopes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/github.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const userSignupFields = {\n  username: () => \"hardcoded-username\",\n  displayName: (data) => data.profile.name,\n};\n\nexport function getConfig() {\n  return {\n    scopes: ['user'],\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Cache Key for react-query in Wasp (JavaScript)\nDESCRIPTION: Accesses the query cache key for the getTasks query in a Wasp client using JavaScript. This enables developers to use react-query\\'s low-level useMutation API for custom cache handling and optimistic update scenarios. No external dependencies are required beyond Wasp and react-query; the key is exported as queryCacheKey from the imported operation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nimport { getTasks } from 'wasp/client/operations'\\n\\nconst queryKey = getTasks.queryCacheKey\n```\n\n----------------------------------------\n\nTITLE: Defining Client Environment Variables Validation in JavaScript\nDESCRIPTION: Creates a validation schema for client environment variables that requires REACT_APP_ANALYTICS_ID to be provided as a string.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/env-vars.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as z from 'zod'\n\nimport { defineEnvValidationSchema } from 'wasp/env'\n\nexport const envValidationSchema = defineEnvValidationSchema(\n  z.object({\n    REACT_APP_ANALYTICS_ID: z.string({\n      required_error: 'REACT_APP_ANALYTICS_ID is required.',\n    }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Entity Action Implementation\nDESCRIPTION: Shows how to implement Actions that work with Entities using Prisma API access through context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/actions.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreateTask, MarkTaskAsDone } from '@wasp/actions/types'\nimport { Task } from '@wasp/entities'\n\nexport const createTask: CreateTask<Pick<Task, 'description'>, Task> = async (\n  args,\n  context\n) => {\n  const newTask = await context.entities.Task.create({\n    data: {\n      description: args.description,\n      isDone: false,\n    },\n  })\n  return newTask\n}\n\nexport const markTaskAsDone: MarkTaskAsDone<Pick<Task, 'id'>, void> = async (\n  args,\n  context\n) => {\n  await context.entities.Task.update({\n    where: { id: args.id },\n    data: { isDone: true },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Base Path for Client Application (TypeScript)\nDESCRIPTION: Configures Vite in `vite.config.ts` using `defineConfig` to serve the client application from a non-root base path (e.g., `/my-app/`) by setting the `base` option. This requires the `vite` package and affects how assets are linked, useful for deploying the client under a URL subpath.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/custom-vite-config.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"vite.config.ts\"\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  base: '/my-app/',\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication in Wasp\nDESCRIPTION: This snippet shows how to enable email authentication in the Wasp configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/ui.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  //...\n  auth: {\n    methods: {\n      email: {},\n    },\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Routes in Wasp\nDESCRIPTION: This code defines the necessary authentication routes and pages in the main.wasp file, including the login route and page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/discord.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Auth UI Colors in JavaScript (JSX)\nDESCRIPTION: Demonstrates importing the custom `authAppearance` object and the `LoginForm` component from Wasp. It shows how to apply the custom theme by passing the `authAppearance` object to the `appearance` prop of the `LoginForm` component within a React functional component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/ui.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"src/LoginPage.jsx\"\nimport { LoginForm } from 'wasp/client/auth'\nimport { authAppearance } from './appearance'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass the appearance object to the form\n      appearance={authAppearance}\n    />\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing User Signup and GitHub OAuth Scopes (JavaScript) - JavaScript\nDESCRIPTION: Exports the functions required by Wasp's auth mechanism: 'userSignupFields' describes how to extract profile information from the GitHub OAuth response, and 'getConfig' specifies required GitHub OAuth scopes. Requires no external dependencies beyond standard JS and presence of the expected OAuth response structure. Input parameters are the OAuth-derived data objects; outputs are used by the Wasp framework. Place in 'src/auth/github.js'.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/github.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nexport const userSignupFields = {\n  username: () => \"hardcoded-username\",\n  displayName: (data) => data.profile.name,\n};\n\nexport function getConfig() {\n  return {\n    scopes: ['user'],\n  };\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing API Endpoint in JavaScript\nDESCRIPTION: Demonstrates the JavaScript implementation of a custom API endpoint with request, response, and context handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/apis.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const fooBar = (req, res, context) => {\n  res.set(\"Access-Control-Allow-Origin\", \"*\");\n  res.json({ msg: `Hello, ${context.user ? \"registered user\" : \"stranger\"}!` });\n};\n```\n\n----------------------------------------\n\nTITLE: Reading Client Environment Variable with Vite (JavaScript)\nDESCRIPTION: Demonstrates how to access a client environment variable prefixed with REACT_APP_ using Vite's import.meta.env object in JavaScript. Requires that the environment variable is properly prefixed and defined in a suitable location (e.g., .env.client or provided at build time). Outputs the value of REACT_APP_SOME_VAR_NAME to the console; only works for variables made available at build step and should not be used for secrets.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/env-vars.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(import.meta.env.REACT_APP_SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Using getUsername in React Component (TypeScript)\nDESCRIPTION: TypeScript implementation of getUsername helper in a React component with proper type definitions. Imports AuthUser type and applies proper typing to the user prop.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/_get-username.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getUsername, AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const username = getUsername(user)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Email Auth Configuration in Wasp\nDESCRIPTION: New auth configuration structure using userSignupFields for email authentication in Wasp 0.12.X.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        userSignupFields: import { fields } from \"@src/server/auth/signup.js\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Reset Route in Wasp\nDESCRIPTION: Configures the password reset route in Wasp to handle the password reset flow.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/email.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\npasswordReset: {\n    clientRoute: PasswordResetRoute,\n}\n```\n\n----------------------------------------\n\nTITLE: Auth Entity Structure in Prisma Schema Language\nDESCRIPTION: Shows the structure of the internal Auth entity used by Wasp. This entity connects the business logic user with login credentials.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/entities.md#2025-04-22_snippet_1\n\nLANGUAGE: psl\nCODE:\n```\nentity Auth {=psl\n  id         String         @id @default(uuid())\n  userId     Int?           @unique\n  // Wasp injects this relation on the User entity as well\n  user       User?          @relation(fields: [userId], references: [id], onDelete: Cascade) \n  identities AuthIdentity[]\n  sessions   Session[]\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Environment Variables in JavaScript\nDESCRIPTION: Example of accessing both Wasp-defined and user-defined environment variables in client-side JavaScript code using the env object from wasp/client.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/env-vars.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { env } from 'wasp/client'\n\n// Wasp-defined\nconst apiUrl = env.REACT_APP_API_URL\n\n// User-defined\nconst analyticsId = env.REACT_APP_ANALYTICS_ID\n```\n\n----------------------------------------\n\nTITLE: Django React Todo Component Implementation\nDESCRIPTION: React component implementation for a Todo list using axios for API calls to Django backend. Implements CRUD operations with state management using useState and useEffect hooks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-20-django-vs-wasp.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst TaskList = () => {\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState('');\n  const [editingTask, setEditingTask] = useState(null);\n\n  useEffect(() => {\n      fetchTasks();\n  }, []);\n\n  const fetchTasks = () => {\n    axios.get('http://127.0.0.1:8000/api/tasks/')\n      .then(response => {\n        setTasks(response.data);\n      })\n      .catch(error => {\n        console.error('There was an error fetching the tasks!', error);\n      });\n  };\n\n  const handleAddTask = () => {\n    if (newTask.trim()) {\n      axios.post('http://127.0.0.1:8000/api/tasks/', { title: newTask, completed: false })\n        .then(() => {\n          setNewTask('');\n          fetchTasks();\n        })\n        .catch(error => {\n          console.error('There was an error adding the task!', error);\n        });\n    }\n  };\n\n  const handleUpdateTask = (task) => {\n    axios.put(`http://127.0.0.1:8000/api/tasks/${task.id}/`, task)\n      .then(() => {\n        fetchTasks();\n        setEditingTask(null);\n      })\n      .catch(error => {\n        console.error('There was an error updating the task!', error);\n      });\n  };\n\n  const handleDeleteTask = (taskId) => {\n    axios.delete(`http://127.0.0.1:8000/api/tasks/${taskId}/`)\n      .then(() => {\n        fetchTasks();\n      })\n      .catch(error => {\n        console.error('There was an error deleting the task!', error);\n      });\n  };\n\n  const handleEditTask = (task) => {\n    setEditingTask(task);\n  };\n\n  const handleChange = (e) => {\n    setNewTask(e.target.value);\n  };\n\n  const handleEditChange = (e) => {\n    setEditingTask({ ...editingTask, title: e.target.value });\n  };\n\n  const handleEditCompleteToggle = () => {\n    setEditingTask({ ...editingTask, completed: !editingTask.completed });\n  };\n\n  return (\n    <div>\n      <h1>To-Do List</h1>\n      <input type=\"text\" value={newTask} onChange={handleChange} placeholder=\"Add new task\" />\n      <button onClick={handleAddTask}>Add Task</button>\n      <ul>\n        {tasks.map(task => (\n          <li key={task.id}>\n            {editingTask && editingTask.id === task.id ? (\n              <div>\n                <input type=\"text\" value={editingTask.title} onChange={handleEditChange} />\n                <button onClick={() => handleUpdateTask(editingTask)}>Save</button>\n                <button onClick={() => setEditingTask(null)}>Cancel</button>\n                <button onClick={handleEditCompleteToggle}>\n                  {editingTask.completed ? 'Mark Incomplete' : 'Mark Complete'}\n                </button>\n              </div>\n          ) : (\n            <div>\n              {task.title} - {task.completed ? 'Completed' : 'Incomplete'}\n              <button onClick={() => handleEditTask(task)}>Edit</button>\n              <button onClick={() => handleDeleteTask(task.id)}>Delete</button>\n            </div>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TaskList;\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Environment Variables in TypeScript\nDESCRIPTION: Shows how to access both Wasp-defined and user-defined server environment variables in server-side TypeScript code using the env object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/env-vars.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from 'wasp/server'\n\n// Wasp-defined\nconst serverUrl = env.WASP_SERVER_URL\n\n// User-defined\nconst stripeApiKey = env.STRIPE_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Setting Google OAuth Environment Variables\nDESCRIPTION: Environment variables required for Google OAuth configuration\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/google.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGOOGLE_CLIENT_ID=your-google-client-id\nGOOGLE_CLIENT_SECRET=your-google-client-secret\n```\n\n----------------------------------------\n\nTITLE: Root Component with Redux Provider (TypeScript, src/Root.tsx)\nDESCRIPTION: Implements a root component for Wasp in TypeScript, wrapping Outlet with Redux Provider to supply Redux store context application-wide. Expects an imported, typed store, and 'Provider' from react-redux. No props required, component is used as global root layout.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/client-config.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Outlet } from 'react-router-dom'\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root() {\n  return (\n    <Provider store={store}>\n      <Outlet />\n    </Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating AccountPage Component with InputFields\nDESCRIPTION: Updates the AccountPage component to include the InputFields component for managing favorite users. It also imports the updateAccount action and uses it in the InputFields component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nimport Button from './Button';\nimport { ChangeEvent, useEffect, useState } from 'react';\nimport logout from '@wasp/auth/logout';\nimport type { User } from '@wasp/entities';\nimport updateAccount from '@wasp/actions/updateAccount'\n\nconst AccountPage = ({ user }: { user: User }) => {\n  return (\n    <div className='flex flex-col justify-center items-center mt-12 w-full'>\n      <div className='flex flex-col items-center justify-center gap-4 border border-neutral-700 bg-neutral-100/40 rounded-xl p-1 sm:p-4 w-full'>\n        <div className='flex flex-row justify-end w-full px-4 pt-2'>\n          <Button onClick={logout}>Logout</Button>\n        </div>\n        <InputFields user={user} />\n      </div>\n    </div>\n  );\n};\n\nexport default AccountPage;\n\nfunction InputFields({ user }: { user: User }) {\n  // ... (InputFields component implementation)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query in TypeScript\nDESCRIPTION: Defines the server-side implementation of the getTasks query in TypeScript with proper type annotations, using the automatically generated types from Wasp for full-stack type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/05-queries.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from 'wasp/entities'\nimport { type GetTasks } from 'wasp/server/operations'\n\nexport const getTasks: GetTasks<void, Task[]> = async (args, context) => {\n  return context.entities.Task.findMany({\n    orderBy: { id: 'asc' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Signup Page Component in TypeScript\nDESCRIPTION: Implements the React component for the signup page in TypeScript using Wasp's SignupForm component with a link to the login page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/07-auth.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\nimport { SignupForm } from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\n      <SignupForm />\n      <br />\n      <span>\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Login Buttons in React (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import and use Google and GitHub sign-in buttons and URLs in a React component for a Wasp application. It shows both the pre-built button components and custom link implementations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  SignInButton as GoogleSignInButton,\n  signInUrl as googleSignInUrl,\n} from '@wasp/auth/helpers/Google'\nimport {\n  SignInButton as GitHubSignInButton,\n  signInUrl as gitHubSignInUrl,\n} from '@wasp/auth/helpers/GitHub'\n\nexport const LoginPage = () => {\n  return (\n    <>\n      <GoogleSignInButton />\n      <GitHubSignInButton />\n      {/* or */}\n      <a href={googleSignInUrl}>Sign in with Google</a>\n      <a href={gitHubSignInUrl}>Sign in with GitHub</a>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Signup Fields in TypeScript\nDESCRIPTION: This TypeScript version of the code demonstrates how to define additional user signup fields using the `defineUserSignupFields` function from Wasp. It includes the same validation for 'address' and assignment for 'phone' as the JavaScript version.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/_user-signup-fields-explainer.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: (data) => {\n    if (!data.address) {\n      throw new Error('Address is required')\n    }\n    return data.address\n  }\n  phone: (data) => data.phone,\n})\n```\n\n----------------------------------------\n\nTITLE: PostCSS Configuration for Tailwind\nDESCRIPTION: PostCSS configuration file setup with Tailwind and autoprefixer plugins.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/css-frameworks.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: React Client with WebSocket Integration\nDESCRIPTION: React component implementing the poll UI with WebSocket functionality using Wasp-provided hooks and type-safe socket connections.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-09-build-real-time-voting-app-websockets-react-typescript.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n// Wasp provides us with pre-configured hooks and types based on\n// our server code. No need to set it up ourselves!\nimport { type ServerToClientPayload, useSocket, useSocketListener } from 'wasp/client/webSocket';\nimport { useAuth } from 'wasp/client/auth';\nimport { useState, useMemo, useEffect } from 'react';\nimport { Button, Card } from 'flowbite-react';\nimport { getUsername } from 'wasp/auth';\n\nconst MainPage = () => {\n  // Wasp provides a bunch of pre-built hooks for us :)\n  const { data: user } = useAuth();\n  const [poll, setPoll] = useState<ServerToClientPayload<'updateState'> | null>(null);\n  const totalVotes = useMemo(() => {\n    return poll?.options.reduce((acc, option) => acc + option.votes.length, 0) ?? 0;\n  }, [poll]);\n\n  const { socket } = useSocket();\n\n  const username = user ? getUsername(user) : null;\n\n  useSocketListener('updateState', (newState) => {\n    setPoll(newState);\n  });\n\n  useEffect(() => {\n    socket.emit('askForStateUpdate');\n  }, []);\n\n  function handleVote(optionId: number) {\n    socket.emit('vote', optionId);\n  }\n\n  return (\n    <div className='w-full max-w-2xl mx-auto p-8'>\n      <h1 className='text-2xl font-bold'>{poll?.question ?? 'Loading...'}</h1>\n      {poll && <p className='leading-relaxed text-gray-500'>Cast your vote for one of the options.</p>}\n      {poll && (\n        <div className='mt-4 flex flex-col gap-4'>\n          {poll.options.map((option) => (\n            <Card key={option.id} className='relative transition-all duration-300 min-h-[130px]'>\n              <div className='z-10'>\n                <div className='mb-2'>\n                  <h2 className='text-xl font-semibold'>{option.text}</h2>\n                  <p className='text-gray-700'>{option.description}</p>\n                </div>\n                <div className='absolute bottom-5 right-5'>\n                  {username && !option.votes.includes(username) ? (\n                    <Button onClick={() => handleVote(option.id)}>Vote</Button>\n                  ) : (\n                    <Button disabled>Voted</Button>\n                  )}\n                  {!user}\n                </div>\n                {option.votes.length > 0 && (\n                  <div className='mt-2 flex gap-2 flex-wrap max-w-[75%]'>\n                    {option.votes.map((username, idx) => {\n                      return (\n                        <div\n                          key={username}\n                          className='py-1 px-3 bg-gray-100 rounded-lg flex items-center justify-center shadow text-sm'\n                        >\n                          <div className='w-2 h-2 bg-green-500 rounded-full mr-2'></div>\n                          <div className='text-gray-700'>{username}</div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n              </div>\n              <div className='absolute top-5 right-5 p-2 text-sm font-semibold bg-gray-100 rounded-lg z-10'>\n                {option.votes.length} / {totalVotes}\n              </div>\n              <div\n                className='absolute inset-0 bg-gradient-to-r from-yellow-400 to-orange-500 opacity-75 rounded-lg transition-all duration-300'\n                style={{\n                  width: `${totalVotes > 0 ? (option.votes.length / totalVotes) * 100 : 0}%`,\n                }}\n              ></div>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\nexport default MainPage;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Action Implementation\nDESCRIPTION: Example of implementing an Action function in JavaScript with args and context parameters.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nexport const createFoo = (args, context) => {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaned Up Wasp Configuration\nDESCRIPTION: This snippet shows the cleaned-up main.wasp file after removing unnecessary routes and pages, preparing for the Todo app implementation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/03-pages.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"Todo app\"\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  component: import Main from \"@client/MainPage.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: React Component with Actions in JavaScript\nDESCRIPTION: Example of implementing Actions within a React component using JavaScript, showing task management functionality.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/actions.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useQuery, getTask, markTaskAsDone } from 'wasp/client/operations'\n\nexport const TaskPage = ({ id }) => {\n  const { data: task } = useQuery(getTask, { id })\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>\n  }\n\n  const { description, isDone } = task\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n      {isDone || (\n        <button onClick={() => markTaskAsDone({ id })}>Mark as done.</button>\n      )}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Task Entity in Wasp using Prisma Schema Language\nDESCRIPTION: This snippet shows how to define a Task entity in a Wasp file using Prisma Schema Language (PSL). The entity has three fields: an auto-incrementing id, a description string, and a boolean isDone field with a default value of false.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/04-entities.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\nentity Task {=psl\n    id          Int     @id @default(autoincrement())\n    description String\n    isDone      Boolean @default(false)\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Defining Client Environment Variables in .env.client (Wasp Development)\nDESCRIPTION: Example content for a `.env.client` file used in Wasp development. It defines variables prefixed with `REACT_APP_` (e.g., `REACT_APP_SOME_VAR_NAME`) in `NAME=VALUE` format. These variables will be embedded into the client bundle during development. This file should not contain secrets and can be committed to version control.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/env-vars.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nREACT_APP_SOME_VAR_NAME=somevalue\n```\n\n----------------------------------------\n\nTITLE: Defining getEmbeddedNotes Query in Wasp\nDESCRIPTION: Defines a query named `getEmbeddedNotes` within the `main.wasp` file. This query is configured to use the server-side function `getEmbeddedNotes` located in `@server/ideas.js` for its implementation. It also declares that this query depends on (and potentially interacts with) the `GeneratedIdea` data entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_38\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nquery getEmbeddedNotes {\n  fn: import { getEmbeddedNotes } from \"@server/ideas.js\",\n  entities: [GeneratedIdea]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring User Entity for Authentication in Wasp File\nDESCRIPTION: Shows how to configure the user entity in a Wasp application through the 'main.wasp' configuration file. The 'userEntity' field links the application's business logic user (e.g., 'User') to Wasp's authentication system. Requires Wasp version configuration and a defined user model in Prisma. This snippet influences how authentication entities relate in the app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_16\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"My App\",\n  auth: {\n    // highlight-next-line\n    userEntity: User,\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Global Middleware in Wasp and JavaScript\nDESCRIPTION: This example shows how to customize global middleware in a Wasp application using JavaScript. It modifies the CORS configuration to include additional domains.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/middleware-config.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  server: {\n    setupFn: import setup from \"@src/serverSetup\",\n    middlewareConfigFn: import { serverMiddlewareFn } from \"@src/serverSetup\"\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport cors from 'cors'\nimport { config } from 'wasp/server'\n\nexport const serverMiddlewareFn = (middlewareConfig) => {\n  // Example of adding extra domains to CORS.\n  middlewareConfig.set('cors', cors({ origin: [config.frontendUrl, 'https://example1.com', 'https://example2.com'] }))\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tasks with User Authentication in TypeScript\nDESCRIPTION: Shows how to create a task with user authentication using the context.user object in TypeScript. It includes type definitions and checks for user authentication before creating a task.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Task } from 'wasp/entities'\nimport { type CreateTask } from 'wasp/server/operations'\nimport { HttpError } from 'wasp/server'\n\ntype CreateTaskPayload = Pick<Task, 'description'>\n\nexport const createTask: CreateTask<CreateTaskPayload, Task> = async (\n  args,\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(403)\n  }\n\n  const Task = context.entities.Task\n  return Task.create({\n    data: {\n      description: args.description,\n      user: {\n        connect: { id: context.user.id },\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeLogin Hook\nDESCRIPTION: Hook that runs before user login. Receives providerId, prisma, and req as input parameters. Return value is ignored by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nexport const onBeforeLogin = async ({ providerId, prisma, req }) => {\n  // Hook code goes here\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OnBeforeLoginHook } from 'wasp/server/auth'\n\nexport const onBeforeLogin: OnBeforeLoginHook = async ({\n  providerId,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Email in Wasp\nDESCRIPTION: The ensureValidEmail function checks if the provided email is valid according to Wasp's validation rules. It throws an error if the email is invalid.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/advanced/custom-auth-actions.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nensureValidEmail(args)\n```\n\n----------------------------------------\n\nTITLE: Declaring Job Configuration in Wasp\nDESCRIPTION: Example of declaring a job configuration in Wasp with PgBoss executor, including scheduling and entity access.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/jobs.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\njob mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@src/workers/bar\",\n    executorOptions: {\n      pgBoss: {=json { \"retryLimit\": 1 } json=}\n    }\n  },\n  schedule: {\n    cron: \"*/5 * * * *\",\n    args: {=json { \"foo\": \"bar\" } json=},\n    executorOptions: {\n      pgBoss: {=json { \"retryLimit\": 0 } json=}\n    }\n  },\n  entities: [Task],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Server Logic in JavaScript\nDESCRIPTION: This snippet demonstrates how to define the WebSocket server logic in JavaScript. It shows the implementation of the 'webSocketFn' function, which handles socket connections and defines event listeners for chat messages.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/web-sockets.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v4 as uuidv4 } from 'uuid'\nimport { getFirstProviderUserId } from 'wasp/auth'\n\nexport const webSocketFn = (io, context) => {\n  io.on('connection', (socket) => {\n    const username = getFirstProviderUserId(socket.data.user) ?? 'Unknown'\n    console.log('a user connected: ', username)\n\n    socket.on('chatMessage', async (msg) => {\n      console.log('message: ', msg)\n      io.emit('chatMessage', { id: uuidv4(), username, text: msg })\n      // You can also use your entities here:\n      // await context.entities.SomeEntity.create({ someField: msg })\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Username from GitHub Display Name\nDESCRIPTION: Demonstrates how to generate a username based on the GitHub display name using the generateAvailableUsername function. This can be used in the getUserFields function for custom username creation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/github.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { generateAvailableUsername } from '@wasp/core/auth.js'\n\nexport const getUserFields = async (_context, args) => {\n  const username = await generateAvailableUsername(\n    args.profile.displayName.split(' '),\n    { separator: '.' }\n  )\n  return { username }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GetUserFieldsFn } from '@wasp/types'\nimport { generateAvailableUsername } from '@wasp/core/auth.js'\n\nexport const getUserFields: GetUserFieldsFn = async (_context, args) => {\n  const username = await generateAvailableUsername(\n    args.profile.displayName.split(' '),\n    { separator: '.' }\n  )\n  return { username }\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting a Job for Execution - JavaScript\nDESCRIPTION: Performs asynchronous job submission in JavaScript by calling the submit method on a Job instance, passing argument object(s). Returns a job submission result or handle as a promise. Relies on the imported job from the Wasp server jobs module; job arguments must match the perform.fn definition. No executor-specific options passed.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/jobs.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst submittedJob = await mySpecialJob.submit({ job: \"args\" })\n```\n\n----------------------------------------\n\nTITLE: React Form Component for Task Creation (JavaScript)\nDESCRIPTION: Frontend form component that handles task creation by calling the createTask action when submitted.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/06-actions.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst NewTaskForm = () => {\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    try {\n      const target = event.target\n      const description = target.description.value\n      target.reset()\n      await createTask({ description })\n    } catch (err) {\n      window.alert('Error: ' + err.message)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"description\" type=\"text\" defaultValue=\"\" />\n      <input type=\"submit\" value=\"Create task\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Auth UI Customization Example\nDESCRIPTION: Comprehensive example combining custom appearance, logo, and layout configurations\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/ui.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CustomizationOptions } from 'wasp/client/auth'\n\nexport const appearance: CustomizationOptions['appearance'] = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nimport { authAppearance } from './appearance'\nimport todoLogo from './todoLogo.png'\n\nexport function LoginPage() {\n  return <LoginForm appearance={appearance} logo={todoLogo} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth UI Components\nDESCRIPTION: React component implementation for the authentication pages using Wasp's auth components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/discord.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"h-full w-full bg-white\">\n      <div className=\"flex min-h-[75vh] min-w-full items-center justify-center\">\n        <div className=\"h-full w-full max-w-sm bg-white p-5\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Worker Function in JavaScript\nDESCRIPTION: JavaScript implementation of a worker function that processes the job. The function logs a message and retrieves tasks from the database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/jobs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const foo = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding User Auth Identity in a React Page with TypeScript (TypeScript)\nDESCRIPTION: Illustrates using the typed `findUserIdentity` helper for authentication provider lookups inside a React component in TypeScript. It also demonstrates how to type the `user` prop with `AuthUser`. The function retrieves specific provider identities (like email or Google) and allows conditional code execution based on what is found.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/entities.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { findUserIdentity, AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const emailIdentity = findUserIdentity(user, 'email')\n  const googleIdentity = findUserIdentity(user, 'google')\n  if (emailIdentity) {\n    // ...\n  } else if (googleIdentity) {\n    // ...\n  }\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with useAction Hook in JavaScript\nDESCRIPTION: Example of using the useAction hook to implement optimistic updates for a markTaskAsDone action in a React component. The code shows how to configure the hook with proper query specifier and update function to immediately update the UI while the action processes in the background.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/actions.md#2025-04-22_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {\n  useQuery,\n  useAction,\n  getTask,\n  markTaskAsDone,\n} from 'wasp/client/operations'\n\nconst TaskPage = ({ id }) => {\n  const { data: task } = useQuery(getTask, { id })\n  // highlight-start\n  const markTaskAsDoneOptimistically = useAction(markTaskAsDone, {\n    optimisticUpdates: [\n      {\n        getQuerySpecifier: ({ id }) => [getTask, { id }],\n        updateQuery: (_payload, oldData) => ({ ...oldData, isDone: true }),\n      },\n    ],\n  })\n  // highlight-end\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>\n  }\n\n  const { description, isDone } = task\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n      {isDone || (\n        <button onClick={() => markTaskAsDoneOptimistically({ id })}>\n          Mark as done.\n        </button>\n      )}\n    </div>\n  )\n}\n\nexport default TaskPage\n```\n\n----------------------------------------\n\nTITLE: Updating User Password Securely in JavaScript (Wasp)\nDESCRIPTION: This JavaScript code implements the `updatePassword` Wasp action. It uses helper functions from `wasp/server/auth` to securely update a user's password. It first constructs a provider ID (`createProviderId`), finds the corresponding authentication identity (`findAuthIdentity`), and throws an error if not found. It then deserializes existing provider data and uses `updateAuthIdentityProviderData` to update the identity, crucially passing the new password (`args.password`) which the function automatically hashes before storage.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/auth.js\"\nimport {\n  createProviderId,\n  findAuthIdentity,\n  updateAuthIdentityProviderData,\n  deserializeAndSanitizeProviderData,\n} from 'wasp/server/auth';\nimport { HttpError } from 'wasp/server';\n\nexport const updatePassword = async (args, context) => {\n  const providerId = createProviderId('email', args.email)\n  const authIdentity = await findAuthIdentity(providerId)\n  if (!authIdentity) {\n      throw new HttpError(400, \"Unknown user\")\n  }\n  \n  const providerData = deserializeAndSanitizeProviderData(authIdentity.providerData)\n\n  // Updates the password and hashes it automatically.\n  await updateAuthIdentityProviderData(providerId, providerData, {\n      hashedPassword: args.password,\n  })\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring a Query in Wasp\nDESCRIPTION: Example of declaring a Query in Wasp using the 'query' declaration. This includes defining the function import and specifying related entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/actions.md#2025-04-22_snippet_11\n\nLANGUAGE: wasp\nCODE:\n```\nquery createFoo {\n    fn: import { createFoo } from \"@src/actions.js\"\n    entities: [Foo]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Password Reset Email Content Function (JavaScript/TypeScript)\nDESCRIPTION: Demonstrates defining a function `getPasswordResetEmailContent` in `src/email.js` or `src/email.ts` to customize the content of the password reset email. This function receives an object containing the `passwordResetLink` and should return an object with `subject`, `text`, and `html` properties for the email.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/email.md#2025-04-22_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/email.js\"\nexport const getPasswordResetEmailContent = ({ passwordResetLink }) => ({\n  subject: 'Password reset',\n  text: `Click the link below to reset your password: ${passwordResetLink}`,\n  html: `\n        <p>Click the link below to reset your password</p>\n        <a href=\"${passwordResetLink}\">Reset password</a>\n    `,\n})\n```\n```\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/email.ts\"\nimport { GetPasswordResetEmailContentFn } from 'wasp/server/auth'\n\nexport const getPasswordResetEmailContent: GetPasswordResetEmailContentFn = ({\n  passwordResetLink,\n}) => ({\n  subject: 'Password reset',\n  text: `Click the link below to reset your password: ${passwordResetLink}`,\n  html: `\n        <p>Click the link below to reset your password</p>\n        <a href=\"${passwordResetLink}\">Reset password</a>\n    `,\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Migrating Provider Data Access\nDESCRIPTION: Shows how to migrate from using providerData object to direct identity field access.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { findUserIdentity, AuthUser } from 'wasp/auth'\n\nfunction getProviderData(user: AuthUser) {\n  const emailIdentity = findUserIdentity(user, 'email')\n  // We needed this before check for proper type support\n  return emailIdentity && 'isEmailVerified' in emailIdentity.providerData\n    ? emailIdentity.providerData\n    : null\n}\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const providerData = getProviderData(user)\n  const isEmailVerified = providerData ? providerData.isEmailVerified : null\n  // ...\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  // The email object is properly typed, so we can access `isEmailVerified` directly\n  const isEmailVerified = user.identities.email?.isEmailVerified\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Password Reset Email Content Function (JavaScript)\nDESCRIPTION: This JavaScript snippet defines the `getPasswordResetEmailContent` function. It generates the content for the password reset email, taking an object with the `passwordResetLink` as input and returning an object containing the email's `subject`, `text`, and `html` content. This function customizes the email sent to users when they request a password reset.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/email.md#2025-04-22_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/email.js\"\nexport const getPasswordResetEmailContent = ({ passwordResetLink }) => ({\n  subject: 'Password reset',\n  text: `Click the link below to reset your password: ${passwordResetLink}`,\n  html: `\n        <p>Click the link below to reset your password</p>\n        <a href=\"${passwordResetLink}\">Reset password</a>\n    `,\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page Component in JavaScript\nDESCRIPTION: Creates the LoginPage React component that utilizes the Wasp-provided LoginForm. This component renders the login form and provides a link to the signup page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/07-auth.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\nimport { LoginForm } from 'wasp/client/auth'\n\nexport const LoginPage = () => {\n  return (\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\n      <LoginForm />\n      <br />\n      <span>\n        I don't have an account yet (<Link to=\"/signup\">go to signup</Link>).\n      </span>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type-Safe Link Component in React\nDESCRIPTION: Demonstrates how to use the Link component from wasp/client/router to create type-safe links in a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/links.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'wasp/client/router'\n\nexport const TaskList = () => {\n  // ...\n\n  return (\n    <div>\n      {tasks.map((task) => (\n        <Link\n          key={task.id}\n          to=\"/task/:id\"\n          params={{ id: task.id }}>\n          {task.description}\n        </Link>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Job Declaration in Wasp\nDESCRIPTION: Demonstrates how to declare a background job in a Wasp configuration file, specifying the executor, perform function, and related entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/jobs.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\njob mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@src/workers/bar\"\n  },\n  entities: [Task],\n}\n```\n\n----------------------------------------\n\nTITLE: Job Submission Return Type Interface\nDESCRIPTION: Interface defining the structure of the SubmittedJob return type from the submit() function. Contains core job tracking information including job ID, name and executor details.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/jobs.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SubmittedJob {\n  jobId: string;\n  jobName: string;\n  executorName: Symbol;\n  pgBoss?: {\n    details(): Promise<any>;\n    cancel(): Promise<void>;\n    resume(): Promise<void>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tasks with User Context in JavaScript\nDESCRIPTION: Example of an action that creates a task while checking user authentication context. Shows how to access user data and handle unauthorized access.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const createTask = async (task, context) => {\n  if (!context.user) {\n    throw new HttpError(403)\n  }\n\n  const Task = context.entities.Task\n  return Task.create({\n    data: {\n      description: task.description,\n      user: {\n        connect: { id: context.user.id },\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring and Customizing CRUD Operations - Wasp Language\nDESCRIPTION: Declares a `crud` resource in Wasp for the `Task` entity, enabling and configuring specific CRUD operations and assigning a custom implementation for the `create` operation. Dependencies include previously defined entities and optionally custom server code for overrides. Key parameters are the operations object and overrideFn for custom logic. Outputs are generated queries/actions for client and backend, with only enabled operations exposed.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/crud.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\ncrud Tasks {\\n  entity: Task,\\n  operations: {\\n    getAll: {\\n      isPublic: true, // by default only logged in users can perform operations\\n    },\\n    get: {},\\n    create: {\\n      overrideFn: import { createTask } from \"@src/tasks.js\",\\n    },\\n    update: {},\\n  },\\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Username from User Identity in TypeScript\nDESCRIPTION: This code extracts the username identity from a user object and accesses the username used for sign-up. It assumes the existence of a 'user' object with an 'identities' property containing a 'username' field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/_username-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst usernameIdentity = user.identities.username\n\n// Username that the user used to sign up, e.g. \"fluffyllama\"\nusernameIdentity.id\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Environment Variables in JavaScript (Wasp)\nDESCRIPTION: Shows how to read a server-side environment variable within Node.js (server) JavaScript code using `process.env`. Server variables can contain secrets as they are not exposed to the client and are accessed at runtime. This example logs the value of `SOME_VAR_NAME`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/env-vars.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(process.env.SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Accessing Google Identity Information in TypeScript\nDESCRIPTION: Extracts Google identity information from a user object and accesses the Google User ID. The ID is typically a 21-digit numeric string that uniquely identifies the Google user.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/_google-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst googleIdentity = user.identities.google\n\n// Google User ID for example \"123456789012345678901\"\ngoogleIdentity.id\n```\n\n----------------------------------------\n\nTITLE: Customizing SignupForm with Additional Fields (JavaScript)\nDESCRIPTION: Shows advanced customization of the SignupForm in JavaScript by mixing object-based extra fields and render functions within the additionalFields prop. Includes an address field with validation and a custom render function for a 'phoneNumber' input, handling react-hook-form registration, validation, loading state, and error display. Requires Wasp's client/auth components and react-hook-form integration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\\n  SignupForm,\\n  FormError,\\n  FormInput,\\n  FormItemGroup,\\n  FormLabel,\\n} from 'wasp/client/auth'\\n\\nexport const SignupPage = () => {\\n  return (\\n    <SignupForm\\n      additionalFields={[\\n        {\\n          name: 'address',\\n          label: 'Address',\\n          type: 'input',\\n          validations: {\\n            required: 'Address is required',\\n          },\\n        },\\n        (form, state) => {\\n          return (\\n            <FormItemGroup>\\n              <FormLabel>Phone Number</FormLabel>\\n              <FormInput\\n                {...form.register('phoneNumber', {\\n                  required: 'Phone number is required',\\n                })}\\n                disabled={state.isLoading}\\n              />\\n              {form.formState.errors.phoneNumber && (\\n                <FormError>\\n                  {form.formState.errors.phoneNumber.message}\\n                </FormError>\\n              )}\\n            </FormItemGroup>\\n          )\\n        },\\n      ]}\\n    />\\n  )\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Testing a Typed React Component with Mocked Wasp API Calls (TypeScript/TSX)\nDESCRIPTION: Provides a Vitest test case (`src/Todo.test.tsx`) for the typed `Todo` component using TypeScript. It uses `mockServer` to get `mockApi`, mocks the `GET /tasks` API call with specific typed data, renders the component using `renderInContext`, and utilizes `@testing-library/react` (`screen`) for assertions, showcasing typed component testing with mocked API calls.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/testing.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { test, expect } from \"vitest\";\nimport { screen } from \"@testing-library/react\";\n\nimport { mockServer, renderInContext } from \"wasp/client/test\";\nimport Todo from \"./Todo\";\n\nconst { mockApi } = mockServer();\n\nconst mockTasks = [\n  {\n    id: 1,\n    description: \"test todo 1\",\n    isDone: true,\n    userId: 1,\n  },\n];\n\ntest(\"handles mock data\", async () => {\n  mockApi(\"/tasks\", mockTasks);\n\n  renderInContext(<Todo />);\n\n  await screen.findByText(\"test todo 1\");\n\n  expect(screen.getByRole(\"checkbox\")).toBeChecked();\n\n  screen.debug();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Form with React and Wasp Auth (JavaScript)\nDESCRIPTION: Implements a signup form using React functional components and hooks, integrated with Wasp's authentication actions. Requires the 'wasp/client/auth' package for signup and login, React, and react-router-dom. The form collects username and password, invokes the signup action, automatically logs in the user, and navigates to the homepage upon successful signup. Inputs are managed via local state. Error handling is included.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/username-and-pass.md#2025-04-22_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nimport { signup, login } from 'wasp/client/auth'\n\nimport { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\n\nexport function Signup() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState(null)\n  const history = useHistory()\n\n  async function handleSubmit(event) {\n    event.preventDefault()\n    try {\n      await signup({\n        username,\n        password,\n      })\n      await login(username, password)\n      history.push(\"/\")\n    } catch (error) {\n      setError(error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* ... */}\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User Object in React Component\nDESCRIPTION: Illustrates how to access the user object in a React component when authRequired is set to true for a page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Button from './Button'\nimport { logout } from 'wasp/client/auth'\n\nconst AccountPage = ({ user }) => {\n  return (\n    <div>\n      <Button onClick={logout}>Logout</Button>\n      {JSON.stringify(user, null, 2)}\n    </div>\n  )\n}\n\nexport default AccountPage\n```\n\n----------------------------------------\n\nTITLE: Google Auth Configuration with User Signup Fields\nDESCRIPTION: Implementation of Google authentication with custom user signup fields in JavaScript and TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {\n        userSignupFields: import { userSignupFields } from \"@src/auth/google.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const userSignupFields = {\n  isSignupComplete: () => false,\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  isSignupComplete: () => false,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining AuthIdentity Entity in Prisma for Wasp Internal Authentication\nDESCRIPTION: Shows the schema for the 'AuthIdentity' model in Prisma. This model stores the user's credentials for various authentication providers (e.g., email, Google). Each identity is uniquely identified by provider name and provider user ID, and is related to an 'Auth' entity. Most fields are managed by Wasp internally.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_19\n\nLANGUAGE: prisma\nCODE:\n```\nmodel AuthIdentity {\n  providerName   String\n  providerUserId String\n  providerData   String @default(\"{}\")\n  authId         String\n  auth           Auth   @relation(fields: [authId], references: [id], onDelete: Cascade)\n\n  @@id([providerName, providerUserId])\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Reset in JavaScript\nDESCRIPTION: This snippet shows how to implement password reset functionality on the client-side using JavaScript in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/email.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { requestPasswordReset } from 'wasp/client/auth'\n...\nawait requestPasswordReset({ email });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { resetPassword } from 'wasp/client/auth'\n...\nawait resetPassword({ password, token })\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Cache Key in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to obtain the query cache key for a Wasp query, which can be used when working with react-query's low-level API for more complex optimistic update scenarios.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/actions.md#2025-04-22_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nimport { getTasks } from 'wasp/client/operations'\n\nconst queryKey = getTasks.queryCacheKey\n```\n\n----------------------------------------\n\nTITLE: Importing CRUD Operations in Client Code (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import CRUD operations in a TypeScript client component and use them with React Query hooks for type-safe data fetching and mutations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/crud.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Tasks } from '@wasp/crud/Tasks'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data } = Tasks.getAll.useQuery()\nconst { data } = Tasks.get.useQuery({ id: 1 })\nconst createAction = Tasks.create.useAction()\nconst updateAction = Tasks.update.useAction()\nconst deleteAction = Tasks.delete.useAction()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Wasp Job Worker Function (JavaScript)\nDESCRIPTION: Provides a JavaScript example implementation for a Wasp job's `perform.fn` located in `src/workers/bar.js`. The asynchronous function `foo` accepts job arguments (destructured as `name`) and a `context` object. It demonstrates logging, accessing declared entities (`context.entities.Task`) to fetch data, and returning a result object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/jobs.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/workers/bar.js\"\nexport const foo = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining User Signup Fields in TypeScript for Wasp\nDESCRIPTION: This snippet demonstrates how to define additional user signup fields in TypeScript for a Wasp project. It shows the implementation for 'address' as a required field and 'phone' as an optional field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/_user-signup-fields-explainer.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: (data) => {\n    if (!data.address) {\n      throw new Error('Address is required')\n    }\n    return data.address\n  }\n  phone: (data) => data.phone,\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Global Middleware in Wasp and TypeScript\nDESCRIPTION: This example demonstrates how to customize global middleware in a Wasp application using TypeScript. It modifies the CORS configuration to include additional domains.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/middleware-config.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  server: {\n    setupFn: import setup from \"@src/serverSetup\",\n    middlewareConfigFn: import { serverMiddlewareFn } from \"@src/serverSetup\"\n  },\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport cors from 'cors'\nimport { config, type MiddlewareConfigFn } from 'wasp/server'\n\nexport const serverMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {\n  // Example of adding an extra domains to CORS.\n  middlewareConfig.set('cors', cors({ origin: [config.frontendUrl, 'https://example1.com', 'https://example2.com'] }))\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional User Signup Fields in Wasp\nDESCRIPTION: This snippet demonstrates how to configure additional user signup fields in the Wasp file by importing a custom userSignupFields function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/username-and-pass.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {\n        userSignupFields: import { userSignupFields } from \"@src/auth/email.js\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  }\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket in Wasp File\nDESCRIPTION: Configuration code for enabling WebSockets in the Wasp application file, including server function import and auto-connect settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/web-sockets.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  webSocket: {\n    fn: import { webSocketFn } from \"@src/webSocket\",\n    autoConnect: true, // optional, default: true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Inferring Simple Return Type in TypeScript\nDESCRIPTION: Shows a minimal TypeScript query implementation where the return type is simple and inferred directly by TypeScript without explicit typing or the `satisfies` keyword. This is suitable when the query doesn't require access to the `context` object and the return type is straightforward.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/queries.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst getFoo = () => {{ name: 'Foo', date: new Date() }}\n```\n```\n\n----------------------------------------\n\nTITLE: API-Specific Middleware Configuration in Wasp - TypeScript\nDESCRIPTION: Example of configuring middleware for a specific API endpoint in a Wasp application using TypeScript. Shows how to define the middleware for a webhook callback route.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/middleware-config.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\napi webhookCallback {\n  fn: import { webhookCallback } from \"@src/apis\",\n  middlewareConfigFn: import { webhookCallbackMiddlewareFn } from \"@src/apis\",\n  httpRoute: (POST, \"/webhook/callback\"),\n  auth: false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Username Sign-up Action in Wasp\nDESCRIPTION: Defines a custom sign-up action for username/password authentication in the Wasp configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/advanced/custom-auth-actions.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\naction customSignup {\n  fn: import { signup } from \"@src/auth/signup.js\",\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Email Input in Authentication\nDESCRIPTION: Function that validates email format against predefined rules. Throws an error if the email is invalid according to the validation rules specified in the documentation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/advanced/custom-auth-actions.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nensureValidEmail(args)\n```\n\n----------------------------------------\n\nTITLE: Testing React Component with Mocked Queries in JavaScript\nDESCRIPTION: Test for the Todo component that uses mockQuery to provide test data for the component and verifies the rendered output using Testing Library.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/testing.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from \"vitest\";\nimport { screen } from \"@testing-library/react\";\n\nimport { mockServer, renderInContext } from \"wasp/client/test\";\nimport { getTasks } from \"wasp/client/operations\";\nimport Todo from \"./Todo\";\n\nconst { mockQuery } = mockServer();\n\nconst mockTasks = [\n  {\n    id: 1,\n    description: \"test todo 1\",\n    isDone: true,\n    userId: 1,\n  },\n];\n\ntest(\"handles mock data\", async () => {\n  mockQuery(getTasks, mockTasks);\n\n  renderInContext(<Todo />);\n\n  await screen.findByText(\"test todo 1\");\n\n  expect(screen.getByRole(\"checkbox\")).toBeChecked();\n\n  screen.debug();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Google OAuth Config in JavaScript\nDESCRIPTION: JavaScript implementation of Google OAuth configuration functions. Defines userSignupFields to map OAuth profile data to User entity fields and getConfig to provide OAuth client credentials.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/google.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport const userSignupFields = {\n  username: () => \"hardcoded-username\",\n  displayName: (data) => data.profile.displayName,\n}\n\nexport function getConfig() {\n  return {\n    clientID, // look up from env or elsewhere\n    clientSecret, // look up from env or elsewhere\n    scope: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Signup Fields in JavaScript for Wasp\nDESCRIPTION: This snippet shows how to define extra user signup fields in JavaScript for a Wasp project. It demonstrates setting 'address' as a required field and 'phone' as an optional field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/_user-signup-fields-explainer.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: (data) => {\n    if (!data.address) {\n      throw new Error('Address is required')\n    }\n    return data.address\n  }\n  phone: (data) => data.phone,\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Google Auth Implementation\nDESCRIPTION: TypeScript implementation of Google authentication configuration with type definitions\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/google.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  username: () => 'hardcoded-username',\n  displayName: (data: any) => data.profile.name,\n})\n\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Queries\nDESCRIPTION: Shows how to implement error handling in queries using HttpError.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/queries.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetAllTasks } from 'wasp/server/operations'\nimport { HttpError } from 'wasp/server'\n\nexport const getAllTasks: GetAllTasks = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User in Server-side Action\nDESCRIPTION: This snippet demonstrates how to access the user object in a server-side action and use it for authorization and data creation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport HttpError from '@wasp/core/HttpError.js'\n\nexport const createTask = async (task, context) => {\n  if (!context.user) {\n    throw new HttpError(403)\n  }\n\n  const Task = context.entities.Task\n  return Task.create({\n    data: {\n      description: task.description,\n      user: {\n        connect: { id: context.user.id },\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Task Entity Type in React Component\nDESCRIPTION: This example shows how to use the Task Entity type within a React component in TypeScript. It demonstrates type safety when working with Entities on the client side.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/entities.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from \"wasp/entities\"\n\nexport function ExamplePage() {\n  const task: Task = {\n    id: 123,\n    description: \"Some random task\",\n    isDone: false,\n  }\n  return <div>{task.description}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Form Component\nDESCRIPTION: Implementation of a signup page using Wasp's SignupForm component, including route configuration and component code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/ui.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { SignupPage } from \"@src/SignupPage.tsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignupForm } from 'wasp/client/auth'\n\nexport function SignupPage() {\n  return <SignupForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket in Wasp TypeScript\nDESCRIPTION: Sets up WebSocket functionality for the Wasp app, specifying the WebSocket function to use.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/general/wasp-ts-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.webSocket({\n  fn: { import: 'webSocketFn', from: '@src/webSocket' },\n  // autoConnect: false\n});\n```\n\n----------------------------------------\n\nTITLE: Email Verification Configuration in Wasp\nDESCRIPTION: Configuration for setting up email verification routes in Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/email.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\nemailVerification: {\n    clientRoute: EmailVerificationRoute,\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Base Path - Vite Config - TypeScript\nDESCRIPTION: This TypeScript snippet modifies the Vite client's base public path via the `base` property in a `vite.config.ts` file at the project root and uses `defineConfig` from 'vite'. It allows deploying the app under a custom URL prefix, useful for subfolder hosting. Merges with Wasp's defaults and requires no extra dependencies aside from Vite.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/custom-vite-config.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  base: '/my-app/',\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signup in JavaScript\nDESCRIPTION: JavaScript implementation of a custom signup function that creates a new user with username/password authentication. It demonstrates using helper functions like createProviderId and sanitizeAndSerializeProviderData to properly format authentication data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/entities.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  createUser,\n} from 'wasp/server/auth'\n\nexport const signup = async (args, { entities: { User } }) => {\n  try {\n    // Provider ID is a combination of the provider name and the provider user ID\n    // And it is used to uniquely identify the user in your app\n    const providerId = createProviderId('username', args.username)\n    // sanitizeAndSerializeProviderData hashes the password and returns a JSON string\n    const providerData = await sanitizeAndSerializeProviderData({\n      hashedPassword: args.password,\n    })\n\n    await createUser(\n      providerId,\n      providerData,\n      // Any additional data you want to store on the User entity\n      {}\n    )\n\n    // This is equivalent to:\n    // await User.create({\n    //   data: {\n    //     auth: {\n    //       create: {\n    //         identities: {\n    //             create: {\n    //                 providerName: 'username',\n    //                 providerUserId: args.username\n    //                 providerData,\n    //             },\n    //         },\n    //       }\n    //     },\n    //   }\n    // })\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Page Component (React, JavaScript)\nDESCRIPTION: JavaScript React component presenting a signup form, as provided by Wasp. Includes a link to the login page and shares style with the login component. Depends on 'react-router-dom' and 'wasp/client/auth', does not expect props, outputs sign-up form with navigation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/07-auth.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\\nimport { SignupForm } from 'wasp/client/auth'\\n\\nexport const SignupPage = () => {\\n  return (\\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\\n      <SignupForm />\\n      <br />\\n      <span>\\n        I already have an account (<Link to=\"/login\">go to login</Link>).\\n      </span>\\n    </div>\\n  )\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Queries in JavaScript\nDESCRIPTION: Demonstrates how to import and use a declared query in both client and server code using JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/queries.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n// Use it on the client\nimport { getFoo } from 'wasp/client/operations'\n\n// Use it on the server\nimport { getFoo } from 'wasp/server/operations'\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Sender in Wasp\nDESCRIPTION: This Wasp configuration snippet sets up the email sender using the Dummy provider, which logs emails to the console instead of sending them. This is useful for development and testing purposes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/email.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  // ...\n  // 7. Set up the email sender\n  emailSender: {\n    provider: Dummy,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Auth UI Colors in JavaScript\nDESCRIPTION: Exports a JavaScript object `authAppearance` defining custom color tokens (brand, brandAccent, submitButtonText) to override the default Wasp Auth UI theme. This object is intended to be imported and passed to Auth UI components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/ui.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/appearance.js\"\nexport const authAppearance = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing API Middleware Configuration in JavaScript\nDESCRIPTION: Shows the JavaScript implementation of middleware configuration function that can be used to enable CORS for API endpoints.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/apis.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const apiMiddleware = (config) => {\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Environment Variables in TypeScript\nDESCRIPTION: Example of accessing environment variables in client-side TypeScript code. Shows how to access both Wasp-defined and user-defined variables in a type-safe manner.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/env-vars.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from 'wasp/client'\n\n// Wasp-defined\nconst apiUrl = env.REACT_APP_API_URL\n\n// User-defined\nconst analyticsId = env.REACT_APP_ANALYTICS_ID\n```\n\n----------------------------------------\n\nTITLE: Custom getUserFields Implementation in JavaScript\nDESCRIPTION: JavaScript implementation of getUserFields function for customizing user creation during social authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getUserFields = async (_context, _args) => {\n  return {\n    isSignupComplete: false,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default main.wasp Configuration (TypeScript)\nDESCRIPTION: Displays the `main.wasp` configuration for a Wasp project using TypeScript. Even though the source file is `src/MainPage.tsx`, the `component` import statement `import { MainPage } from \"@src/MainPage\"` remains the same as the JavaScript version, as Wasp handles the file extension resolution. The configuration defines the app, version, title, root route, and page component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/02-project-structure.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"^0.15.0\" // Pins the version of Wasp to use.\n  },\n  title: \"TodoApp\" // Used as the browser tab title. Note that all strings in Wasp are double quoted!\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  // We specify that the React implementation of the page is exported from\n  // `src/MainPage.tsx`. This statement uses standard JS import syntax.\n  // Use `@src` to reference files inside the `src` folder.\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring onAfterLogin Hook in Wasp\nDESCRIPTION: Illustrates the configuration of the onAfterLogin hook in the main.wasp file and its implementation in JavaScript or TypeScript. This hook is called after the user logs in and can be used for actions like syncing user data with third-party services.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/auth-hooks.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  ...\n  auth: {\n    ...\n    onAfterLogin: import { onAfterLogin } from \"@src/auth/hooks\",\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const onAfterLogin = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  console.log('user object', user)\n\n  // If this is an OAuth signup, you have access to the OAuth tokens and the uniqueRequestId\n  if (oauth) {\n    console.log('accessToken', oauth.tokens.accessToken)\n    console.log('uniqueRequestId', oauth.uniqueRequestId)\n\n    const id = oauth.uniqueRequestId\n    const data = someKindOfStore.get(id)\n    if (data) {\n      console.log('saved data for the ID', data)\n    }\n    someKindOfStore.delete(id)\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OnAfterLoginHook } from 'wasp/server/auth'\n\nexport const onAfterLogin: OnAfterLoginHook = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  console.log('user object', user)\n\n  // If this is an OAuth signup, you have access to the OAuth tokens and the uniqueRequestId\n  if (oauth) {\n    console.log('accessToken', oauth.tokens.accessToken)\n    console.log('uniqueRequestId', oauth.uniqueRequestId)\n\n    const id = oauth.uniqueRequestId\n    const data = someKindOfStore.get(id)\n    if (data) {\n      console.log('saved data for the ID', data)\n    }\n    someKindOfStore.delete(id)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User and SocialLogin Entities in Wasp\nDESCRIPTION: This snippet defines the User and SocialLogin entities for GitHub authentication. The User entity includes a relationship to SocialLogin entities, while the SocialLogin entity stores provider details and maintains a unique constraint.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/github.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n// highlight-next-line\n// 4. Define the User entity\n// highlight-next-line\nentity User {=psl\n    id          Int     @id @default(autoincrement())\n    // ...\n    externalAuthAssociations  SocialLogin[]\npsl=}\n\n// highlight-next-line\n// 5. Define the SocialLogin entity\n// highlight-next-line\nentity SocialLogin {=psl\n  id          Int       @id @default(autoincrement())\n  provider    String\n  providerId  String\n  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId      Int\n  createdAt   DateTime  @default(now())\n  @@unique([provider, providerId, userId])\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Queries in TypeScript\nDESCRIPTION: Demonstrates TypeScript implementation of client-side queries with automatic type inference.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/queries.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAllTasks, getFilteredTasks } from 'wasp/client/operations'\n\n// TypeScript automatically infers the return values and type-checks\n// the payloads.\nconst allTasks = await getAllTasks()\nconst doneTasks = await getFilteredTasks({ isDone: true })\n```\n\n----------------------------------------\n\nTITLE: Replacing providerData Access in React Component\nDESCRIPTION: Shows how to replace complex provider data access patterns with the simplified identities API that provides proper TypeScript typing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { findUserIdentity, AuthUser } from 'wasp/auth'\n\nfunction getProviderData(user: AuthUser) {\n  const emailIdentity = findUserIdentity(user, 'email')\n  // We needed this before check for proper type support\n  return emailIdentity && 'isEmailVerified' in emailIdentity.providerData\n    ? emailIdentity.providerData\n    : null\n}\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const providerData = getProviderData(user)\n  const isEmailVerified = providerData ? providerData.isEmailVerified : null\n  // ...\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  // The email object is properly typed, so we can access `isEmailVerified` directly\n  const isEmailVerified = user.identities.email?.isEmailVerified\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp Client with RootComponent and SetupFn (JavaScript, main.wasp)\nDESCRIPTION: Declares the client field in the app definition to set a custom React root component and a setup function for initializing client-side logic. The rootComponent and setupFn are imported from project files. This config enables flexible client bootstrapping. Requires Wasp, React, and client modules in JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/client-config.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.jsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Todo Component with API Calls - JavaScript (JSX)\nDESCRIPTION: Defines a React component that fetches tasks from the server using Wasp's api client, handles results with useEffect, and displays tasks in a list. Requires 'wasp/client/api' and depends on React's useState and useEffect hooks. Callbacks handle both data transformation and error scenarios.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/testing.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { api } from \\\"wasp/client/api\\\";\\n\\nconst Todo = (_props) => {\\n  const [tasks, setTasks] = useState([]);\\n  useEffect(() => {\\n    api\\n      .get(\\\"/tasks\\\")\\n      .then((res) => res.json())\\n      .then((tasks) => setTasks(tasks))\\n      .catch((err) => window.alert(err));\\n  });\\n\\n  return (\\n    <ul>\\n      {tasks &&\\n        tasks.map((task) => (\\n          <li key={task.id}>\\n            <input type=\\\"checkbox\\\" value={task.isDone} />\\n            {task.description}\\n          </li>\\n        ))}\\n    </ul>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Queries (TypeScript)\nDESCRIPTION: TypeScript version of throwing a custom HttpError in a query implementation, demonstrating type annotations for the query function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/queries.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { type GetAllTasks } from 'wasp/server/operations'\nimport { HttpError } from 'wasp/server'\n\nexport const getAllTasks: GetAllTasks = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Setup Function in TypeScript\nDESCRIPTION: Demonstrates how to implement a client setup function in TypeScript. This function is executed on the client before everything else and can be used for custom setup tasks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/client-config.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function mySetupFunction(): Promise<void> {\n  // Run some code\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a createTask Action in Wasp\nDESCRIPTION: This snippet shows how to declare a createTask Action in the main.wasp file. The Action is associated with the createTask function imported from @src/actions and uses the Task entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/06-actions.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\naction createTask {\n  fn: import { createTask } from \"@src/actions\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Email Identity Properties in TypeScript\nDESCRIPTION: Shows how to access email identity properties from a user object including the email address, verification status, and timestamps for email verification and password reset operations. These properties are typically used in authentication and user management systems.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/entities/_email-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst emailIdentity = user.identities.email\n\n// Email address the user used to sign up, e.g. \"fluffyllama@app.com\".\nemailIdentity.id\n\n// `true` if the user has verified their email address.\nemailIdentity.isEmailVerified\n\n// Datetime when the email verification email was sent.\nemailIdentity.emailVerificationSentAt\n\n// Datetime when the last password reset email was sent.\nemailIdentity.passwordResetSentAt\n```\n\n----------------------------------------\n\nTITLE: Updating Root Component\nDESCRIPTION: Shows how to update the root component to use Outlet instead of children prop in React Router 6.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-14-to-0-15.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport function App({ children }: { children: React.ReactNode }) {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      {children}\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Outlet } from 'react-router-dom'\n\nexport function App() {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      <Outlet />\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Server Function in TypeScript\nDESCRIPTION: This snippet demonstrates the TypeScript version of the WebSocket server function. It includes type definitions for events and payloads, ensuring type safety between server and client. The function handles connections and chat messages similar to the JavaScript version.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/web-sockets.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { v4 as uuidv4 } from 'uuid'\nimport { getFirstProviderUserId } from 'wasp/auth'\nimport { type WebSocketDefinition, type WaspSocketData } from 'wasp/server/webSocket'\n\nexport const webSocketFn: WebSocketFn = (io, context) => {\n  io.on('connection', (socket) => {\n    const username = getFirstProviderUserId(socket.data.user) ?? 'Unknown'\n    console.log('a user connected: ', username)\n\n    socket.on('chatMessage', async (msg) => {\n      console.log('message: ', msg)\n      io.emit('chatMessage', { id: uuidv4(), username, text: msg })\n      // You can also use your entities here:\n      // await context.entities.SomeEntity.create({ someField: msg })\n    })\n  })\n}\n\ntype WebSocketFn = WebSocketDefinition<\n  ClientToServerEvents,\n  ServerToClientEvents,\n  InterServerEvents,\n  SocketData\n>\n\ninterface ServerToClientEvents {\n  chatMessage: (msg: { id: string, username: string, text: string }) => void;\n}\n\ninterface ClientToServerEvents {\n  chatMessage: (msg: string) => void;\n}\n\ninterface InterServerEvents {}\n\ninterface SocketData extends WaspSocketData {}\n```\n\n----------------------------------------\n\nTITLE: Action Implementation with Entity Usage\nDESCRIPTION: Demonstrates how to implement Actions that interact with entities using Prisma API.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/actions.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const createTask = async (args, context) => {\n  const newTask = await context.entities.Task.create({\n    data: {\n      description: args.description,\n      isDone: false,\n    },\n  })\n  return newTask\n}\n\nexport const markTaskAsDone = async (args, context) => {\n  await context.entities.Task.update({\n    where: { id: args.id },\n    data: { isDone: true },\n  })\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateTask, type MarkTaskAsDone } from 'wasp/server/operations'\nimport { type Task } from 'wasp/entities'\n\nexport const createTask: CreateTask<Pick<Task, 'description'>, Task> = async (\n  args,\n  context\n) => {\n  const newTask = await context.entities.Task.create({\n    data: {\n      description: args.description,\n      isDone: false,\n    },\n  })\n  return newTask\n}\n\nexport const markTaskAsDone: MarkTaskAsDone<Pick<Task, 'id'>, void> = async (\n  args,\n  context\n) => {\n  await context.entities.Task.update({\n    where: { id: args.id },\n    data: { isDone: true },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a NewTaskForm Component in JavaScript\nDESCRIPTION: This React component creates a form for adding new tasks. It uses the createTask Action to submit the new task to the server when the form is submitted.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/06-actions.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst NewTaskForm = () => {\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    try {\n      const target = event.target\n      const description = target.description.value\n      target.reset()\n      await createTask({ description })\n    } catch (err) {\n      window.alert('Error: ' + err.message)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"description\" type=\"text\" defaultValue=\"\" />\n      <input type=\"submit\" value=\"Create task\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Image URL in React Component (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import an image file as a URL and use it in a React component. The imported URL will be processed differently in development and production environments.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/static-assets.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport imgUrl from './img.png'\n\nfunction App() {\n  return <img src={imgUrl} alt=\"img\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Signup Flow Implementation\nDESCRIPTION: Shows how to implement client-side logic for handling incomplete user signups and redirections.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Navigate } from 'react-router-dom'\n\nexport function HomePage({ user }) {\n  if (user.isSignupComplete === false) {\n    return <Navigate to=\"/edit-user-details\" />\n  }\n\n  // ...\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Navigate } from 'react-router-dom'\nimport { AuthUser } from 'wasp/auth'\n\nexport function HomePage({ user }: { user: AuthUser }) {\n  if (user.isSignupComplete === false) {\n    return <Navigate to=\"/edit-user-details\" />\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Extensions in Wasp\nDESCRIPTION: Example of enabling PostgreSQL extensions in a Wasp application by configuring the app.db.prisma.dbExtensions field. This snippet demonstrates how to enable extensions like hstore, pg_trgm, and postgis with custom configurations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/backends.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    system: PostgreSQL,\n    prisma: {\n      clientPreviewFeatures: [\"postgresqlExtensions\"]\n      dbExtensions: [\n        { name: \"hstore\", schema: \"myHstoreSchema\" },\n        { name: \"pg_trgm\" },\n        { name: \"postgis\", version: \"2.1\" },\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Root Component in Wasp (JavaScript)\nDESCRIPTION: Wasp configuration for specifying a root component in JavaScript that will wrap the application's content.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/client-config.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.jsx\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Hooks in Wasp Application\nDESCRIPTION: Basic configuration for setting up authentication hooks in a Wasp application file. Shows how to import and configure all available auth hooks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/auth-hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  auth: {\n    userEntity: User,\n    methods: {\n      ...\n    },\n    onBeforeSignup: import { onBeforeSignup } from \"@src/auth/hooks\",\n    onAfterSignup: import { onAfterSignup } from \"@src/auth/hooks\",\n    onBeforeOAuthRedirect: import { onBeforeOAuthRedirect } from \"@src/auth/hooks\",\n    onBeforeLogin: import { onBeforeLogin } from \"@src/auth/hooks\",\n    onAfterLogin: import { onAfterLogin } from \"@src/auth/hooks\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Database Query in Wasp Configuration - Wasp - JavaScript\nDESCRIPTION: This Wasp configuration snippet registers a query named getTasks that fetches Task entities from the database, specifying the implementation location and the relevant entities for automatic cache updates. The query requires no explicit file extension as Wasp resolves it based on the given path. The declaration ensures that whenever Task entities change, the query's results are kept up to date on the client.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/05-queries.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\\n\\nquery getTasks {\\n  // Specifies where the implementation for the query function is.\\n  // The path `@src/queries` resolves to `src/queries.js`.\\n  // No need to specify an extension.\\n  fn: import { getTasks } from \"@src/queries\",\\n  // Tell Wasp that this query reads from the `Task` entity. Wasp will\\n  // automatically update the results of this query when tasks are modified.\\n  entities: [Task]\\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Server Setup Function Export (JavaScript)\nDESCRIPTION: Provides an export of a basic asynchronous server setup function that awaits some resource initialization. Intended to be hooked into the server lifecycle in the Wasp app config; returns void. Key inputs are initialization calls; output is any server-side side effect.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/server-config.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const mySetupFunction = async () => {\n  await setUpSomeResource()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Wasp\nDESCRIPTION: This snippet demonstrates how to define the User entity in the main.wasp file, which is required for email authentication. It includes the minimum required field (id) and allows for additional custom fields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/email.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    // Add your own fields below\n    // ...\npsl=}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Unit Test Example for Helper Function\nDESCRIPTION: Unit test for the areThereAnyTasks helper function using Vitest. Demonstrates the basic structure of a unit test in a Wasp project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/testing.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from \"vitest\";\n\nimport { areThereAnyTasks } from \"./helpers\";\n\ntest(\"areThereAnyTasks\", () => {\n  expect(areThereAnyTasks([])).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp Application with Keycloak Authentication\nDESCRIPTION: Main Wasp application configuration that sets up Keycloak authentication with user entity definition and redirection settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/keycloak.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      keycloak: {\n        configFn: import { getConfig } from \"@src/auth/keycloak.js\",\n        userSignupFields: import { userSignupFields } from \"@src/auth/keycloak.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: OAuth Token Refresh Implementation\nDESCRIPTION: Example showing how to implement OAuth token refresh functionality using the Google OAuth provider.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/auth-hooks.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { google } from 'wasp/server/auth'\n\nexport const onAfterLogin = async ({ oauth }) => {\n  if (oauth.provider === 'google' && oauth.tokens.refreshToken !== null) {\n    const newTokens = await google.oAuthClient.refreshAccessToken(\n      oauth.tokens.refreshToken\n    )\n    log('new tokens', newTokens)\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OnAfterLoginHook } from 'wasp/server/auth'\nimport { google } from 'wasp/server/auth'\n\nexport const onAfterLogin: OnAfterLoginHook = async ({ oauth }) => {\n  if (oauth.provider === 'google' && oauth.tokens.refreshToken !== null) {\n    const newTokens = await google.oAuthClient.refreshAccessToken(\n      oauth.tokens.refreshToken\n    )\n    log('new tokens', newTokens)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Root Component Import - TypeScript (main.wasp)\nDESCRIPTION: Configures the root React component for the Wasp app's client using a TypeScript file. This ensures type checking and richer type inference. Input is the file path to the Root component. The rootComponent field can be combined with setupFn for more advanced setups.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/client-config.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.tsx\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Login (Google/GitHub) Migration Logic in TypeScript\nDESCRIPTION: This TypeScript code implements the migration logic for users authenticated via Google or GitHub. The `migrateGoogleHandler` and `migrateGithubHandler` functions act as API handlers, calling the shared `createSocialLoginMigration` function with the respective provider name ('google' or 'github'). The `createSocialLoginMigration` function fetches users with their old external auth associations, checks for existing migrations or if the user utilizes the specified social login, finds the correct provider association, and creates a new `Auth` record with the corresponding identity using `prisma.auth.create`. It returns statistics about the migration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"src/migrateToNewAuth.ts\"\nimport { prisma } from \"wasp/server\";\nimport { MigrateGoogle, MigrateGithub } from \"wasp/server/api\";\n\nexport const migrateGoogleHandler: MigrateGoogle =\n  async (_req, res) => {\n    const result = await createSocialLoginMigration(\"google\");\n\n    res.status(200).json({ message: \"Migrated users to the new auth\", result });\n  };\n\nexport const migrateGithubHandler: MigrateGithub =\n  async (_req, res) => {\n    const result = await createSocialLoginMigration(\"github\");\n\n    res.status(200).json({ message: \"Migrated users to the new auth\", result });\n  };\n\nasync function createSocialLoginMigration(\n  providerName: \"google\" | \"github\"\n): Promise<{\n  numUsersAlreadyMigrated: number;\n  numUsersNotUsingThisAuthMethod: number;\n  numUsersMigratedSuccessfully: number;\n}> {\n  const users = await prisma.user.findMany({\n    include: {\n      auth: true,\n      externalAuthAssociations: true,\n    },\n  });\n\n  const result = {\n    numUsersAlreadyMigrated: 0,\n    numUsersNotUsingThisAuthMethod: 0,\n    numUsersMigratedSuccessfully: 0,\n  };\n\n  for (const user of users) {\n    if (user.auth) {\n      result.numUsersAlreadyMigrated++;\n      console.log(\"Skipping user (already migrated) with id:\", user.id);\n      continue;\n    }\n\n    const provider = user.externalAuthAssociations.find(\n      (provider) => provider.provider === providerName\n    );\n\n    if (!provider) {\n      result.numUsersNotUsingThisAuthMethod++;\n      console.log(`Skipping user (not using ${providerName} auth) with id:`, user.id);\n      continue;\n    }\n\n    await prisma.auth.create({\n      data: {\n        identities: {\n          create: {\n            providerName,\n            providerUserId: provider.providerId,\n            providerData: JSON.stringify({}),\n          },\n        },\n        user: {\n          connect: {\n            id: user.id,\n          },\n        },\n      },\n    });\n    result.numUsersMigratedSuccessfully++;\n  }\n\n  return result;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing React Home Page Component\nDESCRIPTION: React component implementation for the home page that displays recipes using Wasp's type-safe query hooks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/introduction/introduction.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQuery, getRecipes } from 'wasp/client/operations'\nimport { type User } from 'wasp/entities'\n\nexport function HomePage({ user }: { user: User }) {\n  const { data: recipes, isLoading } = useQuery(getRecipes)\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <div>\n      <h1>Recipes</h1>\n      <ul>\n        {recipes\n          ? recipes.map((recipe) => (\n              <li key={recipe.id}>\n                <div>{recipe.title}</div>\n                <div>{recipe.description}</div>\n              </li>\n            ))\n          : 'No recipes defined yet!'}\n      </ul>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Signup Page with Wasp Auth UI in React (JavaScript)\nDESCRIPTION: A React component implementing a signup page using Wasp's SignupForm component with centered styling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/crud.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SignupForm } from 'wasp/client/auth'\n\nexport function SignupPage() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        placeContent: 'center',\n      }}\n    >\n      <SignupForm />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Handler Function in JavaScript\nDESCRIPTION: JavaScript implementation of a job handler function that processes tasks and demonstrates context usage.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/jobs.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const foo = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Auth in Wasp Application\nDESCRIPTION: Main Wasp application configuration showing Google authentication setup with user entity and redirect settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/google.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {\n        configFn: import { getConfig } from \"@src/auth/google.js\",\n        userSignupFields: import { userSignupFields } from \"@src/auth/google.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Query Operations in TypeScript\nDESCRIPTION: This code implements the getRecipes query function in TypeScript. It uses the automatically generated types from Wasp and leverages Prisma to query the database for recipes belonging to the current user.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/introduction/introduction.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// Wasp generates the types for you.\nimport { type GetRecipes } from \"wasp/server/operations\";\nimport { type Recipe } from \"wasp/entities\";\n\nexport const getRecipes: GetRecipes<{}, Recipe[]> = async (_args, context) => {\n  return context.entities.Recipe.findMany( // Prisma query\n    { where: { user: { id: context.user.id } } }\n  );\n};\n\nexport const addRecipe ...\n```\n\n----------------------------------------\n\nTITLE: Declaring a Query in Wasp\nDESCRIPTION: This snippet shows how to declare a query named 'getFoo' in Wasp, specifying the implementation function and associated entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/queries.md#2025-04-22_snippet_16\n\nLANGUAGE: wasp\nCODE:\n```\nquery getFoo {\n    fn: import { getFoo } from \"@src/queries.js\"\n    entities: [Foo]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Migration Action Logic in Node.js/JavaScript\nDESCRIPTION: Implements the server-side Wasp action `migratePassword` using JavaScript. It receives the `username` and `password` from the client. It uses Wasp server auth utilities (`createProviderId`, `findAuthIdentity`, `deserializeAndSanitizeProviderData`, `updateAuthIdentityProviderData`) and the `secure-password` library. The function first finds the user's `AuthIdentity`. It then verifies the submitted `password` against the old hash stored in `providerData` using `SecurePassword.verify`. If verification succeeds, it calls `updateAuthIdentityProviderData`, passing the raw password, which Wasp then hashes using the *new* algorithm before updating the database. Throws `HttpError(400)` on failure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n```js title=\"src/auth.js\"\nimport SecurePassword from \"secure-password\";\nimport { HttpError } from \"wasp/server\";\nimport {\n  createProviderId,\n  deserializeAndSanitizeProviderData,\n  findAuthIdentity,\n  updateAuthIdentityProviderData,\n} from \"wasp/server/auth\";\n\nexport const migratePassword = async ({ password, username }, _context) => {\n  const providerId = createProviderId(\"username\", username);\n  const authIdentity = await findAuthIdentity(providerId);\n\n  if (!authIdentity) {\n    throw new HttpError(400, \"Something went wrong\");\n  }\n\n  const providerData = deserializeAndSanitizeProviderData(\n    authIdentity.providerData\n  );\n\n  try {\n    const SP = new SecurePassword();\n\n    // This will verify the password using the old algorithm\n    const result = await SP.verify(\n      Buffer.from(password),\n      Buffer.from(providerData.hashedPassword, \"base64\")\n    );\n\n    if (result !== SecurePassword.VALID) {\n      throw new HttpError(400, \"Something went wrong\");\n    }\n\n    // This will hash the password using the new algorithm and update the\n    // provider data in the database.\n    await updateAuthIdentityProviderData(providerId, providerData, {\n      hashedPassword: password,\n    });\n  } catch (e) {\n    throw new HttpError(400, \"Something went wrong\");\n  }\n\n  return {\n    message: \"Password migrated successfully.\",\n  };\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp Client App in TypeScript\nDESCRIPTION: TypeScript version of Wasp client configuration with additional baseDir setting for subdirectory deployment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/client-config.md#2025-04-22_snippet_14\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.tsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.ts\",\n    baseDir: \"/my-app\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Worker Function in JavaScript\nDESCRIPTION: Implementation of the job worker function that processes the job and returns results. Takes name parameter and returns tasks from the database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/jobs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const foo = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Using getEmail Function in React Component (JavaScript)\nDESCRIPTION: Demonstrates how to use the getEmail function from wasp/auth to display the email of a task's creator in a React component. The function returns the email if the user signed up with the Email auth method, or null otherwise.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/entities.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getEmail } from 'wasp/auth'\n\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {getEmail(task.user)}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Auth UI in JavaScript Login Component\nDESCRIPTION: Shows how to apply custom appearance settings to a LoginForm component in JavaScript/JSX.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/ui.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\nimport { authAppearance } from './appearance'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass the appearance object to the form\n      appearance={authAppearance}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Wasp App Head Elements Configuration\nDESCRIPTION: Example demonstrating how to add multiple head elements including stylesheets, scripts, and meta tags.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/customizing-app.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  head: [  // optional\n    \"<link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\\\" />\",\n    \"<script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js\\\"></script>\",\n    \"<meta name=\\\"viewport\\\" content=\\\"minimum-scale=1, initial-scale=1, width=device-width\\\" />\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating getEmail Helper Access in Server Operations\nDESCRIPTION: Demonstrates replacing getEmail helper with direct identity access in server-side operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_20\n\nLANGUAGE: ts\nCODE:\n```\nimport { getEmail } from 'wasp/auth'\n\nexport const createTask: CreateTask<...>  = async (args, context) => {\n    const email = getEmail(context.user)\n    // ...\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\nexport const createTask: CreateTask<...>  = async (args, context) => {\n    const email = context.user.identities.email?.id\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests with Playwright in TypeScript\nDESCRIPTION: This code snippet demonstrates how to write and run end-to-end tests using Playwright for a Wasp application. It includes a test case for logging in a user and adding a task.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/ci-cd.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expect, test } from '@playwright/test'\nimport { generateRandomUser, logUserIn } from './utils'\n\nconst user = generateRandomUser()\n\ntest.describe('basic user flow test', () => {\n  test('log in and add task', async ({ page }) => {\n    await logUserIn({ page, user })\n    await expect(page).toHaveURL('/')\n    await expect(page.locator('body')).toContainText('No tasks yet.')\n\n    // Add a task\n    await page.fill('input[name=\"description\"]', 'First task')\n    await page.click('input:has-text(\"Create task\")')\n    await expect(page.locator('body')).toContainText('First task')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Meme Template Fetch Worker\nDESCRIPTION: Server-side worker function that fetches meme templates from ImgFlip API and upserts them into the database using Prisma. Handles template metadata including dimensions and box count.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport axios from 'axios';\n\nexport const fetchAndStoreMemeTemplates = async (_args: any, context: any) => {\n  console.log('.... ><><>< get meme templates cron starting ><><>< ....');\n\n  try {\n    const response = await axios.get('https://api.imgflip.com/get_memes');\n\n    const promises = response.data.data.memes.map((meme: any) => {\n      return context.entities.Template.upsert({\n        where: { id: meme.id },\n        create: {\n          id: meme.id,\n          name: meme.name,\n          url: meme.url,\n          width: meme.width,\n          height: meme.height,\n          boxCount: meme.box_count,\n        },\n        update: {},\n      });\n    });\n\n    await Promise.all(promises);\n  } catch (error) {\n    console.error('error fetching meme templates: ', error);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring the Datasource Block in Prisma for Wasp\nDESCRIPTION: Shows the required structure for the `datasource` block in `schema.prisma` when used with Wasp. It mandates that the `provider` must be either `\"postgresql\"` or `\"sqlite\"`, and the `url` field must be explicitly set to `env(\"DATABASE_URL\")` for Wasp to correctly manage the database connection.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/prisma-file.md#2025-04-22_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\\n  provider = \"postgresql\"\\n  url      = env(\"DATABASE_URL\")\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Social Button Layout in JavaScript/JSX\nDESCRIPTION: Demonstrates configuring the `LoginForm` component to arrange social login buttons vertically. This is achieved by passing the string `'vertical'` to the `socialLayout` prop in a React/JSX component (`src/LoginPage.jsx`). The default layout is horizontal.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/ui.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/LoginPage.jsx\"\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass in the socialLayout prop\n      socialLayout=\"vertical\"\n    />\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing GitHub Identity and User ID in TypeScript\nDESCRIPTION: This snippet demonstrates how to extract the GitHub identity from a user object and access the GitHub User ID. It assumes the user object has an 'identities' property containing GitHub-specific information.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/entities/_github-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst githubIdentity = user.identities.github\n\n// GitHub User ID for example \"12345678\"\ngithubIdentity.id\n```\n\n----------------------------------------\n\nTITLE: Accessing User in MainPage Component with TypeScript\nDESCRIPTION: Updates the MainPage component in TypeScript to receive the strongly-typed user object as a prop when authenticated. This allows the component to access user information with proper type checking.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/07-auth.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuthUser } from 'wasp/auth'\n\n// highlight-next-line\nexport const MainPage = ({ user }: { user: AuthUser }) => {\n  // Do something with the user\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom User Signup Fields (JavaScript)\nDESCRIPTION: This snippet shows how to define custom user signup fields in a JavaScript project. It demonstrates adding an 'address' field with validation logic using the defineUserSignupFields function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing SignupForm with Additional Fields (TypeScript)\nDESCRIPTION: For TypeScript, customizes the SignupForm using both object-based field config for the address and a custom render function for the phone number field. This pattern leverages type safety with react-hook-form and Wasp's client/auth UI primitives. It manages validations, loading states, and error messages for robust form UX.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\\n  SignupForm,\\n  FormError,\\n  FormInput,\\n  FormItemGroup,\\n  FormLabel,\\n} from 'wasp/client/auth'\\n\\nexport const SignupPage = () => {\\n  return (\\n    <SignupForm\\n      additionalFields={[\\n        {\\n          name: 'address',\\n          label: 'Address',\\n          type: 'input',\\n          validations: {\\n            required: 'Address is required',\\n          },\\n        },\\n        (form, state) => {\\n          return (\\n            <FormItemGroup>\\n              <FormLabel>Phone Number</FormLabel>\\n              <FormInput\\n                {...form.register('phoneNumber', {\\n                  required: 'Phone number is required',\\n                })}\\n                disabled={state.isLoading}\\n              />\\n              {form.formState.errors.phoneNumber && (\\n                <FormError>\\n                  {form.formState.errors.phoneNumber.message}\\n                </FormError>\\n              )}\\n            </FormItemGroup>\\n          )\\n        },\\n      ]}\\n    />\\n  )\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Submitting a Job in TypeScript\nDESCRIPTION: Code that demonstrates how to submit a job for execution in TypeScript, including immediate execution and delayed execution. The types are inferred from the Wasp-generated module.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/jobs.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mySpecialJob } from 'wasp/server/jobs'\n\nconst submittedJob = await mySpecialJob.submit({ job: \"Johnny\" })\n\n// Or, if you'd prefer it to execute in the future, just add a .delay().\n// It takes a number of seconds, Date, or ISO date string.\nawait mySpecialJob\n  .delay(10)\n  .submit({ name: \"Johnny\" })\n```\n\n----------------------------------------\n\nTITLE: Implementing Discord Auth Functions in TypeScript\nDESCRIPTION: This code defines the userSignupFields and getConfig functions for Discord authentication in TypeScript, including type definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/discord.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  username: (data: any) => data.profile.global_name,\n  avatarUrl: (data: any) => data.profile.avatar,\n})\n\nexport function getConfig() {\n  return {\n    scopes: ['identify'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Wasp Query Operation\nDESCRIPTION: Wasp configuration file defining a getTaskInfo query operation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/general/typescript.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\nquery getTaskInfo {\n  fn: import { getTaskInfo } from \"@src/queries\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Additional Signup Fields via Render Function - React (JavaScript)\nDESCRIPTION: This React component (JavaScript) demonstrates how to pass a custom render function to the SignupForm component's additionalFields prop. The render function uses react-hook-form to watch the username field and conditionally display a greeting based on user input. Requires wasp/client/auth, react, and react-hook-form libraries. Inputs include standard signup form data plus optional username, and outputs a customized form UI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SignupForm, FormItemGroup } from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={(form, state) => {\n        const username = form.watch('username')\n        return (\n          username && (\n            <FormItemGroup>\n              Hello there <strong>{username}</strong> 👋\n            </FormItemGroup>\n          )\n        )\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Environment Variables in JavaScript\nDESCRIPTION: Example of accessing both Wasp-defined and user-defined environment variables in server-side JavaScript code using the env object from wasp/server.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/env-vars.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { env } from 'wasp/server'\n\n// Wasp-defined\nconst serverUrl = env.WASP_SERVER_URL\n\n// User-defined\nconst stripeApiKey = env.STRIPE_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Submitting a Job in TypeScript\nDESCRIPTION: This snippet demonstrates how to submit a job named 'mySpecialJob' with arguments in TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/jobs.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst submittedJob = await mySpecialJob.submit({ job: \"args\" })\n```\n\n----------------------------------------\n\nTITLE: React Component Action Integration\nDESCRIPTION: Shows how to use Actions within a React component, including query usage and conditional rendering.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/actions.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useQuery } from '@wasp/queries'\nimport getTask from '@wasp/queries/getTask'\nimport markTaskAsDone from '@wasp/actions/markTaskAsDone'\n\nexport const TaskPage = ({ id }) => {\n  const { data: task } = useQuery(getTask, { id })\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>\n  }\n\n  const { description, isDone } = task\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n      {isDone || (\n        <button onClick={() => markTaskAsDone({ id })}>Mark as done.</button>\n      )}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Task Update in TypeScript\nDESCRIPTION: TypeScript implementation of the updateTask action with proper type definitions for the payload and return type.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/06-actions.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreateTask, UpdateTask } from '@wasp/actions/types'\n\ntype UpdateTaskPayload = Pick<Task, 'id' | 'isDone'>\n\nexport const updateTask: UpdateTask<UpdateTaskPayload, Task> = async (\n  { id, isDone },\n  context\n) => {\n  return context.entities.Task.update({\n    where: { id },\n    data: {\n      isDone: isDone,\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Form Component\nDESCRIPTION: Implementation of a login page using Wasp's LoginForm component, including both route configuration and component implementation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/ui.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { LoginPage } from \"@src/LoginPage.tsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function LoginPage() {\n  return <LoginForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Using Social Login UI Helpers in React\nDESCRIPTION: This snippet shows how to use Wasp's UI helpers for social login, including pre-made sign-in buttons and URLs for Google and GitHub authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  GoogleSignInButton,\n  googleSignInUrl,\n  GitHubSignInButton,\n  gitHubSignInUrl,\n} from 'wasp/client/auth'\n\nexport const LoginPage = () => {\n  return (\n    <>\n      <GoogleSignInButton />\n      <GitHubSignInButton />\n      {/* or */}\n      <a href={googleSignInUrl}>Sign in with Google</a>\n      <a href={gitHubSignInUrl}>Sign in with GitHub</a>\n    </>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  GoogleSignInButton,\n  googleSignInUrl,\n  GitHubSignInButton,\n  gitHubSignInUrl,\n} from 'wasp/client/auth'\n\nexport const LoginPage = () => {\n  return (\n    <>\n      <GoogleSignInButton />\n      <GitHubSignInButton />\n      {/* or */}\n      <a href={googleSignInUrl}>Sign in with Google</a>\n      <a href={gitHubSignInUrl}>Sign in with GitHub</a>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeOAuthRedirect Hook\nDESCRIPTION: Hook that runs before OAuth redirect. Receives url, oauth, prisma, and req as input parameters. Must return an object with a url property.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nexport const onBeforeOAuthRedirect = async ({ url, oauth, prisma, req }) => {\n  // Hook code goes here\n\n  return { url }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OnBeforeOAuthRedirectHook } from 'wasp/server/auth'\n\nexport const onBeforeOAuthRedirect: OnBeforeOAuthRedirectHook = async ({\n  url,\n  oauth,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n\n  return { url }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing SignupForm with Additional Fields in JavaScript\nDESCRIPTION: Shows how to add additional fields to the SignupForm component in JavaScript, combining both object-based field definitions and render functions for more complex UI elements.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/overview.md#2025-04-22_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  SignupForm,\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket in JavaScript Wasp App\nDESCRIPTION: Demonstrates how to configure WebSocket functionality in a Wasp application using JavaScript. Includes setting up the WebSocket function import and auto-connect behavior.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/web-sockets.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  webSocket: {\n    fn: import { webSocketFn } from \"@src/webSocket\",\n    autoConnect: true, // optional, default: true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Entity in JavaScript API Implementation\nDESCRIPTION: JavaScript implementation of an API that uses the Prisma API to access an entity via the context object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/apis.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport const fooBar = (req, res, context) => {\n  res.json({ count: await context.entities.Task.count() });\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing User Data in Protected Pages (JavaScript)\nDESCRIPTION: Example showing how to access the user object in a protected page component where authRequired is set to true. The user object is passed as a prop to the component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\npage AccountPage {\n  component: import Account from \"@src/pages/Account\",\n  authRequired: true\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport Button from './Button'\nimport { logout } from 'wasp/client/auth'\n\nconst AccountPage = ({ user }) => {\n  return (\n    <div>\n      <Button onClick={logout}>Logout</Button>\n      {JSON.stringify(user, null, 2)}\n    </div>\n  )\n}\n\nexport default AccountPage\n```\n\n----------------------------------------\n\nTITLE: Implementing API Middleware (TypeScript)\nDESCRIPTION: Shows the implementation of API middleware in TypeScript to configure CORS, including type definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/apis.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MiddlewareConfigFn } from \"wasp/server\";\nexport const apiMiddleware: MiddlewareConfigFn = (config) => {\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: JavaScript Enum Usage\nDESCRIPTION: Example of using Prisma enums in JavaScript server-side code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/prisma-file.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TaskState } from \"@prisma/client\";\nimport { Task } from \"wasp/entities\";\n\nexport const getOpenTasks  = async (args, context) => {\n  return context.entities.Task.findMany({\n    orderBy: { id: \"asc\" },\n    where: { NOT: { state: TaskState.Done } },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Create Task Operation in TypeScript\nDESCRIPTION: TypeScript implementation of the create task operation with type definitions and user authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/crud.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Tasks } from 'wasp/server/crud'\nimport { type Task } from 'wasp/entities'\nimport { HttpError } from 'wasp/server'\n\ntype CreateTaskInput = { description: string; isDone: boolean }\n\nexport const createTask: Tasks.CreateAction<CreateTaskInput, Task> = async (\n  args,\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(401, 'User not authenticated.')\n  }\n\n  const { description, isDone } = args\n  const { Task } = context.entities\n\n  return await Task.create({\n    data: {\n      description,\n      isDone,\n      user: {\n        connect: {\n          id: context.user.id,\n        },\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dashboard Query in Wasp\nDESCRIPTION: Creating a Wasp query to expose dashboard data from the server to client components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-01-27-waspleau.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\n...\n\nquery dashboard {\n  fn: import { refreshDashboardData } from \"@server/dashboard.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Username & Password Migration Logic in TypeScript\nDESCRIPTION: Implements the migration logic for username and password authentication, including handling existing users and creating new auth entries.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prisma } from \"wasp/server\";\nimport { type ProviderName, type UsernameProviderData } from \"wasp/server/auth\";\nimport { MigrateUsernameAndPassword } from \"wasp/server/api\";\n\nexport const migrateUsernameAndPasswordHandler: MigrateUsernameAndPassword =\n  async (_req, res) => {\n    const result = await migrateUsernameAuth();\n\n    res.status(200).json({ message: \"Migrated users to the new auth\", result });\n  };\n\nasync function migrateUsernameAuth(): Promise<{\n  numUsersAlreadyMigrated: number;\n  numUsersNotUsingThisAuthMethod: number;\n  numUsersMigratedSuccessfully: number;\n}> {\n  const users = await prisma.user.findMany({\n    include: {\n      auth: true,\n    },\n  });\n\n  const result = {\n    numUsersAlreadyMigrated: 0,\n    numUsersNotUsingThisAuthMethod: 0,\n    numUsersMigratedSuccessfully: 0,\n  };\n\n  for (const user of users) {\n    if (user.auth) {\n      result.numUsersAlreadyMigrated++;\n      console.log(\"Skipping user (already migrated) with id:\", user.id);\n      continue;\n    }\n\n    if (!user.username || !user.password) {\n      result.numUsersNotUsingThisAuthMethod++;\n      console.log(\"Skipping user (not using username auth) with id:\", user.id);\n      continue;\n    }\n\n    const providerData: UsernameProviderData = {\n      hashedPassword: user.password,\n    };\n    const providerName: ProviderName = \"username\";\n\n    await prisma.auth.create({\n      data: {\n        identities: {\n          create: {\n            providerName,\n            providerUserId: user.username.toLowerCase(),\n            providerData: JSON.stringify(providerData),\n          },\n        },\n        user: {\n          connect: {\n            id: user.id,\n          },\n        },\n      },\n    });\n    result.numUsersMigratedSuccessfully++;\n  }\n\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Discord Profile to User Fields with Type Annotations - TypeScript\nDESCRIPTION: Similar to the JavaScript version, but uses TypeScript for type safety. Utilizes the 'defineUserSignupFields' utility from wasp/server/auth and includes type annotations on function parameters. Dependencies include wasp/server/auth and a compatible Discord profile structure. Outputs a typed field mapping object and provider config; designed for use in Wasp auth configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/discord.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  username: (data: any) => data.profile.global_name,\n  avatarUrl: (data: any) => data.profile.avatar,\n})\n\nexport function getConfig() {\n  return {\n    scopes: ['identify'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Form Component in JavaScript\nDESCRIPTION: React form component for creating new tasks, handling form submission and invoking the createTask action.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/06-actions.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst NewTaskForm = () => {\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    try {\n      const target = event.target\n      const description = target.description.value\n      target.reset()\n      await createTask({ description })\n    } catch (err) {\n      window.alert('Error: ' + err.message)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"description\" type=\"text\" defaultValue=\"\" />\n      <input type=\"submit\" value=\"Create task\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic App Settings in Wasp\nDESCRIPTION: Demonstrates a basic `app` declaration named `todoApp` in a `.wasp` file. It specifies the required Wasp version compatibility using `wasp.version` (supporting caret ranges like `^0.13.0`), sets the application title that appears in the browser tab using the `title` field, and includes an example of adding external resources like Google Fonts to the HTML head using the `head` array.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/customizing-app.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"ToDo App\",\n  head: [\n    \"<link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\\\" />\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Todo Component with Queries - JavaScript (JSX)\nDESCRIPTION: Defines a functional React component that retrieves tasks using the Wasp useQuery hook and renders task items as checkboxes with descriptions. Requires 'useQuery' and 'getTasks' from 'wasp/client/operations'. The component expects no props and handles an array of tasks, mapping each to a list item.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/testing.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useQuery, getTasks } from \\\"wasp/client/operations\\\";\\n\\nconst Todo = (_props) => {\\n  const { data: tasks } = useQuery(getTasks);\\n  return (\\n    <ul>\\n      {tasks &&\\n        tasks.map((task) => (\\n          <li key={task.id}>\\n            <input type=\\\"checkbox\\\" value={task.isDone} />\\n            {task.description}\\n          </li>\\n        ))}\\n    </ul>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Mock Server for Testing in Wasp\nDESCRIPTION: Demonstrates how to initialize the mock server to use mockQuery and mockApi utilities in tests. This should be called outside of test cases in each test file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mockServer } from \"wasp/client/test\";\n\nconst { mockQuery, mockApi } = mockServer();\n```\n\n----------------------------------------\n\nTITLE: Defining Session Entity in Prisma for Wasp Internal Authentication\nDESCRIPTION: Defines the 'Session' model in Prisma, representing individual login sessions for authenticated users. Links session IDs to the internal 'Auth' entity and includes expiration logic. The model is managed by Wasp and supports session persistence and cleanup in authentication workflows.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_20\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Session {\n  id        String   @id @unique\n  expiresAt DateTime\n  userId    String\n  auth      Auth     @relation(references: [id], fields: [userId], onDelete: Cascade)\n\n  @@index([userId])\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onAfterSignup Hook in TypeScript\nDESCRIPTION: Demonstrates the implementation of the onAfterSignup hook in TypeScript, including type annotations for improved type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OnAfterSignupHook } from 'wasp/server/auth'\n\nexport const onAfterSignup: OnAfterSignupHook = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  const count = await prisma.user.count()\n  console.log('number of users after', count)\n  console.log('user object', user)\n\n  // If this is an OAuth signup, you have access to the OAuth tokens and the uniqueRequestId\n  if (oauth) {\n    console.log('accessToken', oauth.tokens.accessToken)\n    console.log('uniqueRequestId', oauth.uniqueRequestId)\n\n    const id = oauth.uniqueRequestId\n    const data = someKindOfStore.get(id)\n    if (data) {\n      console.log('saved data for the ID', data)\n    }\n    someKindOfStore.delete(id)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling WebSockets in Wasp Configuration\nDESCRIPTION: Configuration code to enable WebSockets in the Wasp application file. Specifies the WebSocket function and auto-connect behavior.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/web-sockets.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  webSocket: {\n    fn: import { webSocketFn } from \"@src/webSocket\",\n    autoConnect: true, // optional, default: true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Open on Dev Server - Vite Config - TypeScript\nDESCRIPTION: This TypeScript snippet uses Vite's `defineConfig` helper to create a config that disables the automatic browser opening on starting the dev server. The file should be named `vite.config.ts` and must import from 'vite'. No extra dependencies apart from Vite itself, and setting `server.open: false` disables browser auto-opens on `wasp start`. The config merges with Wasp's defaults and requires no other parameters.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/custom-vite-config.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  server: {\n    open: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Login Post-Processing Hook in Wasp (JavaScript) - wasp\nDESCRIPTION: Registers a user-defined 'onAfterLogin' post-login hook in the main.wasp configuration for JavaScript-based projects. The imported hook is executed after successful login, allowing for further processing or integration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_13\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  ...\n  auth: {\n    ...\n    onAfterLogin: import { onAfterLogin } from \"@src/auth/hooks\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Password Update Implementation with Hashing\nDESCRIPTION: Demonstrates secure password updating with automatic hashing using Wasp's authentication helper functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\naction updatePassword {\n  fn: import { updatePassword } from \"@src/auth\",\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  createProviderId,\n  findAuthIdentity,\n  updateAuthIdentityProviderData,\n  getProviderDataWithPassword,\n} from 'wasp/server/auth'\nimport { type UpdatePassword } from 'wasp/server/operations'\n\nexport const updatePassword: UpdatePassword<\n  { email: string; password: string },\n  void\n> = async (args, context) => {\n  const providerId = createProviderId('email', args.email)\n  const authIdentity = await findAuthIdentity(providerId)\n  if (!authIdentity) {\n    throw new HttpError(400, 'Unknown user')\n  }\n\n  const providerData = getProviderDataWithPassword<'email'>(\n    authIdentity.providerData\n  )\n\n  // Updates the password and hashes it automatically.\n  await updateAuthIdentityProviderData(providerId, providerData, {\n    hashedPassword: args.password,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Database Seeding Function\nDESCRIPTION: Example of a database seeding function in JavaScript that creates a user and a task using Prisma client.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/databases.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTask } from './actions.js'\nimport { sanitizeAndSerializeProviderData } from 'wasp/server/auth'\n\nexport const devSeedSimple = async (prisma) => {\n  const user = await createUser(prisma, {\n    username: 'RiuTheDog',\n    password: 'bark1234',\n  })\n\n  await createTask(\n    { description: 'Chase the cat' },\n    { user, entities: { Task: prisma.task } }\n  )\n}\n\nasync function createUser(prisma, data) {\n  const newUser = await prisma.user.create({\n    data: {\n      auth: {\n        create: {\n          identities: {\n            create: {\n              providerName: 'username',\n              providerUserId: data.username,\n              providerData: await sanitizeAndSerializeProviderData({\n                hashedPassword: data.password\n              }),\n            },\n          },\n        },\n      },\n    },\n  })\n\n  return newUser\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring API Routes in Wasp (JavaScript)\nDESCRIPTION: Example of declaring an API endpoint with authentication, route configuration, entity access, and middleware support in Wasp. The API route is configured with GET method at '/foo/bar' path with Task entity access and custom middleware.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/apis.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar {\n  fn: import { fooBar } from \"@src/apis\",\n  httpRoute: (GET, \"/foo/bar\"),\n  entities: [Task],\n  auth: true,\n  middlewareConfigFn: import { apiMiddleware } from \"@src/apis\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Username/Password Signup in TypeScript\nDESCRIPTION: This code implements a custom username and password signup process in TypeScript, including type definitions, username and password validation, and user creation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/advanced/custom-auth-actions.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createProviderId,\n  createUser,\n  ensurePasswordIsPresent,\n  ensureValidPassword,\n  ensureValidUsername,\n  sanitizeAndSerializeProviderData,\n} from 'wasp/server/auth'\nimport type { CustomSignup } from 'wasp/server/operations'\n\ntype CustomSignupInput = {\n  username: string\n  password: string\n}\ntype CustomSignupOutput = {\n  success: boolean\n  message: string\n}\n\nexport const signup: CustomSignup<\n  CustomSignupInput,\n  CustomSignupOutput\n> = async (args, _context) => {\n  ensureValidUsername(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('username', args.username)\n    const providerData = await sanitizeAndSerializeProviderData<'username'>({\n      // The provider will hash the password for us, so we don't need to do it here.\n      hashedPassword: args.password,\n    })\n\n    await createUser(providerId, providerData, {})\n  } catch (e: any) {\n    console.error('Error creating user:', e)\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Entities in JavaScript API Implementation\nDESCRIPTION: Shows how to access entity operations from the context object in a JavaScript API implementation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/apis.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport const fooBar = (req, res, context) => {\n  res.json({ count: await context.entities.Task.count() });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Routes and Pages in Wasp (TypeScript)\nDESCRIPTION: This snippet shows how to define the necessary routes and pages for authentication in the Wasp file for a TypeScript project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/google.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.tsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User Email Identity Properties in TypeScript\nDESCRIPTION: This snippet shows how to access different properties of a user's email identity in Wasp. It includes accessing the email address, checking email verification status, and retrieving timestamps for email verification and password reset actions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/_email-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst emailIdentity = user.identities.email\n\n// Email address the user used to sign up, e.g. \"fluffyllama@app.com\".\nemailIdentity.id\n\n// `true` if the user has verified their email address.\nemailIdentity.isEmailVerified\n\n// Datetime when the email verification email was sent.\nemailIdentity.emailVerificationSentAt\n\n// Datetime when the last password reset email was sent.\nemailIdentity.passwordResetSentAt\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak Auth in Wasp File\nDESCRIPTION: This snippet shows how to configure the auth object in the main.wasp file to enable Keycloak authentication. It specifies the User entity and enables the Keycloak auth method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/keycloak.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      keycloak: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Integration in JavaScript\nDESCRIPTION: Client-side React component implementation showing how to use the updateTask action in a TaskView component with error handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/06-actions.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  updateTask,\n  createTask,\n  getTasks,\n  useQuery,\n} from 'wasp/client/operations'\n\nconst TaskView = ({ task }) => {\n  const handleIsDoneChange = async (event) => {\n    try {\n      await updateTask({\n        id: task.id,\n        isDone: event.target.checked,\n      })\n    } catch (error) {\n      window.alert('Error while updating task: ' + error.message)\n    }\n  }\n\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        id={String(task.id)}\n        checked={task.isDone}\n        onChange={handleIsDoneChange}\n      />\n      {task.description}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Securing Create and Update Task Actions - Wasp Server (TypeScript)\nDESCRIPTION: This TypeScript code secures task creation and update actions, typing payloads and return values to ensure correctness. It checks authentication before proceeding and binds tasks to the current user. The 'updateTask' action uses updateMany to restrict updates to tasks belonging to the user. Requires Wasp server operations/types and a properly set up Prisma schema.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/07-auth.md#2025-04-22_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Task } from 'wasp/entities'\nimport { HttpError } from 'wasp/server'\nimport { CreateTask, UpdateTask } from 'wasp/server/operations'\n\ntype CreateTaskPayload = Pick<Task, 'description'>\n\nexport const createTask: CreateTask<CreateTaskPayload, Task> = async (\n  args,\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.create({\n    data: {\n      description: args.description,\n      user: { connect: { id: context.user.id } },\n    },\n  })\n}\n\ntype UpdateTaskPayload = Pick<Task, 'id' | 'isDone'>\n\nexport const updateTask: UpdateTask<\n  UpdateTaskPayload,\n  { count: number }\n> = async ({ id, isDone }, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.updateMany({\n    where: { id, user: { id: context.user.id } },\n    data: { isDone },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side WebSocket Implementation in TypeScript\nDESCRIPTION: Implementation of the WebSocket server function that handles connections, voting, and state updates for the poll application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-09-build-real-time-voting-app-websockets-react-typescript.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getUsername } from 'wasp/auth';\nimport { type WebSocketDefinition } from 'wasp/server/webSocket';\n\ntype PollState = {\n  question: string;\n  options: {\n    id: number;\n    text: string;\n    description: string;\n    votes: string[];\n  }[];\n};\n\ninterface ServerToClientEvents {\n  updateState: (state: PollState) => void;\n}\ninterface ClientToServerEvents {\n  vote: (optionId: number) => void;\n  askForStateUpdate: () => void;\n}\ninterface InterServerEvents {}\n\nexport const webSocketFn: WebSocketDefinition<ClientToServerEvents, ServerToClientEvents, InterServerEvents> = (\n  io,\n  _context\n) => {\n  const poll: PollState = {\n    question: \"What are eating for lunch ✨ Let's order\",\n    options: [\n      {\n        id: 1,\n        text: 'Party Pizza Place',\n        description: 'Best pizza in town',\n        votes: [],\n      },\n      {\n        id: 2,\n        text: 'Best Burger Joint',\n        description: 'Best burger in town',\n        votes: [],\n      },\n      {\n        id: 3,\n        text: 'Sus Sushi Place',\n        description: 'Best sushi in town',\n        votes: [],\n      },\n    ],\n  };\n  io.on('connection', (socket) => {\n    if (!socket.data.user) {\n      console.log('Socket connected without user');\n      return;\n    }\n\n    const connectionUsername = getUsername(socket.data.user);\n\n    console.log('Socket connected: ', connectionUsername);\n    socket.on('askForStateUpdate', () => {\n      socket.emit('updateState', poll);\n    });\n\n    socket.on('vote', (optionId) => {\n      if (!connectionUsername) {\n        return;\n      }\n      // If user has already voted, remove their vote.\n      poll.options.forEach((option) => {\n        option.votes = option.votes.filter((username) => username !== connectionUsername);\n      });\n      // And then add their vote to the new option.\n      const option = poll.options.find((o) => o.id === optionId);\n      if (!option) {\n        return;\n      }\n      option.votes.push(connectionUsername);\n      io.emit('updateState', poll);\n    });\n\n    socket.on('disconnect', () => {\n      console.log('Socket disconnected: ', connectionUsername);\n    });\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a TypeScript API with Generic Type Parameters\nDESCRIPTION: Shows how to provide extra type information to an API function in TypeScript using generics. This example defines parameter and response types for full type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/apis.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FooBar } from \"wasp/server/api\";\n\nexport const fooBar: FooBar<\n  { email: string }, // params\n  { answer: number } // response\n> = (req, res, _context) => {\n  console.log(req.params.email);\n  res.json({ answer: 42 });\n};\n```\n\n----------------------------------------\n\nTITLE: API Reference for Wasp App Declaration Structure\nDESCRIPTION: Provides a comprehensive overview of the `app` declaration structure, showcasing all major configuration fields including `wasp` (version), `title`, `head`, and placeholders (`// ...`) for advanced configurations like `auth`, `client`, `server`, `db`, `emailSender`, and `webSocket`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/customizing-app.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"ToDo App\",\n  head: [\n    \"<link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\\\" />\"\n  ],\n  auth: {\n    // ...\n  },\n  client: {\n    // ...\n  },\n  server: {\n    // ...\n  },\n  db: {\n    // ...\n  },\n  emailSender: {\n    // ...\n  },\n  webSocket: {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Datasource in Prisma Schema for Wasp\nDESCRIPTION: Illustrates the required configuration for the datasource block in the schema.prisma file, specifying the database provider and environment variable for the URL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/prisma-file.md#2025-04-22_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query in JavaScript\nDESCRIPTION: Example of implementing a query function in JavaScript, showing the expected export pattern and function signature with args and context parameters.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/queries.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getFoo = (args, context) => {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Link Component in React\nDESCRIPTION: Shows how to use the Link component from wasp/client/router to create type-safe links in a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/links.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'wasp/client/router'\n\nexport const TaskList = () => {\n  // ...\n\n  return (\n    <div>\n      {tasks.map((task) => (\n        <Link\n          key={task.id}\n          to=\"/task/:id\"\n          params={{ id: task.id }}>\n          {task.description}\n        </Link>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Wasp App Title Configuration\nDESCRIPTION: Example showing how to set the app title that appears in the browser tab.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/customizing-app.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"BookFace\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Task Creation Implementation - TypeScript\nDESCRIPTION: TypeScript version of custom task creation operation with proper type definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/crud.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CreateAction } from '@wasp/crud/Tasks'\nimport type { Task } from '@wasp/entities'\nimport HttpError from '@wasp/core/HttpError.js'\n\ntype CreateTaskInput = { description: string; isDone: boolean }\n\nexport const createTask: CreateAction<CreateTaskInput, Task> = async (\n  args,\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(401, 'User not authenticated.')\n  }\n\n  const { description, isDone } = args\n  const { Task } = context.entities\n\n  return await Task.create({\n    data: {\n      description,\n      isDone,\n      user: {\n        connect: {\n          id: context.user.id,\n        },\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Global Middleware Configuration in Wasp - TypeScript\nDESCRIPTION: Example of configuring global middleware in a Wasp application using TypeScript. Shows how to define the middleware configuration function in the main.wasp file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/middleware-config.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  server: {\n    setupFn: import setup from \"@src/serverSetup\",\n    middlewareConfigFn: import { serverMiddlewareFn } from \"@src/serverSetup\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Task Entity in Prisma Schema\nDESCRIPTION: This snippet shows how to define a Task entity in the Prisma schema file. It includes fields for id, description, and isDone status.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Task {\n  id          Int     @id @default(autoincrement())\n  description String\n  isDone      Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Object with GitHub Authentication in Wasp\nDESCRIPTION: This snippet shows how to configure the auth object in the main.wasp file to enable GitHub authentication. It specifies the User entity, SocialLogin entity, and enables the GitHub authentication method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/github.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    // highlight-next-line\n    // 1. Specify the User entity  (we'll define it next)\n    // highlight-next-line\n    userEntity: User,\n    // highlight-next-line\n    // 2. Specify the SocialLogin entity (we'll define it next)\n    // highlight-next-line\n    externalAuthEntity: SocialLogin,\n    methods: {\n      // highlight-next-line\n      // 3. Enable Github Auth\n      // highlight-next-line\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining App and Entities in Wasp and Prisma (After 0.14.0)\nDESCRIPTION: Example of how to define the app in main.wasp and entities in schema.prisma after version 0.14.0. It demonstrates the separation of app configuration and database schema definition.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"MyApp\",\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id       Int @id @default(autoincrement())\n  tasks    Task[]\n}\n\nmodel Task {\n  id          Int @id @default(autoincrement())\n  description String\n  isDone      Boolean\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Extending SignupForm via Render Function in React (TypeScript)\nDESCRIPTION: Similar to the JavaScript example but implemented in TypeScript with type checking. Extends the Wasp SignupForm in a React component via the additionalFields render function. The function accesses form values and state, enabling dynamic rendering based on signup data. Requires Wasp's client/auth module, TypeScript, and react-hook-form types.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignupForm, FormItemGroup } from 'wasp/client/auth'\\n\\nexport const SignupPage = () => {\\n  return (\\n    <SignupForm\\n      additionalFields={(form, state) => {\\n        const username = form.watch('username')\\n        return (\\n          username && (\\n            <FormItemGroup>\\n              Hello there <strong>{username}</strong> 👋\\n            </FormItemGroup>\\n          )\\n        )\\n      }}\\n    />\\n  )\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Logout Button to MainPage Component in JavaScript\nDESCRIPTION: Updates the MainPage component to include a logout button using the Wasp-provided logout function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/07-auth.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport logout from '@wasp/auth/logout'\n//...\n\nconst MainPage = () => {\n  // ...\n  return (\n    <div>\n      // ...\n      <button onClick={logout}>Logout</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pages and Routes in Wasp TypeScript\nDESCRIPTION: Creates a login page and defines a route for it in the Wasp app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/general/wasp-ts-config.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst loginPage = app.page('LoginPage', {\n  component: { importDefault: 'Login', from: '@src/pages/auth/Login' }\n});\napp.route('LoginRoute', { path: '/login', to: loginPage });\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Signup Form in React (JSX)\nDESCRIPTION: This React component demonstrates how to implement a signup form using the `signup` and `login` actions from `wasp/client/auth`. It captures username and password, calls `signup` to register the user, then immediately calls `login` to authenticate them, and finally redirects to the home page upon success. It also includes basic error handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/username-and-pass.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"src/pages/auth.jsx\"\nimport { signup, login } from 'wasp/client/auth'\n\nimport { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\n\nexport function Signup() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState(null)\n  const history = useHistory()\n\n  async function handleSubmit(event) {\n    event.preventDefault()\n    try {\n      await signup({\n        username,\n        password,\n      })\n      await login(username, password)\n      history.push(\"/\")\n    } catch (error) {\n      setError(error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* ... */}\n    </form>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Tailwind Configuration with resolveProjectPath\nDESCRIPTION: Example of how to update the Tailwind configuration file to use the resolveProjectPath function for proper path resolution in Wasp 0.12.0.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// Before\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    // highlight-next-line\n    './src/**/*.{js,jsx,ts,tsx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// After\n// highlight-next-line\nconst { resolveProjectPath } = require('wasp/dev')\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    // highlight-next-line\n    resolveProjectPath('./src/**/*.{js,jsx,ts,tsx}'),\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring updateTask Action in Wasp\nDESCRIPTION: This snippet shows how to declare the 'updateTask' action in the main.wasp file. It imports the action function and specifies the Task entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/06-actions.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\naction updateTask {\n  fn: import { updateTask } from \"@src/actions\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Provider User ID with Wasp Auth in JavaScript React Component\nDESCRIPTION: Uses the 'getFirstProviderUserId' utility from Wasp's auth package in a JavaScript React component to get the first available provider user ID (e.g., email, Google ID) for a given user and display it next to each task. Task user objects must include 'auth' and 'identities' relations for this function to work as expected. Returns a provider ID string or null if unavailable.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getFirstProviderUserId } from 'wasp/auth'\n\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {getFirstProviderUserId(task.user)}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Background Job in Wasp\nDESCRIPTION: Declaration of a background job in a Wasp file, specifying the executor, perform function, and related entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/jobs.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\njob mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@src/workers/bar\"\n  },\n  entities: [Task],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GitHub Metrics Worker Function in JavaScript\nDESCRIPTION: This code defines a worker function that fetches GitHub repository data for Wasp, extracts relevant metrics, and stores them in a database. It's designed to run as a background job in the Wasp framework.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-06-15-jobs-feature-announcement.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios'\nimport { upsertMetric } from './utils.js'\n\nexport async function workerFunction() {\n  const response = await axios.get('https://api.github.com/repos/wasp-lang/wasp')\n\n  const metrics = [\n    { name: 'Wasp GitHub Stars', value: response.data.stargazers_count },\n    { name: 'Wasp GitHub Language', value: response.data.language },\n    { name: 'Wasp GitHub Forks', value: response.data.forks },\n    { name: 'Wasp GitHub Open Issues', value: response.data.open_issues },\n  ]\n\n  await Promise.all(metrics.map(upsertMetric))\n\n  return metrics\n}\n```\n\n----------------------------------------\n\nTITLE: Using useQuery Hook in React Component (TypeScript)\nDESCRIPTION: TypeScript version of using the useQuery hook to fetch all tasks and filtered tasks in a React component. It demonstrates type inference and full-stack type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/queries.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { type Task } from 'wasp/entities'\nimport { useQuery, getAllTasks, getFilteredTasks } from 'wasp/client/operations'\n\nconst MainPage = () => {\n  // TypeScript will automatically infer and type-check payload types.\n  const { data: allTasks, error: error1 } = useQuery(getAllTasks)\n  const { data: doneTasks, error: error2 } = useQuery(getFilteredTasks, {\n    isDone: true,\n  })\n\n  if (error1 !== null || error2 !== null) {\n    return <div>There was an error</div>\n  }\n\n  return (\n    <div>\n      <h2>All Tasks</h2>\n      {allTasks && allTasks.length > 0\n        ? allTasks.map((task) => <Task key={task.id} {...task} />)\n        : 'No tasks'}\n\n      <h2>Finished Tasks</h2>\n      {doneTasks && doneTasks.length > 0\n        ? doneTasks.map((task) => <Task key={task.id} {...task} />)\n        : 'No finished tasks'}\n    </div>\n  )\n}\n\nconst Task = ({ description, isDone }: Task) => {\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n    </div>\n  )\n}\n\nexport default MainPage\n```\n\n----------------------------------------\n\nTITLE: Updating User Password with Automatic Hashing in JavaScript\nDESCRIPTION: Example of updating a user's password using Prisma client within a Wasp action. The password is automatically hashed by Wasp's middleware before storage.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const updatePassword = async (args, context) => {\n  return context.entities.User.update({\n    where: { id: args.userId },\n    data: {\n      password: 'New pwd which will be hashed automatically!',\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Per-Path Middleware in Wasp and TypeScript\nDESCRIPTION: This example demonstrates how to customize middleware for all API routes under a common path in a Wasp application using TypeScript. It adds a custom middleware for a specific API namespace.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/middleware-config.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\napiNamespace fooBar {\n  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from \"@src/apis\",\n  path: \"/foo/bar\"\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { type MiddlewareConfigFn } from 'wasp/server'\n\nexport const fooBarNamespaceMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {\n  const customMiddleware: express.RequestHandler = (_req, _res, next) => {\n    console.log('fooBarNamespaceMiddlewareFn: custom middleware')\n    next()\n  }\n\n  middlewareConfig.set('custom.middleware', customMiddleware)\n\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Job Function in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement the 'foo' function for the 'mySpecialJob' in JavaScript, showing how to handle input arguments and use the context object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/jobs.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const foo = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Keycloak\nDESCRIPTION: This snippet shows the necessary environment variables to be added to the .env.server file for Keycloak authentication, including client ID, client secret, and realm URL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/keycloak.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nKEYCLOAK_CLIENT_ID=your-keycloak-client-id\nKEYCLOAK_CLIENT_SECRET=your-keycloak-client-secret\nKEYCLOAK_REALM_URL=https://your-keycloak-url.com/realms/master\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Form in TypeScript with Wasp Auth\nDESCRIPTION: A TypeScript version of the signup form component, with proper type annotations for state variables and event handlers. It utilizes Wasp's authentication functions for signup and login operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/username-and-pass.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signup, login } from 'wasp/client/auth'\n\nimport { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\n\nexport function Signup() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState<Error | null>(null)\n  const history = useHistory()\n\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    try {\n      await signup({\n        username,\n        password,\n      })\n      await login(username, password)\n      history.push(\"/\")\n    } catch (error: unknown) {\n      setError(error as Error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* ... */}\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring API Endpoint in Wasp\nDESCRIPTION: Shows how to declare a custom API endpoint in the Wasp configuration file with HTTP route and function import.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/apis.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar {\n  fn: import { fooBar } from \"@src/apis\",\n  httpRoute: (GET, \"/foo/bar\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dashboard Data Access\nDESCRIPTION: Server implementation of the dashboard query that retrieves the in-memory dashboard data updated by background jobs.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-01-27-waspleau.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getDashboardData } from './serverSetup.js'\n\nexport const refreshDashboardData = async (_args, _context) => {\n  return getDashboardData()\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Queries in TypeScript\nDESCRIPTION: This snippet shows how to import and use the declared query 'getFoo' on both client and server sides in TypeScript, including type import.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/queries.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// Use it on the client\nimport { getFoo } from 'wasp/client/operations'\n\n// Use it on the server\nimport { getFoo } from 'wasp/server/operations'\n\n// Import type on the server\nimport { type GetFoo } from 'wasp/server/operations'\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSockets in the Wasp Application (Wasp)\nDESCRIPTION: This code block shows how to enable WebSockets in the Wasp app by specifying the 'webSocket' configuration within the 'app' block. The configuration provides the WebSocket handler function via an import and optionally controls whether the client should automatically connect. Dependencies are Wasp, with the handler expected to live in @src/webSocket. Inputs are the handler path and autoconnect flag; output is an app with real-time features enabled. Requires Wasp 0.12.0+.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/web-sockets.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  webSocket: {\n    fn: import { webSocketFn } from \"@src/webSocket\",\n    autoConnect: true, // optional, default: true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Wasp\nDESCRIPTION: Sets up username and password authentication in the Wasp application configuration, specifying the user entity and redirect behavior.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/07-auth.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"^0.12.0\"\n  },\n  title: \"TodoApp\",\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertical Social Buttons in Auth UI (TypeScript/TSX)\nDESCRIPTION: Demonstrates how to configure the social login button layout in a TypeScript React component using the Wasp `LoginForm`. Passing `'vertical'` to the `socialLayout` prop arranges the social buttons vertically.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/ui.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/LoginPage.tsx\"\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass in the socialLayout prop\n      socialLayout=\"vertical\"\n    />\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Root React Component (JavaScript, JSX)\nDESCRIPTION: This custom React component serves as the application's root when using JavaScript, providing global context via a Redux Provider and rendering a custom layout. Required dependencies are 'react-redux' and the application's store module. The 'Root' component expects children and wraps them with the Layout structure, providing header and footer sections. Inputs: children (React nodes); Output: wrapped application. Limitations: Provider and Layout structure must match application requirements.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/client-config.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root({ children }) {\n  return (\n    <Provider store={store}>\n      <Layout>{children}</Layout>\n    </Provider>\n  )\n}\n\nfunction Layout({ children }) {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      {children}\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Wasp Action in JavaScript\nDESCRIPTION: Provides the JavaScript implementation for the `createTask` action in `src/actions.js`. This asynchronous function receives arguments (`args`) containing the task data (e.g., description) and context (`context`) providing access to entities. It uses `context.entities.Task.create` to insert a new task into the database and returns the newly created task.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/06-actions.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport const createTask = async (args, context) => {\n  return context.entities.Task.create({\n    data: { description: args.description },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Wasp Application Configuration\nDESCRIPTION: Main configuration file (main.wasp) defining the application structure, including auth, database models, and routes\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\napp Memerator {\n  wasp: {\n    version: \"^0.11.3\"\n  },\n  title: \"Memerator\",\n  client: {\n    rootComponent: import { Layout } from \"@client/Layout\",\n  },\n  db: {\n    system: PostgreSQL,\n    prisma: {\n      clientPreviewFeatures: [\"extendedWhereUnique\"]\n    }\n  },\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {}\n    },\n    onAuthFailedRedirectTo: \"/login\",\n    onAuthSucceededRedirectTo: \"/\"\n  },\n  dependencies: [\n    (\"openai\", \"4.2.0\"),\n    (\"axios\", \"^1.4.0\"),\n    (\"react-icons\", \"4.10.1\"),\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Authentication Methods in Wasp\nDESCRIPTION: This snippet demonstrates how to configure multiple authentication methods (email, Google, and GitHub) in the main.wasp file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  //...\n  auth: {\n    methods: {\n      email: {},\n      google: {},\n      github: {},\n    },\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Page with Wasp Auth UI in React (TypeScript)\nDESCRIPTION: This TypeScript version of the SignupPage component uses Wasp's Auth UI components to create a signup page with a centered signup form.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/crud.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignupForm } from '@wasp/auth/forms/Signup'\n\nexport function SignupPage() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        placeContent: 'center',\n      }}\n    >\n      <SignupForm />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL as Database System in Wasp\nDESCRIPTION: Example configuration for setting PostgreSQL as the database system in a Wasp application. This is required when deploying to production as SQLite is only supported in development.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/backends.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  db: {\n    system: PostgreSQL,\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structure of main.wasp File for Email Authentication\nDESCRIPTION: This snippet shows the basic structure of a main.wasp file with email authentication configuration. It includes sections for app configuration, User entity definition, and route/page declarations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/email.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\n// Configuring e-mail authentication\napp myApp {\n  auth: { ... }\n}\n\n// Defining User entity\nentity User { ... }\n\n// Defining routes and pages\nroute SignupRoute { ... }\npage SignupPage { ... }\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query in JavaScript\nDESCRIPTION: JavaScript implementation of the 'getTasks' query function that retrieves all tasks from the database ordered by ID in ascending order.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/05-queries.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getTasks = async (args, context) => {\n  return context.entities.Task.findMany({\n    orderBy: { id: 'asc' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Actions on the Server in JavaScript\nDESCRIPTION: Demonstrates how to call Actions on the server-side in JavaScript. It shows the usage of createTask and markTaskAsDone Actions with the necessary context object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTask, markTaskAsDone } from 'wasp/server/operations'\n\nconst user = // Get an AuthUser object, e.g., from context.user\n\nconst newTask = await createTask(\n  { description: 'Learn TypeScript' },\n  { user },\n)\nawait markTaskAsDone({ id: 1 }, { user })\n```\n\n----------------------------------------\n\nTITLE: Customizing API-specific Middleware in Wasp and JavaScript\nDESCRIPTION: This example shows how to customize middleware for a specific API route in a Wasp application. It demonstrates replacing the express.json middleware with express.raw for a webhook callback.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/middleware-config.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napi webhookCallback {\n  fn: import { webhookCallback } from \"@src/apis\",\n  middlewareConfigFn: import { webhookCallbackMiddlewareFn } from \"@src/apis\",\n  httpRoute: (POST, \"/webhook/callback\"),\n  auth: false\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express'\n\nexport const webhookCallback = (req, res, _context) => {\n  res.json({ msg: req.body.length })\n}\n\nexport const webhookCallbackMiddlewareFn = (middlewareConfig) => {\n  console.log('webhookCallbackMiddlewareFn: Swap express.json for express.raw')\n\n  middlewareConfig.delete('express.json')\n  middlewareConfig.set('express.raw', express.raw({ type: '*/*' }))\n\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Auth in Wasp File\nDESCRIPTION: This snippet shows how to enable GitHub authentication in the Wasp configuration file. It specifies the User entity and adds GitHub to the auth methods.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/github.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Signup Fields in Auth (Wasp DSL, TypeScript interpretation)\nDESCRIPTION: Enables use of custom server-side signup fields by referencing the exported userSignupFields from a TypeScript implementation. Configures authentication in Wasp DSL with direct import from the TypeScript module. Requires Wasps's userSignupFields export in src/auth/signup.ts, as well as correct app and entity setup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_23\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\\n  // ...\\n  auth: {\\n    userEntity: User,\\n    methods: {\\n      usernameAndPassword: {\\n        // highlight-next-line\\n        userSignupFields: import { userSignupFields } from \"@src/auth/signup\",\\n      },\\n    },\\n    onAuthFailedRedirectTo: \"/login\",\\n  },\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Configuration in Wasp\nDESCRIPTION: This code shows how to import and access the client configuration object in a Wasp application, which includes fields like apiUrl that can be set via environment variables.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/accessing-app-config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { config } from 'wasp/client'\n\nconsole.log(config.apiUrl)\n```\n\n----------------------------------------\n\nTITLE: Submitting Jobs in JavaScript/TypeScript\nDESCRIPTION: Examples of submitting jobs for immediate or delayed execution using the Wasp jobs API.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/jobs.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mySpecialJob } from 'wasp/server/jobs'\n\nconst submittedJob = await mySpecialJob.submit({ job: \"Johnny\" })\n\n// Or, if you'd prefer it to execute in the future, just add a .delay().\n// It takes a number of seconds, Date, or ISO date string.\nawait mySpecialJob\n  .delay(10)\n  .submit({ name: \"Johnny\" })\n```\n\n----------------------------------------\n\nTITLE: Implementing Note Addition Component in React\nDESCRIPTION: This React component allows users to add notes to a vector store. It uses the embedIdea action from Wasp and manages the state for the idea input and embedding process.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\nimport embedIdea from '@wasp/actions/embedIdea';\n\nexport default function AddNote() {\n  const [idea, setIdea] = useState('');\n  const [isIdeaEmbedding, setIsIdeaEmbedding] = useState(false);\n\n  const handleEmbedIdea = async (e: any) => {\n    try {\n      setIsIdeaEmbedding(true);\n      if (!idea) {\n        throw new Error('Idea cannot be empty');\n      }\n      const embedIdeaResponse = await embedIdea({\n        idea,\n      });\n\n      console.log('embedIdeaResponse: ', embedIdeaResponse);\n    } catch (error: any) {\n      alert(error.message);\n    } finally {\n      setIdea('');\n      setIsIdeaEmbedding(false);\n    }\n  };\n\n  return (\n    <div className='flex flex-row gap-2 justify-center items-end w-full'>\n      <textarea\n        autoFocus\n        onChange={(e) => setIdea(e.target.value)}\n        value={idea}\n        placeholder='LLMs are great for brainstorming!'\n        className='w-full p-4 h-22 bg-neutral-100 border rounded-lg w-full'\n      />\n      <button\n        onClick={handleEmbedIdea}\n        className='flex flex-row justify-center items-center bg-neutral-100 hover:bg-neutral-200 border border-neutral-300 font-bold px-3 py-1 text-sm text-blue-500 whitespace-nowrap rounded-lg'\n      >\n        {isIdeaEmbedding ? 'Loading...' : 'Save Note'}\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom User Signup Fields (TypeScript)\nDESCRIPTION: This TypeScript version of the previous snippet demonstrates how to define custom user signup fields. It shows the process of adding an 'address' field with validation logic using the defineUserSignupFields function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Authentication Config Function\nDESCRIPTION: This snippet demonstrates the implementation of the Google authentication configuration function. It returns an object with the client ID, client secret, and scope for the OAuth provider.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/google.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport function getConfig() {\n  return {\n    clientID, // look up from env or elsewhere\n    clientSecret, // look up from env or elsewhere\n    scope: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reset Password Form in React\nDESCRIPTION: Example of implementing a password reset page using Wasp's ResetPasswordForm component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/ui.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\nroute PasswordResetRoute { path: \"/password-reset\", to: PasswordResetPage }\npage PasswordResetPage {\n  component: import { ResetPasswordPage } from \"@src/ResetPasswordPage.jsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ResetPasswordForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function ResetPasswordPage() {\n  return <ResetPasswordForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Type-Safe Link Component in JSX\nDESCRIPTION: Demonstrates how to use Wasp's custom Link component to create type-safe navigation links. The component ensures the path is valid and all required parameters are properly passed.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/links.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'wasp/client/router'\n\nexport const TaskList = () => {\n  // ...\n\n  return (\n    <div>\n      {tasks.map((task) => (\n        <Link\n          key={task.id}\n          to=\"/task/:id\"\n          {/* 👆 You must provide a valid path here */}\n          params={{ id: task.id }}>\n          {/* 👆 All the params must be correctly passed in */}\n          {task.description}\n        </Link>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Emails in JavaScript\nDESCRIPTION: Demonstrates how to send emails using the emailSender API in JavaScript. The example shows sending an email with from details, recipient, subject, and content in both text and HTML formats.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/email/email.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { emailSender } from \"wasp/server/email\";\n\n// In some action handler...\nconst info = await emailSender.send({\n  from: {\n    name: \"John Doe\",\n    email: \"john@doe.com\",\n  },\n  to: \"user@domain.com\",\n  subject: \"Saying hello\",\n  text: \"Hello world\",\n  html: \"Hello <strong>world</strong>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Page with Wasp Signup Form\nDESCRIPTION: This snippet demonstrates how to create a signup page using the SignupForm component provided by Wasp, including the necessary Wasp configuration and React component implementation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/ui.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { SignupPage } from \"@src/SignupPage.tsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignupForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function SignupPage() {\n  return <SignupForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in main.wasp\nDESCRIPTION: This snippet demonstrates how to define the User entity in the main.wasp file, including the required id field and placeholder for additional custom fields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/email.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    // Add your own fields below\n    // ...\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Provider User ID with `getFirstProviderUserId` in Wasp Auth (JS/TS)\nDESCRIPTION: Illustrates using the `getFirstProviderUserId` helper function from `wasp/auth` within a React component (JavaScript/TypeScript). This function returns the first available user identifier (e.g., email for email auth, Google ID for Google auth) associated with the user object. Requires the `user` object passed to it includes the `auth` and `identities` relations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/entities.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"src/MainPage.jsx\"\nimport { getFirstProviderUserId } from 'wasp/auth'\n\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {getFirstProviderUserId(task.user)}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n```\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/MainPage.tsx\"\nimport { getFirstProviderUserId } from 'wasp/auth'\n\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {getFirstProviderUserId(task.user)}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing First Provider User ID - getFirstProviderUserId in TypeScript (React Component)\nDESCRIPTION: Shows use of getFirstProviderUserId inside a React component written in TypeScript, enforcing strong typing on the user prop with AuthUser. Helps ensure type-safe retrieval of the provider user ID. Dependencies: wasp/auth TS package. Input: user of type AuthUser. Output: userId string or null.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/entities.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getFirstProviderUserId, AuthUser } from 'wasp/auth'\\n\\nconst MainPage = ({ user }: { user: AuthUser }) => {\\n  const userId = getFirstProviderUserId(user)\\n  // ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Wasp\nDESCRIPTION: This code defines the User entity in the Wasp file, which is required for Google authentication. It includes an id field as a primary key.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/google.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\n    id          Int     @id @default(autoincrement())\n    // ...\npsl=}\n```\n\n----------------------------------------\n\nTITLE: React Component Test with Mocked API in TypeScript\nDESCRIPTION: Shows how to test a React component that makes direct API calls in TypeScript, using mockApi to mock the API responses.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/testing.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type Task } from \"wasp/entities\";\nimport { api } from \"wasp/client/api\";\n\nconst Todo = (_props: {}) => {\n  const [tasks, setTasks] = useState<Task>([]);\n  useEffect(() => {\n    api\n      .get(\"/tasks\")\n      .then((res) => res.json() as Task[])\n      .then((tasks) => setTasks(tasks))\n      .catch((err) => window.alert(err));\n  });\n\n  return (\n    <ul>\n      {tasks &&\n        tasks.map((task) => (\n          <li key={task.id}>\n            <input type=\"checkbox\" value={task.isDone} />\n            {task.description}\n          </li>\n        ))}\n    </ul>\n  );\n};\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { test, expect } from \"vitest\";\nimport { screen } from \"@testing-library/react\";\n\nimport { mockServer, renderInContext } from \"wasp/client/test\";\nimport Todo from \"./Todo\";\n\nconst { mockApi } = mockServer();\n\nconst mockTasks = [\n  {\n    id: 1,\n    description: \"test todo 1\",\n    isDone: true,\n    userId: 1,\n  },\n];\n\ntest(\"handles mock data\", async () => {\n  mockApi(\"/tasks\", mockTasks);\n\n  renderInContext(<Todo />);\n\n  await screen.findByText(\"test todo 1\");\n\n  expect(screen.getByRole(\"checkbox\")).toBeChecked();\n\n  screen.debug();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Forgot Password Page with Wasp Form\nDESCRIPTION: This snippet shows how to create a forgot password page using the ForgotPasswordForm component provided by Wasp, including the necessary Wasp configuration and React component implementation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/ui.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\nroute RequestPasswordResetRoute { path: \"/request-password-reset\", to: RequestPasswordResetPage }\npage RequestPasswordResetPage {\n  component: import { ForgotPasswordPage } from \"@src/ForgotPasswordPage.tsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ForgotPasswordForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function ForgotPasswordPage() {\n  return <ForgotPasswordForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Queries with Entities (Wasp)\nDESCRIPTION: Example of declaring queries in a Wasp file, specifying the query function and associated entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/queries.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\nquery getAllTasks {\n  fn: import { getAllTasks } from \"@src/queries.js\",\n  entities: [Task]\n}\n\nquery getFilteredTasks {\n  fn: import { getFilteredTasks } from \"@src/queries.js\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Google User Identity Data in TypeScript\nDESCRIPTION: Demonstrates how to access a user's Google identity information and ID from a user object. This code extracts the Google-specific identity data and shows how to reference the unique Google User ID.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/entities/_google-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst googleIdentity = user.identities.google\n\n// Google User ID for example \"123456789012345678901\"\ngoogleIdentity.id\n```\n\n----------------------------------------\n\nTITLE: Integrating Task Form in Main Page Component\nDESCRIPTION: Integration of the NewTaskForm component into the main page, alongside existing task list functionality.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/06-actions.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      <NewTaskForm />\n\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating NavLink Active State\nDESCRIPTION: Shows how to update NavLink component's active state handling in React Router 6.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-14-to-0-15.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NavLink } from 'react-router-dom'\n\nexport function SomePage() {\n  return (\n    <NavLink\n      to=\"/new-route\"\n      isActive={(_match, location) => {\n        return location.pathname === '/new-route'\n      }}\n      className={(isActive) =>\n        cn('text-blue-500', {\n          underline: isActive,\n        })\n      }\n    >\n      Go to new route\n    </NavLink>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NavLink, useLocation } from 'react-router-dom'\n\nexport function SomePage() {\n  const location = useLocation()\n  return (\n    <NavLink\n      to=\"/new-route\"\n      className={() =>\n        cn('text-blue-500', {\n          underline: location.pathname === '/new-route',\n        })\n      }\n    >\n      Go to new route\n    </NavLink>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Auth in Wasp (TypeScript, API Reference)\nDESCRIPTION: This TypeScript Wasp configuration is repeated in the API Reference, showcasing the same provider setup for validation purposes, suitable for API documentation and demonstration of the expected integration points.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/github.md#2025-04-22_snippet_13\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/github.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/github.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Task Form Component in JavaScript/JSX\nDESCRIPTION: A React form component in JavaScript that handles task creation by submitting the form data to the createTask Action and handling any potential errors.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/06-actions.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { \n  createTask, \n  getTasks, \n  useQuery \n} from 'wasp/client/operations'\n\n// ... MainPage, TaskView, TaskList ...\n\nconst NewTaskForm = () => {\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    try {\n      const target = event.target\n      const description = target.description.value\n      target.reset()\n      await createTask({ description })\n    } catch (err) {\n      window.alert('Error: ' + err.message)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"description\" type=\"text\" defaultValue=\"\" />\n      <input type=\"submit\" value=\"Create task\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom User Signup Fields in Wasp\nDESCRIPTION: A Wasp configuration demonstrating how to customize the signup process by adding additional fields through the userSignupFields option. This allows extending the default user registration flow with custom fields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/username-and-pass.md#2025-04-22_snippet_11\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {\n        userSignupFields: import { userSignupFields } from \"@src/auth/email.js\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  }\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Defining Email Migration API Endpoint in Wasp\nDESCRIPTION: This Wasp code snippet defines an API endpoint named `migrateEmail`. It configures an HTTP GET route at `/migrate-email` and specifies that requests to this route should be handled by the `migrateEmailHandler` function imported from `@src/migrateToNewAuth`. No specific database entities are directly associated with this API definition.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_25\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napi migrateEmail {\n  httpRoute: (GET, \"/migrate-email\"),\n  fn: import { migrateEmailHandler } from \"@src/migrateToNewAuth\",\n  entities: []\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub OAuth Provider Config (JavaScript)\nDESCRIPTION: This function exports a config object for GitHub OAuth integration in JavaScript, where the 'scopes' array is specified. It returns the minimal configuration, and expects to be imported by the Wasp config. You can adjust the 'scopes' array to tailor the provider's permissions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/github.md#2025-04-22_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nexport function getConfig() {\n  return {\n    scopes: [],\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Wasp Database Seed Configuration\nDESCRIPTION: Demonstrates how to configure database seeds in a Wasp application configuration file. Shows the basic structure of importing seed functions in the app configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/databases.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  db: {\n    seeds: [\n      import devSeed from \"@src/dbSeeds.js\"\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migrations using Wasp CLI (Shell)\nDESCRIPTION: This shell command utilizes the Wasp CLI to apply pending Prisma migrations to the database by running `wasp db migrate-dev`. It should be executed after modifying entity definitions in the Prisma schema. The command connects with Prisma under the hood and updates the database structure to match the model definitions. No input parameters are required, but it must be run from the project directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/04-entities.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Submitting a Job in JavaScript\nDESCRIPTION: Code that demonstrates how to submit a job for execution in JavaScript, including immediate execution and delayed execution. The job is referenced from the Wasp-generated module.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/jobs.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mySpecialJob } from 'wasp/server/jobs'\n\nconst submittedJob = await mySpecialJob.submit({ job: \"Johnny\" })\n\n// Or, if you'd prefer it to execute in the future, just add a .delay().\n// It takes a number of seconds, Date, or ISO date string.\nawait mySpecialJob\n  .delay(10)\n  .submit({ name: \"Johnny\" })\n```\n\n----------------------------------------\n\nTITLE: Submitting a Delayed Job in TypeScript\nDESCRIPTION: This snippet demonstrates how to submit a delayed job with custom arguments and executor options using the TypeScript API.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/jobs.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst submittedJob = await mySpecialJob\n  .delay(10)\n  .submit({ job: \"args\" }, { \"retryLimit\": 2 })\n```\n\n----------------------------------------\n\nTITLE: Defining Email Verification Content in JavaScript\nDESCRIPTION: This snippet shows how to define the content for the email verification email in JavaScript for a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/email.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getVerificationEmailContent = ({ verificationLink }) => ({\n  subject: 'Verify your email',\n  text: `Click the link below to verify your email: ${verificationLink}`,\n  html: `\n        <p>Click the link below to verify your email</p>\n        <a href=\"${verificationLink}\">Verify email</a>\n    `,\n})\n```\n\n----------------------------------------\n\nTITLE: React Component Integration - TypeScript\nDESCRIPTION: Client-side React component implementation in TypeScript with proper type definitions and error handling for the updateTask action.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/06-actions.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormEvent, ChangeEvent } from 'react'\nimport { Task } from 'wasp/entities'\nimport {\n  updateTask,\n  createTask,\n  getTasks,\n  useQuery,\n} from 'wasp/client/operations'\n\nconst TaskView = ({ task }: { task: Task }) => {\n  const handleIsDoneChange = async (event: ChangeEvent<HTMLInputElement>) => {\n    try {\n      await updateTask({\n        id: task.id,\n        isDone: event.target.checked,\n      })\n    } catch (error: any) {\n      window.alert('Error while updating task: ' + error.message)\n    }\n  }\n\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        id={String(task.id)}\n        checked={task.isDone}\n        onChange={handleIsDoneChange}\n      />\n      {task.description}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client in Wasp Application (JavaScript)\nDESCRIPTION: Basic configuration for the client-side of a Wasp application in JavaScript, specifying a root component and setup function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/client-config.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.jsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring API in Wasp (TypeScript)\nDESCRIPTION: Demonstrates how to declare a custom API endpoint in a Wasp file using TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/apis.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar { // APIs and their implementations don't need to (but can) have the same name.\n  fn: import { fooBar } from \"@src/apis\",\n  httpRoute: (GET, \"/foo/bar\")\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a createTask Action in Wasp\nDESCRIPTION: Declaration of a createTask Action in main.wasp file that imports the implementation function and specifies the Task entity that will be affected by this Action.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/06-actions.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\naction createTask {\n  fn: import { createTask } from \"@src/actions\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Stored Values in Queries (TypeScript)\nDESCRIPTION: Shows how to use values stored during server setup in a query operation using TypeScript. The example demonstrates importing and using a function to access the stored resource within a typed query.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/server-config.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SomeQuery } from 'wasp/server/operations'\nimport { getSomeResource } from './myServerSetupCode.js'\n\n...\n\nexport const someQuery: SomeQuery<...> = async (args, context) => {\n  const someResource = getSomeResource()\n  return queryDataFromSomeResource(args, someResource)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Login Post-Processing Hook in Wasp (TypeScript) - wasp\nDESCRIPTION: Configures 'onAfterLogin' handler in main.wasp to execute a TypeScript function upon user login. Ensures hook is part of the Wasp authentication pipeline and imported from the correct TypeScript location.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_15\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  ...\n  auth: {\n    ...\n    onAfterLogin: import { onAfterLogin } from \"@src/auth/hooks\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Wasp\nDESCRIPTION: Demonstrates how to define a User entity in a Wasp file. This entity represents the business logic user and can be customized with additional fields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/entities.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\n  id Int @id @default(autoincrement())\n  // Any other fields you want to store about the user\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord Auth in Wasp File (JavaScript)\nDESCRIPTION: This snippet shows how to configure the auth object in the main.wasp file to enable Discord authentication for a JavaScript-based Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/discord.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      discord: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth in Wasp v0.12.X using Wasp Language\nDESCRIPTION: Example `main.wasp` configuration for authentication in Wasp 0.12.X. Wasp now automatically handles authentication models and fields. The developer only needs to define the `User` entity (referenced by `auth.userEntity`) for application-specific data, without needing explicit auth fields like password or associations. The `SocialLogin` entity is no longer defined by the user.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.12.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\nentity User {=psl\n  id Int @id @default(autoincrement())\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind Classes in React Components\nDESCRIPTION: Shows an example of using Tailwind CSS classes in a React component within a Wasp project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/css-frameworks.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// ...\n\n<h1 className=\"text-3xl font-bold underline\">\n  Hello world!\n</h1>\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Server-side Custom Signup Implementation (JavaScript, Node.js)\nDESCRIPTION: Defines the server-side implementation of a custom signup action for Wasp in JavaScript. It imports password and username validation utilities from 'wasp/server/auth', verifies inputs, sanitizes and hashes the password, and creates the user. Errors are caught and reported via a structured result object. Successful creation returns a confirmation message. This snippet assumes a Node.js environment and that 'wasp/server/auth' is available.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/username-and-pass.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n  ensurePasswordIsPresent,\n  ensureValidPassword,\n  ensureValidUsername,\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  createUser,\n} from 'wasp/server/auth'\n\nexport const signup = async (args, _context) => {\n  ensureValidUsername(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('username', args.username)\n    const providerData = await sanitizeAndSerializeProviderData({\n      hashedPassword: args.password,\n    })\n\n    await createUser(\n      providerId,\n      providerData,\n      // Any additional data you want to store on the User entity\n      {},\n    )\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Combined Customizations (Colors) in JavaScript\nDESCRIPTION: Defines a JavaScript object `appearance` (similar to `authAppearance` previously) in `src/appearance.js` containing custom color definitions (`brand`, `brandAccent`, `submitButtonText`). This is part of a combined example demonstrating multiple customizations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/ui.md#2025-04-22_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/appearance.js\"\nexport const appearance = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Logo to Auth UI in JavaScript\nDESCRIPTION: Illustrates how to add a custom logo to the Auth UI by importing a logo image and passing it as a prop to the LoginForm component in JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\nimport Logo from './logo.png'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass in the path to your logo\n      logo={Logo}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using WebSockets in React Component (TypeScript)\nDESCRIPTION: This TypeScript React component showcases the use of WebSockets on the client-side with full-stack type safety. It uses the useSocket and useSocketListener hooks, demonstrating type-safe event handling and payload typing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/web-sockets.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react'\nimport {\n  useSocket,\n  useSocketListener,\n  ServerToClientPayload,\n} from '@wasp/webSocket'\n\nexport const ChatPage = () => {\n  const [messageText, setMessageText] = useState<\n    ClientToServerPayload<'chatMessage'>\n  >('')\n  const [messages, setMessages] = useState<\n    ServerToClientPayload<'chatMessage'>[]\n  >([])\n  const { socket, isConnected } = useSocket()\n\n  useSocketListener('chatMessage', logMessage)\n\n  function logMessage(msg: ServerToClientPayload<'chatMessage'>) {\n    setMessages((priorMessages) => [msg, ...priorMessages])\n  }\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    socket.emit('chatMessage', messageText)\n    setMessageText('')\n  }\n\n  const messageList = messages.map((msg) => (\n    <li key={msg.id}>\n      <em>{msg.username}</em>: {msg.text}\n    </li>\n  ))\n  const connectionIcon = isConnected ? '🟢' : '🔴'\n\n  return (\n    <>\n      <h2>Chat {connectionIcon}</h2>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <div>\n            <div>\n              <input\n                type=\"text\"\n                value={messageText}\n                onChange={(e) => setMessageText(e.target.value)}\n              />\n            </div>\n            <div>\n              <button type=\"submit\">Submit</button>\n            </div>\n          </div>\n        </form>\n        <ul>{messageList}</ul>\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Verification Form\nDESCRIPTION: Implementation of an email verification page using Wasp's VerifyEmailForm component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/ui.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\nroute EmailVerificationRoute { path: \"/email-verification\", to: EmailVerificationPage }\npage EmailVerificationPage {\n  component: import { VerifyEmailPage } from \"@src/VerifyEmailPage.tsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VerifyEmailForm } from 'wasp/client/auth'\n\nexport function VerifyEmailPage() {\n  return <VerifyEmailForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub API Worker\nDESCRIPTION: A worker implementation that fetches GitHub repository metrics using Axios and returns them in the standard format for the dashboard.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-01-27-waspleau.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios'\n\nconst workerFunction = async (opts) => {\n  console.log('github.js workerFunction')\n\n  const now = Date.now()\n\n  try {\n    const response = await axios.get('https://api.github.com/repos/wasp-lang/wasp')\n\n    return [\n      { name: 'Wasp GitHub Stars', value: response.data.stargazers_count, updatedAt: now },\n      { name: 'Wasp GitHub Language', value: response.data.language, updatedAt: now },\n      { name: 'Wasp GitHub Forks', value: response.data.forks, updatedAt: now },\n      { name: 'Wasp GitHub Open Issues', value: response.data.open_issues, updatedAt: now },\n    ]\n  } catch (error) {\n    console.error(error)\n    return []\n  }\n}\n\nexport const githubWorker = { name: 'GitHub API', fn: workerFunction, schedule: '*/10 * * * *' }\n```\n\n----------------------------------------\n\nTITLE: TypeScript GitHub Auth Implementation\nDESCRIPTION: TypeScript implementation of GitHub authentication configuration with type definitions and user signup field mappings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/github.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  username: () => 'hardcoded-username',\n  displayName: (data: any) => data.profile.name,\n})\n\nexport function getConfig() {\n  return {\n    scopes: ['user'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Signup Fields in TypeScript\nDESCRIPTION: TypeScript version of defining additional signup fields. Shows how to validate user inputs during signup with proper type checking.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_24\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineAdditionalSignupFields } from '@wasp/auth/index.js'\n\nexport const fields = defineAdditionalSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyEmailPage Component in TypeScript\nDESCRIPTION: This snippet shows how to implement an email verification page component in TypeScript using Wasp's VerifyEmailForm component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VerifyEmailForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function VerifyEmailPage() {\n  return <VerifyEmailForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Wasp Project Interactively\nDESCRIPTION: Demonstrates the interactive process of creating a new Wasp project using the 'wasp new' command, including project name input and template selection.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/general/cli.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp new\nEnter the project name (e.g. my-project) ▸ MyFirstProject\nChoose a starter template\n[1] basic (default)\n    Simple starter template with a single page.\n[2] todo-ts\n    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.\n[3] saas\n    Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.\n[4] embeddings\n    Comes with code for generating vector embeddings and performing vector similarity search.\n[5] ai-generated\n    🤖 Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)\n▸ 1\n\n🐝 --- Creating your project from the \"basic\" template... -------------------------\n\nCreated new Wasp app in ./MyFirstProject directory!\n\nTo run your new app, do:\n    cd MyFirstProject\n    wasp db start\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Settings in main.wasp (JavaScript)\nDESCRIPTION: This snippet shows how to configure authentication settings in the main.wasp file for a JavaScript project. It includes setting up user entity, auth methods, and redirect routes for authentication failures and successes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_20\n\nLANGUAGE: wasp\nCODE:\n```\n  title: \"My app\",\n  //...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {}, // use this or email, not both\n      email: {}, // use this or usernameAndPassword, not both\n      google: {},\n      gitHub: {},\n    },\n    onAuthFailedRedirectTo: \"/someRoute\",\n  }\n}\n\n//...\n```\n\n----------------------------------------\n\nTITLE: MainPage Component Implementation (JavaScript)\nDESCRIPTION: Implements the MainPage React functional component in JavaScript, importing a logo and a CSS file from the local directory. Needs React, and assumes waspLogo.png and Main.css are present alongside the file. The code can be extended to render the app's main content. Input: none explicitly; Output: renders content via React.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/03-pages.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport waspLogo from './waspLogo.png'\nimport './Main.css'\n\nexport const MainPage = () => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Root Component Import - JavaScript (main.wasp)\nDESCRIPTION: Specifies the root component for the Wasp app client using a JavaScript React component. The import must point to a valid JSX file exporting the main wrapper. Only the rootComponent field is used, omitting setupFn. Ensures the specified layout is mounted as the application's entry point.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/client-config.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.jsx\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Blog Post Header\nDESCRIPTION: Frontmatter configuration for a blog post about GPT web app generator implementation\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-07-17-how-we-built-gpt-web-app-generator.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'How we built a GPT code agent that generates full-stack web apps in React & Node.js, explained simply'\nauthors: [martinsos]\nimage: /img/how-we-built-gpt-wasp/generator-logs.png\ntags: [mage, wasp-ai, GPT]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Combined Customizations in TypeScript\nDESCRIPTION: Exports a typed TypeScript object `appearance` defining custom color tokens using `CustomizationOptions['appearance']`. This facilitates applying multiple customizations (colors, logo) with type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/ui.md#2025-04-22_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/appearance.ts\"\nimport type { CustomizationOptions } from 'wasp/client/auth'\n\nexport const appearance: CustomizationOptions['appearance'] = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeSignup Hook\nDESCRIPTION: Hook that runs before user signup. Receives providerId, prisma, and req as input parameters. Return value is ignored by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nexport const onBeforeSignup = async ({ providerId, prisma, req }) => {\n  // Hook code goes here\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OnBeforeSignupHook } from 'wasp/server/auth'\n\nexport const onBeforeSignup: OnBeforeSignupHook = async ({\n  providerId,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Root Component with Redux Provider - TypeScript (src\\/Root.tsx)\nDESCRIPTION: Provides a TypeScript version of the root component integrating React Redux. Accepts a typed children prop, and requires both './store' and the 'react-redux' library as dependencies. Renders the app content inside the Redux Provider, preserving type safety throughout.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/client-config.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root({ children }: { children: React.ReactNode }) {\n  return <Provider store={store}>{children}</Provider>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Signup Action in Wasp Config\nDESCRIPTION: Wasp configuration for defining a custom signup action, importing the function from a JavaScript file and specifying required entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/entities.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\naction customSignup {\n  fn: import { signup } from \"@src/auth/signup.js\",\n  entities: [User]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Type-Safe Job Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement a type-safe job function in TypeScript, using the generated type for the job declaration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/jobs.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type MySpecialJob } from 'wasp/server/jobs'\n\ntype Input = { name: string; }\ntype Output = { tasks: Task[]; }\n\nexport const foo: MySpecialJob<Input, Output> = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Signup Page with Wasp Auth UI (JavaScript)\nDESCRIPTION: This React component (SignupPage.jsx) shows how to create a user registration page using Wasp's Auth UI. It imports and renders the `SignupForm` component from `wasp/client/auth` within a simple centered layout.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"src/SignupPage.jsx\"\nimport { SignupForm } from 'wasp/client/auth'\n\nexport function SignupPage() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        placeContent: 'center',\n      }}\n    >\n      <SignupForm />\n    </div>\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Client in Setup Function (TypeScript)\nDESCRIPTION: TypeScript implementation of a setup function that configures the React Query client with custom defaults for all queries in the application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/client-config.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { configureQueryClient } from 'wasp/client/operations'\n\nexport default async function mySetupFunction(): Promise<void> {\n  // ... some setup\n  configureQueryClient({\n    defaultOptions: {\n      queries: {\n        staleTime: Infinity,\n      },\n    },\n  })\n  // ... some more setup\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying to a Specific Fly.io Organization\nDESCRIPTION: Command for deploying a Wasp application to a specific Fly.io organization, using the 'mia' region and 'hive' organization.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/cli.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly launch my-wasp-app mia --org hive\n```\n\n----------------------------------------\n\nTITLE: Creating Auth Pages using Wasp Components in React (TypeScript)\nDESCRIPTION: Defines several React functional components (Login, Signup, EmailVerification, RequestPasswordReset, PasswordReset) within `src/pages/auth.tsx`. These components utilize pre-built Wasp authentication UI components (`LoginForm`, `SignupForm`, etc.) and `react-router-dom`'s `Link` for navigation. TypeScript is used, including type annotations for props (e.g., `children: React.ReactNode` in the `Layout` component). A shared `Layout` component provides consistent centering and styling using Tailwind CSS.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/email.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/pages/auth.tsx\"\nimport {\n  LoginForm,\n  SignupForm,\n  VerifyEmailForm,\n  ForgotPasswordForm,\n  ResetPasswordForm,\n} from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Don't have an account yet? <Link to=\"/signup\">go to signup</Link>.\n      </span>\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Forgot your password? <Link to=\"/request-password-reset\">reset it</Link>\n        .\n      </span>\n    </Layout>\n  );\n}\n\nexport function Signup() {\n  return (\n    <Layout>\n      <SignupForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </Layout>\n  );\n}\n\nexport function EmailVerification() {\n  return (\n    <Layout>\n      <VerifyEmailForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        If everything is okay, <Link to=\"/login\">go to login</Link>\n      </span>\n    </Layout>\n  );\n}\n\nexport function RequestPasswordReset() {\n  return (\n    <Layout>\n      <ForgotPasswordForm />\n    </Layout>\n  );\n}\n\nexport function PasswordReset() {\n  return (\n    <Layout>\n      <ResetPasswordForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        If everything is okay, <Link to=\"/login\">go to login</Link>\n      </span>\n    </Layout>\n  );\n}\n\n// A layout component to center the content\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"w-full h-full bg-white\">\n      <div className=\"min-w-full min-h-[75vh] flex items-center justify-center\">\n        <div className=\"w-full h-full max-w-sm p-5 bg-white\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining User Signup Fields in JavaScript\nDESCRIPTION: This code snippet shows how to define additional user signup fields using the `defineUserSignupFields` function from Wasp. It includes validation for the 'address' field and assigns the 'phone' field directly.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/_user-signup-fields-explainer.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: (data) => {\n    if (!data.address) {\n      throw new Error('Address is required')\n    }\n    return data.address\n  }\n  phone: (data) => data.phone,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Todo List React Component Using API Calls - JavaScript (JSX)\nDESCRIPTION: Implements a React Todo component that fetches tasks using Wasp's API client (api.get) instead of a query, storing results in local state. Requires useState and useEffect React hooks, wasp/client/api, and React. Designed to facilitate mocking API endpoint responses in tests, supporting more integration-style test setups.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/testing.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { api } from \"wasp/client/api\";\n\nconst Todo = (_props) => {\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    api\n      .get(\"/tasks\")\n      .then((res) => res.json())\n      .then((tasks) => setTasks(tasks))\n      .catch((err) => window.alert(err));\n  });\n\n  return (\n    <ul>\n      {tasks &&\n        tasks.map((task) => (\n          <li key={task.id}>\n            <input type=\"checkbox\" value={task.isDone} />\n            {task.description}\n          </li>\n        ))}\n    </ul>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Keycloak User ID from Identity Object\nDESCRIPTION: Retrieves the Keycloak identity object from a user's identities collection and accesses the ID property. The ID is typically a UUID format string like '12345678-1234-1234-1234-123456789012'.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/_keycloak-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst keycloakIdentity = user.identities.keycloak\n\n// Keycloak User ID for example \"12345678-1234-1234-1234-123456789012\"\nkeycloakIdentity.id\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Auth UI Colors in TypeScript\nDESCRIPTION: Exports a TypeScript object `authAppearance` defining custom color tokens. It uses the `CustomizationOptions['appearance']` type from `wasp/client/auth` for type safety when overriding the default Wasp Auth UI theme colors.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/ui.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/appearance.ts\"\nimport type { CustomizationOptions } from 'wasp/client/auth'\n\nexport const authAppearance: CustomizationOptions['appearance'] = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Optional Static Segment in Wasp\nDESCRIPTION: Demonstrates how to define a route with an optional static segment in the main.wasp file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/links.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\nroute OptionalRoute { path: \"/task/:id/details?\", to: OptionalPage }\npage OptionalPage { ... }\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable to Skip Email Verification in Dev (env)\nDESCRIPTION: Sets the SKIP_EMAIL_VERIFICATION_IN_DEV environment variable to 'true' in a .env.server file to bypass email verification in development mode. This enables developers to test signup flows without verifying email each time. Required: the .env.server configuration file, part of Wasp app's backend. Input is a boolean string; output is modified authentication flow in dev mode.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_6\n\nLANGUAGE: env\nCODE:\n```\nSKIP_EMAIL_VERIFICATION_IN_DEV=true\n\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Colors to LoginForm in TypeScript/TSX\nDESCRIPTION: Shows how to import the typed `authAppearance` object and pass it to the `LoginForm` component (imported from `wasp/client/auth`) via the `appearance` prop within a React/TSX component (`src/LoginPage.tsx`), ensuring type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/ui.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/LoginPage.tsx\"\nimport { LoginForm } from 'wasp/client/auth'\nimport { authAppearance } from './appearance'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass the appearance object to the form\n      appearance={authAppearance}\n    />\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Actions in a React Component (JavaScript)\nDESCRIPTION: Demonstrates how to use Actions within a React component in JavaScript. It includes importing Actions and using them in event handlers.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\n// highlight-next-line\nimport { useQuery, getTask, markTaskAsDone } from 'wasp/client/operations'\n\nexport const TaskPage = ({ id }) => {\n  const { data: task } = useQuery(getTask, { id })\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>\n  }\n\n  const { description, isDone } = task\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n      {isDone || (\n        // highlight-next-line\n        <button onClick={() => markTaskAsDone({ id })}>Mark as done.</button>\n      )}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Update Task Action in Wasp\nDESCRIPTION: Defines the updateTask action in the Wasp configuration file, connecting it to the implementation function and specifying Task entity access.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/06-actions.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\naction updateTask {\n  fn: import { updateTask } from \"@src/actions\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes and Pages in Wasp\nDESCRIPTION: Defines routing and page configuration for the home page with authentication requirement.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/introduction/introduction.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\nroute HomeRoute { path: \"/\", to: HomePage }\npage HomePage {\n  component: import { HomePage } from \"@src/pages/HomePage\",\n  authRequired: true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Signup Fields with Wasp in TypeScript\nDESCRIPTION: This TypeScript snippet provides the same field customization and validation functionality for Wasp user sign-up as the JavaScript version but with TypeScript's static typing support. Place this code in your `src/auth.ts` file. It ensures that the `address` field is validated upon registration, throwing an error if not present, and allows the `phone` field to be mapped without custom validation. Make sure TypeScript is properly configured in your project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/_user-signup-fields-explainer.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: (data) => {\n    if (!data.address) {\n      throw new Error('Address is required')\n    }\n    return data.address\n  }\n  phone: (data) => data.phone,\n})\n```\n\n----------------------------------------\n\nTITLE: Viewing Wasp 0.12.0 Project Structure\nDESCRIPTION: Shows the updated directory layout for a Wasp project created with version 0.12.0. Notable changes include the removal of `src/client` and `src/server` subdirectories (code can now be organized freely within `src`), the addition of a root-level `public` directory for static assets, and the inclusion of configuration files like `package.json`, `tsconfig.json`, and `vite.config.ts` at the project root.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.\n├── .gitignore\n├── main.wasp\n├── package.json\n├── public\n│   └── .gitkeep\n├── src\n│   ├── Main.css\n│   ├── MainPage.jsx\n│   ├── queries.ts\n│   ├── vite-env.d.ts\n│   ├── .waspignore\n│   └── waspLogo.png\n├── tsconfig.json\n├── vite.config.ts\n└── .wasproot\n```\n\n----------------------------------------\n\nTITLE: Implementing VerifyEmailPage Component in JavaScript\nDESCRIPTION: This snippet shows how to implement an email verification page component in JavaScript using Wasp's VerifyEmailForm component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport { VerifyEmailForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function VerifyEmailPage() {\n  return <VerifyEmailForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Wasp Project Interactively\nDESCRIPTION: Demonstrates the interactive process initiated by running `wasp new` without arguments. The CLI prompts the user to enter a project name and then select a starter template from a list. After selection, it creates the project directory and provides instructions for starting the application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/general/cli.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp new\nEnter the project name (e.g. my-project) ▸ MyFirstProject\nChoose a starter template\n[1] basic (default)\n    Simple starter template with a single page.\n[2] todo-ts\n    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.\n[3] saas\n    Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.\n[4] embeddings\n    Comes with code for generating vector embeddings and performing vector similarity search.\n[5] ai-generated\n    🤖 Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)\n▸ 1\n\n🐝 --- Creating your project from the \"basic\" template... -------------------------\n\nCreated new Wasp app in ./MyFirstProject directory!\n\nTo run your new app, do:\n    cd MyFirstProject\n    wasp db start\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database Provider in Prisma Schema\nDESCRIPTION: This code snippet demonstrates how to configure PostgreSQL as the database provider in the Prisma schema file. It sets the provider to 'postgresql' and uses an environment variable for the database URL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/databases.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Consuming an API from React Client in JavaScript\nDESCRIPTION: Shows how to call a custom API endpoint from a React component in JavaScript using the Axios wrapper provided by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/apis.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect } from \"react\";\nimport { api } from \"wasp/client/api\";\n\nasync function fetchCustomRoute() {\n  const res = await api.get(\"/foo/bar\");\n  console.log(res.data);\n}\n\nexport const Foo = () => {\n  useEffect(() => {\n    fetchCustomRoute();\n  }, []);\n\n  return <>// ...</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Route in Server Setup Function (TypeScript)\nDESCRIPTION: This example shows how to add a custom route using the server setup function in TypeScript. It includes type definitions for the setup function and Express application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/server-config.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ServerSetupFn, Application } from '@wasp/types'\n\nexport const mySetupFunction: ServerSetupFn = async ({ app }) => {\n  addCustomRoute(app)\n}\n\nfunction addCustomRoute(app: Application) {\n  app.get('/customRoute', (_req, res) => {\n    res.send('I am a custom route')\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Global Middleware Implementation in JavaScript\nDESCRIPTION: JavaScript implementation of a global middleware configuration function that extends the default CORS settings to include additional domains.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/middleware-config.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport cors from 'cors'\nimport { config } from 'wasp/server'\n\nexport const serverMiddlewareFn = (middlewareConfig) => {\n  // Example of adding extra domains to CORS.\n  middlewareConfig.set('cors', cors({ origin: [config.frontendUrl, 'https://example1.com', 'https://example2.com'] }))\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: AuthIdentity Entity Structure in Prisma Schema Language\nDESCRIPTION: Defines the structure of the AuthIdentity entity, which stores user login credentials for various authentication methods.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/entities.md#2025-04-22_snippet_2\n\nLANGUAGE: psl\nCODE:\n```\nentity AuthIdentity {=psl\n  providerName   String\n  providerUserId String\n  providerData   String @default(\"{}\")\n  authId         String\n  auth           Auth   @relation(fields: [authId], references: [id], onDelete: Cascade)\n\n  @@id([providerName, providerUserId])  \npsl=}\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Reset Client Route in Wasp\nDESCRIPTION: Configures the password reset flow within the `main.wasp` file. This snippet defines the `passwordReset` property within the Wasp configuration, specifying `PasswordResetRoute` (assumed to be defined elsewhere in `main.wasp`) as the `clientRoute`. This route corresponds to the page users are directed to when they click the password reset link in their email.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/email.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\n// ...\n\npasswordReset: {\n    clientRoute: PasswordResetRoute,\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Form in React\nDESCRIPTION: Example of implementing a signup page using Wasp's SignupForm component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/ui.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { SignupPage } from \"@src/SignupPage.jsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignupForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function SignupPage() {\n  return <SignupForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Password Reset Email Content in JavaScript\nDESCRIPTION: This snippet shows how to define the content for the password reset email in JavaScript for a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/email.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getPasswordResetEmailContent = ({ passwordResetLink }) => ({\n  subject: 'Password reset',\n  text: `Click the link below to reset your password: ${passwordResetLink}`,\n  html: `\n        <p>Click the link below to reset your password</p>\n        <a href=\"${passwordResetLink}\">Reset password</a>\n    `,\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Database Seeding Function\nDESCRIPTION: TypeScript version of the database seeding function with proper type annotations and interfaces.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/databases.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTask } from './actions.js'\nimport { type DbSeedFn } from 'wasp/server'\nimport { sanitizeAndSerializeProviderData } from 'wasp/server/auth'\nimport { type AuthUser } from 'wasp/auth'\nimport { PrismaClient } from '@prisma/client'\n\nexport const devSeedSimple: DbSeedFn = async (prisma) => {\n  const user = await createUser(prisma, {\n    username: 'RiuTheDog',\n    password: 'bark1234',\n  })\n\n  await createTask(\n    { description: 'Chase the cat', isDone: false },\n    { user, entities: { Task: prisma.task } }\n  )\n};\n\nasync function createUser(\n  prisma: PrismaClient,\n  data: { username: string, password: string }\n): Promise<AuthUser> {\n  const newUser = await prisma.user.create({\n    data: {\n      auth: {\n        create: {\n          identities: {\n            create: {\n              providerName: 'username',\n              providerUserId: data.username,\n              providerData: await sanitizeAndSerializeProviderData<'username'>({\n                hashedPassword: data.password\n              }),\n            },\n          },\n        },\n      },\n    },\n  })\n\n  return newUser\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Seeds in TypeScript\nDESCRIPTION: Example of configuring database seeds in a Wasp application using TypeScript. This shows how to import a seed function that can be run with the 'wasp db seed' command.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/backends.md#2025-04-22_snippet_15\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    // ...\n    seeds: [\n      // ...\n      import { devSeedSimple } from \"@src/dbSeeds.js\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Google Auth Configuration\nDESCRIPTION: TypeScript implementation of Google auth configuration with type definitions for user signup fields and OAuth scopes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/google.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  username: () => 'hardcoded-username',\n  displayName: (data: any) => data.profile.name,\n})\n\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Page with CRUD Operations in React (TypeScript)\nDESCRIPTION: This TypeScript version of the MainPage component uses Wasp's generated CRUD operations for Tasks. It showcases full-stack type safety with automatic payload type inference.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/crud.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tasks } from '@wasp/crud/Tasks'\nimport { useState } from 'react'\n\nexport const MainPage = () => {\n  const { data: tasks, isLoading, error } = Tasks.getAll.useQuery()\n  const createTask = Tasks.create.useAction()\n  const [taskDescription, setTaskDescription] = useState('')\n\n  function handleCreateTask() {\n    createTask({ description: taskDescription, isDone: false })\n    setTaskDescription('')\n  }\n\n  if (isLoading) return <div>Loading...</div>\n  if (error) return <div>Error: {error.message}</div>\n  return (\n    <div\n      style={{\n        fontSize: '1.5rem',\n        display: 'grid',\n        placeContent: 'center',\n        height: '100vh',\n      }}\n    >\n      <div>\n        <input\n          value={taskDescription}\n          onChange={(e) => setTaskDescription(e.target.value)}\n        />\n        <button onClick={handleCreateTask}>Create task</button>\n      </div>\n      <ul>\n        {tasks.map((task) => (\n          <li key={task.id}>{task.description}</li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Keycloak User Signup Fields and Config - TypeScript\nDESCRIPTION: This TypeScript code snippet shows how to define user signup field extractors using Wasp's defineUserSignupFields helper, as well as the configuration function for setting OAuth scopes. It requires 'wasp/server/auth' for helpers, and targets integration with the Keycloak provider using the expected profile data shape. The username is currently hardcoded, and displayName is taken from the returned profile object. Inputs are Keycloak's OAuth response data; outputs are mapped user fields and OAuth scopes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/keycloak.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  username: () => \"hardcoded-username\",\n  displayName: (data: any) => data.profile.name,\n})\n\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Todo Component Using Direct API Calls in JavaScript\nDESCRIPTION: A React component that fetches tasks using direct API calls with Wasp's api utility rather than useQuery, demonstrating another approach to data fetching.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/testing.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { api } from \"wasp/client/api\";\n\nconst Todo = (_props) => {\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    api\n      .get(\"/tasks\")\n      .then((res) => res.json())\n      .then((tasks) => setTasks(tasks))\n      .catch((err) => window.alert(err));\n  });\n\n  return (\n    <ul>\n      {tasks &&\n        tasks.map((task) => (\n          <li key={task.id}>\n            <input type=\"checkbox\" value={task.isDone} />\n            {task.description}\n          </li>\n        ))}\n    </ul>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Updating OAuth Config Function in TypeScript (After)\nDESCRIPTION: Demonstrates the new format of the OAuth configuration function in Wasp 0.13.0, with the scope property renamed to scopes and removal of clientID and clientSecret.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getConfig() {\n    return {\n        scopes: ['profile', 'email'],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub User Data Structure\nDESCRIPTION: This JSON snippet illustrates the structure of user data received from GitHub's API. It includes basic user information such as login, id, name, and avatar URL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/github.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"login\": \"octocat\",\n  \"id\": 1,\n  \"name\": \"monalisa octocat\",\n  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n  \"gravatar_id\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Action Type for Implementation (TypeScript)\nDESCRIPTION: Imports the TypeScript type for the generated action (CreateSomething), allowing the implementation function to be properly typed in terms of its expected arguments and return value. Ensures correct implementation contract for Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nimport { type CreateSomething } from 'wasp/server/operations'\n```\n\n----------------------------------------\n\nTITLE: Viewing Combined Dockerfile with Wasp CLI\nDESCRIPTION: This command shows the potentially combined Dockerfile for a Wasp project, including any custom modifications.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwasp dockerfile\n```\n\n----------------------------------------\n\nTITLE: Defining Custom User Signup Fields in JavaScript\nDESCRIPTION: Shows how to define custom user signup fields with validation in JavaScript. This example adds an address field with length validation during the signup process.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/overview.md#2025-04-22_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring an Action in Wasp\nDESCRIPTION: A basic Wasp action declaration that imports a function from a JavaScript file and specifies the Foo entity for use within the action.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/actions.md#2025-04-22_snippet_13\n\nLANGUAGE: wasp\nCODE:\n```\naction createFoo {\n    fn: import { createFoo } from \"@src/actions.js\"\n    entities: [Foo]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onAfterSignup Hook\nDESCRIPTION: Hook that runs after successful user signup. Receives providerId, user, oauth, prisma, and req as input parameters. Return value is ignored by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nexport const onAfterSignup = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OnAfterSignupHook } from 'wasp/server/auth'\n\nexport const onAfterSignup: OnAfterSignupHook = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type Signature for Additional Signup Field Render Function (TypeScript)\nDESCRIPTION: Specifies the TypeScript type signature `AdditionalSignupFieldRenderFn` for the render function used within the `additionalFields` prop of `SignupForm`. It clarifies that the function accepts two arguments: `hookForm` (the `UseFormReturn` object from `react-hook-form`) and `formState` (an object containing `isLoading` boolean), and it is expected to return a `React.ReactNode`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\ntype AdditionalSignupFieldRenderFn = (\n   hookForm: UseFormReturn,\n   formState: FormState\n ) => React.ReactNode\n`  ``\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Backend Function - JavaScript\nDESCRIPTION: This JavaScript code exports the getFoo function, which serves as the backend implementation for the getFoo query declared in Wasp. The function accepts args and context parameters and should contain the logic to retrieve or process data for the Foo entity. No external dependencies are shown, but typically the implementation relies on application-specific models/services available in context. Args provides the query input, and the function returns the query result, usually via promise. The function must be exported as a named export to match the Wasp query declaration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/queries.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getFoo = (args, context) => {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the User Model in Prisma\nDESCRIPTION: This Prisma schema defines the `User` model referenced in the Wasp authentication configuration. It includes basic fields like `id` (auto-incrementing integer), a unique `username`, and a `displayName`. This model will store user information, potentially populated using data from GitHub upon signup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/github.md#2025-04-22_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          Int    @id @default(autoincrement())\n  username    String @unique\n  displayName String\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using Entities in API Implementation (JavaScript)\nDESCRIPTION: Shows how to use entities in the API implementation in JavaScript, accessing the entity through the context object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/apis.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport const fooBar = (req, res, context) => {\n  res.json({ count: await context.entities.Task.count() });\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Configuration with Wasp in JavaScript\nDESCRIPTION: Shows how to access the client-side configuration object by importing the 'config' object from 'wasp/client' within a Wasp React application. The snippet logs the 'apiUrl' property, whose value is determined by the REACT_APP_API_URL environment variable. Only standard Wasp dependencies are needed. The output will be the backend URL string that the client should use to communicate with the server.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/accessing-app-config.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { config } from 'wasp/client'\n\nconsole.log(config.apiUrl)\n```\n\n----------------------------------------\n\nTITLE: Client-Side API Usage\nDESCRIPTION: Example of calling the custom API endpoint from a React component using the Wasp API client wrapper.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/apis.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useEffect } from \"react\";\nimport { api } from \"wasp/client/api\";\n\nasync function fetchCustomRoute() {\n  const res = await api.get(\"/foo/bar\");\n  console.log(res.data);\n}\n\nexport const Foo = () => {\n  useEffect(() => {\n    fetchCustomRoute();\n  }, []);\n\n  return <>// ...</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Signup Action in Wasp\nDESCRIPTION: Declaration of a custom signup action in the Wasp configuration file, importing the implementation from a JavaScript file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/email.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\naction customSignup {\n  fn: import { signup } from \"@src/auth/signup.js\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Typed Utility Function for Testing (TypeScript)\nDESCRIPTION: A simple TypeScript helper function `areThereAnyTasks` defined in `src/helpers.ts`. It takes a typed array of `Task` (imported from `wasp/entities`) and returns a boolean indicating if the array is empty. This function is intended for unit testing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/testing.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { type Task } from \"wasp/entities\";\n\nexport function areThereAnyTasks(tasks: Task[]): boolean {\n  return tasks.length === 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating MainPage Component with NewTaskForm in JavaScript/JSX\nDESCRIPTION: This code updates the MainPage component in JavaScript/JSX to include the NewTaskForm component. It also demonstrates the use of the getTasks query and error handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/06-actions.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      <NewTaskForm />\n\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page Component in TypeScript\nDESCRIPTION: Creates the LoginPage React component in TypeScript that utilizes the Wasp-provided LoginForm. This component renders the login form and provides a link to the signup page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/07-auth.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\nimport { LoginForm } from 'wasp/client/auth'\n\nexport const LoginPage = () => {\n  return (\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\n      <LoginForm />\n      <br />\n      <span>\n        I don't have an account yet (<Link to=\"/signup\">go to signup</Link>).\n      </span>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Lucia Authentication Configuration\nDESCRIPTION: Setup and configuration of Lucia authentication including adapter setup, session management, and GitHub OAuth initialization.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-13-how-to-add-auth-with-lucia-to-your-react-nextjs-app.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Lucia } from \"lucia\";\nimport { BetterSqlite3Adapter } from \"@lucia-auth/adapter-sqlite\";\nimport { db } from \"./db\";\nimport { cookies } from \"next/headers\";\nimport { cache } from \"react\";\nimport { GitHub } from \"arctic\";\n\nimport type { Session, User } from \"lucia\";\nimport type { DatabaseUser } from \"./db\";\n\nconst adapter = new BetterSqlite3Adapter(db, {\n  user: \"user\",\n  session: \"session\"\n});\n\nexport const lucia = new Lucia(adapter, {\n  sessionCookie: {\n    attributes: {\n      secure: process.env.NODE_ENV === \"production\"\n    }\n  },\n  getUserAttributes: (attributes) => {\n    return {\n      githubId: attributes.github_id,\n      username: attributes.username\n    };\n  }\n});\n\ndeclare module \"lucia\" {\n  interface Register {\n    Lucia: typeof lucia;\n    DatabaseUserAttributes: Omit<DatabaseUser, \"id\">;\n  }\n}\n\nexport const validateRequest = cache(\n  async (): Promise<{ user: User; session: Session } | { user: null; session: null }> => {\n    const sessionId = cookies().get(lucia.sessionCookieName)?.value ?? null;\n    if (!sessionId) {\n      return {\n        user: null,\n        session: null\n      };\n    }\n\n    const result = await lucia.validateSession(sessionId);\n    try {\n      if (result.session && result.session.fresh) {\n        const sessionCookie = lucia.createSessionCookie(result.session.id);\n        cookies().set(sessionCookie.name, sessionCookie.value, sessionCookie.attributes);\n      }\n      if (!result.session) {\n        const sessionCookie = lucia.createBlankSessionCookie();\n        cookies().set(sessionCookie.name, sessionCookie.value, sessionCookie.attributes);\n      }\n    } catch {}\n    return result;\n  }\n);\n\nexport const github = new GitHub(process.env.GITHUB_CLIENT_ID!, process.env.GITHUB_CLIENT_SECRET!);\n```\n\n----------------------------------------\n\nTITLE: Submitting a Wasp Job for Execution (JavaScript)\nDESCRIPTION: Shows the basic usage of the `.submit()` method on an imported job object (`mySpecialJob`) in JavaScript. This asynchronously submits the job to the configured executor (`PgBoss`) for processing, passing the specified arguments (`{ job: \"args\" }`) to the job's worker function. The method returns a promise resolving to the submitted job details.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/jobs.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"someAction.js\"\nconst submittedJob = await mySpecialJob.submit({ job: \"args\" })\n```\n```\n\n----------------------------------------\n\nTITLE: Defining User and Task Entities with Relations - Prisma\nDESCRIPTION: This snippet defines both \"User\" and \"Task\" models in Prisma schema, establishing a one-to-many relationship between users and their tasks using a foreign key constraint. This schema structure is necessary for supporting authentication and per-user task management in the app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/crud.md#2025-04-22_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id    Int    @id @default(autoincrement())\n  tasks Task[]\n}\n\n// We defined a Task entity on which we'll enable CRUD later on\nmodel Task {\n  id          Int     @id @default(autoincrement())\n  description String\n  isDone      Boolean\n  userId      Int\n  user        User    @relation(fields: [userId], references: [id])\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing userSignupFields for Google Auth in TypeScript\nDESCRIPTION: This TypeScript code defines the userSignupFields function for Google authentication using the defineUserSignupFields helper.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  isSignupComplete: () => false,\n})\n```\n\n----------------------------------------\n\nTITLE: Email Verification Content Generation\nDESCRIPTION: Function for generating verification email content with customizable subject, text, and HTML body\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/email.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getVerificationEmailContent = ({ verificationLink }) => ({\n  subject: 'Verify your email',\n  text: `Click the link below to verify your email: ${verificationLink}`,\n  html: `\n          <p>Click the link below to verify your email</p>\n          <a href=\"${verificationLink}\">Verify email</a>\n      `,\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetVerificationEmailContentFn } from 'wasp/server/auth'\n\nexport const getVerificationEmailContent: GetVerificationEmailContentFn = ({\n  verificationLink,\n}) => ({\n  subject: 'Verify your email',\n  text: `Click the link below to verify your email: ${verificationLink}`,\n  html: `\n          <p>Click the link below to verify your email</p>\n          <a href=\"${verificationLink}\">Verify email</a>\n      `,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing API Middleware in TypeScript\nDESCRIPTION: Example of implementing API middleware configuration function in TypeScript with proper type definition, returning the default configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/apis.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MiddlewareConfigFn } from \"wasp/server\";\nexport const apiMiddleware: MiddlewareConfigFn = (config) => {\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Mocking a Query in Client Tests - JavaScript\nDESCRIPTION: Shows mocking a Wasp query using mockQuery, setting it to return a specific empty array. Useful when a component relies on useQuery for data fetching. Use in conjunction with React component tests or unit tests. Requires mockServer() setup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/testing.md#2025-04-22_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nimport { getTasks } from \\\"wasp/client/operations\\\";\\n\\nmockQuery(getTasks, []);\n```\n\n----------------------------------------\n\nTITLE: React JSX Blog Post Header Configuration\nDESCRIPTION: Front matter configuration for a blog post including title, authors, image path, and tags using YAML syntax in markdown.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-02-14-amicus-indiehacker-interview.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"From Idea to Paying Customers in 1 Week: An Interview with Amicus.work\"\nauthors: [vinny]\nimage: /img/amicus-usecase/amicus-homepage.png\ntags: [SaaS, IndieHacker, Solopreneur, Interview]\n---\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Queries with TypeScript\nDESCRIPTION: Shows error handling in Queries using TypeScript, including type annotations for the Query function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/queries.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetAllTasks } from 'wasp/server/operations'\nimport { HttpError } from 'wasp/server'\n\nexport const getAllTasks: GetAllTasks = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Root Route and Main Page in Wasp (TypeScript)\nDESCRIPTION: Declares the root route (`/`) named `RootRoute` and associates it with the `MainPage`. The `MainPage` definition specifies that its implementation is imported from the `MainPage` export in `src/MainPage.tsx` using standard JS import syntax. The `@src` alias refers to the `src` directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/03-pages.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  // We specify that the React implementation of the page is exported from\n  // `src/MainPage.tsx`. This statement uses standard JS import syntax.\n  // Use `@src` to reference files inside the `src` folder.\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Reset in JavaScript\nDESCRIPTION: This snippet shows how to use the resetPassword action to complete the password reset process on the client-side in JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { resetPassword } from 'wasp/client/auth'\n...\nawait resetPassword({ password, token })\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with useAction Hook in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the useAction hook to implement optimistic updates for a task completion action in a React component. It shows the configuration of optimisticUpdates and how to use the enhanced action in the component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {\n  useQuery,\n  useAction,\n  getTask,\n  markTaskAsDone,\n} from 'wasp/client/operations'\n\nconst TaskPage = ({ id }) => {\n  const { data: task } = useQuery(getTask, { id })\n  const markTaskAsDoneOptimistically = useAction(markTaskAsDone, {\n    optimisticUpdates: [\n      {\n        getQuerySpecifier: ({ id }) => [getTask, { id }],\n        updateQuery: (_payload, oldData) => ({ ...oldData, isDone: true }),\n      },\n    ],\n  })\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>\n  }\n\n  const { description, isDone } = task\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n      {isDone || (\n        <button onClick={() => markTaskAsDoneOptimistically({ id })}>\n          Mark as done.\n        </button>\n      )}\n    </div>\n  )\n}\n\nexport default TaskPage\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Setup Function in Wasp\nDESCRIPTION: Using server.setupFn to define a JavaScript function that will be executed on server start, allowing custom server initialization.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-01-27-waspleau.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp waspleau {\n  ...\n\n  server: {\n    setupFn: import serverSetup from \"@server/serverSetup.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Task Entity in Wasp\nDESCRIPTION: Basic entity definition for a Task model with id, description and isDone fields using Prisma schema language.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/crud.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nentity Task {=psl\n  id          Int @id @default(autoincrement())\n  description String\n  isDone      Boolean\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp Client in JavaScript\nDESCRIPTION: Demonstrates how to configure the client-side of a Wasp application using JavaScript. It shows setting the title, root component, and setup function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/client-config.md#2025-04-22_snippet_11\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.jsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Jobs in JavaScript/TypeScript\nDESCRIPTION: Example of how to submit jobs for execution, including immediate and delayed execution options.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/jobs.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mySpecialJob } from 'wasp/server/jobs'\n\nconst submittedJob = await mySpecialJob.submit({ job: \"Johnny\" })\n\n// Or, if you'd prefer it to execute in the future, just add a .delay().\n// It takes a number of seconds, Date, or ISO date string.\nawait mySpecialJob\n  .delay(10)\n  .submit({ name: \"Johnny\" })\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Verification Form Component\nDESCRIPTION: Implementation of an email verification page using Wasp's VerifyEmailForm component\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/ui.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\nroute EmailVerificationRoute { path: \"/email-verification\", to: EmailVerificationPage }\npage EmailVerificationPage {\n  component: import { VerifyEmailPage } from \"@src/VerifyEmailPage.jsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VerifyEmailForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function VerifyEmailPage() {\n  return <VerifyEmailForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Verification Form\nDESCRIPTION: Setup for email verification page route and component implementation using Wasp's VerifyEmailForm component\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/ui.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\nroute EmailVerificationRoute { path: \"/email-verification\", to: EmailVerificationPage }\npage EmailVerificationPage {\n  component: import { VerifyEmailPage } from \"@src/VerifyEmailPage.jsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VerifyEmailForm } from 'wasp/client/auth'\n\nexport function VerifyEmailPage() {\n  return <VerifyEmailForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Railway Client\nDESCRIPTION: Create a Dockerfile for serving the static client files on Railway.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_12\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM pierrezemb/gostatic\nCMD [ \"-fallback\", \"index.html\" ]\nCOPY ./dist/ /srv/http/\n```\n\n----------------------------------------\n\nTITLE: Configuring Account Route and Page in Wasp\nDESCRIPTION: Adds a new route and page configuration for the account settings page in the main.wasp file. The page requires authentication and imports a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nroute AccountRoute { path: \"/account\", to: AccountPage }\npage AccountPage {\n  authRequired: true,\n  component: import Account from \"@client/AccountPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Image with Caption in JSX\nDESCRIPTION: This code snippet demonstrates how to use the ImgWithCaption component to display an image with a caption in the blog post.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-01-18-wasp-beta-update-dec.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ImgWithCaption\n    alt=\"Wasp Update Dec 22\"\n    source=\"img/update-dec-23/banner.png\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Root Component for Layout (TypeScript)\nDESCRIPTION: Example of setting up a root component in Wasp using TypeScript. This creates a common layout with header and footer for the application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/client-config.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.tsx\",\n  }\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Root({ children }: { children: React.ReactNode }) {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      {children}\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Prisma Schema\nDESCRIPTION: This snippet demonstrates how to define the User entity in the schema.prisma file, which is required for Discord authentication in Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/discord.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  // Add your own fields below\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth UI Components\nDESCRIPTION: React component implementation for the login page using Wasp's auth components with Tailwind CSS styling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/github.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"w-full h-full bg-white\">\n      <div className=\"min-w-full min-h-[75vh] flex items-center justify-center\">\n        <div className=\"w-full h-full max-w-sm p-5 bg-white\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Including User Data with Tasks in TypeScript\nDESCRIPTION: TypeScript version of including full user data, including auth and identities, when fetching tasks in a Wasp application using Prisma queries.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/entities.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getAllTasks = (async (args, context) => {\n  return context.entities.Task.findMany({\n    orderBy: { id: 'desc' },\n    select: {\n      id: true,\n      title: true,\n      user: {\n        include: {\n          auth: {\n            include: {\n              identities: {\n                select: {\n                  providerName: true,\n                  providerUserId: true,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  })\n}) satisfies tasks.GetAllQuery<{}, {}>\n```\n\n----------------------------------------\n\nTITLE: Defining Password Reset Email Content Function in TypeScript\nDESCRIPTION: This snippet shows how to define a function that generates the content for the password reset email message in TypeScript, including type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetPasswordResetEmailContentFn } from 'wasp/server/auth'\n\nexport const getPasswordResetEmailContent: GetPasswordResetEmailContentFn = ({\n  passwordResetLink,\n}) => ({\n  subject: 'Password reset',\n  text: `Click the link below to reset your password: ${passwordResetLink}`,\n  html: `\n        <p>Click the link below to reset your password</p>\n        <a href=\"${passwordResetLink}\">Reset password</a>\n    `,\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing SignupForm with Additional Fields in TypeScript\nDESCRIPTION: TypeScript implementation for a customized SignupForm that adds both an address field (using object notation) and a phone number field (using a render function).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  SignupForm,\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        /* The address field is defined using an object */\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        /* The phone number is defined using a render function */\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Root Component in Wasp (TypeScript)\nDESCRIPTION: Wasp configuration for specifying a root component in TypeScript that will wrap the application's content.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/client-config.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.tsx\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Jobs in JavaScript/TypeScript\nDESCRIPTION: Examples of submitting jobs for immediate or delayed execution in JavaScript/TypeScript code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/jobs.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mySpecialJob } from 'wasp/server/jobs'\n\nconst submittedJob = await mySpecialJob.submit({ job: \"Johnny\" })\n\n// Or, if you'd prefer it to execute in the future, just add a .delay().\n// It takes a number of seconds, Date, or ISO date string.\nawait mySpecialJob\n  .delay(10)\n  .submit({ name: \"Johnny\" })\n```\n\n----------------------------------------\n\nTITLE: Updating User Password Securely with Wasp Auth in JavaScript\nDESCRIPTION: This JavaScript function securely updates a user's password using Wasp server authentication helpers. It verifies the existence of the user, sanitizes provider data, and updates the hashed password in the auth identity. Dependencies include Wasp's createProviderId, findAuthIdentity, updateAuthIdentityProviderData, and deserializeAndSanitizeProviderData. Required inputs are the user's email and new password, and errors are thrown if the user does not exist. No unhashed passwords are stored; hashing occurs automatically.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n  createProviderId,\n  findAuthIdentity,\n  updateAuthIdentityProviderData,\n  deserializeAndSanitizeProviderData,\n} from 'wasp/server/auth';\n\nexport const updatePassword = async (args, context) => {\n  const providerId = createProviderId('email', args.email)\n  const authIdentity = await findAuthIdentity(providerId)\n  if (!authIdentity) {\n      throw new HttpError(400, \"Unknown user\")\n  }\n  \n  const providerData = deserializeAndSanitizeProviderData(authIdentity.providerData)\n\n  // Updates the password and hashes it automatically.\n  await updateAuthIdentityProviderData(providerId, providerData, {\n      hashedPassword: args.password,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Signup Fields with Wasp in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to customize the Wasp user sign-up process by specifying additional user fields such as address and phone. It imports `defineUserSignupFields` from `wasp/server/auth` and defines validation logic for each extra field. The `address` field is validated to ensure it is provided, while the `phone` field is directly mapped from the input data. To use, add this export to your `src/auth.js` and ensure Wasp is set up in your project. Expects an object with field data as input and outputs validated user-specific values.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/_user-signup-fields-explainer.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: (data) => {\n    if (!data.address) {\n      throw new Error('Address is required')\n    }\n    return data.address\n  }\n  phone: (data) => data.phone,\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing getUsername Helper with Direct Property Access in TypeScript/TSX\nDESCRIPTION: This snippet demonstrates how to replace the deprecated getUsername helper with direct access to the user.identities.username.id property in both React components and server-side code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const username = user.identities.username?.id\n  // ...\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const createTask: CreateTask<...>  = async (args, context) => {\n    const username = context.user.identities.username?.id\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Twitter Agent App in Wasp\nDESCRIPTION: Defines the main configuration for a Twitter agent application using Wasp, including dependencies, authentication, database models, and routes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp twitterAgent {\n  wasp: {\n    version: \"^0.10.6\"\n  },\n  title: \"twitter-agent\",\n\thead: [\n    \"<script async src='https://platform.twitter.com/widgets.js' charset='utf-8'></script>\"\n  ],\n  db: { \n    system: PostgreSQL,\n  },\n  auth: {\n    userEntity: User,\n    onAuthFailedRedirectTo: \"/login\",\n    methods: {\n      usernameAndPassword: {},\n    }\n  },\n  dependencies: [\n    (\"openai\", \"3.2.1\"),\n    (\"rettiwt-api\", \"1.1.8\"),\n    (\"langchain\", \"0.0.91\"),\n    (\"@pinecone-database/pinecone\", \"0.1.6\"),\n    (\"@headlessui/react\", \"1.7.15\"),\n    (\"react-icons\", \"4.8.0\"),\n\t\t(\"react-twitter-embed\", \"4.0.4\")\n  ],\n}\n\n// ### Database Models\n\nentity Tweet {=psl\n\tid              Int           @id @default(autoincrement())\n  tweetId         String        \n  authorUsername  String\n  content         String\n  tweetedAt       DateTime      @default(now())\n  user            User          @relation(fields: [userId], references: [id])\n  userId          Int\n  drafts          TweetDraft[]\n  ideas           GeneratedIdea[]\npsl=}\n\nentity TweetDraft {=psl\n  id              Int         @id @default(autoincrement())\n  content         String\n  notes           String\n  originalTweet   Tweet       @relation(fields: [originalTweetId], references: [id])\n  originalTweetId Int\n  createdAt       DateTime    @default(now())\n  user            User        @relation(fields: [userId], references: [id])\n  userId          Int\npsl=}\n\nentity GeneratedIdea {=psl\n  id              Int         @id @default(autoincrement())\n  content         String\n  createdAt       DateTime    @default(now())\n  updatedAt       DateTime    @default(now())\n  user            User        @relation(fields: [userId], references: [id])\n  userId          Int\n  originalTweet   Tweet?      @relation(fields: [originalTweetId], references: [id])\n  originalTweetId Int?\n  isEmbedded      Boolean     @default(false)\npsl=}\n\nentity User {=psl\n  id              Int         @id @default(autoincrement())\n  username        String      @unique\n  password        String\n  createdAt       DateTime    @default(now())\n  favUsers        String[]\n  originalTweets  Tweet[]\n  tweetDrafts     TweetDraft[]\n  generatedIdeas  GeneratedIdea[]\npsl=}\n\n// <<< Client Pages & Routes\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  authRequired: true,\n  component: import Main from \"@client/MainPage\"\n}\n\n// !!! Actions\n\naction embedIdea {\n  fn: import { embedIdea } from \"@server/ideas.js\",\n  entities: [GeneratedIdea]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Environment variable configuration for Discord client credentials in .env.server file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/discord.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDISCORD_CLIENT_ID=your-discord-client-id\nDISCORD_CLIENT_SECRET=your-discord-client-secret\n```\n\n----------------------------------------\n\nTITLE: Email Verification Route Configuration\nDESCRIPTION: Wasp configuration for setting up the email verification client route.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/email.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\nemailVerification: {\n    clientRoute: EmailVerificationRoute,\n}\n```\n\n----------------------------------------\n\nTITLE: Using getUsername Function in React Component (TypeScript)\nDESCRIPTION: TypeScript version of the getUsername function usage in a React component. It displays the username of a task's creator, returning the username if the user signed up with the Username & password auth method, or null otherwise.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/entities.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getUsername } from 'wasp/auth'\n\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {getUsername(task.user)}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Additional Fields in SignupForm (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use a render function to add custom fields to the SignupForm component in React. It shows how to access form data and conditionally render a greeting based on the username.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SignupForm, FormItemGroup } from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={(form, state) => {\n        const username = form.watch('username')\n        return (\n          username && (\n            <FormItemGroup>\n              Hello there <strong>{username}</strong> 👋\n            </FormItemGroup>\n          )\n        )\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Auth Imports in Wasp (main.wasp)\nDESCRIPTION: This Wasp configuration snippet defines a basic application `myApp` and configures the GitHub authentication method. It specifies the `User` entity and imports custom functions (`getConfig` and `userSignupFields`) from `@src/auth/github.js` (or .ts) to handle GitHub-specific configuration and user data mapping.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/github.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/github.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/github.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic React Page Component\nDESCRIPTION: Demonstrates the structure of a basic React component file for a Wasp page, including necessary imports.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/03-pages.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport waspLogo from './waspLogo.png'\nimport './Main.css'\n\nexport const MainPage = () => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Queries (JavaScript)\nDESCRIPTION: Example of throwing a custom HttpError in a query implementation to pass additional error information to the client.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/queries.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const getAllTasks = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord Auth in Wasp App\nDESCRIPTION: Main Wasp application configuration showing Discord authentication setup with user entity and redirect settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/discord.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      discord: {\n        configFn: import { getConfig } from \"@src/auth/discord.js\",\n        userSignupFields: import { userSignupFields } from \"@src/auth/discord.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Client-side Query Implementation in JavaScript\nDESCRIPTION: Shows how to import and use Queries on the client side using JavaScript, demonstrating basic Query calls with getAllTasks and getFilteredTasks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/queries.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAllTasks, getFilteredTasks } from 'wasp/client/operations'\n\n// ...\n\nconst allTasks = await getAllTasks()\nconst doneTasks = await getFilteredTasks({ isDone: true })\n```\n\n----------------------------------------\n\nTITLE: Implementing Shadcn Form Field Component in React\nDESCRIPTION: Example of a basic form field implementation using Shadcn UI components with React Hook Form integration. Shows the structure of form controls including label, input and validation message.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-11-20-building-react-forms-with-ease-using-react-hook-form-and-zod.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<FormField\n  control={form.control}\n  name=\"name\"\n  render={({ field }) => (\n    <FormItem>\n      <FormLabel>Name</FormLabel>\n      <FormControl>\n        <Input {...field} />\n      </FormControl>\n      <FormMessage />\n    </FormItem>\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Auth Page Component Implementation\nDESCRIPTION: React component implementation for the authentication page with login form and layout.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/google.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"w-full h-full bg-white\">\n      <div className=\"min-w-full min-h-[75vh] flex items-center justify-center\">\n        <div className=\"w-full h-full max-w-sm p-5 bg-white\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Forgot Password Route in Wasp with TypeScript\nDESCRIPTION: This code shows how to create a route for the forgot password page in TypeScript. It defines the route path and links it to a TypeScript React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\nroute RequestPasswordResetRoute { path: \"/request-password-reset\", to: RequestPasswordResetPage }\npage RequestPasswordResetPage {\n  component: import { ForgotPasswordPage } from \"@src/ForgotPasswordPage.tsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration with Plugins\nDESCRIPTION: Enhanced Tailwind configuration file showing how to include additional plugins.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/css-frameworks.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  // ...\n  plugins: [\n    require('@tailwindcss/forms'),\n    require('@tailwindcss/typography'),\n  ],\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Page with Wasp Auth UI in React (JavaScript)\nDESCRIPTION: This snippet shows how to create a signup page using Wasp's Auth UI components in a React application. It includes a signup form centered on the page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/crud.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SignupForm } from '@wasp/auth/forms/Signup'\n\nexport function SignupPage() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        placeContent: 'center',\n      }}\n    >\n      <SignupForm />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Path-Based Middleware Implementation in JavaScript\nDESCRIPTION: JavaScript implementation of a path-based middleware function that adds a custom middleware to all routes under a specific path.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/middleware-config.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport const fooBarNamespaceMiddlewareFn = (middlewareConfig) => {\n  const customMiddleware = (_req, _res, next) => {\n    console.log('fooBarNamespaceMiddlewareFn: custom middleware')\n    next()\n  }\n\n  middlewareConfig.set('custom.middleware', customMiddleware)\n\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Default Middleware Configuration in TypeScript\nDESCRIPTION: TypeScript version of the default middleware configuration with type definitions for middleware config and config function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/middleware-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MiddlewareConfig = Map<string, express.RequestHandler>\n\nexport type MiddlewareConfigFn = (middlewareConfig: MiddlewareConfig) => MiddlewareConfig\n\nconst defaultGlobalMiddleware: MiddlewareConfig = new Map([\n  ['helmet', helmet()],\n  ['cors', cors({ origin: config.allowedCORSOrigins })],\n  ['logger', logger('dev')],\n  ['express.json', express.json()],\n  ['express.urlencoded', express.urlencoded({ extended: false })],\n  ['cookieParser', cookieParser()]\n])\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Configuration with Wasp in JavaScript\nDESCRIPTION: Demonstrates how to access the server-side configuration object within a Wasp application by importing the 'config' object from 'wasp/server'. The snippet logs the 'frontendUrl' property, which is set via the WASP_WEB_CLIENT_URL environment variable. No additional dependencies are required apart from Wasp, and the expected output is the string value of the frontend URL as set in your environment or by Wasp during development.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/accessing-app-config.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { config } from 'wasp/server'\n\nconsole.log(config.frontendUrl)\n```\n\n----------------------------------------\n\nTITLE: Adding Logout Button to Main Page (TypeScript)\nDESCRIPTION: TypeScript implementation of a logout button in the main page component that uses Wasp's client auth module to handle user logout functionality when the button is clicked.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/07-auth.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nimport { logout } from 'wasp/client/auth'\n//...\n\nconst MainPage = () => {\n  // ...\n  return (\n    <div>\n      // ...\n      <button onClick={logout}>Logout</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing SignupForm with a Render Function (React)\nDESCRIPTION: Demonstrates using the `additionalFields` prop of the `SignupForm` component with a render function. This function receives the `react-hook-form` object (`form`) and form state (`state`) as arguments, allowing dynamic rendering of UI elements based on form input, like displaying a greeting when the username field is populated. Requires `SignupForm` and `FormItemGroup` components from `wasp/client/auth`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"src/SignupPage.jsx\"\nimport { SignupForm, FormItemGroup } from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={(form, state) => {\n        const username = form.watch('username')\n        return (\n          username && (\n            <FormItemGroup>\n              Hello there <strong>{username}</strong> 👋\n            </FormItemGroup>\n          )\n        )\n      }}\n    />\n  )\n}\n```\n```\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/SignupPage.tsx\"\nimport { SignupForm, FormItemGroup } from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={(form, state) => {\n        const username = form.watch('username')\n        return (\n          username && (\n            <FormItemGroup>\n              Hello there <strong>{username}</strong> 👋\n            </FormItemGroup>\n          )\n        )\n      }}\n    />\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Schema\nDESCRIPTION: Prisma schema definition for the User entity with required fields for GitHub authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/github.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  // Add your own fields below\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Dev Server Port - Vite Config - TypeScript\nDESCRIPTION: This TypeScript snippet sets the Vite dev server's port to `4000` using the `defineConfig` utility in `vite.config.ts`. It requires importing `defineConfig` from 'vite', and the file should be present in the root directory. Update your `.env.server` file with `WASP_WEB_CLIENT_URL` to avoid connectivity issues when changing the port. No additional dependencies are needed.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/custom-vite-config.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  server: {\n    port: 4000,\n  },\n})\n```\n\nLANGUAGE: env\nCODE:\n```\nWASP_WEB_CLIENT_URL=http://localhost:4000\n```\n\n----------------------------------------\n\nTITLE: Sending Emails in JavaScript\nDESCRIPTION: Shows how to use the emailSender API to send an email in a JavaScript action handler.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/email.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { emailSender } from \"@wasp/email/index.js\";\n\n// In some action handler...\nconst info = await emailSender.send({\n  from: {\n    name: \"John Doe\",\n    email: \"john@doe.com\",\n  },\n  to: \"user@domain.com\",\n  subject: \"Saying hello\",\n  text: \"Hello world\",\n  html: \"Hello <strong>world</strong>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Protected Page Component Implementation\nDESCRIPTION: Example of implementing a protected page component with user authentication in both JavaScript and TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Button from './Button'\nimport { logout } from 'wasp/client/auth'\n\nconst AccountPage = ({ user }) => {\n  return (\n    <div>\n      <Button onClick={logout}>Logout</Button>\n      {JSON.stringify(user, null, 2)}\n    </div>\n  )\n}\n\nexport default AccountPage\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type AuthUser } from 'wasp/auth'\nimport Button from './Button'\nimport { logout } from 'wasp/client/auth'\n\nconst AccountPage = ({ user }: { user: AuthUser }) => {\n  return (\n    <div>\n      <Button onClick={logout}>Logout</Button>\n      {JSON.stringify(user, null, 2)}\n    </div>\n  )\n}\n\nexport default AccountPage\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Logo to LoginForm in JavaScript/JSX\nDESCRIPTION: Illustrates importing a logo image (`Logo` from `./logo.png`) and passing its path to the `LoginForm` component using the `logo` prop in a React/JSX file (`src/LoginPage.jsx`).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/ui.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/LoginPage.jsx\"\nimport { LoginForm } from 'wasp/client/auth'\nimport Logo from './logo.png'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass in the path to your logo\n      logo={Logo}\n    />\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Checks in Task Query (JavaScript)\nDESCRIPTION: Updates the getTasks query to check if a user is authenticated before returning tasks, and filters results to only show tasks belonging to the current user. Throws an HTTP 401 error if no user is authenticated.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/07-auth.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// highlight-next-line\nimport { HttpError } from 'wasp/server'\n\nexport const getTasks = async (args, context) => {\n  // highlight-start\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  // highlight-end\n  return context.entities.Task.findMany({\n    // highlight-next-line\n    where: { user: { id: context.user.id } },\n    orderBy: { id: 'asc' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server Setup Function Types (TypeScript)\nDESCRIPTION: This TypeScript code snippet shows the type definitions for the server setup function (`ServerSetupFn`) and its context (`ServerSetupFnContext`) as defined in `wasp/server`. The context provides access to the Express application (`app`) and the Node.js HTTP server (`server`) instances.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/server-config.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"wasp/server\"\nexport type ServerSetupFn = (context: ServerSetupFnContext) => Promise<void>\n\nexport type ServerSetupFnContext = {\n  app: Application // === express.Application\n  server: Server // === http.Server\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Schema\nDESCRIPTION: Prisma schema definition for the User entity required for GitHub authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/github.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  // Add your own fields below\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub Authentication Configuration in JavaScript\nDESCRIPTION: This JavaScript function returns the required OAuth configuration for GitHub authentication including clientID, clientSecret, and scope. These values should be retrieved from environment variables or another secure source.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/github.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport function getConfig() {\n  return {\n    clientID, // look up from env or elsewhere\n    clientSecret, // look up from env or elsewhere\n    scope: [],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Client in Setup Function (JavaScript)\nDESCRIPTION: JavaScript implementation of a setup function that configures the React Query client with custom defaults for all queries in the application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/client-config.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport { configureQueryClient } from 'wasp/client/operations'\n\nexport default async function mySetupFunction() {\n  // ... some setup\n  configureQueryClient({\n    defaultOptions: {\n      queries: {\n        staleTime: Infinity,\n      },\n    },\n  })\n  // ... some more setup\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getTasks Query in TypeScript\nDESCRIPTION: This snippet shows the TypeScript implementation of the getTasks query function. It includes type annotations for full-stack type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/05-queries.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from 'wasp/entities'\nimport { type GetTasks } from 'wasp/server/operations'\n\nexport const getTasks: GetTasks<void, Task[]> = async (args, context) => {\n  return context.entities.Task.findMany({\n    orderBy: { id: 'asc' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Social Buttons Layout\nDESCRIPTION: Shows how to customize the layout of social authentication buttons\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/ui.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass in the socialLayout prop\n      socialLayout=\"vertical\"\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Application Components with Wasp Declarations\nDESCRIPTION: This snippet demonstrates the core concept of Wasp declarations. It defines an application (`app`), a route (`route`), and a page (`page`) using the Wasp DSL. The `app` declaration sets the application title. The `route` declaration maps the root path ('/') to the `DashboardPage`. The `page` declaration specifies the React component to render for the `DashboardPage` by importing it from an external JSX file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/general/language.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\"\n}\n\nroute RootRoute { path: \"/\", to: DashboardPage }\n\npage DashboardPage {\n  component: import { DashboardPage } from \"@src/Dashboard.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket in TypeScript Wasp App\nDESCRIPTION: Demonstrates how to set up WebSocket configuration in a Wasp application using TypeScript. Includes importing the WebSocket function and setting auto-connect behavior.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/web-sockets.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  webSocket: {\n    fn: import { webSocketFn } from \"@src/webSocket\",\n    autoConnect: true, // optional, default: true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Forgot Password Form\nDESCRIPTION: Setup for forgot password page route and component implementation using Wasp's ForgotPasswordForm component\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/ui.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\nroute RequestPasswordResetRoute { path: \"/request-password-reset\", to: RequestPasswordResetPage }\npage RequestPasswordResetPage {\n  component: import { ForgotPasswordPage } from \"@src/ForgotPasswordPage.jsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ForgotPasswordForm } from 'wasp/client/auth'\n\nexport function ForgotPasswordPage() {\n  return <ForgotPasswordForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Zod Validation Example in JavaScript\nDESCRIPTION: Example of using Zod library for field validation in JavaScript\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/overview.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\nimport * as z from 'zod'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: (data) => {\n    const AddressSchema = z\n      .string({\n        required_error: 'Address is required',\n        invalid_type_error: 'Address must be a string',\n      })\n      .min(10, 'Address must be at least 10 characters long')\n    const result = AddressSchema.safeParse(data.address)\n    if (result.success === false) {\n      throw new Error(result.error.issues[0].message)\n    }\n    return result.data\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a New Wasp Project with Default Template\nDESCRIPTION: Shows how to create a new Wasp project using the default template by specifying the project name directly with the 'wasp new' command.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/general/cli.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp new MyFirstProject\n🐝 --- Creating your project from the \"basic\" template... -------------------------\n\nCreated new Wasp app in ./MyFirstProject directory!\n\nTo run your new app, do:\n    cd MyFirstProject\n    wasp db start\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript IDE Support - JSON\nDESCRIPTION: This JSON snippet provides a sample tsconfig.json recommended for use with Wasp 0.14.0. It configures module, target, module resolution, JSX support, strict type checking, esModuleInterop, libs, and custom typeRoots to support IDE features and testing compatibility, not TypeScript compilation. Notably, the 'outDir' is set to a non-existent path for IDE-only builds. This file aids in development but does not affect actual builds; changes here are for editor support only.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// =============================== IMPORTANT =================================\n//\n// This file is only used for Wasp IDE support. You can change it to configure\n// your IDE checks, but none of these options will affect the TypeScript\n// compiler. Proper TS compiler configuration in Wasp is coming soon :)\n{\n  \"compilerOptions\": {\n    \"module\": \"esnext\",\n    \"target\": \"esnext\",\n    // We're bundling all code in the end so this is the most appropriate option,\n    // it's also important for autocomplete to work properly.\n    \"moduleResolution\": \"bundler\",\n    // JSX support\n    \"jsx\": \"preserve\",\n    \"strict\": true,\n    // Allow default imports.\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"typeRoots\": [\n      // This is needed to properly support Vitest testing with jest-dom matchers.\n      // Types for jest-dom are not recognized automatically and Typescript complains\n      // about missing types e.g. when using `toBeInTheDocument` and other matchers.\n      \"node_modules/@testing-library\",\n      // Specifying type roots overrides the default behavior of looking at the\n      // node_modules/@types folder so we had to list it explicitly.\n      // Source 1: https://www.typescriptlang.org/tsconfig#typeRoots\n      // Source 2: https://github.com/testing-library/jest-dom/issues/546#issuecomment-1889884843\n      \"node_modules/@types\"\n    ],\n    // Since this TS config is used only for IDE support and not for\n    // compilation, the following directory doesn't exist. We need to specify\n    // it to prevent this error:\n    // https://stackoverflow.com/questions/42609768/typescript-error-cannot-write-file-because-it-would-overwrite-input-file\n    \"outDir\": \".wasp/phantom\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Content to SignupForm with Render Function in TypeScript\nDESCRIPTION: TypeScript version of the SignupForm customization that uses a render function to watch for username changes and render a greeting when the username field has a value.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/overview.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignupForm, FormItemGroup } from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={(form, state) => {\n        const username = form.watch('username')\n        return (\n          username && (\n            <FormItemGroup>\n              Hello there <strong>{username}</strong> 👋\n            </FormItemGroup>\n          )\n        )\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Email Sign-up Action in Wasp\nDESCRIPTION: Defines a custom sign-up action in the Wasp configuration file that imports the implementation from a JavaScript file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/advanced/custom-auth-actions.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\naction customSignup {\n  fn: import { signup } from \"@src/auth/signup.js\",\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing updateTask Action (TypeScript)\nDESCRIPTION: This snippet shows the TypeScript implementation of the 'updateTask' action. It includes type definitions for the payload and return value.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/06-actions.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreateTask, UpdateTask } from 'wasp/server/operations'\n\ntype UpdateTaskPayload = Pick<Task, 'id' | 'isDone'>\n\nexport const updateTask: UpdateTask<UpdateTaskPayload, Task> = async (\n  { id, isDone },\n  context\n) => {\n  return context.entities.Task.update({\n    where: { id },\n    data: {\n      isDone: isDone,\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Business Logic `User` Entity in Prisma Schema\nDESCRIPTION: Shows a basic Prisma schema definition for the `User` model, which represents the application-specific user entity referenced by `userEntity` in the Wasp configuration. This model is owned by the developer and can be extended with custom fields and relations (e.g., connecting to `Task` entities).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/entities.md#2025-04-22_snippet_13\n\nLANGUAGE: prisma\nCODE:\n```\n```prisma title=\"schema.prisma\"\nmodel User {\n  id Int @id @default(autoincrement())\n  // Any other fields you want to store about the user\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Signup Action in Wasp (JavaScript)\nDESCRIPTION: Shows how to register a custom signup action in a Wasp application. The action is linked to an import from a JavaScript module that implements the signup logic. This declaration is placed in the Wasp configuration file and is required for custom authentication flows. No parameters are passed to the action beyond those specified in the implementation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/username-and-pass.md#2025-04-22_snippet_7\n\nLANGUAGE: Wasp\nCODE:\n```\n// ...\naction customSignup {\n  fn: import { signup } from \"@src/auth/signup.js\",\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Username Identity in TypeScript\nDESCRIPTION: Retrieves the username identity from a user object and accesses the username value. This demonstrates how to extract the specific username that was used during user registration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/_username-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst usernameIdentity = user.identities.username\n\n// Username that the user used to sign up, e.g. \"fluffyllama\"\nusernameIdentity.id\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp Client with RootComponent Only (TypeScript, main.wasp)\nDESCRIPTION: Specifies a TypeScript React component as the rootComponent in the Wasp app's client configuration. Supports type-checked layouts and wrappers for all app pages. Requires Wasp and TypeScript React setup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/client-config.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.tsx\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API in NodeJS (JavaScript)\nDESCRIPTION: Shows the implementation of a custom API endpoint in JavaScript, including handling request, response, and context objects.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/apis.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const fooBar = (req, res, context) => {\n  res.set(\"Access-Control-Allow-Origin\", \"*\"); // Example of modifying headers to override Wasp default CORS middleware.\n  res.json({ msg: `Hello, ${context.user ? \"registered user\" : \"stranger\"}!` });\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Combined Customizations in JavaScript (JSX)\nDESCRIPTION: Illustrates applying multiple customizations to the Wasp `LoginForm` in a JavaScript React component. It imports a custom `appearance` object and a logo image (`todoLogo`), then passes them to the `appearance` and `logo` props respectively.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/ui.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/LoginPage.jsx\"\nimport { LoginForm } from 'wasp/client/auth'\n\nimport { authAppearance } from './appearance' // Note: Text says 'appearance', code uses 'authAppearance'. Assuming 'appearance' intended based on context.\nimport todoLogo from './todoLogo.png'\n\nexport function LoginPage() {\n  return <LoginForm appearance={appearance} logo={todoLogo} />\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Keycloak OAuth Scopes (TypeScript)\nDESCRIPTION: This TypeScript function `getConfig` is part of the Keycloak authentication setup (`src/auth/keycloak.ts`). It returns an object specifying the OAuth scopes ('profile', 'email') required from Keycloak during the authentication flow.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/keycloak.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Middleware Function in Wasp\nDESCRIPTION: This Wasp configuration snippet demonstrates how to specify a custom function for modifying the global server middleware. Within the `app` declaration's `server` block, the `middlewareConfigFn` property is set to import the `serverMiddlewareFn` function from the `@src/serverSetup` module. This function will receive and can modify the default middleware configuration for all operations and APIs.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/middleware-config.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  server: {\n    setupFn: import setup from \"@src/serverSetup\",\n    middlewareConfigFn: import { serverMiddlewareFn } from \"@src/serverSetup\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Meme Query Function\nDESCRIPTION: Server-side query implementation for fetching a single meme with its template data, including authentication checks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Meme, Template } from '@wasp/entities';\nimport type { GetAllMemes, GetMeme } from '@wasp/queries/types';\n\ntype GetMemeArgs = { id: string };\ntype GetMemeResult = Meme & { template: Template };\n\nexport const getMeme: GetMeme<GetMemeArgs, GetMemeResult> = async ({ id }, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  const meme = await context.entities.Meme.findUniqueOrThrow({\n    where: { id: id },\n    include: { template: true },\n  });\n\n  return meme;\n};\n```\n\n----------------------------------------\n\nTITLE: Refactoring MainPage React Component with Root Layout\nDESCRIPTION: Shows the updated `MainPage` component after the introduction of the root layout (`App.tsx`). This version removes the previously duplicated layout code (like NavBar and AddNote) as that is now handled by the root component. It focuses on its core responsibilities: fetching tweet drafts with ideas using Wasp's `useQuery` hook (`getTweetDraftsWithIdeas`), handling loading/error states, providing a button to trigger the `generateNewIdeas` action, and rendering the fetched data including embedded tweets using `TwitterTweetEmbed`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_37\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { useState } from 'react';\nimport generateNewIdeas from '@wasp/actions/generateNewIdeas';\nimport { useQuery } from '@wasp/queries';\nimport getTweetDraftsWithIdeas from '@wasp/queries/getTweetDraftsWithIdeas';\nimport Button from './Button';\nimport { TwitterTweetEmbed } from 'react-twitter-embed';\n\nconst MainPage = () => {\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  const {\n    data: tweetDrafts,\n    isLoading: isTweetDraftsLoading,\n    error: tweetDraftsError,\n  } = useQuery(getTweetDraftsWithIdeas);\n\n  const handleNewIdeas = async (e: any) => {\n    try {\n      setIsGenerating(true);\n      await generateNewIdeas();\n    } catch (error: any) {\n      alert(error.message);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  if (isTweetDraftsLoading) {\n    return 'Loading...';\n  }\n\n  if (tweetDraftsError) {\n    return 'Error: ' + tweetDraftsError.message;\n  }\n\n  return (\n    <>\n      <div className='flex flex-row justify-center w-full'>\n        <Button onClick={handleNewIdeas} isLoading={isGenerating}>\n          Generate New Ideas\n        </Button>\n      </div>\n      <div className='flex flex-col gap-4 justify-center items-center w-full'>\n        {tweetDrafts.map((tweetDraft) => (\n          <>\n            <h2 className='text-2xl font-bold'>Generated Ideas</h2>\n            <div key={tweetDraft.id} className='flex flex-col gap-2 justify-center items-center w-full'>\n              <h2>Original Tweet</h2>\n              <div className='flex flex-row gap-2 justify-center items-center w-full'>\n                <TwitterTweetEmbed tweetId={tweetDraft.originalTweet.tweetId} />\n              </div>\n              <h2>Tweet Draft</h2>\n              <div className='flex flex-row gap-2 justify-center items-center w-full'>\n                <div className='w-full p-4 h-22 bg-blue-100 border rounded-lg w-full'>{tweetDraft.content}</div>\n              </div>\n\n              {!!tweetDraft.notes && tweetDraft.notes !== tweetDraft.originalTweet.content && (\n                <>\n                  <h2>Your Similar Notes</h2>\n                  {tweetDraft.notes}\n                </>\n              )}\n              <div className='flex flex-col gap-2 justify-center items-center w-full'>\n                <h2>Ideas</h2>\n                {tweetDraft.originalTweet.ideas.map((idea) => (\n                  <div key={idea.id} className='flex flex-row gap-2 justify-center items-center w-full'>\n                    <div className='flex flex-row gap-2 justify-center items-center w-full'>\n                      <div className='w-full p-4 h-22 bg-neutral-100 border rounded-lg w-full'>{idea.content}</div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </>\n        ))}\n      </div>\n    </>\n  );\n};\nexport default MainPage;\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring a Parameterized Route and Page in Wasp (JavaScript)\nDESCRIPTION: Defines a dynamic route '/hello/:name' and a HelloPage using Wasp's DSL for JavaScript setups. The HelloPage component is imported from the src directory. Suitable for scenarios where user-specific data or URL parameters are essential. Requires the associated React component at @src/HelloPage.jsx.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/03-pages.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\nroute HelloRoute { path: \"/hello/:name\", to: HelloPage }\npage HelloPage {\n  component: import { HelloPage } from \"@src/HelloPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Server and Queries in Wasp Tests\nDESCRIPTION: Shows how to set up a mock server and use mockQuery to mock Wasp queries in tests. This is useful for testing components that use useQuery.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mockServer } from \"wasp/client/test\";\nimport { getTasks } from \"wasp/client/operations\";\n\nconst { mockQuery, mockApi } = mockServer();\n\nmockQuery(getTasks, []);\n```\n\n----------------------------------------\n\nTITLE: Defining Email Verification Content in TypeScript\nDESCRIPTION: This snippet demonstrates how to define the content for the email verification email in TypeScript for a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/email.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetVerificationEmailContentFn } from 'wasp/server/auth'\n\nexport const getVerificationEmailContent: GetVerificationEmailContentFn = ({\n  verificationLink,\n}) => ({\n  subject: 'Verify your email',\n  text: `Click the link below to verify your email: ${verificationLink}`,\n  html: `\n        <p>Click the link below to verify your email</p>\n        <a href=\"${verificationLink}\">Verify email</a>\n    `,\n})\n```\n\n----------------------------------------\n\nTITLE: Global Middleware Customization in TypeScript\nDESCRIPTION: Implementation of a custom middleware configuration function in TypeScript that modifies the default CORS settings to allow multiple origins, with proper type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/middleware-config.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport cors from 'cors'\nimport { config, type MiddlewareConfigFn } from 'wasp/server'\n\nexport const serverMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {\n  // Example of adding an extra domains to CORS.\n  middlewareConfig.set('cors', cors({ origin: [config.frontendUrl, 'https://example1.com', 'https://example2.com'] }))\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Verification in JavaScript\nDESCRIPTION: This snippet shows how to implement email verification on the client-side using JavaScript in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/email.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { verifyEmail } from 'wasp/client/auth'\n...\nawait verifyEmail({ token });\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Domain Environment Variables in Wasp\nDESCRIPTION: This snippet demonstrates how to set the WASP_WEB_CLIENT_URL and WASP_SERVER_URL environment variables for a Wasp server, which are necessary for proper custom domain configuration and CORS functionality.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/extras.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nWASP_WEB_CLIENT_URL=https://myapp.com\nWASP_SERVER_URL=https://server.myapp.com\n```\n\n----------------------------------------\n\nTITLE: Main Page Component Integration (JavaScript)\nDESCRIPTION: Integration of the task creation form into the main page component alongside task list display.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/06-actions.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      <NewTaskForm />\n\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Social Login UI Implementation\nDESCRIPTION: Implementation of social login buttons and URLs for Google and GitHub authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  GoogleSignInButton,\n  googleSignInUrl,\n  GitHubSignInButton,\n  gitHubSignInUrl,\n} from 'wasp/client/auth'\n\nexport const LoginPage = () => {\n  return (\n    <>\n      <GoogleSignInButton />\n      <GitHubSignInButton />\n      {/* or */}\n      <a href={googleSignInUrl}>Sign in with Google</a>\n      <a href={gitHubSignInUrl}>Sign in with GitHub</a>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Wasp SaaS Project\nDESCRIPTION: Command to create a new Wasp project using the SaaS template.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-09-17-from-idea-to-20k-in-days-how-wasp-accelerated-nuloapps-launch.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwasp new -t saas\n```\n\n----------------------------------------\n\nTITLE: Importing a Wasp Query/Action Client and Server in TypeScript\nDESCRIPTION: Shows how to import the createFoo Action generated by Wasp for both client and server usage in TypeScript. Also demonstrates importing the generated CreateFoo type for advanced typing of Action implementations. Prerequisites: Proper Wasp declaration and build outputs, and wasp/client/operations must exist.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/actions.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\n// Use it on the client\nimport { createFoo } from 'wasp/client/operations'\n\n// Use it on the server\nimport { createFoo } from 'wasp/server/operations'\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport { type CreateFoo } from 'wasp/server/operations'\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Environment Variables in JavaScript\nDESCRIPTION: Demonstrates how to access client-side environment variables prefixed with REACT_APP_ in a JavaScript file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/env-vars.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(import.meta.env.REACT_APP_SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Implementing ForgotPasswordPage Component in JavaScript\nDESCRIPTION: This snippet shows how to implement a forgot password page component in JavaScript using Wasp's ForgotPasswordForm component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ForgotPasswordForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function ForgotPasswordPage() {\n  return <ForgotPasswordForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Verification Page with Wasp Auth UI\nDESCRIPTION: This snippet shows how to create an email verification page using the VerifyEmailForm component from Wasp's Auth UI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/ui.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\nroute EmailVerificationRoute { path: \"/email-verification\", to: EmailVerificationPage }\npage EmailVerificationPage {\n  component: import { VerifyEmailPage } from \"@client/VerifyEmailPage.tsx\"\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VerifyEmailForm } from '@wasp/auth/forms/VerifyEmail'\n\n// Use it like this\nexport function VerifyEmailPage() {\n  return <VerifyEmailForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Logo to Login Form\nDESCRIPTION: Demonstrates how to add a custom logo to the authentication form components using the logo prop.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/ui.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from '@wasp/auth/forms/Login'\nimport Logo from './logo.png'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass in the path to your logo\n      logo={Logo}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Password Reset Email Content Generation\nDESCRIPTION: Function for generating password reset email content with customizable subject, text, and HTML body\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/email.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getPasswordResetEmailContent = ({ passwordResetLink }) => ({\n  subject: 'Password reset',\n  text: `Click the link below to reset your password: ${passwordResetLink}`,\n  html: `\n          <p>Click the link below to reset your password</p>\n          <a href=\"${passwordResetLink}\">Reset password</a>\n      `,\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetPasswordResetEmailContentFn } from 'wasp/server/auth'\n\nexport const getPasswordResetEmailContent: GetPasswordResetEmailContentFn = ({\n  passwordResetLink,\n}) => ({\n  subject: 'Password reset',\n  text: `Click the link below to reset your password: ${passwordResetLink}`,\n  html: `\n          <p>Click the link below to reset your password</p>\n          <a href=\"${passwordResetLink}\">Reset password</a>\n      `,\n})\n```\n\n----------------------------------------\n\nTITLE: Changing to Build Directory in Fly.io Deployment\nDESCRIPTION: Navigates to the Wasp build directory before configuring and deploying to Fly.io. This is where the generated server code and Dockerfile are located.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/manually.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd .wasp/build\n```\n\n----------------------------------------\n\nTITLE: Defining a Route in Wasp\nDESCRIPTION: Demonstrates how to define a route in the main.wasp file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/links.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nroute TaskRoute { path: \"/task/:id\", to: TaskPage }\npage TaskPage { ... }\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta for Apple Silicon Macs\nDESCRIPTION: Command to install Rosetta on Mac computers with Apple Silicon (M1, M2, etc.) to enable running x86 applications like Wasp on arm64 architecture.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/introduction/quick-start.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsoftwareupdate --install-rosetta\n```\n\n----------------------------------------\n\nTITLE: Testing the Task Checking Utility with Vitest - JavaScript\nDESCRIPTION: Implements a unit test using the Vitest framework to verify the behavior of the 'areThereAnyTasks' utility. Uses standard import of the utility and expects the function to return false for an empty array. Requires 'vitest' as a dependency and is intended for JavaScript environments with the Vitest test runner configured.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { test, expect } from \\\"vitest\\\";\\n\\nimport { areThereAnyTasks } from \\\"./helpers\\\";\\n\\ntest(\\\"areThereAnyTasks\\\", () => {\\n  expect(areThereAnyTasks([])).toBe(false);\\n});\n```\n\n----------------------------------------\n\nTITLE: Database Migration Command\nDESCRIPTION: Command to execute the database migration for the new auth system.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub Auth Helpers (JavaScript)\nDESCRIPTION: This JavaScript code exports two pieces for the GitHub OAuth integration: a 'userSignupFields' object that provides mapping functions from provider data to user fields, and a 'getConfig' function specifying required OAuth scopes. 'userSignupFields' maps username and extract's displayName from the OAuth profile, while 'getConfig' returns a configuration object required by the provider, such as a list of scopes like ['user']. These exports satisfy the imports referenced by the Wasp config.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/github.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nexport const userSignupFields = {\n  username: () => 'hardcoded-username',\n  displayName: (data) => data.profile.name,\n}\n\nexport function getConfig() {\n  return {\n    scopes: ['user'],\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Logo to Login Form\nDESCRIPTION: Demonstrates how to add a custom logo to the Auth UI by importing and passing the logo prop to the LoginForm component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/ui.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\nimport Logo from './logo.png'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass in the path to your logo\n      logo={Logo}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using API from Client (TypeScript)\nDESCRIPTION: Shows how to use a custom API endpoint from the client-side TypeScript code using the Axios wrapper.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/apis.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useEffect } from \"react\";\nimport { api } from \"wasp/client/api\";\n\nasync function fetchCustomRoute() {\n  const res = await api.get(\"/foo/bar\");\n  console.log(res.data);\n}\n\nexport const Foo = () => {\n  useEffect(() => {\n    fetchCustomRoute();\n  }, []);\n\n  return <>// ...</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind Classes in React Components - JSX\nDESCRIPTION: This snippet shows how to apply Tailwind CSS utility classes within a React component using JSX. The heading element is assigned Tailwind classes for font size, weight, and underline styling, demonstrating usage after Tailwind is configured. The surrounding context (such as the import statement and component definition) is elided for brevity. No dependencies are needed beyond React and Tailwind already being set up. Input is a React file, and output is a rendered styled HTML element.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/css-frameworks.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// ...\\n\\n<h1 className=\"text-3xl font-bold underline\">\\n  Hello world!\\n</h1>\\n\\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Setup Function (JavaScript)\nDESCRIPTION: JavaScript implementation of a client setup function that runs before rendering the application, setting up a periodic logger.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/client-config.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nexport default async function mySetupFunction() {\n  let count = 1\n  setInterval(\n    () => console.log(`You have been online for ${count++} hours.`),\n    1000 * 60 * 60\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Login Route in Wasp with TypeScript\nDESCRIPTION: This code shows how to create a route for the login page in TypeScript. It defines the route path and links it to a TypeScript React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { LoginPage } from \"@src/LoginPage.tsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub OAuth Scopes Configuration Function (JavaScript)\nDESCRIPTION: This JavaScript snippet shows a basic implementation of the `getConfig` function, intended to be imported via `configFn` in `main.wasp`. It returns an object containing a `scopes` array, which specifies the permissions requested from GitHub during the OAuth flow. In this example, no specific scopes are requested.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/github.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport function getConfig() {\n  return {\n    scopes: [],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing SignupForm with Additional Fields (JavaScript)\nDESCRIPTION: This snippet demonstrates how to customize the SignupForm component in JavaScript by adding additional fields. It shows both object-based and function-based approaches to adding custom fields, including validation and error handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  SignupForm,\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Catch-All Route in Wasp\nDESCRIPTION: Shows how to define a catch-all route in the main.wasp file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/links.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute CatchAllRoute { path: \"/pages/*\", to: CatchAllPage }\npage CatchAllPage { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page with Wasp Auth UI\nDESCRIPTION: React component for the login page using Wasp's authentication UI components. Includes a login form and navigation link to signup page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/crud.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function LoginPage() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        placeContent: 'center',\n      }}\n    >\n      <LoginForm />\n      <div>\n        <Link to=\"/signup\">Create an account</Link>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration Update - JavaScript\nDESCRIPTION: Updated Tailwind configuration file showing the new path resolution approach using resolveProjectPath.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { resolveProjectPath } = require('wasp/dev')\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    resolveProjectPath('./src/**/*.{js,jsx,ts,tsx}'),\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getTasks Query in JavaScript\nDESCRIPTION: This snippet demonstrates the implementation of the getTasks query function in JavaScript. It uses the Prisma client to fetch all tasks from the database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/05-queries.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getTasks = async (args, context) => {\n  return context.entities.Task.findMany({\n    orderBy: { id: 'asc' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link Component with Search Query and Hash in TSX\nDESCRIPTION: Shows how to add search parameters and hash fragments to a Link component. This example creates a link like '/task/1?sortBy=date#comments'.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/links.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Link\n  to=\"/task/:id\"\n  params={{ id: task.id }}\n  search={{ sortBy: 'date' }}\n  hash=\"comments\"\n>\n  {task.description}\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Reset in TypeScript\nDESCRIPTION: This snippet shows how to use the resetPassword action to complete the password reset process on the client-side in TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { resetPassword } from 'wasp/client/auth'\n...\nawait resetPassword({ password, token })\n```\n\n----------------------------------------\n\nTITLE: Adding isSignupComplete Field to User Entity in Wasp\nDESCRIPTION: This code shows how to add an isSignupComplete field to the User entity in Wasp, which is used to track the completion of the signup process.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    username                  String?       @unique\n    isSignupComplete          Boolean       @default(false)\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Implementing Queries in JavaScript\nDESCRIPTION: JavaScript implementation of the 'getAllTasks' and 'getFilteredTasks' Queries. It demonstrates how to export Query functions and handle arguments.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/queries.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tasks = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\nexport const getAllTasks = () => {\n  return tasks\n}\n\nexport const getFilteredTasks = (args) => {\n  const { isDone } = args\n  return tasks.filter((task) => task.isDone === isDone)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Schema\nDESCRIPTION: Prisma schema definition for the User entity required for Discord authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/discord.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  // Add your own fields below\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page Component\nDESCRIPTION: Next.js page component that handles user authentication validation and provides GitHub login link.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-13-how-to-add-auth-with-lucia-to-your-react-nextjs-app.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { validateRequest } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\n\nexport default async function Page() {\n  const { user } = await validateRequest();\n  if (user) {\n    return redirect(\"/\");\n  }\n  return (\n    <>\n      <h1>Sign in</h1>\n      <a href=\"/login/github\">Sign in with GitHub</a>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Auth Page Routes Configuration\nDESCRIPTION: Wasp route and page configuration for authentication pages.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/google.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Wasp (JavaScript)\nDESCRIPTION: This Wasp configuration snippet demonstrates how to set up username and password authentication. It specifies the user entity, authentication method, and redirect path for failed authentication attempts.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/username-and-pass.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  }\n}\n\n// Wasp requires the `userEntity` to have at least the following fields\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    username                  String        @unique\n    password                  String\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind Classes in JSX\nDESCRIPTION: Example of applying Tailwind CSS utility classes to a JSX component\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-16-tailwind-feature-announcement.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<h1 className=\"text-3xl font-bold underline\">\n  Hello world!\n</h1>\n```\n\n----------------------------------------\n\nTITLE: Combining Custom Appearance and Logo in JavaScript\nDESCRIPTION: Demonstrates how to combine custom colors and logo in the Auth UI by defining an appearance object and importing a logo image. These are then passed as props to the LoginForm component in JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nexport const appearance = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nimport { authAppearance } from './appearance'\nimport todoLogo from './todoLogo.png'\n\nexport function LoginPage() {\n  return <LoginForm appearance={appearance} logo={todoLogo} />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Path-Specific Middleware Customization in JavaScript\nDESCRIPTION: This JavaScript code defines the `fooBarNamespaceMiddlewareFn` function, intended for use with a Wasp `apiNamespace`. It takes the `middlewareConfig` map and adds a new custom middleware function under the key 'custom.middleware'. This custom middleware simply logs a message and calls `next()`. The modified `middlewareConfig` is returned, applying this custom middleware to all routes within the associated namespace path.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/middleware-config.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nexport const fooBarNamespaceMiddlewareFn = (middlewareConfig) => {\n  const customMiddleware = (_req, _res, next) => {\n    console.log('fooBarNamespaceMiddlewareFn: custom middleware')\n    next()\n  }\n\n  middlewareConfig.set('custom.middleware', customMiddleware)\n\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Route Parameters in React Components\nDESCRIPTION: Demonstrates how to access URL parameters in a React component using TypeScript with proper type definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/03-pages.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RouteComponentProps } from 'react-router-dom'\n\nexport const HelloPage = (\n  props: RouteComponentProps<{ name: string }>\n) => {\n  return <div>Here's {props.match.params.name}!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Login Form Component Implementation - Before Migration\nDESCRIPTION: Complete example of a login form component before migration, showing state management and form submission handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-16-to-0-17.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { login } from 'wasp/client/auth'\n\nexport const MyLoginForm = () => {\n  const [usernameValue, setUsernameValue] = useState('')\n  const [passwordValue, setPasswordValue] = useState('')\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    await login(usernameValue, passwordValue)\n    // ...\n  }\n\n  return <form onSubmit={handleSubmit}>{/* ... */}</form>\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema Language Model Definition\nDESCRIPTION: Example of how data models are defined using Prisma Schema Language (PSL), showing basic User model structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-28-why-we-chose-prisma.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          Int     @id @default(autoincrement())\n  username    String  @unique\n  password    String\n}\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests with Playwright in TypeScript\nDESCRIPTION: This snippet demonstrates an example end-to-end test using Playwright. It logs in a user, adds a task, and verifies the task's presence.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/ci-cd.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expect, test } from '@playwright/test'\nimport { generateRandomUser, logUserIn } from './utils'\n\nconst user = generateRandomUser()\n\ntest.describe('basic user flow test', () => {\n  test('log in and add task', async ({ page }) => {\n    await logUserIn({ page, user })\n    await expect(page).toHaveURL('/')\n    await expect(page.locator('body')).toContainText('No tasks yet.')\n\n    // Add a task\n    await page.fill('input[name=\"description\"]', 'First task')\n    await page.click('input:has-text(\"Create task\")')\n    await expect(page.locator('body')).toContainText('First task')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Form with Custom Appearance in JSX\nDESCRIPTION: React component that renders a login form with custom appearance settings imported from a separate configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/ui.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LoginForm } from '@wasp/auth/forms/Login'\nimport { authAppearance } from './appearance'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass the appearance object to the form\n      appearance={authAppearance}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Route in Server Setup (TypeScript)\nDESCRIPTION: This snippet shows how to add a custom route to the server using the setup function in TypeScript. It includes type definitions and adds a GET route to '/customRoute'.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/server-config.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ServerSetupFn } from 'wasp/server'\nimport { Application } from 'express'\n\nexport const mySetupFunction: ServerSetupFn = async ({ app }) => {\n  addCustomRoute(app)\n}\n\nfunction addCustomRoute(app: Application) {\n  app.get('/customRoute', (_req, res) => {\n    res.send('I am a custom route')\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Importing TypeScript Types for CRUD Override Functions\nDESCRIPTION: Example of importing TypeScript types for CRUD override functions from 'wasp/server/crud'. Shows how to define a strongly-typed override function for a GetAllQuery with Input and Output generic types.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/crud.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Tasks } from 'wasp/server/crud'\n\n// Each of the types is a generic type, so you can use it like this:\nexport const getAllOverride: Tasks.GetAllQuery<Input, Output> = async (\n  args,\n  context\n) => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Google OAuth Auth Method in Wasp (API Reference) - Wasp Language\nDESCRIPTION: Provides another variant of the main.wasp file showing Google OAuth setup for API reference purposes. Functionality is identical to the earlier example, referencing the same configFn and userSignupFields. Inputs, outputs, and prerequisites are unchanged. Ensures consistent documentation for API users.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/google.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/google.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/google.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining onBeforeOAuthRedirect Auth Hook in JavaScript/TypeScript\nDESCRIPTION: Exports an asynchronous function `onBeforeOAuthRedirect` executed before Wasp redirects the user to an OAuth provider. It receives the proposed redirect `url`, `oauth` information (including `uniqueRequestId`), the Prisma client `prisma`, and the request object `req`. This hook must return an object with a `url` property (`{ url: URL }`), which Wasp uses for the actual redirect.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/auth-hooks.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/auth/hooks.js\"\nexport const onBeforeOAuthRedirect = async ({ url, oauth, prisma, req }) => {\n  // Hook code goes here\n\n  return { url }\n}\n```\n```\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/auth/hooks.ts\"\nimport type { OnBeforeOAuthRedirectHook } from 'wasp/server/auth'\n\nexport const onBeforeOAuthRedirect: OnBeforeOAuthRedirectHook = async ({\n  url,\n  oauth,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n\n  return { url }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Email Verification Function in TypeScript\nDESCRIPTION: This snippet defines a function for generating the content of email verification emails in TypeScript, including type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/email.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetVerificationEmailContentFn } from 'wasp/server/auth'\n\nexport const getVerificationEmailContent: GetVerificationEmailContentFn = ({\n  verificationLink,\n}) => ({\n  subject: 'Verify your email',\n  text: `Click the link below to verify your email: ${verificationLink}`,\n  html: `\n        <p>Click the link below to verify your email</p>\n        <a href=\"${verificationLink}\">Verify email</a>\n    `,\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Configuration in Wasp\nDESCRIPTION: This code demonstrates how to import and access the server configuration object in a Wasp application, which includes fields like frontendUrl that can be set via environment variables.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/accessing-app-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { config } from 'wasp/server'\n\nconsole.log(config.frontendUrl)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration Update\nDESCRIPTION: Updates to tsconfig.json for TypeScript project references compatibility, including compiler options and include paths.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-15-to-0-16.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"composite\": true,\n    \"skipLibCheck\": true,\n    \"outDir\": \".wasp/out/user\"\n  },\n  \"include\": [\n    \"src\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Auth in Wasp Main File Structure\nDESCRIPTION: Basic structure overview of the main.wasp file for email authentication setup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/email.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n// Configuring e-mail authentication\napp myApp {\n  auth: { ... }\n}\n\n// Defining routes and pages\nroute SignupRoute { ... }\npage SignupPage { ... }\n// ...\n```\n\n----------------------------------------\n\nTITLE: Generating Dockerfile for Wasp Project\nDESCRIPTION: Command to generate and view the potentially combined Dockerfile for a Wasp project, including any custom modifications.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwasp dockerfile\n```\n\n----------------------------------------\n\nTITLE: Exporting Wasp App Configuration\nDESCRIPTION: Exports the configured Wasp app as the default export.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/general/wasp-ts-config.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Sending Emails in TypeScript\nDESCRIPTION: Demonstrates how to send emails using the emailSender API in TypeScript. The example shows sending an email with from details, recipient, subject, and content in both text and HTML formats.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/email/email.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { emailSender } from \"wasp/server/email\";\n\n// In some action handler...\nconst info = await emailSender.send({\n  from: {\n    name: \"John Doe\",\n    email: \"john@doe.com\",\n  },\n  to: \"user@domain.com\",\n  subject: \"Saying hello\",\n  text: \"Hello world\",\n  html: \"Hello <strong>world</strong>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Login Form Component Implementation - After Migration\nDESCRIPTION: Complete example of a login form component after migration, using the new object parameter structure for the login function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-16-to-0-17.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { login } from 'wasp/client/auth'\n\nexport const MyLoginForm = () => {\n  const [usernameValue, setUsernameValue] = useState('')\n  const [passwordValue, setPasswordValue] = useState('')\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    await login({ username: usernameValue, password: passwordValue })\n    // ...\n  }\n\n  return <form onSubmit={handleSubmit}>{/* ... */}</form>\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting a Delayed Job in JavaScript\nDESCRIPTION: Example of submitting a job with a delay in JavaScript. The job will be executed after the specified delay time.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/jobs.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst submittedJob = await mySpecialJob\n  .delay(10)\n  .submit({ job: \"args\" }, { \"retryLimit\": 2 })\n```\n\n----------------------------------------\n\nTITLE: Using Wasp Entities in Wasp File\nDESCRIPTION: Shows how to use Wasp Entities, which correspond to Prisma models, in various Wasp file declarations such as queries, jobs, and APIs.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/prisma-file.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"My App\",\n}\n\n...\n\n// Using Wasp Entities in the Wasp file\n\nquery getTasks {\n  fn: import { getTasks } from \"@src/queries\",\n  // highlight-next-line\n  entities: [Task]\n}\n\njob myJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@src/workers/bar\"\n  },\n  // highlight-next-line\n  entities: [Task],\n}\n\napi fooBar {\n  fn: import { fooBar } from \"@src/apis\",\n  // highlight-next-line\n  entities: [Task],\n  httpRoute: (GET, \"/foo/bar/:email\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Signup Page Component in React\nDESCRIPTION: Implements the Signup page component using Wasp's SignupForm in React.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/07-auth.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\nimport { SignupForm } from '@wasp/auth/forms/Signup'\n\nconst SignupPage = () => {\n  return (\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\n      <SignupForm />\n      <br />\n      <span>\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </div>\n  )\n}\n\nexport default SignupPage\n```\n\n----------------------------------------\n\nTITLE: Creating a Signup Page Component in JavaScript\nDESCRIPTION: Implements a React component for the signup page using Wasp's SignupForm component with a link to the login page for existing users.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/07-auth.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\nimport { SignupForm } from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\n      <SignupForm />\n      <br />\n      <span>\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring API Endpoint in Wasp\nDESCRIPTION: Shows how to declare a basic API endpoint in a Wasp file using the api declaration syntax. Defines a GET route at /foo/bar.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/apis.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar {\n  fn: import { fooBar } from \"@src/apis\",\n  httpRoute: (GET, \"/foo/bar\")\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Cache Key with Wasp in JavaScript\nDESCRIPTION: This snippet demonstrates how to import a query operation from Wasp and access its internal query cache key using JavaScript. It requires a Wasp project setup and assumes that 'getTasks' is a defined query in 'wasp/client/operations'. The 'queryCacheKey' property provides the cache key needed for interacting with react-query's advanced APIs. The result, 'queryKey', can be used as a dependency or identifier for cache manipulations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/actions.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getTasks } from 'wasp/client/operations'\n\nconst queryKey = getTasks.queryCacheKey\n```\n\n----------------------------------------\n\nTITLE: Importing Wasp Operations in React Client Component\nDESCRIPTION: This snippet shows how to import Wasp operations (actions and queries) into a React component. It includes the useQuery hook for data fetching, createMeme action for meme generation, and useAuth for user authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n//...other imports...\nimport { useQuery } from '@wasp/queries';\nimport createMeme from '@wasp/actions/createMeme';\nimport getAllMemes from '@wasp/queries/getAllMemes';\nimport useAuth from '@wasp/auth/useAuth';\n\nexport function HomePage() {\n  const [topics, setTopics] = useState(['']);\n  const [audience, setAudience] = useState('');\n  const [isMemeGenerating, setIsMemeGenerating] = useState(false);\n\n  // 😎 😎 😎\n  const { data: user } = useAuth();\n  const { data: memes, isLoading, error } = useQuery(getAllMemes); \n\n  const handleGenerateMeme: FormEventHandler<HTMLFormElement> = async (e) => {\n    e.preventDefault();\n    if (!user) {\n      history.push('/login');\n      return;\n    }\n    if (topics.join('').trim().length === 0 || audience.length === 0) {\n      alert('Please provide topic and audience');\n      return;\n    }\n    try {\n      setIsMemeGenerating(true);\n      await createMeme({ topics, audience }); // <--- 😎 😎 😎\n    } catch (error: any) {\n      alert('Error generating meme: ' + error.message);\n    } finally {\n      setIsMemeGenerating(false);\n    }\n  };\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Type-Safe Job Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement a type-safe job function in TypeScript using the generated MySpecialJob type.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/jobs.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MySpecialJob } from '@wasp/jobs/mySpecialJob'\n\ntype Input = { name: string; }\ntype Output = { tasks: Task[]; }\n\nexport const foo: MySpecialJob<Input, Output> = async (args, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Client Setup Function (TypeScript)\nDESCRIPTION: Example of an asynchronous setup function in TypeScript with proper type annotations that runs before client initialization.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/client-config.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function mySetupFunction(): Promise<void> {\n  // Run some code\n}\n```\n\n----------------------------------------\n\nTITLE: Using getTasks Query in React Component (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the getTasks query in a React component using JavaScript. It uses Wasp's useQuery hook for reactive data fetching.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/05-queries.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getTasks, useQuery } from 'wasp/client/operations'\n\nexport const MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n\nconst TaskView = ({ task }) => {\n  return (\n    <div>\n      <input type=\"checkbox\" id={String(task.id)} checked={task.isDone} />\n      {task.description}\n    </div>\n  )\n}\n\nconst TasksList = ({ tasks }) => {\n  if (!tasks?.length) return <div>No tasks</div>\n\n  return (\n    <div>\n      {tasks.map((task, idx) => (\n        <TaskView task={task} key={idx} />\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NotesPage with Data Fetching\nDESCRIPTION: Shows the final implementation of the `NotesPage` React component in `src/client/NotesPage.tsx`. It utilizes the `useQuery` hook from Wasp to fetch data using the previously defined `getEmbeddedNotes` query. The component handles loading and error states returned by the hook. If data (`notes`) is successfully loaded, it maps over the array to display each note's content; otherwise, it shows a 'No notes yet' message if the array is empty.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_40\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { useQuery } from '@wasp/queries';\nimport getEmbeddedNotes from '@wasp/queries/getEmbeddedNotes';\n\nconst NotesPage = () => {\n  const { data: notes, isLoading, error } = useQuery(getEmbeddedNotes);\n\n  if (isLoading) <div>Loading...</div>;\n  if (error) <div>Error: {error.message}</div>;\n\n  return (\n    <>\n      <h2 className='text-2xl font-bold'>My Notes</h2>\n      {notes && notes.length > 0 ? (\n        notes.map((note) => (\n          <div key={note.id} className='flex flex-col gap-2 justify-center items-center w-full'>\n            <div className='flex flex-row gap-2 justify-center items-center w-full'>\n              <div className='w-full p-4 h-22 bg-blue-100 border rounded-lg w-full'>{note.content}</div>\n            </div>\n          </div>\n        ))\n      ) : notes && notes.length === 0 && (\n        <div className='flex flex-col gap-2 justify-center items-center w-full'>\n          <div className='w-full p-4 h-22 bg-blue-100 border rounded-lg w-full'>No notes yet</div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default NotesPage;\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Wasp Auth UI Component in React\nDESCRIPTION: This code snippet demonstrates how to customize the Wasp Auth UI component by passing props. It shows how to modify various style tokens to match the app's branding.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-04-12-auth-ui.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Auth.AuthForms\n  appearance={{\n    colors: {\n      brand: '#5721d4',\n      brandAccent: '#3a0ca3',\n      submitButtonText: 'white',\n    },\n    layout: {\n      contentWidth: '400px',\n    },\n    fonts: {\n      bodyFontFamily: 'Verdana, sans-serif',\n      buttonFontFamily: 'Verdana, sans-serif',\n      inputFontFamily: 'Verdana, sans-serif',\n      labelFontFamily: 'Verdana, sans-serif',\n    },\n    radii: {\n      borderRadiusButton: '5px',\n      buttonBorderRadius: '5px',\n      inputBorderRadius: '5px',\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Reset Password Form\nDESCRIPTION: Implementation of a password reset page using Wasp's ResetPasswordForm component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/ui.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\nroute PasswordResetRoute { path: \"/password-reset\", to: PasswordResetPage }\npage PasswordResetPage {\n  component: import { ResetPasswordPage } from \"@src/ResetPasswordPage.tsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ResetPasswordForm } from 'wasp/client/auth'\n\nexport function ResetPasswordPage() {\n  return <ResetPasswordForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Setup and Middleware Functions in Wasp\nDESCRIPTION: This Wasp code defines an application `MyApp` and configures its server behavior. The `server` field specifies external functions for setup (`setupFn`) and middleware configuration (`middlewareConfigFn`), importing them from a JavaScript file (`@src/myServerSetupCode.js`). These functions are executed by the Wasp backend.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/server-config.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napp MyApp {\n  title: \"My app\",\n  // ...\n  server: {\n    setupFn: import { mySetupFunction } from \"@src/myServerSetupCode.js\",\n    middlewareConfigFn: import { myMiddlewareConfigFn } from \"@src/myServerSetupCode.js\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Email Verification Content Function in TypeScript\nDESCRIPTION: This snippet shows how to define a function that generates the content for the email verification message in TypeScript, including type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetVerificationEmailContentFn } from 'wasp/server/auth'\n\nexport const getVerificationEmailContent: GetVerificationEmailContentFn = ({\n  verificationLink,\n}) => ({\n  subject: 'Verify your email',\n  text: `Click the link below to verify your email: ${verificationLink}`,\n  html: `\n        <p>Click the link below to verify your email</p>\n        <a href=\"${verificationLink}\">Verify email</a>\n    `,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Google Auth\nDESCRIPTION: This snippet shows how to set the necessary environment variables for Google authentication in the .env.server file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/google.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nGOOGLE_CLIENT_ID=your-google-client-id\nGOOGLE_CLIENT_SECRET=your-google-client-secret\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth Pages in React (JavaScript)\nDESCRIPTION: This snippet provides the implementation of the Login page and a Layout component in React for a JavaScript project. It uses the LoginForm component from Wasp's client auth module.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/google.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }) {\n  return (\n    <div className=\"w-full h-full bg-white\">\n      <div className=\"min-w-full min-h-[75vh] flex items-center justify-center\">\n        <div className=\"w-full h-full max-w-sm p-5 bg-white\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Query Client (JavaScript)\nDESCRIPTION: Example of configuring React Query's QueryClient using the configureQueryClient hook in JavaScript. This sets global defaults for all queries.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/client-config.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureQueryClient } from 'wasp/client/operations'\n\nexport default async function mySetupFunction() {\n  // ... some setup\n  configureQueryClient({\n    defaultOptions: {\n      queries: {\n        staleTime: Infinity,\n      },\n    },\n  })\n  // ... some more setup\n}\n```\n\n----------------------------------------\n\nTITLE: Custom API Route Definition in Wasp\nDESCRIPTION: Example showing how to define a custom API route handler at /foo/bar endpoint in Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-04-11-wasp-launch-week-two.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napi MyApi {\n  method: GET,\n  path: \"/foo/bar\",\n  fn: import { bar } from \"@server/bar.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp App with GitHub Auth\nDESCRIPTION: Main Wasp application configuration file that sets up GitHub authentication with user entity and redirect paths.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/github.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {\n        configFn: import { getConfig } from \"@src/auth/github.js\",\n        userSignupFields: import { userSignupFields } from \"@src/auth/github.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link Component with Optional Static Segment\nDESCRIPTION: Demonstrates how to use the Link component with a route containing an optional static segment in a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/links.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n/* You can include ... */\n<Link to=\"/task/:id/details\" params={{ id: 1 }}>\n  Task 1\n</Link>\n\n/* ... or exclude the optional segment */\n<Link to=\"/task/:id\" params={{ id: 1 }}>\n  Task 1\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Importing Query Operations in JavaScript\nDESCRIPTION: Demonstrates how to import the generated query operation on both client and server sides in a JavaScript application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/queries.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Use it on the client\nimport { getFoo } from 'wasp/client/operations'\n\n// Use it on the server\nimport { getFoo } from 'wasp/server/operations'\n```\n\n----------------------------------------\n\nTITLE: Defining Notes Page Route and Component in Wasp\nDESCRIPTION: Defines a new route `/notes` within the `main.wasp` file, mapping it to the `NotesPage` page definition. The `NotesPage` requires user authentication (`authRequired: true`) and specifies its frontend implementation using the `Notes` component imported from `@client/NotesPage`. This snippet establishes the necessary Wasp configuration for the notes feature.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nroute NotesPage { path: \"/notes\", to: NotesPage }\npage NotesPage {\n  authRequired: true,\n  component: import Notes from \"@client/NotesPage\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Queries with Entities (JavaScript)\nDESCRIPTION: JavaScript implementation of queries using entities, demonstrating how to access and use the Prisma API through the context object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/queries.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nexport const getAllTasks = async (args, context) => {\n  return context.entities.Task.findMany({})\n}\n\nexport const getFilteredTasks = async (args, context) => {\n  return context.entities.Task.findMany({\n    where: { isDone: args.isDone },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Job in Wasp\nDESCRIPTION: Declaration of a job in the main.wasp file, which specifies the executor, implementation function, and associated entities. This sets up the job configuration that will be used by the Wasp framework.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/jobs.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\njob mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@src/workers/bar\"\n  },\n  entities: [Task],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Password Migration Page in TypeScript React\nDESCRIPTION: React component for the password migration interface. It provides a form where users can enter their username and old password to migrate to the new authentication system.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  FormItemGroup,\n  FormLabel,\n  FormInput,\n  FormError,\n} from \"wasp/client/auth\";\nimport { useForm } from \"react-hook-form\";\nimport { migratePassword } from \"wasp/client/operations\";\nimport { useState } from \"react\";\n\nexport function MigratePasswordPage() {\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  const form = useForm<{\n    username: string;\n    password: string;\n  }>();\n\n  const onSubmit = form.handleSubmit(async (data) => {\n    try {\n      const result = await migratePassword(data);\n      setSuccessMessage(result.message);\n    } catch (e: unknown) {\n      console.error(e);\n      if (e instanceof Error) {\n        setErrorMessage(e.message);\n      }\n    }\n  });\n\n  return (\n    <div style={{\n      maxWidth: \"400px\",\n      margin: \"auto\",\n    }}>\n      <h1>Migrate your password</h1>\n      <p>\n        If you have an account on the old version of the website, you can\n        migrate your password to the new version.\n      </p>\n      {successMessage && <div>{successMessage}</div>}\n      {errorMessage && <FormError>{errorMessage}</FormError>}\n      <form onSubmit={onSubmit}>\n        <FormItemGroup>\n          <FormLabel>Username</FormLabel>\n          <FormInput\n            {...form.register(\"username\", {\n              required: \"Username is required\",\n            })}\n          />\n          <FormError>{form.formState.errors.username?.message}</FormError>\n        </FormItemGroup>\n        <FormItemGroup>\n          <FormLabel>Password</FormLabel>\n          <FormInput\n            {...form.register(\"password\", {\n              required: \"Password is required\",\n            })}\n            type=\"password\"\n          />\n          <FormError>{form.formState.errors.password?.message}</FormError>\n        </FormItemGroup>\n        <button type=\"submit\">Migrate password</button>\n      </form>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Dependencies Migration - Package.json Update\nDESCRIPTION: Example showing how to migrate dependencies from Wasp file to package.json format.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"foo\",\n  \"dependencies\": {\n    \"wasp\": \"file:.wasp/out/sdk/wasp\",\n    \"react\": \"^18.2.0\",\n    \"redux\": \"^4.0.5\",\n    \"reactjs-redux\": \"^7.1.3\"\n  },\n  \"devDependencies\": {\n    \"typescript\": \"^5.1.0\",\n    \"vite\": \"^4.3.9\",\n    \"@types/react\": \"^18.0.37\",\n    \"prisma\": \"4.16.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing the Generated Dockerfile with Wasp CLI (Shell)\nDESCRIPTION: This shell command uses the Wasp CLI to display the final Dockerfile content that will be used to build the server image. It combines the default Wasp-generated Dockerfile with any customisations found in a `Dockerfile` at the project's root, allowing developers to preview the result before building.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwasp dockerfile\n```\n\n----------------------------------------\n\nTITLE: Defining Recurring Job in Wasp\nDESCRIPTION: Configuration for a recurring job with cron schedule and default arguments in Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/jobs.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\njob mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@src/workers/bar\"\n  },\n  schedule: {\n    cron: \"0 * * * *\",\n    args: {=json { \"job\": \"args\" } json=} // optional\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Page with Wasp Auth UI\nDESCRIPTION: React component for the signup page using Wasp's authentication UI components. Provides a simple centered signup form.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/crud.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SignupForm } from 'wasp/client/auth'\n\nexport function SignupPage() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        placeContent: 'center',\n      }}\n    >\n      <SignupForm />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Wasp\nDESCRIPTION: This snippet demonstrates how to define the User entity in the main.wasp file. It includes an id field as an example.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/github.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\n    id          Int     @id @default(autoincrement())\n    // ...\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Implementing LoginPage Component in TypeScript\nDESCRIPTION: This snippet shows how to implement a login page component in TypeScript using Wasp's LoginForm component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function LoginPage() {\n  return <LoginForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Deployment Script Configuration\nDESCRIPTION: Example package.json configuration for creating a deployment script with environment variables.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/cli.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"deploy\": \"REACT_APP_ANOTHER_VAR=somevalue wasp deploy fly deploy\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Build Directory for Deployment - Shell\nDESCRIPTION: Positions the user in the .wasp/build directory, which contains the deployable assets for the Wasp application. This step ensures that subsequent containerization and deployment commands are run from the correct context. No dependencies except a built Wasp app and shell environment are required. Takes no parameters and does not produce any output except changing the working directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/manually.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncd .wasp/build\n```\n\n----------------------------------------\n\nTITLE: Example Telemetry Payload Sent on Wasp Installation (JSON)\nDESCRIPTION: This JSON object illustrates the minimal, anonymized data sent once via HTTPS when Wasp is installed using the `install.sh` script. It includes a randomly generated identifier (`distinct_id`) and the operating system (`os`). This helps track the number of installations across different platforms.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/telemetry.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Randomly generated id.\n  \"distinct_id\": \"274701613078193779564259\",\n  \"os\": \"linux\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a Typed React Component with Mocked Wasp Queries (TypeScript/TSX)\nDESCRIPTION: Provides a Vitest test case (`src/Todo.test.tsx`) for the typed `Todo` component using TypeScript. It employs `mockServer` to get `mockQuery`, mocks the `getTasks` query with specific data, renders the component using `renderInContext`, and leverages `@testing-library/react` (`screen`) for assertions, demonstrating component testing in a typed Wasp environment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/testing.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { test, expect } from \"vitest\";\nimport { screen } from \"@testing-library/react\";\n\nimport { mockServer, renderInContext } from \"wasp/client/test\";\nimport { getTasks } from \"wasp/client/operations\";\nimport Todo from \"./Todo\";\n\nconst { mockQuery } = mockServer();\n\nconst mockTasks = [\n  {\n    id: 1,\n    description: \"test todo 1\",\n    isDone: true,\n    userId: 1,\n  },\n];\n\ntest(\"handles mock data\", async () => {\n  mockQuery(getTasks, mockTasks);\n\n  renderInContext(<Todo />);\n\n  await screen.findByText(\"test todo 1\");\n\n  expect(screen.getByRole(\"checkbox\")).toBeChecked();\n\n  screen.debug();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Fly.io Deployment\nDESCRIPTION: Commands to set necessary environment variables in Fly.io for the Wasp backend, including port, JWT secret, and web client URL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/manually.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflyctl secrets set PORT=8080\nflyctl secrets set JWT_SECRET=<random_string_at_least_32_characters_long>\nflyctl secrets set WASP_WEB_CLIENT_URL=<url_of_where_frontend_will_be_deployed>\n```\n\n----------------------------------------\n\nTITLE: Modeling the User Entity for Auth - Prisma\nDESCRIPTION: Defines a Prisma model for users, specifying ID, unique username, and display name fields. This is used by Wasp's authentication to persist user identities from Google OAuth. 'id' is auto-incremented and primary, 'username' must be unique. Requires a connected database and integration with your Wasp app's userEntity configuration. Input data is mapped from signup functions, output is persisted user records.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/google.md#2025-04-22_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          Int    @id @default(autoincrement())\n  username    String @unique\n  displayName String\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Prisma Schema\nDESCRIPTION: This snippet demonstrates how to define the User entity in the Prisma schema file, which is required for email authentication in Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  // Add your own fields below\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User-Task Relationship Schema\nDESCRIPTION: Establishes a one-to-many relationship between User and Task entities using Prisma Schema Language.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/07-auth.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\n    id       Int    @id @default(autoincrement())\n    tasks    Task[]\npsl=}\n\nentity Task {=psl\n    id          Int     @id @default(autoincrement())\n    description String\n    isDone      Boolean @default(false)\n    user        User?   @relation(fields: [userId], references: [id])\n    userId      Int?\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Defining Server-Side Signup Field Validation (TypeScript)\nDESCRIPTION: Defines server side validation for custom signup fields using TypeScript. Exports the userSignupFields object with async field validation functions, ensuring the address field meets type and length constraints. Designed for use with Wasp's server/auth features in TypeScript projects. Throws errors for invalid inputs before user creation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_24\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\\n\\nexport const userSignupFields = defineUserSignupFields({\\n  address: async (data) => {\\n    const address = data.address\\n    if (typeof address !== 'string') {\\n      throw new Error('Address is required')\\n    }\\n    if (address.length < 5) {\\n      throw new Error('Address must be at least 5 characters long')\\n    }\\n    return address\\n  },\\n})\\n\n```\n\n----------------------------------------\n\nTITLE: Storing Values in TypeScript Setup\nDESCRIPTION: Example of storing and accessing values using setup function in TypeScript with proper type definitions\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/server-config.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ServerSetupFn } from 'wasp/server'\n\nlet someResource = undefined\n\nexport const mySetupFunction: ServerSetupFn = async () => {\n  // Let's pretend functions setUpSomeResource and startSomeCronJob\n  // are implemented below or imported from another file.\n  someResource = await setUpSomeResource()\n  startSomeCronJob()  \n}\n\nexport const getSomeResource = () => someResource\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SomeQuery } from 'wasp/server/operations'\nimport { getSomeResource } from './myServerSetupCode.js'\n\n...\n\nexport const someQuery: SomeQuery<...> = async (args, context) => {\n  const someResource = getSomeResource()\n  return queryDataFromSomeResource(args, someResource)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Hooks in Wasp App (JavaScript)\nDESCRIPTION: Configuration example showing how to import and set up authentication hooks in a Wasp application using JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/auth-hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  auth: {\n    userEntity: User,\n    methods: {\n      ...\n    },\n    onBeforeSignup: import { onBeforeSignup } from \"@src/auth/hooks\",\n    onAfterSignup: import { onAfterSignup } from \"@src/auth/hooks\",\n    onBeforeOAuthRedirect: import { onBeforeOAuthRedirect } from \"@src/auth/hooks\",\n    onBeforeLogin: import { onBeforeLogin } from \"@src/auth/hooks\",\n    onAfterLogin: import { onAfterLogin } from \"@src/auth/hooks\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertical Social Buttons in Auth UI (JavaScript/JSX)\nDESCRIPTION: Demonstrates how to change the layout of social login buttons in the Wasp `LoginForm`. By setting the `socialLayout` prop to `'vertical'`, the buttons are arranged vertically instead of the default horizontal layout.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/ui.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/LoginPage.jsx\"\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass in the socialLayout prop\n      socialLayout=\"vertical\"\n    />\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Page Component in TypeScript\nDESCRIPTION: Creates the SignupPage React component in TypeScript that utilizes the Wasp-provided SignupForm. This component renders the signup form and provides a link back to the login page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/07-auth.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\nimport { SignupForm } from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\n      <SignupForm />\n      <br />\n      <span>\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing First Provider User ID - getFirstProviderUserId in JavaScript (React Component)\nDESCRIPTION: Demonstrates usage of the Wasp helper function getFirstProviderUserId within a React component context to retrieve the first available user identifier from an authenticated user object. Dependencies: wasp/auth JS package. Input: user prop. Output: userId string or null. Designed for presentation-layer logic.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/entities.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getFirstProviderUserId } from 'wasp/auth'\\n\\nconst MainPage = ({ user }) => {\\n  const userId = getFirstProviderUserId(user)\\n  // ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User Auth Data in React Component\nDESCRIPTION: Example of accessing user authentication data in a React component when rendering a list of tasks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/entities.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {task.user.auth?.identities[0].providerUserId}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running Wasp Migration Script - Bash Command\nDESCRIPTION: Command to run the migration script for converting an existing Wasp project to the new structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx wasp-migrate foo\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement the previously declared Actions 'createTask' and 'markTaskAsDone' in JavaScript. It includes a simple in-memory database and logic for creating and updating tasks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet nextId = 4\nconst tasks = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\nexport const createTask = (args) => {\n  const newTask = {\n    id: nextId,\n    isDone: false,\n    description: args.description,\n  }\n  nextId += 1\n  tasks.push(newTask)\n  return newTask\n}\n\nexport const markTaskAsDone = (args) => {\n  const task = tasks.find((task) => task.id === args.id)\n  if (!task) {\n    return\n  }\n  task.isDone = true\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Email using Wasp Client Auth (TypeScript)\nDESCRIPTION: This snippet shows the TypeScript equivalent of calling the `verifyEmail` action from `wasp/client/auth`. It's used within a React component (e.g., `EmailVerificationPage.tsx`) to send the verification token to the server. This action facilitates the email verification flow on the client-side as configured by `emailVerification.clientRoute`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/email.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/pages/EmailVerificationPage.tsx\"\nimport { verifyEmail } from 'wasp/client/auth'\n...\nawait verifyEmail({ token });\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Signup Form in JavaScript\nDESCRIPTION: This snippet demonstrates how to customize the SignupForm component in JavaScript by adding additional fields using both object and render function approaches.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  SignupForm,\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        /* The address field is defined using an object */\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        /* The phone number is defined using a render function */\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User with Google Authentication in Wasp\nDESCRIPTION: Example of the AuthUser object structure when a user has signed up with Google authentication. Shows both user data fields and authentication-specific information stored in the identities object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = {\n  // User data\n  id: 'cluqs9qyh00007cn73apj4hp7',\n  address: 'Some address',\n\n  // Auth methods specific data\n  identities: {\n    email: null,\n    google: {\n      id: '1117XXXX1301972049448',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Username Authentication in Wasp\nDESCRIPTION: This snippet shows how to enable username authentication in the main.wasp file by specifying the user entity and enabling the usernameAndPassword method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/username-and-pass.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    // 1. Specify the user entity (we'll define it next)\n    userEntity: User,\n    methods: {\n      // 2. Enable username authentication\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Task Update in React (JavaScript)\nDESCRIPTION: React component implementation that handles task status updates through a checkbox interface using the updateTask action.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/06-actions.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport updateTask from '@wasp/actions/updateTask'\n\nconst Task = ({ task }) => {\n  const handleIsDoneChange = async (event) => {\n    try {\n      await updateTask({\n        id: task.id,\n        isDone: event.target.checked,\n      })\n    } catch (error) {\n      window.alert('Error while updating task: ' + error.message)\n    }\n  }\n\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        id={String(task.id)}\n        checked={task.isDone}\n        onChange={handleIsDoneChange}\n      />\n      {task.description}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp Client with JavaScript Imports\nDESCRIPTION: Defines the client configuration within a Wasp application (`MyApp`) using JavaScript. It specifies the root React component (`@src/Root.jsx`) via the `rootComponent` property and an asynchronous setup function (`@src/myClientSetupCode.js`) via the `setupFn` property, which executes before the client application starts.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/client-config.md#2025-04-22_snippet_13\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.jsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.js\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page Component\nDESCRIPTION: React component for the login page using Wasp's LoginForm component\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-13-how-to-add-auth-with-lucia-to-your-react-nextjs-app.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\nimport { LoginForm } from 'wasp/client/auth'\n\nexport const LoginPage = () => {\n  return (\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\n      <LoginForm />\n      <br />\n      <span>\n        I don't have an account yet (<Link to=\"/signup\">go to signup</Link>).\n      </span>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Google Auth Behavior in Wasp\nDESCRIPTION: This snippet shows how to override the default Google authentication behavior in Wasp by importing a custom userSignupFields function. It includes both the Wasp configuration and the implementation of the imported function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {\n        userSignupFields: import { userSignupFields } from \"@src/auth/google.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const userSignupFields = {\n  isSignupComplete: () => false,\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  isSignupComplete: () => false,\n})\n```\n\n----------------------------------------\n\nTITLE: Combining Custom Appearance and Logo in TypeScript\nDESCRIPTION: Shows how to combine custom colors and logo in the Auth UI by defining a typed appearance object and importing a logo image. These are then passed as props to the LoginForm component in TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CustomizationOptions } from 'wasp/client/auth'\n\nexport const appearance: CustomizationOptions['appearance'] = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nimport { authAppearance } from './appearance'\nimport todoLogo from './todoLogo.png'\n\nexport function LoginPage() {\n  return <LoginForm appearance={appearance} logo={todoLogo} />\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Actions (JavaScript)\nDESCRIPTION: Demonstrates how to handle errors in Actions using JavaScript. It shows how to throw an HttpError with a custom status code, message, and additional data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const createTask = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Client API URL Environment Variable in Wasp\nDESCRIPTION: This snippet shows how to configure the REACT_APP_API_URL environment variable when building the client component of a Wasp application, pointing it to your server's custom domain.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/extras.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nREACT_APP_API_URL=https://api.myapp.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Sender in Wasp\nDESCRIPTION: Configuration for setting up the email sender using Dummy provider in Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/email.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  // ...\n  // 7. Set up the email sender\n  emailSender: {\n    provider: Dummy,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Password Reset Email Content in TypeScript\nDESCRIPTION: This snippet demonstrates how to define the content for the password reset email in TypeScript for a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/email.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetPasswordResetEmailContentFn } from 'wasp/server/auth'\n\nexport const getPasswordResetEmailContent: GetPasswordResetEmailContentFn = ({\n  passwordResetLink,\n}) => ({\n  subject: 'Password reset',\n  text: `Click the link below to reset your password: ${passwordResetLink}`,\n  html: `\n        <p>Click the link below to reset your password</p>\n        <a href=\"${passwordResetLink}\">Reset password</a>\n    `,\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Email Identity Properties in TypeScript\nDESCRIPTION: Shows how to access email identity properties from a user object including the email address, verification status, and email timestamp information. This snippet demonstrates the structure of the email identity object and its available properties.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/_email-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst emailIdentity = user.identities.email\n\n// Email address the user used to sign up, e.g. \"fluffyllama@app.com\".\nemailIdentity.id\n\n// `true` if the user has verified their email address.\nemailIdentity.isEmailVerified\n\n// Datetime when the email verification email was sent.\nemailIdentity.emailVerificationSentAt\n\n// Datetime when the last password reset email was sent.\nemailIdentity.passwordResetSentAt\n```\n\n----------------------------------------\n\nTITLE: Default Global Middleware Definition in TypeScript\nDESCRIPTION: TypeScript definition of the default middleware configuration with proper type definitions, showing the standard middleware stack with TypeScript types for middleware configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/middleware-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MiddlewareConfig = Map<string, express.RequestHandler>\n\n// Used in the examples below 👇\nexport type MiddlewareConfigFn = (middlewareConfig: MiddlewareConfig) => MiddlewareConfig\n\nconst defaultGlobalMiddleware: MiddlewareConfig = new Map([\n  ['helmet', helmet()],\n  ['cors', cors({ origin: config.allowedCORSOrigins })],\n  ['logger', logger('dev')],\n  ['express.json', express.json()],\n  ['express.urlencoded', express.urlencoded({ extended: false })],\n  ['cookieParser', cookieParser()]\n])\n```\n\n----------------------------------------\n\nTITLE: Finding User Identities in Server-side Actions with TypeScript\nDESCRIPTION: TypeScript implementation of findUserIdentity in a server-side action, showing how to properly type and use the authentication context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/entities.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { findUserIdentity } from 'wasp/client/auth'\n\nexport const createTask: CreateTask<...>  = async (args, context) => {\n  const emailIdentity = findUserIdentity(context.user, 'email')\n  const googleIdentity = findUserIdentity(context.user, 'google')\n  if (emailIdentity) {\n    // ...\n  } else if (googleIdentity) {\n    // ...\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring CRUD Operations in Wasp Configuration\nDESCRIPTION: A Wasp configuration file that defines CRUD operations for a Task entity, including get, getAll, create, update, and delete operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/crud.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\ncrud Tasks { // crud name here is \"Tasks\"\n  entity: Task,\n  operations: {\n    get: {},\n    getAll: {},\n    create: {},\n    update: {},\n    delete: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Keycloak Configuration\nDESCRIPTION: TypeScript implementation of Keycloak configuration with type definitions and user signup fields mapping.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/keycloak.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  username: () => 'hardcoded-username',\n  displayName: (data: any) => data.profile.name,\n})\n\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Global Middleware in TypeScript\nDESCRIPTION: This snippet demonstrates the default global middleware configuration in a Wasp application using TypeScript. It includes type definitions and the same middleware as the JavaScript version.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/middleware-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MiddlewareConfig = Map<string, express.RequestHandler>\n\nexport type MiddlewareConfigFn = (middlewareConfig: MiddlewareConfig) => MiddlewareConfig\n\nconst defaultGlobalMiddleware: MiddlewareConfig = new Map([\n  ['helmet', helmet()],\n  ['cors', cors({ origin: config.allowedCORSOrigins })],\n  ['logger', logger('dev')],\n  ['express.json', express.json()],\n  ['express.urlencoded', express.urlencoded({ extended: false })],\n  ['cookieParser', cookieParser()]\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing Meme Edit Action\nDESCRIPTION: Server-side action implementation for editing memes, including authentication, authorization, and ImgFlip API integration for generating new meme images.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { EditMeme } from '@wasp/actions/types';\n\ntype EditMemeArgs = Pick<Meme, 'id' | 'text0' | 'text1'>;\n\nexport const editMeme: EditMeme<EditMemeArgs, Meme> = async ({ id, text0, text1 }, context) => {\n  if (!context.user) {\n    throw new HttpError(401, 'You must be logged in');\n  }\n\n  const meme = await context.entities.Meme.findUniqueOrThrow({\n    where: { id: id },\n    include: { template: true },\n  });\n\n  if (!context.user.isAdmin && meme.userId !== context.user.id) {\n    throw new HttpError(403, 'You are not the creator of this meme');\n  }\n\n  const memeUrl = await generateMemeImage({\n    templateId: meme.template.id,\n    text0: text0,\n    text1: text1,\n  });\n\n  const newMeme = await context.entities.Meme.update({\n    where: { id: id },\n    data: {\n      text0: text0,\n      text1: text1,\n      url: memeUrl,\n    },\n  });\n\n  return newMeme;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Google Authentication in Wasp Frontend\nDESCRIPTION: This code snippet shows how to use Google authentication in the frontend of a Wasp application. It demonstrates importing the sign-in URL and using the useAuth hook to access user data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-03-08-building-a-full-stack-app-supabase-vs-wasp.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { signInUrl as googleSignInUrl } from \"@wasp/auth/helpers/Google\";\n...\nconst { data: user } = useAuth();\n```\n\n----------------------------------------\n\nTITLE: Setting Up Auth Routes\nDESCRIPTION: Wasp route and page configurations for login and signup functionality.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/username-and-pass.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { Signup } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration Setup\nDESCRIPTION: Configuration file for Tailwind CSS specifying content paths and theme settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/css-frameworks.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { resolveProjectPath } = require('wasp/dev')\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [resolveProjectPath('./src/**/*.{js,jsx,ts,tsx}')],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Default Wasp Project Structure (JavaScript)\nDESCRIPTION: Displays the standard file and directory structure created by the `wasp new` command for a JavaScript-based project. Key elements include `main.wasp` for Wasp configuration, `schema.prisma` for database schema, `package.json` for dependencies, the `public` directory for static assets, and the `src` directory for frontend source code (including `MainPage.jsx`).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/02-project-structure.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\\n├── .gitignore\\n├── main.wasp          # Your Wasp code goes here.\\n├── schema.prisma      # Your Prisma schema goes here.\\n├── package.json       # Your dependencies and project info go here.\\n├── public             # Your static files (e.g., images, favicon) go here.\\n├── src                # Your source code (TS/JS/CSS/HTML) goes here.\\n│   ├── Main.css\\n│   ├── MainPage.jsx\\n│   ├── vite-env.d.ts\\n│   └── waspLogo.png\\n├── tsconfig.json\\n├── vite.config.ts\\n├── .waspignore\\n└── .wasproot\\n\n```\n\n----------------------------------------\n\nTITLE: Using Queries on Client and Server in JavaScript\nDESCRIPTION: Example of how to import and use a declared query in JavaScript, showing both client-side and server-side import syntax.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/actions.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Use it on the client\nimport { createFoo } from 'wasp/client/operations'\n\n// Use it on the server\nimport { createFoo } from 'wasp/server/operations'\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Logo to Auth UI in JavaScript (JSX)\nDESCRIPTION: Shows how to import a logo image (e.g., `logo.png`) and pass it to the `logo` prop of the `LoginForm` component within a React functional component (`LoginPage.jsx`). This displays the specified logo within the authentication form.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/ui.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/LoginPage.jsx\"\nimport { LoginForm } from 'wasp/client/auth'\nimport Logo from './logo.png'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass in the path to your logo\n      logo={Logo}\n    />\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Auth Routes and Pages in Wasp File (TypeScript)\nDESCRIPTION: This snippet demonstrates how to add the necessary routes and pages for authentication in the main.wasp file for a TypeScript project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/google.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.tsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Verification Form in React\nDESCRIPTION: Example of implementing an email verification page using Wasp's VerifyEmailForm component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/ui.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\nroute EmailVerificationRoute { path: \"/email-verification\", to: EmailVerificationPage }\npage EmailVerificationPage {\n  component: import { VerifyEmailPage } from \"@src/VerifyEmailPage.jsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VerifyEmailForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function VerifyEmailPage() {\n  return <VerifyEmailForm />\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Keycloak Configuration\nDESCRIPTION: JavaScript implementation of Keycloak configuration and user signup fields mapping.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/keycloak.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const userSignupFields = {\n  username: () => 'hardcoded-username',\n  displayName: (data) => data.profile.name,\n}\n\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Worker Function in TypeScript\nDESCRIPTION: TypeScript implementation of the worker function with type definitions for input, output, and context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/jobs.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type MySpecialJob } from 'wasp/server/jobs'\nimport { type Task } from 'wasp/entities'\n\ntype Input = { name: string; }\ntype Output = { tasks: Task[]; }\n\nexport const foo: MySpecialJob<Input, Output> = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Import Paths - JavaScript Example\nDESCRIPTION: Example showing how to update import paths in the Wasp file from old to new format.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npage LoginPage {\n  component: import Login from \"@src/client/LoginPage\"\n}\n\nquery getTasks {\n  fn: import { getTasks } from \"@src/server/queries.js\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User Entity in Wasp\nDESCRIPTION: Example of configuring the userEntity in a Wasp application configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/entities/entities.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Wasp Project Directory Structure with Tailwind\nDESCRIPTION: Shows the expected directory structure of a Wasp project with Tailwind configuration files.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/css-frameworks.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── main.wasp\n├── package.json\n├── src\n│   ├── Main.css\n│   ├── MainPage.jsx\n│   ├── vite-env.d.ts\n│   └── waspLogo.png\n├── public\n├── tsconfig.json\n├── vite.config.ts\n├── postcss.config.cjs\n└── tailwind.config.cjs\n```\n\n----------------------------------------\n\nTITLE: Opening Wasp Database Studio\nDESCRIPTION: Command to open Wasp's database studio in the browser, allowing users to view and edit data in the database, including examining entity schemas and their fields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/04-entities.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwasp db studio\n```\n\n----------------------------------------\n\nTITLE: Implementing a Server Setup Function to Add a Custom Route (JavaScript)\nDESCRIPTION: This JavaScript code shows an implementation of `mySetupFunction` referenced in `main.wasp`. It takes the Express `app` instance as an argument and uses it to define a custom GET route at `/customRoute`. This function is executed once when the server starts.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/server-config.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/myServerSetupCode.ts\"\nexport const mySetupFunction = async ({ app }) => {\n  addCustomRoute(app)\n}\n\nfunction addCustomRoute(app) {\n  app.get('/customRoute', (_req, res) => {\n    res.send('I am a custom route')\n  })\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Consuming an API from React Client in TypeScript\nDESCRIPTION: Shows how to call a custom API endpoint from a React component in TypeScript using the Axios wrapper provided by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/apis.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useEffect } from \"react\";\nimport { api } from \"wasp/client/api\";\n\nasync function fetchCustomRoute() {\n  const res = await api.get(\"/foo/bar\");\n  console.log(res.data);\n}\n\nexport const Foo = () => {\n  useEffect(() => {\n    fetchCustomRoute();\n  }, []);\n\n  return <>// ...</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Refactoring Complex Function into Smaller, Well-Named Functions in JavaScript\nDESCRIPTION: This snippet demonstrates how to break down a complex function into smaller, more focused functions with clear and descriptive names, improving code readability and maintainability.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-10-12-on-importance-of-naming-in-programming.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function procureFreeMachine (type, region) { ... }\nasync function setUpDockerWorker (machineId, dockerImage, setupCmd) { ... }\nasync function startExecutingJob (workerId, jobDescription) { ... }\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Data Models\nDESCRIPTION: Schema definition for User and Recipe models using Prisma Schema Language, establishing a one-to-many relationship between users and recipes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/introduction/introduction.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          Int @id @default(autoincrement())\n  recipes     Recipe[]\n}\n\nmodel Recipe {\n  id          Int @id @default(autoincrement())\n  title       String\n  description String?\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Application Metadata for Migration - WASP\nDESCRIPTION: This code snippet shows the .wasp configuration necessary when updating an app to Wasp 0.14.0. The 'version' field is highlighted for migration, indicating adherence to the new standard, but otherwise contains only basic metadata. This file is a starting point for further migration and assumes the existence of an updated schema.prisma file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  wasp: {\n    // highlight-next-line\n    version: \"^0.14.0\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Entity in Wasp\nDESCRIPTION: Defines the basic User entity schema with an auto-incrementing ID field using Prisma Schema Language (PSL).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/07-auth.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\n    id       Int    @id @default(autoincrement())\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Defining Password Migration Action - Wasp Backend - wasp (JavaScript/TypeScript)\nDESCRIPTION: Declares a new Wasp action called 'migratePassword', registering a backend handler from '@src/auth'. No entities are specified. Designed to be invoked from the client form for password migration, in either JavaScript or TypeScript backend.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_20\n\nLANGUAGE: wasp\nCODE:\n```\naction migratePassword {\n  fn: import { migratePassword } from \"@src/auth\",\n  entities: []\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SendGrid Email Provider\nDESCRIPTION: Configuration for the SendGrid email provider in the main.wasp file. This requires an API key environment variable.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/email/email.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: SendGrid,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Entity Models to SQLite Configuration in schema.prisma\nDESCRIPTION: Complete schema.prisma file with SQLite configuration and sample User and Task entity models that demonstrate the correct model definition syntax and relationships.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_10\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\n// There are some example entities, you should move your entities here\n// highlight-start\nmodel User {\n  id       Int @id @default(autoincrement())\n  tasks    Task[]\n}\n\nmodel Task {\n  id          Int @id @default(autoincrement())\n  description String\n  isDone      Boolean\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\n}\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Declaring a Job in Wasp\nDESCRIPTION: This snippet demonstrates how to declare a job named 'mySpecialJob' in a Wasp file. It includes the executor, perform function, schedule, and associated entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/jobs.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\njob mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@server/workers/bar.js\",\n    executorOptions: {\n      pgBoss: {=json { \"retryLimit\": 1 } json=}\n    }\n  },\n  schedule: {\n    cron: \"*/5 * * * *\",\n    args: {=json { \"foo\": \"bar\" } json=},\n    executorOptions: {\n      pgBoss: {=json { \"retryLimit\": 0 } json=}\n    }\n  },\n  entities: [Task],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Forgot Password Form Component\nDESCRIPTION: Implementation of a forgot password page using Wasp's ForgotPasswordForm component\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/ui.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\nroute RequestPasswordResetRoute { path: \"/request-password-reset\", to: RequestPasswordResetPage }\npage RequestPasswordResetPage {\n  component: import { ForgotPasswordPage } from \"@src/ForgotPasswordPage.jsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ForgotPasswordForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function ForgotPasswordPage() {\n  return <ForgotPasswordForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Using updateTask Action in React Component (TypeScript)\nDESCRIPTION: This snippet shows how to use the 'updateTask' action in a React component written in TypeScript. It includes type annotations for the event handlers and props.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/06-actions.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormEvent, ChangeEvent } from 'react'\nimport { Task } from 'wasp/entities'\nimport {\n  updateTask,\n  createTask,\n  getTasks,\n  useQuery,\n} from 'wasp/client/operations'\n\nconst TaskView = ({ task }: { task: Task }) => {\n  const handleIsDoneChange = async (event: ChangeEvent<HTMLInputElement>) => {\n    try {\n      await updateTask({\n        id: task.id,\n        isDone: event.target.checked,\n      })\n    } catch (error: any) {\n      window.alert('Error while updating task: ' + error.message)\n    }\n  }\n\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        id={String(task.id)}\n        checked={task.isDone}\n        onChange={handleIsDoneChange}\n      />\n      {task.description}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Signup Page Component in TypeScript\nDESCRIPTION: Implements a React component for the signup page in TypeScript using Wasp's SignupForm component with a link to the login page for existing users.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/07-auth.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\nimport { SignupForm } from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\n      <SignupForm />\n      <br />\n      <span>\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Page with Wasp Auth UI\nDESCRIPTION: React component implementing a signup page using Wasp's authentication UI components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/crud.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SignupForm } from 'wasp/client/auth'\n\nexport function SignupPage() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        placeContent: 'center',\n      }}\n    >\n      <SignupForm />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp Client in TypeScript\nDESCRIPTION: Demonstrates how to configure the client-side of a Wasp application using TypeScript. It shows setting the title, root component, setup function, and base directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/client-config.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.tsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.ts\",\n    baseDir: \"/my-app\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Logout Button to Main Page (JavaScript)\nDESCRIPTION: Implements a logout button in the main page component by importing the logout function from Wasp's client auth module and adding a button that triggers the logout action when clicked.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/07-auth.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nimport { logout } from 'wasp/client/auth'\n//...\n\nconst MainPage = () => {\n  // ...\n  return (\n    <div>\n      // ...\n      <button onClick={logout}>Logout</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Configuration in Wasp\nDESCRIPTION: This snippet shows how to import and use the client configuration object in a Wasp application. It demonstrates accessing the 'apiUrl' property from the client-side code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/accessing-app-config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { config } from 'wasp/client'\n\nconsole.log(config.apiUrl)\n```\n\n----------------------------------------\n\nTITLE: Configuring Route and Page in Wasp\nDESCRIPTION: Wasp configuration for defining a home page route with authentication requirement.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/introduction/introduction.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\nroute HomeRoute { path: \"/\", to: HomePage }\npage HomePage {\n  component: import { HomePage } from \"@src/pages/HomePage\",\n  authRequired: true\n}\n```\n\n----------------------------------------\n\nTITLE: Discord API Response Structure\nDESCRIPTION: Example of the user data structure returned by Discord's /users/@me endpoint.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/discord.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"80351110224678912\",\n  \"username\": \"Nelly\",\n  \"discriminator\": \"1337\",\n  \"avatar\": \"8342729096ea3675442027381ff50dfe\",\n  \"verified\": true,\n  \"flags\": 64,\n  \"banner\": \"06c16474723fe537c283b8efa61a30c8\",\n  \"accent_color\": 16711680,\n  \"premium_type\": 1,\n  \"public_flags\": 64,\n  \"avatar_decoration_data\": {\n    \"sku_id\": \"1144058844004233369\",\n    \"asset\": \"a_fed43ab12698df65902ba06727e20c0e\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using API from Client (JavaScript)\nDESCRIPTION: Shows how to use a custom API endpoint from the client-side JavaScript code using the Axios wrapper.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/apis.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect } from \"react\";\nimport { api } from \"wasp/client/api\";\n\nasync function fetchCustomRoute() {\n  const res = await api.get(\"/foo/bar\");\n  console.log(res.data);\n}\n\nexport const Foo = () => {\n  useEffect(() => {\n    fetchCustomRoute();\n  }, []);\n\n  return <>// ...</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Search Query and Hash with Link Component in TSX\nDESCRIPTION: This snippet shows how to use the search and hash props with the Link component. It creates a link with additional query parameters and a hash fragment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/links.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Link\n  to=\"/task/:id\"\n  params={{ id: task.id }}\n  search={{ sortBy: 'date' }}\n  hash=\"comments\"\n>\n  {task.description}\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Initializing Mock Server Utilities in Wasp Tests (JavaScript)\nDESCRIPTION: Shows how to set up the mock server using the `mockServer` function from `wasp/client/test`. This function initializes the mocking capabilities and returns an object containing the `mockQuery` and `mockApi` utility functions, which are used to define mock responses for Wasp queries and API calls respectively. It should be called once per test file, outside of individual test cases.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { mockServer } from \"wasp/client/test\";\n\nconst { mockQuery, mockApi } = mockServer();\n```\n\n----------------------------------------\n\nTITLE: Checking Wasp Telemetry Status\nDESCRIPTION: Example of displaying telemetry status and configuration information.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/general/cli.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp telemetry\n\nTelemetry is currently: ENABLED\nTelemetry cache directory: /home/user/.cache/wasp/telemetry/\nLast time telemetry data was sent for this project: 2021-05-27 09:21:16.79537226 UTC\nOur telemetry is anonymized and very limited in its scope: check https://wasp.sh/docs/telemetry for more details.\n```\n\n----------------------------------------\n\nTITLE: Implementing Setup Function in JavaScript\nDESCRIPTION: Example of an asynchronous setup function in JavaScript that runs before client initialization.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/client-config.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function mySetupFunction() {\n  // Run some code\n}\n```\n\n----------------------------------------\n\nTITLE: Path-Specific Middleware Configuration in Wasp\nDESCRIPTION: Example of configuring custom middleware for all routes under a specific path in the Wasp configuration file using apiNamespace.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/middleware-config.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\napiNamespace fooBar {\n  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from \"@src/apis\",\n  path: \"/foo/bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a NewTaskForm Component in JavaScript/JSX\nDESCRIPTION: This code defines a React component for a new task form in JavaScript/JSX. It handles form submission and calls the 'createTask' Action with the entered description.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/06-actions.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst NewTaskForm = () => {\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    try {\n      const target = event.target\n      const description = target.description.value\n      target.reset()\n      await createTask({ description })\n    } catch (err) {\n      window.alert('Error: ' + err.message)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"description\" type=\"text\" defaultValue=\"\" />\n      <input type=\"submit\" value=\"Create task\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting a Delayed Job in TypeScript\nDESCRIPTION: Example of submitting a job with a delay in TypeScript. The job will be executed after the specified delay time.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/jobs.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst submittedJob = await mySpecialJob\n  .delay(10)\n  .submit({ job: \"args\" }, { \"retryLimit\": 2 })\n```\n\n----------------------------------------\n\nTITLE: Updating User Signup Fields in TypeScript (After)\nDESCRIPTION: Demonstrates the updated implementation of defining user signup fields in Wasp 0.13.0, accessing the name property instead of displayName from the profile object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n    displayName: (data: any) => data.profile.name,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Password Migration Route in Wasp\nDESCRIPTION: Defines a route and page for the password migration interface in the Wasp configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_26\n\nLANGUAGE: wasp\nCODE:\n```\nroute MigratePasswordRoute { path: \"/migrate-password\", to: MigratePassword }\npage MigratePassword {\n  component: import { MigratePasswordPage } from \"@src/pages/MigratePassword\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WASP_SERVER_URL Environment Variable in Bash\nDESCRIPTION: Sets the WASP_SERVER_URL server environment variable which is required in Wasp 0.13.0 to generate OAuth redirect URLs. In development, this defaults to http://localhost:3001.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nWASP_SERVER_URL=https://your-wasp-server-url.com\n```\n\n----------------------------------------\n\nTITLE: Extensions Configuration in Prisma Schema\nDESCRIPTION: Example of how PostgreSQL extensions would appear in a raw Prisma schema file. This helps illustrate the relationship between Wasp's configuration and the resulting Prisma schema.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/backends.md#2025-04-22_snippet_13\n\nLANGUAGE: prisma\nCODE:\n```\nextensions = [hstore(schema: \"myHstoreSchema\"), pg_trgm, postgis(version: \"2.1\")]\n//              👆 Extension name\n```\n\n----------------------------------------\n\nTITLE: Declaring an Async Client Setup Function (TypeScript)\nDESCRIPTION: Async setup function in TypeScript for client-side bootstrapping. Annotated to return Promise<void>, runs arbitrary pre-initialization logic. No arguments, return value ignored. Must be asynchronous. Limitations: requires implementation of desired setup steps.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/client-config.md#2025-04-22_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nexport default async function mySetupFunction(): Promise<void> {\n  // Run some code\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Combined Customizations in JavaScript\nDESCRIPTION: Exports a JavaScript object `appearance` defining custom color tokens for the Wasp Auth UI. This object is intended for use alongside other customizations like adding a logo.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/ui.md#2025-04-22_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/appearance.js\"\nexport const appearance = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Auth Logic in JavaScript\nDESCRIPTION: This JavaScript snippet defines two exported functions for Google authentication configuration within a Wasp app. `userSignupFields` provides functions to map data received from Google (passed in the `data` object) to the `User` entity fields (`username`, `displayName`). `getConfig` returns an object specifying the required Google OAuth scopes ('profile', 'email').\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/google.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nexport const userSignupFields = {\n  username: () => \"hardcoded-username\",\n  displayName: (data) => data.profile.name,\n}\n\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Login Implementation\nDESCRIPTION: Example of a custom login page implementation using the login action directly with error handling and navigation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/username-and-pass.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { login } from 'wasp/client/auth'\nimport { useState } from 'react'\nimport { useHistory, Link } from 'react-router-dom'\n\nexport function LoginPage() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState<Error | null>(null)\n  const history = useHistory()\n\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    try {\n      await login(username, password)\n      history.push('/')\n    } catch (error: unknown) {\n      setError(error as Error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* ... */}\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeSafe Server Action\nDESCRIPTION: TypeScript implementation of a server action with type definitions for request arguments and response.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-01-30-open-saas-free-open-source-starter-react-nodejs.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// src/srever/actions.ts\n\ntype RespArgs = {\n  hours: string;\n};\n\nconst getResponse: GetResponse<RespArgs, string> = async ({ hours }) => { }\n```\n\n----------------------------------------\n\nTITLE: Defining Custom User Signup Fields in TypeScript\nDESCRIPTION: TypeScript version of defining custom user signup fields. This code validates the address field during signup to ensure it's a string of sufficient length.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/overview.md#2025-04-22_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Server Environment Variables Validation in TypeScript\nDESCRIPTION: Creates a validation schema for server environment variables that requires STRIPE_API_KEY to be provided as a string, with type checking ensured by defineEnvValidationSchema.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/env-vars.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as z from 'zod'\n\nimport { defineEnvValidationSchema } from 'wasp/env'\n\nexport const envValidationSchema = defineEnvValidationSchema(\n  z.object({\n    STRIPE_API_KEY: z.string({\n      required_error: 'STRIPE_API_KEY is required.',\n    }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring App Seeding with Wasp in JavaScript (Wasp)\nDESCRIPTION: This snippet demonstrates how to configure seed functions in the main.wasp file for a Wasp application using JavaScript. By listing external imports in the db.seeds array, Wasp can register and later invoke these functions to populate the initial database state. The dependency is that seed functions are defined and exported in a linked JavaScript file. Each import added to the seeds array becomes available for invocation via the `wasp db seed` command, with seed function names derived from the import name. All fields in db are optional, offering flexibility in configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/backends.md#2025-04-22_snippet_6\n\nLANGUAGE: Wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  db: {\n    seeds: [\n      import devSeed from \"@src/dbSeeds.js\"\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server-Side Logic for Custom Signup Fields (TypeScript)\nDESCRIPTION: Provides the TypeScript implementation for handling custom signup fields on the server. It uses `defineUserSignupFields` from `wasp/server/auth` to create an object where keys are field names ('address') and values are async functions. These functions receive client data, perform validation (e.g., check type and length), and return the processed value or throw an error if validation fails.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"src/auth/signup.js\"\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n```\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"src/auth/signup.ts\"\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Setup Function (TypeScript)\nDESCRIPTION: TypeScript implementation of a client setup function that runs before rendering the application, setting up a periodic logger with proper return type.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/client-config.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nexport default async function mySetupFunction(): Promise<void> {\n  let count = 1\n  setInterval(\n    () => console.log(`You have been online for ${count++} hours.`),\n    1000 * 60 * 60\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Dev Server Port in Vite\nDESCRIPTION: Demonstrates how to change the default dev server port and update the corresponding environment variable for Wasp client URL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/custom-vite-config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  server: {\n    port: 4000,\n  },\n}\n```\n\nLANGUAGE: env\nCODE:\n```\nWASP_WEB_CLIENT_URL=http://localhost:4000\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  server: {\n    port: 4000,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Server Setup Function\nDESCRIPTION: Example of an async setup function that initializes resources and returns them to be available in the server context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/docs/design-docs/server-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In '@ext/serverSetup.js'\nexport const myCustomSetup = async () => {\n  const someResource = await setupSomeResource()\n  return { someResource } \n}\n```\n\n----------------------------------------\n\nTITLE: Image Component Usage in MDX\nDESCRIPTION: Example of using the ImgWithCaption component within the MDX content to display banner image.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-01-23-wasp-launch-week-five.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ImgWithCaption\n    alt=\"Launch Week 5 is here\"\n    source=\"img/lw5/lw5-banner.png\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing CRUD Operations in React Component (JavaScript)\nDESCRIPTION: This snippet shows how to use Wasp's generated CRUD operations in a React component for managing tasks. It demonstrates querying tasks, creating new tasks, and rendering the task list.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/crud.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tasks } from 'wasp/client/crud'\nimport { useState } from 'react'\n\nexport const MainPage = () => {\n  const { data: tasks, isLoading, error } = Tasks.getAll.useQuery()\n  const createTask = Tasks.create.useAction()\n  const [taskDescription, setTaskDescription] = useState('')\n\n  function handleCreateTask() {\n    createTask({ description: taskDescription, isDone: false })\n    setTaskDescription('')\n  }\n\n  if (isLoading) return <div>Loading...</div>\n  if (error) return <div>Error: {error.message}</div>\n  return (\n    <div\n      style={{\n        fontSize: '1.5rem',\n        display: 'grid',\n        placeContent: 'center',\n        height: '100vh',\n      }}\n    >\n      <div>\n        <input\n          value={taskDescription}\n          onChange={(e) => setTaskDescription(e.target.value)}\n        />\n        <button onClick={handleCreateTask}>Create task</button>\n      </div>\n      <ul>\n        {tasks.map((task) => (\n          <li key={task.id}>{task.description}</li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Logo to Login Form\nDESCRIPTION: Demonstrates how to add a custom logo to the Auth UI components\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/ui.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\nimport Logo from './logo.png'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass in the path to your logo\n      logo={Logo}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Logout Functionality\nDESCRIPTION: Implements a logout button component using Wasp's authentication system. Shows both JavaScript and TypeScript implementations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/07-auth.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { logout } from 'wasp/client/auth'\n\nconst MainPage = () => {\n  return (\n    <div>\n      <button onClick={logout}>Logout</button>\n    </div>\n  )\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { logout } from 'wasp/client/auth'\n\nconst MainPage = () => {\n  return (\n    <div>\n      <button onClick={logout}>Logout</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication in Wasp\nDESCRIPTION: Basic configuration for enabling email authentication in a Wasp application\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/ui.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  //...\n  auth: {\n    methods: {\n      email: {},\n    },\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Entity for Social Login in Wasp (TypeScript)\nDESCRIPTION: This TypeScript version of the Wasp code snippet demonstrates how to update the User entity to include the externalAuthAssociations field, which is required for implementing social login in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/overview.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    //...\n    externalAuthAssociations  SocialLogin[]\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Importing CRUD Operations in Client Code (TypeScript, React)\nDESCRIPTION: Demonstrates how to import the CRUD operations object for 'Tasks' in a TypeScript/React (.tsx) file, providing type safety and enabling usage of the generated CRUD hooks. Depends on 'wasp/client/crud'. Inputs: N/A; Outputs: Typed 'Tasks' object for CRUD operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/crud.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tasks } from 'wasp/client/crud'\n```\n\n----------------------------------------\n\nTITLE: Using routes Object with Optional Static Segment\nDESCRIPTION: Shows how to use the routes object to create links for routes with optional static segments.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/links.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst linkToOptional = routes.OptionalRoute.build({\n  path: '/task/:id/details', // or '/task/:id'\n  params: { id: 1 },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Combined Customizations (Colors) in TypeScript\nDESCRIPTION: Defines a typed TypeScript object `appearance` in `src/appearance.ts` using `CustomizationOptions['appearance']`. It specifies custom colors (`brand`, `brandAccent`, `submitButtonText`) for the Wasp Auth UI, intended for use in a combined customization scenario.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/ui.md#2025-04-22_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/appearance.ts\"\nimport type { CustomizationOptions } from 'wasp/client/auth'\n\nexport const appearance: CustomizationOptions['appearance'] = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: TypeScript Discord Auth Configuration\nDESCRIPTION: TypeScript implementation of Discord authentication configuration with type definitions for user signup fields and OAuth scopes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/discord.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  username: (data: any) => data.profile.global_name,\n  avatarUrl: (data: any) => data.profile.avatar,\n})\n\nexport function getConfig() {\n  return {\n    scopes: ['identify'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Route in Wasp\nDESCRIPTION: Demonstrates how to define a route in the main.wasp file, specifying the path and the corresponding page component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/links.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nroute TaskRoute { path: \"/task/:id\", to: TaskPage }\npage TaskPage { ... }\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Actions\nDESCRIPTION: Demonstrates how to handle errors in Actions using HttpError class for custom error responses.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/actions.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport HttpError from '@wasp/core/HttpError.js'\n\nexport const createTask = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreateTask } from '@wasp/actions/types'\nimport HttpError from '@wasp/core/HttpError.js'\n\nexport const createTask: CreateTask = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Route to Express App in Wasp Server Setup (TypeScript)\nDESCRIPTION: Provides a TypeScript setup function that registers a custom Express route, using explicit types for safer integration. The function uses the ServerSetupFn type from Wasp and the Application type from Express to ensure type safety, and receives the Express app for custom server mutation. Input is a context object; the output is the side effect of additional routing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/server-config.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ServerSetupFn } from 'wasp/server'\nimport { Application } from 'express'\n\nexport const mySetupFunction: ServerSetupFn = async ({ app }) => {\n  addCustomRoute(app)\n}\n\nfunction addCustomRoute(app: Application) {\n  app.get('/customRoute', (_req, res) => {\n    res.send('I am a custom route')\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using an API from Client-Side JavaScript\nDESCRIPTION: Example of using a custom API endpoint from client-side code using the Axios wrapper provided by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/apis.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useEffect } from \"react\";\nimport api from \"@wasp/api\";\n\nasync function fetchCustomRoute() {\n  const res = await api.get(\"/foo/bar\");\n  console.log(res.data);\n}\n\nexport const Foo = () => {\n  useEffect(() => {\n    fetchCustomRoute();\n  }, []);\n\n  return <>// ...</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Auth Data in React Components - JavaScript\nDESCRIPTION: Example of accessing user authentication data from task objects in a React component using JavaScript, showing how to navigate the nested auth and identities structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {task.user.auth?.identities[0].providerUserId}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variable Validation Schemas in TypeScript\nDESCRIPTION: Creates validation schemas for both server and client environment variables using Zod in TypeScript. The server schema requires a STRIPE_API_KEY string, while the client schema defines REACT_APP_NAME with a default value.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/env-vars.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as z from 'zod'\n\nimport { defineEnvValidationSchema } from 'wasp/env'\n\nexport const serverEnvValidationSchema = defineEnvValidationSchema(\n  z.object({\n    STRIPE_API_KEY: z.string({\n      required_error: 'STRIPE_API_KEY is required.',\n    }),\n  })\n)\n\nexport const clientEnvValidationSchema = defineEnvValidationSchema(\n  z.object({\n    REACT_APP_NAME: z.string().default('TODO App'),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Wasp TypeScript Todo Project\nDESCRIPTION: Command to create a new Wasp project using the TypeScript todo template which includes authentication and full-stack type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/starter-templates.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwasp new <project-name> -t todo-ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Server and Client in Wasp TypeScript\nDESCRIPTION: Sets up server and client configurations for the Wasp app, including setup functions and middleware.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/general/wasp-ts-config.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.server({\n  setupFn: { importDefault: 'setup', from: '@src/serverSetup' },\n  middlewareConfigFn: { import: 'serverMiddlewareFn', from: '@src/serverSetup' },\n});\n\napp.client({\n  rootComponent: { import: 'App', from: '@src/App' },\n  setupFn: { importDefault: 'setup', from: '@src/clientSetup' }\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Per-Path Middleware in Wasp and JavaScript\nDESCRIPTION: This example shows how to customize middleware for all API routes under a common path in a Wasp application. It demonstrates adding custom middleware to a specific API namespace.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/middleware-config.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napiNamespace fooBar {\n  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from \"@src/apis\",\n  path: \"/foo/bar\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const fooBarNamespaceMiddlewareFn = (middlewareConfig) => {\n  const customMiddleware = (_req, _res, next) => {\n    console.log('fooBarNamespaceMiddlewareFn: custom middleware')\n    next()\n  }\n\n  middlewareConfig.set('custom.middleware', customMiddleware)\n\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind Usage Example in React\nDESCRIPTION: Example of using Tailwind CSS classes in a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/css-frameworks.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// ...\n\n<h1 className=\"text-3xl font-bold underline\">\n  Hello world!\n</h1>\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database in Prisma Schema\nDESCRIPTION: Prisma schema configuration for using PostgreSQL as the database provider.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/databases.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth with Extra Fields in Wasp\nDESCRIPTION: Configuration in main.wasp file to set up authentication with extra user signup fields. This connects the auth system with custom validation logic imported from a separate file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_11\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  // ...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {\n        userSignupFields: import { userSignupFields } from \"@src/auth/signup\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Auth Routes Configuration\nDESCRIPTION: Wasp route and page definitions for login and signup functionality.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/username-and-pass.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.tsx\"\n}\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { Signup } from \"@src/pages/auth.tsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Keycloak Config and User Mapping (TypeScript)\nDESCRIPTION: This TypeScript file (`src/auth/keycloak.ts`) provides typed implementations for Keycloak integration. `userSignupFields` uses `defineUserSignupFields` from Wasp for type safety and defines how Keycloak profile data maps to the Wasp User model fields. `getConfig` returns the required OAuth scopes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/keycloak.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  username: () => \"hardcoded-username\",\n  displayName: (data: any) => data.profile.name,\n})\n\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Server Environment Validation Schema in Wasp Configuration\nDESCRIPTION: Configures the Wasp application to use the defined validation schema for server environment variables by importing it from the env.js/ts file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/env-vars.md#2025-04-22_snippet_15\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  ...\n  server: {\n    envValidationSchema: import { envValidationSchema } from \"@src/env\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Migration Page UI using React/JavaScript\nDESCRIPTION: Provides a React component (`MigratePasswordPage`) using JavaScript for the user-facing password migration page. It uses `react-hook-form` to manage the username and password input fields and validation. On form submission, it calls the `migratePassword` Wasp operation (defined elsewhere) and updates the UI with success or error messages using React's `useState` hook. It imports necessary components like `FormItemGroup`, `FormLabel`, `FormInput`, and `FormError` from `wasp/client/auth`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"src/pages/MigratePassword.jsx\"\nimport {\n  FormItemGroup,\n  FormLabel,\n  FormInput,\n  FormError,\n} from \"wasp/client/auth\";\nimport { useForm } from \"react-hook-form\";\nimport { migratePassword } from \"wasp/client/operations\";\nimport { useState } from \"react\";\n\nexport function MigratePasswordPage() {\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const form = useForm();\n\n  const onSubmit = form.handleSubmit(async (data) => {\n    try {\n      const result = await migratePassword(data);\n      setSuccessMessage(result.message);\n    } catch (e) {\n      console.error(e);\n      if (e instanceof Error) {\n        setErrorMessage(e.message);\n      }\n    }\n  });\n\n  return (\n    <div style={{\n      maxWidth: \"400px\",\n      margin: \"auto\",\n    }}>\n      <h1>Migrate your password</h1>\n      <p>\n        If you have an account on the old version of the website, you can\n        migrate your password to the new version.\n      </p>\n      {successMessage && <div>{successMessage}</div>}\n      {errorMessage && <FormError>{errorMessage}</FormError>}\n      <form onSubmit={onSubmit}>\n        <FormItemGroup>\n          <FormLabel>Username</FormLabel>\n          <FormInput\n            {...form.register(\"username\", {\n              required: \"Username is required\",\n            })}\n          />\n          <FormError>{form.formState.errors.username?.message}</FormError>\n        </FormItemGroup>\n        <FormItemGroup>\n          <FormLabel>Password</FormLabel>\n          <FormInput\n            {...form.register(\"password\", {\n              required: \"Password is required\",\n            })}\n            type=\"password\"\n          />\n          <FormError>{form.formState.errors.password?.message}</FormError>\n        </FormItemGroup>\n        <button type=\"submit\">Migrate password</button>\n      </form>\n    </div>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Base Path - Vite Config - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to set a custom base path for serving the client application in Vite by adjusting the `base` property in `vite.config.js`. The provided configuration changes the public base path to `/my-app/`; it's merged with Wasp's defaults. No dependencies or special parameters are needed beyond editing the root config file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/custom-vite-config.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  base: '/my-app/',\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Schema\nDESCRIPTION: Shows how to define the required User entity in the Prisma schema file\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/google.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n}\n```\n\n----------------------------------------\n\nTITLE: Running Import Rewriting Script\nDESCRIPTION: Command that uses jscodeshift to automatically update @wasp imports in source files for compatibility with Wasp 0.12.x.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx jscodeshift@0.15.1 -t https://raw.githubusercontent.com/wasp-lang/wasp-codemod/main/src/transforms/imports-from-0-11-to-0-12.ts --extensions=js,ts,jsx,tsx src/\n```\n\n----------------------------------------\n\nTITLE: Package.json Dependencies Update\nDESCRIPTION: Required updates to package.json dependencies, adding explicit react-dom and react-router-dom dependencies.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-15-to-0-16.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"react-dom\": \"^18.2.0\",\n    \"react-router-dom\": \"^6.26.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Server Environment Variable (JavaScript)\nDESCRIPTION: Illustrates how to read a server-side environment variable using the Node.js process.env object in JavaScript. Requires the variable (e.g., SOME_VAR_NAME) to be set in the environment (via .env.server, shell, or deployment platform). Outputs the value for use in backend logic. Suitable for secrets as server variables are not exposed to the client.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/env-vars.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(process.env.SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Implementing Login and Signup Component in React\nDESCRIPTION: This code creates a React component for the login page, which toggles between login and signup forms. It uses Wasp's authentication forms and implements a simple state management for form switching.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from '@wasp/auth/forms/Login';\nimport { SignupForm } from '@wasp/auth/forms/Signup';\nimport { useState } from 'react';\n\nexport default () => {\n  const [showSignupForm, setShowSignupForm] = useState(false);\n\n  const handleShowSignupForm = () => {\n    setShowSignupForm((x) => !x);\n  };\n\n  return (\n    <>\n      {showSignupForm ? <SignupForm /> : <LoginForm />}\n      <div onClick={handleShowSignupForm} className='underline cursor-pointer hover:opacity-80'>\n        {showSignupForm ? 'Already Registered? Login!' : 'No Account? Sign up!'}\n      </div>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Username with `getUsername` in Wasp Auth (JS/TS)\nDESCRIPTION: Demonstrates using the `getUsername` helper function from `wasp/auth` within a React component (JavaScript/TypeScript) to display a user's username associated with a task. This function returns the username if the user signed up via the Username & Password method, otherwise `null`. Requires the `user` object passed to it includes the `auth` and `identities` relations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/entities.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"src/MainPage.jsx\"\nimport { getUsername } from 'wasp/auth'\n\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {getUsername(task.user)}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n```\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/MainPage.tsx\"\nimport { getUsername } from 'wasp/auth'\n\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {getUsername(task.user)}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Signup Action in Wasp\nDESCRIPTION: This snippet shows how to define a custom signup action in the main.wasp file, importing the signup function from a separate JavaScript file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/advanced/custom-auth-actions.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\naction customSignup {\n  fn: import { signup } from \"@src/auth/signup.js\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Background Job in Wasp\nDESCRIPTION: Declaration of a background job in the Wasp configuration file, specifying the executor, perform function, and related entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/jobs.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\njob mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@src/workers/bar\"\n  },\n  entities: [Task],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Namespace and Endpoint in Wasp TypeScript\nDESCRIPTION: Defines an API namespace and an API endpoint for the Wasp app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/general/wasp-ts-config.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napp.apiNamespace('bar', {\n  middlewareConfigFn: { import: 'barNamespaceMiddlewareFn', from: '@src/apis' },\n  path: '/bar'\n});\n\napp.api('barBaz', {\n  fn: { import: 'barBaz', from: '@src/apis' },\n  auth: false,\n  entities: ['Task'],\n  httpRoute: {\n    method: 'GET',\n    route: '/bar/baz',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Environment Variables in JavaScript\nDESCRIPTION: Demonstrates how to access server-side environment variables in JavaScript server code using process.env.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/env-vars.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(process.env.SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Client Setup Function Example (TypeScript)\nDESCRIPTION: Example of a client setup function in TypeScript that runs before everything else. This function logs a message every hour to track online time.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/client-config.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function mySetupFunction(): Promise<void> {\n  let count = 1\n  setInterval(\n    () => console.log(`You have been online for ${count++} hours.`),\n    1000 * 60 * 60\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Job Submission Examples\nDESCRIPTION: Examples of submitting jobs with arguments and optional delay parameters.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/jobs.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst submittedJob = await mySpecialJob.submit({ job: \"args\" })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst submittedJob = await mySpecialJob\n  .delay(10)\n  .submit({ job: \"args\" }, { \"retryLimit\": 2 })\n```\n\n----------------------------------------\n\nTITLE: Declaring Server Operations in Wasp\nDESCRIPTION: Wasp configuration for server-side operations including a query for fetching recipes and an action for adding recipes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/introduction/introduction.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nquery getRecipes {\n  fn: import { getRecipes } from \"@src/recipe/operations\",\n  entities: [Recipe],\n}\n\naction addRecipe {\n  fn: import { addRecipe } from \"@src/recipe/operations\",\n  entities: [Recipe],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CRUD Operations in Wasp\nDESCRIPTION: CRUD declaration for Tasks entity specifying getAll, get, create and update operations with custom configurations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/crud.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\ncrud Tasks {\n  entity: Task,\n  operations: {\n    getAll: {\n      isPublic: true,\n    },\n    get: {},\n    create: {\n      overrideFn: import { createTask } from \"@server/tasks.js\",\n    },\n    update: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Auth UI Colors in TypeScript\nDESCRIPTION: TypeScript version of the appearance configuration with proper type annotations for customization options.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/ui.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CustomizationOptions } from 'wasp/client/auth'\n\nexport const authAppearance: CustomizationOptions['appearance'] = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Default main.wasp Configuration (JavaScript)\nDESCRIPTION: Displays the default `main.wasp` configuration for a new Wasp project using JavaScript. It defines the app (`TodoApp`), specifies the Wasp version, sets the browser title, defines a root route (`/`) mapped to `MainPage`, and declares the `MainPage` page, importing its React implementation from `@src/MainPage` (which resolves to `src/MainPage.jsx`).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/02-project-structure.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"^0.15.0\" // Pins the version of Wasp to use.\n  },\n  title: \"TodoApp\" // Used as the browser tab title. Note that all strings in Wasp are double quoted!\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  // We specify that the React implementation of the page is exported from\n  // `src/MainPage.jsx`. This statement uses standard JS import syntax.\n  // Use `@src` to reference files inside the `src` folder.\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Google Auth Config and User Signup Fields - TypeScript\nDESCRIPTION: Demonstrates the recommended way to type userSignupFields with Wasp's defineUserSignupFields helper in TypeScript, mapping Google profile data as in the JavaScript version. getConfig returns OAuth scopes. Requires Wasp's server auth typings and expects incoming data to conform to expected structure. Inputs and outputs mirror the JS version, providing better type safety in TS. Must be exported as referenced in main.wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/google.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  username: () => \"hardcoded-username\",\n  displayName: (data: any) => data.profile.name,\n})\n\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User Auth Data in React Component (TypeScript)\nDESCRIPTION: Example of accessing user authentication data within a React component in a TypeScript Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/entities.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {task.user.auth?.identities[0].providerUserId}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Root Component for Layout (JavaScript)\nDESCRIPTION: Example of setting up a root component in Wasp using JavaScript. This creates a common layout with header and footer for the application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/client-config.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.jsx\",\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Root({ children }) {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      {children}\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using getUsername in React Component (JavaScript)\nDESCRIPTION: Example of using the getUsername helper function within a React component to retrieve the username from a user object. The function is imported from wasp/auth and returns either the username or null.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/_get-username.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getUsername } from 'wasp/auth'\n\nconst MainPage = ({ user }) => {\n  const username = getUsername(user)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Authentication Flow Implementation\nDESCRIPTION: React component implementation showing how to handle authentication state and redirects based on signup completion status.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Navigate } from 'react-router-dom'\n\nexport function HomePage({ user }) {\n  if (user.isSignupComplete === false) {\n    return <Navigate to=\"/edit-user-details\" />\n  }\n\n  // ...\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Navigate } from 'react-router-dom'\nimport { AuthUser } from 'wasp/auth'\n\nexport function HomePage({ user }: { user: AuthUser }) {\n  if (user.isSignupComplete === false) {\n    return <Navigate to=\"/edit-user-details\" />\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Middleware in JavaScript\nDESCRIPTION: Example of implementing API middleware configuration function in JavaScript, returning the default configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/apis.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const apiMiddleware = (config) => {\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Seed Functions in WASP DSL - TypeScript\nDESCRIPTION: This snippet provides the TypeScript equivalent of adding multiple named seed functions to your Wasp application's db.seeds configuration. By importing 'devSeedSimple' from '@src/dbSeeds.js', it enables this seed function to be run directly via the CLI. The module must export 'devSeedSimple'. This configuration facilitates selecting a specific seed function when invoking database seeding commands, supporting more complex data initialization scenarios.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/backends.md#2025-04-22_snippet_8\n\nLANGUAGE: Wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    seeds: [\n      // ...\n      import { devSeedSimple } from \"@src/dbSeeds.js\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Root Component Implementation (TypeScript)\nDESCRIPTION: Example of a React root component implementation in TypeScript that sets up Redux provider and custom layout with router outlet.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/client-config.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Outlet } from 'react-router-dom'\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root() {\n  return (\n    <Provider store={store}>\n      <Layout />\n    </Provider>\n  )\n}\n\nfunction Layout() {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      // highlight-next-line\n      <Outlet />\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Wasp Queries from Server (JavaScript)\nDESCRIPTION: Illustrates how to call Wasp queries from server-side JavaScript code. Queries must be imported from `wasp/server/operations`. For authenticated queries, a context object containing the `user` (AuthUser object) must be explicitly passed.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/queries.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { getAllTasks, getFilteredTasks } from 'wasp/server/operations'\n\n\nconst user = // Get an AuthUser object, e.g., from context.user in an operation.\n\n// ...\n\nconst allTasks = await getAllTasks({ user })\nconst doneTasks = await getFilteredTasks({ isDone: true }, { user })\n```\n\n----------------------------------------\n\nTITLE: Setting Up Authentication Routes\nDESCRIPTION: Configuration of login and signup routes with their corresponding page components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/username-and-pass.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@client/pages/auth.jsx\"\n}\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { Signup } from \"@client/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp on Linux/macOS\nDESCRIPTION: This command downloads and executes the Wasp installer script, which installs Wasp on Linux or macOS systems. It requires curl to be installed and an active internet connection.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/introduction/quick-start.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Checking Password Presence in Authentication\nDESCRIPTION: Function that verifies if a password is provided. Throws an error if the password field is empty or missing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/advanced/custom-auth-actions.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nensurePasswordIsPresent(args)\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Login UI Components in JavaScript\nDESCRIPTION: Demonstrates how to implement social login UI using Wasp's pre-built components and URLs for Google and GitHub authentication in JavaScript. Shows both button components and custom URL implementations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/create-your-own-ui.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  GoogleSignInButton,\n  googleSignInUrl,\n  GitHubSignInButton,\n  gitHubSignInUrl,\n} from 'wasp/client/auth'\n\nexport const LoginPage = () => {\n  return (\n    <>\n      <GoogleSignInButton />\n      <GitHubSignInButton />\n      {/* or */}\n      <a href={googleSignInUrl}>Sign in with Google</a>\n      <a href={gitHubSignInUrl}>Sign in with GitHub</a>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing SubmittedJob Properties in JavaScript\nDESCRIPTION: Demonstrates how to access properties of a SubmittedJob object returned by the submit() function. These properties include jobId, jobName, and executorName.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/jobs.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst submittedJob = submit();\nconsole.log(submittedJob.jobId);\nconsole.log(submittedJob.jobName);\nconsole.log(submittedJob.executorName);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Project Structure Directory Layout\nDESCRIPTION: Directory structure of a TypeScript-based Wasp project, highlighting the differences from the JavaScript version, particularly the MainPage.tsx file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/02-project-structure.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.\n├── .gitignore\n├── main.wasp          # Your Wasp code goes here.\n├── schema.prisma      # Your Prisma schema goes here.\n├── package.json       # Your dependencies and project info go here.\n├── public             # Your static files (e.g., images, favicon) go here.\n├── src                # Your source code (TS/JS/CSS/HTML) goes here.\n│   ├── Main.css\n│   ├── MainPage.tsx   # Renamed from MainPage.jsx\n│   ├── vite-env.d.ts\n│   └── waspLogo.png\n├── tsconfig.json\n├── vite.config.ts\n├── .waspignore\n└── .wasproot\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQL Extensions in Prisma Schema\nDESCRIPTION: This snippet shows how PostgreSQL extensions are typically defined in a Prisma schema file. It's used as a reference to explain the syntax for the Wasp configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/backends.md#2025-04-22_snippet_11\n\nLANGUAGE: prisma\nCODE:\n```\nextensions = [hstore(schema: \"myHstoreSchema\"), pg_trgm, postgis(version: \"2.1\")]\n```\n\n----------------------------------------\n\nTITLE: Importing a Job in JavaScript\nDESCRIPTION: Example of importing a job in a JavaScript file to use in server-side code like actions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/jobs.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mySpecialJob } from 'wasp/server/jobs'\n```\n\n----------------------------------------\n\nTITLE: Updating Root Component for Wasp 0.15.0\nDESCRIPTION: Update the root component to use the Outlet component from React Router v6 instead of rendering children directly.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-14-to-0-15.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Outlet } from 'react-router-dom'\n\nexport function App() {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      <Outlet />\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Routes and Pages (Wasp DSL)\nDESCRIPTION: Here, new route and page resources are defined in Wasp's main.wasp DSL. The HomeRoute binds the root URL '/' to the HomePage page, with the latter's component imported from a React module. The page also requires user authentication, leveraging Wasp's built-in auth facilities. Dependency: Wasp runtime and React app integration. Inputs are route/page metadata; outputs are generated router and framework integration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/introduction/introduction.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\n...\n\nroute HomeRoute { path: \"/\", to: HomePage }\npage HomePage {\n  component: import { HomePage } from \"@src/pages/HomePage\",\n  authRequired: true // Will send user to /login if not authenticated.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Task Entity in Wasp\nDESCRIPTION: Demonstrates how to define a Task entity using Prisma Schema Language (PSL) in Wasp, including field definitions for id, description, and completion status.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/entities.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nentity Task {=psl\n    id          Int     @id @default(autoincrement())\n    description String\n    isDone      Boolean @default(false)\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Environment Variables\nDESCRIPTION: Environment variable configuration for GitHub OAuth credentials\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/github.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGITHUB_CLIENT_ID=your-github-client-id\nGITHUB_CLIENT_SECRET=your-github-client-secret\n```\n\n----------------------------------------\n\nTITLE: Defining User Schema for Google Auth\nDESCRIPTION: Prisma schema definition for the User model with required fields for Google authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/google.md#2025-04-22_snippet_10\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          Int    @id @default(autoincrement())\n  username    String @unique\n  displayName String\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page Component\nDESCRIPTION: This React component implements the login page using Wasp's LoginForm component. It includes a layout for centering the content.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/discord.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }) {\n  return (\n    <div className=\"h-full w-full bg-white\">\n      <div className=\"flex min-h-[75vh] min-w-full items-center justify-center\">\n        <div className=\"h-full w-full max-w-sm bg-white p-5\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Page with Task CRUD Operations in React\nDESCRIPTION: React component demonstrating task management with Wasp CRUD operations, including task listing and creation functionality. Uses Tasks.getAll.useQuery for fetching and Tasks.create.useAction for creating new tasks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/crud.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tasks } from 'wasp/client/crud'\nimport { useState } from 'react'\n\nexport const MainPage = () => {\n  const { data: tasks, isLoading, error } = Tasks.getAll.useQuery()\n  const createTask = Tasks.create.useAction()\n  const [taskDescription, setTaskDescription] = useState('')\n\n  function handleCreateTask() {\n    createTask({ description: taskDescription, isDone: false })\n    setTaskDescription('')\n  }\n\n  if (isLoading) return <div>Loading...</div>\n  if (error) return <div>Error: {error.message}</div>\n  return (\n    <div\n      style={{\n        fontSize: '1.5rem',\n        display: 'grid',\n        placeContent: 'center',\n        height: '100vh',\n      }}\n    >\n      <div>\n        <input\n          value={taskDescription}\n          onChange={(e) => setTaskDescription(e.target.value)}\n        />\n        <button onClick={handleCreateTask}>Create task</button>\n      </div>\n      <ul>\n        {tasks.map((task) => (\n          <li key={task.id}>{task.description}</li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Signup Fields in main.wasp (TypeScript)\nDESCRIPTION: This Wasp configuration snippet (TypeScript style) links userSignupFields, now imported from a TypeScript file (src/auth/signup.ts), to the usernameAndPassword method in main.wasp. Used to enable backend validation for extra signup fields in a TypeScript Wasp project. Requires User entity and userSignupFields exported from the TypeScript source.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_20\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  // ...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/signup\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Endpoint Handler in TypeScript\nDESCRIPTION: TypeScript implementation of the API endpoint handler with type definitions and parameter typing. Shows usage of generated FooBar type.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/apis.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FooBar } from \"wasp/server/api\";\n\nexport const fooBar: FooBar = (req, res, context) => {\n  res.set(\"Access-Control-Allow-Origin\", \"*\");\n  res.json({ msg: `Hello, ${context.user ? \"registered user\" : \"stranger\"}!` });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind for Wasp Projects\nDESCRIPTION: Sets up the Tailwind configuration file for a Wasp project, including content paths and theme extensions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/css-frameworks.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst { resolveProjectPath } = require('wasp/dev')\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [resolveProjectPath('./src/**/*.{js,jsx,ts,tsx}')],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Login UI Components in TypeScript\nDESCRIPTION: Demonstrates how to implement social login UI using Wasp's pre-built components and URLs for Google and GitHub authentication in TypeScript. Shows both button components and custom URL implementations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/create-your-own-ui.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  GoogleSignInButton,\n  googleSignInUrl,\n  GitHubSignInButton,\n  gitHubSignInUrl,\n} from 'wasp/client/auth'\n\nexport const LoginPage = () => {\n  return (\n    <>\n      <GoogleSignInButton />\n      <GitHubSignInButton />\n      {/* or */}\n      <a href={googleSignInUrl}>Sign in with Google</a>\n      <a href={gitHubSignInUrl}>Sign in with GitHub</a>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Component in TypeScript\nDESCRIPTION: TypeScript version of the root component with proper type definitions for children props.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/client-config.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root({ children }: { children: React.ReactNode }) {\n  return (\n    <Provider store={store}>\n      <Layout>{children}</Layout>\n    </Provider>\n  )\n}\n\nfunction Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      {children}\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev Server Behavior in Vite\nDESCRIPTION: Example of disabling automatic browser opening when running 'wasp start' by customizing the Vite server configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/custom-vite-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  server: {\n    open: false,\n  },\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  server: {\n    open: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Signup Page with Wasp Auth UI (TypeScript)\nDESCRIPTION: This React component (SignupPage.tsx) demonstrates creating a user registration page using Wasp's Auth UI in a TypeScript project. It imports and renders the `SignupForm` component from `wasp/client/auth`, providing a basic centered layout.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/SignupPage.tsx\"\nimport { SignupForm } from 'wasp/client/auth'\n\nexport function SignupPage() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        placeContent: 'center',\n      }}\n    >\n      <SignupForm />\n    </div>\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Create Task Implementation (JavaScript)\nDESCRIPTION: This JavaScript implementation of a custom createTask function overrides the default CRUD behavior to ensure tasks are connected to the authenticated user. It validates authentication and associates the task with the current user.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/crud.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const createTask = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401, 'User not authenticated.')\n  }\n\n  const { description, isDone } = args\n  const { Task } = context.entities\n\n  return await Task.create({\n    data: {\n      description,\n      isDone,\n      // highlight-start\n      // Connect the task to the user that is creating it\n      user: {\n        connect: {\n          id: context.user.id,\n        },\n      },\n      // highlight-end\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Logo to Login Form in JavaScript\nDESCRIPTION: Demonstrates how to add a custom logo to the LoginForm component using the logo prop.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/ui.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\nimport Logo from './logo.png'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass in the path to your logo\n      logo={Logo}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Environment Variables in TypeScript\nDESCRIPTION: Shows how to access client-side environment variables prefixed with REACT_APP_ in a TypeScript file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/env-vars.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(import.meta.env.REACT_APP_SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Defining Wasp Action Configuration\nDESCRIPTION: Configuration for the createMeme action in Wasp's main configuration file. Specifies the action function and associated entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\naction createMeme {\n  fn: import { createMeme } from \"@server/actions.js\",\n  entities: [Meme, Template, User]\n}\n```\n\n----------------------------------------\n\nTITLE: Calling updateTask Action from React Component (TSX)\nDESCRIPTION: Demonstrates calling the `updateTask` Wasp action from a React component (`TaskView`) written in TSX with type annotations. Imports include `updateTask` from `wasp/client/operations`, the `Task` entity type, and React's `ChangeEvent`. The `handleIsDoneChange` function, triggered by the checkbox's `onChange` event, calls `updateTask` with the task `id` and new checked state. Includes basic typed error handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/06-actions.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/MainPage.tsx\"\n// highlight-next-line\nimport { FormEvent, ChangeEvent } from 'react'\nimport { Task } from 'wasp/entities'\nimport {\n  // highlight-next-line\n  updateTask,\n  createTask,\n  getTasks,\n  useQuery,\n} from 'wasp/client/operations'\n\n\n// ... MainPage ...\n\nconst TaskView = ({ task }: { task: Task }) => {\n  // highlight-start\n  const handleIsDoneChange = async (event: ChangeEvent<HTMLInputElement>) => {\n    try {\n      await updateTask({\n        id: task.id,\n        isDone: event.target.checked,\n      })\n    } catch (error: any) {\n      window.alert('Error while updating task: ' + error.message)\n    }\n  }\n  // highlight-end\n\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        id={String(task.id)}\n        checked={task.isDone}\n        // highlight-next-line\n        onChange={handleIsDoneChange}\n      />\n      {task.description}\n    </div>\n  )\n}\n\n// ... TaskList, NewTaskForm ...\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring updateTask Action in Wasp\nDESCRIPTION: This snippet shows how to declare the 'updateTask' action in the main.wasp file. It imports the action function and specifies the entities it affects.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/06-actions.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\naction updateTask {\n  fn: import { updateTask } from \"@src/actions\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth in Wasp Application\nDESCRIPTION: Demonstrates how to configure authentication options in the main Wasp file, including user entity, auth methods, and redirect behavior.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  //...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {}, // use this or email, not both\n      email: {}, // use this or usernameAndPassword, not both\n      google: {},\n      gitHub: {},\n    },\n    onAuthFailedRedirectTo: \"/someRoute\"\n  }\n}\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple Seed Functions in Wasp (JavaScript)\nDESCRIPTION: Demonstrates how to import multiple seed functions in the main.wasp file for a JavaScript project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/databases.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    seeds: [\n      // ...\n      import { devSeedSimple } from \"@src/dbSeeds.js\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Keycloak Environment Variables\nDESCRIPTION: This snippet shows the environment variables that need to be added to the .env.server file for Keycloak configuration, including client ID, client secret, and realm URL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/keycloak.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nKEYCLOAK_CLIENT_ID=your-keycloak-client-id\nKEYCLOAK_CLIENT_SECRET=your-keycloak-client-secret\nKEYCLOAK_REALM_URL=https://your-keycloak-url.com/realms/master\n```\n\n----------------------------------------\n\nTITLE: Using the routes Object in React JSX\nDESCRIPTION: Shows how to use the routes object to programmatically create links in a Wasp project. This approach provides type-safe route generation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/links.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { routes } from 'wasp/client/router'\n\nconst linkToTask = routes.TaskRoute.build({ params: { id: 1 } })\n```\n\n----------------------------------------\n\nTITLE: Declaring API in Wasp (JavaScript)\nDESCRIPTION: Demonstrates how to declare a custom API endpoint in a Wasp file using JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/apis.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar { // APIs and their implementations don't need to (but can) have the same name.\n  fn: import { fooBar } from \"@src/apis\",\n  httpRoute: (GET, \"/foo/bar\")\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma User Model Definition\nDESCRIPTION: Database schema definition for the User entity with required fields for Google authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/google.md#2025-04-22_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          Int    @id @default(autoincrement())\n  username    String @unique\n  displayName String\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Component in JavaScript\nDESCRIPTION: Shows an example of implementing a root component in JavaScript. It demonstrates setting up a Redux provider and a custom layout.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/client-config.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root({ children }) {\n  return (\n    <Provider store={store}>\n      <Layout>{children}</Layout>\n    </Provider>\n  )\n}\n\nfunction Layout({ children }) {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      {children}\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link Component with Search Query and Hash in React TSX\nDESCRIPTION: Demonstrates how to use the Link component with additional search query and hash properties.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/links.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Link\n  to=\"/task/:id\"\n  params={{ id: task.id }}\n  search={{ sortBy: 'date' }}\n  hash=\"comments\"\n>\n  {task.description}\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Route in Server Setup Function (JavaScript)\nDESCRIPTION: This example demonstrates how to add a custom route using the server setup function in JavaScript. It defines a function that adds a GET route to the Express app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/server-config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const mySetupFunction = async ({ app }) => {\n  addCustomRoute(app)\n}\n\nfunction addCustomRoute(app) {\n  app.get('/customRoute', (_req, res) => {\n    res.send('I am a custom route')\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using getTasks Query in React Component (JavaScript)\nDESCRIPTION: This React component uses the getTasks Query with Wasp's useQuery hook. It renders a list of tasks or a loading/error message.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/05-queries.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getTasks, useQuery } from 'wasp/client/operations'\n\nexport const MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n\nconst TaskView = ({ task }) => {\n  return (\n    <div>\n      <input type=\"checkbox\" id={String(task.id)} checked={task.isDone} />\n      {task.description}\n    </div>\n  )\n}\n\nconst TasksList = ({ tasks }) => {\n  if (!tasks?.length) return <div>No tasks</div>\n\n  return (\n    <div>\n      {tasks.map((task, idx) => (\n        <TaskView task={task} key={idx} />\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Create Operation for Tasks - JavaScript\nDESCRIPTION: Implements a custom server-side `createTask` function for task creation using JavaScript, performing authentication and associating new tasks with the authenticated user. Depends on Wasp server context, the `Task` entity model, and the HttpError class for error handling. Expects arguments for `description` and `isDone`, uses context for user validation, and returns the created Task. Only callable from server-side code, and will throw if the user is not authenticated.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/crud.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { HttpError } from 'wasp/server'\\n\\nexport const createTask = async (args, context) => {\\n  if (!context.user) {\\n    throw new HttpError(401, 'User not authenticated.')\\n  }\\n\\n  const { description, isDone } = args\\n  const { Task } = context.entities\\n\\n  return await Task.create({\\n    data: {\\n      description,\\n      isDone,\\n      // highlight-start\\n      // Connect the task to the user that is creating it\\n      user: {\\n        connect: {\\n          id: context.user.id,\\n        },\\n      },\\n      // highlight-end\\n    },\\n  })\\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Tailwind Configuration for Wasp 0.12.x\nDESCRIPTION: Comparison of Tailwind configuration before and after migration, showing how to use the resolveProjectPath function to ensure paths are resolved correctly.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    // highlight-next-line\n    './src/**/*.{js,jsx,ts,tsx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// highlight-next-line\nconst { resolveProjectPath } = require('wasp/dev')\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    // highlight-next-line\n    resolveProjectPath('./src/**/*.{js,jsx,ts,tsx}'),\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ResetPasswordPage Component in TypeScript\nDESCRIPTION: This snippet shows how to implement a reset password page component in TypeScript using Wasp's ResetPasswordForm component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ResetPasswordForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function ResetPasswordPage() {\n  return <ResetPasswordForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Fly.io Deployment\nDESCRIPTION: Sets required environment variables for the Wasp server running on Fly.io, including port configuration, JWT secret for authentication, and URLs for client and server components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/manually.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflyctl secrets set PORT=8080\nflyctl secrets set JWT_SECRET=<random_string_at_least_32_characters_long>\nflyctl secrets set WASP_WEB_CLIENT_URL=<url_of_where_client_will_be_deployed>\nflyctl secrets set WASP_SERVER_URL=<url_of_where_server_will_be_deployed>\n```\n\n----------------------------------------\n\nTITLE: Importing the Generated Action Type in TypeScript\nDESCRIPTION: Imports the generic Action type (CreateSomething) as generated by Wasp for a given Action declaration. Used to strongly type both the input (args) and output (return value) of the Action implementation for additional type safety. Requires proper Action declaration in the Wasp DSL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/actions.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { type CreateSomething } from 'wasp/server/operations'\n```\n\n----------------------------------------\n\nTITLE: Wasp Entity Usage Example\nDESCRIPTION: Demonstrates how to use Prisma models as Wasp entities in queries, jobs, and API endpoints.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/prisma-file.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n}\n\n...\n\nquery getTasks {\n  fn: import { getTasks } from \"@src/queries\",\n  entities: [Task]\n}\n\njob myJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@src/workers/bar\"\n  },\n  entities: [Task],\n}\n\napi fooBar {\n  fn: import { fooBar } from \"@src/apis\",\n  entities: [Task],\n  httpRoute: (GET, \"/foo/bar/:email\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Auth Configuration (TypeScript)\nDESCRIPTION: TypeScript implementation of Google authentication configuration with type definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/google.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  username: () => 'hardcoded-username',\n  displayName: (data: any) => data.profile.name,\n})\n\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting a Delayed Job in TypeScript\nDESCRIPTION: This snippet shows how to submit a delayed job named 'mySpecialJob' with arguments and executor options in TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/jobs.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst submittedJob = await mySpecialJob\n  .delay(10)\n  .submit({ job: \"args\" }, { \"retryLimit\": 2 })\n```\n\n----------------------------------------\n\nTITLE: Using Entity in JavaScript API Implementation\nDESCRIPTION: Shows how to access and use entity data in a JavaScript API implementation via the context parameter, which exposes the entity's Prisma API.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/apis.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport const fooBar = (req, res, context) => {\n  res.json({ count: await context.entities.Task.count() });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth Pages in React (JavaScript)\nDESCRIPTION: This snippet shows how to implement the authentication pages using React components in JavaScript, including the Login form and a layout component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/google.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }) {\n  return (\n    <div className=\"h-full w-full bg-white\">\n      <div className=\"flex min-h-[75vh] min-w-full items-center justify-center\">\n        <div className=\"h-full w-full max-w-sm bg-white p-5\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Signup Route in Wasp with TypeScript\nDESCRIPTION: This code shows how to create a route for the signup page in TypeScript. It defines the route path and links it to a TypeScript React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { SignupPage } from \"@src/SignupPage.tsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Basic Wasp App to Fly.io\nDESCRIPTION: Command to deploy a new Wasp application to Fly.io in the Miami region. Creates client, server and database components automatically.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/cli.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly launch my-wasp-app mia\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Social Button Layout in TypeScript/TSX\nDESCRIPTION: Shows how to set the social login button layout to vertical within the `LoginForm` component by assigning the value `'vertical'` to the `socialLayout` prop in a React/TSX file (`src/LoginPage.tsx`).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/ui.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/LoginPage.tsx\"\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass in the socialLayout prop\n      socialLayout=\"vertical\"\n    />\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring an API Endpoint with Parameters in Wasp\nDESCRIPTION: Demonstrates declaring an API endpoint that accepts URL parameters in the Wasp file. This example also shows how to include entity dependencies.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/apis.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar {\n  fn: import { fooBar } from \"@src/apis\",\n  entities: [Task],\n  httpRoute: (GET, \"/foo/bar/:email\")\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure - After Migration\nDESCRIPTION: Recommended feature-based directory structure after migration, showing a more organized approach to code organization.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc\n│\n├── task\n│   ├── actions.ts    -- former taskActions.ts\n│   ├── queries.ts    -- former taskQueries.ts\n│   ├── Task.css\n│   ├── TaskLisk.tsx\n│   └── Task.tsx\n├── user\n│   ├── actions.ts    -- former userActions.ts\n│   ├── Dashboard.tsx\n│   ├── Login.tsx\n│   ├── queries.ts    -- former userQueries.ts\n│   ├── Register.tsx\n│   └── User.tsx\n├── MainPage.tsx\n└── utils.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing Vector Similarity Search Template\nDESCRIPTION: Command to create a new Wasp project using the embeddings template, which includes vector similarity search, OpenAI Embeddings API, and Pinecone integration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/starter-templates.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwasp new <project-name> -t embeddings\n```\n\n----------------------------------------\n\nTITLE: Checking Out Deploy Branch\nDESCRIPTION: Git command to switch to the deploy-web branch for deployment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout deploy-web\n```\n\n----------------------------------------\n\nTITLE: Database Migration Command\nDESCRIPTION: Command to create the new auth tables in the database as part of the migration process to the new auth system.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Environment Variables in TypeScript (Wasp)\nDESCRIPTION: Demonstrates how to read a client-side environment variable (prefixed with `REACT_APP_`) within TypeScript code using `import.meta.env`. These variables are embedded during the build process, are publicly accessible, and must not contain sensitive information. This example logs the value of `REACT_APP_SOME_VAR_NAME`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/env-vars.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconsole.log(import.meta.env.REACT_APP_SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Consuming Dashboard Data in React Component\nDESCRIPTION: Using the Wasp-generated React query hook to fetch dashboard data with automatic refetching on a 1-minute interval.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-01-27-waspleau.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n...\n\nconst { data: dashboardData, isFetching, error } = useQuery(refreshDashboardData, null, { refetchInterval: 60 * 1000 })\n\n...\n```\n\n----------------------------------------\n\nTITLE: Defining userSignupFields from OAuth Profile (Before, TypeScript)\nDESCRIPTION: Shows the approach for mapping OAuth provider profile data in Wasp 0.12.X, using the displayName property from data.profile. Utilizes the defineUserSignupFields API from wasp/server/auth. Inputs are the data received from the provider, and displayName is extracted as data.profile.displayName. Output is the userSignupFields object passed to the authentication framework. The main dependency is the wasp/server/auth import.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n    displayName: (data: any) => data.profile.displayName,\n})\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory and Starting Development Server\nDESCRIPTION: Commands to change into the newly created project directory and start the Wasp development server. The server initializes the client, server, and database components of the application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/01-create.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cd TodoApp\n$ wasp start\n```\n\n----------------------------------------\n\nTITLE: Replacing findUserIdentity in Server Function\nDESCRIPTION: Demonstrates updating server-side code to check for identities directly on the user object instead of using findUserIdentity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_25\n\nLANGUAGE: ts\nCODE:\n```\nimport { findUserIdentity } from 'wasp/auth'\n\nexport const createTask: CreateTask<...>  = async (args, context) => {\n    const usernameIdentity = findUserIdentity(context.user, 'username')\n    if (usernameIdentity) {\n        // ...\n    }\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\nexport const createTask: CreateTask<...>  = async (args, context) => {\n    if (context.user.identities.username) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Task Checking Utility Function - TypeScript\nDESCRIPTION: Implements a TypeScript version of the areThereAnyTasks utility. It uses proper type annotations for the Task array, ensuring stricter compile-time checks. Depends on a Task type definition from 'wasp/entities'. Accepts Task[] as input and returns a boolean indicating task presence.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/testing.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { type Task } from \\\"wasp/entities\\\";\\n\\nexport function areThereAnyTasks(tasks: Task[]): boolean {\\n  return tasks.length === 0;\\n}\n```\n\n----------------------------------------\n\nTITLE: Client Environment Variables Configuration\nDESCRIPTION: Example of configuring client-side environment variables in a .env.client file\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/env-vars.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nREACT_APP_SOME_VAR_NAME=somevalue\n```\n\n----------------------------------------\n\nTITLE: Specifying Base Directory for Client Routing (main.wasp)\nDESCRIPTION: Sets the baseDir property in the Wasp app's client config, defining a subdirectory for the client application (e.g., '/my-app'). Ensures correct routing and asset resolution when hosting under a non-root path. Accepts a string path for baseDir. Used in deployment scenarios where the app is not served from the domain root.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/client-config.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    baseDir: \"/my-app\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Schema\nDESCRIPTION: Prisma schema definition for the User entity required by Keycloak authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/keycloak.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  // Add your own fields below\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Prisma Client Preview Features - Wasp\nDESCRIPTION: Demonstrates how to enable experimental Prisma features by setting the 'clientPreviewFeatures' array in the Wasp app db.prisma property. Required for using features not yet fully supported or stable in Prisma's API, such as 'postgresqlExtensions'. Prerequisites: Prisma >= version supporting the feature, and correct configuration as shown. Limits: Preview features may change or break between releases.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/backends.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    system: PostgreSQL,\n    prisma: {\n      clientPreviewFeatures: [\"postgresqlExtensions\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing userSignupFields in JavaScript\nDESCRIPTION: JavaScript implementation of the userSignupFields object that validates the address field during user signup, ensuring it meets requirements before saving to the database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Action in JavaScript\nDESCRIPTION: Shows how to import and use a declared action on client or server side in JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/actions.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport createFoo from '@wasp/actions/createFoo'\n```\n\n----------------------------------------\n\nTITLE: Complete Auth UI Customization Example\nDESCRIPTION: Full example combining custom colors, logo, and appearance settings in a LoginForm component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/ui.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CustomizationOptions } from 'wasp/client/auth'\n\nexport const appearance: CustomizationOptions['appearance'] = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nimport { authAppearance } from './appearance'\nimport todoLogo from './todoLogo.png'\n\nexport function LoginPage() {\n  return <LoginForm appearance={appearance} logo={todoLogo} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Button Component in React TSX\nDESCRIPTION: This code defines a reusable Button component with customizable props, including a loading state. It uses TypeScript for type checking and Tailwind CSS for styling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ButtonHTMLAttributes } from 'react';\n\ninterface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n  isLoading?: boolean;\n}\n\nexport default function Button({ isLoading, children, ...otherProps }: ButtonProps) {\n  return (\n    <button\n      {...otherProps}\n      className={`flex flex-row justify-center items-center bg-neutral-100 hover:bg-neutral-200 border border-neutral-300 text-blue-500 font-bold px-3 py-1 text-sm rounded-lg ${isLoading ? ' pointer-events-none opacity-70' : 'cursor-pointer'}`}\n    >\n      {isLoading? 'Loading...' : children}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Static Images in React JavaScript\nDESCRIPTION: Demonstrates how to import and use an image asset in a React component, where the image URL is handled by the build system. The imported URL will be transformed to include a hash in production builds.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/static-assets.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport imgUrl from './img.png'\n\nfunction App() {\n  return <img src={imgUrl} alt=\"img\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Additional Signup Fields Validation\nDESCRIPTION: Shows how to implement server-side validation for additional signup fields using the defineAdditionalSignupFields helper function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineAdditionalSignupFields } from '@wasp/auth/index.js'\n\nexport const fields = defineAdditionalSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Testing React Components with Mocked APIs in JavaScript\nDESCRIPTION: Shows how to test a React component that uses Wasp's api utility, mocking the API responses and rendering the component in context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/testing.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { api } from \"wasp/client/api\";\n\nconst Todo = (_props) => {\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    api\n      .get(\"/tasks\")\n      .then((res) => res.json())\n      .then((tasks) => setTasks(tasks))\n      .catch((err) => window.alert(err));\n  });\n\n  return (\n    <ul>\n      {tasks &&\n        tasks.map((task) => (\n          <li key={task.id}>\n            <input type=\"checkbox\" value={task.isDone} />\n            {task.description}\n          </li>\n        ))}\n    </ul>\n  );\n};\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { test, expect } from \"vitest\";\nimport { screen } from \"@testing-library/react\";\n\nimport { mockServer, renderInContext } from \"wasp/client/test\";\nimport Todo from \"./Todo\";\n\nconst { mockApi } = mockServer();\n\nconst mockTasks = [\n  {\n    id: 1,\n    description: \"test todo 1\",\n    isDone: true,\n    userId: 1,\n  },\n];\n\ntest(\"handles mock data\", async () => {\n  mockApi(\"/tasks\", { res: mockTasks });\n\n  renderInContext(<Todo />);\n\n  await screen.findByText(\"test todo 1\");\n\n  expect(screen.getByRole(\"checkbox\")).toBeChecked();\n\n  screen.debug();\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Link Component in React JSX\nDESCRIPTION: Shows how to use the custom Link component from @wasp/router to create type-safe links in a React component. It includes examples of passing route parameters and optional search and hash properties.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/links.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from '@wasp/router'\n\nexport const TaskList = () => {\n  // ...\n\n  return (\n    <div>\n      {tasks.map((task) => (\n        <Link\n          key={task.id}\n          to=\"/task/:id\"\n      {/* 👆 You must provide a valid path here */} \n          params={{ id: task.id }}>\n      {/* 👆 All the params must be correctly passed in */}   \n          {task.description}\n        </Link>\n      ))}\n    </div>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<Link\n  to=\"/task/:id\"\n  params={{ id: task.id }}\n  search={{ sortBy: 'date' }}\n  hash=\"comments\"\n>\n  {task.description}\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Using getEmail in Async Function (JavaScript)\nDESCRIPTION: This example demonstrates how to use the getEmail helper in an async function, specifically within a createTask function. It shows how to retrieve the email from the context.user object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/_get-email.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { getEmail } from 'wasp/auth'\n\nexport const createTask = async (args, context) => {\n  const email = getEmail(context.user)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using getFirstProviderUserId Function in React Component (TypeScript)\nDESCRIPTION: TypeScript version of the getFirstProviderUserId function usage in a React component. It displays the first available user ID of a task's creator, returning the first user ID found, such as email for email signup or Google ID for Google signup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/entities.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getFirstProviderUserId } from 'wasp/auth'\n\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {getFirstProviderUserId(task.user)}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Google & GitHub Migration API Endpoints in Wasp\nDESCRIPTION: These Wasp snippets define API endpoints for migrating users authenticated via Google and GitHub. The `migrateGoogle` API is exposed via a GET request to `/migrate-google` and handled by `migrateGoogleHandler`. Similarly, `migrateGithub` is exposed at `/migrate-github` (GET) and handled by `migrateGithubHandler`. Both handlers are imported from `@src/migrateToNewAuth`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_27\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napi migrateGoogle {\n  httpRoute: (GET, \"/migrate-google\"),\n  fn: import { migrateGoogleHandler } from \"@src/migrateToNewAuth\",\n  entities: []\n}\n\napi migrateGithub {\n  httpRoute: (GET, \"/migrate-github\"),\n  fn: import { migrateGithubHandler } from \"@src/migrateToNewAuth\",\n  entities: []\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Auth Pages Implementation\nDESCRIPTION: React component implementation for authentication pages with Tailwind CSS styling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/github.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"h-full w-full bg-white\">\n      <div className=\"flex min-h-[75vh] min-w-full items-center justify-center\">\n        <div className=\"h-full w-full max-w-sm bg-white p-5\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Prisma Client Usage in JavaScript\nDESCRIPTION: Shows how to directly interact with entities using Prisma Client in JavaScript server code, demonstrating task creation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/entities.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport prismaClient from '@wasp/dbClient'`\n\nprismaClient.task.create({\n    description: \"Read the Entities doc\",\n    isDone: true // almost :)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS in Wasp\nDESCRIPTION: Sets up the Tailwind configuration file for a Wasp project, including content paths and theme extensions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/css-frameworks.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst { resolveProjectPath } = require('wasp/dev')\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [resolveProjectPath('./src/**/*.{js,jsx,ts,tsx}')],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Values for Later Use in Server Setup (JavaScript)\nDESCRIPTION: This JavaScript example demonstrates how to store values during server setup for later use in operations. It sets up a resource and starts a cron job in the setup function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/server-config.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet someResource = undefined\n\nexport const mySetupFunction = async () => {\n  // Let's pretend functions setUpSomeResource and startSomeCronJob\n  // are implemented below or imported from another file.\n  someResource = await setUpSomeResource()\n  startSomeCronJob()\n}\n\nexport const getSomeResource = () => someResource\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSomeResource } from './myServerSetupCode.js'\n\n...\n\nexport const someQuery = async (args, context) => {\n  const someResource = getSomeResource()\n  return queryDataFromSomeResource(args, someResource)\n}\n```\n\n----------------------------------------\n\nTITLE: Public Directory Structure Example\nDESCRIPTION: Shows the structure of the public directory where static assets can be placed for direct serving without bundling or hashing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/static-assets.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n└── public\n    ├── favicon.ico\n    └── robots.txt\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Environment Variables in JavaScript\nDESCRIPTION: Shows how to import and use server environment variables in JavaScript server-side code using the Wasp server env object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/env-vars.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { env } from 'wasp/server'\n\nconsole.log(env.SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Query Declaration with Entities in Wasp\nDESCRIPTION: Example of declaring queries with entity dependencies in Wasp configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/queries.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\nquery getAllTasks {\n  fn: import { getAllTasks } from \"@src/queries.js\",\n  entities: [Task]\n}\n\nquery getFilteredTasks {\n  fn: import { getFilteredTasks } from \"@src/queries.js\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub API Response Structure\nDESCRIPTION: Example JSON response structure from GitHub's user and email endpoints.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/github.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"login\": \"octocat\",\n  \"id\": 1,\n  \"name\": \"monalisa octocat\",\n  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n  \"gravatar_id\": \"\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"email\": \"octocat@github.com\",\n    \"verified\": true,\n    \"primary\": true,\n    \"visibility\": \"public\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing Discord User ID in TypeScript\nDESCRIPTION: Demonstrates how to retrieve a Discord user's identity information from a user object. The code extracts the Discord-specific identity and accesses the user's Discord ID, which is typically a numeric string like '80351110224678912'.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/_discord-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst discordIdentity = user.identities.discord\n\n// Discord User ID for example \"80351110224678912\"\ndiscordIdentity.id\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Token Refresh in JavaScript\nDESCRIPTION: JavaScript implementation for refreshing OAuth access tokens using the Google OAuth provider.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/auth-hooks.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { google } from 'wasp/server/auth'\n\nexport const onAfterLogin = async ({ oauth }) => {\n  if (oauth.provider === 'google' && oauth.tokens.refreshToken !== null) {\n    const newTokens = await google.oAuthClient.refreshAccessToken(\n      oauth.tokens.refreshToken\n    )\n    log('new tokens', newTokens)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Auth in Wasp Application\nDESCRIPTION: Main Wasp configuration file showing how to set up Google authentication with userEntity and auth methods\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/google.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {\n        configFn: import { getConfig } from \"@src/auth/google.js\",\n        userSignupFields: import { userSignupFields } from \"@src/auth/google.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Logic in Node.js with Prisma SDK\nDESCRIPTION: This snippet demonstrates how to implement the query logic for fetching lists and cards using the Prisma SDK in a Node.js environment within a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-12-02-waspello.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getListsAndCards = async (args, context) => {\n  // Only authenticated users can execute this query.\n  if (!context.user) { throw new HttpError(403) }\n\n  return context.entities.List.findMany({\n    // We want to make sure user can access only their own cards.\n    where: { user: { id: context.user.id } },\n    include: { cards: true }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Endpoint in JavaScript\nDESCRIPTION: NodeJS implementation of the API endpoint showing how to handle requests and responses with Express. Includes context handling and CORS header example.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/apis.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const fooBar = (req, res, context) => {\n  res.set(\"Access-Control-Allow-Origin\", \"*\");\n  res.json({ msg: `Hello, ${context.user ? \"registered user\" : \"stranger\"}!` });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Worker Function in JavaScript\nDESCRIPTION: JavaScript implementation of the worker function that handles the job execution, including database operations and logging.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/jobs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const foo = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Component Using Wasp API Client (JSX)\nDESCRIPTION: Defines a React component `Todo` in JSX (`src/Todo.jsx`) that fetches data from a custom API endpoint (`/tasks`) using the `api` helper from `wasp/client/api`. It uses `useState` and `useEffect` hooks to manage the component's state and trigger the API call on mount.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/testing.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { api } from \"wasp/client/api\";\n\nconst Todo = (_props) => {\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    api\n      .get(\"/tasks\")\n      .then((res) => res.json())\n      .then((tasks) => setTasks(tasks))\n      .catch((err) => window.alert(err));\n  });\n\n  return (\n    <ul>\n      {tasks &&\n        tasks.map((task) => (\n          <li key={task.id}>\n            <input type=\"checkbox\" value={task.isDone} />\n            {task.description}\n          </li>\n        ))}\n    </ul>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp App Client in JavaScript\nDESCRIPTION: Basic Wasp application configuration showing client setup with root component and setup function imports in JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/client-config.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@client/Root.jsx\",\n    setupFn: import mySetupFunction from \"@client/myClientSetupCode.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a New Package with npm in Wasp\nDESCRIPTION: This snippet demonstrates how to add a new package (date-fns) to a Wasp project using npm. The command will add the package to the dependencies section of package.json.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/dependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install date-fns\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Signup Action in Wasp\nDESCRIPTION: This snippet shows how to define a custom signup action in the Wasp configuration file. It specifies the action name, the function to be executed, and the entities involved.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/username-and-pass.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\naction signupUser {\n  fn: import { signUp } from \"@server/auth/signup.js\",\n  entities: [User]\n}\n```\n\n----------------------------------------\n\nTITLE: Including User Data with Tasks in JavaScript\nDESCRIPTION: Example of how to include full user data, including auth and identities, when fetching tasks in a Wasp application using Prisma queries.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/entities.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getAllTasks = async (args, context) => {\n  return context.entities.Task.findMany({\n    orderBy: { id: 'desc' },\n    select: {\n      id: true,\n      title: true,\n      user: {\n        include: {\n          auth: {\n            include: {\n              identities: {\n                select: {\n                  providerName: true,\n                  providerUserId: true,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Enum Definition Example\nDESCRIPTION: Shows how to define and use enums in Prisma schema for more expressive data modeling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/prisma-file.md#2025-04-22_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nenum TaskStatus {\n  NotStarted\n  Doing\n  Done\n}\n\nmodel Task {\n  ...\n  state TaskStatus @default(NotStarted)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity with Prisma Schema Language in Wasp\nDESCRIPTION: Defines a Task Entity using the Wasp DSL, incorporating embedded Prisma Schema Language (PSL) for specifying fields and database behavior. This Entity includes an auto-incremented primary key (id), a description field, and a boolean isDone property defaulting to false. Required dependencies: Wasp, Prisma. When placed in a .wasp file and applied using Wasp's migrate-dev command, this snippet creates and synchronizes the corresponding database table structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/entities.md#2025-04-22_snippet_0\n\nLANGUAGE: Wasp\nCODE:\n```\nentity Task {=psl\\n    id          Int     @id @default(autoincrement())\\n    description String\\n    isDone      Boolean @default(false)\\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Query Client (TypeScript)\nDESCRIPTION: Example of configuring React Query's QueryClient using the configureQueryClient hook in TypeScript. This sets global defaults for all queries.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/client-config.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureQueryClient } from 'wasp/client/operations'\n\nexport default async function mySetupFunction(): Promise<void> {\n  // ... some setup\n  configureQueryClient({\n    defaultOptions: {\n      queries: {\n        staleTime: Infinity,\n      },\n    },\n  })\n  // ... some more setup\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Schema with Extra Fields in Prisma\nDESCRIPTION: Prisma schema definition for the User entity with an additional address field. This schema must include all the extra fields that will be collected during signup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/overview.md#2025-04-22_snippet_12\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id      Int     @id @default(autoincrement())\n  address String?\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Task Action in JavaScript\nDESCRIPTION: Server-side implementation of the updateTask action in JavaScript, using Prisma client to update a task's isDone status.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/06-actions.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const updateTask = async ({ id, isDone }, context) => {\n  return context.entities.Task.update({\n    where: { id },\n    data: {\n      isDone: isDone,\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Database Seeds Configuration in Wasp\nDESCRIPTION: Configuring database seed functions in the main Wasp configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/backends.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    seeds: [\n      import { devSeedSimple } from \"@src/dbSeeds.js\",\n      import { prodSeed } from \"@src/dbSeeds.js\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Prisma Schema (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define the User entity in the schema.prisma file for a TypeScript project using Google authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/google.md#2025-04-22_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  // Add your own fields below\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Server Environment Variables Configuration Example\nDESCRIPTION: Example of defining server environment variables in a .env.server file, including database connection strings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/env-vars.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nDATABASE_URL=postgresql://localhost:5432\nSOME_VAR_NAME=somevalue\n```\n\n----------------------------------------\n\nTITLE: Default Wasp CRUD 'delete' Operation Implementation (TypeScript)\nDESCRIPTION: This snippet demonstrates the default TypeScript implementation generated by Wasp for the `delete` CRUD operation. It uses the Prisma Client's `delete` method on the `Task` entity, targeting the record identified by `args.id` (corresponding to the `@id` field in the Prisma schema).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// ...\n// Wasp uses the field marked with `@id` in Prisma schema as the id field.\nreturn Task.delete({ where: { id: args.id } })\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a Second Page with URL Parameters in Wasp\nDESCRIPTION: This snippet shows how to add another page and route in Wasp, including URL parameters using React Router syntax.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/03-pages.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute HelloRoute { path: \"/hello/:name\", to: HelloPage }\npage HelloPage {\n  component: import Hello from \"@client/HelloPage.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the routes Object in React TSX\nDESCRIPTION: Shows how to use the routes object to generate links programmatically, including handling of optional static segments.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/links.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { routes } from 'wasp/client/router'\n\nconst linkToTask = routes.TaskRoute.build({ params: { id: 1 } })\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst linkToOptional = routes.OptionalRoute.build({\n  path: '/task/:id/details', // or '/task/:id'\n  params: { id: 1 },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Catch-All Route in Wasp\nDESCRIPTION: Demonstrates how to define a catch-all route in the main.wasp file using the /* pattern.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/links.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute CatchAllRoute { path: \"/pages/*\", to: CatchAllPage }\npage CatchAllPage { ... }\n```\n\n----------------------------------------\n\nTITLE: Configuring API Namespace for CORS in Wasp\nDESCRIPTION: Shows how to define an API namespace in Wasp with middleware configuration to handle CORS for a group of API endpoints under a specific path.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/apis.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napiNamespace fooBar {\n  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from \"@src/apis\",\n  path: \"/foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User ID in TypeScript Server-side Code\nDESCRIPTION: Demonstrates how to use the getFirstProviderUserId helper function with TypeScript typing in server-side code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/entities.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { getFirstProviderUserId } from 'wasp/auth'\n\nexport const createTask: CreateTask<...>  = async (args, context) => {\n  const userId = getFirstProviderUserId(context.user)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Email Verification Content Function in JavaScript\nDESCRIPTION: This code defines a function that generates the content for the email verification message in JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getVerificationEmailContent = ({ verificationLink }) => ({\n  subject: 'Verify your email',\n  text: `Click the link below to verify your email: ${verificationLink}`,\n  html: `\n        <p>Click the link below to verify your email</p>\n        <a href=\"${verificationLink}\">Verify email</a>\n    `,\n})\n```\n\n----------------------------------------\n\nTITLE: Using getFirstProviderUserId Helper in TypeScript\nDESCRIPTION: Example of using the getFirstProviderUserId helper method to retrieve the first available user ID in a TypeScript Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/entities.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const userId = user.getFirstProviderUserId()\n  // ...\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const createTask: CreateTask<...>  = async (args, context) => {\n  const userId = context.user.getFirstProviderUserId()\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Keycloak User ID in TypeScript\nDESCRIPTION: This snippet demonstrates how to extract the Keycloak identity from a user object and access its ID property. The Keycloak ID is a UUID that uniquely identifies the user in the Keycloak authentication system.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/entities/_keycloak-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst keycloakIdentity = user.identities.keycloak\n\n// Keycloak User ID for example \"12345678-1234-1234-1234-123456789012\"\nkeycloakIdentity.id\n```\n\n----------------------------------------\n\nTITLE: Google OAuth Config Function Implementation\nDESCRIPTION: Example implementation of the getConfig function required for Google OAuth. Returns an object with clientID, clientSecret, and scope fields needed by the OAuth provider.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/google.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport function getConfig() {\n  return {\n    clientID, // look up from env or elsewhere\n    clientSecret, // look up from env or elsewhere\n    scope: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Database Schema in Wasp\nDESCRIPTION: This command creates a new database migration and applies it to the database, updating the schema to include the new Task entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/04-entities.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Importing an Image Asset URL in Vite with TypeScript (TSX)\nDESCRIPTION: Shows how to import a static asset into a React component using TypeScript with TSX in a Vite project. The import statement assigns the asset's URL to a variable, which is utilized as the 'src' of an image. This approach also ensures assets are processed and output with hashed filenames during production builds for efficient caching. Requires Vite and TypeScript setup; the referenced asset must exist. The output URL will differ between development and production environments.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/static-assets.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport imgUrl from './img.png'\\n\\nfunction App() {\\n  return <img src={imgUrl} alt=\\\"img\\\" />\\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Link Component in React TSX\nDESCRIPTION: Shows how to use the Link component from wasp/client/router to create type-safe links in a React component. It includes passing the required path and params props.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/links.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'wasp/client/router'\n\nexport const TaskList = () => {\n  // ...\n\n  return (\n    <div>\n      {tasks.map((task) => (\n        <Link\n          key={task.id}\n          to=\"/task/:id\"\n          params={{ id: task.id }}>\n          {task.description}\n        </Link>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Testing a Task Checker Function with Vitest - JavaScript\nDESCRIPTION: Implements a Vitest test case for the areThereAnyTasks function. Requires Vitest to be installed and the function defined in 'helpers.js'. Imports the function and asserts correct behavior when passed an empty array. Intended for use in automated unit test runs.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { test, expect } from \"vitest\";\n\nimport { areThereAnyTasks } from \"./helpers\";\n\ntest(\"areThereAnyTasks\", () => {\n  expect(areThereAnyTasks([])).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Email Verification Route in Wasp with TypeScript\nDESCRIPTION: This code shows how to create a route for the email verification page in TypeScript. It defines the route path and links it to a TypeScript React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_20\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\nroute EmailVerificationRoute { path: \"/email-verification\", to: EmailVerificationPage }\npage EmailVerificationPage {\n  component: import { VerifyEmailPage } from \"@src/VerifyEmailPage.tsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Schema for Wasp App Plan\nDESCRIPTION: This JSON schema defines the structure for a Wasp app plan, including entities, actions, queries, and pages. It is used to generate a comprehensive plan for the application before actual code generation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-07-17-how-we-built-gpt-web-app-generator.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entities\": [{ \"entityName\": \"string\", \"entityBodyPsl\": \"string\" }],\n  \"actions\": [{ \"opName\": \"string\", \"opFnPath\": \"string\", \"opDesc\": \"string\" }],\n  \"queries\": [{ \"opName\": \"string\", \"opFnPath\": \"string\", \"opDesc\": \"string\" }],\n  \"pages\": [{ \"pageName\": \"string\", \"componentPath\": \"string\", \"routeName\": \"string\", \"routePath\": \"string\", \"pageDesc\": \"string\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation of Task Query\nDESCRIPTION: The JavaScript implementation of the getTaskInfo query that retrieves a task by ID from the database and returns a formatted info message. This represents the code before migration to TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/general/typescript.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport HttpError from 'wasp/server'\n\nfunction getInfoMessage(task) {\n  const isDoneText = task.isDone ? 'is done' : 'is not done'\n  return `Task '${task.description}' is ${isDoneText}.`\n}\n\nexport const getTaskInfo = async ({ id }, context) => {\n  const Task = context.entities.Task\n  const task = await Task.findUnique({ where: { id } })\n  if (!task) {\n    throw new HttpError(404)\n  }\n  return getInfoMessage(task)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript Todo App Template Project\nDESCRIPTION: Command to create a new Wasp project using the TypeScript todo app template with full-stack type safety and authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/starter-templates.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwasp new <project-name> -t todo-ts\n```\n\n----------------------------------------\n\nTITLE: Google Auth Configuration Before Migration\nDESCRIPTION: Example of the old getUserFieldsFn configuration for Google authentication in main.wasp before migrating to the new auth system.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_16\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  // ...\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {\n        // highlight-next-line\n        getUserFieldsFn: import { getUserFields } from \"@server/auth/google.js\"\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Delaying and Submitting a Job in JavaScript/TypeScript\nDESCRIPTION: This snippet demonstrates how to delay the execution of a job and then submit it, including passing job arguments and executor options.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/jobs.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst submittedJob = await mySpecialJob\n  .delay(10)\n  .submit({ job: \"args\" }, { \"retryLimit\": 2 })\n```\n\n----------------------------------------\n\nTITLE: Defining Root Layout Component - JavaScript (Wasp & React JSX)\nDESCRIPTION: Shows how to set up a default layout for the client by assigning a React JSX root component in the Wasp app declaration and providing its source implementation. Requires a valid React component at '@src/Root.jsx'. Expects 'children' to be rendered within the layout in both Wasp and JSX files. Outputs a rendered app wrapped by header and footer elements.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/client-config.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.jsx\",\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Root({ children }) {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      {children}\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity for Discord Auth - Prisma\nDESCRIPTION: Provides a basic Prisma model for the User entity used in authentication, including unique username and display name fields. The model is required for Wasp authentication setup and any additional user attributes should be included as needed. Expects to be placed in your Prisma schema file (schema.prisma) and synced via migration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/discord.md#2025-04-22_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          Int    @id @default(autoincrement())\n  username    String @unique\n  displayName String\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using Entities in APIs (Wasp)\nDESCRIPTION: Demonstrates how to include entities in API declarations in Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/apis.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar {\n  fn: import { fooBar } from \"@src/apis\",\n  entities: [Task],\n  httpRoute: (GET, \"/foo/bar\")\n}\n```\n\n----------------------------------------\n\nTITLE: URL Routing Configuration\nDESCRIPTION: Setting up URL routes in Django and page routes in Wasp\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-20-django-vs-wasp.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('update/<str:pk>/', views.updateTask, name='update_task'),\n    path('delete/<str:pk>/', views.deleteTask, name='delete_task'),\n```\n\nLANGUAGE: jsx\nCODE:\n```\nroute TaskRoute { path: \"/\", to: TaskPage }\npage TaskPage {\n  component: import { TaskPage } from \"@src/TaskPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using React Provider in Root Component - JavaScript (Wasp & React JSX)\nDESCRIPTION: Demonstrates integrating Redux with the root component by importing and wrapping children with a Provider, both in Wasp (import statement) and JSX. Requires 'react-redux' and a local 'store' module. Ensures all nested components have access to the Redux store. Inputs: store, Provider, children. Outputs: React app context-enabled for Redux.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/client-config.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.jsx\",\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root({ children }) {\n  return <Provider store={store}>{children}</Provider>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes and Pages in Wasp\nDESCRIPTION: The basic structure for defining a route and page in a Wasp application. The route maps a URL path to a page, while the page declaration references a React component implementation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/03-pages.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  // We specify that the React implementation of the page is exported from \n  // `src/MainPage.jsx`. This statement uses standard JS import syntax.\n  // Use `@src` to reference files inside the `src` folder.\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Base Directory for Client in Wasp\nDESCRIPTION: Shows how to configure the base directory for serving the client application, useful when serving from a subdirectory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/client-config.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    baseDir: \"/my-app\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Form in MainPage Component in JavaScript\nDESCRIPTION: Updates to the MainPage component in JavaScript to incorporate the NewTaskForm, allowing users to create new tasks through the UI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/06-actions.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  createTask,\n  getTasks,\n  useQuery\n} from 'wasp/client/operations'\n\nconst MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      <NewTaskForm />\n\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n\n// ... TaskView, TaskList, NewTaskForm ...\n```\n\n----------------------------------------\n\nTITLE: Default Middleware Configuration in JavaScript\nDESCRIPTION: Defines the default global middleware setup including Helmet, CORS, Morgan logger, JSON parser, URL encoder, and cookie parser.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/middleware-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultGlobalMiddleware = new Map([\n  ['helmet', helmet()],\n  ['cors', cors({ origin: config.allowedCORSOrigins })],\n  ['logger', logger('dev')],\n  ['express.json', express.json()],\n  ['express.urlencoded', express.urlencoded({ extended: false })],\n  ['cookieParser', cookieParser()]\n])\n```\n\n----------------------------------------\n\nTITLE: Setting Base Directory for Client in Wasp\nDESCRIPTION: This snippet shows how to set a base directory for serving the client from a subdirectory in a Wasp application. This is useful when the app needs to be served from a specific subdirectory of a domain.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/client-config.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    baseDir: \"/my-app\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Action in Wasp\nDESCRIPTION: Example of declaring a createFoo Action in Wasp with function import and entity specification.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_16\n\nLANGUAGE: wasp\nCODE:\n```\nquery createFoo {\n    fn: import { createFoo } from \"@src/actions.js\"\n    entities: [Foo]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Page with Wasp Auth UI\nDESCRIPTION: This snippet demonstrates how to create a signup page using the SignupForm component from Wasp's Auth UI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/ui.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { SignupPage } from \"@client/SignupPage.tsx\"\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SignupForm } from '@wasp/auth/forms/Signup'\n\n// Use it like this\nexport function SignupPage() {\n  return <SignupForm />\n}\n```\n\n----------------------------------------\n\nTITLE: API Reference for routes Object in TypeScript\nDESCRIPTION: Provides a detailed TypeScript interface for the routes object, showing the structure and types for different route configurations including root and parameterized routes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/links.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const routes = {\n  // RootRoute has a path like \"/\"\n  RootRoute: {\n    build: (options?: {\n      search?: string[][] | Record<string, string> | string | URLSearchParams\n      hash?: string\n    }) => // ...\n  },\n\n  // DetailRoute has a path like \"/task/:id/:something?\"\n  DetailRoute: {\n    build: (\n      options: {\n        params: { id: ParamValue; something?: ParamValue; },\n        search?: string[][] | Record<string, string> | string | URLSearchParams\n        hash?: string\n      }\n    ) => // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Wasp App Configuration\nDESCRIPTION: This snippet demonstrates the basic structure of an `app` declaration in a Wasp file. It sets the required Wasp version, defines the application's title (which appears in the browser tab), and includes an external stylesheet in the HTML head.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/customizing-app.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"ToDo App\",\n  head: [\n    \"<link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\\\" />\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Management with CRUD Operations in React (TypeScript)\nDESCRIPTION: A TypeScript version of the React component that uses Wasp-generated CRUD operations to manage tasks, featuring full-stack type safety with automatically inferred payload types.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/crud.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// highlight-next-line\nimport { Tasks } from 'wasp/client/crud'\nimport { useState } from 'react'\n\nexport const MainPage = () => {\n  // highlight-next-line\n  // Thanks to full-stack type safety, all payload types are inferred\n  // highlight-next-line\n  // automatically\n  // highlight-next-line\n  const { data: tasks, isLoading, error } = Tasks.getAll.useQuery()\n  // highlight-next-line\n  const createTask = Tasks.create.useAction()\n  const [taskDescription, setTaskDescription] = useState('')\n\n  function handleCreateTask() {\n    createTask({ description: taskDescription, isDone: false })\n    setTaskDescription('')\n  }\n\n  if (isLoading) return <div>Loading...</div>\n  if (error) return <div>Error: {error.message}</div>\n  return (\n    <div\n      style={{\n        fontSize: '1.5rem',\n        display: 'grid',\n        placeContent: 'center',\n        height: '100vh',\n      }}\n    >\n      <div>\n        <input\n          value={taskDescription}\n          onChange={(e) => setTaskDescription(e.target.value)}\n        />\n        <button onClick={handleCreateTask}>Create task</button>\n      </div>\n      <ul>\n        {tasks.map((task) => (\n          <li key={task.id}>{task.description}</li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Queries in JavaScript\nDESCRIPTION: JavaScript implementation of the declared queries, showing task data handling and filtering functionality.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/queries.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tasks = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\nexport const getAllTasks = () => {\n  return tasks\n}\n\nexport const getFilteredTasks = (args) => {\n  const { isDone } = args\n  return tasks.filter((task) => task.isDone === isDone)\n}\n```\n\n----------------------------------------\n\nTITLE: Using CASL.js in React Components for Frontend Permission Controls\nDESCRIPTION: This snippet demonstrates how to conditionally render UI elements in React based on user permissions using CASL.js. It shows a button that only appears if the user has permission to delete articles.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-29-permissions-in-web-apps.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Button \n  onClick={() => deleteArticle(article)} \n  disabled={!ability.can('delete', article)}\n>\n  Delete\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Provider in Root Component (JavaScript)\nDESCRIPTION: Example of using the root component to set up a Redux provider in a Wasp application using JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/client-config.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.jsx\",\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root({ children }) {\n  return <Provider store={store}>{children}</Provider>\n}\n```\n\n----------------------------------------\n\nTITLE: Using getUsername Function in React Component (JavaScript)\nDESCRIPTION: Demonstrates how to use the getUsername function from wasp/auth to display the username of a task's creator in a React component. The function returns the username if the user signed up with the Username & password auth method, or null otherwise.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/entities.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getUsername } from 'wasp/auth'\n\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {getUsername(task.user)}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Wasp App Configuration in TypeScript\nDESCRIPTION: Creates a new Wasp App instance with basic configuration including title and version.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/general/wasp-ts-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { App } from 'wasp-config'\n\nconst app = new App('todoApp', {\n  title: 'ToDo App',\n  wasp: { version: '{latestWaspVersion}' },\n  // head: []\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Logout Button - React Component (JavaScript)\nDESCRIPTION: This JavaScript React component includes a logout button that calls Wasp's logout function upon click, allowing users to sign out. The snippet imports the logout function from Wasp's client-side auth API and demonstrates its integration within the main page layout. Requires 'wasp/client/auth' for the logout function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/07-auth.md#2025-04-22_snippet_17\n\nLANGUAGE: JSX\nCODE:\n```\n// ...\nimport { logout } from 'wasp/client/auth'\n//...\n\nconst MainPage = () => {\n  // ...\n  return (\n    <div>\n      // ...\n      <button onClick={logout}>Logout</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prisma Client Directly in JavaScript\nDESCRIPTION: This snippet shows how to import and use the Prisma Client directly in server-side JavaScript code for more control over Entity operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/entities.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { prisma } from 'wasp/server'\n\nprisma.task.create({\n    description: \"Read the Entities doc\",\n    isDone: true // almost :)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sign-Up Logic with Types and Validation (TypeScript)\nDESCRIPTION: This TypeScript snippet extends the custom sign-up pattern for Wasp with explicit type safety and additional typings from wasp/server/operations. It defines input and output types, ensures robust validation and typed deserialization, and follows the same business flow as the JavaScript version. Additional type parameters for provider data and return types help prevent runtime errors. Dependencies: wasp/server/auth, wasp/server/operations, and correct type definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/email.md#2025-04-22_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\\n  ensurePasswordIsPresent,\\n  ensureValidPassword,\\n  ensureValidEmail,\\n  createProviderId,\\n  sanitizeAndSerializeProviderData,\\n  deserializeAndSanitizeProviderData,\\n  findAuthIdentity,\\n  createUser,\\n  createEmailVerificationLink,\\n  sendEmailVerificationEmail,\\n} from 'wasp/server/auth'\\nimport type { CustomSignup } from 'wasp/server/operations'\\n\\ntype CustomSignupInput = {\\n  email: string\\n  password: string\\n}\\ntype CustomSignupOutput = {\\n  success: boolean\\n  message: string\\n}\\n\\nexport const signup: CustomSignup<\\n  CustomSignupInput,\\n  CustomSignupOutput\\n> = async (args, _context) => {\\n  ensureValidEmail(args)\\n  ensurePasswordIsPresent(args)\\n  ensureValidPassword(args)\\n\\n  try {\\n    const providerId = createProviderId('email', args.email)\\n    const existingAuthIdentity = await findAuthIdentity(providerId)\\n\\n    if (existingAuthIdentity) {\\n      const providerData = deserializeAndSanitizeProviderData<'email'>(\\n        existingAuthIdentity.providerData\\n      )\\n      // Your custom code here\\n    } else {\\n      // sanitizeAndSerializeProviderData will hash the user's password\\n      const newUserProviderData =\\n        await sanitizeAndSerializeProviderData<'email'>({\\n          hashedPassword: args.password,\\n          isEmailVerified: false,\\n          emailVerificationSentAt: null,\\n          passwordResetSentAt: null,\\n        })\\n      await createUser(\\n        providerId,\\n        providerData,\\n        // Any additional data you want to store on the User entity\\n        {}\\n      )\\n\\n      // Verification link links to a client route e.g. /email-verification\\n      const verificationLink = await createEmailVerificationLink(\\n        args.email,\\n        '/email-verification'\\n      )\\n      try {\\n        await sendEmailVerificationEmail(args.email, {\\n          from: {\\n            name: 'My App Postman',\\n            email: 'hello@itsme.com',\\n          },\\n          to: args.email,\\n          subject: 'Verify your email',\\n          text: `Click the link below to verify your email: ${verificationLink}` ,\\n          html: `\\n                      <p>Click the link below to verify your email</p>\\n                      <a href=\"${verificationLink}\">Verify email</a>\\n                  `,\\n        })\\n      } catch (e: unknown) {\\n        console.error('Failed to send email verification email:', e)\\n        throw new HttpError(500, 'Failed to send email verification email.')\\n      }\\n    }\\n  } catch (e) {\\n    return {\\n      success: false,\\n      message: e.message,\\n    }\\n  }\\n\\n  // Your custom code after sign-up.\\n  // ...\\n\\n  return {\\n    success: true,\\n    message: 'User created successfully',\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Session Entity Schema\nDESCRIPTION: Internal Prisma schema for the Session entity that manages user session information.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/entities/entities.md#2025-04-22_snippet_12\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Session {\n  id        String   @id @unique\n  expiresAt DateTime\n  userId    String\n  auth      Auth     @relation(references: [id], fields: [userId], onDelete: Cascade)\n\n  @@index([userId])\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing AuthUser Object with Email Auth in JavaScript\nDESCRIPTION: Example of the AuthUser object structure when a user has signed up with email auth in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/entities.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = {\n  // User data\n  id: 'cluqsex9500017cn7i2hwsg17',\n  address: 'Some address',\n\n  // Auth methods specific data\n  identities: {\n    email: {\n      id: 'user@app.com',\n      isEmailVerified: true,\n      emailVerificationSentAt: '2024-04-08T10:06:02.204Z',\n      passwordResetSentAt: null,\n    },\n    google: null,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation Before Migration\nDESCRIPTION: The original JavaScript implementation of the queries module showing the code before TypeScript migration, including the getTaskInfo query function that retrieves task information.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/general/typescript.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport HttpError from '@wasp/core/HttpError.js'\n\nfunction getInfoMessage(task) {\n  const isDoneText = task.isDone ? 'is done' : 'is not done'\n  return `Task '${task.description}' is ${isDoneText}.`\n}\n\nexport const getTaskInfo = async ({ id }, context) => {\n  const Task = context.entities.Task\n  const task = await Task.findUnique({ where: { id } })\n  if (!task) {\n    throw new HttpError(404)\n  }\n  return getInfoMessage(task)\n}\n```\n\n----------------------------------------\n\nTITLE: MainPage Component Implementation (TypeScript)\nDESCRIPTION: Implements the MainPage React functional component in TypeScript, importing assets and CSS similarly to the JavaScript version. Requires React and expects the appropriate asset files. The component can be typed for stricter props checking as needed. Input: none by default; Output: React JSX.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/03-pages.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport waspLogo from './waspLogo.png'\nimport './Main.css'\n\nexport const MainPage = () => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Google Auth Field Implementation Before Migration\nDESCRIPTION: The old implementation of getUserFields function for Google authentication that extracts the displayName from the profile.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// highlight-next-line\nimport type { GetUserFieldsFn } from '@wasp/types'\n\n// highlight-start\nexport const getUserFields: GetUserFieldsFn = async (_context, args) => {\n  const displayName = args.profile.displayName\n  return { displayName }\n}\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Displaying Wasp CLI Commands and Usage\nDESCRIPTION: Main help output showing all available Wasp CLI commands, their descriptions, and usage examples.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/general/cli.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  wasp <command> [command-args]\n\nCOMMANDS\n  GENERAL\n    new [<name>] [args]   Creates a new Wasp project. Run it without arguments for interactive mode.\n      OPTIONS:\n        -t|--template <template-name>\n           Check out the templates list here: https://github.com/wasp-lang/starters\n\n    new:ai <app-name> <app-description> [<config-json>]\n      Uses AI to create a new Wasp project just based on the app name and the description.\n      You can do the same thing with `wasp new` interactively.\n      Run `wasp new:ai` for more info.\n\n    version               Prints current version of CLI.\n    waspls                Run Wasp Language Server. Add --help to get more info.\n    completion            Prints help on bash completion.\n    uninstall             Removes Wasp from your system.\n  IN PROJECT\n    start                 Runs Wasp app in development mode, watching for file changes.\n    start db              Starts managed development database for you.\n    db <db-cmd> [args]    Executes a database command. Run 'wasp db' for more info.\n    clean                 Deletes all generated code, all cached artifacts, and the node_modules dir.\n                          Wasp equivalent of 'have you tried closing and opening it again?'.\n    build                 Generates full web app code, ready for deployment. Use when deploying or ejecting.\n    deploy                Deploys your Wasp app to cloud hosting providers.\n    telemetry             Prints telemetry status.\n    deps                  Prints the dependencies that Wasp uses in your project.\n    dockerfile            Prints the contents of the Wasp generated Dockerfile.\n    info                  Prints basic information about the current Wasp project.\n    test                  Executes tests in your project.\n    studio                (experimental) GUI for inspecting your Wasp app.\n\nEXAMPLES\n  wasp new MyApp\n  wasp start\n  wasp db migrate-dev\n\nDocs: https://wasp.sh/docs\nDiscord (chat): https://discord.gg/rzdnErX\nNewsletter: https://wasp.sh/#signup\n```\n\n----------------------------------------\n\nTITLE: Implementing Queries in JavaScript\nDESCRIPTION: Demonstrates how to implement the declared queries in JavaScript, including handling arguments and returning data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/queries.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tasks = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\nexport const getAllTasks = () => {\n  return tasks\n}\n\nexport const getFilteredTasks = (args) => {\n  const { isDone } = args\n  return tasks.filter((task) => task.isDone === isDone)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord Auth in Wasp\nDESCRIPTION: Basic Wasp configuration for enabling Discord authentication, including user entity specification and auth method setup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/discord.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      discord: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Release Branch\nDESCRIPTION: Git command to merge the release branch into deploy-web branch.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit merge release\n```\n\n----------------------------------------\n\nTITLE: Handling Member Introductions in Discord Bot\nDESCRIPTION: Implements message handling for member introductions. It checks if the message is in the correct channel, starts with '!intro', and meets a minimum length requirement.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-04-29-discord-bot-introduction.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst INTRODUCTIONS_CHANNEL_ID = \"<YOU_WILL_HAVE_TO_FIND_THIS_ON_DISCORD_SERVER>\"\n\nbot.on('message', async msg => {\n  if (msg.content.startsWith('!intro ')) {\n    if (msg.channel.id.toString() !== INTRODUCTIONS_CHANNEL_ID) {\n      const introductionsChannelName =\n        msg.guild.channels.resolve(INTRODUCTIONS_CHANNEL_ID).name\n      return msg.reply(\n        `Please use !intro command in the ${introductionsChannelName} channel!`\n      )\n    }\n\n    const introMsg = msg.content.substring('!intro '.length).trim()\n    const minMsgLength = 20\n    if (introMsg.length < minMsgLength) {\n      return msg.reply(\n        `Please write introduction at least ${minMsgLength} characters long!`\n      )\n    }\n\n    return msg.reply(`Yay successful introduction!`)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Emails with JavaScript/TypeScript\nDESCRIPTION: Example of sending an email using the emailSender utility in a server action. Shows how to specify sender, recipient, subject, and content in both text and HTML formats.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/email/email.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { emailSender } from \"wasp/server/email\";\n\n// In some action handler...\nconst info = await emailSender.send({\n  from: {\n    name: \"John Doe\",\n    email: \"john@doe.com\",\n  },\n  to: \"user@domain.com\",\n  subject: \"Saying hello\",\n  text: \"Hello world\",\n  html: \"Hello <strong>world</strong>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Auth in Wasp File\nDESCRIPTION: This snippet shows how to enable GitHub Authentication in the Wasp configuration file. It sets up the auth object with the User entity and GitHub as an authentication method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/github.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ResetPasswordPage Component in JavaScript\nDESCRIPTION: This snippet shows how to implement a reset password page component in JavaScript using Wasp's ResetPasswordForm component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ResetPasswordForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function ResetPasswordPage() {\n  return <ResetPasswordForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Emails in TypeScript\nDESCRIPTION: Example of how to send an email from server-side TypeScript code using the emailSender API from the wasp/server/email module.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/email/email.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { emailSender } from \"wasp/server/email\";\n\n// In some action handler...\nconst info = await emailSender.send({\n  from: {\n    name: \"John Doe\",\n    email: \"john@doe.com\",\n  },\n  to: \"user@domain.com\",\n  subject: \"Saying hello\",\n  text: \"Hello world\",\n  html: \"Hello <strong>world</strong>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint in Wasp (JavaScript)\nDESCRIPTION: Example of declaring an API endpoint in Wasp using JavaScript. Shows configuration of route, authentication, entity access, and middleware setup for a GET endpoint at /foo/bar.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/apis.md#2025-04-22_snippet_13\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar {\n  fn: import { fooBar } from \"@server/apis.js\",\n  httpRoute: (GET, \"/foo/bar\"),\n  entities: [Task],\n  auth: true,\n  middlewareConfigFn: import { apiMiddleware } from \"@server/apis.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: API-Specific Middleware Implementation in JavaScript\nDESCRIPTION: Implementation of an API endpoint and its custom middleware function in JavaScript that replaces the JSON parser with a raw body parser for webhook processing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/middleware-config.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express'\n\nexport const webhookCallback = (req, res, _context) => {\n  res.json({ msg: req.body.length })\n}\n\nexport const webhookCallbackMiddlewareFn = (middlewareConfig) => {\n  console.log('webhookCallbackMiddlewareFn: Swap express.json for express.raw')\n\n  middlewareConfig.delete('express.json')\n  middlewareConfig.set('express.raw', express.raw({ type: '*/*' }))\n\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reset Password Page with Wasp Auth UI\nDESCRIPTION: This snippet demonstrates how to create a reset password page using the ResetPasswordForm component from Wasp's Auth UI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/ui.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\nroute PasswordResetRoute { path: \"/password-reset\", to: PasswordResetPage }\npage PasswordResetPage {\n  component: import { ResetPasswordPage } from \"@client/ResetPasswordPage.tsx\"\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ResetPasswordForm } from '@wasp/auth/forms/ResetPassword'\n\n// Use it like this\nexport function ResetPasswordPage() {\n  return <ResetPasswordForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Task Update in JavaScript\nDESCRIPTION: Server-side implementation of the updateTask action that updates a task's isDone status in the database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/06-actions.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const updateTask = async ({ id, isDone }, context) => {\n  return context.entities.Task.update({\n    where: { id },\n    data: {\n      isDone: isDone,\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Error Handling Helpers\nDESCRIPTION: Shows how to use Wasp's Prisma error handling utilities for converting Prisma errors to HTTP responses.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/actions.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { isPrismaError, prismaErrorToHttpError } from \"@wasp/utils.js\";\n\n// ...\n\ntry {\n  await context.entities.Task.create({...})\n} catch (e) {\n  if (isPrismaError(e)) {\n    throw prismaErrorToHttpError(e)\n  } else {\n    throw e\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Wasp Project with the SaaS Template\nDESCRIPTION: Shows the command to directly create a new Wasp project using the 'saas' template. Replace `<project-name>` with the desired directory name. The `-t saas` flag specifies the SaaS template, which includes features like Auth, Stripe, OpenAI API, Tailwind, and Cron Jobs.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/starter-templates.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwasp new <project-name> -t saas\n```\n\n----------------------------------------\n\nTITLE: Basic Wasp Auth Configuration\nDESCRIPTION: Initial authentication setup in the main.wasp file, enabling username/password authentication and specifying the user entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/username-and-pass.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query in TypeScript\nDESCRIPTION: This snippet shows how to implement the 'getFoo' query in TypeScript, using the generated type and specifying input and output types.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/queries.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetFoo } from 'wasp/server/operations'\n\ntype Foo = // ...\n\nexport const getFoo: GetFoo<{ id: number }, Foo> = (args, context) => {\n  // implementation\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Signup Form Fields with Render Function in React (JavaScript)\nDESCRIPTION: This snippet shows how to extend the SignupForm component from Wasp in a React (JavaScript) application using a render function passed to the additionalFields prop. The function receives the react-hook-form object and form state, then conditionally renders extra form content (greeting a user by username when available). Dependencies include Wasp client auth components and react-hook-form. Inputs are the form and state; output is dynamic additional fields rendering. Limitation: Only renders additional content when the username field is filled.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SignupForm, FormItemGroup } from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={(form, state) => {\n        const username = form.watch('username')\n        return (\n          username && (\n            <FormItemGroup>\n              Hello there <strong>{username}</strong> 👋\n            </FormItemGroup>\n          )\n        )\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Wasp (JavaScript)\nDESCRIPTION: This snippet shows how to define the User entity in the Wasp file for a JavaScript project. It includes a basic structure with an auto-incrementing id field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/google.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\n    id          Int     @id @default(autoincrement())\n    // ...\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Defining Task Entity and Operations in Wasp\nDESCRIPTION: This snippet defines the Task entity, a query for fetching tasks, and an action for updating tasks in the Wasp configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-30-optimistic-update-feature-announcement.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nentity Task {=psl\n    id          Int     @id @default(autoincrement())\n    description String\n    isDone      Boolean @default(false)\npsl=}\n\nquery getTasks {\n  fn: import { getTasks } from \"@server/queries.js\",\n  entities: [Task]\n}\n\naction updateTask {\n  fn: import { updateTask } from \"@server/actions.js\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up API for Username and Password Migration - Wasp - wasp\nDESCRIPTION: Defines a new Wasp API endpoint for migrating users who use the username and password authentication method. The route is GET '/migrate-username-and-password' and logic is handled by the imported handler from '@src/migrateToNewAuth'. No entities are listed for this API. The endpoint is the backend trigger for user migration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_14\n\nLANGUAGE: wasp\nCODE:\n```\napi migrateUsernameAndPassword {\n  httpRoute: (GET, \"/migrate-username-and-password\"),\n  fn: import { migrateUsernameAndPasswordHandler } from \"@src/migrateToNewAuth\",\n  entities: []\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Signup Fields in Wasp\nDESCRIPTION: Demonstrates how to configure additional signup fields in a Wasp application by importing a custom userSignupFields definition in the main.wasp file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/overview.md#2025-04-22_snippet_16\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  // ...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/signup\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: External Auth Entity Configuration in TypeScript\nDESCRIPTION: TypeScript version of the external authentication entity configuration in Wasp, showing entity definitions with proper relations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_21\n\nLANGUAGE: wasp\nCODE:\n```\n//...\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n//...\n\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    //...\n    externalAuthAssociations  SocialLogin[]\npsl=}\n\nentity SocialLogin {=psl\n  id          Int       @id @default(autoincrement())\n  provider    String\n  providerId  String\n  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId      Int\n  createdAt   DateTime  @default(now())\n  @@unique([provider, providerId, userId])\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub OAuth Environment Variables\nDESCRIPTION: This snippet shows the environment variables that need to be added to the .env.server file for GitHub OAuth authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/github.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGITHUB_CLIENT_ID=your-github-client-id\nGITHUB_CLIENT_SECRET=your-github-client-secret\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Cache Key in JavaScript\nDESCRIPTION: This snippet demonstrates how to access the query cache key for a Wasp query, which is useful when working directly with react-query's low-level API for more advanced optimistic update scenarios.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/actions.md#2025-04-22_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nimport { getTasks } from 'wasp/client/operations'\n\nconst queryKey = getTasks.queryCacheKey\n```\n\n----------------------------------------\n\nTITLE: Importing Client Environment Validation Schema in Wasp Configuration\nDESCRIPTION: Configures the Wasp application to use the defined validation schema for client environment variables by importing it from the env.js/ts file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/env-vars.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  ...\n  client: {\n    envValidationSchema: import { envValidationSchema } from \"@src/env\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TypeScript SDK Usage in Wasp\nDESCRIPTION: This code snippet showcases the early preview of Wasp's TypeScript SDK. It demonstrates how to use the SDK for defining routes, actions, and queries with type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-09-30-wasp-launch-week-7.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineRoute, defineAction, defineQuery } from '@wasp/sdk'\n\nconst MainPage = defineRoute('/', () => ...)\n\nconst createTask = defineAction('createTask', async (args: { description: string }) => ...)\n\nconst getTasks = defineQuery('getTasks', async () => ...)\n```\n\n----------------------------------------\n\nTITLE: SQLite Database Configuration in Prisma Schema\nDESCRIPTION: Basic Prisma schema configuration for using SQLite as the database provider in Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/backends.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Applying Combined Customizations (Colors, Logo) in TypeScript/TSX\nDESCRIPTION: Shows how to apply both the typed custom `appearance` object and a `logo` image (`todoLogo`) to the `LoginForm` component within a React/TSX file (`src/LoginPage.tsx`). It utilizes the `appearance` and `logo` props simultaneously.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/ui.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/LoginPage.tsx\"\nimport { LoginForm } from 'wasp/client/auth'\n\nimport { authAppearance } from './appearance'\nimport todoLogo from './todoLogo.png'\n\nexport function LoginPage() {\n  return <LoginForm appearance={appearance} logo={todoLogo} />\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Route in Wasp\nDESCRIPTION: This snippet shows how to define a route in the main.wasp file. It specifies a path with a parameter and links it to a page component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/links.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nroute TaskRoute { path: \"/task/:id\", to: TaskPage }\npage TaskPage { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions in JavaScript\nDESCRIPTION: This snippet demonstrates the implementation of the createTask and markTaskAsDone Actions in JavaScript. It includes a simple in-memory database and logic for creating tasks and marking them as done.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/actions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet nextId = 4\nconst tasks = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\nexport const createTask = (args) => {\n  const newTask = {\n    id: nextId,\n    isDone: false,\n    description: args.description,\n  }\n  nextId += 1\n  tasks.push(newTask)\n  return newTask\n}\n\nexport const markTaskAsDone = (args) => {\n  const task = tasks.find((task) => task.id === args.id)\n  if (!task) {\n    return\n  }\n  task.isDone = true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Routes and Pages in Wasp\nDESCRIPTION: This code defines the necessary routes and pages for authentication in the Wasp file. It includes a login route and page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/google.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Triggering Jobs in Server Setup Function\nDESCRIPTION: This JavaScript code imports and manually submits the scheduled jobs during server setup to ensure data is available immediately, without waiting for the scheduled times. It demonstrates how to trigger jobs and pass arguments.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-06-15-jobs-feature-announcement.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* These Jobs are automatically scheduled by Wasp.\n* However, let's kick them off on server setup to ensure we have data right away.\n*/\nimport { github } from '@wasp/jobs/getGithubStats.js'\nimport { loadTime } from '@wasp/jobs/calcPageLoadTime.js'\n\nexport default async function () {\n  await github.submit()\n  await loadTime.submit({\n    url: \"https://wasp.sh\",\n    name: \"wasp.sh Load Time\"\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Username/Password Data Migration Handler in TypeScript\nDESCRIPTION: Provides the TypeScript implementation for the `migrateUsernameAndPasswordHandler` API function. It uses Prisma to fetch all users with their associated `auth` data. The function iterates through users, skipping those already migrated (have `auth` data) or those not using username/password auth (missing `username` or `password`). For eligible users, it creates a new `Auth` record and an associated `AuthIdentity` record with `providerName: 'username'`, `providerUserId: user.username.toLowerCase()`, and `providerData` containing the original `hashedPassword`. It returns a summary of the migration results.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"src/migrateToNewAuth.ts\"\nimport { prisma } from \"wasp/server\";\nimport { type ProviderName, type UsernameProviderData } from \"wasp/server/auth\";\nimport { MigrateUsernameAndPassword } from \"wasp/server/api\";\n\nexport const migrateUsernameAndPasswordHandler: MigrateUsernameAndPassword =\n  async (_req, res) => {\n    const result = await migrateUsernameAuth();\n\n    res.status(200).json({ message: \"Migrated users to the new auth\", result });\n  };\n\nasync function migrateUsernameAuth(): Promise<{\n  numUsersAlreadyMigrated: number;\n  numUsersNotUsingThisAuthMethod: number;\n  numUsersMigratedSuccessfully: number;\n}> {\n  const users = await prisma.user.findMany({\n    include: {\n      auth: true,\n    },\n  });\n\n  const result = {\n    numUsersAlreadyMigrated: 0,\n    numUsersNotUsingThisAuthMethod: 0,\n    numUsersMigratedSuccessfully: 0,\n  };\n\n  for (const user of users) {\n    if (user.auth) {\n      result.numUsersAlreadyMigrated++;\n      console.log(\"Skipping user (already migrated) with id:\", user.id);\n      continue;\n    }\n\n    if (!user.username || !user.password) {\n      result.numUsersNotUsingThisAuthMethod++;\n      console.log(\"Skipping user (not using username auth) with id:\", user.id);\n      continue;\n    }\n\n    const providerData: UsernameProviderData = {\n      hashedPassword: user.password,\n    };\n    const providerName: ProviderName = \"username\";\n\n    await prisma.auth.create({\n      data: {\n        identities: {\n          create: {\n            providerName,\n            providerUserId: user.username.toLowerCase(),\n            providerData: JSON.stringify(providerData),\n          },\n        },\n        user: {\n          connect: {\n            id: user.id,\n          },\n        },\n      },\n    });\n    result.numUsersMigratedSuccessfully++;\n  }\n\n  return result;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Client Environment Validation in TypeScript\nDESCRIPTION: TypeScript implementation of client-side environment variable validation using Zod. The defineEnvValidationSchema function ensures the schema is properly type-checked.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/env-vars.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as z from 'zod'\n\nimport { defineEnvValidationSchema } from 'wasp/env'\n\nexport const envValidationSchema = defineEnvValidationSchema(\n  z.object({\n    REACT_APP_ANALYTICS_ID: z.string({\n      required_error: 'REACT_APP_ANALYTICS_ID is required.',\n    }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Keycloak User Signup Fields and Config - JavaScript\nDESCRIPTION: This JavaScript snippet defines how to extract signup fields from Keycloak's response and set OAuth scopes. The userSignupFields object returns a hardcoded username and extracts displayName from profile data. The getConfig function specifies OAuth scopes. Requires no external dependencies except the Keycloak OAuth provider and compliance with Wasp's expected imports. Inputs are profile data returned from Keycloak; outputs are signup field values and scopes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/keycloak.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const userSignupFields = {\n  username: () => \"hardcoded-username\",\n  displayName: (data) => data.profile.name,\n}\n\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Generator Block to SQLite Configuration in schema.prisma\nDESCRIPTION: Complete configuration for SQLite including both datasource and generator blocks, which specifies the Prisma Client generator.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// highlight-start\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Extensions in Wasp\nDESCRIPTION: Enables PostgreSQL extensions in the Wasp app configuration, including specific extension configurations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/backends.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    system: PostgreSQL,\n    prisma: {\n      clientPreviewFeatures: [\"postgresqlExtensions\"]\n      dbExtensions: [\n        { name: \"hstore\", schema: \"myHstoreSchema\" },\n        { name: \"pg_trgm\" },\n        { name: \"postgis\", version: \"2.1\" },\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Google & GitHub Auth Migration API Endpoints in Wasp\nDESCRIPTION: This Wasp code defines two API endpoints, `migrateGoogle` and `migrateGithub`. They configure GET routes at `/migrate-google` and `/migrate-github` respectively. Accessing these routes triggers the execution of the corresponding handler functions (`migrateGoogleHandler`, `migrateGithubHandler`) imported from `@src/migrateToNewAuth.ts`. These endpoints initiate the bulk migration process for users authenticated via Google or GitHub social logins. Similar to the email migration API, they specify no direct entity dependencies (`entities: []`).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_27\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napi migrateGoogle {\n  httpRoute: (GET, \"/migrate-google\"),\n  fn: import { migrateGoogleHandler } from \"@src/migrateToNewAuth\",\n  entities: []\n}\n\napi migrateGithub {\n  httpRoute: (GET, \"/migrate-github\"),\n  fn: import { migrateGithubHandler } from \"@src/migrateToNewAuth\",\n  entities: []\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Protected Routes\nDESCRIPTION: Wasp configuration for protecting routes with authentication\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-13-how-to-add-auth-with-lucia-to-your-react-nextjs-app.md#2025-04-22_snippet_16\n\nLANGUAGE: wasp\nCODE:\n```\npage MainPage {\n  component: import Main from \"@src/pages/Main\",\n  authRequired: true\n}\n```\n\n----------------------------------------\n\nTITLE: Testing the Task Checking Utility with Vitest - TypeScript\nDESCRIPTION: Implements a unit test for the TypeScript version of areThereAnyTasks, using Vitest. Imports the function and verifies it returns false for an empty array. This snippet is for TypeScript projects with Vitest, and expects proper types to be configured via tsconfig.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/testing.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { test, expect } from \\\"vitest\\\";\\n\\nimport { areThereAnyTasks } from \\\"./helpers\\\";\\n\\ntest(\\\"areThereAnyTasks\\\", () => {\\n  expect(areThereAnyTasks([])).toBe(false);\\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Base Path for Client Application (JavaScript)\nDESCRIPTION: Configures Vite in `vite.config.js` to serve the client application from a non-root base path (e.g., `/my-app/`) by setting the `base` option. This affects how assets are linked and is useful when deploying the Wasp client application under a specific URL subpath.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/custom-vite-config.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"vite.config.js\"\nexport default {\n  base: '/my-app/',\n}\n```\n```\n\n----------------------------------------\n\nTITLE: New Authentication Configuration (Wasp 0.12.X)\nDESCRIPTION: Example of simplified authentication configuration in Wasp 0.12.X, showing automatic auth model setup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.12.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\nentity User {=psl\n  id Int @id @default(autoincrement())\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Schema\nDESCRIPTION: Prisma schema definition for the User entity required for Google authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/google.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  // Add your own fields below\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Usage in Queries\nDESCRIPTION: Demonstrates how to use Entities in Queries with both JavaScript and TypeScript implementations, including Prisma API integration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/queries.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Task } from 'wasp/entities'\nimport { type GetAllTasks, type GetFilteredTasks } from 'wasp/server/operations'\n\nexport const getAllTasks: GetAllTasks<void, Task[]> = async (args, context) => {\n  return context.entities.Task.findMany({})\n}\n\nexport const getFilteredTasks: GetFilteredTasks<\n  Pick<Task, 'isDone'>,\n  Task[]\n> = async (args, context) => {\n  return context.entities.Task.findMany({\n    where: { isDone: args.isDone },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Credential Helper in WSL\nDESCRIPTION: Command to configure WSL to use Windows Git credential manager\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-11-21-guide-windows-development-wasp-wsl.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global credential.helper \"/mnt/c/Program\\ Files/Git/mingw64/bin/git-credential-manager.exe\"\n```\n\n----------------------------------------\n\nTITLE: Exploring Wasp Project Directory Structure\nDESCRIPTION: This snippet shows the typical file structure of a newly created Wasp project, highlighting key files and directories including main.wasp (core configuration), package.json (dependencies), public folder (static assets), and src folder (source code).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/02-project-structure.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── .gitignore\n├── main.wasp          # Your Wasp code goes here.\n├── package.json       # Your dependencies and project info go here.\n├── package-lock.json\n├── public             # Your static files (e.g., images, favicon) go here.\n├── src                # Your source code (TS/JS/CSS/HTML) goes here.\n│   ├── Main.css\n│   ├── MainPage.jsx\n│   ├── vite-env.d.ts\n│   └── waspLogo.png\n├── tsconfig.json\n├── vite.config.ts\n├── .waspignore\n└── .wasproot\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp 0.12.X using curl\nDESCRIPTION: Command to install Wasp version 0.12.4 using the curl installer script.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v 0.12.4\n```\n\n----------------------------------------\n\nTITLE: Defining Entities with Prisma Schema Language in Wasp\nDESCRIPTION: This snippet demonstrates how to define data models (entities) for User, List, and Card using Prisma Schema Language within a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-12-02-waspello.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nentity User {=psl\n    id          Int     @id @default(autoincrement())\n    username    String  @unique\n    password    String\n    lists       List[]\n    cards       Card[]\npsl=}\n\nentity List {=psl\n    id          Int     @id @default(autoincrement())\n    name        String\n    pos         Float\n\n    // List has a single author.\n    user        User    @relation(fields: [userId], references: [id])\n    userId      Int\n\n    cards       Card[]\npsl=}\n\nentity Card {=psl\n    id          Int     @id @default(autoincrement())\n    title       String\n    pos         Float\n\n    // Card belongs to a single list.\n    list        List    @relation(fields: [listId], references: [id])\n    listId      Int\n\n    // Card has a single author.\n    author      User    @relation(fields: [authorId], references: [id])\n    authorId    Int\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Importing a Wasp Job Definition and Type (TypeScript)\nDESCRIPTION: Illustrates how to import both the job object (`mySpecialJob`) and its associated auto-generated type (`MySpecialJob`) into a server-side TypeScript file. Importing the type from `wasp/server/jobs` enables type-checking for job arguments and worker function signatures.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/jobs.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"someAction.ts\"\nimport { mySpecialJob, type MySpecialJob } from 'wasp/server/jobs'\n```\n```\n\n----------------------------------------\n\nTITLE: JavaScript Database Seed Implementation\nDESCRIPTION: Implementation of a database seed function in JavaScript, creating initial user and task data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/backends.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTask } from './actions.js'\nimport { sanitizeAndSerializeProviderData } from 'wasp/server/auth'\n\nexport const devSeedSimple = async (prisma) => {\n  const user = await createUser(prisma, {\n    username: 'RiuTheDog',\n    password: 'bark1234',\n  })\n\n  await createTask(\n    { description: 'Chase the cat' },\n    { user, entities: { Task: prisma.task } }\n  )\n}\n\nasync function createUser(prisma, data) {\n  const newUser = await prisma.user.create({\n    data: {\n      auth: {\n        create: {\n          identities: {\n            create: {\n              providerName: 'username',\n              providerUserId: data.username,\n              providerData: sanitizeAndSerializeProviderData({\n                hashedPassword: data.password\n              }),\n            },\n          },\n        },\n      },\n    },\n  })\n\n  return newUser\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Client-Side Auth Pages (JavaScript)\nDESCRIPTION: This snippet shows how to create the client-side authentication pages in React. It includes a Login component and a Layout component for centering content, using Tailwind CSS for styling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/keycloak.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }) {\n  return (\n    <div className=\"w-full h-full bg-white\">\n      <div className=\"min-w-full min-h-[75vh] flex items-center justify-center\">\n        <div className=\"w-full h-full max-w-sm p-5 bg-white\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Django project URLs\nDESCRIPTION: Python code to set up URL routing for the Django project, including the API endpoint for the todo app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-20-django-vs-wasp.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('todo.urls')),  # Add this line\n]\n```\n\n----------------------------------------\n\nTITLE: Using 'forall' with ExistentialQuantification Extension in Haskell\nDESCRIPTION: Demonstrates the use of 'forall' with the ExistentialQuantification extension to create heterogeneous data types in Haskell.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-09-01-haskell-forall-tutorial.md#2025-04-22_snippet_5\n\nLANGUAGE: haskell\nCODE:\n```\ndata Showable = forall s. (Show s) => Showable s\n```\n\nLANGUAGE: haskell\nCODE:\n```\nsomeShowables :: [Showable]\nsomeShowables = [Showable \"Hi\", Showable 5, Showable (1, 2)]\n\nprintShowables :: [Showable] -> IO ()\nprintShowables ss = mapM_ (\\(Showable s) -> print s) ss\n\nmain :: IO ()\nmain = printShowables someShowables\n```\n\n----------------------------------------\n\nTITLE: Using API from Client in React\nDESCRIPTION: Example of calling the custom API endpoint from a React component using Wasp's API client.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/apis.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect } from \"react\";\nimport { api } from \"wasp/client/api\";\n\nasync function fetchCustomRoute() {\n  const res = await api.get(\"/foo/bar\");\n  console.log(res.data);\n}\n\nexport const Foo = () => {\n  useEffect(() => {\n    fetchCustomRoute();\n  }, []);\n\n  return <>// ...</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding an npm Dependency with Bash\nDESCRIPTION: This snippet demonstrates how to add a new npm package (in this case, date-fns) to a Wasp project using the npm install command via the terminal. It requires npm to be installed in the environment and a valid package.json in the project root. The command updates the dependencies section of package.json, ensuring the new package becomes available for use within the project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/dependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install date-fns\n\n```\n\n----------------------------------------\n\nTITLE: Displaying JavaScript Project Structure in Wasp\nDESCRIPTION: Shows the default file structure of a newly created Wasp project when using JavaScript. It displays the directory structure including configuration files, source code, and static assets organization.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/02-project-structure.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── .gitignore\n├── main.wasp          # Your Wasp code goes here.\n├── schema.prisma      # Your Prisma schema goes here.\n├── package.json       # Your dependencies and project info go here.\n├── public             # Your static files (e.g., images, favicon) go here.\n├── src                # Your source code (TS/JS/CSS/HTML) goes here.\n│   ├── Main.css\n│   ├── MainPage.jsx\n│   ├── vite-env.d.ts\n│   └── waspLogo.png\n├── tsconfig.json\n├── vite.config.ts\n├── .waspignore\n└── .wasproot\n\n```\n\n----------------------------------------\n\nTITLE: Server Setup Function and Type Definitions (TypeScript)\nDESCRIPTION: Supplies type definitions for the Wasp `ServerSetupFn` and its context, showing the intended structure of setup functions in TypeScript. These types enforce that setup functions are asynchronous and receive the Express app and Node.js server as context. Another snippet shows usage of this type to define a setup function that awaits an initialization routine.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/server-config.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ServerSetupFn = (context: ServerSetupFnContext) => Promise<void>\n\nexport type ServerSetupFnContext = {\n  app: Application // === express.Application\n  server: Server // === http.Server\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ServerSetupFn } from 'wasp/server'\n\nexport const mySetupFunction: ServerSetupFn = async () => {\n  await setUpSomeResource()\n}\n```\n\n----------------------------------------\n\nTITLE: Using getUsername in React Component (JavaScript)\nDESCRIPTION: Example of importing and using the getUsername helper function within a React component to retrieve a user's username from their auth identity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/_get-username.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getUsername } from 'wasp/auth'\n\nconst MainPage = ({ user }) => {\n  const username = getUsername(user)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Actions in Wasp\nDESCRIPTION: This snippet demonstrates how to declare Actions in a Wasp file. It shows two Actions: 'createTask' and 'markTaskAsDone', both importing their implementations from a server-side file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/actions.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\naction createTask {\n  fn: import { createTask } from \"@server/actions.js\"\n}\n\naction markTaskAsDone {\n  fn: import { markTaskAsDone } from \"@server/actions.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing SignupForm with Render Function in TypeScript\nDESCRIPTION: The TypeScript version of the SignupForm customization example. It uses the same approach as the JavaScript version but with TypeScript type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignupForm } from '@wasp/auth/forms/Signup'\nimport { FormItemGroup } from '@wasp/auth/forms/internal/Form'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={(form, state) => {\n        const username = form.watch('username')\n        return (\n          username && (\n            <FormItemGroup>\n              Hello there <strong>{username}</strong> 👋\n            </FormItemGroup>\n          )\n        )\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Query in a React Component with TypeScript\nDESCRIPTION: Demonstrates how to use the getTasks query in a React component with TypeScript types. It uses the useQuery hook to fetch and display tasks, showcasing Wasp's full-stack type safety features.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/05-queries.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Task } from 'wasp/entities'\nimport { getTasks, useQuery } from 'wasp/client/operations'\n\nexport const MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n\nconst TaskView = ({ task }: { task: Task }) => {\n  return (\n    <div>\n      <input type=\"checkbox\" id={String(task.id)} checked={task.isDone} />\n      {task.description}\n    </div>\n  )\n}\n\nconst TasksList = ({ tasks }: { tasks: Task[] }) => {\n  if (!tasks?.length) return <div>No tasks</div>\n\n  return (\n    <div>\n      {tasks.map((task, idx) => (\n        <TaskView task={task} key={idx} />\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User Object in Authenticated React Component\nDESCRIPTION: Shows how to access the user object as a prop in a React component for an authenticated page in both JavaScript and TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\npage AccountPage {\n  component: import Account from \"@src/pages/Account\",\n  authRequired: true\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport Button from './Button'\nimport { logout } from 'wasp/client/auth'\n\nconst AccountPage = ({ user }) => {\n  return (\n    <div>\n      <Button onClick={logout}>Logout</Button>\n      {JSON.stringify(user, null, 2)}\n    </div>\n  )\n}\n\nexport default AccountPage\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type AuthUser } from 'wasp/auth'\nimport Button from './Button'\nimport { logout } from 'wasp/client/auth'\n\nconst AccountPage = ({ user }: { user: AuthUser }) => {\n  return (\n    <div>\n      <Button onClick={logout}>Logout</Button>\n      {JSON.stringify(user, null, 2)}\n    </div>\n  )\n}\n\nexport default AccountPage\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Component in Wasp App\nDESCRIPTION: Updates the `app` configuration block in `main.wasp` to define a global root component for the client-side application. The `client.rootComponent` property specifies that the `App` component (imported from `@client/App`) should wrap all page components, enabling a shared layout and functionality like navigation across the application. Other configurations like database type, authentication methods, and dependencies are also shown for context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_35\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx lines={6-8}\napp twitterAgent {\n  wasp: {\n    version: \"^0.10.6\"\n  },\n  title: \"twitter-agent\",\n  client: { \n    rootComponent: import App from \"@client/App\",\n  },\n  db: { \n    system: PostgreSQL,\n  },\n  auth: {\n    userEntity: User,\n    onAuthFailedRedirectTo: \"/login\",\n    methods: {\n      usernameAndPassword: {},\n    }\n  },\n  dependencies: [\n    (\"openai\", \"3.2.1\"),\n    (\"rettiwt-api\", \"1.1.8\"),\n    (\"langchain\", \"0.0.91\"),\n    (\"@pinecone-database/pinecone\", \"0.1.6\"),\n    (\"@headlessui/react\", \"1.7.15\"),\n    (\"react-icons\", \"4.8.0\"),\n    (\"react-twitter-embed\", \"4.0.4\")\n  ],\n}\n\n// entities, operations, routes, and other stuff...\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak OAuth in Wasp - TypeScript\nDESCRIPTION: This snippet shows a Wasp app definition for integrating Keycloak authentication using TypeScript. It refers to configuration and signup field exports from @src/auth/keycloak.js. The app is set to redirect on auth failure and uses a custom User entity. Requires a TypeScript project setup and Wasp version ^0.13.0.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/keycloak.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      keycloak: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/keycloak.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/keycloak.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\nentity User {=psl\n    id                        Int     @id @default(autoincrement())\n    username                  String  @unique\n    displayName               String\npsl=}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Server-Side Task Creation with Authentication\nDESCRIPTION: Shows how to implement authenticated task creation on the server using context.user for access control and database operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const createTask = async (task, context) => {\n  if (!context.user) {\n    throw new HttpError(403)\n  }\n\n  const Task = context.entities.Task\n  return Task.create({\n    data: {\n      description: task.description,\n      user: {\n        connect: { id: context.user.id },\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Database Seeding Implementation\nDESCRIPTION: Example of a database seeding function in JavaScript that creates a user and associated task.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/backends.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTask } from './actions.js'\nimport { sanitizeAndSerializeProviderData } from 'wasp/server/auth'\n\nexport const devSeedSimple = async (prisma) => {\n  const user = await createUser(prisma, {\n    username: 'RiuTheDog',\n    password: 'bark1234',\n  })\n\n  await createTask(\n    { description: 'Chase the cat' },\n    { user, entities: { Task: prisma.task } }\n  )\n}\n\nasync function createUser(prisma, data) {\n  const newUser = await prisma.user.create({\n    data: {\n      auth: {\n        create: {\n          identities: {\n            create: {\n              providerName: 'username',\n              providerUserId: data.username,\n              providerData: sanitizeAndSerializeProviderData({\n                hashedPassword: data.password\n              }),\n            },\n          },\n        },\n      },\n    },\n  })\n\n  return newUser\n}\n```\n\n----------------------------------------\n\nTITLE: Using API from Client Side\nDESCRIPTION: Example of consuming the API endpoint from a React component using the Wasp API client wrapper.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/apis.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect } from \"react\";\nimport { api } from \"wasp/client/api\";\n\nasync function fetchCustomRoute() {\n  const res = await api.get(\"/foo/bar\");\n  console.log(res.data);\n}\n\nexport const Foo = () => {\n  useEffect(() => {\n    fetchCustomRoute();\n  }, []);\n\n  return <>// ...</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Keycloak OAuth Scopes (JavaScript)\nDESCRIPTION: This JavaScript function `getConfig` is part of the Keycloak authentication setup (`src/auth/keycloak.js`). It returns an object specifying the OAuth scopes ('profile', 'email') required from Keycloak during the authentication flow.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/keycloak.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using an API from Client-Side TypeScript\nDESCRIPTION: Example of using a custom API endpoint from client-side TypeScript code using the Axios wrapper provided by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/apis.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useEffect } from \"react\";\nimport api from \"@wasp/api\";\n\nasync function fetchCustomRoute() {\n  const res = await api.get(\"/foo/bar\");\n  console.log(res.data);\n}\n\nexport const Foo = () => {\n  useEffect(() => {\n    fetchCustomRoute();\n  }, []);\n\n  return <>// ...</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Prisma Schema\nDESCRIPTION: This code defines the User entity in the Prisma schema file. It includes an auto-incrementing id field and can be extended with additional fields as needed.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/github.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  // Add your own fields below\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Query in Wasp File\nDESCRIPTION: Adds a getTasks query declaration to the Wasp configuration file, specifying where the implementation is located and which entities the query will use.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/05-queries.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\nquery getTasks {\n  // Specifies where the implementation for the query function is.\n  // The path `@src/queries` resolves to `src/queries.js`.\n  // No need to specify an extension.\n  fn: import { getTasks } from \"@src/queries\",\n  // Tell Wasp that this query reads from the `Task` entity. Wasp will\n  // automatically update the results of this query when tasks are modified.\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement the 'getFoo' query in JavaScript, showing the expected function signature.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/queries.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getFoo = (args, context) => {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Username Validation in Zod Schema\nDESCRIPTION: This snippet shows how to use Zod's refine method to implement asynchronous validation for a username field. It checks if the username has changed and performs a database query only when necessary.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2025-01-22-advanced-react-hook-form-zod-shadcn.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nusername: z\n        .string()\n        .min(1, { message: 'Username is required' })\n        .refine(\n          async (username) => {\n            if (username === customer.username && customer.username !== '')\n              return true;\n            return !(await checkUsername(username));\n          },\n          { message: 'Username already exists' }\n        ),\n```\n\n----------------------------------------\n\nTITLE: Setting Server Environment Variables\nDESCRIPTION: Command to set the web client URL environment variable for CORS configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/cli.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd --context server secrets set WASP_WEB_CLIENT_URL=https://mycoolapp.com\n```\n\n----------------------------------------\n\nTITLE: Creating a New Wasp Project via CLI - Shell\nDESCRIPTION: This shell command initializes a new Wasp project named 'TodoApp' using the Wasp CLI. Wasp must be installed on your system before running this command. The 'wasp new' command generates all necessary project files, preparing both frontend and backend structure for further development.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/01-create.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n```sh\\n$ wasp new TodoApp\\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Authenticated Task Operations\nDESCRIPTION: Implements createTask and updateTask actions with authentication checks and user-specific data access. Includes both JavaScript and TypeScript implementations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/07-auth.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const createTask = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.create({\n    data: {\n      description: args.description,\n      user: { connect: { id: context.user.id } },\n    },\n  })\n}\n\nexport const updateTask = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.updateMany({\n    where: { id: args.id, user: { id: context.user.id } },\n    data: { isDone: args.isDone },\n  })\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from 'wasp/entities'\nimport { HttpError } from 'wasp/server'\nimport { CreateTask, UpdateTask } from 'wasp/server/operations'\n\ntype CreateTaskPayload = Pick<Task, 'description'>\n\nexport const createTask: CreateTask<CreateTaskPayload, Task> = async (\n  args,\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.create({\n    data: {\n      description: args.description,\n      user: { connect: { id: context.user.id } },\n    },\n  })\n}\n\ntype UpdateTaskPayload = Pick<Task, 'id' | 'isDone'>\n\nexport const updateTask: UpdateTask<\n  UpdateTaskPayload,\n  { count: number }\n> = async ({ id, isDone }, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.updateMany({\n    where: { id, user: { id: context.user.id } },\n    data: { isDone },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using pg-boss Methods for Job Management in JavaScript\nDESCRIPTION: Shows how to use pg-boss specific methods on a SubmittedJob object. These methods include details() for retrieving job information, cancel() for attempting to cancel a job, and resume() for trying to resume a canceled job.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/jobs.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst submittedJob = submit();\n\n// Get job details\nconst jobDetails = submittedJob.pgBoss.details();\n\n// Attempt to cancel the job\nsubmittedJob.pgBoss.cancel();\n\n// Attempt to resume a canceled job\nsubmittedJob.pgBoss.resume();\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeLogin Hook in JavaScript and TypeScript\nDESCRIPTION: This hook runs before a user logs in. It receives providerId, user, prisma, and req as input parameters, and its return value is ignored by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/auth-hooks.md#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const onBeforeLogin = async ({ providerId, prisma, req }) => {\n  // Hook code goes here\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { OnBeforeLoginHook } from 'wasp/server/auth'\n\nexport const onBeforeLogin: OnBeforeLoginHook = async ({\n  providerId,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord Auth in Wasp Application\nDESCRIPTION: Main Wasp application configuration showing Discord authentication setup with user entity and redirect settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/discord.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      discord: {\n        configFn: import { getConfig } from \"@src/auth/discord.js\",\n        userSignupFields: import { userSignupFields } from \"@src/auth/discord.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub OAuth Environment Variables\nDESCRIPTION: This snippet shows the environment variables that need to be added to the .env.server file to integrate with GitHub OAuth. These include the GitHub client ID and client secret obtained from the GitHub OAuth app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/github.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGITHUB_CLIENT_ID=your-github-client-id\nGITHUB_CLIENT_SECRET=your-github-client-secret\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Client in Setup Function (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure the query client in the setup function of a Wasp application using TypeScript. It shows changing the default stale time for all queries.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/client-config.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureQueryClient } from 'wasp/client/operations'\n\nexport default async function mySetupFunction(): Promise<void> {\n  // ... some setup\n  configureQueryClient({\n    defaultOptions: {\n      queries: {\n        staleTime: Infinity,\n      },\n    },\n  })\n  // ... some more setup\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking an API in Client Tests - JavaScript\nDESCRIPTION: Mocks an API endpoint using mockApi with a specified HTTP method and path, returning a defined response body. Intended for use in client tests where API interactions are involved. Requires proper method import from 'wasp/client'.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/testing.md#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nimport { HttpMethod } from \\\"wasp/client\\\";\\n\\nmockApi({ method: HttpMethod.Get, path: \\\"/foor/bar\\\" }, { res: \\\"hello\\\" });\n```\n\n----------------------------------------\n\nTITLE: Implementing a Job Function in JavaScript\nDESCRIPTION: This snippet shows how to implement the 'foo' function that is referenced in the job declaration. It demonstrates handling job arguments and using the context object to access entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/jobs.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const foo = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto CRUD Operations in Wasp\nDESCRIPTION: Example configuration for auto-generating CRUD operations in Wasp. Shows how to specify which CRUD operations should be generated for a data model.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-07-wasp-beta-update-may-23.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nentity Task {\n  id: Int @id @default(autoincrement)\n  description: String\n  isDone: Boolean @default(false)\n}\n\nentity.crud Task {\n  operations: [\n    get,\n    getAll,\n    create,\n    update,\n    delete\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Auth UI Components Implementation\nDESCRIPTION: React component implementation for login and signup pages using Wasp's auth components and TailwindCSS styling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/username-and-pass.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm, SignupForm } from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Don't have an account yet? <Link to=\"/signup\">go to signup</Link>.\n      </span>\n    </Layout>\n  )\n}\n\nexport function Signup() {\n  return (\n    <Layout>\n      <SignupForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </Layout>\n  )\n}\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"h-full w-full bg-white\">\n      <div className=\"flex min-h-[75vh] min-w-full items-center justify-center\">\n        <div className=\"h-full w-full max-w-sm bg-white p-5\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Automating Cloudflare Client Deployment with GitHub Actions in YAML\nDESCRIPTION: Defines a GitHub Actions workflow triggered on pushes to the `main` branch. It checks out code, sets up Node.js, installs a specific Wasp version, builds the Wasp project (assuming source is in `./app`), builds the React client (setting `REACT_APP_API_URL`), and deploys the built client (`./app/.wasp/build/web-app/build`) to Cloudflare Pages using the `cloudflare/wrangler-action`. Requires `CLOUDFLARE_API_TOKEN`, `CLOUDFLARE_ACCOUNT_ID`, `CLIENT_CLOUDFLARE_APP_NAME` (as env var), and potentially `WASP_SERVER_URL` secrets configured in the GitHub repository.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy Client to Cloudflare\n\non:\n  push:\n    branches:\n      - main # Deploy on every push to the main branch\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v2\n\n      - name: Setup Node.js\n        id: setup-node\n        uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n\n      - name: Install Wasp\n        run: curl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v 0.16.0 # Change to your Wasp version\n\n      - name: Wasp Build\n        run: cd ./app && wasp build\n\n      - name: Install dependencies and build the client\n        run: |\n          cd ./app/.wasp/build/web-app\n          npm install\n          REACT_APP_API_URL=${{ secrets.WASP_SERVER_URL }} npm run build\n\n      - name: Deploy to Cloudflare Pages\n        uses: cloudflare/wrangler-action@v3\n        with:\n          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}\n          command: pages deploy ./app/.wasp/build/web-app/build --project-name=${{ env.CLIENT_CLOUDFLARE_APP_NAME }} --commit-dirty=true --branch=main\n\n    env:\n      CLIENT_CLOUDFLARE_APP_NAME: cloudflare-pages-app-name\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Cache Key in JavaScript\nDESCRIPTION: Example showing how to access the underlying query cache key for direct usage with react-query's API.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getTasks } from 'wasp/client/operations'\n\nconst queryKey = getTasks.queryCacheKey\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Similarity Search Project - Shell\nDESCRIPTION: This snippet shows the shell command for generating a Wasp project with a vector similarity search template. The user should substitute <project-name> with the desired directory name. Dependencies include a pre-installed Wasp CLI. This command bootstraps an application setup for text embeddings, Pinecone vector database, OpenAI API, and Tailwind, aiming to provide out-of-the-box full-stack type safety and advanced text search capabilities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/starter-templates.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwasp new <project-name> -t embeddings\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Auth Data Migration Logic in TypeScript\nDESCRIPTION: This TypeScript code provides the implementation for migrating users from an old email/password system to the new Wasp auth structure. The `migrateEmailHandler` serves as the entry point for the API request, calling `migrateEmailAuth`. The `migrateEmailAuth` function uses Prisma to fetch all users, including their potential existing `auth` relation. It iterates through users, skipping those already migrated or not using the old email auth method (identified by the presence of `email` and `password` fields on the User model). For eligible users, it constructs the `EmailProviderData` and creates new `Auth` and `AuthIdentity` records linked to the user, storing the email as `providerUserId` and relevant data (including the old password hash) in `providerData`. It returns statistics on the migration outcome. Note that due to password hashing changes, users migrated this way will need to reset their password.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"src/migrateToNewAuth.ts\"\nimport { prisma } from \"wasp/server\";\nimport { type ProviderName, type EmailProviderData } from \"wasp/server/auth\";\nimport { MigrateEmail } from \"wasp/server/api\";\n\nexport const migrateEmailHandler: MigrateEmail =\n  async (_req, res) => {\n    const result = await migrateEmailAuth();\n\n    res.status(200).json({ message: \"Migrated users to the new auth\", result });\n  };\n\nasync function migrateEmailAuth(): Promise<{\n  numUsersAlreadyMigrated: number;\n  numUsersNotUsingThisAuthMethod: number;\n  numUsersMigratedSuccessfully: number;\n}> {\n  const users = await prisma.user.findMany({\n    include: {\n      auth: true,\n    },\n  });\n\n  const result = {\n    numUsersAlreadyMigrated: 0,\n    numUsersNotUsingThisAuthMethod: 0,\n    numUsersMigratedSuccessfully: 0,\n  };\n\n  for (const user of users) {\n    if (user.auth) {\n      result.numUsersAlreadyMigrated++;\n      console.log(\"Skipping user (already migrated) with id:\", user.id);\n      continue;\n    }\n\n    if (!user.email || !user.password) {\n      result.numUsersNotUsingThisAuthMethod++;\n      console.log(\"Skipping user (not using email auth) with id:\", user.id);\n      continue;\n    }\n\n    const providerData: EmailProviderData = {\n      isEmailVerified: user.isEmailVerified,\n      emailVerificationSentAt:\n        user.emailVerificationSentAt?.toISOString() ?? null,\n      passwordResetSentAt: user.passwordResetSentAt?.toISOString() ?? null,\n      hashedPassword: user.password,\n    };\n    const providerName: ProviderName = \"email\";\n\n    await prisma.auth.create({\n      data: {\n        identities: {\n          create: {\n            providerName,\n            providerUserId: user.email,\n            providerData: JSON.stringify(providerData),\n          },\n        },\n        user: {\n          connect: {\n            id: user.id,\n          },\n        },\n      },\n    });\n    result.numUsersMigratedSuccessfully++;\n  }\n\n  return result;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Wasp App Structure in main.wasp\nDESCRIPTION: This snippet demonstrates the structure of a main.wasp file, which defines the high-level components of a Wasp application including routes, pages, entities, queries, and actions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-07-17-how-we-built-gpt-web-app-generator.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  wasp: { version: \"^0.11.1\" },\n  title: \"ToDo App\",\n  auth: {\n    userEntity: User,\n    methods: { usernameAndPassword: {} },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n  client: {\n    rootComponent: import { Layout } from \"@client/Layout.jsx\",\n  },\n  db: {\n    prisma: {\n      clientPreviewFeatures: [\"extendedWhereUnique\"]\n    }\n  },\n}\n\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import Signup from \"@client/pages/auth/Signup.jsx\"\n}\n\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import Login from \"@client/pages/auth/Login.jsx\"\n}\n\nroute DashboardRoute { path: \"/\", to: Dashboard }\npage DashboardPage {\n  authRequired: true,\n  component: import Dashboard from \"@client/pages/Dashboard.jsx\"\n}\n\nentity User {=psl\n    id          Int       @id @default(autoincrement())\n    username    String    @unique\n    password    String\n    tasks       Task[]\npsl=}\n\nentity Task {=psl\n    id          Int       @id @default(autoincrement())\n    description String\n    isDone      Boolean   @default(false)\n    user        User      @relation(fields: [userId], references: [id])\n    userId      Int\npsl=}\n\nquery getUser {\n  fn: import { getUser } from \"@server/queries.js\",\n  entities: [User] // Entities that this query operates on.\n}\n\nquery getTasks {\n  fn: import { getTasks } from \"@server/queries.js\",\n  entities: [Task]\n}\n\naction createTask {\n  fn: import { createTask } from \"@server/actions.js\",\n  entities: [Task]\n}\n\naction updateTask {\n  fn: import { updateTask } from \"@server/actions.js\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Database Seed Function in JavaScript\nDESCRIPTION: This code snippet demonstrates a database seed function implementation. It creates a user and a task using both direct Prisma client operations and an imported action function. The function takes a Prisma client as a parameter for database operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-04-13-db-start-and-seed.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createTask } from './actions.js'\n\nexport const devSeedSimple = async (prismaClient) => {\n  const user = await createUser(prismaClient, {\n      username: \"RiuTheDog\",\n      password: \"bark1234\"\n  })\n\n  await createTask(\n    { description: \"Chase the cat\" },\n    { user, entities: { Task: prismaClient.task } }\n  )\n}\n\nasync function createUser (prismaClient, data) {\n  const { password, ...newUser } = await prismaClient.user.create({ data })\n  return newUser\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Route for Username & Password Migration in Wasp\nDESCRIPTION: Creates an API endpoint for migrating users with username and password authentication. The endpoint uses the GET method on '/migrate-username-and-password' route and calls the migrateUsernameAndPasswordHandler function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_16\n\nLANGUAGE: wasp\nCODE:\n```\napi migrateUsernameAndPassword {\n  httpRoute: (GET, \"/migrate-username-and-password\"),\n  fn: import { migrateUsernameAndPasswordHandler } from \"@src/migrateToNewAuth\",\n  entities: []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Wasp (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define the User entity in the Wasp file for a TypeScript project. It is identical to the JavaScript version.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/google.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\n    id          Int     @id @default(autoincrement())\n    // ...\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Seeding in Wasp\nDESCRIPTION: This snippet demonstrates how to configure database seeding in a Wasp application by importing a seed function in the app.db.seeds field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/backends.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    // ...\n    seeds: [\n      // ...\n      import { devSeedSimple } from \"@src/dbSeeds.js\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Email Auth Fields in main.wasp\nDESCRIPTION: Example showing how to migrate from the additionalFields configuration in the auth.signup section to the new userSignupFields in the auth.methods.email section in a Wasp configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  // ...\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {},\n    },\n    onAuthFailedRedirectTo: \"/login\",\n    // highlight-start\n    signup: {\n      additionalFields: import { fields } from \"@server/auth/signup.js\",\n    },\n    // highlight-end\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Email Provider\nDESCRIPTION: Configures the SMTP email provider in a Wasp application, which allows sending emails via SMTP protocol. This can be used with many email services that support SMTP.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/email/email.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: SMTP,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Recurring Job Schedule in Wasp\nDESCRIPTION: Configuration for a recurring job with cron schedule and optional arguments in Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/jobs.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\njob mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@src/workers/bar\"\n  },\n  schedule: {\n    cron: \"0 * * * *\",\n    args: {=json { \"job\": \"args\" } json=} // optional\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting a Simple Task Array Checker Function - JavaScript\nDESCRIPTION: Exports a utility function to check if a tasks array is empty. Designed for use in testing or business logic, requires no dependencies. Receives an array of tasks as input, returns a boolean indicating if there are any tasks. Used in tests to validate task presence.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport function areThereAnyTasks(tasks) {\n  return tasks.length === 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server Query for Fetching Tweet Drafts and Ideas in Wasp\nDESCRIPTION: This snippet defines a server query in the main.wasp file to fetch tweet drafts with associated ideas. It imports the function from a server-side file and specifies the entities involved.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nquery getTweetDraftsWithIdeas {\n  fn: import { getTweetDraftsWithIdeas } from \"@server/ideas.js\",\n  entities: [TweetDraft]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub OAuth Functions in TypeScript\nDESCRIPTION: Defines the getUserFields and getConfig functions for GitHub OAuth in TypeScript. It includes type annotations and uses the generateAvailableDictionaryUsername function to create a username.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/github.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GetUserFieldsFn } from '@wasp/types'\nimport { generateAvailableDictionaryUsername } from '@wasp/core/auth.js'\n\nexport const getUserFields: GetUserFieldsFn = async (_context, args) => {\n  const username = await generateAvailableDictionaryUsername()\n  const displayName = args.profile.displayName\n  return { username, displayName }\n}\n\nexport function getConfig() {\n  return {\n    clientID, // look up from env or elsewhere\n    clientSecret, // look up from env or elsewhere\n    scope: [],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Seed Function in TypeScript\nDESCRIPTION: Creates a seed function with TypeScript types that adds a user and a task to the database using Prisma Client and an imported action.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/backends.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTask } from \"./actions.js\";\nimport { User } from \"@wasp/entities\";\nimport { PrismaClient } from \"@prisma/client\";\n\ntype SanitizedUser = Omit<User, \"password\">;\n\nexport const devSeedSimple = async (prismaClient: PrismaClient) => {\n  const user = await createUser(prismaClient, {\n    username: \"RiuTheDog\",\n    password: \"bark1234\",\n  });\n\n  await createTask(\n    { description: \"Chase the cat\", isDone: false },\n    { user, entities: { Task: prismaClient.task } }\n  );\n};\n\nasync function createUser(\n  prismaClient: PrismaClient,\n  data: Pick<User, \"username\" | \"password\">\n): Promise<SanitizedUser> {\n  const { password, ...newUser } = await prismaClient.user.create({ data });\n  return newUser;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing AuthUser Object Fields for Email Auth in TypeScript\nDESCRIPTION: Example of the AuthUser object structure when a user has signed up with email authentication in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/entities.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = {\n  // User data\n  id: 'cluqsex9500017cn7i2hwsg17',\n  address: 'Some address',\n\n  // Auth methods specific data\n  identities: {\n    email: {\n      id: 'user@app.com',\n      isEmailVerified: true,\n      emailVerificationSentAt: '2024-04-08T10:06:02.204Z',\n      passwordResetSentAt: null,\n    },\n    google: null,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Email Provider\nDESCRIPTION: Configuration for the SMTP email provider in the main.wasp file. This requires additional environment variables to be set in the .env.server file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/email/email.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: SMTP,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reset Password Form\nDESCRIPTION: Setup for password reset page route and component implementation using Wasp's ResetPasswordForm component\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/ui.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\nroute PasswordResetRoute { path: \"/password-reset\", to: PasswordResetPage }\npage PasswordResetPage {\n  component: import { ResetPasswordPage } from \"@src/ResetPasswordPage.jsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ResetPasswordForm } from 'wasp/client/auth'\n\nexport function ResetPasswordPage() {\n  return <ResetPasswordForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Username/Password Data Migration API in Wasp\nDESCRIPTION: Defines a Wasp API endpoint `/migrate-username-and-password` using the GET method. This API route is intended to trigger the backend logic for migrating user data from the old username/password format to the new auth structure. It links to the `migrateUsernameAndPasswordHandler` function defined in `@src/migrateToNewAuth` and specifies no entity dependencies.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_17\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napi migrateUsernameAndPassword {\n  httpRoute: (GET, \"/migrate-username-and-password\"),\n  fn: import { migrateUsernameAndPasswordHandler } from \"@src/migrateToNewAuth\",\n  entities: []\n}\n```\n```\n\n----------------------------------------\n\nTITLE: JavaScript GitHub Auth Implementation\nDESCRIPTION: JavaScript implementation of GitHub authentication configuration and user signup field mappings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/github.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const userSignupFields = {\n  username: () => 'hardcoded-username',\n  displayName: (data) => data.profile.name,\n}\n\nexport function getConfig() {\n  return {\n    scopes: ['user'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Prisma Preview Features from Wasp to schema.prisma\nDESCRIPTION: Example of how to migrate Prisma preview features and database extensions configuration from the Wasp file to the schema.prisma file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_15\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    // highlight-start\n    prisma: {\n      clientPreviewFeatures: [\"postgresqlExtensions\"]\n      dbExtensions: [\n        { name: \"hstore\", schema: \"myHstoreSchema\" },\n        { name: \"pg_trgm\" },\n        { name: \"postgis\", version: \"2.1\" },\n      ]\n    }\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Image as URL in React Component (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import an image file as a URL and use it in a React component. The imported URL will be different in development and production environments.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/static-assets.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport imgUrl from './img.png'\n\nfunction App() {\n  return <img src={imgUrl} alt=\"img\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Client Setup Function Example (JavaScript)\nDESCRIPTION: Example of a client setup function in JavaScript that runs before everything else. This function logs a message every hour to track online time.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/client-config.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function mySetupFunction() {\n  let count = 1\n  setInterval(\n    () => console.log(`You have been online for ${count++} hours.`),\n    1000 * 60 * 60\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using getFirstProviderUserId Helper in React Components\nDESCRIPTION: Example of using the getFirstProviderUserId helper method in React components with both JavaScript and TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/entities/entities.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst MainPage = ({ user }) => {\n  const userId = user.getFirstProviderUserId()\n  // ...\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const userId = user.getFirstProviderUserId()\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Component in JavaScript\nDESCRIPTION: Example of a React root component implementation in JavaScript that sets up Redux provider and custom layout.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/client-config.md#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root({ children }) {\n  return (\n    <Provider store={store}>\n      <Layout>{children}</Layout>\n    </Provider>\n  )\n}\n\nfunction Layout({ children }) {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      {children}\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Auth Entity Schema\nDESCRIPTION: Internal Prisma schema for the Auth entity that connects business logic users with login credentials.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/entities/entities.md#2025-04-22_snippet_10\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Auth {\n  id         String         @id @default(uuid())\n  userId     Int?           @unique\n  user       User?          @relation(fields: [userId], references: [id], onDelete: Cascade)\n  identities AuthIdentity[]\n  sessions   Session[]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Wasp App via CLI (shell)\nDESCRIPTION: Initializes a new Wasp project using the Wasp CLI by running 'wasp new'. Assumes Wasp CLI is installed and configured in PATH. No parameters or arguments are required, but the command will prompt for the project name. The output is a new directory containing the project scaffolding for a Wasp app. Limitation: the command expects a user prompt for naming the project, and it must be run in a writable directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/introduction/quick-start.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwasp new\n```\n\n----------------------------------------\n\nTITLE: Main Wasp Configuration File for JavaScript\nDESCRIPTION: Default main.wasp configuration file for a JavaScript-based Wasp project, defining the app structure, routes, and page components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/02-project-structure.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"{latestWaspVersion}\" // Pins the version of Wasp to use.\n  },\n  title: \"TodoApp\" // Used as the browser tab title. Note that all strings in Wasp are double quoted!\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  // We specify that the React implementation of the page is exported from\n  // `src/MainPage.jsx`. This statement uses standard JS import syntax.\n  // Use `@src` to reference files inside the `src` folder.\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Node Version with NVM\nDESCRIPTION: Command to set the current shell session to use Node.js version 20.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/introduction/quick-start.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnvm use 20\n```\n\n----------------------------------------\n\nTITLE: Wasp Project Structure with Prisma Schema\nDESCRIPTION: Shows the typical file structure of a Wasp project highlighting the location of the schema.prisma file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/prisma-file.md#2025-04-22_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n.\n├── main.wasp\n...\n├── schema.prisma\n├── src\n├── tsconfig.json\n└── vite.config.ts\n```\n\n----------------------------------------\n\nTITLE: Defining Entities in Wasp Application Configuration - WASP\nDESCRIPTION: This WASP code snippet demonstrates the approach before version 0.14.0, where entities were defined directly in the .wasp file. It configures the application metadata, specifies the database system, and defines User and Task entities with relations. Dependencies include Wasp v0.13.X and implicit use of Prisma via code generation. Entities must be described within the .wasp DSL, and this approach limits direct access to advanced Prisma features.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"MyApp\",\n  db: {\n    system: PostgreSQL\n  },\n}\n\nentity User {=psl\n  id       Int @id @default(autoincrement())\n  tasks    Task[]\npsl=}\n\nentity Task {=psl\n  id          Int @id @default(autoincrement())\n  description String\n  isDone      Boolean\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Defining User and SocialLogin Entities in Wasp\nDESCRIPTION: This snippet defines the User and SocialLogin entities using Prisma Schema Language (PSL) within a Wasp file. It sets up the necessary fields and relationships for storing user information and external auth associations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-15-auth-feature-announcement.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    username                  String        @unique\n    password                  String\n    externalAuthAssociations  SocialLogin[]\npsl=}\n\nentity SocialLogin {=psl\n  id          Int       @id @default(autoincrement())\n  provider    String\n  providerId  String\n  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId      Int\n  createdAt   DateTime  @default(now())\n  @@unique([provider, providerId, userId])\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Authentication in Node.js\nDESCRIPTION: A detailed implementation of JWT-based authentication in Node.js including token management, password hashing, and middleware for request authentication. Uses jwt, secure-password packages and Prisma for database operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-06-24-ML-code-gen-vs-coding-by-hand-future.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport jwt from 'jsonwebtoken'\nimport SecurePassword from 'secure-password'\nimport util from 'util'\n\nimport prisma from '../dbClient.js'\nimport { handleRejection } from '../utils.js'\nimport config from '../config.js'\n\nconst jwtSign = util.promisify(jwt.sign)\nconst jwtVerify = util.promisify(jwt.verify)\n\nconst JWT_SECRET = config.auth.jwtSecret\n\nexport const sign = (id, options) => jwtSign({ id }, JWT_SECRET, options)\nexport const verify = (token) => jwtVerify(token, JWT_SECRET)\n\nconst auth = handleRejection(async (req, res, next) => {\n  const authHeader = req.get('Authorization')\n  if (!authHeader) {\n    return next()\n  }\n\n  if (authHeader.startsWith('Bearer ')) {\n    const token = authHeader.substring(7, authHeader.length)\n\n    let userIdFromToken\n    try {\n      userIdFromToken = (await verify(token)).id\n    } catch (error) {\n      if (['TokenExpiredError', 'JsonWebTokenError', 'NotBeforeError'].includes(error.name)) {\n        return res.status(401).send()\n      } else {\n        throw error\n      }\n    }\n\n    const user = await prisma.user.findUnique({ where: { id: userIdFromToken } })\n    if (!user) {\n      return res.status(401).send()\n    }\n\n    const { password, ...userView } = user\n\n    req.user = userView\n  } else {\n    return res.status(401).send()\n  }\n\n  next()\n})\n\nconst SP = new SecurePassword()\n\nexport const hashPassword = async (password) => {\n  const hashedPwdBuffer = await SP.hash(Buffer.from(password))\n  return hashedPwdBuffer.toString(\"base64\")\n}\n\nexport const verifyPassword = async (hashedPassword, password) => {\n  try {\n    return await SP.verify(Buffer.from(password), Buffer.from(hashedPassword, \"base64\"))\n  } catch (error) {\n    console.error(error)\n    return false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a User-Task Relation in Wasp\nDESCRIPTION: Defines a one-to-many relation between User and Task entities in the Wasp data model using Prisma schema language, with users having multiple tasks and tasks belonging to a single user.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/07-auth.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\nentity User {=psl\n    id       Int    @id @default(autoincrement())\n    // highlight-next-line\n    tasks    Task[]\npsl=}\n\nentity Task {=psl\n    id          Int     @id @default(autoincrement())\n    description String\n    isDone      Boolean @default(false)\n    // highlight-next-line\n    user        User?   @relation(fields: [userId], references: [id])\n    // highlight-next-line\n    userId      Int?\npsl=}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Navigating to Web App Directory\nDESCRIPTION: Change directory to the Wasp web app build folder for client deployment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncd web-app\n```\n\n----------------------------------------\n\nTITLE: Declaring a createTask Action in Wasp\nDESCRIPTION: This snippet shows how to declare a 'createTask' Action in the main.wasp file. The Action is linked to a function imported from '@src/actions' and operates on the Task entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/06-actions.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\naction createTask {\n  fn: import { createTask } from \"@src/actions\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing React Todo Component with Mocked Queries - TypeScript\nDESCRIPTION: Uses Vitest and Wasp helpers to test the TypeScript Todo component. Mocks getTasks query, renders with context, finds text and checks element states using React Testing Library. Ensures TypeScript compatibility for mocks and query handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/testing.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { test, expect } from \\\"vitest\\\";\\nimport { screen } from \\\"@testing-library/react\\\";\\n\\nimport { mockServer, renderInContext } from \\\"wasp/client/test\\\";\\nimport { getTasks } from \\\"wasp/client/operations\\\";\\nimport Todo from \\\"./Todo\\\";\\n\\nconst { mockQuery } = mockServer();\\n\\nconst mockTasks = [\\n  {\\n    id: 1,\\n    description: \\\"test todo 1\\\",\\n    isDone: true,\\n    userId: 1,\\n  },\\n];\\n\\ntest(\\\"handles mock data\\\", async () => {\\n  mockQuery(getTasks, mockTasks);\\n\\n  renderInContext(<Todo />);\\n\\n  await screen.findByText(\\\"test todo 1\\\");\\n\\n  expect(screen.getByRole(\\\"checkbox\\\")).toBeChecked();\\n\\n  screen.debug();\\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Logo to Auth UI in TypeScript (TSX)\nDESCRIPTION: Shows how to import a logo image (e.g., `logo.png`) in a TypeScript React component (`LoginPage.tsx`) and pass it to the `logo` prop of the `LoginForm` component. This displays the custom logo in the authentication form.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/ui.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/LoginPage.tsx\"\nimport { LoginForm } from 'wasp/client/auth'\nimport Logo from './logo.png'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass in the path to your logo\n      logo={Logo}\n    />\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev Server Auto-Open Behavior in Vite\nDESCRIPTION: Configuration to disable automatic browser opening when starting the dev server. Shows how to modify the server.open option in both JavaScript and TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/custom-vite-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  server: {\n    open: false,\n  },\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  server: {\n    open: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining API Route in JavaScript\nDESCRIPTION: Example of configuring an API route in Wasp using JavaScript. The route includes authentication, entity access, and middleware configuration for the /foo/bar endpoint.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/apis.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar {\n  fn: import { fooBar } from \"@src/apis\",\n  httpRoute: (GET, \"/foo/bar\"),\n  entities: [Task],\n  auth: true,\n  middlewareConfigFn: import { apiMiddleware } from \"@src/apis\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Environment Variables in JavaScript\nDESCRIPTION: Demonstrates how to import and use server environment variables in server-side code using the wasp/server env object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/env-vars.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { env } from 'wasp/server'\n\nconsole.log(env.SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth UI Components\nDESCRIPTION: React component implementation for authentication pages with Tailwind CSS styling\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/github.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"w-full h-full bg-white\">\n      <div className=\"min-w-full min-h-[75vh] flex items-center justify-center\">\n        <div className=\"w-full h-full max-w-sm p-5 bg-white\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp App Client Options\nDESCRIPTION: This snippet shows how to configure the client options in a Wasp app declaration. It includes setting the title, rootComponent, and setupFn.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/client-config.md#2025-04-22_snippet_13\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.jsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.js\"\n  }\n}\n```\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.tsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.ts\",\n    baseDir: \"/my-app\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Logout Button to MainPage Component in TypeScript\nDESCRIPTION: Implements a logout button in the MainPage component for TypeScript, using the Wasp-provided logout function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/07-auth.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport logout from '@wasp/auth/logout'\n//...\n\nconst MainPage = () => {\n  // ...\n  return (\n    <div>\n      // ...\n      <button onClick={logout}>Logout</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: API Reference: Configuring Keycloak OAuth in Wasp - TypeScript\nDESCRIPTION: This snippet shows a minimal Wasp app setup for Keycloak authentication, referencing TypeScript implementations for configFn and userSignupFields. Requires the TypeScript code exports to match the import paths and API. Suitable for use in documentation and as a template for similar integrations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/keycloak.md#2025-04-22_snippet_11\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      keycloak: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/keycloak.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/keycloak.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Protected Profile Page Implementation\nDESCRIPTION: Example of a protected route implementation showing user profile information and logout functionality.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-13-how-to-add-auth-with-lucia-to-your-react-nextjs-app.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { lucia, validateRequest } from \"@/lib/auth\";\nimport { redirect } from \"next/navigation\";\nimport { cookies } from \"next/headers\";\n\nexport default async function Page() {\n  const { user } = await validateRequest();\n  if (!user) {\n    return redirect(\"/login\");\n  }\n  return (\n    <>\n      <h1>Hi, {user.username}!</h1>\n      <p>Your user ID is {user.id}.</p>\n      <form action={logout}>\n        <button>Sign out</button>\n      </form>\n    </>\n  );\n}\n\nasync function logout(): Promise<ActionResult> {\n  \"use server\";\n  const { session } = await validateRequest();\n  if (!session) {\n    return {\n      error: \"Unauthorized\"\n    };\n  }\n\n  await lucia.invalidateSession(session.id);\n\n  const sessionCookie = lucia.createBlankSessionCookie();\n  cookies().set(sessionCookie.name, sessionCookie.value, sessionCookie.attributes);\n  return redirect(\"/login\");\n}\n\ninterface ActionResult {\n  error: string | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Emails in JavaScript\nDESCRIPTION: Example of how to send an email from server-side JavaScript code using the emailSender API from the wasp/server/email module.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/email/email.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { emailSender } from \"wasp/server/email\";\n\n// In some action handler...\nconst info = await emailSender.send({\n  from: {\n    name: \"John Doe\",\n    email: \"john@doe.com\",\n  },\n  to: \"user@domain.com\",\n  subject: \"Saying hello\",\n  text: \"Hello world\",\n  html: \"Hello <strong>world</strong>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Storing Values in JavaScript Setup\nDESCRIPTION: Example of storing and accessing values using setup function in JavaScript\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/server-config.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet someResource = undefined\n\nexport const mySetupFunction = async () => {\n  // Let's pretend functions setUpSomeResource and startSomeCronJob\n  // are implemented below or imported from another file.\n  someResource = await setUpSomeResource()\n  startSomeCronJob()\n}\n\nexport const getSomeResource = () => someResource\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSomeResource } from './myServerSetupCode.js'\n\n...\n\nexport const someQuery = async (args, context) => {\n  const someResource = getSomeResource()\n  return queryDataFromSomeResource(args, someResource)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Login (Google/GitHub) Migration Logic in TypeScript\nDESCRIPTION: This TypeScript code provides the logic for migrating users authenticated via Google or GitHub. It includes API handlers (`migrateGoogleHandler`, `migrateGithubHandler`) that call a common function `createSocialLoginMigration` with the respective provider name ('google' or 'github'). The `createSocialLoginMigration` function uses Prisma to fetch users along with their `auth` relation and `externalAuthAssociations`. It iterates through users, skipping those already migrated. It checks if the user has an `externalAuthAssociation` matching the specified provider. If found, it creates new `Auth` and `AuthIdentity` records, linking the user and storing the provider name and the provider-specific user ID (`providerId` from the association) as `providerUserId`. The `providerData` for social logins is initially empty (`{}`). It returns statistics about the migration process.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"src/migrateToNewAuth.ts\"\nimport { prisma } from \"wasp/server\";\nimport { MigrateGoogle, MigrateGithub } from \"wasp/server/api\";\n\nexport const migrateGoogleHandler: MigrateGoogle =\n  async (_req, res) => {\n    const result = await createSocialLoginMigration(\"google\");\n\n    res.status(200).json({ message: \"Migrated users to the new auth\", result });\n  };\n\nexport const migrateGithubHandler: MigrateGithub =\n  async (_req, res) => {\n    const result = await createSocialLoginMigration(\"github\");\n\n    res.status(200).json({ message: \"Migrated users to the new auth\", result });\n  };\n\nasync function createSocialLoginMigration(\n  providerName: \"google\" | \"github\"\n): Promise<{\n  numUsersAlreadyMigrated: number;\n  numUsersNotUsingThisAuthMethod: number;\n  numUsersMigratedSuccessfully: number;\n}> {\n  const users = await prisma.user.findMany({\n    include: {\n      auth: true,\n      externalAuthAssociations: true,\n    },\n  });\n\n  const result = {\n    numUsersAlreadyMigrated: 0,\n    numUsersNotUsingThisAuthMethod: 0,\n    numUsersMigratedSuccessfully: 0,\n  };\n\n  for (const user of users) {\n    if (user.auth) {\n      result.numUsersAlreadyMigrated++;\n      console.log(\"Skipping user (already migrated) with id:\", user.id);\n      continue;\n    }\n\n    const provider = user.externalAuthAssociations.find(\n      (provider) => provider.provider === providerName\n    );\n\n    if (!provider) {\n      result.numUsersNotUsingThisAuthMethod++;\n      console.log(`Skipping user (not using ${providerName} auth) with id:`, user.id);\n      continue;\n    }\n\n    await prisma.auth.create({\n      data: {\n        identities: {\n          create: {\n            providerName,\n            providerUserId: provider.providerId,\n            providerData: JSON.stringify({}),\n          },\n        },\n        user: {\n          connect: {\n            id: user.id,\n          },\n        },\n      },\n    });\n    result.numUsersMigratedSuccessfully++;\n  }\n\n  return result;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Configuration in Wasp\nDESCRIPTION: This snippet demonstrates how to import and use the server configuration object in a Wasp application. It specifically shows how to access the 'frontendUrl' property.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/accessing-app-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { config } from 'wasp/server'\n\nconsole.log(config.frontendUrl)\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket in Wasp App Manifest - TypeScript - Wasp\nDESCRIPTION: This code snippet illustrates how to configure the WebSocket section in a Wasp manifest (todoApp.wasp) for a TypeScript-based project. The 'fn' key references an imported WebSocket event handler from '@src/webSocket', while 'autoConnect' controls whether the client connects automatically (default is true). This setup enables real-time functionality within a Wasp app, assuming the referenced handler and related TypeScript setup are present. The approach mirrors the JavaScript configuration, supporting TypeScript usage within the Wasp ecosystem.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/web-sockets.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  webSocket: {\n    fn: import { webSocketFn } from \"@src/webSocket\",\n    autoConnect: true, // optional, default: true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server-Side Signup Field Validation (JavaScript)\nDESCRIPTION: Exports the userSignupFields object using Wasp's defineUserSignupFields utility, enforcing structure and validation for server-side signup processing. In this example, the address field is required, type-checked, and has a minimum length validation. Throws errors for invalid values, ensuring robust backend validation before user creation. Requires wasp/server/auth package. Inputs: data object from signup; Output: validated address string or thrown error.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\\n\\nexport const userSignupFields = defineUserSignupFields({\\n  address: async (data) => {\\n    const address = data.address\\n    if (typeof address !== 'string') {\\n      throw new Error('Address is required')\\n    }\\n    if (address.length < 5) {\\n      throw new Error('Address must be at least 5 characters long')\\n    }\\n    return address\\n  },\\n})\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing getEmbeddedNotes Query Logic\nDESCRIPTION: Provides the server-side TypeScript implementation for the `getEmbeddedNotes` query, typically located in `src/actions/ideas.ts`. The function first checks if a user is authenticated via `context.user` and throws an `HttpError(401)` if not. It then uses the Wasp context (`context.entities.GeneratedIdea`) to fetch all `GeneratedIdea` records belonging to the authenticated user where `isEmbedded` is true, ordering them by creation date descending. It utilizes Wasp-provided types (`GetEmbeddedNotes`) for type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_39\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n// first import the type at the top of the file\nimport type { GetEmbeddedNotes, GetTweetDraftsWithIdeas } from '@wasp/queries/types';\n\n//...\n\nexport const getEmbeddedNotes: GetEmbeddedNotes<never, GeneratedIdea[]> = async (_args, context) => {\n  if (!context.user) {\n    throw new HttpError(401, 'User is not authorized');\n  }\n\n  const notes = await context.entities.GeneratedIdea.findMany({\n    where: {\n      userId: context.user.id,\n      isEmbedded: true,\n    },\n\t\torderBy: {\n      createdAt: 'desc',\n    },\n  });\n\n  return notes;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: React Todo Component in JavaScript\nDESCRIPTION: A React component that fetches tasks using Wasp's useQuery hook and renders them as a list. Used as an example for component testing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/testing.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useQuery, getTasks } from \"wasp/client/operations\";\n\nconst Todo = (_props) => {\n  const { data: tasks } = useQuery(getTasks);\n  return (\n    <ul>\n      {tasks &&\n        tasks.map((task) => (\n          <li key={task.id}>\n            <input type=\"checkbox\" value={task.isDone} />\n            {task.description}\n          </li>\n        ))}\n    </ul>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Email Migration API Route Definition in Wasp\nDESCRIPTION: Defines an API endpoint for email authentication migration in Wasp configuration\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_23\n\nLANGUAGE: wasp\nCODE:\n```\napi migrateEmail {\n  httpRoute: (GET, \"/migrate-email\"),\n  fn: import { migrateEmailHandler } from \"@src/migrateToNewAuth\",\n  entities: []\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Meme Generation Utilities in TypeScript\nDESCRIPTION: Utility functions for fetching meme templates and generating meme images using the Imgflip API. Handles API communication and error handling for template fetching and meme generation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport axios from 'axios';\nimport { stringify } from 'querystring';\nimport HttpError from '@wasp/core/HttpError.js';\n\ntype GenerateMemeArgs = {\n  text0: string;\n  text1: string;\n  templateId: string;\n};\n\nexport const fetchMemeTemplates = async () => {\n  try {\n    const response = await axios.get('https://api.imgflip.com/get_memes');\n    return response.data.data.memes;\n  } catch (error) {\n    console.error(error);\n    throw new HttpError(500, 'Error fetching meme templates');\n  }\n};\n\nexport const generateMemeImage = async (args: GenerateMemeArgs) => {\n  console.log('args: ', args);\n\n  try {\n    const data = stringify({\n      template_id: args.templateId,\n      username: process.env.IMGFLIP_USERNAME,\n      password: process.env.IMGFLIP_PASSWORD,\n      text0: args.text0,\n      text1: args.text1,\n    });\n\n    const res = await axios.post('https://api.imgflip.com/caption_image', data, {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n    });\n\n    const url = res.data.data.url;\n\n    console.log('generated meme url: ', url);\n\n    return url as string;\n  } catch (error) {\n    console.error(error);\n    throw new HttpError(500, 'Error generating meme image');\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: SQL Table Creation for Phrases\nDESCRIPTION: SQL command for creating the phrases table in Supabase with required fields for storing translations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-03-08-building-a-full-stack-app-supabase-vs-wasp.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE phrases (\n    id bigint  NOT NULL,\n    group character varying  NULL,\n    translations_en text  NOT NULL,\n    translations_it text  NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Provider in Wasp\nDESCRIPTION: Basic configuration for setting up an email provider in the Wasp application file. Defines the provider and default sender information.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/email/email.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: <provider>,\n    defaultFrom: {\n      name: \"Example\",\n      email: \"hello@itsme.com\"\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Wasp Configuration - Post-Migration Example\nDESCRIPTION: Updated Wasp configuration file for version 0.14.X, showing simplified app configuration without entity definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"MyApp\",\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Wasp Project with CLI\nDESCRIPTION: Command to create a new Wasp project called TodoApp using the Wasp CLI. This initializes a new project with the necessary files and structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/01-create.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ wasp new TodoApp\n```\n\n----------------------------------------\n\nTITLE: Configuring Source TypeScript Settings\nDESCRIPTION: Configuration for the source TypeScript files in the project, with specific include path for src directory\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/general/wasp-ts-config.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    ...\n  },\n  ...,\n  \"include\": [\"src\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Authentication Properties in Wasp\nDESCRIPTION: This snippet shows the configuration of Google authentication properties in a Wasp application. It demonstrates how to specify custom configuration and user field mapping functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/google.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      google: {\n        configFn: import { getConfig } from \"@server/auth/google.js\",\n        getUserFieldsFn: import { getUserFields } from \"@server/auth/google.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Job Handler Function - JavaScript\nDESCRIPTION: Implements the handler (perform.fn) for a Wasp job in JavaScript. The exported async function takes a destructured 'name' field from arguments and a Wasp context with entity access, logs a greeting, fetches all Task entities, and returns them in an object. Requires Node.js and access to the Task entity model via context.entities. Input must have a 'name' property; output is an object with a 'tasks' key containing a Task array.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/jobs.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nexport const foo = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Page in React\nDESCRIPTION: Creates a signup page component using Wasp's built-in SignupForm component with navigation to login.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/07-auth.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\nimport { SignupForm } from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\n      <SignupForm />\n      <br />\n      <span>\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Client Environment Validation in JavaScript\nDESCRIPTION: Example of defining client-side environment variable validation in JavaScript using Zod. Validates that REACT_APP_ANALYTICS_ID is a required string.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/env-vars.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as z from 'zod'\n\nimport { defineEnvValidationSchema } from 'wasp/env'\n\nexport const envValidationSchema = defineEnvValidationSchema(\n  z.object({\n    REACT_APP_ANALYTICS_ID: z.string({\n      required_error: 'REACT_APP_ANALYTICS_ID is required.',\n    }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Recurring Job in Wasp\nDESCRIPTION: Declaration of a recurring job with a cron schedule in the main.wasp file. It includes optional arguments for the job.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/jobs.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\njob mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@server/workers/bar.js\"\n  },\n  schedule: {\n    cron: \"0 * * * *\",\n    args: {=json { \"job\": \"args\" } json=} // optional\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth UI Components\nDESCRIPTION: React component implementation for the authentication pages using Wasp's auth components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/discord.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"h-full w-full bg-white\">\n      <div className=\"flex min-h-[75vh] min-w-full items-center justify-center\">\n        <div className=\"h-full w-full max-w-sm bg-white p-5\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations in Wasp\nDESCRIPTION: Command to create and apply a new database migration when entity definitions are changed in Wasp. This updates the database schema to match the entity definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/04-entities.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Building Wasp Web App with NPM and Environment Variable in Bash\nDESCRIPTION: This command installs dependencies and builds the web app, setting the REACT_APP_API_URL environment variable to the URL of the deployed Wasp backend.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/deployment/_building-the-web-client.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install && REACT_APP_API_URL=<url_to_wasp_backend> npm run build\n```\n\n----------------------------------------\n\nTITLE: Defining a Catch-All Route in Wasp\nDESCRIPTION: Demonstrates how to define a catch-all route in the main.wasp file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/links.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute CatchAllRoute { path: \"/pages/*\", to: CatchAllPage }\npage CatchAllPage { ... }\n```\n\n----------------------------------------\n\nTITLE: Installing Railway CLI and Authenticating\nDESCRIPTION: Instructions for installing the Railway CLI and logging in to authenticate the user.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/manually.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrailway login\n```\n\n----------------------------------------\n\nTITLE: Protecting a Page with authRequired in Wasp\nDESCRIPTION: Shows how to set the authRequired property for a page declaration to restrict access to authenticated users only.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\npage MainPage {\n  component: import Main from \"@src/pages/Main\",\n  authRequired: true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with useAction in React Component (TypeScript)\nDESCRIPTION: This snippet shows how to use the useAction hook for optimistic updates in a TypeScript React component. It includes type annotations and demonstrates the usage of OptimisticUpdateDefinition type for proper type checking.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/actions.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\";\nimport { useQuery } from \"@wasp/queries\";\nimport { useAction, OptimisticUpdateDefinition } from \"@wasp/actions\";\nimport getTask from \"@wasp/queries/getTask\";\nimport markTaskAsDone from \"@wasp/actions/markTaskAsDone\";\n\ntype TaskPayload = Pick<Task, \"id\">;\n\nconst TaskPage = ({ id }: { id: number }) => {\n  const { data: task } = useQuery(getTask, { id });\n  const markTaskAsDoneOptimistically = useAction(markTaskAsDone, {\n    optimisticUpdates: [\n      {\n        getQuerySpecifier: ({ id }) => [getTask, { id }],\n        updateQuery: (_payload, oldData) => ({ ...oldData, isDone: true }),\n      } as OptimisticUpdateDefinition<TaskPayload, Task>,\n    ],\n  });\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>;\n  }\n\n  const { description, isDone } = task;\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? \"Yes\" : \"No\"}\n      </p>\n      {isDone || (\n        <button onClick={() => markTaskAsDoneOptimistically({ id })}>\n          Mark as done.\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default TaskPage;\n```\n\n----------------------------------------\n\nTITLE: API Reference for routes Object in TypeScript\nDESCRIPTION: This code snippet provides the TypeScript definition for the routes object, showing the structure and available options for different types of routes, including those with and without parameters.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/links.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport const routes = {\n  // RootRoute has a path like \"/\"\n  RootRoute: {\n    build: (options?: {\n      search?: string[][] | Record<string, string> | string | URLSearchParams\n      hash?: string\n    }) => // ...\n  },\n\n  // DetailRoute has a path like \"/task/:id/:something?\"\n  DetailRoute: {\n    build: (\n      options: {\n        params: { id: ParamValue; something?: ParamValue; },\n        search?: string[][] | Record<string, string> | string | URLSearchParams\n        hash?: string\n      }\n    ) => // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth Pages in React (TypeScript)\nDESCRIPTION: This snippet provides the implementation of the Login page and a Layout component in React for a TypeScript project. It includes type annotations for the Layout component props.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/google.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"w-full h-full bg-white\">\n      <div className=\"min-w-full min-h-[75vh] flex items-center justify-center\">\n        <div className=\"w-full h-full max-w-sm p-5 bg-white\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Wasp App Configuration\nDESCRIPTION: Demonstrates the basic structure of a Wasp app configuration including version specification, title setting, and custom head elements.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/customizing-app.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"ToDo App\",\n  head: [\n    \"<link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\\\" />\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: New Auth Field Definition in TypeScript\nDESCRIPTION: Demonstrates the new way of defining user signup fields using defineUserSignupFields in the updated auth system.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const fields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address;\n    if (typeof address !== 'string') {\n      throw new Error('Address is required');\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long');\n    }\n    return address;\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Login Page Component in TypeScript\nDESCRIPTION: Implements the React component for the login page in TypeScript using Wasp's LoginForm component with a link to the signup page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/07-auth.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\nimport { LoginForm } from 'wasp/client/auth'\n\nexport const LoginPage = () => {\n  return (\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\n      <LoginForm />\n      <br />\n      <span>\n        I don't have an account yet (<Link to=\"/signup\">go to signup</Link>).\n      </span>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailgun Email Provider\nDESCRIPTION: Configures the Mailgun email provider in a Wasp application. Mailgun is a third-party service for sending transactional emails.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/email/email.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: Mailgun,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Jobs in JavaScript\nDESCRIPTION: Shows how to submit jobs for execution in JavaScript, including immediate and delayed execution options.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/jobs.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mySpecialJob } from 'wasp/server/jobs'\n\nconst submittedJob = await mySpecialJob.submit({ job: \"Johnny\" })\n\n// Or, if you'd prefer it to execute in the future, just add a .delay().\n// It takes a number of seconds, Date, or ISO date string.\nawait mySpecialJob\n  .delay(10)\n  .submit({ name: \"Johnny\" })\n```\n\n----------------------------------------\n\nTITLE: SMTP Environment Variables\nDESCRIPTION: Required environment variables for configuring SMTP email provider.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/email/email.md#2025-04-22_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nSMTP_HOST=\nSMTP_USERNAME=\nSMTP_PASSWORD=\nSMTP_PORT=\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak Auth in Wasp (JavaScript)\nDESCRIPTION: This Wasp configuration file (`main.wasp`) sets up Keycloak authentication. It defines the `User` entity and specifies external JavaScript functions (`getConfig`, `userSignupFields`) from `@src/auth/keycloak.js` to handle Keycloak configuration and map user data during signup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/keycloak.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      keycloak: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/keycloak.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/keycloak.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Environment Variables in JavaScript\nDESCRIPTION: Shows how to access client-side environment variables (prefixed with REACT_APP_) in a JavaScript client application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/env-vars.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(import.meta.env.REACT_APP_SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Registering Database Seed Functions in Wasp - TypeScript\nDESCRIPTION: Registers multiple TypeScript-compatible seed functions for database initialization in a Wasp application. The 'seeds' array imports from a JS file, and is identical in form to the JavaScript version. Prerequisite: functions defined and exported from the specified module, compatible with the Wasp/Prisma seed execution convention. Enables environment- and scenario-specific seeding.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/backends.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    // ...\n    seeds: [\n      import { devSeedSimple } from \"@src/dbSeeds.js\",\n      import { prodSeed } from \"@src/dbSeeds.js\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Seeds in JavaScript\nDESCRIPTION: Example of configuring database seeds in a Wasp application using JavaScript. This shows how to import a seed function that can be run with the 'wasp db seed' command.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/backends.md#2025-04-22_snippet_14\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    // ...\n    seeds: [\n      // ...\n      import { devSeedSimple } from \"@src/dbSeeds.js\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Query Client in Setup Function - TypeScript\nDESCRIPTION: Provides a TypeScript client setup function to globally set react-query's default staleTime. The function uses configureQueryClient from 'wasp/client/operations' and should be typed as Promise<void>. Ensures all queries default to never becoming stale unless explicitly overridden. Requires react-query as dependency.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/client-config.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { configureQueryClient } from 'wasp/client/operations'\n\nexport default async function mySetupFunction(): Promise<void> {\n  // ... some setup\n  configureQueryClient({\n    defaultOptions: {\n      queries: {\n        staleTime: Infinity,\n      },\n    },\n  })\n  // ... some more setup\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Route in Server Setup Function (JavaScript)\nDESCRIPTION: Example of how to add a custom route in the server setup function using JavaScript. The function is executed on server start and demonstrates adding a '/customRoute' endpoint.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/server-config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const mySetupFunction = async ({ app }) => {\n  addCustomRoute(app)\n}\n\nfunction addCustomRoute(app) {\n  app.get('/customRoute', (_req, res) => {\n    res.send('I am a custom route')\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Server Operations in Wasp\nDESCRIPTION: Defines server-side operations (query and action) for recipe management with automatic cache invalidation and type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/introduction/introduction.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nquery getRecipes {\n  fn: import { getRecipes } from \"@src/recipe/operations\",\n  entities: [Recipe],\n}\n\naction addRecipe {\n  fn: import { addRecipe } from \"@src/recipe/operations\",\n  entities: [Recipe],\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating NavLink Active State\nDESCRIPTION: Demonstrates how to update NavLink active state handling from isActive prop to using className with useLocation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-14-to-0-15.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NavLink } from 'react-router-dom'\n\nexport function SomePage() {\n  return (\n    <NavLink\n      to=\"/new-route\"\n      isActive={(_match, location) => {\n        return location.pathname === '/new-route'\n      }}\n      className={(isActive) =>\n        cn('text-blue-500', {\n          underline: isActive,\n        })\n      }\n    >\n      Go to new route\n    </NavLink>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NavLink, useLocation } from 'react-router-dom'\n\nexport function SomePage() {\n  const location = useLocation()\n  return (\n    <NavLink\n      to=\"/new-route\"\n      className={() =>\n        cn('text-blue-500', {\n          underline: location.pathname === '/new-route',\n        })\n      }\n    >\n      Go to new route\n    </NavLink>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Combined Customizations (Colors, Logo) in JavaScript/JSX\nDESCRIPTION: Demonstrates applying both custom appearance (colors) and a logo to the `LoginForm` component in `src/LoginPage.jsx`. It imports the `appearance` object and a logo image (`todoLogo`) and passes them to the `appearance` and `logo` props respectively.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/ui.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/LoginPage.jsx\"\nimport { LoginForm } from 'wasp/client/auth'\n\nimport { authAppearance } from './appearance'\nimport todoLogo from './todoLogo.png'\n\nexport function LoginPage() {\n  return <LoginForm appearance={appearance} logo={todoLogo} />\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Up Database and Email Sender in Wasp TypeScript\nDESCRIPTION: Configures database seeds and email sender for the Wasp app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/general/wasp-ts-config.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napp.db({\n  seeds: [\n    { import: 'devSeedSimple', from: '@src/dbSeeds' },\n  ]\n});\n\napp.emailSender({\n  provider: 'SMTP',\n  defaultFrom: { email: 'test@test.com' }\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Query in React (JavaScript)\nDESCRIPTION: This code demonstrates how to use the 'getTasks' query in a React component using JavaScript. It uses the useQuery hook to fetch and display tasks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/05-queries.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport getTasks from '@wasp/queries/getTasks'\nimport { useQuery } from '@wasp/queries'\n\nconst MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n\nconst Task = ({ task }) => {\n  return (\n    <div>\n      <input type=\"checkbox\" id={String(task.id)} checked={task.isDone} />\n      {task.description}\n    </div>\n  )\n}\n\nconst TasksList = ({ tasks }) => {\n  if (!tasks?.length) return <div>No tasks</div>\n\n  return (\n    <div>\n      {tasks.map((task, idx) => (\n        <Task task={task} key={idx} />\n      ))}\n    </div>\n  )\n}\n\nexport default MainPage\n```\n\n----------------------------------------\n\nTITLE: SQLite Database Configuration in Prisma Schema\nDESCRIPTION: Default SQLite database configuration in the Prisma schema file using environment variables for connection.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/backends.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using getEmail in React Component (TypeScript)\nDESCRIPTION: TypeScript implementation of getEmail helper in a React component with proper type definitions for the user object using AuthUser type.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/_get-email.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getEmail, AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const email = getEmail(user)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Model Definition in schema.prisma Syntax\nDESCRIPTION: Shows how to convert an entity from .wasp file to a model in schema.prisma by removing the psl tags and changing 'entity' to 'model'.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_13\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Task {\n  // Stays the same\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Extra Type Information for API (TypeScript)\nDESCRIPTION: Demonstrates how to provide additional type information for API parameters and response in TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/apis.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FooBar } from \"wasp/server/api\";\n\nexport const fooBar: FooBar<\n  { email: string }, // params\n  { answer: number } // response\n> = (req, res, _context) => {\n  console.log(req.params.email);\n  res.json({ answer: 42 });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Forgot Password Page with Wasp Auth UI\nDESCRIPTION: This snippet shows how to create a forgot password page using the ForgotPasswordForm component from Wasp's Auth UI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/ui.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\nroute RequestPasswordResetRoute { path: \"/request-password-reset\", to: RequestPasswordResetPage }\npage RequestPasswordResetPage {\n  component: import { ForgotPasswordPage } from \"@client/ForgotPasswordPage.tsx\"\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ForgotPasswordForm } from '@wasp/auth/forms/ForgotPassword'\n\n// Use it like this\nexport function ForgotPasswordPage() {\n  return <ForgotPasswordForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Sender in Wasp\nDESCRIPTION: Configuration for setting up SendGrid as the email provider for authentication-related emails in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/email.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  // ...\n  // 7. Set up the email sender\n  emailSender: {\n    provider: SendGrid,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variables via Shell Inline Command (Shell)\nDESCRIPTION: Demonstrates how to set an environment variable inline before executing a shell command, here to launch Wasp's development server. This syntax temporarily sets SOME_VAR_NAME for the scope of the wasp start command. Useful for quick overrides or one-off changes during development; takes precedence over .env files.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/env-vars.md#2025-04-22_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nSOME_VAR_NAME=SOMEVALUE wasp start\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Auth Configuration (JavaScript)\nDESCRIPTION: JavaScript implementation of Google authentication configuration and user signup field mappings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/google.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport const userSignupFields = {\n  username: () => 'hardcoded-username',\n  displayName: (data) => data.profile.name,\n}\n\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Server to Railway\nDESCRIPTION: Push and deploy the server component to Railway using the railway CLI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Accessing AuthUser Object with Google Auth in JavaScript\nDESCRIPTION: Example of the AuthUser object structure when a user has signed up with Google auth in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/entities.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = {\n  // User data\n  id: 'cluqs9qyh00007cn73apj4hp7',\n  address: 'Some address',\n\n  // Auth methods specific data\n  identities: {\n    email: null,\n    google: {\n      id: '1117XXXX1301972049448',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Query Action in Wasp (Wasp)\nDESCRIPTION: Declares a Wasp query named 'createFoo' that imports a function from the specified JavaScript file and associates it with the 'Foo' entity. This enables subsequent server/client code to use 'createFoo' through generated APIs. The file @src/actions.js must provide a named export for createFoo.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\nquery createFoo {\n    fn: import { createFoo } from \"@src/actions.js\"\n    entities: [Foo]\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Import Statement\nDESCRIPTION: Import statement for a custom React component used to display images with captions in the blog post.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-01-11-betathon-review.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport ImgWithCaption from './components/ImgWithCaption'\n```\n\n----------------------------------------\n\nTITLE: Mailgun Environment Variables\nDESCRIPTION: Required environment variables for configuring Mailgun email provider.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/email/email.md#2025-04-22_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nMAILGUN_API_KEY=\nMAILGUN_DOMAIN=\nMAILGUN_API_URL=https://api.eu.mailgun.net\n```\n\n----------------------------------------\n\nTITLE: Old Authentication Configuration (Wasp 0.11.X)\nDESCRIPTION: Previous authentication implementation requiring manual User entity setup with auth fields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\nentity User {=psl\n  id                        Int           @id @default(autoincrement())\n  username                  String        @unique\n  password                  String\n  externalAuthAssociations  SocialLogin[]\npsl=}\n\nentity SocialLogin {=psl\n  id          Int       @id @default(autoincrement())\n  provider    String\n  providerId  String\n  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId      Int\n  createdAt   DateTime  @default(now())\n  @@unique([provider, providerId, userId])\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Setting Base Directory for Client in Wasp\nDESCRIPTION: Configuration for setting a base directory for the client, useful when serving the application from a subdirectory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/client-config.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    baseDir: \"/my-app\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Discord User ID from User Object in TypeScript\nDESCRIPTION: Shows how to access a Discord user's identity information from a user object. Specifically demonstrates retrieving the Discord User ID which is typically a large numeric string like '80351110224678912'.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/_discord-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst discordIdentity = user.identities.discord\n\n// Discord User ID for example \"80351110224678912\"\ndiscordIdentity.id\n```\n\n----------------------------------------\n\nTITLE: Defining Queries and Actions in Wasp TypeScript\nDESCRIPTION: Sets up a query for getting tasks and an action for creating tasks in the Wasp app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/general/wasp-ts-config.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napp.query('getTasks', {\n  fn: { import: 'getTasks', from: '@src/queries' },\n  entities: ['Task']\n});\n\napp.action('createTask', {\n  fn: { import: 'createTask', from: '@src/actions' },\n  entities: ['Task']\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Page Component\nDESCRIPTION: React component for the signup page using Wasp's SignupForm component\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-13-how-to-add-auth-with-lucia-to-your-react-nextjs-app.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\nimport { SignupForm } from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\n      <SignupForm />\n      <br />\n      <span>\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Username Validation Function in TypeScript\nDESCRIPTION: This function checks if a username already exists by querying a database. It returns a Promise that resolves to a boolean indicating whether the username exists.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2025-01-22-advanced-react-hook-form-zod-shadcn.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst checkUsername = async (value: string): Promise<boolean> => {\n  return getCustomersWithUsername({ username: value }).then((data) => {\n    return !!data;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint in TypeScript/Wasp\nDESCRIPTION: TypeScript version of the API endpoint declaration in Wasp, demonstrating the same configuration with TypeScript support.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/apis.md#2025-04-22_snippet_14\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar {\n  fn: import { fooBar } from \"@src/apis\",\n  httpRoute: (GET, \"/foo/bar\"),\n  entities: [Task],\n  auth: true,\n  middlewareConfigFn: import { apiMiddleware } from \"@src/apis\"\n}\n```\n\n----------------------------------------\n\nTITLE: React Todo Component Using Direct API Calls in TypeScript\nDESCRIPTION: TypeScript version of the Todo component using direct API calls with proper type annotations, importing Task type from Wasp entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/testing.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type Task } from \"wasp/entities\";\nimport { api } from \"wasp/client/api\";\n\nconst Todo = (_props: {}) => {\n  const [tasks, setTasks] = useState<Task>([]);\n  useEffect(() => {\n    api\n      .get(\"/tasks\")\n      .then((res) => res.json() as Task[])\n      .then((tasks) => setTasks(tasks))\n      .catch((err) => window.alert(err));\n  });\n\n  return (\n    <ul>\n      {tasks &&\n        tasks.map((task) => (\n          <li key={task.id}>\n            <input type=\"checkbox\" value={task.isDone} />\n            {task.description}\n          </li>\n        ))}\n    </ul>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailgun Provider in Wasp\nDESCRIPTION: Demonstrates how to configure the Mailgun provider in the main.wasp file for email sending.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/email.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: Mailgun,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User Entity in Wasp\nDESCRIPTION: Shows how to configure the userEntity in the Wasp configuration file. This is necessary when adding authentication to a Wasp app, specifying which entity represents the user in the application's business logic.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/entities.md#2025-04-22_snippet_14\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailgun Email Provider in Wasp\nDESCRIPTION: Illustrates how to set up the Mailgun email provider in the main.wasp file for sending emails through the Mailgun service.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/email/email.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: Mailgun,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Recurring Jobs in Wasp\nDESCRIPTION: Configuration for a recurring job using cron syntax to schedule regular execution with optional arguments.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/jobs.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\njob mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@src/workers/bar\"\n  },\n  schedule: {\n    cron: \"0 * * * *\",\n    args: {=json { \"job\": \"args\" } json=} // optional\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link Component with Search Query and Hash\nDESCRIPTION: Shows how to use the Link component with search query and hash parameters in a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/links.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Link\n  to=\"/task/:id\"\n  params={{ id: task.id }}\n  search={{ sortBy: 'date' }}\n  hash=\"comments\"\n>\n  {task.description}\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query in JavaScript\nDESCRIPTION: Defines the server-side implementation of the getTasks query in JavaScript, which uses Prisma client to fetch all tasks from the database ordered by ID.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/05-queries.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getTasks = async (args, context) => {\n  return context.entities.Task.findMany({\n    orderBy: { id: 'asc' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Auth Providers in Wasp\nDESCRIPTION: Configuration for enabling multiple authentication providers (email, Google, and GitHub) in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/ui.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  //...\n  auth: {\n    methods: {\n      email: {},\n      google: {},\n      github: {},\n    },\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Password Reset Configuration in Wasp\nDESCRIPTION: Configuration for setting up password reset functionality in Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/email.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\npasswordReset: {\n    clientRoute: PasswordResetRoute,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onAfterLogin Hook\nDESCRIPTION: Example of implementing the onAfterLogin hook for post-login actions including OAuth token management and data synchronization with third-party services.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/auth-hooks.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  ...\n  auth: {\n    ...\n    onAfterLogin: import { onAfterLogin } from \"@src/auth/hooks\",\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const onAfterLogin = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  console.log('user object', user)\n\n  if (oauth) {\n    console.log('accessToken', oauth.tokens.accessToken)\n    console.log('uniqueRequestId', oauth.uniqueRequestId)\n\n    const id = oauth.uniqueRequestId\n    const data = someKindOfStore.get(id)\n    if (data) {\n      console.log('saved data for the ID', data)\n    }\n    someKindOfStore.delete(id)\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OnAfterLoginHook } from 'wasp/server/auth'\n\nexport const onAfterLogin: OnAfterLoginHook = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  console.log('user object', user)\n\n  if (oauth) {\n    console.log('accessToken', oauth.tokens.accessToken)\n    console.log('uniqueRequestId', oauth.uniqueRequestId)\n\n    const id = oauth.uniqueRequestId\n    const data = someKindOfStore.get(id)\n    if (data) {\n      console.log('saved data for the ID', data)\n    }\n    someKindOfStore.delete(id)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Login Implementation\nDESCRIPTION: Example of implementing a custom login page using the login action directly.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/username-and-pass.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport login from '@wasp/auth/login'\n\nimport { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\n\nexport function LoginPage() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState(null)\n  const history = useHistory()\n\n  async function handleSubmit(event) {\n    event.preventDefault()\n    try {\n      await login(username, password)\n      history.push('/')\n    } catch (error) {\n      setError(error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* ... */}\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Wasp\nDESCRIPTION: Configuration snippet showing how to set up multiple authentication methods including username/password, Google, and GitHub auth in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-01-30-open-saas-free-open-source-starter-react-nodejs.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\napp SaaSTemplate {\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n      google: {},\n      gitHub: {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Database Query in Wasp Configuration - Wasp - TypeScript\nDESCRIPTION: This Wasp configuration snippet registers a query named getTasks for use in a TypeScript Wasp project, specifying its implementation and the Task entity dependency. The config ensures Wasp can generate appropriate client and server APIs, with auto-updating in response to Task entity changes. The file extension is omitted as Wasp resolves it automatically.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/05-queries.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\\n\\nquery getTasks {\\n  // Specifies where the implementation for the query function is.\\n  // The path `@src/queries` resolves to `src/queries.ts`.\\n  // No need to specify an extension.\\n  fn: import { getTasks } from \"@src/queries\",\\n  // Tell Wasp that this query reads from the `Task` entity. Wasp will\\n  // automatically update the results of this query when tasks are modified.\\n  entities: [Task]\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Match Model Schema in Prisma\nDESCRIPTION: Initial Prisma schema definition for the Match model containing player details, scoring information, and relationships with other models.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2025-04-02-an-introduction-to-database-migrations.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nmodel Match {\n  id         String   @id @default(uuid())\n  createdAt  DateTime @default(now())\n  isComplete Boolean  @default(false)\n  currentSet Int      @default(1)\n  server     Int      @default(1)\n\n  // Relations\n  createdBy   User   @relation(\"CreatedBy\", fields: [createdById], references: [id])\n  createdById String\n\n  // Player details\n  player1Name String\n  player2Name String\n\n  // Current score (for the ongoing set)\n  player1Points String @default(\"0\")\n  player2Points String @default(\"0\")\n  player1Games  Int    @default(0)\n  player2Games  Int    @default(0)\n\n  // Set history\n  sets Set[]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Auth Configuration in main.wasp\nDESCRIPTION: Shows how to update the auth configuration in the main.wasp file, moving from additionalFields to userSignupFields for email authentication method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_11\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  // ...\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        userSignupFields: import { fields } from \"@src/server/auth/signup.js\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Including User Auth Data in Prisma Queries\nDESCRIPTION: Example of including user authentication data when fetching related entities using Prisma queries.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/entities/entities.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getAllTasks = (async (args, context) => {\n  return context.entities.Task.findMany({\n    orderBy: { id: 'desc' },\n    select: {\n      id: true,\n      title: true,\n      user: {\n        include: {\n          auth: {\n            include: {\n              identities: {\n                select: {\n                  providerName: true,\n                  providerUserId: true,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  })\n}) satisfies tasks.GetAllQuery<{}, {}>\n```\n\n----------------------------------------\n\nTITLE: Updating Wasp Version Configuration\nDESCRIPTION: Shows how to update the Wasp version field in the main configuration file to version 0.15.0.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-14-to-0-15.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link Component with Search Query and Hash\nDESCRIPTION: Demonstrates how to use the Link component with search query and hash parameters.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/links.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Link\n  to=\"/task/:id\"\n  params={{ id: task.id }}\n  search={{ sortBy: 'date' }}\n  hash=\"comments\"\n>\n  {task.description}\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Running the Wasp Migration Script\nDESCRIPTION: Command to run the migration script that converts a Wasp project to the new 0.12.0 structure. It takes the project directory name as an argument.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx wasp-migrate foo\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js with NVM\nDESCRIPTION: This command uses Node Version Manager (NVM) to install Node.js version 18. It's recommended for managing Node.js versions, which is a requirement for Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/introduction/quick-start.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnvm install 18\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind Directives to CSS\nDESCRIPTION: Required Tailwind CSS directives to include base styles, components, and utilities in the main CSS file\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-16-tailwind-feature-announcement.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* rest of content below */\n```\n\n----------------------------------------\n\nTITLE: Setting Google Auth Environment Variables\nDESCRIPTION: This snippet shows the required environment variables for Google Authentication that need to be added to the .env.server file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/google.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nGOOGLE_CLIENT_ID=your-google-client-id\nGOOGLE_CLIENT_SECRET=your-google-client-secret\n```\n\n----------------------------------------\n\nTITLE: Importing Generated Action in Application Code (JavaScript)\nDESCRIPTION: Imports the Wasp-generated 'createFoo' operation from the client-side operations bundle, enabling components or logic to issue the corresponding action to the backend. Requires Wasp to process the .wasp query declaration, and that the build has transpiled these imports.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nimport { createFoo } from 'wasp/client/operations'\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Authentication Providers\nDESCRIPTION: Configuration for enabling multiple authentication providers (email, Google, and Github) in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/ui.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  //...\n  auth: {\n    methods: {\n      email: {},\n      google: {},\n      github: {},\n    },\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Unit Testing Example\nDESCRIPTION: Basic unit test example showing helper function testing with Vitest.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/testing.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport function areThereAnyTasks(tasks) {\n  return tasks.length === 0;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from \"vitest\";\n\nimport { areThereAnyTasks } from \"./helpers\";\n\ntest(\"areThereAnyTasks\", () => {\n  expect(areThereAnyTasks([])).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication UI Components with React and Wasp (JSX)\nDESCRIPTION: Provides example React functional components (Login, Signup, EmailVerification, RequestPasswordReset, PasswordReset) written in JSX for handling user authentication flows. It uses `useState` for managing form state and errors, `useNavigate` for redirection, and functions imported from `wasp/client/auth` to interact with the Wasp backend for tasks like login, signup, email verification, and password reset. Components handle form submissions, display error messages, and manage confirmation states.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/email/create-your-own-ui.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  login,\n  requestPasswordReset,\n  resetPassword,\n  signup,\n  verifyEmail,\n} from 'wasp/client/auth'\n\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\n// This will be shown when the user wants to log in\nexport function Login() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState(null)\n  const navigate = useNavigate()\n\n  async function handleSubmit(event) {\n    event.preventDefault()\n    setError(null)\n    try {\n      await login({ email, password })\n      navigate('/')\n    } catch (error) {\n      setError(error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {error && <p>Error: {error.message}</p>}\n\n      <input\n        type=\"email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        placeholder=\"Email\"\n      />\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        placeholder=\"Password\"\n      />\n      <button type=\"submit\">Log In</button>\n    </form>\n  )\n}\n\n// This will be shown when the user wants to sign up\nexport function Signup() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState(null)\n  const [needsConfirmation, setNeedsConfirmation] = useState(false)\n\n  async function handleSubmit(event) {\n    event.preventDefault()\n    setError(null)\n    try {\n      await signup({ email, password })\n      setNeedsConfirmation(true)\n    } catch (error) {\n      console.error('Error during signup:', error)\n      setError(error)\n    }\n  }\n\n  if (needsConfirmation) {\n    return (\n      <p>\n        Check your email for the confirmation link. If you don't see it, check\n        spam/junk folder.\n      </p>\n    )\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {error && <p>Error: {error.message}</p>}\n\n      <input\n        type=\"email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        placeholder=\"Email\"\n      />\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        placeholder=\"Password\"\n      />\n      <button type=\"submit\">Sign Up</button>\n    </form>\n  )\n}\n\n// This will be shown has clicked on the link in their\n// email to verify their email address\nexport function EmailVerification() {\n  const [error, setError] = useState(null)\n  const navigate = useNavigate()\n\n  async function handleClick() {\n    setError(null)\n    try {\n      // The token is passed as a query parameter\n      const token = new URLSearchParams(window.location.search).get('token')\n      if (!token) throw new Error('Token not found in URL')\n      await verifyEmail({ token })\n      navigate('/')\n    } catch (error) {\n      console.error('Error during email verification:', error)\n      setError(error)\n    }\n  }\n\n  return (\n    <>\n      {error && <p>Error: {error.message}</p>}\n\n      <button onClick={handleClick}>Verify email</button>\n    </>\n  )\n}\n\n// This will be shown when the user wants to reset their password\nexport function RequestPasswordReset() {\n  const [email, setEmail] = useState('')\n  const [error, setError] = useState(null)\n  const [needsConfirmation, setNeedsConfirmation] = useState(false)\n\n  async function handleSubmit(event) {\n    event.preventDefault()\n    setError(null)\n    try {\n      await requestPasswordReset({ email })\n      setNeedsConfirmation(true)\n    } catch (error) {\n      console.error('Error during requesting reset:', error)\n      setError(error)\n    }\n  }\n\n  if (needsConfirmation) {\n    return (\n      <p>\n        Check your email for the confirmation link. If you don't see it, check\n        spam/junk folder.\n      </p>\n    )\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {error && <p>Error: {error.message}</p>}\n\n      <input\n        type=\"email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        placeholder=\"Email\"\n      />\n\n      <button type=\"submit\">Send password reset</button>\n    </form>\n  )\n}\n\n// This will be shown when the user clicks on the link in their\n// email to reset their password\nexport function PasswordReset() {\n  const [error, setError] = useState(null)\n  const [newPassword, setNewPassword] = useState('')\n  const navigate = useNavigate()\n\n  async function handleSubmit(event) {\n    event.preventDefault()\n    setError(null)\n    try {\n      // The token is passed as a query parameter\n      const token = new URLSearchParams(window.location.search).get('token')\n      if (!token) throw new Error('Token not found in URL')\n      await resetPassword({ token, password: newPassword })\n      navigate('/')\n    } catch (error) {\n      console.error('Error during password reset:', error)\n      setError(error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {error && <p>Error: {error.message}</p>}\n\n      <input\n        type=\"password\"\n        autoComplete=\"new-password\"\n        value={newPassword}\n        onChange={(e) => setNewPassword(e.target.value)}\n        placeholder=\"New password\"\n      />\n\n      <button type=\"submit\">Reset password</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Keycloak OAuth Config Function - JavaScript\nDESCRIPTION: This snippet exports the getConfig function, returning the required scopes for the Keycloak OAuth integration. It must be imported by Wasp's main app file and meet the expected interface: returning an object with an array of scope names. This function does not have external dependencies.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/keycloak.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Setup with Bull Queue\nDESCRIPTION: Creating a Bull queue for job processing and scheduling both one-off and recurring jobs in the server setup function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-01-27-waspleau.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Queue from 'bull'\n\nconst queue = new Queue('waspleau', process.env.REDIS_URL || 'redis://127.0.0.1:6379',\n  { defaultJobOptions: { removeOnComplete: true } }\n)\n\nqueue.process('*', async (job) => { ... })\n\nexport default async () => {\n  // To initially populate the queue, we can do:\n  await queue.add({ ... }) // first run, one-off job\n  await queue.add({ ... }, { repeat: { cron: '*/10 * * * *' } }) // recurring job\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Routes in Wasp\nDESCRIPTION: Route and page configuration for authentication-related pages in Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/discord.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Prisma DB Studio CLI (Shell)\nDESCRIPTION: This snippet runs the command to launch the Prisma database studio for Wasp projects, enabling developers to visually inspect and edit database contents. Requires Prisma and Wasp setup in the project; should be executed in the terminal.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/07-auth.md#2025-04-22_snippet_19\n\nLANGUAGE: Shell\nCODE:\n```\nwasp db studio\n```\n\n----------------------------------------\n\nTITLE: Tailwind Plugin Dependencies Configuration\nDESCRIPTION: Configuration for adding Tailwind plugins in Wasp project dependencies.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/css-frameworks.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n  dependencies: [\n    (\"@tailwindcss/forms\", \"^0.5.3\"),\n    (\"@tailwindcss/typography\", \"^0.5.7\"),\n  ],\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Logging into Cloudflare Wrangler CLI using Bash\nDESCRIPTION: Executes the Cloudflare Wrangler CLI login command using `npx`. This command initiates an interactive browser-based login process to authorize the CLI to manage Cloudflare resources. It's a prerequisite for manual deployments using Wrangler.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler login\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Auth in Wasp File (JavaScript)\nDESCRIPTION: This snippet shows how to configure the auth object in the main.wasp file to enable Google authentication for a JavaScript project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/google.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page with Wasp Auth UI\nDESCRIPTION: This snippet shows how to create a login page using the LoginForm component from Wasp's Auth UI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/ui.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { LoginPage } from \"@client/LoginPage.tsx\"\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LoginForm } from '@wasp/auth/forms/Login'\n\n// Use it like this\nexport function LoginPage() {\n  return <LoginForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Wasp App with Authentication\nDESCRIPTION: This snippet defines the main Wasp application configuration with a title and authentication setup using username and password. It establishes the app name, version requirement, and authentication redirect behavior.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/introduction/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp RecipeApp {\n  title: \"My Recipes\",\n  wasp: { version: \"^0.12.0\" },\n  auth: {\n    methods: { usernameAndPassword: {} },\n    onAuthFailedRedirectTo: \"/login\",\n    userEntity: User\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Actions with Entities in Wasp\nDESCRIPTION: Demonstrates how to define Actions in the Wasp configuration file, specifying the implementation function and associated Entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_11\n\nLANGUAGE: wasp\nCODE:\n```\naction createTask {\n  fn: import { createTask } from \"@src/actions.js\",\n  entities: [Task]\n}\n\naction markTaskAsDone {\n  fn: import { markTaskAsDone } from \"@src/actions.js\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Router Application for Path-Specific Middleware\nDESCRIPTION: This conceptual JavaScript snippet demonstrates how Wasp applies path-specific (API namespace) middleware internally. It shows that the middleware stack derived from `fooBarNamespaceMiddlewareFn` is applied using `router.use()` to the base path `/foo/bar`, affecting all routes within that path.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/middleware-config.md#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nrouter.use('/foo/bar', fooBarNamespaceMiddleware)\n```\n\n----------------------------------------\n\nTITLE: Using renderInContext to Render Components in React Tests - JavaScript\nDESCRIPTION: Shows usage of the renderInContext helper from Wasp's client test utilities. This function wraps a given component with QueryClientProvider and Router before rendering, ensuring all needed context for component tests. Designed for React and Vitest test environments.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/testing.md#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport { renderInContext } from \\\"wasp/client/test\\\";\\n\\nrenderInContext(<MainPage />);\n```\n\n----------------------------------------\n\nTITLE: Calling an API from the Client in TypeScript\nDESCRIPTION: Shows how to call a custom API endpoint from the client-side TypeScript code using Wasp's Axios wrapper.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/apis.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useEffect } from \"react\";\nimport { api } from \"wasp/client/api\";\n\nasync function fetchCustomRoute() {\n  const res = await api.get(\"/foo/bar\");\n  console.log(res.data);\n}\n\nexport const Foo = () => {\n  useEffect(() => {\n    fetchCustomRoute();\n  }, []);\n\n  return <>// ...</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Prisma Preview Features in Wasp\nDESCRIPTION: Demonstrates how to enable Prisma preview features within a Wasp project's `schema.prisma`. This involves adding the `previewFeatures` array to the `generator client` block (e.g., `[\"postgresqlExtensions\"]`) and configuring related features in the `datasource` block if needed (e.g., `extensions = [pgvector(map: \"vector\")]`).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/prisma-file.md#2025-04-22_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\\n  provider   = \"postgresql\"\\n  url        = env(\"DATABASE_URL\")\\n  extensions = [pgvector(map: \"vector\")]\\n}\\n\\ngenerator client {\\n  provider        = \"prisma-client-js\"\\n  previewFeatures = [\"postgresqlExtensions\"]\\n}\\n\\n// ...\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Environment Variables in TypeScript (Wasp)\nDESCRIPTION: Shows how to read a server-side environment variable within Node.js (server) TypeScript code using `process.env`. Server variables are suitable for storing secrets since they are not publicly exposed and are accessed at runtime. This example logs the value of `SOME_VAR_NAME`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/env-vars.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconsole.log(process.env.SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Declaring an API with Entity in Wasp\nDESCRIPTION: Example of declaring an API with access to an entity in a Wasp file, enabling Prisma operations on the entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/apis.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar {\n  fn: import { fooBar } from \"@server/apis.js\",\n  entities: [Task],\n  httpRoute: (GET, \"/foo/bar\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Password Migration Action in Wasp\nDESCRIPTION: This Wasp code defines an action named `migratePassword`. It links this action to the `migratePassword` function located in `@src/auth` (either `.js` or `.ts`). Actions in Wasp represent backend operations that can modify data, suitable for handling the password update process initiated by the frontend.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_22\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\naction migratePassword {\n  fn: import { migratePassword } from \"@src/auth\",\n  entities: []\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Auth Routes and Pages in Wasp File (JavaScript)\nDESCRIPTION: This snippet demonstrates how to add the necessary routes and pages for authentication in the main.wasp file for a JavaScript project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/google.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a React Component with Wasp Query Integration\nDESCRIPTION: This TypeScript React component implements the HomePage that displays the user's recipes. It uses Wasp's useQuery hook to fetch data with automatic loading state management and full-stack type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/introduction/introduction.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQuery, getRecipes } from \"wasp/client/operations\";\nimport { type User } from \"wasp/entities\";\n\nexport function HomePage({ user }: { user: User }) {\n  // Due to full-stack type safety, `recipes` will be of type `Recipe[]` here.\n  const { data: recipes, isLoading } = useQuery(getRecipes); // Calling our query here!\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <h1>Recipes</h1>\n      <ul>\n        {recipes ? recipes.map((recipe) => (\n          <li key={recipe.id}>\n            <div>{recipe.title}</div>\n            <div>{recipe.description}</div>\n          </li>\n        )) : 'No recipes defined yet!'}\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email with Wasp Auth in TypeScript React Component\nDESCRIPTION: Demonstrates fetching the user's email via the 'getEmail' utility from Wasp's auth package in a TypeScript React component. The function accesses user objects (with 'auth' and 'identities') and renders the email for each task, returning null if the user did not use email-based signup. 'wasp/auth' package is required.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getEmail } from 'wasp/auth'\n\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {getEmail(task.user)}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Reset Client Route in Wasp App (Wasp DSL)\nDESCRIPTION: Defines the client route for the password reset flow in the Wasp app's configuration, added in main.wasp. This setting tells Wasp where to route users after they follow a password reset link sent to their email. Dependency: PasswordResetRoute should be defined elsewhere in the Wasp config. Impacts password reset experience but needs no direct input from users.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\npasswordReset: {\n    clientRoute: PasswordResetRoute,\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Login Page with Wasp Auth UI in React (JavaScript)\nDESCRIPTION: A React component implementing a login page using Wasp's Auth UI components and React Router for navigation to the signup page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/crud.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function LoginPage() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        placeContent: 'center',\n      }}\n    >\n      <LoginForm />\n      <div>\n        <Link to=\"/signup\">Create an account</Link>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: SMTP Environment Variables Configuration\nDESCRIPTION: Defines the required environment variables for the SMTP email provider in the .env.server file, including host, username, password, and port.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/email/email.md#2025-04-22_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nSMTP_HOST=\nSMTP_USERNAME=\nSMTP_PASSWORD=\nSMTP_PORT=\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailgun Email Provider\nDESCRIPTION: Configuration for the Mailgun email provider in the main.wasp file. This requires API key and domain environment variables.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/email/email.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: Mailgun,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing findUserIdentity with Direct Checks on User Identities in TypeScript/TSX\nDESCRIPTION: This snippet demonstrates how to replace the findUserIdentity helper function with direct checks on the user.identities object in both React components and server-side code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  if (user.identities.username) {\n    // ...\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const createTask: CreateTask<...>  = async (args, context) => {\n    if (context.user.identities.username) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating getTasks Query with Authentication Check in TypeScript\nDESCRIPTION: Implements the getTasks query in TypeScript, adding user authentication check and type annotations. Retrieves tasks only for the authenticated user.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/07-auth.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from '@wasp/entities'\nimport { GetTasks } from '@wasp/queries/types'\nimport HttpError from '@wasp/core/HttpError.js'\n\nexport const getTasks: GetTasks<void, Task[]> = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.findMany({\n    where: { user: { id: context.user.id } },\n    orderBy: { id: 'asc' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Auth Providers in Wasp\nDESCRIPTION: Configuration for enabling multiple authentication providers (email, Google, and Github) in a Wasp application\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/ui.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  //...\n  auth: {\n    methods: {\n      email: {},\n      google: {},\n      github: {},\n    },\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reset Password Form Component\nDESCRIPTION: Implementation of a reset password page using Wasp's ResetPasswordForm component\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/ui.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\nroute PasswordResetRoute { path: \"/password-reset\", to: PasswordResetPage }\npage PasswordResetPage {\n  component: import { ResetPasswordPage } from \"@src/ResetPasswordPage.jsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ResetPasswordForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function ResetPasswordPage() {\n  return <ResetPasswordForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page with Wasp Auth UI in React (TypeScript)\nDESCRIPTION: This TypeScript version of the LoginPage component uses Wasp's Auth UI components to create a login page with a form and a link to the signup page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/crud.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from '@wasp/auth/forms/Login'\nimport { Link } from 'react-router-dom'\n\nexport function LoginPage() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        placeContent: 'center',\n      }}\n    >\n      <LoginForm />\n      <div>\n        <Link to=\"/signup\">Create an account</Link>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma User Model Definition\nDESCRIPTION: Prisma schema defining the User model with required fields for GitHub authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/github.md#2025-04-22_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          Int    @id @default(autoincrement())\n  username    String @unique\n  displayName String\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp App with Keycloak Auth\nDESCRIPTION: Main Wasp application configuration file that sets up Keycloak authentication with user entity and redirect settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/keycloak.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      keycloak: {\n        configFn: import { getConfig } from \"@src/auth/keycloak.js\",\n        userSignupFields: import { userSignupFields } from \"@src/auth/keycloak.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Creation of New Wasp Project - Shell\nDESCRIPTION: This shell session block demonstrates the interactive process of creating a new Wasp project via `wasp new`. It shows user prompts to input the project name and select a starter template. Required dependencies include a functional Wasp installation. Inputs include the project name and template selection; output is textual progress and confirmation of project creation. Limitations: requires user interaction and a connected terminal.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/general/cli.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ wasp new\nEnter the project name (e.g. my-project) ▸ MyFirstProject\nChoose a starter template\n[1] basic (default)\n    Simple starter template with a single page.\n[2] todo-ts\n    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.\n[3] saas\n    Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.\n[4] embeddings\n    Comes with code for generating vector embeddings and performing vector similarity search.\n[5] ai-generated\n    🤖 Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)\n▸ 1\n\n🐝 --- Creating your project from the \"basic\" template... -------------------------\n\nCreated new Wasp app in ./MyFirstProject directory!\n\nTo run your new app, do:\n    cd MyFirstProject\n    wasp db start\n```\n\n----------------------------------------\n\nTITLE: Updating React Router Usage from v5 to v6 (Navigate)\nDESCRIPTION: Replace the Redirect component with Navigate for declarative navigation in React components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-14-to-0-15.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Navigate } from 'react-router-dom'\n\nexport function SomePage() {\n  return (\n    <Navigate to=\"/new-route\" replace />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Mailgun Environment Variables\nDESCRIPTION: Shows the required environment variables for configuring the Mailgun email provider in the .env.server file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/email/email.md#2025-04-22_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\nMAILGUN_API_KEY=\nMAILGUN_DOMAIN=\n```\n\n----------------------------------------\n\nTITLE: Old Project Structure (Wasp 0.11.X)\nDESCRIPTION: File tree structure of a project created with Wasp 0.11.X showing the client/server separation pattern.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── .gitignore\n├── main.wasp\n├── src\n│   ├── client\n│   │   ├── Main.css\n│   │   ├── MainPage.jsx\n│   │   ├── react-app-env.d.ts\n│   │   ├── tsconfig.json\n│   │   └── waspLogo.png\n│   ├── server\n│   │   └── tsconfig.json\n│   ├── shared\n│   │   └── tsconfig.json\n│   └── .waspignore\n└── .wasproot\n```\n\n----------------------------------------\n\nTITLE: Updating OAuth Configuration with configFn (Wasp 0.13.0+) in TypeScript\nDESCRIPTION: Shows the updated `configFn` implementation in a provider-specific file (e.g., `google.ts`) for Wasp 0.13.0+. The `scope` property is renamed to `scopes`, and `clientID` and `clientSecret` are no longer returned by this function as they are handled differently.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getConfig() {\n    return {\n        scopes: ['profile', 'email'],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Signup Fields (Before)\nDESCRIPTION: Shows the previous format for defining user signup fields, using the old profile data structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n    displayName: (data: any) => data.profile.displayName,\n})\n```\n\n----------------------------------------\n\nTITLE: Using getUsername in React Components\nDESCRIPTION: Example of using the getUsername utility function to display usernames in a task list component. The function requires a user object with auth and identities relations included.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/entities/entities.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getUsername } from 'wasp/auth'\n\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {getUsername(task.user)}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating getUsername Helper Access in React Components\nDESCRIPTION: Shows how to replace the getUsername helper with direct access to user.identities.username.id in React components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getUsername, AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const username = getUsername(user)\n  // ...\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const username = user.identities.username?.id\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Wasp Client to Cloudflare Pages\nDESCRIPTION: Command for deploying a built Wasp web client to Cloudflare Pages. This should be run from within the .wasp/build/web-app directory after building the web client. The command uploads the build directory to Cloudflare Pages.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/paas.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnpx wrangler pages deploy ./build --commit-dirty=true --branch=main\n```\n\n----------------------------------------\n\nTITLE: Using Link Component with Catch-All Route\nDESCRIPTION: Shows how to use the Link component with a catch-all route.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/links.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Link to=\"/pages/*\" params={{ '*': 'about' }}>\n  About\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Basic React Component Testing with renderInContext\nDESCRIPTION: Example showing how to use the renderInContext helper function to test React components with proper providers setup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { renderInContext } from \"@wasp/test\";\n\nrenderInContext(<MainPage />);\n```\n\n----------------------------------------\n\nTITLE: Custom Route Setup in Server\nDESCRIPTION: Example of adding a custom route using the setup function in both JavaScript and TypeScript implementations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/server-config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const mySetupFunction = async ({ app }) => {\n  addCustomRoute(app)\n}\n\nfunction addCustomRoute(app) {\n  app.get('/customRoute', (_req, res) => {\n    res.send('I am a custom route')\n  })\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ServerSetupFn } from 'wasp/server'\nimport { Application } from 'express'\n\nexport const mySetupFunction: ServerSetupFn = async ({ app }) => {\n  addCustomRoute(app)\n}\n\nfunction addCustomRoute(app: Application) {\n  app.get('/customRoute', (_req, res) => {\n    res.send('I am a custom route')\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using getFirstProviderUserId Method on User Object in TypeScript/TSX\nDESCRIPTION: This snippet shows how to replace the deprecated getFirstProviderUserId helper function with the new method directly on the user object in both React components and server-side code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const userId = user.getFirstProviderUserId()\n  // ...\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const createTask: CreateTask<...>  = async (args, context) => {\n    const userId = user.getFirstProviderUserId()\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Sender in Wasp\nDESCRIPTION: Demonstrates how to configure the email sender in the main.wasp file, including setting the provider and default sender details.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/email.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: <provider>,\n    defaultFrom: {\n      name: \"Example\",\n      email: \"hello@itsme.com\"\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Setup Function - JavaScript (src\\/myClientSetupCode.js)\nDESCRIPTION: Defines an asynchronous setup function to be run on client startup in JavaScript. Logs a message to the console every hour using setInterval. No external dependencies; input/output is side effect only. Ensures simple client-side initialization or monitoring logic can be injected.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/client-config.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nexport default async function mySetupFunction() {\n  let count = 1\n  setInterval(\n    () => console.log(`You have been online for ${count++} hours.`),\n    1000 * 60 * 60\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Google Auth Configuration in main.wasp\nDESCRIPTION: This snippet shows how to update the Google auth configuration in the main.wasp file to use the new userSignupFields instead of getUserFieldsFn.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  // ...\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {\n        userSignupFields: import { fields } from \"@src/server/auth/google.js\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Complete schema.prisma for SQLite with Sample Entities\nDESCRIPTION: A complete schema.prisma file for SQLite, including datasource, generator, and sample User and Task entities with their relationships.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_10\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\n// There are some example entities, you should move your entities here\n// highlight-start\nmodel User {\n  id       Int @id @default(autoincrement())\n  tasks    Task[]\n}\n\nmodel Task {\n  id          Int @id @default(autoincrement())\n  description String\n  isDone      Boolean\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\n}\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Defining Server Environment Variables Validation in JavaScript\nDESCRIPTION: Creates a validation schema for server environment variables that requires STRIPE_API_KEY to be provided as a string.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/env-vars.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as z from 'zod'\n\nimport { defineEnvValidationSchema } from 'wasp/env'\n\nexport const envValidationSchema = defineEnvValidationSchema(\n  z.object({\n    STRIPE_API_KEY: z.string({\n      required_error: 'STRIPE_API_KEY is required.',\n    }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring onBeforeOAuthRedirect Hook in Wasp\nDESCRIPTION: Configuration for the onBeforeOAuthRedirect hook in the main Wasp file. This hook executes before OAuth redirect to save request data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/auth-hooks.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  ...\n  auth: {\n    ...\n    onBeforeOAuthRedirect: import { onBeforeOAuthRedirect } from \"@src/auth/hooks\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Verification Component in React/TypeScript\nDESCRIPTION: This component handles email verification by submitting a token received via URL. It manages error states and navigates to the login page upon successful verification.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/email/create-your-own-ui.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport function VerifyEmail() {\n  const [error, setError] = useState<Error | null>(null)\n  const navigate = useNavigate()\n\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    setError(null)\n    try {\n      // The token is passed as a query parameter\n      const token = new URLSearchParams(window.location.search).get('token')\n      if (!token) throw new Error('Token not found in URL')\n      await verifyEmail({ token })\n      navigate('/login')\n    } catch (error: unknown) {\n      console.error('Error during email verification:', error)\n      setError(error as Error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {error && <p>Error: {error.message}</p>}\n      <button type=\"submit\">Send password reset</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Forgot Password Route in Wasp\nDESCRIPTION: This code shows how to create a route for the forgot password page in the main.wasp file. It defines the route path and links it to a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\nroute RequestPasswordResetRoute { path: \"/request-password-reset\", to: RequestPasswordResetPage }\npage RequestPasswordResetPage {\n  component: import { ForgotPasswordPage } from \"@src/ForgotPasswordPage.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Endpoint in TypeScript\nDESCRIPTION: TypeScript implementation of the API endpoint with proper type definitions and Express request/response handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/apis.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FooBar } from \"wasp/server/api\";\n\nexport const fooBar: FooBar = (req, res, context) => {\n  res.set(\"Access-Control-Allow-Origin\", \"*\");\n  res.json({ msg: `Hello, ${context.user ? \"registered user\" : \"stranger\"}!` });\n};\n```\n\n----------------------------------------\n\nTITLE: Including User Auth Data with Related Entities in JavaScript\nDESCRIPTION: Example of how to include user authentication data when fetching related entities in JavaScript using Prisma's include and select options while being mindful of sensitive data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getAllTasks = async (args, context) => {\n  return context.entities.Task.findMany({\n    orderBy: { id: 'desc' },\n    select: {\n      id: true,\n      title: true,\n      user: {\n        include: {\n          auth: {\n            include: {\n              identities: {\n                // Including only the `providerName` and `providerUserId` fields\n                select: {\n                  providerName: true,\n                  providerUserId: true,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeSignup Hook (JavaScript)\nDESCRIPTION: Example implementation of onBeforeSignup hook in JavaScript, showing user count validation and email restriction logic.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/auth-hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const onBeforeSignup = async ({ providerId, prisma, req }) => {\n  const count = await prisma.user.count()\n  console.log('number of users before', count)\n  console.log('provider name', providerId.providerName)\n  console.log('provider user ID', providerId.providerUserId)\n\n  if (count > 100) {\n    throw new HttpError(403, 'Too many users')\n  }\n\n  if (\n    providerId.providerName === 'email' &&\n    providerId.providerUserId === 'some@email.com'\n  ) {\n    throw new HttpError(403, 'This email is not allowed')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth in Wasp Main File (JavaScript) - wasp\nDESCRIPTION: Defines the core structure of the Wasp application with GitHub as an OAuth provider. The configuration imports user-signup and provider-scope logic via JavaScript modules. Requires the '@src/auth/github.js' file providing 'getConfig' and 'userSignupFields', and assumes a defined User entity. Inputs are static settings and import references; output is a configured auth flow. The snippet uses Wasp syntax and must be placed in 'main.wasp'.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/github.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/github.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/github.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\nentity User {=psl\n    id                        Int     @id @default(autoincrement())\n    username                  String  @unique\n    displayName               String\npsl=}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using Entity in TypeScript API Implementation\nDESCRIPTION: TypeScript implementation of an API that uses the Prisma API to access an entity via the context object with proper typing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/apis.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FooBar } from \"@wasp/apis/types\";\n\nexport const fooBar: FooBar = (req, res, context) => {\n  res.json({ count: await context.entities.Task.count() });\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Wasp File Import Paths\nDESCRIPTION: Example of updating external import paths in the Wasp file to match the new structure, changing @client to @src/client and @server to @src/server.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\npage LoginPage {\n  // highlight-next-line\n  // This previously resolved to src/client/LoginPage.js\n  // highlight-next-line\n  component: import Login from \"@client/LoginPage\"\n}\n\n// ...\n\nquery getTasks {\n  // highlight-next-line\n  // This previously resolved to src/server/queries.js\n  // highlight-next-line\n  fn: import { getTasks } from \"@server/queries.js\",\n}\n```\n\nLANGUAGE: js\nCODE:\n```\npage LoginPage {\n  // highlight-next-line\n  // This now resolves to src/client/LoginPage.js\n  // highlight-next-line\n  component: import Login from \"@src/client/LoginPage\"\n}\n\n// ...\n\nquery getTasks {\n  // highlight-next-line\n  // This now resolves to src/server/queries.js\n  // highlight-next-line\n  fn: import { getTasks } from \"@src/server/queries.js\",\n}\n```\n\n----------------------------------------\n\nTITLE: Using Social Auth UI Components in JavaScript\nDESCRIPTION: Implementation of a login page with pre-built social authentication buttons and custom sign-in links for Google and GitHub.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  GoogleSignInButton,\n  googleSignInUrl,\n  GitHubSignInButton,\n  gitHubSignInUrl,\n} from 'wasp/client/auth'\n\nexport const LoginPage = () => {\n  return (\n    <>\n      <GoogleSignInButton />\n      <GitHubSignInButton />\n      {/* or */}\n      <a href={googleSignInUrl}>Sign in with Google</a>\n      <a href={gitHubSignInUrl}>Sign in with GitHub</a>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Converting JavaScript to TypeScript in Wasp\nDESCRIPTION: Commands to start a Wasp application and rename a JavaScript file to TypeScript. This demonstrates how simple it is to migrate files from JS to TS in Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-29-typescript-feature-announcement.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwasp start\nmv src/client/MainPage.jsx src/client/MainPage.tsx\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables with REACT_APP_ Prefix for Wasp Client\nDESCRIPTION: Example of how to properly format client environment variables in Wasp projects. Client environment variables must be prefixed with REACT_APP_ for security reasons to prevent accidental exposure of sensitive information.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/_clientEnvVarsNote.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nREACT_APP_SOME_VAR_NAME=...\n```\n\n----------------------------------------\n\nTITLE: Migrating from useHistory to useNavigate\nDESCRIPTION: Shows how to update route navigation from React Router 5's useHistory hook to React Router 6's useNavigate hook.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-14-to-0-15.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useHistory } from 'react-router-dom'\n\nexport function SomePage() {\n  const history = useHistory()\n  const handleClick = () => {\n    history.push('/new-route')\n  }\n  return <button onClick={handleClick}>Go to new route</button>\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNavigate } from 'react-router-dom'\n\nexport function SomePage() {\n  const navigate = useNavigate()\n  const handleClick = () => {\n    navigate('/new-route')\n  }\n  return <button onClick={handleClick}>Go to new route</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Prisma Studio with Wasp CLI (Shell)\nDESCRIPTION: This command runs `wasp db studio` to launch the Prisma Studio web interface for the project's database. It opens a browser-based interface where you can inspect and edit entities such as the `Task` model. There are no parameters, but the database and migrations should be set up prior to using this command. Helps developers verify models and interact directly with the underlying data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/04-entities.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nwasp db studio\n```\n\n----------------------------------------\n\nTITLE: Entity Usage in API Endpoints\nDESCRIPTION: Demonstrates how to use Prisma entities within API endpoints for database operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/apis.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const fooBar: FooBar = (req, res, context) => {\n  res.json({ count: await context.entities.Task.count() });\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Static Images in React TypeScript\nDESCRIPTION: TypeScript version of importing and using an image asset in a React component. Functionally identical to the JavaScript version but with TypeScript syntax.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/static-assets.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport imgUrl from './img.png'\n\nfunction App() {\n  return <img src={imgUrl} alt=\"img\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Routes and Pages in Wasp File\nDESCRIPTION: This snippet demonstrates how to define the necessary authentication routes and pages in the Wasp file. It includes a login route and page component import.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/keycloak.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Datasource in schema.prisma\nDESCRIPTION: Defines the datasource block for PostgreSQL in the schema.prisma file, specifying the database provider and connection URL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signup in JavaScript\nDESCRIPTION: JavaScript implementation of a custom signup action that creates a user with username/password authentication. Uses helper functions from Wasp's auth module to handle provider ID creation, password hashing, and user creation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/entities.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  createUser,\n} from 'wasp/server/auth'\n\nexport const signup = async (args, { entities: { User } }) => {\n  try {\n    // Provider ID is a combination of the provider name and the provider user ID\n    // And it is used to uniquely identify the user in your app\n    const providerId = createProviderId('username', args.username)\n    // sanitizeAndSerializeProviderData hashes the password and returns a JSON string\n    const providerData = await sanitizeAndSerializeProviderData({\n      hashedPassword: args.password,\n    })\n\n    await createUser(\n      providerId,\n      providerData,\n      // Any additional data you want to store on the User entity\n      {}\n    )\n\n    // This is equivalent to:\n    // await User.create({\n    //   data: {\n    //     auth: {\n    //       create: {\n    //         identities: {\n    //             create: {\n    //                 providerName: 'username',\n    //                 providerUserId: args.username\n    //                 providerData,\n    //             },\n    //         },\n    //       }\n    //     },\n    //   }\n    // })\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Setup Function in JavaScript\nDESCRIPTION: This snippet shows how to implement a setup function in JavaScript for a Wasp application. The function logs a message every hour to demonstrate running custom code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/client-config.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function mySetupFunction() {\n  let count = 1\n  setInterval(\n    () => console.log(`You have been online for ${count++} hours.`),\n    1000 * 60 * 60\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Database Seed Functions in Wasp - Wasp\nDESCRIPTION: Shows how to attach multiple JavaScript seed functions to a Wasp application via the 'seeds' array in the configuration. Each entry is an import statement referencing a named function from a local DB seeds module. Dependencies: exported async seed functions in the referenced module, Wasp CLI. Inputs: array of imports. This enables automated or interactive seeding from the CLI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/backends.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    // ...\n    seeds: [\n      import { devSeedSimple } from \"@src/dbSeeds.js\",\n      import { prodSeed } from \"@src/dbSeeds.js\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SMTP Provider Configuration\nDESCRIPTION: Configuration for the SMTP email provider and its required environment variables.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/email/email.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: SMTP,\n  }\n}\n```\n\nLANGUAGE: properties\nCODE:\n```\nSMTP_HOST=\nSMTP_USERNAME=\nSMTP_PASSWORD=\nSMTP_PORT=\n```\n\n----------------------------------------\n\nTITLE: Mapping Discord Profile to User Fields - JavaScript\nDESCRIPTION: Implements field mapping to extract username and avatar URL from the returned Discord profile during signup. Also defines a getConfig function specifying required OAuth scopes. These helpers must be referenced in the Wasp auth configuration and require no external dependencies beyond the structure of the Discord profile object. Input is raw Discord profile data; output is a mapped user field object or configuration dict.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/discord.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const userSignupFields = {\n  username: (data) => data.profile.global_name,\n  avatarUrl: (data) => data.profile.avatar,\n};\n\nexport function getConfig() {\n  return {\n    scopes: ['identify'],\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Base Path in Vite\nDESCRIPTION: Example of how to configure a custom base path for serving the client application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/custom-vite-config.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  base: '/my-app/',\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  base: '/my-app/',\n})\n```\n\n----------------------------------------\n\nTITLE: Listing Available Fly.io Regions\nDESCRIPTION: Command to list all available regions for Fly.io deployments. This helps you choose the best region for your application based on your target audience's location.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/cli.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nflyctl platform regions\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Seeds in Wasp (JavaScript)\nDESCRIPTION: Shows how to configure database seeds in the main.wasp file for a JavaScript project. It imports a seed function from an external file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/databases.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  db: {\n    seeds: [\n      import devSeed from \"@src/dbSeeds.js\"\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a User Entity in Wasp\nDESCRIPTION: Defines a User entity in the main.wasp file with an auto-incrementing ID field. This entity will be used for user authentication and establishing ownership of tasks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/07-auth.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\nentity User {=psl\n    id       Int    @id @default(autoincrement())\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Prisma User Model Definition\nDESCRIPTION: Prisma schema defining the User model with custom fields\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/overview.md#2025-04-22_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id      Int     @id @default(autoincrement())\n  address String?\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Backend Query with Prisma in Wasp\nDESCRIPTION: This code demonstrates how to implement a backend query using Prisma ORM within a Wasp application. It fetches all phrases along with their translations, showcasing how to use the context parameter to access Prisma entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-03-08-building-a-full-stack-app-supabase-vs-wasp.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nexport async function getAllPhrases(args, context) {\n    return context.entities.Phrase.findMany({\n        include: {\n            translations: true\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Releasing Docker Image on Heroku - Shell\nDESCRIPTION: This command releases the previously pushed Docker image, starting the web process on the Heroku app. The '<app-name>' should correspond to the Heroku target app. Running this command makes the new build available and active.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/manually.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nheroku container:release --app <app-name> web\n\n```\n\n----------------------------------------\n\nTITLE: TypeScript Unit Test Example for Helper Function\nDESCRIPTION: TypeScript version of the unit test for the areThereAnyTasks helper function using Vitest.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/testing.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from \"vitest\";\n\nimport { areThereAnyTasks } from \"./helpers\";\n\ntest(\"areThereAnyTasks\", () => {\n  expect(areThereAnyTasks([])).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Wasp App Configuration\nDESCRIPTION: Basic example of a Wasp app declaration showing version specification, title setting, and custom head tag inclusion.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/customizing-app.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  wasp: {\n    version: \"^0.12.0\"\n  },\n  title: \"ToDo App\",\n  head: [\n    \"<link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\\\" />\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Options with PostgreSQL Extensions\nDESCRIPTION: Detailed example of configuring Prisma options in a Wasp application, including enabling PostgreSQL extensions like hstore, pg_trgm, and postgis. Shows the structure of the prisma field within the app.db configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/backends.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    // ...\n    prisma: {\n      clientPreviewFeatures: [\"postgresqlExtensions\"],\n      dbExtensions: [\n        { name: \"hstore\", schema: \"myHstoreSchema\" },\n        { name: \"pg_trgm\" },\n        { name: \"postgis\", version: \"2.1\" },\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Login Page with Wasp Auth UI (JavaScript)\nDESCRIPTION: This snippet demonstrates creating a login page using Wasp's Auth UI components in a React component. It includes a login form and a link to the signup page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/crud.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function LoginPage() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        placeContent: 'center',\n      }}\n    >\n      <LoginForm />\n      <div>\n        <Link to=\"/signup\">Create an account</Link>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring CRUD Operations in Wasp\nDESCRIPTION: Basic CRUD declaration for a Task entity in Wasp, including default implementations for get, getAll, create, update, and delete operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/crud.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\ncrud Tasks { // crud name here is \"Tasks\"\n  entity: Task,\n  operations: {\n    get: {},\n    getAll: {},\n    create: {},\n    update: {},\n    delete: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Path-Based Middleware Implementation in TypeScript\nDESCRIPTION: TypeScript implementation of a path-based middleware function with proper type definitions that adds a custom middleware to all routes under a specific path.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/middleware-config.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { type MiddlewareConfigFn } from 'wasp/server'\n\nexport const fooBarNamespaceMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {\n  const customMiddleware: express.RequestHandler = (_req, _res, next) => {\n    console.log('fooBarNamespaceMiddlewareFn: custom middleware')\n    next()\n  }\n\n  middlewareConfig.set('custom.middleware', customMiddleware)\n\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Wasp Project Structure (TypeScript)\nDESCRIPTION: Shows the file structure of a Wasp project configured for TypeScript. It highlights the renamed `src/MainPage.tsx` file, which is the primary modification needed from the default JavaScript setup. Other key files like `main.wasp` and `schema.prisma` remain the same.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/02-project-structure.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.\n├── .gitignore\n├── main.wasp          # Your Wasp code goes here.\n├── schema.prisma      # Your Prisma schema goes here.\n├── package.json       # Your dependencies and project info go here.\n├── public             # Your static files (e.g., images, favicon) go here.\n├── src                # Your source code (TS/JS/CSS/HTML) goes here.\n│   ├── Main.css\n// highlight-next-line\n│   ├── MainPage.tsx   # Renamed from MainPage.jsx\n│   ├── vite-env.d.ts\n│   └── waspLogo.png\n├── tsconfig.json\n├── vite.config.ts\n├── .waspignore\n└── .wasproot\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Routes and Pages in Wasp\nDESCRIPTION: This snippet defines the login route and page in the Wasp file. It maps the /login path to the LoginPage component that will be imported from a client-side file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/github.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\n// 6. Define the routes\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@client/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Email Migration Handler Implementation in TypeScript\nDESCRIPTION: Implements email authentication migration logic, handling user data conversion and verification status.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prisma } from \"wasp/server\";\nimport { type ProviderName, type EmailProviderData } from \"wasp/server/auth\";\nimport { MigrateEmail } from \"wasp/server/api\";\n\nexport const migrateEmailHandler: MigrateEmail =\n  async (_req, res) => {\n    const result = await migrateEmailAuth();\n\n    res.status(200).json({ message: \"Migrated users to the new auth\", result });\n  };\n\nasync function migrateEmailAuth(): Promise<{\n  numUsersAlreadyMigrated: number;\n  numUsersNotUsingThisAuthMethod: number;\n  numUsersMigratedSuccessfully: number;\n}> {\n  const users = await prisma.user.findMany({\n    include: {\n      auth: true,\n    },\n  });\n\n  const result = {\n    numUsersAlreadyMigrated: 0,\n    numUsersNotUsingThisAuthMethod: 0,\n    numUsersMigratedSuccessfully: 0,\n  };\n\n  for (const user of users) {\n    if (user.auth) {\n      result.numUsersAlreadyMigrated++;\n      console.log(\"Skipping user (already migrated) with id:\", user.id);\n      continue;\n    }\n\n    if (!user.email || !user.password) {\n      result.numUsersNotUsingThisAuthMethod++;\n      console.log(\"Skipping user (not using email auth) with id:\", user.id);\n      continue;\n    }\n\n    const providerData: EmailProviderData = {\n      isEmailVerified: user.isEmailVerified,\n      emailVerificationSentAt:\n        user.emailVerificationSentAt?.toISOString() ?? null,\n      passwordResetSentAt: user.passwordResetSentAt?.toISOString() ?? null,\n      hashedPassword: user.password,\n    };\n    const providerName: ProviderName = \"email\";\n\n    await prisma.auth.create({\n      data: {\n        identities: {\n          create: {\n            providerName,\n            providerUserId: user.email,\n            providerData: JSON.stringify(providerData),\n          },\n        },\n        user: {\n          connect: {\n            id: user.id,\n          },\n        },\n      },\n    });\n    result.numUsersMigratedSuccessfully++;\n  }\n\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Query in Wasp\nDESCRIPTION: A basic Wasp query declaration that imports a function from a JavaScript file and specifies the Foo entity for use within the query.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/actions.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\nquery createFoo {\n    fn: import { createFoo } from \"@src/actions.js\"\n    entities: [Foo]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub OAuth Provider Config (TypeScript)\nDESCRIPTION: Provides a TypeScript implementation of the provider config function, exporting an object containing the desired OAuth scopes. The function can be further adapted to include more advanced provider config as needed, and is consumed via import in the Wasp authentication mechanism.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/github.md#2025-04-22_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nexport function getConfig() {\n  return {\n    scopes: [],\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Google Auth Scopes with getConfig (JavaScript)\nDESCRIPTION: This JavaScript snippet shows the implementation of the `getConfig` function, intended to be imported into the `main.wasp` configuration. It exports a function that returns an object containing an array of strings specifying the Google OAuth scopes ('profile', 'email') required by the application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/google.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Job with Types in TypeScript\nDESCRIPTION: Example of importing a job with its type definition in a TypeScript file for type-safe usage.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/jobs.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mySpecialJob, type MySpecialJob } from 'wasp/server/jobs'\n```\n\n----------------------------------------\n\nTITLE: User Signup Fields Implementation in JavaScript\nDESCRIPTION: JavaScript implementation of custom signup field validation logic\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/overview.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: VSCode Snippets Configuration\nDESCRIPTION: JSON configuration defining code snippets for Wasp features like pages, queries, actions, and entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-12-01-beta-ide-improvements.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nhttps://github.com/wasp-lang/vscode-wasp/blob/main/snippets/wasp.json\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Configuration in Wasp\nDESCRIPTION: Shows how to import and access the client configuration object, which contains the apiUrl field that can be set via REACT_APP_API_URL environment variable.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/accessing-app-config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { config } from 'wasp/client'\n\nconsole.log(config.apiUrl)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Redux Provider in Root Component\nDESCRIPTION: Demonstrates how to set up a Redux Provider in the root component of a React application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/client-config.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root({ children }) {\n  return <Provider store={store}>{children}</Provider>\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Job Declaration and Type - TypeScript\nDESCRIPTION: Shows how to import a job and its associated TypeScript type for type-safe function signatures or manipulation. Enables both job invocation and strict type-checking in code. The job and its generic type must be previously declared in Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/jobs.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport { mySpecialJob, type MySpecialJob } from 'wasp/server/jobs'\n```\n\n----------------------------------------\n\nTITLE: Updating Prisma Schema Score Field\nDESCRIPTION: Modification of the Prisma schema to make the score field required by removing the nullable operator.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2025-04-02-an-introduction-to-database-migrations.md#2025-04-22_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n-   score Json?\n+   score Json\n```\n\n----------------------------------------\n\nTITLE: Declaring a Job in Wasp\nDESCRIPTION: This snippet demonstrates how to declare a job named 'mySpecialJob' in a Wasp file. It includes configuration for the executor, perform function, scheduling, and associated entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/jobs.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\njob mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@src/workers/bar\",\n    executorOptions: {\n      pgBoss: {=json { \"retryLimit\": 1 } json=}\n    }\n  },\n  schedule: {\n    cron: \"*/5 * * * *\",\n    args: {=json { \"foo\": \"bar\" } json=},\n    executorOptions: {\n      pgBoss: {=json { \"retryLimit\": 0 } json=}\n    }\n  },\n  entities: [Task],\n}\n```\n\n----------------------------------------\n\nTITLE: Email Auth Fields Definition Before Migration\nDESCRIPTION: Implementation of additional signup fields validation before migration using defineAdditionalSignupFields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineAdditionalSignupFields } from '@wasp/auth/index.js'\n\nexport const fields = defineAdditionalSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Login Component in React\nDESCRIPTION: React component for handling user login with username and password. Utilizes Wasp's auth login function with navigation on successful login and error handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/username-and-pass/create-your-own-ui.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { login } from 'wasp/client/auth'\n\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\nexport function Login() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState(null)\n  const navigate = useNavigate()\n\n  async function handleSubmit(event) {\n    event.preventDefault()\n    setError(null)\n    try {\n      await login({ username, password })\n      navigate('/')\n    } catch (error) {\n      setError(error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {error && <p>Error: {error.message}</p>}\n\n      <input\n        type=\"text\"\n        autoComplete=\"username\"\n        value={username}\n        onChange={(e) => setUsername(e.target.value)}\n        placeholder=\"Username\"\n      />\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        placeholder=\"Password\"\n      />\n      <button type=\"submit\">Sign Up</button>\n    </form>\n  )\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { login } from 'wasp/client/auth'\n\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\nexport function Login() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState<Error | null>(null)\n  const navigate = useNavigate()\n\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    setError(null)\n    try {\n      await login({ username, password })\n      navigate('/')\n    } catch (error: unknown) {\n      setError(error as Error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {error && <p>Error: {error.message}</p>}\n\n      <input\n        type=\"text\"\n        autoComplete=\"username\"\n        value={username}\n        onChange={(e) => setUsername(e.target.value)}\n        placeholder=\"Username\"\n      />\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        placeholder=\"Password\"\n      />\n      <button type=\"submit\">Sign Up</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Auth UI Colors in JavaScript\nDESCRIPTION: Defines custom color tokens for the authentication UI theme using Stitches, including brand colors and button text colors.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/ui.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const authAppearance = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Typed React Component Using Wasp API Client (TSX)\nDESCRIPTION: Defines a typed React component `Todo` in TSX (`src/Todo.tsx`). This component fetches data from the `/tasks` API endpoint using `wasp/client/api`, ensuring type safety for state (`Task[]`) and API responses.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/testing.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type Task } from \"wasp/entities\";\nimport { api } from \"wasp/client/api\";\n\nconst Todo = (_props: {}) => {\n  const [tasks, setTasks] = useState<Task>([]);\n  useEffect(() => {\n    api\n      .get(\"/tasks\")\n      .then((res) => res.json() as Task[])\n      .then((tasks) => setTasks(tasks))\n      .catch((err) => window.alert(err));\n  });\n\n  return (\n    <ul>\n      {tasks &&\n        tasks.map((task) => (\n          <li key={task.id}>\n            <input type=\"checkbox\" value={task.isDone} />\n            {task.description}\n          </li>\n        ))}\n    </ul>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Global Middleware in Wasp Configuration\nDESCRIPTION: Example of how to reference a custom middleware configuration function in the Wasp configuration file. This applies to all operations and APIs.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/middleware-config.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  server: {\n    middlewareConfigFn: import { serverMiddlewareFn } from \"@src/serverSetup\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Meme Generator Home Page Component in React\nDESCRIPTION: This is the full implementation of the Home page component for the meme generator app. It includes form handling for meme generation, data fetching with useQuery, conditional rendering for loading states, and displaying generated memes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, FormEventHandler } from 'react';\nimport { useQuery } from '@wasp/queries';\nimport createMeme from '@wasp/actions/createMeme';\nimport getAllMemes from '@wasp/queries/getAllMemes';\nimport useAuth from '@wasp/auth/useAuth';\nimport { useHistory } from 'react-router-dom';\nimport {\n  AiOutlinePlusCircle,\n  AiOutlineMinusCircle,\n  AiOutlineRobot,\n} from 'react-icons/ai';\n\nexport function HomePage() {\n  const [topics, setTopics] = useState(['']);\n  const [audience, setAudience] = useState('');\n  const [isMemeGenerating, setIsMemeGenerating] = useState(false);\n\n  const history = useHistory();\n  const { data: user } = useAuth();\n  const { data: memes, isLoading, error } = useQuery(getAllMemes);\n\n  const handleGenerateMeme: FormEventHandler<HTMLFormElement> = async (e) => {\n    e.preventDefault();\n    if (!user) {\n      history.push('/login');\n      return;\n    }\n    if (topics.join('').trim().length === 0 || audience.length === 0) {\n      alert('Please provide topic and audience');\n      return;\n    }\n    try {\n      setIsMemeGenerating(true);\n      await createMeme({ topics, audience });\n    } catch (error: any) {\n      alert('Error generating meme: ' + error.message);\n    } finally {\n      setIsMemeGenerating(false);\n    }\n  };\n\n  const handleDeleteMeme = async (id: string) => {\n    //...\n  };\n\n  if (isLoading) return 'Loading...';\n  if (error) return 'Error: ' + error;\n\n  return (\n    <div className='p-4'>\n      <h1 className='text-3xl font-bold mb-4'>Welcome to Memerator!</h1>\n      <p className='mb-4'>Start generating meme ideas by providing topics and intended audience.</p>\n      <form onSubmit={handleGenerateMeme}>\n        <div className='mb-4 max-w-[500px]'>\n          <label htmlFor='topics' className='block font-bold mb-2'>\n            Topics:\n          </label>\n          {topics.map((topic, index) => (\n            <input\n              key={index}\n              type='text'\n              id='topics'\n              value={topic}\n              onChange={(e) => {\n                const updatedTopics = [...topics];\n                updatedTopics[index] = e.target.value;\n                setTopics(updatedTopics);\n              }}\n              className='p-1 mr-1 mb-1 border rounded text-lg focus:outline-none focus:ring-2 focus:ring-primary-600 focus:border-transparent'\n            />\n          ))}\n          <div className='flex items-center my-2 gap-1'>\n            <button\n              type='button'\n              onClick={() => topics.length < 3 && setTopics([...topics, ''])}\n              className='flex items-center gap-1 bg-primary-200 hover:bg-primary-300 border-2 text-black text-xs py-1 px-2 rounded'\n            >\n              <AiOutlinePlusCircle /> Add Topic\n            </button>\n            {topics.length > 1 && (\n              <button\n                onClick={() => setTopics(topics.slice(0, -1))}\n                className='flex items-center gap-1 bg-red-500 hover:bg-red-700 border-2 text-white text-xs py-1 px-2 rounded'\n              >\n                <AiOutlineMinusCircle /> Remove Topic\n              </button>\n            )}\n          </div>\n        </div>\n        <div className='mb-4'>\n          <label htmlFor='audience' className='block font-bold mb-2'>\n            Intended Audience:\n          </label>\n          <input\n            type='text'\n            id='audience'\n            value={audience}\n            onChange={(e) => setAudience(e.target.value)}\n            className='p-1 border rounded text-lg focus:outline-none focus:ring-2 focus:ring-primary-600 focus:border-transparent'\n          />\n        </div>\n        <button\n          type='submit'\n          className={`flex items-center gap-1 bg-primary-200 hover:bg-primary-300 border-2 text-black text-sm font-bold py-1 px-2 rounded ${\n            isMemeGenerating ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'\n          } $}`}\n        >\n          <AiOutlineRobot />\n          {!isMemeGenerating ? 'Generate Meme' : 'Generating...'}\n        </button>\n      </form>\n\n      {!!memes && memes.length > 0 ? (\n        memes.map((memeIdea) => (\n          <div key={memeIdea.id} className='mt-4 p-4 bg-gray-100 rounded-lg'>\n            <img src={memeIdea.url} width='500px' />\n            <div className='flex flex-col items-start mt-2'>\n              <div>\n                <span className='text-sm text-gray-700'>Topics: </span>\n                <span className='text-sm italic text-gray-500'>{memeIdea.topics}</span>\n              </div>\n              <div>\n                <span className='text-sm text-gray-700'>Audience: </span>\n                <span className='text-sm italic text-gray-500'>{memeIdea.audience}</span>\n              </div>\n            </div>\n            {/* TODO: implement edit and delete meme features */}\n          </div>\n        ))\n      ) : (\n        <div className='flex justify-center mt-5'> :( no memes found</div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure - Before Migration\nDESCRIPTION: Example of typical source directory structure before migration, showing the separation of client and server code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc\n│\n├── client\n│   ├── Dashboard.tsx\n│   ├── Login.tsx\n│   ├── MainPage.tsx\n│   ├── Register.tsx\n│   ├── Task.css\n│   ├── TaskLisk.tsx\n│   ├── Task.tsx\n│   └── User.tsx\n├── server\n│   ├── taskActions.ts\n│   ├── taskQueries.ts\n│   ├── userActions.ts\n│   └── userQueries.ts\n└── shared\n    └── utils.ts\n```\n\n----------------------------------------\n\nTITLE: Deploying Client to Netlify with CLI\nDESCRIPTION: Commands for deploying a Wasp client to Netlify using the Netlify CLI. This involves two main commands: an initial deployment and then a production deployment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/manually.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnetlify deploy\n```\n\nLANGUAGE: shell\nCODE:\n```\nnetlify deploy --prod\n```\n\n----------------------------------------\n\nTITLE: Client Setup Function - Logging Interval - JavaScript\nDESCRIPTION: Defines a client setup function in JavaScript that logs the session duration to the console every hour. Requires no dependencies beyond standard JS. Intended to be imported by Wasp as setupFn. Inputs: none. Outputs: interval logging to console.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/client-config.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nexport default async function mySetupFunction() {\n  let count = 1\n  setInterval(\n    () => console.log(`You have been online for ${count++} hours.`),\n    1000 * 60 * 60\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Active Node.js Version using nvm (Shell)\nDESCRIPTION: Uses Node Version Manager (nvm) to set the active Node.js version (version 20 in this example) for the current shell session. This ensures Wasp commands use the correct Node.js runtime.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/introduction/quick-start.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnvm use 20\n```\n\n----------------------------------------\n\nTITLE: Defining Password Migration Route in Wasp\nDESCRIPTION: Wasp route configuration for the password migration page\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_20\n\nLANGUAGE: wasp\nCODE:\n```\nroute MigratePasswordRoute { path: \"/migrate-password\", to: MigratePassword }\npage MigratePassword {\n  component: import { MigratePasswordPage } from \"@src/pages/MigratePassword\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing AuthUser Object Fields in TypeScript\nDESCRIPTION: Example of the AuthUser object structure when a user has signed up with Google authentication in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/entities.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = {\n  // User data\n  id: 'cluqs9qyh00007cn73apj4hp7',\n  address: 'Some address',\n\n  // Auth methods specific data\n  identities: {\n    email: null,\n    google: {\n      id: '1117XXXX1301972049448',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Routes and Pages in Wasp\nDESCRIPTION: This snippet demonstrates how to define the necessary routes and pages for authentication in the main.wasp file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/github.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Excuse Queries\nDESCRIPTION: Server-side query implementations for fetching excuses from external API and retrieving saved excuses from database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-09-05-dev-excuses-app-tutrial.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport axios from 'axios';\n\nexport const getExcuse = async () => {\n  const response = await axios.get('https://api.devexcus.es/')\n  return response.data\n}\n\nexport const getAllSavedExcuses = async (_args, context) => {\n  return context.entities.Excuse.findMany()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp TypeScript Settings\nDESCRIPTION: Specific TypeScript configuration for Wasp files including compiler options and includes\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/general/wasp-ts-config.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"skipLibCheck\": true,\n    \"target\": \"ES2022\",\n    \"isolatedModules\": true,\n    \"moduleDetection\": \"force\",\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"module\": \"NodeNext\",\n    \"noEmit\": true,\n    \"lib\": [\"ES2023\"]\n  },\n  \"include\": [\"main.wasp.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing getUsername Helper in React Component\nDESCRIPTION: Shows how to replace the deprecated getUsername helper with direct access to user.identities.username.id in a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getUsername, AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const username = getUsername(user)\n  // ...\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const username = user.identities.username?.id\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Add Note Component in React TSX\nDESCRIPTION: This component allows users to add new notes. It uses React hooks for state management and includes error handling. The component integrates the custom Button component and uses Tailwind CSS for styling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\nimport embedIdea from '@wasp/actions/embedIdea';\nimport Button from './Button';\n\nexport default function AddNote() {\n  const [idea, setIdea] = useState('');\n  const [isIdeaEmbedding, setIsIdeaEmbedding] = useState(false);\n\n  const handleEmbedIdea = async (e: any) => {\n    try {\n      setIsIdeaEmbedding(true);\n      if (!idea) {\n        throw new Error('Idea cannot be empty');\n      }\n      const embedIdeaResponse = await embedIdea({\n        idea,\n      });\n\n      console.log('embedIdeaResponse: ', embedIdeaResponse);\n    } catch (error: any) {\n      alert(error.message);\n    } finally {\n      setIdea('');\n      setIsIdeaEmbedding(false);\n    }\n  };\n\n  return (\n    <div className='flex flex-row gap-2 justify-center items-end w-full'>\n      <textarea\n        autoFocus\n        onChange={(e) => setIdea(e.target.value)}\n        value={idea}\n        placeholder='LLMs are great for brainstorming!'\n        className='w-full p-4 h-22 bg-neutral-100 border rounded-lg w-full'\n      />\n      <Button isLoading={isIdeaEmbedding} onClick={handleEmbedIdea}>\n        Save Note\n      </Button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Server Environment Variables on Fly.io\nDESCRIPTION: Example of setting server environment variables when deploying to Fly.io using the flyctl CLI tool.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/env-vars.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nflyctl secrets set SOME_VAR_NAME=somevalue\n```\n\n----------------------------------------\n\nTITLE: Using updateTask in React Component (TypeScript)\nDESCRIPTION: This snippet shows how to use the 'updateTask' action in a TypeScript React component. It includes type annotations for the event handlers and props.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/06-actions.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormEvent, ChangeEvent } from 'react'\nimport { Task } from 'wasp/entities'\nimport {\n  updateTask,\n  createTask,\n  getTasks,\n  useQuery,\n} from 'wasp/client/operations'\n\nconst TaskView = ({ task }: { task: Task }) => {\n  const handleIsDoneChange = async (event: ChangeEvent<HTMLInputElement>) => {\n    try {\n      await updateTask({\n        id: task.id,\n        isDone: event.target.checked,\n      })\n    } catch (error: any) {\n      window.alert('Error while updating task: ' + error.message)\n    }\n  }\n\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        id={String(task.id)}\n        checked={task.isDone}\n        onChange={handleIsDoneChange}\n      />\n      {task.description}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Default Value for New Field in Prisma Schema (TypeScript)\nDESCRIPTION: Demonstrates how to add a new 'isPublic' field to the Match model with a default value of false. This approach ensures existing data remains valid when deploying the migration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2025-04-02-an-introduction-to-database-migrations.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n@default(false)\n```\n\n----------------------------------------\n\nTITLE: Implementing SignupPage Component in JavaScript\nDESCRIPTION: This snippet shows how to implement a signup page component in JavaScript using Wasp's SignupForm component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SignupForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function SignupPage() {\n  return <SignupForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Email Verification Route in Wasp\nDESCRIPTION: This code shows how to create a route for the email verification page in the main.wasp file. It defines the route path and links it to a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_18\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\nroute EmailVerificationRoute { path: \"/email-verification\", to: EmailVerificationPage }\npage EmailVerificationPage {\n  component: import { VerifyEmailPage } from \"@src/VerifyEmailPage.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variable Validation Schemas in JavaScript\nDESCRIPTION: Creates validation schemas for both server and client environment variables using Zod in JavaScript. The server schema requires a STRIPE_API_KEY string, while the client schema defines REACT_APP_NAME with a default value.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/env-vars.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as z from 'zod'\n\nimport { defineEnvValidationSchema } from 'wasp/env'\n\nexport const serverEnvValidationSchema = defineEnvValidationSchema(\n  z.object({\n    STRIPE_API_KEY: z.string({\n      required_error: 'STRIPE_API_KEY is required.',\n    }),\n  })\n)\n\nexport const clientEnvValidationSchema = defineEnvValidationSchema(\n  z.object({\n    REACT_APP_NAME: z.string().default('TODO App'),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Replacing getEmail Helper in React Component\nDESCRIPTION: Shows how to replace the deprecated getEmail helper with direct access to user.identities.email.id in a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getEmail, AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const email = getEmail(user)\n  // ...\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const email = user.identities.email?.id\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing updateTask Action Server Logic in JavaScript\nDESCRIPTION: Provides the JavaScript server-side implementation for the `updateTask` action. The function receives the task `id` and its new `isDone` status within the first argument object, and the Wasp `context` as the second. It uses `context.entities.Task.update` to modify the corresponding task record in the database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/06-actions.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/actions.js\"\n// ...\n\nexport const updateTask = async ({ id, isDone }, context) => {\n  return context.entities.Task.update({\n    where: { id },\n    data: {\n      isDone: isDone,\n    },\n  })\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Validation Error Handling in JavaScript\nDESCRIPTION: Example of handling validation errors using try-catch blocks and the AuthError class.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  await context.entities.User.update(...)\n} catch (e) {\n  if (e instanceof AuthError) {\n    throw new HttpError(422, 'Validation failed', { message: e.message })\n  } else {\n    throw e\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining External Auth Entity in Wasp (JavaScript)\nDESCRIPTION: This Wasp code snippet defines the SocialLogin entity, which is required for implementing social login in a Wasp application. It includes fields for provider information, user association, and creation timestamp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\nentity SocialLogin {=psl\n  id          Int       @id @default(autoincrement())\n  provider    String\n  providerId  String\n  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId      Int\n  createdAt   DateTime  @default(now())\n  @@unique([provider, providerId, userId])\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Defining Google Auth User Signup Fields in TypeScript\nDESCRIPTION: This snippet demonstrates how to define user signup fields for Google authentication using the new defineUserSignupFields function in a TypeScript file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const fields = defineUserSignupFields({\n  displayName: async (data) => {\n    const profile: any = data.profile;\n    if (!profile?.displayName) { throw new Error('Display name is not available'); }\n    return profile.displayName;\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Routes in Wasp\nDESCRIPTION: This snippet demonstrates how to define the necessary authentication routes and pages in the main.wasp file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/discord.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Preview Features Configuration in .wasp File\nDESCRIPTION: Shows how to configure Prisma preview features in the .wasp file before migration to schema.prisma.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_15\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    // highlight-start\n    prisma: {\n      clientPreviewFeatures: [\"postgresqlExtensions\"]\n      dbExtensions: [\n        { name: \"hstore\", schema: \"myHstoreSchema\" },\n        { name: \"pg_trgm\" },\n        { name: \"postgis\", version: \"2.1\" },\n      ]\n    }\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring User Entity in Prisma Schema (Prisma)\nDESCRIPTION: Defines the basic User model for authentication using Prisma ORM, enabling Wasp to manage user data. No special parameters beyond an auto-incrementing 'id' are required at this step. Outputs a new entity usable throughout authentication and relations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/07-auth.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\n// ...\\n\\nmodel User {\\n  id Int @id @default(autoincrement())\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Reset Component in React/TypeScript\nDESCRIPTION: This component handles password reset by submitting a new password along with a token received via URL. It manages error states, handles form input, and navigates to the home page upon successful reset.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/email/create-your-own-ui.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport function PasswordReset() {\n  const [error, setError] = useState<Error | null>(null)\n  const [newPassword, setNewPassword] = useState('')\n  const navigate = useNavigate()\n\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    setError(null)\n    try {\n      // The token is passed as a query parameter\n      const token = new URLSearchParams(window.location.search).get('token')\n      if (!token) throw new Error('Token not found in URL')\n      await resetPassword({ token, password: newPassword })\n      navigate('/')\n    } catch (error: unknown) {\n      console.error('Error during password reset:', error)\n      setError(error as Error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {error && <p>Error: {error.message}</p>}\n\n      <input\n        type=\"password\"\n        autoComplete=\"new-password\"\n        value={newPassword}\n        onChange={(e) => setNewPassword(e.target.value)}\n        placeholder=\"New password\"\n      />\n\n      <button type=\"submit\">Reset password</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Route in Wasp\nDESCRIPTION: Shows how to define a route in the main.wasp file for a task page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/links.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nroute TaskRoute { path: \"/task/:id\", to: TaskPage }\npage TaskPage { ... }\n```\n\n----------------------------------------\n\nTITLE: Useful Fly.io Management Commands\nDESCRIPTION: Helpful commands for managing your Fly.io deployment, including viewing logs, listing secrets, and accessing the console.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/manually.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nflyctl logs\nflyctl secrets list\nflyctl ssh console\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Form\nDESCRIPTION: Setup for signup page route and component implementation using Wasp's SignupForm component\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/ui.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { SignupPage } from \"@src/SignupPage.jsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignupForm } from 'wasp/client/auth'\n\nexport function SignupPage() {\n  return <SignupForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Telemetry Status for Wasp CLI - Shell\nDESCRIPTION: This terminal output shows the result of running `wasp telemetry` to check CLI telemetry status. It prints whether telemetry is enabled, gives the cache directory path, and the timestamp of the last data submission. Requires Wasp CLI to be installed for the project. No input is required; output is details about telemetry configuration and usage.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/general/cli.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ wasp telemetry\n\nTelemetry is currently: ENABLED\nTelemetry cache directory: /home/user/.cache/wasp/telemetry/\nLast time telemetry data was sent for this project: 2021-05-27 09:21:16.79537226 UTC\nOur telemetry is anonymized and very limited in its scope: check https://wasp.sh/docs/telemetry for more details.\n\n```\n\n----------------------------------------\n\nTITLE: Email Auth Configuration After Migration\nDESCRIPTION: Updated email authentication configuration for Wasp 0.12.X using the new userSignupFields approach.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_11\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        userSignupFields: import { fields } from \"@src/server/auth/signup.js\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Useful Fly.io Commands\nDESCRIPTION: Common Fly.io CLI commands for managing deployments and checking logs.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflyctl logs\nflyctl secrets list\nflyctl ssh console\n```\n\n----------------------------------------\n\nTITLE: Installing a New Dependency with npm in a Wasp Project\nDESCRIPTION: This command demonstrates how to add a new package (date-fns) as a dependency in a Wasp project using npm. The package will be added to the dependencies section of the package.json file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/dependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install date-fns\n```\n\n----------------------------------------\n\nTITLE: Optimistic Update with useAction Hook (TypeScript/TSX)\nDESCRIPTION: Provides a type-safe React component utilizing useAction and OptimisticUpdateDefinition from Wasp. Demonstrates optimistic UI update for task completion, using explicit types for both the action payload and returned task entity. The approach ensures robust, IDE-friendly development in TypeScript environments.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport {\n  useQuery,\n  useAction,\n  type OptimisticUpdateDefinition,\n  getTask,\n  markTaskAsDone,\n} from 'wasp/client/operations'\n\ntype TaskPayload = Pick<Task, \"id\">;\n\nconst TaskPage = ({ id }: { id: number }) => {\n  const { data: task } = useQuery(getTask, { id });\n  // highlight-start\n  const markTaskAsDoneOptimistically = useAction(markTaskAsDone, {\n    optimisticUpdates: [\n      {\n        getQuerySpecifier: ({ id }) => [getTask, { id }],\n        updateQuery: (_payload, oldData) => ({ ...oldData, isDone: true }),\n      } as OptimisticUpdateDefinition<TaskPayload, Task>,\n    ],\n  });\n  // highlight-end\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>;\n  }\n\n  const { description, isDone } = task;\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? \"Yes\" : \"No\"}\n      </p>\n      {isDone || (\n        <button onClick={() => markTaskAsDoneOptimistically({ id })}>\n          Mark as done.\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default TaskPage;\n```\n\n----------------------------------------\n\nTITLE: Using getUsername in Tasks (JavaScript)\nDESCRIPTION: Implementation of getUsername helper in a task creation context, showing how to access the username from the context.user object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/_get-username.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getUsername } from 'wasp/auth'\n\nexport const createTask = async (args, context) => {\n  const username = getUsername(context.user)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Social Login Migration Handlers in TypeScript\nDESCRIPTION: Implements handlers for migrating Google and GitHub authentication data, including provider-specific logic and data transformation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prisma } from \"wasp/server\";\nimport { MigrateGoogle, MigrateGithub } from \"wasp/server/api\";\n\nexport const migrateGoogleHandler: MigrateGoogle =\n  async (_req, res) => {\n    const result = await createSocialLoginMigration(\"google\");\n\n    res.status(200).json({ message: \"Migrated users to the new auth\", result });\n  };\n\nexport const migrateGithubHandler: MigrateGithub =\n  async (_req, res) => {\n    const result = await createSocialLoginMigration(\"github\");\n\n    res.status(200).json({ message: \"Migrated users to the new auth\", result });\n  };\n\nasync function createSocialLoginMigration(\n  providerName: \"google\" | \"github\"\n): Promise<{\n  numUsersAlreadyMigrated: number;\n  numUsersNotUsingThisAuthMethod: number;\n  numUsersMigratedSuccessfully: number;\n}> {\n  const users = await prisma.user.findMany({\n    include: {\n      auth: true,\n      externalAuthAssociations: true,\n    },\n  });\n\n  const result = {\n    numUsersAlreadyMigrated: 0,\n    numUsersNotUsingThisAuthMethod: 0,\n    numUsersMigratedSuccessfully: 0,\n  };\n\n  for (const user of users) {\n    if (user.auth) {\n      result.numUsersAlreadyMigrated++;\n      console.log(\"Skipping user (already migrated) with id:\", user.id);\n      continue;\n    }\n\n    const provider = user.externalAuthAssociations.find(\n      (provider) => provider.provider === providerName\n    );\n\n    if (!provider) {\n      result.numUsersNotUsingThisAuthMethod++;\n      console.log(`Skipping user (not using ${providerName} auth) with id:`, user.id);\n      continue;\n    }\n\n    await prisma.auth.create({\n      data: {\n        identities: {\n          create: {\n            providerName,\n            providerUserId: provider.providerId,\n            providerData: JSON.stringify({}),\n          },\n        },\n        user: {\n          connect: {\n            id: user.id,\n          },\n        },\n      },\n    });\n    result.numUsersMigratedSuccessfully++;\n  }\n\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Form with Custom Appearance in JSX\nDESCRIPTION: Shows how to apply custom appearance settings to the LoginForm component\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/ui.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\nimport { authAppearance } from './appearance'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass the appearance object to the form\n      appearance={authAppearance}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Provider in Wasp\nDESCRIPTION: Shows how to set up the SMTP provider in the main.wasp file for email sending.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/email.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: SMTP,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Seeds in Wasp\nDESCRIPTION: Example of defining database seed functions in the app configuration for data initialization\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/backends.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    // ...\n    seeds: [\n      // ...\n      import { devSeedSimple } from \"@server/dbSeeds.js\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Auth Page Route Configuration\nDESCRIPTION: Wasp route configuration for the login page component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/google.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for Tailwind CSS\nDESCRIPTION: This configuration file sets up PostCSS plugins for Tailwind CSS and Autoprefixer, which are necessary for processing Tailwind CSS classes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Root TypeScript Configuration\nDESCRIPTION: Root TypeScript configuration that references both source and Wasp-specific configurations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/general/wasp-ts-config.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files\": [],\n  \"references\": [\n    { \"path\": \"./tsconfig.src.json\" },\n    { \"path\": \"./tsconfig.wasp.json\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing userSignupFields for Google Auth in TypeScript\nDESCRIPTION: TypeScript implementation of the userSignupFields function with type safety using defineUserSignupFields helper.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  isSignupComplete: () => false,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Database Seed Functions in Wasp Configuration\nDESCRIPTION: This code snippet demonstrates how to define database seed functions in the Wasp configuration file. It imports two seed functions from a JavaScript file and adds them to the app's db.seeds array.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/databases.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    seeds: [\n      import { devSeedSimple } from \"@src/dbSeeds.js\",\n      import { prodSeed } from \"@src/dbSeeds.js\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Email in React Component (JavaScript)\nDESCRIPTION: This snippet shows how to import and use the getEmail helper in a React component to retrieve the user's email address. It demonstrates the usage within a functional component named MainPage.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/_get-email.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getEmail } from 'wasp/auth'\n\nconst MainPage = ({ user }) => {\n  const email = getEmail(user)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Social Authentication and Routing in Wasp\nDESCRIPTION: This code snippet provides a skeleton structure for a main.wasp file. It demonstrates how to configure social authentication for the app and define routes and pages. The actual implementation details are omitted and represented by ellipses.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/_wasp-file-structure-note.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n// Configuring the social authentication\napp myApp {\n  auth: { ... }\n}\n\n// Defining routes and pages\nroute LoginRoute { ... }\npage LoginPage { ... }\n```\n\n----------------------------------------\n\nTITLE: Using Queries in JavaScript\nDESCRIPTION: Example of how to import and use the defined Queries in JavaScript. It demonstrates calling Queries with and without arguments.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/queries.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport getAllTasks from '@wasp/queries/getAllTasks.js'\nimport getFilteredTasks from '@wasp/queries/getFilteredTasks.js'\n\n// ...\n\nconst allTasks = await getAllTasks()\nconst doneTasks = await getFilteredTasks({ isDone: true })\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query in TypeScript\nDESCRIPTION: TypeScript implementation of the 'getTasks' query function with proper type annotations for full-stack type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/05-queries.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from 'wasp/entities'\nimport { type GetTasks } from 'wasp/server/operations'\n\nexport const getTasks: GetTasks<void, Task[]> = async (args, context) => {\n  return context.entities.Task.findMany({\n    orderBy: { id: 'asc' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an API in JavaScript\nDESCRIPTION: JavaScript implementation of a custom API endpoint. The function takes request, response, and context objects and returns a JSON response.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/apis.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const fooBar = (req, res, context) => {\n  res.set(\"Access-Control-Allow-Origin\", \"*\"); // Example of modifying headers to override Wasp default CORS middleware.\n  res.json({ msg: `Hello, ${context.user?.username || \"stranger\"}!` });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Wasp Application Structure (JavaScript)\nDESCRIPTION: A default main.wasp file for JavaScript projects that defines the application, routes, and pages. It includes the app declaration with version and title, a root route definition, and a MainPage page declaration linking to the React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/02-project-structure.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"^0.12.0\" // Pins the version of Wasp to use.\n  },\n  title: \"TodoApp\" // Used as the browser tab title. Note that all strings in Wasp are double quoted!\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  // We specify that the React implementation of the page is exported from\n  // `src/MainPage.jsx`. This statement uses standard JS import syntax.\n  // Use `@src` to reference files inside the `src` folder.\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing getEmail Helper in Server Function\nDESCRIPTION: Demonstrates updating server-side code to access email identity directly instead of using the getEmail helper.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_20\n\nLANGUAGE: ts\nCODE:\n```\nimport { getEmail } from 'wasp/auth'\n\nexport const createTask: CreateTask<...>  = async (args, context) => {\n    const email = getEmail(context.user)\n    // ...\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\nexport const createTask: CreateTask<...>  = async (args, context) => {\n    const email = context.user.identities.email?.id\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Studio for Database Inspection (Shell)\nDESCRIPTION: Invokes Prisma Studio to provide a web UI for examining Wasp/Prisma-managed entities in the database. No input required, outputs an interactive UI showing structuring of users and related data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/07-auth.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nwasp db studio\\n\n```\n\n----------------------------------------\n\nTITLE: Mailgun Environment Variables\nDESCRIPTION: Required environment variables for using the Mailgun email provider, to be added to the .env.server file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/email/email.md#2025-04-22_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\nMAILGUN_API_KEY=\nMAILGUN_DOMAIN=\n```\n\n----------------------------------------\n\nTITLE: Defining Task Entity Schema in Prisma\nDESCRIPTION: Basic Prisma schema definition for a Task entity with id, description, and isDone fields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/crud.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Task {\n  id          Int     @id @default(autoincrement())\n  description String\n  isDone      Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Provider Config Function for Discord OAuth - JavaScript\nDESCRIPTION: A minimal provider configuration function for Discord OAuth in JavaScript, returning an object with an empty scopes array. Should be referenced from Wasp's discord method configFn property. Inputs are none; output is a config object expected by the auth system.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/discord.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport function getConfig() {\n  return {\n    scopes: [],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Static Asset URL in React (TypeScript)\nDESCRIPTION: Illustrates importing a static image (`img.png`) within a TypeScript React component (`src/App.tsx`). The `imgUrl` variable receives the asset's URL, managed by Vite for development and production builds. This URL is then assigned to the `src` attribute of an `<img>` element.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/static-assets.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"src/App.tsx\"\nimport imgUrl from './img.png'\n\nfunction App() {\n  return <img src={imgUrl} alt=\"img\" />\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining userSignupFields from OAuth Profile (After, TypeScript)\nDESCRIPTION: Updates the construction of userSignupFields following changes in Wasp 0.13.X. This snippet maps the displayName using data.profile.name due to adjustments in OAuth provider profile structure and direct data forwarding. The import from wasp/server/auth and usage of defineUserSignupFields remains unchanged. Input: provider response data with new structure; Output: userSignupFields object for user management logic.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n    displayName: (data: any) => data.profile.name,\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing First Provider User ID - getFirstProviderUserId in JavaScript (Backend Logic)\nDESCRIPTION: Illustrates using getFirstProviderUserId in a backend handler (for example, to attribute tasks to users). This retrieves the primary user identifier from context.user. Dependencies: wasp/auth JS package. Input: context.user. Output: userId string or null. Meant for business logic during server-side operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/entities.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { getFirstProviderUserId } from 'wasp/auth'\\n\\nexport const createTask = async (args, context) => {\\n  const userId = getFirstProviderUserId(context.user)\\n  // ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Login Page Component in JavaScript\nDESCRIPTION: Implements a React component for the login page using Wasp's LoginForm component with a link to the signup page for new users.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/07-auth.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\nimport { LoginForm } from 'wasp/client/auth'\n\nexport const LoginPage = () => {\n  return (\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\n      <LoginForm />\n      <br />\n      <span>\n        I don't have an account yet (<Link to=\"/signup\">go to signup</Link>).\n      </span>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Script for Twitter Token Retrieval in TypeScript\nDESCRIPTION: This code snippet defines a function to retrieve Twitter authentication tokens using the Rettiwt API. It's designed to be run once to obtain tokens that can be used for up to a year. The tokens are then manually added to the .env.server file for future use.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rettiwt } from 'rettiwt-api'; \n\n/**\n * This is a script we can now run from the cli with `wasp db seed`\n * IMPORTANT! We only want to run this script once, after which we save the tokens\n * in the .env.server file. They should be good for up to a year.\n */\nexport const getTwitterTokens = async () => {\n  const tokens = await Rettiwt().account.login(\n    process.env.TWITTER_EMAIL!,\n    process.env.TWITTER_HANDLE!,\n    process.env.TWITTER_PASSWORD!\n  );\n\n  console.log('tokens: ', tokens)\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing the getAllMemes Server-Side Query Function\nDESCRIPTION: This TypeScript function retrieves all meme records from the database, ordered by creation date in descending order. It includes the associated template data for each meme through Prisma's include functionality.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport HttpError from '@wasp/core/HttpError.js';\n\nimport type { Meme } from '@wasp/entities';\nimport type { GetAllMemes } from '@wasp/queries/types';\n\nexport const getAllMemes: GetAllMemes<void, Meme[]> = async (_args, context) => {\n  const memeIdeas = await context.entities.Meme.findMany({\n    orderBy: { createdAt: 'desc' },\n    include: { template: true },\n  });\n\n  return memeIdeas;\n};\n```\n\n----------------------------------------\n\nTITLE: Submitting a Job in TypeScript\nDESCRIPTION: Example of submitting a job for execution in TypeScript, passing arguments to the job handler.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/jobs.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst submittedJob = await mySpecialJob.submit({ job: \"args\" })\n```\n\n----------------------------------------\n\nTITLE: Updating React Router Usage from v5 to v6 (NavLink)\nDESCRIPTION: Update the NavLink component to use the new className prop for setting active link state.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-14-to-0-15.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NavLink, useLocation } from 'react-router-dom'\n\nexport function SomePage() {\n  const location = useLocation()\n  return (\n    <NavLink\n      to=\"/new-route\"\n      className={() =>\n        cn('text-blue-500', {\n          underline: location.pathname === '/new-route',\n        })\n      }\n    >\n      Go to new route\n    </NavLink>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Wasp 0.14.X\nDESCRIPTION: Updated TypeScript configuration file with necessary compiler options for IDE support in Wasp 0.14.X.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"esnext\",\n    \"target\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"jsx\": \"preserve\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"typeRoots\": [\n      \"node_modules/@testing-library\",\n      \"node_modules/@types\"\n    ],\n    \"outDir\": \".wasp/phantom\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Auth UI Colors in JavaScript\nDESCRIPTION: Defines a JavaScript object `authAppearance` in `src/appearance.js` to override default theme colors for the Wasp Auth UI. It specifies `brand`, `brandAccent`, and `submitButtonText` colors. This object is meant to be imported and passed to Auth UI components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/ui.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/appearance.js\"\nexport const authAppearance = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Route in Server Setup (JavaScript)\nDESCRIPTION: This snippet demonstrates how to add a custom route to the server using the setup function in JavaScript. It defines a function that adds a GET route to '/customRoute'.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/server-config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const mySetupFunction = async ({ app }) => {\n  addCustomRoute(app)\n}\n\nfunction addCustomRoute(app) {\n  app.get('/customRoute', (_req, res) => {\n    res.send('I am a custom route')\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Password Migration Page Component in React (JavaScript)\nDESCRIPTION: This JSX code defines a React functional component `MigratePasswordPage` for the password migration UI (JavaScript version). It uses `react-hook-form` for form handling and state management (`useState`) for success/error messages. On submission, it calls the Wasp client operation `migratePassword` with the provided username and password.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"src/pages/MigratePassword.jsx\"\nimport {\n  FormItemGroup,\n  FormLabel,\n  FormInput,\n  FormError,\n} from \"wasp/client/auth\";\nimport { useForm } from \"react-hook-form\";\nimport { migratePassword } from \"wasp/client/operations\";\nimport { useState } from \"react\";\n\nexport function MigratePasswordPage() {\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const form = useForm();\n\n  const onSubmit = form.handleSubmit(async (data) => {\n    try {\n      const result = await migratePassword(data);\n      setSuccessMessage(result.message);\n    } catch (e) {\n      console.error(e);\n      if (e instanceof Error) {\n        setErrorMessage(e.message);\n      }\n    }\n  });\n\n  return (\n    <div style={{\n      maxWidth: \"400px\",\n      margin: \"auto\",\n    }}>\n      <h1>Migrate your password</h1>\n      <p>\n        If you have an account on the old version of the website, you can\n        migrate your password to the new version.\n      </p>\n      {successMessage && <div>{successMessage}</div>}\n      {errorMessage && <FormError>{errorMessage}</FormError>}\n      <form onSubmit={onSubmit}>\n        <FormItemGroup>\n          <FormLabel>Username</FormLabel>\n          <FormInput\n            {...form.register(\"username\", {\n              required: \"Username is required\",\n            })}\n          />\n          <FormError>{form.formState.errors.username?.message}</FormError>\n        </FormItemGroup>\n        <FormItemGroup>\n          <FormLabel>Password</FormLabel>\n          <FormInput\n            {...form.register(\"password\", {\n              required: \"Password is required\",\n            })}\n            type=\"password\"\n          />\n          <FormError>{form.formState.errors.password?.message}</FormError>\n        </FormItemGroup>\n        <button type=\"submit\">Migrate password</button>\n      </form>\n    </div>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Schema\nDESCRIPTION: Prisma schema definition for the User model with required fields for GitHub authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/github.md#2025-04-22_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          Int    @id @default(autoincrement())\n  username    String @unique\n  displayName String\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Auth in Wasp\nDESCRIPTION: Initial Wasp configuration for enabling GitHub authentication with user entity setup\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/github.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying a New Wasp App to Fly.io\nDESCRIPTION: Command to deploy a new Wasp application to Fly.io in a single step. This creates and deploys all necessary components (client, server, and database) to the specified region.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/cli.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly launch my-wasp-app mia\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Wasp\nDESCRIPTION: Sets up authentication configuration in the Wasp file, specifying the user entity and authentication method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/07-auth.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"Todo app\",\n\n  auth: {\n    // Tells Wasp which entity to use for storing users.\n    userEntity: User,\n    methods: {\n      // Enable username and password auth.\n      usernameAndPassword: {}\n    },\n    // We'll see how this is used a bit later.\n    onAuthFailedRedirectTo: \"/login\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Wasp Project with SaaS Template\nDESCRIPTION: This command-line instruction shows how to create a new Wasp project using the SaaS template. It utilizes the Wasp CLI to generate a project named 'my-project' with pre-configured SaaS features.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-04-27-wasp-hackathon-two.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwasp new my-project -t saas\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration Setup\nDESCRIPTION: Environment variables configuration for OpenAI API, Pinecone vector database, and Twitter credentials\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# https://platform.openai.com/account/api-keys\nOPENAI_API_KEY=\n\n# sign up for a free tier account at https://www.pinecone.io/\nPINECONE_API_KEY=\n# will be a location, e.g 'us-west4-gcp-free'\nPINECONE_ENV=   \n\n# We will fill these in later during the Twitter Scraping section\n# Twitter details -- only needed once for Rettiwt.account.login() to get the tokens \nTWITTER_EMAIL=\nTWITTER_HANDLE=\nTWITTER_PASSWORD=\n```\n\n----------------------------------------\n\nTITLE: Deploying Wasp Client to Cloudflare Pages using GitHub Actions Workflow\nDESCRIPTION: A GitHub Actions workflow configuration for automating the deployment of a Wasp web client to Cloudflare Pages. The workflow installs Wasp, builds the application, sets up environment variables, and deploys to Cloudflare Pages using their official action.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/paas.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy Client to Cloudflare\n\non:\n  push:\n    branches:\n      - main # Deploy on every push to the main branch\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v2\n\n      - name: Setup Node.js\n        id: setup-node\n        uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n\n      - name: Install Wasp\n        run: curl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v 0.16.0 # Change to your Wasp version\n\n      - name: Wasp Build\n        run: cd ./app && wasp build\n\n      - name: Install dependencies and build the client\n        run: |\n          cd ./app/.wasp/build/web-app\n          npm install\n          REACT_APP_API_URL=${{ secrets.WASP_SERVER_URL }} npm run build\n\n      - name: Deploy to Cloudflare Pages\n        uses: cloudflare/wrangler-action@v3\n        with:\n          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}\n          command: pages deploy ./app/.wasp/build/web-app/build --project-name=${{ env.CLIENT_CLOUDFLARE_APP_NAME }} --commit-dirty=true --branch=main\n\n    env:\n      CLIENT_CLOUDFLARE_APP_NAME: cloudflare-pages-app-name\n```\n\n----------------------------------------\n\nTITLE: Configuring CRUD for Tasks in Wasp\nDESCRIPTION: This snippet shows how to configure CRUD operations for Tasks in the main.wasp file, enabling getAll and create operations with a custom implementation for create.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\ncrud Tasks {\n  entity: Task,\n  operations: {\n    getAll: {},\n    create: {\n      overrideFn: import { createTask } from \"@src/tasks.js\",\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Server Type Import\nDESCRIPTION: Example of importing Action types on the server side in TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateFoo } from 'wasp/server/operations'\n```\n\n----------------------------------------\n\nTITLE: Creating a Wasp Project with OpenSaaS.sh Template\nDESCRIPTION: This command creates a new Wasp project using the OpenSaaS.sh template, which includes features like Stripe Payments, OpenAI GPT API, Google Auth, SendGrid, Tailwind, and Cron Jobs.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/starter-templates.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwasp new <project-name> -t saas\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Signup Fields via External Import in Wasp\nDESCRIPTION: Demonstrates how to configure custom fields for user signup using the userSignupFields callback imported from an external JavaScript module. This Wasp configuration enables extending default authentication with additional user-provided data during registration. Place this in main.wasp to reference userSignupFields from a JavaScript or TypeScript implementation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/username-and-pass.md#2025-04-22_snippet_13\n\nLANGUAGE: Wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {\n        userSignupFields: import { userSignupFields } from \"@src/auth/email.js\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  }\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Setting Up Password Reset Route in Wasp with TypeScript\nDESCRIPTION: This code shows how to create a route for the password reset page in TypeScript. It defines the route path and links it to a TypeScript React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_16\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\nroute PasswordResetRoute { path: \"/password-reset\", to: PasswordResetPage }\npage PasswordResetPage {\n  component: import { ResetPasswordPage } from \"@src/ResetPasswordPage.tsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Zod Validation Schema in TypeScript\nDESCRIPTION: Definition of a Zod validation schema for form fields including string validation, email format checking, and date validation rules.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-11-20-building-react-forms-with-ease-using-react-hook-form-and-zod.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst formSchema = z.object({\n    name: z.string().min(1, { message: 'Name is required' }),\n    surname: z.string().min(1, { message: 'Surname is required' }),\n    email: z.string().email({ message: 'Invalid email address' }),\n    dateOfBirth: z\n      .date()\n      .max(new Date(), { message: 'Date cannot be in the future' }),\n    premiumUser: z.boolean(),\n  });\n```\n\n----------------------------------------\n\nTITLE: Minimal MainPage Component After Cleanup (TypeScript)\nDESCRIPTION: Provides a TypeScript version of a trimmed-down MainPage React component that outputs 'Hello world!'. Useful for initializing a clean starting point in new features. Depends only on React, with no props or side effects.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/03-pages.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport const MainPage = () => {\n  return <div>Hello world!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tweet Embed to Main Page Component in React TSX\nDESCRIPTION: This code snippet adds the TwitterTweetEmbed component to the MainPage, displaying the original tweet that inspired the generated ideas.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n<h2>Original Tweet</h2>\n<div className='flex flex-row gap-2 justify-center items-center w-full'>\n  <TwitterTweetEmbed tweetId={tweetDraft.originalTweet.tweetId} />\n</div>\n\n<h2>Tweet Draft</h2>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Wasp Authentication\nDESCRIPTION: Initial Wasp configuration file setup enabling username/password authentication with basic app settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/username-and-pass.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Prisma Schema\nDESCRIPTION: This snippet defines the User entity in the Prisma schema. It includes the required id field and indicates where to add custom fields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/email.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  // Add your own fields below\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating OAuth Provider Configuration Function (After)\nDESCRIPTION: Demonstrates the new format of the OAuth provider configuration function, removing clientID and clientSecret, and renaming 'scope' to 'scopes'.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getConfig() {\n    return {\n        scopes: ['profile', 'email'],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Wasp\nDESCRIPTION: Definition of the basic User entity structure required for authentication with an auto-incrementing ID field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/username-and-pass.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    // Add your own fields below\n    // ...\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Preview Features in Wasp\nDESCRIPTION: Enables Prisma preview features in the Wasp app configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/backends.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    system: PostgreSQL,\n    prisma: {\n      clientPreviewFeatures: [\"postgresqlExtensions\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Auth Field Definition\nDESCRIPTION: New implementation of user signup fields using defineUserSignupFields from wasp/server/auth.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const fields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address;\n    if (typeof address !== 'string') {\n      throw new Error('Address is required');\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long');\n    }\n    return address;\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Protecting a Page with authRequired in Wasp\nDESCRIPTION: This snippet demonstrates how to protect a page using the authRequired property in a Wasp page declaration. It ensures only authenticated users can access the page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\npage MainPage {\n  component: import Main from \"@client/pages/Main.jsx\",\n  authRequired: true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Settings in Wasp App Definition\nDESCRIPTION: This Wasp code snippet demonstrates how to configure WebSocket support within an `app` definition using the `webSocket` dictionary. It requires an `fn` field that imports the server-side WebSocket function (e.g., `webSocketFn` from `@src/webSocket`) responsible for handling events. The optional `autoConnect` boolean flag (defaulting to `true`) controls whether the client automatically connects upon loading.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/web-sockets.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  webSocket: {\n    fn: import { webSocketFn } from \"@src/webSocket\",\n    autoConnect: true, // optional, default: true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Query in JavaScript - JavaScript\nDESCRIPTION: This JavaScript code defines and exports an asynchronous function to fetch a task by ID and return an informative status message. It checks if a task exists using the Wasp context, returning a message based on the task status or throwing an HTTP 404 error if not found. The function expects 'id' in the argument and 'context.entities.Task' to be provided, and relies on the 'HttpError' module for error handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/general/typescript.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport HttpError from 'wasp/server'\\n\\nfunction getInfoMessage(task) {\\n  const isDoneText = task.isDone ? 'is done' : 'is not done'\\n  return `Task '${task.description}' is ${isDoneText}.`\\n}\\n\\nexport const getTaskInfo = async ({ id }, context) => {\\n  const Task = context.entities.Task\\n  const task = await Task.findUnique({ where: { id } })\\n  if (!task) {\\n    throw new HttpError(404)\\n  }\\n  return getInfoMessage(task)\\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport HttpError from '@wasp/core/HttpError.js'\\n\\nfunction getInfoMessage(task) {\\n  const isDoneText = task.isDone ? 'is done' : 'is not done'\\n  return `Task '${task.description}' is ${isDoneText}.`\\n}\\n\\nexport const getTaskInfo = async ({ id }, context) => {\\n  const Task = context.entities.Task\\n  const task = await Task.findUnique({ where: { id } })\\n  if (!task) {\\n    throw new HttpError(404)\\n  }\\n  return getInfoMessage(task)\\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Queries (TypeScript)\nDESCRIPTION: Shows the TypeScript version of error handling in Queries, including type annotations for the Query function. It demonstrates how to throw an HttpError with custom status, message, and data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/queries.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { GetAllTasks } from '@wasp/queries/types'\nimport HttpError from '@wasp/core/HttpError.js'\n\nexport const getAllTasks: GetAllTasks = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak Auth in Wasp\nDESCRIPTION: Basic configuration for enabling Keycloak authentication in the main Wasp file. Specifies the User entity and enables Keycloak auth method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/keycloak.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      keycloak: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Wasp Client to Netlify using GitHub Actions Workflow\nDESCRIPTION: A GitHub Actions workflow configuration that automates the deployment of a Wasp web client to Netlify when changes are pushed to the main branch. The workflow installs Wasp, builds the application, configures environment variables, and deploys to Netlify using their CLI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/paas.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy Client to Netlify\n\non:\n  push:\n    branches:\n      - main # Deploy on every push to the main branch\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v2\n\n      - name: Setup Node.js\n        id: setup-node\n        uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n\n      - name: Install Wasp\n        run: curl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v 0.16.0 # Change to your Wasp version\n\n      - name: Wasp Build\n        run: wasp build\n\n      - name: Install dependencies and build the client\n        run: |\n          cd ./.wasp/build/web-app\n          npm install\n          REACT_APP_API_URL=${{ secrets.WASP_SERVER_URL }} npm run build\n\n      - name: Deploy to Netlify\n        run: |\n          cd ./.wasp/build/web-app\n          npx netlify-cli@17.36.1 deploy --prod --dir=build --auth=$NETLIFY_AUTH_TOKEN --site=$NETLIFY_SITE_NAME\n\n    env:\n      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}\n      NETLIFY_SITE_NAME: netlify-site-name\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure with schema.prisma File\nDESCRIPTION: Shows the updated project structure with the new schema.prisma file that needs to be created at the root level of the project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n.\n├── main.wasp\n...\n// highlight-next-line\n├── schema.prisma\n├── src\n├── tsconfig.json\n└── vite.config.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication in Wasp\nDESCRIPTION: Basic configuration for enabling email authentication in a Wasp application\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/ui.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  //...\n  auth: {\n    methods: {\n      email: {},\n    },\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Telemetry Payload Sent on Wasp CLI Invocation (JSON)\nDESCRIPTION: This JSON object shows the structure and example values of the anonymized telemetry data sent via HTTPS when a `wasp` CLI command is executed. It includes a randomly generated user UUID, a project hash, command details (like `is_build` or specific `deploy_cmd_args`), Wasp version, OS, and execution context (e.g., 'CI'). This data helps the Wasp team understand usage patterns and is sent no more than twice every 12 hours.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/telemetry.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Randomly generated, non-identifiable UUID representing a user.\n  \"distinct_id\": \"bf3fa7a8-1c11-4f82-9542-ec1a2d28786b\",\n  // Non-identifiable hash representing a project.\n  \"project_hash\": \"6d7e561d62b955d1\",\n  // True if command was `wasp build`, false otherwise.\n  \"is_build\": true,\n  // Captures `wasp deploy ...` args, but only those from the limited, pre-defined list of keywords.\n  // Those are \"fly\", \"setup\", \"create-db\", \"deploy\" and \"cmd\". Everything else is ommited.\n  \"deploy_cmd_args\": \"fly;deploy\",\n  \"wasp_version\": \"0.1.9.1\",\n  \"os\": \"linux\",\n  // \"CI\" if running on CI, and whatever is the content of \"WASP_TELEMETRY_CONTEXT\" env var.\n  // We use this to track when execution is happening in some special context, like on Gitpod, Replit or similar.\n  \"context\": \"CI\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Password Migration\nDESCRIPTION: Bash command to install specific versions of secure-password and sodium-native packages needed for the old password hashing algorithm compatibility during migration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpm install secure-password@4.0.0 sodium-native@3.3.0 --save-exact\n```\n\n----------------------------------------\n\nTITLE: Logging into Heroku Container Registry - Shell\nDESCRIPTION: This command logs the user into Heroku's container registry, allowing for the pushing of Docker images. It requires the Heroku CLI to be installed and authenticated on the current system. No arguments are necessary; running this command will prompt for Heroku authentication as needed.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/manually.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nheroku container:login\n\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub OAuth Environment Variables\nDESCRIPTION: This snippet shows how to set the necessary environment variables for GitHub OAuth in the .env.server file. It includes placeholders for the GitHub client ID and secret.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/github.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGITHUB_CLIENT_ID=your-github-client-id\nGITHUB_CLIENT_SECRET=your-github-client-secret\n```\n\n----------------------------------------\n\nTITLE: Prisma Preview Features Configuration\nDESCRIPTION: Example showing how to enable Prisma preview features like PostgreSQL extensions in the schema file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/prisma-file.md#2025-04-22_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider   = \"postgresql\"\n  url        = env(\"DATABASE_URL\")\n  extensions = [pgvector(map: \"vector\")]\n}\n\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"postgresqlExtensions\"]\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using Link Component with Optional Static Segment in React TSX\nDESCRIPTION: Shows how to use the Link component with a route containing an optional static segment, demonstrating both inclusion and exclusion of the optional part.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/links.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n/* You can include ... */\n<Link to=\"/task/:id/details\" params={{ id: 1 }}>\n  Task 1\n</Link>\n\n/* ... or exclude the optional segment */\n<Link to=\"/task/:id\" params={{ id: 1 }}>\n  Task 1\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Showing schema.prisma Location\nDESCRIPTION: Displays the typical directory structure of a Wasp project, highlighting the location of the schema.prisma file in the root directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/prisma-file.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── main.wasp\n...\n// highlight-next-line\n├── schema.prisma\n├── src\n├── tsconfig.json\n└── vite.config.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing a Database Seed Function in JavaScript\nDESCRIPTION: This snippet shows an example of a database seed function in JavaScript. It creates a user and a task using Prisma Client and a custom action. The function demonstrates how to work with the provided Prisma instance and import server-side functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/databases.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTask } from './actions.js'\nimport { sanitizeAndSerializeProviderData } from 'wasp/server/auth'\n\nexport const devSeedSimple = async (prisma) => {\n  const user = await createUser(prisma, {\n    username: 'RiuTheDog',\n    password: 'bark1234',\n  })\n\n  await createTask(\n    { description: 'Chase the cat' },\n    { user, entities: { Task: prisma.task } }\n  )\n}\n\nasync function createUser(prisma, data) {\n  const newUser = await prisma.user.create({\n    data: {\n      auth: {\n        create: {\n          identities: {\n            create: {\n              providerName: 'username',\n              providerUserId: data.username,\n              providerData: await sanitizeAndSerializeProviderData({\n                hashedPassword: data.password\n              }),\n            },\n          },\n        },\n      },\n    },\n  })\n\n  return newUser\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link Component with Catch-All Route in React TSX\nDESCRIPTION: Shows how to use the Link component with a catch-all route, passing the wildcard parameter.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/links.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Link to=\"/pages/*\" params={{ '*': 'about' }}>\n  About\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Browser Opening in Vite Dev Server (JavaScript)\nDESCRIPTION: Configures the Vite development server in `vite.config.js` to prevent it from automatically opening a new browser tab upon starting the Wasp application. This is achieved by setting the `server.open` option to `false`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/custom-vite-config.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"vite.config.js\"\nexport default {\n  server: {\n    open: false,\n  },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Provider Data Directly in TypeScript/TSX\nDESCRIPTION: This snippet demonstrates how to replace the old method of accessing providerData with direct access to user.identities.<provider>.<value> in a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  // The email object is properly typed, so we can access `isEmailVerified` directly\n  const isEmailVerified = user.identities.email?.isEmailVerified\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Datasource Block for PostgreSQL in schema.prisma\nDESCRIPTION: Definition of the datasource block for PostgreSQL in the schema.prisma file, specifying the database provider and connection URL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Generator in Prisma Schema for Wasp\nDESCRIPTION: Shows the required generator block configuration in the schema.prisma file for Wasp, specifying the Prisma client provider.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/prisma-file.md#2025-04-22_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth UI Colors with JavaScript\nDESCRIPTION: Defines custom color tokens for authentication UI components using Stitches theming system. Specifies brand colors and button text color.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/ui.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const authAppearance = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Seed Functions with Wasp in JavaScript (Wasp)\nDESCRIPTION: This snippet demonstrates how to import multiple (including named) seed functions into the seeds array within the db configuration in main.wasp for a JavaScript Wasp project. Here, devSeedSimple is imported from an external file, registering it as a callable seed function that can be invoked via the Wasp CLI. This approach supports multiple seeding strategies or environments by distinguishing functions by name. Dependencies include defining and exporting the desired seed functions in the specified source file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/backends.md#2025-04-22_snippet_8\n\nLANGUAGE: Wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    seeds: [\n      // ...\n      import { devSeedSimple } from \"@src/dbSeeds.js\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp App Client (JavaScript)\nDESCRIPTION: Basic Wasp application configuration showing client setup with JavaScript, including root component and setup function imports.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/client-config.md#2025-04-22_snippet_11\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.jsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Wasp Application for Deployment\nDESCRIPTION: Command to generate deployable code for a Wasp application in the .wasp/build/ directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasp build\n```\n\n----------------------------------------\n\nTITLE: Defining a Task Entity Schema with Prisma - Prisma\nDESCRIPTION: This snippet defines a simple 'Task' model using Prisma in the 'schema.prisma' file. It declares three fields: a unique auto-incrementing 'id', a 'description' string, and a 'isDone' boolean flag. This model forms the basis for all subsequent database and entity operations related to tasks. Dependencies: Prisma ORM; place this model in the 'schema.prisma' file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/general/typescript.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\n// ...\\n\\nmodel Task {\\n  id          Int @id @default(autoincrement())\\n  description String\\n  isDone      Boolean\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions with Entities (JavaScript)\nDESCRIPTION: Shows how to implement Actions that use Entities in JavaScript. It demonstrates creating and updating tasks using the Prisma API provided by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// The 'args' object is the payload sent by the caller (most often from the client)\nexport const createTask = async (args, context) => {\n  const newTask = await context.entities.Task.create({\n    data: {\n      description: args.description,\n      isDone: false,\n    },\n  })\n  return newTask\n}\n\nexport const markTaskAsDone = async (args, context) => {\n  await context.entities.Task.update({\n    where: { id: args.id },\n    data: { isDone: true },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Wasp Query in a React Component\nDESCRIPTION: This snippet shows how to use a Wasp query within a React component. It demonstrates the simplicity of data fetching in Wasp, which handles caching automatically using React Query under the hood.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-03-08-building-a-full-stack-app-supabase-vs-wasp.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst { data: phrases, isLoading } = useQuery(fetchAllPhrases);\n```\n\n----------------------------------------\n\nTITLE: Updating Wasp Client URL for Custom Dev Server Port (Env)\nDESCRIPTION: Updates the `WASP_WEB_CLIENT_URL` environment variable in the `.env.server` file to reflect a custom Vite development server port (e.g., 4000). This adjustment is necessary when the default port is changed in `vite.config.js` or `vite.config.ts` to ensure Wasp correctly communicates with the client.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/custom-vite-config.md#2025-04-22_snippet_3\n\nLANGUAGE: env\nCODE:\n```\n```env title=\".env.server\"\nWASP_WEB_CLIENT_URL=http://localhost:4000\n```\n```\n\n----------------------------------------\n\nTITLE: Feature-Based Project Structure Example\nDESCRIPTION: Demonstrates the recommended feature-based directory structure for Wasp projects after version 0.12.x.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc\n│\n├── task\n│   ├── actions.ts    -- former taskActions.ts\n│   ├── queries.ts    -- former taskQueries.ts\n│   ├── Task.css\n│   ├── TaskLisk.tsx\n│   └── Task.tsx\n├── user\n│   ├── actions.ts    -- former userActions.ts\n│   ├── Dashboard.tsx\n│   ├── Login.tsx\n│   ├── queries.ts    -- former userQueries.ts\n│   ├── Register.tsx\n│   └── User.tsx\n├── MainPage.tsx\n└── utils.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing Queries in JavaScript\nDESCRIPTION: JavaScript implementation of query functions for fetching tasks with optional filtering.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/queries.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tasks = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\nexport const getAllTasks = () => {\n  return tasks\n}\n\nexport const getFilteredTasks = (args) => {\n  const { isDone } = args\n  return tasks.filter((task) => task.isDone === isDone)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the WASP_SERVER_URL Environment Variable in Bash\nDESCRIPTION: Defines the required `WASP_SERVER_URL` server environment variable introduced in Wasp 0.13.0. This variable specifies the URL of the Wasp server and is used for generating OAuth redirect URLs. In development, it defaults to `http://localhost:3001` but must be set explicitly in production.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nWASP_SERVER_URL=https://your-wasp-server-url.com\n```\n\n----------------------------------------\n\nTITLE: Configuring App Authentication in Wasp\nDESCRIPTION: Main Wasp application configuration including authentication setup and route definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/crud.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp tasksCrudApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"Tasks Crud App\",\n\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Internal `Auth` Entity in Wasp's Prisma Schema\nDESCRIPTION: Presents the Prisma schema for Wasp's internal `Auth` entity. This entity links the business logic `User` entity (via `userId`) to authentication identities (`AuthIdentity`) and sessions (`Session`). It is managed internally by Wasp and includes relations to the User, AuthIdentity, and Session entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/entities.md#2025-04-22_snippet_14\n\nLANGUAGE: prisma\nCODE:\n```\n```prisma\nmodel Auth {\n  id         String         @id @default(uuid())\n  userId     Int?           @unique\n  // Wasp injects this relation on the User entity as well\n  user       User?          @relation(fields: [userId], references: [id], onDelete: Cascade)\n  identities AuthIdentity[]\n  sessions   Session[]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Provider Config Function for Discord OAuth - TypeScript\nDESCRIPTION: A minimal provider configuration function for Discord OAuth in TypeScript, suitable for reference in Wasp configuration. Returns an empty scopes array, which can be edited to add additional OAuth scope parameters as needed. No dependencies or inputs; outputs a plain configuration object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/discord.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getConfig() {\n  return {\n    scopes: [],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: New Project Structure Tree (Wasp 0.12.0)\nDESCRIPTION: File tree representation of a project created with Wasp 0.12.0 showing the new simplified directory structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.\n├── .gitignore\n├── main.wasp\n├── package.json\n├── public\n│   └── .gitkeep\n├── src\n│   ├── Main.css\n│   ├── MainPage.jsx\n│   ├── queries.ts\n│   ├── vite-env.d.ts\n│   ├── .waspignore\n│   └── waspLogo.png\n├── tsconfig.json\n├── vite.config.ts\n└── .wasproot\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Environment Variables in JavaScript\nDESCRIPTION: Demonstrates how to import and use client environment variables in a JavaScript React component using the Wasp client env object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/env-vars.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { env } from 'wasp/client'\n\nconsole.log(env.REACT_APP_SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Submitting a Job in JavaScript\nDESCRIPTION: Example of submitting a job and scheduling it for delayed execution in JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/jobs.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mySpecialJob } from '@wasp/jobs/mySpecialJob.js'\n\nconst submittedJob = await mySpecialJob.submit({ job: \"Johnny\" })\n\n// Or, if you'd prefer it to execute in the future, just add a .delay().\n// It takes a number of seconds, Date, or ISO date string.\nawait mySpecialJob\n  .delay(10)\n  .submit({ name: \"Johnny\" })\n```\n\n----------------------------------------\n\nTITLE: Basic Wasp App Configuration\nDESCRIPTION: Basic example of configuring a Wasp app with version and title specifications, including custom stylesheet in head.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/customizing-app.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"ToDo App\",\n  head: [\n    \"<link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\\\" />\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Link Component with Catch-All Route\nDESCRIPTION: Demonstrates how to use the Link component with a catch-all route in a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/links.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Link to=\"/pages/*\" params={{ '*': 'about' }}>\n  About\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Redirect Hook in Wasp (TypeScript) - wasp\nDESCRIPTION: Registers a TypeScript 'onBeforeOAuthRedirect' hook in main.wasp, linking Wasp's authentication process to a user-implemented hook. The imported function should be defined in TypeScript and conform to Wasp's expected hook type. Ensures custom pre-OAuth redirect logic is triggered as part of the app's authentication lifecycle.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  ...\n  auth: {\n    ...\n    onBeforeOAuthRedirect: import { onBeforeOAuthRedirect } from \"@src/auth/hooks\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Starting PostgreSQL Database for Wasp Development\nDESCRIPTION: Command to start a PostgreSQL database locally using Docker through the Wasp CLI for development purposes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/examples/waspello/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwasp start db\n```\n\n----------------------------------------\n\nTITLE: Setting Up Root TypeScript Configuration\nDESCRIPTION: Root TypeScript configuration file that references both source and Wasp specific configurations\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/general/wasp-ts-config.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files\": [],\n  \"references\": [\n    { \"path\": \"./tsconfig.src.json\" },\n    { \"path\": \"./tsconfig.wasp.json\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Twitter Authentication Tokens in Environment Variables\nDESCRIPTION: This code snippet demonstrates how to store the Twitter authentication tokens obtained from the getTwitterTokens script in the .env.server file. These tokens are used for authenticating with Twitter's API.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n# TOKENS -- fill these in after running the getTwitterTokens script in the Twitter Scraping section\nKDT='...'\nTWID='...'\nCT0='...'\nAUTH_TOKEN='...'\n```\n\n----------------------------------------\n\nTITLE: React Component Test with Mocked Query in JavaScript\nDESCRIPTION: Demonstrates how to test a React component that uses a Wasp query, mocking the query data and rendering the component in context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/testing.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useQuery, getTasks } from \"wasp/client/operations\";\n\nconst Todo = (_props) => {\n  const { data: tasks } = useQuery(getTasks);\n  return (\n    <ul>\n      {tasks &&\n        tasks.map((task) => (\n          <li key={task.id}>\n            <input type=\"checkbox\" value={task.isDone} />\n            {task.description}\n          </li>\n        ))}\n    </ul>\n  );\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from \"vitest\";\nimport { screen } from \"@testing-library/react\";\n\nimport { mockServer, renderInContext } from \"wasp/client/test\";\nimport { getTasks } from \"wasp/client/operations\";\nimport Todo from \"./Todo\";\n\nconst { mockQuery } = mockServer();\n\nconst mockTasks = [\n  {\n    id: 1,\n    description: \"test todo 1\",\n    isDone: true,\n    userId: 1,\n  },\n];\n\ntest(\"handles mock data\", async () => {\n  mockQuery(getTasks, mockTasks);\n\n  renderInContext(<Todo />);\n\n  await screen.findByText(\"test todo 1\");\n\n  expect(screen.getByRole(\"checkbox\")).toBeChecked();\n\n  screen.debug();\n});\n```\n\n----------------------------------------\n\nTITLE: Individual Deployment Commands\nDESCRIPTION: Sequence of individual commands that make up the launch process for deploying to Fly.io.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/cli.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly setup my-wasp-app mia\nwasp deploy fly create-db mia\nwasp deploy fly deploy\n```\n\n----------------------------------------\n\nTITLE: Accessing Job Status with SubmittedJob Interface\nDESCRIPTION: Interface showing the structure of SubmittedJob object returned by submit() method. Contains job identification and tracking information including jobId, jobName, and executorName.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/jobs.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SubmittedJob {\n  jobId: string;\n  jobName: string;\n  executorName: Symbol;\n  pgBoss: {\n    details(): Promise<any>;\n    cancel(): Promise<void>;\n    resume(): Promise<void>;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Router Application for API-Specific Middleware\nDESCRIPTION: This conceptual JavaScript snippet shows how Wasp applies API-specific middleware behind the scenes. It indicates that the middleware defined by `webhookCallbackMiddlewareFn` is inserted into the Express router specifically for the `POST` method on the `/webhook/callback` path, before the actual API handler.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/middleware-config.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nrouter.post('/webhook/callback', webhookCallbackMiddleware, ...)\n```\n\n----------------------------------------\n\nTITLE: Updating OAuth Provider Configuration Function in TypeScript (After)\nDESCRIPTION: The updated implementation of the OAuth provider configuration function that only includes the scopes property renamed from scope. Client ID and Client Secret are no longer required in the returned object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getConfig() {\n    return {\n        scopes: ['profile', 'email'],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth UI Components\nDESCRIPTION: React components for authentication pages including login form and layout\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/google.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"h-full w-full bg-white\">\n      <div className=\"flex min-h-[75vh] min-w-full items-center justify-center\">\n        <div className=\"h-full w-full max-w-sm bg-white p-5\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Vite Dev Server Port (TypeScript - Config)\nDESCRIPTION: Sets the Vite development server port to 4000 within the `vite.config.ts` file using `defineConfig` by configuring the `server.port` option. This configuration requires the `vite` package for `defineConfig` and necessitates a corresponding update to the `WASP_WEB_CLIENT_URL` environment variable in the `.env.server` file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/custom-vite-config.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"vite.config.ts\"\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  server: {\n    port: 4000,\n  },\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing a Fly.io Application\nDESCRIPTION: Launches a new Fly.io application for hosting the Wasp backend with remote building enabled. This creates a fly.toml configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/manually.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflyctl launch --remote-only\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Prisma Schema\nDESCRIPTION: Prisma schema definition for the User entity with an additional address field that will be populated during signup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_11\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id      Int     @id @default(autoincrement())\n  address String?\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .dockerignore for Railway Client Deployment\nDESCRIPTION: A simple .dockerignore file that excludes the node_modules directory from the Docker build context when deploying the client to Railway.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/manually.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnode_modules/\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeSignup Hook\nDESCRIPTION: Authentication hook that runs before user signup. Receives providerId, prisma, and req as input parameters. The hook's return value is ignored by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/auth-hooks.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const onBeforeSignup = async ({ providerId, prisma, req }) => {\n  // Hook code goes here\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OnBeforeSignupHook } from 'wasp/server/auth'\n\nexport const onBeforeSignup: OnBeforeSignupHook = async ({\n  providerId,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Client Environment Variable with Vite (TypeScript)\nDESCRIPTION: Shows how to retrieve a client environment variable from import.meta.env in TypeScript, tailored for Wasp projects using Vite. The variable must start with REACT_APP_ and be available in the build context (such as declared in .env.client). Prints REACT_APP_SOME_VAR_NAME to the console. Intended for non-sensitive values, as client env vars are public.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/env-vars.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconsole.log(import.meta.env.REACT_APP_SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Building Wasp Web App for Production\nDESCRIPTION: Command to install dependencies and build the web app for production with the API URL environment variable. This connects the front-end to the previously deployed Wasp backend.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/_building-the-web-client.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install && REACT_APP_API_URL=<url_to_wasp_backend> npm run build\n```\n\n----------------------------------------\n\nTITLE: Basic Social Auth Entity Configuration in Wasp\nDESCRIPTION: Demonstrates the basic setup of User and SocialLogin entities for social authentication in a Wasp application, including required fields and relationships.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      google: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    //...\n    externalAuthAssociations  SocialLogin[]\npsl=}\n\nentity SocialLogin {=psl\n  id          Int       @id @default(autoincrement())\n  provider    String\n  providerId  String\n  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId      Int\n  createdAt   DateTime  @default(now())\n  @@unique([provider, providerId, userId])\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Simplifying MainPage Component for Cleanup (TypeScript)\nDESCRIPTION: Shows a simplified version of the `MainPage` component in `src/MainPage.tsx` after cleaning up the starter code. It now only returns a simple `div` containing 'Hello world!', removing previous imports and logic.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/03-pages.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/MainPage.tsx\"\nexport const MainPage = () => {\n  return <div>Hello world!</div>\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Configuration in Wasp\nDESCRIPTION: Demonstrates how to import and access the server configuration object, which contains the frontendUrl field that can be set via WASP_WEB_CLIENT_URL environment variable.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/accessing-app-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { config } from 'wasp/server'\n\nconsole.log(config.frontendUrl)\n```\n\n----------------------------------------\n\nTITLE: Sample Structure for Public Directory Assets\nDESCRIPTION: Illustrates the directory structure for placing files in the 'public' folder, which ensures they are served with their exact filenames and accessible at the application root. This is ideal for files not referenced in the code or needing a fixed path (e.g., 'robots.txt'). There are no programming dependencies for this, but the structure must exist at the project root. Assets are accessible directly via root URLs, and not importable from code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/static-assets.md#2025-04-22_snippet_2\n\nLANGUAGE: \nCODE:\n```\n.\\n└── public\\n    ├── favicon.ico\\n    └── robots.txt\n```\n\n----------------------------------------\n\nTITLE: Prisma Preview Features Configuration in schema.prisma\nDESCRIPTION: The equivalent Prisma preview features and database extensions configuration in the schema.prisma file after migration from the Wasp file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_16\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n  // highlight-next-line\n  extensions = [hstore(schema: \"myHstoreSchema\"), pg_trgm, postgis(version: \"2.1\")]\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  // highlight-next-line\n  previewFeatures = [\"postgresqlExtensions\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Default Wasp Project Structure (JavaScript)\nDESCRIPTION: Illustrates the standard directory and file layout for a new Wasp project configured for JavaScript. Key files include `main.wasp` for Wasp configuration, `schema.prisma` for database schema, `package.json` for dependencies, and the `src` directory containing frontend source code like `MainPage.jsx`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/02-project-structure.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── .gitignore\n├── main.wasp          # Your Wasp code goes here.\n├── schema.prisma      # Your Prisma schema goes here.\n├── package.json       # Your dependencies and project info go here.\n├── public             # Your static files (e.g., images, favicon) go here.\n├── src                # Your source code (TS/JS/CSS/HTML) goes here.\n│   ├── Main.css\n│   ├── MainPage.jsx\n│   ├── vite-env.d.ts\n│   └── waspLogo.png\n├── tsconfig.json\n├── vite.config.ts\n├── .waspignore\n└── .wasproot\n```\n\n----------------------------------------\n\nTITLE: GitHub Auth Configuration Override\nDESCRIPTION: Custom configuration for GitHub authentication with user signup fields\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/github.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const userSignupFields = defineUserSignupFields({\n  username: () => \"hardcoded-username\",\n  displayName: (data) => data.profile.displayName,\n})\n\nexport function getConfig() {\n  return {\n    clientID,\n    clientSecret,\n    scope: [],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Note About Wasp Installation in Markdown\nDESCRIPTION: This code block creates a note in the documentation, reminding users that Wasp should be installed before proceeding with editor setup. It uses Markdown syntax with a custom 'note' directive.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/introduction/editor-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:::note\nThis page assumes you have already installed Wasp. If you do not have Wasp installed yet, check out the [Quick Start](./quick-start.md) guide.\n:::\n```\n\n----------------------------------------\n\nTITLE: Updating getTasks Query with Authentication Check in JavaScript\nDESCRIPTION: Modifies the getTasks query to check for user authentication and retrieve only the logged-in user's tasks. Throws a 401 error if the user is not authenticated.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/07-auth.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport HttpError from '@wasp/core/HttpError.js'\n\nexport const getTasks = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.findMany({\n    where: { user: { id: context.user.id } },\n    orderBy: { id: 'asc' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Declaration in Wasp\nDESCRIPTION: Shows how to declare entities for use in Actions within the Wasp configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/actions.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\naction createTask {\n  fn: import { createTask } from \"@src/actions.js\",\n  entities: [Task]\n}\n\naction markTaskAsDone {\n  fn: import { markTaskAsDone } from \"@src/actions.js\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Provider with Scopes (After, TypeScript)\nDESCRIPTION: Presents the revised getConfig function now required in Wasp 0.13.X, showing the replacement of the scope property with scopes and removal of clientID/clientSecret from the return object. This change is due to the upgrade to Arctic-based providers. This snippet no longer relies on secure environment variables for client credentials directly in the config, only the array of scopes. Input: none; Output: configuration object with scopes array for the authentication library.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getConfig() {\n    return {\n        scopes: ['profile', 'email'],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal MainPage Component After Cleanup (JavaScript)\nDESCRIPTION: Defines a simplified MainPage React component that renders a static 'Hello world!' message for demonstration purposes. Meant for cleaning up template code in the starter project before building new features. Has no dependencies except React. Input: none; Output: static JSX content.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/03-pages.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nexport const MainPage = () => {\n  return <div>Hello world!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Client Setup Function (JavaScript)\nDESCRIPTION: Example of an asynchronous setup function in JavaScript that runs before client initialization.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/client-config.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function mySetupFunction() {\n  // Run some code\n}\n```\n\n----------------------------------------\n\nTITLE: Using updateTask Action in React Component (TypeScript)\nDESCRIPTION: This snippet shows how to use the 'updateTask' action in a TypeScript React component. It includes type annotations for the event handler and task prop.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/06-actions.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormEvent, ChangeEvent } from 'react'\nimport { Task } from 'wasp/entities'\nimport {\n  updateTask,\n  createTask,\n  getTasks,\n  useQuery,\n} from 'wasp/client/operations'\n\nconst TaskView = ({ task }: { task: Task }) => {\n  const handleIsDoneChange = async (event: ChangeEvent<HTMLInputElement>) => {\n    try {\n      await updateTask({\n        id: task.id,\n        isDone: event.target.checked,\n      })\n    } catch (error: any) {\n      window.alert('Error while updating task: ' + error.message)\n    }\n  }\n\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        id={String(task.id)}\n        checked={task.isDone}\n        onChange={handleIsDoneChange}\n      />\n      {task.description}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Schema\nDESCRIPTION: Prisma schema definition for the User entity with basic ID field required for authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/username-and-pass.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub OAuth Environment Variables\nDESCRIPTION: This snippet shows how to set the necessary environment variables for GitHub OAuth in the .env.server file. It includes placeholders for the client ID and secret.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/github.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGITHUB_CLIENT_ID=your-github-client-id\nGITHUB_CLIENT_SECRET=your-github-client-secret\n```\n\n----------------------------------------\n\nTITLE: Fixed Todo App with TypeScript Error Corrections\nDESCRIPTION: The final version of the Todo application with all TypeScript errors fixed. This includes handling nullable data, correcting property names, and fixing typos in field names.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-29-typescript-feature-announcement.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ntype Task = {\n  id: string\n  description: string\n  isDone: boolean\n}\nfunction MainPage() {\n  const { data: tasks } = useQuery<Task, Task[]>(getTasks)\n\n  return (\n    <div>\n      <h1>Todos</h1>\n      // highlight-next-line\n      {tasks && <TaskList tasks={tasks} />}\n    </div>\n  )\n}\n\nfunction TaskList({ tasks }: { tasks: Task[] }) {\n  // highlight-next-line\n  if (!tasks.length) {\n    return <div>No tasks</div>\n  }\n\n  return (\n    <div>\n      {tasks.map((task, idx) => <Task {...task} key={idx} />)}\n    </div>\n  )\n}\n\n\n\n// highlight-next-line\nfunction Task({ id, isDone, description }: Task) {\n  return (\n    <div>\n      <label>\n        <input\n          type='checkbox'\n          id={id}\n          // highlight-next-line\n          checked={isDone}\n          onChange={\n            (event) => updateTask({ id, isDone: event.target.checked })\n          }\n        />\n        <span>{description}</span>\n      </label>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Route in JavaScript\nDESCRIPTION: Example of adding a custom route using the setup function in JavaScript\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/server-config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const mySetupFunction = async ({ app }) => {\n  addCustomRoute(app)\n}\n\nfunction addCustomRoute(app) {\n  app.get('/customRoute', (_req, res) => {\n    res.send('I am a custom route')\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SendGrid Provider in Wasp\nDESCRIPTION: Shows how to set up the SendGrid provider in the main.wasp file for email sending.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/email.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: SendGrid,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Email Auth User Data in TypeScript\nDESCRIPTION: Example of AuthUser object structure when a user has signed up with Email authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/entities/entities.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = {\n  // User data\n  id: 'cluqsex9500017cn7i2hwsg17',\n  address: 'Some address',\n\n  // Auth methods specific data\n  identities: {\n    email: {\n      id: 'user@app.com',\n      isEmailVerified: true,\n      emailVerificationSentAt: '2024-04-08T10:06:02.204Z',\n      passwordResetSentAt: null,\n    },\n    google: null,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Wasp App Client with Root Component and Setup (TypeScript, WASP)\nDESCRIPTION: Defines a Wasp app for TypeScript projects with additional client options. Specifies app title, imports a TypeScript/TSX React root component, and a TypeScript setup function. Also demonstrates 'baseDir' configuration to serve the app from a subdirectory. Dependencies include referenced TS/TSX files. Parameters include app name, title, client imports, and baseDir. Suitable for TypeScript-based setups that require serving from a subdirectory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/client-config.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.tsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.ts\",\n    baseDir: \"/my-app\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Migration Command\nDESCRIPTION: Command for migrating the database schema to support the new auth system.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: New OAuth Redirect URL Format (Wasp 0.13.0+)\nDESCRIPTION: Shows the updated format of the OAuth redirect URL required in Wasp 0.13.0 and later. This URL now uses the server URL (defined by `WASP_SERVER_URL`) and a specific callback path for the provider. This updated URL must be configured in the OAuth provider's dashboard.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{serverUrl}/auth/{provider}/callback\n```\n\n----------------------------------------\n\nTITLE: Opening .profile File in VS Code\nDESCRIPTION: Command to open the .profile file in VS Code for editing PATH.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-11-21-guide-windows-development-wasp-wsl.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncode ~/.profile\n```\n\n----------------------------------------\n\nTITLE: Generating Deployable Wasp Code\nDESCRIPTION: Use the 'wasp build' command to generate deployable code for the entire Wasp application in the .wasp/build/ directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/manually.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasp build\n```\n\n----------------------------------------\n\nTITLE: Logging in to Heroku Container Registry - Shell\nDESCRIPTION: Logs the user into Heroku's container registry to enable building and pushing Docker images to Heroku. This command requires the Heroku CLI to be installed and the user to have valid Heroku credentials. No parameters are needed and upon success, establishes a session for subsequent container operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/manually.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nheroku container:login\n```\n\n----------------------------------------\n\nTITLE: Adding a Tip Box in Markdown\nDESCRIPTION: This code demonstrates how to create a tip box in Markdown using Docusaurus's admonition syntax, providing a quick link to a starter template.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-28-what-can-you-build-with-wasp.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n:::tip\n\nIf you're looking for a quick way to start your project, check out our [Ultimate SaaS Starter](https://github.com/wasp-lang/SaaS-Template-GPT). It packs Tailwind, GPT, Stripe ane other popular integrations, all pre-configured for you.\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Defining Client Environment Variables Validation in TypeScript\nDESCRIPTION: Creates a validation schema for client environment variables that requires REACT_APP_ANALYTICS_ID to be provided as a string, with type checking ensured by defineEnvValidationSchema.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/env-vars.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as z from 'zod'\n\nimport { defineEnvValidationSchema } from 'wasp/env'\n\nexport const envValidationSchema = defineEnvValidationSchema(\n  z.object({\n    REACT_APP_ANALYTICS_ID: z.string({\n      required_error: 'REACT_APP_ANALYTICS_ID is required.',\n    }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring updateTask Action in Wasp\nDESCRIPTION: This snippet shows how to declare the 'updateTask' action in the main.wasp file. It imports the action function and specifies the entities it interacts with.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/06-actions.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\naction updateTask {\n  fn: import { updateTask } from \"@src/actions\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: API-Specific Middleware Implementation in JavaScript\nDESCRIPTION: JavaScript implementation of an API-specific middleware function that replaces the default JSON middleware with raw body parsing for a webhook endpoint.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/middleware-config.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express'\n\nexport const webhookCallback = (req, res, _context) => {\n  res.json({ msg: req.body.length })\n}\n\nexport const webhookCallbackMiddlewareFn = (middlewareConfig) => {\n  console.log('webhookCallbackMiddlewareFn: Swap express.json for express.raw')\n\n  middlewareConfig.delete('express.json')\n  middlewareConfig.set('express.raw', express.raw({ type: '*/*' }))\n\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Preview Features Configuration\nDESCRIPTION: Example of enabling Prisma preview features for PostgreSQL extensions support.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/prisma-file.md#2025-04-22_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider   = \"postgresql\"\n  url        = env(\"DATABASE_URL\")\n  extensions = [pgvector(map: \"vector\")]\n}\n\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"postgresqlExtensions\"]\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp App with Social Authentication and Routes\nDESCRIPTION: This code snippet provides a skeleton for the main.wasp configuration file. It includes placeholders for setting up social authentication in the app configuration and defining login-related routes and pages.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/_wasp-file-structure-note.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n// Configuring the social authentication\napp myApp {\n  auth: { ... }\n}\n\n// Defining routes and pages\nroute LoginRoute { ... }\npage LoginPage { ... }\n```\n\n----------------------------------------\n\nTITLE: Using routes Object with Optional Static Segment\nDESCRIPTION: Demonstrates how to use the routes object with a route containing an optional static segment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/links.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst linkToOptional = routes.OptionalRoute.build({\n  path: '/task/:id/details', // or '/task/:id'\n  params: { id: 1 },\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Task Component without Optimistic Updates in React\nDESCRIPTION: This React component renders a task with a checkbox to toggle its status, using the updateTask action without optimistic updates.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-30-optimistic-update-feature-announcement.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport updateTask from '@wasp/queries'\n\nfunction Task({ id, isDone, description }) {\n  return (\n    <div className=\"task\">\n      <label className=\"description\">\n        <input\n          type='checkbox' id={id}\n          checked={isDone}\n          onChange={\n            (e) => updateTask({ id, isDone: e.target.checked })\n          }\n        /><span>{description}</span></label>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Auth and User Entities in Wasp 0.11.X – Wasp with PSL\nDESCRIPTION: This snippet shows how authentication and user entities are declared in a Wasp 0.11.X project. Dependencies include PSL for entities (Prisma Schema Language); providers like GitHub require their own configuration. The 'auth' section configures user and external auth associations. Inputs are classic Wasp/PSL entity definitions. Outputs: a project manifest describing app meta, supported login methods, and ORM models for users and social login. Limitation: developers must manage password/email fields and relational associations manually.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\nentity User {=psl\n  id                        Int           @id @default(autoincrement())\n  // highlight-start\n  username                  String        @unique\n  password                  String\n  externalAuthAssociations  SocialLogin[]\n  // highlight-end\npsl=}\n\n\n// highlight-start\nentity SocialLogin {=psl\n  id          Int       @id @default(autoincrement())\n  provider    String\n  providerId  String\n  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId      Int\n  createdAt   DateTime  @default(now())\n  @@unique([provider, providerId, userId])\npsl=}\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Defining Default Global Middleware in JavaScript\nDESCRIPTION: This snippet shows the default global middleware configuration in a Wasp application using JavaScript. It includes middleware such as Helmet, CORS, Morgan, express.json, express.urlencoded, and cookieParser.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/middleware-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultGlobalMiddleware = new Map([\n  ['helmet', helmet()],\n  ['cors', cors({ origin: config.allowedCORSOrigins })],\n  ['logger', logger('dev')],\n  ['express.json', express.json()],\n  ['express.urlencoded', express.urlencoded({ extended: false })],\n  ['cookieParser', cookieParser()]\n])\n```\n\n----------------------------------------\n\nTITLE: Complete schema.prisma for PostgreSQL with Sample Entities\nDESCRIPTION: A complete schema.prisma file for PostgreSQL, including datasource, generator, and sample User and Task entities with their relationships.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_11\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\n// There are some example entities, you should move your entities here\n// highlight-start\nmodel User {\n  id       Int @id @default(autoincrement())\n  tasks    Task[]\n}\n\nmodel Task {\n  id          Int @id @default(autoincrement())\n  description String\n  isDone      Boolean\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\n}\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Email Verification Content Generator\nDESCRIPTION: Function to generate custom email content for verification emails, including subject and HTML/text content.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/email.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getVerificationEmailContent: GetVerificationEmailContentFn = ({\n  verificationLink,\n}) => ({\n  subject: 'Verify your email',\n  text: `Click the link below to verify your email: ${verificationLink}`,\n  html: `\n        <p>Click the link below to verify your email</p>\n        <a href=\"${verificationLink}\">Verify email</a>\n    `,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Dummy Email Provider\nDESCRIPTION: Configures the Dummy email provider in a Wasp application. This provider is intended for development purposes and logs emails to the console instead of actually sending them.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/email/email.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: Dummy,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Client in Setup Function (JavaScript)\nDESCRIPTION: This snippet shows how to configure the query client in the setup function of a Wasp application using JavaScript. It demonstrates changing the default stale time for all queries.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/client-config.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureQueryClient } from 'wasp/client/operations'\n\nexport default async function mySetupFunction() {\n  // ... some setup\n  configureQueryClient({\n    defaultOptions: {\n      queries: {\n        staleTime: Infinity,\n      },\n    },\n  })\n  // ... some more setup\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Signup Fields in TypeScript\nDESCRIPTION: This snippet shows the TypeScript implementation of the userSignupFields object, including field validation logic.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining the Internal `Session` Entity in Wasp's Prisma Schema\nDESCRIPTION: Outlines the Prisma schema for Wasp's internal `Session` entity. This entity stores user session information, including a unique session ID (`id`), expiration timestamp (`expiresAt`), and a foreign key (`userId`) linking to the `Auth` entity, enabling persistent user logins across page refreshes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/entities.md#2025-04-22_snippet_16\n\nLANGUAGE: prisma\nCODE:\n```\n```prisma\nmodel Session {\n  id        String   @id @unique\n  expiresAt DateTime\n  userId    String\n  auth      Auth     @relation(references: [id], fields: [userId], onDelete: Cascade)\n\n  @@index([userId])\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Individual Deployment Steps for Fly.io\nDESCRIPTION: These commands show the individual steps that are executed when launching a Wasp app on Fly.io, including setup, database creation, and deployment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/cli.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly setup my-wasp-app mia\nwasp deploy fly create-db mia\nwasp deploy fly deploy\n```\n\n----------------------------------------\n\nTITLE: Starting Wasp Application from Command Line\nDESCRIPTION: Command to start a Wasp application. This installs necessary npm packages, starts the NodeJS server on port 3001, and the React client on port 3000.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwasp start\n```\n\n----------------------------------------\n\nTITLE: HelloPage Component with useParams Hook (JavaScript)\nDESCRIPTION: Implements a React functional component named HelloPage that reads the 'name' parameter from the route using react-router-dom's useParams hook. Displays dynamic content based on the parameter. Requires react-router-dom to be installed. Input: route parameter; Output: GREETS the specified name.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/03-pages.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useParams } from 'react-router-dom'\n\nexport const HelloPage = () => {\n  const { name } = useParams()\n  return <div>Here's {name}!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Original Project Structure Example\nDESCRIPTION: Shows the typical directory structure of a Wasp project before version 0.12.x, with separate client and server directories.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc\n│\n├── client\n│   ├── Dashboard.tsx\n│   ├── Login.tsx\n│   ├── MainPage.tsx\n│   ├── Register.tsx\n│   ├── Task.css\n│   ├── TaskLisk.tsx\n│   ├── Task.tsx\n│   └── User.tsx\n├── server\n│   ├── taskActions.ts\n│   ├── taskQueries.ts\n│   ├── userActions.ts\n│   └── userQueries.ts\n└── shared\n    └── utils.ts\n```\n\n----------------------------------------\n\nTITLE: Setting Server Environment Variables After Deployment\nDESCRIPTION: Command to set server-side environment variables for an already deployed Wasp application on Fly.io using the secrets set command.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/cli.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd secrets set GOOGLE_CLIENT_ID=<...> GOOGLE_CLIENT_SECRET=<...> --context=server\n```\n\n----------------------------------------\n\nTITLE: HelloPage Component with useParams Hook (TypeScript)\nDESCRIPTION: Implements the HelloPage functional component in TypeScript, using react-router-dom's useParams hook with typing for the 'name' parameter. This ensures type safety for route params. Requires TypeScript and react-router-dom v6 or higher. Input: typed route parameter; Output: renders greeting with the user's name.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/03-pages.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useParams } from 'react-router-dom'\n\nexport const HelloPage = () => {\n  const { name } = useParams<'name'>()\n  return <div>Here's {name}!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Wasp Application\nDESCRIPTION: Commands to navigate to the newly created project directory and start the Wasp application, which serves both frontend and backend at localhost:3000.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/introduction/quick-start.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd <my-project-name>\nwasp start\n```\n\n----------------------------------------\n\nTITLE: Implementing a Job Function in JavaScript\nDESCRIPTION: This code shows how to implement the 'foo' function for the 'mySpecialJob' in JavaScript. It demonstrates handling input arguments and using the context object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/jobs.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const foo = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Password using Wasp Client Auth (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to use the `resetPassword` action from `wasp/client/auth`. It's used in the password reset page component (specified by `passwordReset.clientRoute`) to send the new password and the reset token (obtained from the URL) to the server to finalize the password update.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/email.md#2025-04-22_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/pages/PasswordResetPage.jsx\"\nimport { resetPassword } from 'wasp/client/auth'\n...\nawait resetPassword({ password, token })\n```\n```\n\n----------------------------------------\n\nTITLE: Using updateTask in React Component (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the 'updateTask' action in a React component. It handles the checkbox change event to update the task's status.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/06-actions.md#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  updateTask,\n  createTask,\n  getTasks,\n  useQuery,\n} from 'wasp/client/operations'\n\nconst TaskView = ({ task }) => {\n  const handleIsDoneChange = async (event) => {\n    try {\n      await updateTask({\n        id: task.id,\n        isDone: event.target.checked,\n      })\n    } catch (error) {\n      window.alert('Error while updating task: ' + error.message)\n    }\n  }\n\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        id={String(task.id)}\n        checked={task.isDone}\n        onChange={handleIsDoneChange}\n      />\n      {task.description}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Configuration in Wasp\nDESCRIPTION: Demonstrates how to import and access the client configuration object which contains the apiUrl field. This configuration is used by the frontend to know the server's URL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/accessing-app-config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { config } from 'wasp/client'\n\nconsole.log(config.apiUrl)\n```\n\n----------------------------------------\n\nTITLE: Client Unit Test for Helper Function in JavaScript\nDESCRIPTION: Example of a simple unit test for a helper function in JavaScript using Vitest.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/testing.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport function areThereAnyTasks(tasks) {\n  return tasks.length === 0;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from \"vitest\";\n\nimport { areThereAnyTasks } from \"./helpers\";\n\ntest(\"areThereAnyTasks\", () => {\n  expect(areThereAnyTasks([])).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring a Query in Wasp DSL\nDESCRIPTION: Shows how to declare a query operation in the Wasp DSL file, importing the implementation function and specifying the entities it operates on.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/queries.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\nquery getFoo {\n    fn: import { getFoo } from \"@src/queries.js\"\n    entities: [Foo]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling JSON Responses from GPT in JavaScript\nDESCRIPTION: This code snippet demonstrates two techniques for handling and fixing JSON responses from GPT. It removes extraneous text around JSON and implements a retry mechanism for parsing invalid JSON.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-07-17-how-we-built-gpt-web-app-generator.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// 1. Remove characters before '{' and after '}'\nfunction cleanJson(response) {\n  const start = response.indexOf('{');\n  const end = response.lastIndexOf('}');\n  return response.slice(start, end + 1);\n}\n\n// 2. Retry parsing JSON with GPT assistance\nasync function parseJsonWithRetry(response, maxRetries = 3) {\n  let attempt = 0;\n  while (attempt < maxRetries) {\n    try {\n      return JSON.parse(cleanJson(response));\n    } catch (error) {\n      attempt++;\n      response = await askGptToFixJson(response, error);\n    }\n  }\n  throw new Error('Failed to parse JSON after multiple attempts');\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from useHistory to useNavigate\nDESCRIPTION: Shows how to update React Router navigation from useHistory hook to the new useNavigate hook in version 6.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-14-to-0-15.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useHistory } from 'react-router-dom'\n\nexport function SomePage() {\n  const history = useHistory()\n  const handleClick = () => {\n    history.push('/new-route')\n  }\n  return <button onClick={handleClick}>Go to new route</button>\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNavigate } from 'react-router-dom'\n\nexport function SomePage() {\n  const navigate = useNavigate()\n  const handleClick = () => {\n    navigate('/new-route')\n  }\n  return <button onClick={handleClick}>Go to new route</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring updateTask Action in Wasp\nDESCRIPTION: Defines a Wasp action for updating tasks, connecting the server implementation with the Task entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/06-actions.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\naction updateTask {\n  fn: import { updateTask } from \"@server/actions.js\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring an Async Client Setup Function (JavaScript)\nDESCRIPTION: Provides an async setup function for Wasp's client, executed before rendering. This function allows initialization logic, such as configuring client-side jobs. No dependencies except project-specific initializations as needed. No arguments; result is ignored. Must be asynchronous. Limitations: contains placeholder for actual code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/client-config.md#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nexport default async function mySetupFunction() {\n  // Run some code\n}\n```\n\n----------------------------------------\n\nTITLE: Login Function Parameter Changes - After Migration\nDESCRIPTION: Shows the updated login function implementation where username and password are passed as an object parameter.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-16-to-0-17.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { login } from 'wasp/client/auth'\n\nawait login({ username: usernameValue, password: passwordValue })\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub OAuth Scopes Function (TypeScript) - TypeScript\nDESCRIPTION: TypeScript implementation for the GitHub 'getConfig' provider function, supplying an empty scopes array for OAuth. Used as the configurable entry point when wiring up the GitHub provider in Wasp, and can be customized with additional scope strings if needed. No input; returns an object for Wasp's consumption.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/github.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nexport function getConfig() {\n  return {\n    scopes: [],\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Username Authentication in Wasp\nDESCRIPTION: This snippet shows how to enable username and password authentication in the main.wasp file by configuring the auth settings and specifying the User entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/username-and-pass.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"My App\",\n  auth: {\n    // 1. Specify the user entity (we'll define it next)\n    userEntity: User,\n    methods: {\n      // 2. Enable username authentication\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Client URL for Fly.io Server App\nDESCRIPTION: This command sets the WASP_WEB_CLIENT_URL environment variable for the server app on Fly.io, necessary for CORS configuration with a custom domain.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/cli.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd --context server secrets set WASP_WEB_CLIENT_URL=https://mycoolapp.com\n```\n\n----------------------------------------\n\nTITLE: Implementing onAfterLogin Hook\nDESCRIPTION: Hook that runs after successful user login. Receives providerId, user, oauth, prisma, and req as input parameters. Return value is ignored by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nexport const onAfterLogin = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OnAfterLoginHook } from 'wasp/server/auth'\n\nexport const onAfterLogin: OnAfterLoginHook = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Environment Variables in TypeScript\nDESCRIPTION: Shows how to access both Wasp-defined and user-defined client environment variables in client-side TypeScript code using the env object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/env-vars.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from 'wasp/client'\n\n// Wasp-defined\nconst apiUrl = env.REACT_APP_API_URL\n\n// User-defined\nconst analyticsId = env.REACT_APP_ANALYTICS_ID\n```\n\n----------------------------------------\n\nTITLE: Configuring Username Password Migration API Route in Wasp\nDESCRIPTION: Defines a GET API endpoint for handling username and password migration\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_17\n\nLANGUAGE: wasp\nCODE:\n```\napi migrateUsernameAndPassword {\n  httpRoute: (GET, \"/migrate-username-and-password\"),\n  fn: import { migrateUsernameAndPasswordHandler } from \"@src/migrateToNewAuth\",\n  entities: []\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Task Update in React (TypeScript)\nDESCRIPTION: TypeScript version of the React component with proper type definitions for event handling and task interface.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/06-actions.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormEvent, ChangeEvent } from 'react'\nimport updateTask from '@wasp/actions/updateTask'\n\nconst Task = ({ task }: { task: Task }) => {\n  const handleIsDoneChange = async (event: ChangeEvent<HTMLInputElement>) => {\n    try {\n      await updateTask({\n        id: task.id,\n        isDone: event.target.checked,\n      })\n    } catch (error: any) {\n      window.alert('Error while updating task: ' + error.message)\n    }\n  }\n\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        id={String(task.id)}\n        checked={task.isDone}\n        onChange={handleIsDoneChange}\n      />\n      {task.description}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Password Migration Route in Wasp\nDESCRIPTION: Creates a route and page definition for the password migration UI. The route is set to '/migrate-password' and links to the MigratePassword component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_19\n\nLANGUAGE: wasp\nCODE:\n```\nroute MigratePasswordRoute { path: \"/migrate-password\", to: MigratePassword }\npage MigratePassword {\n  component: import { MigratePasswordPage } from \"@src/pages/MigratePassword\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Environment Variables in TypeScript\nDESCRIPTION: Demonstrates how to import and use server environment variables in TypeScript server-side code using the Wasp server env object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/env-vars.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from 'wasp/server'\n\nconsole.log(env.SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Score Field Required Migration\nDESCRIPTION: SQL migration to make the score column required in the Match table by setting NOT NULL constraint.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2025-04-02-an-introduction-to-database-migrations.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n/*\n  Warnings:\n\n  - Made the column `score` on table `Match` required. This step will fail if there are existing NULL values in that column.\n\n*/\n-- AlterTable\nALTER TABLE \"Match\" ALTER COLUMN \"score\" SET NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: Installing NVM Node Version\nDESCRIPTION: Command to install Node.js version 20 using NVM (Node Version Manager).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/introduction/quick-start.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnvm install 20\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp Client App in JavaScript\nDESCRIPTION: Basic Wasp client configuration showing how to set up a client app with a root component and setup function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/client-config.md#2025-04-22_snippet_13\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.jsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Password Reset Route Configuration\nDESCRIPTION: Wasp configuration for setting up the password reset client route.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/email.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\npasswordReset: {\n    clientRoute: PasswordResetRoute,\n}\n```\n\n----------------------------------------\n\nTITLE: OAuth Provider Redirect URL Migration (URL Patterns, None)\nDESCRIPTION: Compares the required OAuth redirect URL pattern before and after upgrading to Wasp 0.13.X. Highlights the shift from client-based to server-based callbacks, which is crucial for correctly linking to third-party provider platforms such as Google or GitHub. Input: base URL (clientUrl or serverUrl) and provider name; Output: formatted redirect URL string to be used in dashboard or config. No code executable; serve as configuration-token examples.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n{clientUrl}/auth/login/{provider}\n```\n\nLANGUAGE: none\nCODE:\n```\n{serverUrl}/auth/{provider}/callback\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Base Directory - Wasp\nDESCRIPTION: Specifies the baseDir property in the client configuration to serve the Wasp client from a subdirectory. This is important for deployment scenarios where the app is not served from the domain root, such as 'https://example.com/my-app'. Input: baseDir path string. Output: correct routing and asset resolution.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/client-config.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    baseDir: \"/my-app\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Model in Prisma Schema\nDESCRIPTION: This snippet defines the User model in the Prisma schema, including fields for id, username, and displayName.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/discord.md#2025-04-22_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          Int    @id @default(autoincrement())\n  username    String @unique\n  displayName String\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Setting Discord Environment Variables\nDESCRIPTION: This snippet shows the environment variables that need to be set in the .env.server file for Discord authentication to work.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/discord.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDISCORD_CLIENT_ID=your-discord-client-id\nDISCORD_CLIENT_SECRET=your-discord-client-secret\n```\n\n----------------------------------------\n\nTITLE: Setting Up Auth Routes in Wasp\nDESCRIPTION: Configuration of authentication-related routes and pages for login and signup functionality.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/username-and-pass.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { Signup } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring API Endpoint in Wasp\nDESCRIPTION: Shows how to declare a custom API endpoint in a Wasp file using the api declaration syntax. Defines a GET route at /foo/bar.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/apis.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar {\n  fn: import { fooBar } from \"@src/apis\",\n  httpRoute: (GET, \"/foo/bar\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Prisma Schema\nDESCRIPTION: This snippet demonstrates how to define the User entity in the Prisma schema with a basic id field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/username-and-pass.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\n// 3. Define the user entity\nmodel User {\n  // highlight-next-line\n  id Int @id @default(autoincrement())\n  // Add your own fields below\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Query in Wasp\nDESCRIPTION: Shows how to declare a query in a .wasp file, specifying the implementation function and the entities it uses.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/queries.md#2025-04-22_snippet_14\n\nLANGUAGE: wasp\nCODE:\n```\nquery getFoo {\n    fn: import { getFoo } from \"@src/queries.js\"\n    entities: [Foo]\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting a Job in TypeScript\nDESCRIPTION: Example of submitting a job and scheduling it for delayed execution in TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/jobs.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mySpecialJob } from '@wasp/jobs/mySpecialJob.js'\n\nconst submittedJob = await mySpecialJob.submit({ job: \"Tony\" })\n\n// Or, if you'd prefer it to execute in the future, just add a .delay().\n// It takes a number of seconds, Date, or ISO date string.\nawait mySpecialJob\n  .delay(10)\n  .submit({ name: \"Tony\" })\n```\n\n----------------------------------------\n\nTITLE: Path-Specific Middleware Implementation in TypeScript\nDESCRIPTION: Implementation of a custom middleware function for a path namespace in TypeScript that adds a custom middleware to the configuration, with proper type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/middleware-config.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { type MiddlewareConfigFn } from 'wasp/server'\n\nexport const fooBarNamespaceMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {\n  const customMiddleware: express.RequestHandler = (_req, _res, next) => {\n    console.log('fooBarNamespaceMiddlewareFn: custom middleware')\n    next()\n  }\n\n  middlewareConfig.set('custom.middleware', customMiddleware)\n\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Todo App Example Converted to TypeScript with Type Definitions\nDESCRIPTION: The same Todo application converted to TypeScript with added type definitions. This version highlights the areas where TypeScript detects errors in the original JavaScript code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-29-typescript-feature-announcement.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// highlight-start\ntype Task = {\n  id: string\n  description: string\n  isDone: boolean\n}\n// highlight-end\n\nfunction MainPage() {\n  // highlight-next-line\n  const { data: tasks } = useQuery<Task, Task[]>(getTasks)\n\n  return (\n    <div>\n      <h1>Todos</h1>\n      <TaskList tasks={tasks} />\n    </div>\n  )\n}\n\n// highlight-next-line\nfunction TaskList({ tasks }: { tasks: Task[] }) {\n  if (!tasks.len) {\n    return <div>No tasks</div>\n  }\n\n  return (\n    <div>\n      {tasks.map((task, idx) => <Task {...task} key={idx}/>)}\n    </div>\n  )\n}\n\n\n\n// highlight-next-line\nfunction Task({ id, isdone, description }: Task) {\n  return (\n    <div>\n      <label>\n        <input\n          type='checkbox'\n          id={id}\n          checked={isdone}\n          onChange={\n            (event) => updateTask({ id, isDone: event.target.checked })\n          }\n        />\n        <span>{description}</span>\n      </label>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Button in MainPage Component using JSX\nDESCRIPTION: Demonstrates how to add a logout button to the `MainPage.jsx` React component. It imports the `logout` function from `wasp/client/auth` and assigns it to the `onClick` handler of a button element, enabling users to log out.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/07-auth.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n// ...\nimport { logout } from 'wasp/client/auth'\n//...\n\nconst MainPage = () => {\n  // ...\n  return (\n    <div>\n      // ...\n      <button onClick={logout}>Logout</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logout Button in React\nDESCRIPTION: Demonstrates how to create a logout button component using the provided logout action from Wasp's auth module.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { logout } from 'wasp/client/auth'\n\nconst LogoutButton = () => {\n  return <button onClick={logout}>Logout</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Running Database Migration for Schema Changes\nDESCRIPTION: Command to apply database migrations after updating the schema with new relationships.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/07-auth.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Updating Main Page to Require Authentication in Wasp\nDESCRIPTION: Modifies the MainPage declaration in Wasp to require authentication for access.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/07-auth.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\npage MainPage {\n  authRequired: true,\n  component: import Main from \"@client/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Concatenating Email Address Components in Haskell\nDESCRIPTION: This code snippet demonstrates how to concatenate string components to form an email address using Haskell's string operations, showcasing function composition and list operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-09-02-how-to-get-started-with-haskell-in-2022.md#2025-04-22_snippet_0\n\nLANGUAGE: haskell\nCODE:\n```\n\"martin\" ++ \"@\" ++ concat [\"wasp\", \"-\", \"lang\"] <> \".dev\"\n```\n\n----------------------------------------\n\nTITLE: Useful Fly.io Commands\nDESCRIPTION: Additional helpful Fly.io commands for managing and monitoring your deployed application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/manually.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nflyctl logs\nflyctl secrets list\nflyctl ssh console\n```\n\n----------------------------------------\n\nTITLE: Sending Emails in TypeScript\nDESCRIPTION: Demonstrates how to use the emailSender API to send an email in a TypeScript action handler.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/email.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { emailSender } from \"@wasp/email/index.js\";\n\n// In some action handler...\nconst info = await emailSender.send({\n  from: {\n    name: \"John Doe\",\n    email: \"john@doe.com\",\n  },\n  to: \"user@domain.com\",\n  subject: \"Saying hello\",\n  text: \"Hello world\",\n  html: \"Hello <strong>world</strong>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Pages in React (TypeScript)\nDESCRIPTION: This TypeScript version of the code snippet defines React components for login, signup, email verification, password reset request, and password reset pages. It uses Wasp's authentication components and React Router for navigation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/email.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  LoginForm,\n  SignupForm,\n  VerifyEmailForm,\n  ForgotPasswordForm,\n  ResetPasswordForm,\n} from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Don't have an account yet? <Link to=\"/signup\">go to signup</Link>.\n      </span>\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Forgot your password? <Link to=\"/request-password-reset\">reset it</Link>.\n      </span>\n    </Layout>\n  )\n}\n\nexport function Signup() {\n  return (\n    <Layout>\n      <SignupForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </Layout>\n  )\n}\n\nexport function EmailVerification() {\n  return (\n    <Layout>\n      <VerifyEmailForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        If everything is okay, <Link to=\"/login\">go to login</Link>\n      </span>\n    </Layout>\n  )\n}\n\nexport function RequestPasswordReset() {\n  return (\n    <Layout>\n      <ForgotPasswordForm />\n    </Layout>\n  )\n}\n\nexport function PasswordReset() {\n  return (\n    <Layout>\n      <ResetPasswordForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        If everything is okay, <Link to=\"/login\">go to login</Link>\n      </span>\n    </Layout>\n  )\n}\n\n// A layout component to center the content\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"h-full w-full bg-white\">\n      <div className=\"flex min-h-[75vh] min-w-full items-center justify-center\">\n        <div className=\"h-full w-full max-w-sm bg-white p-5\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Settings with app.db Field in TypeScript\nDESCRIPTION: Full example of database configuration in a Wasp application using TypeScript. Shows how to set the database system to PostgreSQL, define database seeds, and configure Prisma client features.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/backends.md#2025-04-22_snippet_11\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  db: {\n    system: PostgreSQL,\n    seeds: [\n      import devSeed from \"@src/dbSeeds.js\"\n    ],\n    prisma: {\n      clientPreviewFeatures: [\"extendedWhereUnique\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying TypeScript Project Structure in Wasp\nDESCRIPTION: Shows the file structure of a Wasp project configured for TypeScript, highlighting the difference of using .tsx files instead of .jsx files. It demonstrates the necessary renaming of component files.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/02-project-structure.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.\n├── .gitignore\n├── main.wasp          # Your Wasp code goes here.\n├── schema.prisma      # Your Prisma schema goes here.\n├── package.json       # Your dependencies and project info go here.\n├── public             # Your static files (e.g., images, favicon) go here.\n├── src                # Your source code (TS/JS/CSS/HTML) goes here.\n│   ├── Main.css\n// highlight-next-line\n│   ├── MainPage.tsx   # Renamed from MainPage.jsx\n│   ├── vite-env.d.ts\n│   └── waspLogo.png\n├── tsconfig.json\n├── vite.config.ts\n├── .waspignore\n└── .wasproot\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Verification Login Behavior in Wasp\nDESCRIPTION: Configuration parameter that determines whether users can login without verifying their email addresses. When set to true, unverified users can access the application, allowing for customized onboarding experiences.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/email.md#2025-04-22_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\nallowUnverifiedLogin: bool\n```\n\n----------------------------------------\n\nTITLE: Custom Signup Form Component in React\nDESCRIPTION: React component implementation for customized signup form with additional fields\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/overview.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  SignupForm,\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta on Apple Silicon Macs (Bash)\nDESCRIPTION: Installs Rosetta 2 on macOS systems with Apple Silicon chips (M1, M2, etc.). This is required to run the x86 Wasp binary, resolving potential 'Bad CPU type in executable' errors.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/introduction/quick-start.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsoftwareupdate --install-rosetta\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Routes\nDESCRIPTION: Wasp configuration for login and signup routes\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-13-how-to-add-auth-with-lucia-to-your-react-nextjs-app.md#2025-04-22_snippet_13\n\nLANGUAGE: wasp\nCODE:\n```\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { SignupPage } from \"@src/SignupPage\"\n}\n\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { LoginPage } from \"@src/LoginPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Stan Static Analysis\nDESCRIPTION: Shell command to run Stan static analysis tool on the codebase, generating both CLI output and HTML report.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n./run stan\n```\n\n----------------------------------------\n\nTITLE: Wasp Entity Definition - Pre-Migration Example\nDESCRIPTION: Example of how entities were defined in Wasp 0.13.X, showing User and Task entities defined directly in the .wasp file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"MyApp\",\n  db: {\n    system: PostgreSQL\n  },\n}\n\nentity User {=psl\n  id       Int @id @default(autoincrement())\n  tasks    Task[]\npsl=}\n\nentity Task {=psl\n  id          Int @id @default(autoincrement())\n  description String\n  isDone      Boolean\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Reset Route in Wasp\nDESCRIPTION: Wasp configuration for password reset routing setup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/email.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\npasswordReset: {\n    clientRoute: PasswordResetRoute,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Wasp\nDESCRIPTION: Definition of the User entity schema with basic fields\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/github.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\n    id          Int     @id @default(autoincrement())\n    // ...\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp Social Auth Template\nDESCRIPTION: Skeleton template showing the main components needed for implementing social authentication in a Wasp application. Includes app configuration, entity definitions for User and SocialLogin, and routing setup for the login functionality.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/_wasp-file-structure-note.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n// Configuring the social authentication\napp myApp {\n  auth: { ... }\n}\n\n// Defining entities\nentity User { ... }\nentity SocialLogin { ... }\n\n// Defining routes and pages\nroute LoginRoute { ... }\npage LoginPage { ... }\n```\n\n----------------------------------------\n\nTITLE: Authentication Page Routes\nDESCRIPTION: Wasp route configuration for the login page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/keycloak.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing updateTask Action (TypeScript)\nDESCRIPTION: This snippet shows the TypeScript implementation of the 'updateTask' action. It includes type definitions for the payload and return value.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/06-actions.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreateTask, UpdateTask } from 'wasp/server/operations'\n\ntype UpdateTaskPayload = Pick<Task, 'id' | 'isDone'>\n\nexport const updateTask: UpdateTask<UpdateTaskPayload, Task> = async (\n  { id, isDone },\n  context\n) => {\n  return context.entities.Task.update({\n    where: { id },\n    data: {\n      isDone: isDone,\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Client-side Query Implementation in TypeScript\nDESCRIPTION: Demonstrates TypeScript implementation of client-side Queries with automatic type inference for return values and payload type checking.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/queries.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAllTasks, getFilteredTasks } from 'wasp/client/operations'\n\n// TypeScript automatically infers the return values and type-checks\n// the payloads.\nconst allTasks = await getAllTasks()\nconst doneTasks = await getFilteredTasks({ isDone: true })\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migrations in Wasp\nDESCRIPTION: This command creates a new migration in the 'migrations' directory after changes are made to the Prisma schema. The migration consists of SQL commands describing the schema changes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/database.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: MainPage React Component Implementation\nDESCRIPTION: The basic structure of a React component that implements a Wasp page. This is a standard functional React component that imports CSS and image files from the src directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/03-pages.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport waspLogo from './waspLogo.png'\nimport './Main.css'\n\nexport const MainPage = () => {\n  // ...\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport waspLogo from './waspLogo.png'\nimport './Main.css'\n\nexport const MainPage = () => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server Environment Variables in .env.server (Wasp Development)\nDESCRIPTION: Example content for a `.env.server` file used in Wasp development. It defines variables like `DATABASE_URL` and custom variables (`SOME_VAR_NAME`) in `NAME=VALUE` format, which are made available only to the server code. This file should not be committed to version control as it may contain secrets.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/env-vars.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nDATABASE_URL=postgresql://localhost:5432\nSOME_VAR_NAME=somevalue\n```\n\n----------------------------------------\n\nTITLE: Declaring Queries with Entities in Wasp\nDESCRIPTION: Demonstrates how to declare Queries that use Entities in the Wasp configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/queries.md#2025-04-22_snippet_11\n\nLANGUAGE: wasp\nCODE:\n```\nquery getAllTasks {\n  fn: import { getAllTasks } from \"@src/queries.js\",\n  entities: [Task]\n}\n\nquery getFilteredTasks {\n  fn: import { getFilteredTasks } from \"@src/queries.js\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Database for Wasp App on Fly.io\nDESCRIPTION: Command to create a new database for your Wasp application on Fly.io in the specified region. This should only be run once per application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/cli.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly create-db <region>\n```\n\n----------------------------------------\n\nTITLE: Cleaned-up Wasp Configuration File\nDESCRIPTION: The final version of the main.wasp file after cleanup, containing just the app declaration, root route, and MainPage definition. This provides the minimal structure for a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/03-pages.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"TodoApp\"\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User ID in JavaScript React Component\nDESCRIPTION: Demonstrates how to use the getFirstProviderUserId helper function to access the user's ID in a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/entities.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getFirstProviderUserId } from 'wasp/auth'\n\nconst MainPage = ({ user }) => {\n  const userId = getFirstProviderUserId(user)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Wasp Project Non-Interactively\nDESCRIPTION: Example of creating a new Wasp project using the default template without interactive mode.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/general/cli.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp new MyFirstProject\n🐝 --- Creating your project from the \"basic\" template... -------------------------\n\nCreated new Wasp app in ./MyFirstProject directory!\n\nTo run your new app, do:\n    cd MyFirstProject\n    wasp db start\n```\n\n----------------------------------------\n\nTITLE: Adding isSignupComplete Field to User Entity\nDESCRIPTION: Extending the User entity with an isSignupComplete field to track the user's signup progress for custom signup flows.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    username                  String?       @unique\n    // highlight-next-line\n    isSignupComplete          Boolean       @default(false)\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Migrating Database Schema using Wasp CLI\nDESCRIPTION: Executes the Wasp CLI command `wasp db migrate-dev` to apply changes made to the Prisma schema (like adding the `Task` entity) to the development database. This command generates and applies a new database migration. Run this command whenever entity definitions change.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/04-entities.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nwasp db migrate-dev\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring a Page and Route in Wasp\nDESCRIPTION: This snippet shows how to declare a page and its corresponding route in Wasp, including authentication requirements and the component to be rendered.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-12-02-waspello.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nroute MainRoute { path: \"/\", to: Main }\npage Main {\n    authRequired: true,\n    component: import Main from \"@client/MainPage.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Password Reset Request Handling\nDESCRIPTION: Implementation of password reset request and token handling using Wasp auth client actions\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/email.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { requestPasswordReset } from 'wasp/client/auth'\n...\nawait requestPasswordReset({ email });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { resetPassword } from 'wasp/client/auth'\n...\nawait resetPassword({ password, token })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { requestPasswordReset } from 'wasp/client/auth'\n...\nawait requestPasswordReset({ email });\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { resetPassword } from 'wasp/client/auth'\n...\nawait resetPassword({ password, token })\n```\n\n----------------------------------------\n\nTITLE: Implementing Save Excuse Action\nDESCRIPTION: Server-side action implementation for saving an excuse to the database using Prisma client.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-09-05-dev-excuses-app-tutrial.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const saveExcuse = async (excuse, context) => {\n  return context.entities.Excuse.create({\n    data: { text: excuse.text }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Signup Fields (After)\nDESCRIPTION: Demonstrates the new format for defining user signup fields, using the updated profile data structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n    displayName: (data: any) => data.profile.name,\n})\n```\n\n----------------------------------------\n\nTITLE: Markdown Code Example - Documentation Reference\nDESCRIPTION: Example markdown snippets used in the context of explaining documentation style guidelines.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/writingguide.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nuseQuery hook\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<BlogPost>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<ComponentA>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<CurrencyExchangeSettings>\n```\n\n----------------------------------------\n\nTITLE: Basic Server Setup Function Implementation (JavaScript)\nDESCRIPTION: A minimal example of an async server setup function (`mySetupFunction`) in JavaScript. This function is intended to be called on server start to perform initial setup tasks, such as asynchronously setting up resources.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/server-config.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/myServerSetupCode.js\"\nexport const mySetupFunction = async () => {\n  await setUpSomeResource()\n}\n```\n```\n\n----------------------------------------\n\nTITLE: TypeScript Entity Definition and Usage\nDESCRIPTION: Example showing how Wasp entities are automatically accessible as TypeScript types on both client and server sides, demonstrating full-stack TypeScript support.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-03-02-wasp-beta-update-feb.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<ImgWithCaption\n    alt=\"Full stack TypeScript support\"\n    source=\"img/update-feb-23/fullstack-ts.png\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Routes with URL Parameters in Wasp\nDESCRIPTION: Example of creating a route with URL parameters in Wasp. This shows how to define a route that captures a name parameter and maps it to a HelloPage component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/03-pages.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute HelloRoute { path: \"/hello/:name\", to: HelloPage }\npage HelloPage {\n  component: import { HelloPage } from \"@src/HelloPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UpdateAccount Action in TypeScript\nDESCRIPTION: Creates the server-side implementation of the updateAccount action. It updates the favUsers field of the authenticated user in the database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { UpdateAccount } from \"@wasp/actions/types\";\nimport HttpError from \"@wasp/core/HttpError.js\";\n\nexport const updateAccount: UpdateAccount<{ favUsers: string[] }, void> = async ({ favUsers }, context) => {\n  if (!context.user) {\n    throw new HttpError(401, \"User is not authorized\");\n  }\n\n  try {\n    await context.entities.User.update({\n      where: { id: context.user.id },\n      data: { favUsers },\n    });\n    \n  } catch (error: any) {\n    throw new HttpError(500, error.message);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server Action for Generating New Ideas in Wasp\nDESCRIPTION: This snippet defines a server action in the main.wasp file to generate new tweet ideas. It imports the function from a server-side file and specifies the entities involved.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\naction generateNewIdeas {\n  fn: import { generateNewIdeas } from \"@server/ideas.js\",\n  entities: [GeneratedIdea, Tweet, TweetDraft, User]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Schema\nDESCRIPTION: Prisma schema definition for the User entity required by Discord authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/discord.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n}\n```\n\n----------------------------------------\n\nTITLE: Final Wasp Configuration after Cleanup (JavaScript)\nDESCRIPTION: Displays the final state of the `main.wasp` file after removing the `HelloPage` route and page declarations. It includes the basic app definition (`TodoApp`) specifying the Wasp version and app title, along with the remaining `RootRoute` and `MainPage` pointing to the JavaScript component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/03-pages.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napp TodoApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"TodoApp\"\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Cache Key in TypeScript\nDESCRIPTION: TypeScript example demonstrating how to access the query cache key for use with react-query's low-level API.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getTasks } from 'wasp/client/operations'\n\nconst queryKey = getTasks.queryCacheKey\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Sender in Wasp\nDESCRIPTION: Configures the email sending functionality in a Wasp application by specifying the provider and default sender information in the main.wasp file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/email/email.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: <provider>,\n    defaultFrom: {\n      name: \"Example\",\n      email: \"hello@itsme.com\"\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Wasp Build\nDESCRIPTION: Navigate to the .wasp/build/ directory after building the Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/manually.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd .wasp/build\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration Setup\nDESCRIPTION: Configuration for Tailwind CSS including content paths and theme customization options.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/css-frameworks.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { resolveProjectPath } = require('wasp/dev')\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [resolveProjectPath('./src/**/*.{js,jsx,ts,tsx}')],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Google Auth Signup Fields Configuration\nDESCRIPTION: Demonstrates how to override default signup behavior for Google authentication with custom user fields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {\n        userSignupFields: import { userSignupFields } from \"@src/auth/google.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const userSignupFields = {\n  isSignupComplete: () => false,\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  isSignupComplete: () => false,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Password Migration Action in Wasp\nDESCRIPTION: Defines a Wasp action named `migratePassword`. This action connects the frontend operation call (from the `MigratePasswordPage`) to a backend function responsible for handling the password migration logic. The implementation function `migratePassword` is imported from `@src/auth` (either .js or .ts). It specifies no entity dependencies.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_23\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\naction migratePassword {\n  fn: import { migratePassword } from \"@src/auth\",\n  entities: []\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp Application with Email Authentication\nDESCRIPTION: This snippet shows the configuration for email authentication within a Wasp application. It sets up the auth property with user entity reference, email authentication method, email verification settings, and redirect paths.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/email.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    // 1. Specify the user entity (we'll define it next)\n    userEntity: User,\n    methods: {\n      // 2. Enable email authentication\n      email: {\n        // 3. Specify the email from field\n        fromField: {\n          name: \"My App Postman\",\n          email: \"hello@itsme.com\"\n        },\n        // 4. Specify the email verification and password reset options (we'll talk about them later)\n        emailVerification: {\n          clientRoute: EmailVerificationRoute,\n        },\n        passwordReset: {\n          clientRoute: PasswordResetRoute,\n        },\n        allowUnverifiedLogin: false,\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n    onAuthSucceededRedirectTo: \"/\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Schema\nDESCRIPTION: Prisma schema definition for the User entity required for Google authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/google.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication UI Components\nDESCRIPTION: React components for the login page implementation with Tailwind CSS styling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/google.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LoginForm } from '@wasp/auth/forms/Login'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"w-full h-full bg-white\">\n      <div className=\"min-w-full min-h-[75vh] flex items-center justify-center\">\n        <div className=\"w-full h-full max-w-sm p-5 bg-white\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Users Based on Signup Status in TypeScript\nDESCRIPTION: TypeScript version of a React component that checks if a user has completed signup and redirects accordingly.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAuth } from 'wasp/client/auth'\nimport { Redirect } from 'react-router-dom'\n\nexport function HomePage() {\n  const { data: user } = useAuth()\n\n  if (user.isSignupComplete === false) {\n    return <Redirect to=\"/edit-user-details\" />\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Email Auth Configuration in main.wasp\nDESCRIPTION: The updated main.wasp file configuration using the new userSignupFields property inside the email auth method instead of the previous additionalFields approach.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_14\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  // ...\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        // highlight-next-line\n        userSignupFields: import { fields } from \"@src/server/auth/signup.js\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Calling updateTask Action from React Component (JSX)\nDESCRIPTION: Demonstrates calling the `updateTask` Wasp action from a React component (`TaskView`) written in JSX. The `updateTask` function is imported from `wasp/client/operations`. An `onChange` event handler (`handleIsDoneChange`) on the checkbox triggers this function, passing the task's `id` and the new checked state. Includes basic error handling using `window.alert`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/06-actions.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"src/MainPage.jsx\"\n// ...\nimport {\n  // highlight-next-line\n  updateTask,\n  createTask,\n  getTasks,\n  useQuery,\n} from 'wasp/client/operations'\n\n// ... MainPage ...\n\nconst TaskView = ({ task }) => {\n  // highlight-start\n  const handleIsDoneChange = async (event) => {\n    try {\n      await updateTask({\n        id: task.id,\n        isDone: event.target.checked,\n      })\n    } catch (error) {\n      window.alert('Error while updating task: ' + error.message)\n    }\n  }\n  // highlight-end\n\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        id={String(task.id)}\n        checked={task.isDone}\n        // highlight-next-line\n        onChange={handleIsDoneChange}\n      />\n      {task.description}\n    </div>\n  )\n}\n// ... TaskList, NewTaskForm ...\n```\n```\n\n----------------------------------------\n\nTITLE: Importing TypescriptServerNote Component in Markdown\nDESCRIPTION: This code snippet imports a custom component named TypescriptServerNote from a Markdown file. It's likely used to include additional information about TypeScript server integration in the documentation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/introduction/editor-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport TypescriptServerNote from '../_TypescriptServerNote.md'\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry via Environment Variable\nDESCRIPTION: Shell command showing how to opt out of telemetry by setting an environment variable.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/telemetry.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport WASP_TELEMETRY_DISABLE=1\n```\n\n----------------------------------------\n\nTITLE: Changing the Wasp Application Title\nDESCRIPTION: This snippet shows how to customize the application title displayed in the browser tab. It modifies the `title` field within the `app` declaration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/customizing-app.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"BookFace\"\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - WebSocket Implementation Comparison\nDESCRIPTION: A comparison table showing different aspects of implementing WebSockets with and without the Wasp framework, including intended users, complexity, speed, library support, type safety, control, and learning curve.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-09-build-real-time-voting-app-websockets-react-typescript.md#2025-04-22_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n|  | Without Wasp | With Wasp |\n| --- | --- | --- |\n| 😎 Intended User  | Senior Developers, web development teams | Full-stack developers, \"Indiehackers\", junior devs |\n| 📈 Complexity of Code | Medium-to-High | Low |\n| 🚤 Speed | Slower, more methodical | Faster, more integrated |\n| 🧑‍💻 Libraries | Any | Socket.IO |\n| ⛑ Type safety  | Implement on both server and client | Implement once on server, inferred by Wasp on client |\n| 🎮 Amount of control | High, as you determine the implementation | Opinionated, as Wasp decides the basic implementation |\n| 🐛 Learning Curve | Complex: full knowledge of front and backend technologies, including WebSockets | Intermediate: Knowledge of full-stack fundamentals necessary. |\n```\n\n----------------------------------------\n\nTITLE: Adding Auth Routes and Pages in Wasp\nDESCRIPTION: This code adds the necessary routes and pages for login and signup functionality in the Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/username-and-pass.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { Signup } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind Plugins via NPM - Shell\nDESCRIPTION: This shell snippet demonstrates the commands required to install the @tailwindcss/forms and @tailwindcss/typography plugins as development dependencies using npm. These packages enable enhanced form styling and rich typography when configured in Tailwind. The commands should be executed from the project's root and require npm as the package manager. Output is standard npm installation output, and will add the plugins to devDependencies in package.json.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/css-frameworks.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D @tailwindcss/forms\\nnpm install -D @tailwindcss/typography\n```\n\n----------------------------------------\n\nTITLE: Configuring Dummy Email Provider\nDESCRIPTION: Configuration for the Dummy email provider which logs emails to the console instead of sending them. Useful for development.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/email/email.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: Dummy,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CRUD Operations in Client Code (JavaScript, React)\nDESCRIPTION: Shows how to import the CRUD operations object corresponding to 'Tasks' from the Wasp client library in a JavaScript React application. This enables direct access to generated CRUD hooks and actions on the frontend. Requires 'wasp/client/crud' as a module dependency. Inputs: N/A; Outputs: An imported 'Tasks' object with query/action methods.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/crud.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tasks } from 'wasp/client/crud'\n```\n\n----------------------------------------\n\nTITLE: Implementing Forgot Password Form\nDESCRIPTION: Implementation of a forgot password page using Wasp's ForgotPasswordForm component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/ui.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\nroute RequestPasswordResetRoute { path: \"/request-password-reset\", to: RequestPasswordResetPage }\npage RequestPasswordResetPage {\n  component: import { ForgotPasswordPage } from \"@src/ForgotPasswordPage.tsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ForgotPasswordForm } from 'wasp/client/auth'\n\nexport function ForgotPasswordPage() {\n  return <ForgotPasswordForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Environment Variables\nDESCRIPTION: Shows how to access client-side environment variables prefixed with REACT_APP_ in JavaScript and TypeScript using import.meta.env\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/env-vars.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(import.meta.env.REACT_APP_SOME_VAR_NAME)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(import.meta.env.REACT_APP_SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Exposing Dashboard Data from Server Setup\nDESCRIPTION: Creating a function to expose the in-memory dashboard data that is updated by background job processing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-01-27-waspleau.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n...\n\nconst dashboardData = {} // This is updated in the queue process callback\nexport const getDashboardData = () => Object.values(dashboardData).flat()\n```\n\n----------------------------------------\n\nTITLE: Implementing Username Password Migration Handler\nDESCRIPTION: TypeScript implementation of the migration handler that processes user data and updates authentication records\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prisma } from \"wasp/server\";\nimport { type ProviderName, type UsernameProviderData } from \"wasp/server/auth\";\nimport { MigrateUsernameAndPassword } from \"wasp/server/api\";\n\nexport const migrateUsernameAndPasswordHandler: MigrateUsernameAndPassword =\n  async (_req, res) => {\n    const result = await migrateUsernameAuth();\n\n    res.status(200).json({ message: \"Migrated users to the new auth\", result });\n  };\n\nasync function migrateUsernameAuth(): Promise<{\n  numUsersAlreadyMigrated: number;\n  numUsersNotUsingThisAuthMethod: number;\n  numUsersMigratedSuccessfully: number;\n}> {\n  const users = await prisma.user.findMany({\n    include: {\n      auth: true,\n    },\n  });\n\n  const result = {\n    numUsersAlreadyMigrated: 0,\n    numUsersNotUsingThisAuthMethod: 0,\n    numUsersMigratedSuccessfully: 0,\n  };\n\n  for (const user of users) {\n    if (user.auth) {\n      result.numUsersAlreadyMigrated++;\n      console.log(\"Skipping user (already migrated) with id:\", user.id);\n      continue;\n    }\n\n    if (!user.username || !user.password) {\n      result.numUsersNotUsingThisAuthMethod++;\n      console.log(\"Skipping user (not using username auth) with id:\", user.id);\n      continue;\n    }\n\n    const providerData: UsernameProviderData = {\n      hashedPassword: user.password,\n    };\n    const providerName: ProviderName = \"username\";\n\n    await prisma.auth.create({\n      data: {\n        identities: {\n          create: {\n            providerName,\n            providerUserId: user.username.toLowerCase(),\n            providerData: JSON.stringify(providerData),\n          },\n        },\n        user: {\n          connect: {\n            id: user.id,\n          },\n        },\n      },\n    });\n    result.numUsersMigratedSuccessfully++;\n  }\n\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Wasp Client URL for Custom Dev Server Port (Env)\nDESCRIPTION: Updates the `WASP_WEB_CLIENT_URL` environment variable in the `.env.server` file to reflect a custom Vite development server port (e.g., 4000). This adjustment is necessary when the default port is changed in `vite.config.js` or `vite.config.ts` to ensure Wasp correctly communicates with the client.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/custom-vite-config.md#2025-04-22_snippet_5\n\nLANGUAGE: env\nCODE:\n```\n```env title=\".env.server\"\nWASP_WEB_CLIENT_URL=http://localhost:4000\n```\n```\n\n----------------------------------------\n\nTITLE: Auth Configuration in Wasp 0.12.X\nDESCRIPTION: Example of authentication configuration in Wasp 0.12.X, where auth models are automatically set up by Wasp and the User entity only needs to contain business logic fields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.12.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\nentity User {=psl\n  id Int @id @default(autoincrement())\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Implementing Create Task Action in JavaScript\nDESCRIPTION: Server-side implementation of the createTask action that creates a new task in the database using the provided description.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/06-actions.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const createTask = async (args, context) => {\n  return context.entities.Task.create({\n    data: { description: args.description },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying a New Wasp App to Fly.io\nDESCRIPTION: This command launches a new Wasp application on Fly.io. It sets up the app, creates a database, and deploys it to the specified region.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/cli.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly launch my-wasp-app mia\n```\n\n----------------------------------------\n\nTITLE: Markdown Contact Information Page\nDESCRIPTION: Markdown document containing contact details including Discord server link and email address, with a TODO comment about updating the email domain\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/contact.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Contact\n---\n\n<!-- TODO: update the email once we setup @wasp.sh-->\nYou can find us on [Discord](https://discord.gg/rzdnErX) or you can reach out to us via email at hi@wasp-lang.dev.\n```\n\n----------------------------------------\n\nTITLE: Database URL Configuration in Environment File\nDESCRIPTION: Setting up the database connection URL in the .env.server file for PostgreSQL connection.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/backends.md#2025-04-22_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nDATABASE_URL=postgresql://user:password@localhost:5432/mydb\n```\n\n----------------------------------------\n\nTITLE: React Component Imports for Blog Post\nDESCRIPTION: Import statements for React components and utilities used in the blog post.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-11-21-seed-round.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport InBlogCta from './components/InBlogCta';\nimport WaspIntro from './_wasp-intro.md';\n```\n\n----------------------------------------\n\nTITLE: Creating a New Wasp Project with Default Template\nDESCRIPTION: Shows how to create a new Wasp project using the default template without entering interactive mode.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/general/cli.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp new MyFirstProject\n 🐝 --- Creating your project from the basic template... ---------------------------\n\n Created new Wasp app in ./MyFirstProject directory!\n To run it, do:\n\n     cd MyFirstProject\n     wasp start\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Environment Variables in JavaScript\nDESCRIPTION: Demonstrates how to access server-side environment variables using process.env in JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/env-vars.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(process.env.SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: User Signup Fields Validation (TypeScript)\nDESCRIPTION: TypeScript implementation of user signup field validation logic with error handling\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp Application with Authentication\nDESCRIPTION: Initializes a Wasp application named RecipeApp with username/password authentication enabled.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/introduction/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp RecipeApp {\n  title: \"My Recipes\",\n  wasp: { version: \"^0.15.0\" },\n  auth: {\n    methods: { usernameAndPassword: {} },\n    onAuthFailedRedirectTo: \"/login\",\n    userEntity: User\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies in Wasp Application\nDESCRIPTION: Setting up the basic Wasp application configuration with NPM dependencies for Bull (job queue) and Axios (HTTP requests).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-01-27-waspleau.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp waspleau {\n  title: \"Waspleau\",\n\n  dependencies: [\n    (\"bull\", \"4.1.1\"),\n    (\"axios\", \"^0.21.1\")\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Wasp 0.11.x\nDESCRIPTION: Demonstrates the authentication configuration in `main.wasp` for Wasp version 0.11.x. This approach requires developers to explicitly define a `User` entity containing authentication-related fields (e.g., `username`, `password`) and potentially a related entity like `SocialLogin` for external providers. The `auth` block within the `app` definition connects these custom entities to the Wasp auth system.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\nentity User {=psl\n  id                        Int           @id @default(autoincrement())\n  // highlight-start\n  username                  String        @unique\n  password                  String\n  externalAuthAssociations  SocialLogin[]\n  // highlight-end\npsl=}\n\n\n// highlight-start\nentity SocialLogin {=psl\n  id          Int       @id @default(autoincrement())\n  provider    String\n  providerId  String\n  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId      Int\n  createdAt   DateTime  @default(now())\n  @@unique([provider, providerId, userId])\npsl=}\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Importing a Wasp Job Definition (JavaScript)\nDESCRIPTION: Illustrates how to import a job defined in the `main.wasp` file (e.g., `mySpecialJob`) into a server-side JavaScript file, such as a Wasp Action or another server module. The job object is imported from the `wasp/server/jobs` path.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/jobs.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"someAction.js\"\nimport { mySpecialJob } from 'wasp/server/jobs'\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Wasp Version\nDESCRIPTION: Example of checking the current Wasp CLI version and instructions for installing different versions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/general/cli.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp version\n\n0.14.0\n\nIf you wish to install/switch to the latest version of Wasp, do:\ncurl -sSL https://get.wasp.sh/installer.sh | sh -s\n\nIf you want specific x.y.z version of Wasp, do:\ncurl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v x.y.z\n\nCheck https://github.com/wasp-lang/wasp/releases for the list of valid versions, including the latest one.\n```\n\n----------------------------------------\n\nTITLE: Alternative to ExistentialQuantification using GADTs in Haskell\nDESCRIPTION: Shows an alternative approach to ExistentialQuantification using the GADTs extension in Haskell, where 'forall' is implicit.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-09-01-haskell-forall-tutorial.md#2025-04-22_snippet_6\n\nLANGUAGE: haskell\nCODE:\n```\n{-# LANGUAGE GADTs #-}\ndata Showable where\n  Showable :: (Show s) => s -> Showable\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Wasp\nDESCRIPTION: Demonstrates the process of uninstalling Wasp using the 'wasp uninstall' command, showing the directories and files to be removed and prompting for confirmation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/general/cli.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp uninstall\n\n🐝 --- Uninstalling Wasp ... ------------------------------------------------------\n\n We will remove the following directories:\n   {home}/.local/share/wasp-lang/\n   {home}/.cache/wasp/\n\n We will also remove the following files:\n   {home}/.local/bin/wasp\n\n Are you sure you want to continue? [y/N]\n y\n\n ✅ --- Uninstalled Wasp -----------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Basic CRUD Configuration for Task Entity\nDESCRIPTION: This snippet shows a minimal CRUD declaration for the Task entity enabling only getAll and create operations, with a custom implementation for the create operation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/crud.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\ncrud Tasks {\n  entity: Task,\n  operations: {\n    getAll: {},\n    create: {\n      overrideFn: import { createTask } from \"@src/tasks.js\",\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaned Up Wasp Configuration\nDESCRIPTION: The final state of the main.wasp file after cleaning up. This contains just the essential app declaration with version and title, plus the root route and main page components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/03-pages.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"TodoApp\"\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Prisma Schema\nDESCRIPTION: This snippet demonstrates how to define the User entity in the schema.prisma file. It creates a basic User model with an id field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/keycloak.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  // Add your own fields below\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Base Path in Vite\nDESCRIPTION: Shows how to configure a custom base path for serving the client application using Vite configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/custom-vite-config.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  base: '/my-app/',\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  base: '/my-app/',\n})\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Studio to Inspect Database\nDESCRIPTION: Command to start Prisma Studio for inspecting and managing the database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/07-auth.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nwasp db studio\n```\n\n----------------------------------------\n\nTITLE: Skipping Email Verification in Development Environment\nDESCRIPTION: Sets the `SKIP_EMAIL_VERIFICATION_IN_DEV` environment variable to `true` within the `.env.server` file. When this variable is set, the Wasp framework automatically bypasses the email verification step during user signup in the development environment, streamlining the development workflow.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/email.md#2025-04-22_snippet_6\n\nLANGUAGE: env\nCODE:\n```\n```env title=\".env.server\"\nSKIP_EMAIL_VERIFICATION_IN_DEV=true\n```\n```\n\n----------------------------------------\n\nTITLE: Defining WASP_SERVER_URL Environment Variable\nDESCRIPTION: Sets the WASP_SERVER_URL server environment variable, which is required in Wasp 0.13.0 for generating OAuth redirect URLs.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nWASP_SERVER_URL=https://your-wasp-server-url.com\n```\n\n----------------------------------------\n\nTITLE: Adding Generator Block to PostgreSQL Configuration in schema.prisma\nDESCRIPTION: Complete configuration for PostgreSQL including both datasource and generator blocks, which specifies the Prisma Client generator.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_9\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// highlight-start\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Displaying New Wasp Project Structure (v0.12.0) using Text\nDESCRIPTION: Illustrates the updated directory layout for Wasp projects generated with version 0.12.0. Key changes include the removal of `client`/`server`/`shared` separation within `src`, the addition of a top-level `public` directory for static assets, and new configuration files like `package.json` and `vite.config.ts`. Imports must now use `@src` prefix.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.\n├── .gitignore\n├── main.wasp\n├── package.json\n├── public\n│   └── .gitkeep\n├── src\n│   ├── Main.css\n│   ├── MainPage.jsx\n│   ├── queries.ts\n│   ├── vite-env.d.ts\n│   ├── .waspignore\n│   └── waspLogo.png\n├── tsconfig.json\n├── vite.config.ts\n└── .wasproot\n```\n\n----------------------------------------\n\nTITLE: Adding Head Elements in Wasp\nDESCRIPTION: Shows how to add multiple custom lines, such as `<link>`, `<script>`, or `<meta>` tags, to the `<head>` section of the application's HTML document. This is done using the optional `head` field, which accepts an array of strings, each representing an HTML tag. The example adds a Google Fonts stylesheet, a Chart.js script, and a viewport meta tag.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/customizing-app.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"My App\",\n  head: [  // optional\n    \"<link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\\\" />\",\n    \"<script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js\\\"></script>\",\n    \"<meta name=\\\"viewport\\\" content=\\\"minimum-scale=1, initial-scale=1, width=device-width\\\" />\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image for Apple Silicon - Shell\nDESCRIPTION: These commands build a Docker image targeting the linux/amd64 platform, tag it for the Heroku container registry, and push it. Intended for Apple Silicon (ARM) users, this workaround is to ensure compatibility, as Heroku requires x86 images. '<app-name>' should be replaced accordingly, and 'docker buildx' support must be configured.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/manually.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndocker buildx build --platform linux/amd64 -t <app-name> .\ndocker tag <app-name> registry.heroku.com/<app-name>/web\ndocker push registry.heroku.com/<app-name>/web\n\n```\n\n----------------------------------------\n\nTITLE: Using JSON in Wasp\nDESCRIPTION: This snippet demonstrates how to include JSON data directly in Wasp code using the json type.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/general/language.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\n{=json { a: 5, b: [\"hi\"] } json=}\n```\n\n----------------------------------------\n\nTITLE: Accessing User with Email Authentication in Wasp\nDESCRIPTION: Example of the AuthUser object structure when a user has signed up with Email authentication. Displays user data fields and email-specific authentication information including verification status.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = {\n  // User data\n  id: 'cluqsex9500017cn7i2hwsg17',\n  address: 'Some address',\n\n  // Auth methods specific data\n  identities: {\n    email: {\n      id: 'user@app.com',\n      isEmailVerified: true,\n      emailVerificationSentAt: '2024-04-08T10:06:02.204Z',\n      passwordResetSentAt: null,\n    },\n    google: null,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing React Home Page Component\nDESCRIPTION: TypeScript React component implementation for the home page that displays user's recipes using Wasp's query hook.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/introduction/introduction.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQuery, getRecipes } from 'wasp/client/operations'\nimport { type User } from 'wasp/entities'\n\nexport function HomePage({ user }: { user: User }) {\n  const { data: recipes, isLoading } = useQuery(getRecipes)\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <div>\n      <h1>Recipes</h1>\n      <ul>\n        {recipes\n          ? recipes.map((recipe) => (\n              <li key={recipe.id}>\n                <div>{recipe.title}</div>\n                <div>{recipe.description}</div>\n              </li>\n            ))\n          : 'No recipes defined yet!'}\n      </ul>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Wasp App to Fly.io\nDESCRIPTION: Command to deploy a new Wasp application to Fly.io with a single command. Requires flyctl CLI and specifies app name and region.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/deployment/cli.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly launch my-wasp-app mia\n```\n\n----------------------------------------\n\nTITLE: Basic Wasp Declarations Example\nDESCRIPTION: Demonstrates the basic structure of Wasp declarations, showing how to define an app, route, and page. This illustrates the core syntax pattern of 'declaration_type declaration_name declaration_body'.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/general/language.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\"\n}\n\nroute RootRoute { path: \"/\", to: DashboardPage }\n\npage DashboardPage {\n  component: import { DashboardPage } from \"@src/Dashboard.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying with Server Environment Variables\nDESCRIPTION: Command to deploy a Wasp app to Fly.io with server-side environment variables like authentication secrets using the --server-secret option.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/cli.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly launch my-wasp-app mia --server-secret GOOGLE_CLIENT_ID=<...> --server-secret GOOGLE_CLIENT_SECRET=<...>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev Server Behavior in Vite\nDESCRIPTION: Example of how to disable automatic browser opening in Vite dev server configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/custom-vite-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  server: {\n    open: false,\n  },\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  server: {\n    open: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating New Wasp Project Interactively\nDESCRIPTION: Example of creating a new Wasp project using interactive mode, showing template selection and project setup process.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/general/cli.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp new\nEnter the project name (e.g. my-project) ▸ MyFirstProject\nChoose a starter template\n[1] basic (default)\n    Simple starter template with a single page.\n[2] todo-ts\n    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.\n[3] saas\n    Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.\n[4] embeddings\n    Comes with code for generating vector embeddings and performing vector similarity search.\n[5] ai-generated\n    🤖 Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)\n▸ 1\n\n🐝 --- Creating your project from the \"basic\" template... -------------------------\n\nCreated new Wasp app in ./MyFirstProject directory!\n\nTo run your new app, do:\n    cd MyFirstProject\n    wasp db start\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Extensions in Wasp\nDESCRIPTION: Shows how to configure Prisma options including preview features and database extensions for PostgreSQL\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/backends.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    // ...\n    prisma: {\n      clientPreviewFeatures: [\"postgresqlExtensions\"],\n      dbExtensions: [\n        { name: \"hstore\", schema: \"myHstoreSchema\" },\n        { name: \"pg_trgm\" },\n        { name: \"postgis\", version: \"2.1\" }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Routes and Pages in Wasp\nDESCRIPTION: This snippet adds a new route and page definition for the login page in the main.wasp file. It sets up the path and component for the login page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nroute LoginPageRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import Login from \"@client/LoginPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: File Structure After Migration\nDESCRIPTION: Example of the new recommended feature-based file structure organization in the src directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc\n│\n├── task\n│   ├── actions.ts    -- former taskActions.ts\n│   ├── queries.ts    -- former taskQueries.ts\n│   ├── Task.css\n│   ├── TaskLisk.tsx\n│   └── Task.tsx\n├── user\n│   ├── actions.ts    -- former userActions.ts\n│   ├── Dashboard.tsx\n│   ├── Login.tsx\n│   ├── queries.ts    -- former userQueries.ts\n│   ├── Register.tsx\n│   └── User.tsx\n├── MainPage.tsx\n└── utils.ts\n```\n\n----------------------------------------\n\nTITLE: Defining a Utility Function for Testing (JavaScript)\nDESCRIPTION: A simple JavaScript helper function `areThereAnyTasks` defined in `src/helpers.js`. It takes an array of tasks and returns `false` if the array is empty, intended to be unit tested.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/testing.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nexport function areThereAnyTasks(tasks) {\n  return tasks.length === 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind Directives in CSS\nDESCRIPTION: Demonstrates how to import Tailwind CSS base, components, and utilities into a CSS file in a Wasp project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/css-frameworks.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* ... */\n```\n\n----------------------------------------\n\nTITLE: Setting Google Auth Environment Variables\nDESCRIPTION: This snippet shows how to set the necessary environment variables for Google authentication in the .env.server file. It includes placeholders for the Google client ID and secret.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/google.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGOOGLE_CLIENT_ID=your-google-client-id\nGOOGLE_CLIENT_SECRET=your-google-client-secret\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Sender in Wasp\nDESCRIPTION: Demonstrates how to set up the email sender configuration in the main.wasp file, including specifying the provider and default sender details.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/email/email.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: <provider>,\n    defaultFrom: {\n      name: \"Example\",\n      email: \"hello@itsme.com\"\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User ID in JavaScript Server-side Code\nDESCRIPTION: Shows how to use the getFirstProviderUserId helper function to access the user's ID in server-side JavaScript code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/entities.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { getFirstProviderUserId } from 'wasp/auth'\n\nexport const createTask = async (args, context) => {\n  const userId = getFirstProviderUserId(context.user)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp 0.12.x with Curl\nDESCRIPTION: Command for installing Wasp version 0.12.4 using the curl installer script.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v 0.12.4\n```\n\n----------------------------------------\n\nTITLE: Viewing Generated Dockerfile with Wasp CLI\nDESCRIPTION: Command to display the generated Dockerfile for your Wasp project, which is useful for understanding the default deployment configuration before making customizations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwasp dockerfile\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page with Wasp Auth UI\nDESCRIPTION: React component implementing a login page using Wasp's authentication UI components with routing to signup page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/crud.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function LoginPage() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        placeContent: 'center',\n      }}\n    >\n      <LoginForm />\n      <div>\n        <Link to=\"/signup\">Create an account</Link>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp App with Auth and Routes\nDESCRIPTION: This snippet shows the configuration of a Wasp app with username and password authentication, and defines routes for the main page, login, and signup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/crud.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp tasksCrudApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"Tasks Crud App\",\n\n  // We enabled auth and set the auth method to username and password\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n\n// Tasks app routes\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  component: import { MainPage } from \"@src/MainPage.jsx\",\n  authRequired: true,\n}\n\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { LoginPage } from \"@src/LoginPage.jsx\",\n}\n\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { SignupPage } from \"@src/SignupPage.jsx\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Schema for Google Auth\nDESCRIPTION: Prisma schema definition for the User model with required fields for Google authentication\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/google.md#2025-04-22_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          Int    @id @default(autoincrement())\n  username    String @unique\n  displayName String\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating Heroku App and Database\nDESCRIPTION: Commands to create a new Heroku app and provision a PostgreSQL database for the Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/manually.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nheroku create <app-name>\nheroku addons:create --app <app-name> heroku-postgresql:mini\n```\n\n----------------------------------------\n\nTITLE: Setting Up Example Todo App\nDESCRIPTION: Series of commands to initialize and run the example Todo application for development testing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./run wasp-cli db start\n```\n\nLANGUAGE: sh\nCODE:\n```\n./run wasp-cli db migrate-dev\n```\n\nLANGUAGE: sh\nCODE:\n```\ncp .env.server.example .env.server\n```\n\nLANGUAGE: sh\nCODE:\n```\n./run wasp-cli start\n```\n\n----------------------------------------\n\nTITLE: Extended Head Tag Configuration\nDESCRIPTION: Advanced example demonstrating how to add multiple custom stylesheets, scripts, and meta tags to the app's head section.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/customizing-app.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.12.0\"\n  },\n  title: \"My App\",\n  head: [  // optional\n    \"<link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\\\" />\",\n    \"<script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js\\\"></script>\",\n    \"<meta name=\\\"viewport\\\" content=\\\"minimum-scale=1, initial-scale=1, width=device-width\\\" />\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Wasp Telemetry Status\nDESCRIPTION: Shows the output of the 'wasp telemetry' command, which displays the current telemetry status, cache directory, and last sent date.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/general/cli.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp telemetry\n\nTelemetry is currently: ENABLED\nTelemetry cache directory: /home/user/.cache/wasp/telemetry/\nLast time telemetry data was sent for this project: 2021-05-27 09:21:16.79537226 UTC\nOur telemetry is anonymized and very limited in its scope: check https://wasp.sh/docs/telemetry for more details.\n```\n\n----------------------------------------\n\nTITLE: Custom Dev Server Port - Vite Config - JavaScript\nDESCRIPTION: This JavaScript code changes the port of the Vite dev server by setting `server.port` in `vite.config.js` to `4000`. It allows you to serve your client locally on a different port. No dependencies beyond the default Vite/Wasp project. Ensure you update `WASP_WEB_CLIENT_URL` in your `.env.server` to match the port. The config is merged with Wasp's default config.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/custom-vite-config.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  server: {\n    port: 4000,\n  },\n}\n```\n\nLANGUAGE: env\nCODE:\n```\nWASP_WEB_CLIENT_URL=http://localhost:4000\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Setup Function in JavaScript\nDESCRIPTION: Shows an example of a client setup function that logs a message every hour, demonstrating how to run custom code during initialization.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/client-config.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function mySetupFunction() {\n  let count = 1\n  setInterval(\n    () => console.log(`You have been online for ${count++} hours.`),\n    1000 * 60 * 60\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using getFirstProviderUserId Helper in TypeScript\nDESCRIPTION: Example of using the getFirstProviderUserId helper method in a TypeScript React component with proper type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/entities.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const userId = user.getFirstProviderUserId()\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified MainPage React Component\nDESCRIPTION: This snippet shows the simplified MainPage React component after cleaning up, displaying a basic 'Hello world!' message.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/03-pages.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst MainPage = () => {\n  return <div>Hello world!</div>\n}\n\nexport default MainPage\n```\n\n----------------------------------------\n\nTITLE: Setting Heroku Environment Variables\nDESCRIPTION: Configure necessary environment variables for the Heroku app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nheroku config:set --app <app-name> JWT_SECRET=<random_string_at_least_32_characters_long>\nheroku config:set --app <app-name> WASP_WEB_CLIENT_URL=<url_of_where_client_will_be_deployed>\nheroku config:set --app <app-name> WASP_SERVER_URL=<url_of_where_server_will_be_deployed>\n```\n\n----------------------------------------\n\nTITLE: Configuring User Entity and Auth Settings in Wasp\nDESCRIPTION: Basic configuration for setting up authentication in a Wasp application with a User entity and Google as the authentication method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    // highlight-next-line\n    userEntity: User,\n    methods: {\n      google: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\n// highlight-next-line\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    //...\npsl=}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation After Migration\nDESCRIPTION: The migrated TypeScript version of the queries module with added type annotations, including Task entity types and the GetTaskInfo operation type for improved type safety and IDE support.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/general/typescript.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport HttpError from 'wasp/server'\n// highlight-next-line\nimport { type Task } from '@wasp/entities'\n// highlight-next-line\nimport { type GetTaskInfo } from '@wasp/server/operations'\n\n// highlight-next-line\nfunction getInfoMessage(task: Pick<Task, 'isDone' | 'description'>): string {\n  const isDoneText = task.isDone ? 'is done' : 'is not done'\n  return `Task '${task.description}' is ${isDoneText}.`\n}\n\n// highlight-next-line\nexport const getTaskInfo: GetTaskInfo<Pick<Task, 'id'>, string> = async (\n  { id },\n  context\n) => {\n  const Task = context.entities.Task\n\n  const task = await Task.findUnique({ where: { id } })\n  if (!task) {\n    throw new HttpError(404)\n  }\n\n  return getInfoMessage(task)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SaaS Template Project\nDESCRIPTION: Command to create a new Wasp project using the SaaS template which includes Stripe, OpenAI GPT API, Google Auth, SendGrid, Tailwind, and Cron Jobs.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/starter-templates.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwasp new <project-name> -t saas\n```\n\n----------------------------------------\n\nTITLE: Defining Password Migration Page Route and Component in Wasp\nDESCRIPTION: Defines a Wasp route `/migrate-password` associated with the `MigratePassword` page. It also defines the `MigratePassword` page itself, specifying that its implementation comes from the `MigratePasswordPage` component imported from `@src/pages/MigratePassword`. This setup is used for both JavaScript and TypeScript implementations of the page component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_20\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\nroute MigratePasswordRoute { path: \"/migrate-password\", to: MigratePassword }\npage MigratePassword {\n  component: import { MigratePasswordPage } from \"@src/pages/MigratePassword\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Interactive Project Creation Dialog\nDESCRIPTION: Shows the interactive project creation process using 'wasp new' command, including template selection and project setup instructions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/general/cli.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp new\nEnter the project name (e.g. my-project) ▸ MyFirstProject\nChoose a starter template\n[1] basic (default)\n    Simple starter template with a single page.\n[2] todo-ts\n    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.\n[3] saas\n    Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.\n[4] embeddings\n    Comes with code for generating vector embeddings and performing vector similarity search.\n[5] ai-generated\n    🤖 Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)\n▸ 1\n\n🐝 --- Creating your project from the \"basic\" template... -------------------------\n\nCreated new Wasp app in ./MyFirstProject directory!\n\nTo run your new app, do:\n    cd MyFirstProject\n    wasp db start\n```\n\n----------------------------------------\n\nTITLE: Email Auth Configuration Before Migration\nDESCRIPTION: Example of email authentication configuration in Wasp 0.11.X showing the additionalFields setup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {},\n    },\n    onAuthFailedRedirectTo: \"/login\",\n    signup: {\n      additionalFields: import { fields } from \"@server/auth/signup.js\",\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Wasp CLI Commands Overview\nDESCRIPTION: Shows the output of running the 'wasp' command without arguments, listing all available commands and their descriptions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/general/cli.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  wasp <command> [command-args]\n\nCOMMANDS\n  GENERAL\n    new [<name>] [args]   Creates a new Wasp project. Run it without arguments for interactive mode.\n      OPTIONS:\n        -t|--template <template-name>\n           Check out the templates list here: https://github.com/wasp-lang/starters\n\n    new:ai <app-name> <app-description> [<config-json>]\n      Uses AI to create a new Wasp project just based on the app name and the description.\n      You can do the same thing with `wasp new` interactively.\n      Run `wasp new:ai` for more info.\n\n    version               Prints current version of CLI.\n    waspls                Run Wasp Language Server. Add --help to get more info.\n    completion            Prints help on bash completion.\n    uninstall             Removes Wasp from your system.\n  IN PROJECT\n    start                 Runs Wasp app in development mode, watching for file changes.\n    start db              Starts managed development database for you.\n    db <db-cmd> [args]    Executes a database command. Run 'wasp db' for more info.\n    clean                 Deletes all generated code, all cached artifacts, and the node_modules dir.\n                          Wasp equivalent of 'have you tried closing and opening it again?'.\n    build                 Generates full web app code, ready for deployment. Use when deploying or ejecting.\n    deploy                Deploys your Wasp app to cloud hosting providers.\n    telemetry             Prints telemetry status.\n    deps                  Prints the dependencies that Wasp uses in your project.\n    dockerfile            Prints the contents of the Wasp generated Dockerfile.\n    info                  Prints basic information about the current Wasp project.\n    test                  Executes tests in your project.\n    studio                (experimental) GUI for inspecting your Wasp app.\n\nEXAMPLES\n  wasp new MyApp\n  wasp start\n  wasp db migrate-dev\n\nDocs: https://wasp.sh/docs\nDiscord (chat): https://discord.gg/rzdnErX\nNewsletter: https://wasp.sh/#signup\n```\n\n----------------------------------------\n\nTITLE: Global Middleware Customization in JavaScript\nDESCRIPTION: Implementation of a custom middleware configuration function in JavaScript that modifies the default CORS settings to allow multiple origins.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/middleware-config.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport cors from 'cors'\nimport { config } from 'wasp/server'\n\nexport const serverMiddlewareFn = (middlewareConfig) => {\n  // Example of adding extra domains to CORS.\n  middlewareConfig.set('cors', cors({ origin: [config.frontendUrl, 'https://example1.com', 'https://example2.com'] }))\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Configuration in Wasp\nDESCRIPTION: Shows how to import and access the server configuration object which contains the frontendUrl field. This configuration is essential for server-side operations to know the client's URL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/accessing-app-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { config } from 'wasp/server'\n\nconsole.log(config.frontendUrl)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Account Page Component in React\nDESCRIPTION: Creates a basic React component for the account page, displaying user information and a logout button. It uses Wasp's built-in logout function and receives the user object as a prop.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport Button from './Button';\nimport { ChangeEvent, useEffect, useState } from 'react';\nimport logout from '@wasp/auth/logout';\nimport type { User } from '@wasp/entities';\n\nconst AccountPage = ({ user }: { user: User }) => {\n  return (\n\t\t<div className='flex flex-col justify-center items-center mt-12 w-full'>\n      <div className='flex flex-col items-center justify-center gap-4 border border-neutral-700 bg-neutral-100/40 rounded-xl p-1 sm:p-4 w-full'>\n        <div className='flex flex-row justify-end w-full px-4 pt-2'>\n          <Button onClick={logout}>Logout</Button>\n        </div>\n        {JSON.stringify(user, null, 2)}\n      </div>\n    </div>\n  );\n};\n\nexport default AccountPage;\n```\n\n----------------------------------------\n\nTITLE: Adding a Caution Block in Markdown\nDESCRIPTION: This code shows how to create a caution block in Markdown using Docusaurus-specific syntax, providing a visual warning to readers about the context of the advice given.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-11-22-fundraising-learnings.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n:::caution\nI will try to refrain from giving \"general\" advice (as our fundraise is a single data point), and focus on the stats and specific things that worked for us. Keep in mind the same might not work for you - I recommend always taking advice with a pinch of salt to see what makes the most sense in your case.\n:::\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration Before Migration\nDESCRIPTION: Example of a tailwind.config.cjs file before migration to Wasp 0.12.X, showing the content paths without the resolveProjectPath function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    // highlight-next-line\n    './src/**/*.{js,jsx,ts,tsx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Clean Command Output\nDESCRIPTION: Shows the output of the 'wasp clean' command which removes generated code and cached artifacts.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/general/cli.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp clean\n\n🐝 --- Deleting the .wasp/ directory... -------------------------------------------\n\n✅ --- Deleted the .wasp/ directory. ----------------------------------------------\n\n🐝 --- Deleting the node_modules/ directory... ------------------------------------\n\n✅ --- Deleted the node_modules/ directory. ---------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Creating New Wasp Project\nDESCRIPTION: Commands to install Wasp and create a new project\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-13-how-to-add-auth-with-lucia-to-your-react-nextjs-app.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh\nwasp new my-wasp-app\ncd my-wasp-app\n```\n\n----------------------------------------\n\nTITLE: Importing Twitter Tweet Embed Component in React TSX\nDESCRIPTION: This snippet imports the TwitterTweetEmbed component from the react-twitter-embed library, allowing for embedded tweets with Twitter styling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TwitterTweetEmbed } from 'react-twitter-embed';\n```\n\n----------------------------------------\n\nTITLE: Implementing userSignupFields in TypeScript\nDESCRIPTION: TypeScript implementation of the userSignupFields object that validates the address field during user signup, ensuring it meets requirements before saving to the database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/overview.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Client Environment Validation in Wasp\nDESCRIPTION: Shows how to register client-side environment validation schema in the Wasp configuration file by importing and using the envValidationSchema.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/env-vars.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  ...\n  client: {\n    envValidationSchema: import { envValidationSchema } from \"@src/env\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migrations for User-Task Relation (Shell)\nDESCRIPTION: Triggers database migration to update the schema with the new user-task relationship, reflecting changes made in the Prisma model. Requires prior Prisma schema modifications and results in an updated SQL schema.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/07-auth.md#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nwasp db migrate-dev\\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Signup Action in Wasp (wasp)\nDESCRIPTION: Shows how to declare a custom signup action using Wasp's configuration syntax. Specifies that the function to use for the action is imported from a JavaScript/TypeScript module and which entities the action will manipulate (here, `User`). This must be placed in the `.wasp` config file and enables custom behavior at signup time.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/entities.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\naction customSignup {\n  fn: import { signup } from \"@src/auth/signup.js\",\n  entities: [User]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Auth UI Colors in TypeScript\nDESCRIPTION: Defines custom color tokens with TypeScript type safety using CustomizationOptions interface.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/ui.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CustomizationOptions } from 'wasp/client/auth'\n\nexport const authAppearance: CustomizationOptions['appearance'] = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Generated Dockerfile Command\nDESCRIPTION: Command to display the current project's Dockerfile configuration, including any custom additions merged with Wasp's default multi-stage Dockerfile.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwasp dockerfile\n```\n\n----------------------------------------\n\nTITLE: Creating New Wasp App via CLI\nDESCRIPTION: Command to initiate a new Wasp application using the CLI's AI generation feature. This requires OpenAI API keys to be configured in the environment variables.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/wasp-ai/creating-new-app.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasp new\n```\n\n----------------------------------------\n\nTITLE: Docusaurus Import Statements\nDESCRIPTION: Import statements for Docusaurus components and utilities used in the blog post.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-03-02-wasp-beta-update-feb.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n\nimport InBlogCta from './components/InBlogCta';\nimport WaspIntro from './_wasp-intro.md';\nimport ImgWithCaption from './components/ImgWithCaption'\n```\n\n----------------------------------------\n\nTITLE: Setting Client Environment Variables for Production Build\nDESCRIPTION: Command to provide production client environment variables during the build process. These variables are injected into the client JavaScript code and should not contain sensitive information.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/env-vars.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nREACT_APP_API_URL=<url_to_wasp_backend> REACT_APP_SOME_OTHER_VAR_NAME=someothervalue npm run build\n```\n\n----------------------------------------\n\nTITLE: Migrating Prisma Preview Features to schema.prisma\nDESCRIPTION: Shows how to migrate Prisma preview features configuration from .wasp file to the schema.prisma file, including database extensions and preview features.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_16\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n  // highlight-next-line\n  extensions = [hstore(schema: \"myHstoreSchema\"), pg_trgm, postgis(version: \"2.1\")]\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  // highlight-next-line\n  previewFeatures = [\"postgresqlExtensions\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes and Pages in Wasp\nDESCRIPTION: This snippet shows how to define a route and a page in the main.wasp file, connecting a URL path to a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/03-pages.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nroute RootRoute { path: \"/\", to: MainPage }\n\npage MainPage {\n  component: import Main from \"@client/MainPage.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Integration - JavaScript\nDESCRIPTION: Client-side React component implementation in JavaScript showing how to use the updateTask action within a TaskView component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/06-actions.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  updateTask,\n  createTask,\n  getTasks,\n  useQuery,\n} from 'wasp/client/operations'\n\nconst TaskView = ({ task }) => {\n  const handleIsDoneChange = async (event) => {\n    try {\n      await updateTask({\n        id: task.id,\n        isDone: event.target.checked,\n      })\n    } catch (error) {\n      window.alert('Error while updating task: ' + error.message)\n    }\n  }\n\n  return (\n    <div>\n      <input\n        type=\"checkbox\"\n        id={String(task.id)}\n        checked={task.isDone}\n        onChange={handleIsDoneChange}\n      />\n      {task.description}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Username Generation Functions in Wasp\nDESCRIPTION: Example of how to import the username generation functions from the Wasp core authentication module. These functions help in creating unique usernames for users.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/_username-generate-explanation.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { generateAvailableUsername, generateAvailableDictionaryUsername } from '@wasp/core/auth.js';\n```\n\n----------------------------------------\n\nTITLE: Setting Client Environment Variables during Production Build (Wasp)\nDESCRIPTION: Demonstrates how to inject client-side environment variables (prefixed with `REACT_APP_`) directly into the client bundle during the production build (`npm run build`). These variables are provided inline with the build command and replace the `.env.client` file usage for production deployments. These variables are public.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/env-vars.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nREACT_APP_SOME_VAR_NAME=somevalue REACT_APP_SOME_OTHER_VAR_NAME=someothervalue npm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp App with GitHub Auth\nDESCRIPTION: Main Wasp application configuration that sets up GitHub authentication with user entity and redirect settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/github.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {\n        configFn: import { getConfig } from \"@src/auth/github.js\",\n        userSignupFields: import { userSignupFields } from \"@src/auth/github.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Models with Prisma Schema\nDESCRIPTION: Defines User and Recipe data models using Prisma Schema Language, establishing a relationship between users and their recipes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/introduction/introduction.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          Int @id @default(autoincrement())\n  recipes     Recipe[]\n}\n\nmodel Recipe {\n  id          Int @id @default(autoincrement())\n  title       String\n  description String?\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Example Telemetry Payload for Wasp CLI Command Invocation (JSON)\nDESCRIPTION: Shows the JSON structure of the anonymized telemetry data sent via HTTPS when a `wasp` CLI command is invoked. This includes a unique user ID, project hash, build status, limited deployment arguments, Wasp version, OS, and execution context (like CI). Data is sent at most twice per 12-hour period.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/telemetry.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Randomly generated, non-identifiable UUID representing a user.\n  \"distinct_id\": \"bf3fa7a8-1c11-4f82-9542-ec1a2d28786b\",\n  // Non-identifiable hash representing a project.\n  \"project_hash\": \"6d7e561d62b955d1\",\n  // True if command was `wasp build`, false otherwise.\n  \"is_build\": true,\n  // Captures `wasp deploy ...` args, but only those from the limited, pre-defined list of keywords.\n  // Those are \"fly\", \"setup\", \"create-db\", \"deploy\" and \"cmd\". Everything else is ommited.\n  \"deploy_cmd_args\": \"fly;deploy\",\n  \"wasp_version\": \"0.1.9.1\",\n  \"os\": \"linux\",\n  // \"CI\" if running on CI, and whatever is the content of \"WASP_TELEMETRY_CONTEXT\" env var.\n  // We use this to track when execution is happening in some special context, like on Gitpod, Replit or similar.\n  \"context\": \"CI\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Wasp Web Application\nDESCRIPTION: Command to install dependencies and build the web application with the backend API URL environment variable. Additional client-side environment variables should be included in the build command as needed.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/_building-the-web-client.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install && REACT_APP_API_URL=<url_to_wasp_backend> npm run build\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeSignup Hook in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement the onBeforeSignup hook in JavaScript. It shows how to perform checks before user signup, such as limiting the number of users or rejecting specific email addresses.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/auth-hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const onBeforeSignup = async ({ providerId, prisma, req }) => {\n  const count = await prisma.user.count()\n  console.log('number of users before', count)\n  console.log('provider name', providerId.providerName)\n  console.log('provider user ID', providerId.providerUserId)\n\n  if (count > 100) {\n    throw new HttpError(403, 'Too many users')\n  }\n\n  if (\n    providerId.providerName === 'email' &&\n    providerId.providerUserId === 'some@email.com'\n  ) {\n    throw new HttpError(403, 'This email is not allowed')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS in Wasp\nDESCRIPTION: Default Tailwind configuration file that specifies content paths, theming options and plugins\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-16-tailwind-feature-announcement.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./src/**/*.{js,jsx,ts,tsx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Path Imports in Wasp Files\nDESCRIPTION: Example of how to update component and query imports in Wasp files from the old format to the new path structure in Wasp 0.12.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\npage LoginPage {\n  // highlight-next-line\n  // This previously resolved to src/client/LoginPage.js\n  // highlight-next-line\n  component: import Login from \"@client/LoginPage\"\n}\n\n// ...\n\nquery getTasks {\n  // highlight-next-line\n  // This previously resolved to src/server/queries.js\n  // highlight-next-line\n  fn: import { getTasks } from \"@server/queries.js\",\n}\n```\n\nLANGUAGE: js\nCODE:\n```\npage LoginPage {\n  // highlight-next-line\n  // This now resolves to src/client/LoginPage.js\n  // highlight-next-line\n  component: import Login from \"@src/client/LoginPage\"\n}\n\n// ...\n\nquery getTasks {\n  // highlight-next-line\n  // This now resolves to src/server/queries.js\n  // highlight-next-line\n  fn: import { getTasks } from \"@src/server/queries.js\",\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Database URL Environment Variable\nDESCRIPTION: Example of setting the DATABASE_URL environment variable for PostgreSQL connection in .env.server file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/databases.md#2025-04-22_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nDATABASE_URL=postgresql://user:password@localhost:5432/mydb\n```\n\n----------------------------------------\n\nTITLE: Importing Required Tag Component in JSX\nDESCRIPTION: This code snippet imports the Required component from a local file. The Required component is likely used to indicate mandatory fields in the user interface.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/_user-fields.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Required } from '@site/src/components/Tag';\n```\n\n----------------------------------------\n\nTITLE: Rendering Hackathon Application Link in React JSX\nDESCRIPTION: This JSX code snippet creates a centered div containing a link to the Wasp Hackathon application. It uses inline styling to format the text and emphasize the call-to-action.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-04-27-wasp-hackathon-two.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ textAlign: \"center\"}}>\n  <a href=\"https://hackathon.wasp.sh\"><span style={{ fontSize: \"26px\"}}> 🏆 Join the Wasp Hackathon 2.0! 🏆</span></a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Fly.io App for Wasp Deployment\nDESCRIPTION: Creates a new Fly.io application with a remote builder and generates a fly.toml configuration file. This command also initiates the setup process for a PostgreSQL database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/manually.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflyctl launch --remote-only\n```\n\n----------------------------------------\n\nTITLE: Deploying to Specific Fly.io Organization\nDESCRIPTION: Command for deploying a Wasp application to Fly.io while specifying a target organization using the --org flag. This allows deployment to a specific organization when managing multiple Fly.io organizations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/cli.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly launch my-wasp-app mia --org hive\n```\n\n----------------------------------------\n\nTITLE: Configuring Login Precheck Hook in Wasp (TypeScript) - wasp\nDESCRIPTION: Demonstrates main.wasp config for pre-login checks using a TypeScript implementation of the 'onBeforeLogin' hook. The imported function should exist in the TypeScript source and will be integrated into Wasp's authentication lifecycle, allowing for business rules before login proceeds.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_11\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  ...\n  auth: {\n    ...\n    onBeforeLogin: import { onBeforeLogin } from \"@src/auth/hooks\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Credential Helper in Windows\nDESCRIPTION: Command to set up Git credential helper in Windows for shared authentication\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-11-21-guide-windows-development-wasp-wsl.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global credential.helper wincred\n```\n\n----------------------------------------\n\nTITLE: Rendering Additional Signup Fields via Render Function - React (TypeScript)\nDESCRIPTION: This React component (TypeScript) is functionally identical to the JavaScript version above, but with TypeScript support. It passes a render function to SignupForm's additionalFields that uses react-hook-form's watch to display a personalized greeting. Requires wasp/client/auth, react, and react-hook-form with TypeScript types. Inputs/outputs match the JavaScript version; adds type safety for TypeScript projects.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignupForm, FormItemGroup } from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={(form, state) => {\n        const username = form.watch('username')\n        return (\n          username && (\n            <FormItemGroup>\n              Hello there <strong>{username}</strong> 👋\n            </FormItemGroup>\n          )\n        )\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Wasp CLI Help and Commands\nDESCRIPTION: Running the `wasp` command without any arguments displays the basic usage pattern, a list of available commands grouped by category (GENERAL, IN PROJECT), their descriptions, options, and common examples. This serves as a primary help screen for the CLI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/general/cli.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  wasp <command> [command-args]\n\nCOMMANDS\n  GENERAL\n    new [<name>] [args]   Creates a new Wasp project. Run it without arguments for interactive mode.\n      OPTIONS:\n        -t|--template <template-name>\n           Check out the templates list here: https://github.com/wasp-lang/starters\n\n    new:ai <app-name> <app-description> [<config-json>]\n      Uses AI to create a new Wasp project just based on the app name and the description.\n      You can do the same thing with `wasp new` interactively.\n      Run `wasp new:ai` for more info.\n\n    version               Prints current version of CLI.\n    waspls                Run Wasp Language Server. Add --help to get more info.\n    completion            Prints help on bash completion.\n    uninstall             Removes Wasp from your system.\n  IN PROJECT\n    start                 Runs Wasp app in development mode, watching for file changes.\n    start db              Starts managed development database for you.\n    db <db-cmd> [args]    Executes a database command. Run 'wasp db' for more info.\n    clean                 Deletes all generated code, all cached artifacts, and the node_modules dir.\n                          Wasp equivalent of 'have you tried closing and opening it again?'.\n    build                 Generates full web app code, ready for deployment. Use when deploying or ejecting.\n    deploy                Deploys your Wasp app to cloud hosting providers.\n    telemetry             Prints telemetry status.\n    deps                  Prints the dependencies that Wasp uses in your project.\n    dockerfile            Prints the contents of the Wasp generated Dockerfile.\n    info                  Prints basic information about the current Wasp project.\n    test                  Executes tests in your project.\n    studio                (experimental) GUI for inspecting your Wasp app.\n\nEXAMPLES\n  wasp new MyApp\n  wasp start\n  wasp db migrate-dev\n\nDocs: https://wasp.sh/docs\nDiscord (chat): https://discord.gg/rzdnErX\nNewsletter: https://wasp.sh/#signup\n```\n\n----------------------------------------\n\nTITLE: Project Structure Highlighting Tailwind Config Files - Bash\nDESCRIPTION: This snippet uses the tree command to illustrate the expected directory structure for a Wasp project that has Tailwind and PostCSS configuration files present. It visually distinguishes which files must be added for Tailwind support and demonstrates the organization of core files. No dependencies are required to view this structure, but the structure should match for the setup to work. The output helps validate file presence and location before Wasp will detect and use them.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/css-frameworks.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntree .\\n.\\n├── main.wasp\\n├── package.json\\n├── src\\n│   ├── Main.css\\n│   ├── MainPage.jsx\\n│   ├── vite-env.d.ts\\n│   └── waspLogo.png\\n├── public\\n├── tsconfig.json\\n├── vite.config.ts\\n# highlight-start\\n├── postcss.config.cjs\\n└── tailwind.config.cjs\\n# highlight-end\n```\n\n----------------------------------------\n\nTITLE: Importing Environment Validation Schemas in Wasp Configuration\nDESCRIPTION: Configures the Wasp application to use the defined validation schemas for both client and server environment variables by importing them from the env.js/ts file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/env-vars.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  ...\n  client: {\n    envValidationSchema: import { clientEnvValidationSchema } from \"@src/env\",\n  },\n  server: {\n    envValidationSchema: import { serverEnvValidationSchema } from \"@src/env\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Test with Mocked Query in TypeScript\nDESCRIPTION: Demonstrates how to test a React component that uses a Wasp query in TypeScript, mocking the query data and rendering the component in context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/testing.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQuery, getTasks } from \"wasp/client/operations\";\n\nconst Todo = (_props: {}) => {\n  const { data: tasks } = useQuery(getTasks);\n\n  return (\n    <ul>\n      {tasks &&\n        tasks.map((task) => (\n          <li key={task.id}>\n            <input type=\"checkbox\" value={task.isDone} />\n            {task.description}\n          </li>\n        ))}\n    </ul>\n  );\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from \"vitest\";\nimport { screen } from \"@testing-library/react\";\n\nimport { mockServer, renderInContext } from \"wasp/client/test\";\nimport { getTasks } from \"wasp/client/operations\";\nimport Todo from \"./Todo\";\n\nconst { mockQuery } = mockServer();\n\nconst mockTasks = [\n  {\n    id: 1,\n    description: \"test todo 1\",\n    isDone: true,\n    userId: 1,\n  },\n];\n\ntest(\"handles mock data\", async () => {\n  mockQuery(getTasks, mockTasks);\n\n  renderInContext(<Todo />);\n\n  await screen.findByText(\"test todo 1\");\n\n  expect(screen.getByRole(\"checkbox\")).toBeChecked();\n\n  screen.debug();\n});\n```\n\n----------------------------------------\n\nTITLE: SMTP Environment Variables\nDESCRIPTION: Required environment variables for using the SMTP email provider, to be added to the .env.server file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/email/email.md#2025-04-22_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nSMTP_HOST=\nSMTP_USERNAME=\nSMTP_PASSWORD=\nSMTP_PORT=\n```\n\n----------------------------------------\n\nTITLE: SendGrid Environment Variables Configuration\nDESCRIPTION: Defines the required environment variable for the SendGrid email provider in the .env.server file, which is the API key.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/email/email.md#2025-04-22_snippet_10\n\nLANGUAGE: properties\nCODE:\n```\nSENDGRID_API_KEY=\n```\n\n----------------------------------------\n\nTITLE: Full App Configuration with Auth in Wasp\nDESCRIPTION: Complete Wasp configuration including User and Task entities, auth setup, and route definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/crud.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp tasksCrudApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"Tasks Crud App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n\nentity User {=psl\n  id       Int @id @default(autoincrement())\n  username String @unique\n  password String\n  tasks    Task[]\npsl=}\n\nentity Task {=psl\n  id          Int @id @default(autoincrement())\n  description String\n  isDone      Boolean\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\npsl=}\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  component: import { MainPage } from \"@client/MainPage.jsx\",\n  authRequired: true,\n}\n\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { LoginPage } from \"@client/LoginPage.jsx\",\n}\n\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { SignupPage } from \"@client/SignupPage.jsx\",\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Wasp App Plan\nDESCRIPTION: This example shows a simplified plan for a Wasp app, including one entity, one action, one query, and one page. It demonstrates how the plan is structured according to the defined JSON schema.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-07-17-how-we-built-gpt-web-app-generator.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entities\": [{\n    \"entityName\": \"User\",\n    \"entityBodyPsl\": \"  id Int @id @default(autoincrement())\\n  username String @unique\\n  password String\\n  tasks Task[]\"\n  }],\n  \"actions\": [{\n    \"opName\": \"createTask\",\n    \"opFnPath\": \"@server/actions.js\",\n    \"opDesc\": \"Checks that user is authenticated and if so, creates new Task belonging to them. Takes description as an argument and by default sets isDone to false. Returns created Task.\"\n  }],\n  \"queries\": [{\n    \"opName\": \"getTask\",\n    \"opFnPath\": \"@server/queries.js\",\n    \"opDesc\": \"Takes task id as an argument. Checks that user is authenticated, and if so, fetches and returns their task that has specified task id. Throws HttpError(400) if tasks exists but does not belong to them.\"\n  }],\n  \"pages\": [{\n    \"pageName\": \"TaskPage\",\n    \"componentPath\": \"@client/pages/Task.jsx\",\n    \"routeName\": \"TaskRoute\",\n    \"routePath\": \"/task/:taskId\",\n    \"pageDesc\": \"Diplays a Task with the specified taskId. Allows editing of the Task. Uses getTask query and createTask action.\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified MainPage Component\nDESCRIPTION: A simplified version of the MainPage component after cleaning up. This basic component just renders a 'Hello world!' message as a starting point for building the Todo application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/03-pages.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport const MainPage = () => {\n  return <div>Hello world!</div>\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport const MainPage = () => {\n  return <div>Hello world!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Email Auth Configuration in Wasp\nDESCRIPTION: Example showing how to migrate the email authentication configuration from the old additionalFields format to the new userSignupFields format in main.wasp file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {},\n    },\n    onAuthFailedRedirectTo: \"/login\",\n    signup: {\n      additionalFields: import { fields } from \"@server/auth/signup.js\",\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding User to Docker Group\nDESCRIPTION: Command to add current user to Docker group for permissions\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-11-21-guide-windows-development-wasp-wsl.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsudo usermod -aG docker $USER\n```\n\n----------------------------------------\n\nTITLE: Updating Wasp Version Configuration\nDESCRIPTION: Configuration update to specify the new Wasp version 0.16.0 in the main.wasp file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-15-to-0-16.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  wasp: {\n    version: \"^0.16.0\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing userSignupFields for Google Auth in JavaScript\nDESCRIPTION: This code defines the userSignupFields function for Google authentication, setting isSignupComplete to false by default.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const userSignupFields = {\n  isSignupComplete: () => false,\n}\n```\n\n----------------------------------------\n\nTITLE: Database Migration Command\nDESCRIPTION: Command to regenerate the Prisma client after updating the auth-related code to the new format.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Building Wasp Application for Deployment\nDESCRIPTION: Command to generate deployable code for a Wasp application. Creates build artifacts in the .wasp/build/ directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/paas.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasp build\n```\n\n----------------------------------------\n\nTITLE: Updating Root Component with Outlet\nDESCRIPTION: Shows how to update the root component to use React Router 6's Outlet component instead of children prop.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-14-to-0-15.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  client: {\n    rootComponent: import { App } from \"@src/App.tsx\",\n  }\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport function App({ children }: { children: React.ReactNode }) {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      {children}\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Outlet } from 'react-router-dom'\n\nexport function App() {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      <Outlet />\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema Model\nDESCRIPTION: Prisma schema definition for a Task entity with id, description, and isDone fields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/general/typescript.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Task {\n  id          Int @id @default(autoincrement())\n  description String\n  isDone      Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Main Page Component in React TSX\nDESCRIPTION: This snippet creates the main page component with a basic structure and styling. It imports a logo and CSS file, and sets up a minimal layout.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport waspLogo from './waspLogo.png'\nimport './Main.css'\n\nconst MainPage = () => {\n  return (\n    <div className='min-h-screen bg-neutral-300/70 text-center'>\n      <div className='flex flex-col justify-center items-center mx-auto pt-12'>\n        <img src={waspLogo} className='w-5' />\n      </div>\n    </div>\n  )\n}\nexport default MainPage\n```\n\n----------------------------------------\n\nTITLE: Deploying to Fly.io\nDESCRIPTION: Deploy the Wasp application to Fly.io using the flyctl deploy command with remote building.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/manually.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflyctl deploy --remote-only --config ../../fly.toml\n```\n\n----------------------------------------\n\nTITLE: Declaring API Routes in Wasp (TypeScript)\nDESCRIPTION: TypeScript version of declaring an API endpoint with authentication, route configuration, entity access, and middleware support in Wasp. The API route is configured with GET method at '/foo/bar' path with Task entity access and custom middleware.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/apis.md#2025-04-22_snippet_13\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar {\n  fn: import { fooBar } from \"@src/apis\",\n  httpRoute: (GET, \"/foo/bar\"),\n  entities: [Task],\n  auth: true,\n  middlewareConfigFn: import { apiMiddleware } from \"@src/apis\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entities in main.wasp (Wasp 0.13.x)\nDESCRIPTION: Demonstrates the previous method in Wasp 0.13.x where database entities (User, Task) were defined directly within the `main.wasp` file using `entity` declarations and embedded Prisma Schema Language (PSL) tags (`{=psl ... psl=}`). This approach is contrasted with the 0.14.x method using a separate `schema.prisma` file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"MyApp\",\n  db: {\n    system: PostgreSQL\n  },\n}\n\nentity User {=psl\n  id       Int @id @default(autoincrement())\n  tasks    Task[]\npsl=}\n\nentity Task {=psl\n  id          Int @id @default(autoincrement())\n  description String\n  isDone      Boolean\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\npsl=}\n```\n```\n\n----------------------------------------\n\nTITLE: Updated package.json with Migrated Dependencies\nDESCRIPTION: Example of a package.json file with dependencies migrated from the Wasp file, showing the proper structure required in Wasp 0.12.X.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"foo\",\n  \"dependencies\": {\n    \"wasp\": \"file:.wasp/out/sdk/wasp\",\n    \"react\": \"^18.2.0\",\n    // highlight-next-line\n    \"redux\": \"^4.0.5\",\n    // highlight-next-line\n    \"reactjs-redux\": \"^7.1.3\"\n  },\n  \"devDependencies\": {\n    \"typescript\": \"^5.1.0\",\n    \"vite\": \"^4.3.9\",\n    \"@types/react\": \"^18.0.37\",\n    \"prisma\": \"4.16.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom User Signup Fields in Wasp Auth\nDESCRIPTION: This Wasp configuration demonstrates how to customize the `usernameAndPassword` authentication method within the `auth` block in `main.wasp`. It uses the `userSignupFields` property to import a definition from a JavaScript file (`@src/auth/email.js`), allowing developers to specify additional fields beyond username and password required during the signup process.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/username-and-pass.md#2025-04-22_snippet_11\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {\n        userSignupFields: import { userSignupFields } from \"@src/auth/email.js\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  }\n}\n// ...\n```\n```\n\n----------------------------------------\n\nTITLE: Transmitting Telemetry Data via HTTPS in JSON - JSON\nDESCRIPTION: These JSON snippets represent the structure of anonymized telemetry data sent from Wasp to backend servers via HTTPS requests. The first object is sent during CLI command execution and includes metadata about the user, project, command context, and environment. The second object is sent during install and includes only the user identifier and operating system. Both require network access and are integrated into the Wasp CLI and install scripts. Inputs are auto-generated and not user provided; outputs are HTTPS POST requests with these payloads. No PII is transmitted.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/telemetry.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Randomly generated, non-identifiable UUID representing a user.\n  \"distinct_id\": \"bf3fa7a8-1c11-4f82-9542-ec1a2d28786b\",\n  // Non-identifiable hash representing a project.\n  \"project_hash\": \"6d7e561d62b955d1\",\n  // True if command was `wasp build`, false otherwise.\n  \"is_build\": true,\n  // Captures `wasp deploy ...` args, but only those from the limited, pre-defined list of keywords.\n  // Those are \"fly\", \"setup\", \"create-db\", \"deploy\" and \"cmd\". Everything else is ommited.\n  \"deploy_cmd_args\": \"fly;deploy\",\n  \"wasp_version\": \"0.1.9.1\",\n  \"os\": \"linux\",\n  // \"CI\" if running on CI, and whatever is the content of \"WASP_TELEMETRY_CONTEXT\" env var.\n  // We use this to track when execution is happening in some special context, like on Gitpod, Replit or similar.\n  \"context\": \"CI\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Randomly generated id.\n  \"distinct_id\": \"274701613078193779564259\",\n  \"os\": \"linux\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using getFirstProviderUserId in React Components\nDESCRIPTION: Example of using the getFirstProviderUserId utility function to display user IDs in a task list component. Returns the first available user ID from various auth providers.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/entities/entities.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getFirstProviderUserId } from 'wasp/auth'\n\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {getFirstProviderUserId(task.user)}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Heroku Server Setup Commands\nDESCRIPTION: Shell commands for setting up and configuring a Heroku application with PostgreSQL database and environment variables.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/manually.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nheroku create <app-name>\n\nheroku addons:create --app <app-name> heroku-postgresql:mini\n\nheroku config:set --app <app-name> JWT_SECRET=<random_string_at_least_32_characters_long>\nheroku config:set --app <app-name> WASP_WEB_CLIENT_URL=<url_of_where_client_will_be_deployed>\nheroku config:set --app <app-name> WASP_SERVER_URL=<url_of_where_server_will_be_deployed>\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the client in a Wasp application using TypeScript, including setting up a root component and a setup function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/client-config.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.tsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating getFirstProviderUserId Usage in Server Function\nDESCRIPTION: Demonstrates migrating server-side code to use the getFirstProviderUserId method directly on the user object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\nimport { getFirstProviderUserId } from 'wasp/auth'\n\nexport const createTask: CreateTask<...>  = async (args, context) => {\n    const userId = getFirstProviderUserId(context.user)\n    // ...\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\nexport const createTask: CreateTask<...>  = async (args, context) => {\n    const userId = user.getFirstProviderUserId()\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Entity Definition from .wasp to schema.prisma in Wasp\nDESCRIPTION: Shows how to migrate an entity definition from a .wasp file to the schema.prisma file, changing 'entity' to 'model' and removing Wasp-specific tags.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\nentity Task {=psl\n  // Stays the same\npsl=}\n```\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Task {\n  // Stays the same\n}\n```\n\n----------------------------------------\n\nTITLE: Supabase Data Fetching\nDESCRIPTION: JavaScript code using Supabase SDK to fetch all phrases from the database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-03-08-building-a-full-stack-app-supabase-vs-wasp.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst { data, error } = await supabase.from(\"phrases\").select(\"*\");\n```\n\n----------------------------------------\n\nTITLE: Defining Database Seeds in Wasp Config\nDESCRIPTION: Configuration example showing how to define database seed functions in the Wasp configuration file. The seeds array can contain multiple imported seed functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/backends.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    // ...\n    seeds: [\n      import { devSeedSimple } from \"@src/dbSeeds.js\",\n      import { prodSeed } from \"@src/dbSeeds.js\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Current Node.js Version (Shell)\nDESCRIPTION: Displays the version of Node.js currently active in the shell session. Useful for verifying the correct version is being used after setting it with `nvm use`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/introduction/quick-start.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Provider with Scope (Before, TypeScript)\nDESCRIPTION: Implements a getConfig function for a Google OAuth provider using the configuration API prior to Wasp 0.13.X. This snippet demonstrates the need to supply clientID, clientSecret, and a singular scope array. Dependencies include environment variables for GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET, and proper use of export. Input: none; Output: configuration object consumed by authentication setup. When migrating, be aware that scope must be renamed and client details omitted.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getConfig() {\n    return {\n        clientID: process.env.GOOGLE_CLIENT_ID,\n        clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n        scope: ['profile', 'email'],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Migration Command\nDESCRIPTION: Command to perform schema migration for the new auth system.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Updating User Signup Fields for OAuth in TypeScript (Before)\nDESCRIPTION: The previous implementation of defineUserSignupFields that uses the old profile data format from OAuth providers.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n    displayName: (data: any) => data.profile.displayName,\n})\n```\n\n----------------------------------------\n\nTITLE: Running Wasp E2E Test Acceptance Command\nDESCRIPTION: Shell command to accept all current E2E test outputs as the new golden (expected) outputs for future test comparisons.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./run test:e2e:accept-all\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting Up Wasp Framework\nDESCRIPTION: Commands to install the Wasp framework, create a new Twitter agent project, and start the development server\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# First, install Wasp by running this in your terminal:\n\ncurl -sSL https://get.wasp.sh/installer.sh | sh\n\n# next, create a new project:\n\nwasp new twitter-agent\n\n# cd into the new directory and start the project:\n\ncd twitter-agent && wasp start\n```\n\n----------------------------------------\n\nTITLE: Converting PostId to Integer in React Client\nDESCRIPTION: Converting the postId from a string to an integer before passing it to the getPost endpoint to ensure correct data type handling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-01-smol-ai-vs-wasp-ai.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nparseInt(postId)\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Routes in Wasp\nDESCRIPTION: Declares routes and pages for signup and login functionality in the Wasp configuration file. This setup allows users to navigate to authentication pages in the application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/07-auth.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { SignupPage } from \"@src/SignupPage\"\n}\n\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { LoginPage } from \"@src/LoginPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication\nDESCRIPTION: Extended Wasp configuration adding email/password authentication with verification and password reset\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-13-how-to-add-auth-with-lucia-to-your-react-nextjs-app.md#2025-04-22_snippet_17\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"My App\",\n  auth: {\n    // 1. Specify the User entity\n    userEntity: User,\n    methods: {\n      // 2. Enable Github Auth\n      gitHub: {},\n      email: {\n        // 3. Specify the email from field\n        fromField: {\n          name: \"My App Postman\",\n          email: \"hello@itsme.com\"\n        },\n        // 4. Specify the email verification and password reset options\n        emailVerification: {\n          clientRoute: EmailVerificationRoute, //this route/page should be created\n        },\n        passwordReset: {\n          clientRoute: PasswordResetRoute, //this route/page should be created\n        },\n        // Add an emailSender -- Dummy just logs to console for dev purposes\n        // but there are a ton of supported providers :D\n        emailSender: {\n          provider: Dummy,\n        },\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Task Checking Utility Function - JavaScript\nDESCRIPTION: Defines a simple utility function to check if a given array of task objects is empty. This JavaScript function is meant to provide a reusable check for the presence of tasks in standard JS projects. Requires no dependencies. Receives a list of tasks as argument and returns true if the array is empty, otherwise false. To be tested by corresponding test files.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport function areThereAnyTasks(tasks) {\\n  return tasks.length === 0;\\n}\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations in Wasp\nDESCRIPTION: This command creates and applies a new database migration when entity definitions are changed. It must be run any time you modify your entity models to update the database schema.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/04-entities.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Creating Static Hosting Dockerfile\nDESCRIPTION: Dockerfile configuration for hosting static frontend files using gostatic server with index.html fallback.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/manually.md#2025-04-22_snippet_10\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM pierrezemb/gostatic\nCMD [ \"-fallback\", \"index.html\" ]\nCOPY ./dist/ /srv/http/\n```\n\n----------------------------------------\n\nTITLE: Fetching Heroku App Info - Shell\nDESCRIPTION: Retrieves detailed information about the specified Heroku app, including its URL and current status. The '<app-name>' must be provided. This is useful for confirming deployment and obtaining access URLs.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/manually.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nheroku info --app <app-name>\n\n```\n\n----------------------------------------\n\nTITLE: Version Check Output\nDESCRIPTION: Shows the current version information and instructions for installing or updating Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/general/cli.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp version\n\n0.12.0\n\nIf you wish to install/switch to the latest version of Wasp, do:\ncurl -sSL https://get.wasp.sh/installer.sh | sh -s\n\nIf you want specific x.y.z version of Wasp, do:\ncurl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v x.y.z\n\nCheck https://github.com/wasp-lang/wasp/releases for the list of valid versions, including the latest one.\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for Tailwind in Wasp\nDESCRIPTION: Sets up the PostCSS configuration file to enable Tailwind CSS and autoprefixer in a Wasp project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/css-frameworks.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: CRUD Operations Implementation\nDESCRIPTION: Implementing CRUD operations in Django views and Wasp operations\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-20-django-vs-wasp.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import render, redirect\nfrom .models import Task\nfrom .forms import TaskForm\n\ndef index(request):\n    tasks = Task.objects.all()\n    form = TaskForm()\n    if request.method == 'POST':\n        form = TaskForm(request.POST)\n        if form.is_valid():\n            form.save()\n        return redirect('/')\n    context = {'tasks': tasks, 'form': form}\n    return render(request, 'todo/index.html', context)\n\ndef updateTask(request, pk):\n    task = Task.objects.get(id=pk)\n    form = TaskForm(instance=task)\n    if request.method == 'POST':\n        form = TaskForm(request.POST, instance=task)\n        if form.is_valid():\n            form.save()\n        return redirect('/')\n    context = {'form': form}\n    return render(request, 'todo/update_task.html', context)\n\ndef deleteTask(request, pk):\n    task = Task.objects.get(id=pk)\n    if request.method == 'POST':\n        task.delete()\n        return redirect('/')\n    context = {'task': task}\n    return render(request, 'todo/delete.html', context)\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport const getTasks = async (args, context) => {\n  return context.entities.Task.findMany({\n    orderBy: { id: 'asc' },\n  })\n}\n\nexport const updateTask = async ({ id, data }, context) => {\n  return context.entities.Task.update({\n    where: { id },\n    data\n  })\n}\n\nexport const deleteTask = async ({ id }, context) => {\n  return context.entities.Task.delete({\n    where: { id }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating File Structure for Wasp Project with schema.prisma\nDESCRIPTION: Shows the expected file structure after adding a schema.prisma file to a Wasp project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n.\n├── main.wasp\n...\n// highlight-next-line\n├── schema.prisma\n├── src\n├── tsconfig.json\n└── vite.config.ts\n```\n\n----------------------------------------\n\nTITLE: Simplifying MainPage Component for Cleanup (JavaScript)\nDESCRIPTION: Shows a simplified version of the `MainPage` component in `src/MainPage.jsx` after cleaning up the starter code. It now only returns a simple `div` containing 'Hello world!', removing previous imports and logic.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/03-pages.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"src/MainPage.jsx\"\nexport const MainPage = () => {\n  return <div>Hello world!</div>\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Wasp App and Root Route Declaration After Cleanup (TypeScript)\nDESCRIPTION: Displays the cleaned-up Wasp DSL app definition for TodoApp in a TypeScript context. Contains the application metadata, the main page route, and the MainPage component mapping, pointing to the TypeScript version. Meant to be a starting point for feature expansion in the project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/03-pages.md#2025-04-22_snippet_11\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"TodoApp\"\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DATABASE_URL Environment Variable for PostgreSQL\nDESCRIPTION: This snippet shows how to set the DATABASE_URL environment variable in a .env.server file to connect to a PostgreSQL database. It provides an example connection string with placeholders for user, password, host, and database name.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/databases.md#2025-04-22_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nDATABASE_URL=postgresql://user:password@localhost:5432/mydb\n```\n\n----------------------------------------\n\nTITLE: Setting Server Environment Variables/Secrets on Fly.io (Wasp Production)\nDESCRIPTION: Example command using the Fly.io CLI (`flyctl`) to set a server-side environment variable or secret (e.g., `SOME_VAR_NAME`) for a deployed Wasp application. This is a common method for managing server configuration and secrets in production hosting environments like Fly.io, making the variable available to the running server process.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/env-vars.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nflyctl secrets set SOME_VAR_NAME=somevalue\n```\n\n----------------------------------------\n\nTITLE: Changing App Title in Wasp\nDESCRIPTION: Illustrates how to modify the application's title, which is displayed in the browser tab next to the favicon. This is achieved by setting the `title` field within the `app` declaration in the `.wasp` file. The example sets the title to \"BookFace\" and includes the mandatory `wasp.version` field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/customizing-app.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"BookFace\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Wasp Project with the Todo-TS Template\nDESCRIPTION: Illustrates the command for creating a new Wasp project based on the 'todo-ts' template. Substitute `<project-name>` with the intended project name. The `-t todo-ts` flag specifies the template, which provides a simple Todo App example using TypeScript with full-stack type safety and basic username/password authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/starter-templates.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwasp new <project-name> -t todo-ts\n```\n\n----------------------------------------\n\nTITLE: Updating Package.json Configuration\nDESCRIPTION: Demonstrates the required changes to package.json, including adding type:module and updating the Prisma version.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-14-to-0-15.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"devDependencies\": {\n    \"prisma\": \"5.19.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Fly.io Environment Variables\nDESCRIPTION: Commands for setting required environment variables in Fly.io deployment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflyctl secrets set PORT=8080\nflyctl secrets set JWT_SECRET=<random_string_at_least_32_characters_long>\nflyctl secrets set WASP_WEB_CLIENT_URL=<url_of_where_client_will_be_deployed>\nflyctl secrets set WASP_SERVER_URL=<url_of_where_server_will_be_deployed>\n```\n\n----------------------------------------\n\nTITLE: Creating New Wasp Project with Interactive Template Selection\nDESCRIPTION: Example of using the 'wasp new' command in interactive mode to create a new project and select a template. Shows the command prompt interaction and available template options.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/starter-templates.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp new\nEnter the project name (e.g. my-project) ▸ MyFirstProject\nChoose a starter template\n[1] basic (default)\n    Simple starter template with a single page.\n[2] todo-ts\n    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.\n[3] saas\n    Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.\n[4] embeddings\n    Comes with code for generating vector embeddings and performing vector similarity search.\n[5] ai-generated\n    🤖 Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)\n ▸ 1\n\n🐝 --- Creating your project from the \"basic\" template... -------------------------\n\nCreated new Wasp app in ./MyFirstProject directory!\n\nTo run your new app, do:\n    cd MyFirstProject\n    wasp db start\n```\n\n----------------------------------------\n\nTITLE: Database Migration Command\nDESCRIPTION: Command to regenerate the Prisma client after migration changes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp 0.12.4\nDESCRIPTION: Command to install specific version of Wasp using curl installer script.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v 0.12.4\n```\n\n----------------------------------------\n\nTITLE: Retrieving Keycloak User ID from Identity Object\nDESCRIPTION: Demonstrates how to access the Keycloak identity object from a user's identities collection and retrieve the Keycloak User ID. The ID is typically a UUID format string.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/_keycloak-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst keycloakIdentity = user.identities.keycloak\n\n// Keycloak User ID for example \"12345678-1234-1234-1234-123456789012\"\nkeycloakIdentity.id\n```\n\n----------------------------------------\n\nTITLE: Customizing Base Path in Vite\nDESCRIPTION: Configuration to modify the base path for serving the client application. Shows how to set a custom base path in both JavaScript and TypeScript configurations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/custom-vite-config.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  base: '/my-app/',\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  base: '/my-app/',\n})\n```\n\n----------------------------------------\n\nTITLE: Deploying Updates to an Existing Wasp App\nDESCRIPTION: Command to deploy latest changes to an already set up Wasp application on Fly.io. Use this whenever you want to update your deployed app with new code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/cli.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly deploy\n```\n\n----------------------------------------\n\nTITLE: Finding User Auth Identity using Wasp Auth Helpers (JavaScript)\nDESCRIPTION: Demonstrates how to use the `findUserIdentity` helper function from the Wasp authentication package in a React component to extract specific authentication identities (such as email or Google) for a given user. To function, it requires importing from the Wasp authentication library and a `user` object prop. The helper returns the identity object if found, or `null` otherwise, enabling conditional logic based on available authentication providers.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/entities.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { findUserIdentity } from 'wasp/auth'\n\nconst MainPage = ({ user }) => {\n  const emailIdentity = findUserIdentity(user, 'email')\n  const googleIdentity = findUserIdentity(user, 'google')\n  if (emailIdentity) {\n    // ...\n  } else if (googleIdentity) {\n    // ...\n  }\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Tailwind Plugin Integration\nDESCRIPTION: Configuration for enabling Tailwind plugins in the Tailwind configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/css-frameworks.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  // ...\n  plugins: [\n    require('@tailwindcss/forms'),\n    require('@tailwindcss/typography'),\n  ],\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Phrase Data\nDESCRIPTION: Sample JSON structure showing how phrases and translations are stored in the static file format.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-03-08-building-a-full-stack-app-supabase-vs-wasp.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1,\n    \"group\": \"general\",\n    \"translations\": {\n        \"en\": \"Yes\",\n        \"it\": \"Si\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified main.wasp Configuration (Wasp 0.14.x)\nDESCRIPTION: Illustrates the updated `main.wasp` file structure in Wasp 0.14.x. Entity definitions are removed from this file, as they are now managed in a separate `schema.prisma` file. This file primarily contains core app configuration like title and Wasp version.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"MyApp\",\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Testing React Component with Mocked Queries in TypeScript\nDESCRIPTION: TypeScript version of the test for the Todo component using mockQuery and Testing Library to verify rendering with test data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/testing.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { test, expect } from \"vitest\";\nimport { screen } from \"@testing-library/react\";\n\nimport { mockServer, renderInContext } from \"wasp/client/test\";\nimport { getTasks } from \"wasp/client/operations\";\nimport Todo from \"./Todo\";\n\nconst { mockQuery } = mockServer();\n\nconst mockTasks = [\n  {\n    id: 1,\n    description: \"test todo 1\",\n    isDone: true,\n    userId: 1,\n  },\n];\n\ntest(\"handles mock data\", async () => {\n  mockQuery(getTasks, mockTasks);\n\n  renderInContext(<Todo />);\n\n  await screen.findByText(\"test todo 1\");\n\n  expect(screen.getByRole(\"checkbox\")).toBeChecked();\n\n  screen.debug();\n});\n```\n\n----------------------------------------\n\nTITLE: SMTP Environment Variables Configuration\nDESCRIPTION: Environment variables setup for SMTP email provider configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/email/email.md#2025-04-22_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nSMTP_HOST=\nSMTP_USERNAME=\nSMTP_PASSWORD=\nSMTP_PORT=\n```\n\n----------------------------------------\n\nTITLE: Checking User Signup Completion in React Component\nDESCRIPTION: This React component demonstrates how to use the useAuth hook to check if a user has completed the signup process and redirect accordingly.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAuth } from 'wasp/client/auth'\nimport { Redirect } from 'react-router-dom'\n\nexport function HomePage() {\n  const { data: user } = useAuth()\n\n  if (user.isSignupComplete === false) {\n    return <Redirect to=\"/edit-user-details\" />\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example for Wasp 0.12.X Projects\nDESCRIPTION: Example file tree showing the new structure of a fresh Wasp project created with version 0.12.0+, featuring a simplified src directory without server/client separation and a new public directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.\n├── .gitignore\n├── main.wasp\n├── package.json\n├── public\n│   └── .gitkeep\n├── src\n│   ├── Main.css\n│   ├── MainPage.jsx\n│   ├── queries.ts\n│   ├── vite-env.d.ts\n│   ├── .waspignore\n│   └── waspLogo.png\n├── tsconfig.json\n├── vite.config.ts\n└── .wasproot\n\n```\n\n----------------------------------------\n\nTITLE: Entity Definition in .wasp File Syntax\nDESCRIPTION: Shows the entity definition syntax in a .wasp file using the psl tags around the entity definition.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\nentity Task {=psl\n  // Stays the same\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Building Static Website Content\nDESCRIPTION: Command to generate static website content in the build directory for production deployment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm build\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Fields in Wasp\nDESCRIPTION: Main Wasp configuration file showing authentication setup with custom signup fields\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  // ...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {\n        userSignupFields: import { userSignupFields } from \"@src/auth/signup\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: SendGrid API Key Configuration\nDESCRIPTION: Environment variable configuration for SendGrid API key in the server environment file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/email.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nSENDGRID_API_KEY=<your key>\n```\n\n----------------------------------------\n\nTITLE: Importing an Image Asset URL in Vite with JavaScript (JSX)\nDESCRIPTION: Demonstrates how to import a static asset (such as an image) into a React component using JavaScript with JSX in a Vite-powered project. Importing the asset assigns its URL to a variable, which can then be used as the source of an image element. This pattern ensures the asset is properly bundled and hashed for production builds. Requires Vite as the underlying build tool, and assumes a valid image file in the referenced path. 'imgUrl' will resolve to a URL (e.g., '/img.png' for development or a hashed '/assets/img.hash.png' in production).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/static-assets.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport imgUrl from './img.png'\\n\\nfunction App() {\\n  return <img src={imgUrl} alt=\\\"img\\\" />\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Fly.io Applications Without Deployment\nDESCRIPTION: Command to set up the client and server applications on Fly.io without deploying them. This creates the necessary configuration files and sets up the infrastructure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/cli.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly setup <app-name> <region>\n```\n\n----------------------------------------\n\nTITLE: Final Wasp Configuration after Cleanup (TypeScript)\nDESCRIPTION: Displays the final state of the `main.wasp` file after removing the `HelloPage` route and page declarations. It includes the basic app definition (`TodoApp`) specifying the Wasp version and app title, along with the remaining `RootRoute` and `MainPage` pointing to the TypeScript component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/03-pages.md#2025-04-22_snippet_11\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napp TodoApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"TodoApp\"\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Usage Example\nDESCRIPTION: Example of using Tailwind CSS classes in a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/css-frameworks.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// ...\n\n<h1 className=\"text-3xl font-bold underline\">\n  Hello world!\n</h1>\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating Database for Wasp App on Fly.io\nDESCRIPTION: This command creates a new database for the Wasp app on Fly.io in the specified region.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/cli.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly create-db <region>\n```\n\n----------------------------------------\n\nTITLE: Copying Fly.io Configuration\nDESCRIPTION: Copy the generated fly.toml file to the Wasp project directory for safekeeping.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/manually.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncp fly.toml ../../\n```\n\n----------------------------------------\n\nTITLE: Using the Link Component in React TSX\nDESCRIPTION: This example demonstrates how to use the Link component from wasp/client/router to create type-safe links. It maps over an array of tasks and creates links with proper typing for parameters.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/links.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'wasp/client/router'\n\nexport const TaskList = () => {\n  // ...\n\n  return (\n    <div>\n      {tasks.map((task) => (\n        <Link\n          key={task.id}\n          to=\"/task/:id\"\n          {/* 👆 You must provide a valid path here */}\n          params={{ id: task.id }}>\n          {/* 👆 All the params must be correctly passed in */}\n          {task.description}\n        </Link>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure with Tailwind Config Files\nDESCRIPTION: Shows the directory structure of a Wasp project with Tailwind configuration files added.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/css-frameworks.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── main.wasp\n├── package.json\n├── src\n│   ├── Main.css\n│   ├── MainPage.jsx\n│   ├── vite-env.d.ts\n│   └── waspLogo.png\n├── public\n├── tsconfig.json\n├── vite.config.ts\n├── postcss.config.cjs\n└── tailwind.config.cjs\n```\n\n----------------------------------------\n\nTITLE: Running the Wasp Project Migration Script\nDESCRIPTION: Command to run the automated migration script for Wasp projects moving from 0.11.X to 0.12.X, where 'foo' is the name of the Wasp project directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx wasp-migrate foo\n```\n\n----------------------------------------\n\nTITLE: Removing DB System Configuration from .wasp File\nDESCRIPTION: Shows the db.system field in the .wasp file that should be removed as it's now configured in schema.prisma.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_14\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    // highlight-next-line\n    system: PostgreSQL,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Client Deployment Shell Script\nDESCRIPTION: Automated shell script for deploying the client application, including building, copying files, and creating Docker configurations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/manually.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\nif [ -z \"$REACT_APP_API_URL\" ]\nthen\n  echo \"REACT_APP_API_URL is not set\"\n  exit 1\nfi\n\nwasp build\ncd .wasp/build/web-app\n\nnpm install && REACT_APP_API_URL=$REACT_APP_API_URL npm run build\n\ncp -r build dist\n\ndockerfile_contents=$(cat <<EOF\nFROM pierrezemb/gostatic\nCMD [ \"-fallback\", \"index.html\" ]\nCOPY ./dist/ /srv/http/\nEOF\n)\n\ndockerignore_contents=$(cat <<EOF\nnode_modules/\nEOF\n)\n\necho \"$dockerfile_contents\" > Dockerfile\necho \"$dockerignore_contents\" > .dockerignore\n\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page with Google Sign-In Button in React\nDESCRIPTION: This React component creates a login page that includes a standard login form, a signup link, and a Google sign-in button. It demonstrates how to integrate the Google authentication UI in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-15-auth-feature-announcement.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { SignInButton as GoogleSignInButton } from '@wasp/auth/helpers/Google'\nimport LoginForm from '@wasp/auth/forms/Login'\n\nconst Login = () => {\n  return (\n    <div>\n      <div>\n        <LoginForm/>\n      </div>\n      <div>\n        I don't have an account yet (<Link to=\"/signup\">go to signup</Link>).\n      </div>\n      <div>\n        <GoogleSignInButton/>\n      </div>\n    </div>\n  )\n}\n\nexport default Login\n```\n\n----------------------------------------\n\nTITLE: Database Migration Command in Wasp\nDESCRIPTION: Command to create and apply database migrations after entity changes. This updates the database schema to match entity definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/04-entities.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Project Structure with Tailwind Configuration\nDESCRIPTION: Shows the expected directory structure of a Wasp project with Tailwind configuration files properly placed.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/css-frameworks.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── main.wasp\n├── src\n│   ├── client\n│   │   ├── tsconfig.json\n│   │   ├── Main.css\n│   │   ├── MainPage.js\n│   │   └── waspLogo.png\n│   ├── server\n│   │   └── tsconfig.json\n│   └── shared\n│       └── tsconfig.json\n├── postcss.config.cjs\n└── tailwind.config.cjs\n```\n\n----------------------------------------\n\nTITLE: Setting Up Database Schema for User and Session\nDESCRIPTION: Creating SQLite database tables for user and session management, including user details and session information. Also defines a TypeScript interface for the user object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-13-how-to-add-auth-with-lucia-to-your-react-nextjs-app.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport sqlite from \"better-sqlite3\";\n\nexport const db = sqlite(\"main.db\");\n\ndb.exec(`CREATE TABLE IF NOT EXISTS user (\n    id TEXT NOT NULL PRIMARY KEY,\n    github_id INTEGER UNIQUE,\n    username TEXT NOT NULL\n)`);\n\ndb.exec(`CREATE TABLE IF NOT EXISTS session (\n    id TEXT NOT NULL PRIMARY KEY,\n    expires_at INTEGER NOT NULL,\n    user_id TEXT NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES user(id)\n)`);\n\nexport interface DatabaseUser {\n  id: string;\n  username: string;\n  github_id: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Example environment variables setup for ImgFlip and OpenAI API credentials\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# set up your own credentials on https://imgflip.com/signup and rename this file to .env.server\n# NOTE: make sure you register with Username and Password (not google) \nIMGFLIP_USERNAME=\nIMGFLIP_PASSWORD=\n\n# get your api key from https://platform.openai.com/\nOPENAI_API_KEY=\n\nJWT_SECRET=asecretphraseatleastthirtytwocharacterslong\n```\n\n----------------------------------------\n\nTITLE: Google API Response Structure\nDESCRIPTION: JSON structure showing the possible fields returned by Google's userinfo endpoint.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/google.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"name\",\n  \"given_name\",\n  \"family_name\",\n  \"email\",\n  \"email_verified\",\n  \"aud\",\n  \"exp\",\n  \"iat\",\n  \"iss\",\n  \"locale\",\n  \"picture\",\n  \"sub\"\n]\n```\n\n----------------------------------------\n\nTITLE: Deploying to Specific Organization\nDESCRIPTION: Command to deploy a Wasp app to a specific Fly.io organization.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/cli.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly launch my-wasp-app mia --org hive\n```\n\n----------------------------------------\n\nTITLE: Deploying Wasp Server to Railway\nDESCRIPTION: Steps to deploy the Wasp server to Railway, including linking the project and setting up environment variables.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/manually.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd .wasp/build\nrailway link\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Auth Configuration in TypeScript\nDESCRIPTION: TypeScript version of the auth configuration in a Wasp application. Shows the app declaration with authentication settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_19\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  //...\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      usernameAndPassword: {}, // use this or email, not both\n      email: {}, // use this or usernameAndPassword, not both\n      google: {},\n      gitHub: {},\n    },\n    onAuthFailedRedirectTo: \"/someRoute\",\n    signup: { ... }\n  }\n}\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Helper Functions in TypeScript\nDESCRIPTION: Example of a simple unit test for a helper function in TypeScript using Vitest.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/testing.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Task } from \"wasp/entities\";\n\nexport function areThereAnyTasks(tasks: Task[]): boolean {\n  return tasks.length === 0;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from \"vitest\";\n\nimport { areThereAnyTasks } from \"./helpers\";\n\ntest(\"areThereAnyTasks\", () => {\n  expect(areThereAnyTasks([])).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Route and Page in Wasp\nDESCRIPTION: Shows how to declare a basic route and page component in a Wasp application, mapping the root path '/' to a MainPage component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/03-pages.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: API Namespace Configuration in Wasp\nDESCRIPTION: Shows how to configure API namespaces and middleware for CORS support.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/apis.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napiNamespace fooBar {\n  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from \"@src/apis\",\n  path: \"/foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Wasp Project Interactively\nDESCRIPTION: Demonstrates the interactive process of creating a new Wasp project using the 'wasp new' command, including prompts for project name and template selection.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/general/cli.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp new\n Enter the project name (e.g. my-project) ▸ MyFirstProject\n Choose a starter template\n [1] basic (default)\n [2] saas\n [3] todo-ts\n ▸ 1\n\n 🐝 --- Creating your project from the basic template... ---------------------------\n\n Created new Wasp app in ./MyFirstProject directory!\n To run it, do:\n\n     cd MyFirstProject\n     wasp start\n```\n\n----------------------------------------\n\nTITLE: Extended User Schema with Signup Completion Flag\nDESCRIPTION: Prisma schema showing User model with additional fields for tracking signup completion status.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id               Int     @id @default(autoincrement())\n  username         String? @unique\n  isSignupComplete Boolean @default(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Delaying a Wasp Job Submission (JavaScript)\nDESCRIPTION: Demonstrates how to schedule a job for execution after a delay using the `.delay()` method before `.submit()`. This JavaScript example delays the `mySpecialJob` execution by 10 seconds. It also shows passing job arguments and executor-specific options (like `retryLimit`) during the submission.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/jobs.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"someAction.js\"\nconst submittedJob = await mySpecialJob\n  .delay(10)\n  .submit({ job: \"args\" }, { \"retryLimit\": 2 })\n```\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Debug Mode\nDESCRIPTION: Command to run Playwright tests with UI debugging enabled.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/examples/todoApp/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ DEBUG=pw:webserver npx playwright test --ui\n```\n\n----------------------------------------\n\nTITLE: React Component Testing with Mock Data\nDESCRIPTION: Complete example of testing a React component with mocked query data using Testing Library.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/testing.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useQuery } from \"@wasp/queries\";\nimport getTasks from \"@wasp/queries/getTasks\";\n\nconst Todo = (_props) => {\n  const { data: tasks } = useQuery(getTasks);\n  return (\n    <ul>\n      {tasks &&\n        tasks.map((task) => (\n          <li key={task.id}>\n            <input type=\"checkbox\" value={task.isDone} />\n            {task.description}\n          </li>\n        ))}\n    </ul>\n  );\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from \"vitest\";\nimport { screen } from \"@testing-library/react\";\n\nimport { mockServer, renderInContext } from \"@wasp/test\";\nimport getTasks from \"@wasp/queries/getTasks\";\nimport Todo from \"./Todo\";\n\nconst { mockQuery } = mockServer();\n\nconst mockTasks = [\n  {\n    id: 1,\n    description: \"test todo 1\",\n    isDone: true,\n    userId: 1,\n  },\n];\n\ntest(\"handles mock data\", async () => {\n  mockQuery(getTasks, mockTasks);\n\n  renderInContext(<Todo />);\n\n  await screen.findByText(\"test todo 1\");\n\n  expect(screen.getByRole(\"checkbox\")).toBeChecked();\n\n  screen.debug();\n});\n```\n\n----------------------------------------\n\nTITLE: Pushing to Deploy Branch\nDESCRIPTION: Git command to push changes to the remote deploy-web branch.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Basic Auth Configuration Example\nDESCRIPTION: Minimal example showing how to configure authentication methods in Wasp\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-04-25-first-framework-that-lets-you-visualize-react-node-app-code.md#2025-04-22_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nauth: {\n  userEntity: User,\n  methods: {\n    usernameAndPassword: {}, \n    google: {},\n  },\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in Markdown\nDESCRIPTION: This code snippet shows the import statements for various React components and utilities used in the blog post, including custom components like InBlogCta and WaspIntro.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-11-22-fundraising-learnings.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport InBlogCta from './components/InBlogCta';\nimport WaspIntro from './_wasp-intro.md';\n```\n\n----------------------------------------\n\nTITLE: Entity Definition in Wasp using PSL\nDESCRIPTION: Current implementation showing how Prisma Schema Language is embedded within Wasp code to define entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-28-why-we-chose-prisma.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\n// ... some Wasp code ...\n\nentity User {=psl\n  id          Int     @id @default(autoincrement())\n  username    String  @unique\n  password    String\npsl=} \n\n// ... some Wasp code ...\n```\n\n----------------------------------------\n\nTITLE: Database Migration Command\nDESCRIPTION: Command to perform database migrations in development environment\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/examples/thoughts/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Defining a Route in Wasp\nDESCRIPTION: Shows how to define a route in a Wasp configuration file. This creates a route with a dynamic parameter that points to a specific page component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/links.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nroute TaskRoute { path: \"/task/:id\", to: TaskPage }\npage TaskPage { ... }\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Railway Static Hosting\nDESCRIPTION: Dockerfile configuration for hosting the Wasp client as a static site on Railway.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/manually.md#2025-04-22_snippet_12\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM pierrezemb/gostatic\nCMD [ \"-fallback\", \"index.html\" ]\nCOPY ./dist/ /srv/http/\n```\n\n----------------------------------------\n\nTITLE: Listing Available Fly.io Regions\nDESCRIPTION: Command to list all available deployment regions on Fly.io platform. This information is needed when specifying the region for your Wasp app deployment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/cli.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nflyctl platform regions\n```\n\n----------------------------------------\n\nTITLE: Running Migration Script\nDESCRIPTION: Command to execute the Wasp project migration script using npx.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx wasp-migrate foo\n```\n\n----------------------------------------\n\nTITLE: Adding isSignupComplete Field to User Entity\nDESCRIPTION: This snippet demonstrates how to add an isSignupComplete field to the User entity in the Prisma schema. This field is used to track whether a user has completed the signup process.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id               Int     @id @default(autoincrement())\n  username         String? @unique\n  isSignupComplete Boolean @default(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Environment Variables in TypeScript\nDESCRIPTION: Shows how to access client-side environment variables (prefixed with REACT_APP_) in a TypeScript client application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/env-vars.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(import.meta.env.REACT_APP_SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Setting SendGrid Environment Variable\nDESCRIPTION: Shows the required environment variable for configuring the SendGrid email provider in the .env.server file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/email/email.md#2025-04-22_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\nSENDGRID_API_KEY=\n```\n\n----------------------------------------\n\nTITLE: SendGrid Environment Variables\nDESCRIPTION: Required environment variable for using the SendGrid email provider, to be added to the .env.server file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/email/email.md#2025-04-22_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\nSENDGRID_API_KEY=\n```\n\n----------------------------------------\n\nTITLE: Updating MainPage Component with NewTaskForm in TypeScript/TSX\nDESCRIPTION: This snippet shows the TypeScript/TSX version of the updated MainPage component. It includes the NewTaskForm and properly types the tasks data from the getTasks query.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/06-actions.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      <NewTaskForm />\n\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Schema\nDESCRIPTION: Prisma schema definition for the basic User entity required for authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/username-and-pass.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Wasp Project Interactively\nDESCRIPTION: Demonstrates the interactive process initiated by the `wasp new` command. It prompts the user for a project name and then lists available starter templates ('basic', 'todo-ts', 'saas', 'embeddings', 'ai-generated') for selection. The example shows selecting the default 'basic' template and the subsequent confirmation message upon project creation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/starter-templates.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp new\nEnter the project name (e.g. my-project) ▸ MyFirstProject\nChoose a starter template\n[1] basic (default)\n    Simple starter template with a single page.\n[2] todo-ts\n    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.\n[3] saas\n    Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.\n[4] embeddings\n    Comes with code for generating vector embeddings and performing vector similarity search.\n[5] ai-generated\n    🤖 Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)\n ▸ 1\n\n🐝 --- Creating your project from the \"basic\" template... -------------------------\n\nCreated new Wasp app in ./MyFirstProject directory!\n\nTo run your new app, do:\n    cd MyFirstProject\n    wasp db start\n```\n\n----------------------------------------\n\nTITLE: Social Login Migration Routes Definition in Wasp\nDESCRIPTION: Defines API endpoints for Google and GitHub authentication migration in Wasp configuration\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_25\n\nLANGUAGE: wasp\nCODE:\n```\napi migrateGoogle {\n  httpRoute: (GET, \"/migrate-google\"),\n  fn: import { migrateGoogleHandler } from \"@src/migrateToNewAuth\",\n  entities: []\n}\n\napi migrateGithub {\n  httpRoute: (GET, \"/migrate-github\"),\n  fn: import { migrateGithubHandler } from \"@src/migrateToNewAuth\",\n  entities: []\n}\n```\n\n----------------------------------------\n\nTITLE: Adding www Subdomain to Fly.io App\nDESCRIPTION: Command to generate SSL certificates for the www subdomain of your custom domain to make your app accessible via both the root domain and www subdomain.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/cli.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd --context client certs create www.mycoolapp.com\n```\n\n----------------------------------------\n\nTITLE: Implementing onAfterSignup Hook in JavaScript\nDESCRIPTION: This snippet demonstrates the implementation of the onAfterSignup hook in JavaScript. It shows how to perform actions after user signup, such as counting users and handling OAuth-specific data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/auth-hooks.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const onAfterSignup = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  const count = await prisma.user.count()\n  console.log('number of users after', count)\n  console.log('user object', user)\n\n  // If this is an OAuth signup, you have access to the OAuth tokens and the uniqueRequestId\n  if (oauth) {\n    console.log('accessToken', oauth.tokens.accessToken)\n    console.log('uniqueRequestId', oauth.uniqueRequestId)\n\n    const id = oauth.uniqueRequestId\n    const data = someKindOfStore.get(id)\n    if (data) {\n      console.log('saved data for the ID', data)\n    }\n    someKindOfStore.delete(id)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp Development Environment Bash Alias\nDESCRIPTION: Shell command for creating an alias to easily run the Wasp development script from anywhere in the codebase.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nalias wrun=\"/home/martin/git/wasp-lang/wasp/waspc/run\"\n```\n\n----------------------------------------\n\nTITLE: Starting Wasp App Creation via CLI (Shell)\nDESCRIPTION: This shell command initiates the Wasp new project wizard. When run, it prompts the user for project details and offers the option to generate the app using Wasp AI, which requires OpenAI API keys configured as environment variables. Alternatively, users can choose standard project templates.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/wasp-ai/creating-new-app.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwasp new\n```\n\n----------------------------------------\n\nTITLE: Creating a New Wasp Project\nDESCRIPTION: This command initiates the creation of a new Wasp project. It will likely prompt the user for project details and set up the initial project structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/introduction/quick-start.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwasp new\n```\n\n----------------------------------------\n\nTITLE: Client Environment Variables Configuration Example\nDESCRIPTION: Example of defining client environment variables in a .env.client file with the required REACT_APP_ prefix.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/env-vars.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nREACT_APP_SOME_VAR_NAME=somevalue\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Wasp Client to Railway\nDESCRIPTION: Process for building the Wasp client with the correct API URL and deploying it to Railway.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/manually.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncd web-app\nnpm install && REACT_APP_API_URL=<url_to_wasp_backend> npm run build\nrailway link\ncp -r build dist\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Deploying a Wasp App with Client Environment Variables\nDESCRIPTION: Command to deploy a Wasp application with client-side environment variables. Client environment variables must be passed to the terminal session before running the deployment command.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/cli.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nREACT_APP_ANOTHER_VAR=somevalue wasp deploy fly launch my-wasp-app mia\n```\n\n----------------------------------------\n\nTITLE: Using getFirstProviderUserId Helper in JavaScript\nDESCRIPTION: Example of using the getFirstProviderUserId helper method in JavaScript components and server functions to get the user's primary identifier regardless of authentication method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst MainPage = ({ user }) => {\n  const userId = user.getFirstProviderUserId()\n  // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const createTask = async (args, context) => {\n  const userId = context.user.getFirstProviderUserId()\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Node.js Version with NVM\nDESCRIPTION: Command to set the Node.js version for current shell session\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/introduction/quick-start.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnvm use 20\n```\n\n----------------------------------------\n\nTITLE: Fetching User-Specific Tasks with Authentication Check in TypeScript\nDESCRIPTION: Updates the `getTasks` query in `src/queries.ts` with TypeScript types and authentication enforcement. It imports necessary types (`Task`, `HttpError`, `GetTasks`) and checks for `context.user`, throwing an `HttpError(401)` if absent. It retrieves tasks using `context.entities.Task.findMany`, applying a `where` clause to filter by `context.user.id` and ordering by ID.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/07-auth.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { Task } from 'wasp/entities'\n// highlight-next-line\nimport { HttpError } from 'wasp/server'\nimport { GetTasks } from 'wasp/server/operations'\n\nexport const getTasks: GetTasks<void, Task[]> = async (args, context) => {\n  // highlight-start\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  // highlight-end\n  return context.entities.Task.findMany({\n    // highlight-next-line\n    where: { user: { id: context.user.id } },\n    orderBy: { id: 'asc' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Username and Password Auth Data - Wasp Backend - TypeScript\nDESCRIPTION: Implements the server-side handler and core function to process the migration of users from the old to new username/password authentication schemes. It loads users from the database, checks migration status, constructs provider data, and updates the relevant entities via Prisma. Dependencies include Prisma, Wasp server utilities, and user authentication types. Inputs: no parameters; the migration is performed for all users. Outputs: migration result statistics.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport { prisma } from \"wasp/server\";\nimport { type ProviderName, type UsernameProviderData } from \"wasp/server/auth\";\nimport { MigrateUsernameAndPassword } from \"wasp/server/api\";\n\nexport const migrateUsernameAndPasswordHandler: MigrateUsernameAndPassword =\n  async (_req, res) => {\n    const result = await migrateUsernameAuth();\n\n    res.status(200).json({ message: \"Migrated users to the new auth\", result });\n  };\n\nasync function migrateUsernameAuth(): Promise<{\n  numUsersAlreadyMigrated: number;\n  numUsersNotUsingThisAuthMethod: number;\n  numUsersMigratedSuccessfully: number;\n}> {\n  const users = await prisma.user.findMany({\n    include: {\n      auth: true,\n    },\n  });\n\n  const result = {\n    numUsersAlreadyMigrated: 0,\n    numUsersNotUsingThisAuthMethod: 0,\n    numUsersMigratedSuccessfully: 0,\n  };\n\n  for (const user of users) {\n    if (user.auth) {\n      result.numUsersAlreadyMigrated++;\n      console.log(\"Skipping user (already migrated) with id:\", user.id);\n      continue;\n    }\n\n    if (!user.username || !user.password) {\n      result.numUsersNotUsingThisAuthMethod++;\n      console.log(\"Skipping user (not using username auth) with id:\", user.id);\n      continue;\n    }\n\n    const providerData: UsernameProviderData = {\n      hashedPassword: user.password,\n    };\n    const providerName: ProviderName = \"username\";\n\n    await prisma.auth.create({\n      data: {\n        identities: {\n          create: {\n            providerName,\n            providerUserId: user.username.toLowerCase(),\n            providerData: JSON.stringify(providerData),\n          },\n        },\n        user: {\n          connect: {\n            id: user.id,\n          },\n        },\n      },\n    });\n    result.numUsersMigratedSuccessfully++;\n  }\n\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Login Page with Wasp Auth UI (TypeScript)\nDESCRIPTION: This React component (LoginPage.tsx) demonstrates creating a login page using Wasp's built-in Auth UI in a TypeScript project. It imports and renders the `LoginForm` component from `wasp/client/auth` and uses `react-router-dom`'s `Link` component to navigate to the signup page. The component provides a basic centered layout.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/LoginPage.tsx\"\nimport { LoginForm } from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function LoginPage() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        placeContent: 'center',\n      }}\n    >\n      <LoginForm />\n      <div>\n        <Link to=\"/signup\">Create an account</Link>\n      </div>\n    </div>\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using the routes Object in TypeScript\nDESCRIPTION: This example demonstrates how to use the routes object to programmatically build type-safe links. It imports the routes object and uses it to create a link with parameters.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/links.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { routes } from 'wasp/client/router'\n\nconst linkToTask = routes.TaskRoute.build({ params: { id: 1 } })\n```\n\n----------------------------------------\n\nTITLE: Configuring Client in Wasp Application\nDESCRIPTION: Demonstrates how to configure the client section of a Wasp application, including setting up a root component and a setup function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/client-config.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@client/Root.jsx\",\n    setupFn: import mySetupFunction from \"@client/myClientSetupCode.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google OAuth in Wasp Application\nDESCRIPTION: Main Wasp configuration file with Google OAuth setup. Defines the app structure with authentication settings, including references to external configuration and user signup fields functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/google.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/google.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/google.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\nentity User {=psl\n    id                        Int     @id @default(autoincrement())\n    username                  String  @unique\n    displayName               String\npsl=}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating New Project with SaaS Template - Shell\nDESCRIPTION: This command-line code demonstrates how to use the Wasp CLI to bootstrap a new project using the 'saas' starter template. Prerequisites are a working installation of the Wasp CLI. Replace <project-name> with your desired project folder name. Running this command will scaffold a SaaS-focused Wasp app pre-configured with authentication, Stripe payments, GPT integration, Tailwind CSS, and additional SaaS tools.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/starter-templates.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwasp new <project-name> -t saas\n```\n\n----------------------------------------\n\nTITLE: Authentication Page Components\nDESCRIPTION: React components implementing the login page UI with Tailwind CSS styling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/keycloak.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"w-full h-full bg-white\">\n      <div className=\"min-w-full min-h-[75vh] flex items-center justify-center\">\n        <div className=\"w-full h-full max-w-sm p-5 bg-white\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom User Signup Fields\nDESCRIPTION: Extended User model with signup completion tracking and implementation of custom signup fields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id               Int     @id @default(autoincrement())\n  username         String? @unique\n  isSignupComplete Boolean @default(false)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const userSignupFields = {\n  isSignupComplete: () => false,\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  isSignupComplete: () => false,\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Wasp Application\nDESCRIPTION: Command to start the Wasp application using wasp-cli.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/examples/todoApp/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncabal run wasp-cli start\n```\n\n----------------------------------------\n\nTITLE: Adding Generator Block to PostgreSQL Configuration in schema.prisma\nDESCRIPTION: Adds the Prisma Client generator block to the PostgreSQL configuration in schema.prisma to specify which client generator Wasp should use.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_9\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// highlight-start\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Signup Fields Customization in Wasp\nDESCRIPTION: Example of configuring additional signup fields in a Wasp application by importing them from a server file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_22\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  // ...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: \"/login\",\n    signup: {\n      additionalFields: import { fields } from \"@server/auth/signup.js\",\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified MainPage Component\nDESCRIPTION: A cleaned-up version of the MainPage component with minimal code, showing just a basic hello world message. This represents the starting point for further development.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/03-pages.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport const MainPage = () => {\n  return <div>Hello world!</div>\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nexport const MainPage = () => {\n  return <div>Hello world!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example for Wasp 0.11.X Projects\nDESCRIPTION: Example file tree showing the structure of a fresh Wasp project created with version 0.11.X, displaying the server/client separation in the src directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── .gitignore\n├── main.wasp\n├── src\n│   ├── client\n│   │   ├── Main.css\n│   │   ├── MainPage.jsx\n│   │   ├── react-app-env.d.ts\n│   │   ├── tsconfig.json\n│   │   └── waspLogo.png\n│   ├── server\n│   │   └── tsconfig.json\n│   ├── shared\n│   │   └── tsconfig.json\n│   └── .waspignore\n└── .wasproot\n```\n\n----------------------------------------\n\nTITLE: Checking Wasp Version\nDESCRIPTION: Example of displaying the current Wasp version and installation instructions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/general/cli.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp version\n\n0.14.0\n\nIf you wish to install/switch to the latest version of Wasp, do:\ncurl -sSL https://get.wasp.sh/installer.sh | sh -s\n\nIf you want specific x.y.z version of Wasp, do:\ncurl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v x.y.z\n\nCheck https://github.com/wasp-lang/wasp/releases for the list of valid versions, including the latest one.\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Environment Variables in JavaScript\nDESCRIPTION: Shows how to access both Wasp-defined and user-defined server environment variables in server-side JavaScript code using the env object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/env-vars.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { env } from 'wasp/server'\n\n// Wasp-defined\nconst serverUrl = env.WASP_SERVER_URL\n\n// User-defined\nconst stripeApiKey = env.STRIPE_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Cleaning Wasp Project\nDESCRIPTION: Demonstrates the output of the 'wasp clean' command, which removes generated code, cached artifacts, and the node_modules directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/general/cli.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp clean\n\n🐝 --- Deleting the .wasp/ directory... -------------------------------------------\n\n✅ --- Deleted the .wasp/ directory. ----------------------------------------------\n\n🐝 --- Deleting the node_modules/ directory... ------------------------------------\n\n✅ --- Deleted the node_modules/ directory. ---------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Wasp App on Fly.io\nDESCRIPTION: This command sets environment variables for the server app on Fly.io, useful for configuring features like social authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/cli.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd secrets set GOOGLE_CLIENT_ID=<...> GOOGLE_CLIENT_SECRET=<...> --context=server\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Open on Dev Server - Vite Config - JavaScript\nDESCRIPTION: This JavaScript code snippet disables the default auto-opening of the web browser when starting the Vite development server in a Wasp project. No external dependencies are required, and it should be placed in `vite.config.js` at your project root. The `server.open: false` option prevents Vite from opening the browser when running `wasp start`. The config will be merged with Wasp's defaults; no inputs/outputs are expected beyond this behavior change.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/custom-vite-config.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default {\n  server: {\n    open: false,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useSocket hook for WebSocket client\nDESCRIPTION: Custom React hook that initializes and manages the Socket.IO client connection. It handles connection events and provides the socket instance to the application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-09-build-real-time-voting-app-websockets-react-typescript.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport socketIOClient, { Socket } from 'socket.io-client';\n\nexport type PollState = {\n  question: string;\n  options: {\n    id: number;\n    text: string;\n    description: string;\n    votes: string[];\n  }[];\n};\ninterface ServerToClientEvents {\n  updateState: (state: PollState) => void;\n}\ninterface ClientToServerEvents {\n  vote: (optionId: number) => void;\n  askForStateUpdate: () => void;\n}\n\nexport function useSocket({endpoint, token } : { endpoint: string, token: string }) {\n  // initialize the client using the server endpoint, e.g. localhost:8000\n\t// and set the auth \"token\" (in our case we're simply passing the username\n\t// for simplicity -- you would not do this in production!)\n\t// also make sure to use the Socket generic types in the reverse order of the server!\n\tconst socket: Socket<ServerToClientEvents, ClientToServerEvents>  = socketIOClient(endpoint,  {\n    auth: {\n      token: token\n    }\n  }) \n  const [isConnected, setIsConnected] = useState(false);\n\n  useEffect(() => {\n    console.log('useSocket useEffect', endpoint, socket)\n\n    function onConnect() {\n      setIsConnected(true)\n    }\n\n    function onDisconnect() {\n      setIsConnected(false)\n    }\n\n    socket.on('connect', onConnect)\n    socket.on('disconnect', onDisconnect)\n\n    return () => {\n      socket.off('connect', onConnect)\n      socket.off('disconnect', onDisconnect)\n    }\n  }, [token]);\n\n\t// we return the socket client instance and the connection state\n  return {\n    isConnected,\n    socket,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Email Auth Configuration in Wasp 0.12.X\nDESCRIPTION: Shows the new format for email authentication configuration using userSignupFields in Wasp 0.12.X.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_11\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        userSignupFields: import { fields } from \"@src/server/auth/signup.js\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Automated Client Deployment Script for Railway\nDESCRIPTION: A shell script to automate the deployment of a Wasp client to Railway. It builds the app, sets up the necessary Docker configurations, and deploys using the Railway CLI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/manually.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\nif [ -z \"$REACT_APP_API_URL\" ]\nthen\n  echo \"REACT_APP_API_URL is not set\"\n  exit 1\nfi\n\nwasp build\ncd .wasp/build/web-app\n\nnpm install && REACT_APP_API_URL=$REACT_APP_API_URL npm run build\n\ncp -r build dist\n\ndockerfile_contents=$(cat <<EOF\nFROM pierrezemb/gostatic\nCMD [ \"-fallback\", \"index.html\" ]\nCOPY ./dist/ /srv/http/\nEOF\n)\n\ndockerignore_contents=$(cat <<EOF\nnode_modules/\nEOF\n)\n\necho \"$dockerfile_contents\" > Dockerfile\necho \"$dockerignore_contents\" > .dockerignore\n\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Creating New Wasp Project Using Interactive Mode\nDESCRIPTION: Shows the interactive CLI process for creating a new Wasp project using the wasp new command. Demonstrates template selection and project initialization.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/starter-templates.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp new\nEnter the project name (e.g. my-project) ▸ MyFirstProject\nChoose a starter template\n[1] basic (default)\n    Simple starter template with a single page.\n[2] todo-ts\n    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.\n[3] saas\n    Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.\n[4] embeddings\n    Comes with code for generating vector embeddings and performing vector similarity search.\n[5] ai-generated\n    🤖 Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)\n ▸ 1\n\n🐝 --- Creating your project from the \"basic\" template... -------------------------\n\nCreated new Wasp app in ./MyFirstProject directory!\n\nTo run your new app, do:\n    cd MyFirstProject\n    wasp db start\n```\n\n----------------------------------------\n\nTITLE: Moving Dependencies from Wasp File to package.json\nDESCRIPTION: Example showing how to move dependencies from the app.dependencies declaration in main.wasp to the package.json file as required in Wasp 0.12.0.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_9\n\nLANGUAGE: css\nCODE:\n```\napp Foo {\n  // ...\n  dependencies: [ ('redux', '^4.0.5'), ('reacjt-redux', '^7.1.3')];\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Vite Base Path\nDESCRIPTION: Demonstrates how to configure a custom base path for serving the client application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/custom-vite-config.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  base: '/my-app/',\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  base: '/my-app/',\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Setup Function in TypeScript\nDESCRIPTION: Example of an asynchronous setup function in TypeScript with proper return type definition.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/client-config.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function mySetupFunction(): Promise<void> {\n  // Run some code\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Datasource Block for SQLite in schema.prisma\nDESCRIPTION: Definition of the datasource block for SQLite in the schema.prisma file, specifying the database provider and connection URL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Password Migration Page Route in Wasp\nDESCRIPTION: This Wasp code defines a route `/migrate-password` and associates it with a page component named `MigratePassword`. The `MigratePassword` page component is imported from `@src/pages/MigratePassword` (either `.jsx` or `.tsx`). This sets up the URL endpoint for the user-facing password migration form.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_19\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\nroute MigratePasswordRoute { path: \"/migrate-password\", to: MigratePassword }\npage MigratePassword {\n  component: import { MigratePasswordPage } from \"@src/pages/MigratePassword\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Recurring Jobs in Wasp\nDESCRIPTION: Demonstrates how to configure a recurring job with a cron schedule and optional arguments in Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/jobs.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\njob mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@src/workers/bar\"\n  },\n  schedule: {\n    cron: \"0 * * * *\",\n    args: {=json { \"job\": \"args\" } json=} // optional\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Discord User Data Response\nDESCRIPTION: This JSON object represents the data structure received from Discord's /users/@me endpoint when authenticating a user. It includes various user details such as id, username, and avatar.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/discord.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"80351110224678912\",\n  \"username\": \"Nelly\",\n  \"discriminator\": \"1337\",\n  \"avatar\": \"8342729096ea3675442027381ff50dfe\",\n  \"verified\": true,\n  \"flags\": 64,\n  \"banner\": \"06c16474723fe537c283b8efa61a30c8\",\n  \"accent_color\": 16711680,\n  \"premium_type\": 1,\n  \"public_flags\": 64,\n  \"avatar_decoration_data\": {\n    \"sku_id\": \"1144058844004233369\",\n    \"asset\": \"a_fed43ab12698df65902ba06727e20c0e\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Wasp Application\nDESCRIPTION: Command to create a new Wasp application using the Wasp CLI. This initializes a new project with the default template.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/introduction/quick-start.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwasp new\n```\n\n----------------------------------------\n\nTITLE: Defining a Job in Wasp\nDESCRIPTION: Declaration of a job named 'mySpecialJob' in the main.wasp file. It specifies the executor, perform function, and associated entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/jobs.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\njob mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@server/workers/bar.js\"\n  },\n  entities: [Task],\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Conditional Display Component for Documentation\nDESCRIPTION: Imports the `ShowForTs` component from a relative path within the documentation site's source code. This component is likely used within a framework like Docusaurus or MDX to conditionally display content specifically targeted at TypeScript users.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/_superjson-note.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ShowForTs } from '@site/src/components/TsJsHelpers';\n```\n\n----------------------------------------\n\nTITLE: Deploying New Wasp App to Fly.io\nDESCRIPTION: Command to deploy a new Wasp application to Fly.io, specifying the app name and region.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/cli.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly launch my-wasp-app mia\n```\n\n----------------------------------------\n\nTITLE: List Available Fly Regions\nDESCRIPTION: Command to list all available Fly.io deployment regions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/deployment/cli.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nflyctl platform regions\n```\n\n----------------------------------------\n\nTITLE: New Authentication Configuration (Wasp 0.12.X)\nDESCRIPTION: Simplified authentication configuration in Wasp 0.12.X with automatic auth model setup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.12.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\nentity User {=psl\n  id Int @id @default(autoincrement())\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Configuration with configFn (Before Wasp 0.13.0) in TypeScript\nDESCRIPTION: Illustrates the previous method of configuring OAuth providers using `configFn` in a provider-specific file (e.g., `google.ts`). This required returning an object containing `clientID`, `clientSecret`, and the `scope` property (as an array of strings). This approach is deprecated in Wasp 0.13.0.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getConfig() {\n    return {\n        clientID: process.env.GOOGLE_CLIENT_ID,\n        clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n        scope: ['profile', 'email'],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Wasp Project with Default Template\nDESCRIPTION: Shows how to create a new Wasp project non-interactively by providing the project name (`MyFirstProject`) directly as an argument to `wasp new`. This command uses the default 'basic' template to scaffold the project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/general/cli.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp new MyFirstProject\n🐝 --- Creating your project from the \"basic\" template... -------------------------\n\nCreated new Wasp app in ./MyFirstProject directory!\n\nTo run your new app, do:\n    cd MyFirstProject\n    wasp db start\n```\n\n----------------------------------------\n\nTITLE: Checking Telemetry Status in Wasp\nDESCRIPTION: Example showing how to check the telemetry status and related information for a Wasp project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/general/cli.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp telemetry\n\nTelemetry is currently: ENABLED\nTelemetry cache directory: /home/user/.cache/wasp/telemetry/\nLast time telemetry data was sent for this project: 2021-05-27 09:21:16.79537226 UTC\nOur telemetry is anonymized and very limited in its scope: check https://wasp.sh/docs/telemetry for more details.\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Verification Client Route in Wasp\nDESCRIPTION: Configures the email verification flow within the `main.wasp` file. This snippet defines the `emailVerification` property within the Wasp configuration, specifying `EmailVerificationRoute` (assumed to be defined elsewhere in `main.wasp`) as the `clientRoute`. This route corresponds to the page users are directed to when they click the verification link in their email.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/email.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\n// ...\n\nemailVerification: {\n    clientRoute: EmailVerificationRoute,\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deployed Heroku App URL - Shell\nDESCRIPTION: Fetches detailed information about the specified Heroku app, including its public endpoint URL. Requires the Heroku CLI and the correct <app-name>. Outputs app-related metadata, key for accessing the live application or inspecting deployment state.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/manually.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nheroku info --app <app-name>\n```\n\n----------------------------------------\n\nTITLE: Launching Wasp App with Environment Variables\nDESCRIPTION: This command demonstrates how to launch a Wasp app on Fly.io while setting server-side environment variables for features like social authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/cli.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly launch my-wasp-app mia --server-secret GOOGLE_CLIENT_ID=<...> --server-secret GOOGLE_CLIENT_SECRET=<...>\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp on WSL\nDESCRIPTION: Command to install Wasp on the WSL environment using curl.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-11-21-guide-windows-development-wasp-wsl.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Hooks in Wasp\nDESCRIPTION: Demonstrates how to declare auth hooks in the Wasp configuration file. This snippet shows the setup for all available auth hooks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  auth: {\n    userEntity: User,\n    methods: {\n      ...\n    },\n    onBeforeSignup: import { onBeforeSignup } from \"@src/auth/hooks\",\n    onAfterSignup: import { onAfterSignup } from \"@src/auth/hooks\",\n    onBeforeOAuthRedirect: import { onBeforeOAuthRedirect } from \"@src/auth/hooks\",\n    onBeforeLogin: import { onBeforeLogin } from \"@src/auth/hooks\",\n    onAfterLogin: import { onAfterLogin } from \"@src/auth/hooks\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Action Types in TypeScript\nDESCRIPTION: Demonstrates importing action and its type definitions in TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/actions.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport createFoo from '@wasp/actions'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CreateFoo } from '@wasp/actions/types'\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Migration Logic in JavaScript\nDESCRIPTION: Implements the server-side logic for migrating passwords, including verification with the old algorithm and updating with the new one.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport SecurePassword from \"secure-password\";\nimport { HttpError } from \"wasp/server\";\nimport {\n  createProviderId,\n  deserializeAndSanitizeProviderData,\n  findAuthIdentity,\n  updateAuthIdentityProviderData,\n} from \"wasp/server/auth\";\n\nexport const migratePassword = async ({ password, username }, _context) => {\n  const providerId = createProviderId(\"username\", username);\n  const authIdentity = await findAuthIdentity(providerId);\n\n  if (!authIdentity) {\n    throw new HttpError(400, \"Something went wrong\");\n  }\n\n  const providerData = deserializeAndSanitizeProviderData(\n    authIdentity.providerData\n  );\n\n  try {\n    const SP = new SecurePassword();\n\n    // This will verify the password using the old algorithm\n    const result = await SP.verify(\n      Buffer.from(password),\n      Buffer.from(providerData.hashedPassword, \"base64\")\n    );\n\n    if (result !== SecurePassword.VALID) {\n      throw new HttpError(400, \"Something went wrong\");\n    }\n\n    // This will hash the password using the new algorithm and update the\n    // provider data in the database.\n    await updateAuthIdentityProviderData(providerId, providerData, {\n      hashedPassword: password,\n    });\n  } catch (e) {\n    throw new HttpError(400, \"Something went wrong\");\n  }\n\n  return {\n    message: \"Password migrated successfully.\",\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Source TypeScript Settings\nDESCRIPTION: Base TypeScript configuration for source files in a Wasp project, with source files limited to the src directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/general/wasp-ts-config.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    ...\n  },\n  ...,\n  \"include\": [\"src\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Client in React (TypeScript)\nDESCRIPTION: This TypeScript version of the React component showcases the use of WebSockets on the client side with full-stack type safety. It uses typed hooks and payload types to ensure type consistency between server and client, providing better developer experience and reducing errors.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/web-sockets.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react'\nimport {\n  useSocket,\n  useSocketListener,\n  ServerToClientPayload,\n} from 'wasp/client/webSocket'\n\nexport const ChatPage = () => {\n  const [messageText, setMessageText] = useState<\n    ClientToServerPayload<'chatMessage'>\n  >('')\n  const [messages, setMessages] = useState<\n    ServerToClientPayload<'chatMessage'>[]\n  >([])\n  const { socket, isConnected } = useSocket()\n\n  useSocketListener('chatMessage', logMessage)\n\n  function logMessage(msg: ServerToClientPayload<'chatMessage'>) {\n    setMessages((priorMessages) => [msg, ...priorMessages])\n  }\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    socket.emit('chatMessage', messageText)\n    setMessageText('')\n  }\n\n  const messageList = messages.map((msg) => (\n    <li key={msg.id}>\n      <em>{msg.username}</em>: {msg.text}\n    </li>\n  ))\n  const connectionIcon = isConnected ? '🟢' : '🔴'\n\n  return (\n    <>\n      <h2>Chat {connectionIcon}</h2>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <div>\n            <div>\n              <input\n                type=\"text\"\n                value={messageText}\n                onChange={(e) => setMessageText(e.target.value)}\n              />\n            </div>\n            <div>\n              <button type=\"submit\">Submit</button>\n            </div>\n          </div>\n        </form>\n        <ul>{messageList}</ul>\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Google Authentication in Wasp\nDESCRIPTION: This snippet shows how to add Google authentication with default settings to a Wasp application. It demonstrates the basic configuration within the app's auth methods.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/google.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      google: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Data Migration API Endpoint in Wasp\nDESCRIPTION: This Wasp code defines an API endpoint at `GET /migrate-username-and-password`. It links this route to the `migrateUsernameAndPasswordHandler` function located in `@src/migrateToNewAuth.ts`. This endpoint serves as the trigger for the backend process that migrates user data from the old auth format to the new one.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_16\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napi migrateUsernameAndPassword {\n  httpRoute: (GET, \"/migrate-username-and-password\"),\n  fn: import { migrateUsernameAndPasswordHandler } from \"@src/migrateToNewAuth\",\n  entities: []\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Field in Wasp App - TypeScript (main.wasp)\nDESCRIPTION: Sets up the Wasp app client configuration using TypeScript modules for both the root component and setup function. This configuration should be placed within the Wasp 'app' declaration. The specified TypeScript files must be present, and Wasp will import them for client-side rendering and initialization.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/client-config.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.tsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Directory in Wasp\nDESCRIPTION: Example of configuring the base directory for serving a Wasp application. This allows serving the app from a subdirectory like https://example.com/my-app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/client-config.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    baseDir: \"/my-app\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Fly.io Environment Variables\nDESCRIPTION: These commands set the necessary environment variables for the Wasp app on Fly.io, including PORT, JWT_SECRET, WASP_WEB_CLIENT_URL, and WASP_SERVER_URL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/manually.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflyctl secrets set PORT=8080\nflyctl secrets set JWT_SECRET=<random_string_at_least_32_characters_long>\nflyctl secrets set WASP_WEB_CLIENT_URL=<url_of_where_client_will_be_deployed>\nflyctl secrets set WASP_SERVER_URL=<url_of_where_server_will_be_deployed>\n```\n\n----------------------------------------\n\nTITLE: Database Migration Command for Wasp\nDESCRIPTION: Command to initialize the database in a Wasp application, necessary for authentication functionality.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-09-build-real-time-voting-app-websockets-react-typescript.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Running Headless Tests\nDESCRIPTION: Commands for installing dependencies and running Playwright headless tests.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/examples/todoApp/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ cd headless-tests\n$ npm install\n$ npx playwright install --with-deps\n$ DEBUG=pw:webserver npx playwright test\n```\n\n----------------------------------------\n\nTITLE: Navigating to Web App Build Directory in Bash\nDESCRIPTION: Changes the current directory to the web app build folder within the Wasp project structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/_building-the-web-client.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd .wasp/build/web-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Jobs in Wasp\nDESCRIPTION: Configuration for setting up a scheduled job that calculates daily statistics using PgBoss executor, running hourly to process analytics data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-01-30-open-saas-free-open-source-starter-react-nodejs.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\njob dailyStatsJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { calculateDailyStats } from \"@server/workers/calculateDailyStats.js\"\n  },\n  schedule: {\n    cron: \"0 * * * *\" \n  },\n  entities: [User, DailyStats, Logs, PageViewSource]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Wasp Application Configuration in main.wasp File\nDESCRIPTION: The article mentions that Wasp uses a configuration file named 'main.wasp' to define the application structure. This file allows Wasp to handle boilerplate code and infrastructure-related tasks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-05-29-why-we-dont-have-laravel-for-javascript-yet.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nmain.wasp\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Browser Opening in Vite Dev Server (TypeScript)\nDESCRIPTION: Configures the Vite development server in `vite.config.ts` using `defineConfig` to prevent automatic browser opening on startup by setting the `server.open` option to `false`. This configuration requires the `vite` package to be installed for the `defineConfig` helper.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/custom-vite-config.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"vite.config.ts\"\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  server: {\n    open: false,\n  },\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Deploying to Fly.io\nDESCRIPTION: Command to deploy the Wasp application to Fly.io using remote builder and specified configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/paas.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflyctl deploy --remote-only --config ../../fly.toml\n```\n\n----------------------------------------\n\nTITLE: TypeScript Enum Usage\nDESCRIPTION: Example of using Prisma enums in TypeScript server-side code with type definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/prisma-file.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TaskState } from \"@prisma/client\";\nimport { Task } from \"wasp/entities\";\nimport { type GetTasks } from \"wasp/server/operations\";\n\nexport const getOpenTasks: GetTasks<void, Task[]> = async (args, context) => {\n  return context.entities.Task.findMany({\n    orderBy: { id: \"asc\" },\n    where: { NOT: { state: TaskState.Done } },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Database and Prisma in Wasp (TypeScript)\nDESCRIPTION: This snippet is identical to the JavaScript version but is labeled for TypeScript use. It configures the database system, seeding, and Prisma client preview features in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/backends.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  db: {\n    system: PostgreSQL,\n    seeds: [\n      import devSeed from \"@src/dbSeeds.js\"\n    ],\n    prisma: {\n      clientPreviewFeatures: [\"extendedWhereUnique\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Pre-Migration Directory Layout in Wasp Project (plaintext)\nDESCRIPTION: This snippet shows the typical separation of client/server/shared files in a Wasp project before the migration to v0.12.x. It indicates where key files reside inside the src directory, highlighting the distinction between frontend, backend, and shared utilities. No dependencies exist as it is an abstract representation; the tree illustrates the existing organization rather than executable code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc\n│\n├── client\n│\t├── Dashboard.tsx\n│\t├── Login.tsx\n│\t├── MainPage.tsx\n│\t├── Register.tsx\n│\t├── Task.css\n│\t├── TaskLisk.tsx\n│\t├── Task.tsx\n│\t└── User.tsx\n├── server\n│\t├── taskActions.ts\n│\t├── taskQueries.ts\n│\t├── userActions.ts\n│\t└── userQueries.ts\n└── shared\n    └── utils.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Worker Function in JavaScript\nDESCRIPTION: Implementation of the worker function 'foo' for the 'mySpecialJob' in JavaScript. It logs a message and retrieves tasks from the database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/jobs.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const foo = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Package in Wasp Project\nDESCRIPTION: Command to install a new NPM package (date-fns) as a dependency in a Wasp project. This will automatically update the package.json file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/dependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install date-fns\n```\n\n----------------------------------------\n\nTITLE: Deploying Updates to an Existing Wasp App on Fly.io\nDESCRIPTION: Command to update an already deployed Wasp application on Fly.io with the latest changes. This should be run after making changes to your application code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/cli.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly deploy\n```\n\n----------------------------------------\n\nTITLE: Creating SaaS Template Project\nDESCRIPTION: Command to initialize a new Wasp project using the SaaS template, which includes Stripe Payments, OpenAI GPT API, Google Auth, and other SaaS features.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/starter-templates.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwasp new <project-name> -t saas\n```\n\n----------------------------------------\n\nTITLE: Initializing New Wasp Project\nDESCRIPTION: Command to create a new Wasp project named TodoApp using the Wasp CLI tool.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/01-create.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ wasp new TodoApp\n```\n\n----------------------------------------\n\nTITLE: Global Middleware Customization\nDESCRIPTION: Shows how to customize global middleware settings by modifying the CORS configuration to allow additional domains.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/middleware-config.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  server: {\n    middlewareConfigFn: import { serverMiddlewareFn } from \"@src/serverSetup\"\n  },\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport cors from 'cors'\nimport { config, type MiddlewareConfigFn } from 'wasp/server'\n\nexport const serverMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {\n  // Example of adding an extra domains to CORS.\n  middlewareConfig.set('cors', cors({ origin: [config.frontendUrl, 'https://example1.com', 'https://example2.com'] }))\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Social Login Migration Implementation in TypeScript\nDESCRIPTION: Implements the migration logic for Google and GitHub authentication, including handling of external auth associations\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { prisma } from \"wasp/server\";\nimport { MigrateGoogle, MigrateGithub } from \"wasp/server/api\";\n\nexport const migrateGoogleHandler: MigrateGoogle =\n  async (_req, res) => {\n    const result = await createSocialLoginMigration(\"google\");\n\n    res.status(200).json({ message: \"Migrated users to the new auth\", result });\n  };\n\nexport const migrateGithubHandler: MigrateGithub =\n  async (_req, res) => {\n    const result = await createSocialLoginMigration(\"github\");\n\n    res.status(200).json({ message: \"Migrated users to the new auth\", result });\n  };\n\nasync function createSocialLoginMigration(\n  providerName: \"google\" | \"github\"\n): Promise<{\n  numUsersAlreadyMigrated: number;\n  numUsersNotUsingThisAuthMethod: number;\n  numUsersMigratedSuccessfully: number;\n}> {\n  const users = await prisma.user.findMany({\n    include: {\n      auth: true,\n      externalAuthAssociations: true,\n    },\n  });\n\n  const result = {\n    numUsersAlreadyMigrated: 0,\n    numUsersNotUsingThisAuthMethod: 0,\n    numUsersMigratedSuccessfully: 0,\n  };\n\n  for (const user of users) {\n    if (user.auth) {\n      result.numUsersAlreadyMigrated++;\n      console.log(\"Skipping user (already migrated) with id:\", user.id);\n      continue;\n    }\n\n    const provider = user.externalAuthAssociations.find(\n      (provider) => provider.provider === providerName\n    );\n\n    if (!provider) {\n      result.numUsersNotUsingThisAuthMethod++;\n      console.log(`Skipping user (not using ${providerName} auth) with id:`, user.id);\n      continue;\n    }\n\n    await prisma.auth.create({\n      data: {\n        identities: {\n          create: {\n            providerName,\n            providerUserId: provider.providerId,\n            providerData: JSON.stringify({}),\n          },\n        },\n        user: {\n          connect: {\n            id: user.id,\n          },\n        },\n      },\n    });\n    result.numUsersMigratedSuccessfully++;\n  }\n\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Showing General Wasp CLI Command Reference - Shell\nDESCRIPTION: This shell output block documents the full help message when running the Wasp CLI with no arguments. It lists available commands, options, usage patterns, and provides reference links. No dependencies are required, but the Wasp CLI must be installed on the user's system. This output helps users discover available commands and proper syntax.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/general/cli.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nUSAGE\n  wasp <command> [command-args]\n\nCOMMANDS\n  GENERAL\n    new [<name>] [args]   Creates a new Wasp project. Run it without arguments for interactive mode.\n      OPTIONS:\n        -t|--template <template-name>\n           Check out the templates list here: https://github.com/wasp-lang/starters\n\n    new:ai <app-name> <app-description> [<config-json>]\n      Uses AI to create a new Wasp project just based on the app name and the description.\n      You can do the same thing with `wasp new` interactively.\n      Run `wasp new:ai` for more info.\n\n    version               Prints current version of CLI.\n    waspls                Run Wasp Language Server. Add --help to get more info.\n    completion            Prints help on bash completion.\n    uninstall             Removes Wasp from your system.\n  IN PROJECT\n    start                 Runs Wasp app in development mode, watching for file changes.\n    start db              Starts managed development database for you.\n    db <db-cmd> [args]    Executes a database command. Run 'wasp db' for more info.\n    clean                 Deletes all generated code, all cached artifacts, and the node_modules dir.\n                          Wasp equivalent of 'have you tried closing and opening it again?'.\n    build                 Generates full web app code, ready for deployment. Use when deploying or ejecting.\n    deploy                Deploys your Wasp app to cloud hosting providers.\n    telemetry             Prints telemetry status.\n    deps                  Prints the dependencies that Wasp uses in your project.\n    dockerfile            Prints the contents of the Wasp generated Dockerfile.\n    info                  Prints basic information about the current Wasp project.\n    test                  Executes tests in your project.\n    studio                (experimental) GUI for inspecting your Wasp app.\n\nEXAMPLES\n  wasp new MyApp\n  wasp start\n  wasp db migrate-dev\n\nDocs: https://wasp.sh/docs\nDiscord (chat): https://discord.gg/rzdnErX\nNewsletter: https://wasp.sh/#signup\n```\n\n----------------------------------------\n\nTITLE: Accessing Shared Resources from a Wasp Query (TypeScript)\nDESCRIPTION: This TypeScript snippet shows a typed Wasp query (`someQuery`) accessing a shared resource. It imports the `getSomeResource` getter from the server setup module and the query type `SomeQuery` from `wasp/server/operations`. The retrieved resource is then used within the query's logic.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/server-config.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"src/queries.ts\"\nimport { type SomeQuery } from 'wasp/server/operations'\nimport { getSomeResource } from './myServerSetupCode.js'\n\n...\n\nexport const someQuery: SomeQuery<...> = async (args, context) => {\n  const someResource = getSomeResource()\n  return queryDataFromSomeResource(args, someResource)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Navigating to Web App Build Directory in Bash\nDESCRIPTION: Changes the current directory to the web app build folder within the Wasp project structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/_building-the-web-client.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd .wasp/build/web-app\n```\n\n----------------------------------------\n\nTITLE: Database Seeding Commands in Bash\nDESCRIPTION: Commands for seeding a database with specific seed functions. These can be used to populate development, staging, or production databases with initial data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/backends.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=<production-db-url> wasp db seed myProductionSeed\n```\n\nLANGUAGE: bash\nCODE:\n```\nwasp db seed devSeedSimple\n```\n\n----------------------------------------\n\nTITLE: Deploying to a Specific Fly.io Organization\nDESCRIPTION: Command to deploy a Wasp application to a specific organization on Fly.io. This is useful when your account belongs to multiple organizations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/cli.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly launch my-wasp-app mia --org hive\n```\n\n----------------------------------------\n\nTITLE: Uninstall Command Output\nDESCRIPTION: Demonstrates the process and output of uninstalling Wasp using the 'wasp uninstall' command.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/general/cli.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp uninstall\n\n🐝 --- Uninstalling Wasp ... ------------------------------------------------------\n\n We will remove the following directories:\n   {home}/.local/share/wasp-lang/\n   {home}/.cache/wasp/\n\n We will also remove the following files:\n   {home}/.local/bin/wasp\n\n Are you sure you want to continue? [y/N]\n y\n\n✅ --- Uninstalled Wasp -----------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Running Import Rewriting Script for Wasp 0.12.X\nDESCRIPTION: Command to automatically rewrite @wasp imports in your JavaScript/TypeScript files to match the new import format required in Wasp 0.12.X.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx jscodeshift@0.15.1 -t https://raw.githubusercontent.com/wasp-lang/wasp-codemod/main/src/transforms/imports-from-0-11-to-0-12.ts --extensions=js,ts,jsx,tsx src/\n```\n\n----------------------------------------\n\nTITLE: JavaScript Keycloak Authentication Configuration\nDESCRIPTION: JavaScript implementation of Keycloak authentication configuration including user signup fields and OAuth scopes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/keycloak.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const userSignupFields = {\n  username: () => 'hardcoded-username',\n  displayName: (data) => data.profile.name,\n}\n\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth in Wasp Main File (TypeScript) - wasp\nDESCRIPTION: Establishes the application's main Wasp settings for GitHub OAuth using TypeScript modules for configuration. As in the JS variant, it structures the app object, imports provider and signup customizations from TS files, and specifies an associated User entity. Input is the set of static config parameters and imported functions; output is an OAuth-enabled app. Designed to be placed in 'main.wasp' for TS-based projects.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/github.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/github.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/github.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\nentity User {=psl\n    id                        Int     @id @default(autoincrement())\n    username                  String  @unique\n    displayName               String\npsl=}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Updating Tailwind Configuration for Wasp 0.12\nDESCRIPTION: Changes needed for the tailwind.config.cjs file to make it compatible with Wasp 0.12, using the resolveProjectPath function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    // highlight-next-line\n    './src/**/*.{js,jsx,ts,tsx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\nLANGUAGE: js\nCODE:\n```\n// highlight-next-line\nconst { resolveProjectPath } = require('wasp/dev')\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    // highlight-next-line\n    resolveProjectPath('./src/**/*.{js,jsx,ts,tsx}'),\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Provider in Wasp\nDESCRIPTION: Basic configuration for setting up an email provider in the main.wasp file. Defines the provider type and default sender information.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/email/email.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: <provider>,\n    defaultFrom: {\n      name: \"Example\",\n      email: \"hello@itsme.com\"\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Environment Variables in Bash\nDESCRIPTION: Sets the WASP_WEB_CLIENT_URL and WASP_SERVER_URL environment variables for the server. These variables specify the client and server custom domains respectively, ensuring correct server configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/extras.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nWASP_WEB_CLIENT_URL=https://myapp.com\nWASP_SERVER_URL=https://server.myapp.com\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migrations for Auth Changes (Shell)\nDESCRIPTION: Executes Wasp's database migration utility to ensure changes in entities and authentication settings are reflected in the underlying SQL schema. Requires previously updated .wasp and Prisma files and outputs an updated database structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/07-auth.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nwasp db migrate-dev\\n\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Configuration in Wasp\nDESCRIPTION: Example showing how to define a WebSocket configuration in a Wasp file, demonstrating the basic setup for real-time connections.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-07-wasp-beta-update-may-23.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\nwebSocket chat {\n  fn: import { webSocketFn } from \"@src/chat.js\",\n  auth: true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp Database Seeds in TypeScript\nDESCRIPTION: This code snippet shows how to configure the Wasp database to include the getTwitterTokens script as a seed. This allows the script to be run using the Wasp CLI command 'wasp db seed'.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\napp twitterAgent {\n  wasp: {\n    version: \"^0.10.6\"\n  },\n  //...\n  db: { \n    system: PostgreSQL,\n    seeds: [ // <---------- add this\n      import { getTwitterTokens } from \"@server/scripts/tokens.js\",\n    ]\n  },\n  //...\n```\n\n----------------------------------------\n\nTITLE: Updating External Imports in Wasp Files\nDESCRIPTION: Examples showing how to update external imports in Wasp files from the old @client and @server format to the new @src/client and @src/server format.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\npage LoginPage {\n  // highlight-next-line\n  // This previously resolved to src/client/LoginPage.js\n  // highlight-next-line\n  component: import Login from \"@client/LoginPage\"\n}\n\n// ...\n\nquery getTasks {\n  // highlight-next-line\n  // This previously resolved to src/server/queries.js\n  // highlight-next-line\n  fn: import { getTasks } from \"@server/queries.js\",\n}\n```\n\nLANGUAGE: js\nCODE:\n```\npage LoginPage {\n  // highlight-next-line\n  // This now resolves to src/client/LoginPage.js\n  // highlight-next-line\n  component: import Login from \"@src/client/LoginPage\"\n}\n\n// ...\n\nquery getTasks {\n  // highlight-next-line\n  // This now resolves to src/server/queries.js\n  // highlight-next-line\n  fn: import { getTasks } from \"@src/server/queries.js\",\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Server Environment Variable Securely via Fly CLI (Shell)\nDESCRIPTION: Shows how to set a sensitive server-side environment variable on a Fly.io deployment using the flyctl secrets set command. The variable SOME_VAR_NAME is securely stored for the deployed server instance. Used for pushing secrets into cloud hosting environments, ensuring they are not exposed to the client or source code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/env-vars.md#2025-04-22_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nflyctl secrets set SOME_VAR_NAME=somevalue\n```\n\n----------------------------------------\n\nTITLE: Running Wasp Start Command in Bash\nDESCRIPTION: The command that starts the Wasp development server with hot reloading functionality. It automatically regenerates code and restarts the app when changes are detected in the working directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/_WaspStartNote.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasp start\n```\n\n----------------------------------------\n\nTITLE: Wasp CLI Telemetry JSON Payload Structure\nDESCRIPTION: JSON structure showing the telemetry data sent when a Wasp CLI command is invoked. The payload includes a randomly generated UUID, project hash, build status, deploy command arguments, Wasp version, operating system, and execution context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/telemetry.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Randomly generated, non-identifiable UUID representing a user.\n  \"distinct_id\": \"bf3fa7a8-1c11-4f82-9542-ec1a2d28786b\",\n  // Non-identifiable hash representing a project.\n  \"project_hash\": \"6d7e561d62b955d1\",\n  // True if command was `wasp build`, false otherwise.\n  \"is_build\": true,\n  // Captures `wasp deploy ...` args, but only those from the limited, pre-defined list of keywords.\n  // Those are \"fly\", \"setup\", \"create-db\", \"deploy\" and \"cmd\". Everything else is ommited.\n  \"deploy_cmd_args\": \"fly;deploy\",\n  \"wasp_version\": \"0.1.9.1\",\n  \"os\": \"linux\",\n  // \"CI\" if running on CI, and whatever is the content of \"WASP_TELEMETRY_CONTEXT\" env var.\n  // We use this to track when execution is happening in some special context, like on Gitpod, Replit or similar.\n  \"context\": \"CI\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Global Middleware in TypeScript\nDESCRIPTION: This snippet demonstrates the default global middleware configuration in TypeScript for Wasp applications. It includes type definitions and the same middleware setup as the JavaScript version.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/middleware-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MiddlewareConfig = Map<string, express.RequestHandler>\n\nexport type MiddlewareConfigFn = (middlewareConfig: MiddlewareConfig) => MiddlewareConfig\n\nconst defaultGlobalMiddleware: MiddlewareConfig = new Map([\n  ['helmet', helmet()],\n  ['cors', cors({ origin: config.allowedCORSOrigins })],\n  ['logger', logger('dev')],\n  ['express.json', express.json()],\n  ['express.urlencoded', express.urlencoded({ extended: false })],\n  ['cookieParser', cookieParser()]\n])\n```\n\n----------------------------------------\n\nTITLE: Client Deployment Automation Script\nDESCRIPTION: Bash script for automating the client deployment process on Railway\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/paas.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\nif [ -z \"$REACT_APP_API_URL\" ]\nthen\n  echo \"REACT_APP_API_URL is not set\"\n  exit 1\nfi\n\nwasp build\ncd .wasp/build/web-app\n\nnpm install && REACT_APP_API_URL=$REACT_APP_API_URL npm run build\n\ncp -r build dist\n\ndockerfile_contents=$(cat <<EOF\nFROM pierrezemb/gostatic\nCMD [ \"-fallback\", \"index.html\" ]\nCOPY ./dist/ /srv/http/\nEOF\n)\n\ndockerignore_contents=$(cat <<EOF\nnode_modules/\nEOF\n)\n\necho \"$dockerfile_contents\" > Dockerfile\necho \"$dockerignore_contents\" > .dockerignore\n\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Updating OAuth Provider Configuration Function in TypeScript (Before)\nDESCRIPTION: The previous implementation of the OAuth provider configuration function that includes clientID, clientSecret, and scope properties.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getConfig() {\n    return {\n        clientID: process.env.GOOGLE_CLIENT_ID,\n        clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n        scope: ['profile', 'email'],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Wasp Seed Configuration Example\nDESCRIPTION: Shows a more detailed example of configuring multiple seed functions in the Wasp configuration file using named imports.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/databases.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    seeds: [\n      // ...\n      import { devSeedSimple } from \"@src/dbSeeds.js\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Route in TypeScript\nDESCRIPTION: Example of configuring an API route in Wasp using TypeScript. The route includes authentication, entity access, and middleware configuration for the /foo/bar endpoint.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/apis.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar {\n  fn: import { fooBar } from \"@src/apis\",\n  httpRoute: (GET, \"/foo/bar\"),\n  entities: [Task],\n  auth: true,\n  middlewareConfigFn: import { apiMiddleware } from \"@src/apis\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Component - JavaScript (src\\/Root.jsx)\nDESCRIPTION: Implements a React functional component acting as the root wrapper for the application. It receives 'children' as content to render, ensuring layout consistency with header and footer. No additional dependencies except React itself; inputs are 'children' nodes, output is the composed widget structure rendered at app root.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/client-config.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Root({ children }) {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      {children}\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Users Based on Signup Status in JavaScript\nDESCRIPTION: React component that checks if a user has completed signup and redirects accordingly using the useAuth hook.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAuth } from 'wasp/client/auth'\nimport { Redirect } from 'react-router-dom'\n\nexport function HomePage() {\n  const { data: user } = useAuth()\n\n  if (user.isSignupComplete === false) {\n    return <Redirect to=\"/edit-user-details\" />\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image to Heroku App - Shell\nDESCRIPTION: This command builds the Docker image for the web process and pushes it to the Heroku app container registry. The '<app-name>' placeholder should be replaced with the actual Heroku app name. It depends on both Docker and the Heroku CLI, and should be run from the build directory. On Apple Silicon, this step requires an alternative approach as described in a separate snippet.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/manually.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nheroku container:push --app <app-name> web\n\n```\n\n----------------------------------------\n\nTITLE: Deploying Netlify Client\nDESCRIPTION: Commands for deploying the client application to Netlify hosting platform. Includes both initial and production deployment steps.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/manually.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnetlify deploy\n\nnetlify deploy --prod\n```\n\n----------------------------------------\n\nTITLE: Google Auth Configuration After Migration\nDESCRIPTION: Updated main.wasp configuration for Google authentication using the new userSignupFields property instead of getUserFieldsFn.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_18\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  // ...\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {\n        // highlight-next-line\n        userSignupFields: import { fields } from \"@src/server/auth/google.js\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup and Login in React (TypeScript)\nDESCRIPTION: This TypeScript version of the signup form implementation includes type annotations for state variables and event handlers. It demonstrates how to use Wasp's authentication actions in a type-safe manner.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/username-and-pass.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport signup from '@wasp/auth/signup'\nimport login from '@wasp/auth/login'\n\nimport { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\n\nexport function Signup() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState<Error | null>(null)\n  const history = useHistory()\n\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    try {\n      await signup({\n        username,\n        password,\n      })\n      await login(username, password)\n      history.push(\"/\")\n    } catch (error: unknown) {\n      setError(error as Error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* ... */}\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Wasp Project with Interactive Template Selection\nDESCRIPTION: Command-line interaction example showing how to create a new Wasp project using the interactive template selector, which allows choosing from different starter templates like basic, todo-ts, saas, embeddings, and ai-generated.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/starter-templates.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp new\nEnter the project name (e.g. my-project) ▸ MyFirstProject\nChoose a starter template\n[1] basic (default)\n    Simple starter template with a single page.\n[2] todo-ts\n    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.\n[3] saas\n    Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.\n[4] embeddings\n    Comes with code for generating vector embeddings and performing vector similarity search.\n[5] ai-generated\n    🤖 Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)\n ▸ 1\n\n🐝 --- Creating your project from the \"basic\" template... -------------------------\n\nCreated new Wasp app in ./MyFirstProject directory!\n\nTo run your new app, do:\n    cd MyFirstProject\n    wasp db start\n```\n\n----------------------------------------\n\nTITLE: Configuring the Generator Block in Prisma for Wasp\nDESCRIPTION: Illustrates the mandatory `generator` block required by Wasp in the `schema.prisma` file. This block must define a generator named `client` (or similar) and specify `provider = \"prisma-client-js\"` to ensure Wasp can generate and utilize the Prisma Client. Additional custom generators are permitted.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/prisma-file.md#2025-04-22_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\ngenerator client {\\n  provider = \"prisma-client-js\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Auth UI Colors in TypeScript\nDESCRIPTION: Shows how to customize the Auth UI colors in TypeScript by defining an authAppearance object with type annotations. The custom appearance is then applied to the LoginForm component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CustomizationOptions } from 'wasp/client/auth'\n\nexport const authAppearance: CustomizationOptions['appearance'] = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\nimport { authAppearance } from './appearance'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass the appearance object to the form\n      appearance={authAppearance}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Heroku Procfile for Discord Bot Deployment (YAML)\nDESCRIPTION: This Procfile configuration specifies the command to run the Discord bot on Heroku, using a worker dyno to execute the bot.js file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-04-29-discord-bot-introduction.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nworker: node bot.js\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js on WSL\nDESCRIPTION: Command to install Node.js on the WSL Ubuntu environment using apt.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-11-21-guide-windows-development-wasp-wsl.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install nodejs\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Wasp File (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define the User entity in the Wasp file, which is required for Keycloak authentication. It includes a basic structure with an auto-incrementing id field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/keycloak.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\n    id          Int     @id @default(autoincrement())\n    // ...\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Implementing CreateTask Action in TypeScript\nDESCRIPTION: Type-safe server-side implementation of the createTask action with proper type annotations for payload and return types.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/06-actions.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from '@wasp/entities'\nimport { CreateTask } from '@wasp/actions/types'\n\ntype CreateTaskPayload = Pick<Task, 'description'>\n\nexport const createTask: CreateTask<CreateTaskPayload, Task> = async (\n  args,\n  context\n) => {\n  return context.entities.Task.create({\n    data: { description: args.description },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Username & Password Migration API in Wasp\nDESCRIPTION: Defines an API endpoint for migrating username and password data in the Wasp configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_23\n\nLANGUAGE: wasp\nCODE:\n```\napi migrateUsernameAndPassword {\n  httpRoute: (GET, \"/migrate-username-and-password\"),\n  fn: import { migrateUsernameAndPasswordHandler } from \"@src/migrateToNewAuth\",\n  entities: []\n}\n```\n\n----------------------------------------\n\nTITLE: Keycloak User Data Structure\nDESCRIPTION: Example of the user data structure returned by Keycloak's /userinfo endpoint.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/keycloak.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  sub: '5adba8fc-3ea6-445a-a379-13f0bb0b6969',\n  email_verified: true,\n  name: 'Test User',\n  preferred_username: 'test',\n  given_name: 'Test',\n  family_name: 'User',\n  email: 'test@example.com'\n}\n```\n\n----------------------------------------\n\nTITLE: Running Arbitrary Fly Commands with Wasp CLI\nDESCRIPTION: Command to run arbitrary Fly.io commands through the Wasp CLI, specifying which context (client or server) the command should apply to.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/cli.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd secrets list --context server\n```\n\n----------------------------------------\n\nTITLE: Displaying Wasp CLI Version\nDESCRIPTION: Shows the output of the 'wasp version' command, which displays the current version of the Wasp CLI and provides instructions for updating or installing specific versions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/general/cli.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp version\n\n0.14.0\n\nIf you wish to install/switch to the latest version of Wasp, do:\ncurl -sSL https://get.wasp.sh/installer.sh | sh -s\n\nIf you want specific x.y.z version of Wasp, do:\ncurl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v x.y.z\n\nCheck https://github.com/wasp-lang/wasp/releases for the list of valid versions, including the latest one.\n```\n\n----------------------------------------\n\nTITLE: Using Search Query and Hash with Link Component in React TSX\nDESCRIPTION: Demonstrates how to use the search and hash props with the Link component for more complex routing scenarios in TypeScript React.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/links.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Link\n  to=\"/task/:id\"\n  params={{ id: task.id }}\n  search={{ sortBy: 'date' }}\n  hash=\"comments\"\n>\n  {task.description}\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeSignup Hook in JavaScript\nDESCRIPTION: Shows how to implement the onBeforeSignup hook in JavaScript. This hook is called before user creation and can be used to reject signups based on certain criteria.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const onBeforeSignup = async ({ providerId, prisma, req }) => {\n  const count = await prisma.user.count()\n  console.log('number of users before', count)\n  console.log('provider name', providerId.providerName)\n  console.log('provider user ID', providerId.providerUserId)\n\n  if (count > 100) {\n    throw new HttpError(403, 'Too many users')\n  }\n\n  if (\n    providerId.providerName === 'email' &&\n    providerId.providerUserId === 'some@email.com'\n  ) {\n    throw new HttpError(403, 'This email is not allowed')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Social Buttons Layout\nDESCRIPTION: Shows how to customize the social login buttons layout by setting the socialLayout prop to either vertical or horizontal.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/ui.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass in the socialLayout prop\n      socialLayout=\"vertical\"\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Similarity Search Template Project\nDESCRIPTION: Command to create a new Wasp project using the embeddings template for vector similarity search, including OpenAI Embeddings API and Pinecone vector database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/starter-templates.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwasp new <project-name> -t embeddings\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeLogin Hook\nDESCRIPTION: Authentication hook that runs before user login. Receives providerId, prisma, and req as input parameters. The hook's return value is ignored by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/auth-hooks.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport const onBeforeLogin = async ({ providerId, prisma, req }) => {\n  // Hook code goes here\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OnBeforeLoginHook } from 'wasp/server/auth'\n\nexport const onBeforeLogin: OnBeforeLoginHook = async ({\n  providerId,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta for Apple Silicon Macs (bash)\nDESCRIPTION: Runs the softwareupdate utility to install Rosetta 2 on macOS systems with Apple Silicon (arm64) chips. Required if running x86 binaries, such as the current Wasp binary, on an Mx Mac (M1, M2, etc.). The command requires sudo/root access and an active internet connection. No parameters are accepted. After installation, x86 apps like Wasp can be executed transparently. Limitation: Only relevant on arm64 Macs; not supported on x86 macs or other operating systems.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/introduction/quick-start.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsoftwareupdate --install-rosetta\n```\n\n----------------------------------------\n\nTITLE: Starting the Wasp Application\nDESCRIPTION: Command to start the Wasp application, which will install dependencies on first run and launch both client and server.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-09-build-real-time-voting-app-websockets-react-typescript.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nwasp start\n```\n\n----------------------------------------\n\nTITLE: Building Wasp Web App with npm and Environment Variable\nDESCRIPTION: Installs dependencies and builds the React app, setting the REACT_APP_API_URL environment variable to specify the backend URL. Replace <url_to_wasp_backend> with the actual URL of the deployed Wasp server.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/_building-the-web-client.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install && REACT_APP_API_URL=<url_to_wasp_backend> npm run build\n```\n\n----------------------------------------\n\nTITLE: Updating Google Auth Configuration in main.wasp\nDESCRIPTION: Shows how to update the Google auth configuration in the main.wasp file, moving from getUserFieldsFn to userSignupFields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_13\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  // ...\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {\n        userSignupFields: import { fields } from \"@src/server/auth/google.js\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Database Migration Commands in Bash\nDESCRIPTION: Commands for cleaning up old SQLite migrations and database when migrating to PostgreSQL. These steps help prepare for creating a new initial migration for PostgreSQL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/backends.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrm -r migrations/\nwasp clean\n```\n\n----------------------------------------\n\nTITLE: Importing TypeScript/JavaScript Helper Component in JSX\nDESCRIPTION: This code snippet imports a custom React component called 'ShowForTs' from a specific file path. This component is likely used to conditionally render content for TypeScript-specific documentation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/_superjson-note.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ShowForTs } from '@site/src/components/TsJsHelpers';\n```\n\n----------------------------------------\n\nTITLE: Implementing Setup Function in TypeScript\nDESCRIPTION: TypeScript version of the setup function with proper return type annotation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/client-config.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function mySetupFunction(): Promise<void> {\n  // Run some code\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Build Directory\nDESCRIPTION: Command to change directory to the Wasp build folder\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/paas.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd .wasp/build\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Reset Request Form in React\nDESCRIPTION: This component renders a form for users to request a password reset. It uses the requestPasswordReset function from Wasp's authentication module and handles form submission and error states.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/email/create-your-own-ui.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport function PasswordResetRequest() {\n  const [error, setError] = useState<Error | null>(null)\n  const [email, setEmail] = useState('')\n\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    setError(null)\n    try {\n      await requestPasswordReset({ email })\n    } catch (error: unknown) {\n      setError(error as Error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {error && <p>Error: {error.message}</p>}\n\n      <input\n        type=\"email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        placeholder=\"Email\"\n      />\n\n      <button type=\"submit\">Send password reset</button>\n    </form>\n  )\n```\n\n----------------------------------------\n\nTITLE: Using getFirstProviderUserId Helper in JavaScript\nDESCRIPTION: Example of using the getFirstProviderUserId helper method to retrieve the first available user ID in a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/entities.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst MainPage = ({ user }) => {\n  const userId = user.getFirstProviderUserId()\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Wasp Telemetry Status\nDESCRIPTION: Shows the output of the `wasp telemetry` command. It displays whether anonymous telemetry data collection is currently enabled, the location of the telemetry cache directory, the timestamp of the last data transmission for the project, and a link to the documentation explaining the scope of the collected data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/general/cli.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp telemetry\n\nTelemetry is currently: ENABLED\nTelemetry cache directory: /home/user/.cache/wasp/telemetry/\nLast time telemetry data was sent for this project: 2021-05-27 09:21:16.79537226 UTC\nOur telemetry is anonymized and very limited in its scope: check https://wasp.sh/docs/telemetry for more details.\n```\n\n----------------------------------------\n\nTITLE: Defining a Job in Wasp TypeScript\nDESCRIPTION: Sets up a job named 'mySpecialJob' using the PgBoss executor in the Wasp app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/general/wasp-ts-config.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napp.job('mySpecialJob', {\n  executor: 'PgBoss',\n  perform: {\n    fn: { import: 'foo', from: '@src/jobs/bar' },\n    executorOptions: {\n      pgBoss: { retryLimit: 1 }\n    }\n  },\n  entities: ['Task']\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta on Mac M1/M2\nDESCRIPTION: Command to install Rosetta for running x86 applications on Apple Silicon Macs\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/introduction/quick-start.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsoftwareupdate --install-rosetta\n```\n\n----------------------------------------\n\nTITLE: Using getUsername in Task Handler (TypeScript)\nDESCRIPTION: TypeScript implementation of getUsername in a task handler with generic type CreateTask. Shows proper typing in an async task context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/_get-username.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getUsername } from 'wasp/auth'\n\nexport const createTask: CreateTask<...>  = async (args, context) => {\n  const username = getUsername(context.user)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Wasp Application\nDESCRIPTION: Command to create a new Wasp application using the Wasp CLI, which will prompt you for a project name and set up the initial project structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/introduction/quick-start.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwasp new\n```\n\n----------------------------------------\n\nTITLE: TypeScript Helper Function Implementation\nDESCRIPTION: TypeScript version of the helper function with proper type annotations, importing Task type from Wasp entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/testing.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Task } from \"wasp/entities\";\n\nexport function areThereAnyTasks(tasks: Task[]): boolean {\n  return tasks.length === 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Operations in TypeScript\nDESCRIPTION: TypeScript implementation of the getRecipes query that retrieves recipes for the authenticated user using Prisma.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/introduction/introduction.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetRecipes } from \"wasp/server/operations\";\nimport { type Recipe } from \"wasp/entities\";\n\nexport const getRecipes: GetRecipes<{}, Recipe[]> = async (_args, context) => {\n  return context.entities.Recipe.findMany(\n    { where: { user: { id: context.user.id } } }\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: SendGrid Environment Variables Configuration\nDESCRIPTION: Environment variables setup for SendGrid email provider configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/email/email.md#2025-04-22_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nSENDGRID_API_KEY=\n```\n\n----------------------------------------\n\nTITLE: TypeScript Keycloak Authentication Configuration\nDESCRIPTION: TypeScript implementation of user signup fields mapping and Keycloak configuration with type definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/keycloak.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n  username: () => 'hardcoded-username',\n  displayName: (data: any) => data.profile.name,\n})\n\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Queries with Entities (Wasp)\nDESCRIPTION: Demonstrates how to declare Queries in the Wasp configuration file, including specifying the implementation function and associated entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/queries.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\nquery getAllTasks {\n  fn: import { getAllTasks } from \"@server/queries.js\",\n  entities: [Task]\n}\n\nquery getFilteredTasks {\n  fn: import { getFilteredTasks } from \"@server/queries.js\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Telemetry Data on CLI Command Invocation in JSON\nDESCRIPTION: This JSON structure represents the telemetry data sent when a Wasp CLI command is invoked. It includes a user UUID, project hash, build flag, deploy command arguments, Wasp version, OS, and execution context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/telemetry.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"distinct_id\": \"bf3fa7a8-1c11-4f82-9542-ec1a2d28786b\",\n  \"project_hash\": \"6d7e561d62b955d1\",\n  \"is_build\": true,\n  \"deploy_cmd_args\": \"fly;deploy\",\n  \"wasp_version\": \"0.1.9.1\",\n  \"os\": \"linux\",\n  \"context\": \"CI\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Wasp Server to Fly.io\nDESCRIPTION: Deploys the Wasp server to Fly.io using a remote builder and the saved configuration file. This command builds and deploys the backend of the Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/manually.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflyctl deploy --remote-only --config ../../fly.toml\n```\n\n----------------------------------------\n\nTITLE: Entity Declaration in Wasp\nDESCRIPTION: Wasp configuration showing how to declare Entities for Actions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/actions.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\naction createTask {\n  fn: import { createTask } from \"@src/actions.js\",\n  entities: [Task]\n}\n\naction markTaskAsDone {\n  fn: import { markTaskAsDone } from \"@src/actions.js\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Render Function Type Definition\nDESCRIPTION: TypeScript type definition for the render function used in additionalFields, showing the expected parameters and return type.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n(form: UseFormReturn, state: FormState) => React.ReactNode\n```\n\n----------------------------------------\n\nTITLE: Creating React App with Django\nDESCRIPTION: Command to initialize a new React application within a Django project using create-react-app\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-20-django-vs-wasp.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-react-app frontend\n```\n\n----------------------------------------\n\nTITLE: Setting Up TypeScript Todo App Template\nDESCRIPTION: Command to create a new Wasp project using the TypeScript todo app template, which includes authentication and fullstack type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/starter-templates.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwasp new <project-name> -t todo-ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Authentication Methods in Wasp\nDESCRIPTION: This snippet demonstrates how to enable multiple authentication methods (email, Google, and GitHub) in the Wasp configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/ui.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  //...\n  auth: {\n    methods: {\n      email: {},\n      google: {},\n      github: {},\n    },\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Dependencies from Wasp File to package.json\nDESCRIPTION: Example showing how to move dependencies from the app.dependencies field in the Wasp file to the package.json file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_8\n\nLANGUAGE: css\nCODE:\n```\napp Foo {\n  // ...\n  dependencies: [ ('redux', '^4.0.5'), ('reacjt-redux', '^7.1.3')];\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"foo\",\n  \"dependencies\": {\n    \"wasp\": \"file:.wasp/out/sdk/wasp\",\n    \"react\": \"^18.2.0\",\n    // highlight-next-line\n    \"redux\": \"^4.0.5\",\n    // highlight-next-line\n    \"reactjs-redux\": \"^7.1.3\"\n  },\n  \"devDependencies\": {\n    \"typescript\": \"^5.1.0\",\n    \"vite\": \"^4.3.9\",\n    \"@types/react\": \"^18.0.37\",\n    \"prisma\": \"4.16.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Password Presence in Wasp\nDESCRIPTION: The ensurePasswordIsPresent function verifies that a password is provided. It throws an error if the password is missing or empty.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/advanced/custom-auth-actions.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nensurePasswordIsPresent(args)\n```\n\n----------------------------------------\n\nTITLE: Cleaning Wasp Project\nDESCRIPTION: Example of cleaning a Wasp project by removing generated code and cached artifacts.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/general/cli.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp clean\n\n🐝 --- Deleting the .wasp/ directory... -------------------------------------------\n\n✅ --- Deleted the .wasp/ directory. ----------------------------------------------\n\n🐝 --- Deleting the node_modules/ directory... ------------------------------------\n\n✅ --- Deleted the node_modules/ directory. ---------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Starting Database Server\nDESCRIPTION: Command to start the database server using wasp-cli.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/examples/todoApp/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncabal run wasp-cli start db\n```\n\n----------------------------------------\n\nTITLE: Running the Wasp Migration Script\nDESCRIPTION: Command for executing the migration script that helps transition a project to the new Wasp structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx wasp-migrate foo\n```\n\n----------------------------------------\n\nTITLE: Configuring SendGrid Email Provider in Wasp\nDESCRIPTION: Demonstrates how to configure the SendGrid email provider in the main.wasp file for sending emails through the SendGrid service.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/email/email.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: SendGrid,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Dev Server Browser Behavior\nDESCRIPTION: Demonstrates how to prevent Vite from automatically opening the browser during development by modifying the server configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/custom-vite-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  server: {\n    open: false,\n  },\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  server: {\n    open: false,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating Database Schema with Wasp CLI\nDESCRIPTION: This shell command `wasp db migrate-dev` is used within a Wasp project to apply changes made to the Prisma schema (like adding or modifying entities) to the development database. It generates and executes a new database migration based on the `schema.prisma` file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/04-entities.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp on Linux/OSX/WSL\nDESCRIPTION: Command to download and execute the Wasp installer script using curl.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/introduction/quick-start.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Django settings for REST and CORS\nDESCRIPTION: Python code to update Django settings.py file with REST framework and CORS configurations, including allowed origins for the React frontend.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-20-django-vs-wasp.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n    'corsheaders',\n]\n\nMIDDLEWARE = [\n    ...\n    'corsheaders.middleware.CorsMiddleware',\n    ...\n]\n\nCORS_ALLOWED_ORIGINS = [\n    'http://localhost:3000',\n]\n```\n\n----------------------------------------\n\nTITLE: Railway Static Hosting Dockerfile\nDESCRIPTION: Dockerfile configuration for hosting static content on Railway using gostatic\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/paas.md#2025-04-22_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM pierrezemb/gostatic\nCMD [ \"-fallback\", \"index.html\" ]\nCOPY ./dist/ /srv/http/\n```\n\n----------------------------------------\n\nTITLE: Building Wasp Web App with NPM and Environmental Variable\nDESCRIPTION: Installs dependencies and builds the React app, setting the API URL for the Wasp backend. The REACT_APP_API_URL should be replaced with the actual URL of the deployed Wasp server.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/_building-the-web-client.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install && REACT_APP_API_URL=<url_to_wasp_backend> npm run build\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth Pages in React/JSX\nDESCRIPTION: React components implementing authentication UI including login, signup, email verification, password reset forms, and a layout component. Uses Tailwind CSS for styling and React Router for navigation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/email.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  LoginForm,\n  SignupForm,\n  VerifyEmailForm,\n  ForgotPasswordForm,\n  ResetPasswordForm,\n} from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Don't have an account yet? <Link to=\"/signup\">go to signup</Link>.\n      </span>\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Forgot your password? <Link to=\"/request-password-reset\">reset it</Link>\n        .\n      </span>\n    </Layout>\n  );\n}\n\nexport function Signup() {\n  return (\n    <Layout>\n      <SignupForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </Layout>\n  );\n}\n\nexport function EmailVerification() {\n  return (\n    <Layout>\n      <VerifyEmailForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        If everything is okay, <Link to=\"/login\">go to login</Link>\n      </span>\n    </Layout>\n  );\n}\n\nexport function RequestPasswordReset() {\n  return (\n    <Layout>\n      <ForgotPasswordForm />\n    </Layout>\n  );\n}\n\nexport function PasswordReset() {\n  return (\n    <Layout>\n      <ResetPasswordForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        If everything is okay, <Link to=\"/login\">go to login</Link>\n      </span>\n    </Layout>\n  );\n}\n\nexport function Layout({ children }) {\n  return (\n    <div className=\"w-full h-full bg-white\">\n      <div className=\"min-w-full min-h-[75vh] flex items-center justify-center\">\n        <div className=\"w-full h-full max-w-sm p-5 bg-white\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Dependencies from Wasp File to package.json\nDESCRIPTION: Example of moving app dependencies from the Wasp configuration file to the package.json file, which is required in Wasp 0.12.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_8\n\nLANGUAGE: css\nCODE:\n```\napp Foo {\n  // ...\n  dependencies: [ ('redux', '^4.0.5'), ('reacjt-redux', '^7.1.3')];\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"foo\",\n  \"dependencies\": {\n    \"wasp\": \"file:.wasp/out/sdk/wasp\",\n    \"react\": \"^18.2.0\",\n    // highlight-next-line\n    \"redux\": \"^4.0.5\",\n    // highlight-next-line\n    \"reactjs-redux\": \"^7.1.3\"\n  },\n  \"devDependencies\": {\n    \"typescript\": \"^5.1.0\",\n    \"vite\": \"^4.3.9\",\n    \"@types/react\": \"^18.0.37\",\n    \"prisma\": \"4.16.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Query Client in Setup Function - JavaScript\nDESCRIPTION: Demonstrates configuring default options for react-query via the Wasp client setup function in JavaScript. Calls configureQueryClient during setup to set global query staleTime. Requires 'wasp/client/operations' module and react-query in the project. Input: global query configuration object. Output: customized query client options.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/client-config.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { configureQueryClient } from 'wasp/client/operations'\n\nexport default async function mySetupFunction() {\n  // ... some setup\n  configureQueryClient({\n    defaultOptions: {\n      queries: {\n        staleTime: Infinity,\n      },\n    },\n  })\n  // ... some more setup\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server Environment Variables in Development (.env.server) (Shell)\nDESCRIPTION: Shows the content and expected structure of a .env.server file, used to define environment variables for the Wasp server in development. Each line defines a NAME=VALUE pair to be loaded automatically. No extensions or shell-specific syntax required; values are plain strings. The file is typically ignored in version control for security.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/env-vars.md#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nDATABASE_URL=postgresql://localhost:5432\nSOME_VAR_NAME=somevalue\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Domain to Fly.io App\nDESCRIPTION: Command to add a custom domain to your deployed Fly.io application by creating SSL certificates for the domain.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/cli.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd --context client certs create mycoolapp.com\n```\n\n----------------------------------------\n\nTITLE: Adding Auth Routes in Wasp\nDESCRIPTION: Configures the authentication routes and pages in the Wasp file\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/google.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Social Buttons Layout in JavaScript\nDESCRIPTION: Demonstrates how to change the layout of social buttons in the Auth UI by passing the 'socialLayout' prop to the LoginForm component in JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass in the socialLayout prop\n      socialLayout=\"vertical\"\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for Wasp 0.15.0\nDESCRIPTION: Update the package.json file to include the new Prisma version and add the 'type' field for ES modules.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-14-to-0-15.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"type\": \"module\",\n  \"devDependencies\": {\n    ....\n    \"prisma\": \"5.19.1\"\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Package Files to waspc.cabal in Wasp\nDESCRIPTION: Instructions for adding new package files to the data-files section of the waspc.cabal file. This ensures that the necessary package files are included in the project build and distribution.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/packages/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npackages/<package-name>/package.json\npackages/<package-name>/package-lock.json\npackages/<package-name>/dist/**/*.js\n```\n\n----------------------------------------\n\nTITLE: Database URL Environment Configuration\nDESCRIPTION: Environment variable configuration for PostgreSQL database connection in .env.server file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/backends.md#2025-04-22_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nDATABASE_URL=postgresql://user:password@localhost:5432/mydb\n```\n\n----------------------------------------\n\nTITLE: Implicit 'forall' in Vanilla Haskell Type Signatures\nDESCRIPTION: Illustrates how 'forall' is implicitly present in polymorphic type signatures in vanilla Haskell without extensions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-09-01-haskell-forall-tutorial.md#2025-04-22_snippet_2\n\nLANGUAGE: haskell\nCODE:\n```\nf :: a -> a\ng :: a -> (a -> b) -> b\n```\n\nLANGUAGE: haskell\nCODE:\n```\nf :: forall a. a -> a\ng :: forall a b. a -> (a -> b) -> b\n```\n\n----------------------------------------\n\nTITLE: Old OAuth Redirect URL Format (Before Wasp 0.13.0)\nDESCRIPTION: Shows the format of the OAuth redirect URL used in Wasp versions prior to 0.13.0. This URL included the client URL and the provider name. This format needs to be updated in the OAuth provider's dashboard.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{clientUrl}/auth/login/{provider}\n```\n\n----------------------------------------\n\nTITLE: Using Prisma Schema Language in Wasp\nDESCRIPTION: This snippet shows how to include Prisma Schema Language (PSL) data models directly in Wasp code using the psl type.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/general/language.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\n{=psl <psl data model syntax> psl=}\n```\n\n----------------------------------------\n\nTITLE: Migrating from Redirect to Navigate Component\nDESCRIPTION: Demonstrates how to replace the Redirect component with the new Navigate component in React Router 6.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-14-to-0-15.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Redirect } from 'react-router-dom'\n\nexport function SomePage() {\n  return (\n    <Redirect to=\"/new-route\" />\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Navigate } from 'react-router-dom'\n\nexport function SomePage() {\n  return (\n    <Navigate to=\"/new-route\" replace />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Login Implementation\nDESCRIPTION: Example of a custom login implementation using the login action with error handling and navigation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/username-and-pass.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { login } from 'wasp/client/auth'\n\nimport { useState } from 'react'\nimport { useHistory, Link } from 'react-router-dom'\n\nexport function LoginPage() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState(null)\n  const history = useHistory()\n\n  async function handleSubmit(event) {\n    event.preventDefault()\n    try {\n      await login(username, password)\n      history.push('/')\n    } catch (error) {\n      setError(error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* ... */}\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of the routes Object\nDESCRIPTION: Shows the TypeScript type definition of the routes object. Includes information about the build function's parameters for both simple and parameterized routes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/links.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport const routes = {\n  // RootRoute has a path like \"/\"\n  RootRoute: {\n    build: (options?: {\n      search?: string[][] | Record<string, string> | string | URLSearchParams\n      hash?: string\n    }) => // ...\n  },\n\n  // DetailRoute has a path like \"/task/:id/:something?\"\n  DetailRoute: {\n    build: (\n      options: {\n        params: { id: ParamValue; something?: ParamValue; },\n        search?: string[][] | Record<string, string> | string | URLSearchParams\n        hash?: string\n      }\n    ) => // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Query Implementation\nDESCRIPTION: Original JavaScript implementation of the getTaskInfo query with task information retrieval logic.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/general/typescript.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport HttpError from '@wasp/core/HttpError.js'\n\nfunction getInfoMessage(task) {\n  const isDoneText = task.isDone ? 'is done' : 'is not done'\n  return `Task '${task.description}' is ${isDoneText}.`\n}\n\nexport const getTaskInfo = async ({ id }, context) => {\n  const Task = context.entities.Task\n  const task = await Task.findUnique({ where: { id } })\n  if (!task) {\n    throw new HttpError(404)\n  }\n  return getInfoMessage(task)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic WASP Application Configuration Structure\nDESCRIPTION: Shows the basic structure of a main.wasp file with placeholders for authentication configuration, user entity definition, and route/page setup. This serves as a template for building a WASP application with social authentication capabilities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/_wasp-file-structure-note.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n// Configuring the social authentication\napp myApp {\n  auth: { ... }\n}\n\n// Defining entities\nentity User { ... }\n\n// Defining routes and pages\nroute LoginRoute { ... }\npage LoginPage { ... }\n```\n\n----------------------------------------\n\nTITLE: Submitting Jobs in JavaScript/TypeScript\nDESCRIPTION: Examples of submitting jobs for immediate or delayed execution in JavaScript/TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/jobs.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mySpecialJob } from 'wasp/server/jobs'\n\nconst submittedJob = await mySpecialJob.submit({ job: \"Johnny\" })\n\n// Or, if you'd prefer it to execute in the future, just add a .delay().\n// It takes a number of seconds, Date, or ISO date string.\nawait mySpecialJob\n  .delay(10)\n  .submit({ name: \"Johnny\" })\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Wasp\nDESCRIPTION: Example of removing Wasp from the system, showing the uninstallation process and confirmation prompt.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/general/cli.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp uninstall\n\n🐝 --- Uninstalling Wasp ... ------------------------------------------------------\n\n We will remove the following directories:\n   {home}/.local/share/wasp-lang/\n   {home}/.cache/wasp/\n\n We will also remove the following files:\n   {home}/.local/bin/wasp\n\n Are you sure you want to continue? [y/N]\n y\n\n✅ --- Uninstalled Wasp -----------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Fixing ViewPost Import in Wasp-generated App\nDESCRIPTION: Correcting the import path for the ViewPost component in the main.wasp file to resolve a module resolution error.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-01-smol-ai-vs-wasp-ai.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ViewPost } from \"./ext-src/ViewPost.jsx\"\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Helper Functions in JavaScript\nDESCRIPTION: Example of a simple unit test for a helper function in JavaScript using Vitest.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/testing.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport function areThereAnyTasks(tasks) {\n  return tasks.length === 0;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from \"vitest\";\n\nimport { areThereAnyTasks } from \"./helpers\";\n\ntest(\"areThereAnyTasks\", () => {\n  expect(areThereAnyTasks([])).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image to Heroku - Shell\nDESCRIPTION: Builds the Docker image for the Wasp app and pushes it to Heroku's container registry under the specified application. Requires Docker and the Heroku CLI. The <app-name> parameter designates the Heroku app target; replace it with your actual app name. This command uploads the built 'web' image for your Heroku app but does not trigger release.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/manually.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nheroku container:push --app <app-name> web\n```\n\n----------------------------------------\n\nTITLE: Old Project Structure Tree (Wasp 0.11.x)\nDESCRIPTION: File tree representation of a project created with Wasp 0.11.x showing the original directory structure with separate client/server folders.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── .gitignore\n├── main.wasp\n├── src\n│   ├── client\n│   │   ├── Main.css\n│   │   ├── MainPage.jsx\n│   │   ├── react-app-env.d.ts\n│   │   ├── tsconfig.json\n│   │   └── waspLogo.png\n│   ├── server\n│   │   └── tsconfig.json\n│   ├── shared\n│   │   └── tsconfig.json\n│   └── .waspignore\n└── .wasproot\n```\n\n----------------------------------------\n\nTITLE: Navigating to Build Directory - Shell\nDESCRIPTION: This snippet changes the current working directory to '.wasp/build' in preparation for subsequent deployment commands. No external dependencies are required aside from a standard Unix shell. The command assumes that '.wasp/build' exists in your project tree and is used to operate on build artifacts.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/manually.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncd .wasp/build\n\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Image Caption Component - React JavaScript\nDESCRIPTION: This snippet imports the ImgWithCaption React component from a local path for use within the Markdown/MDX file. The component is expected to render images alongside captions to enhance visual documentation. The filepath indicates it is a site-specific component under the blog components directory. No parameters are specified on import; usage in the MDX unfolds later. React and proper Docusaurus bundling are required.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/wasp-ai/creating-new-app.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ImgWithCaption from '@site/blog/components/ImgWithCaption'\n```\n\n----------------------------------------\n\nTITLE: Customizing Auth UI Colors in JavaScript\nDESCRIPTION: Demonstrates how to customize the colors of the Auth UI by defining an authAppearance object with custom color values. This object is then passed to the LoginForm component to apply the custom styles.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nexport const authAppearance = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\nimport { authAppearance } from './appearance'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass the appearance object to the form\n      appearance={authAppearance}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Setup Function\nDESCRIPTION: This snippet shows how to implement a setup function for the client side of a Wasp app. The function is asynchronous and can be used to perform any custom setup before rendering the page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/client-config.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function mySetupFunction() {\n  // Run some code\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function mySetupFunction(): Promise<void> {\n  // Run some code\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Generated Artifacts and Dependencies - Shell\nDESCRIPTION: This terminal output demonstrates the use of `wasp clean` to remove build artifacts, node_modules, and internal cache directories. No arguments are needed beyond the command, and the operation will affect the current Wasp project. Inputs: none; outputs: file and directory deletion confirmations. Should be used with care as it resets project build state.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/general/cli.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ wasp clean\n\n🐝 --- Deleting the .wasp/ directory... -------------------------------------------\n\n✅ --- Deleted the .wasp/ directory. ----------------------------------------------\n\n🐝 --- Deleting the node_modules/ directory... ------------------------------------\n\n✅ --- Deleted the node_modules/ directory. ---------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Building Client for Production\nDESCRIPTION: Install dependencies and create a production build of the client, setting the API URL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpm install && REACT_APP_API_URL=<url_to_wasp_backend> npm run build\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration with Plugins\nDESCRIPTION: Enhanced Tailwind configuration showing how to add and configure additional plugins.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/css-frameworks.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  // ...\n  plugins: [\n    require('@tailwindcss/forms'),\n    require('@tailwindcss/typography'),\n  ],\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Main Wasp Configuration File for TypeScript\nDESCRIPTION: Default main.wasp configuration file for a TypeScript-based Wasp project, showing the same structure but referencing TypeScript components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/02-project-structure.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"{latestWaspVersion}\" // Pins the version of Wasp to use.\n  },\n  title: \"TodoApp\" // Used as the browser tab title. Note that all strings in Wasp are double quoted!\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  // We specify that the React implementation of the page is exported from\n  // `src/MainPage.tsx`. This statement uses standard JS import syntax.\n  // Use `@src` to reference files inside the `src` folder.\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth UI Colors in JavaScript\nDESCRIPTION: Defines custom color tokens for the Auth UI appearance including brand colors and button text color\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/ui.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const authAppearance = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS\nDESCRIPTION: This configuration file sets up Tailwind CSS, specifying the content files to scan for classes and allowing for theme customization.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: ['./src/**/*.{js,jsx,ts,tsx}'],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp via Shell Installer Script (shell)\nDESCRIPTION: Downloads and executes the official Wasp installer script using curl and pipes it to sh for quick installation on Linux, OSX, or WSL systems. Requires Node.js installed and available in PATH; the script will verify and warn if Node.js is missing. The only parameter is the one-line shell command; no options or arguments are expected from the user. Output is an installed Wasp CLI binary. Users must ensure their system allows remote scripts to be executed and has the necessary permissions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/introduction/quick-start.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Registering Server Environment Validation in Wasp\nDESCRIPTION: Shows how to register server-side environment validation schema in the Wasp configuration file by importing and using the envValidationSchema.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/env-vars.md#2025-04-22_snippet_15\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  ...\n  server: {\n    envValidationSchema: import { envValidationSchema } from \"@src/env\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Auth Page Component Implementation\nDESCRIPTION: React component implementation for the authentication page with LoginForm and Layout components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/google.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"h-full w-full bg-white\">\n      <div className=\"flex min-h-[75vh] min-w-full items-center justify-center\">\n        <div className=\"h-full w-full max-w-sm bg-white p-5\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Individual Deployment Steps\nDESCRIPTION: Sequence of commands that make up the launch process, showing setup, database creation and deployment separately.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/cli.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly setup my-wasp-app mia\nwasp deploy fly create-db mia\nwasp deploy fly deploy\n```\n\n----------------------------------------\n\nTITLE: Dependency Migration Example\nDESCRIPTION: Example of moving dependencies from Wasp config to package.json format.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_5\n\nLANGUAGE: css\nCODE:\n```\napp Foo {\n  dependencies: [ ('redux', '^4.0.5'), ('reacjt-redux', '^7.1.3')];\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"foo\",\n  \"dependencies\": {\n    \"wasp\": \"file:.wasp/out/sdk/wasp\",\n    \"react\": \"^18.2.0\",\n    \"redux\": \"^4.0.5\",\n    \"reactjs-redux\": \"^7.1.3\"\n  },\n  \"devDependencies\": {\n    \"typescript\": \"^5.1.0\",\n    \"vite\": \"^4.3.9\",\n    \"@types/react\": \"^18.0.37\",\n    \"prisma\": \"4.16.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Wasp Declarations Example\nDESCRIPTION: Demonstrates the three main types of declarations in Wasp: app configuration, route definition, and page component import. Shows the basic structure of declarations including type, name and body.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/general/language.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\"\n}\n\nroute RootRoute { path: \"/\", to: DashboardPage }\n\npage DashboardPage {\n  component: import { DashboardPage } from \"@src/Dashboard.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Namespace for CORS in Wasp\nDESCRIPTION: Shows how to define an API namespace in Wasp to apply middleware configuration to a group of API endpoints under a specific path.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/apis.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\napiNamespace fooBar {\n  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from \"@src/apis\",\n  path: \"/foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Query in Wasp\nDESCRIPTION: Declaration of a getFoo query in Wasp, specifying the function import and related entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/queries.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\nquery getFoo {\n    fn: import { getFoo } from \"@server/queries.js\"\n    entities: [Foo]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Django REST framework and CORS headers\nDESCRIPTION: Shell commands to install the necessary Django packages for REST API and CORS support.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-20-django-vs-wasp.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npip install djangorestframework\npip install django-cors-headers\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication UI Components in JavaScript\nDESCRIPTION: This snippet implements the Login page component using Wasp's authentication forms. It includes a Layout component for styling and uses the pre-built LoginForm component from Wasp's auth module.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/github.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from '@wasp/auth/forms/Login'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\n// A layout component to center the content\nexport function Layout({ children }) {\n  return (\n    <div className=\"w-full h-full bg-white\">\n      <div className=\"min-w-full min-h-[75vh] flex items-center justify-center\">\n        <div className=\"w-full h-full max-w-sm p-5 bg-white\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Static Image as URL with React in Vite (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import a static image asset into a React component using Vite in a JavaScript project. When the image is imported, it is processed by Vite and the resulting variable points to the file's URL, which is environment-dependent (development or production). No external dependencies are required except the standard React and Vite setup; the asset file must exist relative to the importing file. The input is the JavaScript/JSX code, and the output is a React element rendering the image using its URL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/static-assets.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport imgUrl from './img.png'\n\nfunction App() {\n  return <img src={imgUrl} alt=\"img\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Migration Page UI using React/TypeScript\nDESCRIPTION: Provides a React component (`MigratePasswordPage`) using TypeScript for the user-facing password migration page. It uses `react-hook-form` with explicit type definitions for form data (`{ username: string; password: string; }`) to manage input fields and validation. On form submission, it calls the `migratePassword` Wasp operation and updates the UI with success or error messages using React's `useState` hook with string or null types. It imports necessary components like `FormItemGroup`, `FormLabel`, `FormInput`, and `FormError` from `wasp/client/auth`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/pages/MigratePassword.tsx\"\nimport {\n  FormItemGroup,\n  FormLabel,\n  FormInput,\n  FormError,\n} from \"wasp/client/auth\";\nimport { useForm } from \"react-hook-form\";\nimport { migratePassword } from \"wasp/client/operations\";\nimport { useState } from \"react\";\n\nexport function MigratePasswordPage() {\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  const form = useForm<{\n    username: string;\n    password: string;\n  }>();\n\n  const onSubmit = form.handleSubmit(async (data) => {\n    try {\n      const result = await migratePassword(data);\n      setSuccessMessage(result.message);\n    } catch (e: unknown) {\n      console.error(e);\n      if (e instanceof Error) {\n        setErrorMessage(e.message);\n      }\n    }\n  });\n\n  return (\n    <div style={{\n      maxWidth: \"400px\",\n      margin: \"auto\",\n    }}>\n      <h1>Migrate your password</h1>\n      <p>\n        If you have an account on the old version of the website, you can\n        migrate your password to the new version.\n      </p>\n      {successMessage && <div>{successMessage}</div>}\n      {errorMessage && <FormError>{errorMessage}</FormError>}\n      <form onSubmit={onSubmit}>\n        <FormItemGroup>\n          <FormLabel>Username</FormLabel>\n          <FormInput\n            {...form.register(\"username\", {\n              required: \"Username is required\",\n            })}\n          />\n          <FormError>{form.formState.errors.username?.message}</FormError>\n        </FormItemGroup>\n        <FormItemGroup>\n          <FormLabel>Password</FormLabel>\n          <FormInput\n            {...form.register(\"password\", {\n              required: \"Password is required\",\n            })}\n            type=\"password\"\n          />\n          <FormError>{form.formState.errors.password?.message}</FormError>\n        </FormItemGroup>\n        <button type=\"submit\">Migrate password</button>\n      </form>\n    </div>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Migrating getEmail Helper Access in React Components\nDESCRIPTION: Shows how to replace the getEmail helper with direct access to user.identities.email.id in React components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getEmail, AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const email = getEmail(user)\n  // ...\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const email = user.identities.email?.id\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing PG Boss Executor Name in JavaScript\nDESCRIPTION: Shows how to import the pg-boss executor name symbol for job executor comparison\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/jobs.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PG_BOSS_EXECUTOR_NAME } from '@wasp/jobs/core/pgBoss/pgBossJob.js'\n```\n\n----------------------------------------\n\nTITLE: Defining a Route in Wasp\nDESCRIPTION: Demonstrates how to define a route in a Wasp project file. This snippet shows the declaration of a TaskRoute and its associated TaskPage.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/links.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nroute TaskRoute { path: \"/task/:id\", to: TaskPage }\npage TaskPage { ... }\n```\n\n----------------------------------------\n\nTITLE: Database Migration Command\nDESCRIPTION: Command to run database migrations in development environment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/examples/todoApp/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncabal run wasp-cli db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Creating Password Migration Page in JavaScript React\nDESCRIPTION: JavaScript version of the React component for password migration. It provides a form for users to enter their credentials and handles the migration process through the migratePassword action.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  FormItemGroup,\n  FormLabel,\n  FormInput,\n  FormError,\n} from \"wasp/client/auth\";\nimport { useForm } from \"react-hook-form\";\nimport { migratePassword } from \"wasp/client/operations\";\nimport { useState } from \"react\";\n\nexport function MigratePasswordPage() {\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const form = useForm();\n\n  const onSubmit = form.handleSubmit(async (data) => {\n    try {\n      const result = await migratePassword(data);\n      setSuccessMessage(result.message);\n    } catch (e) {\n      console.error(e);\n      if (e instanceof Error) {\n        setErrorMessage(e.message);\n      }\n    }\n  });\n\n  return (\n    <div style={{\n      maxWidth: \"400px\",\n      margin: \"auto\",\n    }}>\n      <h1>Migrate your password</h1>\n      <p>\n        If you have an account on the old version of the website, you can\n        migrate your password to the new version.\n      </p>\n      {successMessage && <div>{successMessage}</div>}\n      {errorMessage && <FormError>{errorMessage}</FormError>}\n      <form onSubmit={onSubmit}>\n        <FormItemGroup>\n          <FormLabel>Username</FormLabel>\n          <FormInput\n            {...form.register(\"username\", {\n              required: \"Username is required\",\n            })}\n          />\n          <FormError>{form.formState.errors.username?.message}</FormError>\n        </FormItemGroup>\n        <FormItemGroup>\n          <FormLabel>Password</FormLabel>\n          <FormInput\n            {...form.register(\"password\", {\n              required: \"Password is required\",\n            })}\n            type=\"password\"\n          />\n          <FormError>{form.formState.errors.password?.message}</FormError>\n        </FormItemGroup>\n        <button type=\"submit\">Migrate password</button>\n      </form>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Creating a New Wasp Project via Wasp CLI - Shell\nDESCRIPTION: This shell snippet instructs the user to initialize a new Wasp project named 'TodoApp' using the 'wasp new' command. Requires the latest Wasp CLI to be installed locally. The command creates a new directory with the boilerplate structure for a full-stack Wasp application. The primary parameter is the desired project name. The output is a new folder 'TodoApp' prefilled with template code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/01-create.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n```sh\\n$ wasp new TodoApp\\n```\n```\n\n----------------------------------------\n\nTITLE: Running Database Seeds with CLI Command\nDESCRIPTION: Command for running a specific database seed function by name using the Wasp CLI. This example shows how to run the 'devSeedSimple' seed function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/backends.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nwasp db seed devSeedSimple\n```\n\n----------------------------------------\n\nTITLE: Defining Routes and Pages in Wasp\nDESCRIPTION: This snippet defines a route and a page component for the home page of the application. It specifies the path, the React component to render, and requires authentication to access the page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/introduction/introduction.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\nroute HomeRoute { path: \"/\", to: HomePage }\npage HomePage {\n  component: import { HomePage } from \"@src/pages/HomePage\",\n  authRequired: true // Will send user to /login if not authenticated.\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration Setup\nDESCRIPTION: Basic Tailwind configuration file setup with content paths and default theme settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/css-frameworks.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [ \"./src/**/*.{js,jsx,ts,tsx}\" ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Wasp Development Server\nDESCRIPTION: Commands to enter the project directory and start the Wasp development server. This will launch the client, server, and database components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/01-create.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cd TodoApp\n$ wasp start\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start the local development server which opens a browser window and supports live reloading.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Dummy Provider Configuration\nDESCRIPTION: Configuration for the Dummy email provider used in development environments. This provider logs emails to console instead of sending them.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/email/email.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: Dummy,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Migration Backend Logic in JavaScript\nDESCRIPTION: This JavaScript code defines the backend logic for the `migratePassword` action. It takes the username and password from the request, finds the corresponding `AuthIdentity`, verifies the provided password against the stored old hash using `secure-password`, and if valid, updates the `providerData` with the password hashed using the new Wasp algorithm via `updateAuthIdentityProviderData`. It uses Wasp server utilities and throws `HttpError` on failure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n```js title=\"src/auth.js\"\nimport SecurePassword from \"secure-password\";\nimport { HttpError } from \"wasp/server\";\nimport {\n  createProviderId,\n  deserializeAndSanitizeProviderData,\n  findAuthIdentity,\n  updateAuthIdentityProviderData,\n} from \"wasp/server/auth\";\n\nexport const migratePassword = async ({ password, username }, _context) => {\n  const providerId = createProviderId(\"username\", username);\n  const authIdentity = await findAuthIdentity(providerId);\n\n  if (!authIdentity) {\n    throw new HttpError(400, \"Something went wrong\");\n  }\n\n  const providerData = deserializeAndSanitizeProviderData(\n    authIdentity.providerData\n  );\n\n  try {\n    const SP = new SecurePassword();\n\n    // This will verify the password using the old algorithm\n    const result = await SP.verify(\n      Buffer.from(password),\n      Buffer.from(providerData.hashedPassword, \"base64\")\n    );\n\n    if (result !== SecurePassword.VALID) {\n      throw new HttpError(400, \"Something went wrong\");\n    }\n\n    // This will hash the password using the new algorithm and update the\n    // provider data in the database.\n    await updateAuthIdentityProviderData(providerId, providerData, {\n      hashedPassword: password,\n    });\n  } catch (e) {\n    throw new HttpError(400, \"Something went wrong\");\n  }\n\n  return {\n    message: \"Password migrated successfully.\",\n  };\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Reset Request in JavaScript\nDESCRIPTION: This code demonstrates how to use the requestPasswordReset action to initiate a password reset process on the client-side in JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { requestPasswordReset } from 'wasp/client/auth'\n...\nawait requestPasswordReset({ email });\n```\n\n----------------------------------------\n\nTITLE: Path-Based Middleware Configuration in Wasp - JavaScript\nDESCRIPTION: Example of configuring middleware for a specific path prefix in a Wasp application using JavaScript. Shows how to set up middleware for all routes under a common path.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/middleware-config.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\napiNamespace fooBar {\n  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from \"@src/apis\",\n  path: \"/foo/bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onAfterLogin Hook for Post-Login Actions (JavaScript) - js\nDESCRIPTION: A JavaScript handler for the 'onAfterLogin' hook in Wasp, used to perform actions post-login such as logging user info, accessing OAuth tokens, and retrieving and cleaning up data stored during earlier hooks. Requires a shared data store ('someKindOfStore') for coordinating between OAuth flow steps, with provider IDs and tokens available in the hook input.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nexport const onAfterLogin = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  console.log('user object', user)\n\n  // If this is an OAuth signup, you have access to the OAuth tokens and the uniqueRequestId\n  if (oauth) {\n    console.log('accessToken', oauth.tokens.accessToken)\n    console.log('uniqueRequestId', oauth.uniqueRequestId)\n\n    const id = oauth.uniqueRequestId\n    const data = someKindOfStore.get(id)\n    if (data) {\n      console.log('saved data for the ID', data)\n    }\n    someKindOfStore.delete(id)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth UI Components with JavaScript/React\nDESCRIPTION: React components for authentication pages including login, signup, email verification, and password reset forms using Wasp's auth components and Tailwind CSS for styling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/email.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LoginForm } from \"@wasp/auth/forms/Login\";\nimport { SignupForm } from \"@wasp/auth/forms/Signup\";\nimport { VerifyEmailForm } from \"@wasp/auth/forms/VerifyEmail\";\nimport { ForgotPasswordForm } from \"@wasp/auth/forms/ForgotPassword\";\nimport { ResetPasswordForm } from \"@wasp/auth/forms/ResetPassword\";\nimport { Link } from \"react-router-dom\";\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Don't have an account yet? <Link to=\"/signup\">go to signup</Link>.\n      </span>\n      <br />\n      <span className=\"text-sm font-medium text-gray-900\">\n        Forgot your password? <Link to=\"/request-password-reset\">reset it</Link>\n        .\n      </span>\n    </Layout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Component in JSX\nDESCRIPTION: Imports the Required component from the site's components directory, which is used to mark mandatory fields in the documentation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/_user-fields.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Required } from '@site/src/components/Tag';\n```\n\n----------------------------------------\n\nTITLE: Running Interactive Wasp Project Initialization - Shell\nDESCRIPTION: This shell snippet demonstrates how to start a new Wasp project using the interactive mode of the Wasp CLI. It prompts the user for a project name and starter template selection, then creates the project directory and provides next steps for project setup and running. Dependencies include Wasp CLI installed in the environment. The expected input is through prompted selections; the output is a new folder containing the project scaffold.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/starter-templates.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ wasp new\nEnter the project name (e.g. my-project) \\u25b8 MyFirstProject\nChoose a starter template\n[1] basic (default)\n    Simple starter template with a single page.\n[2] todo-ts\n    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.\n[3] saas\n    Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.\n[4] embeddings\n    Comes with code for generating vector embeddings and performing vector similarity search.\n[5] ai-generated\n    \\ud83e\\udeb6 Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)\n \\u25b8 1\n\n\\ud83d\\udc1d --- Creating your project from the \\\"basic\\\" template... -------------------------\n\nCreated new Wasp app in ./MyFirstProject directory!\n\nTo run your new app, do:\n    cd MyFirstProject\n    wasp db start\n```\n\n----------------------------------------\n\nTITLE: Running Import Rewriting Script with JSCodeshift\nDESCRIPTION: Command for automatically rewriting imports in JS/TS files to match the new Wasp 0.12 import structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx jscodeshift@0.15.1 -t https://raw.githubusercontent.com/wasp-lang/wasp-codemod/main/src/transforms/imports-from-0-11-to-0-12.ts --extensions=js,ts,jsx,tsx src/\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for APIs (Wasp)\nDESCRIPTION: Demonstrates how to configure CORS for APIs using an apiNamespace declaration in Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/apis.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\napiNamespace fooBar {\n  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from \"@src/apis\",\n  path: \"/foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Wasp Version in main.wasp\nDESCRIPTION: Update the version field in the Wasp file to specify the new version 0.15.0.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-14-to-0-15.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Domain as Client URL Environment Variable\nDESCRIPTION: Command to set the custom domain as the WASP_WEB_CLIENT_URL environment variable for your server app, which is needed to update CORS configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/cli.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd --context server secrets set WASP_WEB_CLIENT_URL=https://mycoolapp.com\n```\n\n----------------------------------------\n\nTITLE: Defining User Schema with Prisma\nDESCRIPTION: Prisma schema definition for the User model with required fields for Keycloak integration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/keycloak.md#2025-04-22_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          Int    @id @default(autoincrement())\n  username    String @unique\n  displayName String\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Dev Server Port in Vite\nDESCRIPTION: Configuration for changing the Vite dev server port and corresponding environment variable setup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/custom-vite-config.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  server: {\n    port: 4000,\n  },\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  server: {\n    port: 4000,\n  },\n})\n```\n\nLANGUAGE: env\nCODE:\n```\nWASP_WEB_CLIENT_URL=http://localhost:4000\n```\n\n----------------------------------------\n\nTITLE: Updating React Router Usage from v5 to v6 (useParams)\nDESCRIPTION: Use the useParams hook instead of accessing route params through props.match.params.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-14-to-0-15.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useParams } from 'react-router-dom'\n\nexport function SomePage() {\n  const { id } = useParams()\n  return (\n    <div>\n      <h1>Item {id}</h1>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Fly.io Configuration File\nDESCRIPTION: This command copies the fly.toml configuration file to the Wasp project directory for safekeeping.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/manually.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp fly.toml ../../\n```\n\n----------------------------------------\n\nTITLE: Running the Waspello Application\nDESCRIPTION: Command to start the Waspello application during development using Wasp CLI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/examples/waspello/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasp start\n```\n\n----------------------------------------\n\nTITLE: Type signature with implicit forall order in Haskell\nDESCRIPTION: Shows a type signature where the order of type variables for TypeApplications is implicitly defined by their left-to-right appearance in the type.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-09-01-haskell-forall-tutorial.md#2025-04-22_snippet_8\n\nLANGUAGE: Haskell\nCODE:\n```\nfoo :: Monad m => a b -> m (a c)\n```\n\n----------------------------------------\n\nTITLE: Deploying to Netlify\nDESCRIPTION: Command to initiate a Netlify deployment, which walks through an interactive setup process for deploying the Wasp web client.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/manually.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnetlify deploy\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind Plugins to Configuration\nDESCRIPTION: Demonstrates how to add Tailwind CSS plugins to the configuration file in a Wasp project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/css-frameworks.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  // ...\n  plugins: [\n    require('@tailwindcss/forms'),\n    require('@tailwindcss/typography'),\n  ],\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Wasp Routes and Pages\nDESCRIPTION: Route and page configuration in Wasp for the home page with authentication requirement.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/introduction/introduction.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\nroute HomeRoute { path: \"/\", to: HomePage }\npage HomePage {\n  component: import { HomePage } from \"@src/pages/HomePage\",\n  authRequired: true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Login Route in Wasp\nDESCRIPTION: This code shows how to create a route for the login page in the main.wasp file. It defines the route path and links it to a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { LoginPage } from \"@src/LoginPage.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server Environment Variable in Bash\nDESCRIPTION: Sets the required WASP_SERVER_URL environment variable used by the new OAuth provider implementation in Wasp 0.13.X. This variable helps generate the correct callback URLs for OAuth redirections. Depending on your environment (development or production), substitute the URL accordingly. The expected input is the valid server URL; there is no output other than setting the variable in the environment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nWASP_SERVER_URL=https://your-wasp-server-url.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Path-Specific Middleware via API Namespace in Wasp\nDESCRIPTION: This Wasp configuration defines an `apiNamespace` named `fooBar` associated with the path `/foo/bar`. It uses the `middlewareConfigFn` property to link a custom middleware function (`fooBarNamespaceMiddlewareFn` from `@src/apis`). This function will modify the middleware stack for *all* API routes defined under the `/foo/bar` path.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/middleware-config.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\napiNamespace fooBar {\n  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from \"@src/apis\",\n  path: \"/foo/bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js Project\nDESCRIPTION: Commands to create a new Next.js project and install dependencies.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-13-how-to-add-auth-with-lucia-to-your-react-nextjs-app.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest my-nextjs-app\ncd my-nextjs-app\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Mailgun Environment Variables Configuration\nDESCRIPTION: Defines the required environment variables for the Mailgun email provider in the .env.server file, including API key and domain.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/email/email.md#2025-04-22_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\nMAILGUN_API_KEY=\nMAILGUN_DOMAIN=\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Authentication in Wasp\nDESCRIPTION: This code snippet demonstrates how to configure Google authentication in a Wasp application. It shows the declaration of auth methods, user entities, and external auth entities in the Wasp configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-03-08-building-a-full-stack-app-supabase-vs-wasp.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp phraseTutor {\n  ...\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialUser,\n    methods: {\n      google: {\n        getUserFieldsFn: import { getUserFields } from \"@server/auth/google.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/\"\n  },\n  ...\n}\n\nentity User {=psl\n  id Int @id @default(autoincrement())\n  username String @unique\n  password String\n  profilePicture String\n  externalAuthAssociations SocialUser[]\n  createdAt DateTime @default(now())\npsl=}\n\nentity SocialUser {=psl\n  id          Int       @id @default(autoincrement())\n  provider    String\n  providerId  String\n  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId      Int\n  createdAt   DateTime  @default(now())\n  @@unique([provider, providerId, userId])\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeOAuthRedirect Hook\nDESCRIPTION: Hook that runs before OAuth redirect. Receives url, oauth, prisma, and req as input parameters. Must return an object containing the redirect URL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/auth-hooks.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport const onBeforeOAuthRedirect = async ({ url, oauth, prisma, req }) => {\n  // Hook code goes here\n\n  return { url }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OnBeforeOAuthRedirectHook } from 'wasp/server/auth'\n\nexport const onBeforeOAuthRedirect: OnBeforeOAuthRedirectHook = async ({\n  url,\n  oauth,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n\n  return { url }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Action in Wasp\nDESCRIPTION: Example showing how to declare a createFoo action in Wasp with entity access.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/actions.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\nquery createFoo {\n    fn: import { createFoo } from \"@server/actions.js\"\n    entities: [Foo]\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Keyboard Shortcuts for Restarting TypeScript Server\nDESCRIPTION: Keyboard shortcuts for opening the VS Code command palette to restart the TypeScript server when encountering LSP synchronization issues.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/_TypescriptServerNote.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCtrl + Shift + P    # Windows/Linux\nCmd + Shift + P     # Mac\n```\n\n----------------------------------------\n\nTITLE: Copying Fly.io Configuration to Project Root\nDESCRIPTION: Copies the fly.toml configuration file to the project root directory for persistence between builds, as the .wasp/build directory gets recreated during builds.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/manually.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncp fly.toml ../../\n```\n\n----------------------------------------\n\nTITLE: Old Authentication Configuration (Wasp 0.11.X)\nDESCRIPTION: Example of authentication configuration in Wasp 0.11.X, showing User entity with required auth fields and external auth setup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\nentity User {=psl\n  id                        Int           @id @default(autoincrement())\n  username                  String        @unique\n  password                  String\n  externalAuthAssociations  SocialLogin[]\npsl=}\n\nentity SocialLogin {=psl\n  id          Int       @id @default(autoincrement())\n  provider    String\n  providerId  String\n  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId      Int\n  createdAt   DateTime  @default(now())\n  @@unique([provider, providerId, userId])\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Migrating Prisma Preview Features from Wasp to schema.prisma\nDESCRIPTION: Shows how to migrate Prisma preview features and database extensions from the Wasp file to the schema.prisma file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    prisma: {\n      clientPreviewFeatures: [\"postgresqlExtensions\"]\n      dbExtensions: [\n        { name: \"hstore\", schema: \"myHstoreSchema\" },\n        { name: \"pg_trgm\" },\n        { name: \"postgis\", version: \"2.1\" },\n      ]\n    }\n  }\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n  extensions = [hstore(schema: \"myHstoreSchema\"), pg_trgm, postgis(version: \"2.1\")]\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  previewFeatures = [\"postgresqlExtensions\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp on Linux/OSX/WSL\nDESCRIPTION: Command to install Wasp on Linux, macOS, or Windows Subsystem for Linux using the official installer script.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/introduction/quick-start.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Migrating getUsername Helper Access in Server Operations\nDESCRIPTION: Demonstrates replacing getUsername helper with direct identity access in server-side operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nimport { getUsername } from 'wasp/auth'\n\nexport const createTask: CreateTask<...>  = async (args, context) => {\n    const username = getUsername(context.user)\n    // ...\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\nexport const createTask: CreateTask<...>  = async (args, context) => {\n    const username = context.user.identities.username?.id\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Email Authentication Configuration in Wasp\nDESCRIPTION: Main configuration for email authentication including sender details, verification routes, and password reset settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/email.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  title: \"My app\",\n  // ...\n\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        fromField: {\n          name: \"My App\",\n          email: \"hello@itsme.com\"\n        },\n        emailVerification: {\n          clientRoute: EmailVerificationRoute,\n          getEmailContentFn: import { getVerificationEmailContent } from \"@server/auth/email.js\",\n        },\n        passwordReset: {\n          clientRoute: PasswordResetRoute,\n          getEmailContentFn: import { getPasswordResetEmailContent } from \"@server/auth/email.js\",\n        },\n        allowUnverifiedLogin: false,\n      },\n    },\n    onAuthFailedRedirectTo: \"/someRoute\"\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth Environment Variables\nDESCRIPTION: Environment variable configuration for GitHub OAuth credentials required for authentication setup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-13-how-to-add-auth-with-lucia-to-your-react-nextjs-app.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nGITHUB_CLIENT_ID=your-github-client-id\nGITHUB_CLIENT_SECRET=your-github-client-secret\n```\n\n----------------------------------------\n\nTITLE: Displaying Wasp CLI Version\nDESCRIPTION: Shows how to check the current version of the Wasp CLI using the 'wasp version' command.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/general/cli.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp version\n\n0.11.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth in Wasp v0.11.X using Wasp Language\nDESCRIPTION: Example `main.wasp` configuration for authentication in Wasp 0.11.X. It requires defining a `User` entity (specified by `auth.userEntity`) with fields like `username` and `password`, and potentially a separate `SocialLogin` entity (specified by `auth.externalAuthEntity`) for social logins. These entities need manual setup for auth fields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\nentity User {=psl\n  id                        Int           @id @default(autoincrement())\n  // highlight-start\n  username                  String        @unique\n  password                  String\n  externalAuthAssociations  SocialLogin[]\n  // highlight-end\npsl=}\n\n\n// highlight-start\nentity SocialLogin {=psl\n  id          Int       @id @default(autoincrement())\n  provider    String\n  providerId  String\n  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId      Int\n  createdAt   DateTime  @default(now())\n  @@unique([provider, providerId, userId])\npsl=}\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Sender in Wasp\nDESCRIPTION: Sets up a dummy email provider in Wasp for handling email verification and password reset functionality. The dummy provider logs emails to console instead of sending them.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/email.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  // ...\n  // 7. Set up the email sender\n  emailSender: {\n    provider: Dummy,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Schema\nDESCRIPTION: Prisma schema definition for the User entity with basic fields\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-13-how-to-add-auth-with-lucia-to-your-react-nextjs-app.md#2025-04-22_snippet_11\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  email   String   @unique\n  name    String?\n  // Add your own fields below\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Client Environment Variables with REACT_APP_ Prefix\nDESCRIPTION: Demonstrates the required prefix format for client-side environment variables in Wasp applications. Variables must be prefixed with REACT_APP_ to ensure secure handling and prevent accidental exposure of sensitive data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/_clientEnvVarsNote.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nREACT_APP_SOME_VAR_NAME=...\n```\n\n----------------------------------------\n\nTITLE: Installing Socket.IO client\nDESCRIPTION: Command to install the Socket.IO client package for the React application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-09-build-real-time-voting-app-websockets-react-typescript.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install socket.io-client\n```\n\n----------------------------------------\n\nTITLE: Command Line Usage Example for Creating New Wasp App - Markdown (Shell Command)\nDESCRIPTION: This snippet presents the command 'wasp new' inline within the documentation to instruct users how to initiate the creation of a new Wasp app using the CLI. When executed in the terminal, this command launches an interactive process that can leverage Wasp AI for project generation. No dependencies are stated, but Wasp CLI installation is required. This command expects user input for app title and description and (optionally) OpenAI API keys via environment variables if AI generation is chosen.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/wasp-ai/creating-new-app.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`wasp new`\n```\n\n----------------------------------------\n\nTITLE: Running Specific Seed Function via CLI\nDESCRIPTION: Shows how to execute a specific seed function using the Wasp CLI command.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/databases.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nwasp db seed devSeedSimple\n```\n\n----------------------------------------\n\nTITLE: Wasp App Title Customization\nDESCRIPTION: Example showing how to set a custom title for a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/customizing-app.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"BookFace\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Signup Fields in TypeScript (Before)\nDESCRIPTION: Shows the previous implementation of defining user signup fields, accessing the displayName from the profile object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n    displayName: (data: any) => data.profile.displayName,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Signup Page with Wasp Auth UI (TypeScript)\nDESCRIPTION: This TypeScript version of the signup page component utilizes Wasp's Auth UI components to render a centered signup form.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/crud.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignupForm } from 'wasp/client/auth'\n\nexport function SignupPage() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        placeContent: 'center',\n      }}\n    >\n      <SignupForm />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Presenting Refactored Feature-Based Directory Structure - Markdown\nDESCRIPTION: This snippet presents a recommended, feature-based organizational scheme for the Wasp project's source folder, replacing the previous client/server split. It details a hierarchical folder structure grouped by features (e.g., task, user) and associated files. The snippet is for information and planning in documentation, not code execution.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n```\nsrc\n│\n├── task\n│   ├── actions.ts    -- former taskActions.ts\n│   ├── queries.ts    -- former taskQueries.ts\n│   ├── Task.css\n│   ├── TaskLisk.tsx\n│   └── Task.tsx\n├── user\n│   ├── actions.ts    -- former userActions.ts\n│   ├── Dashboard.tsx\n│   ├── Login.tsx\n│   ├── queries.ts    -- former userQueries.ts\n│   ├── Register.tsx\n│   └── User.tsx\n├── MainPage.tsx\n└── utils.ts\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js with NVM\nDESCRIPTION: Commands for installing and using a specific version of Node.js with Node Version Manager (NVM), which is recommended for managing Node.js installations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/introduction/quick-start.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnvm install 20\n```\n\n----------------------------------------\n\nTITLE: Setting Web Client URL Environment Variable for CORS Configuration\nDESCRIPTION: Command to set the WASP_WEB_CLIENT_URL environment variable for the server application, which is necessary for CORS configuration when using a custom domain.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/cli.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd --context server secrets set WASP_WEB_CLIENT_URL=https://mycoolapp.com\n```\n\n----------------------------------------\n\nTITLE: Creating a Login Page Component in TypeScript\nDESCRIPTION: Implements a React component for the login page in TypeScript using Wasp's LoginForm component with a link to the signup page for new users.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/07-auth.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\nimport { LoginForm } from 'wasp/client/auth'\n\nexport const LoginPage = () => {\n  return (\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\n      <LoginForm />\n      <br />\n      <span>\n        I don't have an account yet (<Link to=\"/signup\">go to signup</Link>).\n      </span>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Wasp Server Action\nDESCRIPTION: Configuration for declaring a server action in Wasp's main configuration file that handles responses.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-01-30-open-saas-free-open-source-starter-react-nodejs.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// main.wasp\n\naction getResponse {\n  fn: import { getResponse } from \"@server/actions.js\",\n  entities: [Response]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Wasp\nDESCRIPTION: Shows how to set up full-stack authentication in Wasp with username/password and Google auth methods, including User entity definition\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-04-25-first-framework-that-lets-you-visualize-react-node-app-code.md#2025-04-22_snippet_1\n\nLANGUAGE: c\nCODE:\n```\napp todoVisualize {\n  title: \"todo-visualize\",\n\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {}, \n      google: {},\n    },\n  }\n}\n\nentity User {=psl\n  id          Int     @id @default(autoincrement())\n  tasks       Task[]\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Wasp Application Structure\nDESCRIPTION: This code snippet provides a skeleton structure for a main.wasp configuration file. It includes placeholders for configuring social authentication, defining a User entity, and setting up routes and pages including a login page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/_wasp-file-structure-note.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n// Configuring the social authentication\napp myApp {\n  auth: { ... }\n}\n\n// Defining entities\nentity User { ... }\n\n// Defining routes and pages\nroute LoginRoute { ... }\npage LoginPage { ... }\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Image URL in React Component (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to import an image file as a URL and use it in a React component. The imported URL will be processed differently in development and production environments.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/static-assets.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport imgUrl from './img.png'\n\nfunction App() {\n  return <img src={imgUrl} alt=\"img\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema Definition - Post-Migration Example\nDESCRIPTION: New way of defining entities using Prisma schema file in Wasp 0.14.X, including database configuration and model definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id       Int @id @default(autoincrement())\n  tasks    Task[]\n}\n\nmodel Task {\n  id          Int @id @default(autoincrement())\n  description String\n  isDone      Boolean\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables on Heroku\nDESCRIPTION: Commands to set necessary environment variables for the Wasp application on Heroku.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/manually.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nheroku config:set --app <app-name> JWT_SECRET=<random_string_at_least_32_characters_long>\nheroku config:set --app <app-name> WASP_WEB_CLIENT_URL=<url_of_where_frontend_will_be_deployed>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Wasp Application Structure (TypeScript)\nDESCRIPTION: A default main.wasp file for TypeScript projects that defines the application, routes, and pages. It's identical to the JavaScript version except for referencing MainPage.tsx instead of MainPage.jsx in the comments.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/02-project-structure.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"^0.12.0\" // Pins the version of Wasp to use.\n  },\n  title: \"TodoApp\" // Used as the browser tab title. Note that all strings in Wasp are double quoted!\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  // We specify that the React implementation of the page is exported from\n  // `src/MainPage.tsx`. This statement uses standard JS import syntax.\n  // Use `@src` to reference files inside the `src` folder.\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind Classes in React Components\nDESCRIPTION: Demonstrates how to apply Tailwind CSS classes to a React component in a Wasp project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/css-frameworks.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// ...\n\n<h1 className=\"text-3xl font-bold underline\">\n  Hello world!\n</h1>\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Selecting Node.js Version with NVM\nDESCRIPTION: This command sets the Node.js version to 18 for the current shell session using NVM. It's useful for ensuring the correct Node.js version is used with Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/introduction/quick-start.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnvm use 18\n```\n\n----------------------------------------\n\nTITLE: Importing Required Component in Wasp\nDESCRIPTION: Import statement for the Required component tag used in the documentation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/_user-fields.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Required } from '@site/src/components/Tag';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Database Seed Implementation\nDESCRIPTION: Implementation of a database seed function in TypeScript with proper type definitions and interfaces.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/backends.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTask } from './actions.js'\nimport { type DbSeedFn } from 'wasp/server'\nimport { sanitizeAndSerializeProviderData } from 'wasp/server/auth'\nimport { type AuthUser } from 'wasp/auth'\nimport { PrismaClient } from '@prisma/client'\n\nexport const devSeedSimple: DbSeedFn = async (prisma) => {\n  const user = await createUser(prisma, {\n    username: 'RiuTheDog',\n    password: 'bark1234',\n  })\n\n  await createTask(\n    { description: 'Chase the cat', isDone: false },\n    { user, entities: { Task: prisma.task } }\n  )\n};\n\nasync function createUser(\n  prisma: PrismaClient,\n  data: { username: string, password: string }\n): Promise<AuthUser> {\n  const newUser = await prisma.user.create({\n    data: {\n      auth: {\n        create: {\n          identities: {\n            create: {\n              providerName: 'username',\n              providerUserId: data.username,\n              providerData: sanitizeAndSerializeProviderData<'username'>({\n                hashedPassword: data.password\n              }),\n            },\n          },\n        },\n      },\n    },\n  })\n\n  return newUser\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Prisma Database Studio\nDESCRIPTION: Command to open the Prisma database studio for viewing and managing data\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/07-auth.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nwasp db studio\n```\n\n----------------------------------------\n\nTITLE: Implementing Queries in TypeScript\nDESCRIPTION: TypeScript implementation with type safety, showing task interface definition and typed query implementations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/queries.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetAllTasks, type GetFilteredTasks } from 'wasp/server/operations'\n\ntype Task = {\n  id: number\n  description: string\n  isDone: boolean\n}\n\nconst tasks: Task[] = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\nexport const getAllTasks: GetAllTasks<void, Task[]> = () => {\n  return tasks\n}\n\nexport const getFilteredTasks: GetFilteredTasks<Pick<Task, 'isDone'>, Task[]> = (args) => {\n  const { isDone } = args\n  return tasks.filter((task) => task.isDone === isDone)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Wasp Project\nDESCRIPTION: Command to initialize a new Wasp application project\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-11-21-guide-windows-development-wasp-wsl.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nwasp new\n```\n\n----------------------------------------\n\nTITLE: Starting the Wasp Development Server with Auto-Reload\nDESCRIPTION: This command initiates the Wasp development server. It monitors the project's working directory for file changes, automatically regenerates the relevant code and types, and restarts the application. It's recommended to keep this command running in the background during development for a streamlined workflow.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/_WaspStartNote.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasp start\n```\n\n----------------------------------------\n\nTITLE: Defining the Internal `AuthIdentity` Entity in Wasp's Prisma Schema\nDESCRIPTION: Details the Prisma schema for Wasp's internal `AuthIdentity` entity. It stores credentials for different authentication providers (e.g., 'email', 'google'), linking them via `authId` to the `Auth` entity. Includes `providerName`, `providerUserId`, `providerData` (JSON string containing provider-specific data like hashed passwords), and a relation to the `Auth` entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/entities.md#2025-04-22_snippet_15\n\nLANGUAGE: prisma\nCODE:\n```\n```prisma\nmodel AuthIdentity {\n  providerName   String\n  providerUserId String\n  providerData   String @default(\"{}\")\n  authId         String\n  auth           Auth   @relation(fields: [authId], references: [id], onDelete: Cascade)\n\n  @@id([providerName, providerUserId])\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Heroku App\nDESCRIPTION: Create a new Heroku app for deploying the Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nheroku create <app-name>\n```\n\n----------------------------------------\n\nTITLE: Dummy Provider Configuration\nDESCRIPTION: Configuration for the Dummy email provider used during development, which logs emails to console instead of sending them.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/email/email.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: Dummy,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Content to SignupForm with Render Function in JavaScript\nDESCRIPTION: Demonstrates how to customize the SignupForm component by using a render function that watches for changes in form fields and dynamically renders content based on user input.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/overview.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SignupForm, FormItemGroup } from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={(form, state) => {\n        const username = form.watch('username')\n        return (\n          username && (\n            <FormItemGroup>\n              Hello there <strong>{username}</strong> 👋\n            </FormItemGroup>\n          )\n        )\n      }}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Removing DB System Configuration from Wasp File\nDESCRIPTION: Demonstrates removing the 'app.db.system' field from the Wasp file as it's now configured in schema.prisma.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    system: PostgreSQL,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Models in Wasp using Prisma Schema Language\nDESCRIPTION: This snippet demonstrates how to define data models for Phrase, Language, and Translation entities using Prisma Schema Language (PSL) within a Wasp configuration file. It sets up the relationships between entities and defines the database schema.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-03-08-building-a-full-stack-app-supabase-vs-wasp.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\nentity Phrase {=psl\n  id Int @id @default(autoincrement())\n  group String\n  phrase String\n  translations Translation[]\npsl=}\n\nentity Language {=psl\n  id Int @id @default(autoincrement())\n  name String @unique\n  emoji String\n  translations Translation[]\npsl=}\n\nentity Translation {=psl\n  id Int @id @default(autoincrement())\n  phraseId Int\n  languageId Int\n  translation String\n  phrase Phrase @relation(fields: [phraseId], references: [id], onDelete: Cascade)\n  language Language @relation(fields: [languageId], references: [id], onDelete: Cascade)\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Entity Definition in Wasp File\nDESCRIPTION: Example of how entities were defined in the .wasp file before migration, using the psl tags to indicate Prisma schema language.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\nentity Task {=psl\n  // Stays the same\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Deploying Wasp Application to Fly.io with Organization Specification\nDESCRIPTION: Command for deploying a Wasp application to Fly.io with a specific organization specified. This example launches 'my-wasp-app' in the Miami region under the 'hive' organization.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/cli.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly launch my-wasp-app mia --org hive\n```\n\n----------------------------------------\n\nTITLE: User Entity Schema Definition\nDESCRIPTION: Prisma schema defining the User model with required fields for Discord authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/discord.md#2025-04-22_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          Int    @id @default(autoincrement())\n  username    String @unique\n  displayName String\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Declaring CRUD Operations in Wasp\nDESCRIPTION: This snippet demonstrates how to declare CRUD operations for a Task entity in a Wasp file. It includes default implementations for get, getAll, create, update, and delete operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/crud.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\ncrud Tasks { // crud name here is \"Tasks\"\n  entity: Task,\n  operations: {\n    get: {},\n    getAll: {},\n    create: {},\n    update: {},\n    delete: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Route Parameters Access\nDESCRIPTION: Shows how to update route parameter access from props.match.params to the useParams hook in React Router 6.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-14-to-0-15.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RouteComponentProps } from 'react-router-dom'\n\nexport function SomePage(props: RouteComponentProps) {\n  const { id } = props.match.params\n  return (\n    <div>\n      <h1>Item {id}</h1>\n    </div>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useParams } from 'react-router-dom'\n\nexport function SomePage() {\n  const { id } = useParams()\n  return (\n    <div>\n      <h1>Item {id}</h1>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration After Migration\nDESCRIPTION: Example of a tailwind.config.cjs file after migration to Wasp 0.12.X, showing the content paths wrapped with the resolveProjectPath function from wasp/dev.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n// highlight-next-line\nconst { resolveProjectPath } = require('wasp/dev')\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    // highlight-next-line\n    resolveProjectPath('./src/**/*.{js,jsx,ts,tsx}'),\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub API Response Structure\nDESCRIPTION: Example JSON response structure from GitHub's user and email endpoints.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/github.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"login\": \"octocat\",\n  \"id\": 1,\n  \"name\": \"monalisa octocat\",\n  \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n  \"gravatar_id\": \"\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"email\": \"octocat@github.com\",\n    \"verified\": true,\n    \"primary\": true,\n    \"visibility\": \"public\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Analyzing Poor Naming Practices in JavaScript\nDESCRIPTION: This snippet demonstrates a function with vague and uninformative naming, making the code difficult to understand and maintain.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-10-12-on-importance-of-naming-in-programming.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Given first and last name of a person, returns the\n// demographic statistics for all matching people.\nasync function demo (a, b) {\n  const c = await users(a, b);\n  return [\n    avg(c.map(a => a.info[0])),\n    median(c.map(a => a.info[1]))\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Route with URL Parameters in Wasp\nDESCRIPTION: Declaration of a route with a dynamic parameter ':name' and a corresponding HelloPage component. This demonstrates how to create paths with URL parameters in Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/03-pages.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute HelloRoute { path: \"/hello/:name\", to: HelloPage }\npage HelloPage {\n  component: import { HelloPage } from \"@src/HelloPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing getUsername Helper in Server Function\nDESCRIPTION: Demonstrates updating server-side code to access username identity directly instead of using the getUsername helper.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nimport { getUsername } from 'wasp/auth'\n\nexport const createTask: CreateTask<...>  = async (args, context) => {\n    const username = getUsername(context.user)\n    // ...\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\nexport const createTask: CreateTask<...>  = async (args, context) => {\n    const username = context.user.identities.username?.id\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Fly.io Regions\nDESCRIPTION: Command to list all available Fly.io deployment regions using the Fly CLI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/cli.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nflyctl platform regions\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of 'forall' in Haskell Function Definitions\nDESCRIPTION: Demonstrates the basic usage of 'forall' in Haskell function definitions. The 'forall' keyword is used to explicitly quantify type variables in polymorphic functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-09-01-haskell-forall-tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: haskell\nCODE:\n```\nf :: forall a. [a] -> [a]\nf xs = ys ++ ys\n  where ys :: [a]\n        ys = reverse xs\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Auth UI in JavaScript Login Page\nDESCRIPTION: Shows how to apply custom appearance to the LoginForm component by importing and passing the appearance configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/ui.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\nimport { authAppearance } from './appearance'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass the appearance object to the form\n      appearance={authAppearance}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Imports for CRUD Operations\nDESCRIPTION: Shows how to import and use TypeScript types for CRUD operations with generic type parameters for input and output.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Tasks } from 'wasp/server/crud'\n\n// Each of the types is a generic type, so you can use it like this:\nexport const getAllOverride: Tasks.GetAllQuery<Input, Output> = async (\n  args,\n  context\n) => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ShowForTs Component in JSX\nDESCRIPTION: This snippet imports a custom React component 'ShowForTs' from a specific path. The component is likely used to conditionally render content for TypeScript-specific documentation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/_superjson-note.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ShowForTs } from '@site/src/components/TsJsHelpers';\n```\n\n----------------------------------------\n\nTITLE: Google API Response Structure\nDESCRIPTION: JSON structure showing the possible fields returned from Google's userinfo endpoint.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/google.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"name\",\n  \"given_name\",\n  \"family_name\",\n  \"email\",\n  \"email_verified\",\n  \"aud\",\n  \"exp\",\n  \"iat\",\n  \"iss\",\n  \"locale\",\n  \"picture\",\n  \"sub\"\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Minimal User Entity Model in Prisma (Prisma)\nDESCRIPTION: This schema defines a minimal User model for use with authentication in Wasp, specifying 'id' as an autoincrement primary key. An application using this model must run Prisma migrations to update its database schema. No other fields are required, but can be extended per app needs.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/email.md#2025-04-22_snippet_12\n\nLANGUAGE: Prisma\nCODE:\n```\nmodel User {\\n  id Int @id @default(autoincrement())\\n}\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations\nDESCRIPTION: Command to run database migrations for the Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/examples/websockets-realtime-voting/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Using getUsername in Task Handler (JavaScript)\nDESCRIPTION: Implementation of getUsername helper in a task handler function to access the username from the context.user object. Shows usage in an async task creation context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/_get-username.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getUsername } from 'wasp/auth'\n\nexport const createTask = async (args, context) => {\n  const username = getUsername(context.user)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Automated Client Deployment Script\nDESCRIPTION: A shell script to automate the process of building and deploying the client to Railway.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\nif [ -z \"$REACT_APP_API_URL\" ]\nthen\n  echo \"REACT_APP_API_URL is not set\"\n  exit 1\nfi\n\nwasp build\ncd .wasp/build/web-app\n\nnpm install && REACT_APP_API_URL=$REACT_APP_API_URL npm run build\n\ncp -r build dist\n\ndockerfile_contents=$(cat <<EOF\nFROM pierrezemb/gostatic\nCMD [ \"-fallback\", \"index.html\" ]\nCOPY ./dist/ /srv/http/\nEOF\n)\n\ndockerignore_contents=$(cat <<EOF\nnode_modules/\nEOF\n)\n\necho \"$dockerfile_contents\" > Dockerfile\necho \"$dockerignore_contents\" > .dockerignore\n\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Migration Page Component\nDESCRIPTION: TypeScript React component implementing the password migration form interface\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  FormItemGroup,\n  FormLabel,\n  FormInput,\n  FormError,\n} from \"wasp/client/auth\";\nimport { useForm } from \"react-hook-form\";\nimport { migratePassword } from \"wasp/client/operations\";\nimport { useState } from \"react\";\n\nexport function MigratePasswordPage() {\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  const form = useForm<{\n    username: string;\n    password: string;\n  }>();\n\n  const onSubmit = form.handleSubmit(async (data) => {\n    try {\n      const result = await migratePassword(data);\n      setSuccessMessage(result.message);\n    } catch (e: unknown) {\n      console.error(e);\n      if (e instanceof Error) {\n        setErrorMessage(e.message);\n      }\n    }\n  });\n\n  return (\n    <div style={{\n      maxWidth: \"400px\",\n      margin: \"auto\",\n    }}>\n      <h1>Migrate your password</h1>\n      <p>\n        If you have an account on the old version of the website, you can\n        migrate your password to the new version.\n      </p>\n      {successMessage && <div>{successMessage}</div>}\n      {errorMessage && <FormError>{errorMessage}</FormError>}\n      <form onSubmit={onSubmit}>\n        <FormItemGroup>\n          <FormLabel>Username</FormLabel>\n          <FormInput\n            {...form.register(\"username\", {\n              required: \"Username is required\",\n            })}\n          />\n          <FormError>{form.formState.errors.username?.message}</FormError>\n        </FormItemGroup>\n        <FormItemGroup>\n          <FormLabel>Password</FormLabel>\n          <FormInput\n            {...form.register(\"password\", {\n              required: \"Password is required\",\n            })}\n            type=\"password\"\n          />\n          <FormError>{form.formState.errors.password?.message}</FormError>\n        </FormItemGroup>\n        <button type=\"submit\">Migrate password</button>\n      </form>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Disabling Wasp Telemetry via Environment Variable (Shell)\nDESCRIPTION: Provides the shell command to opt-out of Wasp's telemetry data collection. Setting the `WASP_TELEMETRY_DISABLE` environment variable to any value (e.g., '1') prevents telemetry data from being sent.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/telemetry.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport WASP_TELEMETRY_DISABLE=1\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp via Installer Script (Shell)\nDESCRIPTION: Downloads and executes the official Wasp installer script using curl. This command is the primary method for installing Wasp on Linux, macOS, and Windows Subsystem for Linux (WSL). Requires Node.js >= 18 to be installed.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/introduction/quick-start.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh\n```\n\n----------------------------------------\n\nTITLE: PostCSS Configuration for Tailwind\nDESCRIPTION: PostCSS configuration file required for Tailwind CSS processing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/css-frameworks.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entities in Prisma Schema\nDESCRIPTION: Demonstrates how to define entities (models) in the Prisma schema file, including relationships between models.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id       Int @id @default(autoincrement())\n  tasks    Task[]\n}\n\nmodel Task {\n  id          Int @id @default(autoincrement())\n  description String\n  isDone      Boolean\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Wasp Telemetry Status\nDESCRIPTION: Shows the output of 'wasp telemetry' command, which displays the current status of telemetry and related information.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/general/cli.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp telemetry\n\nTelemetry is currently: ENABLED\nTelemetry cache directory: /home/user/.cache/wasp/telemetry/\nLast time telemetry data was sent for this project: 2021-05-27 09:21:16.79537226 UTC\nOur telemetry is anonymized and very limited in its scope: check https://wasp.sh/docs/telemetry for more details.\n```\n\n----------------------------------------\n\nTITLE: Updating with Client Environment Variables\nDESCRIPTION: Command showing how to include client-side environment variables when updating a deployed Wasp app. Environment variables must be included with each deployment to be included in the build.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/cli.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nREACT_APP_ANOTHER_VAR=somevalue wasp deploy fly deploy\n```\n\n----------------------------------------\n\nTITLE: Updating OAuth Config Function in TypeScript (Before)\nDESCRIPTION: Shows the previous format of the OAuth configuration function, including clientID, clientSecret, and scope properties.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getConfig() {\n    return {\n        clientID: process.env.GOOGLE_CLIENT_ID,\n        clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n        scope: ['profile', 'email'],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding WebSocket Configuration to Wasp App\nDESCRIPTION: Adding WebSocket functionality to the Wasp configuration file by specifying the server-side WebSocket function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-09-build-real-time-voting-app-websockets-react-typescript.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\napp whereDoWeEat {\n\t// ... \n  webSocket: {\n    fn: import { webSocketFn } from \"@src/server/ws-server\",\n  },\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple Seed Functions in Wasp (TypeScript)\nDESCRIPTION: Demonstrates how to import multiple seed functions in the main.wasp file for a TypeScript project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/databases.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    seeds: [\n      // ...\n      import { devSeedSimple } from \"@src/dbSeeds.js\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Seeding Database with Italian Phrases using Wasp Action\nDESCRIPTION: This code snippet shows a Wasp action function that seeds the database with Italian phrases. It demonstrates how to use the Prisma ORM through the Wasp context to create new database entries.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-03-08-building-a-full-stack-app-supabase-vs-wasp.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function seedItalianPhrases(args, context) {\n    const data = [\n       {\n            id: 1,\n            group: \"general\",\n            translations_en: \"Yes\",\n            translations_it: \"Si\"\n        },\n        ...\n    ]\n    for (const phrase of seedPhrases) {\n        await context.entities.Phrase.create({\n            ...\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Wasp Project Using Interactive Mode\nDESCRIPTION: Shows the interactive CLI process for creating a new Wasp project using the wasp new command. Demonstrates template selection and project initialization steps.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/starter-templates.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp new\nEnter the project name (e.g. my-project) ▸ MyFirstProject\nChoose a starter template\n[1] basic (default)\n[2] saas\n[3] todo-ts\n▸ 1\n\n🐝 --- Creating your project from the basic template... ---------------------------\n\nCreated new Wasp app in ./MyFirstProject directory!\nTo run it, do:\n\n    cd MyFirstProject\n    wasp start\n```\n\n----------------------------------------\n\nTITLE: Example Telemetry Payload for Wasp Installation (JSON)\nDESCRIPTION: Illustrates the JSON structure of the telemetry data sent once via HTTPS when Wasp is installed using the `install.sh` script. This payload contains a randomly generated distinct ID and the operating system.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/telemetry.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Randomly generated id.\n  \"distinct_id\": \"274701613078193779564259\",\n  \"os\": \"linux\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Authentication Functions in JavaScript\nDESCRIPTION: This snippet shows the implementation of Google authentication functions in JavaScript. It includes functions for getting user fields and configuration settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/google.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { generateAvailableDictionaryUsername } from '@wasp/core/auth.js'\n\nexport const getUserFields = async (_context, args) => {\n  const username = await generateAvailableDictionaryUsername()\n  const displayName = args.profile.displayName\n  return { username, displayName }\n}\n\nexport function getConfig() {\n  return {\n    clientID, // look up from env or elsewhere\n    clientSecret, // look up from env or elsewhere\n    scope: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies in Wasp App Configuration\nDESCRIPTION: Shows how to specify npm dependencies in a Wasp app declaration using tuples of package names and version constraints. Demonstrates adding Redux and React-Redux as dependencies.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/dependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  dependencies: [\n    (\"redux\", \"^4.0.5\"),\n    (\"react-redux\", \"^7.1.3\")\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Password Migration Action in Wasp\nDESCRIPTION: Creates a Wasp action definition for the password migration functionality, importing the implementation from the auth module.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_22\n\nLANGUAGE: wasp\nCODE:\n```\naction migratePassword {\n  fn: import { migratePassword } from \"@src/auth\",\n  entities: []\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp Framework Globally\nDESCRIPTION: Command to install the Wasp framework globally on your local machine via a shell script installer.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-09-build-real-time-voting-app-websockets-react-typescript.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh \n```\n\n----------------------------------------\n\nTITLE: Setting Discord Auth Environment Variables\nDESCRIPTION: This snippet shows the required environment variables for Discord authentication. These should be added to the .env.server file in the project root.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/discord.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDISCORD_CLIENT_ID=your-discord-client-id\nDISCORD_CLIENT_SECRET=your-discord-client-secret\n```\n\n----------------------------------------\n\nTITLE: Importing Required Component in JavaScript\nDESCRIPTION: This code snippet imports the Required component from a local file, likely used for marking required fields in the user interface.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/_user-fields.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Required } from '@site/src/components/Tag';\n```\n\n----------------------------------------\n\nTITLE: Running Arbitrary Fly Commands\nDESCRIPTION: Example of running a Fly.io command to list secrets for the server app using the Wasp CLI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/deployment/cli.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd secrets list --context server\n```\n\n----------------------------------------\n\nTITLE: Importing Wasp CRUD Operations on the Client in JS/TS\nDESCRIPTION: Shows how to import the client-side object (`Tasks`) representing the defined Wasp CRUD operations into a React component. This is done using the import path `wasp/client/crud` in both JavaScript (JSX) and TypeScript (TSX) files.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/crud.md#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"SomePage.jsx\"\nimport { Tasks } from 'wasp/client/crud'\n```\n```\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"SomePage.tsx\"\nimport { Tasks } from 'wasp/client/crud'\n```\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Base Import\nDESCRIPTION: CSS file showing how to import Tailwind's base, components, and utilities layers.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/css-frameworks.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* ... */\n```\n\n----------------------------------------\n\nTITLE: Creating Projects in Django and Wasp\nDESCRIPTION: Terminal commands to create new projects in Django and Wasp frameworks\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-20-django-vs-wasp.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndjango-admin startproject\npython manage.py starapp Todo\n```\n\nLANGUAGE: shell\nCODE:\n```\nwasp new Todo\nwasp\n```\n\n----------------------------------------\n\nTITLE: Copying Fly.io Configuration to Project Root\nDESCRIPTION: Copies the fly.toml configuration file from the build directory to the project root for safekeeping, as the build directory gets replaced when rebuilding the app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/manually.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncp fly.toml ../../\n```\n\n----------------------------------------\n\nTITLE: Navigating to Build Directory for Fly.io Deployment\nDESCRIPTION: Command to change directory to the Wasp build output location before configuring Fly.io deployment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/manually.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd .wasp/build\n```\n\n----------------------------------------\n\nTITLE: Starting Wasp Development Server\nDESCRIPTION: Commands to navigate to the project directory and start the Wasp development server. The server will initialize the client, server, and database components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/01-create.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd TodoApp\n$ wasp start\n```\n\n----------------------------------------\n\nTITLE: Defining Meme Query in Wasp\nDESCRIPTION: Declares a query for fetching individual meme data with associated template information.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nquery getMeme {\n  fn: import { getMeme } from \"@server/queries.js\",\n  entities: [Meme]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Wasp Application\nDESCRIPTION: Commands to navigate into the project directory and start the Wasp development server, which will serve both frontend and backend components at http://localhost:3000.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/introduction/quick-start.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd <my-project-name>\nwasp start\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Wasp\nDESCRIPTION: Demonstrates the process of uninstalling Wasp from the system using the 'wasp uninstall' command.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/general/cli.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp uninstall\n\n🐝 --- Uninstalling Wasp ... ------------------------------------------------------\n\n We will remove the following directories:\n   {home}/.local/share/wasp-lang/\n   {home}/.cache/wasp/\n\n We will also remove the following files:\n   {home}/.local/bin/wasp\n\n Are you sure you want to continue? [y/N]\n y\n\n ✅ --- Uninstalled Wasp -----------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta on Mac with Apple Silicon\nDESCRIPTION: This command installs Rosetta on Macs with Apple Silicon (M1, M2, etc.). Rosetta is required to run x86 applications like Wasp on arm64 architecture.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/introduction/quick-start.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsoftwareupdate --install-rosetta\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication in Wasp\nDESCRIPTION: Basic configuration for enabling email authentication in a Wasp application's main configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/ui.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  //...\n  auth: {\n    methods: {\n      email: {},\n    },\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying to Heroku Container Registry\nDESCRIPTION: Build and push the Docker image to Heroku for deployment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nheroku container:login\nheroku stack:set container --app <app-name>\nheroku container:push --app <app-name> web\nheroku container:release --app <app-name> web\n```\n\n----------------------------------------\n\nTITLE: Client Environment Variables Configuration Example\nDESCRIPTION: Example of defining client environment variables in a .env.client file with the required REACT_APP_ prefix.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/env-vars.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nREACT_APP_SOME_VAR_NAME=somevalue\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp Client with RootComponent Only (JavaScript, main.wasp)\nDESCRIPTION: Sets the rootComponent field under client in the Wasp app declaration to a JavaScript React component. This enables defining a custom wrapper or layout for all app pages. Only React and Wasp project setup required.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/client-config.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.jsx\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mailgun Provider Configuration\nDESCRIPTION: Configuration for the Mailgun email provider and its required environment variables.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/email/email.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: Mailgun,\n  }\n}\n```\n\nLANGUAGE: properties\nCODE:\n```\nMAILGUN_API_KEY=\nMAILGUN_DOMAIN=\nMAILGUN_API_URL=https://api.eu.mailgun.net\n```\n\n----------------------------------------\n\nTITLE: Deploying Updates to Wasp App on Fly.io\nDESCRIPTION: This command deploys the latest changes to the Wasp app on Fly.io, updating both client and server.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/cli.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly deploy\n```\n\n----------------------------------------\n\nTITLE: Registering Seed Functions in Wasp Configuration\nDESCRIPTION: This snippet shows how to register database seed functions in the Wasp app configuration. It demonstrates importing and listing seed functions for development and production environments.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-04-13-db-start-and-seed.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    // ...\n    seeds: [\n      import { devSeedSimple } from \"@server/dbSeeds.js\",\n      import { prodSeed } from \"@server/dbSeeds.js\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API-Specific Middleware Customization in JavaScript\nDESCRIPTION: This JavaScript code defines an API handler `webhookCallback` and a corresponding middleware configuration function `webhookCallbackMiddlewareFn`. The middleware function demonstrates modifying the middleware stack for this specific API: it removes the default 'express.json' body parser and adds 'express.raw' to handle raw request bodies instead. This is useful for endpoints like webhooks that might not send JSON.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/middleware-config.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport express from 'express'\n\nexport const webhookCallback = (req, res, _context) => {\n  res.json({ msg: req.body.length })\n}\n\nexport const webhookCallbackMiddlewareFn = (middlewareConfig) => {\n  console.log('webhookCallbackMiddlewareFn: Swap express.json for express.raw')\n\n  middlewareConfig.delete('express.json')\n  middlewareConfig.set('express.raw', express.raw({ type: '*/*' }))\n\n  return middlewareConfig\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket in TypeScript Wasp App\nDESCRIPTION: Demonstrates how to configure WebSocket functionality in a Wasp application using TypeScript. Includes setting up the WebSocket function import and auto-connect behavior.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/web-sockets.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  webSocket: {\n    fn: import { webSocketFn } from \"@src/webSocket\",\n    autoConnect: true, // optional, default: true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Handling onBeforeOAuthRedirect Auth Hook (TypeScript) - ts\nDESCRIPTION: TypeScript implementation of the 'onBeforeOAuthRedirect' Wasp auth hook. Properly types the function using 'OnBeforeOAuthRedirectHook', accesses and persists request query parameters keyed by the OAuth unique request ID. Relies on a custom store for temporary data, and expects Prisma and Express request objects in the input. Returns an object with the OAuth redirect URL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/auth-hooks.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport type { OnBeforeOAuthRedirectHook } from 'wasp/server/auth'\n\nexport const onBeforeOAuthRedirect: OnBeforeOAuthRedirectHook = async ({\n  url,\n  oauth,\n  prisma,\n  req,\n}) => {\n  console.log('query params before oAuth redirect', req.query)\n\n  // Saving query params for later use in onAfterSignup or onAfterLogin hooks\n  const id = oauth.uniqueRequestId\n  someKindOfStore.set(id, req.query)\n\n  return { url }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Root Component for Common Layout in React\nDESCRIPTION: Shows how to create a root component in React to define a common layout for the application, including a header and footer.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/client-config.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Root({ children }) {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      {children}\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tailwind Configuration - JavaScript\nDESCRIPTION: This JavaScript CommonJS module configures Tailwind CSS using Wasp's project path resolution. It sets up Tailwind to scan source files for class usage, define the theme, and allow for plugin extension. The snippet must be saved as tailwind.config.cjs in the root directory and requires the wasp/dev package and the tailwindcss dependency. The content property ensures only files with .js, .jsx, .ts, and .tsx extensions under src/ are processed. Output is interpreted by Tailwind and Wasp during build.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/css-frameworks.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst { resolveProjectPath } = require('wasp/dev')\\n\\n/** @type {import('tailwindcss').Config} */\\nmodule.exports = {\\n  content: [resolveProjectPath('./src/**/*.{js,jsx,ts,tsx}')],\\n  theme: {\\n    extend: {},\\n  },\\n  plugins: [],\\n}\n```\n\n----------------------------------------\n\nTITLE: Running Wasp CLI Commands for Local Setup\nDESCRIPTION: Commands to set up the local database and start the Mage app using Wasp CLI. These steps are part of the local setup process for running Mage.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/mage/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasp db start\nwasp start\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth in Wasp Main File (TypeScript, API Reference) - wasp\nDESCRIPTION: Presents the minimal Wasp configuration for GitHub OAuth authentication integration using TypeScript-based imports, as used in API reference scenarios. Requires the associated TS files with exported configuration and user signup field handlers. Intended as an example for quick referencing when setting up authentication in Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/github.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/github.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/github.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\n```\n\n----------------------------------------\n\nTITLE: File Structure Before Migration\nDESCRIPTION: Example of the old file structure organization with client/server separation in the src directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc\n│\n├── client\n│   ├── Dashboard.tsx\n│   ├── Login.tsx\n│   ├── MainPage.tsx\n│   ├── Register.tsx\n│   ├── Task.css\n│   ├── TaskLisk.tsx\n│   ├── Task.tsx\n│   └── User.tsx\n├── server\n│   ├── taskActions.ts\n│   ├── taskQueries.ts\n│   ├── userActions.ts\n│   └── userQueries.ts\n└── shared\n    └── utils.ts\n```\n\n----------------------------------------\n\nTITLE: Versioning Wasp Documentation with npm\nDESCRIPTION: This npm command creates a versioned snapshot of the current Wasp documentation. It should be run in the web directory to prepare documentation for a new release.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docusaurus docs:version {version}\n```\n\n----------------------------------------\n\nTITLE: Defining Entities in schema.prisma for PostgreSQL in Wasp\nDESCRIPTION: Demonstrates how to define entities (User and Task) in the schema.prisma file for PostgreSQL, including relationships.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id       Int @id @default(autoincrement())\n  tasks    Task[]\n}\n\nmodel Task {\n  id          Int @id @default(autoincrement())\n  description String\n  isDone      Boolean\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript CRUD Override Types Import\nDESCRIPTION: Shows how to import and use TypeScript types for CRUD operation overrides. Demonstrates type usage for custom implementation of CRUD operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/crud.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Tasks } from 'wasp/server/crud'\n\n// Each of the types is a generic type, so you can use it like this:\nexport const getAllOverride: Tasks.GetAllQuery<Input, Output> = async (\n  args,\n  context\n) => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Prisma Preview Features\nDESCRIPTION: Shows how to migrate Prisma preview features and database extensions from the Wasp file to the Prisma schema file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    prisma: {\n      clientPreviewFeatures: [\"postgresqlExtensions\"]\n      dbExtensions: [\n        { name: \"hstore\", schema: \"myHstoreSchema\" },\n        { name: \"pg_trgm\" },\n        { name: \"postgis\", version: \"2.1\" },\n      ]\n    }\n  }\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n  extensions = [hstore(schema: \"myHstoreSchema\"), pg_trgm, postgis(version: \"2.1\")]\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  previewFeatures = [\"postgresqlExtensions\"]\n}\n```\n\n----------------------------------------\n\nTITLE: API Reference for routes Object in TypeScript\nDESCRIPTION: Provides a TypeScript interface for the routes object, showing the structure and available methods for different route types.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/links.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport const routes = {\n  // RootRoute has a path like \"/\"\n  RootRoute: {\n    build: (options?: {\n      search?: string[][] | Record<string, string> | string | URLSearchParams\n      hash?: string\n    }) => // ...\n  },\n\n  // DetailRoute has a path like \"/task/:id/:something?\"\n  DetailRoute: {\n    build: (\n      options: {\n        params: { id: ParamValue; something?: ParamValue; },\n        search?: string[][] | Record<string, string> | string | URLSearchParams\n        hash?: string\n      }\n    ) => // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Top-Level Function Declaration Examples\nDESCRIPTION: Illustrates preferred and discouraged patterns for declaring top-level named functions in JavaScript. Function statements are preferred over expressions or arrow functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/README.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// good\nfunction foo(param) {\n  // ...\n}\n\n// bad\nconst foo = (param) => {\n  // ...\n};\n\n// bad\nconst foo = function (param) {\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in Markdown (Docusaurus)\nDESCRIPTION: This code snippet demonstrates how to import and use custom React components within a Markdown file using Docusaurus. It imports components for link handling, image management, and custom UI elements.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-09-29-journey-to-1000-gh-stars.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport InBlogCta from './components/InBlogCta';\nimport WaspIntro from './_wasp-intro.md';\nimport ImgWithCaption from './components/ImgWithCaption'\n```\n\n----------------------------------------\n\nTITLE: Setting WASP_SERVER_URL Environment Variable in Bash\nDESCRIPTION: Defines the new WASP_SERVER_URL server environment variable required in Wasp 0.13.0. This variable is used to generate the redirect URL for OAuth providers.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nWASP_SERVER_URL=https://your-wasp-server-url.com\n```\n\n----------------------------------------\n\nTITLE: Opening Database Studio using Wasp CLI\nDESCRIPTION: Runs the Wasp CLI command `wasp db studio` to launch Prisma Studio. This provides a web-based GUI to inspect, query, and manipulate the data within the application's database, including viewing the newly created `Task` table schema.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/04-entities.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nwasp db studio\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving GitHub User ID in TypeScript\nDESCRIPTION: This snippet demonstrates how to access a user's GitHub identity and extract their GitHub User ID. It assumes the user object has an 'identities' property containing GitHub-specific information.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/_github-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst githubIdentity = user.identities.github\n\n// GitHub User ID for example \"12345678\"\ngithubIdentity.id\n```\n\n----------------------------------------\n\nTITLE: Manual Deployment Steps Equivalent to Launch Command\nDESCRIPTION: These commands show the manual equivalent of the 'launch' command, breaking down the process into setup, database creation, and deployment steps.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/cli.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly setup my-wasp-app mia\nwasp deploy fly create-db mia\nwasp deploy fly deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Wasp App to Fly.io\nDESCRIPTION: This command deploys the Wasp app to Fly.io using the specified configuration file. It should be run from the .wasp/build/ directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/manually.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflyctl deploy --remote-only --config ../../fly.toml\n```\n\n----------------------------------------\n\nTITLE: Telemetry Data Structure for CLI Commands\nDESCRIPTION: JSON structure showing the telemetry data sent when wasp CLI commands are invoked. Includes anonymous user ID, project hash, build status, deploy arguments, version info and context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/telemetry.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"distinct_id\": \"bf3fa7a8-1c11-4f82-9542-ec1a2d28786b\",\n  \"project_hash\": \"6d7e561d62b955d1\",\n  \"is_build\": true,\n  \"deploy_cmd_args\": \"fly;deploy\",\n  \"wasp_version\": \"0.1.9.1\",\n  \"os\": \"linux\",\n  \"context\": \"CI\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Permissions in GraphQL Schema\nDESCRIPTION: This example shows how to attach permission checks directly to data models in a GraphQL schema using directives. It demonstrates field-level permission control based on user roles.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-29-permissions-in-web-apps.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Post {\n  id: ID!\n  title: String!\n  secret: String @requireAuth(role: ADMIN)\n  author: User!\n  published: Boolean! @requireAuth(role: EDITOR)\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Project Structure Directory Layout\nDESCRIPTION: Directory structure of a default JavaScript-based Wasp project showing the main configuration files and source code organization.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/02-project-structure.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── .gitignore\n├── main.wasp          # Your Wasp code goes here.\n├── schema.prisma      # Your Prisma schema goes here.\n├── package.json       # Your dependencies and project info go here.\n├── public             # Your static files (e.g., images, favicon) go here.\n├── src                # Your source code (TS/JS/CSS/HTML) goes here.\n│   ├── Main.css\n│   ├── MainPage.jsx\n│   ├── vite-env.d.ts\n│   └── waspLogo.png\n├── tsconfig.json\n├── vite.config.ts\n├── .waspignore\n└── .wasproot\n```\n\n----------------------------------------\n\nTITLE: Custom Signup Action Configuration\nDESCRIPTION: Configuration for custom signup action in Wasp, including action definition and implementation with validation and user creation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/username-and-pass.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\naction customSignup {\n  fn: import { signup } from \"@src/auth/signup.js\",\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  ensurePasswordIsPresent,\n  ensureValidPassword,\n  ensureValidUsername,\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  createUser,\n} from 'wasp/server/auth'\n\nexport const signup = async (args, _context) => {\n  ensureValidUsername(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('username', args.username)\n    const providerData = await sanitizeAndSerializeProviderData({\n      hashedPassword: args.password,\n    })\n\n    await createUser(\n      providerId,\n      providerData,\n      // Any additional data you want to store on the User entity\n      {}\n    )\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Wasp Application\nDESCRIPTION: Command to start the Wasp application server\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-11-21-guide-windows-development-wasp-wsl.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nwasp start\n```\n\n----------------------------------------\n\nTITLE: Supabase OAuth Implementation\nDESCRIPTION: JavaScript code for implementing Google OAuth authentication using Supabase SDK.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-03-08-building-a-full-stack-app-supabase-vs-wasp.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nsupabase.auth.signInWithOAuth({ provider: \"google\" });\n```\n\n----------------------------------------\n\nTITLE: Launching Fly.io App\nDESCRIPTION: Create a new Fly.io app and generate a fly.toml configuration file using the flyctl CLI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/manually.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflyctl launch --remote-only\n```\n\n----------------------------------------\n\nTITLE: Configuring Edit Meme Route in Wasp\nDESCRIPTION: Defines a new route and page component for editing memes, with authentication requirement and dynamic ID parameter.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nroute EditMemeRoute { path: \"/meme/:id\", to: EditMemePage }\npage EditMemePage {\n  component: import { EditMemePage } from \"@client/pages/EditMemePage\",\n  authRequired: true\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Wasp CLI Version and Update Instructions\nDESCRIPTION: Demonstrates the output of the `wasp version` command. It prints the currently installed version of the Wasp CLI (e.g., 0.14.0) and provides `curl` commands to install the latest version or a specific version (x.y.z) from the official Wasp release repository.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/general/cli.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp version\n\n0.14.0\n\nIf you wish to install/switch to the latest version of Wasp, do:\ncurl -sSL https://get.wasp.sh/installer.sh | sh -s\n\nIf you want specific x.y.z version of Wasp, do:\ncurl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v x.y.z\n\nCheck https://github.com/wasp-lang/wasp/releases for the list of valid versions, including the latest one.\n```\n\n----------------------------------------\n\nTITLE: Non-Interactive Project Creation with Default Template - Shell\nDESCRIPTION: This command block shows creation of a new Wasp project named MyFirstProject non-interactively with the default template. Requires Wasp CLI to be installed. Input is the project name passed as an argument; output is textual status confirming the new app and setup instructions. Suitable for scripting or automated workflows.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/general/cli.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ wasp new MyFirstProject\n🐝 --- Creating your project from the \"basic\" template... -------------------------\n\nCreated new Wasp app in ./MyFirstProject directory!\n\nTo run your new app, do:\n    cd MyFirstProject\n    wasp db start\n```\n\n----------------------------------------\n\nTITLE: Viewing Generated Dockerfile Content in Wasp CLI\nDESCRIPTION: Command to display the project's generated (and potentially combined) Dockerfile content using the Wasp CLI. This helps developers verify the final Dockerfile that will be used for deployment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/deployment/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwasp dockerfile\n```\n\n----------------------------------------\n\nTITLE: Default Global Middleware Definition in JavaScript\nDESCRIPTION: Definition of the default middleware configuration included in every Wasp Express application, showing the standard middleware stack using a Map structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/middleware-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultGlobalMiddleware = new Map([\n  ['helmet', helmet()],\n  ['cors', cors({ origin: config.allowedCORSOrigins })],\n  ['logger', logger('dev')],\n  ['express.json', express.json()],\n  ['express.urlencoded', express.urlencoded({ extended: false })],\n  ['cookieParser', cookieParser()]\n])\n```\n\n----------------------------------------\n\nTITLE: Conditional Validation for UK Postal Codes\nDESCRIPTION: Implements conditional validation using superRefine to validate UK postal codes when the country is set to UK.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2025-01-22-advanced-react-hook-form-zod-shadcn.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n.superRefine((data, ctx) => {\n      if (data.username.includes(' ')) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: 'Username cannot contain spaces',\n          path: ['username'],\n        });\n      }\n\n      if (/^\\d+$/.test(data.city)) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: 'City name cannot be purely numeric',\n          path: ['city'],\n        });\n      }\n      \n      \n     if (!isValidUKPostcode(data.postalCode, data.country)) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: 'Invalid UK postal code format (e.g., SW1A 1AA)',\n        path: ['postalCode'],\n      });  \n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Displaying Wasp CLI Usage Information\nDESCRIPTION: Shows the output of running the 'wasp' command without arguments, listing available commands and their descriptions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/general/cli.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  wasp <command> [command-args]\n\nCOMMANDS\n  GENERAL\n    new [<name>] [args]   Creates a new Wasp project. Run it without arguments for interactive mode.\n      OPTIONS:\n        -t|--template <template-name>\n           Check out the templates list here: https://github.com/wasp-lang/starters\n\n    version               Prints current version of CLI.\n    waspls                Run Wasp Language Server. Add --help to get more info.\n    completion            Prints help on bash completion.\n    uninstall             Removes Wasp from your system.\n  IN PROJECT\n    start                 Runs Wasp app in development mode, watching for file changes.\n    start db              Starts managed development database for you.\n    db <db-cmd> [args]    Executes a database command. Run 'wasp db' for more info.\n    clean                 Deletes all generated code and other cached artifacts.\n                          Wasp equivalent of 'have you tried closing and opening it again?'.\n    build                 Generates full web app code, ready for deployment. Use when deploying or ejecting.\n    deploy                Deploys your Wasp app to cloud hosting providers.\n    telemetry             Prints telemetry status.\n    deps                  Prints the dependencies that Wasp uses in your project.\n    dockerfile            Prints the contents of the Wasp generated Dockerfile.\n    info                  Prints basic information about current Wasp project.\n    test                  Executes tests in your project.\n\nEXAMPLES\n  wasp new MyApp\n  wasp start\n  wasp db migrate-dev\n\nDocs: https://wasp.sh/docs\nDiscord (chat): https://discord.gg/rzdnErX\nNewsletter: https://wasp.sh/#signup\n```\n\n----------------------------------------\n\nTITLE: Deploying Wasp App to Specific Fly.io Organization\nDESCRIPTION: This command launches a Wasp app on Fly.io, specifying a particular organization for deployment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/cli.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly launch my-wasp-app mia --org hive\n```\n\n----------------------------------------\n\nTITLE: Creating New Wasp Project with Embeddings Template\nDESCRIPTION: Command to create a new Wasp project using the vector similarity search template that includes features for embeddings generation and vector similarity search using OpenAI Embeddings API and Pinecone.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/starter-templates.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwasp new <project-name> -t embeddings\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Query for Fetching Tweet Drafts and Ideas in TypeScript\nDESCRIPTION: This TypeScript function implements the server query for fetching tweet drafts with associated ideas. It retrieves drafts created within the last 2 days, including related original tweets and generated ideas.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n//... other imports ...\nimport type { GetTweetDraftsWithIdeas } from '@wasp/queries/types'; // <--- add this ---\n\n// ... other functions ...\n\ntype TweetDraftsWithIdeas = {\n  id: number;\n  content: string;\n  notes: string;\n  createdAt: Date;\n  originalTweet: {\n    id: number;\n    content: string;\n    tweetId: string;\n    tweetedAt: Date;\n    ideas: GeneratedIdea[];\n    authorUsername: string;\n  };\n}[];\n\nexport const getTweetDraftsWithIdeas: GetTweetDraftsWithIdeas<unknown, TweetDraftsWithIdeas> = async (_args, context) => {\n  if (!context.user) {\n    throw new HttpError(401, 'User is not authorized');\n  }\n\n  const drafts = await context.entities.TweetDraft.findMany({\n    orderBy: {\n      originalTweet: {\n        tweetedAt: 'desc',\n      }\n    },\n    where: {\n      userId: context.user.id,\n      createdAt: {\n        gte: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // Get drafts created within the last 2 days\n      },\n    },\n    select: {\n      id: true,\n      content: true,\n      notes: true,\n      createdAt: true,\n      originalTweet: {\n        select: {\n          id: true,\n          tweetId: true,\n          content: true,\n          ideas: true,\n          tweetedAt: true,\n\t\t\t\t\tauthorUsername: true,\n        },\n      },\n    },\n  });\n\n  return drafts;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Wasp\nDESCRIPTION: A high-level configuration example showing how authentication can be implemented using Wasp's abstraction layer. Demonstrates configuration for username/password and Google authentication methods with redirect paths.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-06-24-ML-code-gen-vs-coding-by-hand-future.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\nauth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      usernameAndPassword: {},\n      google: {}\n    },\n    onAuthFailedRedirectTo: \"/login\",\n    onAuthSucceededRedirectTo: \"/dashboard\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Running Wasp Migration Script\nDESCRIPTION: Command to run the Wasp migration script to convert a project to the 0.12.x structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx wasp-migrate foo\n```\n\n----------------------------------------\n\nTITLE: Individual Fly.io Deployment Steps\nDESCRIPTION: Sequence of individual commands that make up the full deployment process to Fly.io.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/cli.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly setup my-wasp-app mia\nwasp deploy fly create-db mia\nwasp deploy fly deploy\n```\n\n----------------------------------------\n\nTITLE: Submitting a Job in JavaScript\nDESCRIPTION: This code shows how to submit a job named 'mySpecialJob' using the JavaScript API provided by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/jobs.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst submittedJob = await mySpecialJob.submit({ job: \"args\" })\n```\n\n----------------------------------------\n\nTITLE: Advanced 'forall' Usage in Haskell Type Signatures\nDESCRIPTION: Shows more advanced usage of 'forall' in Haskell type signatures, including higher-rank types and existential quantification in data constructors.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-09-01-haskell-forall-tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: haskell\nCODE:\n```\nliftPair :: (forall x. x -> f x) -> (a, b) -> (f a, f b)\n```\n\nLANGUAGE: haskell\nCODE:\n```\ndata Showable = forall s. (Show s) => Showable s\n```\n\n----------------------------------------\n\nTITLE: Creating a Signup Page with Wasp Auth UI in React (TypeScript)\nDESCRIPTION: A TypeScript version of the React component implementing a signup page using Wasp's SignupForm component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/crud.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignupForm } from 'wasp/client/auth'\n\nexport function SignupPage() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        placeContent: 'center',\n      }}\n    >\n      <SignupForm />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Wedding Arcade Game Implementation in Lua\nDESCRIPTION: Reference to an open-source arcade game written in Lua, originally created for a wedding and later modified for the conference. The game features a character running away from band members while collecting coffee boosters and avoiding brandy obstacles.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-12-11-armadajs-2024-a-conference-that-feels-like-home.md#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Installing client-side dependencies\nDESCRIPTION: Commands to navigate to the client directory, install dependencies, and start the development server.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-09-build-real-time-voting-app-websockets-react-typescript.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ../ws-client && npm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Linking Railway Project\nDESCRIPTION: Link the local Wasp build to the Railway project for deployment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nrailway link\n```\n\n----------------------------------------\n\nTITLE: HomePage Component with Auth Redirect Logic\nDESCRIPTION: React component showing how to handle incomplete signup states and redirect users accordingly.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport useAuth from '@wasp/auth/useAuth'\nimport { Redirect } from 'react-router-dom'\n\nexport function HomePage() {\n  const { data: user } = useAuth()\n\n  if (user.isSignupComplete === false) {\n    return <Redirect to=\"/edit-user-details\" />\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Building Wasp Web App with NPM and Environment Variables\nDESCRIPTION: This command installs dependencies and builds the React app, setting the API URL environment variable. It requires specifying the URL of the previously deployed Wasp backend.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/_building-the-web-client.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install && REACT_APP_API_URL=<url_to_wasp_backend> npm run build\n```\n\n----------------------------------------\n\nTITLE: Running Wasp Development Server with Hot Reload\nDESCRIPTION: The `wasp start` command keeps running in the background, automatically detecting changes in your code, regenerating necessary files, and restarting the app. It also tracks the working directory to ensure generated code and types stay in sync with your changes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/_WaspStartNote.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwasp start\n```\n\n----------------------------------------\n\nTITLE: Adding Edit Button to Home Page\nDESCRIPTION: Implementation of the edit button component with routing logic for the home page, including user authorization checks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from '@wasp/router';\nimport { AiOutlineEdit } from 'react-icons/ai';\n\n//...\n\n{user && (user.isAdmin || user.id === memeIdea.userId) && (\n  <div className='flex items-center mt-2'>\n    <Link key={memeIdea.id} params={{ id: memeIdea.id }} to={`/meme/:id`}>\n      <button className='flex items-center gap-1 bg-primary-200 hover:bg-primary-300 border-2 text-black text-xs py-1 px-2 rounded'>\n        <AiOutlineEdit />\n        Edit Meme\n      </button>\n    </Link>\n    {/* TODO: add delete meme functionality */}\n  </div>\n)}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Wasp CLI Interactively\nDESCRIPTION: Shows the interactive process initiated by the `wasp uninstall` command. It informs the user which Wasp-related directories and files will be removed from their system and prompts for confirmation (y/N) before proceeding with the uninstallation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/general/cli.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp uninstall\n\n🐝 --- Uninstalling Wasp ... ------------------------------------------------------\n\n We will remove the following directories:\n   {home}/.local/share/wasp-lang/\n   {home}/.cache/wasp/\n\n We will also remove the following files:\n   {home}/.local/bin/wasp\n\n Are you sure you want to continue? [y/N]\n y\n\n ✅ --- Uninstalled Wasp -----------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Database Configuration Note\nDESCRIPTION: Documentation section discussing database setup options for self-hosted Wasp applications, including on-server PostgreSQL deployment and managed database services. Includes recommendations for backups and maintenance.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/self-hosted.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- TOPIC: database -->\n\nIn all of the guides, we run the **database on your server**. When you run the database on your server, you need to take care of backups, updates, and scaling. We suggest setting up [PostgresSQL periodic backups](https://tembo.io/docs/getting-started/postgres_guides/how-to-backup-and-restore-a-postgres-database) and/or taking snapshots of your server's disk. In case something bad happens to your server, you can restore your database from the backups.\n```\n\n----------------------------------------\n\nTITLE: Updated package.json with Moved Dependencies\nDESCRIPTION: Example of how the package.json file should look after moving dependencies from the main.wasp file, showing the proper structure required by Wasp 0.12.0.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"foo\",\n  \"dependencies\": {\n    \"wasp\": \"file:.wasp/out/sdk/wasp\",\n    \"react\": \"^18.2.0\",\n    // highlight-next-line\n    \"redux\": \"^4.0.5\",\n    // highlight-next-line\n    \"reactjs-redux\": \"^7.1.3\"\n  },\n  \"devDependencies\": {\n    \"typescript\": \"^5.1.0\",\n    \"vite\": \"^4.3.9\",\n    \"@types/react\": \"^18.0.37\",\n    \"prisma\": \"4.16.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Wasp Project with SaaS Template\nDESCRIPTION: Command to create a new Wasp project using the SaaS template that includes features like Stripe Payments, OpenAI GPT API, Google Auth, SendGrid, Tailwind, and Cron Jobs.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/starter-templates.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwasp new <project-name> -t saas\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Public Assets\nDESCRIPTION: Shows the recommended project structure for placing assets in the `public` directory. Files like `favicon.ico` and `robots.txt` placed here will be served directly from the root path (`/`) without processing or hashing, and cannot be imported into the source code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/static-assets.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n```\n.\n└── public\n    ├── favicon.ico\n    └── robots.txt\n```\n```\n\n----------------------------------------\n\nTITLE: Markdown Contact Page Structure\nDESCRIPTION: Basic markdown structure for a contact page with frontmatter and contact information including Discord link and email address.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/contact.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Contact\n---\n\n<!-- TODO: update the email once we setup @wasp.sh-->\nYou can find us on [Discord](https://discord.gg/rzdnErX) or you can reach out to us via email at hi@wasp-lang.dev.\n```\n\n----------------------------------------\n\nTITLE: Prompting ChatGPT for PRD Generation\nDESCRIPTION: Simple prompt to request ChatGPT to generate a Product Requirement Document for a house plant tracking application\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-23-using-product-requirement-documents-generate-better-web-apps-with-ai.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nWrite a Product Requirement Document for the following full-stack app:\n\nAn app where users can track their house plants and their watering schedule.\n```\n\n----------------------------------------\n\nTITLE: JavaScript Keycloak Authentication Configuration\nDESCRIPTION: JavaScript implementation of user signup fields mapping and Keycloak configuration settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/keycloak.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const userSignupFields = {\n  username: () => 'hardcoded-username',\n  displayName: (data) => data.profile.name,\n}\n\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Deployable Wasp Code with Build Command\nDESCRIPTION: The wasp build command generates deployable code for the entire Wasp application in the .wasp/build/ directory. This is a required first step before deploying to any provider.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/manually.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasp build\n```\n\n----------------------------------------\n\nTITLE: Releasing Docker Image and Restarting App on Heroku - Shell\nDESCRIPTION: Deploys the previously pushed Docker image to the Heroku app and restarts the web process to serve the updated image. This step requires the image to have already been pushed to Heroku and expects <app-name> to be replaced by the actual application name. On success, the latest image is active, and the app is live at its assigned Heroku URL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/manually.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nheroku container:release --app <app-name> web\n```\n\n----------------------------------------\n\nTITLE: Type signature with explicit forall order in Haskell\nDESCRIPTION: Demonstrates how to use explicit forall to define a custom order for type variables, affecting how TypeApplications are applied. This requires the ExplicitForAll extension.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-09-01-haskell-forall-tutorial.md#2025-04-22_snippet_9\n\nLANGUAGE: Haskell\nCODE:\n```\nfoo :: forall a b c m. Monad m => a b -> m (a c)\n```\n\n----------------------------------------\n\nTITLE: Mailgun Environment Variables Configuration\nDESCRIPTION: Environment variables setup for Mailgun email provider configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/email/email.md#2025-04-22_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nMAILGUN_API_KEY=\nMAILGUN_DOMAIN=\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp-Specific TypeScript Settings\nDESCRIPTION: TypeScript configuration specific to Wasp configuration files, including compiler options and file inclusion.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/general/wasp-ts-config.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"skipLibCheck\": true,\n    \"target\": \"ES2022\",\n    \"isolatedModules\": true,\n    \"moduleDetection\": \"force\",\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"module\": \"NodeNext\",\n    \"noEmit\": true,\n    \"lib\": [\"ES2023\"]\n  },\n  \"include\": [\"main.wasp.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Prisma Database Studio\nDESCRIPTION: Command to open the Prisma database studio for viewing and managing database records.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/07-auth.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nwasp db studio\n```\n\n----------------------------------------\n\nTITLE: Setting Fly.io Environment Variables\nDESCRIPTION: Commands to set required environment variables for the Wasp application on Fly.io, including port, JWT secret, and URLs.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/paas.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflyctl secrets set PORT=8080\nflyctl secrets set JWT_SECRET=<random_string_at_least_32_characters_long>\nflyctl secrets set WASP_WEB_CLIENT_URL=<url_of_where_client_will_be_deployed>\nflyctl secrets set WASP_SERVER_URL=<url_of_where_server_will_be_deployed>\n```\n\n----------------------------------------\n\nTITLE: React Image Component Import\nDESCRIPTION: Import statements for React components used to display images in the blog post\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-07-17-how-we-built-gpt-web-app-generator.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n\nimport ImgWithCaption from './components/ImgWithCaption'\n```\n\n----------------------------------------\n\nTITLE: Listing Available Fly.io Regions\nDESCRIPTION: This command lists all available regions for deployment on Fly.io.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/cli.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nflyctl platform regions\n```\n\n----------------------------------------\n\nTITLE: React Component with useQuery Hook in JavaScript\nDESCRIPTION: Demonstrates using the useQuery hook in a React component to handle reactive Queries with error handling and data rendering.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/queries.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useQuery, getAllTasks, getFilteredTasks } from 'wasp/client/operations'\n\nconst MainPage = () => {\n  const { data: allTasks, error: error1 } = useQuery(getAllTasks)\n  const { data: doneTasks, error: error2 } = useQuery(getFilteredTasks, {\n    isDone: true,\n  })\n\n  if (error1 !== null || error2 !== null) {\n    return <div>There was an error</div>\n  }\n\n  return (\n    <div>\n      <h2>All Tasks</h2>\n      {allTasks && allTasks.length > 0\n        ? allTasks.map((task) => <Task key={task.id} {...task} />)\n        : 'No tasks'}\n\n      <h2>Finished Tasks</h2>\n      {doneTasks && doneTasks.length > 0\n        ? doneTasks.map((task) => <Task key={task.id} {...task} />)\n        : 'No finished tasks'}\n    </div>\n  )\n}\n\nconst Task = ({ description, isDone }: Task) => {\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n    </div>\n  )\n}\n\nexport default MainPage\n```\n\n----------------------------------------\n\nTITLE: Legacy Auth Field Definition\nDESCRIPTION: Previous implementation of additional signup fields using defineAdditionalSignupFields helper.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineAdditionalSignupFields } from '@wasp/auth/index.js'\n\nexport const fields = defineAdditionalSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Wasp Studio Client\nDESCRIPTION: Command to install all required npm dependencies for the Wasp Studio Client application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/packages/studio/client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining Entities in Wasp (Before 0.14.0)\nDESCRIPTION: Example of how entities were defined in the main.wasp file before version 0.14.0. It shows the app configuration and entity definitions for User and Task.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"MyApp\",\n  db: {\n    system: PostgreSQL\n  },\n}\n\nentity User {=psl\n  id       Int @id @default(autoincrement())\n  tasks    Task[]\npsl=}\n\nentity Task {=psl\n  id          Int @id @default(autoincrement())\n  description String\n  isDone      Boolean\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Importing Client-Side Code in Wasp\nDESCRIPTION: This snippet illustrates the syntax for importing client-side code in Wasp. It shows both default and named imports from the client directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/general/language.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nimport Foo from \"@client/bar.js\"\nimport { Smth } from \"@client/a/b.js\"\n```\n\n----------------------------------------\n\nTITLE: Updating Auth Configuration in main.wasp\nDESCRIPTION: This snippet shows how to update the auth configuration in the main.wasp file to use the new userSignupFields instead of additionalFields for email authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  // ...\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        userSignupFields: import { fields } from \"@src/server/auth/signup.js\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Auth in Wasp File\nDESCRIPTION: This snippet shows how to configure the auth object in the main.wasp file to enable GitHub authentication. It specifies the User entity and enables GitHub as an auth method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/github.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Build Directory in Shell\nDESCRIPTION: Command to change directory to the Wasp build folder for deployment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/manually.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncd .wasp/build\n```\n\n----------------------------------------\n\nTITLE: Configuring Django app URLs with REST router\nDESCRIPTION: Python code to set up URL routing for the todo app using Django REST framework's DefaultRouter.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-20-django-vs-wasp.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path, include\nfrom rest_framework.routers import DefaultRouter\nfrom .views import TaskViewSet\n\nrouter = DefaultRouter()\nrouter.register(r'tasks', TaskViewSet)\n\nurlpatterns = [\n    path('', include(router.urls)),\n]\n```\n\n----------------------------------------\n\nTITLE: Using a Specific Node.js Version with nvm (shell)\nDESCRIPTION: Switches the current shell session to use Node.js version 20 using nvm. Requires nvm to be installed, and Node.js version 20 must already be installed via nvm. No input parameters are required. The output is the active session using the specified Node.js version, which is important to ensure consistency across Wasp CLI operations and app development. Limitation: Only affects the current shell session, not global system settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/introduction/quick-start.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnvm use 20\n```\n\n----------------------------------------\n\nTITLE: Initial Entity Definition Concept in Wasp\nDESCRIPTION: Early concept for how entity definitions might look in the Wasp language before deciding to use Prisma Schema Language.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-28-why-we-chose-prisma.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {\n  id: Id,\n  username: String @unique,\n  email: String @unique\n  groups: [Group]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Wasp Application\nDESCRIPTION: Command to start the Wasp Todo application server\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/examples/tutorials/TodoApp/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwasp start\n```\n\n----------------------------------------\n\nTITLE: Setting Fly.io Environment Variables\nDESCRIPTION: Set required environment variables for the Fly.io app using the flyctl secrets command.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/manually.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflyctl secrets set PORT=8080\nflyctl secrets set JWT_SECRET=<random_string_at_least_32_characters_long>\nflyctl secrets set WASP_WEB_CLIENT_URL=<url_of_where_frontend_will_be_deployed>\n```\n\n----------------------------------------\n\nTITLE: Checking NPM Package Versions\nDESCRIPTION: Shell command to view the latest version of an npm package using the npm CLI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/dependencies.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm view <package-name> version\n```\n\n----------------------------------------\n\nTITLE: Development Workflow for Wasp Application Runner\nDESCRIPTION: Commands for running the wasp-app-runner script directly during development without installing it globally, including building TypeScript code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/wasp-app-runner/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run start -- [--path-to-app <path>] [--wasp-cli-cmd <command>]\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Checks in Backend API Endpoints\nDESCRIPTION: This code example shows how permission checks are implemented in a backend API endpoint. It includes both an initial authentication check and a data-level ownership check when deleting an article.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-29-permissions-in-web-apps.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.delete('/api/articles/:id', async (req, res) => {\n  // First, check if user is authenticated\n  if (!req.user) {\n    return res.status(401).json({ error: 'Not authenticated' })\n  }\n  \n  // Then, check if user is allowed to delete this particular article\n  const article = await prisma.article.findUnique({\n    where: { id: req.params.id },\n    select: { authorId: true }\n  })\n  \n  if (!article) {\n    return res.status(404).json({ error: 'Article not found' })\n  }\n  \n  if (article.authorId !== req.user.id) {\n    return res.status(403).json({ error: 'Not authorized' })\n  }\n  \n  // If we got here, user is authorized to delete the article\n  await prisma.article.delete({ where: { id: req.params.id } })\n  return res.json({ success: true })\n})\n```\n\n----------------------------------------\n\nTITLE: Viewing Wasp 0.11.x Project Structure\nDESCRIPTION: Displays the default directory layout for a Wasp project created using version 0.11.x. It shows the separation of client and server code within the `src` directory (`src/client`, `src/server`), which is a key difference compared to the 0.12.x structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── .gitignore\n├── main.wasp\n├── src\n│   ├── client\n│   │   ├── Main.css\n│   │   ├── MainPage.jsx\n│   │   ├── react-app-env.d.ts\n│   │   ├── tsconfig.json\n│   │   └── waspLogo.png\n│   ├── server\n│   │   └── tsconfig.json\n│   ├── shared\n│   │   └── tsconfig.json\n│   └── .waspignore\n└── .wasproot\n```\n\n----------------------------------------\n\nTITLE: Installing WSL on Windows\nDESCRIPTION: Command to install WSL with the default Ubuntu distribution.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-11-21-guide-windows-development-wasp-wsl.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwsl —install\n```\n\n----------------------------------------\n\nTITLE: Implementing Edit Meme Page Component\nDESCRIPTION: React component that handles meme editing functionality, including form handling, data fetching, and display of meme information.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect, FormEventHandler } from 'react';\nimport { useQuery } from '@wasp/queries';\nimport editMeme from '@wasp/actions/editMeme';\nimport getMeme from '@wasp/queries/getMeme';\nimport { useParams } from 'react-router-dom';\nimport { AiOutlineEdit } from 'react-icons/ai';\n\nexport function EditMemePage() {\n  const { id } = useParams<{ id: string }>();\n\n  const [text0, setText0] = useState('');\n  const [text1, setText1] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { data: meme, isLoading: isMemeLoading, error: memeError } = useQuery(getMeme, { id: id });\n\n  useEffect(() => {\n    if (meme) {\n      setText0(meme.text0);\n      setText1(meme.text1);\n    }\n  }, [meme]);\n\n  const handleSubmit: FormEventHandler<HTMLFormElement> = async (e) => {\n    e.preventDefault();\n    try {\n      setIsLoading(true);\n      await editMeme({ id, text0, text1 });\n    } catch (error: any) {\n      alert('Error generating meme: ' + error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (isMemeLoading) return 'Loading...';\n  if (memeError) return 'Error: ' + memeError.message;\n\n  return (\n    <div className='p-4'>\n      <h1 className='text-3xl font-bold mb-4'>Edit Meme</h1>\n      <form onSubmit={handleSubmit}>\n        <div className='flex gap-2 items-end'>\n          <div className='mb-2'>\n            <label htmlFor='text0' className='block font-bold mb-2'>\n              Text 0:\n            </label>\n            <textarea\n              id='text0'\n              value={text0}\n              onChange={(e) => setText0(e.target.value)}\n              className='border rounded px-2 py-1'\n            />\n          </div>\n          <div className='mb-2'>\n            <label htmlFor='text1' className='block font-bold mb-2'>\n              Text 1:\n            </label>\n\n            <div className='flex items-center mb-2'>\n              <textarea\n                id='text1'\n                value={text1}\n                onChange={(e) => setText1(e.target.value)}\n                className='border rounded px-2 py-1'\n              />\n            </div>\n          </div>\n        </div>\n\n        <button\n          type='submit'\n          className={`flex items-center gap-1 bg-primary-200 hover:bg-primary-300 border-2 text-black text-sm py-1 px-2 rounded ${\n            isLoading ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'\n          } $}`}\n        >\n          <AiOutlineEdit />\n          {!isLoading ? 'Save Meme' : 'Saving...'}\n        </button>\n      </form>\n      {!!meme && (\n        <div className='mt-4  mb-2 bg-gray-100 rounded-lg p-4'>\n          <img src={meme.url} width='500px' />\n          <div className='flex flex-col items-start mt-2'>\n            <div>\n              <span className='text-sm text-gray-700'>Topics: </span>\n              <span className='text-sm italic text-gray-500'>{meme.topics}</span>\n            </div>\n            <div>\n              <span className='text-sm text-gray-700'>Audience: </span>\n              <span className='text-sm italic text-gray-500'>{meme.audience}</span>\n            </div>\n            <div>\n              <span className='text-sm text-gray-700'>ImgFlip Template: </span>\n              <span className='text-sm italic text-gray-500'>{meme.template.name}</span>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Documentation Structure Example in Markdown\nDESCRIPTION: Example structure showing the organization of Wasp's documentation sections\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/writingguide.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Wasp docs writing guide\\n\\nOur docs are the first touch point for new Wasp users.\\nIt's the top of our funnel.\\nIf we lose them on the docs, they will never get a chance to use Wasp (even if they might like it).\n```\n\n----------------------------------------\n\nTITLE: Model Definition in schema.prisma\nDESCRIPTION: Example of how entities should be defined in the schema.prisma file after migration, showing the syntax transformation from entity to model.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_13\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Task {\n  // Stays the same\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the starter project repository\nDESCRIPTION: Command to clone the 'start' branch of the WebSockets React project repository.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-09-build-real-time-voting-app-websockets-react-typescript.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --branch start https://github.com/vincanger/websockets-react.git\n```\n\n----------------------------------------\n\nTITLE: Cleaning Wasp Project Files\nDESCRIPTION: Example of using the clean command to remove generated code and cached artifacts from a Wasp project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/general/cli.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp clean\n\n🐝 --- Deleting the .wasp/ directory... -------------------------------------------\n\n✅ --- Deleted the .wasp/ directory. ----------------------------------------------\n\n🐝 --- Deleting the node_modules/ directory... ------------------------------------\n\n✅ --- Deleted the node_modules/ directory. ---------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Selecting Node.js Version with NVM\nDESCRIPTION: Command to set the Node.js version for the current shell session using Node Version Manager (NVM).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/introduction/quick-start.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnvm use 20\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in Markdown\nDESCRIPTION: This code snippet shows how to import and use custom React components within a Markdown file for a blog post. It includes imports for Link, useBaseUrl, and custom components like InBlogCta, WaspIntro, and ImgWithCaption.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-01-31-wasp-beta-launch-review.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n\nimport InBlogCta from './components/InBlogCta';\nimport WaspIntro from './_wasp-intro.md';\nimport ImgWithCaption from './components/ImgWithCaption'\n```\n\n----------------------------------------\n\nTITLE: Adding Link Wrapper to Blog Posts in React\nDESCRIPTION: Wrapping blog post titles with a Link component to enable navigation to individual post pages.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-01-smol-ai-vs-wasp-ai.md#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Link to={`/post/${post.id}`}>\n```\n\n----------------------------------------\n\nTITLE: Running Arbitrary Fly Commands for Wasp App\nDESCRIPTION: This command demonstrates how to run arbitrary Fly.io commands for a Wasp app, such as listing secrets for the server app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/cli.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd secrets list --context server\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Domain Certificate\nDESCRIPTION: Command to create SSL certificate for a custom domain on Fly.io client app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/cli.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd --context client certs create mycoolapp.com\n```\n\n----------------------------------------\n\nTITLE: Improving Function Naming and Structure in JavaScript\nDESCRIPTION: This snippet shows the improved version of the previous function, with clear and descriptive naming that accurately reflects its purpose and functionality.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-10-12-on-importance-of-naming-in-programming.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function fetchDemographicStatsForFirstAndLastName (\n  firstName, lastName\n) {\n  const users = await fetchUsersByFirstAndLastName(\n    firstName, lastName\n  );\n  return {\n    averageAge: avg(users.map(u => u.stats.age)),\n    medianSalary: median(users.map(u => u.stats.salary))\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Jobs in Wasp\nDESCRIPTION: Demonstrates how to set up a scheduled cron job in Wasp that runs every hour, showing the simplicity of implementing background tasks\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-04-25-first-framework-that-lets-you-visualize-react-node-app-code.md#2025-04-22_snippet_0\n\nLANGUAGE: c\nCODE:\n```\njob dailyStatsJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { calculateDailyStats } from \"@src/calculateDailyStats\"\n  },\n  schedule: {\n    cron: \"0 * * * *\" \n  },\n  entities: [User, DailyStats, Logs, PageViewSource]\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind Configuration Update\nDESCRIPTION: Example of updating Tailwind configuration to use resolveProjectPath for content paths.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './src/**/*.{js,jsx,ts,tsx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { resolveProjectPath } = require('wasp/dev')\n\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    resolveProjectPath('./src/**/*.{js,jsx,ts,tsx}'),\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Mailgun EU Region Configuration\nDESCRIPTION: Sets the API URL for Mailgun's EU region when using a domain registered in the EU region.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/email/email.md#2025-04-22_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\nMAILGUN_API_URL=https://api.eu.mailgun.net\n```\n\n----------------------------------------\n\nTITLE: Accessing Discord User ID in TypeScript\nDESCRIPTION: This code retrieves a Discord identity from a user object and then accesses the Discord user ID. The ID is typically a string of numbers representing the unique Discord user identifier.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/entities/_discord-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst discordIdentity = user.identities.discord\n\n// Discord User ID for example \"80351110224678912\"\ndiscordIdentity.id\n```\n\n----------------------------------------\n\nTITLE: Opening Wasp Database Studio\nDESCRIPTION: This command opens Prisma Studio in the browser, allowing you to view and edit data in your database. It provides a visual interface to interact with your database entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/04-entities.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwasp db studio\n```\n\n----------------------------------------\n\nTITLE: Configuring Social Authentication and Routes in Wasp\nDESCRIPTION: This code snippet outlines the structure of a main.wasp file, including app configuration for authentication and route/page definitions. It serves as a skeleton for setting up social authentication and a login page in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/_wasp-file-structure-note.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n// Configuring the social authentication\napp myApp {\n  auth: { ... }\n}\n\n// Defining routes and pages\nroute LoginRoute { ... }\npage LoginPage { ... }\n```\n\n----------------------------------------\n\nTITLE: Creating Prisma Schema File Structure\nDESCRIPTION: Shows the basic structure of a Prisma schema file including datasource and generator blocks for both SQLite and PostgreSQL databases.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using getEmail in React Components\nDESCRIPTION: Example of using the getEmail utility function to display user emails in a task list component. The function requires a user object with auth and identities relations included.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/entities/entities.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getEmail } from 'wasp/auth'\n\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {getEmail(task.user)}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp CLI\nDESCRIPTION: Shell command for installing the Wasp CLI tool using curl.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-09-17-from-idea-to-20k-in-days-how-wasp-accelerated-nuloapps-launch.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Setting Up Authentication Routes and Pages in Wasp\nDESCRIPTION: This snippet defines the routes and pages needed for the authentication flow, including login, signup, password reset, and email verification. Each route points to a corresponding page component imported from auth.jsx/tsx.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/email.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\n// 6. Define the routes\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@client/pages/auth.jsx\"\n}\n\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { Signup } from \"@client/pages/auth.jsx\"\n}\n\nroute RequestPasswordResetRoute { path: \"/request-password-reset\", to: RequestPasswordResetPage }\npage RequestPasswordResetPage {\n  component: import { RequestPasswordReset } from \"@client/pages/auth.jsx\",\n}\n\nroute PasswordResetRoute { path: \"/password-reset\", to: PasswordResetPage }\npage PasswordResetPage {\n  component: import { PasswordReset } from \"@client/pages/auth.jsx\",\n}\n\nroute EmailVerificationRoute { path: \"/email-verification\", to: EmailVerificationPage }\npage EmailVerificationPage {\n  component: import { EmailVerification } from \"@client/pages/auth.jsx\",\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Email in React Component (TypeScript)\nDESCRIPTION: This snippet illustrates the usage of getEmail helper in a TypeScript React component. It includes type annotations for the user prop and imports the AuthUser type from Wasp's auth module.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/_get-email.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getEmail, AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const email = getEmail(user)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Default main.wasp Configuration for JavaScript Projects\nDESCRIPTION: Shows the default main.wasp configuration file generated for JavaScript projects, containing app declaration, route definition, and page component import.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/02-project-structure.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"^0.13.0\" // Pins the version of Wasp to use.\n  },\n  title: \"TodoApp\" // Used as the browser tab title. Note that all strings in Wasp are double quoted!\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  // We specify that the React implementation of the page is exported from\n  // `src/MainPage.jsx`. This statement uses standard JS import syntax.\n  // Use `@src` to reference files inside the `src` folder.\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Wasp Client Manually to Cloudflare Pages using Shell\nDESCRIPTION: Uses the Cloudflare Wrangler CLI (`npx wrangler`) to deploy the built client application located in the `./build` directory (relative to `.wasp/build/web-app`) to Cloudflare Pages. The `--commit-dirty=true` flag allows deployment even with uncommitted changes, and `--branch=main` specifies the target branch for the deployment. Assumes the user is currently positioned in the `.wasp/build/web-app` directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nnpx wrangler pages deploy ./build --commit-dirty=true --branch=main\n```\n\n----------------------------------------\n\nTITLE: Setting Up Wasp App on Fly.io\nDESCRIPTION: This command sets up the client and server apps on Fly.io without deploying them, creating necessary configuration files.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/cli.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly setup <app-name> <region>\n```\n\n----------------------------------------\n\nTITLE: Copying Fly.io Configuration File\nDESCRIPTION: Command to copy the Fly.io configuration file (fly.toml) to the project root directory for safekeeping.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/paas.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncp fly.toml ../../\n```\n\n----------------------------------------\n\nTITLE: Creating New Wasp Project\nDESCRIPTION: Command to create a new Wasp project using the CLI\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/introduction/quick-start.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwasp new\n```\n\n----------------------------------------\n\nTITLE: Default main.wasp Configuration for TypeScript Projects\nDESCRIPTION: Shows the default main.wasp configuration file for TypeScript projects, which is identical to the JavaScript version except for the implied TSX file extension in the import.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/02-project-structure.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"^0.13.0\" // Pins the version of Wasp to use.\n  },\n  title: \"TodoApp\" // Used as the browser tab title. Note that all strings in Wasp are double quoted!\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  // We specify that the React implementation of the page is exported from\n  // `src/MainPage.tsx`. This statement uses standard JS import syntax.\n  // Use `@src` to reference files inside the `src` folder.\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Wasp CLI to Create a New Project\nDESCRIPTION: This snippet demonstrates how to use the Wasp CLI to create a new project, showing the available template options through an interactive prompt.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-30-tutorial-jam.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[1] basic (default)\n    Simple starter template with a single page.\n[2] todo-ts\n    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.\n[3] saas\n    Everything a SaaS needs! Comes with Google auth, ChatGPT API, Tailwind, & Stripe payments.\n[4] embeddings\n    Comes with code for generating vector embeddings and performing vector similarity search.\n[5] WaspAI\n    An AI powered code scaffolder. Tell it what kind of app you want and get a scaffolded fullstack app\n```\n\n----------------------------------------\n\nTITLE: Running HLint Analysis\nDESCRIPTION: Shell command to run HLint linting tool on the Wasp codebase.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n./run hlint\n```\n\n----------------------------------------\n\nTITLE: Email Verification Token Handling\nDESCRIPTION: Implementation of email verification token handling using the verifyEmail action from Wasp auth client\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/email.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { verifyEmail } from 'wasp/client/auth'\n...\nawait verifyEmail({ token });\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyEmail } from 'wasp/client/auth'\n...\nawait verifyEmail({ token });\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to change directory to the WebSockets example project folder.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/examples/websockets-realtime-voting/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/websockets-realtime-voting\n```\n\n----------------------------------------\n\nTITLE: Copying Fly.io Configuration\nDESCRIPTION: Command to copy the fly.toml configuration file to the project root directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncp fly.toml ../../\n```\n\n----------------------------------------\n\nTITLE: Main Page Prop Typing for Authenticated User (React, TypeScript)\nDESCRIPTION: TypeScript version of the main page demonstrating proper prop typing with AuthUser. Ensures compile-time safety and clear documentation of available user data. Depends on 'wasp/auth' definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/07-auth.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuthUser } from 'wasp/auth'\\n\\n// highlight-next-line\\nexport const MainPage = ({ user }: { user: AuthUser }) => {\\n  // Do something with the user\\n  // ...\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Deploying New Wasp App to Fly.io\nDESCRIPTION: Command to deploy a new Wasp application to Fly.io with a single command, specifying app name and region.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/cli.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly launch my-wasp-app mia\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Authentication\nDESCRIPTION: Wasp configuration for enabling GitHub OAuth authentication\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-13-how-to-add-auth-with-lucia-to-your-react-nextjs-app.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      // 2. Enable Github Auth\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User Data in MainPage Component (JavaScript)\nDESCRIPTION: Shows how to access the authenticated user data in a JavaScript React component through props when authRequired is set to true.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/07-auth.md#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// highlight-next-line\nexport const MainPage = ({ user }) => {\n  // Do something with the user\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: API-Specific Middleware Configuration in Wasp - JavaScript\nDESCRIPTION: Example of configuring middleware for a specific API endpoint in a Wasp application using JavaScript. Shows how to define the middleware for a webhook callback route.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/middleware-config.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\napi webhookCallback {\n  fn: import { webhookCallback } from \"@src/apis\",\n  middlewareConfigFn: import { webhookCallbackMiddlewareFn } from \"@src/apis\",\n  httpRoute: (POST, \"/webhook/callback\"),\n  auth: false\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Environment variable configuration for GitHub OAuth credentials.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/github.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGITHUB_CLIENT_ID=your-github-client-id\nGITHUB_CLIENT_SECRET=your-github-client-secret\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Wasp\nDESCRIPTION: Example showing the process of uninstalling Wasp from the system, including confirmation prompt and cleanup steps.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/general/cli.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp uninstall\n\n🐝 --- Uninstalling Wasp ... ------------------------------------------------------\n\n We will remove the following directories:\n   {home}/.local/share/wasp-lang/\n   {home}/.cache/wasp/\n\n We will also remove the following files:\n   {home}/.local/bin/wasp\n\n Are you sure you want to continue? [y/N]\n y\n\n✅ --- Uninstalled Wasp -----------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Queries in TypeScript\nDESCRIPTION: Shows how to import and use a declared query in TypeScript, including type imports for server-side implementation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/queries.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\n// Use it on the client\nimport { getFoo } from 'wasp/client/operations'\n\n// Use it on the server\nimport { getFoo } from 'wasp/server/operations'\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport { type GetFoo } from 'wasp/server/operations'\n```\n\n----------------------------------------\n\nTITLE: Postgres Database Connection String Configuration\nDESCRIPTION: Example of the DATABASE_URL environment variable that is automatically set when using Postgres with the wasp-app-runner script.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/wasp-app-runner/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=postgresql://postgres:devpass@localhost:5432/postgres\n```\n\n----------------------------------------\n\nTITLE: Importing ShowForTs Component in JavaScript/TypeScript\nDESCRIPTION: This code imports the `ShowForTs` component from a local project path (`@site/src/components/TsJsHelpers`). This component is likely part of the documentation website's infrastructure (indicated by `@site`, common in Docusaurus) and used to conditionally display content specifically tailored for TypeScript users, enhancing the documentation's relevance based on the selected language context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/_superjson-note.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ShowForTs } from '@site/src/components/TsJsHelpers';\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind Plugins to Configuration - JavaScript\nDESCRIPTION: This JavaScript configuration extends the tailwind.config.cjs file to include additional plugins by requiring @tailwindcss/forms and @tailwindcss/typography. By adding these plugins to the plugins array, their features are enabled within Tailwind's build process. Requires installed plugin packages and that the configuration file exists at the project root. The snippet assumes familiarity with CommonJS syntax and the Tailwind plugin system.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/css-frameworks.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\\nmodule.exports = {\\n  // ...\\n  plugins: [\\n    require('@tailwindcss/forms'),\\n    require('@tailwindcss/typography'),\\n  ],\\n  // ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Discord Environment Variables\nDESCRIPTION: Environment variable configuration for Discord OAuth client credentials.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/discord.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDISCORD_CLIENT_ID=your-discord-client-id\nDISCORD_CLIENT_SECRET=your-discord-client-secret\n```\n\n----------------------------------------\n\nTITLE: Email Auth Fields Definition After Migration\nDESCRIPTION: Updated implementation of signup fields validation using the new defineUserSignupFields function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const fields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address;\n    if (typeof address !== 'string') {\n      throw new Error('Address is required');\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long');\n    }\n    return address;\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Entities\nDESCRIPTION: Definition of User and SocialLogin entities required for Google authentication, including their relationships and fields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/google.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\n    id          Int     @id @default(autoincrement())\n    externalAuthAssociations  SocialLogin[]\npsl=}\n\nentity SocialLogin {=psl\n  id          Int       @id @default(autoincrement())\n  provider    String\n  providerId  String\n  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId      Int\n  createdAt   DateTime  @default(now())\n  @@unique([provider, providerId, userId])\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Deploying to Netlify Production\nDESCRIPTION: Command to deploy the Wasp web client to the Netlify production environment after initial setup is complete.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/manually.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnetlify deploy --prod\n```\n\n----------------------------------------\n\nTITLE: Markdown Contact Page Content\nDESCRIPTION: Simple markdown page with contact information including a Discord link and email address.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/contact.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Contact\n---\n\n<!-- TODO: update the email once we setup @wasp.sh-->\nYou can find us on [Discord](https://discord.gg/rzdnErX) or you can reach out to us via email at hi@wasp-lang.dev.\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js with NVM\nDESCRIPTION: Command to install Node.js version 20 using Node Version Manager (NVM)\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/introduction/quick-start.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnvm install 20\n```\n\n----------------------------------------\n\nTITLE: Docker Build Error with Python on Alpine\nDESCRIPTION: Error when building Docker image on M1/aarch64 architecture with missing Python package in Alpine Linux, showing the need to use python3 instead.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/examples/waspleau/Notes.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n => [server-production 1/5] WORKDIR /app                                                                          0.0s\n => ERROR [server-builder 1/6] RUN apk add --no-cache build-base libtool autoconf automake python                 0.5s\n------\n > [server-builder 1/6] RUN apk add --no-cache build-base libtool autoconf automake python:\n#7 0.194 fetch https://dl-cdn.alpinelinux.org/alpine/v3.14/main/aarch64/APKINDEX.tar.gz\n#7 0.366 fetch https://dl-cdn.alpinelinux.org/alpine/v3.14/community/aarch64/APKINDEX.tar.gz\n#7 0.502 ERROR: unable to select packages:\n#7 0.517   python (no such package):\n#7 0.517     required by: world[python]\n------\nexecutor failed running [/bin/sh -c apk add --no-cache build-base libtool autoconf automake python]: exit code: 1\n ▸    Error: docker build exited with Error: 1\n```\n\n----------------------------------------\n\nTITLE: Login Function Parameter Changes - Before Migration\nDESCRIPTION: Shows the previous login function implementation where username and password were passed as separate parameters.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-16-to-0-17.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { login } from 'wasp/client/auth'\n\nawait login(usernameValue, passwordValue)\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database in Wasp\nDESCRIPTION: Sets the database system to PostgreSQL in the Wasp app configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/backends.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  db: {\n    system: PostgreSQL,\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertical Social Buttons Layout\nDESCRIPTION: Shows how to change the social buttons layout to vertical orientation using the socialLayout prop.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/ui.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass in the socialLayout prop\n      socialLayout=\"vertical\"\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: VSCode Extension Core Implementation\nDESCRIPTION: Main TypeScript implementation file for the VSCode Wasp extension that handles language server integration and IDE features.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-12-01-beta-ide-improvements.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nhttps://github.com/wasp-lang/vscode-wasp/blob/main/src/extension.ts\n```\n\n----------------------------------------\n\nTITLE: Running Wasp Development Tasks\nDESCRIPTION: Collection of shell commands for building, testing, and running the Wasp development environment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./run build:all\n```\n\nLANGUAGE: sh\nCODE:\n```\n./run test\n```\n\nLANGUAGE: sh\nCODE:\n```\n./run wasp-cli\n```\n\n----------------------------------------\n\nTITLE: Customizing Auth UI Colors in JavaScript\nDESCRIPTION: Defines custom color tokens for the Auth UI appearance using Stitches. Sets brand colors, accent colors, and button text colors.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/ui.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const authAppearance = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: API-Specific Middleware Configuration in Wasp\nDESCRIPTION: Example of configuring custom middleware for a specific API endpoint in the Wasp configuration file, specifically for a webhook callback.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/middleware-config.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\napi webhookCallback {\n  fn: import { webhookCallback } from \"@src/apis\",\n  middlewareConfigFn: import { webhookCallbackMiddlewareFn } from \"@src/apis\",\n  httpRoute: (POST, \"/webhook/callback\"),\n  auth: false\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified MainPage Component\nDESCRIPTION: Shows the cleaned up version of the MainPage component with minimal implementation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/03-pages.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const MainPage = () => {\n  return <div>Hello world!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Lucia Authentication Library\nDESCRIPTION: Command to install the Lucia authentication library in the Next.js project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-13-how-to-add-auth-with-lucia-to-your-react-nextjs-app.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install lucia\n```\n\n----------------------------------------\n\nTITLE: Useful Fly.io CLI Commands\nDESCRIPTION: Common Fly.io CLI commands for managing deployments, viewing logs, listing secrets, and accessing the console.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/paas.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflyctl logs\nflyctl secrets list\nflyctl ssh console\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp Framework via Bash\nDESCRIPTION: Command to install the Wasp framework using curl\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL <https://get.wasp.sh/installer.sh> | sh\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Fibonacci Sequence in Haskell\nDESCRIPTION: Demonstrates Haskell's lazy evaluation by creating an infinite Fibonacci sequence using list comprehension and self-referential definition. The example shows how to define and access an infinite data structure that's only evaluated when needed.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-08-26-how-and-why-i-got-started-with-haskell.md#2025-04-22_snippet_0\n\nLANGUAGE: haskell\nCODE:\n```\nfibs :: [Integer]\nfibs = 0 : 1 : zipWith (+) fibs (tail fibs)\n\ntake 10 fibs -- [0,1,1,2,3,5,8,13,21,34]\n```\n\n----------------------------------------\n\nTITLE: Full App Configuration Structure in Wasp\nDESCRIPTION: Provides a comprehensive overview of the structure of the `app` declaration in Wasp. It includes the required fields `wasp.version` and `title`, the optional `head` field, and placeholders for other configuration dictionaries like `auth`, `client`, `server`, `db`, `emailSender`, and `webSocket`. Each of these dictionaries allows for further customization of specific application aspects detailed in separate documentation sections.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/customizing-app.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"ToDo App\",\n  head: [\n    \"<link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\\\" />\"\n  ],\n  auth: {\n    // ...\n  },\n  client: {\n    // ...\n  },\n  server: {\n    // ...\n  },\n  db: {\n    // ...\n  },\n  emailSender: {\n    // ...\n  },\n  webSocket: {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying TypeApplications with read function in Haskell\nDESCRIPTION: Demonstrates the use of TypeApplications to specify the type for the read function. The @Int syntax is used to indicate that the string \"5\" should be interpreted as an Int.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-09-01-haskell-forall-tutorial.md#2025-04-22_snippet_7\n\nLANGUAGE: Haskell\nCODE:\n```\nshow (read @Int \"5\")\n```\n\n----------------------------------------\n\nTITLE: Prisma Error When Initializing Without Entities\nDESCRIPTION: Error message when trying to initialize Prisma client without any entities defined in the schema, causing initialization to fail during server startup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/examples/waspleau/Notes.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nServer: /Users/shayne/dev/wasp/examples/waspleau/.wasp/out/server/node_modules/.prisma/client/index.js:3\nServer (stderr):     throw new Error(\nServer (stderr):           ^\nServer (stderr):\nServer (stderr): Error: @prisma/client did not initialize yet. Please run \"prisma generate\" and try to import it again.\nServer (stderr): In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues\nServer (stderr):     at new PrismaClient (/Users/shayne/dev/wasp/examples/waspleau/.wasp/out/server/node_modules/.prisma/client/index.js:3:11)\nServer (stderr):     at createDbClient (file:///Users/shayne/dev/wasp/examples/waspleau/.wasp/out/server/src/dbClient.js:5:24)\nServer (stderr):     at file:///Users/shayne/dev/wasp/examples/waspleau/.wasp/out/server/src/dbClient.js:11:18\nServer (stderr):     at ModuleJob.run (internal/modules/esm/module_job.js:152:23)\nServer (stderr):     at async Loader.import (internal/modules/esm/loader.js:166:24)\nServer (stderr):     at async Object.loadESM (internal/process/esm_loader.js:68:5)\nServer (stderr): [nodemon] app crashed - waiting for file changes before starting...\n```\n\n----------------------------------------\n\nTITLE: Telemetry Status Check\nDESCRIPTION: Displays the output of checking telemetry status using the 'wasp telemetry' command.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/general/cli.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp telemetry\n\nTelemetry is currently: ENABLED\nTelemetry cache directory: /home/user/.cache/wasp/telemetry/\nLast time telemetry data was sent for this project: 2021-05-27 09:21:16.79537226 UTC\nOur telemetry is anonymized and very limited in its scope: check https://wasp.sh/docs/telemetry for more details.\n```\n\n----------------------------------------\n\nTITLE: Setting Client URL Environment Variable\nDESCRIPTION: Command to set the web client URL environment variable for CORS configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/cli.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd --context server secrets set WASP_WEB_CLIENT_URL=https://mycoolapp.com\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Domain to Fly.io App\nDESCRIPTION: This command adds a custom domain to the Fly.io client app for a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/cli.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd --context client certs create mycoolapp.com\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in Markdown\nDESCRIPTION: Import statements for React components and utilities used in the blog post's MDX format.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-01-23-wasp-launch-week-five.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n\nimport InBlogCta from './components/InBlogCta';\nimport WaspIntro from './_wasp-intro.md';\nimport ImgWithCaption from './components/ImgWithCaption'\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Routes and Pages in Wasp (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define the necessary routes and pages for authentication in the Wasp file for a JavaScript project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/google.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Server Environment Variables on Fly.io\nDESCRIPTION: Example command showing how to set server environment variables when deploying to Fly.io using the flyctl CLI tool.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/env-vars.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nflyctl secrets set SOME_VAR_NAME=somevalue\n```\n\n----------------------------------------\n\nTITLE: Opening Database Studio in Wasp\nDESCRIPTION: This command opens the Wasp database studio for manual database management. It's used to add favorite Twitter users for tweet scraping.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nwasp db studio\n```\n\n----------------------------------------\n\nTITLE: Separate Prisma Schema Configuration in Wasp\nDESCRIPTION: Shows how data models can now be defined in a separate prisma.schema file instead of the main .wasp config file\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-07-15-wasp-launch-week-six.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  username String @unique\n  posts Post[]\n}\n\nmodel Post {\n  id Int @id @default(autoincrement())\n  title String\n  content String\n  author User @relation(fields: [authorId], references: [id])\n  authorId Int\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Web App Build Directory in Bash\nDESCRIPTION: This command changes the current directory to the web app build folder within the Wasp project structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/deployment/_building-the-web-client.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd .wasp/build/web-app\n```\n\n----------------------------------------\n\nTITLE: Prisma User Model Definition\nDESCRIPTION: Database schema definition for the User entity with required fields for Discord authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/discord.md#2025-04-22_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          Int    @id @default(autoincrement())\n  username    String @unique\n  displayName String\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Starting Headless Test Environment\nDESCRIPTION: Command to start the application in headless test mode.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/examples/todoApp/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm run headless:start\n```\n\n----------------------------------------\n\nTITLE: Implementing LoginPage Component in JavaScript\nDESCRIPTION: This snippet shows how to implement a login page component in JavaScript using Wasp's LoginForm component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function LoginPage() {\n  return <LoginForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Route in Wasp\nDESCRIPTION: Demonstrates how to define a route in a Wasp application's main configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/links.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nroute TaskRoute { path: \"/task/:id\", to: TaskPage }\npage TaskPage { ... }\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for Tailwind\nDESCRIPTION: PostCSS configuration file required for Tailwind CSS processing and autoprefixer integration\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-16-tailwind-feature-announcement.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind Directives in CSS\nDESCRIPTION: Shows how to import Tailwind's base, components, and utilities into a CSS file in a Wasp project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/css-frameworks.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* ... */\n```\n\n----------------------------------------\n\nTITLE: Rendering Image with Docusaurus Component\nDESCRIPTION: JSX code snippet using Docusaurus's useBaseUrl hook to render a centered image of the founders at YCombinator HQ.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-02-23-journey-to-ycombinator.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<p align=\"center\">\n  <img alt=\"Martin & Matija at YCombinator HQ\"\n      src={useBaseUrl('img/us-at-ycombinator.jpg')}\n      height=\"400px\"\n  />\n</p>\n```\n\n----------------------------------------\n\nTITLE: Creating New Wasp Project\nDESCRIPTION: Command to create a new Wasp project named TodoApp using the Wasp CLI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/01-create.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ wasp new TodoApp\n```\n\n----------------------------------------\n\nTITLE: Scaffolding createMeme Action Function\nDESCRIPTION: Initial scaffold of the createMeme action function with type definitions for input and output.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreateMeme } from '@wasp/actions/types'\n\ntype CreateMemeInput = void\ntype CreateMemeOutput = void\n\nexport const createMeme: CreateMeme<CreateMemeInput, CreateMemeOutput> = async (args, context) => {\n  // Implementation goes here\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Data Insertion for Phrases\nDESCRIPTION: SQL commands for seeding the phrases table with initial translation data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-03-08-building-a-full-stack-app-supabase-vs-wasp.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO phrases(id,\"group\",translations_en,translations_it) VALUES (1,'general','Yes','Si');\nINSERT INTO phrases(id,\"group\",translations_en,translations_it) VALUES (2,'general','No','No');\n...\n```\n\n----------------------------------------\n\nTITLE: Initial Database Migration SQL\nDESCRIPTION: SQL migration script generated by Prisma to create the Match table with all necessary fields and constraints.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2025-04-02-an-introduction-to-database-migrations.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE \"Match\" (\n    \"id\" TEXT NOT NULL,\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"isComplete\" BOOLEAN NOT NULL DEFAULT false,\n    \"currentSet\" INTEGER NOT NULL DEFAULT 1,\n    \"server\" INTEGER NOT NULL DEFAULT 1,\n    \"createdById\" TEXT NOT NULL,\n    \"player1Name\" TEXT NOT NULL,\n    \"player2Name\" TEXT NOT NULL,\n    \"player1Points\" TEXT NOT NULL DEFAULT '0',\n    \"player2Points\" TEXT NOT NULL DEFAULT '0',\n    \"player1Games\" INTEGER NOT NULL DEFAULT 0,\n    \"player2Games\" INTEGER NOT NULL DEFAULT 0,\n\n    CONSTRAINT \"Match_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\n\n-- ... some more SQL here ...\n```\n\n----------------------------------------\n\nTITLE: Defining User Schema with Prisma\nDESCRIPTION: This Prisma schema definition (`schema.prisma`) outlines the `User` model used for authentication. It includes an auto-incrementing integer `id` as the primary key, a unique `username`, and a `displayName` field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/keycloak.md#2025-04-22_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          Int    @id @default(autoincrement())\n  username    String @unique\n  displayName String\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: React Import Statements JSX\nDESCRIPTION: Import statements for React components and utilities used in the blog post, including a custom ImgWithCaption component and base URL utility.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-05-19-hackathon-2-review.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ImgWithCaption from './components/ImgWithCaption'\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n```\n\n----------------------------------------\n\nTITLE: Creating .dockerignore for Railway Client\nDESCRIPTION: Create a .dockerignore file to exclude node_modules from the Docker build.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnode_modules/\n```\n\n----------------------------------------\n\nTITLE: Custom Domain Certificate Creation\nDESCRIPTION: Command to create SSL certificates for a custom domain on Fly.io for the client app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/deployment/cli.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd --context client certs create mycoolapp.com\n```\n\n----------------------------------------\n\nTITLE: Script Permission Command\nDESCRIPTION: Shell command to make the deployment script executable.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/manually.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x deploy_client.sh\n```\n\n----------------------------------------\n\nTITLE: Wasp Syntax Definition\nDESCRIPTION: TextMate grammar definition for Wasp syntax highlighting in VSCode, defining syntax patterns and color themes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-12-01-beta-ide-improvements.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhttps://github.com/wasp-lang/vscode-wasp/blob/main/syntaxes/wasp.tmLanguage.yaml\n```\n\n----------------------------------------\n\nTITLE: Enhanced User Entity with Signup Completion Flag\nDESCRIPTION: Shows how to extend the User entity with an isSignupComplete flag to track the signup process status.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    username                  String?       @unique\n    isSignupComplete          Boolean       @default(false)\n    externalAuthAssociations  SocialLogin[]\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Deploying Client to Netlify\nDESCRIPTION: Deploy the Wasp client application to Netlify using the Netlify CLI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/manually.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnetlify deploy\n```\n\n----------------------------------------\n\nTITLE: Setting up Provider in Root Component (JavaScript)\nDESCRIPTION: This snippet shows how to set up a provider (Redux in this case) in the root component of a Wasp application using JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/client-config.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.jsx\",\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Outlet } from 'react-router-dom'\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root() {\n  return (\n    <Provider store={store}>\n      <Outlet />\n    </Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables Post-Deployment\nDESCRIPTION: Command to set environment variables for an existing deployment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/cli.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd secrets set GOOGLE_CLIENT_ID=<...> GOOGLE_CLIENT_SECRET=<...> --context=server\n```\n\n----------------------------------------\n\nTITLE: Heroku PostgreSQL Migration Error\nDESCRIPTION: Error logs from a failed Prisma migration on Heroku PostgreSQL, showing syntax incompatibility between SQLite's AUTOINCREMENT and PostgreSQL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/examples/waspleau/Notes.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n2021-12-16T02:18:51.366162+00:00 heroku[web.1]: Starting process with command `npm run start-production`\n2021-12-16T02:18:52.504875+00:00 app[web.1]:\n2021-12-16T02:18:52.504892+00:00 app[web.1]: > server@0.0.0 start-production /app/server\n2021-12-16T02:18:52.504903+00:00 app[web.1]: > npm run db-migrate-prod && NODE_ENV=production node ./src/server.js \"npm\" \"run\" \"start-production\"\n2021-12-16T02:18:52.504903+00:00 app[web.1]:\n2021-12-16T02:18:52.793283+00:00 app[web.1]:\n2021-12-16T02:18:52.793299+00:00 app[web.1]: > server@0.0.0 db-migrate-prod /app/server\n2021-12-16T02:18:52.793300+00:00 app[web.1]: > prisma migrate deploy --schema=../db/schema.prisma\n2021-12-16T02:18:52.793300+00:00 app[web.1]:\n2021-12-16T02:18:53.589996+00:00 app[web.1]: Environment variables loaded from .env\n2021-12-16T02:18:53.735979+00:00 app[web.1]: Prisma schema loaded from ../db/schema.prisma\n2021-12-16T02:18:53.796395+00:00 app[web.1]: Datasource \"db\": PostgreSQL database \"dbne5egge1dhr8\", schema \"public\" at \"ec2-184-73-25-2.compute-1.amazonaws.com:5432\"\n2021-12-16T02:18:53.963795+00:00 app[web.1]:\n2021-12-16T02:18:53.963860+00:00 app[web.1]: 1 migration found in prisma/migrations\n2021-12-16T02:18:54.208399+00:00 app[web.1]: Error: P3018\n2021-12-16T02:18:54.208400+00:00 app[web.1]:\n2021-12-16T02:18:54.208402+00:00 app[web.1]: A migration failed to apply. New migrations can not be applied before the error is recovered from. Read more about how to resolve migration issues in a production database: https://pris.ly/d/migrate-resolve\n2021-12-16T02:18:54.208403+00:00 app[web.1]:\n2021-12-16T02:18:54.208404+00:00 app[web.1]: Migration name: 20211208191826_dummy\n2021-12-16T02:18:54.208404+00:00 app[web.1]:\n2021-12-16T02:18:54.208404+00:00 app[web.1]: Database error code: 42601\n2021-12-16T02:18:54.208405+00:00 app[web.1]:\n2021-12-16T02:18:54.208405+00:00 app[web.1]: Database error:\n2021-12-16T02:18:54.208406+00:00 app[web.1]: db error: ERROR: syntax error at or near \"AUTOINCREMENT\"\n2021-12-16T02:18:54.208406+00:00 app[web.1]:\n2021-12-16T02:18:54.208406+00:00 app[web.1]:\n2021-12-16T02:18:54.220572+00:00 app[web.1]: npm ERR! code ELIFECYCLE\n2021-12-16T02:18:54.220779+00:00 app[web.1]: npm ERR! errno 1\n2021-12-16T02:18:54.224811+00:00 app[web.1]: npm ERR! server@0.0.0 db-migrate-prod: `prisma migrate deploy --schema=../db/schema.prisma`\n2021-12-16T02:18:54.224850+00:00 app[web.1]: npm ERR! Exit status 1\n2021-12-16T02:18:54.224925+00:00 app[web.1]: npm ERR!\n2021-12-16T02:18:54.224925+00:00 app[web.1]: npm ERR! Failed at the server@0.0.0 db-migrate-prod script.\n2021-12-16T02:18:54.224953+00:00 app[web.1]: npm ERR! This is probably not a problem with npm. There is likely additional logging output above.\n2021-12-16T02:18:54.229064+00:00 app[web.1]:\n2021-12-16T02:18:54.229202+00:00 app[web.1]: npm ERR! A complete log of this run can be found in:\n2021-12-16T02:18:54.229274+00:00 app[web.1]: npm ERR!     /app/server/.npm/_logs/2021-12-16T02_18_54_225Z-debug.log\n2021-12-16T02:18:54.250005+00:00 app[web.1]: npm ERR! code ELIFECYCLE\n2021-12-16T02:18:54.250216+00:00 app[web.1]: npm ERR! errno 1\n2021-12-16T02:18:54.254548+00:00 app[web.1]: npm ERR! server@0.0.0 start-production: `npm run db-migrate-prod && NODE_ENV=production node ./src/server.js \"npm\" \"run\" \"start-production\"`\n2021-12-16T02:18:54.254618+00:00 app[web.1]: npm ERR! Exit status 1\n2021-12-16T02:18:54.254695+00:00 app[web.1]: npm ERR!\n2021-12-16T02:18:54.254741+00:00 app[web.1]: npm ERR! Failed at the server@0.0.0 start-production script.\n2021-12-16T02:18:54.254783+00:00 app[web.1]: npm ERR! This is probably not a problem with npm. There is likely additional logging output above.\n2021-12-16T02:18:54.258329+00:00 app[web.1]:\n2021-12-16T02:18:54.258473+00:00 app[web.1]: npm ERR! A complete log of this run can be found in:\n2021-12-16T02:18:54.258545+00:00 app[web.1]: npm ERR!     /app/server/.npm/_logs/2021-12-16T02_18_54_255Z-debug.log\n2021-12-16T02:18:54.433588+00:00 heroku[web.1]: Process exited with status 1\n2021-12-16T02:18:54.568000+00:00 heroku[web.1]: State changed from starting to crashed\n2021-12-16T02:19:01.210559+00:00 app[api]: Deployed web (f5ce2d583e48) by user thelastemail@gmail.com\n```\n\n----------------------------------------\n\nTITLE: Writing a Client Unit Test with Vitest (TypeScript)\nDESCRIPTION: A unit test for the typed `areThereAnyTasks` function using the Vitest framework in TypeScript. It imports the function and uses `test` and `expect` from Vitest to assert its behavior. This file (`src/helpers.test.ts`) demonstrates basic unit testing setup in a Wasp TypeScript project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/testing.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { test, expect } from \"vitest\";\n\nimport { areThereAnyTasks } from \"./helpers\";\n\ntest(\"areThereAnyTasks\", () => {\n  expect(areThereAnyTasks([])).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Current Node.js Version\nDESCRIPTION: Command to verify which version of Node.js is currently being used in the shell session.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/introduction/quick-start.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Password Migration\nDESCRIPTION: Bash command to install necessary packages for implementing the old password hashing algorithm.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nnpm install secure-password@4.0.0 sodium-native@3.3.0 --save-exact\n```\n\n----------------------------------------\n\nTITLE: Importing TypeScript Component Helper\nDESCRIPTION: Imports a React component used for displaying TypeScript-specific documentation content.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/_superjson-note.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ShowForTs } from '@site/src/components/TsJsHelpers';\n```\n\n----------------------------------------\n\nTITLE: Creating Wasp SaaS Project\nDESCRIPTION: Command to create a new Wasp project using the SaaS template which includes Stripe Payments, OpenAI GPT API, Google Auth, SendGrid, Tailwind, and Cron Jobs.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/starter-templates.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwasp new <project-name> -t saas\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp 0.12.x via Curl Command\nDESCRIPTION: Command to install Wasp version 0.12.4 using the official installer script.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v 0.12.4\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Schema in Prisma\nDESCRIPTION: Prisma schema definition for a Customer model including fields for personal information and status flags.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-11-20-building-react-forms-with-ease-using-react-hook-form-and-zod.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nmodel Customer {\n  id    Int    @id @default(autoincrement())\n  name  String\n  surname String\n  email String\n  dateOfBirth DateTime\n  premiumUser Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Updating getFirstProviderUserId Usage in React Component\nDESCRIPTION: Shows how to replace the getFirstProviderUserId helper with the method available directly on the user object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getFirstProviderUserId, AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const userId = getFirstProviderUserId(user)\n  // ...\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const userId = user.getFirstProviderUserId()\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Project Structure in Wasp\nDESCRIPTION: Shows the typical location of the `schema.prisma` file within a Wasp project's root directory, alongside other key files and directories like `main.wasp`, `src`, `tsconfig.json`, and `vite.config.ts`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/prisma-file.md#2025-04-22_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n.\\n├── main.wasp\\n...\\n// highlight-next-line\\n├── schema.prisma\\n├── src\\n├── tsconfig.json\\n└── vite.config.ts\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration in Markdown\nDESCRIPTION: Blog post frontmatter configuration containing metadata like title, authors, image path and tags.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-26-michael-curry-usecase.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'How Michael Curry chose Wasp to build Grabbit: an internal tool for managing dev resources at StudentBeans'\nauthors: [matijasos]\nimage: /img/michael-curry-usecase/grabbit-hero-shot.png\ntags: [webdev, wasp, startups, github]\n---\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Base Import\nDESCRIPTION: Required Tailwind CSS imports for enabling the framework in your stylesheet.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/css-frameworks.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* ... */\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertical Social Buttons Layout\nDESCRIPTION: Shows how to customize the social authentication buttons layout using the socialLayout prop.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/ui.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from '@wasp/auth/forms/Login'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass in the socialLayout prop\n      socialLayout=\"vertical\"\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Migration Error When No Models Defined\nDESCRIPTION: Error output from running database migration when no models are defined in the Prisma schema, showing that Prisma requires at least one model to generate the client.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/examples/waspleau/Notes.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDatabase successfully set up!\nCopying migrations folder from Wasp to Prisma project...\nDone copying migrations folder.\nPerforming migration...\nPrisma schema loaded from ../db/schema.prisma\nDatasource \"db\": SQLite database \"dev.db\" at \"file:./dev.db\"\n\nAlready in sync, no schema change or pending migration was found.\n\nRunning generate... (Use --skip-generate to skip the generators)\nError:\nYou don't have any models defined in your schema.prisma, so nothing will be generated.\nYou can define a model like this:\n\nmodel User {\n  id        Int     @id @default(autoincrement())\n  username  String  @unique\n  name      String?\n}\n\nMore information in our documentation:\nhttps://pris.ly/d/prisma-schema\n\nError: Migrate dev failed: Migrate (dev) failed with exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Django App Registration\nDESCRIPTION: Registering a Django app in the project settings\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-20-django-vs-wasp.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS [\n...\n'Todo'\n]\n```\n\n----------------------------------------\n\nTITLE: Organization-Specific Deployment\nDESCRIPTION: Command to deploy a Wasp app to a specific Fly.io organization.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/deployment/cli.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly launch my-wasp-app mia --org hive\n```\n\n----------------------------------------\n\nTITLE: Implementing Zod Environment Variables Validation in Wasp\nDESCRIPTION: Example showing how to set up environment variables validation using Zod in a Wasp application. Demonstrates the usage of defineEnvValidationSchema and server configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-15-to-0-16.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/env.ts\nimport * as z from 'zod'\n\nimport { defineEnvValidationSchema } from 'wasp/env'\n\nexport const serverEnvValidationSchema = defineEnvValidationSchema(\n  z.object({\n    STRIPE_API_KEY: z.string({\n      required_error: 'STRIPE_API_KEY is required.',\n    }),\n  })\n)\n```\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  ...\n  server: {\n    envValidationSchema: import { serverEnvValidationSchema } from \"@src/env\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Wasp to PATH in .profile\nDESCRIPTION: Example of adding Wasp's installation directory to the PATH in .profile file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-11-21-guide-windows-development-wasp-wsl.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=$PATH:/home/boris/.local/bin\n```\n\n----------------------------------------\n\nTITLE: Accessing Setup Resources in Operations\nDESCRIPTION: Example showing how to access resources initialized during server setup from within operation handlers.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/docs/design-docs/server-setup.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const myAction = async (args, context) => {\n  console.log(context.server.setup.someResource)\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Web App Build Directory in Bash\nDESCRIPTION: This command changes the current directory to the web app build folder within the Wasp project structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/_building-the-web-client.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd .wasp/build/web-app\n```\n\n----------------------------------------\n\nTITLE: Haskell Comment Conventions - TODO and NOTE Examples\nDESCRIPTION: Demonstrates the proper format for TODO and NOTE comments in Haskell code. Comments should start with capital letters and include appropriate punctuation. Optional author attribution can be added in parentheses.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/README.md#2025-04-22_snippet_10\n\nLANGUAGE: haskell\nCODE:\n```\n-- TODO: Wash the car.\n\n-- NOTE: This piece of code is slow.\n```\n\n----------------------------------------\n\nTITLE: Using Custom React Component in Markdown\nDESCRIPTION: This snippet demonstrates how to use a custom React component (ImgWithCaption) within a Markdown file to display an image with a caption. It specifies the alt text and image source as props.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-01-31-wasp-beta-launch-review.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<ImgWithCaption\n    alt=\"Alpha feedback\"\n    source=\"img/beta-launch-review/how-it-started.png\"\n/>\n```\n\n----------------------------------------\n\nTITLE: SendGrid Environment Variables\nDESCRIPTION: Required environment variable for configuring SendGrid email provider.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/email/email.md#2025-04-22_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nSENDGRID_API_KEY=\n```\n\n----------------------------------------\n\nTITLE: Prisma User Model Definition\nDESCRIPTION: Prisma schema defining the User model with additional address field\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_10\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id      Int     @id @default(autoincrement())\n  address String?\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Blog Post Header\nDESCRIPTION: Front matter configuration for a blog post about startup communication, including metadata like title, authors, image path, and tags.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-08-15-how-to-communicate-why-your-startup-is-worth-joining.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: How to communicate why your startup is worth joining\nauthors: [flreln]\nimage: /img/worth-joining/illustration-1-min.png\ntags: [startups, hiring, wasp]\n---\n```\n\n----------------------------------------\n\nTITLE: Deploying to Fly.io\nDESCRIPTION: Command to deploy the Wasp application to Fly.io using remote builder.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflyctl deploy --remote-only --config ../../fly.toml\n```\n\n----------------------------------------\n\nTITLE: Using 'forall' with RankNTypes Extension in Haskell\nDESCRIPTION: Shows how to use 'forall' with the RankNTypes extension to enable nested polymorphic types in Haskell function signatures.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-09-01-haskell-forall-tutorial.md#2025-04-22_snippet_4\n\nLANGUAGE: haskell\nCODE:\n```\nfoo :: (forall a. a -> a) -> (Char, Bool)    -- We can do this only with RankNTypes.\n\nbar :: forall a. ((a -> a) -> (Char, Bool))  -- This is usual stuff, we don't need RankNTypes for it. Actually we can even drop `forall` since it is implicit.\n```\n\nLANGUAGE: haskell\nCODE:\n```\nliftPair :: (forall x. x -> f x) -> (a, b) -> (f a, f b)\nliftPair func (y, z) = (func y, func z)\n```\n\n----------------------------------------\n\nTITLE: Running Database Migration with Wasp CLI\nDESCRIPTION: Shows the command for running database migrations to update the Prisma client after making changes to the authentication structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: New JSON Format for Match Score (JSON)\nDESCRIPTION: Illustrates the new JSON structure for storing match scores, which will replace the existing separate fields for player points and games.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2025-04-02-an-introduction-to-database-migrations.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"player1\": {\n    \"points\": \"0\",\n    \"games\": 0\n  },\n  \"player2\": {\n    \"points\": \"0\",\n    \"games\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Socket.IO package\nDESCRIPTION: Command to install the Socket.IO package for the server.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-09-build-real-time-voting-app-websockets-react-typescript.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install socket.io\n```\n\n----------------------------------------\n\nTITLE: Defining a Task Entity in Prisma Schema\nDESCRIPTION: This snippet shows how to define a Task entity using Prisma Schema Language. It creates a model with an id, description, and isDone field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/entities.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Task {\n  id          String  @id @default(uuid())\n  description String\n  isDone      Boolean @default(false)\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub OAuth Callback Handler\nDESCRIPTION: Callback route handler that processes GitHub OAuth response, validates user, and manages session creation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-13-how-to-add-auth-with-lucia-to-your-react-nextjs-app.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { github, lucia } from \"@/lib/auth\";\nimport { db } from \"@/lib/db\";\nimport { cookies } from \"next/headers\";\nimport { OAuth2RequestError } from \"arctic\";\nimport { generateId } from \"lucia\";\n\nimport type { DatabaseUser } from \"@/lib/db\";\n\nexport async function GET(request: Request): Promise<Response> {\n  const url = new URL(request.url);\n  const code = url.searchParams.get(\"code\");\n  const state = url.searchParams.get(\"state\");\n  const storedState = cookies().get(\"github_oauth_state\")?.value ?? null;\n  if (!code || !state || !storedState || state !== storedState) {\n    return new Response(null, {\n      status: 400\n    });\n  }\n\n  try {\n    const tokens = await github.validateAuthorizationCode(code);\n    const githubUserResponse = await fetch(\"https://api.github.com/user\", {\n      headers: {\n        Authorization: `Bearer ${tokens.accessToken}`\n      }\n    });\n    const githubUser: GitHubUser = await githubUserResponse.json();\n    const existingUser = db.prepare(\"SELECT * FROM user WHERE github_id = ?\").get(githubUser.id) as\n      | DatabaseUser\n      | undefined;\n\n    if (existingUser) {\n      const session = await lucia.createSession(existingUser.id, {});\n      const sessionCookie = lucia.createSessionCookie(session.id);\n      cookies().set(sessionCookie.name, sessionCookie.value, sessionCookie.attributes);\n      return new Response(null, {\n        status: 302,\n        headers: {\n          Location: \"/\"\n        }\n      });\n    }\n\n    const userId = generateId(15);\n    db.prepare(\"INSERT INTO user (id, github_id, username) VALUES (?, ?, ?)\").run(\n      userId,\n      githubUser.id,\n      githubUser.login\n    );\n    const session = await lucia.createSession(userId, {});\n    const sessionCookie = lucia.createSessionCookie(session.id);\n    cookies().set(sessionCookie.name, sessionCookie.value, sessionCookie.attributes);\n    return new Response(null, {\n      status: 302,\n      headers: {\n        Location: \"/\"\n      }\n    });\n  } catch (e) {\n    if (e instanceof OAuth2RequestError && e.message === \"bad_verification_code\") {\n      // invalid code\n      return new Response(null, {\n        status: 400\n      });\n    }\n    return new Response(null, {\n      status: 500\n    });\n  }\n}\n\ninterface GitHubUser {\n  id: string;\n  login: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Field in Wasp App\nDESCRIPTION: Basic configuration of server field in a Wasp application showing setup and middleware function imports.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/server-config.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  server: {\n    setupFn: import { mySetupFunction } from \"@src/myServerSetupCode.js\",\n    middlewareConfigFn: import { myMiddlewareConfigFn } from \"@src/myServerSetupCode.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Wasp Project with Todo App Typescript Template\nDESCRIPTION: This command creates a new Wasp project using the Todo App with Typescript template, which includes authentication and full-stack type safety features.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/starter-templates.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwasp new <project-name> -t todo-ts\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page Component (React, TypeScript)\nDESCRIPTION: TypeScript version of the login page component, leveraging type safety. Incorporates Wasp's LoginForm and a link to the signup page, requiring 'react-router-dom' and 'wasp/client/auth'. No props expected, outputs login UI with navigation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/tutorial/07-auth.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\\nimport { LoginForm } from 'wasp/client/auth'\\n\\nexport const LoginPage = () => {\\n  return (\\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\\n      <LoginForm />\\n      <br />\\n      <span>\\n        I don't have an account yet (<Link to=\"/signup\">go to signup</Link>).\\n      </span>\\n    </div>\\n  )\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Opening Database Studio in Wasp\nDESCRIPTION: Command to launch Wasp's database studio interface for viewing and editing database content through the browser.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/04-entities.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nwasp db studio\n```\n\n----------------------------------------\n\nTITLE: Checking Current Node.js Version\nDESCRIPTION: Command to verify the currently active Node.js version in the shell session.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/introduction/quick-start.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Defining Meme Edit Action in Wasp\nDESCRIPTION: Declares an action for editing existing memes with access to Meme, Template, and User entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\naction editMeme {\n  fn: import { editMeme } from \"@server/actions.js\",\n  entities: [Meme, Template, User]\n}\n```\n\n----------------------------------------\n\nTITLE: Using getFirstProviderUserId Function in React Component (JavaScript)\nDESCRIPTION: Demonstrates how to use the getFirstProviderUserId function from wasp/auth to display the first available user ID of a task's creator in a React component. It returns the first user ID found, such as email for email signup or Google ID for Google signup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/entities.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getFirstProviderUserId } from 'wasp/auth'\n\nfunction MainPage() {\n  // ...\n  return (\n    <div className=\"tasks\">\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task\">\n          {task.title} by {getFirstProviderUserId(task.user)}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Blog Components\nDESCRIPTION: Import statements for React components used in the blog post, including custom components and utilities from Docusaurus.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-03-17-new-react-docs-pretend-spas-dont-exist.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n\nimport InBlogCta from './components/InBlogCta';\nimport WaspIntro from './_wasp-intro.md';\nimport ImgWithCaption from './components/ImgWithCaption'\n```\n\n----------------------------------------\n\nTITLE: Package.json Updates for Prisma 5\nDESCRIPTION: Demonstrates the required changes to package.json, including adding type:module and updating the Prisma version to 5.19.1.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-14-to-0-15.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"devDependencies\": {\n    \"prisma\": \"5.19.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Build Location\nDESCRIPTION: Command to navigate to the Wasp build directory containing deployment artifacts.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/paas.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd .wasp/build\n```\n\n----------------------------------------\n\nTITLE: Declaring a Query in Wasp\nDESCRIPTION: This snippet shows how to declare a 'getTasks' query in the main.wasp file. It specifies the implementation function and the entities involved.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/05-queries.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nquery getTasks {\n  fn: import { getTasks } from \"@server/queries.js\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Blog Post Frontmatter in Markdown\nDESCRIPTION: Metadata configuration for the blog post including title, authors, and tags using markdown frontmatter syntax.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-01-11-betathon-review.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'Hosting Our First Hackathon: Results & Review'\nauthors: [vinny]\ntags: [fullstack, webdev, hackathon, startups]\n---\n```\n\n----------------------------------------\n\nTITLE: Useful Fly.io CLI Commands\nDESCRIPTION: These commands are helpful for managing and monitoring your Fly.io deployment, including viewing logs, listing secrets, and accessing the console.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/manually.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflyctl logs\nflyctl secrets list\nflyctl ssh console\n```\n\n----------------------------------------\n\nTITLE: React Component Imports\nDESCRIPTION: Import statements for React components and utilities used in the blog post, including custom components and Docusaurus utilities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-08-15-how-to-communicate-why-your-startup-is-worth-joining.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport InBlogCta from './components/InBlogCta';\nimport WaspIntro from './_wasp-intro.md';\nimport ImgWithCaption from './components/ImgWithCaption'\n```\n\n----------------------------------------\n\nTITLE: Running Custom Fly Commands\nDESCRIPTION: Example of running arbitrary Fly.io commands through the Wasp CLI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/cli.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd secrets list --context server\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeOAuthRedirect Hook in JavaScript and TypeScript\nDESCRIPTION: This hook runs before redirecting to an OAuth provider. It receives url, oauth, prisma, and req as input parameters, and must return an object with a url property that Wasp will use for the redirect.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/auth-hooks.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const onBeforeOAuthRedirect = async ({ url, oauth, prisma, req }) => {\n  // Hook code goes here\n\n  return { url }\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { OnBeforeOAuthRedirectHook } from 'wasp/server/auth'\n\nexport const onBeforeOAuthRedirect: OnBeforeOAuthRedirectHook = async ({\n  url,\n  oauth,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n\n  return { url }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Options in Wasp\nDESCRIPTION: This snippet demonstrates how to configure additional Prisma options in a Wasp application, including enabling PostgreSQL extensions and specifying client preview features.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/backends.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    // ...\n    prisma: {\n      clientPreviewFeatures: [\"postgresqlExtensions\"],\n      dbExtensions: [\n        { name: \"hstore\", schema: \"myHstoreSchema\" },\n        { name: \"pg_trgm\" },\n        { name: \"postgis\", version: \"2.1\" },\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting GitHub Identity and User ID in TypeScript\nDESCRIPTION: This code extracts the GitHub identity from a user object and accesses the GitHub User ID. It assumes the user object has an 'identities' property containing a 'github' field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/_github-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst githubIdentity = user.identities.github\n\n// GitHub User ID for example \"12345678\"\ngithubIdentity.id\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Logo to LoginForm in TypeScript/TSX\nDESCRIPTION: Shows how to import a logo image (`Logo` from `./logo.png`) and supply it to the `LoginForm` component via the `logo` prop in a React/TSX file (`src/LoginPage.tsx`).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/ui.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/LoginPage.tsx\"\nimport { LoginForm } from 'wasp/client/auth'\nimport Logo from './logo.png'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass in the path to your logo\n      logo={Logo}\n    />\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Complete Auth UI Customization Example\nDESCRIPTION: Comprehensive example showing all customization options combined including appearance, logo, and layout settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/ui.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CustomizationOptions } from 'wasp/client/auth'\n\nexport const appearance: CustomizationOptions['appearance'] = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nimport { authAppearance } from './appearance'\nimport todoLogo from './todoLogo.png'\n\nexport function LoginPage() {\n  return <LoginForm appearance={appearance} logo={todoLogo} />\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Required environment variables for Keycloak integration including client ID, secret, and realm URL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/keycloak.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nKEYCLOAK_CLIENT_ID=your-keycloak-client-id\nKEYCLOAK_CLIENT_SECRET=your-keycloak-client-secret\nKEYCLOAK_REALM_URL=https://your-keycloak-url.com/realms/master\n```\n\n----------------------------------------\n\nTITLE: Input Format for Export Analysis Request\nDESCRIPTION: JSON structure showing how to specify files for export analysis. Demonstrates both simple file paths and TypeScript configuration options. Each request can contain multiple files and an optional tsconfig path.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/packages/ts-inspect/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \"filenames\": [\"./src/exports.ts\"] },\n  {\n    \"tsconfig\": \"~/dev/wasp-todoapp/src/client/tsconfig.json\",\n    \"filenames\": [\"~/dev/wasp-todoapp/src/client/MainPage.tsx\"]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding PostgreSQL to Heroku App\nDESCRIPTION: Provision a PostgreSQL database for the Heroku app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nheroku addons:create --app <app-name> heroku-postgresql:essential-0\n```\n\n----------------------------------------\n\nTITLE: Navigating to Web App Build Directory in Bash\nDESCRIPTION: Changes the current directory to the web app build folder within the Wasp project structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/_building-the-web-client.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd .wasp/build/web-app\n```\n\n----------------------------------------\n\nTITLE: Configuring App Seeding with Wasp in TypeScript (Wasp)\nDESCRIPTION: This snippet is the TypeScript counterpart of the main.wasp configuration for database seeding in a Wasp app. It imports the devSeed function from a TypeScript-compatible JavaScript file into the db.seeds array, making it available for seeding via Wasp CLI commands. As with JavaScript, all db fields are optional, and correct import specification is crucial. This setup enables seamless invocation of the registered seed function from the command line.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/backends.md#2025-04-22_snippet_7\n\nLANGUAGE: Wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  db: {\n    seeds: [\n      import devSeed from \"@src/dbSeeds.js\"\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Wasp CLI Command Structure and Options\nDESCRIPTION: Overview of main Wasp CLI commands showing general usage pattern, available commands grouped by category, and common examples.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/general/cli.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  wasp <command> [command-args]\n\nCOMMANDS\n  GENERAL\n    new [<name>] [args]   Creates a new Wasp project. Run it without arguments for interactive mode.\n      OPTIONS:\n        -t|--template <template-name>\n           Check out the templates list here: https://github.com/wasp-lang/starters\n\n    new:ai <app-name> <app-description> [<config-json>]\n      Uses AI to create a new Wasp project just based on the app name and the description.\n      You can do the same thing with `wasp new` interactively.\n      Run `wasp new:ai` for more info.\n\n    version               Prints current version of CLI.\n    waspls                Run Wasp Language Server. Add --help to get more info.\n    completion            Prints help on bash completion.\n    uninstall             Removes Wasp from your system.\n  IN PROJECT\n    start                 Runs Wasp app in development mode, watching for file changes.\n    start db              Starts managed development database for you.\n    db <db-cmd> [args]    Executes a database command. Run 'wasp db' for more info.\n    clean                 Deletes all generated code, all cached artifacts, and the node_modules dir.\n                          Wasp equivalent of 'have you tried closing and opening it again?'.\n    build                 Generates full web app code, ready for deployment. Use when deploying or ejecting.\n    deploy                Deploys your Wasp app to cloud hosting providers.\n    telemetry             Prints telemetry status.\n    deps                  Prints the dependencies that Wasp uses in your project.\n    dockerfile            Prints the contents of the Wasp generated Dockerfile.\n    info                  Prints basic information about the current Wasp project.\n    test                  Executes tests in your project.\n    studio                (experimental) GUI for inspecting your Wasp app.\n\nEXAMPLES\n  wasp new MyApp\n  wasp start\n  wasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Database Cleanup Command\nDESCRIPTION: Command to clean the database state\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/examples/thoughts/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nwasp clean\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in JSX\nDESCRIPTION: This code snippet imports custom React components and utilities used in the blog post, including an image caption component and a Wasp introduction component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-01-18-wasp-beta-update-dec.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n\nimport InBlogCta from './components/InBlogCta';\nimport WaspIntro from './_wasp-intro.md';\nimport ImgWithCaption from './components/ImgWithCaption'\n```\n\n----------------------------------------\n\nTITLE: Running Database Command\nDESCRIPTION: Command to start the database in development mode using Wasp CLI\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/examples/thoughts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwasp start db\n```\n\n----------------------------------------\n\nTITLE: React Component Imports for Blog Post\nDESCRIPTION: Import statements for React components including Docusaurus Link and useBaseUrl utilities, along with custom blog components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-02-14-amicus-indiehacker-interview.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n\nimport InBlogCta from './components/InBlogCta';\nimport ImgWithCaption from './components/ImgWithCaption'\n```\n\n----------------------------------------\n\nTITLE: TypeScript SDK Configuration Proposal\nDESCRIPTION: Demonstrates the proposed TypeScript SDK format for Wasp configuration as an alternative to the DSL format\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-07-15-wasp-launch-week-six.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp(\"my-app\", {\n  title: \"My App\",\n  dependencies: {\n    reactQuery: \"4.0.0\"\n  },\n  webSocket: {\n    enabled: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Opening WSL Folder Path\nDESCRIPTION: Example path showing how to access WSL Ubuntu filesystem from Windows\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-11-21-guide-windows-development-wasp-wsl.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n\\\\wsl.localhost\\Ubuntu\\home\\boris\\Projects\n```\n\n----------------------------------------\n\nTITLE: Building Wasp Documentation with Tectonic\nDESCRIPTION: Command to build the Wasp language PDF documentation using Tectonic. The command must be run in the project directory and will generate the PDF in the build/wasplang/ directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/docs/wasplang/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntectonic -X build\n```\n\n----------------------------------------\n\nTITLE: Using 'forall' with ScopedTypeVariables Extension in Haskell\nDESCRIPTION: Demonstrates the use of 'forall' with the ScopedTypeVariables extension to enable lexical scoping of type variables in Haskell function definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-09-01-haskell-forall-tutorial.md#2025-04-22_snippet_3\n\nLANGUAGE: haskell\nCODE:\n```\n{-# LANGUAGE ScopedTypeVariables #-}\n\nf :: forall a. [a] -> [a]\nf xs = ys ++ ys\n  where ys :: [a]\n        ys = reverse xs\n```\n\n----------------------------------------\n\nTITLE: Defining Recurring Jobs in Wasp\nDESCRIPTION: Configuration for a recurring job using cron syntax to schedule periodic execution with optional arguments.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/jobs.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\njob mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@src/workers/bar\"\n  },\n  schedule: {\n    cron: \"0 * * * *\",\n    args: {=json { \"job\": \"args\" } json=} // optional\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useQuery Hook in React Component (TypeScript)\nDESCRIPTION: Shows the TypeScript version of using the useQuery hook in a React component. It demonstrates type inference and full-stack type safety when working with Queries in Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/queries.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport { Task } from '@wasp/entities'\nimport { useQuery } from '@wasp/queries'\nimport getAllTasks from '@wasp/queries/getAllTasks'\nimport getFilteredTasks from '@wasp/queries/getFilteredTasks'\n\nconst MainPage = () => {\n  // TypeScript will automatically infer and type-check payload types.\n  const { data: allTasks, error: error1 } = useQuery(getAllTasks)\n  const { data: doneTasks, error: error2 } = useQuery(getFilteredTasks, {\n    isDone: true,\n  })\n\n  if (error1 !== null || error2 !== null) {\n    return <div>There was an error</div>\n  }\n\n  return (\n    <div>\n      <h2>All Tasks</h2>\n      {allTasks && allTasks.length > 0\n        ? allTasks.map((task) => <Task key={task.id} {...task} />)\n        : 'No tasks'}\n\n      <h2>Finished Tasks</h2>\n      {doneTasks && doneTasks.length > 0\n        ? doneTasks.map((task) => <Task key={task.id} {...task} />)\n        : 'No finished tasks'}\n    </div>\n  )\n}\n\nconst Task = ({ description, isDone }: Task) => {\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n    </div>\n  )\n}\n\nexport default MainPage\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Markdown\nDESCRIPTION: This code snippet demonstrates how to embed a YouTube video in a Markdown document using an iframe. It sets the video dimensions, source, and various attributes for playback.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-04-17-How-I-Built-CoverLetterGPT.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<div style={{ textAlign: \"center\", width: \"100%\", height: \"400px\", display: \"inline-block\" }}>\n<iframe height=\"100%\" width =\"100%\" src=\"https://www.youtube.com/embed/D1l0iwGUed0\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"true\"></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing User Object in Main Page Component (TypeScript)\nDESCRIPTION: Shows how to access the authenticated user object in the Main Page component in TypeScript with proper typing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/07-auth.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuthUser } from 'wasp/auth'\n\n// highlight-next-line\nexport const MainPage = ({ user }: { user: AuthUser }) => {\n  // Do something with the user\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Returning to Release Branch\nDESCRIPTION: Git command to switch back to the release branch after deployment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout release\n```\n\n----------------------------------------\n\nTITLE: Formatting Response Schema in JSON\nDESCRIPTION: Defines the JSON response structure returned by the PSL formatting tool. The response includes the formatted schema and any potential errors encountered during formatting.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/packages/prisma/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"formattedSchemaPsl\": \"<psl>\",\n  \"errors\": \"<all errors as one big string>\"  // undefined if no errors.\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Domain Certificate\nDESCRIPTION: Command to create SSL certificate for a custom domain on Fly.io client app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/cli.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd --context client certs create mycoolapp.com\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Routes in Wasp\nDESCRIPTION: This code defines the necessary authentication routes and pages in the Wasp file. It creates a login route and specifies the component to use for the login page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/github.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onAfterSignup Hook in JavaScript and TypeScript\nDESCRIPTION: This hook runs after a user signs up. It receives providerId, user, oauth (optional), prisma, and req as input parameters, and its return value is ignored by Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/auth-hooks.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const onAfterSignup = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { OnAfterSignupHook } from 'wasp/server/auth'\n\nexport const onAfterSignup: OnAfterSignupHook = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  // Hook code goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS Styles\nDESCRIPTION: This CSS file imports the base Tailwind CSS styles, components, and utilities, which are essential for using Tailwind classes in the application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Creating a NewTaskForm Component in TypeScript\nDESCRIPTION: TypeScript implementation of a form component with proper type annotations that calls the createTask Action when submitted.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/06-actions.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FormEvent } from 'react'\nimport { Task } from 'wasp/entities'\nimport {\n  createTask,\n  getTasks,\n  useQuery\n} from 'wasp/client/operations'\n\n// ... MainPage, TaskView, TaskList ...\n\nconst NewTaskForm = () => {\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    try {\n      const target = event.target as HTMLFormElement\n      const description = target.description.value\n      target.reset()\n      await createTask({ description })\n    } catch (err: any) {\n      window.alert('Error: ' + err.message)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"description\" type=\"text\" defaultValue=\"\" />\n      <input type=\"submit\" value=\"Create task\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Server Environment Variables\nDESCRIPTION: Commands showing how to set multiple environment variables for social auth configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/deployment/cli.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly launch my-wasp-app mia --server-secret GOOGLE_CLIENT_ID=<...> --server-secret GOOGLE_CLIENT_SECRET=<...>\n```\n\n----------------------------------------\n\nTITLE: Starting Wasp Development Server\nDESCRIPTION: Commands to navigate to the project directory and start the Wasp development server. The server will initialize the client, server, and database components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/01-create.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cd TodoApp\n$ wasp start\n```\n\n----------------------------------------\n\nTITLE: Navigating to Build Directory\nDESCRIPTION: Shell command to change directory to the Wasp build folder.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd .wasp/build\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Oxford Comma Usage in Markdown\nDESCRIPTION: This snippet shows an embedded image illustrating the importance of using the Oxford comma in written content. It uses Markdown syntax for image insertion.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/writingguide.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Why the Oxford comma is important](https://raw.githubusercontent.com/vuejs/v2.vuejs.org/master/src/images/oxford-comma.jpg)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Fly.io App and Database\nDESCRIPTION: This command creates a new Fly.io app and sets up a PostgreSQL database. It should be run from the .wasp/build/ directory after building the app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/manually.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflyctl launch --remote-only\n```\n\n----------------------------------------\n\nTITLE: Blog Post Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the blog post, defining metadata like title, authors, image path, and tags.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-03-17-new-react-docs-pretend-spas-dont-exist.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"New React docs pretend SPAs don't exist anymore\"\nauthors: [matijasos]\nimage: /img/new-react-docs/evan-you-no-vite.png\ntags: [webdev, react] \n---\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Schema\nDESCRIPTION: Prisma schema definition for the User model with required fields for Keycloak authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/keycloak.md#2025-04-22_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id          Int    @id @default(autoincrement())\n  username    String @unique\n  displayName String\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Displaying Internal System Prompt for Smol-Developer in Markdown\nDESCRIPTION: This code snippet shows the internal system prompt used by Smol-Developer, wrapped in a collapsible Markdown details element. It explains the AI developer's role and instructions for generating code based on user prompts.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-01-smol-ai-vs-wasp-ai.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<details>\n  <summary> *Curious to see what the internal system prompt looks like? </summary>\n\n    \n    You are a top tier AI developer who is trying to write a program that will generate code for the user based on their intent.\n    \n    Do not leave any todos, fully implement every feature requested.\n\n    When writing code, add comments to explain what you intend to do and why it aligns with the program plan and specific instructions from the original prompt.\n          \n    In response to the user's prompt, write a plan.\n\n    In this plan, please name and briefly describe the structure of the app we will generate, including, for each file we are generating, what variables they export, data schemas, id names of every DOM elements that javascript functions will use, message names, and function names.\n\n    Respond only with plans following the above schema.\n\n    the app prompt is: {prompt}\n\n</details>\n```\n\n----------------------------------------\n\nTITLE: Blog Post Frontmatter in Markdown\nDESCRIPTION: Metadata configuration for the blog post including title, authors, image path and tags.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2025-01-09-wasp-launch-week-8.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Wasp Launch Week #8 - it's a Fixer Upper 🛠️🏡\"\nauthors: [matijasos]\nimage: /img/lw8/lw8-banner.png\ntags: [launch-week, update]\n---\n```\n\n----------------------------------------\n\nTITLE: Storing Values for Later Use in Server Setup (JavaScript)\nDESCRIPTION: This snippet demonstrates how to store values for later use in the server setup function and access them in operations. It uses a module-level variable to store a resource.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/server-config.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet someResource = undefined\n\nexport const mySetupFunction = async () => {\n  // Let's pretend functions setUpSomeResource and startSomeCronJob\n  // are implemented below or imported from another file.\n  someResource = await setUpSomeResource()\n  startSomeCronJob()\n}\n\nexport const getSomeResource = () => someResource\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSomeResource } from './myServerSetupCode.js'\n\n...\n\nexport const someQuery = async (args, context) => {\n  const someResource = getSomeResource()\n  return queryDataFromSomeResource(args, someResource)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client in Wasp (TypeScript)\nDESCRIPTION: Basic configuration for the client in a Wasp application using TypeScript. Sets up a root component and client setup function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/client-config.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.tsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dummy Provider Configuration\nDESCRIPTION: Configuration for the Dummy email provider used during development. This provider only logs emails to the console.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/email/email.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: Dummy,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Optional Static Segment\nDESCRIPTION: Demonstrates how to define a route with an optional static segment in the main.wasp file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/links.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\nroute OptionalRoute { path: \"/task/:id/details?\", to: OptionalPage }\npage OptionalPage { ... }\n```\n\n----------------------------------------\n\nTITLE: Embedding Twitter Post in Markdown\nDESCRIPTION: This code snippet shows how to embed a Twitter post in a Markdown document using an image link. It includes the tweet's image and a link to the original tweet.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-04-17-How-I-Built-CoverLetterGPT.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<div style={{ marginBottom: \"1rem\" }}>\n    <a href=\"https://twitter.com/hot_town/status/1633873684573323265?s=20\">\n        <img src={useBaseUrl('img/coverlettergpt.png')} alt=\"Hey peeps. Check out http://coverlettergpt.xyz. You can try it out now and create your own cover letters for free (no Payment/API key). I'm working on A LOT more features. Stay Tuned!\"/>\n    </a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord Auth in Wasp\nDESCRIPTION: Configuration for enabling Discord authentication in the main Wasp file by specifying the User entity and enabling Discord auth method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/discord.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      discord: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Query in Wasp\nDESCRIPTION: Declaration of a 'getTasks' query in the main.wasp file. The query specifies the implementation function location and the entities it reads from.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/05-queries.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nquery getTasks {\n  // Specifies where the implementation for the query function is.\n  // The path `@src/queries` resolves to `src/queries.js`.\n  // No need to specify an extension.\n  fn: import { getTasks } from \"@src/queries\",\n  // Tell Wasp that this query reads from the `Task` entity. Wasp will\n  // automatically update the results of this query when tasks are modified.\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Wasp Telemetry with Environment Variable\nDESCRIPTION: Bash command showing how to opt out of Wasp telemetry by setting the WASP_TELEMETRY_DISABLE environment variable to any value.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/telemetry.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport WASP_TELEMETRY_DISABLE=1\n```\n\n----------------------------------------\n\nTITLE: Importing Required Component in TypeScript\nDESCRIPTION: Import statement for the Required component from the site components directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/_user-fields.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Required } from '@site/src/components/Tag';\n```\n\n----------------------------------------\n\nTITLE: Running Import Rewriting Script\nDESCRIPTION: Command to automatically update @wasp imports in source files to match the new import system in Wasp 0.12.0 using jscodeshift.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx jscodeshift@0.15.1 -t https://raw.githubusercontent.com/wasp-lang/wasp-codemod/main/src/transforms/imports-from-0-11-to-0-12.ts --extensions=js,ts,jsx,tsx src/\n```\n\n----------------------------------------\n\nTITLE: Telemetry Data Structure for Installation\nDESCRIPTION: JSON structure showing the minimal telemetry data sent when Wasp is installed via the install.sh script. Only includes a random ID and OS information.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/telemetry.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"distinct_id\": \"274701613078193779564259\",\n  \"os\": \"linux\"\n}\n```\n\n----------------------------------------\n\nTITLE: Default Wasp CRUD 'delete' Operation Implementation (JavaScript)\nDESCRIPTION: This snippet shows the default JavaScript implementation for the `delete` CRUD operation generated by Wasp. It uses the Prisma Client's `delete` method to remove a record from the `Task` entity, identifying the target record by the `id` provided in the `args` object (corresponding to the `@id` field in the Prisma schema).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// ...\n// Wasp uses the field marked with `@id` in Prisma schema as the id field.\nreturn Task.delete({ where: { id: args.id } })\n```\n```\n\n----------------------------------------\n\nTITLE: Cloning the Example WebSocket Project\nDESCRIPTION: Git command to clone the starting point of the WebSocket example application from the specified repository.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-09-build-real-time-voting-app-websockets-react-typescript.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --branch start https://github.com/vincanger/websockets-wasp.git\n```\n\n----------------------------------------\n\nTITLE: Customizing API-specific Middleware in Wasp and TypeScript\nDESCRIPTION: This example demonstrates how to customize middleware for a specific API route in a Wasp application using TypeScript. It shows replacing the express.json middleware with express.raw for a webhook callback, with proper type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/middleware-config.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napi webhookCallback {\n  fn: import { webhookCallback } from \"@src/apis\",\n  middlewareConfigFn: import { webhookCallbackMiddlewareFn } from \"@src/apis\",\n  httpRoute: (POST, \"/webhook/callback\"),\n  auth: false\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { type WebhookCallback } from 'wasp/server/api'\nimport { type MiddlewareConfigFn } from 'wasp/server'\n\nexport const webhookCallback: WebhookCallback = (req, res, _context) => {\n  res.json({ msg: req.body.length })\n}\n\nexport const webhookCallbackMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {\n  console.log('webhookCallbackMiddlewareFn: Swap express.json for express.raw')\n\n  middlewareConfig.delete('express.json')\n  middlewareConfig.set('express.raw', express.raw({ type: '*/*' }))\n\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Development Server Command\nDESCRIPTION: Command to start the application in development mode using Wasp CLI\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/examples/thoughts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwasp start\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp Framework\nDESCRIPTION: Command to download and install the Wasp framework using the installer script.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/examples/websockets-realtime-voting/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Updated Match Model with Privacy Setting\nDESCRIPTION: Modified Prisma schema for the Match model adding a new isPublic field to support private matches.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2025-04-02-an-introduction-to-database-migrations.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nmodel Match {\n  id         String   @id @default(uuid())\n  createdAt  DateTime @default(now())\n  isComplete Boolean  @default(false)\n  \n  // We need this new field\n  isPublic   Boolean  @default(false)\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Script Permission Setting\nDESCRIPTION: Command to make the deployment script executable\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/paas.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x deploy_client.sh\n```\n\n----------------------------------------\n\nTITLE: Using Custom React Component in Markdown (Docusaurus)\nDESCRIPTION: This code demonstrates the usage of a custom React component (ImgWithCaption) within a Markdown file. It passes props to the component for displaying an image with a caption.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-09-29-journey-to-1000-gh-stars.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<ImgWithCaption\n    alt=\"Start and setup of a web app - problems\"\n    source=\"img/1000-gh-stars/wasp-cust-dev-start-and-setup.png\"\n    caption=\"Interviewee problems regarding starting and setting up a new web app.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Setup Command\nDESCRIPTION: Command to configure the wasp-config dev dependency with the correct Wasp version\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/examples/thoughts/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwasp ts-setup\n```\n\n----------------------------------------\n\nTITLE: Docker Cross-Platform Build Command for Heroku\nDESCRIPTION: Command for building Docker images specifically for x86_64 architecture when using an M1 Mac, and pushing to Heroku container registry.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/examples/waspleau/Notes.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx build --platform linux/amd64 . -t web && docker tag web registry.heroku.com/waspleau/web && docker push registry.heroku.com/waspleau/web && heroku container:release --app waspleau web\n```\n\n----------------------------------------\n\nTITLE: Setting Client URL Environment Variable\nDESCRIPTION: Command to set the WASP_WEB_CLIENT_URL environment variable for CORS configuration on the server app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/deployment/cli.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd --context server secrets set WASP_WEB_CLIENT_URL=https://mycoolapp.com\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Signup Action in Wasp\nDESCRIPTION: Wasp configuration code that defines a custom signup action. This snippet shows how to declare an action that imports a function from a JavaScript file and grants it access to the User entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_21\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\naction customSignup {\n  fn: import { signup } from \"@src/auth/signup.js\",\n  entities: [User]\n}\n```\n\n----------------------------------------\n\nTITLE: Switching to User Shell\nDESCRIPTION: Command to switch to user shell after Docker group changes\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-11-21-guide-windows-development-wasp-wsl.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsu -s $USER\n```\n\n----------------------------------------\n\nTITLE: Running Wasp Studio Client Development Server\nDESCRIPTION: Command to start the development server for Wasp Studio Client. Requires Wasp Studio Server to be running locally first.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/packages/studio/client/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing NVM (Node Version Manager) on WSL\nDESCRIPTION: Command to install NVM on the WSL environment using curl.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-11-21-guide-windows-development-wasp-wsl.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Importing and Calling Actions (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import and call Actions directly from wasp/client/operations in JavaScript. Actions can be called from anywhere in the client code and return Promises.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTask, markTasAsDone } from 'wasp/client/operations'\n\n// ...\n\nconst newTask = await createTask({ description: 'Learn TypeScript' })\nawait markTasAsDone({ id: 1 })\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Signup Fields in JavaScript\nDESCRIPTION: Example of defining and validating additional signup fields in JavaScript. The code shows how to perform validation for an address field with custom error messages.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineAdditionalSignupFields } from '@wasp/auth/index.js'\n\nexport const fields = defineAdditionalSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Login Route and Page in Wasp\nDESCRIPTION: This snippet demonstrates how to add the login route and page in the Wasp configuration file. It defines the path and component for the login page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/github.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Wasp CLI Version - Shell\nDESCRIPTION: This block shows the terminal output of `wasp version`, providing the current installed Wasp CLI version. It also includes installation instructions for updating or switching versions and references the releases list. Dependencies: Wasp CLI must be installed. Input: none. Output: version string and informational instructions. Limitations: output version may differ depending on actual installed version.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/general/cli.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ wasp version\n\n0.12.0\n\nIf you wish to install/switch to the latest version of Wasp, do:\ncurl -sSL https://get.wasp.sh/installer.sh | sh -s\n\nIf you want specific x.y.z version of Wasp, do:\ncurl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v x.y.z\n\nCheck https://github.com/wasp-lang/wasp/releases for the list of valid versions, including the latest one.\n```\n\n----------------------------------------\n\nTITLE: Haskell Comment Convention - Author Attribution Example\nDESCRIPTION: Shows how to add author attribution to TODO/NOTE comments for better traceability and communication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/README.md#2025-04-22_snippet_11\n\nLANGUAGE: haskell\nCODE:\n```\n-- TODO(martin): Doesn't work on my machine in some unusual use cases.\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in JSX/MDX Document\nDESCRIPTION: Code showing the import statements used at the beginning of a Docusaurus MDX document to bring in necessary components like Link, useBaseUrl, and custom components for the blog post.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-06-24-ML-code-gen-vs-coding-by-hand-future.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport InBlogCta from './components/InBlogCta';\nimport WaspIntro from './_wasp-intro.md';\nimport ImgWithCaption from './components/ImgWithCaption'\n```\n\n----------------------------------------\n\nTITLE: Markdown Contact Page Structure\nDESCRIPTION: Basic markdown structure for a contact page with frontmatter title and contact information\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/contact.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Contact\n---\n\n<!-- TODO: update the email once we setup @wasp.sh-->\nYou can find us on [Discord](https://discord.gg/rzdnErX) or you can reach out to us via email at hi@wasp-lang.dev.\n```\n\n----------------------------------------\n\nTITLE: Initializing Discord Bot in NodeJS\nDESCRIPTION: Sets up a basic Discord bot using the discord.js library. It establishes a connection to Discord and logs in using a bot token.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-04-29-discord-bot-introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Discord = require('discord.js')\n\nconst BOT_TOKEN = process.env.BOT_TOKEN\n\nconst bot = new Discord.Client()\nbot.login(BOT_TOKEN)\n\nbot.on('ready', function (evt) {\n  console.log(`Logged in as: ${bot.user.tag}.`)\n})\n```\n\n----------------------------------------\n\nTITLE: React Component Imports\nDESCRIPTION: Import statements for React components and utilities used in the blog post.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2025-01-09-wasp-launch-week-8.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n\nimport InBlogCta from './components/InBlogCta';\nimport WaspIntro from './_wasp-intro.md';\nimport ImgWithCaption from './components/ImgWithCaption'\n```\n\n----------------------------------------\n\nTITLE: Listing Available Fly Regions\nDESCRIPTION: Command to display all available Fly.io deployment regions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/cli.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nflyctl platform regions\n```\n\n----------------------------------------\n\nTITLE: Logging in to Cloudflare Wrangler CLI\nDESCRIPTION: Command for logging into Cloudflare's Wrangler CLI tool, which is required before deploying to Cloudflare Pages. This authenticates your local environment with your Cloudflare account.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/paas.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler login\n```\n\n----------------------------------------\n\nTITLE: Displaying Old Wasp Project Structure (v0.11.X) using Text\nDESCRIPTION: Illustrates the directory layout for Wasp projects generated with version 0.11.X. This structure features separate `client`, `server`, and `shared` directories within `src` and is being deprecated in favor of a flatter `src` directory in v0.12.X.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── .gitignore\n├── main.wasp\n├── src\n│   ├── client\n│   │   ├── Main.css\n│   │   ├── MainPage.jsx\n│   │   ├── react-app-env.d.ts\n│   │   ├── tsconfig.json\n│   │   └── waspLogo.png\n│   ├── server\n│   │   └── tsconfig.json\n│   ├── shared\n│   │   └── tsconfig.json\n│   └── .waspignore\n└── .wasproot\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta for Wasp on Apple Silicon\nDESCRIPTION: Command to install Rosetta on macOS with Apple Silicon (M1, M2, etc.) to enable running Wasp, which is built for x86 architecture.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/introduction/quick-start.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsoftwareupdate --install-rosetta\n```\n\n----------------------------------------\n\nTITLE: Enabling Hyper-V in Windows PowerShell\nDESCRIPTION: Command to enable Hyper-V, which is a prerequisite for WSL installation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-11-21-guide-windows-development-wasp-wsl.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All\n```\n\n----------------------------------------\n\nTITLE: Using Custom React Component in Markdown\nDESCRIPTION: This snippet shows how to use a custom React component (ImgWithCaption) within a Markdown file to display an image with a caption.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-28-what-can-you-build-with-wasp.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<ImgWithCaption\n    alt=\"Launch Week 3 is coming\"\n    source=\"img/build-with-wasp/build-with-wasp-banner.png\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Deployment Script Configuration\nDESCRIPTION: Example package.json configuration for creating a deployment script with environment variables.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/cli.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"deploy\": \"REACT_APP_ANOTHER_VAR=somevalue wasp deploy fly deploy\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tailwind Plugins to Configuration\nDESCRIPTION: Shows how to include Tailwind plugins in the configuration file after installing them as dependencies.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/css-frameworks.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  // ...\n  plugins: [\n    require('@tailwindcss/forms'),\n    require('@tailwindcss/typography'),\n  ],\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Root Component with Redux Provider - JavaScript (src\\/Root.jsx)\nDESCRIPTION: Extends the root component to include a React Redux Provider, wrapping children with a Redux store context. Requires 'react-redux' and a store implementation from './store'. Ensures the entire app has access to the store via the Provider, suitable for maintaining global state across the app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/client-config.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root({ children }) {\n  return <Provider store={store}>{children}</Provider>\n}\n```\n\n----------------------------------------\n\nTITLE: Testing React Component with Mocked API Endpoints in TypeScript\nDESCRIPTION: TypeScript version of the test for a Todo component that uses direct API calls, showing how to mock API responses in TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/testing.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { test, expect } from \"vitest\";\nimport { screen } from \"@testing-library/react\";\n\nimport { mockServer, renderInContext } from \"wasp/client/test\";\nimport Todo from \"./Todo\";\n\nconst { mockApi } = mockServer();\n\nconst mockTasks = [\n  {\n    id: 1,\n    description: \"test todo 1\",\n    isDone: true,\n    userId: 1,\n  },\n];\n\ntest(\"handles mock data\", async () => {\n  mockApi(\"/tasks\", mockTasks);\n\n  renderInContext(<Todo />);\n\n  await screen.findByText(\"test todo 1\");\n\n  expect(screen.getByRole(\"checkbox\")).toBeChecked();\n\n  screen.debug();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Client in React (JavaScript)\nDESCRIPTION: This React component demonstrates how to use WebSockets on the client side in JavaScript. It utilizes the useSocket and useSocketListener hooks to manage the WebSocket connection, send messages, and update the UI based on received messages.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/web-sockets.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react'\nimport {\n  useSocket,\n  useSocketListener,\n} from 'wasp/client/webSocket'\n\nexport const ChatPage = () => {\n  const [messageText, setMessageText] = useState('')\n  const [messages, setMessages] = useState([])\n  const { socket, isConnected } = useSocket()\n\n  useSocketListener('chatMessage', logMessage)\n\n  function logMessage(msg) {\n    setMessages((priorMessages) => [msg, ...priorMessages])\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    socket.emit('chatMessage', messageText)\n    setMessageText('')\n  }\n\n  const messageList = messages.map((msg) => (\n    <li key={msg.id}>\n      <em>{msg.username}</em>: {msg.text}\n    </li>\n  ))\n  const connectionIcon = isConnected ? '🟢' : '🔴'\n\n  return (\n    <>\n      <h2>Chat {connectionIcon}</h2>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <div>\n            <div>\n              <input\n                type=\"text\"\n                value={messageText}\n                onChange={(e) => setMessageText(e.target.value)}\n              />\n            </div>\n            <div>\n              <button type=\"submit\">Submit</button>\n            </div>\n          </div>\n        </form>\n        <ul>{messageList}</ul>\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Wasp Version in main.wasp\nDESCRIPTION: Example of how to update the Wasp version in the main.wasp file to 0.14.0.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating InputFields Component for Managing Favorite Users\nDESCRIPTION: Implements a React component for managing a user's favorite Twitter accounts. It includes form inputs for adding, removing, and updating usernames, and uses the updateAccount action to save changes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nfunction InputFields({ user }: { user: User }) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [fields, setFields] = useState(['']);\n\n  useEffect(() => {\n    if (user?.favUsers.length > 0) {\n      setFields(user.favUsers);\n    }\n  }, [user?.favUsers]);\n\n  const handleAdd = () => {\n    setFields([...fields, '']);\n  };\n\n  const handleRemove = () => {\n    const newFields = [...fields];\n    newFields.splice(fields.length - 1, 1);\n    setFields(newFields);\n  };\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>, index: number) => {\n    const newFields = [...fields];\n    newFields[index] = e.target.value;\n    setFields(newFields);\n  };\n\n  const handleSubmit = async () => {\n    try {\n      setIsLoading(true);\n      await updateAccount({ favUsers: fields });\n    } catch (err: any) {\n      alert(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className='w-full p-4'>\n      <div className='flex flex-row justify-start items-start'>\n        <h2 className='ml-1 font-bold'>Trend-Setting Twitter Accounts</h2>\n      </div>\n      {fields.map((field, index) => (\n        <div key={index} className='my-2'>\n          <input\n            type='text'\n            placeholder='Twitter Username'\n            className='w-full bg-white border border-gray-300 rounded-lg py-2 px-4 text-gray-700 focus:border-blue-400 focus:outline-none'\n            value={field}\n            onChange={(e) => handleChange(e, index)}\n          />\n        </div>\n      ))}\n      <div className='my-2 flex flex-row justify-end gap-1'>\n        {fields.length > 1 && <Button onClick={handleRemove}>-</Button>}\n        {fields.length < 10 && (\n          <Button onClick={handleAdd} className='bg-blue-500 text-white px-4 py-2 rounded'>\n            +\n          </Button>\n        )}\n      </div>\n      <Button onClick={handleSubmit} isLoading={isLoading}>\n        <span>Save</span>\n      </Button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Database Model Definition\nDESCRIPTION: Defining database models in Django and Wasp/Prisma\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-20-django-vs-wasp.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\nclass Task(models.Model):\n    title = models.CharField(max_length=200)\n    completed = models.BooleanField(default=False)\n\n    def __str__(self):\n        return self.title\n```\n\nLANGUAGE: jsx\nCODE:\n```\nmodel Task {\n    id          Int     @id @default(autoincrement())\n    description String\n    isDone      Boolean @default(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp with curl Command\nDESCRIPTION: A simple curl command to install the Wasp framework on OSX, Linux, or WSL (Windows Subsystem for Linux). This command downloads and executes the installer script from the Wasp website.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Wasp CLI and Associated Files - Shell\nDESCRIPTION: This shell output demonstrates the effect of `wasp uninstall`, which removes binaries and cached data related to Wasp from the user's system. The process is interactive, requiring user confirmation. Dependencies: Wasp CLI installed. Inputs: confirmation prompt response. Outputs: detailed list of files/dirs to be deleted and final confirmation message. Use with caution as the action is irreversible.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/general/cli.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ wasp uninstall\n\n🐝 --- Uninstalling Wasp ... ------------------------------------------------------\n\n We will remove the following directories:\n   {home}/.local/share/wasp-lang/\n   {home}/.cache/wasp/\n\n We will also remove the following files:\n   {home}/.local/bin/wasp\n\n Are you sure you want to continue? [y/N]\ny\n\n✅ --- Uninstalled Wasp -----------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Delaying and Submitting a Job - JavaScript\nDESCRIPTION: Shows how to delay job execution by a specified number of seconds before submitting in JavaScript. Chains delay and submit methods, with delay(10) indicating a 10-second delay and submit taking job arguments and optional executor options such as retryLimit. The job instance must be available via import; this pattern is suitable for non-immediate, scheduled jobs.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/jobs.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nconst submittedJob = await mySpecialJob\n  .delay(10)\n  .submit({ job: \"args\" }, { \"retryLimit\": 2 })\n```\n\n----------------------------------------\n\nTITLE: WWW Subdomain Certificate Creation\nDESCRIPTION: Command to create SSL certificates for the www subdomain on Fly.io.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/cli.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd --context client certs create www.mycoolapp.com\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Queries (JavaScript)\nDESCRIPTION: Demonstrates how to handle errors in Queries by throwing an HttpError with a custom status code, message, and data. This allows for more detailed error information to be passed to the client.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/queries.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport HttpError from '@wasp/core/HttpError.js'\n\nexport const getAllTasks = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Discord Shield Badge Markdown\nDESCRIPTION: Markdown code for displaying a Discord chat badge with member count and link\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![**Discord**](https://img.shields.io/discord/686873244791210014?label=chat%20on%20discord)](https://discord.gg/rzdnErX)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Wasp Release with Bash Script\nDESCRIPTION: This command runs a custom script to create a new Wasp release. It performs checks, tags the release with the specified version, and pushes it to the repository.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./new-release 0.x.y\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeOAuthRedirect Hook in JavaScript\nDESCRIPTION: JavaScript implementation of the onBeforeOAuthRedirect hook that handles pre-OAuth redirect logic and stores request data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/auth-hooks.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const onBeforeOAuthRedirect = async ({ url, oauth, prisma, req }) => {\n  console.log('query params before oAuth redirect', req.query)\n\n  // Saving query params for later use in onAfterSignup or onAfterLogin hooks\n  const id = oauth.uniqueRequestId\n  someKindOfStore.set(id, req.query)\n\n  return { url }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Object in Wasp\nDESCRIPTION: Configuration of the main Wasp auth object to enable Google authentication, including user entity and social login specifications.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/google.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      google: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Client to Netlify Production\nDESCRIPTION: Deploy the Wasp client application to Netlify's production environment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/manually.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnetlify deploy --prod\n```\n\n----------------------------------------\n\nTITLE: Deploying Mage to Fly.io\nDESCRIPTION: Command to deploy the Mage app to Fly.io using Wasp CLI. This is used for deploying new versions of Mage to Wasp's Fly.io cloud.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/mage/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwasp deploy fly deploy\n```\n\n----------------------------------------\n\nTITLE: Validation Error Handling in TypeScript\nDESCRIPTION: TypeScript implementation of validation error handling with proper error typing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await context.entities.User.update(...)\n} catch (e) {\n  if (e instanceof AuthError) {\n    throw new HttpError(422, 'Validation failed', { message: e.message })\n  } else {\n    throw e\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta on Mac M1/M2\nDESCRIPTION: Command to install Rosetta on Mac devices with Apple Silicon (M1/M2) chips for x86 compatibility.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/introduction/quick-start.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsoftwareupdate --install-rosetta\n```\n\n----------------------------------------\n\nTITLE: Wasp Installation Telemetry JSON Payload Structure\nDESCRIPTION: JSON structure showing the telemetry data sent when Wasp is installed via the install.sh script. The payload includes a randomly generated ID and the operating system information.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/telemetry.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Randomly generated id.\n  \"distinct_id\": \"274701613078193779564259\",\n  \"os\": \"linux\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Actions on the Client in JavaScript\nDESCRIPTION: Demonstrates how to import and call Actions on the client-side in JavaScript. It shows the usage of createTask and markTaskAsDone Actions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTask, markTaskAsDone } from 'wasp/client/operations'\n\n// ...\n\nconst newTask = await createTask({ description: 'Learn TypeScript' })\nawait markTaskAsDone({ id: 1 })\n```\n\n----------------------------------------\n\nTITLE: Setting Up Email Verification Route in Wasp\nDESCRIPTION: Wasp configuration for email verification routing setup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/email.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\nemailVerification: {\n    clientRoute: EmailVerificationRoute,\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Wasp Application Configuration\nDESCRIPTION: Demonstrates the complete Wasp configuration file with app settings and route definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/03-pages.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp TodoApp {\n  wasp: {\n    version: \"^0.12.0\"\n  },\n  title: \"TodoApp\"\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  component: import { MainPage } from \"@src/MainPage\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic React Component for Main Page\nDESCRIPTION: Simple React functional component that serves as the main page. The component imports a logo image and CSS file from the same directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/03-pages.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport waspLogo from './waspLogo.png'\nimport './Main.css'\n\nexport const MainPage = () => {\n  // ...\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport waspLogo from './waspLogo.png'\nimport './Main.css'\n\nexport const MainPage = () => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Current Node.js Version\nDESCRIPTION: This command displays the version of Node.js currently being used in the shell session. It's helpful for verifying the correct Node.js version is active.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/introduction/quick-start.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Retrieving Discord User ID in TypeScript\nDESCRIPTION: This snippet extracts the Discord identity from a user object and accesses the Discord User ID. It assumes the user object has an 'identities' property containing Discord-specific information.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/_discord-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst discordIdentity = user.identities.discord\n\n// Discord User ID for example \"80351110224678912\"\ndiscordIdentity.id\n```\n\n----------------------------------------\n\nTITLE: Creating a Django REST framework serializer\nDESCRIPTION: Python code to define a serializer for the Task model, allowing data to be converted to JSON format for the React frontend.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-20-django-vs-wasp.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import serializers\nfrom .models import Task\n\nclass TaskSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Task\n        fields = '__all__'\n```\n\n----------------------------------------\n\nTITLE: Implementing User Data Migration Logic in TypeScript\nDESCRIPTION: This TypeScript code provides the backend implementation for migrating user data. The `migrateUsernameAndPasswordHandler` function serves as the API handler, calling `migrateUsernameAuth`. The `migrateUsernameAuth` function fetches all users, iterates through them, checks if they use the old username/password method and haven't been migrated yet, and then creates corresponding `Auth` and `AuthIdentity` records using Prisma. It depends on `prisma` and several Wasp server auth utilities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"src/migrateToNewAuth.ts\"\nimport { prisma } from \"wasp/server\";\nimport { type ProviderName, type UsernameProviderData } from \"wasp/server/auth\";\nimport { MigrateUsernameAndPassword } from \"wasp/server/api\";\n\nexport const migrateUsernameAndPasswordHandler: MigrateUsernameAndPassword =\n  async (_req, res) => {\n    const result = await migrateUsernameAuth();\n\n    res.status(200).json({ message: \"Migrated users to the new auth\", result });\n  };\n\nasync function migrateUsernameAuth(): Promise<{\n  numUsersAlreadyMigrated: number;\n  numUsersNotUsingThisAuthMethod: number;\n  numUsersMigratedSuccessfully: number;\n}> {\n  const users = await prisma.user.findMany({\n    include: {\n      auth: true,\n    },\n  });\n\n  const result = {\n    numUsersAlreadyMigrated: 0,\n    numUsersNotUsingThisAuthMethod: 0,\n    numUsersMigratedSuccessfully: 0,\n  };\n\n  for (const user of users) {\n    if (user.auth) {\n      result.numUsersAlreadyMigrated++;\n      console.log(\"Skipping user (already migrated) with id:\", user.id);\n      continue;\n    }\n\n    if (!user.username || !user.password) {\n      result.numUsersNotUsingThisAuthMethod++;\n      console.log(\"Skipping user (not using username auth) with id:\", user.id);\n      continue;\n    }\n\n    const providerData: UsernameProviderData = {\n      hashedPassword: user.password,\n    };\n    const providerName: ProviderName = \"username\";\n\n    await prisma.auth.create({\n      data: {\n        identities: {\n          create: {\n            providerName,\n            providerUserId: user.username.toLowerCase(),\n            providerData: JSON.stringify(providerData),\n          },\n        },\n        user: {\n          connect: {\n            id: user.id,\n          },\n        },\n      },\n    });\n    result.numUsersMigratedSuccessfully++;\n  }\n\n  return result;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Export Analysis Response Format\nDESCRIPTION: JSON structure showing the response format for export analysis. Maps file paths to their exported symbols, indicating both named and default exports.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/packages/ts-inspect/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"./src/exports.ts\": [\n    { \"type\": \"named\", \"name\": \"getExportsOfFiles\" },\n    { \"type\": \"default\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Image with Markdown (Docusaurus)\nDESCRIPTION: This snippet shows how to insert an image in a Markdown file using standard Markdown syntax. It includes the image path and alt text.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-09-29-journey-to-1000-gh-stars.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![1k stars chart](../static/img/1000-gh-stars/1k_gh_stars_chart.png)\n```\n\n----------------------------------------\n\nTITLE: Installing Ubuntu Distribution for WSL\nDESCRIPTION: Command to specifically install the Ubuntu distribution for WSL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-11-21-guide-windows-development-wasp-wsl.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwsl --install -d Ubuntu\n```\n\n----------------------------------------\n\nTITLE: Cloning Wasp Repository\nDESCRIPTION: Command to clone the Wasp repository containing the WebSockets example application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/examples/websockets-realtime-voting/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/wasp-lang/wasp.git\n```\n\n----------------------------------------\n\nTITLE: Blog Post Frontmatter Configuration in Markdown\nDESCRIPTION: Metadata configuration for the blog post including title, authors and tags.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-11-21-seed-round.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Following YC, Wasp raised $1.5M Seed Round led by Lunar Ventures and HV Capital\nauthors: [matijasos]\ntags: [startup, wasp]\n---\n```\n\n----------------------------------------\n\nTITLE: Client-side Entity Type Usage\nDESCRIPTION: Demonstrates how to use entity types in client-side React components with TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/entities.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from \"wasp/entities\"\n\nexport function ExamplePage() {\n  const task: Task = {\n    id: 123,\n    description: \"Some random task\",\n    isDone: false,\n  }\n  return <div>{task.description}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SSL Certificate for www Subdomain\nDESCRIPTION: Command to create SSL certificates for the 'www' subdomain of your custom domain on Fly.io, allowing your application to be accessed via the www subdomain.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/cli.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd --context client certs create www.mycoolapp.com\n```\n\n----------------------------------------\n\nTITLE: Customizing Signup Form in TypeScript\nDESCRIPTION: This snippet shows how to customize the SignupForm component in TypeScript by adding additional fields using both object and render function approaches.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  SignupForm,\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        /* The address field is defined using an object */\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        /* The phone number is defined using a render function */\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Seed Functions with Wasp in TypeScript (Wasp)\nDESCRIPTION: This TypeScript snippet mirrors the JavaScript example for configuring multiple or named seed functions in main.wasp. By importing devSeedSimple from the given module, it registers this seed in the application's list of available seed functions, accessible via the appropriate Wasp CLI commands. The approach allows selectively running different seeding routines, as determined by the import name. Prerequisites include properly exporting seed functions in the module and specifying all imports correctly in the Wasp configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/backends.md#2025-04-22_snippet_9\n\nLANGUAGE: Wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    seeds: [\n      // ...\n      import { devSeedSimple } from \"@src/dbSeeds.js\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Database URL Inline for Wasp - Bash\nDESCRIPTION: Assigns the 'DATABASE_URL' environment variable inline for a Wasp CLI command, enabling the application to target a specific database instance at runtime. Dependencies: Wasp CLI, the relevant connection string, and shell environment support. The main parameter is 'DATABASE_URL' which sets the runtime connection. Limitations: Only affects the single invocation, not persistent.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/backends.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=<my-db-url> wasp ...\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Server Configuration\nDESCRIPTION: Command to copy example environment variables file to create server configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/examples/todoApp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncp .env.server.example .env.server\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak Auth in Wasp\nDESCRIPTION: Basic configuration for enabling Keycloak authentication in the main Wasp file. Specifies the User entity and enables Keycloak as an auth method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/keycloak.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      keycloak: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Auth in Wasp (JavaScript, API Reference)\nDESCRIPTION: This snippet, appearing in the API Reference, again shows the Wasp 'main.wasp' configuration for GitHub OAuth with imports pointing to JavaScript implementations. It is functionally identical to the previous JavaScript Wasp auth config, demonstrating expected usage for API consumers.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/github.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      gitHub: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/github.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/github.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Task Entity Instance Directly Using Prisma Client (JavaScript)\nDESCRIPTION: Demonstrates direct usage of the Prisma Client within Wasp server code in JavaScript, importing the prisma instance from 'wasp/server'. It creates a new Task record with a given description and marks it as done. Requires: Wasp project setup, Prisma Client generated, usage in the server context. Expected output is a new row in the tasks table representing the Task Entity; description and isDone are required, and other fields are auto-filled or defaulted.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/entities.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { prisma } from 'wasp/server'\\n\\nprisma.task.create({\\n    description: \"Read the Entities doc\",\\n    isDone: true // almost :)\\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Website Dependencies\nDESCRIPTION: Command to install the required npm packages for the website.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variables for Keycloak\nDESCRIPTION: This snippet shows the required environment variables that need to be added to the .env.server file for Keycloak authentication. It includes the client ID, client secret, and realm URL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/keycloak.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nKEYCLOAK_CLIENT_ID=your-keycloak-client-id\nKEYCLOAK_CLIENT_SECRET=your-keycloak-client-secret\nKEYCLOAK_REALM_URL=https://your-keycloak-url.com/realms/master\n```\n\n----------------------------------------\n\nTITLE: Defining Google Auth User Signup Fields in TypeScript\nDESCRIPTION: Demonstrates how to define user signup fields for Google authentication using the new defineUserSignupFields function in a TypeScript file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const fields = defineUserSignupFields({\n  displayName: async (data) => {\n    const profile: any = data.profile;\n    if (!profile?.displayName) { throw new Error('Display name is not available'); }\n    return profile.displayName;\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Auth Method Data Existence in JavaScript\nDESCRIPTION: Example of how to safely check and access auth method data for a user in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/entities.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif (user.identities.google !== null) {\n  const userId = user.identities.google.id\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure with Tailwind Config Files\nDESCRIPTION: Shows the directory structure of a Wasp project with Tailwind configuration files added.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/css-frameworks.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── main.wasp\n├── package.json\n├── src\n│   ├── Main.css\n│   ├── MainPage.jsx\n│   ├── vite-env.d.ts\n│   └── waspLogo.png\n├── public\n├── tsconfig.json\n├── vite.config.ts\n├── postcss.config.cjs\n└── tailwind.config.cjs\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus Utility for Base URL Handling - Docusaurus JavaScript\nDESCRIPTION: This snippet imports the useBaseUrl hook from Docusaurus, enabling the construction of absolute URLs relative to the site's base. useBaseUrl is commonly required when referencing static assets or linking to site resources in a way that works regardless of deployment location. There are no required parameters at this point. A typical use is to generate correct image or document links that adapt to different deployment roots.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/wasp-ai/creating-new-app.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n```\n\n----------------------------------------\n\nTITLE: Client-Side WebSocket React Component in TypeScript\nDESCRIPTION: TypeScript React component implementing WebSocket functionality with full type safety, using typed hooks and payload definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/web-sockets.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react'\nimport {\n  useSocket,\n  useSocketListener,\n  ServerToClientPayload,\n} from 'wasp/client/webSocket'\n\nexport const ChatPage = () => {\n  const [messageText, setMessageText] = useState<\n    ClientToServerPayload<'chatMessage'>\n  >('')\n  const [messages, setMessages] = useState<\n    ServerToClientPayload<'chatMessage'>[]\n  >([])\n  const { socket, isConnected } = useSocket()\n\n  useSocketListener('chatMessage', logMessage)\n\n  function logMessage(msg: ServerToClientPayload<'chatMessage'>) {\n    setMessages((priorMessages) => [msg, ...priorMessages])\n  }\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    socket.emit('chatMessage', messageText)\n    setMessageText('')\n  }\n\n  const messageList = messages.map((msg) => (\n    <li key={msg.id}>\n      <em>{msg.username}</em>: {msg.text}\n    </li>\n  ))\n  const connectionIcon = isConnected ? '🟢' : '🔴'\n\n  return (\n    <>\n      <h2>Chat {connectionIcon}</h2>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <div>\n            <div>\n              <input\n                type=\"text\"\n                value={messageText}\n                onChange={(e) => setMessageText(e.target.value)}\n              />\n            </div>\n            <div>\n              <button type=\"submit\">Submit</button>\n            </div>\n          </div>\n        </form>\n        <ul>{messageList}</ul>\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Dummy Auth Provider\nDESCRIPTION: Example showing how the Dummy authentication provider is referenced in Wasp configuration. This is a development-only provider that will cause build failures if used in production.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/email/_dummy-provider-note.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::note Dummy Provider is not for production use\n\nThe `Dummy` provider is not for production use. It is only meant to be used during development. If you try building your app with the `Dummy` provider, the build will fail.\n:::\n```\n\n----------------------------------------\n\nTITLE: Navigating to Web App Build Directory in Wasp\nDESCRIPTION: Command to change directory to the web app build folder in a Wasp project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/_building-the-web-client.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd .wasp/build/web-app\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Signup Action in Wasp\nDESCRIPTION: This snippet shows how to define a custom signup action in the main.wasp file, importing the signup function from an external file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/email.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\naction customSignup {\n  fn: import { signup } from \"@src/auth/signup.js\",\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Discord Link Component in Markdown\nDESCRIPTION: This code snippet imports a custom React component called DiscordLink from a specific path in the project structure. It's used to embed a Discord invitation link in the markdown documentation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/contributing.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport DiscordLink from '@site/blog/components/DiscordLink';\n```\n\n----------------------------------------\n\nTITLE: Implementing API Middleware in JavaScript\nDESCRIPTION: JavaScript implementation of middleware configuration function that can be used to configure CORS and other middleware for APIs.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/apis.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const apiMiddleware = (config) => {\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateAccount Action in Wasp\nDESCRIPTION: Adds a new action configuration in the main.wasp file for updating account information. The action is associated with the User entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\naction updateAccount {\n  fn: import { updateAccount } from \"@server/account.js\",\n  entities: [User]\n}\n```\n\n----------------------------------------\n\nTITLE: Discord Authentication Configuration (JavaScript)\nDESCRIPTION: JavaScript implementation of Discord authentication configuration and user signup field mapping.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/discord.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const userSignupFields = {\n  username: (data) => data.profile.global_name,\n  avatarUrl: (data) => data.profile.avatar,\n}\n\nexport function getConfig() {\n  return {\n    scopes: ['identify'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Client Unit Test for Helper Function in TypeScript\nDESCRIPTION: Example of a simple unit test for a helper function in TypeScript using Vitest.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/testing.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Task } from \"wasp/entities\";\n\nexport function areThereAnyTasks(tasks: Task[]): boolean {\n  return tasks.length === 0;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from \"vitest\";\n\nimport { areThereAnyTasks } from \"./helpers\";\n\ntest(\"areThereAnyTasks\", () => {\n  expect(areThereAnyTasks([])).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing getEmail Helper with Direct Property Access in TypeScript/TSX\nDESCRIPTION: This snippet shows how to replace the deprecated getEmail helper with direct access to the user.identities.email.id property in both React components and server-side code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const email = user.identities.email?.id\n  // ...\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const createTask: CreateTask<...>  = async (args, context) => {\n    const email = context.user.identities.email?.id\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Email Auth Migration API Endpoint in Wasp\nDESCRIPTION: This Wasp code defines an API endpoint named `migrateEmail`. It configures a GET route at `/migrate-email` which, when accessed, executes the `migrateEmailHandler` function imported from `@src/migrateToNewAuth.ts`. This endpoint serves as the trigger for the bulk email user data migration process. It specifies that the operation does not directly depend on any specific database entities (`entities: []`).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_25\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napi migrateEmail {\n  httpRoute: (GET, \"/migrate-email\"),\n  fn: import { migrateEmailHandler } from \"@src/migrateToNewAuth\",\n  entities: []\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Import Path Updates in Wasp Config\nDESCRIPTION: Examples of updating import paths in Wasp configuration from old to new format.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npage LoginPage {\n  component: import Login from \"@client/LoginPage\"\n}\n\nquery getTasks {\n  fn: import { getTasks } from \"@server/queries.js\",\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\npage LoginPage {\n  component: import Login from \"@src/client/LoginPage\"\n}\n\nquery getTasks {\n  fn: import { getTasks } from \"@src/server/queries.js\",\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind Directives into CSS - CSS\nDESCRIPTION: This CSS snippet demonstrates how to import Tailwind's base, component, and utility styles into the main project stylesheet file (e.g., Main.css). By including these at the top of the CSS file, Tailwind's layers become available to all CSS in the project. No external dependencies are required beyond the configured Tailwind setup. The file expects to be processed by PostCSS according to provided configuration before being bundled by the application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/css-frameworks.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n\\n/* ... */\n```\n\n----------------------------------------\n\nTITLE: Importing Required Component in Markdown\nDESCRIPTION: This code snippet imports the Required component from a specific path, likely used for marking required fields or concepts in the documentation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Required } from '@site/src/components/Tag';\n```\n\n----------------------------------------\n\nTITLE: Extended Head Configuration in Wasp\nDESCRIPTION: Demonstrates how to add multiple custom elements to the head section including stylesheets, scripts, and meta tags.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/customizing-app.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"My App\",\n  head: [  // optional\n    \"<link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\\\" />\",\n    \"<script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js\\\"></script>\",\n    \"<meta name=\\\"viewport\\\" content=\\\"minimum-scale=1, initial-scale=1, width=device-width\\\" />\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity in Prisma Schema (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define the User entity in the schema.prisma file for a JavaScript project using Google authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/google.md#2025-04-22_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  // Add your own fields below\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Settings in Wasp\nDESCRIPTION: Demonstrates basic database configuration including system selection, seed imports, and Prisma preview features setup\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/backends.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  db: {\n    system: PostgreSQL,\n    seeds: [\n      import devSeed from \"@server/dbSeeds.js\"\n    ],\n    prisma: {\n      clientPreviewFeatures: [\"extendedWhereUnique\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Signup Action in Wasp\nDESCRIPTION: Defines a custom signup action in the main.wasp file that imports a signup function from a JavaScript file and references the User entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/entities/entities.md#2025-04-22_snippet_13\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\naction customSignup {\n  fn: import { signup } from \"@src/auth/signup.js\",\n  entities: [User]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Wasp Application Runner\nDESCRIPTION: Instructions for installing the wasp-app-runner globally from a local directory and using it to run Wasp applications with optional path and command arguments.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/wasp-app-runner/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n# Installs wasp-app-runner globally from the local directory\nnpm run install:global\n\n# Use the wasp-app-runner command to run your Wasp app\nwasp-app-runner [--path-to-app <path>] [--wasp-cli-cmd <command>]\n```\n\n----------------------------------------\n\nTITLE: Declaring Wasp Queries in main.wasp\nDESCRIPTION: Declares two Wasp queries, `getAllTasks` and `getFilteredTasks`, within the `main.wasp` file. Each query is linked to its corresponding implementation function exported from `@src/queries.js` (the extension might be `.ts` for TypeScript projects, but the import path often remains `.js`). This declaration prompts Wasp to generate server-side and client-side code for these queries.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/queries.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\n// ...\n\nquery getAllTasks {\n  fn: import { getAllTasks } from \"@src/queries.js\"\n}\n\nquery getFilteredTasks {\n  fn: import { getFilteredTasks } from \"@src/queries.js\"\n}\n```\n```\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\n// ...\n\nquery getAllTasks {\n  fn: import { getAllTasks } from \"@src/queries.js\"\n}\n\nquery getFilteredTasks {\n  fn: import { getFilteredTasks } from \"@src/queries.js\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running Arbitrary Fly Commands on Wasp Applications\nDESCRIPTION: Example of how to run arbitrary Fly.io CLI commands on your Wasp application. This specific example lists the secrets for the server application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/cli.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd secrets list --context server\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions in TypeScript\nDESCRIPTION: This snippet shows the implementation of the createTask and markTaskAsDone Actions in TypeScript. It includes type definitions, a simple in-memory database, and logic for creating tasks and marking them as done, with full type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/actions.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateTask, type MarkTaskAsDone } from 'wasp/server/operations'\n\ntype Task = {\n  id: number\n  description: string\n  isDone: boolean\n}\n\nlet nextId = 4\nconst tasks = [\n  { id: 1, description: 'Buy some eggs', isDone: true },\n  { id: 2, description: 'Make an omelette', isDone: false },\n  { id: 3, description: 'Eat breakfast', isDone: false },\n]\n\nexport const createTask: CreateTask<Pick<Task, 'description'>, Task> = (\n  args\n) => {\n  const newTask = {\n    id: nextId,\n    isDone: false,\n    description: args.description,\n  }\n  nextId += 1\n  tasks.push(newTask)\n  return newTask\n}\n\nexport const markTaskAsDone: MarkTaskAsDone<Pick<Task, 'id'>, void> = (\n  args\n) => {\n  const task = tasks.find((task) => task.id === args.id)\n  if (!task) {\n    return\n  }\n  task.isDone = true\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Inline Function Expression Examples\nDESCRIPTION: Shows the preferred use of arrow functions for inline function expressions in JavaScript, particularly in functional programming contexts like array methods.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/README.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// good\nconst squares = arr.map((x) => x * x);\n\n// bad\nconst squares = arr.map(function (x) {\n  return x * x;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring QueryClient via Setup Function (JavaScript, src/myClientSetupCode.js)\nDESCRIPTION: Shows how to configure the react-query QueryClient's default options inside the Wasp client setup function in JavaScript. Imports 'configureQueryClient' from 'wasp/client/operations', then overrides the queries.staleTime to Infinity. Used as setupFn in main.wasp to globally control query caching behavior. Requires wasp/client/operations and react-query.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/client-config.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureQueryClient } from 'wasp/client/operations'\n\nexport default async function mySetupFunction() {\n  // ... some setup\n  configureQueryClient({\n    defaultOptions: {\n      queries: {\n        staleTime: Infinity,\n      },\n    },\n  })\n  // ... some more setup\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wasp Actions Using Entities (JavaScript)\nDESCRIPTION: Provides the JavaScript implementation for `createTask` and `markTaskAsDone` actions defined in `src/actions.js`. Demonstrates accessing the Prisma API for the `Task` entity via `context.entities.Task` (made available by the `entities: [Task]` declaration in `main.wasp`) to create and update database records based on arguments (`args`) passed from the caller.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n// The 'args' object is the payload sent by the caller (most often from the client)\nexport const createTask = async (args, context) => {\n  const newTask = await context.entities.Task.create({\n    data: {\n      description: args.description,\n      isDone: false,\n    },\n  })\n  return newTask\n}\n\nexport const markTaskAsDone = async (args, context) => {\n  await context.entities.Task.update({\n    where: { id: args.id },\n    data: { isDone: true },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication UI Components in TypeScript/React\nDESCRIPTION: TypeScript version of the authentication components with proper type definitions for error handling and event management. Provides the same functionality as the JavaScript version but with added type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/email/create-your-own-ui.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  login,\n  requestPasswordReset,\n  resetPassword,\n  signup,\n  verifyEmail,\n} from 'wasp/client/auth'\n\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\nexport function Login() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState<Error | null>(null)\n  const navigate = useNavigate()\n\n  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n    setError(null)\n    try {\n      await login({ email, password })\n      navigate('/')\n    } catch (error: unknown) {\n      setError(error as Error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {error && <p>Error: {error.message}</p>}\n\n      <input\n        type=\"email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        placeholder=\"Email\"\n      />\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        placeholder=\"Password\"\n      />\n      <button type=\"submit\">Log In</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Server Logic in TypeScript\nDESCRIPTION: This snippet shows how to define the WebSocket server logic in TypeScript, including type definitions for events and payloads. It demonstrates Wasp's full-stack type safety features for WebSocket communication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/web-sockets.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { v4 as uuidv4 } from 'uuid'\nimport { getFirstProviderUserId } from 'wasp/auth'\nimport { type WebSocketDefinition, type WaspSocketData } from 'wasp/server/webSocket'\n\nexport const webSocketFn: WebSocketFn = (io, context) => {\n  io.on('connection', (socket) => {\n    const username = getFirstProviderUserId(socket.data.user) ?? 'Unknown'\n    console.log('a user connected: ', username)\n\n    socket.on('chatMessage', async (msg) => {\n      console.log('message: ', msg)\n      io.emit('chatMessage', { id: uuidv4(), username, text: msg })\n      // You can also use your entities here:\n      // await context.entities.SomeEntity.create({ someField: msg })\n    })\n  })\n}\n\ntype WebSocketFn = WebSocketDefinition<\n  ClientToServerEvents,\n  ServerToClientEvents,\n  InterServerEvents,\n  SocketData\n>\n\ninterface ServerToClientEvents {\n  chatMessage: (msg: { id: string, username: string, text: string }) => void;\n}\n\ninterface ClientToServerEvents {\n  chatMessage: (msg: string) => void;\n}\n\ninterface InterServerEvents {}\n\ninterface SocketData extends WaspSocketData {}\n```\n\n----------------------------------------\n\nTITLE: Tailing Logs for Heroku App - Shell\nDESCRIPTION: Streams and displays real-time logs from the Heroku app, assisting users in debugging and monitoring application behavior during and after deployment. Depends on Heroku CLI and the given <app-name>. Output is continuous logs until terminated.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/manually.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nheroku logs --tail --app <app-name>\n```\n\n----------------------------------------\n\nTITLE: Keycloak Environment Variables\nDESCRIPTION: Required environment variables for Keycloak configuration including client ID, secret, and realm URL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/keycloak.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nKEYCLOAK_CLIENT_ID=your-keycloak-client-id\nKEYCLOAK_CLIENT_SECRET=your-keycloak-client-secret\nKEYCLOAK_REALM_URL=https://your-keycloak-url.com/realms/master\n```\n\n----------------------------------------\n\nTITLE: Creating a Wasp Project with the Embeddings Template\nDESCRIPTION: Provides the command to initialize a Wasp project using the 'embeddings' template. Replace `<project-name>` with the actual project name. The `-t embeddings` flag selects the template focused on vector embeddings and similarity search, featuring OpenAI Embeddings API and Pinecone integration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/starter-templates.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwasp new <project-name> -t embeddings\n```\n\n----------------------------------------\n\nTITLE: AuthIdentity Entity Schema\nDESCRIPTION: Internal Prisma schema for the AuthIdentity entity that stores user login credentials for various authentication methods.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/entities/entities.md#2025-04-22_snippet_11\n\nLANGUAGE: prisma\nCODE:\n```\nmodel AuthIdentity {\n  providerName   String\n  providerUserId String\n  providerData   String @default(\"{}\")\n  authId         String\n  auth           Auth   @relation(fields: [authId], references: [id], onDelete: Cascade)\n\n  @@id([providerName, providerUserId])\n}\n```\n\n----------------------------------------\n\nTITLE: Building, Tagging, and Pushing x86 Docker Image for Apple Silicon - Shell\nDESCRIPTION: Executes a sequence of Docker commands for Apple Silicon (Arm) users to build an amd64 image, tag it appropriately, and push it to the Heroku registry, circumventing architecture incompatibilities with Heroku's platform. Requires Docker with buildx, the Heroku CLI, and replaces <app-name> with the actual app name. Produces and uploads a compatible Docker image for use by Heroku's runtime environment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/manually.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndocker buildx build --platform linux/amd64 -t <app-name> .\ndocker tag <app-name> registry.heroku.com/<app-name>/web\ndocker push registry.heroku.com/<app-name>/web\n```\n\n----------------------------------------\n\nTITLE: Embedding Image with Caption in Documentation - React JavaScript (JSX/MDX)\nDESCRIPTION: This snippet demonstrates the usage of the ImgWithCaption React component within a Markdown (MDX) file. The JSX-style tag embeds an image with a caption, specifying source and caption props directly. 'source' indicates the image filename, and 'caption' provides a human-readable description. Requires the ImgWithCaption component to be available in scope and processed by the Docusaurus MDX loader.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/wasp-ai/creating-new-app.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<ImgWithCaption\n    source=\"img/gpt-wasp/how-it-works.gif\"\n    caption=\"1. Describe your app 2. Pick the color 3. Generate your app 🚀\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Application Metadata and Authentication (Wasp DSL)\nDESCRIPTION: This snippet defines a Wasp application using the main.wasp file, specifying the app title, Wasp version, and enabling username/password authentication. It configures user entity association and custom redirect paths for authentication failure. No code dependencies are required aside from the Wasp toolchain; expected input is the Wasp project's configuration, outputting a project setup with authentication enabled.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/introduction/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp RecipeApp {\n  title: \"My Recipes\",\n  wasp: { version: \"^0.13.0\" },\n  auth: {\n    methods: { usernameAndPassword: {} },\n    onAuthFailedRedirectTo: \"/login\",\n    userEntity: User\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PostCSS Configuration for Tailwind - JavaScript\nDESCRIPTION: This JavaScript snippet defines a PostCSS configuration required for Tailwind CSS integration. It enables the tailwindcss and autoprefixer plugins via CommonJS module.exports and must be named postcss.config.cjs. This file should be placed in the project's root directory, and the project should have tailwindcss and autoprefixer as dev dependencies. The configuration allows CSS code to be processed and transformed for browser compatibility and utility class generation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/css-frameworks.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\\n  plugins: {\\n    tailwindcss: {},\\n    autoprefixer: {},\\n  },\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Social Login UI Helpers in React\nDESCRIPTION: This code demonstrates how to use Wasp's UI helpers for social login, including pre-made buttons and sign-in URLs for Google and GitHub.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  GoogleSignInButton,\n  googleSignInUrl,\n  GitHubSignInButton,\n  gitHubSignInUrl,\n} from 'wasp/client/auth'\n\nexport const LoginPage = () => {\n  return (\n    <>\n      <GoogleSignInButton />\n      <GitHubSignInButton />\n      {/* or */}\n      <a href={googleSignInUrl}>Sign in with Google</a>\n      <a href={gitHubSignInUrl}>Sign in with GitHub</a>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lucia Authentication in Next.js\nDESCRIPTION: Setting up Lucia authentication with SQLite adapter in a Next.js project. This includes initializing Lucia, configuring session cookies, and adding TypeScript support.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-13-how-to-add-auth-with-lucia-to-your-react-nextjs-app.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// lib/auth.ts\nimport { Lucia } from \"lucia\";\nimport { BetterSqlite3Adapter } from \"@lucia-auth/adapter-sqlite\";\n\nconst adapter = new BetterSQLite3Adapter(db); // your adapter\n\nexport const lucia = new Lucia(adapter, {\n  sessionCookie: {\n    // this sets cookies with super long expiration\n    // since Next.js doesn't allow Lucia to extend cookie expiration when rendering pages\n    expires: false,\n    attributes: {\n      // set to `true` when using HTTPS\n      secure: process.env.NODE_ENV === \"production\"\n    }\n  }\n});\n\n// To get some good Typescript support, add this!\ndeclare module \"lucia\" {\n  interface Register {\n    Lucia: typeof lucia;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Reference: Configuring Keycloak OAuth in Wasp - JavaScript\nDESCRIPTION: This snippet shows a minimal Wasp application configuration for Keycloak integration using JavaScript imports for configFn and userSignupFields. It demonstrates the expected syntax and the required properties. The dependencies are the referenced JavaScript functions from '@src/auth/keycloak.js'. The main input is Wasp's application configuration; output is compiled app with Keycloak authentication enabled.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/keycloak.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      keycloak: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/keycloak.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/keycloak.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Building React UI Components\nDESCRIPTION: Client-side React components implementing the user interface for displaying and managing excuses with Tailwind CSS styling.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-09-05-dev-excuses-app-tutrial.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useState } from 'react'\nimport { useQuery } from '@wasp/queries'\nimport getExcuse from '@wasp/queries/getExcuse'\nimport getAllSavedExcuses from '@wasp/queries/getAllSavedExcuses'\nimport saveExcuse from '@wasp/actions/saveExcuse'\n\nconst MainPage = () => {\n  const [currentExcuse, setCurrentExcuse] = useState({ text: \"\" })\n  const { data: excuses } = useQuery(getAllSavedExcuses)\n\n  const handleGetExcuse = async () => {\n    try {\n      setCurrentExcuse(await getExcuse())\n    } catch (err) {\n      window.alert('Error while getting the excuse: ' + err.message)\n    }\n  }\n\n  const handleSaveExcuse = async () => {\n    if (currentExcuse.text) {\n      try {\n        await saveExcuse(currentExcuse)\n      } catch (err) {\n        window.alert('Error while saving the excuse: ' + err.message)\n      }\n    }\n  }\n\n  return (\n    <div className=\"grid grid-cols-2 text-3xl\">\n      <div>\n          <button onClick={handleGetExcuse} className=\"mx-2 my-1 p-2 bg-blue-600 hover:bg-blue-400 text-white rounded\"> Get excuse </button>\n          <button onClick={handleSaveExcuse} className=\"mx-2 my-1 p-2 bg-blue-600 hover:bg-blue-400 text-white rounded\"> Save excuse </button>\n        <Excuse excuse={currentExcuse} />\n      </div>\n      <div>\n        <div className=\"px-6 py-2 bg-blue-600 text-white\"> Saved excuses: </div>\n        {excuses && <ExcuseList excuses={excuses} />}\n      </div>\n    </div>\n  )\n}\n\nconst ExcuseList = (props) => { \n  return props.excuses?.length ?  props.excuses.map((excuse, idx) => <Excuse excuse={excuse} key={idx} />) : 'No saved excuses'\n}\n\nconst Excuse = ({ excuse }) => {\n  return (\n    <div className=\"px-6 py-2\">\n      {excuse.text}\n    </div>\n  )\n}\n\nexport default MainPage\n```\n\n----------------------------------------\n\nTITLE: Updating Provider Data Access Pattern\nDESCRIPTION: Shows the migration from using providerData object and findUserIdentity helper to directly accessing provider data through user.identities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { findUserIdentity, AuthUser } from 'wasp/auth'\n\nfunction getProviderData(user: AuthUser) {\n  const emailIdentity = findUserIdentity(user, 'email')\n  // We needed this before check for proper type support\n  return emailIdentity && 'isEmailVerified' in emailIdentity.providerData\n    ? emailIdentity.providerData\n    : null\n}\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const providerData = getProviderData(user)\n  const isEmailVerified = providerData ? providerData.isEmailVerified : null\n  // ...\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  // The email object is properly typed, so we can access `isEmailVerified` directly\n  const isEmailVerified = user.identities.email?.isEmailVerified\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Hosting for Railway\nDESCRIPTION: Copy build files and create necessary configuration for Railway static hosting.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncp -r build dist\n```\n\n----------------------------------------\n\nTITLE: Setting Up Provider in Root Component (TypeScript)\nDESCRIPTION: Example of using the root component to set up a Redux provider in a Wasp application using TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/client-config.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.tsx\",\n  }\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root({ children }: { children: React.ReactNode }) {\n  return <Provider store={store}>{children}</Provider>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Vite Dev Server Port (JavaScript - Config)\nDESCRIPTION: Sets the Vite development server port to 4000 within the `vite.config.js` file by configuring the `server.port` option. Changing the port requires a corresponding update to the `WASP_WEB_CLIENT_URL` environment variable in the `.env.server` file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/custom-vite-config.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"vite.config.js\"\nexport default {\n  server: {\n    port: 4000,\n  },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Requesting Password Reset using Wasp Client Auth (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `requestPasswordReset` action from `wasp/client/auth`. It's typically called from a 'Forgot Password' page component, taking the user's email address as input to initiate the password reset process by sending a request to the server.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/email.md#2025-04-22_snippet_15\n\nLANGUAGE: js\nCODE:\n```\n```js title=\"src/pages/ForgotPasswordPage.jsx\"\nimport { requestPasswordReset } from 'wasp/client/auth'\n...\nawait requestPasswordReset({ email });\n```\n```\n\n----------------------------------------\n\nTITLE: Path-Specific Middleware Implementation in JavaScript\nDESCRIPTION: Implementation of a custom middleware function for a path namespace in JavaScript that adds a custom middleware to the configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/middleware-config.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport const fooBarNamespaceMiddlewareFn = (middlewareConfig) => {\n  const customMiddleware = (_req, _res, next) => {\n    console.log('fooBarNamespaceMiddlewareFn: custom middleware')\n    next()\n  }\n\n  middlewareConfig.set('custom.middleware', customMiddleware)\n\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Authentication in Task Query - Wasp Server (JavaScript)\nDESCRIPTION: This snippet defines an authenticated query function to fetch only the tasks belonging to the currently logged-in user. It uses Wasp's HttpError for error handling and ensures only authenticated users retrieve their own tasks ordered by ID. Requires 'wasp/server' for HttpError and appropriate Prisma user-task relationships.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/07-auth.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\n\nexport const getTasks = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401)\n  }\n  return context.entities.Task.findMany({\n    where: { user: { id: context.user.id } },\n    orderBy: { id: 'asc' },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js using nvm (shell)\nDESCRIPTION: Installs Node.js version 20 via Node Version Manager (nvm). Requires nvm to already be installed through a package manager or install script as referenced in the documentation. No additional parameters are needed. Executes in the user's shell and downloads plus installs the specified Node.js version for local use. Limitations: Only works if nvm is correctly installed and sourced in the shell.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/introduction/quick-start.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnvm install 20\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth UI Colors in TypeScript\nDESCRIPTION: TypeScript version of appearance configuration with proper type definitions\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/ui.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CustomizationOptions } from 'wasp/client/auth'\n\nexport const authAppearance: CustomizationOptions['appearance'] = {\n  colors: {\n    brand: '#5969b8', // blue\n    brandAccent: '#de5998', // pink\n    submitButtonText: 'white',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Auth Configuration in Wasp 0.11.X\nDESCRIPTION: Example of authentication configuration in Wasp 0.11.X, where the User entity needs to be manually set up with auth fields like email, password, and external auth associations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    externalAuthEntity: SocialLogin,\n    methods: {\n      gitHub: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n\nentity User {=psl\n  id                        Int           @id @default(autoincrement())\n  // highlight-start\n  username                  String        @unique\n  password                  String\n  externalAuthAssociations  SocialLogin[]\n  // highlight-end\npsl=}\n\n\n// highlight-start\nentity SocialLogin {=psl\n  id          Int       @id @default(autoincrement())\n  provider    String\n  providerId  String\n  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId      Int\n  createdAt   DateTime  @default(now())\n  @@unique([provider, providerId, userId])\npsl=}\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Defining Default Global Middleware Map in JavaScript\nDESCRIPTION: This snippet shows the JavaScript definition of the default global middleware used in a Wasp application's Express server. It initializes a Map containing standard middleware like Helmet for security, CORS for cross-origin requests, Morgan for logging, Express JSON and URL-encoded body parsers, and cookie-parser. The CORS configuration depends on `config.allowedCORSOrigins` from Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/middleware-config.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst defaultGlobalMiddleware = new Map([\n  ['helmet', helmet()],\n  ['cors', cors({ origin: config.allowedCORSOrigins })],\n  ['logger', logger('dev')],\n  ['express.json', express.json()],\n  ['express.urlencoded', express.urlencoded({ extended: false })],\n  ['cookieParser', cookieParser()]\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Setup Function in JavaScript\nDESCRIPTION: Demonstrates how to implement a client setup function in JavaScript. This function is executed on the client before everything else and can be used for custom setup tasks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/client-config.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport default async function mySetupFunction() {\n  // Run some code\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Actions on Client or Server in JavaScript\nDESCRIPTION: Demonstrates how to import a declared Action for use on either the client or server side in JavaScript code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Use it on the client\nimport { createFoo } from 'wasp/client/operations'\n\n// Use it on the server\nimport { createFoo } from 'wasp/server/operations'\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with useAction in React Component (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the useAction hook to implement optimistic updates for a markTaskAsDone action in a React component. It shows the configuration of optimisticUpdates and how to use the enhanced action in the component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/actions.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useQuery } from '@wasp/queries'\nimport { useAction } from '@wasp/actions'\nimport getTask from '@wasp/queries/getTask'\nimport markTaskAsDone from '@wasp/actions/markTaskAsDone'\n\nconst TaskPage = ({ id }) => {\n  const { data: task } = useQuery(getTask, { id })\n  const markTaskAsDoneOptimistically = useAction(markTaskAsDone, {\n    optimisticUpdates: [\n      {\n        getQuerySpecifier: ({ id }) => [getTask, { id }],\n        updateQuery: (_payload, oldData) => ({ ...oldData, isDone: true }),\n      },\n    ],\n  })\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>\n  }\n\n  const { description, isDone } = task\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n      {isDone || (\n        <button onClick={() => markTaskAsDoneOptimistically({ id })}>\n          Mark as done.\n        </button>\n      )}\n    </div>\n  )\n}\n\nexport default TaskPage\n```\n\n----------------------------------------\n\nTITLE: Accessing Job Properties via SubmittedJob\nDESCRIPTION: Demonstrates the main properties available on a SubmittedJob instance returned by submit(). Includes jobId for tracking, jobName from .wasp file, and executorName indicating the job executor used.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/jobs.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst job = submit();\njob.jobId       // The ID for the job in that executor\njob.jobName     // The name of the job from .wasp file\njob.executorName // Symbol of the job executor name\n```\n\n----------------------------------------\n\nTITLE: Installing Secure Password Dependencies using Bash\nDESCRIPTION: Installs specific versions of `secure-password` (4.0.0) and `sodium-native` (3.3.0) using npm. These packages are required to verify passwords hashed with the older algorithm during the user-driven password migration process. Using `--save-exact` ensures these specific versions are used, maintaining compatibility with the old hashing method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpm install secure-password@4.0.0 sodium-native@3.3.0 --save-exact\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Old Password Hashing\nDESCRIPTION: This Bash command installs specific versions of `secure-password` (v4.0.0) and `sodium-native` (v3.3.0) using npm. These packages are required by the backend password migration logic to verify passwords hashed with the older algorithm used in previous Wasp versions. Using `--save-exact` ensures these specific versions are installed.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpm install secure-password@4.0.0 sodium-native@3.3.0 --save-exact\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Google Auth Scopes with getConfig (TypeScript)\nDESCRIPTION: This TypeScript snippet shows the implementation of the `getConfig` function, intended to be imported into the `main.wasp` configuration. It exports a function that returns an object containing an array of strings specifying the Google OAuth scopes ('profile', 'email') required by the application. This version provides the same functionality as the JavaScript example but within a TypeScript file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/google.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication in Wasp\nDESCRIPTION: Basic configuration for enabling email authentication in a Wasp application's main configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/ui.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  //...\n  auth: {\n    methods: {\n      email: {},\n    },\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing updateTask Action in JavaScript\nDESCRIPTION: This server-side function updates a task's isDone status in the database using the Prisma ORM.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-30-optimistic-update-feature-announcement.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const updateTask = async ({ id, isDone }, context) => {\n  return context.entities.Task.updateMany({\n    where: { id },\n    data: { isDone }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using getFirstProviderUserId Helper in JavaScript\nDESCRIPTION: Example of using the getFirstProviderUserId helper method to retrieve the first available user ID in a Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/entities.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst MainPage = ({ user }) => {\n  const userId = user.getFirstProviderUserId()\n  // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport const createTask = async (args, context) => {\n  const userId = context.user.getFirstProviderUserId()\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Wasp Dockerfile\nDESCRIPTION: This command displays the potentially combined Dockerfile for a Wasp project, including any custom modifications. It's useful for verifying the final Dockerfile contents before deployment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwasp dockerfile\n```\n\n----------------------------------------\n\nTITLE: Deploying Backend to Fly.io\nDESCRIPTION: Command to deploy the Wasp backend to Fly.io using remote builders and referencing the configuration file saved in the project root.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/manually.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflyctl deploy --remote-only --config ../../fly.toml\n```\n\n----------------------------------------\n\nTITLE: Seeding Production/Stage Database with Specific Function - Bash\nDESCRIPTION: Executes a Wasp data seeding command with the 'DATABASE_URL' explicitly set to seed a specific database (for example, a production database) with a given seed function. Dependencies: Wasp CLI, a defined seed function, and valid database URL. Command structure: environment variable, CLI tool, and seed function name. Useful for environment-specific initialization.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/backends.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=<production-db-url> wasp db seed myProductionSeed\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Signup Fields on Server in Wasp main.wasp (JavaScript)\nDESCRIPTION: This Wasp config snippet shows how to import and use server-side custom signup field validation for the usernameAndPassword method. The userSignupFields key imports validation logic from a JavaScript module, which must export a userSignupFields object. Place within the methods key for the desired auth provider.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/overview.md#2025-04-22_snippet_18\n\nLANGUAGE: wasp\nCODE:\n```\napp crudTesting {\n  // ...\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/signup\",\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Signup Fields (Before Wasp 0.13.0) in TypeScript\nDESCRIPTION: Demonstrates the previous way to define custom user fields during signup using `userSignupFields` in a provider-specific file (e.g., `google.ts`). This example maps the `displayName` from the provider's profile data (`data.profile.displayName`). This mapping might need adjustment in Wasp 0.13.0 due to profile format changes.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n    displayName: (data: any) => data.profile.displayName,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Stored Values in Queries (JavaScript)\nDESCRIPTION: Shows how to use values stored during server setup in a query operation. The example demonstrates importing and using a function to access the stored resource within a query.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/server-config.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSomeResource } from './myServerSetupCode.js'\n\n...\n\nexport const someQuery = async (args, context) => {\n  const someResource = getSomeResource()\n  return queryDataFromSomeResource(args, someResource)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Scheduled Jobs in Wasp DSL\nDESCRIPTION: This Wasp code defines two scheduled background jobs: one that fetches GitHub statistics every 10 minutes and another that calculates webpage load time every 5 minutes. The jobs use PgBoss as the executor and reference worker functions from imported JavaScript modules.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-06-15-jobs-feature-announcement.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\n// A cron job for fetching GitHub stats\njob getGithubStats {\n  executor: PgBoss,\n  perform: {\n    fn: import { workerFunction } from \"@server/workers/github.js\"\n  },\n  schedule: {\n    cron: \"*/10 * * * *\"\n  }\n}\n\n// A cron job to measure how long a webpage takes to load\njob calcPageLoadTime {\n  executor: PgBoss,\n  perform: {\n    fn: import { workerFunction } from \"@server/workers/loadTime.js\"\n  },\n  schedule: {\n    cron: \"*/5 * * * *\",\n    args: {=json {\n      \"url\": \"https://wasp.sh\",\n      \"name\": \"wasp.sh Load Time\"\n    } json=}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Cache Key in Wasp (TypeScript)\nDESCRIPTION: This snippet shows how to access the query cache key in Wasp for TypeScript. It demonstrates obtaining the queryCacheKey property from a Wasp query in a type-safe manner.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/actions.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport getTasks from '@wasp/queries/getTasks'\n\nconst queryKey = getTasks.queryCacheKey\n```\n\n----------------------------------------\n\nTITLE: Legacy Auth Field Definition in TypeScript\nDESCRIPTION: Shows how additional signup fields were defined in the old auth system using defineAdditionalSignupFields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineAdditionalSignupFields } from '@wasp/auth/index.js'\n\nexport const fields = defineAdditionalSignupFields({\n  address: async (data) => {\n    const address = data.address\n    if (typeof address !== 'string') {\n      throw new Error('Address is required')\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long')\n    }\n    return address\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing SignupForm with Additional Fields in TypeScript\nDESCRIPTION: TypeScript version of the SignupForm customization, showing how to add address and phone number fields with proper type definitions and validation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignupForm } from '@wasp/auth/forms/Signup'\nimport {\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from '@wasp/auth/forms/internal/Form'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Query in React Component (JavaScript)\nDESCRIPTION: JavaScript React component that uses the 'getTasks' query to fetch and display a list of tasks, with loading and error states handled.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/05-queries.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getTasks, useQuery } from 'wasp/client/operations'\n\nexport const MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n\nconst TaskView = ({ task }) => {\n  return (\n    <div>\n      <input type=\"checkbox\" id={String(task.id)} checked={task.isDone} />\n      {task.description}\n    </div>\n  )\n}\n\nconst TasksList = ({ tasks }) => {\n  if (!tasks?.length) return <div>No tasks</div>\n\n  return (\n    <div>\n      {tasks.map((task, idx) => (\n        <TaskView task={task} key={idx} />\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Seed Function in JavaScript\nDESCRIPTION: Creates a seed function that adds a user and a task to the database using Prisma Client and an imported action.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/backends.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createTask } from \"./actions.js\";\n\nexport const devSeedSimple = async (prismaClient) => {\n  const user = await createUser(prismaClient, {\n    username: \"RiuTheDog\",\n    password: \"bark1234\",\n  });\n\n  await createTask(\n    { description: \"Chase the cat\" },\n    { user, entities: { Task: prismaClient.task } }\n  );\n};\n\nasync function createUser(prismaClient, data) {\n  const { password, ...newUser } = await prismaClient.user.create({ data });\n  return newUser;\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Wasp Project Build Artifacts\nDESCRIPTION: Illustrates the execution and output of the `wasp clean` command. This command removes generated code located in the `.wasp/` directory and project dependencies in the `node_modules/` directory, effectively resetting the build state. It's useful for resolving potential caching or build issues.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/general/cli.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp clean\n\n🐝 --- Deleting the .wasp/ directory... -------------------------------------------\n\n✅ --- Deleted the .wasp/ directory. ----------------------------------------------\n\n🐝 --- Deleting the node_modules/ directory... ------------------------------------\n\n✅ --- Deleted the node_modules/ directory. ---------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Creating Todo App with Typescript Template - Shell\nDESCRIPTION: This example demonstrates how to initialize a new Wasp project pre-configured for a full-stack TypeScript Todo App with type safety. The command requires the Wasp CLI installed in the system and uses <project-name> as the placeholder for your project directory. Outputs a project with authentication, full-stack type safety, and ready-to-develop code structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/starter-templates.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwasp new <project-name> -t todo-ts\n```\n\n----------------------------------------\n\nTITLE: Providing Client Environment Variable at Build Time (Shell)\nDESCRIPTION: Illustrates the syntax for supplying a client environment variable (REACT_APP_SOME_VAR_NAME) at the time of running the build command. Ensures that the specified value is embedded into the built client code. Only public, non-secret configuration values should be provided in this way for client-side use.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/env-vars.md#2025-04-22_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nREACT_APP_SOME_VAR_NAME=somevalue npm run build\n```\n\n----------------------------------------\n\nTITLE: Implementing Discord Auth Functions in JavaScript\nDESCRIPTION: This code defines the userSignupFields and getConfig functions for Discord authentication in JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/discord.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const userSignupFields = {\n  username: (data) => data.profile.global_name,\n  avatarUrl: (data) => data.profile.avatar,\n}\n\nexport function getConfig() {\n  return {\n    scopes: ['identify'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ShowForTs Component in React JSX\nDESCRIPTION: This code imports the ShowForTs component from the site's components directory. This component is used to conditionally render content specifically for TypeScript users.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/_superjson-note.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ShowForTs } from '@site/src/components/TsJsHelpers';\n```\n\n----------------------------------------\n\nTITLE: Basic Wasp Configuration File Structure\nDESCRIPTION: Main Wasp configuration file that defines the app structure, including authentication settings and user entity model.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-09-build-real-time-voting-app-websockets-react-typescript.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\napp whereDoWeEat {\n  wasp: {\n    version: \"^0.13.2\"\n  },\n  title: \"where-do-we-eat\",\n  client: {\n    rootComponent: import { Layout } from \"@src/client/Layout\",\n  },\n  // 🔐 This is how we get Auth in our app. Easy!\n  auth: {\n    userEntity: User,\n    onAuthFailedRedirectTo: \"/login\",\n    methods: {\n      usernameAndPassword: {}\n    }\n  },\n}\n\n// 👱 this is the data model for our registered users in our database\nentity User {=psl\n  id       Int     @id @default(autoincrement())\npsl=}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Describing Previous Client/Server Directory Structure - Markdown\nDESCRIPTION: This snippet illustrates the legacy file organization typical in older Wasp projects, where code was separated into client, server, and shared directories. The hierarchical tree uses Markdown code block formatting to visually distinguish front-end, back-end, and shared utilities. The listing is suitable for documentation, not meant to be executed or parsed programmatically.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n```\nsrc\n│\n├── client\n│   ├── Dashboard.tsx\n│   ├── Login.tsx\n│   ├── MainPage.tsx\n│   ├── Register.tsx\n│   ├── Task.css\n│   ├── TaskLisk.tsx\n│   ├── Task.tsx\n│   └── User.tsx\n├── server\n│   ├── taskActions.ts\n│   ├── taskQueries.ts\n│   ├── userActions.ts\n│   └── userQueries.ts\n└── shared\n    └── utils.ts\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Create Task Operation in TypeScript\nDESCRIPTION: This TypeScript code implements a custom create operation for tasks, ensuring type safety and connecting the task to the authenticated user creating it.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/crud.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Tasks } from 'wasp/server/crud'\nimport { type Task } from 'wasp/entities'\nimport { HttpError } from 'wasp/server'\n\ntype CreateTaskInput = { description: string; isDone: boolean }\n\nexport const createTask: Tasks.CreateAction<CreateTaskInput, Task> = async (\n  args,\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(401, 'User not authenticated.')\n  }\n\n  const { description, isDone } = args\n  const { Task } = context.entities\n\n  return await Task.create({\n    data: {\n      description,\n      isDone,\n      // highlight-start\n      // Connect the task to the user that is creating it\n      user: {\n        connect: {\n          id: context.user.id,\n        },\n      },\n      // highlight-end\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onBeforeSignup Hook in TypeScript\nDESCRIPTION: This snippet shows the implementation of the onBeforeSignup hook in TypeScript. It includes type annotations and demonstrates how to perform pre-signup checks and validations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/auth-hooks.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpError } from 'wasp/server'\nimport type { OnBeforeSignupHook } from 'wasp/server/auth'\n\nexport const onBeforeSignup: OnBeforeSignupHook = async ({\n  providerId,\n  prisma,\n  req,\n}) => {\n  const count = await prisma.user.count()\n  console.log('number of users before', count)\n  console.log('provider name', providerId.providerName)\n  console.log('provider user ID', providerId.providerUserId)\n\n  if (count > 100) {\n    throw new HttpError(403, 'Too many users')\n  }\n\n  if (\n    providerId.providerName === 'email' &&\n    providerId.providerUserId === 'some@email.com'\n  ) {\n    throw new HttpError(403, 'This email is not allowed')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User Entity for Authentication\nDESCRIPTION: Wasp configuration showing how to define the User entity for authentication with the required ID field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/email.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  title: \"My app\",\n  // ...\n\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        // We'll explain these options below\n      },\n    },\n    onAuthFailedRedirectTo: \"/someRoute\"\n  },\n  // ...\n}\n\nentity User {=psl\n    // highlight-next-line\n    id                        Int           @id @default(autoincrement())\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in React JSX\nDESCRIPTION: This code snippet demonstrates how to embed a YouTube video player in a React component using JSX. It sets up an iframe with specific dimensions and attributes for displaying the video.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-04-27-wasp-hackathon-two.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ textAlign: \"center\", width: \"100%\", height: \"400px\", display: \"inline-block\" }}>\n<iframe height=\"100%\" width =\"100%\" src=\"https://www.youtube.com/embed/ts2mQHLBnc0\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"true\"></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Environment Variables in JavaScript (Wasp)\nDESCRIPTION: Demonstrates how to read a client-side environment variable (prefixed with `REACT_APP_`) within JavaScript code using `import.meta.env`. These variables are embedded during build time, are publicly accessible, and should not contain secrets. This example logs the value of `REACT_APP_SOME_VAR_NAME`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/project/env-vars.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(import.meta.env.REACT_APP_SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Keycloak User ID in TypeScript\nDESCRIPTION: This snippet extracts the Keycloak identity from the user object and accesses the Keycloak User ID. The ID is a UUID string format.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/_keycloak-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst keycloakIdentity = user.identities.keycloak\n\n// Keycloak User ID for example \"12345678-1234-1234-1234-123456789012\"\nkeycloakIdentity.id\n```\n\n----------------------------------------\n\nTITLE: Running Specific Seed Function in Wasp CLI\nDESCRIPTION: Demonstrates how to run a specific seed function using the Wasp CLI command.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/databases.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwasp db seed devSeedSimple\n```\n\n----------------------------------------\n\nTITLE: Configuring User Entity in Wasp Auth (`main.wasp`)\nDESCRIPTION: Defines the `userEntity` setting within the `auth` configuration block in a `main.wasp` file. This specifies which Prisma model (here, `User`) represents the application's business logic user, connecting it to Wasp's authentication system.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/entities.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"My App\",\n  auth: {\n    // highlight-next-line\n    userEntity: User,\n    // ...\n  },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Environment Variables in TypeScript\nDESCRIPTION: Demonstrates how to access server-side environment variables in TypeScript server code using process.env.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/env-vars.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(process.env.SOME_VAR_NAME)\n```\n\n----------------------------------------\n\nTITLE: Adding Generator Block to SQLite Configuration in schema.prisma\nDESCRIPTION: Adds the Prisma Client generator block to the SQLite configuration in schema.prisma to specify which client generator Wasp should use.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// highlight-start\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication in Wasp\nDESCRIPTION: This snippet shows how to configure email authentication in the main.wasp file, including specifying the user entity, enabling email auth, and setting up email verification and password reset options.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/email.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        fromField: {\n          name: \"My App Postman\",\n          email: \"hello@itsme.com\"\n        },\n        emailVerification: {\n          clientRoute: EmailVerificationRoute,\n        },\n        passwordReset: {\n          clientRoute: PasswordResetRoute,\n        },\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n    onAuthSucceededRedirectTo: \"/\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Namespace Middleware in Wasp\nDESCRIPTION: Declaration of an API namespace in Wasp to apply middleware to all APIs under a specific path, useful for CORS configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/apis.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\napiNamespace fooBar {\n  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from \"@server/apis.js\",\n  path: \"/foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Wasp Server to Heroku\nDESCRIPTION: Steps to build and deploy the Wasp server as a Docker container to Heroku.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/deployment/manually.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncd .wasp/build\nheroku container:login\nheroku container:push --app <app-name> web\nheroku container:release --app <app-name> web\n```\n\n----------------------------------------\n\nTITLE: Configuring Client URL Environment Variable\nDESCRIPTION: Command to set the client URL environment variable for CORS configuration on the server.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/cli.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd --context server secrets set WASP_WEB_CLIENT_URL=https://mycoolapp.com\n```\n\n----------------------------------------\n\nTITLE: Password Reset Content Generator\nDESCRIPTION: Function to generate custom email content for password reset emails, including subject and HTML/text content.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/email.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getPasswordResetEmailContent: GetPasswordResetEmailContentFn = ({\n  passwordResetLink,\n}) => ({\n  subject: 'Password reset',\n  text: `Click the link below to reset your password: ${passwordResetLink}`,\n  html: `\n        <p>Click the link below to reset your password</p>\n        <a href=\"${passwordResetLink}\">Reset password</a>\n    `,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Component in TypeScript\nDESCRIPTION: Shows an example of implementing a root component in TypeScript. It demonstrates setting up a Redux provider and a custom layout with type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/client-config.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root({ children }: { children: React.ReactNode }) {\n  return (\n    <Provider store={store}>\n      <Layout>{children}</Layout>\n    </Provider>\n  )\n}\n\nfunction Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      {children}\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating External Import Paths in Wasp File\nDESCRIPTION: Example showing how to update external import paths in main.wasp file, changing @client to @src/client and @server to @src/server to match the new import structure in Wasp 0.12.X.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\npage LoginPage {\n  // highlight-next-line\n  // This previously resolved to src/client/LoginPage.js\n  // highlight-next-line\n  component: import Login from \"@client/LoginPage\"\n}\n\n// ...\n\nquery getTasks {\n  // highlight-next-line\n  // This previously resolved to src/server/queries.js\n  // highlight-next-line\n  fn: import { getTasks } from \"@server/queries.js\",\n}\n```\n\nLANGUAGE: js\nCODE:\n```\npage LoginPage {\n  // highlight-next-line\n  // This now resolves to src/client/LoginPage.js\n  // highlight-next-line\n  component: import Login from \"@src/client/LoginPage\"\n}\n\n// ...\n\nquery getTasks {\n  // highlight-next-line\n  // This now resolves to src/server/queries.js\n  // highlight-next-line\n  fn: import { getTasks } from \"@src/server/queries.js\",\n}\n```\n\n----------------------------------------\n\nTITLE: Axios Version Conflict Error in Wasp\nDESCRIPTION: Error message when trying to use a different version of Axios than what Wasp is using internally, showing that dependencies must match Wasp's versions exactly.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/examples/waspleau/Notes.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwasp: Error: Dependency conflict for user npm dependency (axios, ^0.21.1): Version must be set to the exactly the same version as the one wasp is using: ^0.21.1\nCallStack (from HasCallStack):\n  error, called at src/Generator/WebAppGenerator.hs:73:31 in waspc-0.2.2.2-B3XOTY4be7eFFZyFqJsQfH:Generator.WebAppGenerator\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Image URL in React Component (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to import an image file as a URL and use it in a React component. The imported URL will be processed differently in development and production environments.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/static-assets.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport imgUrl from './img.png'\n\nfunction App() {\n  return <img src={imgUrl} alt=\"img\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Google OAuth Configuration Example\nDESCRIPTION: Simplified Wasp configuration showing just the essential app and auth method settings for Google OAuth. Used in the API reference section to highlight the core configuration properties.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/google.md#2025-04-22_snippet_12\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {\n        // highlight-next-line\n        configFn: import { getConfig } from \"@src/auth/google.js\",\n        // highlight-next-line\n        userSignupFields: import { userSignupFields } from \"@src/auth/google.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Wasp Version in main.wasp\nDESCRIPTION: Provides the specific code change needed in the `main.wasp` file to update the required Wasp version to `^0.14.0`. This is the first step in the migration process to ensure the project uses the new features and structure introduced in version 0.14.x.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\n```wasp title=\"main.wasp\"\napp MyApp {\n  wasp: {\n    // highlight-next-line\n    version: \"^0.14.0\"\n  },\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signup in JavaScript\nDESCRIPTION: A JavaScript implementation of a custom signup function that handles email validation, password verification, user creation, and email verification. It uses Wasp's built-in auth utilities to ensure secure authentication flow.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/email.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  ensurePasswordIsPresent,\n  ensureValidPassword,\n  ensureValidEmail,\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  deserializeAndSanitizeProviderData,\n  findAuthIdentity,\n  createUser,\n  createEmailVerificationLink,\n  sendEmailVerificationEmail,\n} from 'wasp/server/auth'\n\nexport const signup = async (args, _context) => {\n  ensureValidEmail(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n\n  try {\n    const providerId = createProviderId('email', args.email)\n    const existingAuthIdentity = await findAuthIdentity(providerId)\n\n    if (existingAuthIdentity) {\n      const providerData = deserializeAndSanitizeProviderData(existingAuthIdentity.providerData)\n      // Your custom code here\n    } else {\n      // sanitizeAndSerializeProviderData will hash the user's password\n      const newUserProviderData = await sanitizeAndSerializeProviderData({\n          hashedPassword: args.password,\n          isEmailVerified: false,\n          emailVerificationSentAt: null,\n          passwordResetSentAt: null,\n      })\n      await createUser(\n        providerId,\n        providerData,\n        // Any additional data you want to store on the User entity\n        {},\n      )\n\n      // Verification link links to a client route e.g. /email-verification\n      const verificationLink = await createEmailVerificationLink(args.email, '/email-verification');\n      try {\n          await sendEmailVerificationEmail(\n              args.email,\n              {\n                  from: {\n                    name: \"My App Postman\",\n                    email: \"hello@itsme.com\",\n                  },\n                  to: args.email,\n                  subject: \"Verify your email\",\n                  text: `Click the link below to verify your email: ${verificationLink}`,\n                  html: `\n                      <p>Click the link below to verify your email</p>\n                      <a href=\"${verificationLink}\">Verify email</a>\n                  `,\n              }\n          );\n      } catch (e: unknown) {\n          console.error(\"Failed to send email verification email:\", e);\n          throw new HttpError(500, \"Failed to send email verification email.\");\n      } \n    }\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication in Wasp\nDESCRIPTION: This snippet shows how to configure email authentication in the main.wasp file, including specifying the user entity, enabling email auth, and setting up email verification and password reset options.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      email: {\n        fromField: {\n          name: \"My App Postman\",\n          email: \"hello@itsme.com\"\n        },\n        emailVerification: {\n          clientRoute: EmailVerificationRoute,\n        },\n        passwordReset: {\n          clientRoute: PasswordResetRoute,\n        },\n      },\n    },\n    onAuthFailedRedirectTo: \"/login\",\n    onAuthSucceededRedirectTo: \"/\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Application Metadata in WASP (After Migration) - WASP\nDESCRIPTION: This WASP snippet represents the minimal application configuration for Wasp v0.14.0 and later, where entity definitions have been migrated out. The snippet contains only core metadata such as the application name, WASP version, and title. There are no database or entity sections, making the .wasp file a concise project descriptor. This setup requires the presence of an external schema.prisma file for model definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.14.0\"\n  },\n  title: \"MyApp\",\n}\n```\n\n----------------------------------------\n\nTITLE: Using Queries on the Server in JavaScript\nDESCRIPTION: Explains how to use Queries on the server-side in JavaScript, including the differences from client-side usage such as importing from 'wasp/server/operations' and passing a context object with the user for authenticated Queries.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/queries.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAllTasks, getFilteredTasks } from 'wasp/server/operations'\n\n\nconst user = // Get an AuthUser object, e.g., from context.user in an operation.\n\n// ...\n\nconst allTasks = await getAllTasks({ user })\nconst doneTasks = await getFilteredTasks({ isDone: true }, { user })\n```\n\n----------------------------------------\n\nTITLE: Updating User Signup Fields for OAuth in TypeScript (After)\nDESCRIPTION: The updated implementation of defineUserSignupFields that uses the new profile data format from OAuth providers. The structure has changed, with displayName being replaced by name in the profile object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n    displayName: (data: any) => data.profile.name,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining External Auth Entity in Wasp (TypeScript)\nDESCRIPTION: This TypeScript version of the Wasp code snippet defines the SocialLogin entity required for implementing social login. It includes fields for provider information, user association, and creation timestamp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\nentity SocialLogin {=psl\n  id          Int       @id @default(autoincrement())\n  provider    String\n  providerId  String\n  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId      Int\n  createdAt   DateTime  @default(now())\n  @@unique([provider, providerId, userId])\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Configuring User Entity with Auth in Wasp\nDESCRIPTION: A Wasp configuration file that sets up the authentication system with username and password method, specifying the User entity and redirect behavior. This is the basic setup required for Wasp's authentication system.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/username-and-pass.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  }\n}\n\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Signup Action in Wasp (TypeScript)\nDESCRIPTION: Registers a custom signup action in a Wasp project using TypeScript. References a TypeScript module implementing the signup logic. This declaration must be placed in the main.wasp configuration file for custom authentication flows, and complements the implementation provided in the backend code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/username-and-pass.md#2025-04-22_snippet_9\n\nLANGUAGE: Wasp\nCODE:\n```\n// ...\naction customSignup {\n  fn: import { signup } from \"@src/auth/signup\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Task Entity in Wasp\nDESCRIPTION: This snippet shows how to define a Task entity in Wasp using PSL (Prisma Schema Language). The entity includes an ID, description, and a boolean isDone field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/crud.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nentity Task {=psl\n  id          Int @id @default(autoincrement())\n  description String\n  isDone      Boolean\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint in JavaScript\nDESCRIPTION: Example of declaring an authenticated API endpoint in Wasp that handles GET requests to /foo/bar. The declaration includes function implementation import, HTTP route configuration, entity access, authentication requirement, and middleware configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/apis.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar {\n  fn: import { fooBar } from \"@src/apis\",\n  httpRoute: (GET, \"/foo/bar\"),\n  entities: [Task],\n  auth: true,\n  middlewareConfigFn: import { apiMiddleware } from \"@src/apis\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Auth Pages in React (JavaScript)\nDESCRIPTION: This snippet shows how to create the authentication pages using React components in JavaScript, including a login form and a layout component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/discord.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }) {\n  return (\n    <div className=\"w-full h-full bg-white\">\n      <div className=\"min-w-full min-h-[75vh] flex items-center justify-center\">\n        <div className=\"w-full h-full max-w-sm p-5 bg-white\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Wasp Query for Use in JavaScript\nDESCRIPTION: Imports the generated client-side JavaScript function createFoo (derived from the Wasp query declaration) for use in any part of the application. This enables invoking the Action from UI components or other client code. Requires prior declaration in the Wasp file and proper build steps.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/actions.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { createFoo } from 'wasp/client/operations'\n```\n\n----------------------------------------\n\nTITLE: Legacy Directory Structure in Wasp\nDESCRIPTION: Example of the old directory structure in Wasp projects before version 0.12.x showing separation of client and server code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc\n│\n├── client\n│   ├── Dashboard.tsx\n│   ├── Login.tsx\n│   ├── MainPage.tsx\n│   ├── Register.tsx\n│   ├── Task.css\n│   ├── TaskLisk.tsx\n│   ├── Task.tsx\n│   └── User.tsx\n├── server\n│   ├── taskActions.ts\n│   ├── taskQueries.ts\n│   ├── userActions.ts\n│   └── userQueries.ts\n└── shared\n    └── utils.ts\n```\n\n----------------------------------------\n\nTITLE: Using getEmail in React Component (JavaScript)\nDESCRIPTION: Demonstrates how to use the getEmail helper function within a React component to retrieve a user's email address. The function takes a user object as input and returns either the email string or null.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/_get-email.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getEmail } from 'wasp/auth'\n\nconst MainPage = ({ user }) => {\n  const email = getEmail(user)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Datasource in schema.prisma\nDESCRIPTION: Defines the datasource block for SQLite in the schema.prisma file, specifying the database provider and connection URL.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp Client with RootComponent and SetupFn (TypeScript, main.wasp)\nDESCRIPTION: Defines the client field of the Wasp app to point to TypeScript modules for both the React root component and a setup function. This version is intended for projects using TypeScript and promotes type safety while configuring the app startup and root rendering. Requires Wasp, React, and TypeScript client modules.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/client-config.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  title: \"My app\",\n  // ...\n  client: {\n    rootComponent: import Root from \"@src/Root.tsx\",\n    setupFn: import mySetupFunction from \"@src/myClientSetupCode.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp on Linux/macOS via Script (Shell)\nDESCRIPTION: Downloads and executes the official Wasp installer script using curl. This command is specifically shown under the Linux/macOS installation tab.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/introduction/quick-start.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Session Entity Definition in Prisma Schema\nDESCRIPTION: Defines the internal Session entity used by Wasp to store user session information for keeping users logged in between page refreshes. This entity is managed by Wasp and should not be modified directly by developers.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/entities/entities.md#2025-04-22_snippet_18\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Session {\n  id        String   @id @unique\n  expiresAt DateTime\n  userId    String\n  auth      Auth     @relation(references: [id], fields: [userId], onDelete: Cascade)\n\n  @@index([userId])\n}\n```\n\n----------------------------------------\n\nTITLE: Finding User Identities in Server-side Actions with JavaScript\nDESCRIPTION: Shows how to use the findUserIdentity function in a server-side action to identify a user's authentication method, allowing for different handling based on the provider.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/entities.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { findUserIdentity } from 'wasp/client/auth'\n\nexport const createTask = async (args, context) => {\n  const emailIdentity = findUserIdentity(context.user, 'email')\n  const googleIdentity = findUserIdentity(context.user, 'google')\n  if (emailIdentity) {\n    // ...\n  } else if (googleIdentity) {\n    // ...\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Route in Server Setup Function (TypeScript)\nDESCRIPTION: Example of how to add a custom route in the server setup function using TypeScript. The function is executed on server start and demonstrates adding a '/customRoute' endpoint with proper type annotations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/server-config.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ServerSetupFn } from 'wasp/server'\nimport { Application } from 'express'\n\nexport const mySetupFunction: ServerSetupFn = async ({ app }) => {\n  addCustomRoute(app)\n}\n\nfunction addCustomRoute(app: Application) {\n  app.get('/customRoute', (_req, res) => {\n    res.send('I am a custom route')\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Login Implementation in React\nDESCRIPTION: This snippet shows how to implement a custom login page using Wasp's login action in a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/username-and-pass.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { login } from 'wasp/client/auth'\n\nimport { useState } from 'react'\nimport { useHistory, Link } from 'react-router-dom'\n\nexport function LoginPage() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState(null)\n  const history = useHistory()\n\n  async function handleSubmit(event) {\n    event.preventDefault()\n    try {\n      await login(username, password)\n      history.push('/')\n    } catch (error) {\n      setError(error)\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {/* ... */}\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Feature-Based Directory Structure in Wasp\nDESCRIPTION: Recommended new directory structure for Wasp projects organized by features rather than client/server separation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc\n│\n├── task\n│   ├── actions.ts    -- former taskActions.ts\n│   ├── queries.ts    -- former taskQueries.ts\n│   ├── Task.css\n│   ├── TaskLisk.tsx\n│   └── Task.tsx\n├── user\n│   ├── actions.ts    -- former userActions.ts\n│   ├── Dashboard.tsx\n│   ├── Login.tsx\n│   ├── queries.ts    -- former userQueries.ts\n│   ├── Register.tsx\n│   └── User.tsx\n├── MainPage.tsx\n└── utils.ts\n```\n\n----------------------------------------\n\nTITLE: Defining User Signup Fields in TypeScript\nDESCRIPTION: This snippet demonstrates how to define user signup fields using the new defineUserSignupFields function from wasp/server/auth in a TypeScript file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const fields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address;\n    if (typeof address !== 'string') {\n      throw new Error('Address is required');\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long');\n    }\n    return address;\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring a Query in Wasp\nDESCRIPTION: Declares a Wasp query named createFoo, binding it to a JavaScript function imported from the src/actions.js file and associating it with the Foo entity. This allows the query to be used throughout the Wasp app, both on the server and client, leveraging code splitting and entity management. Prerequisites: Wasp configuration and existence of @src/actions.js with the proper export.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/actions.md#2025-04-22_snippet_8\n\nLANGUAGE: wasp\nCODE:\n```\nquery createFoo {\n    fn: import { createFoo } from \"@src/actions.js\"\n    entities: [Foo]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking User Signup Status in React Component\nDESCRIPTION: This snippet demonstrates how to use the useAuth hook to check if a user has completed the signup process and redirect them accordingly in a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAuth } from 'wasp/client/auth'\nimport { Navigate } from 'react-router-dom'\n\nexport function HomePage() {\n  const { data: user } = useAuth()\n\n  if (user.isSignupComplete === false) {\n    return <Navigate to=\"/edit-user-details\" />\n  }\n\n  // ...\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuth } from 'wasp/client/auth'\nimport { Navigate } from 'react-router-dom'\n\nexport function HomePage() {\n  const { data: user } = useAuth()\n\n  if (user.isSignupComplete === false) {\n    return <Navigate to=\"/edit-user-details\" />\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Job Declaration - JavaScript\nDESCRIPTION: Demonstrates how to import a job declaration in JavaScript from the Wasp server jobs module for further submission or invocation. This is a prerequisite for calling .submit() or .delay() on the job in client/server logic. Requires the job to be declared in Wasp with matching name.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/jobs.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { mySpecialJob } from 'wasp/server/jobs'\n```\n\n----------------------------------------\n\nTITLE: Checking Auth Method Existence Before Accessing Data in Wasp\nDESCRIPTION: Example showing how to safely check if a user has a specific auth method before accessing its data. This is necessary because auth methods that weren't used will be null in the identities object.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nif (user.identities.google !== null) {\n  const userId = user.identities.google.id\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Including User Data with Tasks in TypeScript\nDESCRIPTION: Example of how to include full user data, including auth and identities, when fetching tasks in a TypeScript Wasp application using Prisma queries.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/entities.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getAllTasks = (async (args, context) => {\n  return context.entities.Task.findMany({\n    orderBy: { id: 'desc' },\n    select: {\n      id: true,\n      title: true,\n      user: {\n        include: {\n          auth: {\n            include: {\n              identities: {\n                select: {\n                  providerName: true,\n                  providerUserId: true,\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  })\n}) satisfies tasks.GetAllQuery<{}, {}>\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Cache Key in JavaScript\nDESCRIPTION: This snippet shows how to access the query cache key for a Wasp query, which is useful when working directly with react-query's low-level API for more advanced optimistic update scenarios.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/data-model/operations/actions.md#2025-04-22_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nimport { getTasks } from 'wasp/client/operations'\n\nconst queryKey = getTasks.queryCacheKey\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord Auth in main.wasp\nDESCRIPTION: This snippet shows how to set up Discord authentication in the main.wasp file, including specifying the user entity, auth methods, and redirect path.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/discord.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      discord: {\n        configFn: import { getConfig } from \"@src/auth/discord.js\",\n        userSignupFields: import { userSignupFields } from \"@src/auth/discord.js\"\n      }\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Google Auth Field Implementation After Migration\nDESCRIPTION: Updated implementation for Google authentication fields using defineUserSignupFields, which extracts the displayName from the profile data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// highlight-next-line\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\n// highlight-start\nexport const fields = defineUserSignupFields({\n  displayName: async (data) => {\n    const profile: any = data.profile;\n    if (!profile?.displayName) { throw new Error('Display name is not available'); }\n    return profile.displayName;\n  },\n})\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Testing React Components with Mocked Queries in TypeScript\nDESCRIPTION: Demonstrates how to test a React component that uses a Wasp query in TypeScript, mocking the query results and rendering the component in context.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/testing.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQuery, getTasks } from \"wasp/client/operations\";\n\nconst Todo = (_props: {}) => {\n  const { data: tasks } = useQuery(getTasks);\n\n  return (\n    <ul>\n      {tasks &&\n        tasks.map((task) => (\n          <li key={task.id}>\n            <input type=\"checkbox\" value={task.isDone} />\n            {task.description}\n          </li>\n        ))}\n    </ul>\n  );\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from \"vitest\";\nimport { screen } from \"@testing-library/react\";\n\nimport { mockServer, renderInContext } from \"wasp/client/test\";\nimport { getTasks } from \"wasp/client/operations\";\nimport Todo from \"./Todo\";\n\nconst { mockQuery } = mockServer();\n\nconst mockTasks = [\n  {\n    id: 1,\n    description: \"test todo 1\",\n    isDone: true,\n    userId: 1,\n  },\n];\n\ntest(\"handles mock data\", async () => {\n  mockQuery(getTasks, mockTasks);\n\n  renderInContext(<Todo />);\n\n  await screen.findByText(\"test todo 1\");\n\n  expect(screen.getByRole(\"checkbox\")).toBeChecked();\n\n  screen.debug();\n});\n```\n\n----------------------------------------\n\nTITLE: SendGrid Provider Configuration\nDESCRIPTION: Configuration for the SendGrid email provider and its required environment variables.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/email/email.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: SendGrid,\n  }\n}\n```\n\nLANGUAGE: properties\nCODE:\n```\nSENDGRID_API_KEY=\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Image URL in React Component (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import an image file as a URL and use it in a React component. The imported URL will be processed differently in development and production environments.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/static-assets.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport imgUrl from './img.png'\n\nfunction App() {\n  return <img src={imgUrl} alt=\"img\" />\n}\n```\n\n----------------------------------------\n\nTITLE: PG-Boss Specific Job Operations\nDESCRIPTION: Shows the pg-boss specific methods available through the pgBoss namespace for job management, including getting job details, canceling jobs, and resuming canceled jobs.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/jobs.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst job = submit();\njob.pgBoss.details() // Get pg-boss specific job details\njob.pgBoss.cancel()  // Cancel a job\njob.pgBoss.resume()  // Resume a canceled job\n```\n\n----------------------------------------\n\nTITLE: Defining Data Model with Prisma Schema\nDESCRIPTION: Prisma schema definition for a Task entity with id, description and isDone fields.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/general/typescript.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Task {\n  id          Int @id @default(autoincrement())\n  description String\n  isDone      Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing User Data in a Protected Page\nDESCRIPTION: This snippet demonstrates how to access the user object in a React component for a protected page. It shows the usage of the user prop and the logout action.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Button from './Button'\nimport logout from '@wasp/auth/logout'\n\nconst AccountPage = ({ user }) => {\n  return (\n    <div>\n      <Button onClick={logout}>Logout</Button>\n      {JSON.stringify(user, null, 2)}\n    </div>\n  )\n}\n\nexport default AccountPage\n```\n\n----------------------------------------\n\nTITLE: Opening the Wasp Database Studio via Shell\nDESCRIPTION: A shell command used to launch the Wasp database studio. This tool allows developers to visually inspect and manage the application's database. It requires the Wasp CLI to be installed and should be run from the Wasp project directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/07-auth.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nwasp db studio\n```\n\n----------------------------------------\n\nTITLE: Creating Signup Page with Wasp Auth UI (JavaScript)\nDESCRIPTION: This snippet shows how to create a signup page using Wasp's Auth UI components in a React component. It renders a signup form centered on the page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/crud.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SignupForm } from 'wasp/client/auth'\n\nexport function SignupPage() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        placeContent: 'center',\n      }}\n    >\n      <SignupForm />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Task Entity Type in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the Task Entity type in TypeScript. It includes an example of defining a function that works with the Task type.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/entities.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from 'wasp/entities'\n\nconst task: Task = { ... }\n\n// You can also define functions for working with entities\nfunction getInfoMessage(task: Task): string {\n  const isDoneText = task.isDone ? \"is done\" : \"is not done\"\n  return `Task '${task.description}' is ${isDoneText}.`\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling WebSockets in Wasp File\nDESCRIPTION: This snippet shows how to enable WebSockets in the Wasp configuration file by adding the webSocket property to the app object. It specifies the server-side function to handle WebSocket events and sets the auto-connect behavior.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/web-sockets.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  webSocket: {\n    fn: import { webSocketFn } from \"@src/webSocket\",\n    autoConnect: true, // optional, default: true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page in React\nDESCRIPTION: Creates a login page component using Wasp's built-in LoginForm component with navigation to signup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/tutorial/07-auth.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\nimport { LoginForm } from 'wasp/client/auth'\n\nexport const LoginPage = () => {\n  return (\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\n      <LoginForm />\n      <br />\n      <span>\n        I don't have an account yet (<Link to=\"/signup\">go to signup</Link>).\n      </span>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Feature-based Directory Layout in Wasp Project (plaintext)\nDESCRIPTION: This snippet illustrates the recommended post-migration organization, refactoring the project structure around features rather than separating by client/server folders. Each feature (like 'task' and 'user') contains all related files (actions, queries, UI components), with shared files placed at the root level. This logical layout improves maintainability; since it is a structural guide, no dependencies are necessary and it is not executable code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc\n│\n├── task\n│\t├── actions.ts    -- former taskActions.ts\n│\t├── queries.ts    -- former taskQueries.ts\n│\t├── Task.css\n│\t├── TaskLisk.tsx\n│\t└── Task.tsx\n├── user\n│\t├── actions.ts    -- former userActions.ts\n│\t├── Dashboard.tsx\n│\t├── Login.tsx\n│\t├── queries.ts    -- former userQueries.ts\n│\t├── Register.tsx\n│\t└── User.tsx\n├── MainPage.tsx\n└── utils.ts\n```\n\n----------------------------------------\n\nTITLE: Using Entity in TypeScript API Implementation\nDESCRIPTION: Shows how to access and use entity data in a TypeScript API implementation via the context parameter, which exposes the entity's Prisma API with proper typing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/apis.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FooBar } from \"wasp/server/api\";\n\nexport const fooBar: FooBar = (req, res, context) => {\n  res.json({ count: await context.entities.Task.count() });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining User Signup Fields in TypeScript\nDESCRIPTION: Demonstrates how to define user signup fields using the new defineUserSignupFields function from wasp/server/auth in a TypeScript file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const fields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address;\n    if (typeof address !== 'string') {\n      throw new Error('Address is required');\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long');\n    }\n    return address;\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for Railway Static Client Hosting\nDESCRIPTION: Dockerfile configuration for hosting a static React client on Railway using the gostatic server. It copies the build files to the appropriate directory and configures fallback to index.html for client-side routing.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/manually.md#2025-04-22_snippet_7\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM pierrezemb/gostatic\nCMD [ \"-fallback\", \"index.html\" ]\nCOPY ./dist/ /srv/http/\n```\n\n----------------------------------------\n\nTITLE: GitHub OAuth Authorization Route Handler\nDESCRIPTION: Route handler for initiating GitHub OAuth flow and setting state cookie for security.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-13-how-to-add-auth-with-lucia-to-your-react-nextjs-app.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { generateState } from \"arctic\";\nimport { github } from \"../../../lib/auth\";\nimport { cookies } from \"next/headers\";\n\nexport async function GET(): Promise<Response> {\n  const state = generateState();\n  const url = await github.createAuthorizationURL(state);\n\n  cookies().set(\"github_oauth_state\", state, {\n    path: \"/\",\n    secure: process.env.NODE_ENV === \"production\",\n    httpOnly: true,\n    maxAge: 60 * 10,\n    sameSite: \"lax\"\n  });\n\n  return Response.redirect(url);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Authentication User Fields Function in TypeScript\nDESCRIPTION: This snippet demonstrates the implementation of the Google authentication user fields function in TypeScript. It generates a username based on the Google display name with type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/google.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GetUserFieldsFn } from '@wasp/types'\nimport { generateAvailableUsername } from '@wasp/core/auth.js'\n\nexport const getUserFields: GetUserFieldsFn = async (_context, args) => {\n  const username = await generateAvailableUsername(\n    args.profile.displayName.split(' '),\n    { separator: '.' }\n  )\n  return { username }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Password with Automatic Hashing in TypeScript\nDESCRIPTION: TypeScript implementation of password update functionality with proper type definitions for the action and payload.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { UpdatePassword } from '@wasp/actions/types'\nimport type { User } from '@wasp/entities'\n\ntype UpdatePasswordPayload = {\n  userId: User['id']\n}\n\nexport const updatePassword: UpdatePassword<\n  UpdatePasswordPayload,\n  User\n> = async (args, context) => {\n  return context.entities.User.update({\n    where: { id: args.userId },\n    data: {\n      password: 'New pwd which will be hashed automatically!',\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Signup Page Component in JavaScript\nDESCRIPTION: Implements the React component for the signup page using Wasp's SignupForm component with a link to the login page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/07-auth.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\nimport { SignupForm } from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\n      <SignupForm />\n      <br />\n      <span>\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling WebSockets in Wasp Configuration\nDESCRIPTION: This snippet shows how to enable WebSockets in the Wasp configuration file by adding the 'webSocket' property to the app object. It specifies the WebSocket function to use and sets the auto-connect behavior.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/web-sockets.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  webSocket: {\n    fn: import { webSocketFn } from \"@src/webSocket\",\n    autoConnect: true, // optional, default: true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Entity Type Usage\nDESCRIPTION: Shows how to import and use TypeScript types generated from Wasp entities, including type safety examples and function definitions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/entities.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from 'wasp/entities'\n\nconst task: Task = { ... }\n\n// You can also define functions for working with entities\nfunction getInfoMessage(task: Task): string {\n  const isDoneText = task.isDone ? \"is done\" : \"is not done\"\n  return `Task '${task.description}' is ${isDoneText}.`\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Image as URL in React Component (TypeScript)\nDESCRIPTION: This snippet shows how to import an image file as a URL and use it in a React component using TypeScript. The imported URL will be different in development and production environments.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/static-assets.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport imgUrl from './img.png'\n\nfunction App() {\n  return <img src={imgUrl} alt=\"img\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User-Task Relation in Wasp\nDESCRIPTION: Updates the User and Task entities to establish a one-to-many relation between users and tasks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/07-auth.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\n    id       Int     @id @default(autoincrement())\n    username String  @unique\n    password String\n    tasks    Task[]\npsl=}\n\nentity Task {=psl\n    id          Int     @id @default(autoincrement())\n    description String\n    isDone      Boolean @default(false)\n    user        User?    @relation(fields: [userId], references: [id])\n    userId      Int?\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Customizing Social Buttons Layout in TypeScript\nDESCRIPTION: Shows how to change the layout of social buttons in the Auth UI by passing the 'socialLayout' prop to the LoginForm component in TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function LoginPage() {\n  return (\n    <LoginForm\n      // Pass in the socialLayout prop\n      socialLayout=\"vertical\"\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: React Page for Migrating Password - Wasp Client - TSX (TypeScript)\nDESCRIPTION: TypeScript version of the React migration page for users updating their password authentication. Adds explicit typing for state and form shape, but otherwise similar to the JSX/JavaScript version. Requires the same dependencies and setup. Inputs and outputs are the same as the JavaScript version.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  FormItemGroup,\n  FormLabel,\n  FormInput,\n  FormError,\n} from \"wasp/client/auth\";\nimport { useForm } from \"react-hook-form\";\nimport { migratePassword } from \"wasp/client/operations\";\nimport { useState } from \"react\";\n\nexport function MigratePasswordPage() {\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  const form = useForm<{\n    username: string;\n    password: string;\n  }>();\n\n  const onSubmit = form.handleSubmit(async (data) => {\n    try {\n      const result = await migratePassword(data);\n      setSuccessMessage(result.message);\n    } catch (e: unknown) {\n      console.error(e);\n      if (e instanceof Error) {\n        setErrorMessage(e.message);\n      }\n    }\n  });\n\n  return (\n    <div style={{\n      maxWidth: \"400px\",\n      margin: \"auto\",\n    }}>\n      <h1>Migrate your password</h1>\n      <p>\n        If you have an account on the old version of the website, you can\n        migrate your password to the new version.\n      </p>\n      {successMessage && <div>{successMessage}</div>}\n      {errorMessage && <FormError>{errorMessage}</FormError>}\n      <form onSubmit={onSubmit}>\n        <FormItemGroup>\n          <FormLabel>Username</FormLabel>\n          <FormInput\n            {...form.register(\"username\", {\n              required: \"Username is required\",\n            })}\n          />\n          <FormError>{form.formState.errors.username?.message}</FormError>\n        </FormItemGroup>\n        <FormItemGroup>\n          <FormLabel>Password</FormLabel>\n          <FormInput\n            {...form.register(\"password\", {\n              required: \"Password is required\",\n            })}\n            type=\"password\"\n          />\n          <FormError>{form.formState.errors.password?.message}</FormError>\n        </FormItemGroup>\n        <button type=\"submit\">Migrate password</button>\n      </form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Operation in Wasp\nDESCRIPTION: A Wasp configuration that defines the getTaskInfo query operation that imports its implementation from a JavaScript module and specifies its dependency on the Task entity.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/general/typescript.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\nquery getTaskInfo {\n  fn: import { getTaskInfo } from \"@src/queries\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Auth Page Component Implementation\nDESCRIPTION: React component implementation for the authentication page with login form and layout.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/keycloak.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\nexport function Login() {\n  return (\n    <Layout>\n      <LoginForm />\n    </Layout>\n  )\n}\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"h-full w-full bg-white\">\n      <div className=\"flex min-h-[75vh] min-w-full items-center justify-center\">\n        <div className=\"h-full w-full max-w-sm bg-white p-5\">\n          <div>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Models in Prisma Schema for Wasp\nDESCRIPTION: Demonstrates how to define Prisma models in the schema.prisma file, which become Wasp Entities that can be used in the main.wasp file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/prisma-file.md#2025-04-22_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id      Int        @id @default(autoincrement())\n  tasks   Task[]\n}\n\nmodel Task {\n  id          Int        @id @default(autoincrement())\n  description String\n  isDone      Boolean    @default(false)\n  user        User       @relation(fields: [userId], references: [id])\n  userId      Int\n}\n```\n\n----------------------------------------\n\nTITLE: Adding the NewTaskForm to the MainPage in JavaScript\nDESCRIPTION: JavaScript code that shows how to integrate the NewTaskForm component into the MainPage component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/tutorial/06-actions.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createTask,\n  getTasks,\n  useQuery\n} from 'wasp/client/operations'\n\nconst MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      <NewTaskForm />\n\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n\n// ... TaskView, TaskList, NewTaskForm ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Worker Function in TypeScript\nDESCRIPTION: TypeScript implementation of a worker function with proper type definitions for job input and output parameters.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/jobs.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type MySpecialJob } from 'wasp/server/jobs'\nimport { type Task } from 'wasp/entities'\n\ntype Input = { name: string; }\ntype Output = { tasks: Task[]; }\n\nexport const foo: MySpecialJob<Input, Output> = async ({ name }, context) => {\n  console.log(`Hello ${name}!`)\n  const tasks = await context.entities.Task.findMany({})\n  return { tasks }\n}\n```\n\n----------------------------------------\n\nTITLE: Project Structure with Tailwind Configuration Files\nDESCRIPTION: Shows the directory structure of a Wasp project with Tailwind configuration files properly placed at the root level.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/css-frameworks.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── main.wasp\n├── package.json\n├── src\n│   ├── Main.css\n│   ├── MainPage.jsx\n│   ├── vite-env.d.ts\n│   └── waspLogo.png\n├── public\n├── tsconfig.json\n├── vite.config.ts\n├── postcss.config.cjs\n└── tailwind.config.cjs\n```\n\n----------------------------------------\n\nTITLE: Setting Client Environment Variables for Production Build\nDESCRIPTION: Command for providing production client environment variables during the build process. These variables are injected into the client JavaScript code and should never contain sensitive information.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/env-vars.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nREACT_APP_API_URL=<url_to_wasp_backend> REACT_APP_SOME_OTHER_VAR_NAME=someothervalue npm run build\n```\n\n----------------------------------------\n\nTITLE: Implementing Setup Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement a setup function in TypeScript for a Wasp application. The function logs a message every hour to demonstrate running custom code.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/client-config.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function mySetupFunction(): Promise<void> {\n  let count = 1\n  setInterval(\n    () => console.log(`You have been online for ${count++} hours.`),\n    1000 * 60 * 60\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket in Wasp App\nDESCRIPTION: This snippet shows how to configure WebSocket in a Wasp application. It imports a WebSocket function and sets the auto-connect option. The configuration is identical for both JavaScript and TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/web-sockets.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  webSocket: {\n    fn: import { webSocketFn } from \"@src/webSocket\",\n    autoConnect: true, // optional, default: true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating App Dependencies from Wasp File to package.json\nDESCRIPTION: Example demonstrating how to move dependencies from the app.dependencies field in main.wasp to the package.json file, as required in Wasp 0.12.X.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_8\n\nLANGUAGE: css\nCODE:\n```\napp Foo {\n  // ...\n  dependencies: [ ('redux', '^4.0.5'), ('reacjt-redux', '^7.1.3')];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SignupPage Component in TypeScript\nDESCRIPTION: This snippet shows how to implement a signup page component in TypeScript using Wasp's SignupForm component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignupForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function SignupPage() {\n  return <SignupForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CRUD Operations in Client Code (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import CRUD operations in a JavaScript client component and use them with React Query hooks for data fetching and mutations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/crud.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Tasks } from '@wasp/crud/Tasks'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data } = Tasks.getAll.useQuery()\nconst { data } = Tasks.get.useQuery({ id: 1 })\nconst createAction = Tasks.create.useAction()\nconst updateAction = Tasks.update.useAction()\nconst deleteAction = Tasks.delete.useAction()\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket in JavaScript Wasp App\nDESCRIPTION: Demonstrates how to set up WebSocket configuration in a Wasp application using JavaScript. Includes importing the WebSocket function and setting auto-connect behavior.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/web-sockets.md#2025-04-22_snippet_5\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  // ...\n\n  webSocket: {\n    fn: import { webSocketFn } from \"@src/webSocket\",\n    autoConnect: true, // optional, default: true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Database Configuration from Wasp File\nDESCRIPTION: Shows the configuration that needs to be removed from the Wasp file since it's now defined in the schema.prisma file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_14\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  // ...\n  db: {\n    // highlight-next-line\n    system: PostgreSQL,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Meme Image with Custom Component in JSX/MDX\nDESCRIPTION: Example of using the ImgWithCaption component to display a meme image related to code maintenance responsibilities after code generation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-06-24-ML-code-gen-vs-coding-by-hand-future.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ImgWithCaption\n    alt=\"Devs still need to maintain generated code\"\n    source=\"img/always-has-been-copilot.png\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp 0.12.4 via curl\nDESCRIPTION: Command to install version 0.12.4 of Wasp using the installation script. This is the first step before migrating a Wasp project to the new structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v 0.12.4\n```\n\n----------------------------------------\n\nTITLE: Migrating Username Access in React Components\nDESCRIPTION: Shows how to update the getUsername helper function usage to the new user.identities.username.id syntax in React components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getUsername, AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const username = getUsername(user)\n  // ...\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const username = user.identities.username?.id\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying a Wasp App with Server Environment Variables\nDESCRIPTION: Command to deploy a Wasp application with server-side environment variables like Google OAuth credentials. This uses the --server-secret option to set multiple environment variables.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/cli.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly launch my-wasp-app mia --server-secret GOOGLE_CLIENT_ID=<...> --server-secret GOOGLE_CLIENT_SECRET=<...>\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Form Component\nDESCRIPTION: Implementation of a login page using Wasp's LoginForm component with both JavaScript and TypeScript examples\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/ui.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { LoginPage } from \"@src/LoginPage.jsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LoginForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function LoginPage() {\n  return <LoginForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Signup Action in Wasp\nDESCRIPTION: A Wasp configuration file that imports and sets up a custom signup action. This allows for extending or replacing the default authentication behavior with custom implementation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/username-and-pass.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\naction customSignup {\n  fn: import { signup } from \"@src/auth/signup.js\",\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Password Migration Dependencies - npm Command - bash\nDESCRIPTION: This Bash snippet installs the 'secure-password' and 'sodium-native' NPM packages at exact versions. These libraries are necessary on the backend to migrate user passwords by supporting verification of passwords hashed with the old algorithm. Must be run before backend migration scripts can operate.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpm install secure-password@4.0.0 sodium-native@3.3.0 --save-exact\n```\n\n----------------------------------------\n\nTITLE: Prisma Enum Definition\nDESCRIPTION: Shows how to define and use enums in Prisma schema with a TaskStatus example.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/prisma-file.md#2025-04-22_snippet_3\n\nLANGUAGE: prisma\nCODE:\n```\nenum TaskStatus {\n  NotStarted\n  Doing\n  Done\n}\n\nmodel Task {\n  ...\n  state TaskStatus @default(NotStarted)\n}\n```\n\n----------------------------------------\n\nTITLE: Social Login Migration API Routes in Wasp\nDESCRIPTION: Defines API routes for Google and GitHub authentication migration in Wasp configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_33\n\nLANGUAGE: wasp\nCODE:\n```\napi migrateGoogle {\n  httpRoute: (GET, \"/migrate-google\"),\n  fn: import { migrateGoogleHandler } from \"@src/migrateToNewAuth\",\n  entities: []\n}\n\napi migrateGithub {\n  httpRoute: (GET, \"/migrate-github\"),\n  fn: import { migrateGithubHandler } from \"@src/migrateToNewAuth\",\n  entities: []\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Interactive Project Creation with Wasp CLI\nDESCRIPTION: Example of creating a new Wasp project using the direct command line approach with default template.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/general/cli.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp new MyFirstProject\n🐝 --- Creating your project from the \"basic\" template... -------------------------\n\nCreated new Wasp app in ./MyFirstProject directory!\n\nTo run your new app, do:\n    cd MyFirstProject\n    wasp db start\n```\n\n----------------------------------------\n\nTITLE: Mocking Server Queries and APIs\nDESCRIPTION: Demonstrates how to mock server queries and API endpoints using mockServer helper functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mockServer } from \"@wasp/test\";\nimport getTasks from \"@wasp/queries/getTasks\";\nimport { HttpMethod } from \"@wasp/types\";\n\nconst { mockQuery, mockApi } = mockServer();\n\nmockQuery(getTasks, []);\n\nmockApi({ method: HttpMethod.Get, path: \"/foor/bar\" }, { res: \"hello\" });\n```\n\n----------------------------------------\n\nTITLE: Using Prisma Client Directly in Wasp Server Code\nDESCRIPTION: This snippet demonstrates how to import and use the Prisma Client directly in Wasp server code for more control over database operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/entities.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { prisma } from 'wasp/server'\n\nprisma.task.create({\n    description: \"Read the Entities doc\",\n    isDone: true // almost :)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Auth in Wasp File (TypeScript)\nDESCRIPTION: This snippet demonstrates how to enable Google Authentication in the Wasp configuration file for a TypeScript project. It is identical to the JavaScript version.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/google.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.11.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Password Reset Email Content Function in JavaScript\nDESCRIPTION: This code defines a function that generates the content for the password reset email message in JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/email.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getPasswordResetEmailContent = ({ passwordResetLink }) => ({\n  subject: 'Password reset',\n  text: `Click the link below to reset your password: ${passwordResetLink}`,\n  html: `\n        <p>Click the link below to reset your password</p>\n        <a href=\"${passwordResetLink}\">Reset password</a>\n    `,\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing GitHub User Identity in TypeScript\nDESCRIPTION: This snippet demonstrates how to access GitHub identity information from a user object. It first retrieves the GitHub identity from the user's identities object and then accesses the GitHub user ID.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/_github-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst githubIdentity = user.identities.github\n\n// GitHub User ID for example \"12345678\"\ngithubIdentity.id\n```\n\n----------------------------------------\n\nTITLE: Action Error Handling in TypeScript\nDESCRIPTION: Example of throwing and handling HTTP errors in Actions with TypeScript, including status codes and custom error messages.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/operations/actions.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateTask } from 'wasp/server/operations'\nimport { HttpError } from 'wasp/server'\n\nexport const createTask: CreateTask = async (args, context) => {\n  throw new HttpError(\n    403, // status code\n    \"You can't do this!\", // message\n    { foo: 'bar' } // data\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Prisma Preview Features in Wasp\nDESCRIPTION: Shows how to enable Prisma preview features, such as PostgreSQL extensions support, in the schema.prisma file for a Wasp project.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/prisma-file.md#2025-04-22_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider   = \"postgresql\"\n  url        = env(\"DATABASE_URL\")\n  extensions = [pgvector(map: \"vector\")]\n}\n\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"postgresqlExtensions\"]\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Client-side Action Usage in TypeScript\nDESCRIPTION: Shows how to use Actions with TypeScript on the client side, leveraging automatic type inference for better type safety.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/actions.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTask, markTaskAsDone } from 'wasp/client/operations'\n\n// TypeScript automatically infers the return values and type-checks\n// the payloads.\nconst newTask = await createTask({ description: 'Keep learning TypeScript' })\nawait markTaskAsDone({ id: 1 })\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration Update\nDESCRIPTION: Shows the required changes to tsconfig.json for compatibility with Wasp's TypeScript project references.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-15-to-0-16.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"composite\": true,\n    \"skipLibCheck\": true,\n    \"outDir\": \".wasp/out/user\"\n  },\n  \"include\": [\n    \"src\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating React Router Usage from v5 to v6 (useNavigate)\nDESCRIPTION: Replace the useHistory hook with useNavigate for navigation in React components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-14-to-0-15.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNavigate } from 'react-router-dom'\n\nexport function SomePage() {\n  const navigate = useNavigate()\n  const handleClick = () => {\n    navigate('/new-route')\n  }\n  return <button onClick={handleClick}>Go to new route</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Database Provider in Prisma Schema\nDESCRIPTION: This snippet shows how to set up SQLite as the database provider in the Prisma schema file. It uses the 'sqlite' provider and sets the database URL to an environment variable.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/databases.md#2025-04-22_snippet_0\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Customizing Signup Form UI Component\nDESCRIPTION: Shows how to customize the SignupForm component with additional fields using both object configuration and render functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/overview.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SignupForm } from '@wasp/auth/forms/Signup'\nimport {\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from '@wasp/auth/forms/internal/Form'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Keycloak User Data Structure\nDESCRIPTION: This snippet shows the structure of the user data received from Keycloak's /userinfo endpoint. It includes fields like sub, email, name, and username.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/keycloak.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  sub: '5adba8fc-3ea6-445a-a379-13f0bb0b6969',\n  email_verified: true,\n  name: 'Test User',\n  preferred_username: 'test',\n  given_name: 'Test',\n  family_name: 'User',\n  email: 'test@example.com'\n}\n```\n\n----------------------------------------\n\nTITLE: Keycloak User Data Structure\nDESCRIPTION: This snippet shows the structure of the user data received from Keycloak's /userinfo endpoint. It includes fields such as sub, email_verified, name, preferred_username, given_name, family_name, and email.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/keycloak.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  sub: '5adba8fc-3ea6-445a-a379-13f0bb0b6969',\n  email_verified: true,\n  name: 'Test User',\n  preferred_username: 'test',\n  given_name: 'Test',\n  family_name: 'User',\n  email: 'test@example.com'\n}\n```\n\n----------------------------------------\n\nTITLE: New Project Structure (Wasp 0.12.X)\nDESCRIPTION: Updated file tree structure for Wasp 0.12.X showing the simplified organization without client/server separation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.\n├── .gitignore\n├── main.wasp\n├── package.json\n├── public\n│   └── .gitkeep\n├── src\n│   ├── Main.css\n│   ├── MainPage.jsx\n│   ├── queries.ts\n│   ├── vite-env.d.ts\n│   ├── .waspignore\n│   └── waspLogo.png\n├── tsconfig.json\n├── vite.config.ts\n└── .wasproot\n```\n\n----------------------------------------\n\nTITLE: Using a Specific Node.js Version with NVM\nDESCRIPTION: Command to set Node.js version 20 as the active version for the current shell session using NVM.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/introduction/quick-start.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnvm use 20\n```\n\n----------------------------------------\n\nTITLE: Implementing Django REST framework ViewSet\nDESCRIPTION: Python code to create a ViewSet for handling CRUD operations on the Task model using Django REST framework.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-08-20-django-vs-wasp.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import viewsets\nfrom .models import Task\nfrom .serializers import TaskSerializer\n\nclass TaskViewSet(viewsets.ModelViewSet):\n    queryset = Task.objects.all()\n    serializer_class = TaskSerializer\n```\n\n----------------------------------------\n\nTITLE: Implementing an API Handler in JavaScript\nDESCRIPTION: Example of implementing an API handler function in JavaScript that returns a JSON response and demonstrates how to modify response headers.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/apis.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const fooBar = (req, res, context) => {\n  res.set(\"Access-Control-Allow-Origin\", \"*\"); // Example of modifying headers to override Wasp default CORS middleware.\n  res.json({ msg: `Hello, ${context.user ? \"registered user\" : \"stranger\"}!` });\n};\n```\n\n----------------------------------------\n\nTITLE: Updating OAuth Provider Configuration Function (Before)\nDESCRIPTION: Shows the previous format of the OAuth provider configuration function, including clientID and clientSecret.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getConfig() {\n    return {\n        clientID: process.env.GOOGLE_CLIENT_ID,\n        clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n        scope: ['profile', 'email'],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Wasp Application (Shell)\nDESCRIPTION: Initializes a new Wasp project in the current directory using the `wasp new` command. This command scaffolds a basic Wasp application structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/introduction/quick-start.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwasp new\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp on Linux/macOS/WSL\nDESCRIPTION: Command to install the Wasp framework using a shell installer script that automatically sets up Wasp on Linux, macOS, or Windows Subsystem for Linux (WSL).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/introduction/quick-start.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Basic Prisma Schema Configuration\nDESCRIPTION: Example of a Prisma schema file defining database configuration and models with relationships.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/prisma-file.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id      Int        @id @default(autoincrement())\n  tasks   Task[]\n}\n\nmodel Task {\n  id          Int        @id @default(autoincrement())\n  description String\n  isDone      Boolean    @default(false)\n  user        User       @relation(fields: [userId], references: [id])\n  userId      Int\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Wasp Queries in Tests\nDESCRIPTION: Shows how to mock a Wasp query to return specified data during tests. This is useful when components use useQuery to fetch data.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/testing.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getTasks } from \"wasp/client/operations\";\n\nmockQuery(getTasks, []);\n```\n\n----------------------------------------\n\nTITLE: Adding Login Route and Page in Wasp\nDESCRIPTION: This snippet demonstrates how to add the necessary login route and page in the main.wasp file. It defines a LoginRoute and a LoginPage component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/keycloak.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for E2E Tests\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow for running end-to-end tests on a Wasp application. It includes steps for installing dependencies, setting up the environment, and running the tests.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/ci-cd.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Content of .github/workflows/e2e-tests.yml\n# This file is not provided in full, but referenced in the documentation.\n```\n\n----------------------------------------\n\nTITLE: Todo App Example in JavaScript with React\nDESCRIPTION: A React component implementation for a Todo application written in JavaScript. This code has several bugs that would be caught by TypeScript, including typos and missing null checks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-29-typescript-feature-announcement.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MainPage() {\n  const { data: tasks } = useQuery(getTasks)\n\n  return (\n    <div>\n      <h1>Todos</h1>\n      <TaskList tasks={tasks} />\n    </div>\n  )\n}\n\nfunction TaskList({ tasks }) {\n  if (!tasks.len) {\n    return <div>No tasks</div>\n  }\n\n  return (\n    <div>\n      {tasks.map((task, idx) => <Task {...task} key={idx}/>)}\n    </div>\n  )\n}\n\n\n\nfunction Task({ id, isdone, description }) {\n  return (\n    <div>\n      <label>\n        <input\n          type='checkbox'\n          id={id}\n          checked={isdone}\n          onChange={\n            (event) => updateTask({ id, isDone: event.target.checked })\n          }\n        />\n        <span>{description}</span>\n      </label>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating schema.prisma File Structure for SQLite in Wasp\nDESCRIPTION: Shows the basic structure of a schema.prisma file for SQLite, including datasource and generator blocks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_4\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from Redirect to Navigate Component\nDESCRIPTION: Demonstrates how to replace React Router 5's Redirect component with React Router 6's Navigate component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-14-to-0-15.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Redirect } from 'react-router-dom'\n\nexport function SomePage() {\n  return (\n    <Redirect to=\"/new-route\" />\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Navigate } from 'react-router-dom'\n\nexport function SomePage() {\n  return (\n    <Navigate to=\"/new-route\" replace />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: App Title Customization\nDESCRIPTION: Example showing how to change the application title that appears in the browser tab.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/customizing-app.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.12.0\"\n  },\n  title: \"BookFace\"\n}\n```\n\n----------------------------------------\n\nTITLE: YouTube Embed in MDX\nDESCRIPTION: HTML markup for embedding YouTube video content with styling and parameters.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2024-01-23-wasp-launch-week-five.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div className='video-container'>\n    <iframe src=\"https://www.youtube.com/embed/Qiro77q-ulI?si=y8Rejsbjb1HJC6FA\" frameborder=\"1\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing User Identity in TypeScript\nDESCRIPTION: Shows how to access a user's username identity from the user object. The code demonstrates accessing both the identity object and the specific username ID.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/entities/_username-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst usernameIdentity = user.identities.username\n\n// Username that the user used to sign up, e.g. \"fluffyllama\"\nusernameIdentity.id\n```\n\n----------------------------------------\n\nTITLE: Package.json Dependencies Update\nDESCRIPTION: Demonstrates the required additions to package.json dependencies for React DOM and Router components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-15-to-0-16.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"react-dom\": \"^18.2.0\",\n    \"react-router-dom\": \"^6.26.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Password Format in Authentication\nDESCRIPTION: Function that validates password against predefined rules. Throws an error if the password doesn't meet the validation criteria specified in the documentation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/advanced/custom-auth-actions.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nensureValidPassword(args)\n```\n\n----------------------------------------\n\nTITLE: Using Task Entity Type in React Component\nDESCRIPTION: This example shows how to use the Task entity type within a React component in TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/entities.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Task } from \"wasp/entities\"\n\nexport function ExamplePage() {\n  const task: Task = {\n    id: 123,\n    description: \"Some random task\",\n    isDone: false,\n  }\n  return <div>{task.description}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Axios Dependencies in Wasp\nDESCRIPTION: Example of how to correctly set the Axios dependency in Wasp to match the required version that Wasp uses internally.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/examples/waspleau/Notes.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\ndependencies {=json\n  \"axios\": \"^0.21.1\"\njson=}\n```\n\n----------------------------------------\n\nTITLE: Accessing User ID in TypeScript React Component\nDESCRIPTION: Illustrates how to use the getFirstProviderUserId helper function with TypeScript typing in a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/entities.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getFirstProviderUserId, AuthUser } from 'wasp/auth'\n\nconst MainPage = ({ user }: { user: AuthUser }) => {\n  const userId = getFirstProviderUserId(user)\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp Operations\nDESCRIPTION: Declaration of server-side operations (query and action) for recipe management with entity relationships.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/introduction/introduction.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\nquery getRecipes {\n  fn: import { getRecipes } from \"@src/recipe/operations\",\n  entities: [Recipe],\n}\n\naction addRecipe {\n  fn: import { addRecipe } from \"@src/recipe/operations\",\n  entities: [Recipe],\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Password in Wasp\nDESCRIPTION: The ensureValidPassword function checks if the provided password meets Wasp's validity criteria. It throws an error if the password is invalid according to the defined rules.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/advanced/custom-auth-actions.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nensureValidPassword(args)\n```\n\n----------------------------------------\n\nTITLE: Extended User Schema with Signup Completion Flag\nDESCRIPTION: Shows how to modify the User entity schema to include a signup completion status field.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id               Int     @id @default(autoincrement())\n  username         String? @unique\n  isSignupComplete Boolean @default(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getTasks Query in JavaScript\nDESCRIPTION: This server-side function fetches all tasks from the database using the Prisma ORM.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-30-optimistic-update-feature-announcement.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getTasks = async (args, context) => {\n  return context.entities.Task.findMany()\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring CreateTask Action in Wasp\nDESCRIPTION: Declares a new action in Wasp for creating tasks, specifying the implementation function and associated entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/06-actions.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\naction createTask {\n  fn: import { createTask } from \"@server/actions.js\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Authentication Providers in Wasp\nDESCRIPTION: This snippet demonstrates how to enable multiple authentication providers (email, Google, and GitHub) in the Wasp configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/ui.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  //...\n  auth: {\n    methods: {\n      email: {},\n      google: {},\n      github: {},\n    },\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Railway Dockerignore Configuration\nDESCRIPTION: Docker ignore configuration for Railway deployment\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/deployment/deployment-methods/paas.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnode_modules/\n```\n\n----------------------------------------\n\nTITLE: Removing Old Format Fields Migration\nDESCRIPTION: SQL migration to remove deprecated fields from the Match table, including player games and points columns.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2025-04-02-an-introduction-to-database-migrations.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n/*\n  Warnings:\n\n  - You are about to drop the column `player1Games` on the `Match` table. All the data in the column will be lost.\n  - You are about to drop the column `player1Points` on the `Match` table. All the data in the column will be lost.\n  - You are about to drop the column `player2Games` on the `Match` table. All the data in the column will be lost.\n  - You are about to drop the column `player2Points` on the `Match` table. All the data in the column will be lost.\n\n*/\n-- AlterTable\nALTER TABLE \"Match\" DROP COLUMN \"player1Games\",\nDROP COLUMN \"player1Points\",\nDROP COLUMN \"player2Games\",\nDROP COLUMN \"player2Points\";\n```\n\n----------------------------------------\n\nTITLE: Basic Wasp App Configuration\nDESCRIPTION: Basic example of configuring a Wasp app with version and title settings, including custom head elements for stylesheets.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/customizing-app.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp todoApp {\n  wasp: {\n    version: \"{latestWaspVersion}\"\n  },\n  title: \"ToDo App\",\n  head: [\n    \"<link rel=\\\"stylesheet\\\" href=\\\"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\\\" />\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wasp App with Auth and Routes\nDESCRIPTION: This snippet shows the configuration of a Wasp app with username and password authentication, and defines routes for the main page, login, and signup.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/data-model/crud.md#2025-04-22_snippet_2\n\nLANGUAGE: wasp\nCODE:\n```\napp tasksCrudApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"Tasks Crud App\",\n\n  auth: {\n    userEntity: User,\n    methods: {\n      usernameAndPassword: {},\n    },\n    onAuthFailedRedirectTo: \"/login\",\n  },\n}\n\nroute RootRoute { path: \"/\", to: MainPage }\npage MainPage {\n  component: import { MainPage } from \"@src/MainPage.jsx\",\n  authRequired: true,\n}\n\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { LoginPage } from \"@src/LoginPage.jsx\",\n}\n\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { SignupPage } from \"@src/SignupPage.jsx\",\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Wasp Version Configuration\nDESCRIPTION: Shows how to update the Wasp version field in the main configuration file to version 0.16.0.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-15-to-0-16.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  wasp: {\n    version: \"^0.16.0\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Helper Function Implementation\nDESCRIPTION: Simple helper function that checks if there are any tasks in an array. Used as an example for unit testing in Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/project/testing.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport function areThereAnyTasks(tasks) {\n  return tasks.length === 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Wasp Project with Bash\nDESCRIPTION: Command to create a new Wasp project using the CLI tool. This generates a project skeleton in a new folder called 'myApp'.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-29-typescript-feature-announcement.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasp new myApp\n```\n\n----------------------------------------\n\nTITLE: Implementing userSignupFields for Google Auth in JavaScript\nDESCRIPTION: JavaScript implementation of the userSignupFields function that sets isSignupComplete to false for new Google-authenticated users.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const userSignupFields = {\n  isSignupComplete: () => false,\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Create Task Action in Wasp\nDESCRIPTION: Declares a createTask action in the Wasp configuration file, specifying the implementation function and associated entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/06-actions.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\naction createTask {\n  fn: import { createTask } from \"@src/actions\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring an API with Route Parameters in Wasp\nDESCRIPTION: Example of declaring an API with route parameters in a Wasp file, specifying entities and a parameterized route path.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/apis.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napi fooBar {\n  fn: import { fooBar } from \"@server/apis.js\",\n  entities: [Task],\n  httpRoute: (GET, \"/foo/bar/:email\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Schema\nDESCRIPTION: Prisma schema definition for the User entity that represents the business logic user in the application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/entities/entities.md#2025-04-22_snippet_9\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  // Any other fields you want to store about the user\n}\n```\n\n----------------------------------------\n\nTITLE: Updating tsconfig.json for Wasp 0.14.0\nDESCRIPTION: The new version of tsconfig.json file required for Wasp 0.14.0. It includes compiler options for module resolution, JSX support, and type checking.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"esnext\",\n    \"target\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"jsx\": \"preserve\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"typeRoots\": [\n      \"node_modules/@testing-library\",\n      \"node_modules/@types\"\n    ],\n    \"outDir\": \".wasp/phantom\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting a Job in JavaScript\nDESCRIPTION: This snippet demonstrates how to submit a job named 'mySpecialJob' with arguments in JavaScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/jobs.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst submittedJob = await mySpecialJob.submit({ job: \"args\" })\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Sender in Wasp\nDESCRIPTION: Configuration for setting up the Dummy email provider in Wasp for handling email verification and password reset functionality.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/email.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  // ...\n  // 7. Set up the email sender\n  emailSender: {\n    provider: Dummy,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Protected Page Declaration in Wasp\nDESCRIPTION: Declaring a page with authentication requirement in Wasp, ensuring only authenticated users can access it.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\npage MainPage {\n  component: import Main from \"@src/pages/Main\",\n  authRequired: true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Forgot Password Form in React\nDESCRIPTION: Example of implementing a forgot password page using Wasp's ForgotPasswordForm component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/ui.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\nroute RequestPasswordResetRoute { path: \"/request-password-reset\", to: RequestPasswordResetPage }\npage RequestPasswordResetPage {\n  component: import { ForgotPasswordPage } from \"@src/ForgotPasswordPage.jsx\"\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ForgotPasswordForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function ForgotPasswordPage() {\n  return <ForgotPasswordForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Wasp Project\nDESCRIPTION: Demonstrates the use of 'wasp clean' command to remove generated code and cached artifacts.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/general/cli.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp clean\n\nDeleting .wasp/ directory...\nDeleted .wasp/ directory.\n```\n\n----------------------------------------\n\nTITLE: Referencing Dummy Auth Provider\nDESCRIPTION: Example of how the Dummy provider is referenced in code, with warning that it is for development use only and will cause build failures in production.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/email/_dummy-provider-note.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDummy\n```\n\n----------------------------------------\n\nTITLE: Creating Database Backup using pg_dump (Bash)\nDESCRIPTION: Shows the command to create a backup of the PostgreSQL database before performing complex migrations. This is crucial for data safety and recovery in case of issues.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2025-04-02-an-introduction-to-database-migrations.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npg_dump -h localhost -U postgres tennis_score_app_server > backup.sql\n```\n\n----------------------------------------\n\nTITLE: Individual Fly.io Deployment Steps\nDESCRIPTION: Separate commands that make up the launch process, including setup, database creation, and deployment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/deployment/cli.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly setup my-wasp-app mia\nwasp deploy fly create-db mia\nwasp deploy fly deploy\n```\n\n----------------------------------------\n\nTITLE: Interactive Project Creation with Wasp CLI\nDESCRIPTION: Example of creating a new Wasp project using the interactive mode, showing template selection and project setup process.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/general/cli.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp new\nEnter the project name (e.g. my-project) ▸ MyFirstProject\nChoose a starter template\n[1] basic (default)\n    Simple starter template with a single page.\n[2] todo-ts\n    Simple but well-rounded Wasp app implemented with Typescript & full-stack type safety.\n[3] saas\n    Everything a SaaS needs! Comes with Auth, ChatGPT API, Tailwind, Stripe payments and more. Check out https://opensaas.sh/ for more details.\n[4] embeddings\n    Comes with code for generating vector embeddings and performing vector similarity search.\n[5] ai-generated\n    🤖 Describe an app in a couple of sentences and have Wasp AI generate initial code for you. (experimental)\n▸ 1\n\n🐝 --- Creating your project from the \"basic\" template... -------------------------\n\nCreated new Wasp app in ./MyFirstProject directory!\n\nTo run your new app, do:\n    cd MyFirstProject\n    wasp db start\n```\n\n----------------------------------------\n\nTITLE: Using the routes Object for Type-Safe Routing\nDESCRIPTION: Shows how to use the routes object to create type-safe links programmatically.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/links.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { routes } from 'wasp/client/router'\n\nconst linkToTask = routes.TaskRoute.build({ params: { id: 1 } })\n```\n\n----------------------------------------\n\nTITLE: Starting the Wasp Application\nDESCRIPTION: Command to start the Wasp application, which also installs all required dependencies.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/examples/websockets-realtime-voting/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwasp start\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Base Import\nDESCRIPTION: CSS file showing how to import Tailwind's base, components, and utilities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/css-frameworks.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* ... */\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication in Wasp\nDESCRIPTION: This snippet shows how to enable email authentication in the Wasp configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/ui.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  //...\n  auth: {\n    methods: {\n      email: {},\n    },\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Using NVM\nDESCRIPTION: Command to install Node.js version 20 using Node Version Manager (NVM). Wasp requires Node.js version 20 or higher.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/introduction/quick-start.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnvm install 20\n```\n\n----------------------------------------\n\nTITLE: PostCSS Configuration for Tailwind\nDESCRIPTION: PostCSS configuration file that enables Tailwind CSS and autoprefixer plugins.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/project/css-frameworks.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Optional Static Segment in Wasp\nDESCRIPTION: Shows how to define a route with an optional static segment in the main.wasp file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/links.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\nroute OptionalRoute { path: \"/task/:id/details?\", to: OptionalPage }\npage OptionalPage { ... }\n```\n\n----------------------------------------\n\nTITLE: Wasp App Title Configuration\nDESCRIPTION: Shows how to set the application title that appears in the browser tab.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/customizing-app.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"BookFace\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Server Secrets\nDESCRIPTION: Command to set multiple server secrets like Google OAuth credentials.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/deployment/cli.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd secrets set GOOGLE_CLIENT_ID=<...> GOOGLE_CLIENT_SECRET=<...> --context=server\n```\n\n----------------------------------------\n\nTITLE: Starting Wasp Project\nDESCRIPTION: Commands to navigate to project directory and start the Wasp development server\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/introduction/quick-start.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd <my-project-name>\nwasp start\n```\n\n----------------------------------------\n\nTITLE: Wasp CLI Main Help Output\nDESCRIPTION: Shows the complete list of available Wasp CLI commands and their descriptions, including general commands and project-specific commands.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/general/cli.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE\n  wasp <command> [command-args]\n\nCOMMANDS\n  GENERAL\n    new [<name>] [args]   Creates a new Wasp project. Run it without arguments for interactive mode.\n      OPTIONS:\n        -t|--template <template-name>\n           Check out the templates list here: https://github.com/wasp-lang/starters\n\n    new:ai <app-name> <app-description> [<config-json>]\n      Uses AI to create a new Wasp project just based on the app name and the description.\n      You can do the same thing with `wasp new` interactively.\n      Run `wasp new:ai` for more info.\n\n    version               Prints current version of CLI.\n    waspls                Run Wasp Language Server. Add --help to get more info.\n    completion            Prints help on bash completion.\n    uninstall             Removes Wasp from your system.\n  IN PROJECT\n    start                 Runs Wasp app in development mode, watching for file changes.\n    start db              Starts managed development database for you.\n    db <db-cmd> [args]    Executes a database command. Run 'wasp db' for more info.\n    clean                 Deletes all generated code, all cached artifacts, and the node_modules dir.\n                          Wasp equivalent of 'have you tried closing and opening it again?'.\n    build                 Generates full web app code, ready for deployment. Use when deploying or ejecting.\n    deploy                Deploys your Wasp app to cloud hosting providers.\n    telemetry             Prints telemetry status.\n    deps                  Prints the dependencies that Wasp uses in your project.\n    dockerfile            Prints the contents of the Wasp generated Dockerfile.\n    info                  Prints basic information about the current Wasp project.\n    test                  Executes tests in your project.\n    studio                (experimental) GUI for inspecting your Wasp app.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Applications on Fly.io Without Deploying\nDESCRIPTION: Command to create client and server apps on Fly.io and add necessary secrets without deploying them. This generates configuration files for later deployment.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/cli.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly setup <app-name> <region>\n```\n\n----------------------------------------\n\nTITLE: Updating a Wasp App with Client Environment Variables\nDESCRIPTION: Command to update a deployed Wasp application while including client-side environment variables. The environment variables must be passed to the terminal session before running the command.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/cli.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nREACT_APP_ANOTHER_VAR=somevalue wasp deploy fly deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Client to Netlify\nDESCRIPTION: Deploy the client web app to Netlify using Netlify CLI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nnpx netlify-cli deploy\nnpx netlify-cli deploy --prod\n```\n\n----------------------------------------\n\nTITLE: Importing Query Types in TypeScript\nDESCRIPTION: Demonstrates how to import the TypeScript type associated with a query implementation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/queries.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetFoo } from 'wasp/server/operations'\n```\n\n----------------------------------------\n\nTITLE: Server Environment Variables Configuration Example\nDESCRIPTION: Example of defining server environment variables in a .env.server file, including database connection settings.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/env-vars.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nDATABASE_URL=postgresql://localhost:5432\nSOME_VAR_NAME=somevalue\n```\n\n----------------------------------------\n\nTITLE: Docker Ignore Configuration\nDESCRIPTION: Docker ignore configuration to exclude node_modules directory from the build.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/advanced/deployment/manually.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnode_modules/\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Routes\nDESCRIPTION: Configuration of login routes and pages in the Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/google.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@client/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Web App Build Directory\nDESCRIPTION: Change directory command to enter the web application build directory in a Wasp project\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/_building-the-web-client.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd .wasp/build/web-app\n```\n\n----------------------------------------\n\nTITLE: Start Wasp Development Server\nDESCRIPTION: Commands to navigate to the project directory and start the Wasp development server. This will initialize the client, server, and database components.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/01-create.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cd TodoApp\n$ wasp start\n```\n\n----------------------------------------\n\nTITLE: Equivalent Multi-step Deployment Commands for Fly.io\nDESCRIPTION: The sequence of individual commands that are executed by the launch command under the hood, showing the separate setup, database creation, and deployment steps.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/cli.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly setup my-wasp-app mia\nwasp deploy fly create-db mia\nwasp deploy fly deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying with Client Environment Variables\nDESCRIPTION: Command showing how to include client-side environment variables when deploying a Wasp app, which must be passed to the terminal session before running the deploy command.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/cli.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nREACT_APP_ANOTHER_VAR=somevalue wasp deploy fly launch my-wasp-app mia\n```\n\n----------------------------------------\n\nTITLE: Custom Domain Certificate Creation\nDESCRIPTION: Command to create SSL certificates for a custom domain on Fly.io.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/cli.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd --context client certs create mycoolapp.com\n```\n\n----------------------------------------\n\nTITLE: Server Environment Variables Configuration\nDESCRIPTION: Example of configuring server-side environment variables in a .env.server file\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/project/env-vars.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nDATABASE_URL=postgresql://localhost:5432\nSOME_VAR_NAME=somevalue\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Component in TypeScript\nDESCRIPTION: Example of a React root component implementation in TypeScript with proper type definitions for props.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/client-config.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nexport default function Root({ children }: { children: React.ReactNode }) {\n  return (\n    <Provider store={store}>\n      <Layout>{children}</Layout>\n    </Provider>\n  )\n}\n\nfunction Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div>\n      <header>\n        <h1>My App</h1>\n      </header>\n      {children}\n      <footer>\n        <p>My App footer</p>\n      </footer>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Initial NotesPage React Component\nDESCRIPTION: Provides the initial boilerplate code for the `NotesPage` React component in `src/client/NotesPage.tsx`. This functional component currently only renders the static text \"Notes\" and serves as a placeholder before implementing data fetching and display logic.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-27-build-your-own-twitter-agent-langchain.md#2025-04-22_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nconst NotesPage = () => {\n\n  return (\n    <>Notes</>\n  );\n};\n\nexport default NotesPage;\n```\n```\n\n----------------------------------------\n\nTITLE: Changing Directory and Starting the Wasp App (shell)\nDESCRIPTION: Navigates into the newly created Wasp app directory and starts the app development server with the Wasp CLI. Replace '<my-project-name>' with the actual name of the app folder created in the previous step. The command 'wasp start' will serve the app locally (default at http://localhost:3000) and handle both frontend and backend services. Requires dependencies (Node.js, etc.) to be present. Limitation: directory must be correct and contain a valid Wasp project structure.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/introduction/quick-start.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd <my-project-name>\nwasp start\n```\n\n----------------------------------------\n\nTITLE: Initialize New Wasp Project\nDESCRIPTION: Command to create a new Wasp project named TodoApp using the Wasp CLI.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/tutorial/01-create.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ wasp new TodoApp\n```\n\n----------------------------------------\n\nTITLE: Tailing Heroku App Logs - Shell\nDESCRIPTION: This snippet displays real-time logs from the named Heroku app, assisting with monitoring and debugging post-deployment. It requires the Heroku CLI. Running this command will continuously output logs until stopped.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/deployment/manually.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nheroku logs --tail --app <app-name>\n\n```\n\n----------------------------------------\n\nTITLE: Running Wasp Deploy Package as Standalone TypeScript Project\nDESCRIPTION: This code snippet demonstrates the sequence of commands needed to run the Wasp deploy package. It includes installing dependencies with npm, building the TypeScript project, and executing the compiled JavaScript with Node.js.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/packages/deploy/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\nnpm run build\nnode dist/index.js fly ...\n```\n\n----------------------------------------\n\nTITLE: Creating SSL Certificate for Custom Domain on Fly.io\nDESCRIPTION: Command to create SSL certificates for a custom domain on Fly.io. This is part of the process to set up a custom domain for your Wasp application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/cli.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly cmd --context client certs create mycoolapp.com\n```\n\n----------------------------------------\n\nTITLE: Including Custom Components in Markdown\nDESCRIPTION: This snippet demonstrates how custom React components are included within the Markdown content of the blog post.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-11-22-fundraising-learnings.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<WaspIntro />\n<InBlogCta />\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Telemetry Collection via Environment Variable - Shell\nDESCRIPTION: This shell snippet demonstrates how users can disable telemetry data collection by the Wasp CLI and installation scripts. Setting the WASP_TELEMETRY_DISABLE environment variable to any value will instruct Wasp to skip sending telemetry data in future CLI commands and installations. This method operates at the environment variable level and works across supported shells; the value assigned ('1') is arbitrary as any value triggers the opt-out behavior.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/telemetry.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport WASP_TELEMETRY_DISABLE=1\n```\n\n----------------------------------------\n\nTITLE: Running Haskell Code Analysis\nDESCRIPTION: Shell command to run complete code analysis including formatting checks, linting, and static analysis.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./run code-check\n```\n\n----------------------------------------\n\nTITLE: Generating Deployable Wasp App Code\nDESCRIPTION: This command generates deployable code for the entire Wasp application in the .wasp/build/ directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/manually.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasp build\n```\n\n----------------------------------------\n\nTITLE: Checking Node Version\nDESCRIPTION: Command to verify the current Node.js version in use.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/introduction/quick-start.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Configuring Dummy Email Provider in Wasp\nDESCRIPTION: Shows how to set up the Dummy email provider in the main.wasp file, which is useful for development purposes as it logs emails to the console instead of sending them.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/email/email.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: Dummy,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations in Wasp\nDESCRIPTION: Command to run database migrations in development environment for the Wasp Todo app\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/examples/tutorials/TodoApp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Analyzing Complex Function Naming in JavaScript\nDESCRIPTION: This snippet shows a function with a vague name that hides the complexity of its operations, making it difficult to understand its true purpose and side effects.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-10-12-on-importance-of-naming-in-programming.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Find a free machine and use it, or create a new machine\n// if needed. Then on that machine, set up the new worker \n// with the given Docker image and setup cmd. Finally,\n// start executing a job on that worker and return its id.\nasync function getJobId (\n  machineType, machineRegion,\n  workerDockerImage, workerSetupCmd,\n  jobDescription\n) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Signup Route in Wasp\nDESCRIPTION: This code shows how to create a route for the signup page in the main.wasp file. It defines the route path and links it to a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_6\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\nroute SignupRoute { path: \"/signup\", to: SignupPage }\npage SignupPage {\n  component: import { SignupPage } from \"@src/SignupPage.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Image with Caption in Markdown\nDESCRIPTION: This code snippet demonstrates how to use the custom ImgWithCaption component to display an image with a caption in the blog post.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-26-wasp-beta-launch-week.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ImgWithCaption\n    alt=\"Beta is coming\"\n    source=\"img/beta-ann/beta-banner.png\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp Framework\nDESCRIPTION: Curl command to download and execute the Wasp installer script\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/examples/tutorials/TodoApp/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Discord API Response Structure\nDESCRIPTION: Example JSON structure of the data received from Discord's /users/@me endpoint.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/discord.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"80351110224678912\",\n  \"username\": \"Nelly\",\n  \"discriminator\": \"1337\",\n  \"avatar\": \"8342729096ea3675442027381ff50dfe\",\n  \"verified\": true,\n  \"flags\": 64,\n  \"banner\": \"06c16474723fe537c283b8efa61a30c8\",\n  \"accent_color\": 16711680,\n  \"premium_type\": 1,\n  \"public_flags\": 64,\n  \"avatar_decoration_data\": {\n    \"sku_id\": \"1144058844004233369\",\n    \"asset\": \"a_fed43ab12698df65902ba06727e20c0e\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Social Authentication and Routes in Wasp\nDESCRIPTION: This code snippet provides a skeleton structure for a main.wasp file. It includes placeholders for configuring social authentication within the app declaration and defining routes and pages. The actual implementation details are omitted and represented by ellipses.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/_wasp-file-structure-note.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\n// Configuring the social authentication\napp myApp {\n  auth: { ... }\n}\n\n// Defining routes and pages\nroute LoginRoute { ... }\npage LoginPage { ... }\n```\n\n----------------------------------------\n\nTITLE: Starting a Wasp Project\nDESCRIPTION: These commands navigate into the project directory and start the Wasp application. It serves both the frontend and backend, making the app accessible at http://localhost:3000.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/introduction/quick-start.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd <my-project-name>\nwasp start\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Authentication User Fields Function in JavaScript\nDESCRIPTION: This snippet shows the implementation of the Google authentication user fields function in JavaScript. It generates a username based on the Google display name.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/social-auth/google.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { generateAvailableUsername } from '@wasp/core/auth.js'\n\nexport const getUserFields = async (_context, args) => {\n  const username = await generateAvailableUsername(\n    args.profile.displayName.split(' '),\n    { separator: '.' }\n  )\n  return { username }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic React Component for MainPage\nDESCRIPTION: This snippet demonstrates a simple React component structure for the MainPage, including necessary imports and default export.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/tutorial/03-pages.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport waspLogo from './waspLogo.png'\nimport './Main.css'\n\nconst MainPage = () => {\n  // ...\n}\nexport default MainPage\n```\n\n----------------------------------------\n\nTITLE: Importing Server-Side Code in Wasp\nDESCRIPTION: This snippet shows the syntax for importing server-side code in Wasp. It demonstrates both default and named imports from the server directory.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/general/language.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\nimport Foo from \"@server/bar.js\"\nimport { Smth } from \"@server/a/b.js\"\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Usage Example\nDESCRIPTION: Example of using Tailwind utility classes in a React component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/css-frameworks.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// ...\n\n<h1 className=\"text-3xl font-bold underline\">\n  Hello world!\n</h1>\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Navigating to Wasp Build Directory\nDESCRIPTION: Change directory to the Wasp build folder for deployment preparation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/deployment/deployment-methods/paas.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd .wasp/build\n```\n\n----------------------------------------\n\nTITLE: Sample Discord User Data\nDESCRIPTION: This snippet shows an example of the user data received from Discord's /users/@me endpoint, which is used in the authentication process.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/discord.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"80351110224678912\",\n  \"username\": \"Nelly\",\n  \"discriminator\": \"1337\",\n  \"avatar\": \"8342729096ea3675442027381ff50dfe\",\n  \"verified\": true,\n  \"flags\": 64,\n  \"banner\": \"06c16474723fe537c283b8efa61a30c8\",\n  \"accent_color\": 16711680,\n  \"premium_type\": 1,\n  \"public_flags\": 64,\n  \"avatar_decoration_data\": {\n    \"sku_id\": \"1144058844004233369\",\n    \"asset\": \"a_fed43ab12698df65902ba06727e20c0e\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server Setup Configuration in Wasp\nDESCRIPTION: Declaration of server setup configuration in Wasp language that specifies a custom setup function to be executed on server start.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/docs/design-docs/server-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nserver: {\n  setup: {\n    fn: import { myCustomSetup } from '@ext/serverSetup.js'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Interactive Project Creation\nDESCRIPTION: Demonstrates creating a new Wasp project using the default template without interactive prompts.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/general/cli.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ wasp new MyFirstProject\n🐝 --- Creating your project from the \"basic\" template... -------------------------\n\nCreated new Wasp app in ./MyFirstProject directory!\n\nTo run your new app, do:\n    cd MyFirstProject\n    wasp db start\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Page Component in JavaScript\nDESCRIPTION: Creates the SignupPage React component that utilizes the Wasp-provided SignupForm. This component renders the signup form and provides a link back to the login page.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/tutorial/07-auth.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from 'react-router-dom'\nimport { SignupForm } from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <div style={{ maxWidth: '400px', margin: '0 auto' }}>\n      <SignupForm />\n      <br />\n      <span>\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication in Wasp\nDESCRIPTION: This snippet shows how to configure email authentication in the main.wasp file, which enables authentication UI components for email login.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  //...\n  auth: {\n    methods: {\n      email: {},\n    },\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Google API Response Structure\nDESCRIPTION: JSON structure showing the possible fields returned from Google's userinfo endpoint\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/social-auth/google.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"name\",\n  \"given_name\",\n  \"family_name\",\n  \"email\",\n  \"email_verified\",\n  \"aud\",\n  \"exp\",\n  \"iat\",\n  \"iss\",\n  \"locale\",\n  \"picture\",\n  \"sub\"\n]\n```\n\n----------------------------------------\n\nTITLE: Creating schema.prisma File Structure for PostgreSQL in Wasp\nDESCRIPTION: Shows the basic structure of a schema.prisma file for PostgreSQL, including datasource and generator blocks.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Group\nDESCRIPTION: Command to create Docker group for non-root user access\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-11-21-guide-windows-development-wasp-wsl.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo groupadd docker\n```\n\n----------------------------------------\n\nTITLE: Installing server dependencies\nDESCRIPTION: Commands to navigate to the server directory and install necessary dependencies, including type definitions for TypeScript.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-09-build-real-time-voting-app-websockets-react-typescript.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ws-server && npm install\nnpm i --save-dev @types/cors\n```\n\n----------------------------------------\n\nTITLE: Updated Auth Field Definition with defineUserSignupFields\nDESCRIPTION: The updated TypeScript implementation using defineUserSignupFields from wasp/server/auth instead of the previous defineAdditionalSignupFields function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// highlight-next-line\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\n// highlight-next-line\nexport const fields = defineUserSignupFields({\n  address: async (data) => {\n    const address = data.address;\n    if (typeof address !== 'string') {\n      throw new Error('Address is required');\n    }\n    if (address.length < 5) {\n      throw new Error('Address must be at least 5 characters long');\n    }\n    return address;\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Password Migration Action in Wasp\nDESCRIPTION: Defines an action for password migration in the Wasp configuration file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_28\n\nLANGUAGE: wasp\nCODE:\n```\naction migratePassword {\n  fn: import { migratePassword } from \"@src/auth\",\n  entities: []\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Imports\nDESCRIPTION: Import statements for React components and utilities used in the blog post.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-26-michael-curry-usecase.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n\nimport InBlogCta from './components/InBlogCta';\nimport WaspIntro from './_wasp-intro.md';\nimport ImgWithCaption from './components/ImgWithCaption'\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in Markdown\nDESCRIPTION: This code snippet demonstrates how to import and use custom React components within a Markdown file, including utility functions for handling base URLs and image captions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-06-28-what-can-you-build-with-wasp.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n\nimport InBlogCta from './components/InBlogCta';\nimport WaspIntro from './_wasp-intro.md';\nimport ImgWithCaption from './components/ImgWithCaption'\n```\n\n----------------------------------------\n\nTITLE: Running Wasp CLI to Regenerate Prisma Client\nDESCRIPTION: This command runs the Wasp CLI to regenerate the Prisma client based on the updated schema.prisma file, which is necessary after making changes to the authentication field access.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nwasp db migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Running Discord Bot with Environment Variable (JavaScript)\nDESCRIPTION: This snippet demonstrates how to run the Discord bot using Node.js and setting the bot token as an environment variable.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2021-04-29-discord-bot-introduction.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nDISCORD_BOT=<TOKEN_OF_YOUR_DISCORD_BOT> node bot.js\n```\n\n----------------------------------------\n\nTITLE: Sending Telemetry Data on Wasp Installation in JSON\nDESCRIPTION: This JSON structure represents the telemetry data sent when Wasp is installed via the install.sh script. It includes a randomly generated ID and the OS information.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/telemetry.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"distinct_id\": \"274701613078193779564259\",\n  \"os\": \"linux\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generated PRD Example for Plant Tracking Application\nDESCRIPTION: Detailed Product Requirement Document generated by ChatGPT, outlining features and functionality for a house plant tracking application including user registration, plant database, and watering schedules\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-08-23-using-product-requirement-documents-generate-better-web-apps-with-ai.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nProduct Requirements Document for a House Plants Tracking Application\n\n1. **Product Title**: GreenLush: Your House Plant Care Companion\n\n2. **Purpose**: \n\nThe GreenLush app is designed to help users manage their house plants and keep track of their watering schedules. This app will serve as a reminder tool, a database for plant types, and a platform for users to know more about house plant care. \n\n3. **Features and Functionality**:\n\n    3.1. **User Registration & Profile Management**: To allow users to create and manage their account.\n    \n    3.2. **Plant Database**: A comprehensive directory of house plants, with visuals and information about each type.\n    \n    3.3. **Plant Profile**: Users can create a profile for each house plant they own, fill in its type, and assign a custom nickname and photo.\n    \n    3.4. **Watering Schedule**: By selecting or inputting the type of plant, the app will suggest an ideal watering schedule. Users can confirm or customize this schedule and notifications will be sent when it's time to water each specific plant. \n\n    3.5. **House Plant Care Tips**: A section of the app that provides general care tips and recommendations for house plants.\n\n4. **Behavior of the Product**:\n\n    4.1. Users will be prompted to sign up when they open the app for the first time. \n  \n    4.2. Once registered, users will be able to browse the plant database, create and manage plant profiles, set watering schedules, and read plant care tips. \n\n    4.3. Notification alerts will be sent according to the set watering schedule.\n```\n\n----------------------------------------\n\nTITLE: Updating Wasp Version Configuration\nDESCRIPTION: Shows how to update the Wasp version field in the main configuration file to version 0.15.0.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/migration-guides/migrate-from-0-14-to-0-15.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp MyApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ormolu Format Checker\nDESCRIPTION: Shell commands for checking and applying code formatting using Ormolu formatter.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./run ormolu:check\n./run ormolu:format\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in Markdown\nDESCRIPTION: This code snippet shows the import statements for various React components and utilities used in the blog post, including custom components for rendering images with captions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-11-26-wasp-beta-launch-week.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n\nimport InBlogCta from './components/InBlogCta';\nimport WaspIntro from './_wasp-intro.md';\nimport ImgWithCaption from './components/ImgWithCaption'\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in MDX\nDESCRIPTION: React/MDX import statements for required components and utilities used in the blog post.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-04-11-wasp-launch-week-two.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n\nimport InBlogCta from './components/InBlogCta';\nimport WaspIntro from './_wasp-intro.md';\nimport ImgWithCaption from './components/ImgWithCaption'\n```\n\n----------------------------------------\n\nTITLE: Inserting TypescriptServerNote Component in Markdown\nDESCRIPTION: This code snippet inserts the previously imported TypescriptServerNote component into the Markdown document. It's likely used to provide additional information about TypeScript server integration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/introduction/editor-setup.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<TypescriptServerNote />\n```\n\n----------------------------------------\n\nTITLE: Finding Context User Auth Identity in a Server Action (JavaScript)\nDESCRIPTION: Shows using the `findUserIdentity` helper inside an async action/handler context to check for the presence of specific authentication providers (email or Google) on the context user. It imports from `wasp/client/auth` and expects a context object with a `user` property. Returns the identified provider object or null, which can be used for flow control during action execution.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/entities/entities.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { findUserIdentity } from 'wasp/client/auth'\n\nexport const createTask = async (args, context) => {\n  const emailIdentity = findUserIdentity(context.user, 'email')\n  const googleIdentity = findUserIdentity(context.user, 'google')\n  if (emailIdentity) {\n    // ...\n  } else if (googleIdentity) {\n    // ...\n  }\n  // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Actions with Entities in Wasp\nDESCRIPTION: This snippet shows how to declare Actions in the Wasp configuration file with Entity dependencies. The entities field specifies which data models the action will access.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/operations/actions.md#2025-04-22_snippet_9\n\nLANGUAGE: wasp\nCODE:\n```\naction createTask {\n  fn: import { createTask } from \"@src/actions.js\",\n  entities: [Task]\n}\n\naction markTaskAsDone {\n  fn: import { markTaskAsDone } from \"@src/actions.js\",\n  entities: [Task]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Route Parameters Access\nDESCRIPTION: Shows how to migrate from accessing route parameters via props.match.params to using the useParams hook.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-14-to-0-15.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RouteComponentProps } from 'react-router-dom'\n\nexport function SomePage(props: RouteComponentProps) {\n  const { id } = props.match.params\n  return (\n    <div>\n      <h1>Item {id}</h1>\n    </div>\n  )\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useParams } from 'react-router-dom'\n\nexport function SomePage() {\n  const { id } = useParams()\n  return (\n    <div>\n      <h1>Item {id}</h1>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signup in TypeScript\nDESCRIPTION: TypeScript implementation of a custom signup function with proper type definitions. This version includes explicit type definitions for input and output parameters, making the function more type-safe while providing the same functionality as the JavaScript version.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/entities/entities.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  createUser,\n} from 'wasp/server/auth'\nimport type { CustomSignup } from 'wasp/server/operations'\n\ntype CustomSignupInput = {\n  username: string\n  password: string\n}\ntype CustomSignupOutput = {\n  success: boolean\n  message: string\n}\n\nexport const signup: CustomSignup<\n  CustomSignupInput,\n  CustomSignupOutput\n> = async (args, { entities: { User } }) => {\n  try {\n    // Provider ID is a combination of the provider name and the provider user ID\n    // And it is used to uniquely identify the user in your app\n    const providerId = createProviderId('username', args.username)\n    // sanitizeAndSerializeProviderData hashes the password and returns a JSON string\n    const providerData = await sanitizeAndSerializeProviderData<'username'>({\n      hashedPassword: args.password,\n    })\n\n    await createUser(\n      providerId,\n      providerData,\n      // Any additional data you want to store on the User entity\n      {}\n    )\n\n    // This is equivalent to:\n    // await User.create({\n    //   data: {\n    //     auth: {\n    //       create: {\n    //         identities: {\n    //             create: {\n    //                 providerName: 'username',\n    //                 providerUserId: args.username\n    //                 providerData,\n    //             },\n    //         },\n    //       }\n    //     },\n    //   }\n    // })\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entities in schema.prisma for SQLite in Wasp\nDESCRIPTION: Demonstrates how to define entities (User and Task) in the schema.prisma file for SQLite, including relationships.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/migration-guides/migrate-from-0-13-to-0-14.md#2025-04-22_snippet_6\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id       Int @id @default(autoincrement())\n  tasks    Task[]\n}\n\nmodel Task {\n  id          Int @id @default(autoincrement())\n  description String\n  isDone      Boolean\n  userId      Int\n  user        User @relation(fields: [userId], references: [id])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Database for a Wasp App on Fly.io\nDESCRIPTION: Command to create a new database for your Wasp application on Fly.io. This should only be executed once per application.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/cli.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nwasp deploy fly create-db <region>\n```\n\n----------------------------------------\n\nTITLE: Railway Client Deployment Script\nDESCRIPTION: Bash script for automating the client deployment process to Railway, including building, configuring, and deploying steps.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/advanced/deployment/manually.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\nif [ -z \"$REACT_APP_API_URL\" ]\nthen\n  echo \"REACT_APP_API_URL is not set\"\n  exit 1\nfi\n\nwasp build\ncd .wasp/build/web-app\n\nnpm install && REACT_APP_API_URL=$REACT_APP_API_URL npm run build\n\ncp -r build dist\n\ndockerfile_contents=$(cat <<EOF\nFROM pierrezemb/gostatic\nCMD [ \"-fallback\", \"index.html\" ]\nCOPY ./dist/ /srv/http/\nEOF\n)\n\ndockerignore_contents=$(cat <<EOF\nnode_modules/\nEOF\n)\n\necho \"$dockerfile_contents\" > Dockerfile\necho \"$dockerignore_contents\" > .dockerignore\n\nrailway up\n```\n\n----------------------------------------\n\nTITLE: Creating Wasp Vector Similarity Search Project\nDESCRIPTION: Command to create a new Wasp project using the embeddings template which includes vector similarity search capabilities, OpenAI Embeddings API, and Pinecone vector database.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/project/starter-templates.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwasp new <project-name> -t embeddings\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with useAction in React Component (JavaScript)\nDESCRIPTION: Example showing how to configure the markTaskAsDone action with optimistic updates in a React component. The code demonstrates updating a task's isDone status while maintaining a responsive UI through optimistic updates.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/actions.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport {\n  useQuery,\n  useAction,\n  getTask,\n  markTaskAsDone,\n} from 'wasp/client/operations'\n\nconst TaskPage = ({ id }) => {\n  const { data: task } = useQuery(getTask, { id })\n  const markTaskAsDoneOptimistically = useAction(markTaskAsDone, {\n    optimisticUpdates: [\n      {\n        getQuerySpecifier: ({ id }) => [getTask, { id }],\n        updateQuery: (_payload, oldData) => ({ ...oldData, isDone: true }),\n      },\n    ],\n  })\n\n  if (!task) {\n    return <h1>\"Loading\"</h1>\n  }\n\n  const { description, isDone } = task\n  return (\n    <div>\n      <p>\n        <strong>Description: </strong>\n        {description}\n      </p>\n      <p>\n        <strong>Is done: </strong>\n        {isDone ? 'Yes' : 'No'}\n      </p>\n      {isDone || (\n        <button onClick={() => markTaskAsDoneOptimistically({ id })}>\n          Mark as done.\n        </button>\n      )}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Complex CRUD in Wasp\nDESCRIPTION: Example of a CRUD declaration with multiple operations and configuration options. It demonstrates setting up entity mapping, defining public operations, and implementing custom override functions.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/crud.md#2025-04-22_snippet_10\n\nLANGUAGE: wasp\nCODE:\n```\ncrud Tasks { // crud name here is \"Tasks\"\n  entity: Task,\n  operations: {\n    getAll: {\n      isPublic: true, // optional, defaults to false\n    },\n    get: {},\n    create: {\n      overrideFn: import { createTask } from \"@src/tasks.js\", // optional\n    },\n    update: {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Query for Retrieving Memes in Wasp\nDESCRIPTION: This code snippet defines a Wasp query called 'getAllMemes' that will retrieve all meme data from the database. The query is connected to a server-side function and specifies the Meme entity as a dependency.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2023-09-17-ai-meme-generator-how-to-use-openai-function-call.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nquery getAllMemes {\n  fn: import { getAllMemes } from \"@server/queries.js\",\n  entities: [Meme]\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Contact Page Structure\nDESCRIPTION: Basic markdown structure defining a contact page with Discord link and email information\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/contact.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Contact\n---\n\n<!-- TODO: update the email once we setup @wasp.sh-->\nYou can find us on [Discord](https://discord.gg/rzdnErX) or you can reach out to us via email at hi@wasp-lang.dev.\n```\n\n----------------------------------------\n\nTITLE: Importing TypeScript Helper Component\nDESCRIPTION: Imports a React component used to conditionally show TypeScript-specific documentation content.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/_superjson-note.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ShowForTs } from '@site/src/components/TsJsHelpers';\n```\n\n----------------------------------------\n\nTITLE: Path-Specific Middleware Configuration\nDESCRIPTION: Shows how to apply middleware configuration to all routes under a specific path using apiNamespace.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/middleware-config.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napiNamespace fooBar {\n  middlewareConfigFn: import { fooBarNamespaceMiddlewareFn } from \"@src/apis\",\n  path: \"/foo/bar\"\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express'\nimport { type MiddlewareConfigFn } from 'wasp/server'\n\nexport const fooBarNamespaceMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {\n  const customMiddleware: express.RequestHandler = (_req, _res, next) => {\n    console.log('fooBarNamespaceMiddlewareFn: custom middleware')\n    next()\n  }\n\n  middlewareConfig.set('custom.middleware', customMiddleware)\n\n  return middlewareConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Using Queries on the Client in TypeScript\nDESCRIPTION: Shows how to use Queries on the client-side in TypeScript, highlighting automatic type inference and type-checking for Query payloads and return values.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/data-model/operations/queries.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAllTasks, getFilteredTasks } from 'wasp/client/operations'\n\n// TypeScript automatically infers the return values and type-checks\n// the payloads.\nconst allTasks = await getAllTasks()\nconst doneTasks = await getFilteredTasks({ isDone: true })\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Command to install secure-password and sodium-native packages for password hashing\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/migration-guides/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpm install secure-password@4.0.0 sodium-native@3.3.0 --save-exact\n```\n\n----------------------------------------\n\nTITLE: Updating MainPage Component with NewTaskForm in TypeScript\nDESCRIPTION: This snippet shows how to integrate the NewTaskForm component into the MainPage component in TypeScript. It includes type imports and demonstrates the use of the getTasks query.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/tutorial/06-actions.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormEvent } from 'react'\nimport { Task } from 'wasp/entities'\nimport {\n  createTask,\n  getTasks,\n  useQuery\n} from 'wasp/client/operations'\n\nconst MainPage = () => {\n  const { data: tasks, isLoading, error } = useQuery(getTasks)\n\n  return (\n    <div>\n      <NewTaskForm />\n\n      {tasks && <TasksList tasks={tasks} />}\n\n      {isLoading && 'Loading...'}\n      {error && 'Error: ' + error}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Schema\nDESCRIPTION: Prisma schema definition for the User entity required by Keycloak authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/auth/social-auth/keycloak.md#2025-04-22_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n  // Add your own fields below\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak Auth in Wasp File (JavaScript)\nDESCRIPTION: This snippet shows how to configure the Auth object in the main Wasp file to enable Keycloak authentication. It specifies the User entity and enables Keycloak as an authentication method.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/social-auth/keycloak.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.13.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      keycloak: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Google Auth Config Function - TypeScript\nDESCRIPTION: Provides the getConfig implementation in TypeScript, mirroring the JavaScript version, for providing OAuth scopes. No dependencies and no required inputs. Output is a config object defining the scopes necessary for Google OAuth functionality within Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/google.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nexport function getConfig() {\n  return {\n    scopes: ['profile', 'email'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onAfterSignup Hook in TypeScript\nDESCRIPTION: This snippet shows the implementation of the onAfterSignup hook in TypeScript. It includes type annotations and demonstrates how to handle post-signup actions, including OAuth-specific operations.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/auth/auth-hooks.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OnAfterSignupHook } from 'wasp/server/auth'\n\nexport const onAfterSignup: OnAfterSignupHook = async ({\n  providerId,\n  user,\n  oauth,\n  prisma,\n  req,\n}) => {\n  const count = await prisma.user.count()\n  console.log('number of users after', count)\n  console.log('user object', user)\n\n  // If this is an OAuth signup, you have access to the OAuth tokens and the uniqueRequestId\n  if (oauth) {\n    console.log('accessToken', oauth.tokens.accessToken)\n    console.log('uniqueRequestId', oauth.uniqueRequestId)\n\n    const id = oauth.uniqueRequestId\n    const data = someKindOfStore.get(id)\n    if (data) {\n      console.log('saved data for the ID', data)\n    }\n    someKindOfStore.delete(id)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Cache Key with Wasp in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to import a query operation and retrieve its query cache key within a Wasp application. TypeScript types provide additional safety during development. The 'getTasks.queryCacheKey' property yields a string or tuple used as a cache identifier with react-query hooks. This approach is essential for developers integrating direct react-query operations requiring explicit cache key management.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/data-model/operations/actions.md#2025-04-22_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getTasks } from 'wasp/client/operations'\n\nconst queryKey = getTasks.queryCacheKey\n```\n\n----------------------------------------\n\nTITLE: Defining Background Job in Wasp\nDESCRIPTION: Declaration of a background job in the Wasp configuration file, specifying the executor, perform function, and related entities.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/advanced/jobs.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\njob mySpecialJob {\n  executor: PgBoss,\n  perform: {\n    fn: import { foo } from \"@src/workers/bar\"\n  },\n  entities: [Task],\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Image Component with Captions in JSX/MDX\nDESCRIPTION: Example of using a custom ImgWithCaption component to display a GitHub Copilot demo with source, alt text, and caption properties specified.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/blog/2022-06-24-ML-code-gen-vs-coding-by-hand-future.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ImgWithCaption\n    alt=\"Copilot example - text sentiment\"\n    source=\"img/copilot-example-sentiment.gif\"\n    caption=\"GitHub Copilot generating a whole function body based on its signature and the comments on top of it.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signup Logic in JavaScript\nDESCRIPTION: JavaScript implementation of a custom signup function that creates a user with username authentication, handling provider IDs and data sanitization.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/entities.md#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  createUser,\n} from 'wasp/server/auth'\n\nexport const signup = async (args, { entities: { User } }) => {\n  try {\n    // Provider ID is a combination of the provider name and the provider user ID\n    // And it is used to uniquely identify the user in your app\n    const providerId = createProviderId('username', args.username)\n    // sanitizeAndSerializeProviderData hashes the password and returns a JSON string\n    const providerData = await sanitizeAndSerializeProviderData({\n      hashedPassword: args.password,\n    })\n\n    await createUser(\n      providerId,\n      providerData,\n      // Any additional data you want to store on the User entity\n      {},\n    )\n\n    // This is equivalent to:\n    // await User.create({\n    //   data: {\n    //     auth: {\n    //       create: {\n    //         identities: {\n    //             create: {\n    //                 providerName: 'username',\n    //                 providerUserId: args.username\n    //                 providerData,\n    //             },\n    //         },\n    //       }\n    //     },\n    //   }\n    // })\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Main Page with Auth Hook Implementation\nDESCRIPTION: Implementation of a main page component using the useAuth hook for authentication state management.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAuth, logout } from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\nimport Todo from '../Todo'\n\nexport function Main() {\n  const { data: user } = useAuth()\n\n  if (!user) {\n    return (\n      <span>\n        Please <Link to=\"/login\">login</Link> or{' '}\n        <Link to=\"/signup\">sign up</Link>.\n      </span>\n    )\n  } else {\n    return (\n      <>\n        <button onClick={logout}>Logout</button>\n        <Todo />\n      </>\n    )\n  }\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuth, logout } from 'wasp/client/auth'\nimport { Link } from 'react-router-dom'\nimport Todo from '../Todo'\n\nexport function Main() {\n  const { data: user } = useAuth()\n\n  if (!user) {\n    return (\n      <span>\n        Please <Link to='/login'>login</Link> or <Link to='/signup'>sign up</Link>.\n      </span>\n    )\n  } else {\n    return (\n      <>\n        <button onClick={logout}>Logout</button>\n        <Todo />\n      </>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Signup Fields (Wasp 0.13.0+) in TypeScript\nDESCRIPTION: Illustrates the updated approach for defining `userSignupFields` in a provider-specific file (e.g., `google.ts`) for Wasp 0.13.0+. Due to changes in the profile data format received from OAuth providers (now directly forwarded from the provider via Arctic), the mapping needs adjustment (e.g., using `data.profile.name` instead of `data.profile.displayName` for Google).\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/migrate-from-0-12-to-0-13.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineUserSignupFields } from 'wasp/server/auth'\n\nexport const userSignupFields = defineUserSignupFields({\n    displayName: (data: any) => data.profile.name,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Wasp CLI - Bash Command\nDESCRIPTION: Command to install the latest 0.12.x version of Wasp using the installer script.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://get.wasp.sh/installer.sh | sh -s\n```\n\n----------------------------------------\n\nTITLE: Defining Password Update Action in Wasp Configuration (wasp)\nDESCRIPTION: This Wasp configuration fragment demonstrates how to declare an action in the main.wasp file that connects the backend updatePassword function for user password updates. It makes the updatePassword logic available as an action to the app, requiring the function to be implemented and imported from the JavaScript or TypeScript backend code. The configuration entry does not include implementation details but registers the intent in the Wasp app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/auth/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: wasp\nCODE:\n```\n// ...\n\naction updatePassword {\n  fn: import { updatePassword } from \"@src/auth\",\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Client in React (TypeScript)\nDESCRIPTION: Demonstrates how to use WebSockets in a React component using TypeScript, showcasing full-stack type safety and helper types for payload inference.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/docs/advanced/web-sockets.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react'\nimport {\n  useSocket,\n  useSocketListener,\n  ServerToClientPayload,\n} from 'wasp/client/webSocket'\n\nexport const ChatPage = () => {\n  const [messageText, setMessageText] = useState<\n    // We are using a helper type to get the payload type for the \"chatMessage\" event.\n    ClientToServerPayload<'chatMessage'>\n  >('')\n  const [messages, setMessages] = useState<\n    ServerToClientPayload<'chatMessage'>[]\n  >([])\n  // The \"socket\" instance is typed with the types you defined on the server.\n  const { socket, isConnected } = useSocket()\n\n  // This is a type-safe event handler: \"chatMessage\" event and its payload type\n  // are defined on the server.\n  useSocketListener('chatMessage', logMessage)\n\n  function logMessage(msg: ServerToClientPayload<'chatMessage'>) {\n    setMessages((priorMessages) => [msg, ...priorMessages])\n  }\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    // This is a type-safe event emitter: \"chatMessage\" event and its payload type\n    // are defined on the server.\n    socket.emit('chatMessage', messageText)\n    setMessageText('')\n  }\n\n  const messageList = messages.map((msg) => (\n    <li key={msg.id}>\n      <em>{msg.username}</em>: {msg.text}\n    </li>\n  ))\n  const connectionIcon = isConnected ? '🟢' : '🔴'\n\n  return (\n    <>\n      <h2>Chat {connectionIcon}</h2>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <div>\n            <div>\n              <input\n                type=\"text\"\n                value={messageText}\n                onChange={(e) => setMessageText(e.target.value)}\n              />\n            </div>\n            <div>\n              <button type=\"submit\">Submit</button>\n            </div>\n          </div>\n        </form>\n        <ul>{messageList}</ul>\n      </div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Routes in Wasp\nDESCRIPTION: Route and page definitions for authentication flows\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/social-auth/github.md#2025-04-22_snippet_3\n\nLANGUAGE: wasp\nCODE:\n```\nroute LoginRoute { path: \"/login\", to: LoginPage }\npage LoginPage {\n  component: import { Login } from \"@src/pages/auth.jsx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Endpoint Handler in JavaScript\nDESCRIPTION: JavaScript implementation of the API endpoint handler function that returns a JSON response with a greeting message. Shows how to access the context object and modify response headers.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/advanced/apis.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const fooBar = (req, res, context) => {\n  res.set(\"Access-Control-Allow-Origin\", \"*\");\n  res.json({ msg: `Hello, ${context.user ? \"registered user\" : \"stranger\"}!` });\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Cache Key in Wasp (JavaScript)\nDESCRIPTION: This snippet demonstrates how to access the query cache key in Wasp for JavaScript. It shows how to obtain the queryCacheKey property from a Wasp query.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/data-model/operations/actions.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport getTasks from '@wasp/queries/getTasks'\n\nconst queryKey = getTasks.queryCacheKey\n```\n\n----------------------------------------\n\nTITLE: Starting Wasp Dev Server with NPM\nDESCRIPTION: Command to start the Wasp development server with automatic reload functionality when changes are detected\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/waspc/data/Generator/templates/server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Setting SMTP Environment Variables\nDESCRIPTION: Shows the required environment variables for configuring the SMTP email provider in the .env.server file.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/email/email.md#2025-04-22_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nSMTP_HOST=\nSMTP_USERNAME=\nSMTP_PASSWORD=\nSMTP_PORT=\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Signup Logic in TypeScript\nDESCRIPTION: TypeScript implementation of a custom signup function with proper type definitions for inputs and outputs, creating a user with username authentication.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/entities/entities.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  createProviderId,\n  sanitizeAndSerializeProviderData,\n  createUser,\n} from 'wasp/server/auth'\nimport type { CustomSignup } from 'wasp/server/operations'\n\ntype CustomSignupInput = {\n  username: string\n  password: string\n}\ntype CustomSignupOutput = {\n  success: boolean\n  message: string\n}\n\nexport const signup: CustomSignup<\n  CustomSignupInput,\n  CustomSignupOutput\n> = async (args, { entities: { User } }) => {\n  try {\n    // Provider ID is a combination of the provider name and the provider user ID\n    // And it is used to uniquely identify the user in your app\n    const providerId = createProviderId('username', args.username)\n    // sanitizeAndSerializeProviderData hashes the password and returns a JSON string\n    const providerData = await sanitizeAndSerializeProviderData<'username'>({\n      hashedPassword: args.password,\n    })\n\n    await createUser(\n      providerId,\n      providerData,\n      // Any additional data you want to store on the User entity\n      {},\n    )\n\n    // This is equivalent to:\n    // await User.create({\n    //   data: {\n    //     auth: {\n    //       create: {\n    //         identities: {\n    //             create: {\n    //                 providerName: 'username',\n    //                 providerUserId: args.username\n    //                 providerData,\n    //             },\n    //         },\n    //       }\n    //     },\n    //   }\n    // })\n  } catch (e) {\n    return {\n      success: false,\n      message: e.message,\n    }\n  }\n\n  // Your custom code after sign-up.\n  // ...\n\n  return {\n    success: true,\n    message: 'User created successfully',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity Schema\nDESCRIPTION: Definition of the User entity with required fields for username/password authentication in Wasp.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/auth/username-and-pass.md#2025-04-22_snippet_1\n\nLANGUAGE: wasp\nCODE:\n```\nentity User {=psl\n    id                        Int           @id @default(autoincrement())\n    username                  String        @unique\n    password                  String\n    // Add your own fields below\n    // ...\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Server Handler (JavaScript, TypeScript)\nDESCRIPTION: These code blocks define the WebSocket event handler function ('webSocketFn') for the server using Socket.IO. In JavaScript, the handler responds to client connections and listens for 'chatMessage' events, emitting messages with unique IDs. The TypeScript version further introduces event and payload type interfaces for end-to-end type safety and imports Wasp's typing utilities. Dependencies include 'uuid', 'wasp/auth', and for TypeScript, 'wasp/server/webSocket'. Inputs are the Socket.IO server and context, outputs are broadcast events to all clients. Real Wasp entities can be accessed via 'context.entities'.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/web-sockets.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { v4 as uuidv4 } from 'uuid'\nimport { getFirstProviderUserId } from 'wasp/auth'\n\nexport const webSocketFn = (io, context) => {\n  io.on('connection', (socket) => {\n    const username = getFirstProviderUserId(socket.data.user) ?? 'Unknown'\n    console.log('a user connected: ', username)\n\n    socket.on('chatMessage', async (msg) => {\n      console.log('message: ', msg)\n      io.emit('chatMessage', { id: uuidv4(), username, text: msg })\n      // You can also use your entities here:\n      // await context.entities.SomeEntity.create({ someField: msg })\n    })\n  })\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { v4 as uuidv4 } from 'uuid'\nimport { getFirstProviderUserId } from 'wasp/auth'\nimport { type WebSocketDefinition, type WaspSocketData } from 'wasp/server/webSocket'\n\nexport const webSocketFn: WebSocketFn = (io, context) => {\n  io.on('connection', (socket) => {\n    const username = getFirstProviderUserId(socket.data.user) ?? 'Unknown'\n    console.log('a user connected: ', username)\n\n    socket.on('chatMessage', async (msg) => {\n      console.log('message: ', msg)\n      io.emit('chatMessage', { id: uuidv4(), username, text: msg })\n      // You can also use your entities here:\n      // await context.entities.SomeEntity.create({ someField: msg })\n    })\n  })\n}\n\n// Typing our WebSocket function with the events and payloads\n// allows us to get type safety on the client as well\n\ntype WebSocketFn = WebSocketDefinition<\n  ClientToServerEvents,\n  ServerToClientEvents,\n  InterServerEvents,\n  SocketData\n>\n\ninterface ServerToClientEvents {\n  chatMessage: (msg: { id: string, username: string, text: string }) => void;\n}\n\ninterface ClientToServerEvents {\n  chatMessage: (msg: string) => void;\n}\n\ninterface InterServerEvents {}\n\n// Data that is attached to the socket.\n// NOTE: Wasp automatically injects the JWT into the connection,\n// and if present/valid, the server adds a user to the socket.\ninterface SocketData extends WaspSocketData {}\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Email Provider in Wasp\nDESCRIPTION: Demonstrates how to configure the SMTP email provider in the main.wasp file, which allows sending emails through an SMTP server.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/advanced/email/email.md#2025-04-22_snippet_4\n\nLANGUAGE: wasp\nCODE:\n```\napp Example {\n  ...\n  emailSender: {\n    provider: SMTP,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Values for Later Use in Server Setup (TypeScript)\nDESCRIPTION: This example shows how to store values for later use in the server setup function and access them in operations using TypeScript. It includes type definitions for the setup function.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.11.8/project/server-config.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ServerSetupFn } from '@wasp/types'\n\nlet someResource = undefined\n\nexport const mySetupFunction: ServerSetupFn = async () => {\n  // Let's pretend functions setUpSomeResource and startSomeCronJob\n  // are implemented below or imported from another file.\n  someResource = await setUpSomeResource()\n  startSomeCronJob()\n}\n\nexport const getSomeResource = () => someResource\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SomeQuery } from '@wasp/queries/types'\nimport { getSomeResource } from './myServerSetupCode.js'\n\n...\n\nexport const someQuery: SomeQuery<...> = async (args, context) => {\n  const someResource = getSomeResource()\n  return queryDataFromSomeResource(args, someResource)\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Hashed Passwords with SecurePassword in TypeScript\nDESCRIPTION: This TypeScript function `migratePassword` handles the migration of a user's password for username-based authentication. It finds the user's auth identity, verifies the provided password against the old hash using `SecurePassword`, and if valid, updates the stored hash using the new algorithm via `updateAuthIdentityProviderData`. It relies on Wasp server utilities like `createProviderId`, `findAuthIdentity`, `deserializeAndSanitizeProviderData`, and `updateAuthIdentityProviderData`.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/migrate-from-0-11-to-0-12.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"src/auth.ts\"\nimport SecurePassword from \"secure-password\";\nimport { HttpError } from \"wasp/server\";\nimport {\n  createProviderId,\n  deserializeAndSanitizeProviderData,\n  findAuthIdentity,\n  updateAuthIdentityProviderData,\n} from \"wasp/server/auth\";\nimport { MigratePassword } from \"wasp/server/operations\";\n\ntype MigratePasswordInput = {\n  username: string;\n  password: string;\n};\ntype MigratePasswordOutput = {\n  message: string;\n};\n\nexport const migratePassword: MigratePassword<\n  MigratePasswordInput,\n  MigratePasswordOutput\n> = async ({ password, username }, _context) => {\n  const providerId = createProviderId(\"username\", username);\n  const authIdentity = await findAuthIdentity(providerId);\n\n  if (!authIdentity) {\n    throw new HttpError(400, \"Something went wrong\");\n  }\n\n  const providerData = deserializeAndSanitizeProviderData<\"username\">(\n    authIdentity.providerData\n  );\n\n  try {\n    const SP = new SecurePassword();\n\n    // This will verify the password using the old algorithm\n    const result = await SP.verify(\n      Buffer.from(password),\n      Buffer.from(providerData.hashedPassword, \"base64\")\n    );\n\n    if (result !== SecurePassword.VALID) {\n      throw new HttpError(400, \"Something went wrong\");\n    }\n\n    // This will hash the password using the new algorithm and update the\n    // provider data in the database.\n    await updateAuthIdentityProviderData<\"username\">(providerId, providerData, {\n      hashedPassword: password,\n    });\n  } catch (e) {\n    throw new HttpError(400, \"Something went wrong\");\n  }\n\n  return {\n    message: \"Password migrated successfully.\",\n  };\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing ForgotPasswordPage Component in TypeScript\nDESCRIPTION: This snippet shows how to implement a forgot password page component in TypeScript using Wasp's ForgotPasswordForm component.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/auth/ui.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ForgotPasswordForm } from 'wasp/client/auth'\n\n// Use it like this\nexport function ForgotPasswordPage() {\n  return <ForgotPasswordForm />\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Component in JSX\nDESCRIPTION: This code snippet imports the 'Required' component from a local file, likely used for marking required fields in the user interface.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/_user-fields.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Required } from '@site/src/components/Tag';\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Setup\nDESCRIPTION: Required environment variables for Google OAuth configuration.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.14.0/auth/social-auth/google.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGOOGLE_CLIENT_ID=your-google-client-id\nGOOGLE_CLIENT_SECRET=your-google-client-secret\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Package in Wasp Project\nDESCRIPTION: Command to add a new NPM package (date-fns) as a dependency to a Wasp project. This will automatically update the package.json file with the new dependency.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/project/dependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install date-fns\n```\n\n----------------------------------------\n\nTITLE: Configuring User Entity and Google Auth in Wasp\nDESCRIPTION: This snippet shows how to set up the user entity and configure Google authentication in a Wasp application. It includes the necessary configurations in the main.wasp file and the corresponding Prisma schema.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/social-auth/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\napp myApp {\n  wasp: {\n    version: \"^0.15.0\"\n  },\n  title: \"My App\",\n  auth: {\n    userEntity: User,\n    methods: {\n      google: {}\n    },\n    onAuthFailedRedirectTo: \"/login\"\n  },\n}\n```\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id Int @id @default(autoincrement())\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entities for Automatic CRUD - Wasp Language\nDESCRIPTION: Defines a `Task` entity in the Wasp language, specifying fields and their data types using the PSL (Prisma Schema Language) block. This forms the foundation for CRUD operations and requires Wasp CLI and a database (configured with Prisma) as dependencies. The expected inputs are entity field definitions, and outputs are migrated database schema and entity availability throughout the app.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.13.0/data-model/crud.md#2025-04-22_snippet_0\n\nLANGUAGE: wasp\nCODE:\n```\nentity Task {=psl\\n  id          Int @id @default(autoincrement())\\n  description String\\n  isDone      Boolean\\npsl=}\n```\n\n----------------------------------------\n\nTITLE: Using routes Object for Different Route Types in TypeScript\nDESCRIPTION: This example shows how to use the routes object to build links for different types of routes, including a root route without parameters and a detail route with parameters.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.12.0/advanced/links.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { routes } from 'wasp/client/router'\n\nconst linkToRoot = routes.RootRoute.build()\nconst linkToTask = routes.DetailRoute.build({ params: { id: 1 } })\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions in TypeScript with Type Safety\nDESCRIPTION: Shows how to implement an Action in TypeScript with proper type annotations for input and output parameters.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.16.0/data-model/operations/actions.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type CreateFoo } from 'wasp/server/operations'\n\ntype Foo = // ...\n\nexport const createFoo: CreateFoo<{ bar: string }, Foo> = (args, context) => {\n  // implementation\n};\n```\n\n----------------------------------------\n\nTITLE: SignupForm Customization with Extra Fields (TypeScript)\nDESCRIPTION: This TypeScript React component extends SignupForm using both object and render function for the additionalFields prop. Includes an Address field (object with validation) and a Phone Number field (render function with react-hook-form integration). Requires wasp/client/auth, react, react-hook-form, and TS types. Inputs: extended signup data; outputs: Signup form with custom UI/validation.\nSOURCE: https://github.com/wasp-lang/wasp/blob/main/web/versioned_docs/version-0.15.0/auth/overview.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  SignupForm,\n  FormError,\n  FormInput,\n  FormItemGroup,\n  FormLabel,\n} from 'wasp/client/auth'\n\nexport const SignupPage = () => {\n  return (\n    <SignupForm\n      additionalFields={[\n        {\n          name: 'address',\n          label: 'Address',\n          type: 'input',\n          validations: {\n            required: 'Address is required',\n          },\n        },\n        (form, state) => {\n          return (\n            <FormItemGroup>\n              <FormLabel>Phone Number</FormLabel>\n              <FormInput\n                {...form.register('phoneNumber', {\n                  required: 'Phone number is required',\n                })}\n                disabled={state.isLoading}\n              />\n              {form.formState.errors.phoneNumber && (\n                <FormError>\n                  {form.formState.errors.phoneNumber.message}\n                </FormError>\n              )}\n            </FormItemGroup>\n          )\n        },\n      ]}\n    />\n  )\n}\n```"
  }
]