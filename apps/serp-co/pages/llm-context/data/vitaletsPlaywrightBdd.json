[
  {
    "owner": "vitalets",
    "repo": "playwright-bdd",
    "content": "TITLE: Creating a Gherkin Feature File for Playwright Site Testing\nDESCRIPTION: This snippet demonstrates how to write a Gherkin feature file for testing the Playwright website. It includes a scenario with Given, When, and Then steps, as well as tags for categorization.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/index.md#2025-04-22_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\n@desktop\nFeature: Playwright site\n\n    @jira:123\n    Scenario: Check title\n        Given I open url \"https://playwright.dev\"\n        When I click link \"Get started\"\n        Then I see in title \"Playwright\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright-BDD in JavaScript\nDESCRIPTION: This snippet shows how to set up the configuration file for Playwright-BDD. It defines the test directory, feature file, and step file locations.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/getting-started/write-first-test.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nimport { defineBddConfig } from 'playwright-bdd';\n\nconst testDir = defineBddConfig({\n  features: 'sample.feature',\n  steps: 'steps.js',\n});\n\nexport default defineConfig({\n  testDir,\n  reporter: 'html',\n});\n```\n\n----------------------------------------\n\nTITLE: Writing a Gherkin Feature File\nDESCRIPTION: This snippet demonstrates how to write a Gherkin feature file for BDD testing. It defines a feature and a scenario with Given, When, and Then steps.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/getting-started/write-first-test.md#2025-04-22_snippet_1\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Playwright site\n\n    Scenario: Check get started link\n        Given I am on home page\n        When I click link \"Get started\"\n        Then I see in title \"Installation\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Test Instance and BDD Functions in TypeScript\nDESCRIPTION: This code snippet shows how to create a custom test instance with fixtures and export it along with BDD step definition functions. It extends the base test with a custom fixture and uses createBdd to generate Given, When, Then functions.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/getting-started/add-fixtures.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// fixtures.ts\nimport { test as base, createBdd } from 'playwright-bdd';\n\nexport const test = base.extend({\n  myFixture: async ({ page }, use) => {\n    // ... define your fixture here\n  }\n});\n\nexport const { Given, When, Then } = createBdd(test);\n```\n\n----------------------------------------\n\nTITLE: Running Playwright BDD Tests in Debug Mode\nDESCRIPTION: This command generates BDD tests and runs them with the --debug flag, which opens the browser and allows step-by-step evaluation of the test execution.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/debugging.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx bddgen && npx playwright test --debug\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Definition using Decorators in TypeScript\nDESCRIPTION: Illustrates how to use decorators to mark POM (Page Object Model) class methods as steps. This approach is recommended for all projects.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass TodoPage {\n  @Given('I open page {string}')\n  async open(url: string) {\n    await this.page.goto(url);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Playwright-style Step Definition in TypeScript\nDESCRIPTION: Demonstrates how to write a step definition using Playwright-style syntax. This approach is recommended for new BDD projects or existing Playwright projects.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGiven('I open page {string}', async ({ page }, url: string) => {\n  await page.goto(url);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing BDD Steps in TypeScript\nDESCRIPTION: This code snippet shows how to implement the steps defined in the feature file using TypeScript. It uses the createBdd function to define Given, When, and Then steps.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/getting-started/write-first-test.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expect } from '@playwright/test';\nimport { createBdd } from 'playwright-bdd';\n\nconst { Given, When, Then } = createBdd();\n\nGiven('I am on home page', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n});\n\nWhen('I click link {string}', async ({ page }, name) => {\n  await page.getByRole('link', { name }).click();\n});\n\nThen('I see in title {string}', async ({ page }, keyword) => {\n  await expect(page).toHaveTitle(new RegExp(keyword));\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright-BDD Tests Command\nDESCRIPTION: Basic command to generate and run BDD tests with Playwright\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx bddgen && npx playwright test\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Object Model with Decorators\nDESCRIPTION: Demonstrates how to create a TodoPage class using decorators to define test steps and fixtures. Shows implementation of Given, When, and Then steps within a Page Object Model.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/decorators.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// TodoPage.ts\nimport { Page, expect } from '@playwright/test';\nimport { Fixture, Given, When, Then } from 'playwright-bdd/decorators';\n\nexport @Fixture('todoPage') class TodoPage {\n  constructor(public page: Page) { }\n\n  @Given('I am on todo page')\n  async open() {\n    await this.page.goto('https://demo.playwright.dev/todomvc/');\n  }\n\n  @When('I add todo {string}')\n  async addToDo(text: string) {\n    await this.page.locator('input.new-todo').fill(text);\n    await this.page.locator('input.new-todo').press('Enter');\n  }\n\n  @Then('visible todos count is {int}')\n  async checkVisibleTodosCount(count: number) {\n    await expect(this.page.getByTestId('todo-item')).toHaveCount(count);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright-BDD Project in TypeScript\nDESCRIPTION: Example of using defineBddProject to configure a Playwright-BDD project. It demonstrates how to set up a project with custom features and steps directories.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nimport { defineBddProject } from 'playwright-bdd';\n\nexport default defineConfig({\n  projects: [\n    {\n      ...defineBddProject({\n        name: 'foo',\n        features: '*.feature',\n        steps: 'steps/*.ts',\n      }), // -> { name: 'foo', testDir: '.features-gen/foo' }\n    },\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright-BDD with Yarn - New Project\nDESCRIPTION: Commands to install Playwright and Playwright-BDD dependencies using Yarn, followed by installing Playwright browsers.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/getting-started/installation.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @playwright/test playwright-bdd\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn playwright install\n```\n\n----------------------------------------\n\nTITLE: Defining Step Definitions for Todo App in TypeScript\nDESCRIPTION: This code snippet shows how to create step definitions for a Todo app using Playwright-BDD. It includes steps for navigating to the page, adding and removing todos, and checking the todo count.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/chatgpt.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBdd } from 'playwright-bdd';\n\nconst { Given, When, Then } = createBdd(test);\n\nGiven('I am on todo page', async ({ page }) => { \n  await page.goto('https://demo.playwright.dev/todomvc/');\n});\n\nWhen('I add todo {string}', async ({ page }, text: string) => {\n  await page.locator('input.new-todo').fill(text);\n  await page.locator('input.new-todo').press('Enter');\n});\n\nWhen('I remove todo {string}', async ({ page }, text: string) => {\n  const todo = page.getByTestId('todo-item').filter({ hasText: text });\n  await todo.hover();\n  await todo.getByRole('button', { name: 'Delete' }).click();\n});\n\nThen('visible todos count is {int}', async ({ page }, count: number) => { \n  await expect(page.getByTestId('todo-item')).toHaveCount(count);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Scoped Step with Tags in JavaScript\nDESCRIPTION: Shows how to scope a step definition to a particular feature using the tags option. This step will only be used for features or scenarios tagged with @foo.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/scoped.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nGiven('a step', { tags: '@foo' }, async () => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Playwright BDD Configuration in TypeScript\nDESCRIPTION: Example configuration setup for Playwright BDD in playwright.config.ts. Shows how to use defineBddConfig() to specify feature files and step definitions locations, and integrate with Playwright's configuration.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/configuration/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nimport { defineBddConfig } from 'playwright-bdd';\n\nconst testDir = defineBddConfig({\n  features: 'feature/*.feature',\n  steps: 'steps/**/*.ts',\n  // ...other playwright-bdd options\n});\n\nexport default defineConfig({\n  testDir,\n});\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests Conditionally with Playwright-BDD in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `$test` fixture in Playwright-BDD to conditionally skip tests based on the browser name. It requires Playwright and the Playwright-BDD library as dependencies. The function checks if the browser is 'firefox' and skips the test if so.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/bdd-fixtures.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nGiven('I do something', async ({ browserName, $test }) => { \n  if (browserName === 'firefox') $test.skip();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for Context Object in Playwright BDD\nDESCRIPTION: TypeScript example showing how to define types for the context object used in BDD steps. It defines a strict type for 'ctx' with a specific property type, enhancing type safety for cross-step data sharing.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/passing-data-between-steps.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Ctx = {\n  newTapPromise: Promise<Page> \n};\n\nexport const test = base.extend<{ ctx: Ctx }>({\n  ctx: async ({}, use) => {\n    const ctx = {} as Ctx;\n    await use(ctx);\n  },\n});\n\nexport const { Given, When, Then } = createBdd(test);\n```\n\n----------------------------------------\n\nTITLE: Playwright Configuration with Environment Variables\nDESCRIPTION: Configuration setup in playwright.config.ts showing how to import environment variables using dotenv package.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/env-vars.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// playwright.config.ts\n\nimport { defineConfig, devices } from '@playwright/test';\nimport { defineBddConfig, cucumberReporter } from 'playwright-bdd';\n\nimport 'dotenv/config'; // <-- populate env variables from .env\n\nconst testDir = defineBddConfig({\n  // ...\n});\n\nexport default defineConfig({\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright-BDD with Basic Options\nDESCRIPTION: This snippet demonstrates how to configure Playwright-BDD with basic options for features and steps directories.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/configuration/options.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst testDir = defineBddConfig({\n  features: './features/**/*.feature',\n  steps: './features/steps/**/*.js',\n  featuresRoot: './features',\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Cucumber-style Step Definition in TypeScript\nDESCRIPTION: Shows how to write a step definition using Cucumber-style syntax. This method is recommended for migrating CucumberJS projects to the Playwright runner.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nGiven('I open page {string}', async function (url: string) {\n  await this.page.goto(url);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining World Class for Cucumber-Style Steps in TypeScript\nDESCRIPTION: This snippet defines a World class for Cucumber-style step definitions in Playwright-BDD. It includes a constructor that takes a Page object and a method to open the homepage.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/cucumber-style.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// world.ts\nimport { Page } from '@playwright/test';\n\nexport class World {\n  constructor(public page: Page) {}\n\n  async openHomePage() {\n    await this.page.goto('https://playwright.dev');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Re-using Step Functions with Fixtures in Playwright BDD\nDESCRIPTION: This example demonstrates how to re-use a step function by saving the return value of When() and invoking it in other steps. It shows creating a reusable 'createTodo' step that can be called from another step with required fixtures.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/reusing-step-fn.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBdd } from 'playwright-bdd';\n\nconst { When, Then } = createBdd();\n\nconst createTodo = When('I create todo {string}', async ({ page }, text: string) => {\n  await page.getByLabel('title').fill(text);\n  await page.getByRole('button').click();\n});\n\nWhen('I create 2 todos {string} and {string}', async ({ page }, text1: string, text2: string) => {\n  await createTodo({ page }, text1);\n  await createTodo({ page }, text2);\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown List of Playwright-BDD Features\nDESCRIPTION: This markdown snippet lists the key features and benefits of using Playwright-BDD for test file generation, including IDE integration, debugging capabilities, and UI mode support.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/faq.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n  * Run a single test with [VS Code extension](guides/ide-integration.md#vs-code)\n  * Debug and set breakpoints on specific BDD steps\n  * Use `--ui` mode to watch changes \n  * Do everything you can with regular Playwright tests\n```\n\n----------------------------------------\n\nTITLE: ChatGPT-Generated Gherkin Scenarios for Todo App\nDESCRIPTION: This Gherkin code snippet shows the BDD scenarios generated by ChatGPT for the Todo app. It includes multiple scenarios for adding and removing todo items, demonstrating different user interactions.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/chatgpt.md#2025-04-22_snippet_2\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Adding and Removing Todo Items\n\n  As a user\n  I want to add and remove todo items in a todo list app\n  So that I can manage my tasks effectively\n\n  Background:\n    Given I am on todo page\n\n  Scenario: Add a new todo and remove it\n    When I add todo \"Buy groceries\"\n    And I remove todo \"Buy groceries\"\n    Then visible todos count is 0\n\n  Scenario: Add multiple todos and remove one\n    When I add todo \"Buy groceries\"\n    And I add todo \"Go to the gym\"\n    And I add todo \"Read a book\"\n    And I remove todo \"Go to the gym\"\n    Then visible todos count is 2\n\n  Scenario: Add and remove multiple todos\n    When I add todo \"Buy groceries\"\n    And I add todo \"Go to the gym\"\n    And I add todo \"Read a book\"\n    And I remove todo \"Buy groceries\"\n    And I remove todo \"Go to the gym\"\n    Then visible todos count is 1\n\n  Scenario: Add multiple todos and remove all\n    When I add todo \"Buy groceries\"\n    And I add todo \"Go to the gym\"\n    And I add todo \"Read a book\"\n    And I remove todo \"Buy groceries\"\n    And I remove todo \"Go to the gym\"\n    And I remove todo \"Read a book\"\n    Then visible todos count is 0\n```\n\n----------------------------------------\n\nTITLE: Configuring AI-Assisted Test Fixing in Playwright-BDD\nDESCRIPTION: This snippet demonstrates how to enable AI-assisted test fixing with custom options in Playwright-BDD.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/configuration/options.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst testDir = defineBddConfig({\n  aiFix: {\n    promptAttachment: true,\n  },\n  // ...other options\n});\n```\n\n----------------------------------------\n\nTITLE: Step Definitions Implementation\nDESCRIPTION: JavaScript implementation of the BDD step definitions using Playwright APIs\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/index.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nGiven('I am on Playwright home page', async ({ page }) => {\n  await page.goto('https://playwright.dev');\n});\n\nWhen('I click link {string}', async ({ page }, name) => {\n  await page.getByRole('link', { name }).click();\n});\n\nThen('I see in title {string}', async ({ page }, text) => {\n  await expect(page).toHaveTitle(new RegExp(text));\n});\n```\n\n----------------------------------------\n\nTITLE: Using defineBddProject Helper for Multiple Projects\nDESCRIPTION: This snippet demonstrates the use of the defineBddProject helper function to simplify configuration for multiple BDD projects. It automatically sets outputDir based on the project name.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/configuration/multiple-projects.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nimport { defineBddProject } from 'playwright-bdd';\n\nexport default defineConfig({\n  projects: [\n    {\n      ...defineBddProject({\n        name: 'project-one',\n        features: 'project-one/*.feature',\n        steps: 'project-one/steps/*.ts',\n      }),\n    },\n    {\n      ...defineBddProject({\n        name: 'project-two',\n        features: 'project-two/*.feature',\n        steps: 'project-two/steps/*.ts',\n      }),\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Scoped Step Definitions in Playwright-BDD v8\nDESCRIPTION: Demonstrates how to scope step definitions to specific features or scenarios using tags. This allows the same step to coexist in multiple features, improving maintainability in large projects.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/blog/whats-new-in-v8.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nWhen('I click the PLAY button', { tags: '@game' }, async () => {\n  // ...\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nWhen('start playing', { tags: '@game' }, async () => { ... });\nWhen('start playing', { tags: '@video-player' }, async () => { ... });\n```\n\n----------------------------------------\n\nTITLE: Defining Feature with DataTable in Gherkin\nDESCRIPTION: Example of a Gherkin feature file showing how to structure a login scenario using DataTable to provide test data in a tabular format.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/data-tables.md#2025-04-22_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Some feature\n\n    Scenario: Login\n        When I fill login form with values\n          | label     | value    |\n          | Username  | vitalets |\n          | Password  | 12345    |\n```\n\n----------------------------------------\n\nTITLE: NPM Scripts Configuration for Playwright-BDD Watch Mode\nDESCRIPTION: Package.json script configuration that sets up concurrent watching of BDD files and Playwright UI mode using npm-run-all. Includes separate commands for BDD generation and Playwright test execution.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/ui-mode.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"watch:bdd\": \"nodemon -w ./features -w ./steps -e feature,js,ts --exec \\\"npx bddgen\\\"\",\n  \"watch:pw\": \"playwright test --ui\",\n  \"watch\": \"run-p watch:*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Configuration with featuresRoot in Playwright-BDD v8\nDESCRIPTION: This snippet shows the simplified configuration introduced in Playwright-BDD v8, using featuresRoot as a common base directory for features and steps.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/configuration/options.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst testDir = defineBddConfig({\n  featuresRoot: './features',\n});\n```\n\n----------------------------------------\n\nTITLE: Using Context Object for Data Passing Between Playwright BDD Steps\nDESCRIPTION: JavaScript implementation of BDD steps that demonstrates how to pass data between steps using the 'ctx' object. In the first step, a promise for a new tab is stored, and in the second step, that promise is awaited and checked.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/passing-data-between-steps.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Given, When, Then } from './fixtures';\n\nWhen('I click the link', async ({ page, ctx }) => {\n  ctx.newTapPromise = context.waitForEvent('page');\n  await page.getByRole('link').click();\n});\n\nThen('new tab is opened', async ({ ctx }) => {\n  const newTab = await ctx.newTapPromise;\n  await expect(newTab).toHaveTitle(/.*checkout/);\n});\n```\n\n----------------------------------------\n\nTITLE: Targeting BeforeScenario Hook with Tags\nDESCRIPTION: Example of targeting a BeforeScenario hook to specific scenarios using tags in Playwright-BDD.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/hooks.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nBeforeScenario({ tags: '@mobile and not @slow' }, async function () {\n  // runs for scenarios with @mobile and not @slow\n});\n\n// Shortcut for passing only tags\nBeforeScenario('@mobile and not @slow', async function () {\n  // runs for scenarios with @mobile and not @slow\n});\n```\n\n----------------------------------------\n\nTITLE: Generated Playwright-BDD Test in JavaScript\nDESCRIPTION: This snippet shows an example of a generated test file from the BDD feature. It uses the test function from playwright-bdd to describe the scenario and execute the steps.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/getting-started/write-first-test.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Generated from: sample.feature\nimport { test } from 'playwright-bdd';\n\ntest.describe('Playwright site', () => {\n\n  test('Check get started link', async ({ Given, When, Then }) => {\n    await Given('I am on home page');\n    await When('I click link \"Get started\"');\n    await Then('I see in title \"Installation\"');\n  });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing DataTable Step Definition in TypeScript\nDESCRIPTION: TypeScript implementation of a step definition that processes DataTable input. Shows how to iterate through table rows and interact with form elements using Playwright's page object.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/data-tables.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBdd, DataTable } from 'playwright-bdd';\n\nconst { Given, When, Then } = createBdd();\n\nWhen('I fill login form with values', async ({ page }, data: DataTable) => {\n  for (const row of data.hashes()) {\n    await page.getByLabel(row.label).fill(row.value);\n  }\n  /*\n  data.hashes() returns:\n  [\n    { label: 'Username', value: 'vitalets' },\n    { label: 'Password', value: '12345' }\n  ]\n  */\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Custom Worker Fixture in BeforeWorker Hook\nDESCRIPTION: Example of defining a custom worker fixture and using it in a BeforeWorker hook in Playwright-BDD.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/hooks.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test as base, createBdd } from 'playwright-bdd';\n\nexport const test = base.extend<{}, { myWorkerFixture: MyWorkerFixture }>({\n  myWorkerFixture: [async ({}, use) => {\n    // ... setup myWorkerFixture\n  }, { scope: 'worker' }]\n});\n\nexport const { BeforeWorker } = createBdd(test);\n\n// In another file:\nimport { BeforeWorker } from './fixtures';\n\nBeforeWorker(async ({ myWorkerFixture }) => {\n  // ... use myWorkerFixture in hook\n});\n```\n\n----------------------------------------\n\nTITLE: Adjusting Playwright Configuration for SauceLabs\nDESCRIPTION: TypeScript configuration for Playwright, including BDD setup, reporter options, and project settings for SauceLabs integration.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/usage-with-saucelabs.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, devices } from '@playwright/test';\nimport { defineBddConfig } from 'playwright-bdd';\n\nconst testDir = defineBddConfig({\n  features: 'features/*.feature',\n  steps: 'features/steps/*.ts',\n});\n\nexport default defineConfig({\n  testDir,\n  reporter: [\n    process.env.SAUCE_VM // put report into __assets__ when running on SauceLabs\n      ? [ 'html', { open: 'never', outputFolder: '__assets__/html-report/', attachmentsBaseURL: './' } ]\n      : [ 'html', { open: 'never' } ],\n  ],\n  use: {\n    screenshot: 'on',\n  },\n  projects: [\n    {\n      name: 'chromium', // use project name 'chromium' as defined in '.sauce/config.yml'\n      use: { ...devices['Desktop Chrome'] },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Fixtures in Step Definitions with TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the custom fixtures in step definitions. It imports the Given, When, Then functions from the fixtures file and uses the custom fixture in a step definition.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/getting-started/add-fixtures.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// steps.ts\n\nimport { Given, When, Then } from './fixtures';\n\nGiven('My step', async ({ myFixture }) => {\n  // step code that uses myFixture\n});\n```\n\n----------------------------------------\n\nTITLE: Using Scenario Name as Template for Example Titles in Gherkin\nDESCRIPTION: This snippet demonstrates how to use column names in the scenario name to create unique titles for each example in a Scenario Outline.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/customize-examples-title.md#2025-04-22_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Calculator\n\n    Scenario Outline: Multiply <value> by two\n      Given value is <value>\n      When multiply by two\n      Then result is <result>\n\n      Examples:\n        | value | result |\n        | 1     | 2      |\n        | 2     | 4      |\n```\n\n----------------------------------------\n\nTITLE: Setting Global Language in Playwright-BDD Configuration (TypeScript)\nDESCRIPTION: Demonstrates how to configure the default language for all feature files using the defineBddConfig function. This example sets Spanish ('es') as the global language.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/i18n.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineBddConfig } from 'playwright-bdd';\n\nconst testDir = defineBddConfig({\n  language: 'es',\n  // other config\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeScenario Hook in Playwright-BDD\nDESCRIPTION: Example of implementing a BeforeScenario hook in Playwright-BDD with custom fixtures.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/hooks.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test as base, createBdd } from 'playwright-bdd';\n\nexport const test = base.extend({ /* ...your fixtures */ });\n\nconst { BeforeScenario } = createBdd(test);\n\nBeforeScenario(async () => {\n  // runs before each scenario\n});\n```\n\n----------------------------------------\n\nTITLE: Using Shared Context in Step Definitions for Playwright-BDD\nDESCRIPTION: TypeScript implementation of step definitions that utilize the shared context. These steps demonstrate how to create a page in one scenario and then use it in subsequent scenarios within the same feature file.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/passing-data-between-scenarios.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Given, When, Then } from \"./fixtures\";\n\nGiven(\"I am logged in as {string}\", async ({ ctx, browser }, user: string) => {\n  ctx.page = await browser.newPage();\n  // ...perform login for user\n});\n\nWhen(\"I open profile page\", async ({ ctx }) => {\n  await ctx.page.getByRole(\"link\", { name: \"Profile\" }).click();\n});\n\nThen(\"I see name {string}\", async ({ ctx }, user: string) => {\n  await expect(ctx.page.getByRole(\"header\")).toContainText(user);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Step Details Using Playwright-BDD in TypeScript\nDESCRIPTION: This code snippet shows how to access and use the current step's title using the `$step` fixture. Useful for conditional logic based on the step's text, the snippet logs the received step title for further actions. Requires Playwright and Playwright-BDD.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/bdd-fixtures.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nGiven('I open url {string}', async ({ $step }, url: string) => { \n  console.log($step.title); // I open url \"https://playwright.dev\"\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Allure Reporter in Playwright Config\nDESCRIPTION: Configuration setup for enabling Allure reporter in Playwright tests with BDD integration. Uses defineConfig from Playwright and defineBddConfig from playwright-bdd to set up the test directory and enable the allure-playwright reporter.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/reporters/allure.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nimport { defineBddConfig } from 'playwright-bdd';\n\nconst testDir = defineBddConfig({ /* BDD config */ });\n\nexport default defineConfig({\n  testDir,\n  reporter: 'allure-playwright', // <- enable allure reporter\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeWorker Hook in Playwright-BDD\nDESCRIPTION: Example of implementing a BeforeWorker hook in Playwright-BDD with custom fixtures.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/hooks.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test as base, createBdd } from 'playwright-bdd';\n\nexport const test = base.extend({ /* ...your fixtures */ });\n\nconst { BeforeWorker } = createBdd(test);\n\nBeforeWorker(async ({ $workerInfo, browser }) => {\n  // runs when each worker starts\n});\n```\n\n----------------------------------------\n\nTITLE: Using BeforeStep Hook in Playwright-BDD - TypeScript\nDESCRIPTION: This snippet demonstrates how to implement the BeforeStep method provided by Playwright-BDD, which executes pre-defined code before each test step. It includes options for tagging steps to modify behavior based on test conditions.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/hooks.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test as base, createBdd } from 'playwright-bdd';\n\nexport const test = base.extend({ /* ...your fixtures */ });\n\nconst { BeforeStep } = createBdd(test);\n\nBeforeStep(async () => {\n  // runs before each step\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBdd } from 'playwright-bdd';\n\nconst { BeforeStep } = createBdd();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nBeforeStep({ tags: '@mobile and not @slow' }, async function () {\n  // runs for scenarios with @mobile and not @slow\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nBeforeStep('@mobile and not @slow', async function () {\n  // runs for scenarios with @mobile and not @slow\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { BeforeStep } = createBdd(test, { tags: '@mobile' });\n\nBeforeStep(async () => {\n  // runs only for scenarios with @mobile \n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst { BeforeStep } = createBdd(test, { tags: '@mobile' });\n\nBeforeStep({ tags: '@slow' }, async function () {\n  // runs for scenarios with @mobile and @slow\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nBeforeStep({ name: 'my hook', timeout: 5000 }, async function () {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Element Visibility with Conditional Logic in TypeScript\nDESCRIPTION: This code snippet expands on the `$step` fixture to conditionally check if an element should or should not be visible based on the step title. It requires Playwright for navigating and managing page elements.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/bdd-fixtures.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nThen('element with text {string} should( not) be displayed', async ({ page, $step }, text: string) => {\n  const negate = /should not/.test($step.title);\n  if (negate) {\n    await expect(page.getByText(text)).toBeHidden();\n  } else {\n    await expect(page.getByText(text)).toBeVisible();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Projects with HTML Reporter in Playwright-BDD\nDESCRIPTION: Example configuration showing how to set up multiple browser projects with HTML reporting in Playwright-BDD. Includes project configuration for Chrome and Firefox browsers.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/reporters/cucumber.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, devices } from '@playwright/test';\nimport { defineBddConfig, cucumberReporter } from 'playwright-bdd';\n\nconst testDir = defineBddConfig({\n  features: 'features/*.feature',\n  steps: 'features/steps/*.ts',\n});\n\nexport default defineConfig({\n  testDir,\n  reporter: [ \n    cucumberReporter('html', { outputFile: 'cucumber-report/index.html' })\n  ],\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Fix with AI in Playwright-BDD Configuration\nDESCRIPTION: This snippet shows how to enable the Fix with AI feature in the Playwright-BDD configuration. It adds the aiFix section to the BDD config object.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/fix-with-ai.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst testDir = defineBddConfig({\n  aiFix: {\n    promptAttachment: true,\n  },\n  // ...other options\n});\n```\n\n----------------------------------------\n\nTITLE: Using AfterStep Hook in Playwright-BDD - TypeScript\nDESCRIPTION: This snippet shows how to implement the AfterStep method from Playwright-BDD, which runs after each test step. It includes an example of capturing screenshots post-execution of each step.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/hooks.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test as base, createBdd } from 'playwright-bdd';\n\nexport const test = base.extend({ /* ...your fixtures */ });\n\nconst { AfterStep } = createBdd(test);\n\nAfterStep(async () => {\n  // runs after each scenario\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const { AfterStep } = createBdd(test);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AfterStep } from './fixtures';\n\nAfterStep(async ({ page, $testInfo, $step }) => {\n  await $testInfo.attach(`screenshot after ${$step.title}`, {\n    contentType: 'image/png',\n    body: await page.screenshot()\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Before and After Hooks in Cucumber\nDESCRIPTION: Example of implementing Before and After hooks in Cucumber for handling authentication.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nBefore({ tags: '@auth' }, async function () {\n  // do sign-in\n});\n\nAfter({ tags: '@auth' }, async function () {\n  // do sign-out\n});\n```\n\n----------------------------------------\n\nTITLE: Using Non-Default Page for ARIA Snapshot in Playwright-BDD Tests\nDESCRIPTION: This snippet illustrates how to manually set the page instance for capturing ARIA snapshots in multi-page scenarios. It uses the $prompt BDD fixture to switch the page for the AI prompt.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/fix-with-ai.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nWhen('I open a new tab', async ({ page, context, $prompt }) => { // <-- add $prompt fixture\n  const [newPage] = await Promise.all([\n    context.waitForEvent('page'),\n    page.getByRole('link').click(),\n  ]);\n  $prompt.setPage(newPage); // <-- call $prompt.setPage() to switch the page\n  await expect(newPage.getByRole('heading')).toContainText('Another page');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Locale for Tests Using Playwright-BDD in TypeScript\nDESCRIPTION: Illustrates how to use a custom fixture to set a specific locale (`fi`) if a `@LocaleFi` tag is present in the test tags. Dependencies include Playwright-BDD, and additional setup may be needed for locale settings.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/bdd-fixtures.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { test as base } from 'playwright-bdd';\n\nexport const test = base.extend({\n  locale: async ({ $tags, locale }, use) => {\n    if ($tags.includes('@LocaleFi')) {\n      locale = 'fi';\n    }\n    await use(locale);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Context Fixture for Cross-Step Data Sharing in Playwright BDD\nDESCRIPTION: JavaScript code that extends Playwright test with a custom 'ctx' fixture that acts as a container for cross-step data. This creates a context that persists between steps in a scenario, similar to Cucumber's 'world' concept.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/passing-data-between-steps.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test as base, createBdd } from 'playwright-bdd';\n\nexport const test = base.extend({\n  ctx: async ({}, use) => {\n    const ctx = {};\n    await use(ctx);\n  },\n});\n\nexport const { Given, When, Then } = createBdd(test);\n```\n\n----------------------------------------\n\nTITLE: Configuring Tagged BeforeAll and AfterAll Hooks in Playwright-BDD v8\nDESCRIPTION: Shows how to use the new 'name' and 'tags' options for BeforeAll and AfterAll hooks. These tagged hooks will only execute if the corresponding feature is executed, running in each worker similar to Playwright worker hooks.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/blog/whats-new-in-v8.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nBeforeAll({ name: 'populate db', tags: '@game' }, async () => {\n  // worker setup for game\n});\n\nAfterAll({ name: 'cleanup db', tags: '@game' }, async () => {\n  // worker teardown for game\n});\n```\n\n----------------------------------------\n\nTITLE: Binding POM Class with Fixture using TypeScript Decorator\nDESCRIPTION: Example showing how to use the @Fixture decorator to bind a Page Object Model class with a fixture name. The example includes type safety by using generic parameter to restrict fixture names to available ones.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/api.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Fixture } from 'playwright-bdd/decorators';\nimport type { test } from './fixtures';\n\nexport\n@Fixture<typeof test>('todoPage')\nclass TodoPage { ... };\n```\n\n----------------------------------------\n\nTITLE: AI Prompt Template for Playwright-BDD Test Fixing\nDESCRIPTION: This markdown code block contains the default AI prompt template used by Playwright-BDD for generating fix suggestions. It includes instructions for the AI and placeholders for test-specific information.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/fix-with-ai.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nYou are an expert in Playwright BDD testing.\nFix the error in the BDD scenario.\n\n- Provide response as a diff highlighted code snippet.\n- First, try to fix the test by adjusting Gherkin steps parameters.\n- If the test is not fixable by Gherkin, try to modify the code snippet.\n- Strictly rely on the ARIA snapshot of the page.\n- Avoid adding any new code.\n- Avoid adding comments to the code.\n- Avoid changing the test logic.\n- Use only role-based locators: getByRole, getByLabel, etc.\n- Add a concise note about applied changes.\n- If the test may be correct and there is a bug in the page, note it.\n\nFailing gherkin scenario: \n\nScenario: {scenarioName}\n{steps}\n\nError details:\n{error}\n\n{snippet}\n\nARIA snapshot of the page:\n\n{ariaSnapshot}\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Sharing Between Scenarios with Playwright Fixtures\nDESCRIPTION: TypeScript implementation that creates test fixtures to enable context sharing. It defines a file-scoped ctx fixture and a worker-scoped ctxMap fixture that maintains context across scenarios within the same feature file.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/passing-data-between-scenarios.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test as base, createBdd } from 'playwright-bdd';\n\n// context shared between scenarios in a file\ntype Ctx = { page: Page };\n\nexport const test = base.extend<{ ctx: Ctx }, { ctxMap: Record<string, Ctx> }>({\n  ctx: async ({ ctxMap }, use, testInfo) => {\n    // get or init a context for the current file\n    ctxMap[testInfo.file] = ctxMap[testInfo.file] || {};\n    // pass context to scenarios as a `ctx` fixture\n    await use(ctxMap[testInfo.file]);\n  },\n  ctxMap: [async ({}, use) => {\n    const ctxMap: Record<string, Ctx> = {};\n    await use(ctxMap);\n    // cleanup all contexts on worker teardown\n    for (const ctx of Object.values(ctxMap)) await ctx.page?.close();\n  }, { scope: 'worker' }],\n});\n\nexport const { Given, When, Then } = createBdd(test);\n```\n\n----------------------------------------\n\nTITLE: Cucumber-Style Data Passing Using 'this' Context in Playwright BDD\nDESCRIPTION: JavaScript implementation of steps using the Cucumber-style approach, where 'this' is used to store and retrieve data between steps. This approach is an alternative to the fixture-based 'ctx' method.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/passing-data-between-steps.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Given, When, Then } from './fixtures';\n\nWhen('I click the link', async function () {\n  this.newTapPromise = this.context.waitForEvent('page');\n  await this.page.getByRole('link').click();\n});\n\nThen('new tab is opened', async function () {\n  const newTab = await this.newTapPromise;\n  await expect(newTab).toHaveTitle(/.*checkout/);\n});\n```\n\n----------------------------------------\n\nTITLE: Using @skip/@fixme Tags in Playwright BDD Tests\nDESCRIPTION: Shows how to use @skip or @fixme tags to exclude specific features or scenarios from test execution. These tags are useful when tests are temporarily broken or under development.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/special-tags.md#2025-04-22_snippet_1\n\nLANGUAGE: gherkin\nCODE:\n```\n@skip\nFeature: Playwright site\n\n    @skip\n    Scenario: Check title\n        Given I open url \"https://playwright.dev\"\n```\n\n----------------------------------------\n\nTITLE: Writing Gherkin Feature Files in Playwright-BDD\nDESCRIPTION: A sample Gherkin feature file that defines a test scenario for checking the Playwright website title. The scenario includes three steps: opening a URL, clicking a link, and verifying text in the page title.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/snippets.md#2025-04-22_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Playwright site\n\n    Scenario: Check title\n        Given I open url \"https://playwright.dev\"\n        When I click link \"Get started\"\n        Then I see in title \"Playwright\"\n```\n\n----------------------------------------\n\nTITLE: Using Feature-Level @timeout Tag in Playwright BDD Tests\nDESCRIPTION: Shows how to set timeouts at the feature level, which applies to all scenarios within the feature. Each scenario gets the specified timeout value.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/special-tags.md#2025-04-22_snippet_5\n\nLANGUAGE: gherkin\nCODE:\n```\n@timeout:5000\nFeature: Playwright site\n    \n    Scenario: Check title\n        Given I open url \"https://playwright.dev\"\n\n    Scenario: Check navigation\n        Given I open url \"https://playwright.dev\"\n```\n\n----------------------------------------\n\nTITLE: Re-using Cucumber-style Step Functions with World Context\nDESCRIPTION: This example shows how to re-use step functions in Cucumber-style steps by invoking the step function via .call() to pass the actual World context. This preserves the 'this' context when calling the reusable step.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/reusing-step-fn.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst createTodo = When('I create todo {string}', async function (text: string) {\n  await this.page.getByLabel('title').fill(text);\n  await this.page.getByRole('button').click();\n});\n\nWhen('I create 2 todos {string} and {string}', async function (text1: string, text2: string) {\n  await createTodo.call(this, text1);\n  await createTodo.call(this, text2);\n});\n```\n\n----------------------------------------\n\nTITLE: Using @timeout Tag in Playwright BDD Tests\nDESCRIPTION: Demonstrates setting custom timeouts for scenarios using the @timeout:N tag. When applied to a feature, it sets the timeout for each scenario within that feature.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/special-tags.md#2025-04-22_snippet_4\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Playwright site\n    \n    @timeout:5000\n    Scenario: Check title\n        Given I open url \"https://playwright.dev\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright-BDD with Shared Feature Files\nDESCRIPTION: This snippet demonstrates how to set up Playwright-BDD configuration for multiple projects that use the same set of feature files. It defines a single testDir at the root level of the config.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/configuration/multiple-projects.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, devices } from '@playwright/test';\nimport { defineBddConfig } from 'playwright-bdd';\n\nconst testDir = defineBddConfig({\n  features: 'feature/*.feature',\n  steps: 'steps/**/*.ts',\n});\n\nexport default defineConfig({\n  testDir,\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Package.json Script Update for Environment Variables\nDESCRIPTION: Example showing how to update package.json scripts to properly handle environment variables.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/env-vars.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"scripts\": {\n   \"test\": \"npx bddgen && npx playwright test\",\n},\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Custom Fixture in BeforeScenario Hook\nDESCRIPTION: Example of defining a custom fixture and using it in a BeforeScenario hook in Playwright-BDD.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/hooks.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test as base, createBdd } from 'playwright-bdd';\n\nexport const test = base.extend<{ myFixture: MyFixture }>({\n  myFixture: async ({ page }, use) => {\n    // ... setup myFixture\n  }\n});\n\nexport const { BeforeScenario } = createBdd(test);\n\n// In another file:\nimport { BeforeScenario } from './fixtures';\n\nBeforeScenario(async ({ myFixture }) => {\n  // ... use myFixture in the hook\n});\n```\n\n----------------------------------------\n\nTITLE: Using Special Comment Syntax for Example Titles in Gherkin\nDESCRIPTION: This snippet shows how to use a special comment syntax to provide a custom title format for examples in a Scenario Outline.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/customize-examples-title.md#2025-04-22_snippet_2\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Calculator\n\n    Scenario Outline: Multiply by two\n      Given value is <value>\n      When multiply by two\n      Then result is <result>\n\n      # title-format: check <value>\n      Examples:\n        | value | result |\n        | 1     | 2      |\n        | 2     | 4      |\n```\n\n----------------------------------------\n\nTITLE: Using @mode Tag for Parallel Execution in Playwright BDD Tests\nDESCRIPTION: Demonstrates using @mode:parallel tag to configure parallel execution of scenarios within a feature. This allows multiple scenarios to run simultaneously in separate workers.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/special-tags.md#2025-04-22_snippet_8\n\nLANGUAGE: gherkin\nCODE:\n```\n@mode:parallel\nFeature: Playwright site\n    \n    Scenario: Scenario 1\n        Given I open url \"https://playwright.dev\"\n\n    Scenario: Scenario 2\n        Given I open url \"https://playwright.dev\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright-BDD with Different Feature Files\nDESCRIPTION: This snippet shows how to configure Playwright-BDD for projects using different feature files. It defines a separate testDir for each project and sets unique outputDir to avoid conflicts.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/configuration/multiple-projects.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nimport { defineBddConfig } from 'playwright-bdd';\n\nexport default defineConfig({\n  projects: [\n    {\n      name: 'project-one',\n      testDir: defineBddConfig({\n        outputDir: '.features-gen/one',\n        features: 'project-one/*.feature',\n        steps: 'project-one/steps/*.ts',\n      }),\n    },\n    {\n      name: 'project-two',\n      testDir: defineBddConfig({\n        outputDir: '.features-gen/two',\n        features: 'project-two/*.feature',\n        steps: 'project-two/steps/*.ts',\n      }),\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cucumber Reporter in Playwright Config\nDESCRIPTION: Example of using cucumberReporter to set up HTML reporting for Playwright-BDD tests in the Playwright configuration file.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cucumberReporter } from 'playwright-bdd';\n\nexport default defineConfig({\n  reporter: [\n    cucumberReporter('html', { outputFile: `reports/report.html` }),\n  ],\n  // ...other options\n});\n```\n\n----------------------------------------\n\nTITLE: Creating BDD with Default Tags for Video Player in TypeScript\nDESCRIPTION: Shows how to create BDD functions with default tags for all step definitions in a file, scoping them to @video-player.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/scoped.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// video-player.steps.ts\nconst { Given, When, Then } = createBdd(test, { tags: '@video-player' });\n\nWhen('I click the PLAY button', async () => {\n  // actions for video-player.feature\n});\n```\n\n----------------------------------------\n\nTITLE: Setting missingSteps Option in Playwright-BDD v8\nDESCRIPTION: Demonstrates how to use the new missingSteps option to control behavior when step definitions are missing. Options include failing on generation, failing on run, or skipping the scenario.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/blog/whats-new-in-v8.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst testDir = defineBddConfig({\n  missingSteps: 'skip-scenario',\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright HTML Reporter with BDD\nDESCRIPTION: Example configuration for enabling Playwright's HTML reporter in a BDD-oriented test setup. This code shows how to use defineBddConfig from playwright-bdd alongside standard Playwright configuration.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/reporters/playwright.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nimport { defineBddConfig } from 'playwright-bdd';\n\nconst testDir = defineBddConfig({ /* BDD config */ });\n\nexport default defineConfig({\n  testDir,\n  reporter: 'html', // <- define reporter as usual\n});\n```\n\n----------------------------------------\n\nTITLE: Using cross-env for Environment Variables\nDESCRIPTION: Alternative approach using cross-env package to set environment variables for the entire command.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/env-vars.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx cross-env-shell USERNAME=foo \"npx bddgen && npx playwright test\"\n```\n\n----------------------------------------\n\nTITLE: Extending Playwright Test with World Fixture in TypeScript\nDESCRIPTION: This code extends the Playwright test with a World fixture and creates Given/When/Then functions for step definitions. It uses the previously defined World class.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/cucumber-style.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// fixtures.ts\nimport { test as base } from 'playwright-bdd';\nimport { World } from './world';\n\nexport const test = base.extend<{ world: World }>({\n  world: async ({ page }, use) => {\n    const world = new World(page);\n    await use(world);\n  },\n});\n\nexport const { Given, When, Then, Before, After } = createBdd(test, { \n  worldFixture: 'world' \n});\n```\n\n----------------------------------------\n\nTITLE: Using Feature-Level @retries Tag in Playwright BDD Tests\nDESCRIPTION: Demonstrates setting retry attempts for all scenarios in a feature using the @retries:N tag. This helps handle flaky tests at the feature level.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/special-tags.md#2025-04-22_snippet_6\n\nLANGUAGE: gherkin\nCODE:\n```\n@retries:2\nFeature: Playwright site\n    \n    Scenario: Check title\n        Given I open url \"https://playwright.dev\"\n```\n\n----------------------------------------\n\nTITLE: Customizing AI Prompt Template in Playwright-BDD Configuration\nDESCRIPTION: This code demonstrates how to customize the AI prompt template in the Playwright-BDD configuration. It allows users to define their own prompt template for better results specific to their project.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/fix-with-ai.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst testDir = defineBddConfig({\n  aiFix: {\n    promptAttachment: true,\n    promptTemplate: 'my custom prompt'\n  },\n  // ...other options\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright for Sharded Test Execution\nDESCRIPTION: This TypeScript snippet demonstrates how to configure Playwright-BDD in `playwright.config.ts` for running and merging reports from test shards. Dependencies include `playwright/test`, `playwright-bdd`, and their supporting functions like `defineConfig`, `defineBddConfig`, and `cucumberReporter`. Key parameters include `testDir`, indicating where feature and step files are located, and `reporter` for distinguishing report types based on run context. No other limitations are noted.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/reporters/cucumber.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nimport { defineBddConfig, cucumberReporter } from 'playwright-bdd';\n\nconst testDir = defineBddConfig({\n  features: 'features/*.feature',\n  steps: 'features/*.ts',\n});\n\n// Distinguish shard runs from regular local runs and merge-reports run\nconst isShardRun = process.argv.some((a) => a.startsWith('--shard'));\n\nexport default defineConfig({\n  testDir,\n  reporter: isShardRun\n    ? 'blob' // on shard output Blob report\n    : [ cucumberReporter('html', { outputFile: 'report.html' }) ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Fixtures in Cucumber-Style World\nDESCRIPTION: This code shows how to implement custom fixtures in a Cucumber-style World object. It extends the test with a custom fixture and includes it in the World object.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/cucumber-style.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// fixtures.ts\nimport { test as base } from 'playwright-bdd';\n\ntype World = {\n  page: Page;\n  myFixture: MyFixture; // <- custom fixture property\n};\n\nexport const test = base.extend<{ world: World }>({\n  myFixture: async ({}, use) => {\n    // setup myFixture...\n  },\n  world: async ({ page, myFixture }, use) => {\n    const world: World = { page, myFixture };\n    await use(world);\n  },\n});\n\nexport const { Given, When, Then, Before, After } = createBdd(test, { \n  worldFixture: 'world' \n});\n```\n\n----------------------------------------\n\nTITLE: Using Scenario-Level @retries Tag in Playwright BDD Tests\nDESCRIPTION: Shows how to set retry attempts for individual scenarios using the @retries:N tag. This allows fine-grained control over retry behavior.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/special-tags.md#2025-04-22_snippet_7\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Playwright site\n    \n    @retries:2\n    Scenario: Check title\n        Given I open url \"https://playwright.dev\"\n```\n\n----------------------------------------\n\nTITLE: Setting Language for Individual Feature File (Gherkin)\nDESCRIPTION: Shows how to specify the language for a specific feature file using the language directive. The example demonstrates writing a feature file in Spanish with basic test scenarios.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/i18n.md#2025-04-22_snippet_1\n\nLANGUAGE: gherkin\nCODE:\n```\n# language: es\nCaracterística: Sitio de Playwright\n\n    Escenario: Verificar título\n        Dado que abro la url \"https://playwright.dev\"\n        Cuando hago clic en el enlace \"Get started\"\n        Entonces veo en el título \"Playwright\"\n```\n\n----------------------------------------\n\nTITLE: Switching to Mobile Viewport Based on Test Tags in TypeScript\nDESCRIPTION: This snippet details how to modify the viewport dimensions if a test includes the `@mobile` tag, switching to a mobile-sized viewport. It's implemented with Playwright-BDD, requiring knowledge of viewport configuration.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/bdd-fixtures.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { test as base } from 'playwright-bdd';\n\nexport const test = base.extend({\n  viewport: async ({ $tags, viewport }, use) => {\n    if ($tags.includes('@mobile')) {\n      viewport = { width: 375, height: 667 };\n    }\n    await use(viewport);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Reporter Configuration in Playwright-BDD\nDESCRIPTION: Configuration for using a custom reporter implementation in Playwright-BDD.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/reporters/cucumber.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nimport { defineBddConfig, cucumberReporter } from 'playwright-bdd';\n\nconst testDir = defineBddConfig({\n  features: 'features/*.feature',\n  steps: 'steps/*.ts',\n});\n\nexport default defineConfig({\n  testDir,\n  reporter: [\n    cucumberReporter('./my-reporter.ts', { someKey: 'someValue' }), \n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code settings for Cucumber (Gherkin) Full Support extension\nDESCRIPTION: This JSON configuration enables autocompletion of steps and go-to-definition functionality in feature files when using the Cucumber (Gherkin) Full Support extension in VS Code.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/ide-integration.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cucumberautocomplete.steps\": [\"features/steps/*.{ts,js}\"],\n  \"cucumberautocomplete.strictGherkinCompletion\": false,\n  \"cucumberautocomplete.strictGherkinValidation\": false,\n  \"cucumberautocomplete.smartSnippets\": true,\n  \"cucumberautocomplete.onTypeFormat\": true,\n  \"editor.quickSuggestions\": {\n    \"comments\": false,\n    \"strings\": true,\n    \"other\": true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Tagged Video Player Feature in Gherkin\nDESCRIPTION: A Gherkin feature file for a video player that is tagged with @video-player to match the scope of the corresponding step definition.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/scoped.md#2025-04-22_snippet_8\n\nLANGUAGE: gherkin\nCODE:\n```\n@video-player\nFeature: Video player\n\n  Scenario: Start playing\n    ... \n    When I click the PLAY button\n```\n\n----------------------------------------\n\nTITLE: Defining Step Definition with Given Keyword in JavaScript\nDESCRIPTION: A JavaScript example of a step definition using the Given keyword. By default, this definition matches steps with any keyword (Given, When, or Then).\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/keywords-matching.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nGiven('a step', () => { ... });\n```\n\n----------------------------------------\n\nTITLE: Targeting BeforeWorker Hook with Tags\nDESCRIPTION: Example of targeting a BeforeWorker hook to specific features using tags in Playwright-BDD.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/hooks.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nBeforeWorker({ tags: '@auth' }, async () => { ... });\n```\n\n----------------------------------------\n\nTITLE: JUnit Reporter Configuration in Playwright-BDD\nDESCRIPTION: Configuration for JUnit XML reporting format with suite name specification.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/reporters/cucumber.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nimport { defineBddConfig, cucumberReporter } from 'playwright-bdd';\n\nconst testDir = defineBddConfig({\n  features: ['features/*.feature'],\n  steps: ['steps/*.ts'],\n});\n\nexport default defineConfig({\n  testDir,\n  reporter: [\n    cucumberReporter('junit', { \n      outputFile: 'cucumber-report/report.xml',\n      suiteName: 'my suite'\n    }), \n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Logging Test Tags with Playwright-BDD in TypeScript\nDESCRIPTION: This snippet involves using the `$tags` fixture to log test tags during execution. This can be utilized to alter test behavior based on specified tags. Requires Playwright-BDD and no additional dependencies.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/bdd-fixtures.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nGiven('I do something', async ({ $tags }) => {\n  console.log($tags); // outputs [\"@slow\", \"@jira:123\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Feature Definition for Video Player in Gherkin\nDESCRIPTION: A sample Gherkin feature file for a video player that includes a step for clicking the PLAY button, similar to the game feature.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/scoped.md#2025-04-22_snippet_2\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Video player\n\n  Scenario: Start playing\n    ... \n    When I click the PLAY button\n```\n\n----------------------------------------\n\nTITLE: Defining Feature and Scenario in Gherkin for BDD Testing\nDESCRIPTION: A Gherkin feature file example that defines a scenario for checking a link that opens a new tab. The scenario includes a 'When' step for clicking a link and a 'Then' step for verifying a new tab opens.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/passing-data-between-steps.md#2025-04-22_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: home page\n\n  Scenario: check link\n    When I click the link\n    Then new tab is opened\n```\n\n----------------------------------------\n\nTITLE: Create Test Fixtures Configuration\nDESCRIPTION: Setup of test fixtures by merging Playwright component test and BDD test configurations\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/component-tests.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mergeTests } from '@playwright/test';\nimport { test as ctBase } from '@playwright/experimental-ct-react';\nimport { test as base } from 'playwright-bdd';\n\nexport const test = mergeTests(base, ctBase);\n```\n\n----------------------------------------\n\nTITLE: Message Reporter Configuration in Playwright-BDD\nDESCRIPTION: Setup for Cucumber Message format reporting with NDJSON output.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/reporters/cucumber.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nimport { defineBddConfig, cucumberReporter } from 'playwright-bdd';\n\nconst testDir = defineBddConfig({\n  features: ['features/*.feature'],\n  steps: ['steps/*.ts'],\n});\n\nexport default defineConfig({\n  testDir,\n  reporter: [\n    cucumberReporter('message', { outputFile: 'cucumber-report/report.ndjson' }), \n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables with cross-env-shell\nDESCRIPTION: Command demonstrating how to set environment variables and run Playwright tests using cross-env-shell. Sets GREETING variable and executes bddgen and playwright test commands\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/env-variables.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx cross-env-shell GREETING=hello \"npx bddgen && npx playwright test\"\n```\n\n----------------------------------------\n\nTITLE: Configuring matchKeywords Option in Playwright Config\nDESCRIPTION: Configuration example for enabling strict keyword matching in Playwright-BDD. This sets the matchKeywords option to true, which makes step definitions match only steps with the corresponding keyword.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/keywords-matching.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// playwright.config.js\nimport { defineConfig } from '@playwright/test';\nimport { defineBddConfig } from 'playwright-bdd';\n\nconst testDir = defineBddConfig({\n  matchKeywords: true,\n  // ...\n});\n\nexport default defineConfig({\n  testDir,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Serial Mode Feature with Related Scenarios in Gherkin\nDESCRIPTION: A Gherkin feature file example that demonstrates how to use the @mode:serial tag to share context between scenarios. The first scenario handles authentication while the second uses the same context to perform checks.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/passing-data-between-scenarios.md#2025-04-22_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\n@mode:serial\nFeature: My feature\n\n  Scenario: Authenticate\n    Given I am logged in as \"user1\"\n\n  Scenario: Check profile\n    # still in the same page with the same context!\n    When I open profile page\n    Then I see name \"user1\"\n```\n\n----------------------------------------\n\nTITLE: Define BDD Test Steps\nDESCRIPTION: Implementation of Given/When/Then step definitions for component testing using React and Playwright\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/component-tests.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { expect } from '@playwright/test';\nimport { createBdd } from 'playwright-bdd';\nimport { test } from './fixtures';\n\nconst { Given, When, Then } = createBdd(test);\n\nGiven('Mounted input component', async ({ mount }) => {\n  await mount(<textarea data-testid=\"textField\" />);\n});\n\nWhen('I type {string}', async ({ page }, arg: string) => {\n  await page.getByTestId('textField').fill(arg);\n});\n\nThen('input field has {string}', async ({ page }, arg: string) => {\n  await expect(page.getByTestId('textField')).toHaveValue(arg);\n});\n```\n\n----------------------------------------\n\nTITLE: Auto-generated Step Definition Snippets in Playwright-BDD\nDESCRIPTION: Output showing auto-generated JavaScript step definition snippets for missing steps. Each snippet includes the step pattern, function signature, and comments showing the original step and its location in the feature file.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/snippets.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMissing step definitions: 3\n\nGiven('I open url {string}', async ({}, arg) => {\n  // Step: Given I open url \"https://playwright.dev\"\n  // From: features/homepage.feature:4:5\n});\n\nWhen('I click link {string}', async ({}, arg) => {\n  // Step: When I click link \"Get started\"\n  // From: features/homepage.feature:5:5\n});\n\nThen('I see in title {string}', async ({}, arg) => {\n  // Step: Then I see in title \"Playwright\"\n  // From: features/homepage.feature:6:5\n});\n\nUse the snippets above to create missing steps.\n```\n\n----------------------------------------\n\nTITLE: Sample BDD Feature File\nDESCRIPTION: Example of a Gherkin feature file defining a test scenario for the Playwright homepage\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Playwright Home Page\n\n    Scenario: Check title\n        Given I am on Playwright home page\n        When I click link \"Get started\"\n        Then I see in title \"Installation\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Gherkin Scenario with Authentication Tag\nDESCRIPTION: Example of a Gherkin scenario with an @auth tag for user authorization.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Some feature\n\n    @auth\n    Scenario: Some scenario\n        Given I am an authorized user\n```\n\n----------------------------------------\n\nTITLE: Creating an Auth Fixture in Playwright\nDESCRIPTION: Example of creating an auth fixture in Playwright for handling user authentication.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/hooks.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const test = base.extend({\n  auth: async ({}, use) => {\n    // do sign-in\n    await use({ username: 'some user' });\n    // do sign-out\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Report Viewing Script Configuration in package.json\nDESCRIPTION: Package.json script configuration for viewing Cucumber HTML reports via HTTP server.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/reporters/cucumber.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"report\": \"npx http-server ./cucumber-report -c-1 -a localhost -o index.html\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @slow Tag in Playwright BDD Tests\nDESCRIPTION: Shows how to use the @slow tag to mark tests that need extended timeout (3x normal timeout). This is useful for scenarios that take longer to execute.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/special-tags.md#2025-04-22_snippet_3\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Playwright site\n    \n    @slow\n    Scenario: Check title\n        Given I open url \"https://playwright.dev\"\n```\n\n----------------------------------------\n\nTITLE: Generated Playwright Test File\nDESCRIPTION: JavaScript test file automatically generated from the BDD feature file using bddgen\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/index.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from 'playwright-bdd';\n\ntest.describe('Playwright Home Page', () => {\n\n  test('Check title', async ({ Given, When, Then }) => {\n    await Given('I am on Playwright home page');\n    await When('I click link \"Get started\"');\n    await Then('I see in title \"Installation\"');\n  });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Feature Definition for Game in Gherkin\nDESCRIPTION: A sample Gherkin feature file for a game that includes a step for clicking the PLAY button.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/scoped.md#2025-04-22_snippet_1\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Game\n\n  Scenario: Start playing\n    ... \n    When I click the PLAY button\n```\n\n----------------------------------------\n\nTITLE: Custom Fixture for Browser-Specific Test Execution in TypeScript\nDESCRIPTION: This example demonstrates defining a custom fixture to skip tests based on the `$tags` available. It checks for a specific tag (`@firefox`) and skips the test if the current browser is not Firefox. Integrates with Playwright-BDD, and custom configurations might be needed for various browser settings.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/bdd-fixtures.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { test as base } from 'playwright-bdd';\n\nexport const test = base.extend<{ firefoxOnly: void }>({\n  firefoxOnly: [\n    async ({ $tags, defaultBrowserType }, use, testInfo) => {\n      if ($tags.includes('@firefox') && defaultBrowserType !== 'firefox') {\n        testInfo.skip();\n      }\n      await use();\n    },\n    { auto: true },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using @fail Tag in Playwright BDD Tests\nDESCRIPTION: Demonstrates using the @fail tag to mark tests that are expected to fail. This is useful for tracking known issues while keeping them in the test suite.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/special-tags.md#2025-04-22_snippet_2\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Playwright site\n    \n    @fail\n    Scenario: Check title\n        Given I open url \"https://playwright.dev\"\n```\n\n----------------------------------------\n\nTITLE: Applying Tag Expressions for Scenario Filtering in Playwright-BDD\nDESCRIPTION: This snippet shows how to use tag expressions to filter scenarios for test generation in Playwright-BDD.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/configuration/options.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst testDir = defineBddConfig({\n  tags: '@desktop and not @slow',\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Step Definition for Video Player in JavaScript\nDESCRIPTION: A step definition file for the video player feature, implementing the 'I click the PLAY button' step.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/scoped.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// video-player.steps.js\nWhen('I click the PLAY button', async () => {\n  // actions for video-player.feature\n});\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Basic Tag Assignment\nDESCRIPTION: Example showing how to organize feature files and step definitions in @-prefixed directories to automatically assign tags to all contained files.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/tags-from-path.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfeatures\n├── @game                     <- sets @game tag to all files inside\n│   ├── game.feature\n│   └── steps.ts\n└── @video-player             <- sets @video-player tag to all files inside\n    ├── video-player.feature\n    └── steps.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright with Currents Reporter\nDESCRIPTION: This TypeScript code configures Playwright to use the Currents reporter. It imports necessary modules, sets up Currents configuration, defines BDD config, and exports the Playwright configuration.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/usage-with-currents.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'dotenv/config';\nimport { defineConfig, devices } from '@playwright/test';\nimport { defineBddConfig } from 'playwright-bdd';\nimport { CurrentsConfig, currentsReporter } from '@currents/playwright';\n\nconst currentsConfig: CurrentsConfig = {\n  recordKey: process.env.CURRENTS_RECORD_KEY || '',\n  projectId: process.env.CURRENTS_PROJECT_ID || '',\n};\n\nconst testDir = defineBddConfig({\n  features: 'features/*.feature',\n  steps: 'features/steps/*.ts',\n});\n\nexport default defineConfig({\n  testDir,\n  reporter: [currentsReporter(currentsConfig)],\n  use: {\n    screenshot: 'on',\n    trace: 'on',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with Tag Expressions\nDESCRIPTION: This command shows how to run Playwright tests using tag expressions. It generates BDD tests with specific tags and then executes the Playwright test runner.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/index.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx bddgen --tags \"@desktop and not @slow\" && npx playwright test\n```\n\n----------------------------------------\n\nTITLE: Scoped Step Definition for Video Player in JavaScript\nDESCRIPTION: A step definition for the video player feature that uses the tags option to scope it to features tagged with @video-player.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/scoped.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// video-player.steps.js\nWhen('I click the PLAY button', { tags: '@video-player' }, async () => {\n  // actions for video-player.feature\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Directory Structure for Tags from Path in Playwright-BDD v8\nDESCRIPTION: Shows the directory structure for automatically assigning tags to features and steps using @-prefixed directory names. This eliminates the need for manual tagging and helps bind features with steps.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/blog/whats-new-in-v8.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfeatures\n├── @game                     <- sets @game tag to all files inside\n│   ├── game.feature\n│   └── steps.ts\n└── @video-player             <- sets @video-player tag to all files inside\n    ├── video-player.feature\n    └── steps.ts\n```\n\n----------------------------------------\n\nTITLE: Sample Gherkin Feature File for Playwright Testing\nDESCRIPTION: Example Gherkin feature file demonstrating BDD test scenarios for the Playwright home page. Tests navigation and title verification using Given-When-Then syntax.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/reporters/allure.md#2025-04-22_snippet_1\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Playwright Home Page\n\n    Scenario: Check title\n        Given I am on Playwright home page\n        When I click link \"Get started\"\n        Then I see in title \"Installation\"\n```\n\n----------------------------------------\n\nTITLE: Running Playwright BDD Tests in UI Mode\nDESCRIPTION: This command generates BDD tests and runs them in Playwright's UI mode, which provides a graphical interface for monitoring and debugging test execution.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/debugging.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx bddgen && npx playwright test --ui\n```\n\n----------------------------------------\n\nTITLE: Example Gherkin Feature File Structure\nDESCRIPTION: Sample Gherkin feature file showing a feature with Background, basic Scenario, and Scenario Outline with Examples.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/pickles.md#2025-04-22_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: feature 1\n\n  Background:\n    A\n\n  Scenario: scenario 1\n    B\n\n  Scenario Outline: scenario 2\n    C\n    \n  Examples:\n    C1\n    C2\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Authentication Step in Gherkin\nDESCRIPTION: This snippet shows a Gherkin step definition for dynamic authentication. It allows specifying the user email directly in the step, enabling flexible authentication scenarios.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/examples/auth-in-steps/README.md#2025-04-22_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\nGiven I am logged in as \"xxx@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SauceLabs Credentials\nDESCRIPTION: Command to set up SauceLabs credentials using the saucectl configure command.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/usage-with-saucelabs.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsaucectl configure\n```\n\n----------------------------------------\n\nTITLE: Sample BDD Feature File for Playwright Tests\nDESCRIPTION: A Gherkin-syntax feature file example that tests the Playwright website. This demonstrates how BDD scenarios appear in Playwright reports.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/reporters/playwright.md#2025-04-22_snippet_1\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Playwright Home Page\n\n    Scenario: Check title\n        Given I am on Playwright home page\n        When I click link \"Get started\"\n        Then I see in title \"Installation\"\n```\n\n----------------------------------------\n\nTITLE: Running Playwright-BDD Watch Mode\nDESCRIPTION: Command to start the concurrent watch mode for both BDD generation and Playwright UI mode testing.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/ui-mode.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Pickle Structure Generation\nDESCRIPTION: Demonstrates how the Gherkin scenarios are converted into Cucumber pickles, showing the mapping of steps and examples.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/pickles.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npickle 1 (scenario 1)\n  pickleStep 1.1 (A)\n  pickleStep 1.2 (B)\n\npickle 2 (scenario 2, example row 1)\n  pickleStep 2.1 (A)\n  pickleStep 2.2 (C)\n\npickle 3 (scenario 2, example row 2)\n  pickleStep 3.1 (A)\n  pickleStep 3.2 (C)\n```\n\n----------------------------------------\n\nTITLE: Creating BeforeWorker Hook without Custom Fixtures\nDESCRIPTION: Example of creating a BeforeWorker hook in Playwright-BDD without custom fixtures.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/hooks.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBdd } from 'playwright-bdd';\n\nconst { BeforeWorker } = createBdd();\n```\n\n----------------------------------------\n\nTITLE: BrowserStack Credentials Configuration\nDESCRIPTION: This YAML configuration file stores the BrowserStack username and access key, which are necessary for authenticating with the BrowserStack platform. These credentials should be replaced with the user's actual username and access key.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/usage-with-browserstack.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"userName: YOUR_USERNAME\\naccessKey: YOUR_ACCESS_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Matching Gherkin Steps Regardless of Keyword\nDESCRIPTION: Examples of Gherkin steps that would match the same step definition regardless of the keyword used (Given, When, or Then) when using default settings.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/keywords-matching.md#2025-04-22_snippet_1\n\nLANGUAGE: gherkin\nCODE:\n```\nGiven a step\nWhen a step\nThen a step\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright-BDD with Authentication Setup\nDESCRIPTION: This snippet shows how to configure Playwright-BDD with a separate non-BDD project for authentication. It explicitly sets testDir for the setup project and configures dependencies for the main project.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/configuration/multiple-projects.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nimport { defineBddConfig } from 'playwright-bdd';\n\nconst testDir = defineBddConfig({\n  features: 'features/*.feature',\n  steps: 'steps/*.ts',\n});\n\nexport default defineConfig({\n  testDir,\n  projects: [\n    {\n      name: 'setup',\n      testDir: './setup-steps', // <-- set testDir for setup project\n      testMatch: /setup\\.ts/,\n    },\n    {\n      name: 'chromium',\n      dependencies: ['setup'],\n      use: {\n        storageState: 'playwright/.auth/user.json',\n      },      \n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Generated JavaScript Test File Using Special Comment Syntax\nDESCRIPTION: This snippet demonstrates the JavaScript test file generated when using the special comment syntax for custom example titles.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/customize-examples-title.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntest.describe(`Calculator`, () => {\n\n  test.describe(`Multiply by two`, () => {\n\n    test(`check 1`, async ({ Given, When, Then }) => {\n      await Given(`value is 1`);\n      await When(`multiply by two`);\n      await Then(`result is 2`);\n    });\n\n    test(`check 2`, async ({ Given, When, Then }) => {\n      await Given(`value is 2`);\n      await When(`multiply by two`);\n      await Then(`result is 4`);\n    });\n\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Tags for Hooks\nDESCRIPTION: Example of setting default tags for hooks using createBdd in Playwright-BDD.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/hooks.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst { BeforeWorker } = createBdd(test, { tags: '@mobile' });\n\nBeforeWorker(async () => {\n  // runs only for features with @mobile \n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Currents Credentials in .env File\nDESCRIPTION: This snippet shows the content of the .env file with variables for Currents record key and project ID.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/usage-with-currents.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nCURRENTS_RECORD_KEY=YOUR_RECORD_KEY # the record key from https://app.currents.dev\nCURRENTS_PROJECT_ID=YOUR_PROJECT_ID # the projectId from https://app.currents.dev\n```\n\n----------------------------------------\n\nTITLE: Using Custom Fixture in Cucumber-Style Step Definition\nDESCRIPTION: This snippet demonstrates how to use a custom fixture (myFixture) in a Cucumber-style step definition. The fixture is accessed via 'this'.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/cucumber-style.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Given, When, Then } from './fixtures';\n\nGiven('I am on home page', async function () {\n  console.log(this.myFixture);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Cucumber-Style Step in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a Cucumber-style step using the Given function. It uses the World instance via 'this' to call the openHomePage method.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/cucumber-style.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// steps.ts\nimport { Given, When, Then } from './fixtures';\n\nGiven('I am on home page', async function () {\n  await this.openHomePage();\n});\n```\n\n----------------------------------------\n\nTITLE: Using @only Tag in Playwright BDD Tests\nDESCRIPTION: Demonstrates how to use @only tag to run a single feature or scenario in isolation. This is useful during development or debugging when you want to focus on specific tests.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/special-tags.md#2025-04-22_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\n@only\nFeature: Playwright site\n    \n    @only\n    Scenario: Check title\n        Given I open url \"https://playwright.dev\"\n```\n\n----------------------------------------\n\nTITLE: Step Definition for Game in JavaScript\nDESCRIPTION: A step definition file for the game feature, implementing the 'I click the PLAY button' step.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/scoped.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// game.steps.js\nWhen('I click the PLAY button', async () => {\n  // actions for game.feature\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Playwright BDD Authentication\nDESCRIPTION: Documentation explaining the setup of authentication in Playwright BDD tests, including project structure and handling of authenticated/non-authenticated scenarios using tags.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/examples/auth/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# auth playwright-bdd example\n\nExample of [single authentication account](https://playwright.dev/docs/auth#basic-shared-account-in-all-tests) in BDD tests. There are two Playwright projects:\n\n* `auth` - non-BDD project for authentication\n* `chromium` - BDD project that depends on `auth`\n\nFeatures that don't need authentication are marked with `@noauth` tag and handled in `storageState` fixture.\n\nIf you need several accounts (that do not interact with each other), you can create several authentication states and select appropriate one by tag/feature in `storageState` fixture.\n\nAuthentication in this example is *static* - there are no steps like \n`Given I am logged in as \"xxx@example.com\"`. If you need dynamic authentication in steps, please check out [auth-in-steps]() example.\n```\n\n----------------------------------------\n\nTITLE: Configure Test Command in package.json\nDESCRIPTION: Script configuration for running component tests with BDD generator and Playwright\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/component-tests.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"test-ct\": \"npx bddgen -c playwright-ct.config.ts && playwright test -c playwright-ct.config.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Tags in Playwright-BDD v8\nDESCRIPTION: Demonstrates how to provide default tags via the createBdd() option, allowing multiple step definitions and hooks to have the same tags without repetitive specification.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/blog/whats-new-in-v8.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { BeforeAll, Before, Given } = createBdd(test, { \n  tags: '@game' // <- default tag\n});\n\n// all functions below are tagged with `@game`\nBeforeAll(async () => { ... });\nBefore(async () => { ... });\nGiven('a step', async () => { ... });\n```\n\n----------------------------------------\n\nTITLE: Tagged Game Feature in Gherkin\nDESCRIPTION: A Gherkin feature file for a game that is tagged with @game to match the scope of the corresponding step definition.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/scoped.md#2025-04-22_snippet_7\n\nLANGUAGE: gherkin\nCODE:\n```\n@game\nFeature: Game\n\n  Scenario: Start playing\n    ... \n    When I click the PLAY button\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Step Definitions\nDESCRIPTION: Example showing how to access environment variables within Playwright-BDD step definitions for login automation.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/env-vars.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nWhen('I log in', async ({ page }) => {\n  await page.getByRole('textbox', { name: 'Username' }).fill(process.env.USERNAME);\n  await page.getByRole('textbox', { name: 'Password' }).fill(process.env.PASSWORD);\n  await page.getByRole('button', { name: 'Log in' }).click();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Snapshot Paths in Playwright\nDESCRIPTION: This TypeScript snippet demonstrates how to set a custom snapshotPathTemplate in Playwright's configuration. It moves snapshots to a separate __snapshots__ directory, organizing them by test file and project.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/ignore-generated-files.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  snapshotPathTemplate:\n    '__snapshots__/{testFileDir}/{testFileName}-snapshots/{arg}{-projectName}{-snapshotSuffix}{ext}',\n  // ...  \n});\n```\n\n----------------------------------------\n\nTITLE: Filename-based Tag Assignment Structure\nDESCRIPTION: Example showing how to use @-prefixed filenames to assign tags to individual feature files.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/tags-from-path.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nfeatures\n├── @game.feature\n├── @video-player.feature\n└── ...\n```\n\n----------------------------------------\n\nTITLE: Creating BDD with Default Tags for Game in TypeScript\nDESCRIPTION: Shows how to create BDD functions with default tags for all step definitions in a file, scoping them to @game.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/scoped.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// game.steps.ts\nconst { Given, When, Then } = createBdd(test, { tags: '@game' });\n\nWhen('I click the PLAY button', async () => {\n  // actions for game.feature\n});\n```\n\n----------------------------------------\n\nTITLE: Example Output of Step Definition Export\nDESCRIPTION: Sample output from the bddgen export command, showing the configured steps found in the project. The output includes the step type (Given/When/Then) and the step definition pattern.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/cli.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nUsing config: playwright.config.ts\nList of all steps (4):\n\n* Given I am on todo page\n* When I add todo {string}\n* When I remove todo {string}\n* Then visible todos count is {int}\n```\n\n----------------------------------------\n\nTITLE: Browser Configuration for Playwright on BrowserStack\nDESCRIPTION: This YAML configuration defines the browsers on which the Playwright tests will run on BrowserStack, including OS, browser name, version, and Playwright configuration options. The `buildName` and `buildIdentifier` properties help organize the test results within the BrowserStack dashboard.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/usage-with-browserstack.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"userName: YOUR_USERNAME\\naccessKey: YOUR_ACCESS_KEY\\n\\nprojectName: playwright-bdd sample\\nbuildName: my-build-name\\nbuildIdentifier: '#${BUILD_NUMBER}'\\nplatforms:\\n  - os: Windows\\n    osVersion: 11\\n    browserName: chrome\\n    browserVersion: latest\\n    playwrightConfigOptions:\\n      name: chromium\\n  - os: OS X\\n    osVersion: Ventura\\n    browserName: playwright-webkit\\n    browserVersion: latest\\n    playwrightConfigOptions:\\n      name: osx\\n\\n  # more browsers    \"\n```\n\n----------------------------------------\n\nTITLE: Creating Simple World Object with Page in JavaScript\nDESCRIPTION: This code shows how to create a simple World object with just a page property in JavaScript. It extends the test and creates Given/When/Then functions.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/cucumber-style.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test as base } from 'playwright-bdd';\n\nexport const test = base.extend({\n  world: async ({ page }, use) => {\n    const world = { page };\n    await use(world);\n  },\n});\n\nexport const { Given, When, Then, Before, After } = createBdd(test, { worldFixture: 'world' });\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright-BDD with npm - New Project\nDESCRIPTION: Commands to install Playwright and Playwright-BDD dependencies using npm, followed by installing Playwright browsers.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/getting-started/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @playwright/test playwright-bdd\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright install\n```\n\n----------------------------------------\n\nTITLE: Yarn Plug'n'Play Configuration for Playwright-BDD\nDESCRIPTION: Required configuration in .yarnrc.yml file for using Playwright-BDD with Yarn Plug'n'Play feature.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/getting-started/installation.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npackageExtensions: \n  playwright-bdd@*: \n    dependencies: \n      playwright: \"*\"\n      playwright-core: \"*\"\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Reporter Configuration in Playwright-BDD\nDESCRIPTION: Basic setup for HTML reporting in Playwright-BDD with feature and steps path configuration.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/reporters/cucumber.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nimport { defineBddConfig, cucumberReporter } from 'playwright-bdd';\n\nconst testDir = defineBddConfig({\n  features: 'features/*.feature',\n  steps: 'steps/*.ts',\n});\n\nexport default defineConfig({\n  testDir,\n  reporter: [\n    cucumberReporter('html', { outputFile: 'cucumber-report/index.html' }),  \n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Reporter Configuration in Playwright-BDD\nDESCRIPTION: Setup for JSON reporting format in Playwright-BDD with output file configuration.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/reporters/cucumber.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@playwright/test';\nimport { defineBddConfig, cucumberReporter } from 'playwright-bdd';\n\nconst testDir = defineBddConfig({\n  features: ['features/*.feature'],\n  steps: ['steps/*.ts'],\n});\n\nexport default defineConfig({\n  testDir,\n  reporter: [\n    cucumberReporter('json', { outputFile: 'cucumber-report/report.json' }), \n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright-BDD with pnpm - New Project\nDESCRIPTION: Commands to install Playwright and Playwright-BDD dependencies using pnpm, followed by installing Playwright browsers.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/getting-started/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm i -D @playwright/test playwright-bdd\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm playwright install\n```\n\n----------------------------------------\n\nTITLE: Importing Playwright-BDD Decorators\nDESCRIPTION: Shows how to import the necessary decorators from playwright-bdd/decorators package.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/decorators.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Fixture, Given, When, Then } from 'playwright-bdd/decorators';\n```\n\n----------------------------------------\n\nTITLE: Running and Merging Test Shards\nDESCRIPTION: The Shell scripts orchestrate running tests in sharded mode and merging their reports. No specific dependencies are noted beyond npx, Playwright, and the relevant config setup. Key parameters such as `--shard` and `--config` specify shard indexing and configurations for merging, respectively. Output involves combined reports generated in shard runs.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/reporters/cucumber.md#2025-04-22_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nnpx bddgen && npx playwright test --shard 1/2\nnpx bddgen && npx playwright test --shard 2/2\n```\n\nLANGUAGE: Shell\nCODE:\n```\nnpx playwright merge-reports --config playwright.config.ts ./blob-report\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright BDD Settings\nDESCRIPTION: Demonstrates how to configure Playwright BDD settings in the configuration file.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/decorators.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst testDir = defineBddConfig({\n  features: 'features/todo.feature',\n  steps: 'fixtures.ts',\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright-BDD with Yarn - Existing Project\nDESCRIPTION: Command to install only Playwright-BDD in a project that already has Playwright installed using Yarn.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/getting-started/installation.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D playwright-bdd\n```\n\n----------------------------------------\n\nTITLE: Special Tags Directory Structure\nDESCRIPTION: Example showing how to organize features using special tags as directory names for controlling test execution behavior.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/tags-from-path.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nfeatures\n└── @game\n    ├── @slow                <- for features that need more time\n    │   └── feature1.feature\n    ├── @skip                <- for features that are not ready\n    │   └── feature2.feature \n    ├── @mode:serial         <- for features to run in serial mode\n    │   └── feature3.feature\n    ├── game.feature\n    └── steps.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring featuresRoot as Default Directory in Playwright-BDD v8\nDESCRIPTION: Shows the simplified configuration for featuresRoot as a default directory for both features and steps, unless explicitly defined. This reduces the need for separate feature and step configurations.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/blog/whats-new-in-v8.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nconst testDir = defineBddConfig({\n  features: './features/**/*.feature',\n  steps: './features/steps/**/*.js',\n  featuresRoot: './features',\n});\n\n// after\nconst testDir = defineBddConfig({\n  featuresRoot: './features',\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright-BDD Tests with Currents\nDESCRIPTION: This command generates BDD tests and runs them using Playwright, which will now report results to the Currents dashboard.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/usage-with-currents.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx bddgen && npx playwright test\n```\n\n----------------------------------------\n\nTITLE: Initialize Playwright Component Testing\nDESCRIPTION: Command to set up initial component testing configuration with Playwright\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/component-tests.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init playwright@latest -- --ct\n```\n\n----------------------------------------\n\nTITLE: Using Auth Fixture in a Given Step\nDESCRIPTION: Example of using the auth fixture in a Given step definition in Playwright-BDD.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/hooks.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nGiven('I am an authorized user', async ({ auth }) => {\n  console.log('step for authorized user', auth.username);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Fixtures\nDESCRIPTION: Shows how to extend the base test configuration with custom Page Object Model fixtures.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/decorators.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// fixtures.ts\nimport { test as base } from 'playwright-bdd';\nimport { TodoPage } from './TodoPage';\n\nexport const test = base.extend<{ todoPage: TodoPage }>({\n  todoPage: ({ page }, use) => use(new TodoPage(page)),\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with BrowserStack\nDESCRIPTION: This command executes the Playwright tests using the BrowserStack Node SDK after first generating the BDD scenarios. `bddgen` generates the test files and `browserstack-node-sdk playwright test` command utilizes BrowserStack for test execution.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/usage-with-browserstack.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"npx bddgen && npx browserstack-node-sdk playwright test\"\n```\n\n----------------------------------------\n\nTITLE: Configure Playwright-BDD Component Testing\nDESCRIPTION: Configuration setup for Playwright component testing with BDD integration, defining feature and step file locations\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/component-tests.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, devices } from '@playwright/experimental-ct-react';\nimport { defineBddConfig } from 'playwright-bdd';\n\nconst testDir = defineBddConfig({\n  features: ['features/*.feature'],\n  steps: ['fixtures.ts', 'steps.tsx'],\n});\n\nexport default defineConfig({\n  testDir,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Object Inheritance\nDESCRIPTION: Shows how to implement inheritance between Page Object Models while maintaining decorator functionality.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/decorators.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// TodoPage\nexport @Fixture('todoPage') class TodoPage {\n  @Given('I am on todo page')\n  async open() { ... }\n}\n\n// AdminTodoPage inherited from TodoPage\nexport @Fixture('adminTodoPage') class AdminTodoPage extends TodoPage {\n  @When('I add todo {string}')\n  async addToDo(text: string) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Gherkin Feature File\nDESCRIPTION: Example of a Gherkin feature file using the defined test steps.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/decorators.md#2025-04-22_snippet_4\n\nLANGUAGE: gherkin\nCODE:\n```\n# features/todo.feature\nFeature: Todo Page\n\n    Scenario: Adding todos\n      Given I am on todo page\n      When I add todo \"foo\"\n      And I add todo \"bar\"\n      Then visible todos count is 2\n```\n\n----------------------------------------\n\nTITLE: Generating Playwright-BDD Test Report\nDESCRIPTION: Command to generate test execution report for Playwright-BDD tests\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/examples/basic-esm/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run report\n```\n\n----------------------------------------\n\nTITLE: Execute Component Tests\nDESCRIPTION: Command to run the configured component tests\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/component-tests.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-ct\n```\n\n----------------------------------------\n\nTITLE: Create Gherkin Feature File\nDESCRIPTION: BDD feature file defining test scenarios for input component testing\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/component-tests.md#2025-04-22_snippet_4\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: input component\n\n    Scenario: Mount component and interact with it\n        Given Mounted input component\n        When I type \"ABC\"\n        Then input field has \"ABC\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Hook Name and Timeout\nDESCRIPTION: Example of setting a name and timeout for a BeforeWorker hook in Playwright-BDD.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/hooks.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nBeforeWorker({ name: 'setup database', timeout: 1000 }, async () => {\n  // runs with timeout 1000 ms\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright-BDD Tests in TypeScript\nDESCRIPTION: Command to execute Playwright-BDD tests in a TypeScript project. This command runs the tests and displays the test execution results.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/examples/basic-cjs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm t\n```\n\n----------------------------------------\n\nTITLE: Running bddgen to Generate and Execute Playwright Tests\nDESCRIPTION: Command to generate Playwright test files from Gherkin documents using the default configuration, followed by executing the tests. This is the standard workflow for running BDD tests with Playwright.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/cli.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx bddgen && npx playwright test\n```\n\n----------------------------------------\n\nTITLE: Scoped Step Definition for Game in JavaScript\nDESCRIPTION: A step definition for the game feature that uses the tags option to scope it to features tagged with @game.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/scoped.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// game.steps.js\nWhen('I click the PLAY button', { tags: '@game' }, async () => {\n  // actions for game.feature\n});\n```\n\n----------------------------------------\n\nTITLE: Running Playwright-BDD Tests\nDESCRIPTION: Command to execute the test suite that intentionally contains failing tests to demonstrate the AI fix feature\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/examples/ai/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm t\n```\n\n----------------------------------------\n\nTITLE: Configuring Nodemon Watch Command for BDD Test Generation\nDESCRIPTION: Command to watch feature and step definition files for changes and automatically regenerate test files using nodemon. Monitors files with .feature, .js, and .ts extensions.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/ui-mode.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx nodemon -w ./features -w ./steps -e feature,js,ts --exec \"npx bddgen\"\n```\n\n----------------------------------------\n\nTITLE: Using Custom Configuration Path with bddgen\nDESCRIPTION: Command to specify a custom configuration file path for both bddgen and playwright test commands. This is useful when the configuration is not in the default location or when multiple configurations exist.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/cli.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx bddgen -c path/to/playwright.config.ts && npx playwright test -c path/to/playwright.config.ts\n```\n\n----------------------------------------\n\nTITLE: Exporting Step Definitions Using bddgen CLI\nDESCRIPTION: This shell command demonstrates how to use the 'bddgen export' command to list all available step patterns defined in the Playwright configuration.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/chatgpt.md#2025-04-22_snippet_1\n\nLANGUAGE: shellscript\nCODE:\n```\n$ bddgen export\n\nList of all steps found by config: playwright.config.ts\n\n* Given I am on todo page\n* When I add todo {string}\n* When I remove todo {string}\n* Then visible todos count is {int}\n```\n\n----------------------------------------\n\nTITLE: Filtering Tests by Tags with bddgen\nDESCRIPTION: Command to generate tests with tag filtering. This uses Cucumber's tag expression syntax to include or exclude scenarios based on their tags, allowing for selective test execution.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/cli.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx bddgen --tags \"@foo and not @bar\" && npx playwright test\n```\n\n----------------------------------------\n\nTITLE: Running Playwright-BDD Tests with Undefined Steps\nDESCRIPTION: Command to generate BDD test files and run Playwright tests. This demonstrates how to execute tests even when step definitions are not yet implemented.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/snippets.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx bddgen && npx playwright test\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for bddgen Commands\nDESCRIPTION: Commands to display help information for the bddgen tool, showing available options and usage instructions for specific commands or for the tool as a whole.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/cli.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx bddgen test -h\n# or to show global help\nnpx bddgen -h\n```\n\n----------------------------------------\n\nTITLE: Configuring SauceLabs for Playwright-BDD\nDESCRIPTION: YAML configuration for SauceLabs, specifying Playwright settings, npm packages, test suites, and reporters.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/usage-with-saucelabs.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1alpha\nkind: playwright\nsauce:\n  region: us-west-1\n  concurrency: 10\n  metadata:\n    tags: [e2e, bdd]\nplaywright:\n  version: package.json\nnpm:\n  packages:\n    playwright-bdd: latest\nrootDir: ./\nsuites:\n  - name: 'Chromium Mac'\n    platformName: 'macOS 12'\n    screenResolution: '1440x900'\n    testMatch: ['.*.js']\n    params:\n      browserName: 'chromium'\n      project: 'chromium' # Runs the project that's defined in `playwright.config.js`\nreporters:\n  spotlight:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright-BDD with npm - Existing Project\nDESCRIPTION: Command to install only Playwright-BDD in a project that already has Playwright installed.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/getting-started/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D playwright-bdd\n```\n\n----------------------------------------\n\nTITLE: Running Playwright-BDD Tests\nDESCRIPTION: This shell command shows how to generate and run Playwright-BDD tests using the generated feature file.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/chatgpt.md#2025-04-22_snippet_3\n\nLANGUAGE: shellscript\nCODE:\n```\nnpx bddgen && npx playwright test\n```\n\n----------------------------------------\n\nTITLE: Exporting Step Definitions with bddgen\nDESCRIPTION: Command to list all step definitions found in the project. This is particularly useful for integrating with ChatGPT for generating BDD scenarios based on available steps.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/cli.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx bddgen export\n```\n\n----------------------------------------\n\nTITLE: Running Playwright-BDD Tests on SauceLabs\nDESCRIPTION: Command to generate BDD tests and run them on SauceLabs using saucectl.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/usage-with-saucelabs.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx bddgen && saucectl run\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright-BDD with pnpm - Existing Project\nDESCRIPTION: Command to install only Playwright-BDD in a project that already has Playwright installed using pnpm.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/getting-started/installation.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm i -D playwright-bdd\n```\n\n----------------------------------------\n\nTITLE: Installing Currents and Playwright Reporter Dependencies\nDESCRIPTION: This command installs the Currents Playwright reporter package as a dev dependency.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/usage-with-currents.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @currents/playwright\n```\n\n----------------------------------------\n\nTITLE: Displaying Environment Information with bddgen\nDESCRIPTION: Command to show information about the current environment, including platform, Node.js version, and versions of Playwright-BDD and its dependencies.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/cli.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx bddgen env\n```\n\n----------------------------------------\n\nTITLE: Custom Formatter Implementation in Playwright-BDD\nDESCRIPTION: Example of creating a custom Cucumber formatter that logs envelopes as JSON strings.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/reporters/cucumber.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as messages from '@cucumber/messages';\nimport { Formatter, IFormatterOptions } from '@cucumber/cucumber';\n\nexport default class CustomFormatter extends Formatter {\n  constructor(options: IFormatterOptions) {\n    super(options);\n    options.eventBroadcaster.on('envelope', (envelope: messages.Envelope) => {\n      console.log(JSON.stringify(envelope));\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Environment Variables via npm\nDESCRIPTION: Correct way to run tests with environment variables using npm script.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/env-vars.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nUSERNAME=foo npm test\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Definition in .env File\nDESCRIPTION: Example .env file showing environment variable declarations for username and password.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/env-vars.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# .env\nUSERNAME=foo\nPASSWARD=bar\n```\n\n----------------------------------------\n\nTITLE: Example Output of Environment Information\nDESCRIPTION: Sample output from the bddgen env command, displaying platform details and version information for Node.js, Playwright-BDD, Playwright Test, and Cucumber.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/cli.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nPlaywright-BDD environment info:\n\nplatform: darwin\nnode: v18.16.0\nplaywright-bdd: v5.1.1\n@playwright/test: v1.36.2\n@cucumber/cucumber: v9.2.0\n```\n\n----------------------------------------\n\nTITLE: Ignoring Generated Playwright Test Files in Git\nDESCRIPTION: This snippet shows how to ignore generated Playwright test files in .gitignore while preserving snapshots. It targets specifically the .spec.js files within the .features-gen directory.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/ignore-generated-files.md#2025-04-22_snippet_0\n\nLANGUAGE: gitignore\nCODE:\n```\n**/.features-gen/**/*.spec.js\n```\n\n----------------------------------------\n\nTITLE: Running Playwright-BDD Tests\nDESCRIPTION: Command to execute Playwright-BDD test suite with output showing successful test completion\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/examples/basic-esm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm t\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nRunning 2 tests using 1 worker\n  2 passed (2.9s)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Environment Variable Usage in CLI\nDESCRIPTION: Example showing incorrect way of passing environment variables in CLI command.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/env-vars.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nUSERNAME=foo npx bddgen && npx playwright test\n```\n\n----------------------------------------\n\nTITLE: Running Playwright-BDD Tests in ESM Mode\nDESCRIPTION: Command to generate BDD tests and run Playwright tests in ESM projects. Compatible with Playwright-BDD v7 and Playwright v1.41+, no longer requiring the ts-node/esm loader.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/configuration/esm.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx bddgen && npx playwright test\n```\n\n----------------------------------------\n\nTITLE: Using Fixture Tags in Gherkin\nDESCRIPTION: Demonstrates how to specify particular fixtures using Gherkin tags.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/decorators.md#2025-04-22_snippet_6\n\nLANGUAGE: gherkin\nCODE:\n```\n@fixture:adminTodoPage\nFeature: Some feature\n\n    Background: \n      Given I am on todo page # <- will use AdminTodoPage\n\n    Scenario: Adding todos\n      When I add todo \"foo\"   # <- will use AdminTodoPage\n```\n\n----------------------------------------\n\nTITLE: Generating Playwright-BDD Test Report\nDESCRIPTION: Command to generate a visual report for Playwright-BDD test results. This report provides a detailed overview of test execution outcomes.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/examples/basic-cjs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run report\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 8.2.0\nDESCRIPTION: Details improvements to Cucumber HTML reporter and introduction of step hooks\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 8.2.0\n* improve Cucumber HTML reporter to show trace without explicit `attachmentsBaseURL`.\n* introduce `BeforeStep` / `AfterStep` hooks (#280, thanks to @the3dsandwich).\n```\n\n----------------------------------------\n\nTITLE: Configuring Prettier with Gherkin Plugin\nDESCRIPTION: JavaScript configuration file that sets up Prettier with the Gherkin plugin for auto-formatting feature files. The configuration is exported as an ES module and enables formatting support for Gherkin syntax.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/auto-formatting.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  plugins: ['prettier-plugin-gherkin'],\n  // ...other prettier options\n};\n```\n\n----------------------------------------\n\nTITLE: Feature File with Reference Mapping\nDESCRIPTION: Shows how pickle steps map back to the original feature file elements, with references indicated in comments.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/pickles.md#2025-04-22_snippet_2\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: feature 1\n\n  Background: # referenced from: none\n    A # referenced from: pickleStep 1.1, pickleStep 2.1, pickleStep 3.1\n\n  Scenario: scenario 1 # referenced from: pickle 1\n    B # referenced from: pickleStep 1.2\n\n  Scenario Outline: scenario 2 # referenced from: pickle 2, pickle 3\n    C # referenced from: pickleStep 2.2, pickleStep 3.2\n    \n  Examples:\n    C1 # referenced from: pickle 2\n    C2 # referenced from: pickle 3\n```\n\n----------------------------------------\n\nTITLE: Installing dotenv for Managing Currents Credentials\nDESCRIPTION: This command installs the dotenv package as a dev dependency for managing Currents credentials.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/usage-with-currents.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D dotenv\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 8.1.0\nDESCRIPTION: Lists addition of AI features and attachment support updates\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 8.1.0\n* add \"Fix with AI\" feature\n* support attachments via `testInfo.attachments.push()`\n* update all dependencies\n```\n\n----------------------------------------\n\nTITLE: Generated JavaScript Test File from Gherkin Scenario Outline\nDESCRIPTION: This snippet shows the JavaScript test file generated from the Gherkin Scenario Outline, with unique test titles for each example.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/customize-examples-title.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntest.describe(`Calculator`, () => {\n\n  test.describe(`Multiply <value> by two`, () => {\n\n    test(`Multiply 1 by two`, async ({ Given, When, Then }) => {\n      await Given(`value is 1`);\n      await When(`multiply by two`);\n      await Then(`result is 2`);\n    });\n\n    test(`Multiply 2 by two`, async ({ Given, When, Then }) => {\n      await Given(`value is 2`);\n      await When(`multiply by two`);\n      await Then(`result is 4`);\n    });\n\n  });\n});    \n```\n\n----------------------------------------\n\nTITLE: Tagged Feature File Example\nDESCRIPTION: Shows the equivalent Gherkin syntax when a feature file is placed in an @-prefixed directory.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-features/tags-from-path.md#2025-04-22_snippet_1\n\nLANGUAGE: gherkin\nCODE:\n```\n@game\nFeature: Game\n\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring quotes Option in Playwright-BDD v8\nDESCRIPTION: Shows how to set the quotes option to 'double' to revert to the previous behavior of using double quotes in generated test files. The default is now set to 'single'.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/blog/whats-new-in-v8.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst testDir = defineBddConfig({\n  quotes: 'double',\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Installing cross-env Package\nDESCRIPTION: Command to install the cross-env package as a development dependency for handling environment variables across platforms\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/env-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D cross-env\n```\n\n----------------------------------------\n\nTITLE: Installing SauceLabs CLI (saucectl)\nDESCRIPTION: Command to install the SauceLabs command-line interface (saucectl) globally using npm.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/usage-with-saucelabs.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g saucectl\n```\n\n----------------------------------------\n\nTITLE: Initializing Playwright BDD Test Scenario with Hooks\nDESCRIPTION: Demonstrates a complete test scenario with before and after hooks, background steps, and multiple test steps using Playwright and BDD framework\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/test/reporter-data/expected-reports/report-less-1.46.txt#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n[hook] Before Hooks\n    [hook] BeforeAll Hooks\n    [hook] BeforeEach Hooks\n    [hook] Background\n[test.step] Multiple test steps\n[hook] After Hooks\n    [hook] AfterEach Hooks\n    [hook] AfterAll Hooks\n```\n\n----------------------------------------\n\nTITLE: Installing BrowserStack Node SDK\nDESCRIPTION: This command installs the BrowserStack Node SDK as a development dependency using npm. The `-D` flag ensures it's saved as a dev dependency in package.json.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/guides/usage-with-browserstack.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npm i -D browserstack-node-sdk\"\n```\n\n----------------------------------------\n\nTITLE: Named Before Hook Implementation\nDESCRIPTION: These snippets are implementations of before and after hooks using Typescript within Playwright BDD. They are defined to execute before and after each scenario or example, providing setup and teardown functionality.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/test/reporter-data/expected-reports/report-current.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[test.step] named Before hook features/steps.ts:12:1\n```\n\nLANGUAGE: text\nCODE:\n```\n[test.step] BeforeEach hook features/steps.ts:13:1\n```\n\nLANGUAGE: text\nCODE:\n```\n[test.step] AfterEach hook features/steps.ts:19:1\n```\n\nLANGUAGE: text\nCODE:\n```\n[test.step] named After hook features/steps.ts:18:1\n```\n\n----------------------------------------\n\nTITLE: Playwright Test Scenario with Hooks and Fixtures\nDESCRIPTION: Shows test scenario lifecycle with fixtures, including named hooks, background steps, and test attachments\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/test/reporter-data/expected-reports/report-less-1.46.txt#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n[fixture] $beforeEach\n[fixture] $afterEach\n[test.step] Action steps\n[attach] screenshot\n[attach] trace\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Navigation Structure\nDESCRIPTION: A hierarchical markdown structure defining the navigation and organization of the Playwright BDD documentation, including sections for getting started, configuration, writing features and steps, reporters, and various implementation guides.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/_sidebar.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [**Getting started**](getting-started/index.md)\n  - [Installation](getting-started/installation.md)\n  - [Write first BDD test](getting-started/write-first-test.md)\n  - [Add fixtures](getting-started/add-fixtures.md)\n\n* [**Configuration**](configuration/index.md)\n  - [Options](configuration/options.md)\n  - [Multiple projects](configuration/multiple-projects.md)\n  - [ESM](configuration/esm.md)\n\n* [**Writing features**](writing-features/index.md)\n  - [Special tags](writing-features/special-tags.md)\n  - [Tags from path](writing-features/tags-from-path.md)\n  - [Localization](writing-features/i18n.md)\n  - [Auto-formatting](writing-features/auto-formatting.md)\n  - [Customize examples title](writing-features/customize-examples-title.md)\n  - [Use ChatGPT](writing-features/chatgpt.md)\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Index in Markdown\nDESCRIPTION: A markdown list structure defining the blog index with a link to an article about Playwright-BDD version 8 updates.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/blog/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Playwright-BDD Blog\n\n- [What's new in Playwright-BDD v8](blog/whats-new-in-v8.md)\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 8.2.1\nDESCRIPTION: Documents latest version changes including Playwright 1.51 adoption and attachment handling updates\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 8.2.1\n* adopt to Playwright 1.51, improve stack trace parsing.\n* hide \"_\" prefixed attachments.\n```\n\n----------------------------------------\n\nTITLE: Missing Step Definition Error with matchKeywords Enabled\nDESCRIPTION: Example error message shown when matchKeywords is enabled and a step with 'When' keyword tries to match a definition with 'Given' keyword. The error provides a snippet to create the missing step definition.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/docs/writing-steps/keywords-matching.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nMissing step definitions: 1\n\nWhen('a step', async ({}) => {\n  // Step: When a step\n  // From: features/homepage.feature:4:5\n});\n\nUse snippets above to create missing steps.\n```\n\n----------------------------------------\n\nTITLE: Playwright BeforeAll Hooks\nDESCRIPTION: These snippets indicate the execution of before all hooks, typically used for setup tasks that need to be performed once before all tests in a suite. The `BeforeAll` hook is being executed.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/test/reporter-data/expected-reports/report-current.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[test.step] BeforeAll hook features/steps.ts:14:1\n```\n\nLANGUAGE: text\nCODE:\n```\n[test.step] named BeforeAll hook features/steps.ts:15:1\n```\n\n----------------------------------------\n\nTITLE: Playwright Page Navigation\nDESCRIPTION: This snippet shows the usage of Playwright's `page.goto()` method to navigate to a specific URL. This function is typically used within a step definition in the BDD test to simulate user navigation.\nSOURCE: https://github.com/vitalets/playwright-bdd/blob/main/test/reporter-data/expected-reports/report-current.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[pw:api] page.goto(about:blank) features/pom.ts:11:21\n```"
  }
]