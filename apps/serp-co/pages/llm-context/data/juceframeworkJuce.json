[
  {
    "owner": "juce-framework",
    "repo": "juce",
    "content": "TITLE: Basic Project Build with CMake\nDESCRIPTION: Example of creating a build tree for a JUCE project with optional extras and examples.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncmake -Bbuild (-GgeneratorName) (-DJUCE_BUILD_EXTRAS=ON) (-DJUCE_BUILD_EXAMPLES=ON)\n```\n\n----------------------------------------\n\nTITLE: JUCE Module Configuration Options\nDESCRIPTION: Defines core configuration options for JUCE modules, including the 'modules only' option that disables JUCE helper functions. Includes module support file and configures module source group options.\nSOURCE: https://github.com/juce-framework/juce/blob/master/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\noption(JUCE_MODULES_ONLY \"Only configure the JUCE modules\" OFF)\n\ninclude(extras/Build/CMake/JUCEModuleSupport.cmake)\n\ncmake_dependent_option(JUCE_ENABLE_MODULE_SOURCE_GROUPS\n    \"Show all module sources in IDE projects\" OFF\n    \"NOT JUCE_MODULES_ONLY\" OFF)\n\nadd_subdirectory(modules)\n\nif(JUCE_MODULES_ONLY)\n    return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing JUCE Globally with CMake\nDESCRIPTION: Commands to install JUCE globally on your system by configuring the build with library components only and specifying an installation path.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Go to JUCE directory\ncd /path/to/clone/JUCE\n# Configure build with library components only\ncmake -B cmake-build-install -DCMAKE_INSTALL_PREFIX=/path/to/JUCE/install\n# Run the installation\ncmake --build cmake-build-install --target install\n```\n\n----------------------------------------\n\nTITLE: Linking with Recommended Config Flags in JUCE\nDESCRIPTION: This snippet demonstrates how to link a target with the `juce::juce_recommended_config_flags` target to enable JUCE's recommended optimization and debug flags during the build process.  The `target_link_libraries` command with `PUBLIC` visibility ensures these flags are inherited by dependent targets, like plugin wrappers.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(myTarget PUBLIC juce::juce_recommended_config_flags)\n```\n\n----------------------------------------\n\nTITLE: Audio Data Type Change\nDESCRIPTION: The type representing multi-channel audio data has changed from T** to T* const*. Affected classes are AudioIODeviceCallback, AudioBuffer, and AudioFormatReader. Functions overriding affected members need to conform to the new signature, and type declarations related to getArrayOfReadPointers() and getArrayOfWritePointers() may need adjustment.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Setting Up JUCE Example and Extra Project Targets\nDESCRIPTION: Configures build options for JUCE examples and extras. These optional targets include the Projucer tool, DemoRunner, and example Plugin-in-Plugin (PIP) projects. They are disabled by default to keep configuration speedy.\nSOURCE: https://github.com/juce-framework/juce/blob/master/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\noption(JUCE_BUILD_EXTRAS \"Add build targets for the Projucer and other tools\" OFF)\n\nif(JUCE_BUILD_EXTRAS)\n    add_subdirectory(extras)\nendif()\n\noption(JUCE_BUILD_EXAMPLES \"Add build targets for the DemoRunner and PIPs\" OFF)\n\nif(JUCE_BUILD_EXAMPLES)\n    add_subdirectory(examples)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up JUCE Project in CMake\nDESCRIPTION: Initializes the JUCE project with version information and configures basic CMake properties. Sets the modules directory and configures folder organization for the project.\nSOURCE: https://github.com/juce-framework/juce/blob/master/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.22)\n\nproject(JUCE VERSION 8.0.7 LANGUAGES C CXX)\n\ninclude(CMakeDependentOption)\n\nset_property(GLOBAL PROPERTY USE_FOLDERS YES)\n\nset(JUCE_MODULES_DIR \"${JUCE_SOURCE_DIR}/modules\" CACHE INTERNAL\n    \"The path to JUCE modules\")\n```\n\n----------------------------------------\n\nTITLE: Installing All JUCE Dependencies on Linux\nDESCRIPTION: Complete command to install all required dependencies for JUCE development on Ubuntu, including audio, graphics, GUI, and OpenGL libraries.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/Linux Dependencies.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install libasound2-dev libjack-jackd2-dev \\\n    ladspa-sdk \\\n    libcurl4-openssl-dev  \\\n    libfreetype-dev libfontconfig1-dev \\\n    libx11-dev libxcomposite-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev \\\n    libwebkit2gtk-4.1-dev \\\n    libglu1-mesa-dev mesa-common-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Export Configuration for JUCE\nDESCRIPTION: Creates an export configuration for JUCE that can be used without installing the package. This allows using JUCE directly from its build directory with the correct paths for modules and tools.\nSOURCE: https://github.com/juce-framework/juce/blob/master/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(JUCE_MODULE_PATH \"${JUCE_MODULES_DIR}\")\nset(UTILS_INSTALL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/extras/Build/CMake\")\nget_target_property(JUCEAIDE_PATH juceaide IMPORTED_LOCATION)\nconfigure_package_config_file(\"${JUCE_CMAKE_UTILS_DIR}/JUCEConfig.cmake.in\"\n    \"${JUCE_BINARY_DIR}/JUCEExportConfig.cmake\"\n    PATH_VARS UTILS_INSTALL_DIR JUCEAIDE_PATH JUCE_MODULE_PATH\n    INSTALL_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}\"\n    INSTALL_DESTINATION \"${CMAKE_CURRENT_BINARY_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring JUCE Plugin Build Settings\nDESCRIPTION: Sets up plugin build options and global properties for the build system. Configures C++ standard settings and disables default flags. This section manages how plugins are handled after building.\nSOURCE: https://github.com/juce-framework/juce/blob/master/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\noption(JUCE_COPY_PLUGIN_AFTER_BUILD\n    \"Whether or not plugins should be installed to the system after building\" OFF)\nset_property(GLOBAL PROPERTY JUCE_COPY_PLUGIN_AFTER_BUILD ${JUCE_COPY_PLUGIN_AFTER_BUILD})\n\nset(CMAKE_CXX_EXTENSIONS FALSE)\n\njuce_disable_default_flags()\n\nadd_subdirectory(extras/Build)\n```\n\n----------------------------------------\n\nTITLE: Defining JUCE Module Metadata Using BEGIN_JUCE_MODULE_DECLARATION Block\nDESCRIPTION: This code snippet demonstrates the structure and content of a BEGIN_JUCE_MODULE_DECLARATION block used to declare metadata for a JUCE module. It includes various required and optional fields such as ID, vendor, version, dependencies, and framework requirements.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/JUCE Module Format.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nBEGIN_JUCE_MODULE_DECLARATION\n\n ID:               juce_audio_devices\n vendor:           juce\n version:          4.1.0\n name:             JUCE audio and MIDI I/O device classes\n description:      Classes to play and record from audio and MIDI I/O devices\n website:          http://www.juce.com/juce\n license:          AGPLv3/Commercial\n\n dependencies:     juce_audio_basics, juce_audio_formats, juce_events\n OSXFrameworks:    CoreAudio CoreMIDI DiscRecording\n iOSFrameworks:    CoreAudio CoreMIDI AudioToolbox AVFoundation\n linuxLibs:        asound\n\nEND_JUCE_MODULE_DECLARATION\n```\n\n----------------------------------------\n\nTITLE: Configuring Projucer GUI Application in CMake\nDESCRIPTION: Sets up the main Projucer GUI application with bundle ID, icon, and required features like CURL and web browser support.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/Projucer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\njuce_add_gui_app(Projucer\n    BUNDLE_ID                           com.juce.theprojucer\n    ICON_BIG                            ${CMAKE_CURRENT_SOURCE_DIR}/Source/BinaryData/Icons/juce_icon.png\n    DOCUMENT_EXTENSIONS                 jucer\n    NEEDS_CURL                          TRUE\n    NEEDS_WEB_BROWSER                   TRUE)\n```\n\n----------------------------------------\n\nTITLE: Setting Up JUCE Install Configuration\nDESCRIPTION: Configures the installation of JUCE CMake package files, including version information, paths, and related utilities. This allows other projects to easily find and use JUCE as a dependency via CMake's find_package mechanism.\nSOURCE: https://github.com/juce-framework/juce/blob/master/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CMakePackageConfigHelpers)\nwrite_basic_package_version_file(\"${JUCE_BINARY_DIR}/JUCEConfigVersion.cmake\"\n    VERSION ${JUCE_VERSION}\n    COMPATIBILITY ExactVersion)\n\nset(JUCE_INSTALL_DESTINATION \"lib/cmake/JUCE-${JUCE_VERSION}\" CACHE STRING\n    \"The location, relative to the install prefix, where the JUCE config file will be installed\")\n\nset(JUCE_MODULE_PATH \"include/JUCE-${JUCE_VERSION}/modules\")\nset(UTILS_INSTALL_DIR \"${JUCE_INSTALL_DESTINATION}\")\nset(JUCEAIDE_PATH \"${JUCE_TOOL_INSTALL_DIR}/${JUCE_JUCEAIDE_NAME}\")\nconfigure_package_config_file(\"${JUCE_CMAKE_UTILS_DIR}/JUCEConfig.cmake.in\"\n    \"${JUCE_BINARY_DIR}/JUCEConfig.cmake\"\n    PATH_VARS UTILS_INSTALL_DIR JUCEAIDE_PATH JUCE_MODULE_PATH\n    INSTALL_DESTINATION \"${JUCE_INSTALL_DESTINATION}\")\n```\n\n----------------------------------------\n\nTITLE: Linking with Recommended LTO Flags in JUCE\nDESCRIPTION: This code shows how to link a target with the `juce::juce_recommended_lto_flags` target to enable recommended link time optimization (LTO) settings in JUCE.  It uses `target_link_libraries` with `PUBLIC` visibility so dependent targets, like plugin wrappers, also use the specified link-time optimizations.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(myTarget PUBLIC juce::juce_recommended_lto_flags)\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Metadata and Capabilities in JUCE\nDESCRIPTION: Configuration parameters for defining plugin metadata including name, manufacturer codes, description, and MIDI capabilities\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nFORMATS\nPLUGIN_NAME\nPLUGIN_MANUFACTURER_CODE\nPLUGIN_CODE\nDESCRIPTION\nIS_SYNTH\nNEEDS_MIDI_INPUT\nNEEDS_MIDI_OUTPUT\nIS_MIDI_EFFECT\nEDITOR_WANTS_KEYBOARD_FOCUS\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Subdirectories for JUCE Extras\nDESCRIPTION: Sets the CMAKE_FOLDER variable to 'extras' and adds subdirectories for various JUCE tools and components. This configuration ensures that all the extra utilities and demos are included in the build process.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_FOLDER extras)\nadd_subdirectory(AudioPerformanceTest)\nadd_subdirectory(AudioPluginHost)\nadd_subdirectory(BinaryBuilder)\nadd_subdirectory(NetworkGraphicsDemo)\nadd_subdirectory(Projucer)\nadd_subdirectory(UnitTestRunner)\n```\n\n----------------------------------------\n\nTITLE: Building JUCE Examples with CMake\nDESCRIPTION: Commands to build JUCE examples and extras using CMake. Requires CMake version 3.22 or higher. The example shows how to build the DemoRunner target.\nSOURCE: https://github.com/juce-framework/juce/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /path/to/JUCE\ncmake . -B cmake-build -DJUCE_BUILD_EXAMPLES=ON -DJUCE_BUILD_EXTRAS=ON\ncmake --build cmake-build --target DemoRunner\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Format-Specific Settings in JUCE\nDESCRIPTION: Format-specific configuration options for VST, AU, AAX and LV2 plugins including categories, identifiers and special behaviors\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nVST_NUM_MIDI_INS\nVST_NUM_MIDI_OUTS\nVST2_CATEGORY\nVST3_CATEGORIES\nAU_MAIN_TYPE\nAU_EXPORT_PREFIX\nAU_SANDBOX_SAFE\nAAX_CATEGORY\nLV2URI\n```\n\n----------------------------------------\n\nTITLE: Configuring JUCE Audio Plugin with CMake\nDESCRIPTION: Defines the audio plugin properties using juce_add_plugin, including manufacturer code, plugin code, supported formats, and product name.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/CMake/AudioPlugin/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\njuce_add_plugin(AudioPluginExample\n    PLUGIN_MANUFACTURER_CODE Juce\n    PLUGIN_CODE Dem0\n    FORMATS AU VST3 Standalone\n    PRODUCT_NAME \"Audio Plugin Example\")\n```\n\n----------------------------------------\n\nTITLE: Configuring SDK Paths for Audio Plugins\nDESCRIPTION: Handles external SDK paths for VST2, AAX, and ARA plugin formats. Sets SDK paths based on global variables if they are defined, enabling support for these plugin formats in the build.\nSOURCE: https://github.com/juce-framework/juce/blob/master/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(JUCE_GLOBAL_AAX_SDK_PATH)\n    juce_set_aax_sdk_path(\"${JUCE_GLOBAL_AAX_SDK_PATH}\")\nendif()\n\nif(JUCE_GLOBAL_VST2_SDK_PATH)\n    juce_set_vst2_sdk_path(\"${JUCE_GLOBAL_VST2_SDK_PATH}\")\nendif()\n\n# The ARA_SDK path should point to the \"Umbrella installer\" ARA_SDK directory.\n# The directory can be obtained by recursively cloning https://github.com/Celemony/ARA_SDK and\n# checking out the tag releases/2.1.0.\nif(JUCE_GLOBAL_ARA_SDK_PATH)\n    juce_set_ara_sdk_path(\"${JUCE_GLOBAL_ARA_SDK_PATH}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating GUI Application with JUCE CMake Commands\nDESCRIPTION: Sets up a new GUI application called NetworkGraphicsDemo using JUCE's CMake utilities. This includes creating the application, generating the JUCE header, and specifying the source files to be compiled.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/NetworkGraphicsDemo/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\njuce_add_gui_app(NetworkGraphicsDemo)\n\njuce_generate_juce_header(NetworkGraphicsDemo)\n\ntarget_sources(NetworkGraphicsDemo PRIVATE Source/Main.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding a JUCE Module with `juce_add_module`\nDESCRIPTION: This CMake function adds a library target for a JUCE module located at the specified path. The function creates an interface library with a name matching the directory name of the module, which can be linked to other targets using `target_link_libraries` with `PRIVATE` visibility.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\n\"juce_add_module(<path to module>)\"\n```\n\n----------------------------------------\n\nTITLE: Adding JUCE Modules with `juce_add_modules`\nDESCRIPTION: This CMake function is a convenience function to add multiple JUCE modules at once. It accepts many module paths as parameters, adding all given modules to the project.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\n\"juce_add_modules(<names of module>...)\"\n```\n\n----------------------------------------\n\nTITLE: AudioProcessorGraph bypass behavior change\nDESCRIPTION: AudioProcessorGraph now only calls processBlockBypassed if processors do not have dedicated bypass parameters. Processors with non-functional bypass parameters may not bypass in the same way as before. Ensure that processors have a working bypass parameter or no bypass parameter at all.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Setting SDK Paths with `juce_set_<kind>_sdk_path`\nDESCRIPTION: These CMake functions configure the paths to the local AAX, VST2, VST3, and ARA SDKs. They must be called before adding any targets that depend on these SDKs, ensuring that the build system can find the necessary headers and libraries.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\n\"juce_set_aax_sdk_path(<absolute path>)\njuce_set_vst2_sdk_path(<absolute path>)\njuce_set_vst3_sdk_path(<absolute path>)\njuce_set_ara_sdk_path(<absolute path>)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up juceaide as Imported Target in CMake\nDESCRIPTION: This snippet sets up juceaide as an imported target, configures its location, and creates an alias for use in other parts of the build system. It also defines installation parameters and tests the built juceaide executable.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/Build/juceaide/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(\"${JUCE_BINARY_DIR}/tools/JUCEToolsExport.cmake\")\n\nadd_executable(juceaide IMPORTED GLOBAL)\nget_target_property(imported_location juce_tools::juceaide IMPORTED_LOCATION_CUSTOM)\nset_target_properties(juceaide PROPERTIES IMPORTED_LOCATION \"${imported_location}\")\n\nadd_executable(juce::juceaide ALIAS juceaide)\n\nset(JUCE_TOOL_INSTALL_DIR \"bin/JUCE-${JUCE_VERSION}\" CACHE STRING\n    \"The location, relative to the install prefix, where juceaide will be installed\")\n\ninstall(PROGRAMS \"${imported_location}\" DESTINATION \"${JUCE_TOOL_INSTALL_DIR}\")\n\nget_filename_component(binary_name \"${imported_location}\" NAME)\nset(JUCE_JUCEAIDE_NAME \"${binary_name}\" CACHE INTERNAL \"The name of the juceaide program\")\n\nmessage(STATUS \"Testing juceaide\")\n\nexecute_process(COMMAND \"${imported_location}\" version\n    RESULT_VARIABLE result_variable\n    OUTPUT_VARIABLE output\n    ERROR_VARIABLE output)\n\nif(result_variable)\n    message(FATAL_ERROR \"Testing juceaide failed:\\noutput: ${output}\")\nendif()\n\nmessage(STATUS \"Finished setting up juceaide\")\n```\n\n----------------------------------------\n\nTITLE: Setting Module Compile Definitions\nDESCRIPTION: CMake command to override JUCE module configuration options using target_compile_definitions.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(my_target PUBLIC NAME_OF_KEY=<value>)\n```\n\n----------------------------------------\n\nTITLE: Configuring JUCE Example Projects with CMake\nDESCRIPTION: Adds subdirectories for different types of JUCE example projects including AudioPlugin, ConsoleApp, and GuiApp components. This CMake configuration establishes the build hierarchy for these example applications.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/CMake/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(AudioPlugin)\nadd_subdirectory(ConsoleApp)\nadd_subdirectory(GuiApp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Release Compiler Options for JUCE\nDESCRIPTION: Sets up compiler warning flags and options for release builds of the JUCE framework. Uses the same comprehensive set of warnings as debug builds to maintain code quality in production.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/DemoRunner/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif( JUCE_BUILD_CONFIGURATION MATCHES \"RELEASE\" )\n    target_compile_options( ${BINARY_NAME} PRIVATE -Wall -Wcast-align -Wfloat-equal -Wno-ignored-qualifiers -Wsign-compare -Wsign-conversion -Wstrict-aliasing -Wswitch-enum -Wuninitialized -Wunreachable-code -Wunused-parameter -Wmissing-field-initializers -Wshadow-all -Wshorten-64-to-32 -Wconversion -Wint-conversion -Wconditional-uninitialized -Wconstant-conversion -Wbool-conversion -Wextra-semi -Wshift-sign-overflow -Wmissing-prototypes -Wnullable-to-nonnull-conversion -Wpedantic -Wdeprecated -Woverloaded-virtual -Wreorder -Wzero-as-null-pointer-constant -Wunused-private-field -Winconsistent-missing-destructor-override \"-fsigned-char\" )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling Source Grouping for JUCE Modules in CMake\nDESCRIPTION: Configuration for enabling module source files to be browsable in IDE projects by setting the JUCE_ENABLE_MODULE_SOURCE_GROUPS option. This should be used with the global USE_FOLDERS property.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(GLOBAL PROPERTY USE_FOLDERS YES)\n```\n\n----------------------------------------\n\nTITLE: Linking libraries and JUCE modules\nDESCRIPTION: Links the executable with the required JUCE modules and configuration flags. This includes the GUI extra module and recommended configuration, LTO, and warning flags.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/CMake/GuiApp/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(GuiAppExample\n    PRIVATE\n        # GuiAppData            # If we'd created a binary data target, we'd link to it here\n        juce::juce_gui_extra\n    PUBLIC\n        juce::juce_recommended_config_flags\n        juce::juce_recommended_lto_flags\n        juce::juce_recommended_warning_flags)\n```\n\n----------------------------------------\n\nTITLE: Creating JUCE Targets in CMake\nDESCRIPTION: These functions create JUCE targets for GUI apps, console apps, and plugins. They accept a target name and optional key-value pairs for additional configuration.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\njuce_add_gui_app(<target> [KEY value]...)\njuce_add_console_app(<target> [KEY value]...)\njuce_add_plugin(<target> [KEY value]...)\n```\n\n----------------------------------------\n\nTITLE: Adding Binary Data with `juce_add_binary_data`\nDESCRIPTION: This CMake function creates a static library that embeds the contents of the files passed as arguments. It adds a library target that can be linked into other targets using `target_link_libraries`. The header name and namespace can be customized.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\n\"juce_add_binary_data(<name>\n    [HEADER_NAME ...]\n    [NAMESPACE ...]\n    SOURCES ...)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options for Oboe Library\nDESCRIPTION: Configures compiler options for the Oboe library including C++ standard, warning flags, and optimization levels. Uses conditional flags based on build type, with stricter requirements for debug builds.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_devices/native/oboe/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Compile Flags:\n#     Enable -Werror when building debug config\n#     Enable -Ofast\ntarget_compile_options(oboe\n        PRIVATE\n        -std=c++17\n        -Wall\n        -Wextra-semi\n        -Wshadow\n        -Wshadow-field\n        \"$<$<CONFIG:RELEASE>:-Ofast>\"\n        \"$<$<CONFIG:DEBUG>:-O3>\"\n        \"$<$<CONFIG:DEBUG>:-Werror>\")\n\n# Enable logging of D,V for debug builds\ntarget_compile_definitions(oboe PUBLIC $<$<CONFIG:DEBUG>:OBOE_ENABLE_LOGGING=1>)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Modules for JUCE Audio Plugin\nDESCRIPTION: Links the necessary JUCE modules and sets recommended compiler flags for the audio plugin target.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/CMake/AudioPlugin/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(AudioPluginExample\n    PRIVATE\n        juce::juce_audio_utils\n    PUBLIC\n        juce::juce_recommended_config_flags\n        juce::juce_recommended_lto_flags\n        juce::juce_recommended_warning_flags)\n```\n\n----------------------------------------\n\nTITLE: Using find_package with JUCE in a Project\nDESCRIPTION: Commands to build a project that uses JUCE via find_package, specifying the JUCE installation path.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Go to project directory\ncd /path/to/my/project\n# Configure build, passing the JUCE install path you used earlier\ncmake -B cmake-build -DCMAKE_PREFIX_PATH=/path/to/JUCE/install\n# Build the project\ncmake --build cmake-build\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to JUCE Audio Plugin Target\nDESCRIPTION: Specifies the source files to be included in the audio plugin target using target_sources.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/CMake/AudioPlugin/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(AudioPluginExample\n    PRIVATE\n        PluginEditor.cpp\n        PluginProcessor.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Definitions\nDESCRIPTION: Adds preprocessor definitions to the target to disable web browser and CURL functionality which would otherwise be enabled by default in JUCE.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/CMake/ConsoleApp/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(ConsoleAppExample\n    PRIVATE\n        # JUCE_WEB_BROWSER and JUCE_USE_CURL would be on by default, but you might not need them.\n        JUCE_WEB_BROWSER=0  # If you remove this, add `NEEDS_WEB_BROWSER TRUE` to the `juce_add_console_app` call\n        JUCE_USE_CURL=0)\n```\n\n----------------------------------------\n\nTITLE: Parsing VST3 Module Info JSON in C++\nDESCRIPTION: Demonstrates how to parse a moduleinfo.json file using ModuleInfoLib. Requires the file content to be loaded into a memory buffer first. Returns an optional ModuleInfo object containing the parsed data.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_processors/format_types/VST3_SDK/public.sdk/source/vst/moduleinfo/ReadMe.md#2025-04-21_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nauto moduleInfo = ModuleInfoLib::parseCompatibilityJson (std::string_view (buffer, bufferSize), &std::cerr);\n```\n\n----------------------------------------\n\nTITLE: Latency Calculation Algorithm in Audio Resampling\nDESCRIPTION: Pseudo-code implementation for calculating total latency in milliseconds, accounting for both FIR resampler latency and block size adaptation latency. Takes into consideration output/input scenarios and different callback configurations.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_devices/native/oboe/src/common/README.md#2025-04-21_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\nlatencyMillis = 0\ntargetRate = isOutput ? deviceRate : applicationRate\n// Add latency from FIR\nlatencyMillis += numTaps * 1000.0 / targetRate\n// Add latency from block size adaptation\nadapterSize = (callbackSize > 0) ? callbackSize : burstSize\nif (isOutput && isCallbackUsed) latencyMillis += adapterSize * 1000.0 / deviceRate\nelse if (isInput && isCallbackUsed) latencyMillis += adapterSize * 1000.0 / applicationRate\nelse if (isInput && !isCallbackUsed) latencyMillis += adapterSize * 1000.0 / deviceRate\n```\n\n----------------------------------------\n\nTITLE: Adding Binary Resources\nDESCRIPTION: Adds binary audio resources and assets to the project.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPluginHost/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\njuce_add_binary_data(AudioPluginHostData SOURCES\n    ../../examples/Assets/cassette_recorder.wav\n    ../../examples/Assets/cello.wav\n    ../../examples/Assets/guitar_amp.wav\n    ../../examples/Assets/proaudio.path\n    ../../examples/Assets/reverb_ir.wav\n    ../../examples/Assets/singing.ogg)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to DemoRunner Target in CMake\nDESCRIPTION: Specifies the JUCE libraries to be linked with the DemoRunner target, including various JUCE modules and recommended configuration flags.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/DemoRunner/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(DemoRunner PRIVATE\n    juce::juce_analytics\n    juce::juce_animation\n    juce::juce_audio_utils\n    juce::juce_box2d\n    juce::juce_dsp\n    juce::juce_opengl\n    juce::juce_osc\n    juce::juce_product_unlocking\n    juce::juce_video\n    juce::juce_javascript\n    juce::juce_recommended_config_flags\n    juce::juce_recommended_lto_flags\n    juce::juce_recommended_warning_flags)\n```\n\n----------------------------------------\n\nTITLE: Configuring JUCE Audio Performance Test Application with CMake\nDESCRIPTION: Sets up a GUI application using JUCE framework with specific bundle ID, source files, compile definitions, and library dependencies. The configuration disables CURL and web browser functionality while linking necessary JUCE audio and utility libraries.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPerformanceTest/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\njuce_add_gui_app(AudioPerformanceTest BUNDLE_ID com.juce.AudioPerformanceTest)\n\njuce_generate_juce_header(AudioPerformanceTest)\n\ntarget_sources(AudioPerformanceTest PRIVATE\n    Source/Main.cpp)\n\ntarget_compile_definitions(AudioPerformanceTest PRIVATE\n    JUCE_USE_CURL=0 JUCE_WEB_BROWSER=0)\n\ntarget_link_libraries(AudioPerformanceTest PRIVATE\n    juce::juce_audio_utils\n    juce::juce_recommended_config_flags\n    juce::juce_recommended_lto_flags\n    juce::juce_recommended_warning_flags)\n```\n\n----------------------------------------\n\nTITLE: Creating a GUI application target with JUCE\nDESCRIPTION: Creates an executable target using JUCE's GUI application function. This sets up a CMake target with additional JUCE-specific properties and configurations.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/CMake/GuiApp/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\njuce_add_gui_app(GuiAppExample\n    # VERSION ...                       # Set this if the app version is different to the project version\n    # ICON_BIG ...                      # ICON_* arguments specify a path to an image file to use as an icon\n    # ICON_SMALL ...\n    # DOCUMENT_EXTENSIONS ...           # Specify file extensions that should be associated with this app\n    # COMPANY_NAME ...                  # Specify the name of the app's author\n    PRODUCT_NAME \"Gui App Example\")     # The name of the final executable, which can differ from the target name\n```\n\n----------------------------------------\n\nTITLE: Enabling Plugin Copy Step with `juce_enable_copy_plugin_step`\nDESCRIPTION: This CMake function manually enables post-build copying of a plugin, providing an alternative to the `JUCE_COPY_PLUGIN_AFTER_BUILD` property. It's used when extra build steps, such as signing, are required before the plugin is installed.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\n\"juce_enable_copy_plugin_step(<target>)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building juceaide Tool in CMake\nDESCRIPTION: This snippet sets up the juceaide tool as a console application, configures its source files, compile definitions, and linked libraries. It also exports the target for use in other parts of the build system.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/Build/juceaide/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(JUCE_BUILD_HELPER_TOOLS)\n    juce_add_console_app(juceaide _NO_RESOURCERC)\n\n    target_sources(juceaide PRIVATE Main.cpp)\n\n    target_compile_definitions(juceaide PRIVATE\n        JUCE_DISABLE_JUCE_VERSION_PRINTING=1\n        JUCE_USE_CURL=0\n        JUCE_SILENCE_XCODE_15_LINKER_WARNING=1)\n\n    target_link_libraries(juceaide PRIVATE\n        juce::juce_build_tools\n        juce::juce_recommended_config_flags\n        juce::juce_recommended_lto_flags\n        juce::juce_recommended_warning_flags)\n\n    set_target_properties(juceaide PROPERTIES MSVC_RUNTIME_LIBRARY \"MultiThreaded\")\n\n    export(TARGETS juceaide\n           NAMESPACE juce_tools::\n           FILE \"${JUCE_BINARY_DIR}/JUCEToolsExport.cmake\")\nelse()\n    # ... (cross-compilation setup)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Updating loadImpulseResponse Method Parameters in Convolution Class - C++\nDESCRIPTION: Changes were made to the member function loadImpulseResponse of the Convolution class to accept enum class parameters instead of bool, improving code readability and usability. The function overloads copyAndLoadImpulseResponseFromBlock and copyAndLoadImpulseResponseFromBuffer were also removed.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\n// Updated loadImpulseResponse function\nvoid loadImpulseResponse (const File& file, Stereo stereo, Trim trim, int numChannels, Normalise normalise);\n// Removed overloads\n// void copyAndLoadImpulseResponseFromBlock(/* params */);\n// void copyAndLoadImpulseResponseFromBuffer(/* params */);\n```\n\n----------------------------------------\n\nTITLE: AudioChannelSet Layout Function Updates\nDESCRIPTION: Updates to 9.x.x channel layout functions to correspond to VST3 wide speaker layouts instead of standard layouts. Affects create9point0point4 and related variants.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nAudioChannelSet::create9point0point4\nAudioChannelSet::create9point1point4\nAudioChannelSet::create9point0point6\nAudioChannelSet::create9point1point6\n```\n\n----------------------------------------\n\nTITLE: Plugin Installation and Copy Settings in JUCE\nDESCRIPTION: Configuration options for plugin installation paths and copy behavior after build completion\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nCOPY_PLUGIN_AFTER_BUILD\nVST_COPY_DIR\nVST3_COPY_DIR\nAAX_COPY_DIR\nAU_COPY_DIR\n```\n\n----------------------------------------\n\nTITLE: Enabling VST3 Manifest Step with `juce_enable_vst3_manifest_step`\nDESCRIPTION: This CMake function manually enables VST3 manifest generation, offering an alternative to setting `VST3_AUTO_MANIFEST` to TRUE. This is useful when additional build steps, like signing, must occur before the plugin can be loaded.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\n\"juce_enable_vst3_manifest_step(<target>)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring BinaryBuilder Console Application with CMake\nDESCRIPTION: Sets up a console application named BinaryBuilder using JUCE's CMake utilities. Configures source files, compiler definitions (disabling CURL and managing Xcode 15 linker warnings), and links required JUCE libraries.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/BinaryBuilder/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\njuce_add_console_app(BinaryBuilder)\n\njuce_generate_juce_header(BinaryBuilder)\n\ntarget_sources(BinaryBuilder PRIVATE Source/Main.cpp)\n\ntarget_compile_definitions(BinaryBuilder PRIVATE\n    JUCE_USE_CURL=0\n    # This is a temporary workaround to allow builds to complete on Xcode 15.\n    # Add -Wl,-ld_classic to the OTHER_LDFLAGS build setting if you need to\n    # deploy to older versions of macOS/iOS.\n    JUCE_SILENCE_XCODE_15_LINKER_WARNING=1)\n\ntarget_link_libraries(BinaryBuilder PRIVATE\n    juce::juce_core\n    juce::juce_recommended_config_flags\n    juce::juce_recommended_lto_flags\n    juce::juce_recommended_warning_flags)\n```\n\n----------------------------------------\n\nTITLE: Setting Projucer Compiler Definitions in CMake\nDESCRIPTION: Configures compiler definitions for the Projucer build, including CURL settings, assertion logging, and specific workarounds for Xcode 15.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/Projucer/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(Projucer PRIVATE\n    JUCE_ALLOW_STATIC_NULL_VARIABLES=0\n    JUCE_LOAD_CURL_SYMBOLS_LAZILY=1\n    JUCE_LOG_ASSERTIONS=1\n    JUCE_STRICT_REFCOUNTEDPOINTER=1\n    JUCE_USE_CURL=1\n    JUCE_WEB_BROWSER=0\n    JUCE_SILENCE_XCODE_15_LINKER_WARNING=1)\n```\n\n----------------------------------------\n\nTITLE: Adding Bundle Resources Directory with `juce_add_bundle_resources_directory`\nDESCRIPTION: This CMake function copies the entire directory at the specified location into an Apple bundle's resource directory. This simplifies the process of including resources like images, fonts, or data files within the application or plugin bundle.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\n\"juce_add_bundle_resources_directory(<target> <folder>)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Build Configuration-specific Definitions\nDESCRIPTION: Adds compile definitions based on the build configuration (Debug or Release) for JUCE modules and settings.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/DemoRunner/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(JUCE_BUILD_CONFIGURATION MATCHES \"DEBUG\")\n    add_definitions([[-DJUCE_PROJUCER_VERSION=0x80007]] [[-DJUCE_MODULE_AVAILABLE_juce_analytics=1]] [[-DJUCE_MODULE_AVAILABLE_juce_animation=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_basics=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_devices=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_formats=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_processors=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_utils=1]] [[-DJUCE_MODULE_AVAILABLE_juce_box2d=1]] [[-DJUCE_MODULE_AVAILABLE_juce_core=1]] [[-DJUCE_MODULE_AVAILABLE_juce_cryptography=1]] [[-DJUCE_MODULE_AVAILABLE_juce_data_structures=1]] [[-DJUCE_MODULE_AVAILABLE_juce_dsp=1]] [[-DJUCE_MODULE_AVAILABLE_juce_events=1]] [[-DJUCE_MODULE_AVAILABLE_juce_graphics=1]] [[-DJUCE_MODULE_AVAILABLE_juce_gui_basics=1]] [[-DJUCE_MODULE_AVAILABLE_juce_gui_extra=1]] [[-DJUCE_MODULE_AVAILABLE_juce_javascript=1]] [[-DJUCE_MODULE_AVAILABLE_juce_opengl=1]] [[-DJUCE_MODULE_AVAILABLE_juce_osc=1]] [[-DJUCE_MODULE_AVAILABLE_juce_product_unlocking=1]] [[-DJUCE_MODULE_AVAILABLE_juce_video=1]] [[-DJUCE_GLOBAL_MODULE_SETTINGS_INCLUDED=1]] [[-DJUCE_USE_MP3AUDIOFORMAT=1]] [[-DJUCE_PLUGINHOST_VST3=1]] [[-DJUCE_PLUGINHOST_LV2=1]] [[-DJUCE_ALLOW_STATIC_NULL_VARIABLES=0]] [[-DJUCE_STRICT_REFCOUNTEDPOINTER=1]] [[-DJUCE_USE_CAMERA=1]] [[-DJUCE_STANDALONE_APPLICATION=1]] [[-DJUCE_DEMO_RUNNER=1]] [[-DJUCE_UNIT_TESTS=1]] [[-DJUCE_PUSH_NOTIFICATIONS=1]] [[-DJUCER_ANDROIDSTUDIO_7F0E4A25=1]] [[-DJUCE_APP_VERSION=8.0.7]] [[-DJUCE_APP_VERSION_HEX=0x80007]] [[-DDEBUG=1]] [[-D_DEBUG=1]])\nelseif(JUCE_BUILD_CONFIGURATION MATCHES \"RELEASE\")\n    add_definitions([[-DJUCE_PROJUCER_VERSION=0x80007]] [[-DJUCE_MODULE_AVAILABLE_juce_analytics=1]] [[-DJUCE_MODULE_AVAILABLE_juce_animation=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_basics=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_devices=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_formats=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_processors=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_utils=1]] [[-DJUCE_MODULE_AVAILABLE_juce_box2d=1]] [[-DJUCE_MODULE_AVAILABLE_juce_core=1]] [[-DJUCE_MODULE_AVAILABLE_juce_cryptography=1]] [[-DJUCE_MODULE_AVAILABLE_juce_data_structures=1]] [[-DJUCE_MODULE_AVAILABLE_juce_dsp=1]] [[-DJUCE_MODULE_AVAILABLE_juce_events=1]] [[-DJUCE_MODULE_AVAILABLE_juce_graphics=1]] [[-DJUCE_MODULE_AVAILABLE_juce_gui_basics=1]] [[-DJUCE_MODULE_AVAILABLE_juce_gui_extra=1]] [[-DJUCE_MODULE_AVAILABLE_juce_javascript=1]] [[-DJUCE_MODULE_AVAILABLE_juce_opengl=1]] [[-DJUCE_MODULE_AVAILABLE_juce_osc=1]] [[-DJUCE_MODULE_AVAILABLE_juce_product_unlocking=1]] [[-DJUCE_MODULE_AVAILABLE_juce_video=1]] [[-DJUCE_GLOBAL_MODULE_SETTINGS_INCLUDED=1]] [[-DJUCE_USE_MP3AUDIOFORMAT=1]] [[-DJUCE_PLUGINHOST_VST3=1]] [[-DJUCE_PLUGINHOST_LV2=1]] [[-DJUCE_ALLOW_STATIC_NULL_VARIABLES=0]] [[-DJUCE_STRICT_REFCOUNTEDPOINTER=1]] [[-DJUCE_USE_CAMERA=1]] [[-DJUCE_STANDALONE_APPLICATION=1]] [[-DJUCE_DEMO_RUNNER=1]] [[-DJUCE_UNIT_TESTS=1]] [[-DJUCE_PUSH_NOTIFICATIONS=1]] [[-DJUCER_ANDROIDSTUDIO_7F0E4A25=1]] [[-DJUCE_APP_VERSION=8.0.7]] [[-DJUCE_APP_VERSION_HEX=0x80007]] [[-DNDEBUG=1]])\nelse()\n    message( FATAL_ERROR \"No matching build-configuration found.\" )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining JUCE Module Structure in C++\nDESCRIPTION: Demonstrates the file structure and naming conventions for JUCE modules, including the master header file and platform-specific source files.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/JUCE Module Format.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\njuce_core/juce_core.h\n\njuce_mymodule/juce_mymodule_1.cpp         <- compiled for all platforms\njuce_mymodule/juce_mymodule_2.cpp         <- compiled for all platforms\njuce_mymodule/juce_mymodule_mac.cpp       <- compiled for macOS and OSX platforms only\njuce_mymodule/juce_mymodule_windows.cpp   <- compiled for Windows platforms only\n```\n\n----------------------------------------\n\nTITLE: Setting JUCE Company Properties\nDESCRIPTION: Sets directory properties with JUCE company information including company name, website, email and copyright information. These properties are used throughout the build system.\nSOURCE: https://github.com/juce-framework/juce/blob/master/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(extras/Build/CMake/JUCEUtils.cmake)\n\nset_directory_properties(PROPERTIES\n    JUCE_COMPANY_NAME       \"JUCE\"\n    JUCE_COMPANY_WEBSITE    \"https://juce.com\"\n    JUCE_COMPANY_EMAIL      \"info@juce.com\"\n    JUCE_COMPANY_COPYRIGHT  \"Copyright (c) - Raw Material Software Limited\")\n```\n\n----------------------------------------\n\nTITLE: Generating JUCE Header with `juce_generate_juce_header`\nDESCRIPTION: This CMake function introspects the linked JUCE modules and generates a `JuceHeader.h` file. This file includes `#include` statements for each of the module headers and can optionally include a `using namespace juce` statement and a `ProjectInfo` block, which can be disabled through compile definitions.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\n\"juce_generate_juce_header(<target>)\"\n```\n\n----------------------------------------\n\nTITLE: Defining JUCE JNI Library and Source Files\nDESCRIPTION: Adds the JUCE JNI library target and specifies all the source files to be compiled into the library.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/DemoRunner/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library( ${BINARY_NAME}\n\n    SHARED\n\n    \"../../../Source/Demos/DemoPIPs1.cpp\"\n    \"../../../Source/Demos/DemoPIPs2.cpp\"\n    \"../../../Source/Demos/IntroScreen.h\"\n    \"../../../Source/Demos/JUCEDemos.cpp\"\n    \"../../../Source/Demos/JUCEDemos.h\"\n    \"../../../Source/UI/DemoContentComponent.cpp\"\n    \"../../../Source/UI/DemoContentComponent.h\"\n    \"../../../Source/UI/MainComponent.cpp\"\n    \"../../../Source/UI/MainComponent.h\"\n    \"../../../Source/UI/SettingsContent.h\"\n    \"../../../Source/Main.cpp\"\n    \"../../../Source/JUCEAppIcon.png\"\n    \"../../../../../modules/juce_analytics/analytics/juce_Analytics.cpp\"\n    \"../../../../../modules/juce_analytics/analytics/juce_Analytics.h\"\n    \"../../../../../modules/juce_analytics/analytics/juce_ButtonTracker.cpp\"\n    \"../../../../../modules/juce_analytics/analytics/juce_ButtonTracker.h\"\n    \"../../../../../modules/juce_analytics/destinations/juce_AnalyticsDestination.h\"\n    \"../../../../../modules/juce_analytics/destinations/juce_ThreadedAnalyticsDestination.cpp\"\n    \"../../../../../modules/juce_analytics/destinations/juce_ThreadedAnalyticsDestination.h\"\n    \"../../../../../modules/juce_analytics/juce_analytics.cpp\"\n    \"../../../../../modules/juce_analytics/juce_analytics.h\"\n    \"../../../../../modules/juce_animation/animation/juce_Animator.cpp\"\n    \"../../../../../modules/juce_animation/animation/juce_Animator.h\"\n    \"../../../../../modules/juce_animation/animation/juce_AnimatorSetBuilder.cpp\"\n    \"../../../../../modules/juce_animation/animation/juce_AnimatorSetBuilder.h\"\n    \"../../../../../modules/juce_animation/animation/juce_AnimatorUpdater.cpp\"\n    \"../../../../../modules/juce_animation/animation/juce_AnimatorUpdater.h\"\n    \"../../../../../modules/juce_animation/animation/juce_Easings.cpp\"\n    \"../../../../../modules/juce_animation/animation/juce_Easings.h\"\n    \"../../../../../modules/juce_animation/animation/juce_StaticAnimationLimits.h\"\n    \"../../../../../modules/juce_animation/animation/juce_ValueAnimatorBuilder.cpp\"\n    \"../../../../../modules/juce_animation/animation/juce_ValueAnimatorBuilder.h\"\n    \"../../../../../modules/juce_animation/animation/juce_VBlankAnimatorUpdater.h\"\n    \"../../../../../modules/juce_animation/detail/chromium/cubic_bezier.cc\"\n    \"../../../../../modules/juce_animation/detail/chromium/cubic_bezier.h\"\n    \"../../../../../modules/juce_animation/detail/juce_ArrayAndTupleOps.h\"\n    \"../../../../../modules/juce_animation/juce_animation.cpp\"\n    \"../../../../../modules/juce_animation/juce_animation.h\"\n    \"../../../../../modules/juce_audio_basics/audio_play_head/juce_AudioPlayHead.cpp\"\n    \"../../../../../modules/juce_audio_basics/audio_play_head/juce_AudioPlayHead.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioChannelSet.cpp\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioChannelSet.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioDataConverters.cpp\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioDataConverters.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioProcessLoadMeasurer.cpp\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioProcessLoadMeasurer.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioSampleBuffer.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_FloatVectorOperations.cpp\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_FloatVectorOperations.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMP.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMP_test.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPacket.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPackets.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPBytesOnGroup.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPConversion.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPConverters.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPDeviceInfo.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPDispatcher.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPFactory.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPIterator.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPIterator.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPMidi1ToBytestreamTranslator.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPMidi1ToMidi2DefaultTranslator.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPMidi1ToMidi2DefaultTranslator.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPProtocols.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPReceiver.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPSysEx7.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPSysEx7.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPUtils.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring the Oboe Library Target\nDESCRIPTION: Creates the Oboe library target and configures include directories. This establishes the public API headers in the 'include' directory and private implementation headers in the 'src' directory.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_devices/native/oboe/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(oboe ${oboe_sources})\n\n# Specify directories which the compiler should look for headers\ntarget_include_directories(oboe\n        PRIVATE src\n        PUBLIC include)\n```\n\n----------------------------------------\n\nTITLE: Configuring JUCE Audio Plugin Host Application\nDESCRIPTION: Sets up the main Audio Plugin Host application with basic configuration including bundle ID and permissions.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPluginHost/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\njuce_add_gui_app(AudioPluginHost\n    BUNDLE_ID                       com.juce.pluginhost\n    ICON_BIG                        \"${CMAKE_CURRENT_SOURCE_DIR}/Source/JUCEAppIcon.png\"\n    MICROPHONE_PERMISSION_ENABLED   TRUE\n    PLUGINHOST_AU                   TRUE)\n```\n\n----------------------------------------\n\nTITLE: Build Configuration Settings\nDESCRIPTION: Configures build settings for debug and release modes including compiler definitions and LTO optimization for release builds.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPluginHost/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(JUCE_BUILD_CONFIGURATION MATCHES \"DEBUG\")\n    add_definitions([[-DJUCE_PROJUCER_VERSION=0x80007]] [[-DDEBUG=1]] [[-D_DEBUG=1]])\nelseif(JUCE_BUILD_CONFIGURATION MATCHES \"RELEASE\")\n    add_definitions([[-DJUCE_PROJUCER_VERSION=0x80007]] [[-DNDEBUG=1]])\n    if(NOT (ANDROID_ABI STREQUAL \"mips\" OR ANDROID_ABI STREQUAL \"mips64\"))\n        set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} -flto\")\n        set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -flto\")\n        set(CMAKE_EXE_LINKER_FLAGS_RELEASE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE} -flto\")\n    endif()\nelse()\n    message( FATAL_ERROR \"No matching build-configuration found.\" )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Oboe Source Files for Compilation\nDESCRIPTION: Lists all source files that need to be compiled for the Oboe audio library. The files are organized by functionality including AAudio, common utilities, FIFO controllers, flowgraph components, and OpenSLES implementations.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_devices/native/oboe/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset (oboe_sources\n    src/aaudio/AAudioLoader.cpp\n    src/aaudio/AudioStreamAAudio.cpp\n    src/common/AdpfWrapper.cpp\n    src/common/AudioSourceCaller.cpp\n    src/common/AudioStream.cpp\n    src/common/AudioStreamBuilder.cpp\n    src/common/DataConversionFlowGraph.cpp\n    src/common/FilterAudioStream.cpp\n    src/common/FixedBlockAdapter.cpp\n    src/common/FixedBlockReader.cpp\n    src/common/FixedBlockWriter.cpp\n    src/common/LatencyTuner.cpp\n    src/common/OboeExtensions.cpp\n    src/common/SourceFloatCaller.cpp\n    src/common/SourceI16Caller.cpp\n    src/common/SourceI24Caller.cpp\n    src/common/SourceI32Caller.cpp\n    src/common/Utilities.cpp\n    src/common/QuirksManager.cpp\n    src/fifo/FifoBuffer.cpp\n    src/fifo/FifoController.cpp\n    src/fifo/FifoControllerBase.cpp\n    src/fifo/FifoControllerIndirect.cpp\n    src/flowgraph/FlowGraphNode.cpp\n    src/flowgraph/ChannelCountConverter.cpp\n    src/flowgraph/ClipToRange.cpp\n    src/flowgraph/Limiter.cpp\n    src/flowgraph/ManyToMultiConverter.cpp\n    src/flowgraph/MonoBlend.cpp\n    src/flowgraph/MonoToMultiConverter.cpp\n    src/flowgraph/MultiToManyConverter.cpp\n    src/flowgraph/MultiToMonoConverter.cpp\n    src/flowgraph/RampLinear.cpp\n    src/flowgraph/SampleRateConverter.cpp\n    src/flowgraph/SinkFloat.cpp\n    src/flowgraph/SinkI16.cpp\n    src/flowgraph/SinkI24.cpp\n    src/flowgraph/SinkI32.cpp\n    src/flowgraph/SinkI8_24.cpp\n    src/flowgraph/SourceFloat.cpp\n    src/flowgraph/SourceI16.cpp\n    src/flowgraph/SourceI24.cpp\n    src/flowgraph/SourceI32.cpp\n    src/flowgraph/SourceI8_24.cpp\n    src/flowgraph/resampler/IntegerRatio.cpp\n    src/flowgraph/resampler/LinearResampler.cpp\n    src/flowgraph/resampler/MultiChannelResampler.cpp\n    src/flowgraph/resampler/PolyphaseResampler.cpp\n    src/flowgraph/resampler/PolyphaseResamplerMono.cpp\n    src/flowgraph/resampler/PolyphaseResamplerStereo.cpp\n    src/flowgraph/resampler/SincResampler.cpp\n    src/flowgraph/resampler/SincResamplerStereo.cpp\n    src/opensles/AudioInputStreamOpenSLES.cpp\n    src/opensles/AudioOutputStreamOpenSLES.cpp\n    src/opensles/AudioStreamBuffered.cpp\n    src/opensles/AudioStreamOpenSLES.cpp\n    src/opensles/EngineOpenSLES.cpp\n    src/opensles/OpenSLESUtilities.cpp\n    src/opensles/OutputMixerOpenSLES.cpp\n    src/common/StabilizedCallback.cpp\n    src/common/Trace.cpp\n    src/common/Version.cpp\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring JUCE GUI Application in CMake\nDESCRIPTION: Sets up the DemoRunner GUI application with various properties including bundle ID, icon, permissions, and screen orientations.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/DemoRunner/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\njuce_add_gui_app(DemoRunner\n    BUNDLE_ID                       com.juce.demorunner\n    ICON_BIG                        ${CMAKE_CURRENT_SOURCE_DIR}/Source/JUCEAppIcon.png\n    NEEDS_CURL                      TRUE\n    NEEDS_WEB_BROWSER               TRUE\n    MICROPHONE_PERMISSION_ENABLED   TRUE\n    CAMERA_PERMISSION_ENABLED       TRUE\n    BLUETOOTH_PERMISSION_ENABLED    TRUE\n    FILE_SHARING_ENABLED            TRUE\n    DOCUMENT_BROWSER_ENABLED        TRUE\n    REQUIRES_FULL_SCREEN            FALSE\n    IPAD_SCREEN_ORIENTATIONS        UIInterfaceOrientationPortrait\n                                    UIInterfaceOrientationPortraitUpsideDown\n                                    UIInterfaceOrientationLandscapeLeft\n                                    UIInterfaceOrientationLandscapeRight\n    IPHONE_SCREEN_ORIENTATIONS      UIInterfaceOrientationPortrait\n                                    UIInterfaceOrientationPortraitUpsideDown\n                                    UIInterfaceOrientationLandscapeLeft\n                                    UIInterfaceOrientationLandscapeRight)\n```\n\n----------------------------------------\n\nTITLE: Refactoring ASIOAudioIODevice Latency Methods - C++\nDESCRIPTION: Removed a workaround from ASIOAudioIODevice::getOutputLatencyInSamples() and ASIOAudioIODevice::getInputLatencyInSamples() that added an arbitrary latency to compensate for outdated drivers, ensuring more accurate reporting from the original driver values.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\n// Updated methods to report correct latencies\nint getOutputLatencyInSamples();\nint getInputLatencyInSamples();\n```\n\n----------------------------------------\n\nTITLE: Configuring macOS Runtime Settings in JUCE\nDESCRIPTION: Configuration options for macOS hardened runtime and sandbox settings including entitlements and file access permissions\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nHARDENED_RUNTIME_OPTIONS\nAPP_SANDBOX_ENABLED\nAPP_SANDBOX_INHERIT\nAPP_SANDBOX_OPTIONS\nAPP_SANDBOX_FILE_ACCESS_HOME_RO\nAPP_SANDBOX_FILE_ACCESS_HOME_RW\nAPP_SANDBOX_FILE_ACCESS_ABS_RO\nAPP_SANDBOX_FILE_ACCESS_ABS_RW\nAPP_SANDBOX_EXCEPTION_IOKIT\n```\n\n----------------------------------------\n\nTITLE: Defining the project and version\nDESCRIPTION: Sets up the project name and version information. This establishes helpful variables for source/binary directories and versioning.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/CMake/GuiApp/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(GUI_APP_EXAMPLE VERSION 0.0.1)\n```\n\n----------------------------------------\n\nTITLE: Adding Oboe Subdirectory and CPU Features Library\nDESCRIPTION: Adds the Oboe audio library as a subdirectory and sets up the CPU features library from the Android NDK.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/DemoRunner/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(OBOE_DIR \"../../../../../modules/juce_audio_devices/native/oboe\")\n\nadd_subdirectory (${OBOE_DIR} ./oboe)\n\nadd_library(\"cpufeatures\" STATIC \"${ANDROID_NDK}/sources/android/cpufeatures/cpu-features.c\")\nset_source_files_properties(\"${ANDROID_NDK}/sources/android/cpufeatures/cpu-features.c\" PROPERTIES COMPILE_FLAGS \"-Wno-sign-conversion -Wno-gnu-statement-expression\")\n```\n\n----------------------------------------\n\nTITLE: Matrix3D constructor change\nDESCRIPTION: The Matrix3D(Vector3D<Type> vector) constructor has been replaced with an explicit static Matrix3D fromTranslation(Vector3D<Type> vector) function, and a bug in the multiplication operator has been addressed. Code using the old constructor must use the new static function, and code that relied on the order of multiplication operations will need to have the order of the arguments reversed.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Defining Project Information\nDESCRIPTION: Initializes the project with a name and version number, setting up basic project variables.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/CMake/ConsoleApp/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(CONSOLE_APP_EXAMPLE VERSION 0.0.1)\n```\n\n----------------------------------------\n\nTITLE: Configuring JUCE Project with CMake\nDESCRIPTION: This CMakeLists.txt file is automatically generated by the Projucer tool for configuring a JUCE project. It likely includes project-specific settings, dependencies, and build instructions for the JUCE framework.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/DemoRunner/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Automatically generated CMakeLists, created by the Projucer\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies and Installing Oboe Library\nDESCRIPTION: Links necessary dependencies and configures installation rules for the Oboe library. The library and headers are installed in Android ABI-specific directories to support proper multi-architecture deployment.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_devices/native/oboe/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(oboe PRIVATE log OpenSLES)\n\n# When installing oboe put the libraries in the lib/<ABI> folder e.g. lib/arm64-v8a\ninstall(TARGETS oboe\n        LIBRARY DESTINATION lib/${ANDROID_ABI}\n        ARCHIVE DESTINATION lib/${ANDROID_ABI})\n\n# Also install the headers\ninstall(DIRECTORY include/oboe DESTINATION include)\n```\n\n----------------------------------------\n\nTITLE: Implementing AAX Plugin ID Override in JUCE C++\nDESCRIPTION: Workaround to manually override AAX plugin IDs for specific bus layouts using the AudioProcessor::getAAXPluginIDForMainBusConfig callback. This addresses issues with bus layout configuration changes in JUCE 4.3.0.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_25\n\nLANGUAGE: cpp\nCODE:\n```\nclass MyAudioProcessor : public AudioProcessor\n{\n    // ...\n\n    int getAAXPluginIDForMainBusConfig (const AudioChannelSet& mainInputLayout,\n                                         const AudioChannelSet& mainOutputLayout) const override\n    {\n        // Implement custom logic to return the appropriate AAX plugin ID\n    }\n\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Adding JUCE Modules in CMake\nDESCRIPTION: This CMake snippet adds a comprehensive set of JUCE modules to a project. It specifies the installation path, sets an alias namespace, and lists all the JUCE modules to be included.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\njuce_add_modules(\n    INSTALL_PATH \"include/JUCE-${JUCE_VERSION}/modules\"\n    ALIAS_NAMESPACE juce\n    juce_analytics\n    juce_animation\n    juce_audio_basics\n    juce_audio_devices\n    juce_audio_formats\n    juce_audio_plugin_client\n    juce_audio_processors\n    juce_audio_utils\n    juce_box2d\n    juce_core\n    juce_cryptography\n    juce_data_structures\n    juce_dsp\n    juce_events\n    juce_graphics\n    juce_gui_basics\n    juce_gui_extra\n    juce_javascript\n    juce_midi_ci\n    juce_opengl\n    juce_osc\n    juce_product_unlocking\n    juce_video)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Definitions for NetworkGraphicsDemo\nDESCRIPTION: Defines compiler preprocessor definitions for the NetworkGraphicsDemo application. Specifically disables CURL and web browser functionality in the build.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/NetworkGraphicsDemo/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(NetworkGraphicsDemo PRIVATE\n    JUCE_USE_CURL=0 JUCE_WEB_BROWSER=0)\n```\n\n----------------------------------------\n\nTITLE: Resampler Quality Settings Configuration\nDESCRIPTION: Definition of numTaps values for different quality settings in the MultiChannelResampler implementation. Values range from 2 taps for fastest processing to 32 taps for best quality.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_devices/native/oboe/src/common/README.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nFastest: 2\nLow: 4\nMedium: 8\nHigh: 16\nBest: 32\n```\n\n----------------------------------------\n\nTITLE: Adding source files to the target\nDESCRIPTION: Adds the necessary source files to the GuiAppExample target. This is where you specify all the .cpp files that will be compiled into the application.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/CMake/GuiApp/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(GuiAppExample\n    PRIVATE\n        Main.cpp\n        MainComponent.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Oboe Audio Library Project with CMake\nDESCRIPTION: Sets up the CMake project for the Oboe audio library, defining the minimum required CMake version and project name. This establishes the foundation for the build configuration.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_devices/native/oboe/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.4.1)\n\n# Set the name of the project and store it in PROJECT_NAME. Also set the following variables:\n# PROJECT_SOURCE_DIR (usually the root directory where Oboe has been cloned e.g.)\n# PROJECT_BINARY_DIR (usually the containing project's binary directory,\n# e.g. ${OBOE_HOME}/samples/RhythmGame/.externalNativeBuild/cmake/ndkExtractorDebug/x86/oboe-bin)\nproject(oboe)\n```\n\n----------------------------------------\n\nTITLE: Adding JUCE Example Subdirectories for Different Categories\nDESCRIPTION: Adds various subdirectories for different categories of JUCE examples, including Audio, DSP, GUI, Plugins, and Utilities.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Audio)\nadd_subdirectory(DSP)\nadd_subdirectory(GUI)\nadd_subdirectory(Plugins)\nadd_subdirectory(Utilities)\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Parameter IDs in JUCE C++\nDESCRIPTION: Workaround to enable JUCE_FORCE_USE_LEGACY_PARAM_IDS in the juce_audio_plugin_client module config to address issues with parameter identification changes in JUCE 4.2.1.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_26\n\nLANGUAGE: cpp\nCODE:\n```\nJUCE_FORCE_USE_LEGACY_PARAM_IDS=1\n```\n\n----------------------------------------\n\nTITLE: Installing JUCE Plugin Format Helper Tools\nDESCRIPTION: Adds and installs helper targets for LV2 and VST3 plugin manifest generation. These tools are used to generate appropriate manifest files for plugins built with JUCE in these formats.\nSOURCE: https://github.com/juce-framework/juce/blob/master/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif((\"${CMAKE_SOURCE_DIR}\" STREQUAL \"${JUCE_SOURCE_DIR}\") AND (NOT JUCE_BUILD_HELPER_TOOLS))\n    _juce_add_lv2_manifest_helper_target()\n\n    if(TARGET juce_lv2_helper)\n        install(TARGETS juce_lv2_helper EXPORT LV2_HELPER DESTINATION \"bin/JUCE-${JUCE_VERSION}\")\n        install(EXPORT LV2_HELPER NAMESPACE juce:: DESTINATION \"${JUCE_INSTALL_DESTINATION}\")\n    endif()\n\n    _juce_add_vst3_manifest_helper_target()\n\n    if(TARGET juce_vst3_helper)\n        install(TARGETS juce_vst3_helper EXPORT VST3_HELPER DESTINATION \"bin/JUCE-${JUCE_VERSION}\")\n        install(EXPORT VST3_HELPER NAMESPACE juce:: DESTINATION \"${JUCE_INSTALL_DESTINATION}\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking with Recommended Warning Flags in JUCE\nDESCRIPTION: This snippet shows how to link a target with the `juce::juce_recommended_warning_flags` target to enable the recommended JUCE warnings during the build process. It utilizes the `target_link_libraries` command with `PUBLIC` visibility to ensure that the flags are inherited by dependent targets, such as plugin wrappers.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(myTarget PUBLIC juce::juce_recommended_warning_flags)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for DemoRunner in CMake\nDESCRIPTION: Defines various compile-time definitions for the DemoRunner target, including JUCE-specific settings and feature flags.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/DemoRunner/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(DemoRunner PRIVATE\n    PIP_JUCE_EXAMPLES_DIRECTORY_STRING=\"${JUCE_SOURCE_DIR}/examples\"\n    JUCE_ALLOW_STATIC_NULL_VARIABLES=0\n    JUCE_CONTENT_SHARING=1\n    JUCE_DEMO_RUNNER=1\n    JUCE_PLUGINHOST_LV2=1\n    JUCE_PLUGINHOST_VST3=1\n    JUCE_PUSH_NOTIFICATIONS=1\n    JUCE_STRICT_REFCOUNTEDPOINTER=1\n    JUCE_UNIT_TESTS=1\n    JUCE_USE_CAMERA=1\n    JUCE_USE_CURL=1\n    JUCE_USE_MP3AUDIOFORMAT=1\n    JUCE_WEB_BROWSER=1\n    JUCE_SILENCE_XCODE_15_LINKER_WARNING=1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Android CMake Project for JUCE JNI Library\nDESCRIPTION: Sets up a CMake build configuration for JUCE JNI library on Android platforms. The configuration includes minimum CMake version, project name, binary name, and important paths like the Oboe audio library directory.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/NetworkGraphicsDemo/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.22)\n\nproject(juce_jni_project)\n\nset(BINARY_NAME \"juce_jni\")\n\nset(OBOE_DIR \"../../../../../modules/juce_audio_devices/native/oboe\")\n\nadd_subdirectory (${OBOE_DIR} ./oboe)\n```\n\n----------------------------------------\n\nTITLE: Constructing JSON::FormatOptions Object for DynamicObject::writeAsJSON\nDESCRIPTION: This code snippet demonstrates how to construct a JSON::FormatOptions object in C++ used in the updated version of DynamicObject::writeAsJSON. Requires JSON::FormatOptions class with methods for setting indent level, spacing, and decimal places.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nJSON::FormatOptions{}.withIndentLevel(indentLevel)\n                     .withSpacing(allOnOneLine ? JSON::Spacing::singleLine\n                                                : JSON::Spacing::multiLine)\n                     .withMaxDecimalPlaces(maximumDecimalPlaces);\n```\n\n----------------------------------------\n\nTITLE: Defining JUCE Shared Library with Source Files\nDESCRIPTION: Creates the shared library target for the JUCE Android JNI interface with all necessary source files. Includes the main application files and JUCE audio basics module sources.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPerformanceTest/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library( ${BINARY_NAME}\n\n    SHARED\n\n    \"../../../Source/Main.cpp\"\n    \"../../../Source/MainComponent.h\"\n    \"../../../../../modules/juce_audio_basics/audio_play_head/juce_AudioPlayHead.cpp\"\n    \"../../../../../modules/juce_audio_basics/audio_play_head/juce_AudioPlayHead.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioChannelSet.cpp\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioChannelSet.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioDataConverters.cpp\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioDataConverters.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioProcessLoadMeasurer.cpp\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioProcessLoadMeasurer.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioSampleBuffer.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_FloatVectorOperations.cpp\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_FloatVectorOperations.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMP.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMP_test.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPacket.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPackets.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPBytesOnGroup.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPConversion.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPConverters.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPDeviceInfo.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPDispatcher.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPFactory.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPIterator.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPIterator.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPMidi1ToBytestreamTranslator.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPMidi1ToMidi2DefaultTranslator.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPMidi1ToMidi2DefaultTranslator.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPProtocols.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPReceiver.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPSysEx7.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPSysEx7.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPUtils.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPUtils.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPView.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPView.h\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiBuffer.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiBuffer.h\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiDataConcatenator.h\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiFile.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiFile.h\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiKeyboardState.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiKeyboardState.h\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiMessage.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiMessage.h\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiMessageSequence.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiMessageSequence.h\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiRPN.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiRPN.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEInstrument.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEInstrument.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEMessages.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEMessages.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPENote.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPENote.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPESynthesiser.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPESynthesiser.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPESynthesiserBase.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPESynthesiserBase.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPESynthesiserVoice.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPESynthesiserVoice.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEUtils.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEUtils.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEValue.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEValue.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEZoneLayout.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEZoneLayout.h\"\n    \"../../../../../modules/juce_audio_basics/native/juce_AudioWorkgroup_mac.h\"\n    \"../../../../../modules/juce_audio_basics/native/juce_CoreAudioLayouts_mac.h\"\n    \"../../../../../modules/juce_audio_basics/native/juce_CoreAudioTimeConversions_mac.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_AudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_BufferingAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_BufferingAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_ChannelRemappingAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_ChannelRemappingAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_IIRFilterAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_IIRFilterAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_MemoryAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_MemoryAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_MixerAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_MixerAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_PositionableAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_PositionableAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_ResamplingAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_ResamplingAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_ReverbAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_ReverbAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_ToneGeneratorAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_ToneGeneratorAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/synthesisers/juce_Synthesiser.cpp\"\n    \"../../../../../modules/juce_audio_basics/synthesisers/juce_Synthesiser.h\"\n    \"../../../../../modules/juce_audio_basics/utilities/juce_ADSR.h\"\n    \"../../../../../modules/juce_audio_basics/utilities/juce_ADSR_test.cpp\"\n```\n\n----------------------------------------\n\nTITLE: AudioIODeviceCallback::audioDeviceIOCallback() Removal\nDESCRIPTION: The function AudioIODeviceCallback::audioDeviceIOCallback() has been removed. Affected classes should override audioDeviceIOCallbackWithContext() instead. This consolidates audio callback handling and provides additional context.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Executing CMake Commands for juceaide Configuration in CMake\nDESCRIPTION: This snippet executes CMake commands to configure and build the juceaide tool. It sets up the build directory, passes necessary arguments, and handles potential errors during the configuration and build processes.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/Build/juceaide/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nexecute_process(COMMAND \"${CMAKE_COMMAND}\"\n        \".\"\n        \"-B${JUCE_BINARY_DIR}/tools\"\n        \"-G${CMAKE_GENERATOR}\"\n        \"-DCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_PROGRAM}\"\n        \"-DCMAKE_CONFIGURATION_TYPES=Custom\"\n        \"-DCMAKE_BUILD_TYPE=Custom\"\n        \"-DJUCE_BUILD_HELPER_TOOLS=ON\"\n        \"-DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}\"\n        ${PASSTHROUGH_ARGS}\n    WORKING_DIRECTORY \"${JUCE_SOURCE_DIR}\"\n    OUTPUT_VARIABLE command_output\n    ERROR_VARIABLE command_output\n    RESULT_VARIABLE result_variable)\n\nif(result_variable)\n    message(FATAL_ERROR \"Failed to configure juceaide\\n${command_output}\")\nendif()\n\nmessage(STATUS \"Building juceaide\")\n\nexecute_process(COMMAND \"${CMAKE_COMMAND}\"\n        --build \"${JUCE_BINARY_DIR}/tools\"\n        --config Custom\n    OUTPUT_VARIABLE command_output\n    ERROR_VARIABLE command_output\n    RESULT_VARIABLE result_variable)\n\nif(result_variable)\n    message(FATAL_ERROR \"Failed to build juceaide\\n${command_output}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for JUCE Audio Plugin\nDESCRIPTION: Sets up the basic CMake project configuration, including minimum CMake version and project name/version.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/CMake/AudioPlugin/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.22)\n\nproject(AUDIO_PLUGIN_EXAMPLE VERSION 0.0.1)\n```\n\n----------------------------------------\n\nTITLE: AudioPlayHead Function Deprecation\nDESCRIPTION: AudioPlayHead::getCurrentPosition() has been deprecated and replaced with AudioPlayHead::getPosition(). Classes deriving from AudioPlayHead must now override getPosition() instead of getCurrentPosition(), and code that used to use the playhead's CurrentPositionInfo must switch to using the new PositionInfo type.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version Requirement\nDESCRIPTION: Specifies the minimum CMake version required for this project to ensure compatibility with the CMake features being used.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/CMake/ConsoleApp/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.22)\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform-Aware PIP Addition Function in CMake\nDESCRIPTION: Defines the _juce_add_pips function that handles adding Plugin-in-Plugins while managing platform compatibility. The function scans for header files and excludes certain demos based on the current platform or missing dependencies.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(_juce_add_pips)\n    file(GLOB headers\n        CONFIGURE_DEPENDS LIST_DIRECTORIES false\n        \"${CMAKE_CURRENT_SOURCE_DIR}/*.h\")\n\n    if((CMAKE_SYSTEM_NAME STREQUAL \"Linux\") OR (CMAKE_SYSTEM_NAME MATCHES \".*BSD\"))\n        list(REMOVE_ITEM headers\n            \"${CMAKE_CURRENT_SOURCE_DIR}/CameraDemo.h\"\n            \"${CMAKE_CURRENT_SOURCE_DIR}/PushNotificationsDemo.h\"\n            \"${CMAKE_CURRENT_SOURCE_DIR}/VideoDemo.h\")\n    elseif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n        list(REMOVE_ITEM headers\n            \"${CMAKE_CURRENT_SOURCE_DIR}/PushNotificationsDemo.h\")\n    endif()\n\n    if(NOT (TARGET juce_ara_sdk\n            AND (CMAKE_SYSTEM_NAME STREQUAL \"Windows\"\n                 OR CMAKE_SYSTEM_NAME STREQUAL \"Darwin\"\n                 OR CMAKE_SYSTEM_NAME STREQUAL \"Linux\")))\n        list(REMOVE_ITEM headers\n             \"${CMAKE_CURRENT_SOURCE_DIR}/ARAPluginDemo.h\")\n    endif()\n\n    if(NOT TARGET juce_vst2_sdk)\n        list(REMOVE_ITEM headers \"${CMAKE_CURRENT_SOURCE_DIR}/ReaperEmbeddedViewPluginDemo.h\")\n    endif()\n\n    if((CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n        AND EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/WebViewPluginDemo.h\")\n\n        if(NOT (\"${JUCE_CMAKE_UTILS_DIR}\" IN_LIST CMAKE_MODULE_PATH))\n            list(APPEND CMAKE_MODULE_PATH \"${JUCE_CMAKE_UTILS_DIR}\")\n        endif()\n\n        find_package(WebView2)\n\n        if(NOT WebView2_FOUND)\n            list(REMOVE_ITEM headers \"${CMAKE_CURRENT_SOURCE_DIR}/WebViewPluginDemo.h\")\n\n            message(WARNING \"The WebViewPluginDemo was not enabled because the WebView2 package wasn't found.\")\n        endif()\n    endif()\n\n    foreach(header IN ITEMS ${headers})\n        juce_add_pip(${header} added_target)\n        target_link_libraries(${added_target} PUBLIC\n            juce::juce_recommended_config_flags\n            juce::juce_recommended_lto_flags\n            juce::juce_recommended_warning_flags)\n    endforeach()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Languages\nDESCRIPTION: Sets up include paths for JUCE library code, modules, and Android NDK components. Also enables assembly language support for the build.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/NetworkGraphicsDemo/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories( AFTER\n    \"../../../JuceLibraryCode\"\n    \"../../../../../modules\"\n    \"${ANDROID_NDK}/sources/android/cpufeatures\"\n)\n\nenable_language(ASM)\n```\n\n----------------------------------------\n\nTITLE: WebBrowserComponent Constructor Change\nDESCRIPTION: The constructor of WebBrowserComponent now requires an instance of the Options class instead of a boolean. The WindowsWebView2WebBrowserComponent class has been removed. To keep a webpage loaded when the component is hidden, use WebBrowserComponent::Options::withKeepPageLoadedWhenBrowserIsHidden. To specify the browser backend, use WebBrowserComponent::Options::withBackend.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Specifying Audio Plugin Host Source Files\nDESCRIPTION: Defines the source files to be included in the Audio Plugin Host build.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPluginHost/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(AudioPluginHost PRIVATE\n    Source/HostStartup.cpp\n    Source/Plugins/ARAPlugin.cpp\n    Source/Plugins/IOConfigurationWindow.cpp\n    Source/Plugins/InternalPlugins.cpp\n    Source/Plugins/PluginGraph.cpp\n    Source/UI/GraphEditorPanel.cpp\n    Source/UI/MainHostWindow.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring UnitTestRunner Application with CMake in JUCE Framework\nDESCRIPTION: This snippet defines the configuration for the JUCE UnitTestRunner console application. It creates the application, generates necessary headers, specifies source files, sets compile definitions including plugin host support, and links required JUCE modules.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/UnitTestRunner/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\njuce_add_console_app(UnitTestRunner)\n\njuce_generate_juce_header(UnitTestRunner)\n\ntarget_sources(UnitTestRunner PRIVATE Source/Main.cpp)\n\ntarget_compile_definitions(UnitTestRunner PRIVATE\n    JUCE_PLUGINHOST_LV2=1\n    JUCE_PLUGINHOST_VST3=1\n    JUCE_UNIT_TESTS=1\n    JUCE_USE_CURL=0\n    JUCE_WEB_BROWSER=0\n    # This is a temporary workaround to allow builds to complete on Xcode 15.\n    # Add -Wl,-ld_classic to the OTHER_LDFLAGS build setting if you need to\n    # deploy to older versions of macOS.\n    JUCE_SILENCE_XCODE_15_LINKER_WARNING=1)\n\ntarget_link_libraries(UnitTestRunner PRIVATE\n    juce::juce_analytics\n    juce::juce_audio_utils\n    juce::juce_dsp\n    juce::juce_midi_ci\n    juce::juce_opengl\n    juce::juce_osc\n    juce::juce_product_unlocking\n    juce::juce_recommended_config_flags\n    juce::juce_recommended_lto_flags\n    juce::juce_recommended_warning_flags)\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Compile Options in CMake\nDESCRIPTION: Sets compiler option for signed char behavior in debug build configuration\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/NetworkGraphicsDemo/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif( JUCE_BUILD_CONFIGURATION MATCHES \"DEBUG\" )\n    target_compile_options( ${BINARY_NAME} PRIVATE \"-fsigned-char\" )\nendif()\n```\n\n----------------------------------------\n\nTITLE: AudioProcessor Time Functions Removal\nDESCRIPTION: AudioProcessor::getHostTimeNs() and AudioProcessor::setHostTimeNanos() have been removed. Set and get the system time corresponding to the current audio callback using AudioPlayHead::PositionInfo::getHostTimeNs() and AudioPlayHead::PositionInfo::setHostTimeNs().\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Setting Up JUCE Examples Project Structure with CMake\nDESCRIPTION: Initial setup for JUCE examples with directory organization. Sets the CMAKE_FOLDER variable and adds subdirectories for the CMake examples and DemoRunner application.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_FOLDER examples)\n\nadd_subdirectory(CMake)\nadd_subdirectory(DemoRunner)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for JUCE Framework\nDESCRIPTION: This CMakeLists.txt file is automatically generated by the Projucer tool for configuring a JUCE framework project. It likely includes project-specific settings, dependencies, and build instructions for CMake.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPerformanceTest/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Automatically generated CMakeLists, created by the Projucer\n```\n\n----------------------------------------\n\nTITLE: MIDI CI Device Interface Changes\nDESCRIPTION: Signature changes for CI Device methods including property inquiries and subscription handling. Introduces new RequestKey return type and subscription management functions.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nci::Device::sendPropertyGetInquiry\nci::Device::sendPropertySetInquiry\nci::PropertyHost::sendSubscriptionUpdate\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to DemoRunner Target in CMake\nDESCRIPTION: Specifies the source files to be included in the DemoRunner target build.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/DemoRunner/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(DemoRunner PRIVATE\n    Source/Demos/DemoPIPs1.cpp\n    Source/Demos/DemoPIPs2.cpp\n    Source/Demos/JUCEDemos.cpp\n    Source/Main.cpp\n    Source/UI/DemoContentComponent.cpp\n    Source/UI/MainComponent.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for JUCE Audio Plugin\nDESCRIPTION: Adds preprocessor definitions to the audio plugin target, disabling web browser and CURL support, and specifying VST3 behavior.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/CMake/AudioPlugin/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(AudioPluginExample\n    PUBLIC\n        JUCE_WEB_BROWSER=0\n        JUCE_USE_CURL=0\n        JUCE_VST3_CAN_REPLACE_VST2=0)\n```\n\n----------------------------------------\n\nTITLE: Building for iOS Simulator\nDESCRIPTION: Command to build a target for iOS simulator using CMake.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncmake --build build-ios --target <targetName> -- -sdk iphonesimulator\n```\n\n----------------------------------------\n\nTITLE: Configuring WebView2 Package Location\nDESCRIPTION: Sets up an option to override the default directory where the FindWebView2 script looks for the Microsoft.Web.WebView2 directory. This supports WebView2 integration in JUCE applications.\nSOURCE: https://github.com/juce-framework/juce/blob/master/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nstring(CONCAT webview2_option_message \"Location that overrides the default directory where our \"\n                                      \"FindWebView2 script is looking for the \"\n                                      \"*Microsoft.Web.WebView2* directory\")\n\noption(JUCE_WEBVIEW2_PACKAGE_LOCATION ${webview2_option_message} \"\")\n```\n\n----------------------------------------\n\nTITLE: Debug Compiler Options Configuration for JUCE\nDESCRIPTION: CMake configuration block that sets compiler warning flags and options for debug builds. Enables extensive warning checks and treats char as signed.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPluginHost/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif( JUCE_BUILD_CONFIGURATION MATCHES \"DEBUG\" )\n    target_compile_options( ${BINARY_NAME} PRIVATE -Wall -Wcast-align -Wfloat-equal -Wno-ignored-qualifiers -Wsign-compare -Wsign-conversion -Wstrict-aliasing -Wswitch-enum -Wuninitialized -Wunreachable-code -Wunused-parameter -Wmissing-field-initializers -Wshadow-all -Wshorten-64-to-32 -Wconversion -Wint-conversion -Wconditional-uninitialized -Wconstant-conversion -Wbool-conversion -Wextra-semi -Wshift-sign-overflow -Wmissing-prototypes -Wnullable-to-nonnull-converter -Wpedantic -Wdeprecated -Woverloaded-virtual -Wreorder -Wzero-as-null-pointer-constant -Wunused-private-field -Winconsistent-missing-destructor-override \"-fsigned-char\" )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting ARA SDK Path in CMake\nDESCRIPTION: CMake command to set the global ARA SDK path when building examples and extras from the JUCE repo directory.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/ARA.md#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n-DJUCE_GLOBAL_ARA_SDK_PATH=/your/path/to/ARA_SDK\n```\n\n----------------------------------------\n\nTITLE: Installing JUCE CMake Files\nDESCRIPTION: Installs JUCE CMake configuration files, helper scripts, and templates to the specified installation destination. These files are essential for other projects to find and use JUCE through CMake's package system.\nSOURCE: https://github.com/juce-framework/juce/blob/master/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${JUCE_BINARY_DIR}/JUCEConfigVersion.cmake\"\n              \"${JUCE_BINARY_DIR}/JUCEConfig.cmake\"\n              \"${JUCE_CMAKE_UTILS_DIR}/JUCECheckAtomic.cmake\"\n              \"${JUCE_CMAKE_UTILS_DIR}/JUCEHelperTargets.cmake\"\n              \"${JUCE_CMAKE_UTILS_DIR}/JUCEModuleSupport.cmake\"\n              \"${JUCE_CMAKE_UTILS_DIR}/JUCEUtils.cmake\"\n              \"${JUCE_CMAKE_UTILS_DIR}/JuceLV2Defines.h.in\"\n              \"${JUCE_CMAKE_UTILS_DIR}/LaunchScreen.storyboard\"\n              \"${JUCE_CMAKE_UTILS_DIR}/PIPAudioProcessor.cpp.in\"\n              \"${JUCE_CMAKE_UTILS_DIR}/PIPAudioProcessorWithARA.cpp.in\"\n              \"${JUCE_CMAKE_UTILS_DIR}/PIPComponent.cpp.in\"\n              \"${JUCE_CMAKE_UTILS_DIR}/PIPConsole.cpp.in\"\n              \"${JUCE_CMAKE_UTILS_DIR}/RecentFilesMenuTemplate.nib\"\n              \"${JUCE_CMAKE_UTILS_DIR}/UnityPluginGUIScript.cs.in\"\n              \"${JUCE_CMAKE_UTILS_DIR}/checkBundleSigning.cmake\"\n              \"${JUCE_CMAKE_UTILS_DIR}/copyDir.cmake\"\n              \"${JUCE_CMAKE_UTILS_DIR}/juce_runtime_arch_detection.cpp\"\n              \"${JUCE_CMAKE_UTILS_DIR}/juce_LinuxSubprocessHelper.cpp\"\n        DESTINATION \"${JUCE_INSTALL_DESTINATION}\")\n```\n\n----------------------------------------\n\nTITLE: Release Compiler Options Configuration for JUCE\nDESCRIPTION: CMake configuration block that sets compiler warning flags and options for release builds. Maintains same warning checks as debug configuration.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPluginHost/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif( JUCE_BUILD_CONFIGURATION MATCHES \"RELEASE\" )\n    target_compile_options( ${BINARY_NAME} PRIVATE -Wall -Wcast-align -Wfloat-equal -Wno-ignored-qualifiers -Wsign-compare -Wsign-conversion -Wstrict-aliasing -Wswitch-enum -Wuninitialized -Wunreachable-code -Wunused-parameter -Wmissing-field-initializers -Wshadow-all -Wshorten-64-to-32 -Wconversion -Wint-conversion -Wconditional-uninitialized -Wconstant-conversion -Wbool-conversion -Wextra-semi -Wshift-sign-overflow -Wmissing-prototypes -Wnullable-to-nonnull-converter -Wpedantic -Wdeprecated -Woverloaded-virtual -Wreorder -Wzero-as-null-pointer-constant -Wunused-private-field -Winconsistent-missing-destructor-override \"-fsigned-char\" )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Projucer Source Files in CMake\nDESCRIPTION: Defines all source files to be included in the Projucer build, organized by application components, editors, project management, and utility functions.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/Projucer/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(Projucer PRIVATE\n    Source/Application/jucer_AutoUpdater.cpp\n    Source/Application/jucer_CommandLine.cpp\n    Source/Application/jucer_Main.cpp\n    Source/Application/jucer_MainWindow.cpp\n    Source/Application/StartPage/jucer_StartPageComponent.cpp\n    Source/Application/StartPage/jucer_NewProjectWizard.cpp\n    Source/CodeEditor/jucer_DocumentEditorComponent.cpp\n    Source/CodeEditor/jucer_OpenDocumentManager.cpp\n    Source/CodeEditor/jucer_SourceCodeEditor.cpp\n    Source/Project/Modules/jucer_Modules.cpp\n    Source/Project/UI/jucer_HeaderComponent.cpp\n    Source/Project/jucer_Project.cpp\n    Source/ProjectSaving/jucer_ProjectExporter.cpp\n    Source/ProjectSaving/jucer_ProjectSaver.cpp\n    Source/ProjectSaving/jucer_ResourceFile.cpp\n    Source/Settings/jucer_AppearanceSettings.cpp\n    Source/Settings/jucer_StoredSettings.cpp\n    Source/Utility/Helpers/jucer_CodeHelpers.cpp\n    Source/Utility/Helpers/jucer_FileHelpers.cpp\n    Source/Utility/Helpers/jucer_MiscUtilities.cpp\n    Source/Utility/Helpers/jucer_NewFileWizard.cpp\n    Source/Utility/Helpers/jucer_VersionInfo.cpp\n    Source/Utility/PIPs/jucer_PIPGenerator.cpp\n    Source/Utility/UI/jucer_Icons.cpp\n    Source/Utility/UI/jucer_JucerTreeViewBase.cpp\n    Source/Utility/UI/jucer_ProjucerLookAndFeel.cpp\n    Source/Utility/UI/jucer_SlidingPanelComponent.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions\nDESCRIPTION: Configures compilation definitions including plugin host support, audio features, and platform-specific settings.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPluginHost/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(AudioPluginHost PRIVATE\n    JUCE_ALSA=1\n    JUCE_CONTENT_SHARING=1\n    JUCE_DIRECTSOUND=1\n    JUCE_DISABLE_CAUTIOUS_PARAMETER_ID_CHECKING=1\n    JUCE_PLUGINHOST_LADSPA=1\n    JUCE_PLUGINHOST_LV2=1\n    JUCE_PLUGINHOST_VST3=1\n    JUCE_PLUGINHOST_VST=0\n    JUCE_PLUGINHOST_ARA=0\n    JUCE_USE_CAMERA=0\n    JUCE_USE_CDBURNER=0\n    JUCE_USE_CDREADER=0\n    JUCE_USE_CURL=0\n    JUCE_USE_FLAC=0\n    JUCE_USE_OGGVORBIS=1\n    JUCE_VST3_HOST_CROSS_PLATFORM_UID=1\n    JUCE_WASAPI=1\n    JUCE_WEB_BROWSER=0\n    PIP_JUCE_EXAMPLES_DIRECTORY_STRING=\"${JUCE_SOURCE_DIR}/examples\"\n    JUCE_SILENCE_XCODE_15_LINKER_WARNING=1)\n```\n\n----------------------------------------\n\nTITLE: Linking Projucer Dependencies in CMake\nDESCRIPTION: Links required JUCE libraries and modules to the Projucer target, including build tools, cryptography, and GUI components.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/Projucer/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(Projucer PRIVATE\n    ProjucerData\n    juce::juce_build_tools\n    juce::juce_cryptography\n    juce::juce_gui_extra\n    juce::juce_recommended_config_flags\n    juce::juce_recommended_lto_flags\n    juce::juce_recommended_warning_flags)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Oboe Library for JUCE Audio on Android\nDESCRIPTION: Configures the Oboe audio library integration for the JUCE audio device module on Android. Oboe is Google's C++ audio library that provides low-latency audio on Android.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPerformanceTest/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(OBOE_DIR \"../../../../../modules/juce_audio_devices/native/oboe\")\n\nadd_subdirectory (${OBOE_DIR} ./oboe)\n```\n\n----------------------------------------\n\nTITLE: Configuring JUCE PIP Integration in CMake\nDESCRIPTION: Function call to add PIP (Package Integration Protocol) configuration for the JUCE framework. This is likely part of the build system setup.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/Utilities/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n_juce_add_pips()\n```\n\n----------------------------------------\n\nTITLE: Adding PIPS to JUCE Project in CMake\nDESCRIPTION: This snippet calls a custom CMake function to add PIPS (Projucer Integrated Plug-in System) to the JUCE project. PIPS is likely a system for integrating plugins within the JUCE framework.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/Audio/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n_juce_add_pips()\n```\n\n----------------------------------------\n\nTITLE: Refactoring of the AudioBlock Class - C++\nDESCRIPTION: Refactored the AudioBlock class, changing method names and aligning const behavior with std::span. Users are required to revise their code to use the new method names and ensure appropriate const-correctness.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_20\n\nLANGUAGE: cpp\nCODE:\n```\n// Updated method signatures and const behavior\nvoid newMethodName(/* params */);\n// const correctness example\nconst AudioBlock<float>& getData() const;\n```\n\n----------------------------------------\n\nTITLE: CMake Source Files Configuration\nDESCRIPTION: CMake configuration listing source files for the JUCE framework compilation. Includes header files, implementation files, and platform-specific code for various JUCE modules.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPerformanceTest/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset_source_files_properties(\n    \"../../../Source/MainComponent.h\"\n    \"../../../../../modules/juce_audio_basics/audio_play_head/juce_AudioPlayHead.cpp\"\n    \"../../../../../modules/juce_audio_basics/audio_play_head/juce_AudioPlayHead.h\"\n    [...additional files...]\n```\n\n----------------------------------------\n\nTITLE: Setting Archive Output Directory for Static Libraries\nDESCRIPTION: CMake command to set the archive output directory property for static libraries.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(my_static_lib_target PROPERTIES ARCHIVE_OUTPUT_DIRECTORY \"./\")\n```\n\n----------------------------------------\n\nTITLE: Linking JUCE Libraries to NetworkGraphicsDemo\nDESCRIPTION: Links the required JUCE modules to the NetworkGraphicsDemo application. Includes audio utilities, cryptography, OpenGL, OSC, and standard JUCE configuration flags for optimal building.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/NetworkGraphicsDemo/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(NetworkGraphicsDemo PRIVATE\n    juce::juce_audio_utils\n    juce::juce_cryptography\n    juce::juce_opengl\n    juce::juce_osc\n    juce::juce_recommended_config_flags\n    juce::juce_recommended_lto_flags\n    juce::juce_recommended_warning_flags)\n```\n\n----------------------------------------\n\nTITLE: Changes to AU and AUv3 Plugin Wrapper State Information - C++\nDESCRIPTION: The default behavior of the AU and AUv3 plug-in wrappers was changed to call get/setStateInformation instead of get/setProgramStateInformation. Code that overrides these methods may need updates to properly save and restore state.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_18\n\nLANGUAGE: cpp\nCODE:\n```\n// Updated state methods\nvoid setStateInformation (const MemoryBlock& newState);\nvoid getStateInformation (MemoryBlock& destState);\n```\n\n----------------------------------------\n\nTITLE: Defining Android-Specific Preprocessor Macros\nDESCRIPTION: Sets up global preprocessor definitions for the Android platform, including API version, push notification configuration, OpenGL ES version, and application version.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPerformanceTest/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions([[-DJUCE_ANDROID=1]] [[-DJUCE_ANDROID_API_VERSION=24]] [[-DJUCE_PUSH_NOTIFICATIONS=1]] [[-DJUCE_PUSH_NOTIFICATIONS_ACTIVITY=\"com/rmsl/juce/JuceActivity\"]] [[-DJUCE_ANDROID_GL_ES_VERSION_3_0=1]] [[-DJUCER_ANDROIDSTUDIO_7F0E4A25=1]] [[-DJUCE_APP_VERSION=1.0.0]] [[-DJUCE_APP_VERSION_HEX=0x10000]])\n```\n\n----------------------------------------\n\nTITLE: Adding Resource Directories to DemoRunner in CMake\nDESCRIPTION: Adds various resource directories to the DemoRunner bundle using a foreach loop.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/DemoRunner/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(folder IN ITEMS ../Assets ../Audio ../DSP ../GUI ../Utilities)\n    juce_add_bundle_resources_directory(DemoRunner ${folder})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Minimum C++ Standard Upgrade\nDESCRIPTION: The minimum supported C++ standard is now C++17, and the oldest supported compilers on Linux are now GCC 7.0 and Clang 6.0. Older compilers will no longer be able to compile JUCE. There is no workaround.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Finding and Linking Android Libraries for JUCE Project\nDESCRIPTION: Locates required Android system libraries (log, android, GLESv3, EGL) and links them along with additional dependencies (cpufeatures, oboe) to the JUCE binary target.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPerformanceTest/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nfind_library(log \"log\")\nfind_library(android \"android\")\nfind_library(glesv3 \"GLESv3\")\nfind_library(egl \"EGL\")\n\ntarget_link_libraries( ${BINARY_NAME}\n\n    ${log}\n    ${android}\n    ${glesv3}\n    ${egl}\n    \"cpufeatures\"\n    \"oboe\"\n)\n```\n\n----------------------------------------\n\nTITLE: Cloning ARA SDK Repository\nDESCRIPTION: Command to clone the ARA SDK version 2.2.0 from Celemony's Github repository into the ARA_SDK directory.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/ARA.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --recursive --branch releases/2.2.0 https://github.com/Celemony/ARA_SDK\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Compiler Options for JUCE\nDESCRIPTION: Sets up compiler warning flags and options for debug builds of the JUCE framework. Includes a comprehensive set of warnings to enforce code quality during development.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/DemoRunner/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif( JUCE_BUILD_CONFIGURATION MATCHES \"DEBUG\" )\n    target_compile_options( ${BINARY_NAME} PRIVATE -Wall -Wcast-align -Wfloat-equal -Wno-ignored-qualifiers -Wsign-compare -Wsign-conversion -Wstrict-aliasing -Wswitch-enum -Wuninitialized -Wunreachable-code -Wunused-parameter -Wmissing-field-initializers -Wshadow-all -Wshorten-64-to-32 -Wconversion -Wint-conversion -Wconditional-uninitialized -Wconstant-conversion -Wbool-conversion -Wextra-semi -Wshift-sign-overflow -Wmissing-prototypes -Wnullable-to-nonnull-conversion -Wpedantic -Wdeprecated -Woverloaded-virtual -Wreorder -Wzero-as-null-pointer-constant -Wunused-private-field -Winconsistent-missing-destructor-override \"-fsigned-char\" )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding PIP Modules to JUCE Framework in CMake\nDESCRIPTION: Calls the _juce_add_pips() CMake function to integrate Plugin Interface Protocol (PIP) modules into the JUCE framework project. This function is responsible for setting up the necessary PIP components for JUCE examples.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/DSP/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n_juce_add_pips()\n```\n\n----------------------------------------\n\nTITLE: Audio Unit Resource Fork Removal\nDESCRIPTION: Resource forks are no longer generated for Audio Unit plug-ins. New builds of JUCE Audio Units may no longer load in old hosts that use the Component Manager to discover plug-ins. There is no workaround.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Adding JUCE PIPs in CMake\nDESCRIPTION: Calls a JUCE-specific CMake function to add Platform Interface Packages (PIPs) to the project. This is a core configuration step for JUCE framework builds.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/GUI/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n_juce_add_pips()\n```\n\n----------------------------------------\n\nTITLE: Customizing Android Manifest Support for Screen Sizes\nDESCRIPTION: Shows how to override default screen size support in the Android manifest using the new 'Custom manifest XML content' setting in JUCE projects.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_23\n\nLANGUAGE: XML\nCODE:\n```\n<manifest>\n<supports-screens android:xlargeScreens=\"true\"/>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Cross-Compilation Environment Setup for juceaide in CMake\nDESCRIPTION: This snippet prepares the environment for cross-compilation by unsetting various compiler-related environment variables. It ensures a clean slate for building juceaide on the host system when cross-compiling for a different target.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/Build/juceaide/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_CROSSCOMPILING)\n    unset(ENV{ADDR2LINE})\n    unset(ENV{AR})\n    unset(ENV{ASM})\n    unset(ENV{AS})\n    unset(ENV{CC})\n    unset(ENV{CPP})\n    unset(ENV{CXXFILT})\n    unset(ENV{CXX})\n    unset(ENV{DLLTOOL})\n    unset(ENV{DLLWRAP})\n    unset(ENV{ELFEDIT})\n    unset(ENV{GCC})\n    unset(ENV{GCOV_DUMP})\n    unset(ENV{GCOV_TOOL})\n    unset(ENV{GCOV})\n    unset(ENV{GPROF})\n    unset(ENV{GXX})\n    unset(ENV{LDFLAGS})\n    unset(ENV{LD_BFD})\n    unset(ENV{LD})\n    unset(ENV{LTO_DUMP})\n    unset(ENV{NM})\n    unset(ENV{OBJCOPY})\n    unset(ENV{OBJDUMP})\n    unset(ENV{PKG_CONFIG_LIBDIR})\n    unset(ENV{PKG_CONFIG})\n    unset(ENV{RANLIB})\n    unset(ENV{RC})\n    unset(ENV{READELF})\n    unset(ENV{SIZE})\n    unset(ENV{STRINGS})\n    unset(ENV{STRIP})\n    unset(ENV{WIDL})\n    unset(ENV{WINDMC})\n    unset(ENV{WINDRES})\n\n    if(DEFINED ENV{PATH_ORIG})\n        set(ENV{PATH} \"$ENV{PATH_ORIG}\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Resampler Header\nDESCRIPTION: Shows how to include the main resampler header file in your project.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_devices/native/oboe/src/flowgraph/resampler/README.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"resampler/MultiChannelResampler.h\"\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options for Release Configuration in JUCE Android Build\nDESCRIPTION: Configures compiler options for the release build of a JUCE project targeting Android. Sets optimization flags, floating-point behavior, and disables assertions.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPerformanceTest/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif( JUCE_BUILD_CONFIGURATION MATCHES \"RELEASE\" )\n    target_compile_options( ${BINARY_NAME} PRIVATE \"-fsigned-char\" [[-mfpu=neon]] [[-mfloat-abi=hard]] [[-ffast-math]] [[-funroll-loops]] [[--param]] [[max-unroll-times=8]] [[-mhard-float]] [[-D_NDK_MATH_NO_SOFTFP=1]] [[-DJUCE_DISABLE_ASSERTIONS=1]] )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Disabling Studio One Compatible Parameters in JUCE C++\nDESCRIPTION: Workaround to disable JUCE_USE_STUDIO_ONE_COMPATIBLE_PARAMETERS in the juce_audio_plugin_client module config to address issues with parameter ID calculation changes in JUCE 4.3.1.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_24\n\nLANGUAGE: cpp\nCODE:\n```\nJUCE_USE_STUDIO_ONE_COMPATIBLE_PARAMETERS=0\n```\n\n----------------------------------------\n\nTITLE: Adding Android CPU Features Library\nDESCRIPTION: Adds the Android CPU features library as a static dependency and sets compiler flags to suppress specific warnings for this component.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/NetworkGraphicsDemo/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(\"cpufeatures\" STATIC \"${ANDROID_NDK}/sources/android/cpufeatures/cpu-features.c\")\nset_source_files_properties(\"${ANDROID_NDK}/sources/android/cpufeatures/cpu-features.c\" PROPERTIES COMPILE_FLAGS \"-Wno-sign-conversion -Wno-gnu-statement-expression\")\n```\n\n----------------------------------------\n\nTITLE: Cleanup Resampler\nDESCRIPTION: Shows how to properly delete the resampler instance to prevent memory leaks.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_devices/native/oboe/src/flowgraph/resampler/README.md#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\ndelete resampler;\n```\n\n----------------------------------------\n\nTITLE: ContentSharer Usage Update (JUCE)\nDESCRIPTION: This snippet demonstrates how to use the updated ContentSharer API in JUCE. Instead of calling the content sharer functions through a singleton instance, you now call the static member functions directly, which return a ScopedMessageBox instance. This new approach is safer and easier to use.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n\"// Instead of calling content sharer functions through a singleton instance, e.g.\n//     ContentSharer::getInstance()->shareText (...);\n// call the static member functions directly:\n//     ScopedMessageBox messageBox = ContentSharer::shareTextScoped (...);\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Release Compile Options in CMake\nDESCRIPTION: Sets compiler option for signed char behavior in release build configuration\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/NetworkGraphicsDemo/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif( JUCE_BUILD_CONFIGURATION MATCHES \"RELEASE\" )\n    target_compile_options( ${BINARY_NAME} PRIVATE \"-fsigned-char\" )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding Android Dependencies for JUCE\nDESCRIPTION: Locates required Android system libraries for the JUCE framework including logging, Android API, OpenGL ES 3.0, and EGL. These are essential dependencies for Android app development with JUCE.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/DemoRunner/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nfind_library(log \"log\")\nfind_library(android \"android\")\nfind_library(glesv3 \"GLESv3\")\nfind_library(egl \"EGL\")\n```\n\n----------------------------------------\n\nTITLE: Defining JUCE Android-Specific Preprocessor Macros\nDESCRIPTION: Sets up core Android-specific preprocessor definitions including Android API version, push notification configuration, OpenGL ES version, and app version information.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/NetworkGraphicsDemo/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions([[-DJUCE_ANDROID=1]] [[-DJUCE_ANDROID_API_VERSION=24]] [[-DJUCE_PUSH_NOTIFICATIONS=1]] [[-DJUCE_PUSH_NOTIFICATIONS_ACTIVITY=\"com/rmsl/juce/JuceActivity\"]] [[-DJUCE_ANDROID_GL_ES_VERSION_3_0=1]] [[-DJUCER_ANDROIDSTUDIO_7F0E4A25=1]] [[-DJUCE_APP_VERSION=1.0.0]] [[-DJUCE_APP_VERSION_HEX=0x10000]])\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Target\nDESCRIPTION: Specifies the source files that will be compiled into the console application executable.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/CMake/ConsoleApp/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(ConsoleAppExample\n    PRIVATE\n        Main.cpp)\n```\n\n----------------------------------------\n\nTITLE: Updating AUScope::RestoreElementNames in C++\nDESCRIPTION: Modified the AUScope::RestoreElementNames method to call AUElement::SetName only when the name has changed. This change works around an Ableton Live 11 bug that causes crashes when duplicating AUs with more than 16 output busses.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_plugin_client/AU/AudioUnitSDK/JUCE CHANGES.txt#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// AUScope::RestoreElementNames modification\n// Only call AUElement::SetName if the name actually changed\n```\n\n----------------------------------------\n\nTITLE: Listing JUCE Library Source Files in CMake\nDESCRIPTION: A CMake source file listing for JUCE library components including core, cryptography, data structures, DSP, events, graphics, GUI, and OpenGL modules.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPluginHost/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n\"../../../JuceLibraryCode/include_juce_core_CompilationTime.cpp\"\n\"../../../JuceLibraryCode/include_juce_cryptography.cpp\"\n\"../../../JuceLibraryCode/include_juce_data_structures.cpp\"\n\"../../../JuceLibraryCode/include_juce_dsp.cpp\"\n\"../../../JuceLibraryCode/include_juce_events.cpp\"\n\"../../../JuceLibraryCode/include_juce_graphics.cpp\"\n\"../../../JuceLibraryCode/include_juce_graphics_Harfbuzz.cpp\"\n\"../../../JuceLibraryCode/include_juce_graphics_Sheenbidi.c\"\n\"../../../JuceLibraryCode/include_juce_gui_basics.cpp\"\n\"../../../JuceLibraryCode/include_juce_gui_extra.cpp\"\n\"../../../JuceLibraryCode/include_juce_opengl.cpp\"\n\"../../../JuceLibraryCode/JuceHeader.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for JUCE Android Build\nDESCRIPTION: Links the compiled JUCE binary with necessary Android libraries including logging, Android API, graphics libraries (OpenGL ES and EGL), and additional dependencies like CPU features and Oboe for audio processing.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/DemoRunner/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries( ${BINARY_NAME}\n\n    ${log}\n    ${android}\n    ${glesv3}\n    ${egl}\n    \"cpufeatures\"\n    \"oboe\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for iOS Build\nDESCRIPTION: Commands to configure a CMake project for iOS cross-compilation with Xcode generator.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncmake -Bbuild-ios -GXcode -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_DEPLOYMENT_TARGET=9.3\n```\n\n----------------------------------------\n\nTITLE: Updating backButtonPressed Return Type - C++\nDESCRIPTION: The JUCEApplicationBase::backButtonPressed() method now indicates whether the back event was handled by returning a bool. This change is crucial for overriding the back button behavior in Android applications.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_19\n\nLANGUAGE: cpp\nCODE:\n```\n// Updated return type\nbool backButtonPressed();\n```\n\n----------------------------------------\n\nTITLE: Setting JUCE-specific Compile Definitions\nDESCRIPTION: Adds compile definitions specific to JUCE, including Android-related settings and version information.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/DemoRunner/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions([[-DJUCE_ANDROID=1]] [[-DJUCE_ANDROID_API_VERSION=24]] [[-DJUCE_PUSH_NOTIFICATIONS=1]] [[-DJUCE_PUSH_NOTIFICATIONS_ACTIVITY=\"com/rmsl/juce/JuceActivity\"]] [[-DJUCE_CONTENT_SHARING=1]] [[-DJUCE_ANDROID_GL_ES_VERSION_3_0=1]] [[-DJUCE_DEMO_RUNNER=1]] [[-DJUCE_UNIT_TESTS=1]] [[-DJUCER_ANDROIDSTUDIO_7F0E4A25=1]] [[-DJUCE_APP_VERSION=8.0.7]] [[-DJUCE_APP_VERSION_HEX=0x80007]])\n```\n\n----------------------------------------\n\nTITLE: Building iOS Target with Provisioning Updates\nDESCRIPTION: Command to build an iOS target with automatic provisioning profile updates.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncmake --build build-ios --target <targetName> -- -allowProvisioningUpdates\n```\n\n----------------------------------------\n\nTITLE: Updating InAppPurchases Usage Example\nDESCRIPTION: Demonstrates the change from direct instantiation to singleton pattern usage for InAppPurchases class.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_21\n\nLANGUAGE: cpp\nCODE:\n```\n// Old way:\nInAppPurchases iap;\niap.purchaseProduct (...);\n\n// New way:\nInAppPurchases::getInstance()->purchaseProduct (...);\n```\n\n----------------------------------------\n\nTITLE: Configuring Build-Specific Preprocessor Definitions\nDESCRIPTION: Sets up conditional preprocessor definitions for Debug and Release build configurations. Each configuration has JUCE module availability flags and build-specific macros.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPerformanceTest/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(JUCE_BUILD_CONFIGURATION MATCHES \"DEBUG\")\n    add_definitions([[-DJUCE_PROJUCER_VERSION=0x80007]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_basics=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_devices=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_formats=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_processors=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_utils=1]] [[-DJUCE_MODULE_AVAILABLE_juce_core=1]] [[-DJUCE_MODULE_AVAILABLE_juce_data_structures=1]] [[-DJUCE_MODULE_AVAILABLE_juce_events=1]] [[-DJUCE_MODULE_AVAILABLE_juce_graphics=1]] [[-DJUCE_MODULE_AVAILABLE_juce_gui_basics=1]] [[-DJUCE_MODULE_AVAILABLE_juce_gui_extra=1]] [[-DJUCE_GLOBAL_MODULE_SETTINGS_INCLUDED=1]] [[-DJUCE_STANDALONE_APPLICATION=1]] [[-DJUCER_ANDROIDSTUDIO_7F0E4A25=1]] [[-DJUCE_APP_VERSION=1.0.0]] [[-DJUCE_APP_VERSION_HEX=0x10000]] [[-DDEBUG=1]] [[-D_DEBUG=1]])\nelseif(JUCE_BUILD_CONFIGURATION MATCHES \"RELEASE\")\n    add_definitions([[-DJUCE_PROJUCER_VERSION=0x80007]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_basics=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_devices=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_formats=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_processors=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_utils=1]] [[-DJUCE_MODULE_AVAILABLE_juce_core=1]] [[-DJUCE_MODULE_AVAILABLE_juce_data_structures=1]] [[-DJUCE_MODULE_AVAILABLE_juce_events=1]] [[-DJUCE_MODULE_AVAILABLE_juce_graphics=1]] [[-DJUCE_MODULE_AVAILABLE_juce_gui_basics=1]] [[-DJUCE_MODULE_AVAILABLE_juce_gui_extra=1]] [[-DJUCE_GLOBAL_MODULE_SETTINGS_INCLUDED=1]] [[-DJUCE_STANDALONE_APPLICATION=1]] [[-DJUCER_ANDROIDSTUDIO_7F0E4A25=1]] [[-DJUCE_APP_VERSION=1.0.0]] [[-DJUCE_APP_VERSION_HEX=0x10000]] [[-DNDEBUG=1]])\nelse()\n    message( FATAL_ERROR \"No matching build-configuration found.\" )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling ARA in AudioPluginHost CMakeLists\nDESCRIPTION: CMake instruction to enable ARA support in the AudioPluginHost's CMakeLists.txt file.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/ARA.md#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nJUCE_PLUGINHOST_ARA=1\n```\n\n----------------------------------------\n\nTITLE: Creating Build Directory for VST3 SDK on Windows/macOS/Linux\nDESCRIPTION: Commands to create a build directory and navigate to it. This is a common first step in the CMake build process across all supported platforms.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_processors/format_types/VST3_SDK/README.md#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nmkdir build\ncd build\n```\n\n----------------------------------------\n\nTITLE: Installing G++ Compiler for JUCE on Linux\nDESCRIPTION: Commands to update package list and install G++ compiler on Ubuntu systems.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/Linux Dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install g++\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for JUCE Android Project\nDESCRIPTION: Sets up the include directories for the JUCE Android project, including JuceLibraryCode, JUCE modules, and Android NDK cpufeatures. Also enables Assembly language support.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPerformanceTest/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories( AFTER\n    \"../../../JuceLibraryCode\"\n    \"../../../../../modules\"\n    \"${ANDROID_NDK}/sources/android/cpufeatures\"\n)\n\nenable_language(ASM)\n```\n\n----------------------------------------\n\nTITLE: Setting preprocessor definitions for the target\nDESCRIPTION: Defines preprocessor macros for the application. These control JUCE features and provide application information that will be visible to both your code and JUCE module code.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/CMake/GuiApp/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(GuiAppExample\n    PRIVATE\n        # JUCE_WEB_BROWSER and JUCE_USE_CURL would be on by default, but you might not need them.\n        JUCE_WEB_BROWSER=0  # If you remove this, add `NEEDS_WEB_BROWSER TRUE` to the `juce_add_gui_app` call\n        JUCE_USE_CURL=0     # If you remove this, add `NEEDS_CURL TRUE` to the `juce_add_gui_app` call\n        JUCE_APPLICATION_NAME_STRING=\"$<TARGET_PROPERTY:GuiAppExample,JUCE_PRODUCT_NAME>\"\n        JUCE_APPLICATION_VERSION_STRING=\"$<TARGET_PROPERTY:GuiAppExample,JUCE_VERSION>\")\n```\n\n----------------------------------------\n\nTITLE: Building VST3 SDK on Linux\nDESCRIPTION: Commands to build the VST3 SDK on Linux using either make or CMake. Shows both default and release configuration options.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_processors/format_types/VST3_SDK/README.md#2025-04-21_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nmake\n// (or alternatively for example for release)\ncmake --build . --config Release\n```\n\n----------------------------------------\n\nTITLE: Building Vorbis from Tarball Distribution\nDESCRIPTION: Commands to build Vorbis from a tarball distribution. This process includes configuring the build, compiling, and optionally installing the libraries and headers.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_formats/codecs/oggvorbis/libvorbis-1.3.7/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n./configure\nmake\n\n# Optionally as root:\nmake install\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options for Debug Configuration in JUCE Android Build\nDESCRIPTION: Configures compiler options for the debug build of a JUCE project targeting Android. Sets optimization flags, floating-point behavior, and disables assertions.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPerformanceTest/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif( JUCE_BUILD_CONFIGURATION MATCHES \"DEBUG\" )\n    target_compile_options( ${BINARY_NAME} PRIVATE \"-fsigned-char\" [[-mfpu=neon]] [[-mfloat-abi=hard]] [[-ffast-math]] [[-funroll-loops]] [[--param]] [[max-unroll-times=8]] [[-mhard-float]] [[-D_NDK_MATH_NO_SOFTFP=1]] [[-DJUCE_DISABLE_ASSERTIONS=1]] )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating Project Files for VST3 SDK on Linux\nDESCRIPTION: CMake command to generate build files for Linux. Must be run after installing required packages as specified in the documentation.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_processors/format_types/VST3_SDK/README.md#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\ncmake ../vst3sdk\n```\n\n----------------------------------------\n\nTITLE: Building RPM Packages for Vorbis\nDESCRIPTION: Commands to create RPM packages for Vorbis after configuring the build. This process includes creating a distribution tarball and using it to build RPM packages.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_formats/codecs/oggvorbis/libvorbis-1.3.7/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmake dist\nrpm -ta libvorbis-<version>.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Adding CPU Features Library for Android\nDESCRIPTION: Adds the Android NDK's cpufeatures static library which provides hardware detection capabilities. Sets compiler flags to suppress specific warnings when building this library.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPerformanceTest/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(\"cpufeatures\" STATIC \"${ANDROID_NDK}/sources/android/cpufeatures/cpu-features.c\")\nset_source_files_properties(\"${ANDROID_NDK}/sources/android/cpufeatures/cpu-features.c\" PROPERTIES COMPILE_FLAGS \"-Wno-sign-conversion -Wno-gnu-statement-expression\")\n```\n\n----------------------------------------\n\nTITLE: Setting Build Configuration Specific Definitions\nDESCRIPTION: Configures preprocessor definitions based on the build configuration (Debug or Release). Includes module availability flags, application type, and debug state indicators.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/NetworkGraphicsDemo/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(JUCE_BUILD_CONFIGURATION MATCHES \"DEBUG\")\n    add_definitions([[-DJUCE_PROJUCER_VERSION=0x80007]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_basics=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_devices=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_formats=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_processors=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_utils=1]] [[-DJUCE_MODULE_AVAILABLE_juce_core=1]] [[-DJUCE_MODULE_AVAILABLE_juce_cryptography=1]] [[-DJUCE_MODULE_AVAILABLE_juce_data_structures=1]] [[-DJUCE_MODULE_AVAILABLE_juce_events=1]] [[-DJUCE_MODULE_AVAILABLE_juce_graphics=1]] [[-DJUCE_MODULE_AVAILABLE_juce_gui_basics=1]] [[-DJUCE_MODULE_AVAILABLE_juce_gui_extra=1]] [[-DJUCE_MODULE_AVAILABLE_juce_opengl=1]] [[-DJUCE_MODULE_AVAILABLE_juce_osc=1]] [[-DJUCE_GLOBAL_MODULE_SETTINGS_INCLUDED=1]] [[-DJUCE_STANDALONE_APPLICATION=1]] [[-DJUCE_DEBUG=0]] [[-DJUCER_ANDROIDSTUDIO_7F0E4A25=1]] [[-DJUCE_APP_VERSION=1.0.0]] [[-DJUCE_APP_VERSION_HEX=0x10000]] [[-DDEBUG=1]] [[-D_DEBUG=1]])\nelseif(JUCE_BUILD_CONFIGURATION MATCHES \"RELEASE\")\n    add_definitions([[-DJUCE_PROJUCER_VERSION=0x80007]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_basics=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_devices=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_formats=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_processors=1]] [[-DJUCE_MODULE_AVAILABLE_juce_audio_utils=1]] [[-DJUCE_MODULE_AVAILABLE_juce_core=1]] [[-DJUCE_MODULE_AVAILABLE_juce_cryptography=1]] [[-DJUCE_MODULE_AVAILABLE_juce_data_structures=1]] [[-DJUCE_MODULE_AVAILABLE_juce_events=1]] [[-DJUCE_MODULE_AVAILABLE_juce_graphics=1]] [[-DJUCE_MODULE_AVAILABLE_juce_gui_basics=1]] [[-DJUCE_MODULE_AVAILABLE_juce_gui_extra=1]] [[-DJUCE_MODULE_AVAILABLE_juce_opengl=1]] [[-DJUCE_MODULE_AVAILABLE_juce_osc=1]] [[-DJUCE_GLOBAL_MODULE_SETTINGS_INCLUDED=1]] [[-DJUCE_STANDALONE_APPLICATION=1]] [[-DJUCER_ANDROIDSTUDIO_7F0E4A25=1]] [[-DJUCE_APP_VERSION=1.0.0]] [[-DJUCE_APP_VERSION_HEX=0x10000]] [[-DNDEBUG=1]])\nelse()\n    message( FATAL_ERROR \"No matching build-configuration found.\" )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Vorbis with CMake\nDESCRIPTION: Commands to generate project files using CMake for building Vorbis. This includes options for generating static or shared libraries and examples for different platforms.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_formats/codecs/oggvorbis/libvorbis-1.3.7/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncmake -G YOUR-PROJECT-GENERATOR .\n\n# For shared libraries:\ncmake -G YOUR-PROJECT-GENERATOR -DBUILD_SHARED_LIBS=1 .\n\n# Windows example:\ncmake -G \"Visual Studio 12 2013\" .\n\n# Mac OS X example (for framework):\ncmake -G Xcode -DBUILD_FRAMEWORK=1 .\n\n# Linux example:\ncmake .\nmake\n```\n\n----------------------------------------\n\nTITLE: Fixed Output Frame Processing\nDESCRIPTION: Shows how to process audio with a fixed number of output frames while handling variable input frames.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_devices/native/oboe/src/flowgraph/resampler/README.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nint outputFramesLeft = numOutputFrames;\nwhile (outputFramesLeft > 0) {\n    if(resampler->isWriteNeeded()) {\n        const float *frame = getNextInputFrame(); // you provide this\n        resampler->writeNextFrame(frame);\n    } else {\n        resampler->readNextFrame(outputBuffer);\n        outputBuffer += channelCount;\n        outputFramesLeft--;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running DX Command to Generate DEX Bytecode in Android\nDESCRIPTION: Command to compile Java classes into DEX bytecode using Android SDK's DX tool. This generates a DEX file from compiled Java classes with specific SDK versioning requirements.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_core/native/java/README.txt#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n<path-to-your-android-sdk>/build-tools/<latest-build-tool-version>/dx --dex --verbose --min-sdk-version=<your-min-sdk-of-your-classes> --output /tmp/JavaDexByteCode.dex .\n```\n\n----------------------------------------\n\nTITLE: Generating Offline JUCE Documentation with Make\nDESCRIPTION: Commands to navigate to the doxygen directory and run the make command to generate offline HTML documentation for JUCE.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- cd into the `doxygen` directory on the command line\n- run `make`\n```\n\n----------------------------------------\n\nTITLE: Processing FLAC Include Paths with Python\nDESCRIPTION: Python function that transforms include paths in FLAC source files to make them work within the JUCE framework structure. The function handles different file locations and adjusts include paths accordingly to maintain proper relative references.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_formats/codecs/flac/JUCE_CHANGES.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef transform(path: Path, line: str) -> str:\n    if path.match(\"libFLAC/*\"):\n        line = line.replace('#include \"private', '#include \"include/private')\n        line = line.replace('#include \"protected', '#include \"include/protected')\n        line = line.replace('#include \"share/', '#include \"../')\n        line = line.replace('#include \"FLAC/', '#include \"../')\n\n    if path.match(\"libFLAC/include/private/*\") or path.match(\n        \"libFLAC/include/public/*\"\n    ):\n        line = line.replace('#include \"share/', '#include \"../../../')\n        line = line.replace('#include \"FLAC/', '#include \"../../../')\n\n    if path.match(\"*\"):\n        line = line.replace('#include \"share/', '#include \"')\n\n    if path.match(\"libFLAC/include/private/*\"):\n        line = line.replace('#include \"private/', '#include \"')\n\n    if path.match(\"libFLAC/include/protected/*\"):\n        line = line.replace('#include \"private/', '#include \"../private/')\n        line = line.replace('#include \"FLAC/', '#include \"../../../')\n\n    line = line.replace('#include \"include/private/macros.h\"', \"\")\n\n    return line\n```\n\n----------------------------------------\n\nTITLE: Finding Android System Libraries in CMake\nDESCRIPTION: Locates required Android system libraries including logging, Android framework, OpenGL ES 3, and EGL\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/NetworkGraphicsDemo/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nfind_library(log \"log\")\nfind_library(android \"android\")\nfind_library(glesv3 \"GLESv3\")\nfind_library(egl \"EGL\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for JUCE\nDESCRIPTION: Sets up include directories for various JUCE modules and external dependencies.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/DemoRunner/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( AFTER\n    \"../../../../../modules/juce_audio_processors/format_types/LV2_SDK/lilv/src\"\n    \"../../../../../modules/juce_audio_processors/format_types/LV2_SDK/lilv\"\n    \"../../../../../modules/juce_audio_processors/format_types/LV2_SDK/sratom\"\n    \"../../../../../modules/juce_audio_processors/format_types/LV2_SDK/sord/src\"\n    \"../../../../../modules/juce_audio_processors/format_types/LV2_SDK/sord\"\n    \"../../../../../modules/juce_audio_processors/format_types/LV2_SDK/serd\"\n    \"../../../../../modules/juce_audio_processors/format_types/LV2_SDK/lv2\"\n    \"../../../../../modules/juce_audio_processors/format_types/LV2_SDK\"\n    \"../../../../../modules/juce_audio_processors/format_types/VST3_SDK\"\n    \"../../../JuceLibraryCode\"\n    \"../../../../../modules\"\n    \"${ANDROID_NDK}/sources/android/cpufeatures\"\n)\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice text to be included in source files when applying the Apache License 2.0. Includes placeholders for copyright year and owner information.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/NetworkGraphicsDemo/Builds/Android/gradle/wrapper/LICENSE-for-gradlewrapper.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright {yyyy} {name of copyright owner}\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Modifying SheenBidi Header Include Paths (C/C++)\nDESCRIPTION: Include paths for SheenBidi headers have been updated to explicitly reference the juce_graphics module. This change ensures that the correct headers are included and may improve build consistency across different environments.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_graphics/unicode/sheenbidi/JUCE_CHANGES.txt#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <juce_graphics/sheenbidi/SheenBidi.h>\n```\n\n----------------------------------------\n\nTITLE: Building VST3 SDK on macOS\nDESCRIPTION: Commands to build the VST3 SDK on macOS using either Xcode or CMake. Shows options for building with different build configurations.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_processors/format_types/VST3_SDK/README.md#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nxcodebuild \n// (or alternatively for example for release)\ncmake --build . --config Release\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App Configuration\nDESCRIPTION: Removes the single build dependency and copies all configuration files and transitive dependencies into the project for full control. This is a one-way operation and cannot be reversed.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/Plugins/WebViewPluginDemoGUI/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Updating SBRun.h Include in SBLine.c (C/C++)\nDESCRIPTION: The include statement for SBRun.h in SBLine.c was modified to use angle brackets instead of quotes. This change standardizes the include syntax and potentially affects how the compiler searches for the header file.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_graphics/unicode/sheenbidi/JUCE_CHANGES.txt#2025-04-21_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <SBRun.h>\n```\n\n----------------------------------------\n\nTITLE: Defining JUCE Shared Library with Source Files\nDESCRIPTION: Creates the shared library target with a comprehensive list of source files including application-specific files and JUCE module components. These files constitute the core functionality of the JUCE framework on Android.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/NetworkGraphicsDemo/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library( ${BINARY_NAME}\n\n    SHARED\n\n    \"../../../Source/Demos.h\"\n    \"../../../Source/Main.cpp\"\n    \"../../../Source/MasterComponent.h\"\n    \"../../../Source/ClientComponent.h\"\n    \"../../../Source/SharedCanvas.h\"\n    \"../../../Source/juce_icon.png\"\n    \"../../../../../modules/juce_audio_basics/audio_play_head/juce_AudioPlayHead.cpp\"\n    \"../../../../../modules/juce_audio_basics/audio_play_head/juce_AudioPlayHead.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioChannelSet.cpp\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioChannelSet.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioDataConverters.cpp\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioDataConverters.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioProcessLoadMeasurer.cpp\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioProcessLoadMeasurer.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioSampleBuffer.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_FloatVectorOperations.cpp\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_FloatVectorOperations.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMP.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMP_test.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPacket.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPackets.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPBytesOnGroup.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPConversion.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPConverters.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPDeviceInfo.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPDispatcher.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPFactory.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPIterator.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPIterator.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPMidi1ToBytestreamTranslator.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPMidi1ToMidi2DefaultTranslator.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPMidi1ToMidi2DefaultTranslator.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPProtocols.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPReceiver.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPSysEx7.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPSysEx7.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPUtils.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPUtils.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPView.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPView.h\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiBuffer.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiBuffer.h\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiDataConcatenator.h\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiFile.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiFile.h\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiKeyboardState.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiKeyboardState.h\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiMessage.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiMessage.h\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiMessageSequence.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiMessageSequence.h\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiRPN.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiRPN.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEInstrument.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEInstrument.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEMessages.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEMessages.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPENote.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPENote.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPESynthesiser.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPESynthesiser.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPESynthesiserBase.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPESynthesiserBase.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPESynthesiserVoice.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPESynthesiserVoice.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEUtils.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEUtils.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEValue.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEValue.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEZoneLayout.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEZoneLayout.h\"\n    \"../../../../../modules/juce_audio_basics/native/juce_AudioWorkgroup_mac.h\"\n    \"../../../../../modules/juce_audio_basics/native/juce_CoreAudioLayouts_mac.h\"\n    \"../../../../../modules/juce_audio_basics/native/juce_CoreAudioTimeConversions_mac.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_AudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_BufferingAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_BufferingAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_ChannelRemappingAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_ChannelRemappingAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_IIRFilterAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_IIRFilterAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_MemoryAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_MemoryAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_MixerAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_MixerAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_PositionableAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_PositionableAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_ResamplingAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_ResamplingAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_ReverbAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_ReverbAudioSource.h\"\n\n```\n\n----------------------------------------\n\nTITLE: Include Directories Configuration\nDESCRIPTION: Sets up include directories for various JUCE modules including audio processors, VST3 SDK, and LV2 SDK components.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPluginHost/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories( AFTER\n    \"../../../../../modules/juce_audio_processors/format_types/LV2_SDK/lilv/src\"\n    \"../../../../../modules/juce_audio_processors/format_types/LV2_SDK/lilv\"\n    \"../../../../../modules/juce_audio_processors/format_types/LV2_SDK/sratom\"\n    \"../../../../../modules/juce_audio_processors/format_types/LV2_SDK/sord/src\"\n    \"../../../../../modules/juce_audio_processors/format_types/LV2_SDK/sord\"\n    \"../../../../../modules/juce_audio_processors/format_types/LV2_SDK/serd\"\n    \"../../../../../modules/juce_audio_processors/format_types/LV2_SDK/lv2\"\n    \"../../../../../modules/juce_audio_processors/format_types/LV2_SDK\"\n    \"../../../../../modules/juce_audio_processors/format_types/VST3_SDK\"\n    \"../../../JuceLibraryCode\"\n    \"../../../../../modules\"\n    \"${ANDROID_NDK}/sources/android/cpufeatures\"\n)\n```\n\n----------------------------------------\n\nTITLE: Changing getRawParameterValue Return Type - C++\nDESCRIPTION: Changed the return type of AudioProcessorValueTreeState::getRawParameterValue to std::atomic<float>* from float*, enhancing thread safety. Users need to update their code to accommodate the new type.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\n// Updated return type\nstd::atomic<float>* getRawParameterValue (/* params */);\n```\n\n----------------------------------------\n\nTITLE: Creating Stereo Resampler\nDESCRIPTION: Demonstrates initialization of a stereo resampler that converts from 44.1kHz to 48kHz with medium quality settings.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_devices/native/oboe/src/flowgraph/resampler/README.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nMultiChannelResampler *resampler = MultiChannelResampler::make(\n        2, // channel count\n        44100, // input sampleRate\n        48000, // output sampleRate\n        MultiChannelResampler::Quality::Medium); // conversion quality\n```\n\n----------------------------------------\n\nTITLE: Running React App in Development Mode\nDESCRIPTION: Starts the React application in development mode, allowing for live reloading and displaying lint errors in the console.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/Plugins/WebViewPluginDemoGUI/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Android Library Dependencies Configuration\nDESCRIPTION: CMake configuration for finding and linking required Android system libraries including logging, Android framework, OpenGL ES, and EGL.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPluginHost/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfind_library(log \"log\")\nfind_library(android \"android\")\nfind_library(glesv3 \"GLESv3\")\nfind_library(egl \"EGL\")\n\ntarget_link_libraries( ${BINARY_NAME}\n    ${log}\n    ${android}\n    ${glesv3}\n    ${egl}\n    \"cpufeatures\"\n    \"oboe\"\n)\n```\n\n----------------------------------------\n\nTITLE: Reference Links in Markdown\nDESCRIPTION: Collection of markdown reference links used in the document footer for attributions and additional resources\nSOURCE: https://github.com/juce-framework/juce/blob/master/CODE_OF_CONDUCT.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n```\n\n----------------------------------------\n\nTITLE: Setting Source File Properties in CMake for JUCE Project Files\nDESCRIPTION: A CMake command that sets properties for numerous source files in the JUCE project, including plugin headers, UI components, audio assets, and core audio modules like MIDI, MPE, audio sources, synthesizers and utilities.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPluginHost/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset_source_files_properties(\n    \"../../../Source/Plugins/ARAPlugin.h\"\n    \"../../../Source/Plugins/InternalPlugins.h\"\n    \"../../../Source/Plugins/IOConfigurationWindow.h\"\n    \"../../../Source/Plugins/PluginGraph.h\"\n    \"../../../Source/UI/GraphEditorPanel.h\"\n    \"../../../Source/UI/MainHostWindow.h\"\n    \"../../../Source/UI/PluginWindow.h\"\n    \"../../../Source/JUCEAppIcon.png\"\n    \"../../../../../examples/Assets/cassette_recorder.wav\"\n    \"../../../../../examples/Assets/cello.wav\"\n    \"../../../../../examples/Assets/guitar_amp.wav\"\n    \"../../../../../examples/Assets/proaudio.path\"\n    \"../../../../../examples/Assets/reverb_ir.wav\"\n    \"../../../../../examples/Assets/singing.ogg\"\n    \"../../../../../modules/juce_audio_basics/audio_play_head/juce_AudioPlayHead.cpp\"\n    \"../../../../../modules/juce_audio_basics/audio_play_head/juce_AudioPlayHead.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioChannelSet.cpp\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioChannelSet.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioDataConverters.cpp\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioDataConverters.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioProcessLoadMeasurer.cpp\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioProcessLoadMeasurer.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioSampleBuffer.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_FloatVectorOperations.cpp\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_FloatVectorOperations.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMP.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMP_test.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPacket.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPackets.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPBytesOnGroup.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPConversion.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPConverters.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPDeviceInfo.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPDispatcher.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPFactory.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPIterator.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPIterator.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPMidi1ToBytestreamTranslator.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPMidi1ToMidi2DefaultTranslator.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPMidi1ToMidi2DefaultTranslator.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPProtocols.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPReceiver.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPSysEx7.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPSysEx7.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPUtils.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPUtils.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPView.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPView.h\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiBuffer.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiBuffer.h\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiDataConcatenator.h\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiFile.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiFile.h\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiKeyboardState.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiKeyboardState.h\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiMessage.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiMessage.h\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiMessageSequence.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiMessageSequence.h\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiRPN.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiRPN.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEInstrument.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEInstrument.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEMessages.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEMessages.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPENote.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPENote.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPESynthesiser.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPESynthesiser.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPESynthesiserBase.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPESynthesiserBase.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPESynthesiserVoice.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPESynthesiserVoice.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEUtils.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEUtils.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEValue.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEValue.h\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEZoneLayout.cpp\"\n    \"../../../../../modules/juce_audio_basics/mpe/juce_MPEZoneLayout.h\"\n    \"../../../../../modules/juce_audio_basics/native/juce_AudioWorkgroup_mac.h\"\n    \"../../../../../modules/juce_audio_basics/native/juce_CoreAudioLayouts_mac.h\"\n    \"../../../../../modules/juce_audio_basics/native/juce_CoreAudioTimeConversions_mac.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_AudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_BufferingAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_BufferingAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_ChannelRemappingAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_ChannelRemappingAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_IIRFilterAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_IIRFilterAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_MemoryAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_MemoryAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_MixerAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_MixerAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_PositionableAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_PositionableAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_ResamplingAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_ResamplingAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_ReverbAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_ReverbAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_ToneGeneratorAudioSource.cpp\"\n    \"../../../../../modules/juce_audio_basics/sources/juce_ToneGeneratorAudioSource.h\"\n    \"../../../../../modules/juce_audio_basics/synthesisers/juce_Synthesiser.cpp\"\n    \"../../../../../modules/juce_audio_basics/synthesisers/juce_Synthesiser.h\"\n    \"../../../../../modules/juce_audio_basics/utilities/juce_ADSR.h\"\n    \"../../../../../modules/juce_audio_basics/utilities/juce_ADSR_test.cpp\"\n    \"../../../../../modules/juce_audio_basics/utilities/juce_AudioWorkgroup.cpp\"\n    \"../../../../../modules/juce_audio_basics/utilities/juce_AudioWorkgroup.h\"\n    \"../../../../../modules/juce_audio_basics/utilities/juce_Decibels.h\"\n    \"../../../../../modules/juce_audio_basics/utilities/juce_GenericInterpolator.h\"\n    \"../../../../../modules/juce_audio_basics/utilities/juce_IIRFilter.cpp\"\n    \"../../../../../modules/juce_audio_basics/utilities/juce_IIRFilter.h\"\n    \"../../../../../modules/juce_audio_basics/utilities/juce_Interpolators.cpp\"\n    \"../../../../../modules/juce_audio_basics/utilities/juce_Interpolators.h\"\n    \"../../../../../modules/juce_audio_basics/utilities/juce_LagrangeInterpolator.cpp\"\n    \"../../../../../modules/juce_audio_basics/utilities/juce_Reverb.h\"\n    \"../../../../../modules/juce_audio_basics/utilities/juce_SmoothedValue.cpp\"\n    \"../../../../../modules/juce_audio_basics/utilities/juce_SmoothedValue.h\"\n    \"../../../../../modules/juce_audio_basics/utilities/juce_WindowedSincInterpolator.cpp\"\n    \"../../../../../modules/juce_audio_basics/juce_audio_basics.cpp\"\n    \"../../../../../modules/juce_audio_basics/juce_audio_basics.mm\"\n    \"../../../../../modules/juce_audio_basics/juce_audio_basics.h\"\n    \"../../../../../modules/juce_audio_devices/audio_io/juce_AudioDeviceManager.cpp\"\n    \"../../../../../modules/juce_audio_devices/audio_io/juce_AudioDeviceManager.h\"\n    \"../../../../../modules/juce_audio_devices/audio_io/juce_AudioIODevice.cpp\"\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to the Target\nDESCRIPTION: Links the JUCE core module and recommended configuration flags to the console application target. This connects the necessary JUCE components to the application.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/CMake/ConsoleApp/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(ConsoleAppExample\n    PRIVATE\n        # ConsoleAppData            # If you'd created a binary data target, you'd link to it here\n        juce::juce_core\n    PUBLIC\n        juce::juce_recommended_config_flags\n        juce::juce_recommended_warning_flags)\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice to include in files to apply the Apache License 2.0. The template includes placeholders for copyright year and owner information that should be replaced with actual project details.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/DemoRunner/Builds/Android/gradle/wrapper/LICENSE-for-gradlewrapper.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright {yyyy} {name of copyright owner}\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Setting Source File Properties in CMake for JUCE Framework\nDESCRIPTION: A CMake command that sets properties for a large list of source files in the JUCE framework. This configuration appears to be part of the build system for the JUCE demos application, including various module files and UI components.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/DemoRunner/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset_source_files_properties(\n    \"../../../Source/Demos/IntroScreen.h\"\n    \"../../../Source/Demos/JUCEDemos.h\"\n    \"../../../Source/UI/DemoContentComponent.h\"\n    \"../../../Source/UI/MainComponent.h\"\n    \"../../../Source/UI/SettingsContent.h\"\n    \"../../../Source/JUCEAppIcon.png\"\n    \"../../../../../modules/juce_analytics/analytics/juce_Analytics.cpp\"\n    \"../../../../../modules/juce_analytics/analytics/juce_Analytics.h\"\n    \"../../../../../modules/juce_analytics/analytics/juce_ButtonTracker.cpp\"\n    \"../../../../../modules/juce_analytics/analytics/juce_ButtonTracker.h\"\n    \"../../../../../modules/juce_analytics/destinations/juce_AnalyticsDestination.h\"\n    \"../../../../../modules/juce_analytics/destinations/juce_ThreadedAnalyticsDestination.cpp\"\n    \"../../../../../modules/juce_analytics/destinations/juce_ThreadedAnalyticsDestination.h\"\n    \"../../../../../modules/juce_analytics/juce_analytics.cpp\"\n    \"../../../../../modules/juce_analytics/juce_analytics.h\"\n    \"../../../../../modules/juce_animation/animation/juce_Animator.cpp\"\n    \"../../../../../modules/juce_animation/animation/juce_Animator.h\"\n    \"../../../../../modules/juce_animation/animation/juce_AnimatorSetBuilder.cpp\"\n    \"../../../../../modules/juce_animation/animation/juce_AnimatorSetBuilder.h\"\n    \"../../../../../modules/juce_animation/animation/juce_AnimatorUpdater.cpp\"\n    \"../../../../../modules/juce_animation/animation/juce_AnimatorUpdater.h\"\n    \"../../../../../modules/juce_animation/animation/juce_Easings.cpp\"\n    \"../../../../../modules/juce_animation/animation/juce_Easings.h\"\n    \"../../../../../modules/juce_animation/animation/juce_StaticAnimationLimits.h\"\n    \"../../../../../modules/juce_animation/animation/juce_ValueAnimatorBuilder.cpp\"\n    \"../../../../../modules/juce_animation/animation/juce_ValueAnimatorBuilder.h\"\n    \"../../../../../modules/juce_animation/animation/juce_VBlankAnimatorUpdater.h\"\n    \"../../../../../modules/juce_animation/detail/chromium/cubic_bezier.cc\"\n    \"../../../../../modules/juce_animation/detail/chromium/cubic_bezier.h\"\n    \"../../../../../modules/juce_animation/detail/juce_ArrayAndTupleOps.h\"\n    \"../../../../../modules/juce_animation/juce_animation.cpp\"\n    \"../../../../../modules/juce_animation/juce_animation.h\"\n    \"../../../../../modules/juce_audio_basics/audio_play_head/juce_AudioPlayHead.cpp\"\n    \"../../../../../modules/juce_audio_basics/audio_play_head/juce_AudioPlayHead.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioChannelSet.cpp\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioChannelSet.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioDataConverters.cpp\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioDataConverters.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioProcessLoadMeasurer.cpp\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioProcessLoadMeasurer.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_AudioSampleBuffer.h\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_FloatVectorOperations.cpp\"\n    \"../../../../../modules/juce_audio_basics/buffers/juce_FloatVectorOperations.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMP.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMP_test.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPacket.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPackets.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPBytesOnGroup.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPConversion.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPConverters.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPDeviceInfo.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPDispatcher.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPFactory.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPIterator.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPIterator.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPMidi1ToBytestreamTranslator.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPMidi1ToMidi2DefaultTranslator.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPMidi1ToMidi2DefaultTranslator.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPProtocols.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPReceiver.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPSysEx7.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPSysEx7.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPUtils.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPUtils.h\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPView.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/ump/juce_UMPView.h\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiBuffer.cpp\"\n    \"../../../../../modules/juce_audio_basics/midi/juce_MidiBuffer.h\"\n```\n\n----------------------------------------\n\nTITLE: Building React App for Production\nDESCRIPTION: Builds the React application for production, creating optimized and minified files in the 'build' folder.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/Plugins/WebViewPluginDemoGUI/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Linking Android Libraries in CMake\nDESCRIPTION: Links required Android system libraries, CPU features, and Oboe audio library to the target binary\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/NetworkGraphicsDemo/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries( ${BINARY_NAME}\n\n    ${log}\n    ${android}\n    ${glesv3}\n    ${egl}\n    \"cpufeatures\"\n    \"oboe\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Header-Only Files in JUCE Framework\nDESCRIPTION: Declares a list of header and source files from various JUCE modules (OSC, product unlocking, video) to be treated as header-only, preventing compilation of these files directly.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/DemoRunner/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nPROPERTIES HEADER_FILE_ONLY TRUE)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Core CMake Configuration\nDESCRIPTION: Initializes basic CMake project settings including minimum version, project name, and binary name. Also sets up the Oboe audio library directory.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPluginHost/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.22)\n\nproject(juce_jni_project)\n\nset(BINARY_NAME \"juce_jni\")\n\nset(OBOE_DIR \"../../../../../modules/juce_audio_devices/native/oboe\")\n\nadd_subdirectory (${OBOE_DIR} ./oboe)\n```\n\n----------------------------------------\n\nTITLE: Running React App Tests\nDESCRIPTION: Launches the test runner in interactive watch mode for running tests in the React application.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/Plugins/WebViewPluginDemoGUI/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Creating JUCE Console Application Target\nDESCRIPTION: Adds an executable target for the console application with a specified product name using JUCE's custom CMake function.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/CMake/ConsoleApp/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\njuce_add_console_app(ConsoleAppExample\n    PRODUCT_NAME \"Console App Example\")\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies\nDESCRIPTION: Links required JUCE libraries and configurations to the Audio Plugin Host.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPluginHost/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(AudioPluginHost PRIVATE\n    AudioPluginHostData\n    juce::juce_audio_utils\n    juce::juce_cryptography\n    juce::juce_dsp\n    juce::juce_opengl\n    juce::juce_recommended_config_flags\n    juce::juce_recommended_lto_flags\n    juce::juce_recommended_warning_flags)\n```\n\n----------------------------------------\n\nTITLE: Adding JUCE Build Tools Module in CMake\nDESCRIPTION: This snippet adds the juce_build_tools module to the build system with an alias namespace 'juce' and adds the 'juceaide' subdirectory to the build process.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/Build/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\njuce_add_module(juce_build_tools ALIAS_NAMESPACE juce)\n\nadd_subdirectory(juceaide)\n```\n\n----------------------------------------\n\nTITLE: JUCE_COREGRAPHICS_RENDER_WITH_MULTIPLE_PAINT_CALLS behavior\nDESCRIPTION: The optional JUCE_COREGRAPHICS_RENDER_WITH_MULTIPLE_PAINT_CALLS preprocessor flag now uses a new Metal layer renderer when running on macOS 10.14 or later. Previously enabling JUCE_COREGRAPHICS_RENDER_WITH_MULTIPLE_PAINT_CALLS had no negative effect on performance. Now it may slow rendering down. Disable JUCE_COREGRAPHICS_RENDER_WITH_MULTIPLE_PAINT_CALLS.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for JUCE JNI on Android\nDESCRIPTION: Sets up the initial CMake project configuration, including minimum CMake version, project name, and binary name.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/DemoRunner/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.22)\n\nproject(juce_jni_project)\n\nset(BINARY_NAME \"juce_jni\")\n```\n\n----------------------------------------\n\nTITLE: CPU Features Library Configuration\nDESCRIPTION: Adds the Android CPU features library and sets specific compiler flags to handle warnings.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPluginHost/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(\"cpufeatures\" STATIC \"${ANDROID_NDK}/sources/android/cpufeatures/cpu-features.c\")\nset_source_files_properties(\"${ANDROID_NDK}/sources/android/cpufeatures/cpu-features.c\" PROPERTIES COMPILE_FLAGS \"-Wno-sign-conversion -Wno-gnu-statement-expression\")\n```\n\n----------------------------------------\n\nTITLE: Generating Project Files for VST3 SDK on macOS\nDESCRIPTION: CMake commands to generate either Xcode project files or standard Makefiles for macOS. Shows how to specify build type for non-Xcode builds.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_processors/format_types/VST3_SDK/README.md#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n// For XCode:\ncmake -GXcode ../vst3sdk\n// Without XCode (here debug variant):\ncmake -DCMAKE_BUILD_TYPE=Debug ../\n```\n\n----------------------------------------\n\nTITLE: Generating VS2022 Project for VST3 SDK on Windows\nDESCRIPTION: CMake commands to generate Visual Studio 2022 solution files for x64 architecture. Shows different options including without symbolic links and using user program files location.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_processors/format_types/VST3_SDK/README.md#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n// examples:\ncmake.exe -G \"Visual Studio 17 2022\" -A x64 ..\\vst3sdk\n// or without symbolic links\ncmake.exe -G \"Visual Studio 17 2022\" -A x64 ..\\vst3sdk -DSMTG_CREATE_PLUGIN_LINK=0\n// or by using the local user program folder (FOLDERID_UserProgramFilesCommon) as VST3 folder\ncmake.exe -G \"Visual Studio 17 2022\" -A x64 -DSMTG_PLUGIN_TARGET_USER_PROGRAM_FILES_COMMON=1\n```\n\n----------------------------------------\n\nTITLE: Building VST3 SDK on Windows using MSBuild\nDESCRIPTION: Commands to build the generated Visual Studio solution using either MSBuild or CMake. Shows both default and release configuration options.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_processors/format_types/VST3_SDK/README.md#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nmsbuild.exe vstsdk.sln\n// (or alternatively for example for release)\ncmake --build . --config Release\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: This robots.txt configuration specifies access rules for web crawlers. It allows all user agents ('*') full access to the website by not specifying any disallowed paths.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/Plugins/WebViewPluginDemoGUI/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Setting Source File Properties in C++\nDESCRIPTION: This code snippet sets properties for various source files in the JUCE project, including demo files, components, and audio module files.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/NetworkGraphicsDemo/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nset_source_files_properties(\n    \"../../../Source/Demos.h\"\n    \"../../../Source/MasterComponent.h\"\n    \"../../../Source/ClientComponent.h\"\n    \"../../../Source/SharedCanvas.h\"\n    \"../../../Source/juce_icon.png\"\n    \"../../../../../modules/juce_audio_basics/audio_play_head/juce_AudioPlayHead.cpp\"\n    \"../../../../../modules/juce_audio_basics/audio_play_head/juce_AudioPlayHead.h\"\n    // ... (additional file paths omitted for brevity)\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Build with Code Signing\nDESCRIPTION: Commands to configure a CMake project for iOS with developer code signing capabilities.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncmake -Bbuild-ios -GXcode -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_DEPLOYMENT_TARGET=9.3 \\\n    -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY=\"iPhone Developer\"\n    -DCMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM=<10 character id>\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet provides the boilerplate notice required to apply the Apache License 2.0 to your work. You should replace the bracketed fields with your identifying information. The text should be enclosed in the appropriate comment syntax for the file format.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_plugin_client/AU/AudioUnitSDK/LICENSE.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"Copyright [yyyy] [name of copyright owner]\\n\\nLicensed under the Apache License, Version 2.0 (the \\\"License\\\");\\nyou may not use this file except in compliance with the License.\\nYou may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\nUnless required by applicable law or agreed to in writing, software\\ndistributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\nSee the License for the specific language governing permissions and\\nlimitations under the License.\"\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template for the copyright and license notice that should be included in source files. Users should replace the placeholder fields with their own information and include this in the appropriate comment syntax for their file format.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPluginHost/Builds/Android/gradle/wrapper/LICENSE-for-gradlewrapper.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright {yyyy} {name of copyright owner}\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Building a CMake Target\nDESCRIPTION: Command to build a specific target in a specified configuration using CMake.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/CMake API.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncmake --build build (--target targetNameFromCMakeLists) (--config Release/Debug/...)\n```\n\n----------------------------------------\n\nTITLE: Cloning the VST3 SDK from GitHub Repository\nDESCRIPTION: Command to clone the VST3 SDK repository with all its submodules. The --recursive flag ensures that all submodules are also cloned.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_processors/format_types/VST3_SDK/README.md#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ngit clone --recursive https://github.com/steinbergmedia/vst3sdk.git\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake minimum version requirement\nDESCRIPTION: Specifies the minimum CMake version required for the project. This ensures compatibility with the installed CMake version.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/CMake/GuiApp/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.22)\n```\n\n----------------------------------------\n\nTITLE: Invoking JUCE PIP Generation Function in CMake\nDESCRIPTION: This snippet calls the _juce_add_pips() function which is responsible for adding JUCE PIP modules to a project. PIPs (Projucer-compatible modules) are a component of the JUCE framework ecosystem.\nSOURCE: https://github.com/juce-framework/juce/blob/master/examples/Plugins/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n_juce_add_pips()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for JUCE Android Native Interface\nDESCRIPTION: Sets up the CMake project configuration for JUCE Android JNI integration. It defines the minimum CMake version, project name, and binary name for the shared library.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/AudioPerformanceTest/Builds/Android/app/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.22)\n\nproject(juce_jni_project)\n\nset(BINARY_NAME \"juce_jni\")\n```\n\n----------------------------------------\n\nTITLE: Updating CFStringGetCString call in AUBase.h\nDESCRIPTION: Changed the CFStringGetCString function call to use std::data and std::size for the ioInfo.name parameter, replacing the previous direct array access and offsetof usage. This change accommodates an additional data member in the AudioUnitParameterInfo structure.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_plugin_client/AU/AudioUnitSDK/JUCE CHANGES.txt#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nCFStringGetCString(inName, std::data(ioInfo.name), std::size(ioInfo.name), ...\n```\n\n----------------------------------------\n\nTITLE: Compressing DEX Bytecode with GZIP\nDESCRIPTION: Command to compress the generated DEX bytecode file using gzip. This prepares the bytecode for efficient inclusion in the JUCE framework.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_core/native/java/README.txt#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngzip /tmp/JavaDexByteCode.dex\n```\n\n----------------------------------------\n\nTITLE: Fixed Input Frame Processing\nDESCRIPTION: Shows how to process audio with a fixed number of input frames while handling variable output frames.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_devices/native/oboe/src/flowgraph/resampler/README.md#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nint inputFramesLeft = numInputFrames;\nwhile (inputFramesLeft > 0) {\n    if(resampler->isWriteNeeded()) {\n        resampler->writeNextFrame(inputBuffer);\n        inputBuffer += channelCount;\n        inputFramesLeft--;\n    } else {\n        resampler->readNextFrame(outputBuffer);\n        outputBuffer += channelCount;\n        numOutputFrames++;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Clang Compiler for JUCE on Linux\nDESCRIPTION: Commands to update package list and install Clang compiler on Ubuntu systems.\nSOURCE: https://github.com/juce-framework/juce/blob/master/docs/Linux Dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install clang\n```\n\n----------------------------------------\n\nTITLE: Adding Binary Resources in CMake\nDESCRIPTION: Includes binary resources such as icons, templates, and other assets needed by the Projucer application.\nSOURCE: https://github.com/juce-framework/juce/blob/master/extras/Projucer/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\njuce_add_binary_data(ProjucerData SOURCES\n    Source/BinaryData/Icons/background_logo.svg\n    Source/BinaryData/Icons/export_android.svg\n    Source/BinaryData/Icons/export_linux.svg\n    Source/BinaryData/Icons/export_visualStudio.svg\n    Source/BinaryData/Icons/export_xcode.svg\n    Source/BinaryData/Icons/juce_icon.png\n    [... additional files ...]\n    ../Build/CMake/juce_LinuxSubprocessHelper.cpp)\n```\n\n----------------------------------------\n\nTITLE: Updating Android Manifest XML in JUCE Projects\nDESCRIPTION: Demonstrates how to update the 'Custom manifest XML content' setting in JUCE projects to replace the deprecated 'Custom manifest xml elements' field. This change allows for more flexible Android manifest customization.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_22\n\nLANGUAGE: XML\nCODE:\n```\n<manifest>\n<application>\n<meta-data android:name=\"paramId1\" android:value=\"paramValue1\"/>\n<meta-data android:name=\"paramId2\" android:value=\"paramValue2\"/>\n</application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Updated Android WebBrowserComponent Method\nDESCRIPTION: Changes to pageAboutToLoad() function behavior on Android to only handle page navigation events rather than all resource fetches. Returns false to prevent navigation without error messages.\nSOURCE: https://github.com/juce-framework/juce/blob/master/BREAKING_CHANGES.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nWebBrowserComponent::pageAboutToLoad()\n```\n\n----------------------------------------\n\nTITLE: Building Vorbis from Source using Autotools\nDESCRIPTION: Commands to build Vorbis from the master branch using autotools. This process includes generating the configure script, configuring the build, compiling, and optionally installing the libraries and headers.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_formats/codecs/oggvorbis/libvorbis-1.3.7/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n./autogen.sh\n./configure\nmake\n\n# As root if desired:\nmake install\n```\n\n----------------------------------------\n\nTITLE: Creating VST3 Module Info JSON in C++\nDESCRIPTION: Shows how to create a moduleinfo.json file using ModuleInfoLib and the VST3 SDK hosting library. Creates module info from a module object and outputs it as JSON to the specified stream.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_processors/format_types/VST3_SDK/public.sdk/source/vst/moduleinfo/ReadMe.md#2025-04-21_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nauto moduleInfo = ModuleInfoLib::createModuleInfo (module, false);\nModuleInfoLib::outputJson (moduleInfo, std::cout);\n```\n\n----------------------------------------\n\nTITLE: Steinberg Media BSD-Style License Declaration\nDESCRIPTION: Copyright and license declaration for Steinberg Media Technologies software. Specifies conditions for redistribution, warranty disclaimers, and liability limitations in a BSD-style format.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_processors/format_types/VST3_SDK/base/LICENSE.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n//-----------------------------------------------------------------------------\n// LICENSE\n// (c) 2024, Steinberg Media Technologies GmbH, All Rights Reserved\n//-----------------------------------------------------------------------------\n// Redistribution and use in source and binary forms, with or without modification,\n// are permitted provided that the following conditions are met:\n// \n//   * Redistributions of source code must retain the above copyright notice, \n//     this list of conditions and the following disclaimer.\n//   * Redistributions in binary form must reproduce the above copyright notice,\n//     this list of conditions and the following disclaimer in the documentation \n//     and/or other materials provided with the distribution.\n//   * Neither the name of the Steinberg Media Technologies nor the names of its\n//     contributors may be used to endorse or promote products derived from this \n//     software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. \n// IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, \n// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, \n// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, \n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF \n// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE \n// OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  OF THIS SOFTWARE, EVEN IF ADVISED\n// OF THE POSSIBILITY OF SUCH DAMAGE.\n//-----------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Steinberg Media Technologies License Declaration\nDESCRIPTION: Copyright notice and BSD-style license terms for JUCE framework. Specifies conditions for redistribution, warranty disclaimers, and liability limitations.\nSOURCE: https://github.com/juce-framework/juce/blob/master/modules/juce_audio_processors/format_types/VST3_SDK/public.sdk/LICENSE.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n//-----------------------------------------------------------------------------\n// LICENSE\n// (c) 2024, Steinberg Media Technologies GmbH, All Rights Reserved\n//-----------------------------------------------------------------------------\n// Redistribution and use in source and binary forms, with or without modification,\n// are permitted provided that the following conditions are met:\n// \n//   * Redistributions of source code must retain the above copyright notice, \n//     this list of conditions and the following disclaimer.\n//   * Redistributions in binary form must reproduce the above copyright notice,\n//     this list of conditions and the following disclaimer in the documentation \n//     and/or other materials provided with the distribution.\n//   * Neither the name of the Steinberg Media Technologies nor the names of its\n//     contributors may be used to endorse or promote products derived from this \n//     software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. \n// IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, \n// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, \n// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, \n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF \n// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE \n// OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  OF THIS SOFTWARE, EVEN IF ADVISED\n// OF THE POSSIBILITY OF SUCH DAMAGE.\n//-----------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Email Link in Markdown\nDESCRIPTION: Markdown formatted email link for reporting code of conduct violations to the JUCE community leaders\nSOURCE: https://github.com/juce-framework/juce/blob/master/CODE_OF_CONDUCT.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[info@juce.com](mailto:info@juce.com)\n```"
  }
]