[
  {
    "owner": "pyqt5",
    "repo": "pyqt",
    "content": "TITLE: Installing PyQt5 with pip on Windows\nDESCRIPTION: Command to install PyQt5 and its tools using pip on Windows. This is the recommended approach for Python developers on Windows platforms.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QStackedWidget/README.en.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pyqt5 pyqt5-tools\n```\n\n----------------------------------------\n\nTITLE: Installing PyQt5 on macOS using pip\nDESCRIPTION: Command to install PyQt5 via pip on macOS systems. This approach works for most macOS versions and Python environments.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QStackedWidget/README.en.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip3 install pyqt5\n```\n\n----------------------------------------\n\nTITLE: Installing PyQt5 on Ubuntu/Debian Linux\nDESCRIPTION: Commands to install PyQt5 on Ubuntu or Debian-based Linux distributions using the apt package manager. This provides both PyQt5 libraries and developer tools.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QStackedWidget/README.en.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install python3-pyqt5 pyqt5-dev-tools\n```\n\n----------------------------------------\n\nTITLE: Creating a basic PyQt5 application window\nDESCRIPTION: Code demonstrating how to create a minimal PyQt5 application with a main window. Initializes the application, creates a window widget, sets its title and size, shows it, and runs the application event loop.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFlowLayout/README.en.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QWidget\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    w = QWidget()\n    w.setWindowTitle('Simple Window')\n    w.resize(300, 200)\n    w.show()\n    sys.exit(app.exec_())\n```\n\n----------------------------------------\n\nTITLE: Installing PyQT5 using conda\nDESCRIPTION: Command for installing PyQT5 using the conda package manager. This is recommended for users who manage their Python environment with Anaconda.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QLabel/README.en.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nconda install -c anaconda pyqt\n```\n\n----------------------------------------\n\nTITLE: Creating a basic Hello World GUI application with PyQt5\nDESCRIPTION: A complete example demonstrating how to create a simple Hello World GUI application using PyQt5. The code creates a window with a label displaying 'Hello World!' text.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QSlider/README.en.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QWidget, QLabel\nfrom PyQt5.QtCore import Qt\n\napp = QApplication(sys.argv)\n\nwindow = QWidget()\nwindow.setWindowTitle('PyQt5 App')\nwindow.setGeometry(100, 100, 280, 80)\nwindow.move(600, 15)\n\nhelloMsg = QLabel('<h1>Hello World!</h1>', parent=window)\nhelloMsg.move(60, 15)\n\nwindow.show()\n\nsys.exit(app.exec_())\n```\n\n----------------------------------------\n\nTITLE: Installing PyQT5 using pip\nDESCRIPTION: Command for installing PyQT5 using pip package manager. This is the recommended way to install PyQT5 for most Python users.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QLabel/README.en.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install pyqt5\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic PyQt5 Window Application\nDESCRIPTION: Python code example that demonstrates how to create a basic window application using PyQt5. This snippet shows importing necessary PyQt5 modules, creating a QApplication instance, defining a main window, and starting the application event loop.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QStackedWidget/README.en.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QWidget\n\napp = QApplication(sys.argv)\nwindow = QWidget()\nwindow.setWindowTitle('Simple PyQt Window')\nwindow.setGeometry(100, 100, 400, 300)  # x, y, width, height\nwindow.show()\n\nsys.exit(app.exec_())\n```\n\n----------------------------------------\n\nTITLE: Installing PyQt5 using pip\nDESCRIPTION: Command to install PyQt5 package using pip. This is a prerequisite for running PyQt applications.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QScrollArea/README.en.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pyqt5\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic QWidget Application in PyQt5\nDESCRIPTION: Example demonstrating how to create a simple PyQt5 application with a QWidget. The code imports required modules, creates a QApplication instance, instantiates a QWidget, sets its window title and size, displays it, and starts the application event loop.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QWebView/README.en.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QWidget\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    w = QWidget()\n    w.setWindowTitle('Simple')\n    w.resize(300, 150)\n    w.show()\n    sys.exit(app.exec_())\n```\n\n----------------------------------------\n\nTITLE: Installing PyQt5 using pip in Python\nDESCRIPTION: Simple command to install PyQt5 using pip package manager. This is the recommended way to install PyQt5 for most users.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QSlider/README.en.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pyqt5\n```\n\n----------------------------------------\n\nTITLE: Creating a basic PyQt5 application window\nDESCRIPTION: A simple Python example that demonstrates how to create a basic GUI window using PyQt5. This code imports necessary modules, creates an application instance, a main window, and starts the event loop.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QColumnView/README.en.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QMainWindow\n\napp = QApplication(sys.argv)\nwindow = QMainWindow()\nwindow.setWindowTitle(\"My First PyQt5 App\")\nwindow.setGeometry(100, 100, 800, 600)\nwindow.show()\n\nsys.exit(app.exec_())\n```\n\n----------------------------------------\n\nTITLE: Installing PyQt5 using pip on macOS, Linux, and Windows\nDESCRIPTION: Command to install the PyQt5 package using pip package manager. This is the recommended installation method for most Python developers.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QSpacerItem/README.en.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pyqt5\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Table Model Class in PyQt5\nDESCRIPTION: Implementation of a TableModel class that inherits from QAbstractTableModel to display data in a QTableView. The model handles data storage, row filtering, column visibility, and implements required methods like rowCount, columnCount, and data.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/PyQtGraph/README.en.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass TableModel(QtCore.QAbstractTableModel):\n    \"\"\"A model for displaying data in a table view.\n\n    The model stores data as a list of lists. First row contains column names.\n    \"\"\"\n\n    def __init__(self, data, parent=None):\n        super().__init__(parent)\n        self._data = data or [[]]  # List of lists\n        self._filter_rows = list(range(self.rowCount()))\n        self._columns = {}\n        for c, h in enumerate(self._data[0]):\n            self._columns[c] = {'name': h, 'visible': True}\n        self._sort_by_column = None\n        self._sort_order = None\n\n    def rowCount(self, parent=None):\n        \"\"\"Return the number of rows.\"\"\"\n        return len(self._data) - 1  # Excluding the header\n\n    def columnCount(self, parent=None):\n        \"\"\"Return the number of columns.\"\"\"\n        return len(self._data[0]) if self._data else 0\n\n    def data(self, index, role=QtCore.Qt.DisplayRole):\n        \"\"\"Return the data at the given index for the given role.\"\"\"\n        if not index.isValid():\n            return None\n\n        row = self._filter_rows[index.row()] if self._filter_rows else index.row()\n        row = row + 1  # +1 to skip the header\n        col = index.column()\n\n        try:\n            value = self._data[row][col]\n        except IndexError:\n            return None\n\n        if role == QtCore.Qt.DisplayRole:\n            return str(value)\n\n        return None\n\n    def headerData(self, section, orientation, role=QtCore.Qt.DisplayRole):\n        \"\"\"Return the header data for the given section and orientation.\"\"\"\n        if orientation == QtCore.Qt.Horizontal and role == QtCore.Qt.DisplayRole:\n            try:\n                return self._columns[section]['name']\n            except (IndexError, KeyError):\n                return None\n\n        if orientation == QtCore.Qt.Vertical and role == QtCore.Qt.DisplayRole:\n            try:\n                return section + 1\n            except IndexError:\n                return None\n\n        return None\n\n    def filter_rows(self, filter_function):\n        \"\"\"Filter rows using the given filter function.\"\"\"\n        self.beginResetModel()\n        self._filter_rows = [i for i in range(self.rowCount()) \n                            if filter_function(self._data[i + 1])]\n        self.endResetModel()\n\n    def reset_filter(self):\n        \"\"\"Reset row filtering.\"\"\"\n        self.beginResetModel()\n        self._filter_rows = list(range(self.rowCount()))\n        self.endResetModel()\n\n    def set_column_visibility(self, column, visible):\n        \"\"\"Set the visibility of the given column.\"\"\"\n        self.beginResetModel()\n        try:\n            self._columns[column]['visible'] = visible\n        except KeyError:\n            pass\n        self.endResetModel()\n\n    def get_visible_columns(self):\n        \"\"\"Return a list of visible column indices.\"\"\"\n        return [c for c, info in self._columns.items() if info['visible']]\n\n    def sort(self, column, order):\n        \"\"\"Sort the data by the given column and order.\"\"\"\n        self.beginResetModel()\n        self._sort_by_column = column\n        self._sort_order = order\n        # Implement sorting logic here\n        self.endResetModel()\n```\n\n----------------------------------------\n\nTITLE: Installing PyQt5 using pip\nDESCRIPTION: Command to install PyQt5 and its tools via pip package manager. This is the recommended and simplest method to install PyQt5 for most users.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QGroupBox/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pyqt5 pyqt5-tools\n```\n\n----------------------------------------\n\nTITLE: Connecting a signal to a slot in PySide/PyQt\nDESCRIPTION: Example demonstrating how to connect a signal from a QPushButton to a predefined slot function. When the button is clicked, the 'quit' slot is called, which exits the application.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QTreeView/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nbutton.clicked.connect(quit)\n```\n\n----------------------------------------\n\nTITLE: Verifying PyQt5 installation with Python import\nDESCRIPTION: Python code snippet to verify that PyQt5 is properly installed by attempting to import it. If successful, no errors will be raised.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QColumnView/README.en.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport PyQt5\n```\n\n----------------------------------------\n\nTITLE: Custom Formatting QDateTime Output in Python\nDESCRIPTION: Demonstrates how to apply custom formatting to a QDateTime object using the toString() method with a format string. This example formats the date and time with custom separators and order.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QDateTimeEdit/README.en.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndatetime = QDateTime.currentDateTime()\nstring = datetime.toString(\"yyyy-MM-dd hh:mm:ss\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic PyQt5 Window Application\nDESCRIPTION: A simple PyQt5 application that creates a window with a title and size. This example demonstrates the core components needed to create and display a basic GUI window using PyQt5.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QSpacerItem/README.en.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QWidget\n\nif __name__ == '__main__':\n    # Create the application object\n    app = QApplication(sys.argv)\n    \n    # Create a widget (window)\n    window = QWidget()\n    \n    # Set window properties\n    window.setWindowTitle('PyQt5 Window')\n    window.setGeometry(100, 100, 400, 300)  # x, y, width, height\n    \n    # Show the window\n    window.show()\n    \n    # Start the event loop\n    sys.exit(app.exec_())\n```\n\n----------------------------------------\n\nTITLE: Converting UTC QDateTime to Local Time in Python\nDESCRIPTION: Demonstrates how to convert a QDateTime object from UTC time to local time. This is useful when working with timestamps from different time zones that need to be displayed in the user's local time.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QDateTimeEdit/README.en.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nutcTime = QDateTime.currentDateTimeUtc()\nlocalTime = utcTime.toLocalTime()\n```\n\n----------------------------------------\n\nTITLE: Creating a PyQt5 Button with Click Handler\nDESCRIPTION: Python code example showing how to create a window with a button and a click event handler using PyQt5. This demonstrates adding interactive controls to a PyQt application and connecting signals to slots.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QStackedWidget/README.en.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QVBoxLayout\n\nclass SimpleWindow(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n        \n    def initUI(self):\n        layout = QVBoxLayout()\n        \n        button = QPushButton('Click Me')\n        button.clicked.connect(self.on_button_click)\n        \n        layout.addWidget(button)\n        self.setLayout(layout)\n        \n        self.setWindowTitle('Button Example')\n        self.setGeometry(300, 300, 300, 200)\n        \n    def on_button_click(self):\n        print('Button clicked!')\n\napp = QApplication(sys.argv)\nwindow = SimpleWindow()\nwindow.show()\nsys.exit(app.exec_())\n```\n\n----------------------------------------\n\nTITLE: Implementing QSplitter with QTextEdit Widgets in PyQt5\nDESCRIPTION: This snippet creates a QSplitter widget with two QTextEdit widgets as its children. It sets up the main window, initializes the splitter, adds it to the window's layout, and runs the application.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QtWinExtras/README.en.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QWidget, QHBoxLayout, QFrame, QSplitter, QTextEdit\nfrom PyQt5.QtCore import Qt\n\nclass Example(QWidget):\n\n    def __init__(self):\n        super().__init__()\n\n        self.initUI()\n\n    def initUI(self):\n\n        hbox = QHBoxLayout(self)\n\n        topleft = QFrame(self)\n        topleft.setFrameShape(QFrame.StyledPanel)\n\n        topright = QFrame(self)\n        topright.setFrameShape(QFrame.StyledPanel)\n\n        splitter1 = QSplitter(Qt.Horizontal)\n        textedit = QTextEdit()\n        splitter1.addWidget(topleft)\n        splitter1.addWidget(textedit)\n\n        splitter2 = QSplitter(Qt.Vertical)\n        splitter2.addWidget(splitter1)\n        splitter2.addWidget(topright)\n\n        hbox.addWidget(splitter2)\n        self.setLayout(hbox)\n\n        self.setGeometry(300, 300, 300, 200)\n        self.setWindowTitle('QSplitter')\n        self.show()\n\nif __name__ == '__main__':\n\n    app = QApplication(sys.argv)\n    ex = Example()\n    sys.exit(app.exec_())\n```\n\n----------------------------------------\n\nTITLE: Setting Window Icon in PyQt5 Application\nDESCRIPTION: This code shows how to set a window icon in a PyQt5 application by creating a QIcon instance and applying it using the setWindowIcon method. The example includes importing necessary modules and setting up a basic window.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QSplitter/README.en.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QMainWindow\nfrom PyQt5.QtGui import QIcon\n\napp = QApplication(sys.argv)\nwindow = QMainWindow()\nwindow.setWindowTitle('PyQt5 Window Icon Example')\nwindow.setGeometry(100, 100, 400, 300)\n\n# Set the window icon\nwindow.setWindowIcon(QIcon('icon.png'))\n\nwindow.show()\nsys.exit(app.exec_())\n```\n\n----------------------------------------\n\nTITLE: Creating System Tray Icon in PyQt5\nDESCRIPTION: This code example shows how to implement a system tray icon in a PyQt5 application. It demonstrates creating a QSystemTrayIcon, adding a context menu with actions, and handling icon clicks through signal connections.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QSplitter/README.en.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QMainWindow, QSystemTrayIcon, QMenu, QAction\nfrom PyQt5.QtGui import QIcon\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle('System Tray Icon Example')\n        self.setGeometry(100, 100, 400, 300)\n        \n        # Create the system tray icon\n        self.tray_icon = QSystemTrayIcon(self)\n        self.tray_icon.setIcon(QIcon('icon.png'))\n        \n        # Create the tray menu\n        tray_menu = QMenu()\n        show_action = QAction('Show', self)\n        quit_action = QAction('Exit', self)\n        \n        # Connect actions\n        show_action.triggered.connect(self.show)\n        quit_action.triggered.connect(QApplication.quit)\n        \n        # Add actions to menu\n        tray_menu.addAction(show_action)\n        tray_menu.addAction(quit_action)\n        \n        # Set the tray icon menu\n        self.tray_icon.setContextMenu(tray_menu)\n        \n        # Connect tray icon signals\n        self.tray_icon.activated.connect(self.tray_icon_activated)\n        \n        # Show the tray icon\n        self.tray_icon.show()\n    \n    def tray_icon_activated(self, reason):\n        if reason == QSystemTrayIcon.DoubleClick:\n            self.show()\n\napp = QApplication(sys.argv)\nwindow = MainWindow()\nwindow.show()\nsys.exit(app.exec_())\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Tooltip Text in PyQt5\nDESCRIPTION: This code demonstrates how to set a basic tooltip text for a QPushButton. The setToolTip method is used to assign descriptive text that appears when hovering over the button.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QWebChannel/README.en.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nbutton = QPushButton(\"Click Me\")\nbutton.setToolTip(\"This is a tooltip that appears when you hover over the button\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tooltip Widget in PyQt5\nDESCRIPTION: This snippet demonstrates how to create a custom tooltip by subclassing QLabel. It creates a tooltip with specific styling and behavior that can be used instead of the default tooltips.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QWebChannel/README.en.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nclass CustomTooltip(QLabel):\n    def __init__(self, parent=None):\n        super(CustomTooltip, self).__init__(parent)\n        self.setWindowFlags(Qt.ToolTip)\n        self.setStyleSheet(\"\"\"\n            background-color: #333333;\n            color: white;\n            border-radius: 5px;\n            padding: 10px;\n        \"\"\")\n        \n    def show_at(self, pos, text):\n        self.setText(text)\n        self.adjustSize()\n        self.move(pos)\n        self.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple PyQt5 Hello World Application\nDESCRIPTION: A minimal PyQt5 application that displays a window with a 'Hello World' label. The code demonstrates the essential components of a PyQt application including QApplication initialization, widget creation, and the main event loop execution.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QScrollArea/README.en.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QLabel, QWidget\n\n# Create the application object\napp = QApplication(sys.argv)\n\n# Create a window\nwindow = QWidget()\nwindow.setWindowTitle('PyQt5 Hello World')\nwindow.setGeometry(100, 100, 280, 80)  # x, y, width, height\n\n# Create a label with \"Hello World\" text\nlabel = QLabel('Hello World', parent=window)\nlabel.move(60, 15)  # Position the label within the window\n\n# Show the window\nwindow.show()\n\n# Start the event loop\nsys.exit(app.exec_())\n```\n\n----------------------------------------\n\nTITLE: Styling Tooltips with CSS in PyQt5\nDESCRIPTION: Example showing how to customize tooltip appearance using CSS styling with Qt stylesheets. This styles tooltips with a black background, white text, and a specific font.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QWebChannel/README.en.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\napp.setStyleSheet(\"\"\"\n    QToolTip { \n        background-color: black; \n        color: white; \n        border: none;\n        font: 12pt Arial;\n    }\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Loading Icons from Resource Files in PyQt5\nDESCRIPTION: This code demonstrates how to load icons from Qt resource files (.qrc) in a PyQt5 application. It shows the process of including the compiled resource file and referencing icons using the ':/path' syntax.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QSplitter/README.en.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QMainWindow\nfrom PyQt5.QtGui import QIcon\n# Import the compiled resource file\nimport resources_rc\n\napp = QApplication(sys.argv)\nwindow = QMainWindow()\n\n# Use icon from resource file (prefix with ':')\nwindow.setWindowIcon(QIcon(':/icons/app_icon.png'))\n\nwindow.show()\nsys.exit(app.exec_())\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Tooltips with Events in PyQt5\nDESCRIPTION: This code shows how to implement interactive tooltips using mouse event handling in a custom widget. It displays tooltips on hover and handles tooltip positioning based on mouse coordinates.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QWebChannel/README.en.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclass InteractiveWidget(QWidget):\n    def __init__(self, parent=None):\n        super(InteractiveWidget, self).__init__(parent)\n        self.tooltip = CustomTooltip()\n        self.tooltip_text = \"Interactive tooltip content\"\n        \n    def enterEvent(self, event):\n        # Show tooltip when mouse enters the widget\n        global_pos = self.mapToGlobal(QPoint(0, self.height()))\n        self.tooltip.show_at(global_pos, self.tooltip_text)\n        \n    def leaveEvent(self, event):\n        # Hide tooltip when mouse leaves the widget\n        self.tooltip.hide()\n```\n\n----------------------------------------\n\nTITLE: Creating a QPropertyAnimation Instance in PyQt5\nDESCRIPTION: Demonstrates how to create an instance of QPropertyAnimation. It shows the basic constructor usage, specifying the target object and the property to be animated.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QPropertyAnimation/README.en.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nanimation = QPropertyAnimation(target_object, b\"geometry\")\n```\n\n----------------------------------------\n\nTITLE: Connecting a signal to multiple slots in PySide/PyQt\nDESCRIPTION: Example demonstrating how to connect a single signal to multiple slots. The 'clicked' signal from a button is connected to both the 'handleButton' function and the 'otherFunction'.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QTreeView/README.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nbutton.clicked.connect(self.handleButton)\nbutton.clicked.connect(self.otherFunction)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Roles and Classification IDs in PyQt5\nDESCRIPTION: This snippet defines custom roles for sorting and classification in a QListView. It includes dictionaries for mapping names to IDs and vice versa, which are used for custom sorting logic.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QListView/README.en.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nNameDict = {\n    'Tang': ['Tang', 0],\n    'Song': ['Song', 1],\n    'Yuan': ['Yuan', 2],\n    'Ming': ['Ming', 3],\n    'Qing': ['Qing', 4],\n}\nIndexDict = {\n    0: 'Tang',\n    1: 'Song',\n    2: 'Yuan',\n    3: 'Ming',\n    4: 'Qing',\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting a signal in PySide/PyQt\nDESCRIPTION: Example showing how to emit a signal from within a class method. The 'finished' signal is emitted after some work is completed, and the error signal is emitted with a message when an error occurs.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QTreeView/README.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef process(self):\n    try:\n        # do work...\n        self.finished.emit()\n    except Exception as e:\n        self.error.emit(str(e))\n```\n\n----------------------------------------\n\nTITLE: Importing PyQt5 modules in Python\nDESCRIPTION: Example showing how to import basic PyQt5 modules needed for GUI application development. Includes imports for QApplication and QWidget, which are foundational components for PyQt applications.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFlowLayout/README.en.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom PyQt5.QtWidgets import QApplication, QWidget\n```\n\n----------------------------------------\n\nTITLE: Defining a signal with arguments in PySide/PyQt\nDESCRIPTION: Example of defining signals with various parameter types. Shows how to define signals that can transmit different data types including integers, strings, lists, and dictionaries.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QTreeView/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom PySide import QtCore\n\nclass Worker(QtCore.QObject):\n    finished = QtCore.Signal()\n    error = QtCore.Signal(str)\n    result = QtCore.Signal(int, str, list, dict)\n```\n\n----------------------------------------\n\nTITLE: Migrating from PyQt4 import statements to PyQt5\nDESCRIPTION: Shows how import statements need to be modified when migrating from PyQt4 to PyQt5. The main change is that modules are now more granularly divided in PyQt5.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFontComboBox/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# PyQt4\nfrom PyQt4 import QtGui, QtCore\n\n# PyQt5\nfrom PyQt5 import QtWidgets, QtGui, QtCore\n```\n\n----------------------------------------\n\nTITLE: Connecting a signal to a custom function in PySide/PyQt\nDESCRIPTION: Example showing how to connect a signal to a custom function by using a lambda expression. This captures the button click and passes a custom message to the function.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QTreeView/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nbutton.clicked.connect(lambda: function(\"Hello\"))\n```\n\n----------------------------------------\n\nTITLE: Handling QApplication changes in PyQt5\nDESCRIPTION: Demonstrates how to create a QApplication in PyQt5 versus PyQt4. In PyQt5, QApplication has moved from QtGui to QtWidgets module.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFontComboBox/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# PyQt4\nfrom PyQt4.QtGui import QApplication\napp = QApplication([])\n\n# PyQt5\nfrom PyQt5.QtWidgets import QApplication\napp = QApplication([])\n```\n\n----------------------------------------\n\nTITLE: Interactive Command Execution with QProcess in PyQt5\nDESCRIPTION: This snippet shows how to use QProcess for interactive command execution. It demonstrates merging output channels, starting the process, reading process output, and writing data to the process.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QProcess/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nprocess = QProcess()\nprocess.setProcessChannelMode(QProcess.MergedChannels)\nprocess.start('command')\nprocess.readyReadStandardOutput.connect(read_output)\nprocess.writeData(input_data)\n```\n\n----------------------------------------\n\nTITLE: PyQt5 signal and slot connection syntax\nDESCRIPTION: Demonstrates the new recommended way of connecting signals to slots in PyQt5, which uses a more explicit syntax compared to the SIGNAL and SLOT string-based approach in PyQt4.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFontComboBox/README.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# PyQt4 - old style\nself.connect(button, SIGNAL(\"clicked()\"), self.handle_click)\n\n# PyQt5 - new style (also available in newer PyQt4)\nbutton.clicked.connect(self.handle_click)\n```\n\n----------------------------------------\n\nTITLE: Executing Commands with QProcess in PyQt5\nDESCRIPTION: This snippet demonstrates three ways to execute commands using QProcess, focusing on the third method which uses a QProcess object. It shows how to merge standard and error outputs, wait for process completion, and read the output.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QProcess/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nQProcess.execute('ping', ['www.baidu.com'])\nQProcess.startDetached('ping', ['www.baidu.com'], '工作路径')\n\n# Using QProcess object\nprocess = QProcess()\nprocess.setProcessChannelMode(QProcess.MergedChannels)\nprocess.start('ping', ['www.baidu.com'])\nprocess.waitForFinished()\noutput = process.readAll()\n```\n\n----------------------------------------\n\nTITLE: Setting up filepath handling for PyQt5 compatibility\nDESCRIPTION: This function implements path handling compatibility between QtPy and PyQt5, ensuring consistent behavior with file paths across different Qt implementations.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QVBoxLayout/README.en.md#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef patch_qdesktopservice():\n    from PyQt5.QtCore import QUrl, QDir\n    from PyQt5.QtGui import QDesktopServices\n\n    def _path_kwargs(**kwargs):\n        \"\"\"Make kwargs for path methods.\"\"\"\n        path = kwargs.get('path')\n        if not isinstance(path, QUrl):\n            path = QUrl.fromLocalFile(str(QDir.fromNativeSeparators(path)))\n        kwargs['path'] = path\n        return kwargs\n\n    QDesktopServices.openUrl_old = QDesktopServices.openUrl\n\n    @staticmethod\n    def openUrl(*args, **kwargs):\n        if kwargs and 'path' in kwargs:\n            kwargs = _path_kwargs(**kwargs)\n            return QDesktopServices.openUrl_old(kwargs['path'])\n        return QDesktopServices.openUrl_old(*args)\n\n    QDesktopServices.openUrl = openUrl\n```\n\n----------------------------------------\n\nTITLE: Creating a QDateTime Object from Current Time and Converting to UTC in Python\nDESCRIPTION: Creates a QDateTime object representing the current local time and converts it to UTC (Coordinated Universal Time). Shows the basic functionality of QDateTime initialization and UTC conversion.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QDateTimeEdit/README.en.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlocalTime = QDateTime.currentDateTime()\nutcTime = localTime.toUTC()\n```\n\n----------------------------------------\n\nTITLE: Creating a signal handler compatibility wrapper for PyQt5\nDESCRIPTION: This function creates a compatibility layer for signal handling between QtPy and PyQt5, ensuring consistent behavior when connecting signal handlers.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QVBoxLayout/README.en.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef patch_qcombobox():\n    from PyQt5.QtWidgets import QComboBox\n    QComboBox.__init___org = QComboBox.__init__\n\n    def __init__(self, *args, **kwargs):\n        QComboBox.__init___org(self, *args, **kwargs)\n        self._changed_connected = False\n\n    def textChanged(self, text=None):\n        if not self._changed_connected:\n            self.currentTextChanged.connect(self.textChanged)\n            self._changed_connected = True\n        if text is not None:\n            # it was called with a text argument\n            if isinstance(text, str):\n                self.setCurrentText(text)\n\n    QComboBox.__init__ = __init__\n    QComboBox.textChanged = textChanged\n```\n\n----------------------------------------\n\nTITLE: Formatting QDateTime Output with toString() Method in Python\nDESCRIPTION: Shows how to format a QDateTime object into a human-readable string using the toString() method with a Qt format string. This example formats the date-time in ISO format.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QDateTimeEdit/README.en.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndatetime = QDateTime.currentDateTime()\nstring = datetime.toString(Qt.ISODate)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Platform-Specific SIP Flags for PyQt5\nDESCRIPTION: Configures platform-specific SIP flags for processing C++ headers, setting up a range of define flags that control how SIP handles different platform capabilities and module combinations.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QOpenGLWidget/README.md#2025-04-21_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(SIP_PLATFORM_TAG)\n\nif(WIN32)\n    set(SIP_PLATFORM WS_WIN)\n    if (MSVC)\n        set(SIP_PLATFORM_TAG WS_WIN32)\n    endif()\nelseif(ANDROID)\n    set(SIP_PLATFORM WS_X11)\n    set(SIP_PLATFORM_TAG WS_X11)\nelseif(APPLE)\n    set(SIP_PLATFORM WS_MACX)\n    set(SIP_PLATFORM_TAG WS_MACX)\nelseif(UNIX)\n    set(SIP_PLATFORM WS_X11)\n    set(SIP_PLATFORM_TAG WS_X11)\nelse()\n    set(SIP_PLATFORM WS_QWS)\n    set(SIP_PLATFORM_TAG WS_QWS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sorting in QSortFilterProxyModel for PyQt5\nDESCRIPTION: This code snippet shows the implementation of a custom sorting method in a QSortFilterProxyModel subclass. It allows keeping a specific classification at the top of the list during sorting.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QListView/README.en.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef setSortIndex(self, index):\n    self._topIndex = index\n```\n\nLANGUAGE: python\nCODE:\n```\nif self.sortRole() == ClassifyRole and \\\n        source_left.column() == self.sortColumn() and \\\n        source_right.column() == self.sortColumn():\n    # get classify id\n    leftIndex = source_left.data(ClassifyRole)\n    rightIndex = source_right.data(ClassifyRole)\n\n    # AscendingOrder\n    if self.sortOrder() == Qt.AscendingOrder:\n        # keep always top\n        if leftIndex == self._topIndex:\n            leftIndex = -1\n        if rightIndex == self._topIndex:\n            rightIndex = -1\n\n        return leftIndex < rightIndex\n```\n\n----------------------------------------\n\nTITLE: Processing Qt Components for PyQt5\nDESCRIPTION: Processes each Qt component for inclusion in the PyQt5 build, checking for Qt package availability and adding found modules to the build list. This logic determines which modules will be built based on Qt availability.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QOpenGLWidget/README.md#2025-04-21_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(component ${PYQT_COMPONENTS})\n    find_package(Qt${QT_VERSION_MAJOR}${component} QUIET)\n    if(Qt${QT_VERSION_MAJOR}${component}_FOUND)\n        list(APPEND PYQT_MODULES ${component})\n        if(NOT ${component} STREQUAL \"QtCore\")\n            list(APPEND QT_MODULES ${component})\n        endif()\n    endif()\nendforeach()\n\nlist(APPEND PYQT_MODULES _QOpenGLFunctions_2_0 _QOpenGLFunctions_2_1 _QOpenGLFunctions_4_1_Core)\n\nlist(SORT PYQT_MODULES)\n\nforeach(module ${PYQT_MODULES})\n    string(TOLOWER \"${module}\" module_lower)\n    add_subdirectory(${module_lower})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Restoring Default Sort and Custom Sorting in PyQt5 QListView\nDESCRIPTION: These snippets demonstrate how to restore the default sort order and apply custom sorting based on classification IDs in a PyQt5 QListView using a custom proxy model.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QListView/README.en.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nself.fmodel.setSortRole(IdRole)     \nself.fmodel.sort(0)                 \n```\n\nLANGUAGE: python\nCODE:\n```\nself.fmodel.setSortIndex(1)\nself.fmodel.setSortRole(IdRole)\nself.fmodel.setSortRole(ClassifyRole)\nself.fmodel.sort(0)\n```\n\n----------------------------------------\n\nTITLE: Configuring PyQt5 Build Settings and Modules\nDESCRIPTION: Defines build settings for PyQt5 modules, including module maps, enabled features, and platform-specific functionality. This section maps Qt modules to their corresponding PyQt modules.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QOpenGLWidget/README.md#2025-04-21_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(PYQT_MODULES \"\")\nset(QT_MODULES \"\")\nset(PYQT_MODULE_PUBLIC_DEFINES \"\")\nset(PYQT_MODULE_PRIVATE_DEFINES \"\")\nset(PYQT_MODULE_INCLUDES \"\")\nset(PYQT_COMPONENTS QtCore QtGui QtWidgets QtHelp QtMultimedia QtMultimediaWidgets QtNetwork\n                    QtOpenGL QtPrintSupport QtQml QtQuick QtQuickWidgets QtSql QtSvg\n                    QtTest QtXml QtXmlPatterns QtDBus)\nset(PYQT_WINRT_COMPONENTS \"\")\nset(PYQT_ANDROID_COMPONENTS QtAndroidExtras)\nset(PYQT_MAC_COMPONENTS QtMacExtras)\nset(PYQT_X11_COMPONENTS Qt3DAnimation Qt3DCore Qt3DExtras Qt3DInput Qt3DLogic\n                       Qt3DRender QtLocation QtNfc QtPositioning QtSensors QtSerialPort\n                       QtBluetooth QtTextToSpeech QtQuick3D QtQuickControls2\n                       QtRemoteObjects QtWebChannel QtWebSockets QtX11Extras\n                       QtQuickControls)\nset(PYQT_QWS_COMPONENTS \"\")\n\nif(WIN32)\n    list(APPEND PYQT_COMPONENTS ${PYQT_WINRT_COMPONENTS} QtWinExtras)\n    list(APPEND PYQT_PRIVATE_INCLUDES Qt5WinExtras/private)\nelseif(ANDROID)\n    list(APPEND PYQT_COMPONENTS ${PYQT_ANDROID_COMPONENTS})\nelseif(APPLE)\n    list(APPEND PYQT_COMPONENTS ${PYQT_MAC_COMPONENTS})\nelseif(UNIX)\n    list(APPEND PYQT_COMPONENTS ${PYQT_X11_COMPONENTS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring QWebEngineSettings for PyQt5 compatibility\nDESCRIPTION: This function sets up QWebEngineSettings compatibility with QtPy by providing attribute mapping and handling different API requirements across Qt libraries.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QVBoxLayout/README.en.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef _set_global_settings(settings, **kwargs):\n    for attr_name, value in kwargs.items():\n        try:\n            attr = getattr(settings, attr_name)\n            settings.setAttribute(attr, value)\n        except (AttributeError, TypeError) as exc:\n            import warnings\n            warnings.warn(str(exc))\n```\n\n----------------------------------------\n\nTITLE: Writing SIP Configuration File for PyQt5\nDESCRIPTION: Writes the SIP configuration file with all previously defined flags and features, which will be used by the SIP code generator. This creates a file to store flags needed by future build steps.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QOpenGLWidget/README.md#2025-04-21_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nfile(WRITE ${PYQT_SIP_FLAGS_FILE} \"${PYQT_SIP_FLAGS_STR}\\n${SIP_TAGS_STR}\\n${SIP_FEATURES_STR}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing QtPy compatibility for QFileDialog.getOpenFileName in PyQt5\nDESCRIPTION: This function wraps PyQt5's QFileDialog.getOpenFileName to match QtPy's expected behavior by handling the different return values between libraries.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QVBoxLayout/README.en.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef qfiledialog_wrapper(attr_name, func):\n    if attr_name in ('getOpenFileName', 'getSaveFileName'):\n        old_func = func\n\n        def new_func(*args, **kwargs):\n            result = old_func(*args, **kwargs)\n            if len(result) == 1:  # PySide case\n                return result\n            else:  # PyQt case\n                return (result[0], result[1])\n        return new_func\n    return func\n```\n\n----------------------------------------\n\nTITLE: Creating PyQt5 Package Files\nDESCRIPTION: Creates the Python package files needed for PyQt5, including initialization files and module information. This section configures the Python package structure and metadata.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QOpenGLWidget/README.md#2025-04-21_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(INSTALL_TARGET)\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/package_init.py.in\"\n                              \"PyQt${QT_VERSION_MAJOR}/__init__.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/pyqt_init.py.in\"\n                              \"PyQt${QT_VERSION_MAJOR}/${PYQT_SIP_DIR}/__init__.py\")\n\n    if(SIP_PLATFORM STREQUAL \"WS_WIN\")\n        set(exe_suffix \".exe\")\n    else()\n        set(exe_suffix \"\")\n    endif()\n\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/__init__.py.in\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/__init__.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/driver.py\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/driver.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/exceptions.py\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/exceptions.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/icon_cache.py\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/icon_cache.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/objcreator.py\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/objcreator.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/properties.py\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/properties.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/uiparser.py\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/uiparser.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/Compiler/__init__.py\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/Compiler/__init__.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/Compiler/compiler.py\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/Compiler/compiler.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/Compiler/indenter.py\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/Compiler/indenter.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/Compiler/misc.py\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/Compiler/misc.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/Compiler/proxy_metaclass.py\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/Compiler/proxy_metaclass.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/Compiler/qobjectcreator.py\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/Compiler/qobjectcreator.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/Compiler/qtproxies.py\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/Compiler/qtproxies.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/Loader/__init__.py\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/Loader/__init__.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/Loader/loader.py\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/Loader/loader.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/Loader/qobjectcreator.py\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/Loader/qobjectcreator.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/port_v${QT_VERSION_MAJOR}/__init__.py\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/port_v${QT_VERSION_MAJOR}/__init__.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/port_v${QT_VERSION_MAJOR}/as_string.py\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/port_v${QT_VERSION_MAJOR}/as_string.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/port_v${QT_VERSION_MAJOR}/ascii_upper.py\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/port_v${QT_VERSION_MAJOR}/ascii_upper.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/port_v${QT_VERSION_MAJOR}/invoke.py\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/port_v${QT_VERSION_MAJOR}/invoke.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/port_v${QT_VERSION_MAJOR}/proxy_base.py\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/port_v${QT_VERSION_MAJOR}/proxy_base.py\")\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/uic/port_v${QT_VERSION_MAJOR}/string_io.py\"\n                              \"PyQt${QT_VERSION_MAJOR}/uic/port_v${QT_VERSION_MAJOR}/string_io.py\")\n\n    sip_install_python_package(\"${CMAKE_CURRENT_LIST_DIR}/python/pyqt-plugins.sip.in\"\n                              \"PyQt${QT_VERSION_MAJOR}/${PYQT_SIP_DIR}/pyqt-plugins.sip\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Patching QIcon functionality for PyQt5 compatibility\nDESCRIPTION: This function patches QIcon for compatibility with QtPy, implementing missing functionality and ensuring consistent behavior across different Qt implementations.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QVBoxLayout/README.en.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef patch_qicon():\n    from PyQt5.QtGui import QIcon\n\n    original_init = QIcon.__init__\n\n    def __init__(self, *args, **kwargs):\n        if len(args) == 1 and isinstance(args[0], list):\n            args = tuple([QIcon()] + list(args))\n            original_init(self)\n            self.addPixmap(*args)\n        else:\n            original_init(self, *args, **kwargs)\n\n    def addPixmap(self, pixmap, *args):\n        if isinstance(pixmap, list):\n            if len(pixmap) % 2 == 0:\n                mode = QIcon.Normal\n                for i in range(0, len(pixmap), 2):\n                    if pixmap[i+1] == 'normal':\n                        mode = QIcon.Normal\n                    if pixmap[i+1] == 'active':\n                        mode = QIcon.Active\n                    if pixmap[i+1] == 'disabled':\n                        mode = QIcon.Disabled\n                    if pixmap[i+1] == 'selected':\n                        mode = QIcon.Selected\n                    self.addPixmap(pixmap[i], mode)\n\n    QIcon.__init__ = __init__\n    QIcon.addPixmap = addPixmap\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for PySideWrapper Project\nDESCRIPTION: This CMake script sets up the build environment for the PySideWrapper project. It specifies CMake version requirements, enables policies for macOS RPATH and automoc on generated files, and configures project settings such as C++ standard and automatic handling of Qt-specific files.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/Test/WigglyWidget/PySideWrapper/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\ncmake_policy(VERSION 3.14)\n\n# Enable policy to not use RPATH settings for install_name on macOS.\nif(POLICY CMP0068)\n  cmake_policy(SET CMP0068 NEW)\nendif()\n\n# Enable policy to run automoc on generated files.\nif(POLICY CMP0071)\n  cmake_policy(SET CMP0071 NEW)\nendif()\n\nproject(PySideWrapper)\n\nset(CMAKE_AUTOUIC ON)\nset(CMAKE_AUTOMOC ON)\nset(CMAKE_AUTORCC ON)\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_INCLUDE_CURRENT_DIR ON)\n\nset(BINDINGS_HEADER_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/bindings.h\")\nset(BINDINGS_TYPESYSTEM_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/bindings.xml\")\nset(BINDINGS_OUTPUT_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/dist\")\nset(BINDINGS_INCLUDE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/../dist/include/\")\n\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/bindings.txt.in\"\n               \"${CMAKE_CURRENT_SOURCE_DIR}/bindings.txt\")\n```\n\n----------------------------------------\n\nTITLE: Working with Qt Widget classes in PyQt5\nDESCRIPTION: Shows how widget classes that were previously in QtGui module in PyQt4 are now in QtWidgets module in PyQt5. This affects common widgets like QWidget, QPushButton, and QVBoxLayout.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFontComboBox/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# PyQt4\nfrom PyQt4.QtGui import QWidget, QPushButton, QVBoxLayout\n\n# PyQt5\nfrom PyQt5.QtWidgets import QWidget, QPushButton, QVBoxLayout\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project Configuration for PyQt Wrapper\nDESCRIPTION: Sets up the minimum required CMake version and defines the project name for a PyQt wrapper build system. Requires CMake version 3.14 or higher.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/Test/WigglyWidget/PyQtWrapper/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nproject(PyQtWrapper)\n```\n\n----------------------------------------\n\nTITLE: Setting Python Dependencies for PyQt5\nDESCRIPTION: Configures Python dependencies for the PyQt5 project, setting up options for Python interpreter and package locations. It defines several options for finding Python installations and configuring SIP.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QOpenGLWidget/README.md#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\noption(PYQT_PYTHON_EXECUTABLE \"The Python interpreter to use\" \"\")\n\nif(NOT PYQT_PYTHON_EXECUTABLE)\n    find_package(Python COMPONENTS Interpreter Development)\n    set(PYQT_PYTHON_EXECUTABLE ${Python_EXECUTABLE})\nendif()\n\nset(CMAKE_FIND_PACKAGE_SORT_ORDER NATURAL)\nset(CMAKE_FIND_PACKAGE_SORT_DIRECTION DEC)\n\nif(APPLE)\n    set(Python_FIND_FRAMEWORK LAST)\nelseif(WIN32)\n    set(Python_FIND_REGISTRY LAST)\nendif()\n\nset(PYQT_PEP484_SUFFIX \"\" CACHE STRING \"The PEP 484 suffix for PyQt modules\")\nset(PYQT_MODULE_DIR \"\" CACHE STRING \"The directory to install PyQt modules in\")\nset(PYQT_PACKAGE_DIR \"\" CACHE STRING \"The directory to install PyQt packages in\")\n\noption(SIP_MODULEINFO_SOURCES \"Whether to generate source files for the .moduleinfo components\" ON)\n```\n\n----------------------------------------\n\nTITLE: Defining a signal in a PySide/PyQt custom class\nDESCRIPTION: Example of defining a custom signal in a class that inherits from QObject. The signal 'finished' is defined with no arguments and can be emitted when needed.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QTreeView/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom PySide import QtCore\n\nclass Worker(QtCore.QObject):\n    finished = QtCore.Signal()\n```\n\n----------------------------------------\n\nTITLE: Generating SIP Flags Configuration for PyQt5\nDESCRIPTION: Generates the SIP flags configuration file used by the PyQt5 build process, including platform tags, version information, and module settings. This configuration guides SIP in generating proper Python bindings.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QOpenGLWidget/README.md#2025-04-21_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(SIP_TAGS)\nlist(APPEND SIP_TAGS ${SIP_PLATFORM})\n\nset(SIP_FEATURES)\nlist(APPEND SIP_FEATURES ${SIP_PLATFORM})\n\nappend_if(Python_VERSION VERSION_GREATER_EQUAL 3.0.0 SIP_FEATURES PYQT_PYTHON3)\n\nappend_if(\"Qt3DAnimation\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_QT3DANIMATION)\nappend_if(\"Qt3DCore\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_QT3DCORE)\nappend_if(\"Qt3DExtras\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_QT3DEXTRAS)\nappend_if(\"Qt3DInput\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_QT3DINPUT)\nappend_if(\"Qt3DLogic\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_QT3DLOGIC)\nappend_if(\"Qt3DRender\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_QT3DRENDER)\nappend_if(\"QtAndroidExtras\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_ANDROIDEXTRAS)\nappend_if(\"QtBluetooth\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_BLUETOOTH)\nappend_if(\"QtDBus\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_DBUS)\nappend_if(\"QtDesigner\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_DESIGNER)\nappend_if(\"QtLocation\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_LOCATION)\nappend_if(\"QtMacExtras\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_MACEXTRAS)\nappend_if(\"QtMultimedia\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_MULTIMEDIA)\nappend_if(\"QtMultimediaWidgets\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_MULTIMEDIAWIDGETS)\nappend_if(\"QtNetwork\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_NETWORK)\nappend_if(\"QtNfc\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_NFC)\nappend_if(\"QtOpenGL\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_OPENGL)\nappend_if(\"QtPositioning\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_POSITIONING)\nappend_if(\"QtPrintSupport\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_PRINTSUPPORT)\nappend_if(\"QtQml\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_QML)\nappend_if(\"QtQuick\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_QUICK)\nappend_if(\"QtQuick3D\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_QUICK3D)\nappend_if(\"QtQuickControls\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_QUICKCONTROLS)\nappend_if(\"QtQuickControls2\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_QUICKCONTROLS2)\nappend_if(\"QtQuickWidgets\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_QUICKWIDGETS)\nappend_if(\"QtRemoteObjects\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_REMOTEOBJECTS)\nappend_if(\"QtSensors\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_SENSORS)\nappend_if(\"QtSerialPort\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_SERIALPORT)\nappend_if(\"QtSql\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_SQL)\nappend_if(\"QtSvg\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_SVG)\nappend_if(\"QtTest\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_TESTLIB)\nappend_if(\"QtTextToSpeech\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_TEXTTOSPEECH)\nappend_if(\"QtWebChannel\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_WEBCHANNEL)\nappend_if(\"QtWebSockets\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_WEBSOCKETS)\nappend_if(\"QtWidgets\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_WIDGETS)\nappend_if(\"QtWinExtras\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_WINEXTRAS)\nappend_if(\"QtX11Extras\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_X11EXTRAS)\nappend_if(\"QtXml\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_XML)\nappend_if(\"QtXmlPatterns\" IN_LIST PYQT_MODULES SIP_FEATURES PYQT_FEATURE_XMLPATTERNS)\n\nappend_if(SIP_VERSION VERSION_GREATER_EQUAL 6.0.0 SIP_FEATURES SIP_PYCALLABLE_CHECK)\nappend_if(\"${QT_QML_DEBUG}\" SIP_FEATURES PYQT_FEATURE_QMLDEBUG)\n\nforeach(disabled_feature ${PYQT_DISABLED_FEATURES})\n    list(REMOVE_ITEM SIP_FEATURES ${disabled_feature})\nendforeach()\n\nlist(JOIN SIP_TAGS \" \" SIP_TAGS_STR)\nlist(JOIN SIP_FEATURES \" \" SIP_FEATURES_STR)\n\nset(PYQT_SIP_FLAGS)\nlist(APPEND PYQT_SIP_FLAGS -n \"PyQt${QT_VERSION_MAJOR}.sip\")\nlist(APPEND PYQT_SIP_FLAGS -t ${SIP_PLATFORM_TAG})\nlist(APPEND PYQT_SIP_FLAGS -t Qt_${QT_VERSION_MAJOR}_${QT_VERSION_MINOR}_${QT_VERSION_PATCH})\nlist(APPEND PYQT_SIP_FLAGS -x ${PYQT_DISABLED_FEATURES})\nlist(APPEND PYQT_SIP_FLAGS -x PyQt_Accessibility)\nlist(APPEND PYQT_SIP_FLAGS -x PyQt_SessionManager)\nlist(JOIN PYQT_SIP_FLAGS \" \" PYQT_SIP_FLAGS_STR)\n```\n\n----------------------------------------\n\nTITLE: Migrating string handling in PyQt5\nDESCRIPTION: Shows how string handling has changed in PyQt5. PyQt5 accepts both Python strings and QStrings, while PyQt4 made a distinction between the two types.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFontComboBox/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# PyQt4\nfrom PyQt4.QtCore import QString\nmy_string = QString(\"Hello World\")\n\n# PyQt5\n# QString is removed, just use Python strings\nmy_string = \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Qt Options for PyQt5\nDESCRIPTION: Sets up the configuration options for the Qt libraries, including enabling or disabling specific Qt modules and features for the PyQt5 build process.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QOpenGLWidget/README.md#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(qt_option name description default)\n    set(QT_${name} \"\" CACHE STRING \"${description}\")\n    if(NOT DEFINED QT_${name} OR QT_${name} STREQUAL \"\")\n        set(QT_${name} ${default})\n    endif()\nendfunction()\n\nqt_option(DESIGNER_PLUGIN \"Build the Python plugin for Qt Designer [default: OFF]\" OFF)\nqt_option(QMAKE_CONFIG \"The value of QMAKE_CONFIG [default: \\\"\\\"]\" \"\")\nqt_option(QML_DEBUG \"Whether the QML debugging infrastructure should be compiled [default: ON]\" ON)\nqt_option(QMLSCENE_PLUGIN \"Build the Python plugin for qmlscene [default: OFF]\" OFF)\nqt_option(QTMULTIMEDIA_VARIANT \"The QtMultimedia variant to use, QT or GSTREAMER [default: QT]\" \"QT\")\n```\n\n----------------------------------------\n\nTITLE: Importing QPropertyAnimation in PyQt5\nDESCRIPTION: Shows how to import the QPropertyAnimation class from PyQt5.QtCore module. This is the first step in using QPropertyAnimation in a PyQt5 application.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QPropertyAnimation/README.en.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom PyQt5.QtCore import QPropertyAnimation\n```\n\n----------------------------------------\n\nTITLE: Importing SIP Helper Functions for PyQt5\nDESCRIPTION: Imports the helper functions for SIP (SIP Interface Processor) which is used for generating Python bindings for C++ libraries. This defines the directory for Python packages and a build configuration.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QOpenGLWidget/README.md#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_LIST_DIR}/cmake/sip_helper.cmake)\nset(PYQT_PYTHON_SITE_PACKAGES /)\nsip_find_python_interpreter()\nsip_configure()\n\n```\n\n----------------------------------------\n\nTITLE: Installing PyQt5 using pip in Python\nDESCRIPTION: Instructions for installing PyQt5 and its dependencies using the pip package manager. This command will install the PyQt5 bindings and all required components for developing Qt applications with Python.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QSpinBox/README.en.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npip install pyqt5\n```\n\n----------------------------------------\n\nTITLE: Enabling Package Configuration for PyQt5\nDESCRIPTION: Sets up package configuration for PyQt5 including directory layout for modules, resource files, and Qt dependencies. This section configures how PyQt's components will be organized and installed.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QOpenGLWidget/README.md#2025-04-21_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Qt${QT_VERSION_MAJOR} REQUIRED)\ninclude(\"qt\")  # required for qt_add_translation\n\nif(\"${PYQT_MODULE_DIR}\" STREQUAL \"\")\n    set(PYQT_MODULE_DIR \"${PYQT_PYTHON_SITE_PACKAGES}\")\nendif()\n\nif(\"${PYQT_PACKAGE_DIR}\" STREQUAL \"\")\n    set(PYQT_PACKAGE_DIR \"${PYQT_PYTHON_SITE_PACKAGES}/PyQt${QT_VERSION_MAJOR}\")\nendif()\n\nset(PYQT_DBUS_VERSION \"2.0\")\nset(PYQT_LUPDATE \"${QT_INSTALL_PREFIX}/bin/lupdate\")\n\nif(QT_NO_TRANSLATION)\n    set(PYQT_LRELEASE \"\")\nelse()\n    set(PYQT_LRELEASE \"${QT_INSTALL_PREFIX}/bin/lrelease\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing PyQt5 Using Pip in Python\nDESCRIPTION: Command to install PyQt5 package using pip package manager. This is the recommended method for installing PyQt5 in a Python environment.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QWebView/README.en.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install PyQt5\n```\n\n----------------------------------------\n\nTITLE: Setting Directory and File Options for PyQt5\nDESCRIPTION: Configures directory and file options for PyQt5, including settings for SIP auxiliary files, temporary files, and target locations for built components.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QOpenGLWidget/README.md#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(PYQT_SIP_DIR \"pyqt5-${CMAKE_CXX_COMPILER_ID}\" CACHE STRING \"The SIP directory [default: pyqt5-<compiler-id>]\")\n\nset(PYQT_DISABLED_FEATURES \"\" CACHE STRING \"Disabled PyQt features\")\n\nif(CMAKE_CONFIGURATION_TYPES)\n    set(PYQT_BUILD_DIR \"${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>\")\nelse()\n    set(PYQT_BUILD_DIR \"${CMAKE_CURRENT_BINARY_DIR}\")\nendif()\n\nset(PYQT_SIP_FLAGS_FILE \"${PYQT_BUILD_DIR}/pyqt5_sip_flags.txt\")\n\noption(INSTALL_TARGET \"Include an install target in the build system\" ON)\n```\n\n----------------------------------------\n\nTITLE: Installing PyQt5 using pip\nDESCRIPTION: Command to install PyQt5 using pip package manager. This is the recommended installation method for most Python environments.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QColumnView/README.en.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pyqt5\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for PyQt5\nDESCRIPTION: Sets up the basic CMake configuration for the PyQt5 project, including setting the minimum required CMake version, defining the project name, and setting the version information.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QOpenGLWidget/README.md#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16.0 FATAL_ERROR)\n\nproject(PyQt\n    VERSION 5.15.10\n    DESCRIPTION \"Python bindings for the Qt cross platform application toolkit\"\n    HOMEPAGE_URL \"https://www.riverbankcomputing.com/software/pyqt/\"\n    LANGUAGES CXX)\n\nset(PYQT_VERSION \"${PROJECT_VERSION}\")\nset(PYQT_VERSION_TAG \"${PROJECT_VERSION_MAJOR}${PROJECT_VERSION_MINOR}\")\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/cmake/\")\n```\n\n----------------------------------------\n\nTITLE: Installing PyQt5 Designer on Ubuntu/Debian Linux\nDESCRIPTION: Command to install Qt Designer for PyQt5 on Ubuntu or Debian-based Linux distributions. Qt Designer provides a visual interface for designing PyQt5 GUIs.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QSpacerItem/README.en.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install python3-pyqt5.qtdesigner\n```\n\n----------------------------------------\n\nTITLE: Configuring WigglyWidget Project Components with CMake\nDESCRIPTION: Sets up the CMake project configuration for WigglyWidget with C++ language requirement and adds subdirectories for the main library, test module, and Python bindings (PyQt and PySide wrappers).\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/Test/WigglyWidget/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nproject(WigglyWidget LANGUAGES CXX)\n\nadd_subdirectory(LibWigglyWidget)\nadd_subdirectory(TestWigglyWidget)\nadd_subdirectory(PyQtWrapper)\nadd_subdirectory(PySideWrapper)\n```\n\n----------------------------------------\n\nTITLE: Initializing Form Class in Python for GeographicAnalysis_Widget\nDESCRIPTION: Constructor for the Form class, which is derived from QWidget and Ui_Form. It takes an optional parent parameter of type QWidget to reference the parent widget.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/Test/partner_625781186/5.hoverMenu/Documentation/5.hoverMenu.U_FuncWidget.UThroughTrain4.GeographicAnalysis_Widget.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef __init__(self, parent=None):\n    \"\"\"Constructor\n\n    Args:\n        parent (QWidget): reference to the parent widget\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Delayed Function Execution in Separate Thread\nDESCRIPTION: This function calls a provided function in a new thread after a specified delay. It's useful for allowing the system to process events without blocking the main execution flow.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/Test/全局热键/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef call_later(fn, args=(), delay=0.001):\n    \"\"\"\n    Calls the provided function in a new thread after waiting some time.\n    Useful for giving the system some time to process an event, without blocking\n    the current execution flow.\n    \"\"\"\n    thread = _Thread(target=lambda: (_time.sleep(delay), fn(*args)))\n    thread.start()\n```\n\n----------------------------------------\n\nTITLE: HTML Document Structure for PyQt5 UI Component\nDESCRIPTION: Basic HTML document structure that defines a page with UTF-8 encoding and empty style section. The document displays a heading for a PyQt5 hover menu component.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/Test/partner_625781186/5.hoverMenu/Documentation/README-5.hoverMenu.U_FuncWidget.UStoreData1.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html><head>\n<title>5.hoverMenu.U_FuncWidget.UStoreData1</title>\n<meta charset=\"UTF-8\">\n<style>\n\n</style>\n</head>\n<body>\n<h1>5.hoverMenu.U_FuncWidget.UStoreData1</h1>\n\n\n\n</body></html>\n```\n\n----------------------------------------\n\nTITLE: Accessing PyQt5 PyPI Repository\nDESCRIPTION: URL to the PyQt5 package on the Python Package Index (PyPI). Users can visit this link to see package details, documentation links, and version history.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QGroupBox/README.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://pypi.org/project/PyQt5/\n```\n\n----------------------------------------\n\nTITLE: Defining Font Awesome Icon Unicode Mappings in Python\nDESCRIPTION: This code snippet defines a large number of variables, each representing a Font Awesome icon. The variable names are prefixed with 'fa_' followed by the icon name, and the values are strings containing the Unicode representation of the icon.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFont/Data/提取字符/result.txt#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfa_line_chart = \"\\uf201\"\nfa_link = \"\\uf0c1\"\nfa_linkedin = \"\\uf0e1\"\nfa_linkedin_square = \"\\uf08c\"\nfa_linode = \"\\uf2b8\"\nfa_linux = \"\\uf17c\"\nfa_list = \"\\uf03a\"\nfa_list_alt = \"\\uf022\"\nfa_list_ol = \"\\uf0cb\"\nfa_list_ul = \"\\uf0ca\"\n# ... (truncated for brevity)\nfa_youtube = \"\\uf167\"\nfa_youtube_play = \"\\uf16a\"\nfa_youtube_square = \"\\uf166\"\n```\n\n----------------------------------------\n\nTITLE: Defining Font Awesome Icon Unicode Constants in Python\nDESCRIPTION: This code snippet defines Python variables for Font Awesome icons, mapping icon names to their unicode character values. These constants can be used in PyQt5 applications to display Font Awesome icons by assigning them to UI elements that support text rendering with the appropriate Font Awesome font applied.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFont/Data/提取字符/result.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfa_500px = \"\\uf26e\"\nfa_address_book = \"\\uf2b9\"\nfa_address_book_o = \"\\uf2ba\"\nfa_address_card = \"\\uf2bb\"\nfa_address_card_o = \"\\uf2bc\"\nfa_adjust = \"\\uf042\"\nfa_adn = \"\\uf170\"\nfa_align_center = \"\\uf037\"\nfa_align_justify = \"\\uf039\"\nfa_align_left = \"\\uf036\"\nfa_align_right = \"\\uf038\"\nfa_amazon = \"\\uf270\"\nfa_ambulance = \"\\uf0f9\"\nfa_american_sign_language_interpreting = \"\\uf2a3\"\nfa_anchor = \"\\uf13d\"\nfa_android = \"\\uf17b\"\nfa_angellist = \"\\uf209\"\nfa_angle_double_down = \"\\uf103\"\nfa_angle_double_left = \"\\uf100\"\nfa_angle_double_right = \"\\uf101\"\nfa_angle_double_up = \"\\uf102\"\nfa_angle_down = \"\\uf107\"\nfa_angle_left = \"\\uf104\"\nfa_angle_right = \"\\uf105\"\nfa_angle_up = \"\\uf106\"\nfa_apple = \"\\uf179\"\nfa_archive = \"\\uf187\"\nfa_area_chart = \"\\uf1fe\"\nfa_arrow_circle_down = \"\\uf0ab\"\nfa_arrow_circle_left = \"\\uf0a8\"\nfa_arrow_circle_o_down = \"\\uf01a\"\nfa_arrow_circle_o_left = \"\\uf190\"\nfa_arrow_circle_o_right = \"\\uf18e\"\nfa_arrow_circle_o_up = \"\\uf01b\"\nfa_arrow_circle_right = \"\\uf0a9\"\nfa_arrow_circle_up = \"\\uf0aa\"\nfa_arrow_down = \"\\uf063\"\nfa_arrow_left = \"\\uf060\"\nfa_arrow_right = \"\\uf061\"\nfa_arrow_up = \"\\uf062\"\nfa_arrows = \"\\uf047\"\nfa_arrows_alt = \"\\uf0b2\"\nfa_arrows_h = \"\\uf07e\"\nfa_arrows_v = \"\\uf07d\"\nfa_asl_interpreting = \"\\uf2a3\"\nfa_assistive_listening_systems = \"\\uf2a2\"\nfa_asterisk = \"\\uf069\"\nfa_at = \"\\uf1fa\"\nfa_audio_description = \"\\uf29e\"\nfa_automobile = \"\\uf1b9\"\nfa_backward = \"\\uf04a\"\nfa_balance_scale = \"\\uf24e\"\nfa_ban = \"\\uf05e\"\nfa_bandcamp = \"\\uf2d5\"\nfa_bank = \"\\uf19c\"\nfa_bar_chart = \"\\uf080\"\nfa_bar_chart_o = \"\\uf080\"\nfa_barcode = \"\\uf02a\"\nfa_bars = \"\\uf0c9\"\nfa_bath = \"\\uf2cd\"\nfa_bathtub = \"\\uf2cd\"\nfa_battery = \"\\uf240\"\nfa_battery_0 = \"\\uf244\"\nfa_battery_1 = \"\\uf243\"\nfa_battery_2 = \"\\uf242\"\nfa_battery_3 = \"\\uf241\"\nfa_battery_4 = \"\\uf240\"\nfa_battery_empty = \"\\uf244\"\nfa_battery_full = \"\\uf240\"\nfa_battery_half = \"\\uf242\"\nfa_battery_quarter = \"\\uf243\"\nfa_battery_three_quarters = \"\\uf241\"\nfa_bed = \"\\uf236\"\nfa_beer = \"\\uf0fc\"\nfa_behance = \"\\uf1b4\"\nfa_behance_square = \"\\uf1b5\"\nfa_bell = \"\\uf0f3\"\nfa_bell_o = \"\\uf0a2\"\nfa_bell_slash = \"\\uf1f6\"\nfa_bell_slash_o = \"\\uf1f7\"\nfa_bicycle = \"\\uf206\"\nfa_binoculars = \"\\uf1e5\"\nfa_birthday_cake = \"\\uf1fd\"\nfa_bitbucket = \"\\uf171\"\nfa_bitbucket_square = \"\\uf172\"\nfa_bitcoin = \"\\uf15a\"\nfa_black_tie = \"\\uf27e\"\nfa_blind = \"\\uf29d\"\nfa_bluetooth = \"\\uf293\"\nfa_bluetooth_b = \"\\uf294\"\nfa_bold = \"\\uf032\"\nfa_bolt = \"\\uf0e7\"\nfa_bomb = \"\\uf1e2\"\nfa_book = \"\\uf02d\"\nfa_bookmark = \"\\uf02e\"\nfa_bookmark_o = \"\\uf097\"\nfa_braille = \"\\uf2a1\"\nfa_briefcase = \"\\uf0b1\"\nfa_btc = \"\\uf15a\"\nfa_bug = \"\\uf188\"\nfa_building = \"\\uf1ad\"\nfa_building_o = \"\\uf0f7\"\nfa_bullhorn = \"\\uf0a1\"\nfa_bullseye = \"\\uf140\"\nfa_bus = \"\\uf207\"\nfa_buysellads = \"\\uf20d\"\nfa_cab = \"\\uf1ba\"\nfa_calculator = \"\\uf1ec\"\nfa_calendar = \"\\uf073\"\nfa_calendar_check_o = \"\\uf274\"\nfa_calendar_minus_o = \"\\uf272\"\nfa_calendar_o = \"\\uf133\"\nfa_calendar_plus_o = \"\\uf271\"\nfa_calendar_times_o = \"\\uf273\"\nfa_camera = \"\\uf030\"\nfa_camera_retro = \"\\uf083\"\nfa_car = \"\\uf1b9\"\nfa_caret_down = \"\\uf0d7\"\nfa_caret_left = \"\\uf0d9\"\nfa_caret_right = \"\\uf0da\"\nfa_caret_square_o_down = \"\\uf150\"\nfa_caret_square_o_left = \"\\uf191\"\nfa_caret_square_o_right = \"\\uf152\"\nfa_caret_square_o_up = \"\\uf151\"\nfa_caret_up = \"\\uf0d8\"\nfa_cart_arrow_down = \"\\uf218\"\nfa_cart_plus = \"\\uf217\"\nfa_cc = \"\\uf20a\"\nfa_cc_amex = \"\\uf1f3\"\nfa_cc_diners_club = \"\\uf24c\"\nfa_cc_discover = \"\\uf1f2\"\nfa_cc_jcb = \"\\uf24b\"\nfa_cc_mastercard = \"\\uf1f1\"\nfa_cc_paypal = \"\\uf1f4\"\nfa_cc_stripe = \"\\uf1f5\"\nfa_cc_visa = \"\\uf1f0\"\nfa_certificate = \"\\uf0a3\"\nfa_chain = \"\\uf0c1\"\nfa_chain_broken = \"\\uf127\"\nfa_check = \"\\uf00c\"\nfa_check_circle = \"\\uf058\"\nfa_check_circle_o = \"\\uf05d\"\nfa_check_square = \"\\uf14a\"\nfa_check_square_o = \"\\uf046\"\nfa_chevron_circle_down = \"\\uf13a\"\nfa_chevron_circle_left = \"\\uf137\"\nfa_chevron_circle_right = \"\\uf138\"\nfa_chevron_circle_up = \"\\uf139\"\nfa_chevron_down = \"\\uf078\"\nfa_chevron_left = \"\\uf053\"\nfa_chevron_right = \"\\uf054\"\nfa_chevron_up = \"\\uf077\"\nfa_child = \"\\uf1ae\"\nfa_chrome = \"\\uf268\"\nfa_circle = \"\\uf111\"\nfa_circle_o = \"\\uf10c\"\nfa_circle_o_notch = \"\\uf1ce\"\nfa_circle_thin = \"\\uf1db\"\nfa_clipboard = \"\\uf0ea\"\nfa_clock_o = \"\\uf017\"\nfa_clone = \"\\uf24d\"\nfa_close = \"\\uf00d\"\nfa_cloud = \"\\uf0c2\"\nfa_cloud_download = \"\\uf0ed\"\nfa_cloud_upload = \"\\uf0ee\"\nfa_cny = \"\\uf157\"\nfa_code = \"\\uf121\"\nfa_code_fork = \"\\uf126\"\nfa_codepen = \"\\uf1cb\"\nfa_codiepie = \"\\uf284\"\nfa_coffee = \"\\uf0f4\"\nfa_cog = \"\\uf013\"\nfa_cogs = \"\\uf085\"\nfa_columns = \"\\uf0db\"\nfa_comment = \"\\uf075\"\nfa_comment_o = \"\\uf0e5\"\nfa_commenting = \"\\uf27a\"\nfa_commenting_o = \"\\uf27b\"\nfa_comments = \"\\uf086\"\nfa_comments_o = \"\\uf0e6\"\nfa_compass = \"\\uf14e\"\nfa_compress = \"\\uf066\"\nfa_connectdevelop = \"\\uf20e\"\nfa_contao = \"\\uf26d\"\nfa_copy = \"\\uf0c5\"\nfa_copyright = \"\\uf1f9\"\nfa_creative_commons = \"\\uf25e\"\nfa_credit_card = \"\\uf09d\"\nfa_credit_card_alt = \"\\uf283\"\nfa_crop = \"\\uf125\"\nfa_crosshairs = \"\\uf05b\"\nfa_css3 = \"\\uf13c\"\nfa_cube = \"\\uf1b2\"\nfa_cubes = \"\\uf1b3\"\nfa_cut = \"\\uf0c4\"\nfa_cutlery = \"\\uf0f5\"\nfa_dashboard = \"\\uf0e4\"\nfa_dashcube = \"\\uf210\"\nfa_database = \"\\uf1c0\"\nfa_deaf = \"\\uf2a4\"\nfa_deafness = \"\\uf2a4\"\nfa_dedent = \"\\uf03b\"\nfa_delicious = \"\\uf1a5\"\nfa_desktop = \"\\uf108\"\nfa_deviantart = \"\\uf1bd\"\nfa_diamond = \"\\uf219\"\nfa_digg = \"\\uf1a6\"\nfa_dollar = \"\\uf155\"\nfa_dot_circle_o = \"\\uf192\"\nfa_download = \"\\uf019\"\nfa_dribbble = \"\\uf17d\"\nfa_drivers_license = \"\\uf2c2\"\nfa_drivers_license_o = \"\\uf2c3\"\nfa_dropbox = \"\\uf16b\"\nfa_drupal = \"\\uf1a9\"\nfa_edge = \"\\uf282\"\nfa_edit = \"\\uf044\"\nfa_eercast = \"\\uf2da\"\nfa_eject = \"\\uf052\"\nfa_ellipsis_h = \"\\uf141\"\nfa_ellipsis_v = \"\\uf142\"\nfa_empire = \"\\uf1d1\"\nfa_envelope = \"\\uf0e0\"\nfa_envelope_o = \"\\uf003\"\nfa_envelope_open = \"\\uf2b6\"\nfa_envelope_open_o = \"\\uf2b7\"\nfa_envelope_square = \"\\uf199\"\nfa_envira = \"\\uf299\"\nfa_eraser = \"\\uf12d\"\nfa_etsy = \"\\uf2d7\"\nfa_eur = \"\\uf153\"\nfa_euro = \"\\uf153\"\nfa_exchange = \"\\uf0ec\"\nfa_exclamation = \"\\uf12a\"\nfa_exclamation_circle = \"\\uf06a\"\nfa_exclamation_triangle = \"\\uf071\"\nfa_expand = \"\\uf065\"\nfa_expeditedssl = \"\\uf23e\"\nfa_external_link = \"\\uf08e\"\nfa_external_link_square = \"\\uf14c\"\nfa_eye = \"\\uf06e\"\nfa_eye_slash = \"\\uf070\"\nfa_eyedropper = \"\\uf1fb\"\nfa_fa = \"\\uf2b4\"\nfa_facebook = \"\\uf09a\"\nfa_facebook_f = \"\\uf09a\"\nfa_facebook_official = \"\\uf230\"\nfa_facebook_square = \"\\uf082\"\nfa_fast_backward = \"\\uf049\"\nfa_fast_forward = \"\\uf050\"\nfa_fax = \"\\uf1ac\"\nfa_feed = \"\\uf09e\"\nfa_female = \"\\uf182\"\nfa_fighter_jet = \"\\uf0fb\"\nfa_file = \"\\uf15b\"\nfa_file_archive_o = \"\\uf1c6\"\nfa_file_audio_o = \"\\uf1c7\"\nfa_file_code_o = \"\\uf1c9\"\nfa_file_excel_o = \"\\uf1c3\"\nfa_file_image_o = \"\\uf1c5\"\nfa_file_movie_o = \"\\uf1c8\"\nfa_file_o = \"\\uf016\"\nfa_file_pdf_o = \"\\uf1c1\"\nfa_file_photo_o = \"\\uf1c5\"\nfa_file_picture_o = \"\\uf1c5\"\nfa_file_powerpoint_o = \"\\uf1c4\"\nfa_file_sound_o = \"\\uf1c7\"\nfa_file_text = \"\\uf15c\"\nfa_file_text_o = \"\\uf0f6\"\nfa_file_video_o = \"\\uf1c8\"\nfa_file_word_o = \"\\uf1c2\"\nfa_file_zip_o = \"\\uf1c6\"\nfa_files_o = \"\\uf0c5\"\nfa_film = \"\\uf008\"\nfa_filter = \"\\uf0b0\"\nfa_fire = \"\\uf06d\"\nfa_fire_extinguisher = \"\\uf134\"\nfa_firefox = \"\\uf269\"\nfa_first_order = \"\\uf2b0\"\nfa_flag = \"\\uf024\"\nfa_flag_checkered = \"\\uf11e\"\nfa_flag_o = \"\\uf11d\"\nfa_flash = \"\\uf0e7\"\nfa_flask = \"\\uf0c3\"\nfa_flickr = \"\\uf16e\"\nfa_floppy_o = \"\\uf0c7\"\nfa_folder = \"\\uf07b\"\nfa_folder_o = \"\\uf114\"\nfa_folder_open = \"\\uf07c\"\nfa_folder_open_o = \"\\uf115\"\nfa_font = \"\\uf031\"\nfa_font_awesome = \"\\uf2b4\"\nfa_fonticons = \"\\uf280\"\nfa_fort_awesome = \"\\uf286\"\nfa_forumbee = \"\\uf211\"\nfa_forward = \"\\uf04e\"\nfa_foursquare = \"\\uf180\"\nfa_free_code_camp = \"\\uf2c5\"\nfa_frown_o = \"\\uf119\"\nfa_futbol_o = \"\\uf1e3\"\nfa_gamepad = \"\\uf11b\"\nfa_gavel = \"\\uf0e3\"\nfa_gbp = \"\\uf154\"\nfa_ge = \"\\uf1d1\"\nfa_gear = \"\\uf013\"\nfa_gears = \"\\uf085\"\nfa_genderless = \"\\uf22d\"\nfa_get_pocket = \"\\uf265\"\nfa_gg = \"\\uf260\"\nfa_gg_circle = \"\\uf261\"\nfa_gift = \"\\uf06b\"\nfa_git = \"\\uf1d3\"\nfa_git_square = \"\\uf1d2\"\nfa_github = \"\\uf09b\"\nfa_github_alt = \"\\uf113\"\nfa_github_square = \"\\uf092\"\nfa_gitlab = \"\\uf296\"\nfa_gittip = \"\\uf184\"\nfa_glass = \"\\uf000\"\nfa_glide = \"\\uf2a5\"\nfa_glide_g = \"\\uf2a6\"\nfa_globe = \"\\uf0ac\"\nfa_google = \"\\uf1a0\"\nfa_google_plus = \"\\uf0d5\"\nfa_google_plus_circle = \"\\uf2b3\"\nfa_google_plus_official = \"\\uf2b3\"\nfa_google_plus_square = \"\\uf0d4\"\nfa_google_wallet = \"\\uf1ee\"\nfa_graduation_cap = \"\\uf19d\"\nfa_gratipay = \"\\uf184\"\nfa_grav = \"\\uf2d6\"\nfa_group = \"\\uf0c0\"\nfa_h_square = \"\\uf0fd\"\nfa_hacker_news = \"\\uf1d4\"\nfa_hand_grab_o = \"\\uf255\"\nfa_hand_lizard_o = \"\\uf258\"\nfa_hand_o_down = \"\\uf0a7\"\nfa_hand_o_left = \"\\uf0a5\"\nfa_hand_o_right = \"\\uf0a4\"\nfa_hand_o_up = \"\\uf0a6\"\nfa_hand_paper_o = \"\\uf256\"\nfa_hand_peace_o = \"\\uf25b\"\nfa_hand_pointer_o = \"\\uf25a\"\nfa_hand_rock_o = \"\\uf255\"\nfa_hand_scissors_o = \"\\uf257\"\nfa_hand_spock_o = \"\\uf259\"\nfa_hand_stop_o = \"\\uf256\"\nfa_handshake_o = \"\\uf2b5\"\nfa_hard_of_hearing = \"\\uf2a4\"\nfa_hashtag = \"\\uf292\"\nfa_hdd_o = \"\\uf0a0\"\nfa_header = \"\\uf1dc\"\nfa_headphones = \"\\uf025\"\nfa_heart = \"\\uf004\"\nfa_heart_o = \"\\uf08a\"\nfa_heartbeat = \"\\uf21e\"\nfa_history = \"\\uf1da\"\nfa_home = \"\\uf015\"\nfa_hospital_o = \"\\uf0f8\"\nfa_hotel = \"\\uf236\"\nfa_hourglass = \"\\uf254\"\nfa_hourglass_1 = \"\\uf251\"\nfa_hourglass_2 = \"\\uf252\"\nfa_hourglass_3 = \"\\uf253\"\nfa_hourglass_end = \"\\uf253\"\nfa_hourglass_half = \"\\uf252\"\nfa_hourglass_o = \"\\uf250\"\nfa_hourglass_start = \"\\uf251\"\nfa_houzz = \"\\uf27c\"\nfa_html5 = \"\\uf13b\"\nfa_i_cursor = \"\\uf246\"\nfa_id_badge = \"\\uf2c1\"\nfa_id_card = \"\\uf2c2\"\nfa_id_card_o = \"\\uf2c3\"\nfa_ils = \"\\uf20b\"\nfa_image = \"\\uf03e\"\nfa_imdb = \"\\uf2d8\"\nfa_inbox = \"\\uf01c\"\nfa_indent = \"\\uf03c\"\nfa_industry = \"\\uf275\"\nfa_info = \"\\uf129\"\nfa_info_circle = \"\\uf05a\"\nfa_inr = \"\\uf156\"\nfa_instagram = \"\\uf16d\"\nfa_institution = \"\\uf19c\"\nfa_internet_explorer = \"\\uf26b\"\nfa_intersex = \"\\uf224\"\nfa_ioxhost = \"\\uf208\"\nfa_italic = \"\\uf033\"\nfa_joomla = \"\\uf1aa\"\nfa_jpy = \"\\uf157\"\nfa_jsfiddle = \"\\uf1cc\"\nfa_key = \"\\uf084\"\nfa_keyboard_o = \"\\uf11c\"\nfa_krw = \"\\uf159\"\nfa_language = \"\\uf1ab\"\nfa_laptop = \"\\uf109\"\nfa_lastfm = \"\\uf202\"\nfa_lastfm_square = \"\\uf203\"\nfa_leaf = \"\\uf06c\"\nfa_leanpub = \"\\uf212\"\nfa_legal = \"\\uf0e3\"\nfa_lemon_o = \"\\uf094\"\nfa_level_down = \"\\uf149\"\nfa_level_up = \"\\uf148\"\nfa_life_bouy = \"\\uf1cd\"\nfa_life_buoy = \"\\uf1cd\"\nfa_life_ring = \"\\uf1cd\"\nfa_life_saver = \"\\uf1cd\"\nfa_lightbulb_o = \"\\uf0eb\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Font Awesome Icon Grid with Bootstrap\nDESCRIPTION: HTML structure for displaying Font Awesome icons in a responsive grid layout using Bootstrap classes. Each icon is shown with its name, version number if applicable, and unicode reference.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFont/Data/提取字符/cheatsheet.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n  <small class=\"text-muted pull-right\">4.4</small>\n  <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use 500px\"></i>\n  fa-500px\n  <span class=\"text-muted\">[&#xf26e;]</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Structuring HTML Documentation for PyQt5 U_FuncWidget Module\nDESCRIPTION: This HTML code structures the documentation for the U_FuncWidget module in a PyQt5 hover menu project. It includes sections for packages and modules, with links to their respective documentation files.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/Test/partner_625781186/5.hoverMenu/Documentation/README-5.hoverMenu.U_FuncWidget.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html><head>\n<title>5.hoverMenu.U_FuncWidget</title>\n<meta charset=\"UTF-8\">\n<style>\n\n</style>\n</head>\n<body>\n<h1>5.hoverMenu.U_FuncWidget</h1>\n\n\n<h3>Packages</h3>\n<table>\n<tr>\n<td><a href=\"README-5.hoverMenu.U_FuncWidget.UCompetitiveProduct2.md\">UCompetitiveProduct2</a></td>\n<td></td>\n</tr><tr>\n<td><a href=\"README-5.hoverMenu.U_FuncWidget.UMarketAnalysis3.md\">UMarketAnalysis3</a></td>\n<td></td>\n</tr><tr>\n<td><a href=\"README-5.hoverMenu.U_FuncWidget.UStoreData1.md\">UStoreData1</a></td>\n<td></td>\n</tr><tr>\n<td><a href=\"README-5.hoverMenu.U_FuncWidget.UThroughTrain4.md\">UThroughTrain4</a></td>\n<td></td>\n</tr>\n</table>\n\n<h3>Modules</h3>\n<table>\n<tr>\n<td><a href=\"5.hoverMenu.U_FuncWidget.BaseElement.md\">BaseElement</a></td>\n<td>description: &#25277;&#35937;&#31867;&#27169;&#22359;</td>\n</tr><tr>\n<td><a href=\"5.hoverMenu.U_FuncWidget.Menu.md\">Menu</a></td>\n<td>description: &#35201;&#22686;&#21152;&#33756;&#21333;&#26639;&#26102;&#65292;&#22312;&#36825;&#37324;&#28155;&#21152;&#12290;<br></td>\n</tr>\n</table>\n</body></html>\n```\n\n----------------------------------------\n\nTITLE: Font Awesome Icon HTML Structure\nDESCRIPTION: Standard HTML structure for displaying Font Awesome icons with titles, classes and unicode references. Each icon includes a font-awesome class, optional aliases, and the corresponding unicode value.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFont/Data/提取字符/cheatsheet.txt#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n  <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use arrow-right\"></i>\n  fa-arrow-right\n  <span class=\"text-muted\">[&#xf061;]</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Font Awesome Icons in HTML\nDESCRIPTION: This snippet shows the HTML structure used to display Font Awesome icons with their names and Unicode values. It includes classes for responsive layout and visual styling.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFont/Data/提取字符/cheatsheet.txt#2025-04-21_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n  <small class=\"text-muted pull-right\">4.1</small>\n  <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use file-pdf-o\"></i>\n  fa-file-pdf-o\n  \n  <span class=\"text-muted\">[&#xf1c1;]</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Documentation Structure for PyQt5 SKU Widget\nDESCRIPTION: HTML documentation template defining the structure and content for a PyQt5 SKU analysis widget class documentation. Contains class definitions, methods, and attributes documentation.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/Test/partner_625781186/5.hoverMenu/Documentation/5.hoverMenu.U_FuncWidget.UCompetitiveProduct2.SKU_Widget.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html><head>\n<title>5.hoverMenu.U_FuncWidget.UCompetitiveProduct2.SKU_Widget</title>\n<meta charset=\"UTF-8\">\n<style>\n\n</style>\n</head>\n<body><a NAME=\"top\" ID=\"top\"></a>\n<h1>5.hoverMenu.U_FuncWidget.UCompetitiveProduct2.SKU_Widget</h1>\n```\n\n----------------------------------------\n\nTITLE: Displaying Font Awesome Icons in HTML Grid\nDESCRIPTION: This HTML snippet creates a grid layout to display Font Awesome icons. Each icon is represented by an <i> element with appropriate classes and attributes. The icon name and unicode value are also included.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFont/Data/提取字符/cheatsheet.txt#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n  <small class=\"text-muted pull-right\">4.4</small>\n  <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use calendar-plus-o\"></i>\n  fa-calendar-plus-o\n  \n  <span class=\"text-muted\">[&#xf271;]</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Table of Contents Structure\nDESCRIPTION: Basic HTML document structure defining a table of contents page with minimal styling and a single link to a hover menu documentation.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/Test/partner_625781186/5.hoverMenu/Documentation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html><head>\n<title>Table of contents</title>\n<meta charset=\"UTF-8\">\n<style>\n\n</style>\n</head>\n<body>\n<h1>Table of contents</h1>\n\n\n<h3>Packages</h3>\n<table>\n<tr>\n<td><a href=\"README-5.hoverMenu.md\">hoverMenu</a></td>\n<td></td>\n</tr>\n</table>\n\n</body></html>\n```\n\n----------------------------------------\n\nTITLE: Displaying Font Awesome Icon in HTML\nDESCRIPTION: This snippet demonstrates how to display a Font Awesome icon using HTML. It includes the icon class, name, and Unicode value.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFont/Data/提取字符/cheatsheet.txt#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n  <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use chevron-down\"></i>\n  fa-chevron-down\n  <span class=\"text-muted\">[&#xf078;]</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Font Awesome Icon in HTML\nDESCRIPTION: HTML markup for showing a Font Awesome icon with its name and unicode value. The icon is wrapped in a grid column for responsive layout.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFont/Data/提取字符/cheatsheet.txt#2025-04-21_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n  <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use credit-card\"></i>\n  fa-credit-card\n  <span class=\"text-muted\">[&#xf09d;]</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Font Awesome Icons in HTML\nDESCRIPTION: This HTML snippet demonstrates how to display Font Awesome icons using <i> elements with appropriate classes and attributes. It includes the icon name, version information, and Unicode value.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFont/Data/提取字符/cheatsheet.txt#2025-04-21_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n  <small class=\"text-muted pull-right\">4.7</small>\n  <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use envelope-open\"></i>\n  fa-envelope-open\n  \n  <span class=\"text-muted\">[&#xf2b6;]</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Font Awesome Icons in HTML\nDESCRIPTION: This HTML snippet shows how to display Font Awesome icons with their names and Unicode values. It uses a grid layout with columns for different screen sizes.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFont/Data/提取字符/cheatsheet.txt#2025-04-21_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n  <small class=\"text-muted pull-right\">4.0</small>\n  <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use try\"></i>\n  fa-try\n  \n  <span class=\"text-muted\">[&#xf195;]</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Font Awesome Icons in HTML\nDESCRIPTION: This HTML snippet shows how to display Font Awesome icons with their names and Unicode values. It uses a grid layout to organize the icons and includes version information for newer additions.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFont/Data/提取字符/cheatsheet.txt#2025-04-21_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n  <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use life-saver\"></i>\n  fa-life-saver\n   <span class=\"text-muted\">(alias)</span>\n  <span class=\"text-muted\">[&#xf1cd;]</span>\n</div>\n\n<div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n  <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use lightbulb-o\"></i>\n  fa-lightbulb-o\n  \n  <span class=\"text-muted\">[&#xf0eb;]</span>\n</div>\n\n<div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n  <small class=\"text-muted pull-right\">4.2</small>\n  <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use line-chart\"></i>\n  fa-line-chart\n  \n  <span class=\"text-muted\">[&#xf201;]</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Font Awesome Icon in HTML\nDESCRIPTION: This snippet shows how to display a Font Awesome icon in HTML using the 'fa' CSS class. It includes the icon name, an optional alias, and the Unicode value.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFont/Data/提取字符/cheatsheet.txt#2025-04-21_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n  <small class=\"text-muted pull-right\">4.4</small>\n  <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use hand-lizard-o\"></i>\n  fa-hand-lizard-o\n  \n  <span class=\"text-muted\">[&#xf258;]</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Font Awesome Icons with Grid Layout in HTML\nDESCRIPTION: HTML code for displaying a collection of Font Awesome icons in a responsive grid layout. Each div contains the icon, its name, version information (when applicable), and the corresponding Unicode hexadecimal reference.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFont/Data/提取字符/cheatsheet.txt#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n  <small class=\"text-muted pull-right\">4.4</small>\n  <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use sticky-note\"></i>\n  fa-sticky-note\n  \n  <span class=\"text-muted\">[&amp;#xf249;]</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Font Awesome Icon in HTML\nDESCRIPTION: This snippet shows how to display a Font Awesome icon using an <i> tag with appropriate classes and attributes. It includes the icon name, any aliases, and its Unicode value.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFont/Data/提取字符/cheatsheet.txt#2025-04-21_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n  <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use slideshare\"></i>\n  fa-slideshare\n  <span class=\"text-muted\">[&#xf1e7;]</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Font Awesome Icons Grid with Bootstrap\nDESCRIPTION: HTML markup for displaying Font Awesome icons in a responsive grid layout. Each icon is shown with its class name, unicode value, and optional alias indication. The grid uses Bootstrap's responsive column classes to adapt to different screen sizes.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFont/Data/提取字符/cheatsheet.txt#2025-04-21_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n      <small class=\"text-muted pull-right\">4.4</small>\n      <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use yc\"></i>\n      fa-yc\n       <span class=\"text-muted\">(alias)</span>\n      <span class=\"text-muted\">[&amp;#xf23b;]</span>\n    </div>\n    \n    <div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n      <small class=\"text-muted pull-right\">4.1</small>\n      <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use yc-square\"></i>\n      fa-yc-square\n       <span class=\"text-muted\">(alias)</span>\n      <span class=\"text-muted\">[&amp;#xf1d4;]</span>\n    </div>\n    \n    <div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n      <small class=\"text-muted pull-right\">4.2</small>\n      <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use yelp\"></i>\n      fa-yelp\n      \n      <span class=\"text-muted\">[&amp;#xf1e9;]</span>\n    </div>\n    \n    <div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n      \n      <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use yen\"></i>\n      fa-yen\n       <span class=\"text-muted\">(alias)</span>\n      <span class=\"text-muted\">[&amp;#xf157;]</span>\n    </div>\n    \n    <div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n      <small class=\"text-muted pull-right\">4.6</small>\n      <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use yoast\"></i>\n      fa-yoast\n      \n      <span class=\"text-muted\">[&amp;#xf2b1;]</span>\n    </div>\n    \n    <div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n      \n      <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use youtube\"></i>\n      fa-youtube\n      \n      <span class=\"text-muted\">[&amp;#xf167;]</span>\n    </div>\n    \n    <div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n      \n      <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use youtube-play\"></i>\n      fa-youtube-play\n      \n      <span class=\"text-muted\">[&amp;#xf16a;]</span>\n    </div>\n    \n    <div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n      \n      <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use youtube-square\"></i>\n      fa-youtube-square\n      \n      <span class=\"text-muted\">[&amp;#xf166;]</span>\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Font Awesome Icons in HTML\nDESCRIPTION: This HTML snippet demonstrates how to display Font Awesome icons with their names and Unicode values. It uses a grid layout with columns for different screen sizes and includes version information for newer icons.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFont/Data/提取字符/cheatsheet.txt#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"col-md-4 col-sm-6 col-lg-3 col-print-4\">\n  <small class=\"text-muted pull-right\">4.1</small>\n  <i class=\"fa fa-fw\" aria-hidden=\"true\" title=\"Copy to use behance\"></i>\n  fa-behance\n  \n  <span class=\"text-muted\">[&#xf1b4;]</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Declaring lxml Dependency\nDESCRIPTION: Package dependency declaration specifying lxml as a required package. The exact version is not pinned, allowing for compatible updates.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QFlowLayout/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlxml\n```\n\n----------------------------------------\n\nTITLE: PyQt Package Requirements List\nDESCRIPTION: Lists the core PyQt packages and dependencies needed for Python Qt development. Includes both PyQt5 and PyQt6 versions along with their SIP bindings and builder tools.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/Test/WigglyWidget/PyQtWrapper/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nPyQt5\nPyQt6\nsip\nPyQt5-sip\nPyQt6-sip\nPyQt-builder\n```\n\n----------------------------------------\n\nTITLE: Installing PySide2 Dependencies with Platform-Specific Shiboken2 Generators\nDESCRIPTION: Specifies PySide2 version 5.15.2.1 and conditional URLs for Shiboken2 generator wheels based on platform architecture (x86_64/i686) and operating system (Windows/Linux/MacOS).\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/Test/WigglyWidget/PySideWrapper/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPySide2==5.15.2.1\n\nhttps://download.qt.io/official_releases/QtForPython/shiboken2-generator/shiboken2_generator-5.15.2.1-5.15.2-cp35.cp36.cp37.cp38.cp39.cp310-none-win_amd64.whl; platform_machine == \"x86_64\" and platform_system == \"Windows\"\n\nhttps://download.qt.io/official_releases/QtForPython/shiboken2-generator/shiboken2_generator-5.15.2.1-5.15.2-cp35.cp36.cp37.cp38.cp39.cp310-none-win32.whl; platform_machine == \"i686\" and platform_system == \"Windows\"\n\nhttps://download.qt.io/official_releases/QtForPython/shiboken2-generator/shiboken2_generator-5.15.2.1-5.15.2-cp35.cp36.cp37.cp38.cp39.cp310-abi3-manylinux1_x86_64.whl; platform_machine == \"x86_64\" and platform_system == \"Linux\"\n\nhttps://download.qt.io/official_releases/QtForPython/shiboken2-generator/shiboken2_generator-5.15.2.1-5.15.2-cp35.cp36.cp37.cp38.cp39.cp310-abi3-macosx_10_13_intel.whl; platform_machine == \"x86_64\" and platform_system == \"Darwin\"\n```\n\n----------------------------------------\n\nTITLE: Launching a PyQt Application with QApplication\nDESCRIPTION: Basic code for initializing and running a PyQt application. Creates a QApplication instance, shows a MainWindow widget, and executes the application event loop.\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QTableWidget/README.en.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp = QApplication(sys.argv)\nwindow = MainWindow()\nwindow.show()\napp.exec_()\n```\n\n----------------------------------------\n\nTITLE: QtRemoteObjects Header\nDESCRIPTION: Markdown header indicating QtRemoteObjects section\nSOURCE: https://github.com/pyqt5/pyqt/blob/master/QtRemoteObjects/README.en.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# QtRemoteObjects\n```"
  }
]