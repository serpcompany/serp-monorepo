[
  {
    "owner": "flyway",
    "repo": "flyway",
    "content": "TITLE: Generating Versioned/Undo Scripts (CLI) - Shell\nDESCRIPTION: This snippet shows generating versioned and undo scripts with the `generate` command, specifying changes. It requires Flyway CLI version 11.0.0 or later and a Teams/Enterprise license.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Migrating from flyway-dev to flyway CLI.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nflyway generate \\\"-generate.changes=QvJIORGzbAAz3irDJbEKBcQr8QY\\\" \\\"-generate.types=versioned,undo\\\" \\\"-generate.description=NewFeature\\\"\n```\n\n----------------------------------------\n\nTITLE: Using Scoped Namespacing for Command-Line Parameters in PowerShell\nDESCRIPTION: Shows how to use scoped namespacing in PowerShell, where parameters immediately following a specific command (verb) are automatically associated with that command's namespace. Here, '-databaseType' directly following 'init' is implicitly interpreted as 'flyway.init.databaseType'.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Command-line.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nflyway init -databaseType=sqlserver \n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Locations in Flyway Using TOML (TOML)\nDESCRIPTION: This snippet shows setting the flyway.locations property within a TOML configuration file. The locations array accepts one or more source location URIs, here using filesystem syntax. Filesystem locations support only SQL migrations and are resolved from the working directory. Ensure the path exists and the configuration file is loaded by Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Locations Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nlocations = [\"filesystem:./sql\"]\n```\n\n----------------------------------------\n\nTITLE: Reapplying a Migration Using Flyway Migrate Command in Shell\nDESCRIPTION: Invokes the 'flyway migrate' command in the Flyway CLI to reapply pending versioned migrations after they have been undone. This command validates and applies all necessary migrations to update the database schema to the latest version. It ensures database schema consistency and is used after an undo operation to restore migrations safely.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Undo Migrations.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nflyway migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway JDBC URL in Properties File\nDESCRIPTION: Shows how to set the `flyway.url` property in a standard Java properties configuration file. Flyway can read configuration from such files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment URL Setting.md#_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.url=jdbc:h2:mem:flyway_db\n```\n\n----------------------------------------\n\nTITLE: Creating Undo Migrations with Flyway SQL\nDESCRIPTION: Defines undo migration SQL scripts for reverting database changes applied by versioned migrations. The undo migration filenames replace the 'V' prefix with 'U' while keeping the rest of the versioning consistent. These scripts contain SQL commands that reverse the effects of the versioned migration scripts, enabling Flyway to undo schema changes. Requires Flyway's naming conventions and appropriate SQL privileges to run the commands.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Undo Migrations.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM PERSON;\n```\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE PERSON;\n```\n\n----------------------------------------\n\nTITLE: Migrate via Maven (Flyway)\nDESCRIPTION: Executes the Flyway migrate goal within a Maven project.  It triggers the migration process using configurations defined in the pom.xml file. The database version is exposed in the flyway.current property.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Migrate.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn flyway:migrate\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway User in Properties File\nDESCRIPTION: This properties format snippet shows the key-value configuration to set the Flyway user parameter in a standard properties file. The key 'flyway.user' with value 'myuser' configures Flyway to use that username when connecting to the database.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment User Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.user=myuser\n```\n\n----------------------------------------\n\nTITLE: Executing Flyway Clean Operation via Command Line - bash\nDESCRIPTION: Demonstrates how to run the Flyway 'clean' command directly from a shell environment to drop all objects in the configured schemas. Requires Flyway CLI installed and proper configuration of database connection. This command irreversibly deletes database schema objects; it should not be run against production environments.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Clean.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflyway clean\n```\n\n----------------------------------------\n\nTITLE: Implement Flyway Java Migration (V3) - Java\nDESCRIPTION: Defines a Java class `V3__Anonymize` that extends `BaseJavaMigration` to perform a data transformation. The `migrate` method uses JDBC to select all person IDs and update each row, setting the name to \"Anonymous\" followed by the ID. Requires `flyway-core` and JDBC drivers.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Java-based Migrations.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npackage db.migration;\n\nimport org.flywaydb.core.api.migration.BaseJavaMigration;\nimport org.flywaydb.core.api.migration.Context;\n\nimport java.sql.ResultSet;\nimport java.sql.Statement;\n\npublic class V3__Anonymize extends BaseJavaMigration {\n    public void migrate(Context context) throws Exception {\n        try (Statement select = context.getConnection().createStatement()) {\n            try (ResultSet rows = select.executeQuery(\"SELECT id FROM person ORDER BY id\")) {\n                while (rows.next()) {\n                    int id = rows.getInt(1);\n                    String anonymizedName = \"Anonymous\" + id;\n                    try (Statement update = context.getConnection().createStatement()) {\n                        update.execute(\"UPDATE person SET name='\" + anonymizedName + \"' WHERE id=\" + id);\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Tables and Functions with Flyway Migration Scripts - SQL\nDESCRIPTION: This SQL snippet demonstrates typical Flyway migration script syntax for Aurora PostgreSQL, including table creation with fields and primary keys, single and multi-line comments, the definition of multi-statement and single-statement PostgreSQL functions using PL/pgSQL and SQL languages, and a placeholder insertion statement for dynamic table names. It requires a PostgreSQL-compatible environment where Flyway placeholders can be replaced at runtime. Inputs are standard SQL commands executed via Flyway migrations, resulting in database schema objects such as tables and functions.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Aurora PostgreSQL.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n/* Single line comment */\nCREATE TABLE test_data (\n value VARCHAR(25) NOT NULL PRIMARY KEY\n);\n\n\n/*\nMulti-line\ncomment\n*/\n\n-- Multi-statement PostgreSQL function\nCREATE FUNCTION AddData() RETURNS INTEGER\nAS $$\n   BEGIN\n    INSERT INTO test_data (value) VALUES ('Hello');\n    RETURN 1;\n  END;\n$$ LANGUAGE plpgsql;\n\nSELECT *  INTO TEMP adddata_temp_table FROM AddData() ;\n\n-- Single-statement PostgreSQL function\nCREATE FUNCTION add(integer, integer) RETURNS integer\n   LANGUAGE sql IMMUTABLE STRICT\n   AS $_$select $1 + $2;$_$;\n\n-- Placeholder\nINSERT INTO ${tableName} (name) VALUES ('Mr. T');\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Password via Environment Variable - properties\nDESCRIPTION: This snippet shows how to set the database password using an environment variable named `FLYWAY_PASSWORD`. Flyway automatically detects and uses this environment variable if set, providing a way to manage secrets outside configuration files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Password Setting.md#_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_PASSWORD=mysecretpassword\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway HSQLDB Dependency Using Maven XML\nDESCRIPTION: This snippet provides the Maven dependency declarations to include Flyway's HSQLDB plugin module into a Java project. There are two variants: one referencing the Redgate hosted artifact and another for the open source version. Including this dependency is necessary to enable Flyway's support for HSQLDB databases. It assumes the project is using Maven for dependency management and the Flyway core library is already set up.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/HSQLDB.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.redgate.flyway</groupId>\n    <artifactId>flyway-database-hsqldb</artifactId>\n</dependency>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-database-hsqldb</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Undoing Flyway Migrations via Command Line (Bash)\nDESCRIPTION: This snippet demonstrates how to execute the Flyway Undo command directly from the command line shell. It requires Flyway to be installed and configured correctly. The command triggers the undo operation to revert the most recent versioned migration in the database. No parameters are shown here, but additional options can be provided as per Flyway configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Undo.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflyway undo\n```\n\n----------------------------------------\n\nTITLE: Using Flyway CLI to add a migration description\nDESCRIPTION: This snippet demonstrates how to add a description to a migration using the Flyway command-line interface. The '-description' parameter is used to specify the description string, which helps document the purpose of a specific migration. Dependencies include the Flyway CLI executable and proper setup of the environment path or current directory.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Add Namespace/Flyway Add Description Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway add -description=\"addTable\"\n```\n\n----------------------------------------\n\nTITLE: Example Flyway SQL Migration Script for Aurora MySQL\nDESCRIPTION: Demonstrates a sample SQL script compatible with Flyway and Aurora MySQL. It includes standard SQL for table creation, multi-line comments (`/* ... */`), MySQL-specific single-line comments (`--` and `#`), changing the statement delimiter for stored procedure definitions using `DELIMITER`, calling the procedure, handling `mysqldump` comment directives (`/*!... */`), and using Flyway placeholders (`${tableName}`). Scripts use ';' as the default statement delimiter.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Aurora MySQL.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n/* Single line comment */\nCREATE TABLE test_data (\n value VARCHAR(25) NOT NULL,\n PRIMARY KEY(value)\n);\n\n/*\nMulti-line\ncomment\n*/\n\n-- MySQL procedure\nDELIMITER //\nCREATE PROCEDURE AddData()\n BEGIN\n   # MySQL-style single line comment\n   INSERT INTO test_data (value) VALUES ('Hello');\n END //\nDELIMITER;\n\nCALL AddData();\n\n-- MySQL comments directives generated by mysqlsump\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;\n/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;\n\n-- Placeholder\nINSERT INTO ${tableName} (name) VALUES ('Mr. T');\n```\n\n----------------------------------------\n\nTITLE: Installing Flyway Open Source Edition Maven Plugin\nDESCRIPTION: XML configuration for including the Flyway Open Source Edition Maven plugin in your pom.xml. This simply requires adding the plugin to your build section. Requires Maven 3.x running on Java 17.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Maven Goal.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<build>\n    ...\n    <plugin>\n        <groupId>org.flywaydb</groupId>\n        <artifactId>flyway-maven-plugin</artifactId>\n        <version>{{ site.flywayVersion }}</version>\n    </plugin>\n    ...\n</build>\n```\n\n----------------------------------------\n\nTITLE: Setting publishResult via Environment Variable (Shell)\nDESCRIPTION: Illustrates enabling the publishing of Flyway results by setting the `FLYWAY_PUBLISH_RESULT` environment variable to `true` before running the Flyway command. This method overrides other configuration sources.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Publish Result Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_PUBLISH_RESULT=true\n```\n\n----------------------------------------\n\nTITLE: List Flyway Supported Databases\nDESCRIPTION: This command lists all the databases supported by the current version of Flyway. There are no specific dependencies beyond having Flyway installed and accessible in the command line.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/List Engines.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway list-engines\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway in Gradle Build Script (Single Database)\nDESCRIPTION: Configures the Flyway plugin directly within the build.gradle file using the `flyway` extension block. This sets standard connection properties and defines placeholders for a single database connection.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Gradle Task.md#_snippet_2\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    url = 'jdbc:h2:mem:mydb'\n    user = 'myUsr'\n    password = 'mySecretPwd'\n    schemas = ['schema1', 'schema2', 'schema3']\n    placeholders = [\n        'keyABC': 'valueXYZ',\n        'otherplaceholder': 'value123'\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring cleanDisabled in Properties File\nDESCRIPTION: Illustrates setting 'cleanDisabled' in a properties configuration file for Flyway. Assigning 'false' allows the 'clean' operation, which is disabled by default. Typically used to configure Flyway via Java properties files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Clean Disabled Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.cleanDisabled=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway via Gradle Command-Line Properties\nDESCRIPTION: Demonstrates how to pass Flyway configuration properties directly on the Gradle command line using the `-P` flag. This allows overriding configuration defined in the build script or `gradle.properties` dynamically.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Gradle Task.md#_snippet_8\n\nLANGUAGE: Console\nCODE:\n```\n> gradle -Pflyway.user=myUsr -Pflyway.schemas=schema1,schema2 -Pflyway.placeholders.keyABC=valXYZ\n```\n\n----------------------------------------\n\nTITLE: Schema History Table Example in SQL\nDESCRIPTION: An example of a Flyway schema history table showing a missing repeatable migration and a pending versioned migration that would normally cause validation errors.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Custom Validation Rules.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n+------------+---------+-------------+------+--------------+---------+----------+\n| Category   | Version | Description | Type | Installed On | State   | Undoable |\n+------------+---------+-------------+------+--------------+---------+----------+\n| Repeatable |         | repeatable  | SQL  |      ...     | Missing |          |\n| Versioned  | 1       | first       | SQL  |              | Pending | No       |\n+------------+---------+-------------+------+--------------+---------+----------+\n```\n\n----------------------------------------\n\nTITLE: Flyway Info Output (Post-Migrate) - Console Output\nDESCRIPTION: Displays the final output of the `mvn flyway:info` command after executing the migrate command. Confirms that the `V3__Anonymize` migration (Type: JDBC) is now marked with a 'Success' state and a recorded installation timestamp.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Java-based Migrations.md#_snippet_8\n\nLANGUAGE: Console Output\nCODE:\n```\n[INFO] Database: jdbc:h2:file:./target/foobar (H2 1.4)\n[INFO]\n+-----------+---------+---------------------+------+---------------------+---------+\n| Category  | Version | Description         | Type | Installed On        | State   |\n+-----------+---------+---------------------+------+---------------------+---------+\n| Versioned | 1       | Create person table | SQL  | 2017-12-22 15:26:39 | Success |\n| Versioned | 2       | Add people          | SQL  | 2017-12-22 15:28:17 | Success |\n| Versioned | 3       | Anonymize           | JDBC | 2017-12-22 16:03:37 | Success |\n+-----------+---------+---------------------+------+---------------------+---------+\n```\n\n----------------------------------------\n\nTITLE: Generating Versioned and Undo Migration Scripts with Specified Version and Description in Console\nDESCRIPTION: Demonstrates how to generate both versioned and undo migration scripts simultaneously with specific version and description metadata. The console example includes details of database connections, script generation progress highlighting paths where the undo and versioned scripts are created, and the final migrations directory contents.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Generate.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n> flyway generate -types=versioned,undo -version=003 -description=New-feature\n\nFlyway {{ site.flywayVersion }} by Redgate\n\nDatabase: jdbc:mysql://clone-internal.red-gate.com:32781/mysql (MySQL 8.0)\nDatabase: jdbc:mysql://clone-internal.red-gate.com:32781/mysql (MySQL 8.0)\nGenerating undo migration: C:\\\\Users\\\\FlywayUser\\\\Project\\\\migrations\\\\U003__New-feature.sql\nGenerating versioned migration: C:\\\\Users\\\\FlywayUser\\\\Project\\\\migrations\\\\V003__New-feature.sql\nGenerated: C:\\\\Users\\\\FlywayUser\\\\Project\\\\migrations\\\\V003__New-feature.sql\nGenerated: C:\\\\Users\\\\FlywayUser\\\\Project\\\\migrations\\\\U003__New-feature.sql\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Repeatable View (SQL)\nDESCRIPTION: Defines or replaces a database view named 'people' selecting specific columns from the 'person' table. This script is saved as 'R__People_view.sql' to be managed as a repeatable migration by Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Repeatable Migrations.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE OR REPLACE VIEW people AS \n    SELECT id, name FROM person;\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway SQL Server Dependency using Gradle (Open Source)\nDESCRIPTION: This Groovy snippet describes how to add the open source Flyway SQL Server extension dependency to a Gradle project using the official Flyway group ID and artifact. The setup enables SQL Server migration features in Flyway when using Gradle builds.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/SQL Server Database.md#_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\\n    implementation \"org.flywaydb:flyway-sqlserver\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining sqlMigrationPrefix in Properties configuration file\nDESCRIPTION: Provides an example of setting the sqlMigrationPrefix in a properties file for Flyway, enabling configuration through properties rather than command-line arguments.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Migration Prefix Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.sqlMigrationPrefix=M\n```\n\n----------------------------------------\n\nTITLE: Enabling OutOfOrder Migrations in Flyway TOML Configuration\nDESCRIPTION: This TOML snippet configures Flyway to allow migrations to be run out of order by setting the 'outOfOrder' Boolean flag to true within the [flyway] configuration section. The file must be correctly structured for Flyway to parse it and apply the parameter.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Out Of Order Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\noutOfOrder = true\n```\n\n----------------------------------------\n\nTITLE: Initializing Flyway project\nDESCRIPTION: This command initializes a new Flyway project with the specified project name and database type. It creates the necessary directory structure and configuration files for a basic Flyway setup. Requires `projectName` and `databaseType` parameters.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Init.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nflyway init -projectName=MyProject -databaseType=Sqlite\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for MySQL Connector/J Driver\nDESCRIPTION: Specifies the Maven Central coordinates required to include the MySQL Connector/J JDBC driver (version 8.0.12 or later) in a Java project using Maven. This driver is necessary for Flyway to connect to Aurora MySQL but does not ship with the Flyway command-line tool.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Aurora MySQL.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\nmysql:mysql-connector-java\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway JDBC URL in TOML File (Default Environment)\nDESCRIPTION: Illustrates how to define the JDBC URL within a TOML configuration file, specifically for the default environment. The configuration is placed under the `[environments.default]` section.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment URL Setting.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[environments.default]\nurl = \"jdbc:h2:mem:flyway_db\"\n```\n\n----------------------------------------\n\nTITLE: Executing Flyway Change and Drift Checks via CLI\nDESCRIPTION: This Bash command demonstrates using the Flyway CLI to perform both change (`-changes`) and drift (`-drift`) checks against a target database configured for the 'production' environment, associating it with the 'build' environment. This requires Flyway Enterprise Edition and generates a report detailing pending migrations and schema differences.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Check.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflyway check -changes -drift -buildEnvironment=\"build\" -environment=\"production\"\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependency for Flyway MySQL Support\nDESCRIPTION: Specifies how to include the Flyway MySQL driver in a Gradle build script for Java projects, supporting both Redgate and open-source versions, enabling database migration functionalities.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/MySQL.md#_snippet_1\n\nLANGUAGE: Groovy\nCODE:\n```\ndependencies {\n    implementation \"com.redgate.flyway:flyway-mysql\"\n}\n```\n\nLANGUAGE: Groovy\nCODE:\n```\ndependencies {\n    implementation \"org.flywaydb:flyway-mysql\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway DataSource with User via Java API\nDESCRIPTION: This Java snippet uses the Flyway Fluent Configuration API to set up a datasource with a specified JDBC URL, username ('myuser'), and password. It requires Flyway's Java API dependency. The 'datasource' method expects the connection string and credentials; 'load()' finalizes the configuration. This approach is programmatic and useful for Java applications integrating Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment User Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n        .datasource(\"jdbc:h2:mem:flyway_db\", \"myuser\", \"mysecretpassword\")\n        .load()\n```\n\n----------------------------------------\n\nTITLE: Adding Snowflake Dependency (Maven, Redgate)\nDESCRIPTION: This XML snippet shows how to include the Flyway Snowflake database support as a dependency in a Maven project using the Redgate groupId. This is necessary to enable Flyway to connect and perform migrations on Snowflake databases.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Snowflake.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.redgate.flyway</groupId>\n    <artifactId>flyway-database-snowflake</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Schema Model with Development Database via Flyway CLI (Shell)\nDESCRIPTION: This command updates the Flyway schema model directory to include structural changes introduced in the development database by running a diff and applying detected changes via the model command. It efficiently captures new objects—in this case, a table addition—allowing them to be versioned and later migrated. Dependencies: Flyway Enterprise Edition, properly configured 'development' source and 'schemaModel' as destination. Input: source and target environments. Output: schema model files updated to reflect new table.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Flyway Desktop migrations workflow with Flyway CLI.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ flyway diff model \"-diff.source=development\" \"-diff.target=schemaModel\"\n\nFlyway Enterprise Edition {{ site.flywayVersion }} by Redgate\nLicensed to red-gate.com (license ID 1174ed6b-b10e-41bd-9a1b-285ddc3239c7)\n\nSee release notes here: https://rd.gt/416ObMi\ndiff artifact generated: C:\\Users\\Flyway\\AppData\\Local\\Temp\\flyway.artifact.diff\n+-----------------------------+--------+-------------+--------+----------+\n| Id                          | Change | Object Type | Schema | Name     |\n+-----------------------------+--------+-------------+--------+----------+\n| J7JsJA_jmgaSrCD.hAdkbUqxxQs | Add    | Table       | dbo    | NewTable |\n+-----------------------------+--------+-------------+--------+----------+\n\nSaved to schema model\n File updated: C:\\Users\\Flyway\\FlywayProjects\\SqlServerProject\\schema-model\\Tables\\dbo.NewTable.sql\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Vault Resolver Engine Name - TOML File\nDESCRIPTION: This snippet shows the syntax for configuring the `engineName` property for the Vault resolver within the 'development' environment using a Flyway TOML configuration file. The configuration is placed under the `[environments.development.resolvers.vault]` section.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Vault Resolver/Vault Resolver Engine Name Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development.resolvers.vault]\nengineName = \"secret\"\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway Informix Dependency (Gradle - Open Source)\nDESCRIPTION: Declares the Open Source version of the Flyway Informix database support module as an implementation dependency in a Gradle build script (build.gradle). This integrates Informix support into the Java project.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Informix.md#_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation \"org.flywaydb:flyway-database-informix\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting jdbcProperties Flyway API (Java)\nDESCRIPTION: Shows how to configure JDBC properties when using the Flyway Java API. A `Map` is created containing the desired properties, and this map is passed to the `jdbcProperties()` method of the `Flyway.configure()` builder. Requires the Flyway Java library dependency.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment JDBC Properties Namespace.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> properties = new HashMap<>();\nproperties.put(\"accessToken\", \"access-token\");\n\nFlyway.configure()\n    .jdbcProperties(properties)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Preparing and Deploying with Flyway CLI - Shell\nDESCRIPTION: Shows a two-step workflow: first, generates a deployment script using 'flyway prepare', then uses 'flyway deploy' to execute the prepared script against the target environment. Dependencies include access to the schema model source and Flyway CLI. Key parameters: '-source' refers to the origin schema model, '-target' is the destination environment, and '-scriptFilename' names the generated SQL file. Output is the successful deployment of the prepared script to the specified environment.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Deploy.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nflyway prepare -source=schemaModel -target=production -scriptFilename=D__deployment.sql\nflyway deploy -scriptFilename=\"D__deployment.sql\" -environment=production\n```\n\n----------------------------------------\n\nTITLE: Java programmatic configuration example for Flyway\nDESCRIPTION: Demonstrates how to configure Flyway programmatically in Java using the Flyway class. It shows importing the class, setting up the data source, and initiating migration, which allows automated database migrations prior to application startup.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/API (Java).md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport org.flywaydb.core.Flyway;\n\n// Create a Flyway instance with data source configuration\nFlyway flyway = Flyway.configure().dataSource(url, user, password).load();\n// Execute database migration\nflyway.migrate();\n\n// Proceed with starting the rest of the application (e.g., Hibernate)\n```\n\n----------------------------------------\n\nTITLE: Re-executing Flyway Migrations After Modification (CLI - Console)\nDESCRIPTION: Applies pending migrations again. Due to the checksum change, Flyway detects the modified repeatable migration and reapplies the updated script to the database.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Repeatable Migrations.md#_snippet_7\n\nLANGUAGE: Console\nCODE:\n```\nflyway migrate\n```\n\n----------------------------------------\n\nTITLE: Calculating Diff (flyway-dev) - Shell\nDESCRIPTION: This command calculates the differences between two sources using flyway-dev. It requires the project path, sources to compare and an artifact location. Prerequisites include Flyway CLI version 11.0.0 or later and a Teams/Enterprise license.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Migrating from flyway-dev to flyway CLI.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nflyway-dev diff -p=C:\\Users\\redgate\\Documents\\TestFdCmdLine --from=Dev --to=SchemaModel -a=C:\\Users\\redgate\\Documents\\TestFdCmdLine\\Temp\\artifact1 --i-agree-to-the-eula\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway for Multiple Databases (Gradle Tasks)\nDESCRIPTION: Defines multiple custom tasks, each extending the `FlywayMigrateTask`, to configure and run migrations against different databases with distinct connection details. This approach is suitable for managing multiple database schemas or instances within one project.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Gradle Task.md#_snippet_3\n\nLANGUAGE: Groovy\nCODE:\n```\ntask migrateDatabase1(type: org.flywaydb.gradle.task.FlywayMigrateTask) {\n    url = 'jdbc:h2:mem:mydb1'\n    user = 'myUsr1'\n    password = 'mySecretPwd1'\n}\n\ntask migrateDatabase2(type: org.flywaydb.gradle.task.FlywayMigrateTask) {\n    url = 'jdbc:h2:mem:mydb2'\n    user = 'myUsr2'\n    password = 'mySecretPwd2'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway License Key in Gradle Plugin Configuration\nDESCRIPTION: This Groovy snippet demonstrates how to specify the Flyway Teams license key in the Gradle build script. It assigns the 'licenseKey' property inside 'pluginConfiguration' within the 'flyway' closure. A valid license key string beginning with 'FL' enables Teams features when running Flyway tasks via Gradle.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway License Key Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    pluginConfiguration = [\n            licenseKey: 'FL01...'\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway License Key in Maven Plugin Configuration\nDESCRIPTION: This XML snippet explains how to configure the Flyway Teams license key within a Maven plugin's configuration section. The 'licenseKey' property is placed inside the 'pluginConfiguration' XML element. This setup enables Flyway Teams features during Maven build executions that invoke Flyway tasks.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway License Key Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n  <pluginConfiguration>\n    <licenseKey>FL01...</licenseKey>\n  </pluginConfiguration>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Oracle SQL Migration Script Example with PL/SQL and Placeholders\nDESCRIPTION: Example of an Oracle SQL migration script showing single-line comments, multi-line comments, table creation, PL/SQL block with trigger creation, and placeholder usage.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Oracle Database.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n/* Single line comment */\nCREATE TABLE test_user (\n  name VARCHAR(25) NOT NULL,\n  PRIMARY KEY(name)\n);\n\n/*\nMulti-line\ncomment\n*/\n-- PL/SQL block\nCREATE TRIGGER test_trig AFTER insert ON test_user\nBEGIN\n   UPDATE test_user SET name = CONCAT(name, ' triggered');\nEND;\n/\n\n-- Placeholder\nINSERT INTO ${tableName} (name) VALUES ('Mr. T');\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway add description in TOML file\nDESCRIPTION: This snippet shows how to specify a migration description within a Flyway TOML configuration file. It uses the '[flyway.add]' section with a 'description' key to set the description, enabling automated or repeatable configuration setups. Dependencies include a correctly formatted TOML file and Flyway setup that recognizes this configuration structure.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Add Namespace/Flyway Add Description Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.add]\ndescription = \"addTable\"\n```\n\n----------------------------------------\n\nTITLE: Generating Script from Source Database using Flyway Prepare (Shell)\nDESCRIPTION: Generates a SQL deployment script (`D__deployment.sql`) by comparing the 'dev' source environment database against the 'production' target environment database. The script will contain SQL to update the target database to match the source.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Prepare.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nflyway prepare -source=env:dev -target=production -scriptFilename=\"D__deployment.sql\"\n```\n\n----------------------------------------\n\nTITLE: Diff after Build Environment Migration with Cherry Pick\nDESCRIPTION: This example demonstrates comparing a build environment against a target environment after migrating the build environment using a list of specified migrations (`cherry pick`). The  `-buildEnvironment` and `-buildCherryPick` parameters are used to select specific migrations.  The output will list only the changes related to the migrations cherry-picked.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Diff.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n&gt; flyway diff -source=migrations -target=prod -buildEnvironment=\"build\" -buildCherryPick=\"2,4\" -artifactFilename=.\\diffArtifacts\\artifact\n\nSchema history table [HR].[HRSchema].[flyway_schema_history] does not exist yet\nSuccessfully validated 4 migrations (execution time 00:00.083s)\nCreating Schema History table [HR].[HRSchema].[flyway_schema_history] ...\nCurrent version of schema [HRSchema]: << Empty Schema >>\nMigrating schema [HRSchema] to version \"2 - table1\"\nMigrating schema [HRSchema] to version \"4 - table2\"\nSuccessfully applied 2 migrations to schema [HRSchema], now at version v4 (execution time 00:00.137s)\ndiff artifact generated: C:\\Users\\Projects\\diffArtifacts\\artifact\n+-----------------------------+--------+-------------+----------+---------+\n| Id                          | Change | Object Type | Schema   | Name    |\n+-----------------------------+--------+-------------+----------+---------+\n| a.o0T8ULN8u.YVZIz6UVT7dbhC0 | Add    | Table       | HRSchema | table_1 |\n| 1gvOcO43loujJCPktuUkhBMFbSI | Add    | Table       | HRSchema | table_2 |\n+-----------------------------+--------+-------------+----------+---------+\n```\n\n----------------------------------------\n\nTITLE: Running Flyway Migration Command - Bash\nDESCRIPTION: This snippet provides the Bash command line necessary to trigger Flyway migrations and display migration info. It calls the Flyway CLI to apply all pending migrations and then prints the migration status. The command assumes the flyway CLI tool is installed and configured in the system's PATH. No parameters are passed to the command other than the Flyway action keywords. Output will show the applied migration along with other migration details.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Using MongoDB with Flyway.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./flyway migrate info\n```\n\n----------------------------------------\n\nTITLE: Drift Command JSON Output Format\nDESCRIPTION: The JSON output format for the check drift command showing the structure of the report with information about differences between source and target databases, including object differences and metadata.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Check/Check Drift.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"htmlReport\": \"report.html\",\n  \"jsonReport\": \"report.json\",\n  \"individualResults\": [\n    {\n      message: null,\n      stackTrace: null,\n      onlyInSource: [],\n      onlyInTarget: [],\n      differences: [\n        {\n          name: \"Table_1\",\n          schema: \"dbo\",\n          objectType: \"Table\",\n          definitionBefore: \"CREATE TABLE Table_1 (id text)\",\n          definitionAfter: \"CREATE TABLE Table_1 (different_id text)\",\n        },\n      ],\n      timestamp: \"2022-07-22T08-08-33Z\",\n      database: \"testdb\",\n      operation: \"drift\",\n      flywayVersion: undefined,\n      warnings: undefined,\n    }\n  ]\n }\n```\n\n----------------------------------------\n\nTITLE: Running Flyway Diff and Generate Using Console Commands\nDESCRIPTION: Example of executing the Flyway diff and generate commands chained together in a console environment to detect schema differences and generate migration scripts automatically. It demonstrates usage of the -diff.source, -diff.target, and -diff.buildEnvironment parameters to specify schema sources and utilize a shadow database for the diff environment.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Generate.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n> flyway diff generate -diff.source=schemaModel -diff.target=migrations -diff.buildEnvironment=shadow\n```\n\n----------------------------------------\n\nTITLE: Executing Flyway Migrations on Dropwizard Startup (Java)\nDESCRIPTION: Demonstrates how to initialize and run Flyway database migrations programmatically within the `run` method of a Dropwizard `Application` subclass. It retrieves database configuration details from the application's configuration object, configures a `Flyway` instance with the data source, and calls the `migrate()` method to apply pending schema changes during application startup. Requires the `flyway-core` dependency.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Community Plugins and Integrations/Community Plugins and Integrations (Dropwizard).md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class MyApplication extends Application<MyConfiguration> {\n    ...\n\n    @Override\n    public void run(MyConfiguration configuration, Environment environment) {\n        DataSourceFactory dataSourceFactory = configuration.getDataSourceFactory();\n        Flyway flyway = new Flyway();\n        flyway.setDataSource(dataSourceFactory.getUrl(), dataSourceFactory.getUser(), dataSourceFactory.getPassword());\n        flyway.migrate();\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Flyway Edition using Info Command (Console)\nDESCRIPTION: This console command is used to display the current Flyway edition, database connection details, schema history status, and pending migrations. It serves as a way to confirm that the authorization was successful and the desired edition is active.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Auth.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n> flyway info\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway Dependency in Maven (pom.xml)\nDESCRIPTION: This XML snippet shows how to declare the `flyway-core` dependency in a Maven `pom.xml` file to integrate Flyway with a Spring Boot project. Spring Boot will automatically detect and configure Flyway using this dependency. The version `{{ site.flywayVersion }}` is likely a placeholder managed by the documentation site.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Community Plugins and Integrations/Community Plugins and Integrations (Spring Boot).md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-core</artifactId>\n    <version>{{ site.flywayVersion }}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Environments in TOML\nDESCRIPTION: Example of how to configure multiple database environments in a TOML configuration file. Each environment specifies different connection parameters and can override Flyway settings.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[environments.example]\nurl = \"jdbc:sqlite:local_database1.db\"\nusername = \"bob\"\n...\n[environments.another_example]\nurl = \"jdbc:sqlite:local_database2.db\"\nusername = \"jeff\"\n...\n[environments.another_example]\nlocations = [\"defaultLocation\",\"customLocation\"]\n```\n\n----------------------------------------\n\nTITLE: Executing Flyway Migrations (CLI - Console)\nDESCRIPTION: Applies any pending migrations to the database. In this step, it processes and applies the newly added repeatable migration 'R__People_view.sql'.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Repeatable Migrations.md#_snippet_3\n\nLANGUAGE: Console\nCODE:\n```\nflyway migrate\n```\n\n----------------------------------------\n\nTITLE: Basic Flyway Command-Line Usage Syntax\nDESCRIPTION: Shows the general syntax for executing Flyway commands from the command line. It indicates that optional configuration parameters (`[options]`) should precede the specific Flyway command (e.g., `migrate`, `info`, `validate`) to be executed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Command-line.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n> flyway [options] command\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment-specific SQL Files\nDESCRIPTION: This explanation covers how to organize environment-specific database scripts using the 'flyway.locations' property. It emphasizes maintaining common scripts and environment-specific variations for Derby and Oracle databases, facilitating consistent migrations across testing and production environments.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Frequently Asked Questions.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Configuring connectRetriesInterval in Gradle Build Script\nDESCRIPTION: This snippet illustrates setting the connectRetriesInterval to 60 within a Gradle build script for the Flyway plugin. It enables configuration of migration settings directly in build automation scripts.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Connect Retries Interval Setting.md#_snippet_6\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    connectRetriesInterval = 60\n}\n```\n\n----------------------------------------\n\nTITLE: Undoing Flyway Migrations via Maven (Bash)\nDESCRIPTION: This snippet shows how to invoke the Flyway Undo command through Maven using the 'mvn flyway:undo' goal. It requires Maven project integration with Flyway plugin configured. The command undoes the most recent versioned database migration and updates the 'flyway.current' Maven property with the new schema version number post-undo.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Undo.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn flyway:undo\n```\n\n----------------------------------------\n\nTITLE: Generating Next Migration Name (flyway-dev) - Shell\nDESCRIPTION: This command generates the next migration name using the flyway-dev command. Requires a project path and specifies a description for data updates. Requires Flyway CLI version 11.0.0 or later and a Teams/Enterprise license.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Migrating from flyway-dev to flyway CLI.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nflyway-dev next-migration-name -p=C:\\Users\\redgate\\Documents\\TestFdCmdLine -d=\\\"DataUpdates\\\" --i-agree-to-the-eula\n```\n\n----------------------------------------\n\nTITLE: Configuring artifactFilename: Flyway TOML Config - TOML\nDESCRIPTION: This TOML snippet shows how to configure the `artifactFilename` setting within the `[flyway.prepare]` section of a Flyway configuration file. This sets the default location for the diff artifact when using this configuration file, providing a persistent setting. Required: A valid Flyway configuration file in TOML format.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Prepare Namespace/Flyway Prepare Artifact Filename Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.prepare]\nartifactFilename = \"artifact.diff\"\n```\n\n----------------------------------------\n\nTITLE: Generating Script from Diff Artifact using Flyway Prepare (Shell)\nDESCRIPTION: Generates a SQL deployment script (`D__deployment.sql`) from a diff artifact file located at `myArtifactPath`. The `-changes=\"-\"` parameter indicates using all changes from the artifact. The artifact must be previously generated using `flyway diff`. This allows deploying changes identified in a prior comparison.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Prepare.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nflyway prepare -artifactFilename=\"myArtifactPath\" -changes=\"-\" -scriptFilename=\"D__deployment.sql\"\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Flyway CLI on Linux\nDESCRIPTION: Downloads the Flyway command-line archive for Linux using wget, extracts it using tar, and creates a symbolic link in /usr/local/bin to make the 'flyway' command globally accessible. Requires sudo permissions for the symbolic link creation and assumes `wget` and `tar` are installed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Command-line.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ wget -qO- {{site.enterpriseUrl}}/flyway-commandline/{{site.flywayVersion}}/flyway-commandline-{{site.flywayVersion}}-linux-x64.tar.gz | tar -xvz && sudo ln -s `pwd`/flyway-{{site.flywayVersion}}/flyway /usr/local/bin \n```\n\n----------------------------------------\n\nTITLE: Comparing Snapshot vs. Empty Source - Flyway Diff\nDESCRIPTION: This example shows comparing a database snapshot against an empty source using the `flyway diff` command. The snapshot is a JSON file generated by the `snapshot` command.  The `-source`, `-target`, `-artifactFilename`, and `-outputType=json` parameters are used to specify the source, target, output file, and output format.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Diff.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n&gt; flyway diff -source=snapshot:./snapshot/snapshot.json -target=empty -artifactFilename=.\\diffArtifacts\\artifact -outputType=json\n\nFlyway {{ site.flywayVersion }} by Redgate\ndiff artifact generated: C:\\Users\\Projects\\diffArtifacts\\artifact\n{\n  \"differences\" : [ {\n    \"id\" : \"0Vq7ldnZ06ES23tylJKD2KHrM5M\",\n    \"differenceType\" : \"Add\",\n    \"objectType\" : \"Table\",\n    \"from\" : {\n      \"schema\" : \"dbo\",\n      \"name\" : \"Table_1\",\n      \"definition\" : null\n    },\n    \"to\" : null\n  }, {\n    \"id\" : \"fvGooqeU94wq6HTCoAUlwvkd_bc\",\n    \"differenceType\" : \"Add\",\n    \"objectType\" : \"Table\",\n    \"from\" : {\n      \"schema\" : \"dbo\",\n      \"name\" : \"Table_2\",\n      \"definition\" : null\n    },\n    \"to\" : null\n  } ],\n  \"sourcePreparationInfo\" : null,\n  \"targetPreparationInfo\" : null\n}\n```\n\n----------------------------------------\n\nTITLE: Flyway: Retrieving Database Info (CLI)\nDESCRIPTION: This snippet demonstrates the use of the Flyway command-line interface (CLI) to retrieve database information.  It requires the Flyway CLI to be installed and configured to connect to a database. The `info` command displays the status of migrations, including their version, description, type, and execution state.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Callbacks.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflyway-{{ site.flywayVersion }}> flyway <strong>info</strong>\n```\n\n----------------------------------------\n\nTITLE: Generating and Applying Schema Diff with Flyway CLI - Bash\nDESCRIPTION: This Bash/console command runs Flyway with 'diff' and 'model' chained to compare a database environment ('dev') and a schema model, then applies the discovered differences to the schema model. Requires Flyway to be installed and configured, and the 'dev' environment and 'schemaModel' to be valid diff sources. Outputs any schema changes directly into the schema model. Command-line parameters like '-diff.source' and '-diff.target' must be supplied.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Model.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflyway diff model -diff.source=dev -diff.target=schemaModel\n```\n\n----------------------------------------\n\nTITLE: Defining Script Configuration Structure (Properties)\nDESCRIPTION: This snippet illustrates the basic structure of a script configuration file used in Flyway. It shows how settings are defined as key-value pairs, enabling per-script customization of migration behavior. These configurations are applied at the level of the migration rather than globally.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Script Configuration.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n# Settings are simple key-value pairs\nkey=value\n```\n\n----------------------------------------\n\nTITLE: Debugging Flyway Configuration Evaluation using -X\nDESCRIPTION: This snippet demonstrates how to enable extended debugging to trace Flyway configuration loading. The `-X` (capital X) option, when added to the command-line arguments, provides detailed information about the configuration evaluation process.  It allows users to determine the source of each configuration setting.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration Precedence.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./flyway info -X\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Schemas in Flyway\nDESCRIPTION: This snippet describes strategies for handling multiple schemas with Flyway, including managing identical schemas across tenants, same life-cycle schemas, and autonomous schemas using different Flyway instances. It details configuration options like 'flyway.schemas', 'locations', and 'table' to coordinate schema migrations effectively.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Frequently Asked Questions.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Configuring Dependent Resolvers - Flyway TOML\nDESCRIPTION: This example shows how to configure multiple resolvers where one resolver's output is used as input for another. It specifically demonstrates configuring a Dapr resolver first, then configuring a Vault resolver using a token retrieved via `${dapr.vault-token}`, highlighting the order dependency.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[environments.development.resolvers.dapr]\nurl = \"daprUrl\"\n\n[environments.development.resolvers.vault]\nurl = \"http://localhost:8200/v1\"\ntoken = \"${dapr.vault-token}\"\nengineName = \"secret\"\nengineVersion = \"v2\"\n```\n\n----------------------------------------\n\nTITLE: Using Full Namespacing for Command-Line Parameters in PowerShell\nDESCRIPTION: Illustrates configuring a Flyway extension parameter (`init.databaseType`) using its full namespace (`init.databaseType`) directly on the command line in PowerShell. This method explicitly defines the parameter's scope, associating it with the 'init' command.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Command-line.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nflyway init -init.databaseType=sqlserver \n```\n\n----------------------------------------\n\nTITLE: Defining Flyway Placeholders in Properties Configuration File\nDESCRIPTION: Illustrates specifying placeholders in a Java properties configuration file by using the prefix 'flyway.placeholders.' followed by the placeholder key and its value. This approach is compatible with standard Java properties files and is suitable for environments where properties files are the primary configuration format. Each placeholder key-value pair is expected to be replaced in migration scripts at runtime.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholders Namespace.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.placeholders.key1=value1\nflyway.placeholders.key2=value2\n```\n\n----------------------------------------\n\nTITLE: Generating Script from Schema Model using Flyway Prepare (Shell)\nDESCRIPTION: Generates a SQL deployment script (`D__deployment.sql`) by comparing a defined schema model against the 'production' target environment. This script contains the necessary SQL to update the target database to match the schema model. Requires proper configuration of `schemaModelSchemas` if schemas differ.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Prepare.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflyway prepare -source=schemaModel -target=production -scriptFilename=\"D__deployment.sql\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Debug Output with grep (bash, macOS)\nDESCRIPTION: This snippet demonstrates how to filter debug output from Flyway using `grep` in bash or macOS terminal. The `-X` flag enables debug output, and `grep -v` is used to exclude lines containing a specific term.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Command-line.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nflyway migrate -X | grep -v 'term-to-filter-out'\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Password in TOML Configuration File - toml\nDESCRIPTION: This snippet illustrates how to set the database password within the `[environments.default]` section of a Flyway configuration file written in TOML format. This is a structured way to manage configuration for different environments.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Password Setting.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[environments.default]\npassword = \"mysecretpassword\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Flyway Clean via Maven Build Tool - bash\nDESCRIPTION: Shows the Maven command to execute the Flyway 'clean' lifecycle phase, which cleans the database schemas configured for Flyway migrations. This requires Maven with the Flyway plugin configured in the project’s POM. The default phase for this command is pre-integration-test, enabling integration in CI pipelines.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Clean.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn flyway:clean\n```\n\n----------------------------------------\n\nTITLE: Setting Schemas via Flyway Maven Plugin - XML\nDESCRIPTION: Defines schema configuration for migrations using the Flyway Maven plugin. The configuration element contains a schemas list, each specified as a <schema> child. Requires the Flyway Maven plugin as a dependency. Best for projects that standardize on Maven for build and deployment.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Schemas Setting.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <schemas>\n        <schema>schema1</schema>\n        <schema>schema2</schema>\n    </schemas>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Validate via Command Line - Bash\nDESCRIPTION: Executes the Flyway validate command directly from the command line.  This assumes Flyway is installed and configured in the system's PATH.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Validate.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflyway validate\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Secret Management via Flyway Command-line (Bash)\nDESCRIPTION: This snippet demonstrates how to configure Flyway to use Vault secrets through the command-line interface. It specifies environment parameters including database connection details and Vault resolver settings such as API URL, token, engine name, and version. The password is dynamically retrieved from Vault using the ${vault.path} syntax. Dependencies include a running Vault server with proper secrets and valid token. The expected input is environment variables and CLI arguments; output is Flyway info command execution with secrets resolved from Vault.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Vault Resolver.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway info \\\n-environment='development' \\\n-environments.development.url=\"jdbc:postgresql://localhost/postgres\" \\\n-environments.development.user=\"postgres\" \\\n-environments.development.password=\"${vault.flyway/password}\" \\\n-environments.development.resolvers.vault.url=\"http://localhost:8200/v1\" \\\n-environments.development.resolvers.vault.token=\"abc.1234567890\" \\\n-environments.development.resolvers.vault.engineName=\"secret\" \\\n-environments.development.resolvers.vault.engineVersion=\"v2\"\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway JDBC URL via Command-line (Named Environment)\nDESCRIPTION: Shows how to set the JDBC URL for a specific named environment (e.g., 'sample') using command-line arguments. This syntax is typically used when working with TOML configuration files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment URL Setting.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway -environments.sample.url=jdbc:h2:mem:flyway_db info\n```\n\n----------------------------------------\n\nTITLE: Flyway Deploy Command JSON Output Format - JSON\nDESCRIPTION: Presents the typical JSON output structure returned after executing the Flyway 'deploy' command. Essential properties include 'scriptExecuted' (the absolute path to the script that was deployed), 'deploymentResults' (an array with per-task or per-script results), and 'database' (the target environment). Assumes successful deployment; outputs will vary depending on actual command execution. This structure aids in integration with CI/CD pipelines or reporting tools.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Deploy.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scriptExecuted\": \"C:\\\\workingDirectory\\\\D__deployment.sql\",\n  \"deploymentResults\": [],\n  \"database\": \"production\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Flyway 'check' command with -drift flag in Bash\nDESCRIPTION: This snippet shows how to execute the 'check' command with the '-drift' flag to detect differences between the target database schema and the applied migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Using Flyway Check with SQL Server.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./flyway check -drift\n```\n\n----------------------------------------\n\nTITLE: Setting Default Schema via Environment Variable\nDESCRIPTION: Explains how to set the default schema by defining the `FLYWAY_DEFAULT_SCHEMA` environment variable with the desired schema name (`schema2`). Flyway automatically picks up this variable. The example uses Properties syntax for clarity.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Default Schema Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_DEFAULT_SCHEMA=schema2\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway JDBC Driver Using Environment Variable\nDESCRIPTION: Explains how to configure the JDBC driver class for Flyway via an environment variable named 'FLYWAY_DRIVER'. This approach is useful in containerized or cloud environments where environment variables are preferred for configuration, ensuring that the specified driver class is available on the classpath.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Driver Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_DRIVER=com.microsoft.sqlserver.jdbc.SQLServerDriver\n```\n\n----------------------------------------\n\nTITLE: Setting changesSource in Flyway Command-line (PowerShell)\nDESCRIPTION: Example of how to set the changesSource option to 'migrations' when using Flyway's check command via PowerShell command-line. This specifies that change reports should be generated from migration files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Changes Source Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway check -changes -url=\"jdbc://url\" -check.changesSource=\"migrations\"\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Password for Named Environment via Command-line - powershell\nDESCRIPTION: This snippet shows how to configure the database password for a specific named environment (e.g., 'sample') using the command-line flag `-environments.{environment name}.password`. This is applicable when using a TOML configuration file with defined environments.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Password Setting.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -environments.sample.password=mysecretpassword info\n```\n\n----------------------------------------\n\nTITLE: Example Flyway-Compatible SQL Scripts for HSQLDB\nDESCRIPTION: This SQL snippet demonstrates typical Flyway migration script syntax that is compatible with HSQLDB. It includes examples of single-line and multi-line comments, table creation with a primary key constraint, placeholder usage for dynamic table names, and a trigger definition using HSQLDB's `BEGIN ATOMIC ... END;` block. The trigger enforces a uniqueness constraint by raising an error if a duplicate name is inserted. This snippet illustrates proper SQL structure for migrations run through Flyway with HSQLDB, emphasizing syntax rules and features supported by the database.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/HSQLDB.md#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n/* Single line comment */\nCREATE TABLE test_data (\n  value VARCHAR(25) NOT NULL PRIMARY KEY\n);\n\n/*\nMulti-line\ncomment\n*/\n\n-- Sql-style comment\n\n-- Placeholder\nINSERT INTO ${tableName} (name) VALUES ('Mr. T');\n\nCREATE TRIGGER uniqueidx_trigger BEFORE INSERT ON usertable\n\tREFERENCING NEW ROW AS newrow\n    FOR EACH ROW WHEN (newrow.name is not null)\n\tBEGIN ATOMIC\n      IF EXISTS (SELECT * FROM usertable WHERE usertable.name = newrow.name) THEN\n        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'duplicate name';\n      END IF;\n    END;\n```\n\n----------------------------------------\n\nTITLE: Setting Mixed Mode via Environment Variable in Flyway\nDESCRIPTION: Example of enabling the Flyway mixed mode parameter using an environment variable. This configuration allows migrations to contain both transactional and non-transactional statements.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Mixed Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_MIXED=true\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Token via Environment Variable - Properties (Environment)\nDESCRIPTION: Demonstrates setting the Vault token as an environment variable using the 'FLYWAY_VAULT_TOKEN' key. On systems that support properties-style variable declaration, assign the Vault token as the value. Flyway will read this at process startup. No file modification is needed, but the environment must export the variable.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Vault Namespace/Flyway Vault Token Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_VAULT_TOKEN=s.abcdefghijklmnopqrstuvwx\n```\n\n----------------------------------------\n\nTITLE: Running Flyway Commands with Vault Token - Flyway Command-Line (PowerShell)\nDESCRIPTION: Demonstrates how to supply the Vault token when running Flyway via the command-line using PowerShell syntax. The token is provided as an inline parameter with the -vault.token flag. Requires Flyway CLI and a valid Vault token. The info command will execute using the given token for secret access.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Vault Namespace/Flyway Vault Token Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -vault.token=\"s.abcdefghijklmnopqrstuvwx\" info\n```\n\n----------------------------------------\n\nTITLE: Pulling the Flyway Docker Image\nDESCRIPTION: Downloads the official Redgate Flyway Docker image for a specific version (indicated by {{site.flywayVersion}}) from Docker Hub. This makes the Flyway container image available locally for execution using the `docker run` command.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Command-line.md#_snippet_2\n\nLANGUAGE: Docker\nCODE:\n```\n> docker pull redgate/flyway:{{site.flywayVersion}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway JDBC Driver in TOML Configuration File\nDESCRIPTION: Shows how to define the JDBC driver class for a Flyway environment using the TOML configuration format. The 'driver' key is set under a specific environment section (e.g., 'default'), allowing Flyway to load the appropriate driver when running migrations. This requires Flyway to read configurations from a TOML file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Driver Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.default]\ndriver = \"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\n```\n\n----------------------------------------\n\nTITLE: Configuring baselineVersion in Flyway using TOML Configuration File\nDESCRIPTION: This snippet sets the flyway.baselineVersion to '0.0' using TOML syntax, suitable for Flyway configuration files in TOML format. Requires Flyway to be set up to read from a .toml config file. Users should place this in the correct section of their Flyway config, replacing '0.0' as needed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Baseline Version Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nbaselineVersion = \"0.0\"\n```\n\n----------------------------------------\n\nTITLE: Setting baselineVersion in Properties Configuration File for Flyway\nDESCRIPTION: This line configures the baselineVersion by adding the parameter to a Java properties file, commonly used for Flyway configuration. Requires a properly formatted properties file read by Flyway. Users should insert or modify this key-value pair as needed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Baseline Version Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.baselineVersion=0.0\n```\n\n----------------------------------------\n\nTITLE: Enabling baselineOnMigrate in Flyway Maven Plugin Configuration (XML)\nDESCRIPTION: Sets the 'baselineOnMigrate' configuration in a Maven project via the Flyway plugin's <configuration> section in the pom.xml file. Requires the Flyway Maven plugin as a build dependency. Accepts 'true' or 'false' strings and is evaluated during build or migration execution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Baseline On Migrate Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <baselineOnMigrate>true</baselineOnMigrate>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Example SQL Migration Script for SQLite in Flyway - SQL\nDESCRIPTION: An example Flyway migration script for SQLite demonstrating common SQL syntax including table creation, comments, placeholder usage, and trigger definition. This script shows Flyway-compatible SQL statements such as CREATE TABLE with a PRIMARY KEY, both single-line and multi-line comments, the use of SQL-style comments, placeholder substitution with ${tableName}, and a trigger using BEGIN...END blocks. It requires Flyway's placeholder replacement capability and respects SQLite's SQL dialect and limitations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/SQLite.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n/* Single line comment */\nCREATE TABLE test_data (\n  value VARCHAR(25) NOT NULL PRIMARY KEY\n);\n\n/*\nMulti-line\ncomment\n*/\n\n-- Sql-style comment\n\n-- Placeholder\nINSERT INTO ${tableName} (name) VALUES ('Mr. T');\n\nCREATE TRIGGER update_customer_address UPDATE OF address ON customers\n  BEGIN\n    UPDATE orders SET address = new.address WHERE customer_name = old.name;\n  END;\n```\n\n----------------------------------------\n\nTITLE: Deploying Arbitrary SQL Script Using Flyway CLI - Shell\nDESCRIPTION: Demonstrates how to use the Flyway CLI 'deploy' command to execute a specified SQL script on a production environment. Requires Flyway to be installed and accessible in the command-line environment. The '-scriptFilename' parameter points to the SQL deployment script, while '-environment' sets the target database environment. Input is the name of the script and the environment; output is execution of the script against the specified database context.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Deploy.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflyway deploy -scriptFilename=\"D__deployment.sql\" -environment=production\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Active Directory Interactive Authentication Resolver in TOML for Flyway\nDESCRIPTION: This TOML configuration snippet demonstrates how to set up the Azure Active Directory Interactive Resolver in Flyway for a development environment. It includes the JDBC URL to the Azure SQL database, setting the accessToken property to use the cached token from the resolver, and specifying the required tenantId and clientId settings for Azure authentication. This enables Flyway to reuse authentication tokens and avoid multiple login prompts during database operations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Azure Active Directory Interactive Resolver.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development]  \nurl = \"jdbc:sqlserver://mfa-testing.database.windows.net:1433;databaseName=MyDatabase\"  \n  \n[environments.development.jdbcProperties]  \naccessToken = \"${azureAdInteractive.token}\"  \n  \n[environments.development.resolvers.azureAdInteractive]  \ntenantId = \"{some GUID}\"  \nclientId = \"{some other GUID}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Resolvers in Properties Configuration File\nDESCRIPTION: Example of setting custom migration resolvers in a properties configuration file using the flyway.resolvers property.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Migration Resolvers Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nflyway.resolvers=my.resolver.MigrationResolver\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Resolvers in TOML Configuration File\nDESCRIPTION: Example of setting custom migration resolvers in a TOML configuration file. This defines an array of custom resolver class names under the flyway section.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Migration Resolvers Setting.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nmigrationResolvers = [\"my.resolver.MigrationResolver\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Email and Token for Flyway via Environment Variables - Properties\nDESCRIPTION: This snippet demonstrates how to provide authentication credentials to Flyway using environment variables. The environment variable names 'FLYWAY_EMAIL' and 'FLYWAY_TOKEN' store the user's email and authentication token, respectively. Used in OS environments or CI/CD pipelines, these variables are automatically picked up by Flyway during execution. Inputs are the email and token strings. Ensure variables are secured and not exposed in logs.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Email Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_EMAIL=foo.bar@red-gate.com\nFLYWAY_TOKEN=1234ABCD\n```\n\n----------------------------------------\n\nTITLE: Generating Script with Specific Change IDs (Flyway CLI, Bash)\nDESCRIPTION: This command-line snippet demonstrates how to generate a Flyway script by specifying specific change IDs using the `-changes` argument. The argument accepts a comma-separated list of change IDs. The generated script will only include the changes associated with the specified IDs. Requires Flyway CLI to be installed and accessible through the command line.  The output is a Flyway script.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Changes Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway generate -changes=123,456\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Placeholders Through Environment Variables\nDESCRIPTION: Describes how to configure Flyway placeholders using environment variables by prefixing variable names with 'FLYWAY_PLACEHOLDERS_' and suffixing with the placeholder key in uppercase. This method allows integration with deployment automation and containerized environments where environment variables are preferred. Inputs are environment variables set externally, and Flyway replaces matching placeholders during migration execution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholders Namespace.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_PLACEHOLDERS_KEY1=value1\nFLYWAY_PLACEHOLDERS_KEY2=value2\n```\n\n----------------------------------------\n\nTITLE: Adding Snowflake Dependency (Gradle, Redgate)\nDESCRIPTION: This Groovy snippet demonstrates how to add the Flyway Snowflake database support as an implementation dependency within a Gradle build file for a Redgate Flyway project. This makes the necessary Snowflake driver and support available to the Flyway tasks.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Snowflake.md#_snippet_2\n\nLANGUAGE: Groovy\nCODE:\n```\ndependencies {\n    implementation \"com.redgate.flyway:flyway-database-snowflake\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Baseline Migration Script at Specified Path Using Flyway Generate Console Command\nDESCRIPTION: Example of generating a baseline migration script with a user-defined filename and location. The migrations directory is initially empty, and the generate command includes the -types=baseline and -baselineFilename parameters. The console output confirms generation, showing the final baseline migration script file created.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Generate.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n> flyway generate -types=baseline -baselineFilename=C:\\\\Users\\\\FlywayUser\\\\Project\\\\migrations\\\\B000__initial_state.sql\n\nFlyway {{ site.flywayVersion }} by Redgate\n\nDatabase: jdbc:mysql://clone-internal.red-gate.com:32781/mysql (MySQL 8.0)\nGenerating baseline migration: C:\\\\Users\\\\FlywayUser\\\\Project\\\\migrations\\\\B000__initial_state.sql\nGenerated: C:\\\\Users\\\\FlywayUser\\\\Project\\\\migrations\\\\B000__initial_state.sql\n```\n\n----------------------------------------\n\nTITLE: Configuring baselineVersion via Command-Line Interface in PowerShell\nDESCRIPTION: This command sets the baselineVersion parameter to '0.0' when executing the Flyway baseline command through PowerShell. Requires Flyway CLI installed and available in the terminal. Expects users to substitute their own desired baseline version as needed. The output will tag the schema with the specified version.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Baseline Version Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -baselineVersion=\"0.0\" baseline\n```\n\n----------------------------------------\n\nTITLE: JSON Output Format for Generated Migration Scripts\nDESCRIPTION: Example illustrating the JSON output format produced by the generate command when outputType is json. It shows the structure including script types, locations, optional script configuration paths, included dependencies, and warning messages description. This output can be parsed programmatically for integration or audit purposes.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Generate.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": [\n    {\n      \"type\": \"versioned\",\n      \"location\": \"C:\\\\flywayProejct\\\\migrations\\\\V001__AddTable.sql\",\n      \"scriptConfigPath\": \"C:\\\\flywayProejct\\\\migrations\\\\V001__AddTable.sql.conf\",\n      \"includedDependencies\": [\n        \"dbo.someDependency\"\n      ],\n      \"warnings\": [\n        {\n          \"type\": \"WARNING_TYPE\",\n          \"message\": \"Warning message\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Framework bean configuration for Flyway integration\nDESCRIPTION: Provides XML configuration for setting up Flyway within a Spring application. It uses ClassicConfiguration to set the data source, then initializes the Flyway bean with a migration method, ensuring migrations run before other components like Hibernate initialize.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/API (Java).md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"flywayConfig\" class=\"org.flywaydb.core.api.configuration.ClassicConfiguration\">\n    <property name=\"dataSource\" ref=\"...\"/>\n    ...\n</bean>\n\n<bean id=\"flyway\" class=\"org.flywaydb.core.Flyway\" init-method=\"migrate\">\n    <constructor-arg ref=\"flywayConfig\"/>\n</bean>\n\n<!-- The rest of the application (incl. Hibernate) -->\n<!-- Must be run after Flyway to ensure the database is compatible with the code -->\n<bean id=\"sessionFactory\" class=\"...\" depends-on=\"flyway\">\n    ...\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Configuring baselineOnMigrate in Flyway Properties File (Properties)\nDESCRIPTION: Specifies the 'baselineOnMigrate' option in a Java-style properties file with the 'flyway.' namespace prefix. Requires the configuration file to be loaded by Flyway during initialization. Supports boolean values ('true' or 'false') to toggle the feature's activation.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Baseline On Migrate Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.baselineOnMigrate=true\n```\n\n----------------------------------------\n\nTITLE: Setting failOnMissingLocations via PowerShell\nDESCRIPTION: This snippet demonstrates how to set the `failOnMissingLocations` property to `true` using the Flyway command-line interface with PowerShell. This configuration will cause Flyway to fail if any specified migration location does not exist during a migration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Fail On Missing Locations Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n. flyway -failOnMissingLocations=\"true\" migrate\n```\n\n----------------------------------------\n\nTITLE: Validate via Gradle - Bash\nDESCRIPTION: Executes the Flyway validate task within a Gradle project.  This requires Flyway's Gradle plugin to be configured in the build.gradle file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Validate.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngradle flywayValidate\n```\n\n----------------------------------------\n\nTITLE: Specifying Working Directory for File-Based JDBC URLs\nDESCRIPTION: Configures the Flyway URL for a file-based database (like H2) using `System.getProperty('user.dir')`. This ensures that relative paths in the JDBC URL are resolved relative to the project's working directory instead of the default Gradle working directory.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Gradle Task.md#_snippet_7\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    url = \"jdbc:h2:file:${System.getProperty('user.dir')}/<database>\"\n    user = <user>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Password in Maven Configuration - xml\nDESCRIPTION: This snippet shows how to configure the database password within the `<configuration>` block of the Flyway plugin in a Maven `pom.xml` file. The `<password>` element is used for this purpose.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Password Setting.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <password>mysecretpassword</password>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Disabling createSchemas in TOML Configuration File\nDESCRIPTION: This snippet demonstrates how to set the `createSchemas` property to `false` within a Flyway TOML configuration file. It's placed under the `[flyway]` section.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Create Schemas Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\ncreateSchemas = false\n```\n\n----------------------------------------\n\nTITLE: Generating Versioned and Undo Migration Scripts with Flyway CLI (Shell)\nDESCRIPTION: This Flyway compound command generates both versioned and undo migration scripts by diffing the schema model against the migrations folder, targeting the shadow environment. It uses the 'generate' action to create migration files that represent schema changes, facilitating controlled deployment and reversibility. Prerequisites: Flyway Enterprise Edition, up-to-date schema model, migrations, and shadow environment. Parameters specify script types and descriptions. Outputs: new versioned and undo SQL migration scripts.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Flyway Desktop migrations workflow with Flyway CLI.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ flyway diff generate \"-diff.source=schemaModel\" \"-diff.target=migrations\" \"-diff.buildEnvironment=shadow\" \"-generate.types=versioned,undo\" \"-generate.description=NewTableAdded\"\n\nFlyway Enterprise Edition {{ site.flywayVersion }} by Redgate\nLicensed to red-gate.com (license ID 1174ed6b-b10e-41bd-9a1b-285ddc3239c7)\n\nSee release notes here: https://rd.gt/416ObMi\nSuccessfully applied 1 migration to schema [dbo], now at version v001.20241209164727 (execution time 00:02.820s)\ndiff artifact generated: C:\\Users\\Flyway\\AppData\\Local\\Temp\\flyway.artifact.diff\n+-----------------------------+--------+-------------+--------+----------+\n| Id                          | Change | Object Type | Schema | Name     |\n+-----------------------------+--------+-------------+--------+----------+\n| J7JsJA_jmgaSrCD.hAdkbUqxxQs | Add    | Table       | dbo    | NewTable |\n+-----------------------------+--------+-------------+--------+----------+\n\nUsing diff artifact: C:\\Users\\Flyway\\AppData\\Local\\Temp\\flyway.artifact.diff\nGenerating versioned migration: C:\\Users\\Flyway\\FlywayProjects\\SqlServerProject\\migrations\\V002_20241210110201__NewTableAdded.sql\nGenerating undo migration: C:\\Users\\Flyway\\FlywayProjects\\SqlServerProject\\migrations\\U002_20241210110201__NewTableAdded.sql\nGenerated: C:\\Users\\Flyway\\FlywayProjects\\SqlServerProject\\migrations\\U002_20241210110201__NewTableAdded.sql\nGenerated: C:\\Users\\Flyway\\FlywayProjects\\SqlServerProject\\migrations\\V002_20241210110201__NewTableAdded.sql\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreControlCharacters in TOML\nDESCRIPTION: This snippet shows how to configure the ignoreControlCharacters option within the [redgateCompare.oracle.data.options.comparison] section of a TOML configuration file. Setting it to true will ignore control character differences during Oracle data comparisons. The default value is false. This setting affects how data is compared when using Redgate Compare with Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Data Comparison Options Namespace/Oracle Data Ignore Control Characters Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.data.options.comparison]\nignoreControlCharacters = true\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway JDBC URL via Command-line (Basic)\nDESCRIPTION: Demonstrates how to configure the JDBC URL directly as a command-line argument when invoking the Flyway executable. This sets the URL for the default environment.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment URL Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway -url=jdbc:h2:mem:flyway_db info\n```\n\n----------------------------------------\n\nTITLE: Generating Drift Report Based on Applied Migrations in Bash\nDESCRIPTION: Commands to generate a drift report by capturing applied migrations and using them as a reference for comparison. This assumes migrations represent the full state of the database at last deployment.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Check/Check Drift.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflyway info -infoOfState=\"success,out_of_order\" -migrationIds > appliedMigrations.txt\nflyway check -drift -buildEnvironment=\"build\" -appliedMigrations=\"$(cat appliedMigrations.txt) -environment=\"production\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway with PATs in TOML File (example configuration)\nDESCRIPTION: This code snippet shows how to configure Flyway using a TOML file with 'email' and 'token' parameters that enable the software to authenticate with the Enterprise edition via PATs. It is essential for setting up non-interactive authorization in automation scripts or installations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Personal Access Tokens.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nemail = \"foo.bar@red-gate.com\"\ntoken = \"1234ABCD\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Schema in TOML File\nDESCRIPTION: Shows how to configure the `defaultSchema` within the `[flyway]` section of a TOML configuration file, setting it to `schema2`. Flyway reads this file to determine its settings.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Default Schema Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\ndefaultSchema = \"schema2\"\n```\n\n----------------------------------------\n\nTITLE: Installing Flyway Community Gradle Plugin\nDESCRIPTION: Adds the necessary Maven repositories and declares the Flyway Community Edition plugin dependency in the build script. This allows Gradle to download and apply the plugin for database migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Gradle Task.md#_snippet_0\n\nLANGUAGE: Groovy\nCODE:\n```\nrepositories {\n    mavenCentral()\n    maven {\n        url \"https://download.red-gate.com/maven/release\"\n    }\n}\nplugins {\n    id \"com.redgate.flyway\" version \"{{ site.flywayVersion }}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring failOnMissingLocations via Flyway API\nDESCRIPTION: This snippet shows how to configure `failOnMissingLocations` to `true` using the Flyway Java API. This configuration ensures that Flyway will fail if any configured locations do not exist during API usage.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Fail On Missing Locations Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .failOnMissingLocations(true)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Enabling `ignoreAuthorizationOnSchemaObjects` in TOML Configuration\nDESCRIPTION: This TOML configuration snippet demonstrates how to set the `ignoreAuthorizationOnSchemaObjects` option to `true`. This setting is placed within the `[redgateCompare.sqlserver.options.ignores]` table and instructs Flyway/Redgate Compare to disregard authorization clauses on schema-qualified objects when comparing SQL Server databases.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Authorization On Schema Objects Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreAuthorizationOnSchemaObjects = true\n```\n\n----------------------------------------\n\nTITLE: Setting OutOfOrder Flag via Flyway Command-line in PowerShell\nDESCRIPTION: This snippet demonstrates enabling the 'outOfOrder' migration flag using the Flyway command-line interface with PowerShell syntax. It shows the command-line execution to run Flyway info command with outOfOrder set to true. No additional dependencies are required beyond the Flyway CLI installation.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Out Of Order Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -outOfOrder=\"true\" info\n```\n\n----------------------------------------\n\nTITLE: Filtering Migrations by Tags Using anyOf Condition - PowerShell\nDESCRIPTION: This command-line example demonstrates how to invoke Flyway to filter migrations using the '-tags.anyOf' option, which ensures that only migrations with at least one of the specified tags are included. The script is intended for use in the PowerShell environment and requires Flyway to be installed and accessible in the system PATH. Parameters: comma-separated tag list as argument. Input: user-specified tag list; output: filtered Flyway migration info.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Tags Namespace/Flyway Tags Any Of Setting.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway \"-tags.anyOf=tagA,tagB,tagC\" info\n\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway User in Gradle Build Script\nDESCRIPTION: This Groovy snippet sets the 'user' property to 'myuser' inside the 'flyway' configuration block within a Gradle build script. This configures Flyway when run as part of the Gradle build lifecycle, specifying the database username to be used during migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment User Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    user = 'myuser'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway JDBC URL in Gradle\nDESCRIPTION: Illustrates how to set the `url` property within the `flyway` configuration block of a Gradle build script when using the Flyway Gradle plugin.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment URL Setting.md#_snippet_6\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    url = 'jdbc:h2:mem:flyway_db'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting check.buildEnvironment via Flyway Command-Line (PowerShell)\nDESCRIPTION: Demonstrates how to set the build database environment (`check.buildEnvironment`) for the `flyway check` command using a PowerShell command-line argument. This example specifies `build1` as the build environment and `env1` as the target environment for the check operation.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Build Environment Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway check -changes -environment=env1 -check.buildEnvironment=build1\n```\n\n----------------------------------------\n\nTITLE: Enabling OutOfOrder Migrations in Flyway Maven Plugin XML Configuration\nDESCRIPTION: This XML snippet configures the Flyway Maven plugin by setting the 'outOfOrder' flag to true within the plugin's <configuration> section. This directs Maven to run out-of-order migrations during build phases that invoke Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Out Of Order Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <outOfOrder>true</outOfOrder>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Maven Configuration for ignoreMigrationPatterns in Flyway\nDESCRIPTION: Provides an XML snippet to configure ignoreMigrationPatterns in Maven's Flyway plugin, specifying patterns within the plugin's configuration section for build management.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Ignore Migration Patterns Setting.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <ignoreMigrationPatterns>\n        <ignoreMigrationPattern>repeatable:missing</ignoreMigrationPattern>\n    </ignoreMigrationPatterns>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting target version with Flyway CLI (PowerShell)\nDESCRIPTION: Shows how to specify the `flyway.target` property as a command-line argument using the `-target` flag when executing a Flyway command like `migrate`. The desired version string is passed after the flag.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Target Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -target=\"2.0\" migrate\n```\n\n----------------------------------------\n\nTITLE: Activating OutOfOrder Migrations via Environment Variable\nDESCRIPTION: This snippet demonstrates setting an environment variable 'FLYWAY_OUT_OF_ORDER' to true, which Flyway recognizes to enable out-of-order migrations. It provides a way to configure the setting externally from configuration files and source code.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Out Of Order Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_OUT_OF_ORDER=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Major Rules - Properties\nDESCRIPTION: This snippet shows how to set `majorRules` within a configuration file using the properties format. The setting `flyway.check.majorRules=L001` is used. This is setting the code analysis rule \"L001\" to be considered a major violation. The input is the Flyway configuration file. The output is the configuration to consider \"L001\" a major rule.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Major Rules Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.check.majorRules=L001\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Script Types in TOML Configuration File\nDESCRIPTION: This example demonstrates how to configure multiple script types in a TOML configuration file. The configuration specifies that Flyway should generate both versioned and undo scripts.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Types Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.generate]\ntypes = [ \"versioned\", \"undo\" ]\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for Flyway Info Command\nDESCRIPTION: Provides an example structure of the JSON output generated by the Flyway 'info' command when JSON output is enabled. This output includes details like the current schema version, schema name, a list of migrations with their status (category, version, description, type, state, filepath, etc.), database name, Flyway version, and any warnings.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Info.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": null,\n  \"schemaName\": \"public\",\n  \"migrations\": [\n    {\n      \"category\": \"Versioned\",\n      \"version\": \"1\",\n      \"description\": \"first\",\n      \"type\": \"SQL\",\n      \"installedOnUTC\": \"\",\n      \"state\": \"Pending\",\n      \"undoable\": \"No\",\n      \"filepath\": \"C:\\\\flyway\\\\sql\\\\V1__first.sql\",\n      \"installedBy\": \"\",\n      \"executionTime\": 0\n    },\n    {\n      \"category\": \"Repeatable\",\n      \"version\": \"\",\n      \"description\": \"repeatable\",\n      \"type\": \"SQL\",\n      \"installedOnUTC\": \"\",\n      \"state\": \"Pending\",\n      \"undoable\": \"\",\n      \"filepath\": \"C:\\\\flyway\\\\sql\\\\R__repeatable.sql\",\n      \"installedBy\": \"\",\n      \"executionTime\": 0\n    }\n  ],\n  \"allSchemasEmpty\": false,\n  \"flywayVersion\": \"{{ site.flywayVersion }}\",\n  \"database\": \"testdb\",\n  \"warnings\": [],\n  \"operation\": \"info\"\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL SQL Migration Script Example\nDESCRIPTION: Example SQL migration script for PostgreSQL demonstrating table creation, multi and single-statement functions with PL/pgSQL, comments, and variable placeholders. This demonstrates the SQL syntax supported by Flyway for PostgreSQL migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/PostgreSQL Database.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n/* Single line comment */\nCREATE TABLE test_data (\n value VARCHAR(25) NOT NULL PRIMARY KEY\n);\n\n\n/*\nMulti-line\ncomment\n*/\n\n-- Multi-statement PostgreSQL function\nCREATE FUNCTION AddData() RETURNS INTEGER\nAS $$\n   BEGIN\n    INSERT INTO test_data (value) VALUES ('Hello');\n    RETURN 1;\n  END;\n$$ LANGUAGE plpgsql;\n\nSELECT *  INTO TEMP adddata_temp_table FROM AddData() ;\n\n-- Single-statement PostgreSQL function\nCREATE FUNCTION add(integer, integer) RETURNS integer\n   LANGUAGE sql IMMUTABLE STRICT\n   AS $_$select $1 + $2;$_$;\n\n-- Placeholder\nINSERT INTO ${tableName} (name) VALUES ('Mr. T');\n```\n\n----------------------------------------\n\nTITLE: Using `check.filterFile` via Flyway Command-Line (PowerShell)\nDESCRIPTION: Demonstrates how to execute the `flyway check` command with the `-changes` flag, specifying the database URL and passing a filter configuration file (`filter.rgf`) using the `-check.filterFile` parameter via the command line. This allows filtering the comparison results during the check operation.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Filter File Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway check -changes -url=\"jdbc://url1\" -check.filterFile=\"filter.rgf\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment-Specific Schemas via Command-Line - PowerShell\nDESCRIPTION: Shows how to set schemas for a named environment in Flyway when using TOML configuration by prefixing the configuration key. This is done from PowerShell and enables environment-specific schema lists. The command supports dynamic environment selection and expects Flyway CLI and environment configuration to be present.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Schemas Setting.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway \"-environments.sample.schemas=schema1,schema2\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Placeholders via Java API\nDESCRIPTION: Provides an example of programmatically setting placeholders using the Flyway Java API by creating a map of placeholder key-value pairs and passing it to the Flyway configuration. This method provides dynamic control over placeholders within Java applications integrating Flyway. It requires the Flyway Java library. The input is a map of placeholder names and values; after configuration, Flyway uses these placeholders during migration execution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholders Namespace.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> placeholders = new HashMap<>();\nplaceholders.put(\"key1\", \"value1\");\nplaceholders.put(\"key2\", \"value2\");\n\nFlyway.configure()\n    .placeholders(placeholders)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Diffing and Listing Database Changes with Flyway CLI (Bash)\nDESCRIPTION: This snippet demonstrates how to use the 'flyway diff' command to compare two schema sources (in this example, a development database and a schema model) and displays a table of detected changes, including object types, schema, and names. The command accepts '-diff.source' and '-diff.target' arguments to specify the endpoints for comparison. Outputs include a summary table with change IDs needed in subsequent operations. Requires Flyway CLI and appropriate permissions/connection configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Flyway Desktop migrations workflow with Flyway CLI.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ flyway diff \"-diff.source=development\" \"-diff.target=schemaModel\"\n\nFlyway Enterprise Edition {{ site.flywayVersion }} by Redgate\nLicensed to red-gate.com (license ID 1174ed6b-b10e-41bd-9a1b-285ddc3239c7)\n\nSee release notes here: https://rd.gt/416ObMi\ndiff artifact generated: C:\\Users\\Flyway\\AppData\\Local\\Temp\\flyway.artifact.diff\n+-----------------------------+--------+-------------+--------+------------+\n| Id                          | Change | Object Type | Schema | Name       |\n+-----------------------------+--------+-------------+--------+------------+\n| rlWm41EHCIp8krJRqZ.PTVIx2fs | Add    | Table       | dbo    | TestTable1 |\n| QvJIORGzbAAz3irDJbEKBcQr8QY | Add    | Table       | dbo    | TestTable2 |\n| n6OaP76s3hsLYT8jwdpnl5.WaJ8 | Add    | Table       | dbo    | TestTable3 |\n+-----------------------------+--------+-------------+--------+------------+\n```\n\n----------------------------------------\n\nTITLE: Flyway cherryPick Configuration (Properties)\nDESCRIPTION: This snippet shows how to set the `cherryPick` configuration option in a Flyway properties file. The value `2.0` indicates that only migration version `2.0` should be used during migration.  The properties file is used to configure Flyway's behavior.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Cherry Pick Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.cherryPick=2.0\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlMigrationSeparator in Toml Configuration File\nDESCRIPTION: Defines the sqlMigrationSeparator parameter within a TOML configuration file for Flyway, setting the separator to \"-\". This configuration influences how the tool interprets migration filenames. Must be placed in a flyway.toml file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Migration Separator Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway]\nsqlMigrationSeparator = \"-\"\n```\n\n----------------------------------------\n\nTITLE: Generating Change Report Using Specific Snapshots in Bash\nDESCRIPTION: This example compares two snapshots specified by file paths, allowing validation of database changes between these two points.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Check/Check Changes.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflyway check -changes -deployedSnapshot=\"C:\\snapshot1.json\" -nextSnapshot=\"C:\\snapshot2.json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Placeholder Suffix via Environment Variable (Properties)\nDESCRIPTION: Explains how to set the `flyway.placeholderSuffix` using an environment variable. Flyway reads environment variables prefixed with `FLYWAY_` to override configuration settings, providing flexibility in deployment environments.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Suffix Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_PLACEHOLDER_SUFFIX=$$\n```\n\n----------------------------------------\n\nTITLE: Generating Undo Migration Script for Existing Versioned Migration with Change Id Filters Using Console\nDESCRIPTION: Illustrates generating an undo migration script for an existing versioned migration by specifying the undo type and providing change Ids through a redirected input file. The example shows console output including warnings related to potential data loss during column drops and provides the JSON formatted output with location and messages. The generated undo script is added to the migrations directory alongside the original versioned script.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Generate.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n> flyway generate -types=undo -changes='-' -outputType=json < changes.txt\n\nFlyway {{ site.flywayVersion }} by Redgate\n\n{\n  \"output\" : [ {\n    \"location\" : \"C:\\\\Users\\\\FlywayUser\\\\Project\\\\migrations\\\\U002_20240828161524__New_Feature.sql\",\n    \"configPath\" : null,\n    \"includedDependencies\" : [ ],\n    \"messages\" : [ {\n      \"type\" : \"Warning\",\n      \"warningCode\" : null,\n      \"message\" : \"Line 9: [ColumnDrop] This deployment drops the column sakila.inventory.new_column. Any data in the column will be lost.\"\n    } ]\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Flyway Generate Command with Force Option\nDESCRIPTION: Shows how to use the `-force` option with the `flyway generate` command-line tool.  When set to `true`, this will overwrite existing migration scripts.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Force Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway generate -force=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Provisioner in TOML File\nDESCRIPTION: Example of configuring a development environment with a 'clone' provisioner in a TOML configuration file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Provisioner Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development]\nprovisioner = \"clone\"\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlMigrationSeparator in Maven Plugin\nDESCRIPTION: Specifies the sqlMigrationSeparator in a Maven project by placing it inside the plugin's configuration XML element, setting the value to \"-\". This influences how the Maven Flyway plugin interprets migration files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Migration Separator Setting.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    <sqlMigrationSeparator>-</sqlMigrationSeparator>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway SQL Server Dependency (Redgate) in Gradle\nDESCRIPTION: Gradle Groovy dependency declaration to include the Redgate version of the `flyway-sqlserver` artifact in a Java project using Gradle. This enables Flyway support for Azure Synapse.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Azure Synapse.md#_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    compile \"com.redgate.flyway:flyway-sqlserver\"\n}\n```\n\n----------------------------------------\n\nTITLE: Flyway cherryPick Configuration (Gradle)\nDESCRIPTION: This snippet shows how to configure the `cherryPick` option using Gradle.  It sets the `cherryPick` plugin configuration property to `2.0`, causing Flyway to only consider migration version `2.0`. The configuration is part of the `flyway` block in the `build.gradle` file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Cherry Pick Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    pluginConfiguration = [\n            cherryPick: '2.0'\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway generate.timestamp in TOML format\nDESCRIPTION: Shows how to configure the 'timestamp' option under the 'flyway.generate' section in a TOML configuration file for Flyway. This setting controls whether to always add, automatically add, or never add a timestamp to generated migration versions. It requires the TOML parser support in Flyway and that the config file is correctly loaded at runtime.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Timestamp Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.generate]\ntimestamp = \"auto\"\n```\n\n----------------------------------------\n\nTITLE: Running Flyway Clean with Gradle Build Tool - bash\nDESCRIPTION: Illustrates how to invoke the Flyway 'clean' task using Gradle. This requires the Flyway Gradle plugin to be applied and configured in the Gradle build script. This command removes all objects from Flyway-managed schemas as part of the Gradle build process.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Clean.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngradle flywayClean\n```\n\n----------------------------------------\n\nTITLE: Set executeInTransaction via Command Line\nDESCRIPTION: Sets the `executeInTransaction` parameter to `false` using the Flyway command-line interface. This will prevent Flyway from executing SQL statements within a transaction during the migration process. The command shown will execute the migrate command with the `executeInTransaction` parameter set to false.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Execute In Transaction Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -executeInTransaction=\"false\" migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Placeholder Replacement via Script Configuration File - Flyway - Properties\nDESCRIPTION: This snippet demonstrates configuring placeholderReplacement in a script configuration properties file. The format and usage mirrors standard properties files. Requires Flyway to load the configuration during script execution. Set to 'false' to disable placeholder replacement for the script.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Replacement Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nflyway.placeholderReplacement=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Compatibility Level Option in Flyway Using TOML\nDESCRIPTION: This TOML snippet sets the redgateCompare.sqlserver.options.behavior.useDatabaseCompatibilityLevel flag to true, instructing Flyway to use the database's compatibility level instead of the SQL Server version when performing operations such as schema comparisons. The configuration must be placed within the [redgateCompare.sqlserver.options.behavior] section of the TOML file. No other configuration method is supported for this property, and it is only recognized in SQL Server projects. The expected input is the boolean value (true or false), and the output affects the behavior of comparison and migration features in Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Behavior Options Namespace/SQL Server Use Database Compatibility Level Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.options.behavior]\nuseDatabaseCompatibilityLevel = true\n```\n\n----------------------------------------\n\nTITLE: Setting ignoreInsteadOfTriggers in TOML Configuration\nDESCRIPTION: Example TOML configuration demonstrating how to enable the 'ignoreInsteadOfTriggers' option within the '[redgateCompare.sqlserver.options.ignores]' section. Setting this to 'true' prevents Flyway's redgateCompare from considering INSTEAD OF DML triggers during database comparisons and deployments for SQL Server.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Instead Of Triggers Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreInsteadOfTriggers = true\n```\n\n----------------------------------------\n\nTITLE: Oracle JDBC URL Format\nDESCRIPTION: This snippet shows the standard JDBC URL formats for connecting to an Oracle database. It supports both service-based and TNS entry-based connections.  The URL is used by Flyway to establish a JDBC connection to the Oracle database. It's a crucial part of the configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Oracle Database/Oracle Database - Native Connectors.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`jdbc:oracle:thin:@//host:port/service` <br> `jdbc:oracle:thin:@tns_entry`\n```\n\n----------------------------------------\n\nTITLE: Configuring target version in Flyway Properties file\nDESCRIPTION: Shows how to set the `flyway.target` property in a standard Java-style `.properties` configuration file. This is a common method for configuring Flyway properties.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Target Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.target=2.0\n```\n\n----------------------------------------\n\nTITLE: Executing Flyway Info Command in Shell\nDESCRIPTION: Runs 'flyway info' via the Flyway CLI to display the current database migration state, listing all versioned and undo migrations along with their status, timestamps, and whether they are undoable. This command is fundamental to verify the migration history before and after applying or undoing migrations. It requires the Flyway CLI installed and database connectivity configured.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Undo Migrations.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nflyway info\n```\n\n----------------------------------------\n\nTITLE: Configuring Connect Retries via Environment Variable\nDESCRIPTION: This snippet sets the `connectRetries` parameter using an environment variable. The variable is `FLYWAY_CONNECT_RETRIES` and is set to 10. This configuration method overrides configuration settings from properties or configuration files.  This is useful for dynamically setting options in different environments.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Connect Retries Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_CONNECT_RETRIES=10\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Batch in Properties File\nDESCRIPTION: Sets the 'flyway.batch' property to true in a properties file to enable SQL statement batching during Flyway migrations, facilitating more efficient large-scale data operations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Batch Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.batch=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Placeholder Resolver in TOML\nDESCRIPTION: This snippet demonstrates how to define a custom placeholder in a Flyway TOML configuration file by setting a user-defined placeholder under [flyway.placeholders] and utilizing it within the environment-specific resolver configuration. It enables dynamic retrieval of placeholder values for backup file paths used during database operations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Placeholder Resolver.md#_snippet_0\n\nLANGUAGE: Toml\nCODE:\n```\n[flyway.placeholders]\nbackupFilePrefix = '\\\\FILE-SERVER\\SQLServer\\Backups'\n\n[environments.shadow.resolvers.backup]\nbackupFilePath = '${placeholder.backupFilePrefix}\\Backup.bak'\n```\n\n----------------------------------------\n\nTITLE: Executing Flyway diff and diffText Commands in Bash\nDESCRIPTION: Shows example usages of the Flyway diff and diffText commands in a bash shell environment. The first snippet demonstrates running diff between a source and target and then filtering diffText results by specific change IDs, while the second snippet chains the diff and diffText commands together. These examples illustrate how to invoke diffText optionally after generating schema differences with diff.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Diff Text.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflyway diff -source=dev -target=schemaModel\nflyway diffText -changes=\"id1,id2\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nflyway diff -source=dev -target=schemaModel diffText\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Stream Option in Maven\nDESCRIPTION: This XML snippet shows how to configure Flyway's `stream` option within a Maven POM file.  The `stream` tag is set to `true` inside the `configuration` block. Requires a Maven project with the Flyway plugin defined. The effect is that Flyway will stream SQL migrations, providing improved memory usage, particularly for extensive migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Stream Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <stream>true</stream>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Gradle configuration for validateMigrationNaming\nDESCRIPTION: Configures the validateMigrationNaming setting within a Gradle build script for Flyway. When set to true, it enforces filename validation during migration execution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Validate Migration Naming Setting.md#_snippet_4\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    validateMigrationNaming = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway outputQueryResults in PowerShell\nDESCRIPTION: This snippet demonstrates how to disable the display of query results in Flyway using the command-line interface via a PowerShell command, helpful during automated scripts or CI/CD pipelines.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Output Query Results Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -outputQueryResults=\"false\" info\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway Dependency in Dropwizard pom.xml (XML)\nDESCRIPTION: Adds the `flyway-core` Maven dependency to the project's `pom.xml`, making Flyway available. This is a prerequisite for programmatically using Flyway in the application code. It uses standard Maven dependency elements.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Community Plugins and Integrations/Community Plugins and Integrations (Dropwizard).md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-core</artifactId>\n    <version>{{ site.flywayVersion }}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway via Command-Line Parameters in PowerShell\nDESCRIPTION: Demonstrates how to configure Flyway by passing parameters directly on the command line using PowerShell. This example sets the database user (`-user`), target schemas (`-schemas`), and a custom placeholder (`-placeholders.keyABC`) before executing the 'migrate' command.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Command-line.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nflyway -user=myuser -schemas=schema1,schema2 -placeholders.keyABC=valueXYZ migrate\n```\n\n----------------------------------------\n\nTITLE: Initializing Flyway Project with Database Type using Command-line\nDESCRIPTION: This snippet demonstrates how to initialize a Flyway project via command-line, specifying the project name and database type. It sets up the project with default configurations relevant to the selected database type, such as SQL Server. Dependencies include having Flyway installed and accessible via command line. The key parameters are '-name' for project name and '-databaseType' for database type, affecting the generated configuration file. Typically used during project setup to prepare migration scripts for specific database environments.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Init Namespace/Flyway Init Database Type Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway init -name=\"My Project\" -databaseType=\"sqlserver\"\n```\n\n----------------------------------------\n\nTITLE: List Flyway Databases in JSON\nDESCRIPTION: This command lists all databases supported by the current Flyway version and outputs the result in JSON format. This requires Flyway to be installed and accessible via command line. The `-outputType=json` parameter enables the JSON output.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/List Engines.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./flyway list-engines -outputType=json\n```\n\n----------------------------------------\n\nTITLE: Gradle Configuration for ignoreMigrationPatterns in Flyway\nDESCRIPTION: Shows how to set ignoreMigrationPatterns within a Gradle build script, assigning a list of patterns to the flyway plugin configuration for build automation.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Ignore Migration Patterns Setting.md#_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    ignoreMigrationPatterns = ['repeatable:missing']\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for Flyway Oracle Support (Open Source Version)\nDESCRIPTION: XML configuration to add the Open Source Flyway Oracle database support as a Maven dependency to your Java project.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Oracle Database.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-database-oracle</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Disabling createSchemas via Flyway Command-line\nDESCRIPTION: This snippet shows how to disable the `createSchemas` property when running a Flyway command from the command line. It sets the property using the `-createSchemas` argument with the value `\"false\"` before executing the `info` command.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Create Schemas Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -createSchemas=\"false\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Batch via Java API\nDESCRIPTION: Utilizes the Flyway Java configuration API to enable batching by calling '.batch(true)' on the Flyway configure object before initiating migrations, suitable for programmatic setup.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Batch Setting.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nFlyway.configure()\n    .batch(true)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Using Local Secret Resolver via Flyway Command-line (Bash)\nDESCRIPTION: Demonstrates using the `${localSecret}` resolver syntax within the Flyway command-line interface to supply a password for the 'development' environment. Flyway will attempt to retrieve the secret associated with the key 'devDbPassword' from the operating system's local secret store.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Local Secret Resolver.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n./flyway info -environments.development.password='${localSecret.devDbPassword}'\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Config File Encoding in Maven (xml)\nDESCRIPTION: This snippet describes setting the file encoding within a Maven configuration. It specifies the `configFileEncoding` tag with the value \"UTF-16\" inside the `<configuration>` tag of a Maven project's `pom.xml` file. This configuration is specific to a Maven project and applies during Flyway plugin execution within the project. The Flyway Maven plugin must be added as a dependency in your pom.xml.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Command-line Parameters/Config File Encoding Parameter.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n  <configFileEncoding>UTF-16</configFileEncoding>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting installedBy parameter in TOML Configuration File\nDESCRIPTION: Example of setting the installedBy parameter to 'ci-pipeline' in a TOML configuration file for Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Installed By Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\ninstalledBy = \"ci-pipeline\"\n```\n\n----------------------------------------\n\nTITLE: Setting skipDefaultCallbacks in Maven POM File (XML)\nDESCRIPTION: Illustrates how to configure `skipDefaultCallbacks` within the `<configuration>` section of the Flyway Maven plugin in a `pom.xml` file. Setting this element to `true` disables default callbacks for Maven executions.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Skip Default Callbacks Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <skipDefaultCallbacks>true</skipDefaultCallbacks>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreDatabaseAndServerNameInSynonyms in TOML\nDESCRIPTION: This TOML configuration snippet demonstrates how to set the 'ignoreDatabaseAndServerNameInSynonyms' option to true within the Redgate Compare SQL Server options section of a Flyway configuration file. Setting this to true ensures that differences in database or server names specified within synonym definitions are ignored during schema comparisons.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Database And Server Name In Synonyms Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreDatabaseAndServerNameInSynonyms = true\n```\n\n----------------------------------------\n\nTITLE: Setting installedBy parameter in Properties Configuration File\nDESCRIPTION: Example of setting the installedBy parameter to 'ci-pipeline' in a properties configuration file for Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Installed By Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.installedBy=ci-pipeline\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Maven Plugin Using Maven Properties\nDESCRIPTION: XML example showing how to configure the Flyway Maven plugin using Maven properties in pom.xml. Properties are prefixed with 'flyway.' and lists are defined as comma-separated values. Useful for working with Maven profiles.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Maven Goal.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<project>\n    ...\n    <properties>\n        <!-- Properties are prefixed with flyway. -->\n        <flyway.user>myUser</flyway.user>\n        <flyway.password>mySecretPwd</flyway.password>\n\n        <!-- List are defined as comma-separated values -->\n        <flyway.schemas>schema1,schema2,schema3</flyway.schemas>\n\n        <!-- Individual placeholders are prefixed by flyway.placeholders. -->\n        <flyway.placeholders.keyABC>valueXYZ</flyway.placeholders.keyABC>\n        <flyway.placeholders.otherplaceholder>value123</flyway.placeholders.otherplaceholder>\n    </properties>\n    ...\n</project>\n```\n\n----------------------------------------\n\nTITLE: Configuring GCSM Resolver in Flyway TOML File\nDESCRIPTION: Illustrates configuring the GCSM resolver within a Flyway TOML configuration file. The GCSM project ID is set under the `[environments.development.resolvers.gcsm]` table, and database connection parameters in the `[environments.development]` table reference secrets stored in GCSM using the `${googlesecrets.*}` syntax.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Google Cloud Secret Manager Resolver.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development.resolvers.gcsm]\nproject = \"quixotic-ferret-345678\"\n\n[environments.development]\nurl = \"jdbc:postgresql:${googlesecrets.dbhost}/${googlesecrets.dbname}\"\nuser = \"${googlesecrets.username}\"\npassword = \"${googlesecrets.password}\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Database User via Flyway Command-Line (PowerShell)\nDESCRIPTION: These PowerShell snippets demonstrate how to specify the database user when running Flyway commands from the command line. The first example shows a simple user setting with the '-user' flag. The second example demonstrates how to configure a named environment user in a TOML configuration context by prefixing the user parameter with the environment name. These commands require Flyway installed and accessible via the command line.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment User Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -user=myuser info\n```\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -environments.sample.user=myuser info\n```\n\n----------------------------------------\n\nTITLE: Configuring validateOnMigrate via Java API\nDESCRIPTION: This Java snippet demonstrates how to configure Flyway using its fluent API.  It sets `validateOnMigrate` to `false`. The key method used is `.validateOnMigrate(false)`.  The dependencies are the Flyway Java library and any necessary database driver. The output is a configured Flyway instance ready to be used.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Validate On Migrate Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .validateOnMigrate(false)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Specifying Migration Locations in Properties File for Flyway (Properties)\nDESCRIPTION: This code sets the flyway.locations property in a .properties configuration file, directing Flyway to scan the specified directory for SQL migration scripts. Property-based configuration is commonly used for application or global settings. The directory should exist and be readable by Flyway at runtime.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Locations Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.locations=filesystem:./sql\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Batch via PowerShell Command\nDESCRIPTION: Sets the batch option to true using the Flyway CLI in PowerShell to enable SQL statement batching for migrations, reducing network overhead for large transactions.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Batch Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway -batch=\"true\" info\n```\n\n----------------------------------------\n\nTITLE: Migrate via Gradle (Flyway)\nDESCRIPTION: Executes the Flyway migrate task within a Gradle project. This applies database migrations defined in the project's configuration. Ensure that the Gradle project is properly configured to use the Flyway plugin.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Migrate.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngradle flywayMigrate\n```\n\n----------------------------------------\n\nTITLE: Configuring target version in Flyway TOML file\nDESCRIPTION: Demonstrates setting the `flyway.target` property within the `[flyway]` section of a TOML configuration file. This allows persistent configuration of the target version for Flyway operations using this file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Target Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\ntarget = \"2.0\"\n```\n\n----------------------------------------\n\nTITLE: Setting flyway.check.buildUrl via Flyway Command Line (Powershell)\nDESCRIPTION: Demonstrates how to specify the build database URL for the Flyway 'check' command using the '-check.buildUrl' parameter in a Powershell command line interface. This example also shows the primary '-url' parameter for the main database.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Build Url Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway check -changes -url=\"jdbc://url1\" -check.buildUrl=\"jdbc://url2\"\n```\n\n----------------------------------------\n\nTITLE: Setting `skipDefaultResolvers` via Environment Variable\nDESCRIPTION: Explains how to configure `skipDefaultResolvers` using an environment variable. Set the `FLYWAY_SKIP_DEFAULT_RESOLVERS` environment variable to `true` in the execution environment before running Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Skip Default Resolvers Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_SKIP_DEFAULT_RESOLVERS=true\n```\n\n----------------------------------------\n\nTITLE: Setting Schemas via Flyway Gradle Plugin - Groovy\nDESCRIPTION: Configures managed schemas in a Gradle build script for projects using the Flyway Gradle plugin. The schemas property is set as a Groovy list in the flyway block. Requires the Flyway Gradle plugin to be applied. Typically used in build automation and CI/CD pipelines.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Schemas Setting.md#_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    schemas = ['schema1', 'schema2']\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Changes (flyway-dev) - Shell\nDESCRIPTION: This command applies changes from a diff artifact to a target database using `flyway-dev`. It requires project path, artifact location, and a changeset. Requires Flyway CLI version 11.0.0 or later and a Teams/Enterprise license.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Migrating from flyway-dev to flyway CLI.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nflyway-dev apply -p=C:\\Users\\redgate\\Documents\\TestFdCmdLine -a=C:\\Users\\redgate\\Documents\\TestFdCmdLine\\Temp\\artifact1 -c=VGFibGU6W2Rib10uW1Rlc3RUYWJsZV0 --i-agree-to-the-eula\n```\n\n----------------------------------------\n\nTITLE: Configuring Connect Retries via Gradle\nDESCRIPTION: This Groovy snippet configures the `connectRetries` setting within a Gradle build file. The `flyway` block defines Flyway's configuration, and inside it `connectRetries = 10`. This configuration depends on having the Flyway Gradle plugin added to the project. This allows the project to configure the number of retries during database connection attempts.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Connect Retries Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    connectRetries = 10\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connect Retries via Properties File\nDESCRIPTION: This snippet illustrates how to set `connectRetries` within a properties file for Flyway. The `flyway.connectRetries` property is set to 10. This configuration requires a properties file that Flyway will read to obtain the configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Connect Retries Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.connectRetries=10\n```\n\n----------------------------------------\n\nTITLE: Configuring Placeholder Prefix in TOML Configuration File\nDESCRIPTION: Sets the placeholderPrefix to \"$$\" in a TOML configuration file for Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Prefix Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nplaceholderPrefix = \"$$\"\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway Clickhouse Dependency with Gradle - Groovy\nDESCRIPTION: This snippet demonstrates how to add the Flyway Clickhouse open source module using Gradle build system by declaring the dependency inside the dependencies block. The \"compile\" configuration is used with the coordinate \"org.flywaydb:flyway-database-clickhouse\" to enable Clickhouse support in Flyway. No additional configuration parameters are included in this snippet.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Clickhouse Database.md#_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\\n    compile \\\"org.flywaydb:flyway-database-clickhouse\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Vault URL in Gradle Build Script\nDESCRIPTION: Illustrates how to configure the Vault URL in the Gradle build script for Flyway, enabling integration with Vault via build automation for continuous deployment scenarios.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Vault Namespace/Flyway Vault URL Setting.md#_snippet_4\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    pluginConfiguration = [\n      vaultUrl: 'http://localhost:8200/v1/'\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SQL Source Control Project\nDESCRIPTION: This command imports a SQL Source Control project into Flyway. It uses the `-from` parameter to specify the project path and the `-fromType` parameter with the value `SqlSourceControl`. If the project is in the same directory, it will be transformed into a Flyway Desktop project, preserving version control history.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Init.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nflyway init -projectName=MyProject -databaseType=Sqlite -from=C:\\somePath\\MySqlSourceControlProject -fromType=SqlSourceControl\n```\n\n----------------------------------------\n\nTITLE: Enabling `ignoreSlowDependencies` in Flyway TOML Configuration for Oracle\nDESCRIPTION: This TOML snippet demonstrates how to configure the `ignoreSlowDependencies` option within the `[redgateCompare.oracle.options.ignores]` section of a Flyway configuration file. Setting it to `true` (the default) instructs Flyway/Redgate Compare to skip specific slow dependency checks during Oracle schema comparisons, potentially speeding up the process. This setting applies specifically to Redgate Compare functionality integrated with Flyway for Oracle databases.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Ignore Options Namespace/Oracle Ignore Slow Dependencies Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.ignores]\nignoreSlowDependencies = true\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependency\nDESCRIPTION: This snippet demonstrates how to add a dependency to your Maven project to extend Flyway's capabilities. Specifically, it shows how to add the HSQLDB JDBC driver to the classpath. This allows Flyway to connect to and manage HSQLDB databases.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Adding to the classpath.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>org.hsqldb</groupId>\n        <artifactId>hsqldb</artifactId>\n        <version>1.8.0.10</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Applying Flyway Migration (Console)\nDESCRIPTION: Executes the Flyway migration process, applying any pending migrations (identified by Flyway) to the database. This is the standard command used to update the database schema according to the migration scripts after the dry run has been reviewed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Dry Runs.md#_snippet_4\n\nLANGUAGE: Console\nCODE:\n```\nflyway migrate\n```\n\n----------------------------------------\n\nTITLE: Configure executeInTransaction in Properties file\nDESCRIPTION: Configures the `executeInTransaction` parameter to `false` using a Java properties file. This setting will prevent Flyway from running SQL commands in a transaction. The configuration uses the standard `flyway.executeInTransaction` property.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Execute In Transaction Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.executeInTransaction=false\n```\n\n----------------------------------------\n\nTITLE: Configuring jdbcProperties Maven Plugin (XML)\nDESCRIPTION: Illustrates how to define JDBC properties within the Flyway Maven plugin configuration in a `pom.xml` file. The properties are defined as child elements within the `<jdbcProperties>` block inside the `<configuration>` section. Requires the Flyway Maven plugin added to the project.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment JDBC Properties Namespace.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <jdbcProperties>\n        <accessToken>access-token</accessToken>\n    </jdbcProperties>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Changing Flyway console output formatting to JSON via command-line\nDESCRIPTION: This snippet demonstrates how to set the Flyway command-line tool to output JSON-formatted results instead of the default human-readable format. It requires executing the command with the `-outputType=json` parameter, which directs Flyway to produce structured JSON output suitable for further processing.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Command-line Parameters/Output Type Parameter.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway info -outputType=json\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Table in TOML Configuration\nDESCRIPTION: Shows how to configure the Flyway schema history table name within a TOML configuration file under the `[flyway]` section using the `table` key.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Table Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway]\ntable = \"my_schema_history_table\"\n```\n\n----------------------------------------\n\nTITLE: Configuring 'includeStorageDeferredSegments' in TOML for Flyway Oracle\nDESCRIPTION: This code snippet demonstrates how to enable the 'includeStorageDeferredSegments' option in a TOML configuration file for Flyway, setting the Boolean value to true to include the 'DEFERRED SEGMENT CREATION' clause in Oracle database migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Storage Options Namespace/Oracle Include Storage Deferred Segments Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.storage]\nincludeStorageDeferredSegments = true\n```\n\n----------------------------------------\n\nTITLE: Firebird SQL Migration Script Example\nDESCRIPTION: Example SQL migration script for Firebird showing various syntax elements including comments, table creation, placeholders, and procedure creation with custom terminators.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Firebird.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n/* Single line comment */\nCREATE TABLE test_data (\n  value VARCHAR(25) NOT NULL PRIMARY KEY\n);\n /*\nMulti-line\ncomment\n*/\n -- Sql-style comment\n -- Placeholder\nALTER TABLE ${tableName} ADD id INT NOT NULL;\n -- Terminator changes\nSET TERM #;\nCREATE OR ALTER PROCEDURE SHIP_ORDER (\n    PO_NUM CHAR(8))\nAS\nBEGIN\n  /* Stored procedure body */\nEND#\nSET TERM ;#\n```\n\n----------------------------------------\n\nTITLE: Configuring OutOfOrder in Flyway Properties File\nDESCRIPTION: This properties snippet enables the outOfOrder feature by setting the 'flyway.outOfOrder' property to true. It should be placed in a properties configuration file used by Flyway for migration management.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Out Of Order Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.outOfOrder=true\n```\n\n----------------------------------------\n\nTITLE: Executing Baseline Command via Command Line\nDESCRIPTION: Example of how to run the Flyway baseline command using the command line interface.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Baseline.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflyway baseline\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Schema via Flyway Java API\nDESCRIPTION: Provides a Java code snippet demonstrating how to programmatically configure the `defaultSchema` to `schema2` using the Flyway API's fluent builder pattern before loading the configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Default Schema Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .defaultSchema(\"schema2\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Token in Traditional Properties File - Properties\nDESCRIPTION: Illustrates how to configure the Vault token in a classic Java-style .properties file. Use the key 'flyway.vault.token' and assign the Vault token as its value. This approach is compatible with JVM-based Flyway deployments. Ensure the file is correctly loaded by Flyway at runtime.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Vault Namespace/Flyway Vault Token Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.vault.token=s.abcdefghijklmnopqrstuvwx\n```\n\n----------------------------------------\n\nTITLE: Configuring Repeatable SQL Prefix in Properties File\nDESCRIPTION: Illustrates how to set the `repeatableSqlMigrationPrefix` property in a standard Java `.properties` configuration file used by Flyway. This is a common method for externalizing Flyway configuration settings. Requires Flyway to be configured to load this properties file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Repeatable SQL Migration Prefix Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.repeatableSqlMigrationPrefix=A\n```\n\n----------------------------------------\n\nTITLE: TOML Configuration for ignoreMigrationPatterns in Flyway\nDESCRIPTION: This snippet shows how to define ignoreMigrationPatterns in a TOML configuration file, setting it to an array of patterns such as `repeatable:missing`. This provides an alternative to command-line parameters for configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Ignore Migration Patterns Setting.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nignoreMigrationPatterns = [\"repeatable:missing\"]\n```\n\n----------------------------------------\n\nTITLE: Specifying Flyway JDBC Driver in Properties Configuration File\nDESCRIPTION: Illustrates setting the Flyway JDBC driver class in a standard properties configuration file using the 'flyway.driver' key. This traditional properties format is commonly used for defining Flyway settings and requires the driver class to be present on the classpath at runtime.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Driver Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.driver=com.microsoft.sqlserver.jdbc.SQLServerDriver\n```\n\n----------------------------------------\n\nTITLE: Setting Schemas via Flyway Java API - Java\nDESCRIPTION: Illustrates schema configuration using Flyway's fluent Java API. Call Flyway.configure().schemas(...) to define the managed schemas. Requires Flyway Java library as a dependency. Intended for applications embedding Flyway migrations programmatically, with schemas passed as string arguments.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Schemas Setting.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .schemas(\"schema1\", \"schema2\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Escaping Flyway URL Parameter in Bash/CMD\nDESCRIPTION: Shows how to properly escape a Flyway JDBC URL containing special characters like '=' and '&' when running commands in Bash, macOS terminal, or Windows Command Prompt (cmd.exe). Uses double quotes to enclose the entire URL string to prevent shell interpretation.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Command-line.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n> flyway info -url=\"jdbc:snowflake://ab12345.snowflakecomputing.com/?db=demo_db&user=foo\"\n```\n\n----------------------------------------\n\nTITLE: Escaping Flyway URL Parameter in PowerShell\nDESCRIPTION: Demonstrates the method for escaping a Flyway JDBC URL containing special characters ('=', '&') specifically for use within PowerShell. Requires enclosing the entire double-quoted URL string within single quotes to ensure PowerShell passes the string correctly.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Command-line.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n> ./flyway info -url='\"jdbc:snowflake://ab12345.snowflakecomputing.com/?db=demo_db&user=foo\"'\n```\n\n----------------------------------------\n\nTITLE: Configuring jdbcProperties Environment Variable (Shell)\nDESCRIPTION: Shows the environment variable format used by Flyway to configure `jdbcProperties`. The property name `accessToken` is translated into `FLYWAY_JDBC_PROPERTIES_accessToken`. This variable should be set in the operating system environment where Flyway is executed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment JDBC Properties Namespace.md#_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_JDBC_PROPERTIES_accessToken=access-token\n```\n\n----------------------------------------\n\nTITLE: Configuring Mixed Mode via Powershell Command-line in Flyway\nDESCRIPTION: Example of enabling the mixed mode parameter in Flyway using the command-line interface with Powershell. When set to true, Flyway will allow mixing transactional and non-transactional statements in migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Mixed Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -mixed=\"true\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring Mixed Mode in Flyway TOML Configuration File\nDESCRIPTION: Example of setting the mixed mode parameter to true in a TOML configuration file for Flyway. This enables mixing of transactional and non-transactional statements within migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Mixed Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nmixed = true\n```\n\n----------------------------------------\n\nTITLE: Passing Flyway Placeholders via Command-Line in PowerShell\nDESCRIPTION: Demonstrates how to specify Flyway placeholders directly on the command line for a Flyway operation. The placeholders are passed as key-value pairs using the '-placeholders.' prefix. This method is useful for temporary or ad-hoc placeholder substitutions without changing configuration files. It requires PowerShell and assumes Flyway CLI is accessible. The input consists of placeholder keys and values; the output is the migration process replacing placeholders accordingly.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholders Namespace.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -placeholders.key1=value1 -placeholders.key2=value2 info\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway dryRunOutput via Command-line\nDESCRIPTION: Specifies the output file path for the dry run SQL statements when executing Flyway from the command line, enabling users to save generated SQL without applying changes. Requires the appropriate command with the -dryRunOutput parameter pointing to the desired output file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Dry Run Output Setting.md#_snippet_0\n\nLANGUAGE: Shell/Command-line\nCODE:\n```\n./flyway -dryRunOutput=\"/my/output/file.sql\"\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies and Task Dependency for Java Migrations\nDESCRIPTION: Declares the `flyway-core` dependency and configures the basic Flyway properties. It explicitly makes the `flywayMigrate` task depend on the `classes` task to ensure Java migrations and callbacks are compiled before the migration runs.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Gradle Task.md#_snippet_4\n\nLANGUAGE: Groovy\nCODE:\n```\ndependencies {\n    implementation \"org.flywaydb:flyway-core:${flywayVersion}\"\n}\n\nflyway {\n    url = 'jdbc:h2:mem:mydb'\n    user = 'myUsr'\n    password = 'mySecretPwd'\n    locations = ['classpath:db/migration']\n}\n\n// we need to build classes before we can migrate\nflywayMigrate.dependsOn classes\n```\n\n----------------------------------------\n\nTITLE: Flyway diffText artifactFilename TOML Configuration\nDESCRIPTION: Illustrates how to configure the `artifactFilename` parameter within a TOML configuration file for Flyway. This sets the default location where the diff artifact will be saved.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DiffText Namespace/Flyway DiffText Artifact Filename Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.diffText]\nartifactFilename = \"artifact.diff\"\n```\n\n----------------------------------------\n\nTITLE: Running Flyway Check with Fail on Drift - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to run the Flyway check command with the -drift option and the -check.failOnDrift parameter set to true. This will cause Flyway to exit with an error if drift is detected.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Fail On Drift Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n\"./flyway check -drift -check.failOnDrift=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Check Fail on Drift in TOML\nDESCRIPTION: This TOML snippet shows how to configure the flyway.check.failOnDrift option to true in a TOML configuration file.  This will cause Flyway to exit with an error if drift is detected during a check operation.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Fail On Drift Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway.check]\nfailOnDrift = true\n```\n\n----------------------------------------\n\nTITLE: Using buildCherryPick Parameter in Command-line\nDESCRIPTION: Example of how to use the buildCherryPick parameter with Flyway snapshot command on the command line. This specifies a single migration '001' to be used when the snapshot source is set to 'migrations'.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Snapshot Namespace/Flyway Snapshot Build Cherry Pick Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway snapshot -source=\"migrations\" -buildCherryPick=\"001\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway encoding via Gradle build script\nDESCRIPTION: Shows how to set the encoding in a Gradle build configuration for automating Flyway tasks within Gradle projects, ensuring consistent encoding during builds.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Encoding Setting.md#_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    encoding = 'UTF-16'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway Migration Version via Command-Line - Bash\nDESCRIPTION: This bash snippet demonstrates how to specify a migration version directly when adding a migration using Flyway's command-line interface. It requires the Flyway CLI environment and the 'add' command with an explicit '-version' parameter indicating the desired migration version string, which typically follows Flyway's versioning conventions.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Add Namespace/Flyway Add Version Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway add -version=\"001\"\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway Core Dependency in Gradle for Grails/Spring Boot (Gradle)\nDESCRIPTION: This snippet demonstrates how to add the Flyway Core library as a dependency in a Gradle build file to enable Flyway database migrations within a Grails 3.x project. The integration relies on Spring Boot's auto-configuration to detect and wire Flyway at application startup. No explicit initialization is required beyond this dependency; additional Flyway options can be set in standard Spring Boot configuration files. Requires the flyway-core library and access to Gradle.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Community Plugins and Integrations/Community Plugins and Integrations (Grails).md#_snippet_0\n\nLANGUAGE: Gradle\nCODE:\n```\nimplementation \"org.flywaydb:flyway-core:{{ site.flywayVersion }}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlMigrationPrefix via Environment Variable\nDESCRIPTION: Illustrates how to set the sqlMigrationPrefix using an environment variable, FLYWAY_SQL_MIGRATION_PREFIX, to influence Flyway's behavior during execution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Migration Prefix Setting.md#_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nFLYWAY_SQL_MIGRATION_PREFIX=M\n```\n\n----------------------------------------\n\nTITLE: Example SQL Script with Comments and Procedure for MySQL\nDESCRIPTION: Provides a sample SQL migration script demonstrating MySQL syntax, including comments, stored procedure creation, delimiter changes, and placeholder usage. This script can be used with Flyway migrations and is compatible with MySQL tools.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/MySQL.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n/* Single line comment */\nCREATE TABLE test_data (\n value VARCHAR(25) NOT NULL,\n PRIMARY KEY(value)\n);\n\n/*\nMulti-line\ncomment\n*/\n\n-- MySQL procedure\nDELIMITER //\nCREATE PROCEDURE AddData()\n BEGIN\n   # MySQL-style single line comment\n   INSERT INTO test_data (value) VALUES ('Hello');\n END //\nDELIMITER;\n\nCALL AddData();\n\n-- MySQL comments directives generated by mysqlsump\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;\n/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;\n\n-- Placeholder\nINSERT INTO ${tableName} (name) VALUES ('Mr. T');\n```\n\n----------------------------------------\n\nTITLE: Configuring validateOnMigrate via Environment Variable\nDESCRIPTION: This configuration snippet demonstrates setting the `validateOnMigrate` option using an environment variable. This method allows for flexible configuration, especially within containerized environments.  The value is set to `false`, disabling migration validation. The dependency is the environment variable, and the output is Flyway utilizing that environment variable.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Validate On Migrate Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_VALIDATE_ON_MIGRATE=false\n```\n\n----------------------------------------\n\nTITLE: Executing Flyway Login with Auth Command\nDESCRIPTION: Example of logging into Flyway using the auth command with mandatory EULA agreement flag.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Auth.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n> flyway auth -IAgreeToTheEula\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Schema in Properties File\nDESCRIPTION: Illustrates setting the `defaultSchema` using a standard Java Properties configuration file format. The `flyway.defaultSchema` key is assigned the value `schema2`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Default Schema Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.defaultSchema=schema2\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Script Placeholder Suffix in Properties File\nDESCRIPTION: This code shows how to define the script placeholder suffix as '__P' within a properties file used for Flyway configuration. This approach is suitable for consolidating configuration parameters and can be loaded by Flyway during execution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Script Placeholder Suffix Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.scriptPlaceholderSuffix=__P\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Script Types via Command-line\nDESCRIPTION: This example shows how to set the types of scripts to generate using the Flyway command-line interface. The -types parameter specifies which script types Flyway should generate.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Types Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway generate -types=\"versioned\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Placeholder Prefix in Powershell Command-line\nDESCRIPTION: Sets the placeholderPrefix to \"$$\" using Flyway's command-line interface in Powershell.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Prefix Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -placeholderPrefix=\"$$\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Resolvers in Gradle\nDESCRIPTION: Example of setting custom migration resolvers in a Gradle build script. This defines the resolvers property in the flyway configuration block.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Migration Resolvers Setting.md#_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    resolvers = 'my.resolver.MigrationResolver'\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Change Report Based on Build Environment in Bash\nDESCRIPTION: This script runs the Flyway 'check -changes' command to generate a report based on the specified build environment and target environment. It captures the current database snapshot before and after migrations, aiding in drift detection.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Check/Check Changes.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflyway check -changes -buildEnvironment=\"build\" -environment=\"production\"\n```\n\n----------------------------------------\n\nTITLE: Flyway Tablespace Configuration via Environment Variable\nDESCRIPTION: Configures the Flyway tablespace using an environment variable. The `FLYWAY_TABLESPACE` environment variable sets the tablespace.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Tablespace Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_TABLESPACE=xyz\n```\n\n----------------------------------------\n\nTITLE: Configuring minorTolerance via Flyway CLI - PowerShell\nDESCRIPTION: Executes Flyway's check command with the -check.minorTolerance parameter set to 7. Requires Flyway installed and available in the system path. The parameter value limits the number of tolerated minor static analysis rule violations; if the threshold is exceeded, the operation fails. Expects integer input for the tolerance and outputs the result of the code check, potentially failing the pipeline.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Minor Tolerance Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway check -code -check.minorTolerance=7\n```\n\n----------------------------------------\n\nTITLE: Repairing Flyway Schema History Table via Command Line - Bash\nDESCRIPTION: This bash command runs the Flyway repair operation from the command line to fix the schema history table. It removes failed migrations, realigns migration checksums and metadata, and marks missing migrations as deleted. No arguments are required, but appropriate configuration and environment settings must be provided; outputs and warnings will be reported to the terminal.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Repair.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflyway repair\n\n```\n\n----------------------------------------\n\nTITLE: Updating the schema model with the 'model' command\nDESCRIPTION: This snippet shows how to apply differences captured in the diff artifact to the schema model, updating local SQL files to reflect current database changes. The command outputs status messages regarding file updates for schema objects.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Flyway Desktop migrations workflow with Flyway CLI.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ flyway model\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreConstraintNames in TOML for Oracle Database Comparisons\nDESCRIPTION: TOML configuration example for enabling the ignoreConstraintNames setting in Redgate Compare for Oracle. This setting instructs the comparison tool to ignore the names of constraints when comparing databases, while still considering their functional definitions.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Ignore Options Namespace/Oracle Ignore Constraint Names Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.ignores]\nignoreConstraintNames = true\n```\n\n----------------------------------------\n\nTITLE: Flyway Init JSON Output Format\nDESCRIPTION: This JSON snippet illustrates the expected output format of the Flyway init command, which includes the path to the generated TOML file and a project ID.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Init.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"path\": \"C:\\\\workingDirectory\\\\flyway.toml\",\n  \"projectId\": \"someId\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Vault URL in Properties Configuration File\nDESCRIPTION: Details how to set the Vault URL in a properties file for Flyway, enabling environment-agnostic configuration that can be easily managed and reused across different environments.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Vault Namespace/Flyway Vault URL Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.vault.url=http://localhost:8200/v1/\n```\n\n----------------------------------------\n\nTITLE: Defining jdbcProperties Properties Configuration (Properties)\nDESCRIPTION: Demonstrates the syntax for setting a JDBC property, `accessToken`, within a standard Flyway configuration properties file. The property key uses dot notation, nesting `accessToken` under `flyway.jdbcProperties`. Requires a Flyway `.properties` configuration file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment JDBC Properties Namespace.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nflyway.jdbcProperties.accessToken=my-access-token\n```\n\n----------------------------------------\n\nTITLE: Disabling Community DB Support in Gradle Build Script\nDESCRIPTION: Provides an example of setting the `communityDBSupportEnabled` property to `false` within the `flyway` configuration block in a Groovy-based Gradle build script.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Community DB Support Enabled Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    communityDBSupportEnabled = false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mixed Mode using Flyway Java API\nDESCRIPTION: Example of enabling the mixed mode parameter in Flyway using the Java API. This configuration allows migrations to mix transactional and non-transactional statements.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Mixed Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .mixed(true)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Specifying Flyway Placeholders in Maven Plugin Configuration (XML)\nDESCRIPTION: Illustrates the configuration of placeholders in a Maven build using the Flyway Maven plugin. The placeholders are declared inside the <placeholders> tag with individual <key> elements for each placeholder. This integrates placeholder management into Maven lifecycle and is suitable for Java projects using Maven as their build tool. Inputs are XML-defined placeholder keys and values used during Flyway migration phases.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholders Namespace.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <placeholders>\n        <key1>value1</key1>\n        <key2>value2</key2>\n    </placeholders>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway HSQLDB Dependency Using Gradle Groovy\nDESCRIPTION: This snippet shows how to add Flyway's HSQLDB plugin module dependency to a Java project that uses Gradle for build management. It includes implementation scope declarations for both Redgate and open source repositories. Inclusion of this dependency enables use of Flyway's HSQLDB-specific migration capabilities. The project must have Flyway core configured and a compatible Gradle setup.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/HSQLDB.md#_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation \"com.redgate.flyway:flyway-database-hsqldb\"\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation \"org.flywaydb:flyway-database-hsqldb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GCSM Project in TOML Configuration\nDESCRIPTION: This snippet illustrates how to configure the GCSM project within a TOML configuration file.  It sets the `project` parameter inside the `environments.development.resolvers.gcsm` section to  `quixotic-ferret-345678`.  This requires a properly formatted TOML file that is loaded by Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Google Cloud Secret Manager Resolver/Google Cloud Secret Manager Resolver Project Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development.resolvers.gcsm]\nproject = \"quixotic-ferret-345678\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault URL via Command-line in Flyway\nDESCRIPTION: Example of how to set the Vault resolver URL for a development environment using the Flyway command-line interface. The URL points to a local Vault server API endpoint.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Vault Resolver/Vault Resolver URL Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway info -environments.development.resolvers.vault.url=\"http://localhost:8200/v1\"\n```\n\n----------------------------------------\n\nTITLE: Setting Vault URL via Command-line in PowerShell\nDESCRIPTION: Shows how to specify the Vault URL when running Flyway commands from the command line using PowerShell, enabling encrypted secret management through Vault during migration operations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Vault Namespace/Flyway Vault URL Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway -vault.url=\"http://localhost:8200/v1/\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring Placeholder Prefix in Maven Build\nDESCRIPTION: Sets the placeholderPrefix to \"$$\" in a Maven build configuration for Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Prefix Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <placeholderPrefix>$$</placeholderPrefix>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Example URL for Testcontainers (JDBC)\nDESCRIPTION: This snippet provides an example JDBC URL to connect to a PostgreSQL database running in a Testcontainers container. It specifies the database type, version, and connection details, including the host, port, and database name. The URL uses the `jdbc:tc:` format, which is specific to Testcontainers. To use this, you would replace `localhost:5432` with the actual host and port of your container and `databasename` with the database name.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/TestContainers.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\njdbc:tc:postgresql:11-alpine://localhost:5432/databasename\n```\n\n----------------------------------------\n\nTITLE: Flyway cherryPick Configuration (Maven)\nDESCRIPTION: This snippet demonstrates how to set the `cherryPick` configuration option using Maven.  It configures the `cherryPick` plugin configuration property to `2.0`, instructing Flyway to only consider migration version `2.0`. The configuration is specified within the `<configuration>` section of the Flyway Maven plugin.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Cherry Pick Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n  <pluginConfiguration>\n    <cherryPick>2.0</cherryPick>\n  </pluginConfiguration>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Datasource using Java API\nDESCRIPTION: Shows how to programmatically configure the database connection details, including the JDBC URL, username, and password, using the Flyway Java API's `datasource()` method.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment URL Setting.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nFlyway.configure()\n        .datasource(\"jdbc:h2:mem:flyway_db\", \"myuser\", \"mysecretpassword\")\n        .load()\n```\n\n----------------------------------------\n\nTITLE: Configure Maven Project for Flyway Java - Maven XML\nDESCRIPTION: Configures the `pom.xml` to add the `flyway-core` dependency for Java migrations, set the Java compiler target, and configure the `flyway-maven-plugin`. The plugin configuration specifies the database URL, user, and importantly, adds `classpath:db/migration` to the migration locations, enabling Flyway to find Java classes in that package.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Java-based Migrations.md#_snippet_2\n\nLANGUAGE: Maven XML\nCODE:\n```\n<project xmlns=\"...\">\n    ...\n    <dependencies>\n        <dependency>\n            <groupId>org.flywaydb</groupId>\n            <artifactId>flyway-core</artifactId>\n            <version>{{ site.flywayVersion }}</version>\n        </dependency>\n        ...\n    </dependencies>\n    <build>\n        <plugins>\n            <plugin>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.7.0</version>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.flywaydb</groupId>\n                <artifactId>flyway-maven-plugin</artifactId>\n                <version>{{ site.flywayVersion }}</version>\n                <configuration>\n                    <url>jdbc:h2:file:./target/foobar</url>\n                    <user>sa</user>\n                    <locations>\n                        <location>classpath:db/migration</location>\n                    </locations>\n                </configuration>\n                <dependencies>\n                    <dependency>\n                        <groupId>com.h2database</groupId>\n                        <artifactId>h2</artifactId>\n                        <version>1.4.191</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway encoding programmatically with Java API\nDESCRIPTION: Provides an example of setting the encoding using Flyway's Java API, allowing dynamic and programmatic control over migration settings within Java applications.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Encoding Setting.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nFlyway.configure()\n    .encoding(\"UTF-16\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Setting Dapr Sidecar URL Using Flyway Command-Line (bash)\nDESCRIPTION: This snippet demonstrates how to specify the Dapr sidecar REST API URL as a command-line parameter for Flyway. It enables the resolver for the development environment to connect to the specified secrets store endpoint. The parameter '-environments.development.resolvers.dapr.url' sets the URL to communicate with the Dapr sidecar REST API. Input is a URL string; output affects migration execution context.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Dapr Resolver/Dapr Resolver URL Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway info -environments.development.resolvers.dapr.url=\"http://localhost:3500/v1.0/secrets/my-secrets-store\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Schema in Gradle Build Script (Groovy)\nDESCRIPTION: Shows the Groovy syntax for setting the `defaultSchema` parameter to `schema2` within the `flyway` configuration block in a Gradle build script (`build.gradle`).\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Default Schema Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    defaultSchema = 'schema2'\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Maven Dependency Configuration for Open Source Flyway\nDESCRIPTION: Maven configuration to add PostgreSQL database support for Open Source Flyway. This dependency is required to enable PostgreSQL integration in Java projects.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/PostgreSQL Database.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-database-postgresql</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Generating Migration Script Name Only (Flyway CLI)\nDESCRIPTION: Demonstrates how to generate only the migration script name using the Flyway `add` command with the `-q` and `-add.nameOnly=true` options.  This is useful for integrating with editors or other tools without actually creating the file. Requires Flyway CLI to be installed and configured and access to system tools such as `vim`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Add.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n> vim $(flyway -q add -add.nameOnly=true)\n```\n\n----------------------------------------\n\nTITLE: Setting Email and Token in Flyway via API Configuration - Java\nDESCRIPTION: This Java snippet shows how to configure Flyway authentication programmatically by setting the email and token with the 'PATTokenConfigurationExtension' via the API. Requires the Flyway and associated extension classes on the classpath. The methods 'setEmail' and 'setToken' are invoked for configuration. Inputs are Java strings for the email and token; this approach is suitable for embedded or programmatic Flyway usage.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Email Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway flyway = Flyway.configure().load();\nflyway.getConfigurationExtension(PATTokenConfigurationExtension.class)\n        .setEmail(\"foo.bar@red-gate.com\");\nflyway.getConfigurationExtension(PATTokenConfigurationExtension.class)\n        .setToken(\"1234ABCD\");  \n```\n\n----------------------------------------\n\nTITLE: Setting Baseline Description in Maven\nDESCRIPTION: This Maven configuration snippet demonstrates setting the `baselineDescription` within the Maven configuration. The `<baselineDescription>` tag is used within the `<configuration>` section. This requires the Flyway Maven plugin to be correctly configured in the `pom.xml`. The `baselineDescription` parameter requires a string value.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Baseline Description Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <baselineDescription>Baseline</baselineDescription>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Redgate Clone Provisioner in TOML\nDESCRIPTION: Example TOML configuration for setting up the Redgate Clone provisioner in a Flyway environment. This snippet shows how to configure the development environment to use a clone database with appropriate resolver properties including URL, data image, container settings, and authentication.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Provisioner Setting/Redgate Clone Provisioner.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development]\nurl = \"${clone.url}databaseName=my-database\"\nprovisioner = \"clone\"\n\n[environments.development.resolvers.clone]\nurl = \"https://clone.red-gate.com:1234/cloning-api\"\ndataImage = \"mssql-empty\"\ndataContainer = \"MyContainer\"\ndataContainerLifetime = \"1h\"\nauthenticationToken = \"${localSecret.RedgateCloneToken}\"\n```\n\n----------------------------------------\n\nTITLE: SQL Script Example for H2 Database in Flyway\nDESCRIPTION: Example SQL migration script for H2 database showing comment styles, table creation, placeholder usage, and specialized string handling with $$ delimiters for complex content including semicolons and line breaks.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/H2.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n/* Single line comment */\nCREATE TABLE test_data (\n value VARCHAR(25) NOT NULL PRIMARY KEY\n);\n\n/*\nMulti-line\ncomment\n*/\n\n-- Sql-style comment\n\n-- Placeholder\nINSERT INTO ${tableName} (name) VALUES ('Mr. T');\nINSERT INTO test_user (name) VALUES ( $$'Mr. Semicolon+Linebreak;\nanother line'$$);\n```\n\n----------------------------------------\n\nTITLE: Flyway Command-Line Directory Structure\nDESCRIPTION: Illustrates the standard directory layout after extracting the Flyway command-line tool archive. Shows locations for configuration files (`conf/`), JDBC drivers (`drivers/`), SQL migrations (`sql/`), executables (`flyway`, `flyway.cmd`), and bundled JRE/libraries (`jre/`, `lib/`, `licenses/`).\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Command-line.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nflyway\n    conf/       Configuration file(s)\n    drivers/    JDBC Drivers\n    jre/\n    lib/\n    licenses/\n    sql/        SQL migrations\n    flyway      macOS/Linux executable\n    flyway.cmd  Windows executable\n```\n\n----------------------------------------\n\nTITLE: Configuring scriptPlaceholderPrefix via Java API\nDESCRIPTION: Configures the Flyway script placeholder prefix to \"P__\" programmatically using the Flyway Java API. This is done by calling the `scriptPlaceholderPrefix()` method on the `FluentConfiguration` object before loading Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Script Placeholder Prefix Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .scriptPlaceholderPrefix(\"P__\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Configuring Placeholder Replacement in TOML File - Flyway - TOML\nDESCRIPTION: This snippet shows how to set placeholder replacement in a Flyway TOML configuration file. The [flyway] section is required and placeholderReplacement is a Boolean key. This approach is file-based and works where TOML configuration files are supported. The value is read by Flyway on startup.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Replacement Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nplaceholderReplacement = false\n```\n\n----------------------------------------\n\nTITLE: SQL script to create a table for migration\nDESCRIPTION: This SQL snippet creates a new table 'PERSON' with 'ID' and 'NAME' columns, used as a schema change migration in Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Using Flyway Check with SQL Server.md#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate table PERSON (\n    ID int not null,\n    NAME varchar(100) not null\n);\n```\n\n----------------------------------------\n\nTITLE: Execute Pending Flyway Migrations - Shell\nDESCRIPTION: Executes the `mvn flyway:migrate` command to apply any pending database migrations, including the newly detected Java-based migration. Requires Flyway and the configured database connection.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Java-based Migrations.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nmvn flyway:migrate\n```\n\n----------------------------------------\n\nTITLE: Executing Flyway Info via Command Line (Bash)\nDESCRIPTION: Shows how to run the Flyway 'info' command directly from the command line. This example demonstrates filtering the output to show only migrations applied after a specific date and time using the '-infoSinceDate' parameter. Requires the Flyway command-line tool to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Info.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflyway info -infoSinceDate=\"01/12/2020 13:00\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Schema via Flyway Command-Line (Powershell)\nDESCRIPTION: Demonstrates setting the `defaultSchema` parameter to `schema2` using the `-defaultSchema` flag when running Flyway from the command line. This specifies the primary schema Flyway will manage.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Default Schema Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -defaultSchema=\"schema2\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Locations in Gradle Plugin for Flyway (Groovy)\nDESCRIPTION: This snippet configures the locations property for the Flyway Gradle plugin using Groovy DSL. It assigns an array of location strings, such as a filesystem directory. This is used within the build.gradle file to set locations prior to running Flyway tasks. Requires the Flyway Gradle plugin applied to the project.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Locations Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    locations = ['filesystem:./sql']\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GCSM Project ID in Maven POM File\nDESCRIPTION: Illustrates how to configure the GCSM project ID in a Maven `pom.xml` file within the `<configuration>` section of the Flyway plugin, using the `<gcsmProject>` tag inside `<pluginConfiguration>`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Google Cloud Secret Manager Namespace/Flyway Google Cloud Secret Manager Project Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <pluginConfiguration>\n        <gcsmProject>quixotic-ferret-345678</gcsmProject>\n    </pluginConfiguration>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Adding MongoDB JDBC Driver Dependency to Gradle\nDESCRIPTION: This Groovy snippet demonstrates how to add the MongoDB JDBC driver dependency to a Gradle project. It adds the local JAR file as a dependency using the `implementation files()` method.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/MongoDB.md#_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  implementation files('mongo-jdbc-standalone-1.19.jar')\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flyway Migration for Test Environment with Placeholders\nDESCRIPTION: This command sets the placeholders to specify 'test' as the environment and initiates the migration process, resulting in only the test-specific migration being applied. It demonstrates the use of the -placeholders parameter for environment targeting.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Injecting Environments.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflyway -placeholders.environment=test migrate\n```\n\n----------------------------------------\n\nTITLE: Example of Disallowed Nested Resolvers - Flyway TOML\nDESCRIPTION: This snippet provides an example of an invalid configuration attempting to nest resolver syntax, e.g., `${env.DB_NAME_${env.DB_NAME_ENV_SUFFIX}}`. The documentation explicitly states that nesting resolvers is not allowed and will result in an error.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace.md#_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n[environments.default]\nurl = \"jdbc:sqlserver://localhost;databaseName=${env.DB_NAME_${env.DB_NAME_ENV_SUFFIX}}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway JDBC Driver in Maven Configuration XML\nDESCRIPTION: Illustrates how to configure the Flyway JDBC driver within a Maven plugin configuration block using XML syntax. The 'driver' element under the 'configuration' node specifies the fully qualified driver class, which Maven uses when executing Flyway goals. Ensure the driver dependency is declared in the project POM.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Driver Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <driver>com.microsoft.sqlserver.jdbc.SQLServerDriver</driver>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Passing skipExecutingMigrations Flag in Flyway Command-Line (PowerShell)\nDESCRIPTION: This snippet illustrates how to use the skipExecutingMigrations flag in the Flyway command-line interface to bypass executing migration scripts while updating the schema history table. It requires the Flyway CLI and sets the flag to true before running the migrate command to mimic migration execution without running the actual scripts.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Skip Executing Migrations Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n. flyway -skipExecutingMigrations=\"true\" migrate\n```\n\n----------------------------------------\n\nTITLE: Flyway Info Output (Pre-Java) - Console Output\nDESCRIPTION: Displays the output of the `mvn flyway:info` command, showing the current database connection and listing existing migrations with their status. Indicates two SQL migrations have been successfully applied.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Java-based Migrations.md#_snippet_1\n\nLANGUAGE: Console Output\nCODE:\n```\n[INFO] Database: jdbc:h2:file:./target/foobar (H2 1.4)\n[INFO]\n+-----------+---------+---------------------+------+---------------------+---------+\n| Category  | Version | Description         | Type | Installed On        | State   |\n+-----------+---------+---------------------+------+---------------------+---------+\n| Versioned | 1       | Create person table | SQL  | 2017-12-22 15:26:39 | Success |\n| Versioned | 2       | Add people          | SQL  | 2017-12-22 15:28:17 | Success |\n+-----------+---------+---------------------+------+---------------------+---------+\n```\n\n----------------------------------------\n\nTITLE: Command-line configuration for Flyway GCSM secrets using PowerShell\nDESCRIPTION: Sets the GCSM secrets parameter via command-line for Flyway operations. It allows specifying multiple secrets with comma separation, which Flyway will utilize during migration tasks. This method is suitable for ad-hoc or scripted executions requiring secrets input.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Google Cloud Secret Manager Namespace/Flyway Google Cloud Secret Manager Secrets Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway -gcsm.secrets=\"secret1,secret2\" info\n```\n\n----------------------------------------\n\nTITLE: SQL Script Example for Redshift\nDESCRIPTION: This SQL snippet illustrates basic SQL statements compatible with Amazon Redshift. It includes table creation, data insertion, view creation, and function creation. It also demonstrates placeholder usage with `${tableName}`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Redshift.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n/* Single line comment */\nCREATE TABLE test_data (\n  test_id INT IDENTITY NOT NULL PRIMARY KEY,\n  value VARCHAR(25) NOT NULL\n);\n\n/*\nMulti-line\ncomment\n*/\nINSERT INTO test_data (value) VALUES ('Hello');\n\nCREATE VIEW value_only AS SELECT value FROM test_data;\n\nCREATE TABLE another_table AS SELECT 'some-data' as name;\n\nCREATE FUNCTION add(integer, integer) RETURNS integer\n     IMMUTABLE\n    AS $$\n    select $1 + $2;\n$$ LANGUAGE sql;\n\n-- Placeholder\nINSERT INTO ${tableName} (name) VALUES ('Mr. T');\n```\n\n----------------------------------------\n\nTITLE: Explanation of backup restore setup and connection string options\nDESCRIPTION: This annotation explains the purpose of the backup restore configuration, including the backup file location and schema mapping. It details the format of dump file paths, the restoration process from DEV to SHADOW schema, and the use of Oracle connection aliases via `tnsnames.ora` or direct connection strings. It also discusses the optional use of property resolvers for sensitive connection parameters to enhance security.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Provisioner Setting/Backup Provisioner.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Configuring flyway.check.buildUrl in TOML File\nDESCRIPTION: Shows how to set the build database URL within the '[flyway.check]' section of a TOML configuration file using the 'buildUrl' key.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Build Url Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.check]\nbuildUrl = \"jdbc://url2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway rulesLocation via PowerShell command-line\nDESCRIPTION: This snippet demonstrates how to specify a custom rules location for Flyway check operation using the command-line interface. The parameter `-check.rulesLocation` instructs Flyway to look for rules in the specified folder, overriding the default location.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Rules Location Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway check -code -check.rulesLocation=/my_rules_folder\n```\n\n----------------------------------------\n\nTITLE: Specifying Data and Log File Paths with Logical File Mapping in TOML for SQL Server\nDESCRIPTION: This TOML snippet configures explicit logical-to-physical file path mapping for SQL Server restore operations using the backup provisioner. It defines 'logicalName' and 'filePath' pairs for database data and log files, allowing precise control over where files are restored. These settings override any auto-generation behavior specified by 'generateWithMove'. Requires the backup provisioner and correct server-side access.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Provisioner Setting/Backup Provisioner.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[environments.shadow.resolvers.backup]\nbackupFilePath = '/tmp/backup/backup.bak'\nbackupVersion = \"995\"\n\n[[environments.shadow.resolvers.backup.sqlserver.files]]\nlogicalName = \"NewWorldDB\"\nfilePath = \"/var/opt/mssql/data/NewWorldDB_shadow_data.mdf\"\n\n[[environments.shadow.resolvers.backup.sqlserver.files]]\nlogicalName = \"NewWorldDB_log\"\nfilePath = \"/var/opt/mssql/data/NewWorldDB_shadow_log.ldf\"\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Token with Flyway Maven Plugin - XML\nDESCRIPTION: Presents how to configure the Vault token via the Flyway Maven plugin within the <pluginConfiguration> section of the build's XML. Place the <vaultToken> element under <pluginConfiguration> within <configuration>. Requires Maven project setup with Flyway plugin. The value should be replaced with the real Vault token.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Vault Namespace/Flyway Vault Token Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <pluginConfiguration>\n        <vaultToken>s.abcdefghijklmnopqrstuvwx</vaultToken>\n    </pluginConfiguration>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting sqlMigrationPrefix in Maven plugin configuration\nDESCRIPTION: Shows how to set the sqlMigrationPrefix in a Maven plugin configuration block, enabling build-time configuration of Flyway migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Migration Prefix Setting.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    <sqlMigrationPrefix>M</sqlMigrationPrefix>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Example Snowflake Migration Script (SQL)\nDESCRIPTION: This SQL example illustrates the standard syntax used in Flyway migration scripts for Snowflake. It includes single-line comments, multi-line block comments, a CREATE TABLE statement, and the usage of a Flyway placeholder for dynamic value substitution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Snowflake.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n/* Single line comment */\nCREATE TABLE test_data (\n  value VARCHAR(25) NOT NULL PRIMARY KEY\n);\n\n/*\nMulti-line\ncomment\n*/\n\n-- Sql-style comment\n\n-- Placeholder\nINSERT INTO ${tableName} (name) VALUES ('Mr. T');\n```\n\n----------------------------------------\n\nTITLE: SQL Script Syntax Example for TiDB\nDESCRIPTION: This SQL snippet illustrates the syntax supported by TiDB for Flyway migrations, including comments, table creation, stored procedure definition and calls, and placeholder usage. The SQL code showcases the standard SQL syntax with statement delimiters, MySQL-style comments, and a placeholder to provide example usage with placeholder insertion. This example demonstrates how to create a table, create and invoke a stored procedure, and also shows the usage of placeholders within the SQL script.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/TiDB (Titanium DB).md#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n/* Single line comment */\nCREATE TABLE test_data (\n value VARCHAR(25) NOT NULL,\n PRIMARY KEY(value)\n);\n\n/*\nMulti-line\ncomment\n*/\n\n-- MySQL procedure\nDELIMITER //\nCREATE PROCEDURE AddData()\n BEGIN\n   # MySQL-style single line comment\n   INSERT INTO test_data (value) VALUES ('Hello');\n END //\nDELIMITER;\n\nCALL AddData();\n\n-- Placeholder\nINSERT INTO ${tableName} (name) VALUES ('Mr. T');\n```\n\n----------------------------------------\n\nTITLE: Setting Migration Locations via Environment Variable in Flyway (Properties)\nDESCRIPTION: This snippet illustrates configuring migration locations using the environment variable FLYWAY_LOCATIONS. The value should be a valid location string, such as a filesystem path. This method is suitable for containerized or script-based deployments, as the environment variable is picked up automatically by Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Locations Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_LOCATIONS=filesystem:./sql\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Flyway MySQL Support\nDESCRIPTION: Defines the Maven dependency needed to include the Flyway MySQL driver in a Java project, for both Redgate and open-source versions. This allows Java applications to utilize Flyway's MySQL migration capabilities.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/MySQL.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.redgate.flyway</groupId>\n    <artifactId>flyway-mysql</artifactId>\n</dependency>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-mysql</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Executing Flyway Migrate with Batching\nDESCRIPTION: This command demonstrates how to execute Flyway migrate with batching enabled.  Batching improves performance by grouping schema changes into a single request. Requires the Flyway command-line tool with a database connection configured. The `-batch=true` flag enables batch processing.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Google Cloud Spanner.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n<span>&gt;</span> flyway migrate -batch=true\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlMigrationPrefix in Gradle build script\nDESCRIPTION: Demonstrates specifying the sqlMigrationPrefix in a Gradle build script for Flyway, allowing integration with project build automation.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Migration Prefix Setting.md#_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    sqlMigrationPrefix = 'M'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Flyway Alias using Docker on Linux\nDESCRIPTION: Creates a shell script '/usr/local/bin/flyway' on Linux that executes Flyway within a Docker container ('redgate/flyway'). This allows running Flyway commands via Docker without installing Flyway directly on the host, passing all arguments ($*) to the container. Requires sudo permissions and Docker installed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Command-line.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ sudo sh -c 'echo \"docker run --rm redgate/flyway:{{site.flywayVersion}} $*\" > /usr/local/bin/flyway && chmod +x /usr/local/bin/flyway'\n```\n\n----------------------------------------\n\nTITLE: JSON Output Format for Baseline Command\nDESCRIPTION: The standardized JSON response format when executing the baseline command. Includes status, version information, database name, and any warnings that occurred during execution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Baseline.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"successfullyBaselined\": true,\n  \"baselineVersion\": \"1\",\n  \"flywayVersion\": \"{{ site.flywayVersion }}\",\n  \"database\": \"testdb\",\n  \"warnings\": [],\n  \"operation\": \"baseline\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example SQL Server Migration Script Using T-SQL Syntax\nDESCRIPTION: This SQL snippet provides an example Flyway migration script for SQL Server, demonstrating table creation with identity columns and data types, T-SQL comments, and a trigger definition. It includes usage of the GO statement as a batch delimiter and shows how to use placeholders for parameters such as table names. This example assumes execution within a Flyway migration context targeting SQL Server version 2008 or newer.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/SQL Server Database.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n/* Single line comment */\\nCREATE TABLE Customers (\\nCustomerId smallint identity(1,1),\\nName nvarchar(255),\\nPriority tinyint\\n)\\nCREATE TABLE Sales (\\nTransactionId smallint identity(1,1),\\nCustomerId smallint,\\n[Net Amount] int,\\nCompleted bit\\n)\\nGO\\n\\n/*\\nMulti-line\\ncomment\\n*/\\n-- TSQL\\nCREATE TRIGGER dbo.Update_Customer_Priority\\n ON dbo.Sales\\nAFTER INSERT, UPDATE, DELETE\\nAS\\nWITH CTE AS (\\n select CustomerId from inserted\\n union\\n select CustomerId from deleted\\n)\\nUPDATE Customers\\nSET\\n Priority =\\n   case\\n     when t.Total &lt; 10000 then 3\\n     when t.Total between 10000 and 50000 then 2\\n     when t.Total &gt; 50000 then 1\\n     when t.Total IS NULL then NULL\\n   end\\nFROM Customers c\\nINNER JOIN CTE ON CTE.CustomerId = c.CustomerId\\nLEFT JOIN (\\n select\\n   Sales.CustomerId,\\n   SUM([Net Amount]) Total\\n from Sales\\n inner join CTE on CTE.CustomerId = Sales.CustomerId\\n where\\n   Completed = 1\\n group by Sales.CustomerId\\n) t ON t.CustomerId = c.CustomerId\\nGO\\n\\n-- Placeholder\\nINSERT INTO ${tableName} (name) VALUES ('Mr. T');\n```\n\n----------------------------------------\n\nTITLE: Configuring `ignoreReplicationTriggers` in Flyway TOML\nDESCRIPTION: Sets the `ignoreReplicationTriggers` option to `true` in a Flyway TOML configuration file under the `[redgateCompare.sqlserver.options.ignores]` section. This configuration ensures that replication triggers are ignored during SQL Server database comparison and deployment processes. The default value is `true`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Replication Triggers Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreReplicationTriggers = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Local DB Resolver with Flyway Command-line\nDESCRIPTION: Example of configuring the Local DB Resolver using Flyway's command-line interface. It shows how to set up a development environment with the Local DB Resolver to automatically handle SQL Server Local DB connections using jTDS driver and named pipes.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Local DB Resolver.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway info \\\n-environment='development' \\\n-environments.development.url='jdbc:jtds:sqlserver://./development;instance=${localdb.pipeName};namedPipe=true' \\\n-environments.development.user='my-user' \\\n-environments.development.password='${localSecret.developmentPassword}' \\\n-environments.development.resolvers.localdb.instanceName='MSSQLLocalDB'\n```\n\n----------------------------------------\n\nTITLE: Configuring useSetStatementsInScriptDatabaseInfo in TOML\nDESCRIPTION: This snippet shows how to set the `useSetStatementsInScriptDatabaseInfo` boolean option to `true` within the `[redgateCompare.sqlserver.options.behavior]` section of a Flyway TOML configuration file. This configuration enables the use of Redgate Database Properties XML for storing and recovering set statements, as described in the main documentation. This method is the only way to configure this setting outside of Flyway Desktop.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Behavior Options Namespace/SQL Server Use Set Statements In Script Database Info Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.options.behavior]\nuseSetStatementsInScriptDatabaseInfo = true\n```\n\n----------------------------------------\n\nTITLE: Adding Databricks support to Gradle\nDESCRIPTION: This Groovy snippet shows how to add the Flyway Databricks database support dependency to a Gradle project. It uses the 'implementation' configuration to ensure the dependency is available during compilation and runtime.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Databricks.md#_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation \"org.flywaydb:flyway-database-databricks\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Script Placeholder Suffix via Environment Variable\nDESCRIPTION: This snippet illustrates setting the script placeholder suffix through an environment variable named 'FLYWAY_SCRIPT_PLACEHOLDER_SUFFIX' with value '__P'. It enables environment-based configuration for Flyway executions.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Script Placeholder Suffix Setting.md#_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nFLYWAY_SCRIPT_PLACEHOLDER_SUFFIX=__P\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Vault Resolver Engine Name - Command-line Bash\nDESCRIPTION: This snippet demonstrates how to set the `engineName` property for the Vault resolver within the 'development' environment using a command-line argument when executing a Flyway command like `info`. This allows specifying configuration properties directly on the command line, overriding values from configuration files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Vault Resolver/Vault Resolver Engine Name Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway info -environments.development.resolvers.vault.engineName=\"secret\"\n```\n\n----------------------------------------\n\nTITLE: JSON Output Format for Dry Run Report\nDESCRIPTION: This JSON code block provides an example of the expected output format from the `flyway check -dryrun` command. The output includes an HTML report file and a JSON report file, plus individual results for various operations, like dryruns of SQL statements against the database. It provides information such as messages, timestamps, database, operation, flyway version, and warnings.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Check/Check DryRun.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"htmlReport\": \"report.html\",\n  \"jsonReport\": \"report.json\",\n  \"individualResults\": [\n    {\n      \"message\": null,\n      \"stackTrace\": null,\n      \"sql\": \"SELECT 1;\",\n      \"timestamp\": \"2022-07-22T08-08-33Z\",\n      \"database\": \"testdb\",\n      \"operation\": \"dryrun\",\n      \"flywayVersion\": undefined,\n      \"warnings\": undefined,\n    }\n  ]\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlMigrationSeparator in Gradle Build Script\nDESCRIPTION: Sets the sqlMigrationSeparator in a Gradle build script for Flyway plugin configuration. The separator is set to \"-\" using Gradle DSL, affecting migration filename recognition during build.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Migration Separator Setting.md#_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    sqlMigrationSeparator = '-' \n}\n```\n\n----------------------------------------\n\nTITLE: Flyway Tablespace Configuration in Properties File\nDESCRIPTION: Configures the Flyway tablespace using a properties file. The `flyway.tablespace` property sets the tablespace to be used.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Tablespace Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.tablespace=xyz\n```\n\n----------------------------------------\n\nTITLE: Defining Flyway Data Image in TOML Configuration - TOML\nDESCRIPTION: Shows how to define the dataImage key for a Flyway environment resolver in a TOML configuration file. Requires a valid Flyway TOML file structure, typically used for persistent configuration. The '[environments.development.resolvers.clone]' section sets dataImage to 'mssql-empty'. Input: TOML configuration file. Output: Flyway will use the specified image when operating in the target environment. Recommended for version-controlled or shared settings.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Redgate Clone Resolver/Redgate Clone Resolver Data Image Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development.resolvers.clone]\ndataImage = \"mssql-empty\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Environment in Java\nDESCRIPTION: This snippet demonstrates how to configure the Flyway environment programmatically using the Java API. The `environment()` method sets the desired environment name, and the `load()` method applies the configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Environment Setting.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .environment(\"env1\")   \n    .load()\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Environment via Environment Variable\nDESCRIPTION: This snippet demonstrates how to set the Flyway environment using an environment variable.  The variable name is `flyway_environment` (lowercase) and its value is the name of the desired environment (e.g., 'env1').\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Environment Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway_environment=env1\n```\n\n----------------------------------------\n\nTITLE: Setting dataContainerLifetime via Flyway CLI (Bash)\nDESCRIPTION: Demonstrates how to set the data container lifetime for the 'development' environment's clone resolver using the Flyway command-line interface. The `-environments.development.resolvers.clone.dataContainerLifetime` flag is used to specify the duration ('1h' in this example).\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Redgate Clone Resolver/Redgate Clone Resolver Data Container Lifetime Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway info -environments.development.resolvers.clone.dataContainerLifetime='1h'\n```\n\n----------------------------------------\n\nTITLE: Configuring Redgate Clone Resolver via Command-line in Bash\nDESCRIPTION: Example showing how to configure the Redgate Clone Resolver for a development environment using Flyway's command-line interface. It sets the required parameters including clone URL, data image, container settings, and authentication.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Redgate Clone Resolver.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway info \\\n-environment='development' \\\n-environments.development.url='${clone.url}databaseName=my-database' \\\n-environments.development.resolvers.clone.url='https://clone.red-gate.com:1234/cloning-api' \\\n-environments.development.resolvers.clone.dataImage='mssql-empty' \\\n-environments.development.resolvers.clone.dataContainer='MyContainer' \\\n-environments.development.resolvers.clone.dataContainerLifetime='1h' \\\n-environments.development.resolvers.clone.authenticationToken='${localSecret.RedgateCloneToken}'\n```\n\n----------------------------------------\n\nTITLE: Using Flyway check -code command for static code analysis\nDESCRIPTION: This snippet demonstrates the basic usage of the 'flyway check -code' command, which executes static analysis on SQL migration files located in the filesystem. It helps identify violations based on predefined rules and tolerances, and outputs reports in specified formats.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Check/Check Code.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflyway check -code\n```\n\n----------------------------------------\n\nTITLE: Using Flyway Diff Source in Command-line\nDESCRIPTION: Example showing how to specify the source parameter for a diff operation comparing a development environment to a schema model using the Flyway command-line interface.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DIff Namespace/Flyway Diff Source Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway diff -source=\"env:development\" -target=\"schemaModel\"\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Separator using Flyway Java API\nDESCRIPTION: Provides a Java code snippet demonstrating how to configure the placeholder separator programmatically using the Flyway API. The `placeholderSeparator()` method of the `FluentConfiguration` class is called with the desired separator ('_') before loading the configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Separator Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .placeholderSeparator(\"_\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Setting `force` via Flyway Command Line (Bash)\nDESCRIPTION: Demonstrates how to enable the `force` option for the `flyway prepare` command using the `-force=true` argument via the command line. This instructs Flyway to overwrite any pre-existing deployment script.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Prepare Namespace/Flyway Prepare Force Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway prepare -force=true\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Transactional Lock via Environment Variable (Flyway)\nDESCRIPTION: This snippet demonstrates configuring the `postgresql.transactional.lock` setting via an environment variable.  Setting the environment variable `FLYWAY_POSTGRESQL_TRANSACTIONAL_LOCK=false` instructs Flyway to use session-level locks.  Environment variables provide a convenient way to configure settings without modifying configuration files directly.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway PostgreSQL Namespace/Flyway PostgreSQL Transactional Lock Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_POSTGRESQL_TRANSACTIONAL_LOCK=false\n```\n\n----------------------------------------\n\nTITLE: Setting Baseline Description via Environment Variable\nDESCRIPTION: This snippet demonstrates configuring the baseline description using an environment variable. The `FLYWAY_BASELINE_DESCRIPTION` variable is set to \"Baseline\".  This requires that the Flyway tool be configured to read environment variables. This approach provides a way to configure the setting externally without modifying configuration files directly.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Baseline Description Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_BASELINE_DESCRIPTION=Baseline\n```\n\n----------------------------------------\n\nTITLE: Flyway Maven Token Configuration\nDESCRIPTION: Demonstrates how to configure the Flyway token within a Maven `pom.xml` file. The `email` and `token` are specified within the `<pluginConfiguration>` section of the Flyway plugin. This approach is suitable for Maven-based projects, ensuring consistency across builds.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Token Setting.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n  <pluginConfiguration>\n    <email>foo.bar@red-gate.com</email>\n    <token>1234ABCD</token>\n  </pluginConfiguration>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring dryRunOutput in Gradle Build Script for Flyway\nDESCRIPTION: Sets the dry run output file path within a Gradle build script, integrating Flyway migration configurations into the build process. This allows automatic generation of SQL migration previews during build executions.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Dry Run Output Setting.md#_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    dryRunOutput = '/my/output/file.sql'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Flyway JDBC Driver in Gradle Build Script\nDESCRIPTION: Shows how to specify the JDBC driver class within a Gradle build script using the 'flyway' DSL block. The 'driver' property is assigned the fully qualified class name, enabling Flyway tasks to use the appropriate driver at build time. The Flyway Gradle plugin must be applied for this to take effect.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Driver Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    driver = 'com.microsoft.sqlserver.jdbc.SQLServerDriver'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dapr URL in Properties Configuration File\nDESCRIPTION: Sets the Dapr sidecar REST API URL in a properties configuration file for Flyway. This is the traditional way to configure Flyway using key-value pairs.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Dapr Namespace/Flyway Dapr URL Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.dapr.url=http://localhost:3500/v1.0/secrets/my-secrets-store\n```\n\n----------------------------------------\n\nTITLE: Configuring skipExecutingMigrations in a Flyway TOML Configuration File\nDESCRIPTION: This snippet demonstrates setting the skipExecutingMigrations option to true in a TOML configuration file for Flyway. It instructs Flyway to mark migrations as executed without executing them. This requires Flyway to be configured to read the TOML file, and the option must be set under the [flyway] section.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Skip Executing Migrations Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nskipExecutingMigrations = true\n```\n\n----------------------------------------\n\nTITLE: Disabling Flyway Telemetry via Environment Variable - Properties\nDESCRIPTION: This snippet demonstrates how to set the REDGATE_DISABLE_TELEMETRY environment variable to any non-empty value (example: \"true\") in order to prevent Flyway's telemetry client from sending usage data. No additional dependencies are required. Set this variable in your operating system's environment before running Flyway. The key parameter is REDGATE_DISABLE_TELEMETRY, and its value can be any non-empty string; setting it disables telemetry regardless of value. This configuration cannot be applied from within the Flyway Desktop UI, but any set value will be honoured by the application.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Environment Variables/Redgate Disable Telemetry Environment Variable.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nREDGATE_DISABLE_TELEMETRY = true\n```\n\n----------------------------------------\n\nTITLE: Configuring backup provisioner in TOML for Oracle with connection details\nDESCRIPTION: This section defines the setup for a backup provisioner in a TOML configuration file. It specifies connection details, backup file location, version, schema mappings, and Oracle-specific options such as connection identifiers and import content control. The configuration enables restoring a backup file into a specified schema within the shadow environment, supporting both tnspnsames.ora alias and direct connection string methods.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Provisioner Setting/Backup Provisioner.md#_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n[environments.shadow]\nurl = \"jdbc:oracle:thin:@//localhost:1521/XE\"\nuser = \"DEV\"\npassword = \"${localSecret.MyPasswordKey}\"\nschemas = [\"SHADOW\"]\nprovisioner = \"backup\"\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[environments.shadow.resolvers.backup]\nbackupFilePath = \"DATA_PUMP_DIR:dev.dmp\"\nbackupVersion = \"995\"\noracle.connectionIdentifier = \"/@MYALIAS\"\noracle.importContent = \"METADATA_ONLY\"\noracle.ignoreErrors = false\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[environments.shadow.resolvers.backup.oracle.schemaMapping]\n\"DEV\" = \"SHADOW\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLID via Environment Variable\nDESCRIPTION: This snippet shows how to set the `FLYWAY_DB2Z_SQL_ID` environment variable to configure the SQLID used by Flyway.  The value is set to `example_group`. This affects how DB2z interacts with database objects.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DB2 zOS Namespace/Flyway Db2 zOS SQL ID Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_DB2Z_SQL_ID=example_group\n```\n\n----------------------------------------\n\nTITLE: Configuring Placeholder Prefix via Environment Variable\nDESCRIPTION: Sets the placeholderPrefix to \"$$\" using an environment variable for Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Prefix Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_PLACEHOLDER_PREFIX=$$\n```\n\n----------------------------------------\n\nTITLE: Configuring Placeholder Prefix in Gradle Build\nDESCRIPTION: Sets the placeholderPrefix to \"$$\" in a Gradle build configuration for Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Prefix Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    placeholderPrefix = '$$'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connect Retries via API (Java)\nDESCRIPTION: This Java code configures Flyway to set the `connectRetries` parameter using the fluent API. It creates a `Flyway` instance, configures it with `.connectRetries(10)`, and then loads it.  Requires the Flyway Java library in the project. The `connectRetries` parameter dictates how many times Flyway will try to connect to the DB before giving up.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Connect Retries Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .connectRetries(10)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway PostgreSQL Dependency (Open Source) - Gradle Groovy\nDESCRIPTION: This snippet shows the Groovy syntax for adding the Open Source version of the `flyway-database-postgresql` artifact to a Gradle build script (`build.gradle`). It declares an `implementation` dependency in the `dependencies` block. This is the standard way to include Flyway's CockroachDB support in a Gradle-based Java project using the open-source distribution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/CockroachDB.md#_snippet_3\n\nLANGUAGE: Groovy\nCODE:\n```\ndependencies {\n    implementation \"org.flywaydb:flyway-database-postgresql\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Schemas via Flyway Command-Line - PowerShell\nDESCRIPTION: Demonstrates how to specify managed schemas for Flyway directly on the command line using PowerShell. This approach requires Flyway to be installed and assumes access to the target database. The -schemas parameter takes a comma-separated string and applies the schema configuration for the operation. Outputs migration or info results based on the given schemas.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Schemas Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -schemas=\"schema1,schema2\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring 'checkTablesForData' in TOML file for Flyway Oracle comparison\nDESCRIPTION: This snippet shows how to enable the 'checkTablesForData' setting in a TOML configuration file for Flyway's Oracle data comparison feature. Setting this parameter to true makes Flyway check whether tables contain data and skips comparison if either table is empty.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Data Comparison Options Namespace/Oracle Data Check Tables For Data Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.data.options.comparison]\ncheckTablesForData = true\n```\n\n----------------------------------------\n\nTITLE: Providing Email and Token Authentication in Maven Plugin Configuration - XML\nDESCRIPTION: This XML snippet configures the Flyway Maven plugin by providing the email and token within the '<pluginConfiguration>' tag. Requires Maven and the Flyway plugin to be installed. Credentials are mapped under 'email' and 'token' fields, which Flyway accesses when executing migrations via Maven. Inputs are set in XML; avoid committing actual credentials to version control.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Email Setting.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n  <pluginConfiguration>\n    <email>foo.bar@red-gate.com</email>\n    <token>1234ABCD</token>\n  </pluginConfiguration>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting Dapr URL via Environment Variable\nDESCRIPTION: Configures the Dapr sidecar REST API URL through an environment variable. This approach is useful for containerized environments or when you want to avoid storing the URL in configuration files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Dapr Namespace/Flyway Dapr URL Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_DAPR_URL=http://localhost:3500/v1.0/secrets/my-secrets-store\n```\n\n----------------------------------------\n\nTITLE: Setting schemaModelSchemas via Command-line (Bash)\nDESCRIPTION: Demonstrates how to set the 'schemaModelSchemas' parameter using the Flyway command-line interface. The parameter accepts a comma-separated string of schema names.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Schema Model Schemas Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway -schemaModelSchemas=\"schema1,schema2\"\n```\n\n----------------------------------------\n\nTITLE: Disabling createSchemas in Gradle Plugin\nDESCRIPTION: This Groovy snippet shows how to configure the `createSchemas` property within the `flyway` block of a Gradle build script. Setting `createSchemas = false` disables schema creation when running Flyway via the Gradle plugin.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Create Schemas Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    createSchemas = false\n}\n```\n\n----------------------------------------\n\nTITLE: Deploy Script Filename - Command-line - Bash\nDESCRIPTION: This bash command demonstrates how to specify the deployment script filename using the `-scriptFilename` parameter when running Flyway from the command line.  It sets the script file path to \"output.sql\". No dependencies are required beyond a properly installed Flyway command line tool.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Deploy Namespace/Flyway Deploy Script Filename Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway deploy -scriptFilename=\"output.sql\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Migration Tags in Flyway TOML File\nDESCRIPTION: This example shows how to configure the `flyway.tags.definitions` table within a TOML configuration file to assign one or more tags to different versioned migrations (`1.0.0`, `1.0.1`, `1.0.2`). This configuration is used directly in the Flyway TOML configuration file to manage tag associations for migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Tags Namespace/Flyway Tags Definitions Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.tags.definitions]\n\"1.0.0\" = [\"tagA\", \"tagB\"]\n\"1.0.1\" = [\"tagA\", \"tagC\"]\n\"1.0.2\" = [\"tagC\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring shouldExecute for Environment-Specific Migrations in Flyway\nDESCRIPTION: This snippet explains how to set the shouldExecute parameter within migration-specific configuration files to control migration execution based on the environment. It details required configuration lines for each environment, integrating placeholders to conditionally execute migrations like V1, V2, and V3.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Injecting Environments.md#_snippet_0\n\nLANGUAGE: configuration\nCODE:\n```\nshouldExecute=${flyway:environment}==development\n```\n\nLANGUAGE: configuration\nCODE:\n```\nshouldExecute=${flyway:environment}==test\n```\n\nLANGUAGE: configuration\nCODE:\n```\nshouldExecute=${flyway:environment}==production\n```\n\n----------------------------------------\n\nTITLE: Adding MariaDB Dependency - Maven (Open Source)\nDESCRIPTION: This XML snippet demonstrates how to add the MariaDB Flyway plugin to a Maven project. This uses the open-source Flyway project. The dependency allows Flyway to interact with a MariaDB database. The groupId, artifactId, and version are specified to retrieve the necessary libraries.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/MariaDB.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-mysql</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring flywayDesktop.generate.undoScripts using TOML\nDESCRIPTION: This snippet demonstrates how to enable the `undoScripts` setting within a Flyway TOML configuration file. By placing `undoScripts = true` under the `[flywayDesktop.generate]` section, you instruct Flyway Desktop to generate undo scripts for subsequent versioned migrations. This setting overrides the default value of `false`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Desktop Namespace/Flyway Desktop Generate Namespace/Flyway Desktop Generate Undo Scripts Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[flywayDesktop.generate]\nundoScripts = true\n```\n\n----------------------------------------\n\nTITLE: Setting sqlMigrationPrefix through Java API configuration\nDESCRIPTION: Shows how to programmatically configure Flyway's sqlMigrationPrefix in Java code using the Flyway.configure() method, which influences how migration files are identified.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Migration Prefix Setting.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nFlyway.configure()\n    .sqlMigrationPrefix(\"M\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Installing Flyway Community Edition Maven Plugin\nDESCRIPTION: XML configuration for including the Flyway Community Edition Maven plugin in your pom.xml. This includes setting up a plugin repository and adding the plugin to your build section. Requires Maven 3.x running on Java 17.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Maven Goal.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<pluginRepositories>\n    ...\n    <pluginRepository>\n        <id>redgate</id>\n        <url>https://download.red-gate.com/maven/release</url>\n    </pluginRepository>\n    ...\n</pluginRepositories>\n<build>\n    ...\n    <plugin>\n        <groupId>com.redgate.flyway</groupId>\n        <artifactId>flyway-maven-plugin</artifactId>\n        <version>{{ site.flywayVersion }}</version>\n    </plugin>\n    ...\n</build>\n```\n\n----------------------------------------\n\nTITLE: Enabling baselineOnMigrate with Flyway Java API (Java)\nDESCRIPTION: Uses the Flyway Java API to configure the 'baselineOnMigrate' setting programmatically by chaining the '.configure()' and '.baselineOnMigrate(true)' methods before loading the Flyway instance. Requires Flyway Java library as a dependency. Accepts a boolean; affects migrations triggered in the application's runtime.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Baseline On Migrate Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .baselineOnMigrate(true)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Running Flyway Info Command with LocalDB Instance Name Using Bash\nDESCRIPTION: This snippet demonstrates how to run the Flyway 'info' command via the command-line interface while specifying the SQL Server Local DB instance's name using a command-line property override. It uses the Bash shell and passes the 'instanceName' for the localdb resolver under the development environment. This enables Flyway to connect to the specified LocalDB instance dynamically without changing configuration files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Local DB Resolver/Local DB Resolver Instance Name Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway info -environments.development.resolvers.localdb.instanceName='MSSQLLocalDB'\n```\n\n----------------------------------------\n\nTITLE: Configure executeInTransaction using Java API\nDESCRIPTION: Configures the `executeInTransaction` parameter to `false` using the Flyway Java API. This disables transaction usage during script execution within a Java application. It utilizes the fluent configuration API to set the parameter before loading the Flyway instance.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Execute In Transaction Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .executeInTransaction(false)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Placeholders Using TOML Configuration File\nDESCRIPTION: Shows how to define multiple placeholders within the Flyway TOML configuration file using the [flyway.placeholders] table. Each placeholder key is assigned a corresponding value as a string. This configuration method provides a persistent and structured way to manage placeholders. It requires a TOML parser and Flyway version that supports TOML config files. Inputs are key-value placeholder pairs, which are replaced at migration runtime.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholders Namespace.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.placeholders]\nkey1 = \"value1\"\nkey2 = \"value2\"\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Replacement via Command-line - Flyway - Powershell\nDESCRIPTION: This snippet demonstrates how to disable placeholder replacement in Flyway using the command-line by passing the -placeholderReplacement flag. No additional dependencies are required. The key parameter is -placeholderReplacement, which expects a Boolean value. Usage is intended for direct terminal/console execution, and output is the result of the invoked Flyway command.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Replacement Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -placeholderReplacement=\"false\" info\n```\n\n----------------------------------------\n\nTITLE: Setting GCSM Project ID via Environment Variable\nDESCRIPTION: Specifies the environment variable `FLYWAY_GCSM_PROJECT` used to set the GCSM project ID for Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Google Cloud Secret Manager Namespace/Flyway Google Cloud Secret Manager Project Setting.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nFLYWAY_GCSM_PROJECT=quixotic-ferret-345678\n```\n\n----------------------------------------\n\nTITLE: Oracle Wallet Configuration in Flyway.conf\nDESCRIPTION: Configuration properties for connecting to Oracle using Oracle Wallet for authentication. Requires setting the TNS_ADMIN environment variable.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Oracle Database.md#_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nflyway.oracle.walletLocation=/path/to/wallet\n```\n\n----------------------------------------\n\nTITLE: Flyway Migrate with cherryPick (PowerShell)\nDESCRIPTION: This snippet shows how to use the `cherryPick` option with the Flyway command-line tool to migrate only specific versions.  It specifies that only migration version `2.0` should be considered for migration. The command needs to be executed from the command line.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Cherry Pick Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -cherryPick=\"2.0\" migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Clean Provisioner in TOML\nDESCRIPTION: This TOML snippet shows how to configure the Clean provisioner for an environment in Flyway. Setting the \"provisioner\" parameter to \"clean\" instructs Flyway Desktop to reset the shadow database by cleaning it whenever its state is detected as stale. The \"url\" parameter specifies the JDBC connection string to the target SQL Server shadow database. This configuration requires a pre-existing database and applies only to re-provisioning processes, not initial provisioning.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Provisioner Setting/Clean Provisioner.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[environments.shadow]\nurl = \"jdbc:sqlserver://localhost:1433;database=Shadow;encrypt=true;integratedSecurity=true\"\nprovisioner = \"clean\"\n```\n\n----------------------------------------\n\nTITLE: Setting Identity Seed and Increment Value Ignorance in Flyway SQL Server Comparison - TOML\nDESCRIPTION: Configures Flyway to ignore differences in identity seed and increment values when comparing and synchronizing SQL Server databases. This setting is Boolean, defaults to false, and must be set in a TOML configuration file. It is also configurable via Flyway Desktop in SQL Server project settings. Note that for memory-optimized tables or script folder targets, seed and increment differences are deployed if other table differences exist.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Identity Seed And Increment Values Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreIdentitySeedAndIncrementValues = true\n```\n\n----------------------------------------\n\nTITLE: Configure undoSqlMigrationPrefix via Environment Variable (Properties)\nDESCRIPTION: Shows how to configure `undoSqlMigrationPrefix` using an environment variable. Flyway automatically reads configuration from environment variables prefixed with `FLYWAY_`, converting the key to uppercase with underscores.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Undo SQL Migration Prefix Setting.md#_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nFLYWAY_UNDO_SQL_MIGRATION_PREFIX=B\n```\n\n----------------------------------------\n\nTITLE: Structuring Secrets in Vault for Flyway Parameters - Properties\nDESCRIPTION: Provides an example of Vault secret value format, where each entry is a key-value pair corresponding to Flyway configuration settings like database URL, user, and password. Dependencies: secrets must be stored in Vault at the correct path. Input: Vault secret with Flyway keys/values. Output: Flyway configuration parameters loaded from Vault during execution. The format mirrors a typical Flyway configuration file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Integrating Vault.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nflyway.url=<database_url>\nflyway.user=<database_user>\nflyway.password=<database_password>\n```\n\n----------------------------------------\n\nTITLE: Configuring includeViews Setting in TOML\nDESCRIPTION: This snippet demonstrates how to enable the `includeViews` setting within a Flyway TOML configuration file. By setting `includeViews = true` under the `[redgateCompare.oracle.data.options.comparison]` section, views will be included in the Oracle data comparison performed by Redgate Compare.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Data Comparison Options Namespace/Oracle Data Include Views Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.oracle.data.options.comparison]\nincludeViews = true\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway SQL Server Dependency using Maven (Redgate)\nDESCRIPTION: This XML snippet shows how to add the Flyway SQL Server extension as a dependency using Maven with the Redgate group ID. It enables Flyway integration specifically for SQL Server in Java projects managed by Maven. No additional parameters are required beyond standard Maven dependency management.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/SQL Server Database.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\\n    <groupId>com.redgate.flyway</groupId>\\n    <artifactId>flyway-sqlserver</artifactId>\\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle Cross-Schema Permissions in TOML\nDESCRIPTION: This snippet demonstrates how to configure the `includeCrossSchemaPermissions` setting for Flyway Redgate Compare Oracle options within a TOML configuration file. Setting it to `true` includes permissions involving other schemas in the comparison. This setting can only be configured via a TOML file or the Flyway Desktop GUI.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Behavior Options Namespace/Oracle Include Cross Schema Permissions Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.oracle.options.behavior]\nincludeCrossSchemaPermissions = true\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway License Key in TOML Configuration File\nDESCRIPTION: This snippet shows how to configure the Flyway license key within a TOML configuration file under the [flyway] section. It requires updating the 'licenseKey' property with a valid Teams license key string. This configuration is automatically loaded when Flyway reads the TOML file, enabling Teams features for executions referencing this configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway License Key Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nlicenseKey = \"FL01...\"\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway PostgreSQL Dependency (Open Source) - Maven XML\nDESCRIPTION: This snippet shows the XML dependency declaration for the Open Source version of the `flyway-database-postgresql` artifact in a Maven `pom.xml` file. It adds the necessary classes and resources to a Java project to enable Flyway's CockroachDB support. This dependency is required when using Flyway with CockroachDB in a Maven build when using the open-source distribution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/CockroachDB.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-database-postgresql</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring addOnlineOnWhenCreatingIndexesOrAlteringColumns with TOML\nDESCRIPTION: This TOML configuration snippet sets the `addOnlineOnWhenCreatingIndexesOrAlteringColumns` option to `true`.  This enables the addition of the `ONLINE = ON` option when creating or altering indexes and columns in SQL Server.  This setting is only configurable within a TOML configuration file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Behavior Options Namespace/SQL Server Add Online On When Creating Indexes Or Altering Columns Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.behavior]\naddOnlineOnWhenCreatingIndexesOrAlteringColumns = true\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreCommentsOnTablesViewsAndColumns in TOML for Flyway\nDESCRIPTION: This code snippet demonstrates how to set the 'ignoreCommentsOnTablesViewsAndColumns' option to 'true' within a TOML configuration file for Flyway. It enables the comparison process to ignore comments on tables, views, and columns. The setting must be specified in the '[redgateCompare.oracle.options.ignores]' section, and it only affects comparisons when configured in this manner.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Ignore Options Namespace/Oracle Ignore Comments On Tables Views And Columns Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.oracle.options.ignores]\nignoreCommentsOnTablesViewsAndColumns = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Repeatable SQL Prefix via Java API\nDESCRIPTION: Shows how to programmatically configure the `repeatableSqlMigrationPrefix` using the Flyway Java API builder pattern. This allows embedding Flyway within a Java application and setting configurations directly in code. Requires the Flyway Java library dependency.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Repeatable SQL Migration Prefix Setting.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nFlyway.configure()\n    .repeatableSqlMigrationPrefix(\"A\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Configuring includeSchemaExistenceChecks in TOML for Flyway SQL Server\nDESCRIPTION: Defines the 'includeSchemaExistenceChecks' setting within the 'behaviour' section of a TOML configuration file to control whether Flyway verifies the existence of schemas before creating objects. Setting it to true ensures robustness when creating schemas; false may lead to errors if schemas do not exist. This snippet demonstrates a simple configuration approach required for automated deployment scripts or manual setup in a TOML file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Behavior Options Namespace/SQL Server Include Schema Existence Checks Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.behavior]\nincludeSchemaExistenceChecks = true\n```\n\n----------------------------------------\n\nTITLE: Defining Dapr Secret Resolvers and Environment Settings in TOML\nDESCRIPTION: Provides a TOML configuration snippet defining Dapr resolver settings with the URL of the Dapr secrets store and environment-specific parameters that use Dapr secret placeholders. This configuration enables Flyway to resolve secrets at runtime via the specified Dapr sidecar endpoint. The snippet requires Flyway to support TOML-based configurations and a reachable Dapr secrets store URL, with inputs being the placeholder values dynamically fetched from Dapr. Outputs are environment configuration values resolved from secrets.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Dapr Resolver.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development.resolvers.dapr]\nurl = \"http://localhost:3500/v1.0/secrets/my-secrets-store\"\n\n[environments.development]\nurl = \"jdbc:postgresql:${dapr.dbhost}/${dapr.dbname}\"\nuser = \"${dapr.username}\"\npassword = \"${dapr.password}\"\n```\n\n----------------------------------------\n\nTITLE: Generating Drift Report Using Snapshot in Bash\nDESCRIPTION: Command to generate a drift report by comparing a target production environment against a previously captured snapshot file. The comparison is based on the snapshot and the target database.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Check/Check Drift.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflyway check -drift -deployedSnapshot=\"C:\\snapshot1.json\" -environment=\"Production\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Flyway Vault Secrets in Java Properties Configuration File\nDESCRIPTION: This snippet illustrates the syntax to define Vault secret paths for Flyway using a Java properties file. The property flyway.vault.secrets expects a comma-separated string of Vault paths, each pointing to a Flyway configuration secret. Flyway reads this configuration to retrieve secrets and applies them in order, with the last secret taking precedence in case of duplicate parameters.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Vault Namespace/Flyway Vault Secrets Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.vault.secrets=kv/data/flyway/flywayConfig1,kv/flyway/flywayConfig2\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway License Key using Java API\nDESCRIPTION: This Java snippet shows how to set the Teams license key programmatically when configuring Flyway. It uses the Flyway.configure() API to load configuration and then sets the license key via the LicensingConfigurationExtension interface. The license key string must start with 'FL'. This method is important for embedding Flyway Teams configuration within Java applications.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway License Key Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway flyway = Flyway.configure().load();\nflyway.getConfigurationExtension(LicensingConfigurationExtension.class)\n        .setLicenseKey(\"FL01...\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Batch in TOML Configuration File\nDESCRIPTION: Defines the 'batch' parameter as true within the Flyway section of a TOML configuration file to enable batching of SQL statements, improving migration performance.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Batch Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway]\nbatch = true\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Stream Option Using Environment Variable\nDESCRIPTION: This snippet sets the `FLYWAY_STREAM` environment variable to `true`. This enables Flyway to stream SQL migrations. No special dependencies are needed. When executed, the environment variable controls Flyway's behavior.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Stream Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_STREAM=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway encoding via TOML configuration file\nDESCRIPTION: Shows how to set the encoding in Flyway's TOML configuration file for consistent encoding settings across environments. Ensures that all migrations use UTF-16, preventing encoding-related issues.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Encoding Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway]\nencoding = \"UTF-16\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Schema in Maven POM (XML)\nDESCRIPTION: Presents the XML configuration for setting the `defaultSchema` to `schema2` within the `<configuration>` section of the Flyway Maven plugin in a `pom.xml` file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Default Schema Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <defaultSchema>schema2</defaultSchema>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting addPurgeClauseToAllTableDrops in TOML\nDESCRIPTION: This code snippet shows how to set the `addPurgeClauseToAllTableDrops` option to `true` within a TOML configuration file for Redgate Compare's Oracle options. Setting this to true will cause all dropped tables to be purged immediately, instead of being moved to the recycle bin. This option cannot be set via command line.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Behavior Options Namespace/Oracle Add Purge Clause To All Table Drops Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.behavior]\naddPurgeClauseToAllTableDrops = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Batch in Maven Configuration\nDESCRIPTION: Includes the '<batch>true</batch>' element within the Maven Flyway plugin configuration to enable batching of SQL statements, optimizing large migration workflows.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Batch Setting.md#_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    <batch>true</batch>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: SQL Script Syntax for Derby using Flyway\nDESCRIPTION: Outlines the SQL syntax conventions supported by Derby scripts within Flyway, including statement delimiter, comments, and variable placeholders. Ensures that DDL and DML statements are compatible with Derby and Flyway execution environment.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Derby.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n- Standard SQL syntax with statement delimiter **;**\n\n- Comments:\n  /* Single line comment */\n  /* Multi-line\n     comment */\n  -- Sql-style comment\n\n- Example insert with placeholder:\n  INSERT INTO ${tableName} (name) VALUES ('Mr. T');\n```\n\n----------------------------------------\n\nTITLE: Enabling Batch Migrations in Flyway Command-Line for BigQuery\nDESCRIPTION: Demonstrates enabling Flyway's batching feature via the command-line interface using the '-batch=true' flag. This feature is recommended for BigQuery to improve performance by executing multiple schema changes in a single request, minimizing latency.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Google BigQuery.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nflyway migrate -batch=true\n```\n\n----------------------------------------\n\nTITLE: Specifying diff artifact filename via command-line in Flyway\nDESCRIPTION: This snippet shows how to set the 'artifactFilename' parameter using the command-line interface to determine where the schema diff artifact will be saved. It requires the 'diff' command with relevant source and target schemas and sets the filename to 'artifact.diff'.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DIff Namespace/Flyway Diff Artifact Filename Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway diff -source=\"schemaModel\" -target=\"migrations\" -artifactFilename=artifact.diff\n```\n\n----------------------------------------\n\nTITLE: Disabling createSchemas in Maven Plugin\nDESCRIPTION: This XML snippet demonstrates how to configure the `createSchemas` property within the `<configuration>` section of the Flyway Maven plugin definition in a `pom.xml` file. Setting the `<createSchemas>` element to `false` disables schema creation via the Maven plugin.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Create Schemas Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <createSchemas>false</createSchemas>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Major Rules - TOML\nDESCRIPTION: This TOML configuration snippet sets the `majorRules` within the `flyway.check` namespace.  The `majorRules` array is assigned a single element, \"L001\". This configuration defines which code analysis rule, identified by \"L001\", will be considered a major violation. This approach ensures that the build process fails if the defined rule violations exceed the `majorTolerance` threshold. No dependencies other than Flyway are required.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Major Rules Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.check]\nmajorRules = [\"L001\"]\n```\n\n----------------------------------------\n\nTITLE: Flyway Diff Build Version TOML Configuration Example\nDESCRIPTION: This TOML configuration shows an example of how to specify the `buildVersion` within a Flyway configuration file. It specifies the build version as an array of strings containing \"001\". This is less likely, but it is possible within the config file. This is rarely, if ever, used in practice.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DIff Namespace/Flyway Diff Build Version Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.diff]\nbuildVersion = [ \"001\" ]\n```\n\n----------------------------------------\n\nTITLE: Setting Oracle Storage ILM Policies Inclusion in TOML Configuration\nDESCRIPTION: This TOML snippet enables the inclusion of Information Lifecycle Management (ILM) policies during Oracle storage comparisons in Flyway. The setting is a boolean value under '[redgateCompare.oracle.options.storage]' and must be set to true to include ILM policies. This configuration can only be specified in TOML files and not dynamically changed in other configuration formats.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Storage Options Namespace/Oracle Include Storage ILM Policies Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.oracle.options.storage]\nincludeStorageIlmPolicies = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway sqlMigrationPrefix via PowerShell Command-line\nDESCRIPTION: Shows how to set the sqlMigrationPrefix parameter to 'M' using the Flyway command-line interface with PowerShell. This configuration affects the prefix for versioned SQL migration files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Migration Prefix Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway -sqlMigrationPrefix=\"M\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring databaseType in TOML Configuration File\nDESCRIPTION: This snippet shows how to set the databaseType within a TOML configuration file for Flyway. It allows persistent configuration of the database type used by Flyway in a project, making it easy to maintain environment-specific settings.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Database Type Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ndatabaseType = \"oracle\"\n```\n\n----------------------------------------\n\nTITLE: Configuring failOnMissingLocations in TOML\nDESCRIPTION: This snippet illustrates configuring the `failOnMissingLocations` property to `true` within a Flyway configuration file in TOML format.  When set to true, Flyway will halt the migration process if any specified migration location is not found.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Fail On Missing Locations Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nfailOnMissingLocations = true\n```\n\n----------------------------------------\n\nTITLE: Generating Snapshot from Database URL - Flyway CLI\nDESCRIPTION: This Bash snippet demonstrates generating a Flyway snapshot from a database URL.  It uses the `flyway snapshot` command with parameters for the database URL, user, password, and the desired output filename. This command requires the Flyway CLI tool to be installed and configured correctly. The output is a JSON file containing the snapshot.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Snapshot.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflyway snapshot -url=jdbc:sqlserver://localhost:1433;encrypt=false;databaseName=Inventory -user=sa -password=... -filename=C:\\snapshot.json\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway SQL Server Dependency using Maven (Open Source)\nDESCRIPTION: This XML snippet shows how to add the open source Flyway SQL Server extension as a Maven dependency to enable SQL Server support in Flyway-enabled Java projects. This dependency is required to access SQL Server features in Flyway through Maven builds.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/SQL Server Database.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\\n    <groupId>org.flywaydb</groupId>\\n    <artifactId>flyway-sqlserver</artifactId>\\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Flyway: Triggering Callback with Clean and Migrate (CLI)\nDESCRIPTION: This command triggers the Flyway callback execution via the command-line interface (CLI). It first cleans the database and then migrates it. The `clean` command removes all database objects created by Flyway, and the `migrate` command applies pending migrations. The callback is executed before the migration starts.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Callbacks.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nflyway-{{ site.flywayVersion }}> flyway clean <strong>migrate</strong>\n```\n\n----------------------------------------\n\nTITLE: Java API method to set GCSM secrets in Flyway plugin configuration\nDESCRIPTION: Provides a Java example of programmatically setting GCSM secrets in Flyway's plugin configuration via the GcsmConfigurationExtension. It demonstrates how to integrate secret management within Java applications or custom migration tools.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Google Cloud Secret Manager Namespace/Flyway Google Cloud Secret Manager Secrets Setting.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nGcsmConfigurationExtension gcsmConfigurationExtension = configuration.getPluginRegister().getPlugin(GcsmConfigurationExtension.class)\ngcsmConfigurationExtension.setGcsmSecrets(\"secret1\", \"secret2\");\n```\n\n----------------------------------------\n\nTITLE: Generating Drift Report Using Build Environment in Bash\nDESCRIPTION: Command to generate a drift report by comparing a target production environment against a build environment. This approach detects all drift from migrations regardless of when it occurred.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Check/Check Drift.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflyway check -drift -buildEnvironment=\"build\" -environment=\"production\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Prepare Source in TOML Configuration File - toml\nDESCRIPTION: This snippet shows how to configure the 'prepare.source' setting within a Flyway TOML configuration file. The 'source' is set to 'schemaModel', indicating the schema model folder as the prepare source. This configuration must be placed under the '[flyway.prepare]' subsection in the TOML file. It requires the Flyway tool to be set up to read from TOML configuration files and will be used as part of the prepare command's execution context.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Prepare Namespace/Flyway Prepare Source Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.prepare]\nsource = \"schemaModel\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Mixed Mode in Flyway Properties Configuration File\nDESCRIPTION: Example of enabling the mixed mode parameter in a standard Flyway properties configuration file. When set to true, it allows migrations to contain both transactional and non-transactional statements.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Mixed Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.mixed=true\n```\n\n----------------------------------------\n\nTITLE: Setting majorTolerance via Properties Configuration File\nDESCRIPTION: Example of setting the majorTolerance to 3 in a properties-style configuration file using the fully qualified property name.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Major Tolerance Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.check.majorTolerance=3\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Schema and Authentication for BigQuery\nDESCRIPTION: Example Flyway configuration properties for Google BigQuery. 'flyway.schemas' should be set to the target BigQuery dataset name. 'flyway.user' and 'flyway.password' must be left empty because authentication is handled via the service account details provided in the JDBC connection URL.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Google BigQuery.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.schemas=<your data set>\nflyway.user=\nflyway.password=\n```\n\n----------------------------------------\n\nTITLE: Configuring diff artifact filename using TOML in Flyway\nDESCRIPTION: This snippet demonstrates how to set the 'artifactFilename' option in a Flyway TOML configuration file. It assigns 'artifact.diff' as the output file for the diff artifact, overriding the default setting.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DIff Namespace/Flyway Diff Artifact Filename Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.diff]\nartifactFilename = \"artifact.diff\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreDataSyncSchema in TOML\nDESCRIPTION: This snippet demonstrates how to set the ignoreDataSyncSchema option to 'true' in a Flyway TOML configuration file. Setting this option will cause Flyway to ignore all objects within the DataSync schema during database comparisons, typically used when working with Azure Data Sync.  The option is located within the redgateCompare.sqlserver.options.ignores section.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Data Sync Schema Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreDataSyncSchema = true\n```\n\n----------------------------------------\n\nTITLE: Setting changesSource in Flyway Properties Configuration File\nDESCRIPTION: Example of configuring the changesSource option to 'migrations' in a properties configuration file. This sets the deployment source for change reports to be based on migration files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Changes Source Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.check.changesSource=migrations\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Group via Environment Variable (Properties)\nDESCRIPTION: Explains how to configure the `flyway.group` parameter using an environment variable. Flyway recognizes environment variables prefixed with `FLYWAY_`, allowing `FLYWAY_GROUP=true` to set the parameter.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Group Setting.md#_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nFLYWAY_GROUP=true\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variable to Specify Flyway User\nDESCRIPTION: This snippet exemplifies setting the database user via an environment variable named 'FLYWAY_USER'. Setting this environment variable configures Flyway to use 'myuser' as the database username at runtime, supporting OS-level environment management.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment User Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_USER=myuser\n```\n\n----------------------------------------\n\nTITLE: Setting target version using Flyway API (Java)\nDESCRIPTION: Shows how to configure the `flyway.target` programmatically in Java using the `Flyway.configure()` builder pattern. The `.target()` method is used to specify the desired version before loading the configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Target Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .target(\"2.0\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Defining Aurora MySQL JDBC Connection Strings for Flyway\nDESCRIPTION: Provides the JDBC URL formats for connecting Flyway to an Aurora MySQL instance. Includes the standard format and the format for using the AWS Advanced JDBC Wrapper, highlighting required parameters like `usePipelineAuth=false` and `useBatchMultiSend=false` for Aurora compatibility. SSL can be enabled by adding `?useSsl=true`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Aurora MySQL.md#_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\njdbc:mysql://instance.region.rds.amazonaws.com:port/database?usePipelineAuth=false&useBatchMultiSend=false\n```\n\nLANGUAGE: Properties\nCODE:\n```\njdbc:aws-wrapper:mysql://instance.region.rds.amazonaws.com:port/database?usePipelineAuth=false&useBatchMultiSend=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Connect Retries via Maven\nDESCRIPTION: This XML snippet configures the `connectRetries` setting within a Maven `pom.xml` file. The `<configuration>` block defines Flyway's plugin configuration, and inside it `<connectRetries>10</connectRetries>`. This requires the Flyway Maven plugin in the project dependencies. This specifies the maximum number of times Flyway will retry the database connection.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Connect Retries Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <connectRetries>10</connectRetries>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting detectEncoding via PowerShell\nDESCRIPTION: This snippet shows how to set the `detectEncoding` option to `true` when running Flyway migrate command using PowerShell. It enables automatic file encoding detection for migrations executed during the migration process.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Detect Encoding Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n. flyway -detectEncoding=\"true\" migrate\n```\n\n----------------------------------------\n\nTITLE: Migrate via Command Line (Flyway)\nDESCRIPTION: Executes the Flyway migrate command to apply available migrations to the database. This command assumes that Flyway is configured correctly with the necessary connection details.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Migrate.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflyway migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Overrides - Command-line\nDESCRIPTION: This snippet shows how to set error overrides using the Flyway command-line tool. It specifies a particular error override using the `-errorOverrides` parameter. The command `clean` is then executed. No dependencies are explicitly mentioned; it relies on the Flyway CLI tool being installed and accessible.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Error Overrides Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -errorOverrides=\"STATE:12345:W\" clean\n```\n\n----------------------------------------\n\nTITLE: Enabling baselineOnMigrate in Flyway via Command-Line (PowerShell)\nDESCRIPTION: Sets the 'baselineOnMigrate' flag to true directly in the command-line when running Flyway migration. No external dependencies are required beyond Flyway's installed CLI. Passes the parameter as a command-line argument; outputs migration status to standard output. Accepts true or false values for the flag.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Baseline On Migrate Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nflyway -baselineOnMigrate=\"true\" migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Resolvers in Java API\nDESCRIPTION: Example of setting custom migration resolvers programmatically using the Flyway Java API. This uses the resolvers method in the configuration builder pattern.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Migration Resolvers Setting.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .resolvers(\"my.resolver.MigrationResolver\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Adding MariaDB Dependency - Maven (Redgate)\nDESCRIPTION: This XML snippet demonstrates how to add the MariaDB Flyway plugin to a Maven project using the Redgate repository.  The dependency allows Flyway to interact with a MariaDB database. The groupId, artifactId, and version are specified to retrieve the necessary libraries.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/MariaDB.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.redgate.flyway</groupId>\n    <artifactId>flyway-mysql</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Add Force Option in TOML Configuration\nDESCRIPTION: Configures Flyway to enable the force option for the add command by setting the 'force' key to true within the 'flyway.add' section of a TOML configuration file. This option makes Flyway overwrite existing files during the add process. The configuration must be saved in a proper TOML file used by Flyway during execution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Add Namespace/Flyway Add Force Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.add]\nforce = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway JDBC URL in Maven\nDESCRIPTION: Shows how to configure the database connection URL within the `<configuration>` section of the Flyway Maven plugin definition in a `pom.xml` file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment URL Setting.md#_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    <url>jdbc:h2:file:./target/foobar</url>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting baselineVersion with Flyway Java API\nDESCRIPTION: Demonstrates configuring the baselineVersion using the Flyway Java API. Suitable for applications embedding Flyway migrations programmatically. Requires the Flyway Java library and proper project setup. Users should call configure(), chain the baselineVersion('0.0') method, and invoke load() to apply settings.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Baseline Version Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .baselineVersion(\"0.0\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Configuring Placeholder Prefix in Java API\nDESCRIPTION: Sets the placeholderPrefix to \"$$\" using Flyway's Java API configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Prefix Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .placeholderPrefix(\"$$\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlMigrationSuffixes via Maven\nDESCRIPTION: This snippet demonstrates how to configure the `sqlMigrationSuffixes` parameter using Maven. It specifies multiple suffixes for SQL migration files, including `.sql`, `.pkg`, and `.pkb`. The suffixes are comma-separated and defined within the `<sqlMigrationSuffixes>` tag.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Migration Suffixes Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <sqlMigrationSuffixes>.sql,.pkg,.pkb</sqlMigrationSuffixes>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting failOnMissingLocations via Environment Variable\nDESCRIPTION: This snippet demonstrates how to set the `failOnMissingLocations` property to `true` using an environment variable. This configuration will cause Flyway to fail if any specified migration location does not exist during a migration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Fail On Missing Locations Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_FAIL_ON_MISSING_LOCATIONS=true\n```\n\n----------------------------------------\n\nTITLE: Validate via Maven - Bash\nDESCRIPTION: Executes the Flyway validate goal within a Maven project. This requires Flyway's Maven plugin to be configured in the pom.xml. The default phase for this goal is `pre-integration-test`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Validate.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn flyway:validate\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway Firebird Dependency with Gradle (Open Source Version)\nDESCRIPTION: Gradle dependency configuration for adding Firebird database support to a Java project using the open source version of Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Firebird.md#_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation \"org.flywaydb:flyway-firebird\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Flyway Init Command (Bash)\nDESCRIPTION: This snippet shows a command-line example of initializing a Flyway project. It uses the `init` command with parameters to specify the project name (`-name`), database type (`-databaseType`), and a custom filename for the main TOML settings file (`-fileName`), demonstrating the usage context of the discussed setting. Dependencies: Flyway executable installed and accessible in the path or current directory. Input: Command-line parameters. Output: A new Flyway project structure and a TOML settings file named `custom.toml`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Init Namespace/Flyway Init File Name Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway init -name=\"My Project\" -databaseType=\"sqlserver\" -fileName=\"custom.toml\"\n```\n\n----------------------------------------\n\nTITLE: Configure undoSqlMigrationPrefix in Maven Plugin (XML)\nDESCRIPTION: Shows how to set the `undoSqlMigrationPrefix` within the Flyway plugin configuration in a Maven `pom.xml` file. The setting is nested inside the `<configuration>` and `<pluginConfiguration>` elements.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Undo SQL Migration Prefix Setting.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    <pluginConfiguration>\n        <undoSqlMigrationPrefix>B</undoSqlMigrationPrefix>\n    </pluginConfiguration>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Adding Databricks support to Maven\nDESCRIPTION: This XML snippet demonstrates how to add the Flyway Databricks database support dependency to a Maven project. It includes the groupId, artifactId, and version (implicitly the latest) to ensure the necessary classes are available at compile and runtime.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Databricks.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-database-databricks</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Working Directory via Flyway Command-line - PowerShell\nDESCRIPTION: This snippet demonstrates how to specify the working directory for Flyway migrations via the command-line using PowerShell. The '-workingDirectory' parameter points Flyway to the specified folder for resolving all relative paths such as migration scripts and configuration files. The required input is the directory path, and the command outputs the standard Flyway operation result. Do not use this command if using a shell that is not compatible with PowerShell/CMD syntax.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Command-line Parameters/Working Directory Parameter.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -workingDirectory=\"my_project\" info\n```\n\n----------------------------------------\n\nTITLE: Setting Dapr URL in Maven POM\nDESCRIPTION: Sets the Dapr sidecar REST API URL in a Maven Project Object Model (POM) file. This approach is useful when integrating Flyway migrations into a Maven-based build process.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Dapr Namespace/Flyway Dapr URL Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <pluginConfiguration>\n        <daprUrl>http://localhost:3500/v1.0/secrets/my-secrets-store</daprUrl>\n    </pluginConfiguration>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Enabling OutOfOrder Migrations Using Flyway Java API\nDESCRIPTION: This Java snippet uses the Flyway API to configure and enable out-of-order migrations programmatically. It creates a Flyway configuration, sets 'outOfOrder' to true, and loads the configuration to apply it. Requires Flyway Java library in the classpath.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Out Of Order Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .outOfOrder(true)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Correct Ordering for Scoped Namespacing in PowerShell\nDESCRIPTION: Demonstrates two valid ways to order commands and parameters when using scoped namespacing in PowerShell. In both examples, the parameter ('-databaseType') correctly follows its associated verb ('init') before any other verbs appear, ensuring it's interpreted as 'flyway.init.databaseType'.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Command-line.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nflyway info init -databaseType=sqlserver \n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nflyway init -databaseType=sqlserver info \n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Locations Programmatically in Flyway (Java)\nDESCRIPTION: This example demonstrates using the Flyway Java API to set the migration locations before loading and executing migrations. The locations method accepts one or more location strings; here it sets a filesystem directory. Required dependency: Flyway Core library included in the project. Ensure that the target directory exists and contains valid SQL migration scripts.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Locations Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .locations(\"filesystem:./sql\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Callbacks Programmatically in Java API\nDESCRIPTION: Uses the Flyway Java API to configure callbacks by passing class names or packages to the .callbacks() method within the builder pattern. Allows programmatic setup of Flyway migrations with custom Java callback classes or packages, providing flexibility within Java applications.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Callbacks Setting.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nFlyway.configure()\n    .callbacks(\"my.callback.FlywayCallback\", \"my.package.to.scan\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Setting baselineOnMigrate via Flyway Environment Variable (Properties)\nDESCRIPTION: Sets 'baselineOnMigrate' using an environment variable, following the Flyway variable naming convention. The environment must support setting variables for subprocesses that launch Flyway. Accepts 'true' or 'false' as string values for activation.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Baseline On Migrate Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_BASELINE_ON_MIGRATE=true\n```\n\n----------------------------------------\n\nTITLE: Executing Flyway Info via Maven\nDESCRIPTION: Demonstrates how to invoke the Flyway 'info' command using the Flyway Maven plugin. This command is executed within a Maven project context where the Flyway plugin is configured in the `pom.xml` file. It prints migration details to the console.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Info.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn flyway:info\n```\n\n----------------------------------------\n\nTITLE: Configuring kerberosConfigFile in Java API\nDESCRIPTION: Example of setting the Kerberos configuration file path using the Java API. This approach is used when programmatically configuring and executing Flyway operations from Java code.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Kerberos Config File Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .kerberosConfigFile(\"/path/to/krb5.ini\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Assigning Flyway lockRetryCount via Environment Variable\nDESCRIPTION: Demonstrates setting the lockRetryCount by defining the environment variable FLYWAY_LOCK_RETRY_COUNT to 10. This environment variable approach allows configuring Flyway retry behavior outside of config files or CLI parameters.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Lock Retry Count Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_LOCK_RETRY_COUNT=10\n```\n\n----------------------------------------\n\nTITLE: MariaDB SQL Script Example\nDESCRIPTION: This SQL snippet demonstrates MariaDB SQL syntax, including comments, stored procedures, and placeholders. It provides an example of creating a table, a procedure, and then calling it. It also shows how MySQL comments directives generated by mysqldump can be included.  Placeholders are supported for dynamic values.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/MariaDB.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n/* Single line comment */\nCREATE TABLE test_data (\n value VARCHAR(25) NOT NULL,\n PRIMARY KEY(value)\n);\n\n/*\nMulti-line\ncomment\n*/\n\n-- MySQL procedure\nDELIMITER //\nCREATE PROCEDURE AddData()\n BEGIN\n   # MySQL-style single line comment\n   INSERT INTO test_data (value) VALUES ('Hello');\n END //\nDELIMITER;\n\nCALL AddData();\n\n-- MySQL comments directives generated by mysqlsump\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;\n/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;\n\n-- Placeholder\nINSERT INTO ${tableName} (name) VALUES ('Mr. T');\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway lockRetryCount in TOML Configuration File\nDESCRIPTION: This snippet shows how to configure the lockRetryCount parameter with a TOML configuration file under the [flyway] section. Setting it to 10 instructs Flyway to retry locking 10 times at 1-second intervals before giving up.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Lock Retry Count Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nlockRetryCount = 10\n```\n\n----------------------------------------\n\nTITLE: Setting skipDefaultCallbacks via Flyway Java API\nDESCRIPTION: Demonstrates configuring `skipDefaultCallbacks` programmatically using the Flyway Java API. The `skipDefaultCallbacks(true)` method is called on the `FluentConfiguration` object before loading the configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Skip Default Callbacks Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .skipDefaultCallbacks(true)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Configuring validateOnMigrate via TOML Configuration\nDESCRIPTION: This TOML configuration sets the `validateOnMigrate` option to `false`. The `validateOnMigrate` property is placed under the `flyway` section.  This method is used to configure Flyway through a TOML configuration file.  The dependency is the TOML configuration file and the expected output is the Flyway tool reading this configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Validate On Migrate Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nvalidateOnMigrate = false\n```\n\n----------------------------------------\n\nTITLE: Applying Changes to DB (CLI) - Shell\nDESCRIPTION: This snippet applies changes from a diff artifact to a target database using the Flyway CLI `prepare` and `deploy` commands. It applies a changeset to a specified environment.  Requires Flyway CLI version 11.0.0 or later and a Teams/Enterprise license.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Migrating from flyway-dev to flyway CLI.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nflyway prepare deploy \\\"-prepare.artifactFilename=C:\\Users\\redgate\\Documents\\TestFdCmdLine\\Temp\\artifact1\\\" \\\"-prepare.changes=VGFibGU6W2Rib10uW1Rlc3RUYWJsZV0\\\" -environment=prod\n```\n\n----------------------------------------\n\nTITLE: Specifying rulesLocation in Flyway properties configuration file\nDESCRIPTION: This code snippet illustrates how to configure the `rulesLocation` parameter in a properties format configuration file. This allows Flyway to use a user-defined rules directory during the check operation, overriding the default rules location.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Rules Location Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.check.rulesLocation=/my_rules_folder\n```\n\n----------------------------------------\n\nTITLE: Executing Baseline Command via Maven\nDESCRIPTION: Example of how to run the Flyway baseline command using Maven build tool.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Baseline.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn flyway:baseline\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Password in Properties Configuration File - properties\nDESCRIPTION: This snippet demonstrates how to configure the database password using the traditional .properties file format for Flyway configuration. The `flyway.password` key is used to specify the value.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Password Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nflyway.password=mysecretpassword\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway via gradle.properties File\nDESCRIPTION: Shows how to define Flyway configuration properties within a `gradle.properties` file. This provides a static way to configure the plugin outside the main build script, suitable for credentials or standard settings.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Gradle Task.md#_snippet_9\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.user=myUser\nflyway.password=mySecretPwd\n\n# List are defined as comma-separated values\nflyway.schemas=schema1,schema2,schema3\n\n# Individual placeholders are prefixed by flyway.placeholders.\nflyway.placeholders.keyABC=valueXYZ\nflyway.placeholders.otherplaceholder=value123\n```\n\n----------------------------------------\n\nTITLE: Generating Snapshot from Folder - Flyway CLI\nDESCRIPTION: This Bash snippet shows how to generate a Flyway snapshot from a schema snapshot folder. The `flyway snapshot` command is used with the `-source=schemaSnapshot` flag and the destination filename. This requires the Flyway CLI and a correctly structured schema snapshot folder. The output is a JSON file containing the snapshot.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Snapshot.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflyway snapshot -source=schemaSnapshot -filename=C:\\snapshot.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Resolver - Flyway TOML\nDESCRIPTION: This code block illustrates how to configure a specific resolver, in this case, the Hashicorp Vault resolver, within an environment's 'resolvers' namespace in a TOML file. It sets the URL, token, and engine details required for Flyway to connect and retrieve secrets from Vault.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[environments.development.resolvers.vault]\nurl = \"http://localhost:8200/v1\"\ntoken = \"abc.1234567890\"\nengineName = \"secret\"\nengineVersion = \"v2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlMigrationSeparator Using Java API\nDESCRIPTION: Uses the Flyway Java API to programmatically set the sqlMigrationSeparator to \"-\" during Flyway configuration. This method is suitable for Java-based applications or integrating Flyway into Java codebases.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Migration Separator Setting.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nFlyway.configure()\n    .sqlMigrationSeparator(\"-\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway lockRetryCount in Maven XML Configuration\nDESCRIPTION: Shows the XML snippet for specifying lockRetryCount in a Maven plugin configuration. The <lockRetryCount>10</lockRetryCount> tag sets Flyway to retry locking 10 times during the migration process triggered by Maven.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Lock Retry Count Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <lockRetryCount>10</lockRetryCount>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Using Config Files with Flyway Maven Plugin\nDESCRIPTION: Command-line examples showing how to specify custom config files for the Flyway Maven plugin using the flyway.configFiles system property. This allows pointing Flyway to one or more configuration files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Maven Goal.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n> mvn -Dflyway.configFiles=path/to/myAlternativeConfig.conf flyway:migrate\n```\n\n----------------------------------------\n\nTITLE: Configure undoSqlMigrationPrefix in TOML File (TOML)\nDESCRIPTION: Shows the syntax for setting the `undoSqlMigrationPrefix` within a Flyway configuration file written in the TOML format. The property is placed under the main `[flyway]` section.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Undo SQL Migration Prefix Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway]\nundoSqlMigrationPrefix = \"B\"\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway Dependency in Gradle (build.gradle)\nDESCRIPTION: This Groovy snippet demonstrates how to add the `flyway-core` dependency in a Gradle `build.gradle` file for Spring Boot integration. This allows Spring Boot to automatically manage Flyway database migrations. The version `{{ site.flywayVersion }}` is a placeholder.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Community Plugins and Integrations/Community Plugins and Integrations (Spring Boot).md#_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation \"org.flywaydb:flyway-core:{{ site.flywayVersion }}\"\n```\n\n----------------------------------------\n\nTITLE: Sample Flyway 'check' command with -changes flag in Bash\nDESCRIPTION: This snippet demonstrates how to run the Flyway 'check' command with the '-changes' flag in a Unix shell environment to generate a report of pending schema changes.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Using Flyway Check with SQL Server.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway check -changes\n```\n\n----------------------------------------\n\nTITLE: Setting tenantId via Flyway Command-line for Azure AD Interactive Resolver\nDESCRIPTION: This code snippet demonstrates how to specify the Azure Active Directory tenant ID using the Flyway CLI for the development environment. The tenantId parameter is passed directly as a command-line argument, replacing '{some GUID}' with the actual tenant GUID. It is essential for enabling Azure AD authentication for SQL Server projects via the command line.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Azure Active Directory Interactive Resolver/Azure Active Directory Interactive Resolver Tenant Id Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway info -environments.development.resolvers.azureAdInteractive.tenantId='{some GUID}'\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlMigrationSuffixes via Environment Variable\nDESCRIPTION: This snippet demonstrates how to configure the `sqlMigrationSuffixes` parameter using an environment variable. It specifies multiple suffixes for SQL migration files, including `.sql`, `.pkg`, and `.pkb`. The suffixes are comma-separated.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Migration Suffixes Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_SQL_MIGRATION_SUFFIXES=.sql,.pkg,.pkb\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output Format of Flyway diffText Command\nDESCRIPTION: Demonstrates the expected JSON output format of the diffText command which lists schema object differences. The JSON array 'differences' contains entries with unique change IDs, difference types (Add/Delete), object types (e.g., Table, View), and nested 'from' and 'to' objects specifying schema, name, and the DDL definition of the database objects before and after changes. This format enables programmatic parsing of structural database changes.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Diff Text.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"differences\" : [ {\n    \"id\" : \"MQuXdkRAEhEyd5TIPzVoCStUucA\",\n    \"differenceType\" : \"Add\",\n    \"objectType\" : \"Table\",\n    \"from\" : {\n      \"schema\" : \"Schema\",\n      \"name\" : \"table2\",\n      \"definition\" : \"CREATE TABLE Schema.table2 (\\n    id int NULL,\\n    name varchar(10) NULL\\n);\"\n    },\n    \"to\" : null\n  }, {\n    \"id\" : \"exY9fOdORvbrXOYNPoqMmifWlEA\",\n    \"differenceType\" : \"Add\",\n    \"objectType\" : \"View\",\n    \"from\" : {\n      \"schema\" : \"Schema\",\n      \"name\" : \"view1\",\n      \"definition\" : \"CREATE VIEW Schema.view1 AS select `Schema`.`table1`.`id` AS `id`,`Schema`.`table1`.`name` AS `name` from `Schema`.`table1`;\"\n    },\n    \"to\" : null\n  }, {\n    \"id\" : \"K5GPl1kQtgirPltRFC265Oni42M\",\n    \"differenceType\" : \"Delete\",\n    \"objectType\" : \"Table\",\n    \"from\" : null,\n    \"to\" : {\n      \"schema\" : \"Schema\",\n      \"name\" : \"table3\",\n      \"definition\" : \"CREATE TABLE Schema.table3 (\\n    id int NULL,\\n    name varchar(15) NULL\\n);\"\n    }\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Versioned Migration Script with Auto-Generated Filename in Console\nDESCRIPTION: Console example showing how to generate a versioned migration script with an automatically assigned filename using the generate command with the -outputType=json parameter. The example illustrates the state of the migrations directory before and after generation, and shows the resulting JSON output indicating the newly created migration file path.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Generate.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n> flyway generate -outputType=json\n\nFlyway {{ site.flywayVersion }} by Redgate\n\n{\n  \"output\" : [ {\n    \"location\" : \"C:\\\\Users\\\\FlywayUser\\\\Project\\\\migrations\\\\V003.sql\",\n    \"configPath\" : null,\n    \"includedDependencies\" : [ ],\n    \"messages\" : [ ]\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Migration Type via Command-line in Bash\nDESCRIPTION: Demonstrates how to specify the migration type (e.g., \"versioned\") when using the `flyway add` command via the command-line interface using the `-type` flag. This overrides any configuration file setting or default for this specific command execution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Add Namespace/Flyway Add Type Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway add -type=\"versioned\"\n```\n\n----------------------------------------\n\nTITLE: Setting `skipDefaultResolvers` in Properties Configuration File\nDESCRIPTION: Illustrates how to set the `skipDefaultResolvers` option in a standard Java Properties configuration file (e.g., `flyway.conf`). Set the property `flyway.skipDefaultResolvers` to `true` to persistently configure this behavior.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Skip Default Resolvers Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.skipDefaultResolvers=true\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlMigrationSeparator via PowerShell Command\nDESCRIPTION: Sets the sqlMigrationSeparator parameter to \"-\" when executing Flyway via PowerShell, impacting how versioned SQL migration files are recognized and ordered. Requires Flyway CLI installed; executes a command with the specified separator.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Migration Separator Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway -sqlMigrationSeparator=\"-\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Check Fail on Drift in Properties\nDESCRIPTION: This properties snippet shows how to configure the flyway.check.failOnDrift option to true in a properties configuration file. This will cause Flyway to exit with an error if drift is detected during a check operation.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Fail On Drift Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.check.failOnDrift=true\n```\n\n----------------------------------------\n\nTITLE: Setting failOnMissing flag via PowerShell command-line for Flyway\nDESCRIPTION: This snippet demonstrates how to set the flyway.tags.failOnMissing property to false using the command-line interface to run Flyway commands, specifically the 'info' command. It allows ignoring missing migrations without causing errors during execution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Tags Namespace/Flyway Tags Fail On Missing Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway \"-tags.failOnMissing=false\" info\n```\n\n----------------------------------------\n\nTITLE: Setting Dapr URL in TOML Configuration File\nDESCRIPTION: Configures the Dapr sidecar REST API URL in a TOML configuration file for Flyway. This approach allows you to persist the configuration across multiple executions.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Dapr Namespace/Flyway Dapr URL Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.dapr]\nurl = \"http://localhost:3500/v1.0/secrets/my-secrets-store\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway with Spring to include Java-based Migration Beans\nDESCRIPTION: This snippet demonstrates how to configure Flyway in a Spring application context to include JavaMigration beans discovered by the Spring container using ApplicationContext, enabling dependency injection and custom migration logic. It requires importing Flyway and Spring context classes, obtaining the application context, and configuring Flyway with the javaMigrations method.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/API (Java)/API Hooks.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nimport org.flywaydb.core.Flyway;\nimport org.flywaydb.core.api.migration.JavaMigration;\nimport org.springframework.context.ApplicationContext;\n\n... // obtain a reference to Spring's ApplicationContext.\n\nFlyway flyway = Flyway.configure()\n    .dataSource(url, user, password)\n    // Add all Spring-instantiated JavaMigration beans\n    .javaMigrations(applicationContext.getBeansOfType(JavaMigration.class).values().toArray(new JavaMigration[0]))\n    .load();\nflyway.migrate();\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependency Configuration for Flyway Oracle Support (Open Source Version)\nDESCRIPTION: Gradle configuration to add the Open Source Flyway Oracle database support as a dependency to your Java project.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Oracle Database.md#_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation \"org.flywaydb:flyway-database-oracle\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Separator via Flyway CLI (PowerShell)\nDESCRIPTION: Demonstrates how to configure the placeholder separator using the `-placeholderSeparator` command-line argument when invoking Flyway. This example sets the separator to '_'.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Separator Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -placeholderSeparator=\"_\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Clickhouse Cluster Name in Gradle\nDESCRIPTION: This Groovy snippet shows the syntax for configuring the ClickHouse cluster name within the Flyway plugin block in a Gradle build script. The setting is applied via the `pluginConfiguration` map.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Clickhouse Namespace/Flyway Clickhouse Cluster Name Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    pluginConfiguration = [\n        clickhouseClusterName: 'example_cluster'\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting skipDefaultCallbacks in Properties Configuration File\nDESCRIPTION: Illustrates how to set the `flyway.skipDefaultCallbacks` parameter to `true` in a standard Flyway properties configuration file. This disables the execution of default built-in SQL callbacks.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Skip Default Callbacks Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.skipDefaultCallbacks=true\n```\n\n----------------------------------------\n\nTITLE: Configuring OutOfOrder Migrations in Flyway Gradle Plugin\nDESCRIPTION: This Groovy snippet configures the Flyway Gradle plugin to enable out-of-order migrations by setting 'outOfOrder' to true within the 'flyway' DSL block. It assumes the Gradle project is correctly set up with Flyway plugin applied.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Out Of Order Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    outOfOrder = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring failOnMissingLocations in Gradle\nDESCRIPTION: This snippet illustrates configuring the `failOnMissingLocations` property to `true` within a Gradle build file. When set to true, Flyway will halt the migration process if any specified migration location is not found during a Gradle task.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Fail On Missing Locations Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    failOnMissingLocations = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway encoding in Maven build configuration\nDESCRIPTION: Demonstrates how to specify the encoding in a Maven plugin configuration to ensure that Flyway migrations during Maven builds use the correct encoding.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Encoding Setting.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n  <encoding>UTF-16</encoding>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Disabling Community DB Support using Flyway Java API\nDESCRIPTION: Shows how to programmatically disable community database support by calling the `communityDBSupportEnabled(false)` method on a `Flyway.configure()` builder instance in Java before loading the configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Community DB Support Enabled Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .communityDBSupportEnabled(false)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: MySQL Configuration for Create-Database Provisioner\nDESCRIPTION: This TOML snippet demonstrates Flyway setup for MySQL, configuring the create-database provisioner with the database name specified in the JDBC URL to ensure automatic creation if missing.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Provisioner Setting/Create Database Provisioner.md#_snippet_2\n\nLANGUAGE: Toml\nCODE:\n```\n[environments.shadow]\nurl = \"jdbc:mysql://localhost:3306/my_database?useSSL=false\"\nuser = \"MyUser\"\npassword = \"${localSecret.MyPasswordKey}\"\nprovisioner = \"create-database\"\n```\n\n----------------------------------------\n\nTITLE: Flyway Maven Configuration\nDESCRIPTION: Configures the Oracle Kerberos cache file within a Maven pom.xml file. The `<oracleKerberosCacheFile>` element is set within the `<configuration>` section of the Flyway plugin. This configuration is applied when Flyway goals are executed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle Kerberos Cache File Setting.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    <oracleKerberosCacheFile>/temp/krb5cc_123</oracleKerberosCacheFile>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Script Generation Target in TOML Configuration File - TOML\nDESCRIPTION: This snippet exemplifies how to declare the 'target' under the 'flyway.generate' section in a TOML configuration file. While it is typically not advisable to define this in configuration files, the setting can be used to specify the target for script generation, aligning with diff source or target names. This configuration must be parsed by Flyway to influence generation behavior.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Target Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.generate]\ntarget = \"schemaModel\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Client ID in TOML File for Flyway\nDESCRIPTION: This snippet shows how to specify the Azure Active Directory client ID in a TOML configuration file for the development environment. The setting allows Flyway to use the specified client ID for Azure AD client resolution during migration operations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Azure Active Directory Interactive Resolver/Azure Active Directory Interactive Resolver Client Id Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development.resolvers.azureAdInteractive]\nclientId = \"{some GUID}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring baselineVersion for Flyway via Environment Variable\nDESCRIPTION: Defines the baselineVersion to '0.0' using an environment variable, which Flyway will recognize during execution. This requires the environment variable to be exported or set in the operating system before running Flyway. It is suitable for automated environments or system-wide settings.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Baseline Version Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_BASELINE_VERSION=0.0\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Table in Properties Configuration\nDESCRIPTION: Illustrates configuring the Flyway schema history table name in a standard Java properties configuration file using the `flyway.table` key.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Table Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.table=my_schema_history_table\n```\n\n----------------------------------------\n\nTITLE: Generating Versioned Migration Script (Flyway CLI)\nDESCRIPTION: Demonstrates how to generate a new versioned migration script using the Flyway `add` command. The command automatically determines the next migration version based on existing files. The `-description` parameter is used to set the description part of the migration name. Requires Flyway CLI to be installed and configured.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Add.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> flyway add -description=feature_B\n```\n\n----------------------------------------\n\nTITLE: Defining Migration Tags Using TOML Configuration for Flyway\nDESCRIPTION: Defines tags for Flyway migrations in a TOML configuration format, mapping each migration version to a list of tags. This allows filtering migrations based on specified tags using the allOf condition.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Tags Namespace/Flyway Tags All Of Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.tags.definitions]\n\"0.1\" = [\"tagA\"]\n\"0.2\" = [\"tagB\"]\n\"0.3\" = [\"tagC\", \"tagB\"]\n```\n\n----------------------------------------\n\nTITLE: Flyway Info Output (Post-Compile) - Console Output\nDESCRIPTION: Displays the output of the `mvn flyway:info` command after compiling the Java migration. It shows that the new `V3__Anonymize` migration is detected and listed with a 'Pending' state and 'JDBC' type.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Java-based Migrations.md#_snippet_5\n\nLANGUAGE: Console Output\nCODE:\n```\n[INFO] Database: jdbc:h2:file:./target/foobar (H2 1.4)\n[INFO]\n+-----------+---------+---------------------+------+---------------------+---------+\n| Category  | Version | Description         | Type | Installed On        | State   |\n+-----------+---------+---------------------+------+---------------------+---------+\n| Versioned | 1       | Create person table | SQL  | 2017-12-22 15:26:39 | Success |\n| Versioned | 2       | Add people          | SQL  | 2017-12-22 15:28:17 | Success |\n| Versioned | 3       | Anonymize           | JDBC |                     | Pending |\n+-----------+---------+---------------------+------+---------------------+---------+\n```\n\n----------------------------------------\n\nTITLE: Configuring Placeholder Separator in Gradle Build Script (Groovy)\nDESCRIPTION: Shows how to set the placeholder separator within a Gradle build script using the Flyway Gradle plugin. The `placeholderSeparator` property is assigned the value '_' inside the `flyway` configuration block.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Separator Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    placeholderSeparator = '_'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dapr Secrets via Command-line - Flyway - PowerShell\nDESCRIPTION: This command demonstrates how to configure Flyway to use secrets from a Dapr Secret Store directly through the command-line interface using PowerShell. It sets the \"-dapr.secrets\" argument with a comma-separated list of secret names. Dependencies include Flyway CLI and access to a properly configured Dapr secret store. The expected input is the parameter with one or more secret identifiers, and Flyway will use the last secret's value if duplicates exist. Output is the standard Flyway info command output with configurations applied from the specified secrets.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Dapr Namespace/Flyway Dapr Secrets Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -dapr.secrets=\"secret1,secret2\" info\n```\n\n----------------------------------------\n\nTITLE: Command-line Usage of flyway prepare with scriptFilename\nDESCRIPTION: Demonstrates how to invoke Flyway's prepare command from the terminal, specifying the script filename using the -scriptFilename option. This approach prepares a deployment script and outputs it accordingly.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Prepare Namespace/Flyway Prepare Script Filename Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway prepare -scriptFilename=\"output.sql\"\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway SingleStoreDB Dependency (Open Source) in Maven XML\nDESCRIPTION: Maven XML dependency configuration to include the open-source version of the Flyway SingleStoreDB support library in a Java project. The specific version is dynamically inserted based on the site's `flywayVersion` variable. This dependency is typically fetched from Maven Central.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/SingleStoreDB.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-singlestore</artifactId>\n    <version>{{ site.flywayVersion }}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Flyway Undo with cherryPick (Command Line)\nDESCRIPTION: This snippet shows how to use the `cherryPick` option to undo a specific migration. It shows how to undo migration `V2` while skipping `V1` and `V3`. Requires undo migrations to be available.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Cherry Pick Setting.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nflyway undo -cherryPick=\"2\"\n```\n\n----------------------------------------\n\nTITLE: Configure undoSqlMigrationPrefix in Gradle Plugin (Groovy)\nDESCRIPTION: Provides an example of configuring the `undoSqlMigrationPrefix` within the Flyway plugin block in a Gradle build script written in Groovy. The setting is included within the `pluginConfiguration` map.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Undo SQL Migration Prefix Setting.md#_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    pluginConfiguration = [\n        undoSqlMigrationPrefix = 'B'\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway buildUser in TOML Configuration File\nDESCRIPTION: Shows the configuration syntax for specifying the 'buildUser' parameter in a Flyway TOML configuration file under the '[flyway.check]' section. This sets the username for the build database when running Flyway commands that reference this config. The input is a string value for buildUser; Flyway reads this during initialization to authenticate using this username. Requires Flyway to support TOML config format.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Build User Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.check]\nbuildUser = \"sa\"\n```\n\n----------------------------------------\n\nTITLE: Setting Build Password - Configuration File\nDESCRIPTION: This example demonstrates setting the `flyway.check.buildPassword` property within a standard configuration file. This allows the password to be set and used when connecting to the database.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Build Password Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.check.buildPassword=\"mypassword\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Secrets in TOML Configuration - Flyway - TOML\nDESCRIPTION: This configuration snippet shows how to specify an array of Dapr secret names in a Flyway TOML configuration file. The \"secrets\" array under the \"[flyway.dapr]\" section lists the desired secrets. The file must be parsed by Flyway, and secrets are referenced by name as stored in the Dapr secret store. Each array item is an individual secret source to be considered in Flyway’s configuration process.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Dapr Namespace/Flyway Dapr Secrets Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.dapr]\nsecrets = [\"secret1\", \"secret2\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring snapshot.filename via TOML file in Flyway\nDESCRIPTION: Demonstrates setting the snapshot.filename parameter within a TOML configuration file. Users specify the filename for the snapshot in the [flyway] section, which is used by Flyway during execution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Snapshot Namespace/Flyway Snapshot Filename Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway]\nsnapshot.filename = \"flyway_snapshot.snp\"\n```\n\n----------------------------------------\n\nTITLE: Adding MariaDB Dependency - Gradle (Open Source)\nDESCRIPTION: This Groovy snippet demonstrates adding the MariaDB Flyway plugin to a Gradle project using the open source Flyway.  The `implementation` configuration adds the `flyway-mysql` dependency to the project, which is necessary for using MariaDB with Flyway. It automatically handles the resolution of dependencies.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/MariaDB.md#_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation \"org.flywaydb:flyway-mysql\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Table in Maven POM (XML)\nDESCRIPTION: Demonstrates configuring the Flyway schema history table name within a Maven `pom.xml` file inside the `<configuration>` section of the Flyway plugin definition using the `<table>` element.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Table Setting.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    <table>my_schema_history_table</table>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Gradle configuration for Flyway GCSM secrets\nDESCRIPTION: Specifies GCSM secrets in a Gradle build script within the Flyway plugin configuration. It allows integrating secrets management into build automation pipelines for consistent project setups.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Google Cloud Secret Manager Namespace/Flyway Google Cloud Secret Manager Secrets Setting.md#_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    pluginConfiguration = [\n        gcsmSecrets: ['secret1', 'secret2']\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Output from Flyway Model Command - JSON\nDESCRIPTION: This JSON output is returned after running the Flyway 'model' command. It lists informational messages, included dependencies, and the files changed in the schema model. The 'filesChanged' array will contain the relative or absolute paths to any schema model components modified by the operation. This result conforms to Flyway’s standard command output convention.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Model.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\" : [ ],\n  \"includedDependencies\" : [ ],\n  \"filesChanged\" : [ \"C:\\\\Users\\\\Project\\\\schema-model\\\\MySchema\\\\Tables\\\\country.rgm\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for Flyway Oracle Support (Redgate Version)\nDESCRIPTION: XML configuration to add the Redgate Flyway Oracle database support as a Maven dependency to your Java project.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Oracle Database.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.redgate.flyway</groupId>\n    <artifactId>flyway-database-oracle</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Deploy Script Filename - TOML Configuration\nDESCRIPTION: This TOML configuration snippet illustrates how to set the `scriptFilename` property within a `flyway.deploy` section of a TOML configuration file. It defines the filename to \"output.sql\".  This configuration option allows setting the script file path via a configuration file, and is typically used instead of the command line option.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Deploy Namespace/Flyway Deploy Script Filename Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.deploy]\nscriptFilename = \"output.sql\"\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway SAP HANA Dependency (Maven - Redgate)\nDESCRIPTION: XML snippet to declare the Redgate Flyway SAP HANA database support dependency in a Maven project's pom.xml file. This adds SAP HANA specific features to Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/SAP HANA (Including SAP HANA Cloud).md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.redgate.flyway</groupId>\n    <artifactId>flyway-database-saphana</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Clickhouse Zookeeper Path via Flyway Java API\nDESCRIPTION: Demonstrates configuring the Clickhouse Zookeeper path programmatically using the Flyway Java API. It retrieves the `ClickHouseConfigurationExtension` from the plugin registry and uses the `setZookeeperPath` method to set the desired path.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Clickhouse Namespace/Flyway Clickhouse Zookeeper Path Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nClickHouseConfigurationExtension clickHouseConfigurationExtension = configuration.getPluginRegister().getPlugin(ClickHouseConfigurationExtension.class);\nclickHouseConfigurationExtension.setZookeeperPath(\"/clickhouse/tables/{shard}/{database}/{table}\");\n```\n\n----------------------------------------\n\nTITLE: Configuring trimTrailingSpaces Option in TOML Configuration File for Oracle Data Comparison\nDESCRIPTION: This snippet demonstrates how to enable the trimTrailingSpaces option in a TOML configuration file for Flyway Oracle data comparisons. When set to true, the system will ignore trailing spaces when comparing string data.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Data Comparison Options Namespace/Oracle Data Trim Trailing Spaces Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.data.options.comparison]\ntrimTrailingSpaces = true\n```\n\n----------------------------------------\n\nTITLE: Running Generated Migration Scripts on Production with Flyway migrate (Bash)\nDESCRIPTION: This example applies generated migration scripts to a production database using the 'flyway migrate' command. By specifying '-baselineOnMigrate=true', the schema history is initialized if necessary. The command validates existing migrations, creates the history table if missing, baselines the schema, and applies outstanding scripts. Requires correct environment configuration, necessary privileges, and that migrations exist on disk. Outputs include a live log of each migration step.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Flyway Desktop migrations workflow with Flyway CLI.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nflyway migrate -baselineOnMigrate=true -environment=prod\n\nFlyway Enterprise Edition {{ site.flywayVersion }} by Redgate\nLicensed to red-gate.com (license ID 1174ed6b-b10e-41bd-9a1b-285ddc3239c7)\n\nSee release notes here: https://rd.gt/416ObMi\n\nFlyway Pipelines are not active for this project. Learn more here: https://flyway.red-gate.com\nSchema history table [Prod2].[dbo].[flyway_schema_history] does not exist yet\nSuccessfully validated 5 migrations (execution time 00:00.040s)\nCreating Schema History table [Prod2].[dbo].[flyway_schema_history] with baseline ...\nSuccessfully baselined schema with version: 1\nCurrent version of schema [dbo]: 1\nMigrating schema [dbo] to version \"002.20241210110201 - NewTableAdded\"\nMigrating schema [dbo] to version \"003.20241210113916 - TestTable1\"\nSuccessfully applied 2 migrations to schema [dbo], now at version v003.20241210113916 (execution time 00:00.023s)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Placeholder Suffix in TOML File\nDESCRIPTION: Shows how to define the `placeholderSuffix` property within a Flyway configuration file using the TOML format. This sets the placeholder suffix for the project when this configuration file is used.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Suffix Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nplaceholderSuffix = \"$$\"\n```\n\n----------------------------------------\n\nTITLE: Configuring oracleSqlPlusWarn in a Configuration File\nDESCRIPTION: This snippet shows how to set the `oracleSqlPlusWarn` option within a Flyway configuration file (e.g., flyway.conf). Setting `flyway.oracle.sqlplusWarn=true` will make Flyway issue warnings instead of errors for unsupported Oracle SQL*Plus statements.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle SQLPlus Warn Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.oracle.sqlplusWarn=true\n```\n\n----------------------------------------\n\nTITLE: Flyway Migrate with cherryPick (Command Line)\nDESCRIPTION: This snippet shows how to use the `cherryPick` option to migrate specific versions using the Flyway command line. It shows how to migrate versions `V1` and `V3` while skipping `V2`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Cherry Pick Setting.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nflyway migrate -cherryPick=\"1,3\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Overrides - Maven\nDESCRIPTION: This snippet shows how to configure error overrides using Maven in the `pom.xml` file.  It configures the Flyway plugin with a `<configuration>` section, and within that, it sets the `<errorOverrides>` tag to a given value. This requires the Flyway Maven plugin to be configured in the `pom.xml`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Error Overrides Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n  <errorOverrides>STATE:12345:W</errorOverrides>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Maven configuration for Flyway GCSM secrets\nDESCRIPTION: Defines GCSM secrets in a Maven plugin configuration block within the POM file. This method supports Maven-based build processes where secrets need to be injected during the migration plugin execution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Google Cloud Secret Manager Namespace/Flyway Google Cloud Secret Manager Secrets Setting.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    <pluginConfiguration>\n        <gcsmSecrets>secret1,secret2</gcsmSecrets>\n    </pluginConfiguration>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Group in Gradle (Groovy)\nDESCRIPTION: Shows how to configure the `flyway.group` parameter within a Gradle build script. The `group = true` setting is placed inside the `flyway` configuration block.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Group Setting.md#_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    group = true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting `skipDefaultResolvers` using Flyway Java API\nDESCRIPTION: Provides a Java code snippet demonstrating how to configure `skipDefaultResolvers` programmatically using the Flyway API. Invoke the `skipDefaultResolvers(true)` method on the `FluentConfiguration` object obtained from `Flyway.configure()` before loading or executing Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Skip Default Resolvers Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .skipDefaultResolvers(true)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Configuring kerberosConfigFile in properties configuration file\nDESCRIPTION: Example of setting the Kerberos configuration file path in a Flyway properties configuration file. This uses the standard Java properties file format for configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Kerberos Config File Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.kerberosConfigFile=/path/to/krb5.ini\n```\n\n----------------------------------------\n\nTITLE: Configuring Change ID Input (Flyway, TOML)\nDESCRIPTION: This TOML configuration snippet demonstrates how to configure Flyway to read change IDs from standard input. The `changes = [\"-\"]` line specifies that the changes should be read from stdin. This approach is generally less common. Requires a TOML parser and Flyway's configuration to be set up to read from a TOML file. The effect is to make the generate command read from stdin.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Changes Setting.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.generate]\nchanges = [\"-\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlMigrationSuffixes via Java API\nDESCRIPTION: This snippet demonstrates how to configure the `sqlMigrationSuffixes` parameter using the Flyway Java API. It specifies multiple suffixes for SQL migration files, including `.sql`, `.pkg`, and `.pkb`. The suffixes are comma-separated and passed to the `sqlMigrationSuffixes()` method.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Migration Suffixes Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .sqlMigrationSuffixes(\".sql,.pkg,.pkb\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Flyway Migrate with outOfOrder (Command Line)\nDESCRIPTION: This snippet shows how to use the `outOfOrder` option to migrate migrations regardless of their version order.  It's used in conjunction with cherryPick to migrate skipped versions later.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Cherry Pick Setting.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nflyway migrate -outOfOrder=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Group Parameter via Command-line (Powershell)\nDESCRIPTION: Demonstrates how to set the `group` parameter to `true` directly on the Flyway command line using the `-group` flag. This example applies the setting specifically when executing the `info` command.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Group Setting.md#_snippet_0\n\nLANGUAGE: Powershell\nCODE:\n```\n./flyway -group=\"true\" info\n```\n\n----------------------------------------\n\nTITLE: Java API configuration for validateMigrationNaming\nDESCRIPTION: Uses the Flyway Java API to programmatically enable filename validation. Calling `.validateMigrationNaming(true)` configures Flyway to enforce correct migration file naming before loading migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Validate Migration Naming Setting.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nFlyway.configure()\n    .validateMigrationNaming(true)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Setting flyway.check.nextSnapshot in TOML Configuration\nDESCRIPTION: Example of how to configure the nextSnapshot parameter in a TOML configuration file under the flyway.check section.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Next Snapshot Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.check]\nnextSnapshot = \"my_snapshot\"\n```\n\n----------------------------------------\n\nTITLE: Setting flyway.check.nextSnapshot in Command-line\nDESCRIPTION: Example of how to set the check.nextSnapshot parameter when running the check command with the -changes option from the Flyway command-line interface.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Next Snapshot Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway check -changes -url=\"jdbc://url\" -check.nextSnapshot=\"my_snapshot\"\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Table in Gradle Build Script (Groovy)\nDESCRIPTION: Shows how to configure the Flyway schema history table name within a Gradle build script (`build.gradle`) using the `flyway` extension block and setting the `table` property.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Table Setting.md#_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    table = 'my_schema_history_table'\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Dry Run Script with H2 (Java Command)\nDESCRIPTION: Executes the generated dryrun.sql file directly against the H2 database using the H2 RunScript tool. This is an alternative method to apply the changes reviewed during the dry run, bypassing the standard Flyway migrate command for the application step.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Dry Runs.md#_snippet_5\n\nLANGUAGE: Java Command\nCODE:\n```\njava -cp drivers/* org.h2.tools.RunScript -url jdbc:h2:file:./foobardb -script dryrun.sql\n```\n\n----------------------------------------\n\nTITLE: Setting `flyway.check.filterFile` in Properties Configuration\nDESCRIPTION: Shows how to configure the filter file (`Filters.scpf`) for the `flyway check` operation within a standard Flyway properties configuration file using the `flyway.check.filterFile` key. Flyway will use this file when `flyway check` is executed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Filter File Setting.md#_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.check.filterFile=\"Filters.scpf\"\n```\n\n----------------------------------------\n\nTITLE: Setting kerberosConfigFile through environment variable\nDESCRIPTION: Example of setting the Kerberos configuration file path using an environment variable. This allows configuration without modifying application code or configuration files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Kerberos Config File Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_KERBEROS_CONFIG_FILE=/path/to/krb5.ini\n```\n\n----------------------------------------\n\nTITLE: Configuring Duplicate Table Storage Settings in TOML Configuration File\nDESCRIPTION: This snippet shows how to configure the forbidDuplicateTableStorageSettings option in a TOML configuration file for Flyway. When set to true, it prevents specifying storage settings on both a table and its clustered index/constraints.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Behavior Options Namespace/SQL Server Forbid Duplicate Table Storage Settings Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.behavior]\nforbidDuplicateTableStorageSettings = true\n```\n\n----------------------------------------\n\nTITLE: Enabling Drop/Recreate of PKs, Indexes, and UCs in TOML\nDESCRIPTION: This TOML configuration snippet demonstrates how to enable the dropping and subsequent recreation of primary keys, indexes, and unique constraints during data deployment. Setting `dropPrimaryKeysIndexesAndUniqueConstraints` to `true` within the `[redgateCompare.sqlserver.data.options.deployment]` section activates this behavior.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Data Deployment Options Namespace/SQL Server Data Drop Primary Keys Indexes And Constraints Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.data.options.deployment]\ndropPrimaryKeysIndexesAndUniqueConstraints = true\n```\n\n----------------------------------------\n\nTITLE: Setting target version with Flyway Environment Variable (Shell)\nDESCRIPTION: Illustrates how to configure the `flyway.target` property using an environment variable named `FLYWAY_TARGET`. Flyway automatically picks up configuration properties set as environment variables.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Target Setting.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nFLYWAY_TARGET=2.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Callbacks via Maven POM\nDESCRIPTION: Defines the 'callbacks' element within the Flyway Maven plugin configuration as a comma-separated string of class names or packages. Supports project build setups with Maven, allowing Flyway to load Java callbacks during database migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Callbacks Setting.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    <callbacks>my.callback.FlywayCallback,my.package.to.scan</callbacks>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Flyway Command-line Tablespace Configuration (PowerShell)\nDESCRIPTION: Configures the Flyway tablespace via the command line using PowerShell. The `tablespace` parameter specifies the tablespace to use for creating the schema history table.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Tablespace Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -tablespace=\"xyz\" info\n```\n\n----------------------------------------\n\nTITLE: Initializing Flyway Project Name Using Command-line - Bash\nDESCRIPTION: This snippet demonstrates initializing a Flyway project and explicitly setting the project name via the command-line. It requires the Flyway CLI to be installed on your system. The '-name' parameter configures the project name in the generated configuration, and '-databaseType' specifies the database technology. The command should be executed from a terminal; users should replace 'My Project' and the database type as appropriate. Output is project initialization with the specified settings.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Init Namespace/Flyway Init Project Name Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway init -name=\"My Project\" -databaseType=\"sqlserver\"\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Maven Dependency Configuration for Redgate Flyway\nDESCRIPTION: Maven configuration to add PostgreSQL database support for Redgate Flyway. This dependency is required to enable PostgreSQL integration in Java projects.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/PostgreSQL Database.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.redgate.flyway</groupId>\n    <artifactId>flyway-database-postgresql</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLID via Properties\nDESCRIPTION: This snippet demonstrates configuring the `db2z.sqlId` property within a properties file. This property specifies the SQLID that will be used by Flyway for DB2z database interaction. The value is set to `example_group`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DB2 zOS Namespace/Flyway Db2 zOS SQL ID Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.db2z.sqlId=\"example_group\"\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway initSql via Command Line (Named Environment) - PowerShell\nDESCRIPTION: This snippet shows how to override the `initSql` parameter for a specific named environment (e.g., `sample`) when using a TOML configuration file. The configuration is passed as a command-line argument, applying only to the targeted environment for the specified Flyway command. Requires access to the Flyway command-line executable and a TOML config.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Init SQL Setting.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway \"-environments.sample.initSql=ALTER SESSION SET NLS_LANGUAGE='ENGLISH';\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring kerberosConfigFile in Maven POM\nDESCRIPTION: Example of setting the Kerberos configuration file path in a Maven POM XML file. This configuration works with the Flyway Maven plugin for database migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Kerberos Config File Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <kerberosConfigFile>/path/to/krb5.ini</kerberosConfigFile>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Options in Flyway using TOML\nDESCRIPTION: This TOML configuration snippet sets the `includeStorageLobsAndVarrays` option to `true`. This instructs Flyway to include LOB and VARRAY clauses during schema comparisons.  It is applicable only when using a TOML configuration file for Flyway. The section `redgateCompare.oracle.options.storage` is required for this configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Storage Options Namespace/Oracle Include Storage Lobs And Varrays Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.storage]\nincludeStorageLobsAndVarrays = true\n```\n\n----------------------------------------\n\nTITLE: Flyway Environment Variable Token Configuration\nDESCRIPTION: Shows how to configure the Flyway token using environment variables. The `FLYWAY_EMAIL` and `FLYWAY_TOKEN` environment variables are set to the email address and token respectively. Using environment variables is a safer alternative to storing credentials directly in code.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Token Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_EMAIL=foo.bar@red-gate.com\nFLYWAY_TOKEN=1234ABCD\n```\n\n----------------------------------------\n\nTITLE: Setting oracleSqlPlusWarn via Environment Variable\nDESCRIPTION: This snippet illustrates how to configure `oracleSqlPlusWarn` using an environment variable. Setting `FLYWAY_ORACLE_SQLPLUS_WARN=true` will cause Flyway to issue warnings instead of errors for unsupported Oracle SQL*Plus statements.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle SQLPlus Warn Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_ORACLE_SQLPLUS_WARN=true\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway License Key in Properties Configuration File\nDESCRIPTION: This snippet illustrates specifying the Flyway license key in a standard Java properties file format. It sets the 'flyway.licenseKey' property to a valid Teams license key string. Flyway reads this property during initialization, enabling Teams features when this configuration file is loaded.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway License Key Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.licenseKey=FL01...\n```\n\n----------------------------------------\n\nTITLE: Setting Oracle Edition in TOML Configuration File\nDESCRIPTION: TOML configuration example showing how to set the Oracle edition for Redgate Compare in Flyway. This setting must be configured in a TOML file and cannot be set through other methods.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Edition Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle]\nedition = \"CUSTOM_EDITION\"\n```\n\n----------------------------------------\n\nTITLE: Configure undoSqlMigrationPrefix via Java API (Java)\nDESCRIPTION: Demonstrates how to programmatically set the `undoSqlMigrationPrefix` using the Flyway Java API. This involves accessing the configuration object and setting the property on the `UndoConfigurationExtension` plugin.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Undo SQL Migration Prefix Setting.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nUndoConfigurationExtension undoConfigurationExtension = flyway.getConfiguration().getPluginRegister().getPlugin(UndoConfigurationExtension.class);\nundoConfigurationExtension.setUndoSqlMigrationPrefix(\"B\");\n```\n\n----------------------------------------\n\nTITLE: Defining Oracle Post Filter Using XML Format\nDESCRIPTION: This XML snippet exemplifies the structure of an Oracle post filter file with a .scpf extension, used to configure filtering rules for database objects. The root element 'Filter' includes versioning and type attributes, with child elements specifying exclusion lists and filter criteria based on object names. Dependencies include proper UTF-16 encoding for compatibility; expected inputs are filter rules expressed within the XML tags, and the output is a structured filter configuration usable by Oracle tools that recognize this format.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Filter Formats/Oracle Post Filter Format.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-16\" standalone=\"yes\"?>\n<Filter version=\"1\" type=\"Filter\">\n  <exclude type=\"ExcludeList\" version=\"2\" />\n  <excludeContaining>TABLE_ONE</excludeContaining>\n  <includeContaining />\n</Filter>\n```\n\n----------------------------------------\n\nTITLE: Enabling checkDriftOnMigrate using Environment Variables for Flyway\nDESCRIPTION: Illustrates enabling automatic drift checks by setting the `FLYWAY_CHECK_DRIFT_ON_MIGRATE` environment variable to `true`. This method also necessitates setting the corresponding environment variables for authentication (`FLYWAY_EMAIL`, `FLYWAY_TOKEN`) and result publishing (`FLYWAY_PUBLISH_RESULT`).\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Drift On Migrate Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nFLYWAY_EMAIL=foo.bar@red-gate.com\nFLYWAY_TOKEN=1234ABCD\nFLYWAY_PUBLISH_RESULT=true\nFLYWAY_CHECK_DRIFT_ON_MIGRATE=true\n```\n\n----------------------------------------\n\nTITLE: Initializing Flyway Project Name Using Command Line in Bash\nDESCRIPTION: This snippet demonstrates how to initialize a Flyway project with a specified name using the 'flyway init' command. It requires the Flyway CLI and is executed in a bash-compatible shell. The '-name' parameter sets the display name for the project, binding it to the Flyway Desktop interface for identification purposes.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Name Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway init -name=\"MyFlywayProject\"\n```\n\n----------------------------------------\n\nTITLE: Using Flyway Command-line to set encoding\nDESCRIPTION: Demonstrates how to specify the encoding parameter when running Flyway via command-line to view migration info with a specific character set. This is useful for scripts that require a particular encoding when executing Flyway commands.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Encoding Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway -encoding=\"UTF-16\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring baselineOnMigrate using Flyway Gradle Plugin (Groovy)\nDESCRIPTION: Sets the 'baselineOnMigrate' property inside a Gradle build script block for Flyway. Requires the Flyway Gradle plugin applied to the project. Flag accepts a boolean value to control baseline creation behavior during migration tasks.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Baseline On Migrate Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    baselineOnMigrate = true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Vault Secrets via Environment Variable\nDESCRIPTION: This snippet shows how to configure Flyway Vault secrets using an environment variable. The environment variable FLYWAY_VAULT_SECRETS is set to a comma-separated list of Vault secret paths holding Flyway configuration details. This method is useful when configuring Flyway in cloud or containerized environments where environment variables are preferred over files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Vault Namespace/Flyway Vault Secrets Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_VAULT_SECRETS=kv/data/flyway/flywayConfig1,kv/flyway/flywayConfig2\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Snapshot Provisioner in TOML\nDESCRIPTION: This TOML configuration snippet demonstrates how to set up the snapshot provisioner in a Flyway environment, specifying the JDBC connection URL, user credentials, and provisioner type. The resolver section sets the required path to the snapshot file along with its version. Dependencies include an existing snapshot file and Flyway with support for the snapshot provisioner. Key parameters are 'filename' (path to the snapshot), 'snapshotVersion' (the version the snapshot represents), and options such as 'cleanOnReprovision'. The expected input is a valid TOML config; the provisioner restores the database to a defined baseline state, with the output being an up-to-date schema in the provisioned environment.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Provisioner Setting/Snapshot Provisioner.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[environments.development]\nurl = \"jdbc:sqlserver://localhost:1433;databaseName=MyDatabase;trustServerCertificate=true\"\nuser = \"MyUser\"\npassword = \"${localSecret.MyPasswordKey}\"\nprovisioner = \"snapshot\"\n\n[environments.development.resolvers.snapshot]\nfilename = 'C:\\Project\\snapshot.snp'\nsnapshotVersion = \"150\"\n```\n\n----------------------------------------\n\nTITLE: Flyway Undo Operation JSON Output Format (JSON)\nDESCRIPTION: This JSON snippet represents the standard output format of the Flyway Undo command, containing details about the schema state before and after the undo operation. It includes properties like 'initialSchemaVersion', the list of 'undoneMigrations' with version, description, file path, and execution time, the count of migrations undone, Flyway version, target database, warnings, and operation type. This output facilitates automation and monitoring workflows post-undo.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Undo.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"initialSchemaVersion\": \"1\",\n  \"targetSchemaVersion\": null,\n  \"schemaName\": \"public\",\n  \"undoneMigrations\": [\n    {\n      \"version\": \"1\",\n      \"description\": \"undoFirst\",\n      \"filepath\": \"C:\\\\flyway\\\\sql\\\\U1__undoFirst.sql\",\n      \"executionTime\": 0\n    }\n  ],\n  \"migrationsUndone\": 1,\n  \"flywayVersion\": \"{{ site.flywayVersion }}\",\n  \"database\": \"testdb\",\n  \"warnings\": [],\n  \"operation\": \"undo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Vault URL Parameter - Properties\nDESCRIPTION: Demonstrates how to set the flyway.vault.url parameter in a Flyway configuration file to specify the REST API endpoint of your Vault server. This parameter must include the Vault API version (supported: v1). Required for Flyway to communicate with your Vault instance. Input: Vault server URL with version. Output: Flyway will use this address for secrets retrieval. Ensure your Vault server supports the specified version.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Integrating Vault.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nflyway.vault.url=http://localhost:8200/v1/\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Callbacks in Properties File\nDESCRIPTION: Defines the 'flyway.callbacks' property in a .properties configuration file with comma-separated callback class names or package names. Used to automate Flyway setup, allowing Java callbacks to be loaded during migration processes to customize behavior.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Callbacks Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.callbacks=my.callback.FlywayCallback,my.package.to.scan\n```\n\n----------------------------------------\n\nTITLE: Specifying buildVersion in TOML Configuration File\nDESCRIPTION: Demonstrates how to set the 'buildVersion' parameter within a TOML configuration file under the '[flyway.snapshot]' section, allowing multiple versions if needed. In this example, the build version is set to \"001\".\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Snapshot Namespace/Flyway Snapshot Build Version Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.snapshot]\nbuildVersion = [ \"001\" ]\n```\n\n----------------------------------------\n\nTITLE: Setting skipDefaultCallbacks via Environment Variable\nDESCRIPTION: Shows how to configure `skipDefaultCallbacks` using an environment variable. Set the `FLYWAY_SKIP_DEFAULT_CALLBACKS` environment variable to `true` to disable default callbacks.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Skip Default Callbacks Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_SKIP_DEFAULT_CALLBACKS=true\n```\n\n----------------------------------------\n\nTITLE: Using Flyway Add Command with Force Flag in Bash\nDESCRIPTION: Executes the Flyway add command with the force option enabled via the command line. This forcibly overwrites an existing file if it already exists. Requires having Flyway installed and executable permissions to run the binary. The flag 'force=true' ensures that the operation does not fail due to existing file conflicts.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Add Namespace/Flyway Add Force Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway add -force=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Placeholder Suffix in Maven POM (XML)\nDESCRIPTION: Shows how to set the `placeholderSuffix` within the Flyway plugin configuration block in a Maven `pom.xml` file. This configures the suffix for database migrations managed by the Maven build process.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Suffix Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <placeholderSuffix>$$</placeholderSuffix>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: JSON Output Format - Flyway Snapshot\nDESCRIPTION: This JSON snippet illustrates the expected output format for a Flyway snapshot, containing the filename of the snapshot. This simple JSON example is a representation of what the command will output. The `filename` key contains the file path specified in the command.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Snapshot.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"filename\": \"C:\\snapshot.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Schemas via Properties Configuration File - Properties\nDESCRIPTION: Configures managed schemas through a traditional properties file by assigning a comma-separated string to flyway.schemas. Used in environments where Flyway reads from .properties files, this approach requires the file to be accessible at runtime. Ensures the specified schemas are targeted for migration operations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Schemas Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nflyway.schemas=schema1,schema2\n```\n\n----------------------------------------\n\nTITLE: Using Build Password - Command-line (PowerShell)\nDESCRIPTION: This PowerShell snippet demonstrates how to use the `flyway check` command with the `-check.buildPassword` parameter to specify the build database password. It connects to a database at the specified URL and validates any changes.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Build Password Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway check -changes -url=\"jdbc://url1\" -check.buildPassword=\"mypassword\"\n```\n\n----------------------------------------\n\nTITLE: Example SQL Script Flyway Percona XtraDB Cluster\nDESCRIPTION: Provides an example SQL migration script demonstrating syntax compatible with Flyway for Percona XtraDB Cluster (MySQL). The script illustrates the use of single-line and multi-line comments, creating a table, defining a stored procedure using the DELIMITER command, executing the procedure, incorporating MySQL-specific comment directives (/*!...*/), and utilizing Flyway's placeholder substitution feature.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Percona XtraDB Cluster.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n/* Single line comment */\nCREATE TABLE test_data (\n value VARCHAR(25) NOT NULL,\n PRIMARY KEY(value)\n);\n\n/*\nMulti-line\ncomment\n*/\n\n-- MySQL procedure\nDELIMITER //\nCREATE PROCEDURE AddData()\n BEGIN\n   # MySQL-style single line comment\n   INSERT INTO test_data (value) VALUES ('Hello');\n END //\nDELIMITER;\n\nCALL AddData();\n\n-- MySQL comments directives generated by mysqlsump\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;\n/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;\n\n-- Placeholder\nINSERT INTO ${tableName} (name) VALUES ('Mr. T');\n```\n\n----------------------------------------\n\nTITLE: Configuring baselineVersion in Gradle Build Script for Flyway\nDESCRIPTION: Sets the baselineVersion for Flyway migrations using Gradle's Groovy DSL. Place this in the flyway extension block within a Gradle build script. Requires the Flyway Gradle plugin to be applied. Adjust the version as per migration requirements.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Baseline Version Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    baselineVersion = '0.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting snapshot.filename in properties configuration file for Flyway\nDESCRIPTION: Shows how to specify the snapshot.filename parameter within a standard properties file. The property flyway.snapshot.filename is assigned the desired filename, which Flyway reads during execution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Snapshot Namespace/Flyway Snapshot Filename Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.snapshot.filename=flyway_snapshot.snp\n```\n\n----------------------------------------\n\nTITLE: Defining snapshot.filename via environment variable for Flyway\nDESCRIPTION: Describes setting the snapshot.filename parameter using an environment variable, FLYWAY_SNAPSHOT_FILENAME, allowing configuration outside of files or CLI arguments. The variable provides the filename for the snapshot output.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Snapshot Namespace/Flyway Snapshot Filename Setting.md#_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nFLYWAY_SNAPSHOT_FILENAME=flyway_snapshot.snp\n```\n\n----------------------------------------\n\nTITLE: Configuring includeFlywayObjects Option in TOML - TOML\nDESCRIPTION: This snippet demonstrates how to enable the includeFlywayObjects option in a Flyway TOML configuration file. The [flyway.diff] table section groups diff-specific settings, and the includeFlywayObjects key is set to true to include Flyway management tables in schema diffs. This configuration file is consumed by tools or scripts that support TOML configuration for Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DIff Namespace/Flyway Diff Include Flyway Objects Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.diff]\nincludeFlywayObjects = true\n```\n\n----------------------------------------\n\nTITLE: Importing Source Control for Oracle Project\nDESCRIPTION: This command imports a Source Control for Oracle project into Flyway, using the `-from` parameter to specify the project path and the `-fromType` parameter with the value `SourceControlForOracle`. Similar to SQL Source Control, if the project is in the same directory, it is transformed into a Flyway Desktop project, preserving the version history.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Init.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nflyway init -projectName=MyProject -databaseType=Sqlite -from=C:\\somePath\\MySourceControlForOracleProject -fromType=SourceControlForOracle\n```\n\n----------------------------------------\n\nTITLE: Entrypoint Bash Script to Initialize SQL Server Database\nDESCRIPTION: This shell script starts the SQL Server process, waits for the server to become available, and then creates a new database named 'MyDatabase'. It's designed for quick setup but is not robust against failures or errors in production environments.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Provisioner Setting/Docker Provisioner.md#_snippet_3\n\nLANGUAGE: Shell Script\nCODE:\n```\n#!/bin/bash\n\n/opt/mssql/bin/sqlservr &\nfor _ in {1..25}; do /opt/mssql-tools/bin/sqlcmd -S localhost -U MyUser -P \"$MSSQL_PASSWORD\" -q \"CREATE DATABASE MyDatabase\" && break || (echo \"DB not up yet ...\" && sleep 15); done\n\nwhile true; do sleep 1000; done\n```\n\n----------------------------------------\n\nTITLE: Configuring scriptPlaceholderPrefix via Command-line (PowerShell)\nDESCRIPTION: Sets the Flyway script placeholder prefix to \"P__\" using the `-scriptPlaceholderPrefix` command-line argument when running Flyway from a PowerShell terminal. This overrides any default or configuration file settings for this specific execution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Script Placeholder Prefix Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -scriptPlaceholderPrefix=\"P__\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Token in Flyway Gradle Plugin - Groovy\nDESCRIPTION: Illustrates how to include the Vault token in the Flyway Gradle plugin configuration block using Groovy syntax. The token is set in pluginConfiguration as a map entry for 'vaultToken'. Requires a Gradle-based build and Flyway Gradle plugin integration. The token string should match the required authentication value.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Vault Namespace/Flyway Vault Token Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    pluginConfiguration = [\n      vaultToken: 's.abcdefghijklmnopqrstuvwx'\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Specific Changes to Schema Model with Flyway (Bash)\nDESCRIPTION: This example applies only a selected set of changes to the schema model using the 'flyway model' command, specifying a comma-separated list of change IDs via the '-model.changes' argument. The command updates files for the explicitly named changes, as shown in detailed command output. Requires Flyway Enterprise Edition and previously generated diff artifact. Important parameters include the list of change IDs to apply.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Flyway Desktop migrations workflow with Flyway CLI.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ flyway model \"-model.changes=rlWm41EHCIp8krJRqZ.PTVIx2fs,QvJIORGzbAAz3irDJbEKBcQr8QY\"\n\nFlyway Enterprise Edition {{ site.flywayVersion }} by Redgate\nLicensed to red-gate.com (license ID 1174ed6b-b10e-41bd-9a1b-285ddc3239c7)\n\nSee release notes here: https://rd.gt/416ObMi\nSaved to schema model\n File updated: C:\\Users\\Flyway\\FlywayProjects\\SqlServerProject\\schema-model\\Tables\\dbo.TestTable1.sql\n File updated: C:\\Users\\Flyway\\FlywayProjects\\SqlServerProject\\schema-model\\Tables\\dbo.TestTable2.sql\n```\n\n----------------------------------------\n\nTITLE: Verifying Status After Applying Repeatable Migration (CLI - Console)\nDESCRIPTION: Checks the Flyway migration status after running 'migrate'. The output confirms that the repeatable migration 'R__People_view.sql' was successfully applied, showing its installation timestamp and 'Success' state.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Repeatable Migrations.md#_snippet_4\n\nLANGUAGE: Console\nCODE:\n```\nflyway info\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway via Gradle\nDESCRIPTION: This snippet configures Flyway using Gradle.  It sets the `configFiles` property within the `flyway` block. The example uses an array of strings to specify configuration files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Command-line Parameters/Config Files Parameter.md#_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    configFiles = ['my.conf']\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault URL in TOML Configuration File\nDESCRIPTION: Demonstrates how to define the Vault URL within a TOML configuration file for Flyway, allowing persistent and version-controlled setup of Vault integration settings.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Vault Namespace/Flyway Vault URL Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway.vault]\nurl = \"http://localhost:8200/v1/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Vault Token Parameter - Properties\nDESCRIPTION: Shows how to set the flyway.vault.token parameter in your Flyway configuration. This token is required to authenticate requests to Vault and should be previously generated using Vault authentication methods. Input: a valid Vault token. Output: Used for secure access to Vault secrets via Flyway. Protect this token to prevent unauthorized access.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Integrating Vault.md#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nflyway.vault.token=<vault_token>\n```\n\n----------------------------------------\n\nTITLE: Enabling Forward Slash Termination in TOML\nDESCRIPTION: This TOML configuration snippet demonstrates how to set the 'useForwardSlash' option to 'true' within the '[redgateCompare.oracle.options.behavior]' section. Enabling this option ensures that each statement in the generated Oracle deployment script is terminated with a forward slash ('/').\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Behavior Options Namespace/Oracle Use Forward Slash Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.behavior]\nuseForwardSlash = true\n```\n\n----------------------------------------\n\nTITLE: Specifying Flyway Vault Secrets in Maven Plugin Configuration Using XML\nDESCRIPTION: This XML snippet details how to configure Vault secrets for Flyway within a Maven plugin configuration block. The <vaultSecrets> element accepts a comma-separated string of Vault secret paths that Flyway uses to securely fetch configuration parameters. This method integrates secret management into Maven-based build and deployment workflows.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Vault Namespace/Flyway Vault Secrets Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <pluginConfiguration>\n      <vaultSecrets>kv/data/flyway/flywayConfig1,kv/flyway/flywayConfig2</vaultSecrets>\n    </pluginConfiguration>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Generating Versioned Migration (CLI) - Shell\nDESCRIPTION: This snippet shows how the `generate` command can be combined with version, and timestamp for generating a migration script including the changes from the latest diff artifact.  Requires Flyway CLI version 11.0.0 or later and a Teams/Enterprise license.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Migrating from flyway-dev to flyway CLI.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\nflyway generate \\\"-generate.types=versioned\\\" \\\"-generate.description=AddOrdersTable\\\" \\\"-generate.version=150\\\" \\\"-generate.timestamp=always\\\"\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Clickhouse Cluster Name via Command Line (Powershell)\nDESCRIPTION: This snippet shows how to configure the ClickHouse cluster name using the Flyway command-line tool. The `-clickhouse.clusterName` argument is used to specify the value directly when executing a Flyway command like `info`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Clickhouse Namespace/Flyway Clickhouse Cluster Name Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -clickhouse.clusterName=\"example_cluster\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring Database User in Flyway TOML Configuration File\nDESCRIPTION: This TOML configuration snippet illustrates how to set the database user property under an environment section named 'default'. It requires placing this configuration inside the appropriate Flyway TOML file. This configures Flyway to connect to the database as 'myuser' by default.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment User Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.default]\nuser = \"myuser\"\n```\n\n----------------------------------------\n\nTITLE: Generating Script by Reading Change IDs from stdin (Flyway CLI, Bash)\nDESCRIPTION: This command-line snippet shows how to generate a Flyway script by reading change IDs from standard input.  The `-changes=-` parameter instructs Flyway to read change IDs from the input stream. This is useful when dealing with a large number of IDs or when the IDs are dynamically generated.  Requires the Flyway CLI and access to a standard input stream.  The output is a Flyway script.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Changes Setting.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./flyway generate -changes=-\n```\n\n----------------------------------------\n\nTITLE: Flyway cherryPick Configuration (Environment Variable)\nDESCRIPTION: This snippet demonstrates how to set the `cherryPick` configuration using an environment variable. Setting `FLYWAY_CHERRY_PICK` to `2.0` configures Flyway to only consider migration version `2.0` during migration.  The environment variable overrides the default configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Cherry Pick Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_CHERRY_PICK=2.0\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway initSql via Environment Variable - Properties\nDESCRIPTION: This snippet shows how to configure the `initSql` parameter using an environment variable. Flyway automatically reads environment variables prefixed with `FLYWAY_` and maps them to configuration properties. Setting `FLYWAY_INIT_SQL` provides the SQL statement to be executed after connection. Requires setting the environment variable before running Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Init SQL Setting.md#_snippet_4\n\nLANGUAGE: Properties\nCODE:\n```\nFLYWAY_INIT_SQL=ALTER SESSION SET NLS_LANGUAGE='ENGLISH';\n```\n\n----------------------------------------\n\nTITLE: Setting baselineOnMigrate in Flyway TOML Configuration File (TOML)\nDESCRIPTION: Configures the 'baselineOnMigrate' property within a Flyway TOML configuration file under the '[flyway]' section. Requires a valid TOML parser compatible with Flyway's configuration conventions. The property enables or disables automatic baselining during migration; set to true or false as needed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Baseline On Migrate Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nbaselineOnMigrate = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Script Placeholder Suffix in Maven Plugin\nDESCRIPTION: This example shows how to specify the script placeholder suffix in a Maven plugin configuration for Flyway by setting the 'scriptPlaceholderSuffix' parameter to '__P'. It is used during Maven build lifecycle for database migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Script Placeholder Suffix Setting.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    <scriptPlaceholderSuffix>__P</scriptPlaceholderSuffix>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring connectRetriesInterval in Maven Plugin\nDESCRIPTION: This code shows setting the connectRetriesInterval to 60 in Maven's plugin configuration XML. It allows integration of the parameter in Maven-based build and deployment workflows.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Connect Retries Interval Setting.md#_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    <connectRetriesInterval>60</connectRetriesInterval>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Running Flyway Migration for Production Environment\nDESCRIPTION: This command assigns 'production' to the placeholders parameter, resulting in only the production environment migration being executed during the flyway migrate operation. It showcases flexibility in environment-specific migration execution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Injecting Environments.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflyway -placeholders.environment=production migrate\n```\n\n----------------------------------------\n\nTITLE: Example Google Cloud Secret Manager Secret Content for Flyway Configuration (ini)\nDESCRIPTION: This snippet illustrates how the value of a GCSM secret should be formatted to be used by Flyway. The secret's content mimics a Flyway configuration file format, specifying database connection details like URL, user, and password. This configuration is parsed by Flyway after retrieving the secret, enabling seamless and secure database connectivity.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Integrating Google Cloud Secret Manager.md#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nflyway.url=<database_url>\nflyway.user=<database_user>\nflyway.password=<database_password>\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Script Placeholder Suffix Using Java API\nDESCRIPTION: This code shows how to configure the script placeholder suffix programmatically in Java using Flyway's API. It involves calling the 'configure()' method, setting the suffix to '__P', and loading the configuration. Suitable for integration within Java applications.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Script Placeholder Suffix Setting.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nFlyway.configure()\n    .scriptPlaceholderSuffix(\"__P\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Example command-line usage for setting reportFilename\nDESCRIPTION: This code snippet shows how to set the 'reportFilename' parameter using the command-line interface with PowerShell. It demonstrates passing the parameter with its filename as an argument during execution of the Flyway command.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Report Filename Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -reportFilename=flyway_report.html info\n```\n\n----------------------------------------\n\nTITLE: Setting `skipDefaultResolvers` in Maven POM File (XML)\nDESCRIPTION: Demonstrates configuring the `skipDefaultResolvers` option in a Maven `pom.xml` file using the Flyway Maven plugin. Add the `<skipDefaultResolvers>true</skipDefaultResolvers>` element within the plugin's `<configuration>` section.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Skip Default Resolvers Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <skipDefaultResolvers>true</skipDefaultResolvers>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway Clickhouse Dependency with Maven - XML\nDESCRIPTION: This snippet shows the Maven configuration to add the Flyway Clickhouse open source module as a project dependency. It requires adding the dependency under the project's POM file to enable Flyway's Clickhouse database support. No additional parameters are needed here other than the groupId and artifactId. The dependency allows Flyway to work with Clickhouse via JDBC.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Clickhouse Database.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\\n    <groupId>org.flywaydb</groupId>\\n    <artifactId>flyway-database-clickhouse</artifactId>\\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Placeholder Suffix in Gradle Build (Groovy)\nDESCRIPTION: Demonstrates how to configure the `placeholderSuffix` within the Flyway plugin block in a Gradle build script using Groovy syntax. This sets the suffix for database migrations managed by the Gradle build process.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Suffix Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    placeholderSuffix = '$$'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring cleanDisabled via PowerShell Command\nDESCRIPTION: Shows how to disable or enable the 'cleanDisabled' setting using the Flyway CLI in PowerShell. Setting the flag to 'false' enables the 'clean' operation, which is disabled by default. Requires invoking the Flyway executable with the '-cleanDisabled' parameter.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Clean Disabled Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway -cleanDisabled=\"false\" clean\n```\n\n----------------------------------------\n\nTITLE: Command-line usage for specifying change IDs in Flyway diffText utility\nDESCRIPTION: This snippet demonstrates how to execute the 'diffText' command of Flyway via the CLI, specifying particular change IDs or reading from stdin. It shows the command structure for including specific IDs and for streaming IDs. Requires the Flyway CLI environment.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DiffText Namespace/Flyway DiffText Changes Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway diffText -changes=123,456\n```\n\nLANGUAGE: bash\nCODE:\n```\n./flyway diffText -changes=-\n```\n\n----------------------------------------\n\nTITLE: Reviewing Initial Flyway Status (CLI - Console)\nDESCRIPTION: Checks the current state of database migrations managed by Flyway after completing the quickstart tutorial. It shows the applied versioned migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Repeatable Migrations.md#_snippet_0\n\nLANGUAGE: Console\nCODE:\n```\nflyway info\n```\n\n----------------------------------------\n\nTITLE: Verifying Final Flyway Status (Console Output)\nDESCRIPTION: Displays the updated status table from flyway info after migration V3 has been applied. It shows that version 3, 'Couple', is now marked as 'Success', indicating the migration was successfully executed, regardless of the application method used.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Dry Runs.md#_snippet_6\n\nLANGUAGE: Console Output\nCODE:\n```\nDatabase: jdbc:h2:file:./target/foobar (H2 1.4)\nSchema version: 3\n\n+-----------+---------+---------------------+------+---------------------+---------+----------+\n| Category  | Version | Description         | Type | Installed On        | State   | Undoable |\n+-----------+---------+---------------------+------+---------------------+---------+----------+\n| Versioned | 1       | Create person table | SQL  | 2017-12-22 15:26:39 | Success | No       |\n| Versioned | 2       | Add people          | SQL  | 2017-12-22 15:28:17 | Success | No       |\n| Versioned | 3       | Couple              | SQL  | 2018-01-25 17:57:13 | Success | No       |\n+-----------+---------+---------------------+------+---------------------+---------+----------+\n```\n\n----------------------------------------\n\nTITLE: Initializing Flyway Project Import from Specified Path Using Bash\nDESCRIPTION: This Bash snippet demonstrates how to initialize a Flyway project import by specifying the project path via the '-from' parameter in the 'flyway init' command. It requires Flyway installed and accessible in the command line. The command imports a project named 'MyProject' targeting a 'Sqlite' database, resolving the import path relative to the current working directory or as explicitly provided. The input parameters include 'projectName', 'databaseType', and 'from', with no direct output other than running the initialization procedure.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Init Namespace/Flyway Init From Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflyway init -projectName=MyProject -databaseType=Sqlite -from=flyway.conf\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Resolvers in Maven\nDESCRIPTION: Example of setting custom migration resolvers in a Maven POM file. This defines the resolvers element in the configuration section of the Flyway Maven plugin.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Migration Resolvers Setting.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <resolvers>my.resolver.MigrationResolver</resolvers>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Table via Environment Variable\nDESCRIPTION: Explains how to set the Flyway schema history table name using the `FLYWAY_TABLE` environment variable. Flyway automatically picks up this variable.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Table Setting.md#_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nFLYWAY_TABLE=my_schema_history_table\n```\n\n----------------------------------------\n\nTITLE: Setting Clickhouse Zookeeper Path in TOML Configuration\nDESCRIPTION: Shows how to set the Clickhouse Zookeeper path within a Flyway TOML configuration file using the `zookeeperPath` key under the `[flyway.clickhouse]` section. This parameter specifies the Zookeeper node containing the Clickhouse cluster configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Clickhouse Namespace/Flyway Clickhouse Zookeeper Path Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.clickhouse]\nzookeeperPath = \"/clickhouse/tables/{shard}/{database}/{table}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Stream Option in TOML Configuration\nDESCRIPTION: This TOML snippet configures the `stream` property to `true` within a Flyway configuration file. This enables streaming of SQL migrations. No dependencies are required beyond Flyway and a TOML parser. The expected result is Flyway will stream migrations, suitable for large SQL files to save memory.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Stream Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nstream = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Script Placeholder Suffix via TOML Configuration File\nDESCRIPTION: This snippet demonstrates setting the script placeholder suffix in a TOML config file for Flyway, assigning the value '__P'. This configuration is used when running Flyway with the specified config file, allowing for persistent setting across runs.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Script Placeholder Suffix Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway]\nscriptPlaceholderSuffix = \"__P\"\n```\n\n----------------------------------------\n\nTITLE: Setting GCSM Project ID via Flyway Java API\nDESCRIPTION: Provides a Java code example demonstrating how to retrieve the `GcsmConfigurationExtension` from the Flyway configuration and set the GCSM project ID programmatically using the `setGcsmProject` method.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Google Cloud Secret Manager Namespace/Flyway Google Cloud Secret Manager Project Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nGcsmConfigurationExtension gcsmConfigurationExtension = configuration.getPluginRegister().getPlugin(GcsmConfigurationExtension.class);\ngcsmConfigurationExtension.setGcsmProject(\"quixotic-ferret-345678\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Group in Maven (XML)\nDESCRIPTION: Illustrates how to set the `flyway.group` parameter within the Flyway Maven plugin configuration in a `pom.xml` file. The setting `true` is placed inside the `<group>` element within the `<configuration>` block.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Group Setting.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n  <group>true</group>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Environment variable setup for reportFilename\nDESCRIPTION: This snippet shows how to set the 'FLYWAY_REPORT_FILENAME' environment variable to specify the report filename for Flyway operations. It enables configuration through environment variables, often useful for scripting or container setups.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Report Filename Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_REPORT_FILENAME=flyway_report.html\n```\n\n----------------------------------------\n\nTITLE: Enabling checkDriftOnMigrate via Flyway Command Line\nDESCRIPTION: Demonstrates enabling automatic drift checks during migration using the Flyway command-line interface by setting `-checkDriftOnMigrate=true`. This requires providing authentication credentials (`-email`, `-token`) and enabling result publishing (`-publishResult=true`).\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Drift On Migrate Setting.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n./flyway migrate -email=\"foo.bar@red-gate.com\" -token=\"1234ABCD\" -publishResult=true -checkDriftOnMigrate=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Repeatable SQL Prefix in Maven\nDESCRIPTION: Shows how to set the `repeatableSqlMigrationPrefix` property within the `<configuration>` section of the Flyway Maven plugin definition in a `pom.xml` file. This integrates Flyway configuration into the Maven build lifecycle. Requires the Flyway Maven plugin dependency.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Repeatable SQL Migration Prefix Setting.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    <repeatableSqlMigrationPrefix>A</repeatableSqlMigrationPrefix>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Specifying JDBC Driver Class Names for Aurora MySQL\nDESCRIPTION: Shows the default Java class names for the standard MySQL JDBC driver (`com.mysql.jdbc.Driver`) and the community-supported AWS Advanced JDBC Wrapper (`software.amazon.jdbc.Driver`) used by Flyway to interact with Aurora MySQL.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Aurora MySQL.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\ncom.mysql.jdbc.Driver\n```\n\nLANGUAGE: Java\nCODE:\n```\nsoftware.amazon.jdbc.Driver\n```\n\n----------------------------------------\n\nTITLE: Running Migration Command - Flyway - Bash\nDESCRIPTION: Executes Flyway's migration and info commands with the 'mongodb' environment active, applying pending migrations to the MongoDB database. Requires a configured Flyway installation and a properly set up MongoDB environment in the Flyway config.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Using Native Connectors to connect to MongoDB.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./flyway migrate info -environment=mongodb\n\n```\n\n----------------------------------------\n\nTITLE: Configuring scriptPlaceholderPrefix via Environment Variable\nDESCRIPTION: Sets the Flyway script placeholder prefix to \"P__\" using the `FLYWAY_SCRIPT_PLACEHOLDER_PREFIX` environment variable. Flyway automatically picks up this variable if set in the execution environment.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Script Placeholder Prefix Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_SCRIPT_PLACEHOLDER_PREFIX=P__\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway via Maven\nDESCRIPTION: This snippet configures Flyway using Maven. It uses the `<configFiles>` element within the `<configuration>` section to specify the configuration file.  It also demonstrates how to include multiple config files. \nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Command-line Parameters/Config Files Parameter.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n  <configFiles>\n    <configFile>my.conf</configFile>\n  </configFiles>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Placeholder Prefix in Properties Configuration File\nDESCRIPTION: Sets the placeholderPrefix to \"$$\" in a properties configuration file for Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Prefix Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.placeholderPrefix=$$\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway initSql in Maven - XML\nDESCRIPTION: This snippet shows how to configure the `initSql` parameter for the Flyway Maven plugin within a `pom.xml` file. The parameter is nested under `<configuration>` within the `<plugin>` definition for Flyway, applying the SQL statement when Flyway Maven goals are run. Requires the Flyway Maven plugin dependency.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Init SQL Setting.md#_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    <initSql>ALTER SESSION SET NLS_LANGUAGE='ENGLISH';</initSql>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Applying Changes to Schema Model (CLI) - Shell\nDESCRIPTION: This snippet applies changes from a diff artifact to the schema model using the Flyway CLI `model` command. It takes the artifact filename and changes as parameters.  Requires Flyway CLI version 11.0.0 or later and a Teams/Enterprise license.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Migrating from flyway-dev to flyway CLI.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nflyway model \\\"-model.changes=VGFibGU6W2Rib10uW1Rlc3RUYWJsZV0\\\" \\\"-model.artifactFilename=C:\\Users\\redgate\\Documents\\TestFdCmdLine\\Temp\\artifact1\\\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Flyway Version after PAT Authorization\nDESCRIPTION: This code snippet demonstrates running the 'flyway version' command in a console, which verifies whether Flyway is properly authorized with the Enterprise edition. The expected output indicates successful authorization and includes the Flyway version and product edition information.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Personal Access Tokens.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n> flyway version\n\nFlyway Enterprise Edition {{ site.flywayVersion }} by Redgate\n\nSee release notes here: (https://rd.gt/416ObMi)\n```\n\n----------------------------------------\n\nTITLE: Setting Oracle Wallet Location via Maven (Flyway)\nDESCRIPTION: This XML snippet shows how to set the Oracle wallet location within a Maven project using the Flyway Maven plugin. It configures the `oracleWalletLocation` parameter within the `<configuration>` section of the plugin. This enables setting the wallet location via the Maven build process. This snippet requires the Flyway Maven plugin to be properly configured in the `pom.xml` file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle Wallet Location Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <oracleWalletLocation>/User/db/my_wallet</oracleWalletLocation>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Table via Command-line (Powershell)\nDESCRIPTION: Demonstrates how to set the Flyway schema history table name using the `-table` argument in the Flyway command-line interface. This example runs the `info` command with a custom table name.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Table Setting.md#_snippet_0\n\nLANGUAGE: Powershell\nCODE:\n```\n./flyway -table=\"my_schema_history_table\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway initSql in TOML File - TOML\nDESCRIPTION: This snippet illustrates how to set the `initSql` parameter within a Flyway TOML configuration file. The parameter is defined under the `environments.default` section, applying the specified SQL statement whenever Flyway uses this configuration with the default environment. Requires a Flyway TOML configuration file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Init SQL Setting.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[environments.default]\ninitSql = \"ALTER SESSION SET NLS_LANGUAGE='ENGLISH';\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Connect Retries via TOML Configuration\nDESCRIPTION: This TOML configuration sets the `connectRetries` value.  The setting is placed within the `environments.default` section. This requires a TOML configuration file. The `connectRetries` parameter is set to 10. This setting affects Flyway's behavior when connecting to the database.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Connect Retries Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.default]\nconnectRetries = 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Maven Plugin Using System Properties\nDESCRIPTION: Command-line example showing how to configure Flyway using JVM system properties when executing Maven commands. This method allows specifying configuration directly from the command line.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Maven Goal.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n> mvn -Dflyway.user=myUser -Dflyway.schemas=schema1,schema2 -Dflyway.placeholders.keyABC=valueXYZ\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway JDBC Driver via Command Line in PowerShell\nDESCRIPTION: Demonstrates how to specify the fully qualified JDBC driver class when running Flyway commands via PowerShell. It includes examples for setting a default driver and configuring a driver for a named environment using the 'environments.{environment name}.driver' prefix. This method requires Flyway CLI and the driver class must be accessible in the classpath.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Driver Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -driver=com.microsoft.sqlserver.jdbc.SQLServerDriver info\n```\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -environments.sample.driver=com.microsoft.sqlserver.jdbc.SQLServerDriver info\n```\n\n----------------------------------------\n\nTITLE: Configuring Loggers via Command-line\nDESCRIPTION: Sets the `flyway.loggers` property using the command-line interface. Specifies 'auto' for logger auto-detection. This overrides default logging behavior.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Loggers Setting.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./flyway -loggers=auto\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Batch in Gradle Build Script\nDESCRIPTION: Adds the 'batch' property set to true within the Gradle 'flyway' block to activate statement batching during migrations, enhancing performance for large datasets.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Batch Setting.md#_snippet_4\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    batch = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GCSM Resolver via Flyway Command-Line\nDESCRIPTION: Demonstrates configuring the GCSM resolver project and using GCSM secrets for database connection parameters (URL, user, password) directly via command-line arguments when running a Flyway command. The `-environments.development.resolvers.gcsm.project` flag specifies the GCSM project ID, and placeholders like `${googlesecrets.dbhost}` are used for secret retrieval.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Google Cloud Secret Manager Resolver.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway info \\\n-environment='development' \\\n-environments.development.url='jdbc:postgresql:${googlesecrets.dbhost}/${googlesecrets.dbname}' \\\n-environments.development.user='${googlesecrets.username}' \\\n-environments.development.password='${googlesecrets.password}' \\\n-environments.development.resolvers.gcsm.project='quixotic-ferret-345678'\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Display Name in Flyway Desktop via TOML Configuration - TOML\nDESCRIPTION: This snippet demonstrates how to assign a custom, user-friendly display name to a Flyway Desktop environment by specifying the 'displayName' property in a TOML configuration file. No external dependencies are required beyond a properly structured TOML file and Flyway Desktop. The '[environments.development]' section identifies the environment, while the 'displayName' key assigns the chosen name. The value can contain any UTF-8 characters, with no hard limits on length. This setting only affects Flyway Desktop and is ignored by the Flyway command-line client.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Display Name Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[environments.development]\ndisplayName = \"Development Database\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Working Directory in Flyway Maven Plugin - XML\nDESCRIPTION: This XML snippet configures the working directory for Flyway within a Maven build, under the <configuration> block of the plugin definition. The '<workingDirectory>' tag designates the directory that Flyway will consider for migration scripts and related files. Requires Flyway Maven Plugin as a declared dependency. The directory is specified as a child of <configuration>, and no output is generated at this configuration stage.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Command-line Parameters/Working Directory Parameter.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <workingDirectory>my_project</workingDirectory>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring outputQueryResults in Properties File\nDESCRIPTION: This code sets the 'flyway.outputQueryResults' property to false in a properties configuration file, affecting Flyway's behavior regarding query result output during migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Output Query Results Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.outputQueryResults=false\n```\n\n----------------------------------------\n\nTITLE: Configuring anyOf Tag-Based Migration Filtering in TOML - TOML\nDESCRIPTION: This snippet configures the 'anyOf' property in the '[flyway.tags]' TOML section to specify an array of tags used to filter migrations. It enables selection of any migration that matches at least one tag in the provided array. This must be placed in a Flyway configuration TOML file under the specified section. Input: list of desired tags as a string array; output: tag condition for migration execution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Tags Namespace/Flyway Tags Any Of Setting.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway.tags]\nanyOf = [\"tagA\", \"tagB\", \"tagC\"]\n\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway Informix Dependency (Maven - Redgate)\nDESCRIPTION: Adds the Redgate version of the Flyway Informix database support module as a dependency in a Maven project's pom.xml file. This allows Flyway to interact with Informix databases.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Informix.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.redgate.flyway</groupId>\n    <artifactId>flyway-database-informix</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Connection in Flyway using TOML - TOML\nDESCRIPTION: This code snippet illustrates how to set up the MongoDB connection in Flyway's TOML configuration file. It specifies the environment for MongoDB, providing the JDBC connection URL, as well as user credentials. Additionally, it selects the active migration environment. Required values include a running MongoDB instance (usually at localhost:27017), a valid username, and password. The expected behavior is enabling Flyway to connect to the specified MongoDB environment for migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Using MongoDB with Flyway.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[environments.mongodb]\nurl = \"jdbc:mongodb://localhost:27017/\"\nuser = \"your username\"\npassword = \"your password\"\n\n[flyway]\nenvironment = \"mongodb\"\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Replacement via Maven Plugin Configuration - Flyway - XML\nDESCRIPTION: This snippet shows how to disable placeholder replacement using the Flyway Maven plugin. The <placeholderReplacement> node is set to false inside the plugin's <configuration> block. Requires the use of the Flyway Maven plugin within a Maven project's pom.xml.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Replacement Setting.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <placeholderReplacement>false</placeholderReplacement>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway initSql in Gradle - Groovy\nDESCRIPTION: This snippet demonstrates how to configure the `initSql` parameter within a Gradle build script using the Flyway plugin. The parameter is set within the `flyway { ... }` extension block, applying the SQL statement when the Flyway Gradle task is executed. Requires the Flyway Gradle plugin.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Init SQL Setting.md#_snippet_6\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    initSql = \"ALTER SESSION SET NLS_LANGUAGE='ENGLISH';\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GCSM Project via Command-Line (Bash)\nDESCRIPTION: This snippet shows how to set the GCSM project parameter using the Flyway command-line interface. It sets the `environments.development.resolvers.gcsm.project` parameter to `quixotic-ferret-345678`. The user must have Flyway CLI installed and configured and have the appropriate permissions in GCS.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Google Cloud Secret Manager Resolver/Google Cloud Secret Manager Resolver Project Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway info -environments.development.resolvers.gcsm.project='quixotic-ferret-345678'\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway License Key via Environment Variable\nDESCRIPTION: This snippet describes how to set the Flyway Teams license key using an environment variable named 'FLYWAY_LICENSE_KEY'. The environment variable should be assigned a valid Teams license key string beginning with 'FL'. This enables the Flyway CLI or Docker image to activate Teams features based on the environment context without modifying configuration files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway License Key Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_LICENSE_KEY=FL01...\n```\n\n----------------------------------------\n\nTITLE: Setting oracleSqlPlusWarn via Flyway API (Java)\nDESCRIPTION: This snippet shows how to enable the `oracleSqlPlusWarn` option programmatically using the Flyway Java API. It retrieves the `OracleConfigurationExtension` and sets the `sqlPlusWarn` property to `true`, causing Flyway to issue warnings instead of errors for unsupported Oracle SQL*Plus statements.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle SQLPlus Warn Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nOracleConfigurationExtension oracleConfigurationExtension = configuration.getPluginRegister().getPlugin(OracleConfigurationExtension.class);\noracleConfigurationExtension.setSqlPlusWarn(true);\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Transactional Lock via Configuration File (Flyway)\nDESCRIPTION: This code snippet illustrates how to configure the `postgresql.transactional.lock` property using a standard properties configuration file.  The property `flyway.postgresql.transactional.lock=false` sets the transactional lock to false, thereby utilizing session-level locks.  The configuration file must be in a format that Flyway recognizes and must be available during Flyway's execution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway PostgreSQL Namespace/Flyway PostgreSQL Transactional Lock Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.postgresql.transactional.lock=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway buildUser in Properties Configuration File\nDESCRIPTION: Illustrates how to specify the 'buildUser' build database username parameter in the standard Flyway properties file format. This key-value entry sets the username for build-time database access. Input is a string username assigned to 'flyway.check.buildUser'. This configuration is read during Flyway execution to override the default user. Does not require additional dependencies beyond standard Flyway properties support.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Build User Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.check.buildUser=\"sa\"\n```\n\n----------------------------------------\n\nTITLE: Setting installedBy parameter using Flyway Java API\nDESCRIPTION: Example of setting the installedBy parameter to 'ci-pipeline' when configuring Flyway via its Java API.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Installed By Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .installedBy(\"ci-pipeline\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variable for Flyway Config File Encoding\nDESCRIPTION: Shell example showing how to set the FLYWAY_CONFIG_FILE_ENCODING environment variable to specify the encoding for Flyway configuration files. This takes precedence over the command-line parameter.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Maven Goal.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n> export FLYWAY_CONFIG_FILE_ENCODING=ISO-8859-1\n```\n\n----------------------------------------\n\nTITLE: Setting baselineVersion in Maven Plugin Configuration for Flyway\nDESCRIPTION: Configures the baselineVersion within a Maven plugin's XML configuration section. Insert this XML block under the appropriate plugin in pom.xml. Requires the Flyway Maven plugin applied to the project. Users can modify the version number to suit their migration baseline.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Baseline Version Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <baselineVersion>0.0</baselineVersion>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Generating Baseline Migration Script (Flyway CLI)\nDESCRIPTION: Demonstrates how to generate a baseline migration script using the Flyway `add` command with the `-type=baseline` option. The `-location` parameter specifies the directory to create the script in, and the `-description` parameter sets the description part of the migration name. Requires Flyway CLI to be installed and configured.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Add.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> flyway add -type=baseline -location=C:\\Users\\FlywayUser\\Project\\migrations\\ -description=initial_state\n```\n\n----------------------------------------\n\nTITLE: Configuring Add Location in TOML File (TOML)\nDESCRIPTION: This TOML configuration snippet shows how to set the default location for generating new migration files within a configuration file. The `location` property is placed under the `[flyway.add]` section, making \"migrations\" the default directory when the `flyway add` command is executed without an explicit location argument.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Add Namespace/Flyway Add Location Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.add]\nlocation = \"migrations\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Local DB Resolver with TOML Configuration File\nDESCRIPTION: Example of configuring the Local DB Resolver using Flyway's TOML configuration file format. It demonstrates how to set up environment configuration with the Local DB Resolver for SQL Server Local DB connections.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Local DB Resolver.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development]\nurl = \"jdbc:jtds:sqlserver://./development;instance=${localdb.pipeName};namedPipe=true\"\nuser = \"my-user\"\npassword = \"${localSecret.developmentPassword}\"\n\n[environments.development.resolvers.localdb]\ninstanceName = \"MSSQLLocalDB\"\n```\n\n----------------------------------------\n\nTITLE: Oracle JDBC URL with TNS Alias\nDESCRIPTION: This snippet shows how to use a TNS alias in the JDBC URL for connecting to an Oracle database.  This requires setting the `TNS_ADMIN` environment variable and configuring `tnsnames.ora`. It's used in conjunction with Oracle Wallet authentication.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Oracle Database/Oracle Database - Native Connectors.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n`jdbc:oracle:thin:@db_alias`\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Gradle Dependency Configuration for Redgate Flyway\nDESCRIPTION: Gradle configuration to add PostgreSQL database support for Redgate Flyway. This dependency is required to enable PostgreSQL integration in Java projects.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/PostgreSQL Database.md#_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation \"com.redgate.flyway:flyway-database-postgresql\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Stream Option in Properties Configuration\nDESCRIPTION: This snippet shows how to configure Flyway's `stream` option within a properties file. The property `flyway.stream` is set to `true`. No additional dependencies are needed. The output is Flyway streaming migrations, beneficial for large migrations to improve memory usage.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Stream Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.stream=true\n```\n\n----------------------------------------\n\nTITLE: Configure undoSqlMigrationPrefix via Command-line (Powershell)\nDESCRIPTION: Demonstrates how to set the `undoSqlMigrationPrefix` configuration option when executing Flyway commands directly from the command line using the `-undoSqlMigrationPrefix` flag.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Undo SQL Migration Prefix Setting.md#_snippet_0\n\nLANGUAGE: Powershell\nCODE:\n```\n./flyway -undoSqlMigrationPrefix=\"B\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Vault Secrets via API in Java\nDESCRIPTION: This Java snippet illustrates how to programmatically set Vault secret paths for Flyway configurations using the API. It accesses the VaultConfigurationExtension plugin via the Flyway configuration's plugin register, then sets the Vault secrets as varargs strings representing Vault paths. This allows dynamic configuration of secrets within Java applications without relying on external configuration files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Vault Namespace/Flyway Vault Secrets Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nVaultConfigurationExtension vaultConfigurationExtension = configuration.getPluginRegister().getPlugin(VaultConfigurationExtension.class)\nvaultConfigurationExtension.setVaultSecrets(\"kv/data/flyway/flywayConfig1\", \"kv/flyway/flywayConfig2\");\n```\n\n----------------------------------------\n\nTITLE: Configuring trimTrailingWhiteSpace Option in TOML Configuration File\nDESCRIPTION: Example TOML configuration that enables the trimTrailingWhiteSpace option for SQL Server data comparisons. When enabled, columns with values that only differ by trailing whitespace will be considered identical.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Data Comparison Options Namespace/SQL Server Data Trim Trailing White Space Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.data.options.comparison]\ntrimTrailingWhiteSpace = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Ignore Whitespace in TOML\nDESCRIPTION: This TOML configuration snippet sets the `ignoreWhiteSpace` option to `true`. This instructs Flyway to ignore whitespace differences (newlines, tabs, spaces) when comparing SQL Server databases. This setting applies to comparisons made when using the schema model, and will not affect whitespace during database deployment. The option is configured within the `[redgateCompare.sqlserver.options.ignores]` section of a TOML configuration file.  The key parameter is `ignoreWhiteSpace`, a boolean value.  The expected input is a valid TOML file with the specific key-value setting.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore White Space Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreWhiteSpace = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Repeatable SQL Prefix in Gradle\nDESCRIPTION: Demonstrates configuring the `repeatableSqlMigrationPrefix` within the `flyway` extension block in a Gradle build script. This integrates Flyway configuration directly into the build process. Requires the Flyway Gradle plugin to be applied.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Repeatable SQL Migration Prefix Setting.md#_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    repeatableSqlMigrationPrefix = 'A'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Backup Provisioner for SQL Server in TOML\nDESCRIPTION: This TOML snippet demonstrates how to configure the Flyway backup provisioner for a SQL Server environment. The configuration specifies the environment connection details and sets the provisioner to 'backup'. The backup file path and backup version are defined under the resolver's backup section, enabling automated restoration and versioning of the target database. The dependencies include access to the SQL Server instance and the backup file path specified.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Provisioner Setting/Backup Provisioner.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[environments.shadow]\nurl = \"jdbc:sqlserver://localhost:1433;databaseName=MyDatabase;trustServerCertificate=true\"\nuser = \"MyUser\"\npassword = \"${localSecret.MyPasswordKey}\"\nprovisioner = \"backup\"\n\n[environments.shadow.resolvers.backup]\nbackupFilePath = '\\\\DBOps1\\Backups\\backup.bak'\nbackupVersion = \"995\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway JDBC URL via Environment Variable\nDESCRIPTION: Demonstrates setting the `flyway.url` using the corresponding environment variable `FLYWAY_URL`. Flyway reads configuration from environment variables as part of its loading process.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment URL Setting.md#_snippet_4\n\nLANGUAGE: Environment Variable\nCODE:\n```\nFLYWAY_URL=jdbc:h2:mem:flyway_db\n```\n\n----------------------------------------\n\nTITLE: Setting outputQueryResults in Flyway TOML Configuration File\nDESCRIPTION: This snippet shows how to set the 'outputQueryResults' configuration option to false within a Flyway TOML configuration file, controlling whether query results are displayed during migration runs.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Output Query Results Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\noutputQueryResults = false\n```\n\n----------------------------------------\n\nTITLE: Setting installedBy parameter using Command-line in PowerShell\nDESCRIPTION: Command-line example showing how to set the installedBy parameter to 'ci-pipeline' when running the clean command in Flyway using PowerShell.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Installed By Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -installedBy=\"ci-pipeline\" clean\n```\n\n----------------------------------------\n\nTITLE: Configuring reportEnabled via Command-line in Flyway\nDESCRIPTION: This snippet demonstrates how to enable report generation using the Flyway CLI by setting the 'reportEnabled' parameter to true before executing a migration. It facilitates audit and reporting by capturing CLI output in a report file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Report Enabled Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway -reportEnabled=true migrate\n```\n\n----------------------------------------\n\nTITLE: Performing Flyway Dry Run (Console)\nDESCRIPTION: Executes a Flyway migration dry run, which assesses pending migrations but does not apply them to the database. Instead, it generates a single SQL file specified by -dryRunOutput=dryrun.sql, containing all SQL statements that would have been executed, including schema history updates.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Dry Runs.md#_snippet_2\n\nLANGUAGE: Console\nCODE:\n```\nflyway migrate -dryRunOutput=dryrun.sql\n```\n\n----------------------------------------\n\nTITLE: Setting Dapr URL via Command-line in PowerShell\nDESCRIPTION: Sets the Dapr sidecar REST API URL using Flyway's command-line interface with PowerShell. This example demonstrates configuring the URL for a secrets store while executing the 'info' command.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Dapr Namespace/Flyway Dapr URL Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -dapr.url=\"http://localhost:3500/v1.0/secrets/my-secrets-store\" info\n```\n\n----------------------------------------\n\nTITLE: Generating Script from Migrations using Flyway Prepare (Shell)\nDESCRIPTION: Generates a SQL deployment script (`D__deployment.sql`) containing all pending SQL migrations required to update the 'production-equivalent' target environment. This is an alternative to `flyway migrate`, useful for review or deployment where Flyway isn't installed, but it does not support Java migrations or callbacks. It's similar to a `migrate` dry run.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Prepare.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nflyway prepare -source=migrations -target=production-equivalent -scriptFilename=\"D__deployment.sql\"\n```\n\n----------------------------------------\n\nTITLE: Enabling addDropAndCreateForRerunnableScripts in TOML Configuration\nDESCRIPTION: This TOML snippet demonstrates how to enable the 'addDropAndCreateForRerunnableScripts' option within a Flyway configuration file. Setting this to 'true' modifies the comparison behavior for specific SQL Server objects to use DROP and CREATE statements instead of ALTER.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Behavior Options Namespace/SQL Server Add Drop And Create For Rerunnable Scripts Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.behavior]\naddDropAndCreateForRerunnableScripts = true\n```\n\n----------------------------------------\n\nTITLE: Configuring useChecksumComparison in TOML\nDESCRIPTION: This snippet demonstrates how to enable checksum-based comparison in a TOML configuration file for Redgate SQL Compare. Setting `useChecksumComparison` to `true` enables the feature.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Data Comparison Options Namespace/SQL Server Data Use Checksum Comparison Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.data.options.comparison]\nuseChecksumComparison = true\n```\n\n----------------------------------------\n\nTITLE: Setting `skipDefaultResolvers` in Gradle Build Script (Groovy)\nDESCRIPTION: Shows how to set the `skipDefaultResolvers` option within a Gradle build script (`build.gradle` or `build.gradle.kts`) using the Flyway Gradle plugin. Assign `true` to the `skipDefaultResolvers` property within the `flyway {}` configuration block.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Skip Default Resolvers Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    skipDefaultResolvers = true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Token via Command Line in Flyway\nDESCRIPTION: Example of how to set the Vault token through the command-line interface. This allows Flyway to access secrets stored in Vault during operations like 'info'.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Vault Resolver/Vault Resolver Token Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway info -environments.development.resolvers.vault.token=\"abc.1234567890\"\n```\n\n----------------------------------------\n\nTITLE: Setting changesSource in Flyway TOML Configuration File\nDESCRIPTION: Example of configuring the changesSource option to 'migrations' in a TOML configuration file. This sets the deployment source for change reports to be based on migration files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Changes Source Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.check]\nchangesSource = \"migrations\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Overrides - Environment Variable\nDESCRIPTION: Demonstrates setting error overrides through an environment variable. It sets the `FLYWAY_ERROR_OVERRIDES` environment variable to a specific error override string. This method relies on Flyway checking for this environment variable during initialization.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Error Overrides Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_ERROR_OVERRIDES=STATE:12345:W\n```\n\n----------------------------------------\n\nTITLE: Comparing Environment vs. Schema Model - Flyway Diff\nDESCRIPTION: This snippet demonstrates comparing a database environment with a schema model using the `flyway diff` command. It lists object-level differences between the two sources, such as added, edited, or deleted database objects. It uses `-source`, `-target`, and `-artifactFilename` parameters to specify the comparison sources and the output file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Diff.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n&gt; flyway diff -source=dev -target=schemaModel -artifactFilename=.\\diffArtifacts\\artifact\n\nFlyway {{ site.flywayVersion }} by Redgate\ndiff artifact generated: C:\\Users\\Projects\\diffArtifacts\\artifact\n+-----------------------------+--------+-------------+--------+----------------+\n| Id                          | Change | Object Type | Schema | Name           |\n+-----------------------------+--------+-------------+--------+----------------+\n| mYwo9SPg2QEXPt8NaQlzTOW585o | Add    | View        | HR     | view1          |\n| LEIqXw5rFvQUxosOl_zdDfBYyUA | Edit   | Table       | HR     | table1         |\n| uRqqxnJVd2ostltNTo8j1WAWuCQ | Delete | Table       | HR     | table2         |\n+-----------------------------+--------+-------------+--------+----------------+\n```\n\n----------------------------------------\n\nTITLE: Repairing Flyway Schema History Table via Maven - Maven\nDESCRIPTION: This Maven command executes the Flyway repair goal as part of a build or directly from the console. It invokes 'flyway:repair', performing schema history cleanup and synchronization. The Maven Flyway plugin must be installed, and project configuration for Flyway is required; no parameters are strictly required but may be passed as needed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Repair.md#_snippet_1\n\nLANGUAGE: maven\nCODE:\n```\nmvn flyway:repair\n\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway SQL Server Dependency using Gradle (Redgate)\nDESCRIPTION: This Groovy snippet shows how to include the Flyway SQL Server extension dependency in a Gradle build script using the Redgate group coordinates. It adds the necessary library to enable Flyway's SQL Server support in Java projects managed by Gradle.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/SQL Server Database.md#_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\\n    implementation \"com.redgate.flyway:flyway-sqlserver\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring failOnMissingLocations in Maven\nDESCRIPTION: This snippet illustrates configuring the `failOnMissingLocations` property to `true` within a Maven pom.xml file. When set to true, Flyway will halt the migration process if any specified migration location is not found during a Maven goal.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Fail On Missing Locations Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <failOnMissingLocations>true</failOnMissingLocations>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Data Tracking with TOML in Flyway\nDESCRIPTION: This TOML snippet demonstrates how to define static data tables for Flyway by editing the redgateCompare.staticDataTables key in a configuration file. Each object specifies the schema, table name, and optionally the columns to exclude from tracking static data (excludedColumns), all of which require primary keys on tracked tables. No additional plugins or dependencies beyond a valid Flyway environment are required, and the configuration is only accepted in TOML format. The input is a TOML object array, and the output is that Flyway will track static data according to this specification.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Static Data Tables Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[[redgateCompare.staticDataTables]]\nschema = \"dbo\"\ntable = \"foo\"\nexcludedColumns = [\"x\", \"y\"]\n \n[[redgateCompare.staticDataTables]]\nschema = \"dbo\"\ntable = \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Using skipExecutingMigrations in Flyway Gradle Plugin (Groovy)\nDESCRIPTION: This snippet demonstrates configuring the skipExecutingMigrations option in the Flyway Gradle plugin using Groovy DSL. Setting skipExecutingMigrations to true instructs Flyway to record migrations as executed without running them during Gradle build scripts. It requires Flyway's Gradle plugin integrated into the build.gradle file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Skip Executing Migrations Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    skipExecutingMigrations = true\n}\n```\n\n----------------------------------------\n\nTITLE: Observing Status After Modifying Repeatable Migration (CLI - Console)\nDESCRIPTION: Displays the Flyway migration status after modifying the 'R__People_view.sql' file. The output shows the previous application marked as 'Outdated' and the modified version detected as 'Pending'.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Repeatable Migrations.md#_snippet_6\n\nLANGUAGE: Console\nCODE:\n```\nflyway info\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway initSql in Properties File - Properties\nDESCRIPTION: This snippet demonstrates how to set the `initSql` parameter in a traditional Java Properties-style Flyway configuration file. The property key is `flyway.initSql`, and the value is the SQL statement to be executed after connection. Requires a Flyway properties configuration file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Init SQL Setting.md#_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.initSql=ALTER SESSION SET NLS_LANGUAGE='ENGLISH';\n```\n\n----------------------------------------\n\nTITLE: Excluding Schemas in Flyway SQL Server Clean Mode (TOML Configuration)\nDESCRIPTION: This TOML snippet configures Flyway to exclude specific schemas from the cleaning process when the SQL Server clean mode is set to 'all'. It requires a Flyway installation where TOML configuration files are used, and the flyway.sqlserver.clean.mode parameter is set to 'all'. The schemas.exclude array takes any number of schema names as strings. This prevents schema1 and schema2 from being dropped or cleaned. Inputs are the configuration parameters, and there is no output except the altered Flyway clean behavior.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Server Namespace/Flyway SQL Server Clean Namespace/Flyway SQL Server Clean Schemas Exclude Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway.sqlserver.clean]\nmode = \"all\"\nschemas.exclude = [ \"schema1\", \"schema2\" ] \n```\n\n----------------------------------------\n\nTITLE: Generating Dry Run Script with Flyway (Bash)\nDESCRIPTION: This bash snippet demonstrates the command to generate a dry run script using the flyway tool. It is equivalent to a dry run script generated through the `migrate` or `prepare` commands. The primary function is to create pre-deployment reports. No parameters are required, but optional parameters can configure output and the working directory. The output is specific to the configured settings and database.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Check/Check DryRun.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflyway check -dryrun\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Overrides - TOML\nDESCRIPTION: Demonstrates how to configure error overrides using a TOML configuration file. It sets the `errorOverrides` field within the `flyway` section, assigning an array containing a specific error override string. This configuration utilizes the TOML format, which is a human-readable configuration file format. No specific dependencies are mentioned, but a TOML parser would likely be required if this file were being read programmatically.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Error Overrides Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nerrorOverrides = [\"STATE:12345:W\"]\n```\n\n----------------------------------------\n\nTITLE: Using nameOnly parameter with Flyway command-line\nDESCRIPTION: Example of using the nameOnly parameter with the Flyway 'add' command in the command-line interface. When set to true, it will only return the script name without creating the file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Add Namespace/Flyway Add Name Only Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway add -nameOnly=true\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway lockRetryCount via Command-Line in PowerShell\nDESCRIPTION: This snippet demonstrates how to specify the lockRetryCount parameter directly from the command-line using PowerShell. The example sets the retry count to 10, controlling the number of 1-second retry attempts Flyway makes to obtain a database lock before aborting the migration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Lock Retry Count Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -lockRetryCount=10 migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Server Kerberos Login File via Flyway Java API\nDESCRIPTION: This Java snippet demonstrates how to programmatically set the SQL Server Kerberos login configuration file path using Flyway's API. It retrieves the SQLServerConfigurationExtension plugin from the configuration's plugin register and sets the kerberosLoginFile property, enabling Kerberos authentication in Java applications using Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Server Namespace/Flyway SQL Server Kerberos Login File Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nSQLServerConfigurationExtension sqlServerConfigurationExtension = configuration.getPluginRegister().getPlugin(SQLServerConfigurationExtension.class);\nsqlServerConfigurationExtension.setKerberosLoginFile(\"/path/to/SQLJDBCDriver.conf\");\n```\n\n----------------------------------------\n\nTITLE: Setting ignoreSynonymDependencies in TOML Configuration (SQL Server)\nDESCRIPTION: This TOML configuration snippet demonstrates how to enable the `ignoreSynonymDependencies` option within the `[redgateCompare.sqlserver.options.ignores]` section. Setting it to `true` instructs Redgate Compare (used by Flyway) to ignore system-named indexes, foreign keys, primary keys, and default, unique, and check constraints when comparing SQL Server schemas. This setting is configured within a TOML file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Synonym Dependencies Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreSynonymDependencies = true\n```\n\n----------------------------------------\n\nTITLE: Flyway Schema Comparison via Command-line - Bash\nDESCRIPTION: This bash script demonstrates how to use the Flyway command-line tool to compare schemas. It utilizes the `diff` command along with the `-snapshotSchemas` parameter.  The `-source` and `-target` arguments are used to specify the source and target environments or snapshots. The expected output would be a comparison of schemas using schema1 as the snapshot schema.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DIff Namespace/Flyway Diff Snapshot Schemas Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway diff -source=\"env:production\" -target=\"snapshot:production.snp\" -snapshotSchemas=\"schema1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring jdbcProperties TOML Command-line (PowerShell)\nDESCRIPTION: Illustrates how to set a JDBC property for a named environment (`sample`) via the command line when using a TOML configuration file. The property `accessToken` is nested under the environment name and `jdbcProperties`. Requires a Flyway installation and a TOML project structure.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment JDBC Properties Namespace.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -environments.sample.jdbcProperties.accessToken=my-access-token info\n```\n\n----------------------------------------\n\nTITLE: Flyway Environment Variable Configuration\nDESCRIPTION: Configures the Oracle Kerberos cache file using an environment variable. The `FLYWAY_ORACLE_KERBEROS_CACHE_FILE` environment variable is set to the desired cache file location. Flyway reads this variable during initialization.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle Kerberos Cache File Setting.md#_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nFLYWAY_ORACLE_KERBEROS_CACHE_FILE=/temp/krb5cc_123\n```\n\n----------------------------------------\n\nTITLE: Flyway Command-line Configuration\nDESCRIPTION: Configures the Oracle Kerberos cache file using the Flyway command-line interface. The `oracle.kerberosCacheFile` parameter is passed as a command-line argument to the Flyway executable. This overrides any default configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle Kerberos Cache File Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway -oracle.kerberosCacheFile=\"/temp/krb5cc_123\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Overrides - Properties File\nDESCRIPTION: Shows how to configure error overrides using a properties configuration file. The configuration sets the `flyway.errorOverrides` property to a specified error override value. This method relies on Flyway's ability to read properties files for configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Error Overrides Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.errorOverrides=STATE:12345:W\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Provisioner in Powershell\nDESCRIPTION: Example of setting the environment provisioner to 'clone' using the Flyway command-line interface with Powershell.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Provisioner Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -environments.sample.provisioner=clone info\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Service Definition for SQL Server Database\nDESCRIPTION: This YAML snippet defines a Docker Compose service named 'development' for an SQL Server database, including build context, environment variables (plain text passwords), port mappings, and healthcheck command for readiness verification. It provides the core configuration for containerized database setup.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Provisioner Setting/Docker Provisioner.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  development:\n    build: .\n    environment:\n      - MSSQL_PASSWORD=MyPassword\n      - ACCEPT_EULA=Y\n    ports:\n      - \"1433:1433\"\n    healthcheck:\n      test: [ \"CMD\", \"/opt/mssql-tools/bin/sqlcmd\", \"-U\", \"MyUser\", \"-P\", \"MyPassword\", \"-d\", \"MyDatabase\", \"-Q\", \"SELECT 1\"]\n      interval: 10s\n      retries: 20\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway License Key via Command-line (PowerShell)\nDESCRIPTION: This snippet demonstrates how to pass the Flyway Teams license key directly on the command line using PowerShell syntax. It requires the Flyway executable and sets the license key parameter inline, enabling Teams features for that execution. Input is the license key string beginning with 'FL'. The output is the invocation of Flyway commands with the specified license configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway License Key Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -licenseKey=\"FL01...\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle SQL*Plus Support via Properties File\nDESCRIPTION: Demonstrates setting 'flyway.oracle.sqlplus' to true within a properties configuration file. This allows Flyway to enable SQL*Plus support during its execution when reading from properties files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle SQLPlus Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.oracle.sqlplus=true\n```\n\n----------------------------------------\n\nTITLE: SQL Server Filter Expressions with LIKE Syntax (XML)\nDESCRIPTION: These XML snippets demonstrate how to use SQL Server `LIKE` and `NOT LIKE` syntax within the `<Expression>` node of object type filters, specifically for `<Table>` objects. They show examples of filtering based on naming patterns using wildcards (`%`, `_`) and how to escape literal underscores using `[_]`. Examples include filtering by name prefix and schema.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Filter Formats/SQL Server Filter format.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Here we are only including tables that begin with tbl_ -->\n<!-- Note that since the underscore character is interpreted as a wildcard, it needs to be escaped in square brackets to denote the character -->\n    <Table version=\"1\">\n        <Include>True</Include>\n        <Expression>((@NAME LIKE 'tbl[_]%'))</Expression>\n    </Table>\n\n<!-- Here we are excluding tables that begin with test_ OR tables that begin with todo_ -->\n    <Table version=\"1\">\n        <Include>False</Include>\n        <Expression>((@NAME LIKE 'test[_]%')) OR ((@NAME LIKE 'todo[_]%'))</Expression>\n    </Table>\n\n<!-- Here we are excluding tables that belong to a schema named 'test' -->\n    <Table version=\"1\">\n        <Include>False</Include>\n        <Expression>((@SCHEMA = 'test'))</Expression>\n    </Table>\n```\n\n----------------------------------------\n\nTITLE: Properties File Configuration for ignoreMigrationPatterns\nDESCRIPTION: Shows how to specify ignoreMigrationPatterns within a properties file using the key `flyway.ignoreMigrationPatterns`, assigning a value like `repeatable:missing`. Useful for persistent configuration across environments.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Ignore Migration Patterns Setting.md#_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nflyway.ignoreMigrationPatterns=repeatable:missing\n```\n\n----------------------------------------\n\nTITLE: Configuring connectRetriesInterval via Environment Variable\nDESCRIPTION: This snippet illustrates setting the connection retries interval through an environment variable, FLYWAY_CONNECT_RETRIES_INTERVAL, to 60 seconds. This method is suitable for environment-specific configurations and automation scripts.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Connect Retries Interval Setting.md#_snippet_4\n\nLANGUAGE: Properties\nCODE:\n```\nFLYWAY_CONNECT_RETRIES_INTERVAL=60\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway SQL Server Dependency (Open Source) in Gradle\nDESCRIPTION: Gradle Groovy dependency declaration to include the Open Source version of the `flyway-sqlserver` artifact in a Java project using Gradle. This enables Flyway support for Azure Synapse.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Azure Synapse.md#_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    compile \"org.flywaydb:flyway-sqlserver\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting `skipDefaultResolvers` in TOML Configuration File\nDESCRIPTION: Shows how to configure the `skipDefaultResolvers` option within a Flyway TOML configuration file. Set `skipDefaultResolvers` to `true` under the `[flyway]` section to disable default resolvers for Flyway runs using this configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Skip Default Resolvers Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nskipDefaultResolvers = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Callbacks in TOML Configuration File\nDESCRIPTION: Specifies the 'callbacks' property in the Flyway TOML configuration file as an array of fully qualified callback class names or packages. Facilitates automation and integration by storing callback settings in a structured format, enabling Flyway to load the specified Java callbacks during operations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Callbacks Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway]\ncallbacks = [\"my.callback.FlywayCallback\", \"my.package.to.scan\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Connect Retries via Command-line (Powershell)\nDESCRIPTION: This PowerShell snippet demonstrates setting the `connectRetries` parameter from the command line.  It sets the maximum number of connection retries to 10 using the command `./flyway -connectRetries=10 info`. When using a TOML config,  prefix with `environments.{environment name}.`.  There are no dependencies needed beyond Flyway CLI itself. The output of the `info` command shows the configuration applied.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Connect Retries Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -connectRetries=10 info\n```\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -environments.sample.connectRetries=10 info\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreWhitespace in TOML - Oracle\nDESCRIPTION: This code snippet demonstrates how to configure the `ignoreWhitespace` option in a TOML configuration file for Redgate Compare when comparing Oracle databases. Setting `ignoreWhitespace` to `true` will ignore whitespace differences in PL/SQL blocks during the comparison. This setting is located under the `redgateCompare.oracle.options.ignores` section.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Ignore Options Namespace/Oracle Ignore Whitespace Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.oracle.options.ignores]\nignoreWhitespace = true\n```\n\n----------------------------------------\n\nTITLE: Setting Clickhouse Zookeeper Path in Properties Configuration\nDESCRIPTION: Illustrates configuring the Clickhouse Zookeeper path in a standard Flyway properties configuration file using the `flyway.clickhouse.zookeeperPath` property. This specifies the Zookeeper node containing the Clickhouse cluster configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Clickhouse Namespace/Flyway Clickhouse Zookeeper Path Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.clickhouse.zookeeperPath=/clickhouse/tables/{shard}/{database}/{table}\n```\n\n----------------------------------------\n\nTITLE: Flyway cherryPick Configuration (Java API)\nDESCRIPTION: This snippet demonstrates how to set the `cherryPick` option using the Flyway Java API.  It retrieves the `CherryPickConfigurationExtension` plugin and sets the `cherryPick` property to a list containing `2.0`, instructing Flyway to only consider migration version `2.0`. This requires the CherryPick plugin to be registered.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Cherry Pick Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nCherryPickConfigurationExtension cherryPickConfigurationExtension = configuration.getPluginRegister().getPlugin(CherryPickConfigurationExtension.class);\ncherryPickConfigurationExtension.setCherryPick(List.of(\"2.0\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring dryRunOutput via Environment Variable\nDESCRIPTION: Defines the dry run output file path using an environment variable, facilitating configuration without modifying files directly. The variable name FLYWAY_DRYRUN_OUTPUT directs Flyway to save dry run SQL statements to the specified location.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Dry Run Output Setting.md#_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nFLYWAY_DRYRUN_OUTPUT=/my/output/file.sql\n```\n\n----------------------------------------\n\nTITLE: Setting flyway.snapshot.rebuild via Command-line in Bash\nDESCRIPTION: Demonstrates how to enable the snapshot rebuild option when using the Flyway command-line interface with the 'migrations' source.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Snapshot Namespace/Flyway Snapshot Rebuild Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway snapshot -source=\"migrations\" -rebuild=true\n```\n\n----------------------------------------\n\nTITLE: Configuring oracleSqlplusWarn in Gradle\nDESCRIPTION: This snippet demonstrates how to configure the `oracleSqlplusWarn` option within a Gradle build script. Setting `oracleSqlplusWarn = true` in the `flyway` block will enable warnings instead of errors for unsupported Oracle SQL*Plus statements.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle SQLPlus Warn Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    oracleSqlplusWarn = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mixed Mode in Flyway with Maven\nDESCRIPTION: Example of enabling the mixed mode parameter for Flyway in a Maven pom.xml configuration. This allows migrations to contain both transactional and non-transactional statements.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Mixed Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <mixed>true</mixed>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Disabling createSchemas via Flyway Java API\nDESCRIPTION: This Java snippet demonstrates how to configure the `createSchemas` property programmatically using the Flyway API. It uses the `configure()` method to build a configuration and calls the `createSchemas(false)` setter before loading the configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Create Schemas Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .createSchemas(false)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Configuring Placeholder Replacement via Java API - Flyway - Java\nDESCRIPTION: This Java snippet shows how to configure placeholderReplacement using the Flyway Java API. The configure() method initializes the configuration builder. The placeholderReplacement method expects a Boolean. After configuration, load() finalizes and returns the Flyway instance. Requires Flyway Java API dependency in your project.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Replacement Setting.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .placeholderReplacement(false)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Provisioner in TOML for Flyway Environment\nDESCRIPTION: This TOML snippet shows how to set up the Docker provisioner within Flyway's environment configuration. It specifies the compose file, services, and wait timeout to enable containerized database provisioning during deployment.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Provisioner Setting/Docker Provisioner.md#_snippet_0\n\nLANGUAGE: Toml\nCODE:\n```\n[environments.development]\nurl = \"jdbc:sqlserver://localhost:1433;databaseName=MyDatabase;trustServerCertificate=true\"\nuser = \"MyUser\"\npassword = \"${localSecret.MyPasswordKey}\"\nprovisioner = \"docker\"\n\n[environments.development.resolvers.docker]\ncomposeFile = \"compose.yml\"\nservices = [ \"development\" ]\nwaitTimeout = \"1m\"\n```\n\n----------------------------------------\n\nTITLE: Configuring oracleSqlPlusWarn in TOML\nDESCRIPTION: This snippet demonstrates how to configure the `oracleSqlPlusWarn` option within a TOML configuration file.  The setting `sqlplusWarn = true` under the `[flyway.oracle]` section enables warnings instead of errors for unsupported Oracle SQL*Plus statements.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle SQLPlus Warn Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.oracle]\nsqlplusWarn = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Baseline Description in TOML\nDESCRIPTION: This TOML configuration snippet shows how to configure the `baselineDescription` parameter within a Flyway configuration file. The value \"Baseline\" is assigned to the `baselineDescription` property. This setting will apply when Flyway uses this configuration file.  Requires a valid TOML formatted file and the Flyway tool to be correctly configured to use this file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Baseline Description Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nbaselineDescription = \"Baseline\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle Ignore Rules - TOML\nDESCRIPTION: This TOML snippet demonstrates how to configure the `ignoreRules` setting for Oracle. The setting specifies the path to a pre-filter file, `Custom.scpf`, which contains custom filtering rules to exclude specific database objects from comparisons. The file is resolved relative to the working directory.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Ignore Rules Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle]\nignoreRules = \"Custom.scpf\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Resolvers via Command-line with TOML\nDESCRIPTION: Example of setting custom migration resolvers using the command-line with the migrationResolvers parameter. This approach uses Flyway CLI with a TOML configuration reference.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Migration Resolvers Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -migrationResolvers=\"my.resolver.MigrationResolver\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring Placeholder Separator via Environment Variable\nDESCRIPTION: Specifies the environment variable `FLYWAY_PLACEHOLDER_SEPARATOR` used to configure the placeholder separator. Setting this variable overrides other configuration methods. The example shows setting it to '_'.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Separator Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_PLACEHOLDER_SEPARATOR=_\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Transactional Lock via Gradle (Flyway)\nDESCRIPTION: This Gradle snippet showcases how to configure the `postgresqlTransactionalLock` property within a Gradle build script using the `flyway` block. Setting `postgresqlTransactionalLock: 'false'` configures Flyway to use session-level locks. Requires the Flyway Gradle plugin dependency in the build script.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway PostgreSQL Namespace/Flyway PostgreSQL Transactional Lock Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    pluginConfiguration = [\n      postgresqlTransactionalLock: 'false'\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting majorTolerance via TOML Configuration File\nDESCRIPTION: Example of configuring the majorTolerance to 3 in a TOML configuration file under the flyway.check namespace.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Major Tolerance Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.check]\nmajorTolerance = 3\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway initSql via Command Line (Default Environment) - PowerShell\nDESCRIPTION: This snippet demonstrates how to configure the `initSql` parameter directly on the command line for the default Flyway environment. The provided SQL statement will be executed immediately after Flyway connects to the database for the specified operation (e.g., `info`). Requires access to the Flyway command-line executable.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Init SQL Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway -initSql=\"ALTER SESSION SET NLS_LANGUAGE='ENGLISH';\" info\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway Informix Dependency (Gradle - Redgate)\nDESCRIPTION: Declares the Redgate version of the Flyway Informix database support module as an implementation dependency in a Gradle build script (build.gradle). This integrates Informix support into the Java project.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Informix.md#_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation \"com.redgate.flyway:flyway-database-informix\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Engine Version via TOML\nDESCRIPTION: This TOML configuration sets the `engineVersion` of the Vault secret engine within a Flyway configuration file. The key parameter is `engineVersion`, which is set to \"v2\".  Dependencies include using a valid Flyway configuration file with the appropriate structure. The TOML file is parsed to load and configure flyway and it is expected to provide the `engineVersion` setting. The output from this configuration is determined by how Flyway reads this file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Vault Resolver/Vault Resolver Engine Version Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development.resolvers.vault]\nengineVersion = \"v2\"\n```\n\n----------------------------------------\n\nTITLE: Setting ignoreStatisticsNoRecomputePropertyOnIndexes Option in Flyway TOML Configuration\nDESCRIPTION: This TOML snippet demonstrates how to enable the 'ignoreStatisticsNoRecomputePropertyOnIndexes' setting in Flyway's SQL Server comparison options to ignore the STATISTICS_NORECOMPUTE property on indexes and primary keys. The configuration must be placed under '[redgateCompare.sqlserver.options.ignores]' in the TOML configuration file. Enabling this boolean option (default false) affects how Flyway compares certain index properties during migration operations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Statistics No Recompute Property On Indexes Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreStatisticsNoRecomputePropertyOnIndexes = true\n```\n\n----------------------------------------\n\nTITLE: Setting artifactFilename: Flyway CLI (prepare command) - Bash\nDESCRIPTION: This snippet demonstrates setting the `artifactFilename` parameter when executing the `flyway prepare` command via the command line. It provides a direct way to specify the output file path for the diff artifact for a single command execution. Required: Flyway CLI must be installed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Prepare Namespace/Flyway Prepare Artifact Filename Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway prepare -artifactFilename=artifact.diff\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Error Overrides in Maven XML - XML\nDESCRIPTION: This XML configuration snippet shows how to set up Flyway's Maven plugin with an error override rule. The <errorOverride> element maps a specific SQL state and error code (42001) to a warning (W) to prevent migration failures on that error. Dependencies for the H2 database driver are included. This configuration must reside in the Maven project file (pom.xml) inside the plugin settings.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Error Overrides.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<project xmlns=\"...\">\n    ...\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.flywaydb</groupId>\n                <artifactId>flyway-maven-plugin</artifactId>\n                <version>{{ site.flywayVersion }}</version>\n                <configuration>\n                    <url>jdbc:h2:file:./target/foobar</url>\n                    <user>sa</user>\n                    <errorOverrides>\n                        <errorOverride>42001:42001:W</errorOverride>\n                    </errorOverrides>\n                </configuration>\n                <dependencies>\n                    <dependency>\n                        <groupId>com.h2database</groupId>\n                        <artifactId>h2</artifactId>\n                        <version>1.4.191</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Overrides - Gradle\nDESCRIPTION: This snippet shows how to set error overrides within a Gradle build script. It sets the `errorOverrides` property within the `flyway` block to a specific string. This utilizes the Flyway Gradle plugin and assumes it is applied within the `build.gradle` file of the project.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Error Overrides Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    errorOverrides = 'STATE:12345:W'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting detectEncoding via Environment Variable\nDESCRIPTION: This snippet shows how to set the `detectEncoding` option to `true` using an environment variable. This enables Flyway to automatically attempt to detect the file encoding of each migration when running.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Detect Encoding Setting.md#_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nFLYWAY_DETECT_ENCODING=true\n```\n\n----------------------------------------\n\nTITLE: Enabling skipExecutingMigrations in Flyway Configuration Properties File\nDESCRIPTION: This snippet shows how to enable the skipExecutingMigrations setting in the Flyway properties configuration file by assigning true to the flyway.skipExecutingMigrations property. This modifies Flyway's behavior globally when configured to use this properties file, skipping the execution of migration scripts while updating the schema history.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Skip Executing Migrations Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.skipExecutingMigrations=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Snapshot with Command-line\nDESCRIPTION: Shows how to invoke the Flyway snapshot command with the 'buildVersion' parameter using the command-line interface. The example sets the build version to \"001\" when source is \"migrations\".\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Snapshot Namespace/Flyway Snapshot Build Version Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway snapshot -source=\"migrations\" -buildVersion=\"001\"\n```\n\n----------------------------------------\n\nTITLE: Setting IncludeStorageExtents Option in Flyway Comparison - TOML\nDESCRIPTION: This TOML snippet enables the inclusion of Oracle storage extents such as INITIAL, NEXT, MINEXTENTS, and MAXEXTENTS during database comparison using Flyway. It is part of the redgateCompare.oracle.options.storage configuration group and is used to influence how differences in storage extents are detected between Oracle databases. The option is a boolean, with a default value of false, and it is specifically designed to be set only via a TOML configuration file, not by any other method. When set to true, Flyway will consider storage extent differences during comparisons, except differences in INITIAL extents if objects exist in both databases.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Storage Options Namespace/Oracle Include Storage Extents Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.storage]\nincludeStorageExtents = true\n```\n\n----------------------------------------\n\nTITLE: Configuring validateOnMigrate via Command-Line in PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to set the `validateOnMigrate` parameter to `false` when running the `migrate` command from the command line. The setting disables the automatic validation of migrations during the migrate process.  No special dependencies are required, as it uses the Flyway command-line interface. Input is the Flyway command, and output is the migration results.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Validate On Migrate Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -validateOnMigrate=\"false\" migrate\n```\n\n----------------------------------------\n\nTITLE: Setting sqlMigrationPrefix in TOML configuration file for Flyway\nDESCRIPTION: Demonstrates how to specify the sqlMigrationPrefix parameter in a TOML configuration file for Flyway. This allows persistent configuration across executions.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Migration Prefix Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway]\nsqlMigrationPrefix = \"M\"\n```\n\n----------------------------------------\n\nTITLE: Setting Oracle Wallet Location via Command Line (Flyway)\nDESCRIPTION: This PowerShell snippet demonstrates how to set the Oracle wallet location using the command-line interface of Flyway. The `oracle.walletLocation` parameter specifies the path to the Oracle wallet directory. This allows Flyway to access the database using the credentials stored in the wallet.  The command then executes the 'info' command to display database information.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle Wallet Location Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -oracle.walletLocation=\"/User/db/my_wallet\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Migration Version in TOML File - TOML\nDESCRIPTION: This TOML configuration snippet shows how to explicitly set the migration version within a Flyway configuration file. While usually not necessary because the version is auto-calculated, this entry demonstrates specifying the 'version' key under the 'flyway.add' table. The value should be a string representing the desired migration version identifier.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Add Namespace/Flyway Add Version Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.add]\nversion = \"001\"\n```\n\n----------------------------------------\n\nTITLE: Adding Snowflake Dependency (Maven, Open Source)\nDESCRIPTION: This XML snippet shows how to include the Flyway Snowflake database support as a dependency in an Open Source Maven project using the standard org.flywaydb groupId. Adding this dependency allows Flyway to manage migrations for Snowflake databases.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Snowflake.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-database-snowflake</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Default ignoreMigrationPatterns Value in Flyway\nDESCRIPTION: This defines the default value for ignoreMigrationPatterns, set to `*:future`, which causes Flyway to ignore all migrations marked as Future by default unless overridden in configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Ignore Migration Patterns Setting.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"*:future\"\n```\n\n----------------------------------------\n\nTITLE: Supplying Vault Token in Flyway TOML Configuration - TOML\nDESCRIPTION: Shows how to set the Vault token within a Flyway configuration using TOML syntax. Add the token under the [flyway.vault] section, assigning the secret token string to the key 'token'. This format is useful for projects that adopt TOML-based config files. Requires Flyway and proper TOML parsing.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Vault Namespace/Flyway Vault Token Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.vault]\ntoken = \"s.abcdefghijklmnopqrstuvwx\"\n```\n\n----------------------------------------\n\nTITLE: Including Child Pages in HTML Layout\nDESCRIPTION: A simple HTML structure that includes a template for displaying child pages within a div element. This is commonly used in documentation sites to automatically generate a list of sub-pages.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"children\">\n{% include childPages.html %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Callbacks via Environment Variable\nDESCRIPTION: Sets the 'FLYWAY_CALLBACKS' environment variable with comma-separated callback class names or packages. Enables environment-based configuration, facilitating integration with scripts and deployment pipelines to dynamically specify callbacks for Flyway operations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Callbacks Setting.md#_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nFLYWAY_CALLBACKS=my.callback.FlywayCallback,my.package.to.scan\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreNullabilityOfColumns in TOML\nDESCRIPTION: This TOML snippet demonstrates how to set the `ignoreNullabilityOfColumns` option within a Flyway configuration file. It shows the specific path `[redgateCompare.sqlserver.options.ignores]` required to locate this setting.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Nullability Of Columns Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreNullabilityOfColumns = true\n```\n\n----------------------------------------\n\nTITLE: Setting connectRetriesInterval via PowerShell Command-line\nDESCRIPTION: This snippet demonstrates setting the connectRetriesInterval parameter to 60 seconds when executing Flyway commands through PowerShell. It shows how to specify the parameter directly in the command line for a specific Flyway operation.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Connect Retries Interval Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway -connectRetriesInterval=60 info\n```\n\n----------------------------------------\n\nTITLE: Disabling createSchemas via Environment Variable\nDESCRIPTION: This snippet shows how to disable the `createSchemas` property using an environment variable. Flyway reads configuration prefixed with `FLYWAY_`, converting snake_case to camelCase. Setting `FLYWAY_CREATE_SCHEMAS` to `false` overrides the default.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Create Schemas Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_CREATE_SCHEMAS=false\n```\n\n----------------------------------------\n\nTITLE: Diff after Build Environment Migration and Rebuild\nDESCRIPTION: This snippet uses `flyway diff` to compare a build environment against a target environment after migrating the build environment to a specified build version and rebuilding it.  The  `-buildEnvironment`, `-buildVersion`, and `-rebuild` parameters are used.  The output displays the schema changes.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Diff.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n&gt; flyway diff -source=migrations -target=prod -buildEnvironment=\"build\" -buildVersion=\"3\" -rebuild=true -artifactFilename=.\\diffArtifacts\\artifact\n\nFlyway {{ site.flywayVersion }} by Redgate\nINFO: Successfully dropped post-schema database level objects (execution time 00:00.059s)\nDatabase: jdbc://url\nSchema history table [HR].[HRSchema].[flyway_schema_history] does not exist yet\nSuccessfully validated 3 migrations (execution time 00:00.099s)\nCreating Schema History table [HR].[HRSchema].[flyway_schema_history] ...\nCurrent version of schema [HR]: << Empty Schema >>\nMigrating schema [HRSchema] to version \"1 - first\"\nMigrating schema [HRSchema] to version \"2 - table1\"\nMigrating schema [HRSchema] to version \"3 - view1\"\nSuccessfully applied 3 migrations to schema [HRSchema], now at version v3 (execution time 00:00.228s)\ndiff artifact generated: C:\\Users\\Projects\\diffArtifacts\\artifact\n+-----------------------------+--------+-------------+----------+-----------+\n| Id                          | Change | Object Type | Schema   | Name      |\n+-----------------------------+--------+-------------+----------+-----------+\n| cFfTuinTzlVluhBSmi5ZXQB4kSA | Add    | Table       | HRSchema | allTables |\n| a.o0T8ULN8u.YVZIz6UVT7dbhC0 | Add    | Table       | HRSchema | table_1   |\n| .4vZ5aLCnQIafQFb5T5O2MkLX6U | Add    | View        | HRSchema | view_1    |\n+-----------------------------+--------+-------------+----------+-----------+\n```\n\n----------------------------------------\n\nTITLE: Flyway cherryPick Configuration (TOML)\nDESCRIPTION: This snippet demonstrates how to configure the `cherryPick` option in a TOML configuration file for Flyway.  The `cherryPick` property is set to a list containing the migration version `2.0`. This configuration tells Flyway to only consider version `2.0` during migration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Cherry Pick Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\ncherryPick = [\"2.0\"]\n```\n\n----------------------------------------\n\nTITLE: Environment Variable configuration for Flyway GCSM secrets\nDESCRIPTION: Uses the environment variable 'FLYWAY_GCSM_SECRETS' to specify secrets for Flyway. Secrets are provided as a comma-separated string, allowing environment-based configuration for different deployment environments.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Google Cloud Secret Manager Namespace/Flyway Google Cloud Secret Manager Secrets Setting.md#_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nFLYWAY_GCSM_SECRETS=secret1,secret2\n```\n\n----------------------------------------\n\nTITLE: Example JDBC URL to Connect to a Named SQL Server Instance\nDESCRIPTION: This example JDBC URL demonstrates connecting to a specific named instance on a SQL Server host with the database specified. It serves as a practical illustration of the named instance connection format required by Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/SQL Server Database.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\njdbc:sqlserver://test_server;instanceName=test_instance;databaseName=test_database\n```\n\n----------------------------------------\n\nTITLE: Setting detectEncoding using Flyway API (Java)\nDESCRIPTION: This snippet demonstrates how to configure the `detectEncoding` option to `true` programmatically using the Flyway API in Java.  This enables auto-detection of file encoding during migration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Detect Encoding Setting.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nFlyway.configure()\n    .detectEncoding(true)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Disabling Placeholder Replacement in Standard Properties File - Flyway - Properties\nDESCRIPTION: This snippet documents setting the placeholderReplacement option in a properties file for Flyway. It requires the properties file to be correctly loaded by Flyway. The key flyway.placeholderReplacement takes a Boolean string ('false' or 'true'). Output is controlled by Flyway as it reads configuration at startup.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Replacement Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.placeholderReplacement=false\n```\n\n----------------------------------------\n\nTITLE: Defining the BigQuery JDBC URL Format for Flyway\nDESCRIPTION: Specifies the required JDBC URL format for connecting Flyway to Google BigQuery using service account authentication (OAuthType=0). Key parameters include ProjectId, OAuthServiceAcctEmail, and OAuthPvtKeyPath pointing to the service account key file. Note that SSL support is explicitly mentioned as 'No' in the accompanying table.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Google BigQuery.md#_snippet_0\n\nLANGUAGE: JDBC URL\nCODE:\n```\njdbc:bigquery://https://www.googleapis.com/bigquery/v2:443;ProjectId=project_id;OAuthType=0;OAuthServiceAcctEmail=service_account_name;OAuthPvtKeyPath=path_to_key;\n```\n\n----------------------------------------\n\nTITLE: Configuring failOnMissingLocations in properties file\nDESCRIPTION: This snippet shows how to configure `failOnMissingLocations` to `true` using a standard properties file.  This configuration ensures that Flyway will fail if any of the configured locations do not exist.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Fail On Missing Locations Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.failOnMissingLocations=true\n```\n\n----------------------------------------\n\nTITLE: Configuring includeUserRoles in TOML Configuration File for Oracle in Flyway\nDESCRIPTION: A TOML configuration example that enables the inclusion of user roles in Oracle database comparison scripts. This setting requires DBA privileges to successfully script roles to users.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Behavior Options Namespace/Oracle Include User Roles Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.behavior]\nincludeUserRoles = true\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Stream Option via Command-line (PowerShell)\nDESCRIPTION: This PowerShell snippet demonstrates how to set the `stream` option to `true` when using the Flyway command-line tool. It is used to enable streaming of SQL migrations, loading each statement individually. This is particularly useful for large SQL migrations to reduce memory consumption. The expected output is Flyway information.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Stream Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -stream=\"true\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Project Name in a TOML Configuration File\nDESCRIPTION: This snippet shows how to specify the Flyway project display name within a TOML configuration file. The 'name' key is assigned a string value representing the project name. This configuration is necessary as the name setting cannot be modified within Flyway Desktop or overridden on the command line once the project exists.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Name Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nname = \"MyFlywayProject\"\n```\n\n----------------------------------------\n\nTITLE: Setting Oracle Wallet Location via Gradle (Flyway)\nDESCRIPTION: This Groovy snippet shows how to set the Oracle wallet location in a Gradle build script using the Flyway plugin. It uses the `flyway` block to configure Flyway settings, and the `oracleWalletLocation` property to specify the wallet location.  This approach is useful for integrating Flyway into a build process.  This snippet requires the Flyway Gradle plugin to be included in the build configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle Wallet Location Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    oracleWalletLocation = '/User/db/my_wallet'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring flyway.add.timestamp in TOML Configuration File\nDESCRIPTION: Shows how to define the 'flyway.add.timestamp' property within a TOML configuration file under the '[flyway.add]' section. This sets the default behavior for the 'add' command when executed without an explicit command-line override.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Add Namespace/Flyway Add Timestamp Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.add]\ntimestamp = \"auto\"\n```\n\n----------------------------------------\n\nTITLE: Enabling excludeSchemaNames in Flyway TOML Configuration\nDESCRIPTION: This TOML snippet demonstrates how to set the `excludeSchemaNames` option to `true` within the `[redgateCompare.oracle.options.behavior]` section of a Flyway configuration file. Enabling this option prevents schema names from being included in the generated deployment scripts during Oracle database comparisons managed by Redgate Compare.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Behavior Options Namespace/Oracle Exclude Schema Names Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.behavior]\nexcludeSchemaNames = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Placeholder Separator in TOML File\nDESCRIPTION: Shows how to set the placeholder separator within a Flyway TOML configuration file. The `placeholderSeparator` key is placed under the `[flyway]` section and assigned the desired separator string, in this case, '_'.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Separator Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nplaceholderSeparator = \"_\"\n```\n\n----------------------------------------\n\nTITLE: Executing Flyway generate command with timestamp option in Bash\nDESCRIPTION: Runs the Flyway command-line interface to generate a migration version with a timestamp setting. Requires Flyway CLI installed. The '-timestamp' parameter accepts values 'always', 'auto', or 'never' to control timestamp appending. The example uses 'auto', which appends the timestamp only if a version number is not already present.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Timestamp Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway generate -timestamp=\"auto\"\n```\n\n----------------------------------------\n\nTITLE: Configuring `skipIntegrityChecksForForeignKeys` in TOML for Flyway Redgate Compare\nDESCRIPTION: This TOML snippet demonstrates how to enable the `skipIntegrityChecksForForeignKeys` option within the `[redgateCompare.sqlserver.data.options.deployment]` section of a Flyway configuration file. Setting it to `true` instructs Redgate Compare to use `WITH NOCHECK` when handling foreign key constraints during SQL Server data deployments, potentially improving deployment speed but leaving keys in a 'not trusted' state. This setting cannot be configured via command-line.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Data Deployment Options Namespace/SQL Server Data Skip Integrity Checks For Foreign Keys Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.data.options.deployment]\nskipIntegrityChecksForForeignKeys = true\n```\n\n----------------------------------------\n\nTITLE: Injecting Environment Variable in Flyway TOML Configuration - TOML\nDESCRIPTION: This snippet demonstrates how to use the environment variable resolver in a Flyway TOML configuration file under the environments namespace. By setting the value to \"${env.DATABASE_USERNAME}\", Flyway will dynamically substitute the value of the DATABASE_USERNAME environment variable when accessing this configuration. Requires Flyway 7.0+ and assumes that the target environment variable is available in the execution environment. This approach only applies to parameters within the environments namespace, and cannot be directly configured from Flyway Desktop, though injected values are still respected.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Environment Variable Resolver.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[environments.mydevdb]\nuser = \"${env.DATABASE_USERNAME}\"\n```\n\n----------------------------------------\n\nTITLE: Docker run command to execute 'check' with volume mounts and flags\nDESCRIPTION: This command runs the Flyway Docker image with mounted volumes for SQL scripts, reports, and config, executing the 'check' with '-changes' argument to generate change reports.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Using Flyway Check with SQL Server.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --network=\"host\" -v $PWD/sql:/flyway/sql -v $PWD/reports:/flyway/reports -v $PWD/conf:/flyway/conf redgate/flyway check -changes\n```\n\n----------------------------------------\n\nTITLE: Generating Baseline Migration Script with Flyway CLI (Shell)\nDESCRIPTION: This command utilizes the Flyway 'generate' action to create a baseline migration script based on a previously produced diff artifact. It is essential for bringing an existing database under version control, synchronizing migrations with the current production state. Required: Flyway Enterprise Edition, generated diff artifact file, proper project configuration. Parameters include script type ('baseline') and migration description. Outputs: new baseline SQL migration and associated configuration file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Flyway Desktop migrations workflow with Flyway CLI.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ flyway generate \"-generate.types=baseline\" \"-generate.description=Baseline\"\n\nFlyway Enterprise Edition {{ site.flywayVersion }} by Redgate\nLicensed to red-gate.com (license ID 1174ed6b-b10e-41bd-9a1b-285ddc3239c7)\n\nSee release notes here: https://rd.gt/416ObMi\nUsing diff artifact: C:\\Users\\Flyway\\AppData\\Local\\Temp\\flyway.artifact.diff\nGenerating baseline migration: C:\\Users\\Flyway\\FlywayProjects\\SqlServerProject\\migrations\\B001_20241209164727__Baseline.sql\nGenerated: C:\\Users\\Flyway\\FlywayProjects\\SqlServerProject\\migrations\\B001_20241209164727__Baseline.sql\n Generated configuration: C:\\Users\\Flyway\\FlywayProjects\\SqlServerProject\\migrations\\B001_20241209164727__Baseline.sql.conf\n```\n\n----------------------------------------\n\nTITLE: Configuring outputQueryResults in Maven Plugin\nDESCRIPTION: This snippet shows how to specify 'outputQueryResults' as false within Maven's plugin configuration, affecting how Flyway displays query results during Maven builds.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Output Query Results Setting.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <outputQueryResults>false</outputQueryResults>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring includeStoragePctFree in TOML Configuration File\nDESCRIPTION: This snippet demonstrates how to enable the 'includeStoragePctFree' setting in a TOML configuration file for Flyway's Oracle storage comparison options. It sets the boolean value to true, indicating that the PCTFREE clause should be included during comparisons. This configuration is typically used to adjust storage considerations based on free space percentage thresholds.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Storage Options Namespace/Oracle Include Storage PCTFREE Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.storage]\nincludeStoragePctFree = true\n```\n\n----------------------------------------\n\nTITLE: Generating Snapshot from Environment - Flyway CLI\nDESCRIPTION: This Bash snippet shows how to create a Flyway snapshot from a database environment named `dev`.  It uses the `flyway snapshot` command, passing `-source=dev` as an argument, assuming that a database environment is configured within the `flyway.toml` file. It also specifies the output filename. This requires Flyway CLI and a configured database environment.  The output is a JSON file containing the snapshot.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Snapshot.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflyway snapshot -source=dev -filename=C:\\snapshot.json\n```\n\n----------------------------------------\n\nTITLE: Setting detectEncoding in TOML Configuration\nDESCRIPTION: This snippet shows how to configure the `detectEncoding` option to `true` within a TOML configuration file for Flyway. It ensures that Flyway will attempt to auto-detect the encoding of each migration file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Detect Encoding Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway]\ndetectEncoding = true\n```\n\n----------------------------------------\n\nTITLE: Flyway Java API Configuration\nDESCRIPTION: Configures the Oracle Kerberos cache file using the Flyway Java API. The `OracleConfigurationExtension` is retrieved from the Flyway configuration and the `setKerberosCacheFile` method is used to set the desired cache file location. Requires the `OracleConfigurationExtension` class.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle Kerberos Cache File Setting.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nOracleConfigurationExtension oracleConfigurationExtension = configuration.getPluginRegister().getPlugin(OracleConfigurationExtension.class);\noracleConfigurationExtension.setKerberosCacheFile(\"/temp/krb5cc_123\");\n```\n\n----------------------------------------\n\nTITLE: Flyway API Token Configuration (Java)\nDESCRIPTION: Illustrates how to configure the Flyway token programmatically using the Flyway API in Java.  It retrieves the `PATTokenConfigurationExtension` and sets the `email` and `token` properties. This allows for dynamic configuration and integration with application logic.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Token Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway flyway = Flyway.configure().load();\nflyway.getConfigurationExtension(PATTokenConfigurationExtension.class)\n        .setEmail(\"foo.bar@red-gate.com\");\nflyway.getConfigurationExtension(PATTokenConfigurationExtension.class)\n        .setToken(\"1234ABCD\");  \n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Deployment Order in TOML\nDESCRIPTION: This snippet shows how to configure the `deploymentOrder` setting within the `[flyway.tags]` section of a Flyway TOML configuration file. It specifies the desired sequence of tags as a TOML array of strings. Flyway will use this sequence to determine the order in which migrations tagged with these values are processed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Tags Namespace/Flyway Tags Deployment Order Setting.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway.tags]\ndeploymentOrder = [\"tagA\", \"tagB\", \"tagC\"]\n```\n\n----------------------------------------\n\nTITLE: Configure Redgate Compare to Ignore Schemas in TOML\nDESCRIPTION: This TOML snippet shows how to configure Redgate Compare within a Flyway project to ignore schemas during database comparisons.  Setting `ignoreSchemas` to `true` prevents schema differences from being flagged. This option is specific to SQL Server projects.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Schemas Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreSchemas = true\n```\n\n----------------------------------------\n\nTITLE: Flyway Command-line Token Configuration\nDESCRIPTION: Demonstrates how to configure the Flyway token via the command-line interface. The `email` and `token` parameters are passed directly to the Flyway executable.  This approach is suitable for simple configurations but should be used with caution to avoid exposing the token in shell history.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Token Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway -email=\"foo.bar@red-gate.com\" -token=\"1234ABCD\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway SQL Server Data Option in TOML\nDESCRIPTION: This TOML snippet demonstrates how to configure the `dontIncludeCommentsInScript` option within a Flyway configuration file. Setting this to `true` prevents comments from being included in SQL Server data deployment scripts generated by Redgate Compare. Requires a Flyway project configured with a TOML configuration file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Data Deployment Options Namespace/SQL Server Data Dont Include Comments In Script Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.data.options.deployment]\ndontIncludeCommentsInScript = true\n```\n\n----------------------------------------\n\nTITLE: Configuring publishResult in Flyway TOML File\nDESCRIPTION: Shows how to configure Flyway to publish results by setting the `publishResult` key to `true` within the `[flyway]` section of a TOML configuration file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Publish Result Setting.md#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n[flyway]\npublishResult = true\n```\n\n----------------------------------------\n\nTITLE: Java API Usage for Setting ignoreMigrationPatterns in Flyway\nDESCRIPTION: Demonstrates configuring ignoreMigrationPatterns programmatically using Flyway's Java API by chaining `.ignoreMigrationPatterns()` with a pattern string. It simplifies integration into Java applications.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Ignore Migration Patterns Setting.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .ignoreMigrationPatterns(\"repeatable:missing\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Executing Flyway Prepare Command with Source Parameter - bash\nDESCRIPTION: This snippet illustrates how to run the Flyway 'prepare' command via the command-line interface, explicitly specifying the 'source' and 'target' parameters. It demonstrates setting the source to 'schemaModel' and the target environment to 'production'. The command requires the Flyway CLI to be installed and accessible in the environment. Inputs are passed as command-line arguments and the output is the execution of the prepare operation using the designated sources.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Prepare Namespace/Flyway Prepare Source Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway prepare -source=\"schemaModel\" -target=\"production\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CockroachDB Migration Script Syntax - SQL\nDESCRIPTION: This snippet provides an example of a Flyway migration script written in SQL for CockroachDB. It illustrates the use of single-line and multi-line comments, a `CREATE TABLE` statement (DDL), and an `INSERT` statement (DML) that includes a Flyway placeholder `${tableName}`. The script follows standard SQL syntax with `;` as the statement delimiter, compatible with CockroachDB and PostgreSQL-compatible tools.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/CockroachDB.md#_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n/* Single line comment */\nCREATE TABLE test_data (\n value VARCHAR(25) NOT NULL PRIMARY KEY\n);\n\n\n/*\nMulti-line\ncomment\n*/\n\n-- Placeholder\nINSERT INTO ${tableName} (name) VALUES ('Mr. T');\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway SQL Server Dependency (Redgate) in Maven\nDESCRIPTION: Maven XML dependency declaration to include the Redgate version of the `flyway-sqlserver` artifact in a Java project. This is required to enable Flyway support for Azure Synapse.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Azure Synapse.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.redgate.flyway</groupId>\n    <artifactId>flyway-sqlserver</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Configuration for Create-Database Provisioner\nDESCRIPTION: This TOML snippet configures Flyway to use the create-database provisioner with a PostgreSQL database, extracting the database name from the JDBC URL and ensuring database creation during setup if it does not exist.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Provisioner Setting/Create Database Provisioner.md#_snippet_1\n\nLANGUAGE: Toml\nCODE:\n```\n[environments.shadow]\nurl = \"jdbc:postgresql://localhost:5430/my_database?ssl=true\"\nuser = \"MyUser\"\npassword = \"${localSecret.MyPasswordKey}\"\nprovisioner = \"create-database\"\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of Flyway Oracle Ignore Rule File (JSON)\nDESCRIPTION: This JSON snippet demonstrates the basic structure of a Flyway Oracle ignore rule file (.scpf). It uses a 'filters' object where keys represent object types (e.g., 'table') and values are arrays of rules (in this case, a simple string 'table_one' acting as a filter pattern) to specify which objects should be included or excluded based on the rules defined in the documentation.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Filter Formats/Oracle Ignore Rules Format.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"filters\": {\n    \"table\": [\n      \"table_one\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Undo Migration Script (Flyway CLI)\nDESCRIPTION: Demonstrates how to generate an undo migration script using the Flyway `add` command with the `-type=undo` option.  The script uses the version and description of the most recent versioned migration. Requires Flyway CLI to be installed and configured.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Add.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> flyway add -type=undo\n```\n\n----------------------------------------\n\nTITLE: Setting JavaScript Migration File Suffix - Flyway - TOML\nDESCRIPTION: Configures Flyway to discover migration files with the '.js' suffix for JavaScript-based migrations. This entry is specified in the '[flyway]' section of the TOML config and is needed if JavaScript format is preferred for defining migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Using Native Connectors to connect to MongoDB.md#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nsqlMigrationSuffixes = [\".js\"]\n\n```\n\n----------------------------------------\n\nTITLE: Flyway Gradle Configuration\nDESCRIPTION: Configures the Oracle Kerberos cache file within a Gradle build script.  The `oracleKerberosCacheFile` property is set within the `flyway` block. This configuration is applied when Flyway tasks are executed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle Kerberos Cache File Setting.md#_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    oracleKerberosCacheFile = '/temp/krb5cc_123'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault URL in Maven Plugin\nDESCRIPTION: Shows how to set the Vault URL within the Maven plugin configuration, allowing Maven-based build automation to securely manage Vault integration for database migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Vault Namespace/Flyway Vault URL Setting.md#_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    <pluginConfiguration>\n        <vaultUrl>http://localhost:8200/v1/</vaultUrl>\n    </pluginConfiguration>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Executing Flyway Info via Gradle\nDESCRIPTION: Illustrates how to run the Flyway 'info' command using the Flyway Gradle plugin task. This command is executed within a Gradle project where the Flyway plugin is applied and configured in the `build.gradle` or `build.gradle.kts` file. It displays migration status information.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Info.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngradle flywayInfo\n```\n\n----------------------------------------\n\nTITLE: Flyway Generate Versioned Filename - Command-line\nDESCRIPTION: This command demonstrates how to use the `flyway.generate.versionedFilename` parameter with the Flyway command-line tool.  It generates a new versioned migration file with the specified name.  The filename can be a relative or absolute path.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Versioned Filename Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway generate -versionedFilename=V001__addTable.sql\n```\n\n----------------------------------------\n\nTITLE: Setting Repeatable SQL Prefix via Environment Variable\nDESCRIPTION: Demonstrates setting the `repeatableSqlMigrationPrefix` using an environment variable. Flyway reads environment variables prefixed with `FLYWAY_` and maps them to configuration properties (converting to snake_case or similar internally). This is useful for dynamic configuration in different environments. Requires the environment variable to be set before running Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Repeatable SQL Migration Prefix Setting.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nFLYWAY_REPEATABLE_SQL_MIGRATION_PREFIX=A\n```\n\n----------------------------------------\n\nTITLE: Scoped Namespacing Example (Backwards Compatible) in PowerShell\nDESCRIPTION: An example demonstrating valid scoped namespacing in PowerShell, assigning both '-databaseType' and '-projectName' to the 'init' command's namespace implicitly. This works because no parameters use explicit (full) namespaces, maintaining compatibility.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Command-line.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nflyway init -databaseType=sqlserver -projectName=myProject\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Diff Rebuild TOML\nDESCRIPTION: Illustrates how to set the `rebuild` property to `true` within the `[flyway.diff]` section of a Flyway TOML configuration file. This achieves the same effect as the command-line flag, forcing a reprovision during the `diff` operation.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DIff Namespace/Flyway Diff Rebuild Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.diff]\nrebuild = true\n```\n\n----------------------------------------\n\nTITLE: Setting Dapr URL via Java API\nDESCRIPTION: Demonstrates how to programmatically set the Dapr sidecar REST API URL using Flyway's Java API. This example retrieves the Dapr configuration extension plugin and sets the URL.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Dapr Namespace/Flyway Dapr URL Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nDaprConfigurationExtension daprConfigurationExtension = configuration.getPluginRegister().getPlugin(DaprConfigurationExtension.class)\ndaprConfigurationExtension.setDaprUrl(\"http://localhost:3500/v1.0/secrets/my-secrets-store\");\n```\n\n----------------------------------------\n\nTITLE: Excluding Schemas in Flyway SQL Server Clean Mode (Properties Configuration)\nDESCRIPTION: This Properties file snippet configures Flyway to exclude specific schemas from the database cleaning operation in SQL Server when the cleaning mode is set to 'all'. It requires a Java properties configuration file, with flyway.sqlserver.clean.mode set to 'all' and flyway.sqlserver.clean.schemas.exclude containing a comma-separated list of schemas not to be cleaned. This ensures schema1 and schema2 will remain untouched during Flyway's clean operation. The input consists of key-value configuration pairs, and the resulting effect is omission of the listed schemas from cleaning actions.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Server Namespace/Flyway SQL Server Clean Namespace/Flyway SQL Server Clean Schemas Exclude Setting.md#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nflyway.sqlserver.clean.mode=all\nflyway.sqlserver.clean.schemas.exclude=schema1,schema2\n```\n\n----------------------------------------\n\nTITLE: Programming Vault Token with Flyway API - Java\nDESCRIPTION: This snippet uses the Flyway API to programmatically configure the Vault token. It retrieves the VaultConfigurationExtension from the plugin registry and sets the token with setVaultToken(). Requires Java, Flyway, and the Vault plugin. Inputs are the configuration object and token string; output is the modified vault extension.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Vault Namespace/Flyway Vault Token Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nVaultConfigurationExtension vaultConfigurationExtension = configuration.getPluginRegister().getPlugin(VaultConfigurationExtension.class)\nvaultConfigurationExtension.setVaultToken(\"s.abcdefghijklmnopqrstuvwx\");\n```\n\n----------------------------------------\n\nTITLE: Setting forceColumnOrder Option in TOML Configuration File\nDESCRIPTION: Example of configuring the forceColumnOrder option to true in a TOML configuration file. This setting forces Flyway to rebuild SQL Server tables to maintain correct column order when new columns are added in the middle of a table.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Behavior Options Namespace/SQL Server Force Column Order Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.behavior]\nforceColumnOrder = true\n```\n\n----------------------------------------\n\nTITLE: Running Flyway with Vault Parameters from CLI - Shell\nDESCRIPTION: Demonstrates invoking Flyway's info command from the CLI, specifying Vault plugin parameters directly via command-line arguments. This populates Flyway's configuration parameters from Vault without storing secrets in plaintext. Dependencies: Flyway CLI, Vault instance running, and available token/secret. Inputs: Vault URL, token, and secrets path. Output: Prints the Flyway schema history overview using credentials fetched securely from Vault.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Integrating Vault.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nflyway info -plugins.vault.url=\"http://localhost:8200/v1/\" -plugins.vault.token=\"<vault_token>\" -plugins.vault.secrets=\"secret/data/flyway/flyway_credentials\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Oracle SQL*Plus Support in Gradle Build Script\nDESCRIPTION: Provides a sample Gradle configuration showing how to set 'oracleSqlplus' to true within the Flyway plugin, enabling SQL*Plus commands support during build migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle SQLPlus Setting.md#_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    oracleSqlplus = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring jdbcProperties Gradle Plugin (Groovy)\nDESCRIPTION: Demonstrates setting JDBC properties using the Flyway Gradle plugin configuration block in a `build.gradle` file. The properties are provided as a Groovy map assigned to the `jdbcProperties` attribute. Requires the Flyway Gradle plugin applied to the project.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment JDBC Properties Namespace.md#_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    jdbcProperties = ['accessToken' : 'access-token']\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring dataContainer via CLI - Bash\nDESCRIPTION: Demonstrates how to set the `dataContainer` option for database cloning using the Flyway command-line interface. This involves using the `-environments.development.resolvers.clone.dataContainer` parameter with the desired container name. The command executes the `flyway info` command after setting the configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Redgate Clone Resolver/Redgate Clone Resolver Data Container Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway info -environments.development.resolvers.clone.dataContainer='MyContainer'\n```\n\n----------------------------------------\n\nTITLE: Undoing Flyway Migrations via Gradle (Bash)\nDESCRIPTION: This snippet illustrates the use of Gradle to execute the Flyway Undo task named 'flywayUndo'. Users should have Flyway integrated into their Gradle build scripts. Running this command undoes the last versioned migration applied to the database schema in a transactional manner if group mode is enabled.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Undo.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngradle flywayUndo\n```\n\n----------------------------------------\n\nTITLE: Modifying Repeatable View Definition (SQL)\nDESCRIPTION: Updates the definition of the 'people' view to include a WHERE clause filtering by name. This modification to the repeatable migration file changes its checksum, signalling to Flyway that it needs reapplication.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Repeatable Migrations.md#_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE OR REPLACE VIEW people AS \n    SELECT id, name FROM person WHERE name like 'M%';\n```\n\n----------------------------------------\n\nTITLE: Configuring treatEmptyStringAsNull Option in Flyway Desktop (TOML)\nDESCRIPTION: This TOML snippet sets the 'treatEmptyStringAsNull' option to true in the SQL Server data comparison configuration section. Requires Flyway Desktop and a SQL Server project that supports TOML configuration files. Set under the '[redgateCompare.sqlserver.data.options.comparison]' section, this makes empty strings (\"\") in compared data fields be considered as NULL. No parameters other than the boolean assignment are necessary; other related options (like trimming trailing spaces) must be enabled separately if desired. This is applicable only in TOML configuration files; there is no support for this setting elsewhere.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Data Comparison Options Namespace/SQL Server Data Treat Empty String As Null Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.data.options.comparison]\ntreatEmptyStringAsNull = true\n```\n\n----------------------------------------\n\nTITLE: Setting Dapr Secrets via Environment Variable - Flyway - Properties\nDESCRIPTION: This approach configures the Dapr secret list by setting the environment variable \"FLYWAY_DAPR_SECRETS\" with a comma-separated list. Used in environments or CI/CD pipelines where direct environment manipulation is preferred over file-based configuration. Each secret named will be imported by Flyway; the last overrides if duplicates exist.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Dapr Namespace/Flyway Dapr Secrets Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_DAPR_SECRETS=secret1,secret2\n```\n\n----------------------------------------\n\nTITLE: Setting Baseline Description in Gradle\nDESCRIPTION: This Gradle script snippet shows how to configure the `baselineDescription` property within the Flyway configuration block. The value \"Baseline\" is assigned to the `baselineDescription` property within the `flyway { ... }` block. Requires the Flyway Gradle plugin to be applied.  The `baselineDescription` parameter takes a string value.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Baseline Description Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    baselineDescription = 'Baseline'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dapr Secrets in Gradle Configuration - Flyway - Groovy\nDESCRIPTION: Shows how to define Dapr secrets for Flyway within a Gradle build script. The pluginConfiguration map assigns an array of secret names to the daprSecrets key. Used for automated builds with Gradle integrating Flyway migrations. Requires Flyway plugin for Gradle, and each secret array element designates a distinct Dapr secret to be loaded.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Dapr Namespace/Flyway Dapr Secrets Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    pluginConfiguration = [\n        daprSecrets: ['secret1', 'secret2']\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring redgateCompare SQL Server Ignore Statistics Incremental - TOML\nDESCRIPTION: This snippet demonstrates how to enable the `ignoreStatisticsIncremental` setting in a Flyway TOML configuration file. This setting is boolean and defaults to `false`. According to the documentation, configuring it here or via Flyway Desktop is the only way to override the default value.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Statistics Incremental Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreStatisticsIncremental = true\n\n```\n\n----------------------------------------\n\nTITLE: Repairing Flyway Schema History Table via Gradle - Gradle\nDESCRIPTION: This Gradle command calls the 'flywayRepair' task using the appropriate Flyway Gradle plugin. It removes failed migrations, fixes metadata, and marks deleted migrations in the schema history table. Prerequisites include the Flyway Gradle plugin and a properly configured build file; parameters can be passed via project properties or environment variables.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Repair.md#_snippet_2\n\nLANGUAGE: gradle\nCODE:\n```\ngradle flywayRepair\n\n```\n\n----------------------------------------\n\nTITLE: Executing Flyway Info Command with Environment Parameter (PowerShell)\nDESCRIPTION: This snippet demonstrates how to execute the Flyway info command, specifying the environment to use via the `-environment` parameter. This allows you to run Flyway operations using a specific environment's configuration settings.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Environment Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -environment=env1 info\n```\n\n----------------------------------------\n\nTITLE: Example SQL Script for Azure Synapse\nDESCRIPTION: Sample SQL script demonstrating Azure Synapse compatible syntax for creating a table with comments and inserting data using a Flyway placeholder (`${tableName}`). Note the use of `GO` as a batch separator and specific syntax like `PRIMARY KEY NONCLUSTERED`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Azure Synapse.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n/* Single line comment */\nCREATE TABLE test_user (\n  id INT NOT NULL,\n  name VARCHAR(25) NOT NULL,  -- this is a valid ' comment\n  PRIMARY KEY NONCLUSTERED (name) NOT ENFORCED\n);\nGO\n\n-- Placeholder\nINSERT INTO ${tableName} (name) VALUES ('Mr. T');\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Callbacks via Command-line\nDESCRIPTION: Sets the 'callbacks' parameter in Flyway using the command-line interface to specify callback classes or packages. Requires Java string array format, with comma-separated class names or package names. Allows users to extend Flyway's behavior by loading Java callback implementations during migration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Callbacks Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway -callbacks=\"my.callback.FlywayCallback,my.package.to.scan\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway to Ignore Parallel Clauses (TOML)\nDESCRIPTION: This TOML configuration snippet sets the `ignoreParallel` option to `true`. This instructs Flyway to disregard differences in the parallel clause when comparing indexes and tables in Oracle projects. It is used within the `[redgateCompare.oracle.options.ignores]` section of a TOML configuration file. The output is Flyway will now ignore parallel differences.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Ignore Options Namespace/Oracle Ignore Parallel Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.ignores]\nignoreParallel = true\n```\n\n----------------------------------------\n\nTITLE: Configuring cleanDisabled via Environment Variable\nDESCRIPTION: Shows how to set the 'cleanDisabled' parameter using an environment variable for Flyway. When set to 'false', it permits executing 'clean' operations. Useful for environment-based configurations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Clean Disabled Setting.md#_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nFLYWAY_CLEAN_DISABLED=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Email and Token Authentication in Flyway Command-Line - Bash\nDESCRIPTION: This snippet demonstrates how to invoke Flyway from the command line by specifying the email and token as command-line options. Requires Flyway to be installed and accessible via the terminal. The '-email' and '-token' parameters are used to authenticate with personal access token (PAT) credentials. Input parameters: specify email and token values. No output other than Flyway execution. Avoid storing credentials in shell history for security.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Email Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway -email=\"foo.bar@red-gate.com\" -token=\"1234ABCD\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway with TOML\nDESCRIPTION: This code shows how to configure Flyway settings for a specific environment (test) using a TOML configuration file. It defines the environment, base locations, and then overrides flyway locations for the test environment.  This configuration requires a TOML file. The settings in `[environments.test.flyway]` will override settings in the `[flyway]` section for the \"test\" environment.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Flyway Namespace.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway]\nenvironment = \"test\"\nlocations = [\"location1\"]\n\n[environments.test]\nurl = \"jdbc:\\...\"\n\n[environments.test.flyway]\nlocations = [\"location2\",\"location3\"]\n```\n\n----------------------------------------\n\nTITLE: Example Flyway Migration Script for Informix (SQL/SPL)\nDESCRIPTION: Demonstrates various SQL and SPL statements compatible with Flyway migrations for Informix. It includes comments, creating sequences and tables, inserting data (including using sequences), creating stored procedures and functions, and using Flyway placeholders like ${tableName}. Assumes 'GO' as the statement delimiter.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Informix.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n/* Single line comment */\nCREATE SEQUENCE seq_2\n   INCREMENT BY 1 START WITH 1\n   MAXVALUE 30 MINVALUE 0\n   NOCYCLE CACHE 10 ORDER;\n\nCREATE TABLE tab1 (col1 int, col2 int);\nINSERT INTO tab1 VALUES (0, 0);\n\nINSERT INTO tab1 (col1, col2) VALUES (seq_2.NEXTVAL, seq_2.NEXTVAL);\n\n/*\nMulti-line\ncomment\n*/\n-- SPL\nCREATE PROCEDURE raise_prices ( per_cent INT, selected_unit CHAR )\n\tUPDATE stock SET unit_price = unit_price + (unit_price * (per_cent/100) )\n\twhere unit=selected_unit;\nEND PROCEDURE;\n\nCREATE FUNCTION square ( num INT )\n   RETURNING INT;\n   return (num * num);\nEND FUNCTION\n   DOCUMENT \"USAGE: Update a price by a percentage\",\n         \"Enter an integer percentage from 1 - 100\",\n         \"and a part id number\";\n\n-- Placeholder\nINSERT INTO ${tableName} (name) VALUES ('Mr. T');\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Migration Type in TOML File\nDESCRIPTION: Shows how to configure the default migration type for the `flyway add` command within a TOML configuration file under the `[flyway.add]` section. While possible, the documentation notes it's unlikely to be desirable to hardcode this in a configuration file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Add Namespace/Flyway Add Type Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.add]\ntype = \"versioned\"\n```\n\n----------------------------------------\n\nTITLE: Configuring includeStorageIniTrans in TOML Configuration File for Oracle Comparisons\nDESCRIPTION: This snippet demonstrates how to enable the includeStorageIniTrans option in a TOML configuration file for Redgate Oracle comparison settings. When set to true, this option includes the INITRANS clause when comparing Oracle databases.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Storage Options Namespace/Oracle Include Storage INITRANS Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.storage]\nincludeStorageIniTrans = true\n```\n\n----------------------------------------\n\nTITLE: SQL Server Configuration for Create-Database Provisioner\nDESCRIPTION: This TOML snippet shows how to configure Flyway to use the create-database provisioner with an SQL Server database, specifying the JDBC URL with the database name and necessary credentials. It enables automatic database creation if it does not exist.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Provisioner Setting/Create Database Provisioner.md#_snippet_0\n\nLANGUAGE: Toml\nCODE:\n```\n[environments.shadow]\nurl = \"jdbc:sqlserver://localhost:1433;databaseName=MyDatabase;trustServerCertificate=true\"\nuser = \"MyUser\"\npassword = \"${localSecret.MyPasswordKey}\"\nprovisioner = \"create-database\"\n```\n\n----------------------------------------\n\nTITLE: Adding Redshift Dependency with Gradle (Open Source)\nDESCRIPTION: This Groovy snippet demonstrates adding the Flyway Redshift dependency to a Gradle project using the open-source Flyway package. The `implementation` configuration ensures the dependency is available during runtime.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Redshift.md#_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation \"org.flywaydb:flyway-database-redshift\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Snowflake Dependency (Gradle, Open Source)\nDESCRIPTION: This Groovy snippet demonstrates how to add the Flyway Snowflake database support as an implementation dependency within a Gradle build file for an Open Source Flyway project. Including this dependency is essential for Flyway to interact with Snowflake databases.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Snowflake.md#_snippet_3\n\nLANGUAGE: Groovy\nCODE:\n```\ndependencies {\n    implementation \"org.flywaydb:flyway-database-snowflake\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignore Behavior in Flyway with TOML - TOML\nDESCRIPTION: This snippet demonstrates how to configure Flyway to ignore SET QUOTED_IDENTIFIER, SET ANSI_NULLS, and SET ANSI_PADDING statements during SQL Server object comparison by setting ignoreSetQuotedIdentifierAndSetAnsiNullsStatements to true in a TOML configuration file. Requires Flyway Desktop or compatible SQL Server project setup, and must be placed in the [redgateCompare.sqlserver.options.ignores] section. Input expects a boolean value, and this directive cannot be set in any other config format or via the command line.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Set Quoted Identifier And Set Ansi Nulls Statements Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreSetQuotedIdentifierAndSetAnsiNullsStatements = true\n```\n\n----------------------------------------\n\nTITLE: Adding Redshift Dependency with Maven (Redgate)\nDESCRIPTION: This XML snippet defines the Maven dependency required to enable Redshift support for Flyway when using the Redgate package.  It specifies the group ID, artifact ID, and that it will provide Redshift-specific database capabilities in Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Redshift.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.redgate.flyway</groupId>\n    <artifactId>flyway-database-redshift</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring validateOnMigrate via Properties File\nDESCRIPTION: This properties file configuration sets the `validateOnMigrate` property to `false`. This method is used to configure Flyway through a properties file. This snippet provides a simple key-value pair to configure the behavior of Flyway.  The dependency is the properties file and the expected output is Flyway reading the configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Validate On Migrate Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.validateOnMigrate=false\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Password in Gradle Configuration - groovy\nDESCRIPTION: This snippet illustrates how to set the database password within the `flyway` block in a Gradle build script. This allows configuring the Flyway plugin directly within the build definition.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Password Setting.md#_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    password = 'mysecretpassword'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SQL Server Kerberos Login File via Gradle Configuration\nDESCRIPTION: This Groovy snippet shows how to configure the SQL Server Kerberos login file path within a Gradle build script by specifying the pluginConfiguration map. The key sqlserverKerberosLoginFile should contain the path to the Kerberos login configuration file to enable authentication support in Flyway migrations executed through Gradle.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Server Namespace/Flyway SQL Server Kerberos Login File Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    pluginConfiguration = [\n        sqlserverKerberosLoginFile: '/path/to/SQLJDBCDriver.conf'\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GCSM Project ID in Gradle Build Script\nDESCRIPTION: Shows how to configure the GCSM project ID within the `flyway` block of a Gradle build script (Groovy DSL) by setting the `gcsmProject` key inside the `pluginConfiguration` map.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Google Cloud Secret Manager Namespace/Flyway Google Cloud Secret Manager Project Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    pluginConfiguration = [\n        gcsmProject: 'quixotic-ferret-345678'\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring flyway.check.deployedSnapshot in Properties File\nDESCRIPTION: Illustrates setting the 'flyway.check.deployedSnapshot' parameter in a standard Java properties configuration file. The value 'my_snapshot' specifies the snapshot file to be used by the Flyway 'check' command when this configuration is active for validating the database state.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Deployed Snapshot Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.check.deployedSnapshot=my_snapshot\n```\n\n----------------------------------------\n\nTITLE: Configure ignoreSystemNamedConstraintAndIndexNames in TOML\nDESCRIPTION: This snippet demonstrates how to set the `ignoreSystemNamedConstraintAndIndexNames` option to `true` within a Flyway TOML configuration file. This setting is located under the `[redgateCompare.sqlserver.options.ignores]` section and disables the comparison of system-generated names for constraints and indexes.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore System Named Constraint And Index Names Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreSystemNamedConstraintAndIndexNames = true\n```\n\n----------------------------------------\n\nTITLE: Running Code Analysis with Minor Rules via Flyway CLI - PowerShell\nDESCRIPTION: This snippet demonstrates how to invoke Flyway's code analysis from the command line, specifying minor rules using the -check.minorRules parameter. It requires Flyway to be installed and accessible from the terminal. The L002 rule is set as minor, and if violations exceed the minorTolerance, the process will fail. This command should be adjusted to specify the desired list of rule IDs.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Minor Rules Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway check -code -check.minorRules=L002\n```\n\n----------------------------------------\n\nTITLE: Disabling Community DB Support in Flyway Properties Configuration\nDESCRIPTION: Illustrates setting `flyway.communityDBSupportEnabled` to `false` in a standard Java properties configuration file used by Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Community DB Support Enabled Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.communityDBSupportEnabled=false\n```\n\n----------------------------------------\n\nTITLE: Extending Flyway Gradle Plugin Classpath\nDESCRIPTION: Defines a custom Gradle configuration (e.g., `flywayMigration`) and adds dependencies to it. This custom configuration is then included in the Flyway plugin's `configurations` list to make its dependencies available for migration execution (e.g., for custom drivers or libraries).\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Gradle Task.md#_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\n// Start by defining a custom configuration like 'provided', 'migration' or similar\nconfigurations {\n    flywayMigration\n}\n\n// Declare your dependencies as usual for each configuration\ndependencies {\n    implementation \"org.flywaydb:flyway-core:${flywayVersion}\"\n    flywayMigration \"com.mygroupid:my-lib:1.2.3\"\n}\n\nflyway {\n    url = 'jdbc:h2:mem:mydb'\n    user = 'myUsr'\n    password = 'mySecretPwd'\n    schemas = ['schema1', 'schema2', 'schema3']\n    placeholders = [\n        'keyABC': 'valueXYZ',\n        'otherplaceholder': 'value123'\n    ]\n    // Include your custom configuration here in addition to any default ones you want included\n    configurations = [ 'compileClasspath', 'flywayMigration' ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreUserProperties in TOML Configuration File\nDESCRIPTION: This snippet shows how to configure the ignoreUserProperties option in a TOML configuration file. When set to true, user properties are ignored during comparison and only user names are considered.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore User Properties Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreUserProperties = true\n```\n\n----------------------------------------\n\nTITLE: Enabling Oracle SQL*Plus Support via Environment Variable\nDESCRIPTION: Shows setting the environment variable 'FLYWAY_ORACLE_SQLPLUS' to true, which makes SQL*Plus support available to Flyway across different environments and automation scripts.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle SQLPlus Setting.md#_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nFLYWAY_ORACLE_SQLPLUS=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Placeholder Suffix via Java API\nDESCRIPTION: Shows how to programmatically set the `placeholderSuffix` when configuring Flyway using its Java API. This is typically done within a Java application that embeds Flyway for migration management.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Suffix Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .placeholderSuffix(\"$$\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway Informix Dependency (Maven - Open Source)\nDESCRIPTION: Adds the Open Source version of the Flyway Informix database support module as a dependency in a Maven project's pom.xml file. This enables Flyway capabilities for Informix databases.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Informix.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-database-informix</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring reportEnabled via Properties File\nDESCRIPTION: This snippet details enabling report generation through a properties file by setting 'flyway.reportEnabled=true'. This setup is used for configuration-based control of report output during migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Report Enabled Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.reportEnabled=true\n```\n\n----------------------------------------\n\nTITLE: Initializing a new SQL Server Flyway project using CLI\nDESCRIPTION: This snippet demonstrates how to create a new Flyway project directory and initialize it for SQL Server with specific project and database type options. The commands set up the project folder structure necessary for subsequent migration management.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Flyway Desktop migrations workflow with Flyway CLI.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir SqlServerProject\n$ cd SqlServerProject\n$ flyway init \"-init.projectName=SqlServerProject\" \"-init.databaseType=sqlserver\"\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway SQL Server Dependency (Open Source) in Maven\nDESCRIPTION: Maven XML dependency declaration to include the Open Source version of the `flyway-sqlserver` artifact in a Java project. This enables Flyway support for Azure Synapse.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Azure Synapse.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-sqlserver</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Oracle Wallet Location via API (Flyway)\nDESCRIPTION: This Java snippet shows how to set the Oracle wallet location programmatically within the Flyway API. It obtains an instance of `OracleConfigurationExtension`, and calls `setWalletLocation()` passing the location of the Oracle wallet. This allows fine-grained control over the wallet location. The snippet requires the Flyway core library and the Oracle-specific plugin to be added as dependencies.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle Wallet Location Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nOracleConfigurationExtension oracleConfigurationExtension = configuration.getPluginRegister().getPlugin(OracleConfigurationExtension.class);\noracleConfigurationExtension.setWalletLocation(\"/User/db/my_wallet\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignore Date Type Differences in Flyway Oracle using TOML\nDESCRIPTION: This TOML configuration snippet sets the 'ignoreDateTypeDifferences' property to true within the 'redgateCompare.oracle.data.options.comparison' section. This option instructs Flyway to ignore data differences in columns of date types (such as timestamp and date) during Oracle project comparisons. This setting can only be configured in a TOML file and applies solely to Oracle projects using Flyway Desktop.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Data Comparison Options Namespace/Oracle Data Ignore Date Type Differences Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.data.options.comparison]\nignoreDateTypeDifferences = true\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Transactional Lock via Maven (Flyway)\nDESCRIPTION: This XML snippet demonstrates how to configure the `postgresqlTransactionalLock` property using the Maven configuration. Within the `<pluginConfiguration>` section, setting `<postgresqlTransactionalLock>false</postgresqlTransactionalLock>` directs Flyway to use session-level locks. Ensure the Flyway Maven plugin is correctly configured in the `pom.xml` file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway PostgreSQL Namespace/Flyway PostgreSQL Transactional Lock Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <pluginConfiguration>\n        <postgresqlTransactionalLock>false</postgresqlTransactionalLock>\n    </pluginConfiguration>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignore Whitespace in Flyway (TOML)\nDESCRIPTION: This TOML configuration snippet sets the `ignoreWhiteSpace` option to `true`. This instructs Flyway to ignore differences in whitespace (newlines, tabs, spaces) within text data (clobs, varchars, and nvarchars) during data comparisons. This setting is used in conjunction with Flyway's comparison features in Oracle projects and must be set within a TOML configuration file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Data Comparison Options Namespace/Oracle Data Ignore White Space Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.data.options.comparison]\nignoreWhiteSpace = true\n```\n\n----------------------------------------\n\nTITLE: Declaring Flyway DB2 z/OS Dependency in Gradle Groovy\nDESCRIPTION: Defines the Gradle dependency configuration to add Flyway's DB2 z/OS plugin module to a Java project. Placed inside the dependencies block, it enables Flyway to support DB2 z/OS database migrations. The provided snippet uses implementation scope and does not require extra configuration parameters.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/DB2 zOS Database.md#_snippet_1\n\nLANGUAGE: Groovy\nCODE:\n```\ndependencies {\\n    implementation \\\"org.flywaydb:flyway-database-db2zos\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Clickhouse Cluster Name in Maven\nDESCRIPTION: This XML snippet illustrates how to configure the ClickHouse cluster name within the Flyway plugin configuration section of a Maven `pom.xml` file. The `clickhouseClusterName` element is nested under `<pluginConfiguration>`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Clickhouse Namespace/Flyway Clickhouse Cluster Name Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <pluginConfiguration>\n        <clickhouseClusterName>example_cluster</clickhouseClusterName>\n    </pluginConfiguration>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring validateOnMigrate via Maven\nDESCRIPTION: This XML snippet shows how to configure `validateOnMigrate` within a Maven `pom.xml` file. It sets the `validateOnMigrate` element to `false` within the `<configuration>` section.  The dependency is the Flyway Maven plugin. The output is the Maven build process respecting the Flyway configuration during its execution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Validate On Migrate Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <validateOnMigrate>false</validateOnMigrate>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Baseline Description in a Properties File\nDESCRIPTION: This snippet configures the `baselineDescription` setting using a properties file. The value \"Baseline\" is assigned to the `flyway.baselineDescription` property.  This requires the Flyway configuration to load from a properties file and the file must be in the correct location. The property can be accessed by the Flyway tool when it loads the configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Baseline Description Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.baselineDescription=Baseline\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway SAP HANA Dependency (Gradle - Open Source)\nDESCRIPTION: Groovy snippet for adding the Open Source Flyway SAP HANA database support dependency in a Gradle build script (build.gradle). Place this within the 'dependencies' block.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/SAP HANA (Including SAP HANA Cloud).md#_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation \"org.flywaydb:flyway-database-saphana\"\n}\n```\n\n----------------------------------------\n\nTITLE: Check Flyway Status (Pre-Java) - Shell\nDESCRIPTION: Executes the `mvn flyway:info` command to display the current state of database migrations managed by Flyway before introducing the Java migration. Requires Maven and a configured Flyway project. Shows previously applied SQL migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Java-based Migrations.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmvn flyway:info\n```\n\n----------------------------------------\n\nTITLE: Command-line configuration of schemaModelLocation in Flyway\nDESCRIPTION: Provides an example of setting the schemaModelLocation parameter via command-line for Flyway, specifying a custom path using the -schemaModelLocation argument. Useful for customizing schema model folder location when running Flyway commands.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Schema Model Location Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway -schemaModelLocation=\"C:\\Users\\FlywayUser\\Project\\schema-model\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Flyway DB2 z/OS Dependency in Maven XML\nDESCRIPTION: Specifies the Maven dependency needed to include Flyway's DB2 z/OS plugin module into a Java project. This enables DB2 z/OS support within Flyway migrations. The dependency should be added to the project's POM file under dependencies. No additional parameters are required.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/DB2 zOS Database.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\\n    <groupId>org.flywaydb</groupId>\\n    <artifactId>flyway-database-db2zos</artifactId>\\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Dapr URL in Gradle Build Script\nDESCRIPTION: Configures the Dapr sidecar REST API URL in a Gradle build script. This approach is useful when integrating Flyway migrations into a Gradle-based build process.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Dapr Namespace/Flyway Dapr URL Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    pluginConfiguration = [\n        daprUrl: 'http://localhost:3500/v1.0/secrets/my-secrets-store'\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for SQL Server Kerberos Login File\nDESCRIPTION: This snippet illustrates defining an environment variable to specify the path to the SQL Server Kerberos login file. The environment variable FLYWAY_SQL_SERVER_KERBEROS_LOGIN_FILE should be set to the full path of the SQLJDBCDriver.conf file to enable Kerberos authentication when Flyway runs and reads environment variables.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Server Namespace/Flyway SQL Server Kerberos Login File Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_SQL_SERVER_KERBEROS_LOGIN_FILE=/path/to/SQLJDBCDriver.conf\n```\n\n----------------------------------------\n\nTITLE: Installing Flyway Open Source Gradle Plugin\nDESCRIPTION: Declares the Flyway Open Source plugin dependency in the build script. This allows Gradle to download and apply the open source version of the plugin for database migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Gradle Task.md#_snippet_1\n\nLANGUAGE: Groovy\nCODE:\n```\nplugins {\n    id \"org.flywaydb.flyway\" version \"{{ site.flywayVersion }}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreDependentObjectsInOtherSchemas in TOML file for Flyway\nDESCRIPTION: This snippet demonstrates how to set the ignoreDependentObjectsInOtherSchemas boolean option in a TOML configuration file for Flyway Oracle comparison. It defines the setting within the 'redgateCompare.oracle.options.ignores' section with a default value of true, allowing users to exclude calculating dependencies in unselected schemas to improve performance.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Ignore Options Namespace/Oracle Ignore Dependent Objects In Other Schemas Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.ignores]\nignoreDependentObjectsInOtherSchemas = true\n```\n\n----------------------------------------\n\nTITLE: Generating Flyway Migrations Using Command-line - Bash\nDESCRIPTION: This snippet demonstrates how to specify the target directory for generating Flyway migration files using the Flyway CLI. The '-location' parameter accepts a relative or absolute path, which determines where the migration scripts will be placed. Dependencies include having Flyway installed and executable access. The input is a directory path ('migrations' in this example) and the output is migration files generated in that specified location.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Location Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway generate -location=\"migrations\"\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Transactional Lock via Command-line (Flyway)\nDESCRIPTION: This snippet demonstrates how to configure the `postgresql.transactional.lock` setting via the command-line interface of Flyway. The command `flyway -postgresql.transactional.lock=false info` sets the transactional lock to `false`, indicating the use of session-level locks instead of advisory locks.  This configuration applies to the Flyway commands executed after the option is set.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway PostgreSQL Namespace/Flyway PostgreSQL Transactional Lock Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -postgresql.transactional.lock=false info\n```\n\n----------------------------------------\n\nTITLE: Configuring scriptPlaceholderPrefix in Maven POM (XML)\nDESCRIPTION: Configures the Flyway script placeholder prefix to \"P__\" within a Maven Project Object Model (`pom.xml`) file, inside the Flyway plugin's <configuration> section. This setting is used by the Flyway Maven plugin when executing Flyway goals.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Script Placeholder Prefix Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <scriptPlaceholderPrefix>P__</scriptPlaceholderPrefix>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Secret Management in Flyway Environment using TOML\nDESCRIPTION: This snippet shows how to configure Vault secret management for a Flyway environment via a TOML configuration file. It includes database connection settings and nested Vault resolver options specifying the Vault API URL, authentication token, secret engine name, and engine version. Password fields reference Vault paths for dynamic retrieval. Dependencies include a Vault server configured with the required secrets and a Flyway instance that supports environment resolvers. The expected input is the TOML file, resulting in Flyway resolving secrets from Vault when executing.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Vault Resolver.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development]\nurl = \"jdbc:postgresql://localhost/postgres\"\nuser = \"postgres\"\npassword = \"${vault.flyway/password}\"\n\n[environments.development.resolvers.vault]\nurl = \"http://localhost:8200/v1\"\ntoken = \"abc.1234567890\"\nengineName = \"secret\"\nengineVersion = \"v2\"\n```\n\n----------------------------------------\n\nTITLE: Inlining Resolvers in URL - Flyway TOML\nDESCRIPTION: This snippet demonstrates how to embed resolver syntax directly within string values in a TOML configuration file. It shows how Flyway will replace `${vault.db-endpoint}` and `${vault.db-name}` with values retrieved from the configured 'vault' resolver.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[environments.default]\nurl = \"jdbc:sqlserver://${vault.db-endpoint};databaseName=${vault.db-name}\"\n```\n\n----------------------------------------\n\nTITLE: Properties file configuration for validateMigrationNaming\nDESCRIPTION: Sets the validateMigrationNaming property in a Flyway properties file. When set to true, Flyway will fail fast on migration files with invalid names.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Validate Migration Naming Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.validateMigrationNaming=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway initSql using Java API - Java\nDESCRIPTION: This snippet illustrates how to programmatically configure the `initSql` parameter using the Flyway Java API. The `initSql` method is called on the `Flyway.configure()` builder to set the SQL statement that will run upon connection. Requires the Flyway Java library dependency.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Init SQL Setting.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nFlyway.configure()\n    .initSql(\"ALTER SESSION SET NLS_LANGUAGE='ENGLISH';\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Gradle dependency for Flyway Derby support (Redgate and Open Source)\nDESCRIPTION: Demonstrates how to include the 'flyway-database-derby' library in Gradle builds for Redgate and open source versions, facilitating Derby support in Java projects.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Derby.md#_snippet_1\n\nLANGUAGE: Groovy\nCODE:\n```\ndependencies {\n    implementation \"com.redgate.flyway:flyway-database-derby\"\n}\n```\n\nLANGUAGE: Groovy\nCODE:\n```\ndependencies {\n    implementation \"org.flywaydb:flyway-database-derby\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting installedBy parameter in Maven configuration\nDESCRIPTION: Example of setting the installedBy parameter to 'ci-pipeline' in a Maven configuration for Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Installed By Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <installedBy>ci-pipeline</installedBy>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Generating Change Report from Schema Model via Environment in Bash\nDESCRIPTION: This command generates a change report based on a schema model located at a specified path, within a given environment, useful for validation against schema definitions.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Check/Check Changes.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflyway check -changes -check.changesSource=\"schemaModel\" -environment=\"production\"\n```\n\n----------------------------------------\n\nTITLE: Setting ignoreWithNoCheck Option in Flyway SQL Server Using TOML\nDESCRIPTION: This TOML snippet demonstrates how to configure Flyway's redgateCompare SQL Server options to ignore constraints defined with the WITH NOCHECK argument. The ignoreWithNoCheck boolean disables consideration of constraints that are disabled, aiding in detecting disabled constraints during schema comparisons. The configuration must be set in a TOML file and applies specifically to SQL Server projects; it cannot be set elsewhere. This snippet requires Flyway's schema compare feature and TOML support.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore With Nocheck Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]ignoreWithNoCheck = true\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLID via Gradle\nDESCRIPTION: This Groovy snippet demonstrates how to configure the SQLID within a Gradle build file.  The `db2zSqlId` property is set within the `flyway` block's `pluginConfiguration`. This controls the SQLID that will be used when Flyway interacts with the database. The value provided is `example_group`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DB2 zOS Namespace/Flyway Db2 zOS SQL ID Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    pluginConfiguration = [\n        db2zSqlId: 'example_group'\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Server Clean Mode with TOML\nDESCRIPTION: This snippet demonstrates the configuration of the `flyway.sqlserver.clean.mode` setting to \"all\" in a TOML configuration file. This setting controls how the clean command deletes database objects in SQL Server. The configuration allows you to configure database cleaning options for a specific environment. No prerequisites are needed besides having a Flyway TOML configuration file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Server Namespace/Flyway SQL Server Clean Namespace/Flyway SQL Server Clean Mode Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.sqlserver.clean]\nmode = \"all\"\n```\n\n----------------------------------------\n\nTITLE: Adding MongoDB JDBC Driver Dependency to Maven\nDESCRIPTION: This XML snippet demonstrates how to add the MongoDB JDBC driver dependency to a Maven project. It specifies the groupId, artifactId, version, scope, and systemPath required for integration.  The systemPath must point to the locally stored JAR file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/MongoDB.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.kornilova203</groupId>\n    <artifactId>mongo-jdbc-driver</artifactId>\n    <version>1.19</version>\n    <scope>system</scope>\n    <systemPath>mongo-jdbc-standalone-1.19.jar</systemPath>  \n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting artifactFilename Parameter via Flyway CLI (Bash)\nDESCRIPTION: Demonstrates how to specify the diff artifact filename using the `-artifactFilename` argument when running the `flyway generate` command from the command line. This sets the output path for the generated artifact file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Artifact Filename Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway generate -artifactFilename=artifact.diff\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB TLS in Flyway Environment (TOML)\nDESCRIPTION: This TOML snippet configures a Flyway environment to connect to a MongoDB instance over TLS. The 'url' parameter specifies the connection string, including 'tls=true', disabling retryWrites, and referencing the path to the CA PEM. The 'user' and 'password' fields set database authentication. Prerequisite: The CA file must be accessible on the Flyway host; adjust credentials as needed. Inputs: connection URI, TLS certificate path, username, password. Outputs: Secure TLS connection established by Flyway for database migrations. Customize this for your deployment environments.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Security Configuration.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[environments.tls-mongodb]\n   url = \"mongodb://localhost:27017/?tls=true&retryWrites=false&tlsCAFile=/tmp/certs/my_certificates.pem\"\n   user = \"your username\"\n   password = \"your password\"\n```\n\n----------------------------------------\n\nTITLE: Configure executeInTransaction in TOML\nDESCRIPTION: Configures the `executeInTransaction` parameter to `false` within a TOML configuration file. This setting will instruct Flyway to avoid using transactions when executing SQL scripts. The TOML file uses a `flyway` section to encapsulate the configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Execute In Transaction Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nexecuteInTransaction = false\n```\n\n----------------------------------------\n\nTITLE: Configuring connectRetriesInterval for a Named Environment in PowerShell\nDESCRIPTION: This snippet illustrates configuring the connectRetriesInterval for a specific environment named 'sample' via command line using a TOML configuration prefix. It allows targeting environment-specific settings when running Flyway commands.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Connect Retries Interval Setting.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway -environments.sample.connectRetriesInterval=60 info\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Secrets in Properties File - Flyway - Properties\nDESCRIPTION: This snippet sets Dapr secret names as a comma-separated string in a Flyway compatible properties file. The \"flyway.dapr.secrets\" key expects one or more secret identifiers, separated by commas. This is intended for property-based configuration scenarios where Flyway reads from a .properties file at startup.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Dapr Namespace/Flyway Dapr Secrets Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.dapr.secrets=secret1,secret2\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway SAP HANA Dependency (Maven - Open Source)\nDESCRIPTION: XML snippet to declare the Open Source Flyway SAP HANA database support dependency in a Maven project's pom.xml file. This enables Flyway to interact with SAP HANA databases.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/SAP HANA (Including SAP HANA Cloud).md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-database-saphana</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Maven dependency for Flyway Derby support (Redgate and Open Source)\nDESCRIPTION: Specifies how to include the 'flyway-database-derby' plugin module in Maven projects for both Redgate and open source versions, enabling Derby database support within Java applications.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Derby.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.redgate.flyway</groupId>\n    <artifactId>flyway-database-derby</artifactId>\n</dependency>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-database-derby</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring YugabyteDB Support with Gradle in Flyway\nDESCRIPTION: Gradle dependency configuration to add YugabyteDB support to a Flyway project. This dependency configuration is necessary to enable Flyway to work with YugabyteDB databases in a Java application using Gradle.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/YugabyteDB.md#_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    compile \"org.flywaydb:flyway-database-yugabytedb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreEventNotificationsOnQueues in TOML\nDESCRIPTION: This TOML snippet configures the `ignoreEventNotificationsOnQueues` setting within a Flyway configuration file. Setting this to `true` will instruct Flyway to ignore event notifications on queues during database comparisons and deployments. This setting is used to customize Flyway's behavior when comparing SQL Server databases. The input is a boolean value, and the output affects the database comparison process. The configuration can only be set within a TOML configuration file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Event Notifications On Queues Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreEventNotificationsOnQueues = true\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline Fulltext Fields in Flyway TOML Configuration\nDESCRIPTION: This TOML configuration snippet demonstrates how to enable the 'inlineFulltextFields' behavior option within the '[redgateCompare.sqlserver.options.behavior]' section. Setting this to 'true' instructs Flyway to script SQL Server fulltext indexes as a single CREATE statement.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Behavior Options Namespace/SQL Server Inline Fulltext Fields Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.behavior]\ninlineFulltextFields = true\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Text Object Newline Handling in TOML Configuration File\nDESCRIPTION: Demonstrates how to set the ignoreNewlinesInTextObjects option to ignore newlines within text objects when comparing PostgreSQL databases. This setting can only be configured in a TOML configuration file and accepts values of 'all' or 'off'.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare PostgreSQL Namespace/PostgreSQL Ignore Options Namespace/PostgreSQL Ignore Newlines In Text Objects Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.postgresql.options.ignores]\nignoreNewlinesInTextObjects = \"all\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating a Broken SQL Migration - SQL\nDESCRIPTION: This SQL snippet simulates a broken migration by providing an invalid SQL statement. It is used to show how Flyway handles an error during migration without configuration overrides. The SQL statement is intentionally syntactically incorrect to trigger an error condition.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Error Overrides.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nbroken sql statement;\n```\n\n----------------------------------------\n\nTITLE: Configuring kerberosConfigFile in TOML configuration file\nDESCRIPTION: Example of setting the Kerberos configuration file path in a Flyway TOML configuration file. This approach allows persistent configuration through a TOML-formatted file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Kerberos Config File Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nkerberosConfigFile = \"/path/to/krb5.ini\"\n```\n\n----------------------------------------\n\nTITLE: Setting Clickhouse Zookeeper Path in Gradle Build Script\nDESCRIPTION: Shows how to configure the Clickhouse Zookeeper path within a Gradle build script using the `pluginConfiguration` map in the `flyway` block. The key `clickhouseZookeeperPath` sets the Zookeeper node path for the Clickhouse cluster configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Clickhouse Namespace/Flyway Clickhouse Zookeeper Path Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    pluginConfiguration = [\n        clickhouseZookeeperPath: '/clickhouse/tables/{shard}/{database}/{table}'\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Next Migration Name (CLI) - Shell\nDESCRIPTION: This snippet generates the next migration name using the Flyway CLI `add` command. It specifies the description. Requires Flyway CLI version 11.0.0 or later and a Teams/Enterprise license.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Migrating from flyway-dev to flyway CLI.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\nflyway add \\\"-add.nameOnly=true\\\" \\\"-add.description=DataUpdates\\\"\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Transactional Lock via API (Java, Flyway)\nDESCRIPTION: This Java code demonstrates how to configure the `postgresql.transactional.lock` property programmatically via the Flyway API. It retrieves the `PostgreSQLConfigurationExtension` and calls `setTransactionalLock(false)`. This uses session-level locks.  Requires the Flyway core and PostgreSQL plugin dependencies.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway PostgreSQL Namespace/Flyway PostgreSQL Transactional Lock Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nPostgreSQLConfigurationExtension configurationExtension = configuration.getPluginRegister().getPlugin(PostgreSQLConfigurationExtension.class)\nconfigurationExtension.setTransactionalLock(false);\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Callbacks via Gradle Build Script\nDESCRIPTION: Sets the 'callbacks' property within the Flyway extension in the Gradle build script using Groovy syntax. Enables build-time configuration of callback classes or packages, integrating callback setup into automated build and deployment workflows.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Callbacks Setting.md#_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    callbacks = ['my.callback.FlywayCallback', 'my.package.to.scan']\n}\n```\n\n----------------------------------------\n\nTITLE: Setting connectRetriesInterval Using Flyway Java API\nDESCRIPTION: This code shows configuring the connectRetriesInterval programmatically through Flyway's Java API by chaining the method call with a value of 60. It is used within Java applications integrating Flyway migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Connect Retries Interval Setting.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nFlyway.configure()\n    .connectRetriesInterval(60)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Full Namespacing Example (Backwards Compatible) in PowerShell\nDESCRIPTION: An example demonstrating the use of full, explicit namespacing for all parameters related to the 'init' command in PowerShell (`-init.databaseType`, `-init.projectName`). This approach clearly defines the scope for each parameter.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Command-line.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nflyway init -init.databaseType=sqlserver -init.projectName=myProject \n```\n\n----------------------------------------\n\nTITLE: Running Diff Operation with Target Using Flyway CLI - Bash\nDESCRIPTION: Executes the Flyway diff command via command-line, setting the 'source' to the 'development' environment, and 'target' to the schema model. Requires Flyway CLI to be installed and accessible as './flyway'. The '-source' and '-target' parameters specify the origin and comparison targets, respectively. Expects valid Flyway configuration elsewhere for authentication and environment resolution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DIff Namespace/Flyway Diff Target Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway diff -source=\"env:development\" -target=\"schemaModel\"\n```\n\n----------------------------------------\n\nTITLE: Executing Flyway Command-Line with Dapr Secret Resolution in Bash\nDESCRIPTION: Shows a bash shell command invoking Flyway's 'info' command while dynamically injecting environment parameters that use Dapr secrets. The command passes environment-specific JDBC URL, username, password, and the Dapr secrets store URL. Dependencies include a running Dapr sidecar accessible at the specified URL, and the placeholders such as `${dapr.dbhost}` indicate resolved secrets. Inputs include environment name and secrets store URL; outputs are Flyway info results utilizing the injected secrets.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Dapr Resolver.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway info \\\n-environment='development' \\\n-environments.development.url='jdbc:postgresql:${dapr.dbhost}/${dapr.dbname}' \\\n-environments.development.user='${dapr.username}' \\\n-environments.development.password='${dapr.password}' \\\n-environments.development.resolvers.dapr.url=\"http://localhost:3500/v1.0/secrets/my-secrets-store\"\n```\n\n----------------------------------------\n\nTITLE: Executing Baseline Command via Gradle\nDESCRIPTION: Example of how to run the Flyway baseline command using Gradle build tool.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Baseline.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngradle flywayBaseline\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway lockRetryCount Using Java API\nDESCRIPTION: This Java snippet illustrates how to programmatically configure Flyway's lockRetryCount parameter to 10 using the Flyway.configure() builder pattern followed by load(). This method enables integration of configuration inside Java applications where Flyway migrations are managed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Lock Retry Count Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .lockRetryCount(10)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway SingleStoreDB Dependency (Redgate) in Gradle Groovy\nDESCRIPTION: Gradle Groovy dependency configuration to include the Redgate version of the Flyway SingleStoreDB support library in a Java project using the `implementation` configuration. Requires additional repository configuration as noted in the linked 'configure the repository' section.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/SingleStoreDB.md#_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation \"com.redgate.flyway:flyway-singlestore\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle Filter File Path with TOML\nDESCRIPTION: This code snippet demonstrates how to set the path to a custom Oracle filter file for Redgate Compare using a TOML configuration file.  The `filterFile` property within the `[redgateCompare.oracle]` section specifies the path to the `.scpf` file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Filter File Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.oracle]\nfilterFile = \"Custom.scpf\"\n```\n\n----------------------------------------\n\nTITLE: Defining jdbcProperties TOML Configuration (TOML)\nDESCRIPTION: Example of configuring JDBC properties, specifically `accessToken`, within a Flyway TOML configuration file. The properties are defined within the `[environments.default.jdbcProperties]` section, associating them with the default environment. Requires a Flyway TOML configuration file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment JDBC Properties Namespace.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[environments.default.jdbcProperties]\naccessToken = \"my-access-token\"\n```\n\n----------------------------------------\n\nTITLE: Configuring redgateCompare Oracle includeStorageTablespace in TOML\nDESCRIPTION: Demonstrates how to enable the `includeStorageTablespace` option within a Flyway TOML configuration file. This setting is nested under `redgateCompare.oracle.options.storage` and is set to `true` to include tablespace information in schema comparisons. This configuration cannot be set via command-line flags or environment variables.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Storage Options Namespace/Oracle Include Storage Tablespace Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.oracle.options.storage]\nincludeStorageTablespace = true\n```\n\n----------------------------------------\n\nTITLE: Using kerberosConfigFile parameter in PowerShell command-line\nDESCRIPTION: Example of setting the Kerberos configuration file path in a Flyway command-line command using PowerShell syntax. This specifies the location of the krb5.ini file for Kerberos authentication when running the info command.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Kerberos Config File Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -kerberosConfigFile=\"/path/to/krb5.ini\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring dataContainer in TOML - TOML\nDESCRIPTION: Shows how to configure the `dataContainer` option within a TOML configuration file for Flyway.  The configuration is nested under `environments.development.resolvers.clone` and sets the `dataContainer` variable to \"MyContainer\". This configuration is used for database cloning.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Redgate Clone Resolver/Redgate Clone Resolver Data Container Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development.resolvers.clone]\ndataContainer = \"MyContainer\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Flyway from Project Type (Bash)\nDESCRIPTION: This command initializes a Flyway project, specifying the project name, database type, and the type of project to import via the `fromType` parameter. It utilizes the `flyway init` command-line tool.  Required dependencies include Flyway CLI installed and configured. The `-projectName`, `-databaseType`, and `-fromType` parameters are crucial for setting up the project and defining the import strategy. The output is the initialized project.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Init Namespace/Flyway Init From Type Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflyway init -projectName=MyProject -databaseType=Sqlite -fromType=Conf\n```\n\n----------------------------------------\n\nTITLE: Setting Schemas in TOML Configuration File - TOML\nDESCRIPTION: Defines schema configuration within a TOML file, suitable for Flyway environments management. The [environments.default] table contains the schemas array, where each entry specifies a managed schema. Requires that Flyway is configured to read TOML files. Used for repeatable, environment-aware migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Schemas Setting.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[environments.default]\nschemas = [\"schema1\", \"schema2\"]\n```\n\n----------------------------------------\n\nTITLE: Connecting to MongoDB with TLS via Connection String in Shell\nDESCRIPTION: This shell invocation illustrates how to connect to a MongoDB instance using Mongosh by specifying TLS options directly in the connection string. The 'tls' and 'tlsCAFile' parameters configure encryption and verification of the server certificate. Dependencies: Mongosh, a PEM CA file at the given path, and a running MongoDB server. The output is a secure shell session to MongoDB. Inputs required: server URI, certificate path. Ensure the provided file exists and is accessible; adjust additional user authentication if needed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Security Configuration.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmongosh \"mongodb://localhost:27017/?tls=true&tlsCAFile=/tmp/certs/my_certificates.pem\"\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway MongoDB Dependency - Open Source\nDESCRIPTION: This XML snippet demonstrates how to add the Flyway MongoDB dependency to a Maven project when using the open-source distribution of Flyway. It specifies the groupId and artifactId required for integration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/MongoDB.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-database-mongodb</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Secret Resolver in Flyway TOML File\nDESCRIPTION: Illustrates how to configure a Flyway environment ('default' in this case) within a TOML configuration file to use the local secret resolver for the password property. The value `${localSecret.devDbPassword}` instructs Flyway to fetch the password corresponding to the key 'devDbPassword' from the OS-specific secret manager.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Local Secret Resolver.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[environments.default]\nurl = \"jdbc:sqlserver://localhost;databaseName=devDb\"\nuser = \"myUser\"\npassword = \"${localSecret.devDbPassword}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Email and Token in Flyway's TOML Configuration - TOML\nDESCRIPTION: This snippet shows how to set the 'email' and 'token' in a TOML configuration file's '[flyway]' section. This configuration is used by Flyway during launch, requiring Flyway to be configured to read from the TOML file. The keys correspond to credentials for authenticating with Redgate's Teams or Enterprise services. Inputs are string values for email and token. Ensure TOML files do not expose sensitive data.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Email Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nemail = \"foo.bar@red-gate.com\"\ntoken = \"1234ABCD\"\n```\n\n----------------------------------------\n\nTITLE: Configuring reportEnabled via TOML Configuration File\nDESCRIPTION: This snippet shows how to enable report generation within a TOML configuration file by setting 'reportEnabled' to true under the '[flyway]' section. It allows persistent configuration for Flyway operations when using TOML files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Report Enabled Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway]\nreportEnabled = true\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Connection - Flyway - TOML\nDESCRIPTION: Sets up a MongoDB environment in Flyway's TOML config, specifying connection URL, username, password, and associating the flyway environment with 'mongodb'. Requires a running MongoDB instance and user credentials. The URL follows the 'mongodb://' format and authentication is as specified.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Using Native Connectors to connect to MongoDB.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.mongodb]\nurl = \"mongodb://localhost:27017/\"\nuser = \"your username\"\npassword = \"your password\"\n\n[flyway]\nenvironment = \"mongodb\"\n\n```\n\n----------------------------------------\n\nTITLE: Compile Project with New Migration - Shell\nDESCRIPTION: Executes the `mvn compile` command to compile the Java source files in the project, including the newly created `V3__Anonymize` migration class. This makes the compiled class available on the classpath for Flyway to discover. Requires Maven.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Java-based Migrations.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nmvn compile\n```\n\n----------------------------------------\n\nTITLE: Flyway Generate with Description (Bash)\nDESCRIPTION: This command uses the Flyway command-line tool to generate a new migration with the description \"addTable\". The `-description` parameter specifies the description part of the migration name.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Description Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway generate -description=\"addTable\"\n```\n\n----------------------------------------\n\nTITLE: Setting installedBy parameter via Environment Variable\nDESCRIPTION: Example of setting the installedBy parameter to 'ci-pipeline' using an environment variable for Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Installed By Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_INSTALLED_BY=ci-pipeline\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Clone URL - TOML\nDESCRIPTION: This TOML snippet illustrates how to set the Flyway clone URL within a TOML configuration file.  It defines the `url` parameter under the `[environments.development.resolvers.clone]` section.  The url is set to a specific Redgate clone API endpoint.  Requires a valid TOML file and Flyway configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Redgate Clone Resolver/Redgate Clone Resolver URL Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development.resolvers.clone]\nurl = \"https://clone.red-gate.com:1234/cloning-api\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Placeholder Suffix via Command Line (PowerShell)\nDESCRIPTION: Demonstrates how to set the Flyway `placeholderSuffix` using the command line interface with PowerShell syntax. This configures the suffix for all placeholders used in migrations for the current command execution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Suffix Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -placeholderSuffix=\"$$\" info\n```\n\n----------------------------------------\n\nTITLE: Adding Redshift Dependency with Gradle (Redgate)\nDESCRIPTION: This Groovy snippet demonstrates adding the Flyway Redshift dependency to a Gradle project using the Redgate package. The `implementation` configuration ensures the dependency is available during runtime.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Redshift.md#_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation \"com.redgate.flyway:flyway-database-redshift\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration of diffText change IDs using TOML in Flyway\nDESCRIPTION: This snippet illustrates setting up the 'changes' parameter in a Flyway TOML configuration file, allowing the specification of change IDs — including reading from stdin with a hyphen. It facilitates integration into automated environments or scripts by predefining changes.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DiffText Namespace/Flyway DiffText Changes Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.diffText]\nchanges = [\"-\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring YugabyteDB Support with Maven in Flyway\nDESCRIPTION: Maven dependency configuration to add YugabyteDB support to a Flyway project. This dependency is required to enable Flyway to work with YugabyteDB databases in a Java application.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/YugabyteDB.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-database-yugabytedb</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway lockRetryCount with Properties Configuration File\nDESCRIPTION: This snippet presents the syntax to specify lockRetryCount in a properties format configuration file. Assigning a value of 10 configures Flyway to retry acquiring the lock 10 times with 1-second pauses in between attempts.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Lock Retry Count Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.lockRetryCount=10\n```\n\n----------------------------------------\n\nTITLE: Generating Change Report Using Applied Migrations in Bash\nDESCRIPTION: This sequence captures the list of successful or out-of-order migrations, saves them to a file, and then runs the 'check -changes' command referencing those migrations to compare database states accordingly.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Check/Check Changes.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflyway info -infoOfState=\"success,out_of_order\" -migrationIds > appliedMigrations.txt\nflyway check -changes -buildEnvironment=\"build\" -appliedMigrations=\"\\$(cat appliedMigrations.txt)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Redshift Dependency with Maven (Open Source)\nDESCRIPTION: This XML snippet defines the Maven dependency required to enable Redshift support for Flyway when using the open-source Flyway package. It specifies the group ID and artifact ID.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Redshift.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-database-redshift</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Disabling Community DB Support in Flyway TOML Configuration\nDESCRIPTION: Shows how to set the `communityDBSupportEnabled` parameter to `false` within the `[flyway]` section of a TOML configuration file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Community DB Support Enabled Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\ncommunityDBSupportEnabled = false\n```\n\n----------------------------------------\n\nTITLE: Setting Oracle Wallet Location via TOML Configuration (Flyway)\nDESCRIPTION: This TOML configuration snippet sets the Oracle wallet location.  It defines a TOML configuration file structure to configure Flyway. The `walletLocation` parameter within the `[flyway.oracle]` section sets the path to the Oracle wallet. This configuration allows Flyway to locate the wallet for database connections. No dependencies are needed besides a valid TOML file structure.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle Wallet Location Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.oracle]\nwalletLocation = \"/User/db/my_wallet\"\n```\n\n----------------------------------------\n\nTITLE: Adding MariaDB Dependency - Gradle (Redgate)\nDESCRIPTION: This Groovy snippet shows how to add the MariaDB Flyway plugin to a Gradle project using the Redgate repository.  The `implementation` configuration declares a dependency on the `flyway-mysql` artifact, enabling MariaDB support within Flyway projects.  It pulls in the necessary libraries from the specified repository.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/MariaDB.md#_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation \"com.redgate.flyway:flyway-mysql\"\n}\n```\n\n----------------------------------------\n\nTITLE: SQL: Creating a Callback (beforeMigrate)\nDESCRIPTION: This SQL snippet creates a beforeMigrate callback in Flyway.  It prepares the database for the migration process by executing a SQL statement before migrations occur.  This particular snippet utilizes the CHECKPOINT SYNC command to flush all data to disk before the migration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Callbacks.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCHECKPOINT SYNC;\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway TiDB Dependency via Gradle\nDESCRIPTION: This Gradle snippet shows how to include the Flyway TiDB dependency in your Gradle project. It uses the 'compile' configuration to add the Flyway TiDB database support as a project dependency. The dependency information includes the group ID and artifact ID, which are necessary for Gradle to download the right dependencies during project build.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/TiDB (Titanium DB).md#_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    compile \"org.flywaydb:flyway-database-tidb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting flyway.check.nextSnapshot in Properties Configuration\nDESCRIPTION: Example of how to set the check.nextSnapshot parameter in a Flyway properties configuration file using key-value notation.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Next Snapshot Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.check.nextSnapshot=my_snapshot\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Gradle Dependency Configuration for Open Source Flyway\nDESCRIPTION: Gradle configuration to add PostgreSQL database support for Open Source Flyway. This dependency is required to enable PostgreSQL integration in Java projects.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/PostgreSQL Database.md#_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation \"org.flywaydb:flyway-database-postgresql\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Flyway Lifecycle Callback in Java\nDESCRIPTION: This snippet shows how to create a custom Flyway callback by implementing the Callback interface to handle specific migration lifecycle events such as after migration or on errors. It includes supports, canHandleInTransaction, handle methods, and provides an example of firing notifications based on event type. This callback can be registered and used to extend Flyway's behavior during migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/API (Java)/API Hooks.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class MyNotifierCallback implements Callback {\n    \n    // Ensures that this callback handles both events\n    @Override\n    public boolean supports(Event event, Context context) {\n        return event.equals(Event.AFTER_MIGRATE) || event.equals(Event.AFTER_MIGRATE_ERROR);\n    }\n    \n    // Not relevant if we don't interact with the database\n    @Override\n    public boolean canHandleInTransaction(Event event, Context context) {\n        return true;\n    }\n    \n    // Send a notification when either event happens.\n    @Override\n    public void handle(Event event, Context context) {\n        String notification = event.equals(Event.AFTER_MIGRATE) ? \"Success\" : \"Failed\";\n        // ... Notification logic ...\n        notificationService.send(notification);\n    }\n\n    String getCallbackName() {\n        return \"MyNotifier\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring artifactFilename in Flyway TOML File (TOML)\nDESCRIPTION: Illustrates how to define the `artifactFilename` parameter within the `[flyway.generate]` section of a TOML configuration file for Flyway. This provides a persistent way to specify the output path for the diff artifact.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Artifact Filename Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.generate]\nartifactFilename = \"artifact.diff\"\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Migration Suffixes in Flyway - TOML\nDESCRIPTION: This snippet shows how to configure Flyway to recognize JavaScript migration files by modifying the sqlMigrationSuffixes property in the TOML file. By adding \".js\" to the suffixes, Flyway will look for MongoDB JavaScript script migrations. This is recommended, but not strictly required, since Flyway can also process scripts with the \".sql\" suffix. No runtime dependencies besides Flyway's configuration system are needed. The configuration optimizes migration file discovery for MongoDB's native script format.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Using MongoDB with Flyway.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nsqlMigrationSuffixes = [\".js\"]\n```\n\n----------------------------------------\n\nTITLE: Oracle JDBC URL with User and Password\nDESCRIPTION: This snippet illustrates the JDBC URL format that includes the username and password directly in the connection string. This approach allows authentication without specifying separate configuration parameters. It's an alternative authentication method but may not be suitable for sensitive environments.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Oracle Database/Oracle Database - Native Connectors.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n`jdbc:oracle:thin:<user>/<password>@//<host>:<port>/<database>`\n```\n\n----------------------------------------\n\nTITLE: Setting flyway.dryRunOutput in TOML Configuration\nDESCRIPTION: Defines the dry run output file path in a TOML configuration file for Flyway, allowing persistent configuration across executions. This setting directs Flyway to save the generated SQL statements to the specified file when performing a dry run.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Dry Run Output Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway]\ndryRunOutput = \"/my/output/file.sql\"\n```\n\n----------------------------------------\n\nTITLE: Flyway TOML Token Configuration\nDESCRIPTION: Illustrates how to configure the Flyway token using a TOML configuration file. The `email` and `token` are specified within the `flyway` section.  TOML files provide a structured way to manage configuration, but ensure proper access controls to prevent unauthorized access.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Token Setting.md#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n[flyway]\nemail = \"foo.bar@red-gate.com\"\ntoken = \"1234ABCD\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Loggers via Java API\nDESCRIPTION: Configures the `flyway.loggers` setting programmatically using the Flyway Java API. The `.loggers(\"auto\")` method call specifies auto-detection.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Loggers Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .loggers(\"auto\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Resolvers via Command-line with conf file\nDESCRIPTION: Example of setting custom migration resolvers using the command-line with the resolvers parameter. This approach uses Flyway CLI with a configuration file reference.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Migration Resolvers Setting.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -resolvers=\"my.resolver.MigrationResolver\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring oracleSqlplusWarn in Maven\nDESCRIPTION: This snippet illustrates how to set the `oracleSqlplusWarn` option within a Maven pom.xml file. Setting `<oracleSqlplusWarn>true</oracleSqlplusWarn>` in the `<configuration>` section enables warnings instead of errors for unsupported Oracle SQL*Plus statements.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle SQLPlus Warn Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <oracleSqlplusWarn>true</oracleSqlplusWarn>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Generating database schema diff with Flyway diff command\nDESCRIPTION: This snippet illustrates how to generate a differential artifact between the development database and the schema model using the 'diff' command in Flyway, pointing to source and target databases. It helps identify schema changes and generates an artifact for further processing.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Flyway Desktop migrations workflow with Flyway CLI.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ flyway diff \"-diff.source=development\" \"-diff.target=schemaModel\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignore Fill Factor and Index Padding in TOML\nDESCRIPTION: This TOML snippet configures the \"ignoreFillFactorAndIndexPadding\" option to \"true\". This setting instructs the database comparison tool to disregard the fill factor and index padding settings when comparing and deploying databases, preventing differences based on these settings. This option is crucial for controlling how the database comparison tools compare and deploy SQL Server projects. There are no external dependencies for using this setting; it is configured within the TOML file. The expected input is a boolean value (true or false).\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Fill Factor And Index Padding Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreFillFactorAndIndexPadding = true\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-Generation of Data and Log File Paths for SQL Server Restore in TOML\nDESCRIPTION: This TOML snippet shows how to enable automatic generation of SQL Server data and log file paths during backup restoration by setting 'sqlserver.generateWithMove' to true. This helps address scenarios where the source and target server directory structures differ or embedded paths are already in use. The snippet requires Flyway setup with a valid backup file path and proper access permissions.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Provisioner Setting/Backup Provisioner.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.shadow.resolvers.backup]\nbackupFilePath = '/tmp/backup/backup.bak'\nbackupVersion = \"995\"\nsqlserver.generateWithMove = true\n```\n\n----------------------------------------\n\nTITLE: Properties file configuration for reportFilename\nDESCRIPTION: This code demonstrates how to configure the 'reportFilename' parameter in a properties file for Flyway, which allows setting the filename via key-value pairs in the properties format. The filename affects the generated HTML report as well as related JSON files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Report Filename Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.reportFilename=flyway_report.html\n```\n\n----------------------------------------\n\nTITLE: Configuring flyway.check.deployedSnapshot in TOML\nDESCRIPTION: Shows how to set the 'deployedSnapshot' parameter within the '[flyway.check]' table in a Flyway TOML configuration file. Flyway will use the specified snapshot file ('my_snapshot') when executing the 'check' command with this configuration to compare the database state against the snapshot.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Deployed Snapshot Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.check]\ndeployedSnapshot = \"my_snapshot\"\n```\n\n----------------------------------------\n\nTITLE: Properties file configuration for Flyway GCSM secrets\nDESCRIPTION: Specifies the GCSM secrets in a properties file for Flyway using 'flyway.gcsm.secrets' key with comma-separated secrets. This enables integration with legacy or simple configuration management systems for database migration setups.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Google Cloud Secret Manager Namespace/Flyway Google Cloud Secret Manager Secrets Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.gcsm.secrets=secret1,secret2\n```\n\n----------------------------------------\n\nTITLE: Diffing Schemas with Flyway on the Command-line - Bash\nDESCRIPTION: This snippet demonstrates invoking the Flyway CLI to perform a diff operation between two environments, explicitly including Flyway-managed objects by setting the -includeFlywayObjects parameter to true. Requires Flyway CLI installed and accessible via ./flyway. Main parameters are -source, specifying the source database or environment; -target, specifying the target schema or model; and -includeFlywayObjects, which controls inclusion of management tables. Outputs the diff with internal Flyway objects if present.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DIff Namespace/Flyway Diff Include Flyway Objects Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway diff -source=\"env:development\" -target=\"schemaModel\" -includeFlywayObjects=true\n```\n\n----------------------------------------\n\nTITLE: Configuring cleanDisabled via Java API\nDESCRIPTION: Demonstrates enabling or disabling 'cleanDisabled' programmatically using Flyway's Java configuration API. Calling '.cleanDisabled(false)' allows the 'clean' operation. Suitable for integrating Flyway in Java applications.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Clean Disabled Setting.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nFlyway.configure()\n    .cleanDisabled(false)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Generating Change Report from Schema Model and Deployed Snapshot in Bash\nDESCRIPTION: This command compares a schema model against a specific deployed snapshot, facilitating validation of the current schema against expected state.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Check/Check Changes.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflyway check -changes -check.changesSource=\"schemaModel\" -deployedSnapshot=\"C:\\snapshot.json\"\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway encoding via Environment Variables\nDESCRIPTION: Shows how to configure Flyway encoding through environment variables for flexible deployment. Setting FLYWAY_ENCODING to UTF-16 allows Flyway to apply this encoding during migration runs.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Encoding Setting.md#_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nFLYWAY_ENCODING=UTF-16\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Resolvers via Environment Variable\nDESCRIPTION: Example of setting custom migration resolvers using environment variables. This uses the FLYWAY_RESOLVERS environment variable.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Migration Resolvers Setting.md#_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_RESOLVERS=my.resolver.MigrationResolver\n```\n\n----------------------------------------\n\nTITLE: Setting Baseline Description via Command Line (PowerShell)\nDESCRIPTION: This snippet demonstrates setting the `baselineDescription` parameter when running the `baseline` command from the command line using PowerShell. It specifies the description to be used for the baseline operation.  It requires Flyway to be installed and available in the command line environment. The output is the baseline operation's execution result.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Baseline Description Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -baselineDescription=\"Baseline\" baseline\n```\n\n----------------------------------------\n\nTITLE: Checking Status After Adding Repeatable Migration (CLI - Console)\nDESCRIPTION: Displays the Flyway migration status after creating the 'R__People_view.sql' file. The output shows that Flyway has detected the new repeatable migration and marked its state as 'Pending'.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Repeatable Migrations.md#_snippet_2\n\nLANGUAGE: Console\nCODE:\n```\nflyway info\n```\n\n----------------------------------------\n\nTITLE: Creating a New SQL Table in Development Database (SQL)\nDESCRIPTION: This SQL snippet demonstrates adding a new table named 'NewTable' to the 'Dev.dbo' schema with an integer primary key and a required nvarchar column. Used typically to introduce new structures in a development environment, this operation is later incorporated into version-controlled migrations using Flyway. Prerequisite: appropriate database permissions; inputs: schema/table name, key and column definitions. Outputs: new table within the development database. Limitation: specific to Microsoft SQL Server.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Flyway Desktop migrations workflow with Flyway CLI.md#_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE Dev.dbo.NewTable\n(\n    Id   INT PRIMARY KEY,\n    Name NVARCHAR(255) NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Snapshot Build Environment in TOML File\nDESCRIPTION: This snippet shows how to set the build environment parameter within a Flyway TOML configuration file. It sets the buildEnvironment to 'shadow' under the flyway.snapshot section. This configuration is used by Flyway when executing commands that involve snapshot operations, provided the source is 'migrations'.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Snapshot Namespace/Flyway Snapshot Build Environment Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.snapshot]\nbuildEnvironment = \"shadow\"\n```\n\n----------------------------------------\n\nTITLE: Setting Conditional Execution with Flyway shouldExecute in Properties\nDESCRIPTION: This snippet demonstrates how to configure the 'shouldExecute' option within a Flyway script configuration file using properties syntax. The 'shouldExecute' parameter evaluates a Boolean expression to decide whether a specific migration script should run or be ignored. The example shows comparing the flyway default schema placeholder with a literal string 'A'. This configuration expects the flyway placeholders namespace to be properly defined. When the expression evaluates to true, the migration runs; if false, it is ignored without affecting the schema history table.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Script Configuration/Should Execute.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nshouldExecute=${flyway:defaultSchema}==A\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Clickhouse Cluster Name in TOML File\nDESCRIPTION: This TOML snippet illustrates how to specify the ClickHouse cluster name within a Flyway configuration file using the TOML format. The `clusterName` property is nested under the `[flyway.clickhouse]` section.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Clickhouse Namespace/Flyway Clickhouse Cluster Name Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.clickhouse]\nclusterName=\"example_cluster\"\n```\n\n----------------------------------------\n\nTITLE: Flyway Generate Force Configuration in TOML\nDESCRIPTION: Illustrates how to configure the `force` option within the `flyway.generate` section of a TOML configuration file. Setting `force = true` will overwrite existing migration scripts.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Force Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.generate]\nforce = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Desktop Shadow Environment in TOML\nDESCRIPTION: This snippet demonstrates how to configure the `flywayDesktop.shadow` property in a TOML configuration file.  This setting specifies the name of the shadow environment used by Flyway Desktop. If no environment with the given name exists, Flyway Desktop will prompt for connection details.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Desktop Namespace/Flyway Desktop Shadow Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[flywayDesktop]\nshadow = \"shadow\"\n```\n\n----------------------------------------\n\nTITLE: Configuring cleanDisabled in Gradle Build Script\nDESCRIPTION: Shows setting the 'cleanDisabled' parameter within a Gradle build script for Flyway. Setting to 'false' enables the 'clean' command. Used for build-time configuration of Flyway tasks.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Clean Disabled Setting.md#_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    cleanDisabled = false\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Flyway Diff JSON Output Format\nDESCRIPTION: This JSON structure exemplifies the output format generated by the Flyway `diff` command. It includes a 'differences' array detailing changes (type, object, source, destination) and optional 'sourcePreparationInfo' and 'targetPreparationInfo' objects providing context about how the comparison sources were prepared, especially when using 'migrations' as a source/target.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Diff.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"differences\": [\n    \"differenceType\": \"Add\",\n    \"objectType\": \"Table\",\n    \"from\": {\n      \"schema\": \"dbo\",\n      \"name\": \"Table1\",\n    },\n    \"to\": null\n  ],\n  \"sourcePreparationInfo\": null,\n  \"targetPreparationInfo\": {\n    \"sourceType\": \"migrations\",\n    \"provisioner\": \"clean\",\n    \"migrationState\": {\n      \"pending\": 1,\n      \"applied\": 1,\n      \"failed\": 0,\n      \"total\": 1\n    },\n    \"reprovisioned\": true,\n    \"targetSchemaVersion\": \"001\",\n    \"migrationsExecuted\": 1,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlMigrationSuffixes via TOML\nDESCRIPTION: This snippet demonstrates how to configure the `sqlMigrationSuffixes` parameter using a TOML configuration file. It specifies an array of suffixes for SQL migration files, including `.sql`, `.pkg`, and `.pkb`. This configuration is placed under the `[flyway]` section.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Migration Suffixes Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nsqlMigrationSuffixes = [\".sql\", \".pkg\", \".pkb\"]\n```\n\n----------------------------------------\n\nTITLE: Generating Migration Script (flyway-dev) - Shell\nDESCRIPTION: This snippet generates a migration script from a diff artifact using `flyway-dev`. It uses artifact file path and specifies the migration name, and the location to generate it. Requires Flyway CLI version 11.0.0 or later and a Teams/Enterprise license.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Migrating from flyway-dev to flyway CLI.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\necho \\\"VGFibGU6W2Rib10uW1Rlc3RUYWJsZV0\\\" | flyway-dev generate -p 'C:\\WorkingFolders\\FWD\\ProjectFolder' -a 'C:\\WorkingFolders\\FWD\\ProjectFolder\\artifact.zip' -o 'C:\\WorkingFolders\\FWD\\ProjectFolder\\migrations' --name 'B001__BaselineScript.sql' --versioned-only --i-agree-to-the-eula\n```\n\n----------------------------------------\n\nTITLE: Enabling `includeAllStorage` in Flyway TOML Configuration (Oracle)\nDESCRIPTION: This TOML configuration snippet demonstrates how to enable the `includeAllStorage` option within the `[redgateCompare.oracle.options.storage]` section of a Flyway configuration file. Setting this to `true` ensures all physical storage properties for Oracle tables and indexes are compared and deployed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Storage Options Namespace/Oracle Include All Storage Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.storage]\nincludeAllStorage = true\n```\n\n----------------------------------------\n\nTITLE: Disabling Clean Option in create-database Provisioner\nDESCRIPTION: This TOML snippet illustrates how to disable the 'allowClean' option for the create-database provisioner, preventing the database from being cleaned during re-provisioning in the shadow environment.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Provisioner Setting/Create Database Provisioner.md#_snippet_3\n\nLANGUAGE: Toml\nCODE:\n```\n[environments.shadow.resolvers.create-database]\nallowClean = false\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreLobStorage Option in TOML for Flyway Oracle Schema Comparison\nDESCRIPTION: This snippet demonstrates how to set the 'ignoreLobStorage' boolean option in a TOML configuration file to ignore lob storage details during schema comparison operations in Flyway for Oracle. It requires placing the setting under the 'redgateCompare.oracle.options.ignores' section. The setting defaults to false and can only be configured via the configuration file or Flyway Desktop's comparison options.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Ignore Options Namespace/Oracle Ignore Lob Storage Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.oracle.options.ignores]\nignoreLobStorage = true\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Config File Encoding via Environment Variable (properties)\nDESCRIPTION: This snippet demonstrates setting the `configFileEncoding` using an environment variable. Setting the environment variable `FLYWAY_CONFIG_FILE_ENCODING` to \"UTF-16\" configures Flyway to use this encoding when loading configuration files. This approach allows configuring the encoding externally, independent of any specific build script or command line argument.  The environment variable must be set before running Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Command-line Parameters/Config File Encoding Parameter.md#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_CONFIG_FILE_ENCODING=UTF-16\n```\n\n----------------------------------------\n\nTITLE: Setting Oracle Wallet Location via Properties File (Flyway)\nDESCRIPTION: This properties file snippet shows how to set the Oracle wallet location. It sets the `flyway.oracle.walletLocation` property to the specified path. This configuration allows Flyway to locate the wallet for database connections. The property file is typically used for providing configuration parameters to Flyway. No special dependencies are needed; only the correct file format is required.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle Wallet Location Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.oracle.walletLocation=/User/db/my_wallet\n```\n\n----------------------------------------\n\nTITLE: Configuring `force` in Flyway TOML File\nDESCRIPTION: Shows how to set the `force` parameter to `true` within the `[flyway.prepare]` section of a TOML configuration file. This configuration ensures that the `flyway prepare` command will overwrite existing deployment scripts when this file is used.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Prepare Namespace/Flyway Prepare Force Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.prepare]\nforce = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Mixed Mode in Flyway with Gradle\nDESCRIPTION: Example of enabling the mixed mode parameter for Flyway in a Gradle build script. This allows migrations to contain both transactional and non-transactional statements.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Mixed Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    mixed = true\n}\n```\n\n----------------------------------------\n\nTITLE: TOML configuration of schemaModelLocation in Flyway\nDESCRIPTION: Shows how to configure the schemaModelLocation parameter in a TOML configuration file for Flyway, setting the path to the schema-model directory. Useful for persistent configuration setup across Flyway commands.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Schema Model Location Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nschemaModelLocation = 'C:\\Users\\FlywayUser\\Project\\schema-model'\n```\n\n----------------------------------------\n\nTITLE: Configuring reseedIdentityColumns in Flyway SQL Server deployment - TOML\nDESCRIPTION: This TOML snippet demonstrates how to enable the reseedIdentityColumns setting in Flyway's redgateCompare configuration for SQL Server data deployment. This option, when set to true, causes Flyway to reseed identity columns in the target database to align with the source database's next identity values after deployment. The setting must be applied in a TOML configuration file and cannot be changed elsewhere. It requires use within Flyway's environment configured for SQL Server data projects. By default, this option is false.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Data Deployment Options Namespace/SQL Server Data Reseed Identity Columns Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.data.options.deployment]\nreseedIdentityColumns = true\n```\n\n----------------------------------------\n\nTITLE: Creating a MongoDB Data Migration Script - JavaScript\nDESCRIPTION: This JavaScript migration script, intended for execution by Flyway on a MongoDB instance, inserts a new document into the 'user' collection with the name 'Ada Lovelace' and age 205. There are no required parameters, and the script is executed within the context of a MongoDB JavaScript environment. The migration creates the 'user' collection automatically if it does not exist and adds the record as a new document. No output is returned directly; changes can be verified in the database.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Using MongoDB with Flyway.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndb.user.insert({name: \"Ada Lovelace\", age: 205});\n```\n\n----------------------------------------\n\nTITLE: Specifying Flyway Deployment Order via Command-Line (PowerShell)\nDESCRIPTION: This snippet illustrates how to specify the custom migration deployment order using the `-tags.deploymentOrder` command-line argument with the Flyway executable. The desired tag sequence is provided as a comma-separated string. This example runs the `info` command, but the setting applies to other commands like `migrate` or `undo`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Tags Namespace/Flyway Tags Deployment Order Setting.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway \"-tags.deploymentOrder=tagA,tagB,tagC\" info\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway SingleStoreDB Dependency (Redgate) in Maven XML\nDESCRIPTION: Maven XML dependency configuration to include the Redgate version of the Flyway SingleStoreDB support library in a Java project. The specific version is dynamically inserted based on the site's `flywayVersion` variable. Requires additional repository configuration as noted in the linked 'configure the repository' section.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/SingleStoreDB.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.redgate.flyway</groupId>\n    <artifactId>flyway-singlestore</artifactId>\n    <version>{{ site.flywayVersion }}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Clickhouse Cluster Name via Java API\nDESCRIPTION: This Java snippet shows how to access the ClickHouse configuration extension via the Flyway API and programmatically set the cluster name. This method is used when embedding Flyway within a Java application.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Clickhouse Namespace/Flyway Clickhouse Cluster Name Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nClickHouseConfigurationExtension clickHouseConfigurationExtension = configuration.getPluginRegister().getPlugin(ClickHouseConfigurationExtension.class);\nclickHouseConfigurationExtension.setClusterName(\"example_cluster\");\n```\n\n----------------------------------------\n\nTITLE: Flyway diffText artifactFilename Command-line Example\nDESCRIPTION: Demonstrates how to use the `-artifactFilename` parameter with the Flyway command-line interface to specify the output file for the database diff.  The provided value is relative to the working directory.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DiffText Namespace/Flyway DiffText Artifact Filename Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway diffText -artifactFilename=artifact.diff\n```\n\n----------------------------------------\n\nTITLE: Configuring Loggers in Maven\nDESCRIPTION: Configures a property, presumably related to loggers, within the `<configuration>` block of the Flyway Maven plugin. The provided snippet shows 'auto' inside a `<loggers>` tag closed by `<lockRetryCount>`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Loggers Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <loggers>auto</lockRetryCount>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Flyway TOML Configuration\nDESCRIPTION: Configures the Oracle Kerberos cache file in a TOML configuration file.  The `kerberosCacheFile` parameter is set within the `[flyway.oracle]` section of the TOML file. This configuration is read when Flyway is initialized.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle Kerberos Cache File Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway.oracle]\nkerberosCacheFile = \"/temp/krb5cc_123\"\n```\n\n----------------------------------------\n\nTITLE: Configuring `filterFile` in TOML\nDESCRIPTION: This TOML snippet shows how to configure the `filterFile` setting within the `[redgateCompare]` section of a Flyway TOML configuration file. It sets the path to the custom filter file named `custom.rgf`, which will be resolved relative to the working directory.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Filter File Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare]\nfilterFile = \"custom.rgf\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreNotForReplication setting - TOML\nDESCRIPTION: Demonstrates how to set the `ignoreNotForReplication` option to `true` within a TOML configuration file for Flyway's SQL Server comparison features. This option is used to ignore the `NOT FOR REPLICATION` property during database comparison on objects like foreign keys, identities, check constraints, and triggers. The snippet shows the required section `[redgateCompare.sqlserver.options.ignores]` and the key-value pair `ignoreNotForReplication = true`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Not For Replication Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreNotForReplication = true\n```\n\n----------------------------------------\n\nTITLE: Setting rulesLocation in Flyway TOML configuration file\nDESCRIPTION: This snippet shows how to set the `rulesLocation` parameter within a TOML configuration file under the `[flyway.check]` section. This setup allows Flyway to locate custom rule files during its check operation, replacing the default rules folder.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Rules Location Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway.check]\nrulesLocation = \"/my_rules_folder\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway CLI Output Color via Command-line - PowerShell\nDESCRIPTION: This snippet demonstrates how to set the Flyway CLI's output color option to 'never' using the command-line on a PowerShell-compatible environment. The '-color=never' argument disables colorized output regardless of console detection. No external dependencies are required except for having the Flyway CLI tool installed and accessible. The command expects no arguments other than the standard Flyway CLI options and produces colorless output; no environment variable or API option is available for this setting.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Command-line Parameters/Color Parameter.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -color=never info\n```\n\n----------------------------------------\n\nTITLE: TOML configuration for validateMigrationNaming\nDESCRIPTION: Configures the validateMigrationNaming parameter in the Flyway TOML configuration file. Setting this to true enforces filename validation for migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Validate Migration Naming Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway]\nvalidateMigrationNaming = true\n```\n\n----------------------------------------\n\nTITLE: Flyway Generate Description (TOML)\nDESCRIPTION: This configuration snippet demonstrates how to set the `description` parameter within the `[flyway.generate]` section of a TOML configuration file. It sets the description of the generated migration to \"addTable\".\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Description Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.generate]\ndescription = \"addTable\"\n```\n\n----------------------------------------\n\nTITLE: Expected Flyway Info Output After Authorization (Console)\nDESCRIPTION: This snippet provides an example of the console output from the `flyway info` command after Flyway has been authorized for Enterprise Edition. It clearly shows \"Flyway ENTERPRISE Edition\" at the top, confirming the successful authorization and edition change.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Auth.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nFlyway ENTERPRISE Edition {{ site.flywayVersion }} by Redgate\n\nSee release notes here: https://rd.gt/416ObMi\nDatabase: jdbc:h2:mem:db (H2 2.2)\nSchema history table \"PUBLIC\".\"flyway_schema_history\" does not exist yet\nSchema version: << Empty Schema >>\n\n+------------+---------+-------------+------+--------------+---------+----------+\n| Category   | Version | Description | Type | Installed On | State   | Undoable |\n+------------+---------+-------------+------+--------------+---------+----------+\n| Versioned  | 1       | first       | SQL  |              | Pending | No       |\n| Repeatable |         | repeatable  | SQL  |              | Pending |          |\n+------------+---------+-------------+------+--------------+---------+----------+\n```\n\n----------------------------------------\n\nTITLE: Configuring cleanDisabled in Maven Plugin\nDESCRIPTION: Illustrates setting the 'cleanDisabled' parameter in Maven's Flyway plugin configuration. Setting to 'false' allows the execution of 'clean' commands during Maven builds. Used for automating database cleanup in Maven projects.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Clean Disabled Setting.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    <cleanDisabled>false</cleanDisabled>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Running Flyway Migration in Development Environment\nDESCRIPTION: This command sets the environment to 'development' and executes Flyway migration, ensuring only the migration for the development environment runs. It illustrates how to specify environment via command-line argument using the -environment flag.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Injecting Environments.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflyway -environment=development migrate\n```\n\n----------------------------------------\n\nTITLE: Adding minorTolerance to Flyway Properties Config - Properties\nDESCRIPTION: Specifies the minorTolerance threshold in a Java-style properties configuration for Flyway. The key flyway.check.minorTolerance is assigned an integer value, here set to 7. This approach is compatible with property-based Flyway configurations, and the threshold can be modified as required. If the number of minor rule violations exceeds this value, Flyway will fail the operation.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Minor Tolerance Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.check.minorTolerance=7\n```\n\n----------------------------------------\n\nTITLE: Filtering Redgate Compare Properties by Name (JSON)\nDESCRIPTION: This JSON snippet illustrates how to filter specific properties within database objects using a Redgate Compare filter file. It defines a \"postFilter\" that targets object \"property\"s (\"filterTarget\": \"property\") and excludes any property whose \"name\" is \"collations\". This is applied during comparison/deployment.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Filter Formats/Redgate Compare Filter Format.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"1.1\",\n  \"postFilters\":\n  [\n    {\n      \"filterTarget\": \"property\",\n      \"filterBy\": \"name\",\n      \"filterValue\": \"collations\",\n      \"effect\": \"exclude\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example SAP HANA SQL Script for Flyway Migrations\nDESCRIPTION: Demonstrates various SAP HANA SQL constructs compatible with Flyway migrations. Includes examples of single/multi-line comments, CREATE TABLE, CREATE INDEX, CREATE FULLTEXT INDEX, triggers using BEGIN...END blocks, anonymous DO BEGIN...END blocks, and Flyway's placeholder syntax `${tableName}`. Standard SQL syntax with ';' as the statement delimiter is used.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/SAP HANA (Including SAP HANA Cloud).md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n/* Single line comment */\nCREATE TABLE t (a INT, b NVARCHAR(10), c NVARCHAR(20));\nCREATE INDEX idx ON t(b);\n\nCREATE COLUMN TABLE A (A VARCHAR(10) PRIMARY KEY, B VARCHAR(10));\nCREATE FULLTEXT INDEX i ON A(A) FUZZY SEARCH INDEX OFF SYNC;\n\n/*\nMulti-line\ncomment\n*/\n\nCREATE TABLE TARGET ( A INT);\nCREATE TABLE control_tab(id INT PRIMARY KEY, name VARCHAR(30), payment INT);\nCREATE TABLE message_box(message VARCHAR(200), log_time TIMESTAMP);\n\n-- Triggers with complex BEGIN END; blocks\nCREATE TRIGGER TEST_TRIGGER_FOR_INSERT\nAFTER INSERT ON TARGET\nBEGIN\n DECLARE v_id        INT := 0;\n DECLARE v_name      VARCHAR(20) := '';\n DECLARE v_pay       INT := 0;\n DECLARE v_msg       VARCHAR(200) := '';\n DELETE FROM message_box;\n FOR v_id IN 100 .. 103 DO\n     SELECT name, payment INTO v_name, v_pay FROM control_tab WHERE id = :v_id;\n     v_msg := :v_name || ' has ' || TO_CHAR(:v_pay);\n     INSERT INTO message_box VALUES (:v_msg, CURRENT_TIMESTAMP);\n END FOR;\nEND;\n\nCREATE TABLE SAMPLE ( A INT);\nCREATE TRIGGER TEST_TRIGGER_WHILE_UPDATE\nAFTER UPDATE ON TARGET\nBEGIN\n DECLARE found INT := 1;\n DECLARE val INT := 1;\n WHILE :found <> 0 DO\n     SELECT count(*) INTO found FROM sample WHERE a = :val;\n     IF :found = 0 THEN\n         INSERT INTO sample VALUES(:val);\n     END IF;\n     val := :val + 1;\n END WHILE;\nEND;\n\n-- Anonymous blocks\nDO\nBEGIN\n    DECLARE v_count INT;\n    CREATE TABLE TAB1 (I INTEGER); \n    FOR v_count IN 1..10 DO\n        INSERT INTO TAB1 VALUES (:v_count);\n    END FOR;\nEND;\n\n-- Placeholders\nINSERT INTO ${tableName} (name) VALUES ('Mr. T');\n```\n\n----------------------------------------\n\nTITLE: Reviewing Dry Run Output SQL (SQL)\nDESCRIPTION: Displays the generated SQL script from the dry run. This file includes the SQL statements from the new migration (V3__Couple.sql) and the necessary INSERT statement to update the flyway_schema_history table, showing exactly what Flyway plans to execute without altering the database.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Dry Runs.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n---====================================\n-- Flyway Dry Run (2018-01-25 17:19:17)\n---====================================\n\nSET SCHEMA \"PUBLIC\";\n\n-- Executing: validate (with callbacks)\n------------------------------------------------------------------------------------------\n-- ...\n\n-- Executing: migrate (with callbacks)\n------------------------------------------------------------------------------------------\n-- ...\n\n-- Executing: migrate -> v3 (with callbacks)\n------------------------------------------------------------------------------------------\n\n-- Source: ./V3__Couple.sql\n---------------------------\ncreate table COUPLE (\n    ID int not null,\n    PERSON1 int not null references PERSON(ID), \n    PERSON2 int not null references PERSON(ID) \n);\nINSERT INTO \"PUBLIC\".\"flyway_schema_history\" (\"installed_rank\",\"version\",\"description\",\"type\",\"script\",\"checksum\",\"installed_by\",\"execution_time\",\"success\") VALUES (2, '3', 'Couple', 'SQL', 'V3__Couple.sql', -722651034, 'SA', 0, 1);\n-- ...\n```\n\n----------------------------------------\n\nTITLE: Configure disableDdlTriggers in TOML\nDESCRIPTION: This snippet demonstrates how to configure the `disableDdlTriggers` option in a TOML configuration file for Redgate SQL Compare. Setting it to `true` disables DDL triggers during data deployment, while `false` leaves them enabled. The option is nested under `redgateCompare.sqlserver.data.options.deployment`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Data Deployment Options Namespace/SQL Server Data disable DDL Triggers Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.data.options.deployment]\ndisableDdlTriggers = true\n```\n\n----------------------------------------\n\nTITLE: Configuring cleanDisabled in TOML Configuration File\nDESCRIPTION: Demonstrates setting the 'cleanDisabled' parameter in a TOML config file for Flyway. Setting it to 'false' permits cleanup operations. This method is used for managing Flyway settings in Toml-based configuration files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Clean Disabled Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway]\ncleanDisabled = false\n```\n\n----------------------------------------\n\nTITLE: Configuring flyway.check.buildUrl in Properties File\nDESCRIPTION: Illustrates how to define the build database URL in a standard properties configuration file using the key 'flyway.check.buildUrl'.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Build Url Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.check.buildUrl=\"jdbc://url2\"\n```\n\n----------------------------------------\n\nTITLE: Setting Redgate Clone Token via Flyway CLI (Bash)\nDESCRIPTION: Demonstrates how to set the Redgate Clone authentication token (`authenticationToken`) using the Flyway command-line interface for the 'development' environment. This example utilizes a property resolver (`localSecret.RedgateCloneToken`) to fetch the secret token when running the `flyway info` command.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Redgate Clone Resolver/Redgate Clone Resolver Authentication Token Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway info -environments.development.resolvers.clone.authenticationToken='${localSecret.RedgateCloneToken}'\n```\n\n----------------------------------------\n\nTITLE: Defining Migration Tags in Flyway TOML Configuration - TOML\nDESCRIPTION: This snippet shows how to define tag assignments for Flyway database migration versions using the TOML format. Each version string is assigned an array of tags, which control which migrations can be selected based on filtering conditions. No external dependencies are needed; this syntax is for use in a Flyway-compatible TOML configuration file. Input: version-to-tag mapping; output: migration tag associations during selection.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Tags Namespace/Flyway Tags Any Of Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway.tags.definitions]\n\"0.1\" = [\"tagA\"]\n\"0.2\" = [\"tagB\"]\n\"0.3\" = [\"tagC\", \"tagB\"]\n\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway PostgreSQL Rename Detection Behavior in TOML Configuration\nDESCRIPTION: Defines the 'detectRenames' option under 'redgateCompare.postgresql.options.behavior' in a TOML file. This setting controls whether Flyway attempts to detect renamed database objects (tables and columns) and deploys renames rather than drops and creates, improving migration clarity. The configuration supports values \"identical-only\" (default) and \"off\". It cannot be set outside TOML files and is currently honored but not configurable in Flyway Desktop.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare PostgreSQL Namespace/PostgreSQL Behavior Options Namespace/PostgreSQL Detect Renames Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.postgresql.options.behavior]\ndetectRenames = \"identical-only\"\n```\n\n----------------------------------------\n\nTITLE: Installing JRE for macOS using Maven\nDESCRIPTION: This Maven command installs a JRE tar.gz file for macOS (x64) into the local Maven repository. This is required to build platform-specific packages of the Flyway command-line tool since the JREs are not available from Maven Central. The command specifies the group ID, artifact ID, classifier, type, version, packaging, and file path for the JRE.\nSOURCE: https://github.com/flyway/flyway/blob/main/docs/documentation/Dev Environment Setup.md#_snippet_2\n\nLANGUAGE: maven\nCODE:\n```\nmvn install:install-file -DgroupId=net.adoptopenjdk \\\n        -DartifactId=jre \\\n        -Dclassifier=macos-x64 \\\n        -Dtype=tar.gz \\\n        -Dversion=17.0.6 \\\n        -Dpackaging=tar.gz \\\n        -Dfile=path/to/OpenJDK17U-jre_x64_mac_hotspot_17.0.6_10.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Installing JRE for Linux using Maven\nDESCRIPTION: This Maven command installs a JRE tar.gz file for Linux (x64) into the local Maven repository. This is required to build platform-specific packages of the Flyway command-line tool because the JREs are not available from Maven Central. The command specifies the group ID, artifact ID, classifier, type, version, packaging, and file path for the JRE.\nSOURCE: https://github.com/flyway/flyway/blob/main/docs/documentation/Dev Environment Setup.md#_snippet_1\n\nLANGUAGE: maven\nCODE:\n```\nmvn install:install-file -DgroupId=net.adoptopenjdk \\\n        -DartifactId=jre \\\n        -Dclassifier=linux-x64 \\\n        -Dtype=tar.gz \\\n        -Dversion=17.0.6 \\\n        -Dpackaging=tar.gz \\\n        -Dfile=path/to/OpenJDK17U-jre_x64_linux_hotspot_17.0.6_10.tar.gz\n```\n\n----------------------------------------\n\nTITLE: JSON Output Format - JSON\nDESCRIPTION: Example JSON output format returned by the Flyway validate command.  It includes details on error details, invalid migrations, validation success status, validate count, Flyway version, database, warnings, and the operation performed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Validate.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errorDetails\": null,\n  \"invalidMigrations\": [],\n  \"validationSuccessful\": true,\n  \"validateCount\": 2,\n  \"flywayVersion\": \"{{ site.flywayVersion }}\",\n  \"database\": \"testdb\",\n  \"warnings\": [],\n  \"operation\": \"validate\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway PostgreSQL Dependency (Redgate) - Maven XML\nDESCRIPTION: This snippet shows the XML dependency declaration for the Redgate version of the `flyway-database-postgresql` artifact in a Maven `pom.xml` file. It adds the necessary classes and resources to a Java project to enable Flyway's CockroachDB support. This dependency is required when using Flyway with CockroachDB in a Maven build.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/CockroachDB.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.redgate.flyway</groupId>\n    <artifactId>flyway-database-postgresql</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: JDBC URL Format Percona XtraDB Cluster\nDESCRIPTION: Specifies the standard JDBC URL format used to connect Flyway to a Percona XtraDB Cluster database, which follows the MySQL connection string format. It provides placeholders for the host, port, and database name required to establish the connection.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Percona XtraDB Cluster.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\njdbc:mysql://host:port/database\n```\n\n----------------------------------------\n\nTITLE: Example SQL Server Database Filter XML\nDESCRIPTION: This snippet shows the basic structure of a `.scpf` filter file for SQL Server. It demonstrates how to define filters for different object types (`None`, `StoredProcedure`, `Table`, `User`) using `<Include>` to specify inclusion/exclusion and `<Expression>` for conditional logic. The `<None>` element sets the default behavior.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Filter Formats/SQL Server Filter format.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<NamedFilter version=\"1\" type=\"SQLCompareFilter\">\n  <FilterName>Filter</FilterName>\n  <Filter version=\"1\" type=\"DifferenceFilter\">\n    <FilterCaseSensitive>False</FilterCaseSensitive>\n    <Filters version=\"1\">\n      <None version=\"1\">\n        <Include>True</Include>\n        <Expression>TRUE</Expression>\n      </None>\n      <StoredProcedure version=\"1\">\n        <Include>False</Include>\n        <Expression>((@SCHEMA = 'dbo') AND (@NAME = 'getCustomerOrders'))</Expression>\n      </StoredProcedure>\n      <Table version=\"1\">\n        <Include>True</Include>\n        <Expression>TRUE</Expression>\n      </Table>\n      <User version=\"1\">\n        <Include>True</Include>\n        <Expression />\n      </User>\n    </Filters>\n  </Filter>\n</NamedFilter>\n```\n\n----------------------------------------\n\nTITLE: Configuring Redgate Compare Oracle ignoreSequenceIncrementBy in TOML\nDESCRIPTION: This TOML snippet demonstrates how to set the `ignoreSequenceIncrementBy` option to `true` within a Flyway configuration file. Setting this property under the `[redgateCompare.oracle.options.ignores]` section instructs the comparison tool to ignore the `INCREMENT BY` value of sequences during schema comparison.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Ignore Options Namespace/Oracle Ignore Sequence INCREMENT BY Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.oracle.options.ignores]\nignoreSequenceIncrementBy = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignore tSQLt Framework and Tests Option in TOML for Flyway (TOML)\nDESCRIPTION: This TOML snippet sets the 'ignoreTsqltFrameworkAndTests' option to true within the 'redgateCompare.sqlserver.options.ignores' table for Flyway projects. This ensures tSQLt-related schemas, the tSQLt CLR assembly, SQLCop schema, and any schemas marked with the tSQLt.TestClass extended property are excluded from comparison. No external dependencies are required outside of Flyway and a configured TOML file; expected input is the TOML configuration, and the effect is to modify comparison scope as described.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Tsqlt Framework And Tests Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreTsqltFrameworkAndTests = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Group in Properties File (Properties)\nDESCRIPTION: Illustrates how to set the `flyway.group` parameter in a standard `.properties` formatted Flyway configuration file using the key-value pair syntax `flyway.group=true`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Group Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.group=true\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Generate Location in a TOML Configuration File\nDESCRIPTION: This snippet shows how to configure the location for generated Flyway migrations inside a TOML configuration file under the 'flyway.generate' namespace. The 'location' key accepts a string representing the relative or absolute path for placing migration files. This configuration option can be used when running Flyway tools that read TOML configs, although it is noted this setting is rarely specified in config files. Expected input is a string path; the output directs Flyway to generate migration files at that location.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Location Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.generate]\nlocation = \"migrations\"\n```\n\n----------------------------------------\n\nTITLE: Installing JRE for Windows using Maven\nDESCRIPTION: This Maven command installs a JRE zip file for Windows (x64) into the local Maven repository. This is necessary to build the platform-specific packages of the Flyway command-line tool, as the JREs are not available through Maven Central. The command specifies the group ID, artifact ID, classifier, type, version, packaging, and file path for the JRE.\nSOURCE: https://github.com/flyway/flyway/blob/main/docs/documentation/Dev Environment Setup.md#_snippet_0\n\nLANGUAGE: maven\nCODE:\n```\nmvn install:install-file -DgroupId=net.adoptopenjdk \\\n        -DartifactId=jre \\\n        -Dclassifier=windows-x64 \\\n        -Dtype=zip \\\n        -Dversion=17.0.6 \\\n        -Dpackaging=zip \\\n        -Dfile=path/to/OpenJDK17U-jre_x64_windows_hotspot_17.0.6_10.zip\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Data Image via Command Line - Bash\nDESCRIPTION: Demonstrates how to specify the dataImage for a Flyway environment resolver using the command-line interface. Requires the Flyway CLI installed and configured. The -environments.development.resolvers.clone.dataImage argument sets the container image to the desired value, such as 'mssql-empty'. Input: command-line arguments. Output: runs the 'flyway info' operation with the specified context. This approach is suitable for scripting and automation.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Redgate Clone Resolver/Redgate Clone Resolver Data Image Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway info -environments.development.resolvers.clone.dataImage='mssql-empty'\n```\n\n----------------------------------------\n\nTITLE: Configuring target version in Flyway Gradle Plugin (Groovy)\nDESCRIPTION: Demonstrates how to set the `target` property within the `flyway { ... }` block in a Gradle build script. This configures the Flyway plugin's target version for the Gradle project.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Target Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    target = '2.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Maven Plugin Using Configuration Section\nDESCRIPTION: XML example showing how to configure the Flyway Maven plugin directly in the plugin configuration section of pom.xml. This example sets database credentials, schemas, and placeholders. Cannot be used for empty values due to a Maven bug.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Maven Goal.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<plugin>\n    ...\n    <configuration>\n        <user>myUser</user>\n        <password>mySecretPwd</password>\n        <schemas>\n            <schema>schema1</schema>\n            <schema>schema2</schema>\n            <schema>schema3</schema>\n        </schemas>\n        <placeholders>\n            <keyABC>valueXYZ</keyABC>\n            <otherplaceholder>value123</otherplaceholder>\n        </placeholders>\n    </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Server Kerberos Login File via TOML Configuration in Flyway\nDESCRIPTION: This snippet shows how to set the Kerberos login configuration file path in Flyway's TOML configuration file format. It specifies the file path under the [flyway.sqlserver] section with the kerberos.login.file key pointing to the SQLJDBCDriver.conf file. This configuration enables Kerberos authentication when Flyway runs using the TOML config.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Server Namespace/Flyway SQL Server Kerberos Login File Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.sqlserver]\nkerberos.login.file = \"/path/to/SQLJDBCDriver.conf\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyway .conf file\nDESCRIPTION: This command upgrades an existing Flyway .conf file to the latest format. It takes the path to the .conf file using the `-from` parameter and the type using the `-fromType` parameter (`Conf`). The updated configuration will be written to a new file. Either `-from` or `-fromType` must be specified.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Init.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nflyway init -projectName=MyProject -databaseType=Sqlite -from=flyway.conf -fromType=Conf\n```\n\n----------------------------------------\n\nTITLE: Enabling Oracle SQL*Plus Support via PowerShell Command\nDESCRIPTION: Shows how to enable SQL*Plus support in Flyway through the command-line interface by setting the 'oracle.sqlplus' parameter to true. Suitable for one-time or script-based configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle SQLPlus Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway -oracle.sqlplus=\"true\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring decryptEncryptedObjects in TOML for Flyway\nDESCRIPTION: This TOML snippet demonstrates how to set the 'decryptEncryptedObjects' option within a Flyway configuration file. Enabling this option (setting to 'true', which is the default) instructs Flyway's Redgate Compare integration to decrypt encrypted SQL Server database objects during comparisons. This requires sysadmin permissions and is not compatible with Azure SQL databases.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Behavior Options Namespace/SQL Server Decrypt Encrypted Objects Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.behavior]\ndecryptEncryptedObjects = true\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Transactional Lock via TOML Configuration File (Flyway)\nDESCRIPTION: This TOML configuration snippet demonstrates how to set the `transactional.lock` property within a TOML configuration file.  Setting `transactional.lock = false` within the `[flyway.postgresql]` section configures Flyway to use session-level locks.  Ensure the TOML file is properly formatted and placed in a location Flyway can read.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway PostgreSQL Namespace/Flyway PostgreSQL Transactional Lock Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.postgresql]\ntransactional.lock = false\n```\n\n----------------------------------------\n\nTITLE: Configuring scriptPlaceholderPrefix in Gradle Build Script (Groovy)\nDESCRIPTION: Sets the Flyway script placeholder prefix to 'P__' within a Gradle build script (`build.gradle`) using the Flyway Gradle plugin's configuration block. This configuration applies when running Flyway tasks via Gradle.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Script Placeholder Prefix Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    scriptPlaceholderPrefix = 'P__'\n}\n```\n\n----------------------------------------\n\nTITLE: Rebuilding the Schema History Table\nDESCRIPTION: This snippet guides the process to rebuild the Flyway schema history table if it has been dropped or needs re-baselining. The steps include running the 'Baseline' command to recreate the table and populating it with migration info without re-executing migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Frequently Asked Questions.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Setting Repeatable SQL Prefix via Command-line\nDESCRIPTION: Demonstrates how to configure the `repeatableSqlMigrationPrefix` using a command-line argument when invoking the Flyway executable. This sets the prefix for repeatable SQL migration files (e.g., `A__Description.sql`). Requires the Flyway executable to be available in the path or specified directly.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Repeatable SQL Migration Prefix Setting.md#_snippet_0\n\nLANGUAGE: Command-line\nCODE:\n```\n./flyway -repeatableSqlMigrationPrefix=\"A\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Script Placeholder Suffix via Command-line in PowerShell\nDESCRIPTION: This snippet shows how to specify the script placeholder suffix when running Flyway from PowerShell, using a command-line argument. It sets the suffix to '__P' for the migration scripts. It requires the Flyway CLI to be installed and accessible from the terminal.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Script Placeholder Suffix Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway -scriptPlaceholderSuffix=\"__P\" info\n```\n\n----------------------------------------\n\nTITLE: Filtering Migrations by Tags Using Flyway Command-Line in PowerShell\nDESCRIPTION: Demonstrates how to use the flyway command-line interface in PowerShell to filter migrations by requiring all specified tags (allOf condition). This example runs the info command and filters migrations containing all tags tagA, tagB, and tagC.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Tags Namespace/Flyway Tags All Of Setting.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway \"-tags.allOf=tagA,tagB,tagC\" info\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Config Files for Flyway Maven Plugin\nDESCRIPTION: Command-line example showing how to specify multiple configuration files for the Flyway Maven plugin. Multiple files are separated by commas.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Maven Goal.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n> mvn -Dflyway.configFiles=path/to/myAlternativeConfig.conf,other.conf flyway:migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Engine Version via Command-line (Bash)\nDESCRIPTION: This bash command configures the `engineVersion` parameter for the Vault resolver within Flyway. It sets the `engineVersion` to \"v2\" within the development environment. The primary purpose is to manage secrets for database migrations. No external dependencies are explicitly listed in the description. The command takes the 'engineVersion' parameter as input, and its output includes any successful setup or any errors from within Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Vault Resolver/Vault Resolver Engine Version Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway info -environments.development.resolvers.vault.engineVersion=\"v2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring environments in flyway.user.toml for SQL Server\nDESCRIPTION: This snippet shows how to define multiple database environments (development, shadow, production) in a TOML configuration file, specifying connection URLs, credentials, and optional provisioner parameters. These environments facilitate database workflows like validation and deployment.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Flyway Desktop migrations workflow with Flyway CLI.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development]\nurl = \"jdbc:sqlserver://localhost;authentication=sqlPassword;databaseName=Dev;encrypt=true;trustServerCertificate=true\"\nuser = \"sa\"\npassword = \"...\"\n\n[environments.shadow]\nurl = \"jdbc:sqlserver://localhost;authentication=sqlPassword;databaseName=Shadow;encrypt=true;trustServerCertificate=true\"\nuser = \"sa\"\npassword = \"...\"\nprovisioner = \"clean\"\n\n[environments.prod]\nurl = \"jdbc:sqlserver://localhost;authentication=sqlPassword;databaseName=Prod;encrypt=true;trustServerCertificate=true\"\nuser = \"sa\"\npassword = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Configuring failOnMissing in Flyway TOML configuration file\nDESCRIPTION: This snippet shows how to configure the flyway.tags.failOnMissing setting in a TOML configuration file by setting 'failOnMissing' to false under the 'flyway.tags' section. This configuration ensures Flyway ignores missing migrations as specified.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Tags Namespace/Flyway Tags Fail On Missing Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway.tags]\nfailOnMissing = false\n```\n\n----------------------------------------\n\nTITLE: Configuring 'addNoPopulationToFulltextIndexes' in TOML for Flyway SQL Server\nDESCRIPTION: This snippet demonstrates how to enable the 'addNoPopulationToFulltextIndexes' setting within a TOML configuration file to control the initial population behavior of fulltext indexes in SQL Server via Flyway. It is used to delay index population, thereby giving manual control over update timing and preventing automatic index creation during deployment.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Behavior Options Namespace/SQL Server Add No Population To Fulltext Indexes Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.behavior]\naddNoPopulationToFulltextIndexes = true\n```\n\n----------------------------------------\n\nTITLE: Diffing Production and Migrations Using Flyway CLI (Shell)\nDESCRIPTION: This command runs the Flyway 'diff' operation to compare the production environment against the migrations directory, with the build environment set to 'shadow'. It detects all schema differences that exist between what is applied in production and what is modeled in Flyway migrations. The operation outputs a diff artifact for later use and highlights any missing migrations or configuration issues. Required: Flyway Enterprise Edition, configured 'prod' and 'shadow' environments, and properly set locations. Inputs: source database, target migrations folder, build environment. Outputs: diff artifact file. Limited to configured environments and licenses.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Flyway Desktop migrations workflow with Flyway CLI.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ flyway diff \"-diff.source=prod\" \"-diff.target=migrations\" \"-diff.buildEnvironment=shadow\"\n\nFlyway Enterprise Edition {{ site.flywayVersion }} by Redgate\nLicensed to red-gate.com (license ID 1174ed6b-b10e-41bd-9a1b-285ddc3239c7)\n\nSee release notes here: https://rd.gt/416ObMi\nSuccessfully validated 0 migrations (execution time 00:00.009s)\nWARNING: No migrations found. Are your locations set up correctly?\ndiff artifact generated: C:\\Users\\Flyway\\AppData\\Local\\Temp\\flyway.artifact.diff\n+-----------------------------+--------+-----------------------+----------------+---------------------------------------+\n| Id                          | Change | Object Type           | Schema         | Name                                  |\n+-----------------------------+--------+-----------------------+----------------+---------------------------------------+\n| YoZgVMdZR3p7FZEygVaRX9MoF2w | Add    | DDL trigger           |                | ddlDatabaseTriggerLog                 |\n| ZKZljmz2_Vvl5wLmV.mczvanHzM | Add    | Extended property     |                | MS_Description                        |\n| VYj3ZC0OtkZR4CbJ_JHm9BMkg_c | Add    | Full text catalog     |                | AW2016FullTextCatalog                 |\n| qlJstpTbyOQ7nRXTfUvY4lnUDIA | Add    | Function              | dbo            | ufnGetAccountingEndDate               |\n...\n| YreyZ8E1z3onEQFgWSGvDqaDUeY | Add    | XML schema collection | Production     | ProductDescriptionSchemaCollection    |\n| UJr0Z.pCcr8O5ntP1w6H9teL8kQ | Add    | XML schema collection | Sales          | StoreSurveySchemaCollection           |\n+-----------------------------+--------+-----------------------+----------------+---------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreUsersPermissionsAndRoleMemberships in TOML for SQL Server\nDESCRIPTION: This TOML configuration snippet sets the ignoreUsersPermissionsAndRoleMemberships option which controls whether to ignore users' permissions and role memberships during SQL Server schema comparison. When set to true (default), object permissions are compared only for roles, not for individual users.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Users Permissions And Role Memberships Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreUsersPermissionsAndRoleMemberships = true\n```\n\n----------------------------------------\n\nTITLE: Generating Snapshot Using Build Database - Flyway CLI\nDESCRIPTION: This Bash snippet demonstrates generating a Flyway snapshot using the build database. It uses the `flyway snapshot` command with `-source=migrations`, `-buildEnvironment=shadow`, `-buildVersion=2`, and the destination filename. This creates a snapshot for a specific migration version. This requires Flyway CLI and the appropriate build environment settings. The output is a JSON file containing the snapshot.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Snapshot.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflyway snapshot -source=migrations -buildEnvironment=shadow -buildVersion=2 -filename=C:\\snapshot.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Secrets via API - Flyway - Java\nDESCRIPTION: This code snippet demonstrates programmatically configuring Flyway with Dapr secret names via the Java API. It acquires the DaprConfigurationExtension from the plugin registry and calls setDaprSecrets with the desired secret names. Requires Flyway's Java API, Dapr plugin available, and correct class initializations. The setDaprSecrets method accepts multiple arguments, each a secret identifier. Secret precedence applies if parameters overlap.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Dapr Namespace/Flyway Dapr Secrets Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nDaprConfigurationExtension daprConfigurationExtension = configuration.getPluginRegister().getPlugin(DaprConfigurationExtension.class)\ndaprConfigurationExtension.setDaprSecrets(\"secret1\", \"secret2\");\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Vault Secrets via Command-line in PowerShell\nDESCRIPTION: This snippet demonstrates how to specify Vault secrets for Flyway configurations using the command-line interface in PowerShell. It shows usage of the -vault.secrets parameter with a comma-separated list of Vault paths. The parameters represent secret locations that contain Flyway configuration data, and the last secret in the list takes precedence if duplicates exist. Dependencies include having Flyway and Vault set up appropriately.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Vault Namespace/Flyway Vault Secrets Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -vault.secrets=\"kv/data/flyway/flywayConfig1,kv/flyway/flywayConfig2\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreSupplementalLogGroups in TOML\nDESCRIPTION: This snippet illustrates how to enable the 'ignoreSupplementalLogGroups' setting within a TOML configuration file used by Flyway for Oracle comparisons. Setting this to true will ignore supplemental log groups during table comparisons. The setting is placed within the '[redgateCompare.oracle.options.ignores]' section, demonstrating the configuration dependency and syntax.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Ignore Options Namespace/Oracle Ignore Supplemental Log Groups Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.oracle.options.ignores]\nignoreSupplementalLogGroups = true\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Script Generation Target via Command-line - Bash\nDESCRIPTION: This snippet shows how to specify the 'target' value when executing Flyway's generate command using the command-line interface. The target string must match a previously defined diff source or target to guide the script generation process. The command requires Flyway executable access and is used in scenarios where partial changes from diffs need capturing without recomputing diffs.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Target Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway generate -target=\"schemaModel\"\n```\n\n----------------------------------------\n\nTITLE: Assigning Flyway Placeholders in Gradle Build Script (Groovy)\nDESCRIPTION: Demonstrates how to set Flyway placeholders within a Gradle build script written in Groovy by defining a map for the 'placeholders' property in the Flyway plugin configuration block. This method integrates placeholder configuration into the build lifecycle, suitable for projects managed with Gradle. Input consists of placeholder keys and values; these are consumed by Flyway during migration tasks executed by Gradle.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholders Namespace.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    placeholders = ['key1' : 'value1', 'key2' : 'value2']\n}\n```\n\n----------------------------------------\n\nTITLE: Undoing the Last Applied Migration Using Flyway CLI Shell Command\nDESCRIPTION: Uses the 'flyway undo' command to revert the most recently applied versioned migration to its previous state, executing the corresponding undo migration script if available. This command helps in rolling back database changes safely and maintains the audit trail of applied and undone migrations within Flyway's metadata tables. Requires that corresponding undo migration scripts are defined and accessible by Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Undo Migrations.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nflyway undo\n```\n\n----------------------------------------\n\nTITLE: Configuring includeTimestampColumns Option in Flyway TOML File - TOML\nDESCRIPTION: This excerpt demonstrates how to configure the 'includeTimestampColumns' option in the TOML configuration file for Flyway's Redgate Compare SQL Server data options. Setting 'includeTimestampColumns = true' instructs Flyway to include timestamp columns in the data comparison, although such columns cannot be deployed. Prerequisites are an existing Flyway SQL Server project and access to the project's TOML configuration file. The key parameter is 'includeTimestampColumns', which accepts a boolean value. No input beyond editing the configuration file is required; the output is that timestamp columns will participate in data comparison operations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Data Mapping Options Namespace/SQL Server Data Include Timestamp Columns Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.data.options.mapping]\nincludeTimestampColumns = true\n```\n\n----------------------------------------\n\nTITLE: Configuring target version in Flyway Maven Plugin (XML)\nDESCRIPTION: Shows how to configure the `target` property within the `<configuration>` block of the Flyway Maven plugin in a `pom.xml` file. This sets the target version for Flyway operations executed via Maven.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Target Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <target>2.0</target>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway SAP HANA Dependency (Gradle - Redgate)\nDESCRIPTION: Groovy snippet for adding the Redgate Flyway SAP HANA database support dependency in a Gradle build script (build.gradle). Use this within the 'dependencies' block.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/SAP HANA (Including SAP HANA Cloud).md#_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation \"com.redgate.flyway:flyway-database-saphana\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway SQL Server Partition Scheme Comparison Option in TOML\nDESCRIPTION: This snippet demonstrates how to enable the 'considerNextFilegroupInPartitionSchemes' boolean option within Flyway's SQL Server comparison behavior settings in a TOML configuration file. The option determines whether the next filegroup in a partition scheme is considered during comparison operations. The expected input is a boolean value, with the default set to true. It requires Flyway and proper TOML parsing capabilities to apply this setting effectively.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Behavior Options Namespace/SQL Server Consider Next Filegroup In Partition Schemes Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.behavior]\nconsiderNextFilegroupInPartitionSchemes = true\n```\n\n----------------------------------------\n\nTITLE: Configuring addWithEncryption in Flyway Using TOML - TOML\nDESCRIPTION: This snippet demonstrates how to set the addWithEncryption option to true within the redgateCompare.sqlserver.options.behavior section of a Flyway TOML configuration file. Setting this property ensures the WITH ENCRYPTION clause is added to applicable SQL objects during deployment. No external dependencies are required beyond Flyway itself; the value must be a boolean, and enabling this option prevents deployments to Microsoft Azure SQL databases.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Behavior Options Namespace/SQL Server Add With Encryption Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.options.behavior]\naddWithEncryption = true\n```\n\n----------------------------------------\n\nTITLE: Invalid Use of Scoped Namespacing in PowerShell\nDESCRIPTION: Provides an example of incorrect scoped namespacing usage in PowerShell. The '-databaseType' parameter, which belongs to the 'init' namespace, follows the 'info' verb. This fails because scoped parameters must immediately follow their associated verb.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Command-line.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nflyway init info -databaseType=sqlserver \n```\n\n----------------------------------------\n\nTITLE: Gradle Dependency Configuration for Flyway Oracle Support (Redgate Version)\nDESCRIPTION: Gradle configuration to add the Redgate Flyway Oracle database support as a dependency to your Java project.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Oracle Database.md#_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation \"com.redgate.flyway:flyway-database-oracle\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting forceColumnOrder Behavior in Flyway Oracle TOML Configuration\nDESCRIPTION: This snippet demonstrates how to enable the forceColumnOrder option in the Flyway TOML configuration file under the redgateCompare.oracle.options.behavior section. When set to true, Flyway forces a table rebuild during deployment to preserve column order if new columns are inserted in the middle of a table. This functionality requires using Flyway's Oracle redgateCompare feature and cannot be configured outside of TOML files or Flyway Desktop UI. The expected input is a boolean value; default is false.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Behavior Options Namespace/Oracle Force Column Order Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.oracle.options.behavior]\nforceColumnOrder = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Secret Manager Integration in Flyway Using Command Line (bash)\nDESCRIPTION: This snippet shows the Flyway command used to connect and retrieve database credentials from a Google Cloud Secret Manager secret. It assumes prior setup of a GCSM project and a stored secret containing Flyway configuration properties. The command uses the '-plugins.gcsm.project' flag to specify the GCSM project name and the '-plugins.gcsm.secrets' flag to specify a comma-separated list of secrets to read. Running this command accesses the database with credentials securely fetched from GCSM, avoiding plaintext exposure.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Integrating Google Cloud Secret Manager.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflyway info -plugins.gcsm.project=\"quixotic-ferret-345678\" -plugins.gcsm.secrets=\"my-flyway-config\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreLockPropertiesOfIndexes in Flyway TOML Configuration - TOML\nDESCRIPTION: This TOML configuration snippet demonstrates how to enable the 'ignoreLockPropertiesOfIndexes' comparison option for SQL Server projects in Flyway. By setting this Boolean flag to true in the '[redgateCompare.sqlserver.options.ignores]' section, Flyway will disregard the 'PAGE LOCK' and 'ROW LOCK' properties of indexes when comparing or deploying schemas. This setting is only configurable via TOML files or within Flyway Desktop's comparison option settings, and does not accept dynamic or external input.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Lock Properties Of Indexes Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreLockPropertiesOfIndexes = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Loggers in Gradle\nDESCRIPTION: Configures the `loggers` property within the Flyway plugin block in a Gradle build script. Sets the logger to 'auto' for auto-detection.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Loggers Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    loggers = 'auto'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redgate Clone Resolver via TOML Configuration File\nDESCRIPTION: Example of configuring the Redgate Clone Resolver in a TOML configuration file. It defines the development environment with necessary parameters for connecting to a Redgate Clone database, including clone server URL, data image, container settings, and authentication.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Redgate Clone Resolver.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development]\nurl = \"${clone.url}databaseName=my-database\"\n\n[environments.development.resolvers.clone]\nurl = \"https://clone.red-gate.com:1234/cloning-api\"\ndataImage = \"mssql-empty\"\ndataContainer = \"MyContainer\"\ndataContainerLifetime = \"1h\"\nauthenticationToken = \"${localSecret.RedgateCloneToken}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Minor Rules in Flyway Properties File - Properties\nDESCRIPTION: This snippet demonstrates configuring minor code analysis rules by setting the flyway.check.minorRules key in a standard properties file. This format should be used when integrating Flyway into environments that read configuration from .properties files. The listed rule code L002 is treated as minor; multiple codes can be specified if needed. Ensure that this file is loaded by your Flyway workflow and that the parameter is syntactically correct.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Minor Rules Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.check.minorRules=L002\n```\n\n----------------------------------------\n\nTITLE: Configuring repeatableTypes in TOML for Flyway Desktop\nDESCRIPTION: This snippet demonstrates how to configure the `repeatableTypes` setting within a TOML configuration file for Flyway Desktop. This setting allows you to specify which object types should have repeatable migrations generated. Note that while the example uses `repeatableTypes = true`, the intention of this property is to allow setting the specific object types such as 'Function', 'Package', 'PackageBody', etc.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Desktop Namespace/Flyway Desktop Generate Namespace/Flyway Desktop Generate Repeatable Types Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[flywayDesktop.generate]\nrepeatableTypes = true\n```\n\n----------------------------------------\n\nTITLE: docker-compose YAML configuration for Flyway and SQL Server\nDESCRIPTION: This YAML configuration sets up two services: a SQL Server database and a Flyway container to run 'check' commands with specified database URLs, credentials, and volume mounts, enabling automated migration checks.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Using Flyway Check with SQL Server.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  flyway:\n    image: redgate/flyway\n    command: -url=jdbc:sqlserver://db;trustServerCertificate=true -check.buildUrl=jdbc:sqlserver://db;databaseName=check_build_db;trustServerCertificate=true -password=Flyway123 -user=sa -reportFilename=reports/check_report check -changes\n    environment:\n      - FLYWAY_EMAIL=<put your PAT email here>\n      - FLYWAY_TOKEN=<put your PAT here>\n    volumes:\n      - ./sql:/flyway/sql\n      - ./reports:/flyway/reports\n    depends_on:\n      - db\n  db:\n    image: mcr.microsoft.com/mssql/server\n    environment:\n      - ACCEPT_EULA=Y\n      - MSSQL_SA_PASSWORD=Flyway123\n    ports:\n      - 1433:1433\n```\n\n----------------------------------------\n\nTITLE: Configuring Repeatable SQL Prefix in TOML File\nDESCRIPTION: Shows the syntax for setting the `repeatableSqlMigrationPrefix` property within a `[flyway]` section in a TOML configuration file. This provides a persistent way to define the prefix for repeatable SQL migration files. Requires Flyway to be configured to load this TOML file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Repeatable SQL Migration Prefix Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway]\nrepeatableSqlMigrationPrefix = \"A\"\n```\n\n----------------------------------------\n\nTITLE: Setting includeRoleExistenceChecks Option in Flyway TOML Configuration\nDESCRIPTION: This TOML snippet shows how to enable the 'includeRoleExistenceChecks' boolean option within the 'redgateCompare.sqlserver.options.behavior' section. This setting ensures Flyway checks for existing roles in SQL Server before attempting to create them, preventing errors due to duplicate role creation. The default value is 'true'. This option is not configurable outside of TOML files or Flyway Desktop’s SQL Server project settings.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Behavior Options Namespace/SQL Server Include Role Existence Checks Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.behavior]\nincludeRoleExistenceChecks = true\n```\n\n----------------------------------------\n\nTITLE: Configuring check.buildEnvironment in TOML Configuration File\nDESCRIPTION: Shows how to configure the build database environment (`buildEnvironment`) within the `[flyway.check]` section of a TOML configuration file. This sets the build environment to `build1` for operations using this configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Build Environment Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.check]\nbuildEnvironment = \"build1\"\n```\n\n----------------------------------------\n\nTITLE: Flyway Tablespace Configuration with Gradle\nDESCRIPTION: Configures the Flyway tablespace within a Gradle build script.  The `tablespace` property within the `flyway` block specifies the desired tablespace.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Tablespace Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    tablespace = 'xyz'\n}\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Text\nDESCRIPTION: This snippet contains the standard boilerplate text for the Apache License, Version 2.0. It is intended to be included at the beginning of source files, documentation, or other creative works to indicate that the content is licensed under Apache 2.0. Remember to replace the placeholder year(s) and copyright holder name with your own information and enclose the text using the appropriate comment syntax for the specific file format.\nSOURCE: https://github.com/flyway/flyway/blob/main/flyway-commandline/src/main/assembly/LICENSE.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    Copyright © Red Gate Software Ltd 2010-2024\n    \n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n    \n         http://www.apache.org/licenses/LICENSE-2.0\n    \n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreDynamicDataMasking in TOML\nDESCRIPTION: This snippet demonstrates how to set the `ignoreDynamicDataMasking` option to `true` within a Flyway TOML configuration file. The option is nested under the `[redgateCompare.sqlserver.options.ignores]` section. Setting this value to `true` enables the feature described in the documentation.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Dynamic Data Masking Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreDynamicDataMasking = true\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Desktop schemaModel Location in TOML\nDESCRIPTION: This snippet shows how to configure the deprecated 'schemaModel' property under the 'flywayDesktop' namespace in a TOML configuration file. It specifies the location of the shadow schema model as a string path, which by default is 'schema-model'. This setting is resolved relative to the working directory if a relative path is provided. It cannot be configured outside of a TOML file and is replaced by 'schemaModelLocation' in newer configurations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Desktop Namespace/Flyway Desktop Schema Model Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[flywayDesktop]\nschemaModel = \"schema-model\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway with TOML Shell\nDESCRIPTION: This shell snippet provides an example configuration for a Flyway project within a TOML file. It sets up database connection properties like URL, user, and password. It also specifies the location of test migrations. This file can be used to configure the parameters when building Flyway to test and develop.\nSOURCE: https://github.com/flyway/flyway/blob/main/docs/documentation/Community Database Support.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[environments.sample]\n   url = # - the JDBC URL of your development database\n   user = # - the user account\n   password = # - the password to the database\n[flyway]\n   locations = # - to point to an accessible folder where you can put test migrations.\n   environment = \"sample\"\n```\n\n----------------------------------------\n\nTITLE: Flyway Diff Command-line Usage\nDESCRIPTION: Demonstrates how to use the `buildCherryPick` option with the Flyway command-line tool. This example specifies a source of 'schemaModel', a target of 'migrations', and indicates that the '001' migration should be cherry-picked during the diff process.  This is used to control which migrations are included in the build environment when comparing a schema model to a migration set.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DIff Namespace/Flyway Diff Build Cherry Pick Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway diff -source=\"schemaModel\" -target=\"migrations\" -buildCherryPick=\"001\"\n```\n\n----------------------------------------\n\nTITLE: Configuring transportClrDataTypesAsBinary in TOML\nDESCRIPTION: This TOML snippet demonstrates how to enable the 'transportClrDataTypesAsBinary' option within the '[redgateCompare.sqlserver.data.options.deployment]' section of a Flyway configuration file. Setting this boolean parameter to 'true' instructs Redgate Compare to use the binary representation of CLR data types in deployment scripts generated for SQL Server, instead of the default string representation.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Data Deployment Options Namespace/SQL Server Data Transport CLR Data Types As Binary Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.data.options.deployment]\ntransportClrDataTypesAsBinary = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway User in Maven Plugin Configuration\nDESCRIPTION: This XML snippet illustrates how to specify the database user for Flyway inside the Maven plugin's configuration section. The '<user>myuser</user>' element sets the username for connecting to the database during Maven-driven Flyway executions. It requires integration of the Flyway Maven plugin within the project's POM.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment User Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <user>myuser</user>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Validating No Differences After Baseline Migration with Flyway CLI (Shell)\nDESCRIPTION: This Flyway 'diff' command sequence checks that applying the baseline migration to the shadow environment leaves no unaccounted schema differences. It confirms the target schema is in sync by displaying 'No differences found', verifying the baseline script accurately reflects production. Requires: up-to-date migrations folder, shadow environment, baseline migration applied. Outputs: diff artifact and confirmation of schema parity.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Flyway Desktop migrations workflow with Flyway CLI.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ flyway diff \"-diff.source=prod\" \"-diff.target=migrations\" \"-diff.buildEnvironment=shadow\"\n\nFlyway Enterprise Edition {{ site.flywayVersion }} by Redgate\nLicensed to red-gate.com (license ID 1174ed6b-b10e-41bd-9a1b-285ddc3239c7)\n\nSee release notes here: https://rd.gt/416ObMi\n...\nSuccessfully applied 1 migration to schema [dbo], now at version v001.20241209164727 (execution time 00:02.648s)\ndiff artifact generated: C:\\Users\\Flyway\\AppData\\Local\\Temp\\flyway.artifact.diff\n+-----------------------------+--------+-------------+--------+------+\n| Id                          | Change | Object Type | Schema | Name |\n+-----------------------------+--------+-------------+--------+------+\n| No differences found                                               |\n+-----------------------------+--------+-------------+--------+------+\n```\n\n----------------------------------------\n\nTITLE: Setting outputQueryResults in Gradle Build Script\nDESCRIPTION: This code demonstrates setting the 'outputQueryResults' option to false within a Gradle build script, influencing Flyway's behavior during build and deployment processes.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Output Query Results Setting.md#_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    outputQueryResults = false\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway MongoDB Dependency - Redgate\nDESCRIPTION: This XML snippet demonstrates how to add the Flyway MongoDB dependency to a Maven project when using the Redgate distribution of Flyway. It specifies the groupId, artifactId, and scope required for integration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/MongoDB.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.redgate.flyway</groupId>\n    <artifactId>flyway-database-mongodb</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlMigrationSeparator via Environment Variable\nDESCRIPTION: Defines the sqlMigrationSeparator environment variable 'FLYWAY_SQL_MIGRATION_SEPARATOR' with value '-'. This allows configuration through environment variables, useful in various deployment environments.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Migration Separator Setting.md#_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nFLYWAY_SQL_MIGRATION_SEPARATOR=-\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway JDBC Driver Programmatically in Java API\nDESCRIPTION: Demonstrates how to set the JDBC driver class programmatically using Flyway's Java API. The 'driver' method is called on the Flyway configuration builder to specify the class name before loading the Flyway instance. This requires the Flyway library and the driver JAR to be in the application's classpath.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Driver Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .driver(\"com.microsoft.sqlserver.jdbc.SQLServerDriver\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Setting detectEncoding in Maven\nDESCRIPTION: This snippet demonstrates how to configure the `detectEncoding` option to `true` within a Maven `pom.xml` file for Flyway. This allows for automatic detection of file encoding during Maven builds.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Detect Encoding Setting.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n  <detectEncoding>true</detectEncoding>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Defining Flyway Migration Tags in TOML\nDESCRIPTION: This snippet shows how to define tags for specific Flyway migration versions within the `[flyway.tags.definitions]` section of a TOML configuration file. It maps migration versions (e.g., \"0.1\", \"0.2\", \"0.3\") to arrays of associated tags (e.g., \"tagA\", \"tagB\", \"tagC\"). This definition is required before using `deploymentOrder` to leverage these tags.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Tags Namespace/Flyway Tags Deployment Order Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway.tags.definitions]\n\"0.1\" = [\"tagA\", \"tagC\"]\n\"0.2\" = [\"tagB\"]\n\"0.3\" = [\"tagB\", \"tagC\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring flyway.add.timestamp via Command-line in Bash\nDESCRIPTION: Demonstrates how to set the 'flyway.add.timestamp' property directly as a command-line argument for a specific 'flyway add' operation. This method overrides any configuration file settings for this execution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Add Namespace/Flyway Add Timestamp Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway add -timestamp=\"auto\"\n```\n\n----------------------------------------\n\nTITLE: Flyway Tablespace Configuration with Maven\nDESCRIPTION: Configures the Flyway tablespace within a Maven pom.xml file.  The `<tablespace>` tag within the `<configuration>` section of the Flyway plugin sets the desired tablespace.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Tablespace Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <tablespace>xyz</tablespace>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Migration Tags in Flyway (TOML)\nDESCRIPTION: This TOML configuration snippet demonstrates how to associate specific tags (`tagA`, `tagB`, `tagC`) with versioned migrations (`1.0.0`, `1.0.1`) using the `flyway.tags.definitions` table. Migrations not listed here, or those without explicit tags, automatically receive the `untagged` tag. This configuration enables selective execution or ordering based on tags.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Tags Namespace/Flyway Tags Definitions Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.tags.definitions]\n\"1.0.0\" = [\"tagA\", \"tagB\"]\n\"1.0.1\" = [\"tagA\", \"tagC\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Vault Secrets Using TOML Configuration File\nDESCRIPTION: This snippet shows how to configure Vault secrets for Flyway in a TOML configuration file under the [flyway.vault] section. It specifies an array of Vault secret paths that Flyway uses to read secure configuration parameters. The paths reflect the Vault secret engine style (V1 or V2). This configuration is parsed by Flyway at runtime, and multiple paths allow fallback or overriding settings.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Vault Namespace/Flyway Vault Secrets Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.vault]\nsecrets = [\"kv/data/flyway/flywayConfig1\", \"kv/flyway/flywayConfig2\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreCommentsInPlSqlBlocks Option in TOML Configuration File\nDESCRIPTION: Example of how to set the ignoreCommentsInPlSqlBlocks option to true in a TOML configuration file. This setting tells Flyway to ignore comments in PL/SQL blocks when comparing Oracle databases.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Ignore Options Namespace/Oracle Ignore Comments In PlSql Blocks Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.ignores]\nignoreCommentsInPlSqlBlocks = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Locations via Command-Line in Flyway (Powershell)\nDESCRIPTION: This example demonstrates how to specify migration locations directly using the Flyway command-line interface in Powershell. The -locations parameter sets a filesystem directory, which Flyway scans for migration files. The given directory path can be relative to the working directory; only SQL migrations are supported for filesystem locations. Requires the Flyway CLI installed and the directory to exist.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Locations Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -locations=\"filesystem:./sql\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Secrets in Maven Build - Flyway - XML\nDESCRIPTION: This XML snippet illustrates how to configure Dapr secrets for Flyway within a Maven build file (pom.xml). The <daprSecrets> element contains a comma-separated list of secret names within the pluginConfiguration section. Use this when integrating Flyway into a Maven-managed build process. Requires Flyway Maven plugin and secrets must be present in the Dapr secret store.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Dapr Namespace/Flyway Dapr Secrets Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <pluginConfiguration>\n        <daprSecrets>secret1,secret2</daprSecrets>\n    </pluginConfiguration>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Vault Secrets in Gradle Build Script Using Groovy\nDESCRIPTION: This snippet demonstrates how to configure Vault secrets in a Gradle build script using Groovy syntax. It assigns the vaultSecrets property within the flyway pluginConfiguration map as a list of Vault secret paths. This approach enables integration of Flyway Vault configuration management as part of the build process, allowing secret configurations to be centralized and version controlled.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Vault Namespace/Flyway Vault Secrets Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    pluginConfiguration = [\n      vaultSecrets: ['kv/data/flyway/flywayConfig1', 'kv/flyway/flywayConfig2']\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring scriptPlaceholderPrefix in TOML File\nDESCRIPTION: Configures the Flyway script placeholder prefix to \"P__\" within a TOML configuration file (`flyway.toml` or specified via -configFiles). This setting applies when Flyway loads this configuration file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Script Placeholder Prefix Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nscriptPlaceholderPrefix = \"P__\"\n```\n\n----------------------------------------\n\nTITLE: Defining Flyway encoding in Properties configuration file\nDESCRIPTION: Illustrates how to specify the encoding in a properties format configuration file. This setting will be recognized by Flyway when loading configurations, ensuring migrations use the desired encoding.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Encoding Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.encoding=UTF-16\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreWithEncryption in Flyway TOML\nDESCRIPTION: This TOML snippet demonstrates how to enable the `ignoreWithEncryption` option within the `redgateCompare.sqlserver.options.ignores` section of a Flyway configuration file. Setting this to `true` instructs Redgate Compare to ignore `WITH ENCRYPTION` clauses on triggers, views, stored procedures, and functions during SQL Server schema comparisons. This setting overrides the 'Add WITH ENCRYPTION' option if both are configured.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore With Encryption Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreWithEncryption = true\n```\n\n----------------------------------------\n\nTITLE: Using undoFilename with Flyway Command-line\nDESCRIPTION: Command-line example showing how to specify an undo filename when generating migrations with Flyway. This parameter allows users to define a custom filename for the generated undo migration script.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Undo Filename Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway generate -undoFilename=U001__dropTable.sql\n```\n\n----------------------------------------\n\nTITLE: Maven configuration for validateMigrationNaming\nDESCRIPTION: Specifies the validateMigrationNaming parameter in Maven's Flyway plugin configuration. Setting it to true enables file name validation for migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Validate Migration Naming Setting.md#_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    <validateMigrationNaming>true</validateMigrationNaming>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Invalid Mixed Namespacing Due to Backwards Compatibility Rules in PowerShell\nDESCRIPTION: Illustrates why mixing full and scoped namespacing fails due to Flyway's backwards compatibility rules in PowerShell. Because '-init.databaseType' uses an explicit namespace, scoped namespacing is automatically disabled for the command. Consequently, '-projectName' is interpreted as the global 'flyway.projectName', not the intended 'flyway.init.projectName'.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Command-line.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nflyway init -init.databaseType=sqlserver -projectName=myProject \n```\n\n----------------------------------------\n\nTITLE: Adding Flyway Firebird Dependency with Maven (Open Source Version)\nDESCRIPTION: Maven dependency configuration for adding Firebird database support to a Java project using the open source version of Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Firebird.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-firebird</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Include System Permissions in Flyway Oracle Comparison Using TOML\nDESCRIPTION: This TOML snippet demonstrates how to enable the includeSystemPermissions boolean option in the Flyway configuration for Oracle project comparisons. This setting controls whether system permissions are included at the top of generated comparison scripts. It requires modification of the TOML config file under the section [redgateCompare.oracle.options.behavior]. The default value is false, disabling the inclusion of system permissions.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Behavior Options Namespace/Oracle Include System Permissions Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.behavior]\nincludeSystemPermissions = true\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Config File Encoding via Command Line (powershell)\nDESCRIPTION: This snippet demonstrates setting the `configFileEncoding` option when running Flyway from the command line.  The command uses the `-configFileEncoding` parameter to specify the desired encoding (in this case, UTF-16). The `info` command is executed to display Flyway information, and the encoding is applied to configuration file loading.  This requires Flyway to be installed and accessible from the command line.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Command-line Parameters/Config File Encoding Parameter.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -configFileEncoding=\"UTF-16\" info\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching Rules for ignoreMigrationPatterns in Flyway\nDESCRIPTION: This explains the syntax and semantics of patterns used to ignore specific migrations during Flyway operations. Patterns are composed of type and status components with wildcards, enabling flexible specification of migrations to ignore, such as missing or pending migrations of certain types.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Ignore Migration Patterns Setting.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPatterns follow the format `type:status` with `*` wildcards, where type can be `repeatable`, `versioned`, or `*`, and status can be `Missing`, `Pending`, `Ignored`, `Future`, or `*`. Multiple patterns are comma-separated, allowing broad or specific matching such as `*:missing` or `repeatable:*`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Working Directory via Flyway Java API - Java\nDESCRIPTION: This Java snippet configures the working directory for the Flyway migration API, enabling programmatic specification of the base directory for resolving relative paths. The 'workingDirectory' method defines the path, and the 'load' method initializes the Flyway instance. Ensure Flyway dependencies are included in your Java project; input is the directory name as a string, and no output is produced upon configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Command-line Parameters/Working Directory Parameter.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n        .workingDirectory(\"my_project\")\n        .load()\n```\n\n----------------------------------------\n\nTITLE: Configuring Dapr Sidecar URL in Flyway TOML Configuration File\nDESCRIPTION: This snippet shows how to configure the Dapr sidecar REST API URL within a Flyway TOML configuration file under the development environment. The 'url' key under 'environments.development.resolvers.dapr' specifies the endpoint for retrieving secrets from Dapr. This configuration ensures Flyway resolves secrets through the Dapr sidecar during migration operations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Dapr Resolver/Dapr Resolver URL Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development.resolvers.dapr]\nurl = \"http://localhost:3500/v1.0/secrets/my-secrets-store\"\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Separator in Properties File\nDESCRIPTION: Illustrates how to define the placeholder separator in a standard Java properties configuration file for Flyway. The property `flyway.placeholderSeparator` is set to the desired character, '_'.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Separator Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.placeholderSeparator=_\n```\n\n----------------------------------------\n\nTITLE: Setting detectRenamedColumns Option in Flyway Oracle Comparison - TOML\nDESCRIPTION: This snippet demonstrates how to enable the detectRenamedColumns boolean option in the Flyway Oracle schema comparison configuration using a TOML file. This option attempts to identify renamed columns by matching column names, positions, and datatypes according to predefined heuristics. The setting defaults to true and must be set in the TOML file under the appropriate section for the Oracle comparison behavior options.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Behavior Options Namespace/Oracle Detect Renamed Columns Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.behavior]detectRenamedColumns = true\n```\n\n----------------------------------------\n\nTITLE: Setting Baseline Description via Flyway API (Java)\nDESCRIPTION: This Java code snippet shows how to set the `baselineDescription` using the Flyway API. It calls `Flyway.configure()` to create a Flyway configuration, then uses `.baselineDescription(\"Baseline\")` to set the description before finally loading the configuration.  It requires the Flyway library to be included in your project. The `baselineDescription` parameter takes a string as input representing the description.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Baseline Description Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .baselineDescription(\"Baseline\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Setting Config File Encoding for Flyway Maven Plugin\nDESCRIPTION: Command-line example showing how to specify an alternative encoding for Flyway configuration files using the flyway.configFileEncoding system property. By default, Flyway uses UTF-8.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Maven Goal.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n> mvn -Dflyway.configFileEncoding=ISO-8859-1 flyway:migrate\n```\n\n----------------------------------------\n\nTITLE: Setting LocalDB Instance Name in Flyway Environment Resolvers Using TOML\nDESCRIPTION: This TOML snippet shows how to statically configure the SQL Server Local DB instance name for Flyway's localdb resolver within the 'development' environment section in the TOML configuration file. The 'instanceName' property is set to 'MSSQLLocalDB', allowing Flyway to recognize and use this particular LocalDB instance when applied to migrations in that environment.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Local DB Resolver/Local DB Resolver Instance Name Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development.resolvers.localdb]\ninstanceName = \"MSSQLLocalDB\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway to Ignore Length Semantics in TOML\nDESCRIPTION: This TOML configuration snippet sets the `ignoreLengthSemantics` option to `true`.  This instructs Flyway to ignore differences in column length semantics (CHAR vs. BYTE) when comparing Oracle schemas.  This is crucial when dealing with variations in the `NLS_LENGTH_SEMANTICS` server setting or column-specific specifications. The configuration is used to define behavior for Flyway when comparing schema differences.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Ignore Options Namespace/Oracle Ignore Length Semantics Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.ignores]\nignoreLengthSemantics = true\n```\n\n----------------------------------------\n\nTITLE: Executing Flyway Diff Command with Build Environment - Bash\nDESCRIPTION: This Bash snippet shows how to run the Flyway 'diff' command from the command line, specifying 'schemaModel' as the source, 'migrations' as the target, and setting the 'buildEnvironment' to 'shadow'. It requires Flyway installed and the relevant environments defined. It demonstrates how to pass the build environment parameter directly as a command-line argument.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DIff Namespace/Flyway Diff Build Environment Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway diff -source=\"schemaModel\" -target=\"migrations\" -buildEnvironment=\"shadow\"\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Config File Encoding in Gradle (groovy)\nDESCRIPTION: This snippet shows how to configure the file encoding within a Gradle build script.  It sets the `configFileEncoding` property within the `flyway` configuration block to 'UTF-16'. This configuration is specific to a Gradle project and applies when running Flyway tasks within the project. Gradle and the Flyway plugin are required to be correctly set up.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Command-line Parameters/Config File Encoding Parameter.md#_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    configFileEncoding = 'UTF-16'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway via Command Line (TOML Files)\nDESCRIPTION: This snippet demonstrates how to configure Flyway to load configuration files using the `-configFiles` command-line parameter. It specifies the path to the configuration files to be loaded.  The file paths are relative to the working directory. Multiple files can be specified, separated by commas.  The output is Flyway information based on provided configurations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Command-line Parameters/Config Files Parameter.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -configFiles=\"my.toml\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlMigrationSeparator in Properties File\nDESCRIPTION: Sets the sqlMigrationSeparator value in a Properties configuration file for Flyway, using the key 'flyway.sqlMigrationSeparator' with value '-'. Enables customization of filename parsing behavior during migration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Migration Separator Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.sqlMigrationSeparator=-\n```\n\n----------------------------------------\n\nTITLE: Configuring check.buildEnvironment in Properties Configuration File\nDESCRIPTION: Illustrates setting the build database environment using the `flyway.check.buildEnvironment` property in a standard Flyway properties configuration file. This example assigns `build1` as the value, which will be used during `flyway check` operations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Build Environment Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.check.buildEnvironment=\"build1\"\n```\n\n----------------------------------------\n\nTITLE: Setting oracleSqlPlusWarn via Command-line (PowerShell)\nDESCRIPTION: This snippet shows how to enable the `oracleSqlPlusWarn` option using the Flyway command-line interface with PowerShell. It sets the property to `true`, causing Flyway to issue a warning instead of an error for unsupported Oracle SQL*Plus statements.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle SQLPlus Warn Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -oracle.sqlplusWarn=\"true\" info\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway Database Type Dependency to Build Script\nDESCRIPTION: Adds a specific Flyway database type dependency (e.g., `flyway-mysql`) to the `buildscript` dependencies block. This is sometimes required for the Gradle plugin itself to correctly handle specific database connections by putting the necessary driver on the build classpath.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Gradle Task.md#_snippet_6\n\nLANGUAGE: Groovy\nCODE:\n```\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath \"org.flywaydb:flyway-mysql:{{ site.flywayVersion }} \"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flyway Tablespace Configuration using Java API\nDESCRIPTION: Configures the Flyway tablespace programmatically using the Java API. The `tablespace()` method sets the tablespace to use for the schema history table.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Tablespace Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .tablespace(\"xyz\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Final Status After Reapplying Repeatable Migration (CLI - Console)\nDESCRIPTION: Checks the Flyway migration status after reapplying the modified repeatable migration. The output shows the new successful application and marks the previous run as 'Superseded', illustrating the history of repeatable migration applications.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Repeatable Migrations.md#_snippet_8\n\nLANGUAGE: Console\nCODE:\n```\nflyway info\n```\n\n----------------------------------------\n\nTITLE: Setting Diff Target in Flyway Configuration File - TOML\nDESCRIPTION: Defines the 'target' parameter under the '[flyway.diff]' section in a TOML configuration file for Flyway. The target is set to 'schemaModel', indicating that the diff operation should use the referenced schema model for comparison. Requires a valid Flyway TOML config structure and is typically not set unless configuration-file-based automation is required.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DIff Namespace/Flyway Diff Target Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.diff]\ntarget = \"schemaModel\"\n```\n\n----------------------------------------\n\nTITLE: Setting Add Location via Command-line (Bash)\nDESCRIPTION: This snippet demonstrates how to specify the target directory for a new migration file when using the `flyway add` command directly on the command line. The `-location` flag is used, followed by the desired path (e.g., \"migrations\"), which is typically resolved relative to the working directory.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Add Namespace/Flyway Add Location Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway add -location=\"migrations\"\n```\n\n----------------------------------------\n\nTITLE: Configuring writeAssembliesAsDlls Option in TOML Configuration File\nDESCRIPTION: This snippet shows how to configure Flyway to write CLR Assembly objects as DLL files instead of SQL scripts with hex blobs. This setting must be configured in a TOML configuration file and can also be set via the comparison options in SQL Server projects in Flyway Desktop.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Behavior Options Namespace/SQL Server Write Assemblies As Dlls Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.behavior]\nwriteAssembliesAsDlls = true\n```\n\n----------------------------------------\n\nTITLE: Setting ignoreSequenceMaxValue in TOML\nDESCRIPTION: This snippet shows how to configure the `ignoreSequenceMaxValue` option in a Flyway TOML configuration file. Setting it to `true` causes Flyway to ignore the `MAXVALUE` property of sequences when comparing Oracle databases using Redgate Compare.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Ignore Options Namespace/Oracle Ignore Sequence MAXVALUE Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.oracle.options.ignores]\nignoreSequenceMaxValue = true\n```\n\n----------------------------------------\n\nTITLE: Enabling Index Ignoring in Flyway TOML for SQL Server\nDESCRIPTION: This TOML configuration snippet demonstrates how to set the `ignoreIndexes` option to `true` within the `[redgateCompare.sqlserver.options.ignores]` table. This instructs Flyway, when using Redgate Compare for SQL Server, to ignore differences in indexes, unique constraints, and primary keys during schema comparisons and deployments, except under specific circumstances for memory-optimized tables or script folder targets.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Indexes Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreIndexes = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Maven Plugin Using settings.xml\nDESCRIPTION: XML example showing how to configure database credentials for Flyway in Maven's settings.xml file. By default, Flyway looks for a server with ID 'flyway-db', but this can be customized with the 'serverId' property.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Maven Goal.md#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<settings>\n    <servers>\n        <server>\n            <!-- By default Flyway will look for the server with the id 'flyway-db' -->\n            <!-- This can be customized by configuring the 'serverId' property -->\n            <id>flyway-db</id>\n            <username>myUser</username>\n            <password>mySecretPwd</password>\n        </server>\n    </servers>\n</settings>\n```\n\n----------------------------------------\n\nTITLE: JSON output format example (Flyway)\nDESCRIPTION: Illustrates the JSON output format returned by the Flyway migrate command.  This output contains information about the migrations executed, their details, the Flyway version, database information, and any potential warnings.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Migrate.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"initialSchemaVersion\": null,\n  \"targetSchemaVersion\": \"1\",\n  \"schemaName\": \"public\",\n  \"migrations\": [\n    {\n      \"category\": \"Versioned\",\n      \"version\": \"1\",\n      \"description\": \"first\",\n      \"type\": \"SQL\",\n      \"filepath\": \"C:\\\\flyway\\\\sql\\\\V1__first.sql\",\n      \"executionTime\": 0\n    },\n    {\n      \"category\": \"Repeatable\",\n      \"version\": \"\",\n      \"description\": \"repeatable\",\n      \"type\": \"SQL\",\n      \"filepath\": \"C:\\\\flyway\\\\sql\\\\R__repeatable.sql\",\n      \"executionTime\": 0\n    }\n  ],\n  \"migrationsExecuted\": 2,\n  \"flywayVersion\": \"{{ site.flywayVersion }}\",\n  \"database\": \"testdb\",\n  \"warnings\": [],\n  \"operation\": \"migrate\"\n}\n```\n\n----------------------------------------\n\nTITLE: Set executeInTransaction via Environment Variable\nDESCRIPTION: Sets the `executeInTransaction` parameter to `false` using an environment variable. This instructs Flyway not to use transactions during SQL script execution.  The environment variable `FLYWAY_EXECUTE_IN_TRANSACTION` is used to store this setting.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Execute In Transaction Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_EXECUTE_IN_TRANSACTION=false\n```\n\n----------------------------------------\n\nTITLE: Setting MySQL Compare Option: ignoreNewlinesInTextObjects in TOML\nDESCRIPTION: This TOML snippet demonstrates how to set the `redgateCompare.mysql.options.ignores.ignoreNewlinesInTextObjects` option to 'all' within a Flyway configuration file. This setting controls whether newline characters are ignored when comparing text objects in MySQL databases. The configuration must be placed under the `[redgateCompare.mysql.options.ignores]` section.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare MySQL Namespace/MySQL Ignore Options Namespace/MySQL Ignore Newlines In Text Objects Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.mysql.options.ignores]\nignoreNewlinesInTextObjects = \"all\"\n```\n\n----------------------------------------\n\nTITLE: Inserting a Document with JSON Migration - MongoDB - JSON\nDESCRIPTION: Defines a MongoDB insert operation in JSON format suitable for Flyway migration files. This instructs MongoDB to insert a document with fields 'name' and 'age' into the 'user' collection. The file should be executed by Flyway's Native Connectors in JSON mode, with no explicit prerequisites beyond MongoDB and the Flyway setup.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Using Native Connectors to connect to MongoDB.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"insert\": \"user\",\n  \"documents\": [ {\"name\":  \"Ada Lovelace\", \"age\":  205} ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Flyway Repair JSON Output Structure - JSON\nDESCRIPTION: This JSON snippet demonstrates the output format produced by the Flyway repair operation. It includes arrays for repair actions taken, migrations affected, the Flyway version, associated database, any warnings, and the operation name. Users can parse this output programmatically for integration, logging, or automated processing; the schema expects specific fields and object structures.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Repair.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"repairActions\": [\n    \"ALIGNED APPLIED MIGRATION CHECKSUMS\"\n  ],\n  \"migrationsRemoved\": [],\n  \"migrationsDeleted\": [],\n  \"migrationsAligned\": [\n    {\n      \"version\": \"1\",\n      \"description\": \"first\",\n      \"filepath\": \"C:\\\\flyway\\\\sql\\\\V1__first.sql\"\n    }\n  ],\n  \"flywayVersion\": \"{{ site.flywayVersion }}\",\n  \"database\": \"testdb\",\n  \"warnings\": [],\n  \"operation\": \"repair\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Generate Version - TOML\nDESCRIPTION: This TOML snippet shows how to configure the migration version within a TOML configuration file for Flyway's generation functionality. The `flyway.generate` section contains a `version` key, which sets the desired version string (e.g., \"001\") for the generated migration file.  This config file allows to specify the migration version via a file, instead of by using cli parameters.\n\nDependencies: A valid Flyway configuration file (TOML format).\nKey Parameters: `version`: The version string (e.g., \"001\").\nExpected Input: A TOML configuration file containing the `flyway.generate` section. Expected output: Flyway CLI will be executed using the configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Version Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.generate]\nversion = \"001\"\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Stream Option in Gradle\nDESCRIPTION: This Groovy snippet shows how to configure Flyway's `stream` option within a Gradle build file. The `stream` property is set to `true` inside the `flyway` block. Requires a Gradle project with the Flyway plugin applied. The result is Flyway streaming SQL migrations during the database migration process.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Stream Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    stream = true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Ignore Square Brackets Option (TOML)\nDESCRIPTION: This snippet provides the TOML configuration syntax to enable the `ignoreSquareBracketsInObjectNames` setting. It places the boolean option `ignoreSquareBracketsInObjectNames` under the `[redgateCompare.sqlserver.options.ignores]` section, setting its value to `true`. This configures Flyway's SQL Server comparison to ignore square brackets around object names during comparison when the option is set.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Square Brackets In Object Names Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreSquareBracketsInObjectNames = true\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLID via Java API\nDESCRIPTION: This Java snippet shows how to configure the SQLID using the Flyway API. It retrieves an instance of `DB2ZConfigurationExtension` and sets the `sqlId` to `example_group`. Requires the appropriate Flyway DB2z plugin and configuration to be in place. The SQLID determines the database user for object creation and permissions.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DB2 zOS Namespace/Flyway Db2 zOS SQL ID Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nDB2ZConfigurationExtension dB2ZConfigurationExtension = configuration.getPluginRegister().getPlugin(DB2ZConfigurationExtension.class);\ndB2ZConfigurationExtension.setSqlId(\"example_group\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway TOML to Ignore Comments\nDESCRIPTION: This TOML configuration snippet sets the `ignoreComments` property to `true`.  This instructs Flyway to disregard comments when comparing SQL Server objects.  The configuration must be placed in a TOML file, and is utilized by Flyway during state-based deployment operations.  No additional parameters are required for this configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Comments Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreComments = true\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreWithElementOrder Option in TOML for Redgate SQL Server\nDESCRIPTION: This TOML snippet sets the 'ignoreWithElementOrder' Boolean option under 'redgateCompare.sqlserver.options.ignores'. It instructs Flyway and Redgate comparison tools to ignore the order of multiple WITH elements (e.g., encryption, schema binding) when comparing SQL Server database objects like stored procedures, functions, and triggers. This setting defaults to true and impacts schema comparison and deployment behavior. It must be configured exclusively via a TOML configuration file or through Flyway Desktop project settings.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore With Element Order Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreWithElementOrder = true\n```\n\n----------------------------------------\n\nTITLE: Initializing Flyway Project - Shell\nDESCRIPTION: This snippet demonstrates initializing a new Flyway project using `flyway-dev` and the equivalent using the `flyway` CLI. It focuses on creating a new SQL Server project. It shows how to specify project name, database type and path. Requires Flyway CLI version 11.0.0 or later and a Teams/Enterprise license.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Migrating from flyway-dev to flyway CLI.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nflyway-dev init --name=SqlServerProject --path=C:\\Users\\redgate\\Documents\\SqlServerProject --database-type=SqlServer --i-agree-to-the-eula\n```\n\n----------------------------------------\n\nTITLE: Configuring 'useMaxPrecisionForFloatComparison' in TOML for Flyway\nDESCRIPTION: This snippet demonstrates setting the 'useMaxPrecisionForFloatComparison' option to true within a TOML configuration file to enable comparison of floating point values up to 17 digits of precision in Flyway SQL Server projects. The setting is located under the 'redgateCompare.sqlserver.data.options.comparison' section and is used to modify the behavior of data comparison for floating point data types.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Data Comparison Options Namespace/SQL Server Data Use Max Precision For Float Comparison Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.data.options.comparison]\nuseMaxPrecisionForFloatComparison = true\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway PostgreSQL Dependency (Redgate) - Gradle Groovy\nDESCRIPTION: This snippet shows the Groovy syntax for adding the Redgate version of the `flyway-database-postgresql` artifact to a Gradle build script (`build.gradle`). It declares an `implementation` dependency in the `dependencies` block. This is the standard way to include Flyway's CockroachDB support in a Gradle-based Java project using the Redgate distribution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/CockroachDB.md#_snippet_2\n\nLANGUAGE: Groovy\nCODE:\n```\ndependencies {\n    implementation \"com.redgate.flyway:flyway-database-postgresql\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SQL Server Kerberos Login File via Command-Line in PowerShell\nDESCRIPTION: This snippet demonstrates how to specify the path to the SQL Server Kerberos login configuration file using the Flyway command-line interface in a PowerShell environment. This method requires providing the --sqlserver.kerberos.login.file argument with the full path to the SQLJDBCDriver.conf file and is used to enable Kerberos authentication during Flyway operations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Server Namespace/Flyway SQL Server Kerberos Login File Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -sqlserver.kerberos.login.file=\"/path/to/SQLJDBCDriver.conf\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Vault Secrets Parameter - Properties\nDESCRIPTION: Illustrates the flyway.vault.secrets parameter, a comma-separated list of Vault secret paths Flyway should read from. Each entry includes the engine name and secret path. Input: list of Vault secret paths. Output: Flyway loads secret values as configuration parameters. Each secret value should be structured as valid Flyway configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Integrating Vault.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.vault.secrets=secret/data/flyway/testConfiguration\n```\n\n----------------------------------------\n\nTITLE: Checking Initial Flyway Status (Console)\nDESCRIPTION: This command shows the current status of migrations in the database managed by Flyway. It lists versioned migrations, their description, type, installation date, and state (e.g., Success, Pending). It helps verify which migrations have been applied before adding new ones.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Dry Runs.md#_snippet_0\n\nLANGUAGE: Console\nCODE:\n```\nflyway info\n```\n\n----------------------------------------\n\nTITLE: Defining Migration Locations in Maven Plugin for Flyway (XML)\nDESCRIPTION: This XML configuration snippet sets the migration locations for Flyway within the Maven plugin. Inside the <configuration> section, <locations> is set to include one or more <location> elements. Each location specifies a source to be scanned for SQL migrations. This requires the Flyway Maven plugin as a build dependency.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Locations Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n  <locations>\n    <location>filesystem:./sql</location>\n  </locations>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring CREATE OR ALTER for Rerunnable Scripts in TOML Configuration\nDESCRIPTION: This snippet shows how to enable the 'addCreateOrAlterForRerunnableScripts' option in a TOML configuration file. When set to true, CREATE OR ALTER statements will be used for views, stored procedures, functions, extended properties, and triggers.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Behavior Options Namespace/SQL Server Add Create Or Alter For Rerunnable Scripts Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.behavior]\naddCreateOrAlterForRerunnableScripts = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Diff Build Environment in TOML Configuration File\nDESCRIPTION: This TOML snippet illustrates the configuration of the 'buildEnvironment' property within the '[flyway.diff]' section of a Flyway TOML configuration file. It sets the build environment to 'shadow', which must match an environment ID defined in Flyway's environments configuration. This method is useful for persistent configuration rather than command-line specification.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DIff Namespace/Flyway Diff Build Environment Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.diff]\nbuildEnvironment = \"shadow\"\n```\n\n----------------------------------------\n\nTITLE: Setting skipExecutingMigrations via Environment Variable\nDESCRIPTION: This snippet configures the skipExecutingMigrations setting through an environment variable. By exporting or setting FLYWAY_SKIP_EXECUTING_MIGRATIONS to true, Flyway will bypass executing actual migration scripts during migration runs, while still updating the schema history table accordingly. This requires Flyway to be run in an environment that supports environment variables.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Skip Executing Migrations Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_SKIP_EXECUTING_MIGRATIONS=true\n```\n\n----------------------------------------\n\nTITLE: Setting ignorePerformanceIndexes Option in Flyway TOML Configuration\nDESCRIPTION: This snippet demonstrates how to configure the 'ignorePerformanceIndexes' boolean option within a TOML configuration file for Flyway projects targeting SQL Server. It shows how to enable ignoring of performance indexes during schema comparison, excluding primary keys and unique constraints, by setting the value to true. This option must be configured solely in the TOML file and cannot be altered otherwise.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Performance Indexes Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignorePerformanceIndexes = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Project ID in TOML File\nDESCRIPTION: This snippet shows how to set the 'id' property in a TOML configuration file for a Flyway project. The setting 'id = \"abc\"' assigns a specific identifier to the project, though normally this is automatically generated during project initialization or creation via Flyway Desktop. This configuration is used to uniquely identify the project across environments.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Id Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\nid = \"abc\"\n```\n\n----------------------------------------\n\nTITLE: HTML Div for Child Pages with Jekyll Include\nDESCRIPTION: This snippet creates a div element with the id \"children\" and uses a Jekyll include to dynamically insert the content of the `childPages.html` file. This approach allows for modular page structure and content management within the Flyway project's documentation.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"children\">\n{% include childPages.html %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlMigrationSuffixes via Gradle\nDESCRIPTION: This snippet demonstrates how to configure the `sqlMigrationSuffixes` parameter using Gradle. It specifies multiple suffixes for SQL migration files, including `.sql`, `.pkg`, and `.pkb`. The suffixes are comma-separated and assigned to the `sqlMigrationSuffixes` property within the `flyway` block.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Migration Suffixes Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    sqlMigrationSuffixes = '.sql,.pkg,.pkb'\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output of Flyway Clean Operation - JSON\nDESCRIPTION: Provides a sample JSON structure returned by the Flyway 'clean' command detailing the results of the operation. The output contains lists of schemas cleaned and dropped, the Flyway version used, the target database name, any warnings, and the operation name. Useful for integration with automation or monitoring tools consuming Flyway output.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Clean.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemasCleaned\": [\n    \"public\"\n  ],\n  \"schemasDropped\": [],\n  \"flywayVersion\": \"{{ site.flywayVersion }}\",\n  \"database\": \"testdb\",\n  \"warnings\": [],\n  \"operation\": \"clean\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Group in TOML File (TOML)\nDESCRIPTION: Shows how to configure the `flyway.group` parameter within a TOML formatted configuration file. The setting `group = true` is placed under the `[flyway]` section to enable grouping.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Group Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway]\ngroup = true\n```\n\n----------------------------------------\n\nTITLE: Calculating Diff (CLI) - Shell\nDESCRIPTION: This snippet calculates the differences between specified sources using the Flyway CLI `diff` command. It specifies the source and target for comparison.  The id of the environment needs to be used as the arguments. Dependencies include Flyway CLI version 11.0.0 and a Teams/Enterprise license.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Migrating from flyway-dev to flyway CLI.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nflyway diff \\\"-diff.source=development\\\" \\\"-diff.target=schemaModel\\\"\n```\n\n----------------------------------------\n\nTITLE: Setting detectEncoding in Configuration File\nDESCRIPTION: This snippet demonstrates how to set the `detectEncoding` option to `true` within a standard configuration file (e.g., properties file) for Flyway.  This allows Flyway to automatically detect the file encoding for migration files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Detect Encoding Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.detectEncoding=true\n```\n\n----------------------------------------\n\nTITLE: Setting detectEncoding in Gradle\nDESCRIPTION: This snippet shows how to set the `detectEncoding` option to `true` within a Gradle build script for Flyway.  This configuration enables automatic file encoding detection for migrations during Gradle tasks.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Detect Encoding Setting.md#_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    detectEncoding = true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway Firebird Dependency with Maven (Redgate Version)\nDESCRIPTION: Maven dependency configuration for adding Firebird database support to a Java project using the Redgate version of Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Firebird.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.redgate.flyway</groupId>\n    <artifactId>flyway-firebird</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Community DB Support via Environment Variable\nDESCRIPTION: Shows how to configure community database support using the `FLYWAY_COMMUNITY_DB_SUPPORT_DISABLED` environment variable. Setting this to `false` corresponds to `communityDBSupportEnabled=true` (the default). To disable community database support (`communityDBSupportEnabled=false`), set this environment variable to `true`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Community DB Support Enabled Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_COMMUNITY_DB_SUPPORT_DISABLED=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway with Command-line\nDESCRIPTION: This snippet shows how to configure Flyway locations using the command-line interface, specifically targeting the \"test\" environment.  The command-line parameter `-environments.test.flyway.locations=location4`  overrides the default location settings for the test environment to \"location4\". No dependencies are needed for this particular configuration; it directly uses the Flyway command-line interface.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Flyway Namespace.md#_snippet_0\n\nLANGUAGE: command-line\nCODE:\n```\n-environments.test.flyway.locations=location4\n```\n\n----------------------------------------\n\nTITLE: Creating New Table Migration (SQL)\nDESCRIPTION: This SQL script defines a new table named COUPLE with columns for ID, PERSON1, and PERSON2, including foreign key references to the PERSON table. This script represents a new database migration (V3) that will be subject to a dry run.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Dry Runs.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ncreate table COUPLE (\n    ID int not null,\n    PERSON1 int not null references PERSON(ID), \n    PERSON2 int not null references PERSON(ID) \n);\n```\n\n----------------------------------------\n\nTITLE: Command-line usage example for Flyway 'noneOf' tag filter in PowerShell\nDESCRIPTION: This snippet demonstrates how to run Flyway with the '-tags.noneOf' parameter via PowerShell command-line to filter migrations that do not contain specific tags. It shows the command syntax and expected behavior when filtering out tagged migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Tags Namespace/Flyway Tags None Of Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway \"-tags.noneOf=tagA,tagB,tagC\" info\n```\n\n----------------------------------------\n\nTITLE: JDBC URL for Connecting to a Named SQL Server Instance\nDESCRIPTION: This code snippet shows the required JDBC connection string format to connect Flyway to a named instance of SQL Server. It specifies the server, instance name, and database name parameters without a port number. This format is necessary when connecting to non-default SQL Server instances.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/SQL Server Database.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\njdbc:sqlserver://<server_name>;instanceName=<instance_name>;databaseName=<database_name>\n```\n\n----------------------------------------\n\nTITLE: Setting SQLID via Command-line - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to configure the `db2z.sqlId` parameter using the Flyway command-line interface. The `db2z.sqlId` parameter specifies the user ID for database object creation.  The command uses `info` to print information, which can be executed by using the appropriate flyway executable.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DB2 zOS Namespace/Flyway Db2 zOS SQL ID Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -db2z.sqlId=\"example_group\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreChangeTracking in TOML\nDESCRIPTION: This snippet demonstrates how to configure the `ignoreChangeTracking` option within a TOML configuration file for Redgate Compare in Flyway.  Setting this to `true` will ignore change tracking when comparing and synchronizing SQL Server databases. It is part of the `redgateCompare.sqlserver.options.ignores` section.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Change Tracking Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreChangeTracking = true\n```\n\n----------------------------------------\n\nTITLE: Configuring disableAutoColumnMapping in TOML Configuration File\nDESCRIPTION: This snippet shows how to disable automatic column mapping for SQL Server comparisons in Flyway using a TOML configuration file. Setting this to true prevents similarly named columns in mapped tables from being automatically mapped together.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Behavior Options Namespace/SQL Server Disable Auto Column Mapping Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.behavior]\ndisableAutoColumnMapping = true\n```\n\n----------------------------------------\n\nTITLE: Flyway Diff TOML Configuration\nDESCRIPTION: Shows how to specify the `buildCherryPick` option in a TOML configuration file for Flyway.  It configures a list containing the string '001' to be cherry-picked during the build process. This is used in conjunction with the diff command to control which migrations are incorporated in the build environment during comparison.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DIff Namespace/Flyway Diff Build Cherry Pick Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.diff]\nbuildCherryPick = [ \"001\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Environment in TOML\nDESCRIPTION: This snippet shows how to define and select an environment in a TOML configuration file.  It defines an environment named 'env1' with specific database connection details and then sets the global 'environment' property to 'env1', instructing Flyway to use that environment.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Environment Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.env1]\nurl = \"jdbc:h2:mem:flyway_db\"\nuser = \"myuser\"\npassword = \"mysecretpassword\"\n\n[flyway]\nenvironment = \"env1\"\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway Firebird Dependency with Gradle (Redgate Version)\nDESCRIPTION: Gradle dependency configuration for adding Firebird database support to a Java project using the Redgate version of Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Firebird.md#_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation \"com.redgate.flyway:flyway-firebird\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring skipExecutingMigrations Using Flyway Java API\nDESCRIPTION: This Java code snippet demonstrates how to configure Flyway programmatically to skip executing migrations by setting skipExecutingMigrations to true during Flyway configuration. The snippet requires Flyway's Java API dependency and shows method chaining to set the configuration and load the Flyway instance with the desired option.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Skip Executing Migrations Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .skipExecutingMigrations(true)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlMigrationSuffixes via PowerShell\nDESCRIPTION: This snippet demonstrates how to configure the `sqlMigrationSuffixes` parameter using the Flyway command-line interface. It specifies multiple suffixes for SQL migration files, including `.sql`, `.pkg`, and `.pkb`. The `info` command is then executed to apply the configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Migration Suffixes Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -sqlMigrationSuffixes=\".sql,.pkg,.pkb\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring useCaseSensitiveObjectDefinition in TOML\nDESCRIPTION: This snippet demonstrates how to enable case-sensitive object definition comparisons by setting `useCaseSensitiveObjectDefinition` to `true` within the `redgateCompare.sqlserver.options.behavior` section of a TOML configuration file. This setting ensures that object names are compared case-sensitively during schema comparisons.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Behavior Options Namespace/SQL Server Use Case Sensitive Object Definition Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.options.behavior]\nuseCaseSensitiveObjectDefinition = true\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Clone URL via Command-Line - Bash\nDESCRIPTION: This bash snippet demonstrates how to set the Flyway clone server URL using the command-line interface.  It utilizes the `flyway info` command and the `-environments.development.url` parameter. The value provided includes a placeholder for the clone URL and a database name.  Requires Flyway CLI installed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Redgate Clone Resolver/Redgate Clone Resolver URL Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway info -environments.development.url='${clone.url}databaseName=my-database'\n```\n\n----------------------------------------\n\nTITLE: Flyway Migrate Output - Console Output\nDESCRIPTION: Displays the output of the `mvn flyway:migrate` command, confirming the successful validation and application of the pending migration. Shows that schema \"PUBLIC\" is migrated to version 3, \"Anonymize\".\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Java-based Migrations.md#_snippet_7\n\nLANGUAGE: Console Output\nCODE:\n```\n[INFO] Database: jdbc:h2:file:./target/foobar (H2 1.4)\n[INFO] Successfully validated 3 migrations (execution time 00:00.022s)\n[INFO] Current version of schema \"PUBLIC\": 2\n[INFO] Migrating schema \"PUBLIC\" to version 3 - Anonymize\n[INFO] Successfully applied 1 migration to schema \"PUBLIC\" (execution time 00:00.011s)\n```\n\n----------------------------------------\n\nTITLE: Using Flyway API to Set dryRunOutput Programmatically in Java\nDESCRIPTION: Configures Flyway's dry run output file path programmatically via the Java API, enabling dynamic or code-based configuration in Java applications. This method sets the output path before loading and executing Flyway migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Dry Run Output Setting.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nFlyway.configure()\n    .dryRunOutput(\"/my/output/file.sql\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Flyway Schema Comparison via TOML Configuration\nDESCRIPTION: This TOML configuration snippet shows how to specify `snapshotSchemas`.  The configuration defines an array named `snapshotSchemas` within the `flyway.diff` section.  The array contains \"schema1\" as the schema to be used for snapshot comparison. This approach allows for configuration of the snapshot schemas within a TOML file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DIff Namespace/Flyway Diff Snapshot Schemas Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.diff]\nsnapshotSchemas = [ \"schema1\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring tenantId in TOML Configuration File for Flyway\nDESCRIPTION: This snippet shows how to embed the Azure AD tenant ID within a TOML configuration file for a specific environment. The 'tenantId' parameter is set to a GUID string, enabling Azure AD authentication for the development environment. This approach is suitable for static configuration management and automation scripts.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Azure Active Directory Interactive Resolver/Azure Active Directory Interactive Resolver Tenant Id Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development.resolvers.azureAdInteractive]\ntenantId = \"{some GUID}\"\n```\n\n----------------------------------------\n\nTITLE: Enabling `ignoreSensitivityClassifications` in TOML Configuration\nDESCRIPTION: This TOML configuration snippet demonstrates how to set the `ignoreSensitivityClassifications` option to `true` within the `[redgateCompare.sqlserver.options.ignores]` table. When set to true, Redgate Compare will ignore sensitivity classifications on fields during SQL Server database comparisons and deployments.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Sensitivity Classifications Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreSensitivityClassifications = true\n```\n\n----------------------------------------\n\nTITLE: Setting Schemas via Environment Variable - Properties\nDESCRIPTION: Demonstrates assigning schemas to Flyway using an environment variable. Set FLYWAY_SCHEMAS with a comma-separated list of schema names. Useful for containerized or cloud environments where configuration through files is discouraged. Flyway picks up the variable at process start.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Schemas Setting.md#_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_SCHEMAS=schema1,schema2\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle Edition Example in Oracle SQL Plus\nDESCRIPTION: Example demonstrating how to create editions, enable users for editions, and create views in different editions to illustrate why the edition setting is needed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Edition Setting.md#_snippet_0\n\nLANGUAGE: oraclesqlplus\nCODE:\n```\nALTER USER HR ENABLE EDITIONS;\nCREATE EDITION CUSTOM_EDITION;\nALTER SESSION SET EDITION = ORA$BASE;\nCREATE VIEW HR.VIEW_1 AS SELECT 'Base edition' \"Defined in\" FROM DUAL;\nALTER SESSION SET EDITION = CUSTOM_EDITION;\nCREATE VIEW HR.VIEW_2 AS SELECT 'My edition' \"Defined in\" FROM DUAL;\nALTER SESSION SET EDITION = ORA$BASE;\n```\n\n----------------------------------------\n\nTITLE: Using Flyway CLI with snapshot.filename parameter (PowerShell)\nDESCRIPTION: Shows how to invoke Flyway from the command line with the snapshot.filename parameter specified, to create a snapshot file. It requires the snapshot.filename parameter, which defines the filename for the snapshot output.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Snapshot Namespace/Flyway Snapshot Filename Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway -snapshot.filename=flyway_snapshot.snp snapshot\n```\n\n----------------------------------------\n\nTITLE: Specifying dryRunOutput in Maven Plugin Configuration\nDESCRIPTION: Configures Flyway's dry run output file path in a Maven project by setting the <dryRunOutput> parameter within the Maven plugin configuration. This automates the generation of migration SQL previews during build phases.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Dry Run Output Setting.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n  <dryRunOutput>/my/output/file.sql</dryRunOutput>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Displaying Diff Artifact Changes (CLI) - Shell\nDESCRIPTION: This snippet displays the changes in a diff artifact using the Flyway CLI `diffText` command. It uses the default artifact location if none is provided, but an artifact file path can be specified. Requires Flyway CLI version 11.0.0 or later and a Teams/Enterprise license.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Migrating from flyway-dev to flyway CLI.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nflyway diffText\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway via Command Line (Standard Input)\nDESCRIPTION: This snippet demonstrates how to pass configuration options to Flyway via standard input using the `-configFiles=-` option. It provides examples of reading a single option and multiple options (delimited by newlines) from `echo` and reading from a file using `cat` and secure config file using `gpg`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Command-line Parameters/Config Files Parameter.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\necho $'flyway.url=jdbc:h2:mem:mydb' | flyway info -configFiles=-\n```\n\nLANGUAGE: powershell\nCODE:\n```\necho $'flyway.url=jdbc:h2:mem:mydb\\nflyway.user=sa' | flyway info -configFiles=-\n```\n\nLANGUAGE: powershell\nCODE:\n```\ncat flyway.conf | flyway migrate -configFiles=-\n```\n\nLANGUAGE: powershell\nCODE:\n```\ngpg -d -q flyway.conf.gpg | flyway info -configFiles=-\n```\n\n----------------------------------------\n\nTITLE: Filtering Redgate Compare Objects by Type (JSON)\nDESCRIPTION: This JSON snippet shows a basic Redgate Compare filter file structure. It includes a single \"postFilter\" that targets database \"objectType\"s and excludes any object whose type is \"table\". This filter is applied during comparison/deployment.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Filter Formats/Redgate Compare Filter Format.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"1.1\",\n  \"postFilters\":\n  [\n    {\n      \"filterBy\": \"objectType\",\n      \"filterValue\": \"table\",\n      \"effect\": \"exclude\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring validateOnMigrate via Gradle\nDESCRIPTION: This Groovy snippet showcases how to configure the `validateOnMigrate` setting within a Gradle build script. It sets the `validateOnMigrate` property to `false` within the `flyway` block. The dependency is the Flyway Gradle plugin. The output is that the Gradle build process will respect this Flyway configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Validate On Migrate Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    validateOnMigrate = false\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Migration Script (CLI) - Shell\nDESCRIPTION: This snippet generates a baseline migration script from a diff artifact using the Flyway CLI `generate` command. Requires Flyway CLI version 11.0.0 or later and a Teams/Enterprise license.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Migrating from flyway-dev to flyway CLI.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nflyway generate \\\"-generate.changes=VGFibGU6W2Rib10uW1Rlc3RUYWJsZV0\\\" \\\"-generate.artifactFilename=C:\\WorkingFolders\\FWD\\ProjectFolder\\artifact.zip\\\" \\\"-generate.baselineFilename=B001__BaselineScript.sql\\\" \\\"-generate.types=baseline\\\"\n```\n\n----------------------------------------\n\nTITLE: Including Contributor - HTML\nDESCRIPTION: This snippet includes a contributor.html file, passing in the contributor's name, user ID, and GitHub username using the Jekyll templating engine. It's likely used within a loop to render multiple contributors.\nSOURCE: https://github.com/flyway/flyway/blob/main/docs/documentation/hallOfFame.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Axel Fontaine\" user=\"axelfontaine\" id=\"684824\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Alex Panchenko\" user=\"panchenko\" id=\"440271\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Alex Tercete\" user=\"alextercete\" id=\"126538\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Alexander Altergot\" user=\"aaltergot\" id=\"12907019\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Árpád Egyed\" user=\"aegyed\" id=\"12913185\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"awal11\" user=\"awal11\" id=\"6557892\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Bartosz Kamiński\" user=\"bkaminnski\" id=\"22824295\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Ben Manes\" user=\"ben-manes\" id=\"378614\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"boothen\" user=\"boothen\" id=\"1582761\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Carlo Conserva\" user=\"cc-rock\" id=\"2620063\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Christian Dedie\" user=\"cdedie\" id=\"621229\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Christine Teig\" user=\"cteig\" id=\"1113060\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Craig Davidson\" user=\"cdavid15\" id=\"3115533\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Dan Bunker\" user=\"dlbunker\" id=\"2394431\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"dan-nawrocki\" user=\"dan-nawrocki\" id=\"8047997\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Dar Brett\" user=\"dar-brett\" id=\"9624757\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Dennis Hoer\" user=\"dhoer\" id=\"648360\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Evan J. Ercolano\" user=\"EvanErcolano\" id=\"14594200\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"FlakM\" user=\"FlakM\" id=\"4190088\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Francesco Proietti\" user=\"franciskittu\" id=\"4881389\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"G. Richard Bellamy\" user=\"rbellamy\" id=\"94763\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"George Thomas\" user=\"smoothreggae\" id=\"424562\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Igor Nikolaev\" user=\"inikolaev\" id=\"7585750\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Jason Hinch\" user=\"jhinch\" id=\"594559\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Jason Wong\" user=\"super132\" id=\"6581896\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Jean Revertera\" user=\"JeanRev\" id=\"8666989\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Joe Barnett\" user=\"josephlbarnett\" id=\"13838924\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Joe Lee-Moyet\" user=\"yjo\" id=\"1119919\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Jonathan Lally\" user=\"JonLally\" id=\"6360161\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Joris Kuipers\" user=\"jkuipers\" id=\"74792\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Josh Mahonin\" user=\"jmahonin\" id=\"2280043\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"jsross\" user=\"jsross\" id=\"5900216\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Julia Hayward\" user=\"juliahayward\" id=\"454881\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"karl82\" user=\"karl82\" id=\"233954\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"lrozek\" user=\"lrozek\" id=\"741781\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Mark Rotteveel\" user=\"mrotteveel\" id=\"5352689\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Martin Baillie\" user=\"martinbaillie\" id=\"613740\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Mattias Sällström\" user=\"msallstr\" id=\"1045237\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Michael Forstner\" user=\"MichaelF25\" id=\"6987344\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"michaelyaakoby\" user=\"michaelyaakoby\" id=\"5503849\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Mikiel Agutu\" user=\"MikielAgutu\" id=\"20282448\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"mstarita\" user=\"mstarita\" id=\"2162961\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Pavel Boldyrev\" user=\"bpg\" id=\"627562\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Philip Liddell\" user=\"Lyeeedar\" id=\"1607501\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"RobertRad\" user=\"RobertRad\" id=\"11713844\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Roger Brechbühl\" user=\"rotscher\" id=\"2678270\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Sanjay Deshmukh\" user=\"sanjayd\" id=\"251243\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Simon Gamma\" user=\"simschla\" id=\"71494\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Stefan Ferstl\" user=\"ferstl\" id=\"1487727\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Sten Røkke\" user=\"Muni10\" id=\"3974334\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Stephan Pauxberger\" user=\"pauxus\" id=\"1023744\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Tibor Baksa\" user=\"tiborbaksa\" id=\"6848634\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"tinybarks\" user=\"tinybarks\" id=\"31551149\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Tomáš Poledný\" user=\"Saljack\" id=\"614424\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"umefjord\" user=\"umefjord\" id=\"62725\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Victor Osolovskiy\" user=\"vosolovskiy\" id=\"7282292\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Yannik Hampe\" user=\"yankee42\" id=\"1841729\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Yong Ji\" user=\"kulmam92\" id=\"4615942\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"zhanhb\" user=\"zhanhb\" id=\"6323014\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"The Milk Man\" user=\"DoodleBobBuffPants\" id=\"17652619\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Martin Konôpka\" user=\"konopka\" id=\"4012902\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Kevin Krummenauer\" user=\"kekru\" id=\"13338343\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Christoph Dreis\" user=\"dreis2211\" id=\"6304496\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Nicholas Fechner\" user=\"NicholasFechner\" id=\"3217175\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Roman Dubinin\" user=\"romash1408\" id=\"14085271\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Rick Selby\" user=\"rickselby\" id=\"1564517\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"dohrayme\" user=\"dohrayme\" id=\"960977\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Nick Edwards\" user=\"nickeeromo\" id=\"25245721\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Alexis Deschamps\" user=\"AlexisDeschamps\" id=\"12681350\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Wesley Leung\" user=\"ltwesley\" id=\"7308697\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Georgios Andrianakis\" user=\"geoand\" id=\"4374975\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Eugene Kennedy\" user=\"ekennedy247\" id=\"50927141\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"codicuz\" user=\"codicuz\" id=\"48253991\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"sstrang\" user=\"sstrang\" id=\"3802197\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Knut Olav Løite\" user=\"olavloite\" id=\"1196707\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Radosław Stankiewicz\" user=\"stankiewicz\" id=\"8183568\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Jon Senchyna\" user=\"TheSench\" id=\"9260413\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Andy Wilkinson\" user=\"wilkinsona\" id=\"914682\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Alexander Berger\" user=\"alex-berger\" id=\"1087375\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Daniel Pottenger\" user=\"Rixium\" id=\"3577800\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"James Johnston\" user=\"madninjaskillz\" id=\"2499871\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Simon Kelly\" user=\"snopoke\" id=\"249606\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Juan Ara\" user=\"TarodBOFH\" id=\"17745030\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"George Gastaldi\" user=\"gastaldi\" id=\"54133\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Barry Attwater\" user=\"Barry-RG\" id=\"85222749\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Dalei Li\" user=\"lidalei\" id=\"7344016\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Tom Smith\" user=\"tjs145\" id=\"60435811\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Kieran Groble\" user=\"kgroble\" id=\"6350161\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"David Phillips\" user=\"electrum\" id=\"9230\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Dmitry Vrublevsky\" user=\"FylmTM\" id=\"626772\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Chris Heppell\" user=\"cjheppell\" id=\"12884767\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Todd\" user=\"todd-dev\" id=\"93123157\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Will Bosley\" user=\"wbosley\" id=\"58671245\" %}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n{% include contributor.html name=\"Alexander Mann\" user=\"AlexanderMann\" id=\"3885029\" %}\n```\n\n----------------------------------------\n\nTITLE: Setting `filterFile` under `[redgateCompare]` in TOML Configuration (Future)\nDESCRIPTION: Shows the recommended future method for configuring the filter file (`Filters.scpf`) in a TOML configuration file, using the `filterFile` key within the `[redgateCompare]` table. This approach will supersede the `flyway.check.filterFile` setting.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Filter File Setting.md#_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare]\nfilterFile=\"Filters.scpf\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Diff Artifact Changes - Shell\nDESCRIPTION: This snippet displays the changes within a specified diff artifact file using flyway-dev.  It requires a project path and the artifact file location. Requires Flyway CLI version 11.0.0 or later and a Teams/Enterprise license.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Migrating from flyway-dev to flyway CLI.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nflyway-dev show -p=C:\\Users\\redgate\\Documents\\TestFdCmdLine -a=C:\\Users\\redgate\\Documents\\TestFdCmdLine\\Temp\\artifact1 --i-agree-to-the-eula\n```\n\n----------------------------------------\n\nTITLE: Configuring addObjectExistenceChecks in TOML\nDESCRIPTION: This TOML snippet demonstrates how to set the `addObjectExistenceChecks` option to `true` within the `redgateCompare.sqlserver.options.behavior` section of a Flyway configuration file. Setting this option will cause SQL Compare to include `IF EXISTS` checks in generated scripts.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Behavior Options Namespace/SQL Server Add Object Existence Checks Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.options.behavior]\naddObjectExistenceChecks = true\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreCollations in TOML File for Flyway SQL Server Comparison\nDESCRIPTION: This snippet shows how to set the ignoreCollations option to true in a TOML configuration file to ignore collation differences during database comparisons. It is required when customizing Flyway's comparison behavior in automated workflows.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Collations Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreCollations = true\n```\n\n----------------------------------------\n\nTITLE: Configure ignorePermissions in TOML\nDESCRIPTION: This code snippet shows how to configure the `ignorePermissions` option within a TOML configuration file for Flyway.  This option controls whether object permission differences are ignored. Setting it to `true` will ignore the differences.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Ignore Options Namespace/Oracle Ignore Permissions Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.ignores]\nignorePermissions = true\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Password via Java API Datasource - java\nDESCRIPTION: This snippet demonstrates how to configure the database connection, including the password, when using the Flyway Java API. The `datasource` method is used to provide the JDBC URL, user, and password programmatically.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Password Setting.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .datasource(\"jdbc:h2:mem:flyway_db\", \"myuser\", \"mysecretpassword\")   \n    .load()\n```\n\n----------------------------------------\n\nTITLE: Expected Flyway Auth Success Output (Console)\nDESCRIPTION: This snippet shows the standard console output indicating that Flyway has successfully been authorized for a higher edition (Teams or Enterprise) after running the `auth` command and completing the web login.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Auth.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nYou are now licensed for:\nFlyway ENTERPRISE Edition {{ site.flywayVersion }} by Redgate\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreBindings in Flyway TOML\nDESCRIPTION: Demonstrates how to set the `ignoreBindings` option to `true` within a Flyway TOML configuration file. This setting is nested under the `redgateCompare.sqlserver.options.ignores` section and affects the comparison of SQL Server database schemas by ignoring bindings.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Bindings Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreBindings = true\n```\n\n----------------------------------------\n\nTITLE: TOML Configuration for flyway.prepare.scriptFilename\nDESCRIPTION: Shows how to set the scriptFilename parameter within a TOML configuration file for Flyway. This configuration instructs Flyway to generate a deployment script at the specified path when the prepare command is executed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Prepare Namespace/Flyway Prepare Script Filename Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.prepare]\nscriptFilename = \"output.sql\"\n```\n\n----------------------------------------\n\nTITLE: Setting JVM Arguments via JAVA_ARGS Environment Variable (Windows CMD)\nDESCRIPTION: Shows how to set the JAVA_ARGS environment variable temporarily in the Windows Command Prompt (cmd.exe) using the `set` command. This passes custom arguments (like minimum heap size -Xms308M and maximum heap size -Xmx432M) to the Flyway Java Virtual Machine (JVM) when it launches.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Command-line.md#_snippet_15\n\nLANGUAGE: Batch\nCODE:\n```\n> set JAVA_ARGS=-Xms308M -Xmx432M\n```\n\n----------------------------------------\n\nTITLE: Using Flyway CLI to Set Snapshot Build Environment\nDESCRIPTION: This snippet demonstrates how to run the Flyway snapshot command from the command line, specifying the source as 'migrations' and the build environment as 'shadow'. It requires Flyway CLI to be installed and accessible in the terminal. The command triggers the snapshot process using the specified environment.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Snapshot Namespace/Flyway Snapshot Build Environment Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway snapshot -source=\"migrations\" -buildEnvironment=\"shadow\"\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Replacement via Environment Variable - Flyway - Properties\nDESCRIPTION: This snippet describes configuring placeholderReplacement via the environment variable FLYWAY_PLACEHOLDER_REPLACEMENT. This is set at the OS/environment level before running Flyway. The value should be 'false' to disable placeholder replacement. The variable must be available in the executing shell/session to be picked up by Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Replacement Setting.md#_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_PLACEHOLDER_REPLACEMENT=false\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreStatistics Option in TOML Configuration File\nDESCRIPTION: This snippet shows how to configure the ignoreStatistics option in a TOML configuration file for Redgate Compare SQL Server. Setting this to true (default) ensures statistics are ignored when comparing and deploying databases.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Statistics Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreStatistics = true\n```\n\n----------------------------------------\n\nTITLE: Setting Azure AD Client ID via Command-line for Flyway\nDESCRIPTION: This snippet demonstrates how to set the Azure Active Directory client ID using the Flyway CLI command for the development environment. The client ID is provided as a parameter within the command, enabling interactive Azure AD authentication.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Azure Active Directory Interactive Resolver/Azure Active Directory Interactive Resolver Client Id Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway info -environments.development.resolvers.azureAdInteractive.clientId='{some GUID}'\n```\n\n----------------------------------------\n\nTITLE: Specifying dryRunOutput in Properties Configuration\nDESCRIPTION: Sets the dry run output file path in a properties-based configuration for Flyway, used in properties files or environment variables. When set, Flyway will output the SQL statements generated during a dry run to the specified file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Dry Run Output Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.dryRunOutput=/my/output/file.sql\n```\n\n----------------------------------------\n\nTITLE: TOML configuration for Flyway GCSM secrets\nDESCRIPTION: Defines the GCSM secrets in a TOML configuration file for Flyway. The 'secrets' parameter accepts a list of secret names. This setup is used during automated migrations where configuration files manage secret references.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Google Cloud Secret Manager Namespace/Flyway Google Cloud Secret Manager Secrets Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway.gcsm]\nsecrets = [\"secret1\", \"secret2\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring includeSetBlankLinesOn in TOML Configuration File for Oracle in Flyway\nDESCRIPTION: This TOML configuration snippet demonstrates how to enable the includeSetBlankLinesOn option for Oracle comparisons in Flyway. When set to true, it adds the SQL*Plus command 'SET SQLBLANKLINES ON' to the top of generated scripts.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Behavior Options Namespace/Oracle Include Set Blank Lines On Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.behavior]\nincludeSetBlankLinesOn = true\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Clickhouse Cluster Name via Environment Variable\nDESCRIPTION: This shows how to configure the ClickHouse cluster name by setting an environment variable. Flyway reads configuration from environment variables prefixed with `FLYWAY_`, with dots replaced by underscores and names typically in uppercase.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Clickhouse Namespace/Flyway Clickhouse Cluster Name Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_CLICKHOUSE_CLUSTER_NAME=example_cluster\n```\n\n----------------------------------------\n\nTITLE: Configuring sqlMigrationSuffixes via Properties File\nDESCRIPTION: This snippet demonstrates how to configure the `sqlMigrationSuffixes` parameter using a properties file. It specifies multiple suffixes for SQL migration files, including `.sql`, `.pkg`, and `.pkb`. The suffixes are comma-separated.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Migration Suffixes Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.sqlMigrationSuffixes=.sql,.pkg,.pkb\n```\n\n----------------------------------------\n\nTITLE: Setting prepare.target via Command-line in Bash\nDESCRIPTION: Example of how to specify the target environment for the prepare command using the command-line interface. This sets 'schemaModel' as the source and 'production' as the target environment.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Prepare Namespace/Flyway Prepare Target Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway prepare -source=\"schemaModel\" -target=\"production\"\n```\n\n----------------------------------------\n\nTITLE: Setting databaseType via Command-line using flyway init\nDESCRIPTION: This snippet demonstrates how to specify the database type (e.g., oracle) when initializing a Flyway project through the command line using the flyway init command. It helps users automate database configuration in scripting scenarios.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Database Type Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway init -databaseType=\"oracle\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreExtendedProperties in TOML Configuration File for SqlServer\nDESCRIPTION: A TOML configuration example showing how to set the ignoreExtendedProperties option to true. This setting instructs Redgate Compare to ignore extended properties on objects and databases during comparison and deployment operations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Extended Properties Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreExtendedProperties = true\n```\n\n----------------------------------------\n\nTITLE: Flyway Model Command with Artifact Filename - Bash\nDESCRIPTION: This snippet shows how to use the `artifactFilename` parameter with the Flyway command-line tool. It specifies a relative path `artifact.diff` where the diff artifact will be saved when running the `flyway model` command.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Model Namespace/Flyway Model Artifact Filename Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway model -artifactFilename=artifact.diff\n```\n\n----------------------------------------\n\nTITLE: Enabling ignoreExternalTableLocationInformation in TOML\nDESCRIPTION: This TOML configuration snippet shows how to enable the `ignoreExternalTableLocationInformation` option by setting it to `true` within the `[redgateCompare.oracle.options.ignores]` table. This configuration instructs Redgate Compare to disregard differences in external table location information when comparing Oracle schemas.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Ignore Options Namespace/Oracle Ignore External Table Location Information Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.oracle.options.ignores]\nignoreExternalTableLocationInformation = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Script Placeholder Suffix with Gradle Build Script\nDESCRIPTION: This snippet demonstrates how to set the script placeholder suffix within a Gradle build script for Flyway, using the 'flyway' block and assigning '__P' to 'scriptPlaceholderSuffix'. This automates configuration during Gradle builds.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Script Placeholder Suffix Setting.md#_snippet_5\n\nLANGUAGE: Groovy\nCODE:\n```\nflyway {\n    scriptPlaceholderSuffix = '__P'\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flyway Snapshot Command: Bash\nDESCRIPTION: This command-line snippet demonstrates how to execute the `flyway snapshot` command and specify the source for the snapshot directly using the `-source` flag. The value provided ('production') indicates the environment or source to snapshot.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Snapshot Namespace/Flyway Snapshot Source Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway snapshot -source=\"production\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway via Command Line (Multiple Files)\nDESCRIPTION: This snippet shows how to load multiple configuration files using the `-configFiles` parameter in the command line. The files are separated by commas. This setup is an example of loading multiple configuration files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Command-line Parameters/Config Files Parameter.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -configFiles=path/to/myAlternativeConfig.toml,other.toml migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Loggers via Environment Variable\nDESCRIPTION: Sets the `FLYWAY_LOGGERS` environment variable. This variable is read by Flyway to configure the loggers, here setting it to 'auto' for auto-detection.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Loggers Setting.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nFLYWAY_LOGGERS=auto\n```\n\n----------------------------------------\n\nTITLE: Equivalent Manual Sequence: Diff and Model Commands in Flyway CLI (Shell)\nDESCRIPTION: This pair of Flyway commands shows the manual process of first diffing the 'development' database to the schema model, then updating the model. It's equivalent to a single 'diff model' command but allows for staged execution or troubleshooting. Requires: Flyway Enterprise Edition, defined environments. Input: sequence of environments to diff and update. Output: updated schema model.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Flyway Desktop migrations workflow with Flyway CLI.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ flyway diff \"-diff.source=development\" \"-diff.target=schemaModel\"\n$ flyway model\n```\n\n----------------------------------------\n\nTITLE: Configuring includeSetDefineOff Option in TOML Configuration File\nDESCRIPTION: TOML configuration example that shows how to set the includeSetDefineOff option for Oracle comparison behavior in Flyway. This setting adds 'SET DEFINE OFF' to generated scripts to prevent substitution variable interpretation.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Behavior Options Namespace/Oracle Include Set Define Off Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.behavior]\nincludeSetDefineOff = true\n```\n\n----------------------------------------\n\nTITLE: Setting flyway.check.deployedSnapshot via Command-line (PowerShell)\nDESCRIPTION: Demonstrates how to provide the deployed snapshot file path ('my_snapshot') directly to the Flyway 'check' command using the '-check.deployedSnapshot' argument in a PowerShell terminal. This is used for validating deployed migrations against a predefined snapshot state, typically comparing against changes. Requires the target database URL.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Deployed Snapshot Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway check -changes -url=\"jdbc://url\" -check.deployedSnapshot=\"my_snapshot\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Major Rules - PowerShell\nDESCRIPTION: This snippet demonstrates how to use the Flyway command-line interface (CLI) in PowerShell to configure the `majorRules` parameter. The `check.majorRules` parameter is set to 'L001', which indicates a rule to be considered major. This command is used to check the code and determine if any major rules are violated. It is part of a larger process used to fail a pipeline if the number of major rule violations exceeds a defined tolerance.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Major Rules Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway check -code -check.majorRules=L001\n```\n\n----------------------------------------\n\nTITLE: Setting `skipDefaultResolvers` via Flyway Command-Line (PowerShell)\nDESCRIPTION: Demonstrates how to enable the `skipDefaultResolvers` option using the Flyway command-line interface by passing the `-skipDefaultResolvers` parameter with a value of `\"true\"`. This method applies the setting for a single Flyway command execution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Skip Default Resolvers Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -skipDefaultResolvers=\"true\" info\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle SQL*Plus Support in TOML Files\nDESCRIPTION: Provides an example of setting the 'sqlplus' parameter to true within a TOML configuration file for Flyway. This ensures SQL*Plus functionalities are enabled during migrations when the config file is used.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle SQLPlus Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway.oracle]\nsqlplus = true\n```\n\n----------------------------------------\n\nTITLE: Command-line Example for Setting ignoreMigrationPatterns in Flyway\nDESCRIPTION: An example command demonstrates how to specify ignoreMigrationPatterns via command-line argument, using the -ignoreMigrationPatterns parameter with a pattern like `repeatable:missing` to exclude missing repeatable migrations during validation.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Ignore Migration Patterns Setting.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -ignoreMigrationPatterns=\"repeatable:missing\" validate\n```\n\n----------------------------------------\n\nTITLE: Setting Clickhouse Zookeeper Path in Maven POM File\nDESCRIPTION: Illustrates configuring the Clickhouse Zookeeper path within a Maven POM file (`pom.xml`) inside the `<configuration>` section of the Flyway plugin, using the `<clickhouseZookeeperPath>` element to specify the Zookeeper node path.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Clickhouse Namespace/Flyway Clickhouse Zookeeper Path Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <pluginConfiguration>\n        <clickhouseZookeeperPath>/clickhouse/tables/{shard}/{database}/{table}</clickhouseZookeeperPath>\n    </pluginConfiguration>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Disabling Placeholder Replacement in Gradle Build Script - Flyway - Groovy\nDESCRIPTION: This snippet demonstrates disabling placeholder replacement in Flyway using a Gradle build configuration. The flyway block configures the plugin. The placeholderReplacement property is set to false. Requires the Flyway Gradle plugin being applied to your project.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Replacement Setting.md#_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    placeholderReplacement = false\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Oracle Wallet Location via Environment Variable (Flyway)\nDESCRIPTION: This properties snippet demonstrates how to set the Oracle wallet location using an environment variable. It sets the environment variable `FLYWAY_ORACLE_WALLET_LOCATION` to the specified path. This environment variable is used by Flyway to locate the Oracle wallet for database connections.  There are no direct dependencies; the environment variable must simply be set appropriately.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle Wallet Location Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_ORACLE_WALLET_LOCATION=/User/db/my_wallet\n```\n\n----------------------------------------\n\nTITLE: Configuring Redgate Clone Token in Flyway TOML File\nDESCRIPTION: Shows how to configure the Redgate Clone authentication token (`authenticationToken`) within a Flyway TOML configuration file under the `[environments.development.resolvers.clone]` section. It uses a property resolver (`localSecret.RedgateCloneToken`) to securely retrieve the token value.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Redgate Clone Resolver/Redgate Clone Resolver Authentication Token Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development.resolvers.clone]\nauthenticationToken = \"${localSecret.RedgateCloneToken}\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Community DB Support in Maven POM File\nDESCRIPTION: Illustrates how to disable community database support by setting the `<communityDBSupportEnabled>` configuration element to `false` within the Flyway plugin's `<configuration>` section in a Maven `pom.xml` file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Community DB Support Enabled Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <communityDBSupportEnabled>false</communityDBSupportEnabled>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Initiating Flyway Authorization using Console\nDESCRIPTION: This command starts the web-based authorization process for Flyway Teams or Enterprise Edition. It opens the default browser to log in with a Redgate account. The `-IAgreeToTheEula` flag is required to proceed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Auth.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflyway auth -IAgreeToTheEula\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Diff Rebuild Command-Line Bash\nDESCRIPTION: Demonstrates setting the `flyway.diff.rebuild` property to `true` using the command-line flag `-rebuild`. This forces a reprovision of the build environment when comparing a schema model source to a migrations target.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DIff Namespace/Flyway Diff Rebuild Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway diff -source=\"schemaModel\" -target=\"migrations\" -rebuild=true\n```\n\n----------------------------------------\n\nTITLE: TOML configuration setting for reportFilename\nDESCRIPTION: This snippet illustrates how to define the 'reportFilename' parameter within a TOML configuration file for Flyway, allowing configuration through file-based settings. The value specifies the desired output filename for the report.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Report Filename Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nreportFilename = \"flyway_report.html\"\n```\n\n----------------------------------------\n\nTITLE: Setting schemaModelSchemas in TOML Configuration File (TOML)\nDESCRIPTION: Shows how to configure the 'schemaModelSchemas' parameter within a Flyway TOML configuration file. The value is specified as an array of strings under the '[flyway]' section.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Schema Model Schemas Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nschemaModelSchemas = [ \"schema1\", \"schema2\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway via JVM System Properties\nDESCRIPTION: Demonstrates how to pass Flyway configuration properties as JVM system properties on the Gradle command line using the `-D` flag. Similar to Gradle properties, this allows dynamic configuration overrides.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Gradle Task.md#_snippet_11\n\nLANGUAGE: Console\nCODE:\n```\n> gradle -Dflyway.user=myUser -Dflyway.schemas=schema1,schema2 -Dflyway.placeholders.keyABC=valueXYZ\n```\n\n----------------------------------------\n\nTITLE: Specifying Required Tags in Flyway Using TOML Configuration\nDESCRIPTION: Shows how to specify the allOf condition for Flyway tags in a TOML configuration file, which requires migrations to contain all specified tags for selection during migration operations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Tags Namespace/Flyway Tags All Of Setting.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.tags]\nallOf = [\"tagA\", \"tagB\", \"tagC\"]\n```\n\n----------------------------------------\n\nTITLE: Docker run command to start SQL Server container\nDESCRIPTION: This shell command runs a SQL Server Docker container with environment variables to accept EULA and set SA password, exposing port 1433.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Using Flyway Check with SQL Server.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -e \"ACCEPT_EULA=Y\" -e \"SA_PASSWORD=Flyway123\" -p 1433:1433 -d mcr.microsoft.com/mssql/server\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle Program Unit Roles in TOML Configuration File\nDESCRIPTION: Example showing how to enable the inclusion of program unit roles in Oracle database scripts via a TOML configuration file. Requires a user with SYS privileges to successfully script the roles.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Behavior Options Namespace/Oracle Include Program Unit Roles Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.behavior]\nincludeProgramUnitRoles = true\n```\n\n----------------------------------------\n\nTITLE: Configuring 'forceBinaryCollation' in TOML for Flyway SQL Server Data Comparison\nDESCRIPTION: This snippet demonstrates how to set the 'forceBinaryCollation' option to true in a TOML configuration file for Flyway. It forces binary collation on string comparisons in SQL Server data, which may impact performance but ensures case-sensitive comparisons. The setting is applicable only via configuration files and not through other interfaces.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Data Comparison Options Namespace/SQL Server Data Force Binary Collation Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.data.options.comparison]\nforceBinaryCollation = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway via Environment Variable\nDESCRIPTION: This snippet configures Flyway using the `FLYWAY_CONFIG_FILES` environment variable.  The example sets the environment variable to the path of a configuration file. This provides a way to specify the configuration file independent of command-line arguments.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Command-line Parameters/Config Files Parameter.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_CONFIG_FILES=my.toml\n```\n\n----------------------------------------\n\nTITLE: Command-line usage of Flyway prepare with abortOnWarningSeverity option\nDESCRIPTION: Shows how to invoke the Flyway prepare command from the terminal with the &#39;abortOnWarningSeverity&#39; parameter set to true, ensuring the process aborts on warnings of configured severity.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Prepare Namespace/Flyway Prepare Abort On Warning Severity Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway prepare -abortOnWarningSeverity=true\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Separator in Maven POM File (XML)\nDESCRIPTION: Demonstrates configuring the placeholder separator in a Maven project's `pom.xml` file using the Flyway Maven plugin. The `<placeholderSeparator>` element is added within the `<configuration>` section and set to the desired separator '_'.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Separator Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <placeholderSeparator>_</placeholderSeparator>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting minorTolerance in Flyway TOML Config - TOML\nDESCRIPTION: Defines the minorTolerance setting under the [flyway.check] section of a TOML configuration file for Flyway. This entry sets the maximum number of tolerated minor rule violations to 7. Requires that the TOML file be referenced by Flyway during execution. Substitute the value as needed to match the desired tolerance.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Minor Tolerance Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway.check]\nminorTolerance = 7\n```\n\n----------------------------------------\n\nTITLE: Configuring Applied Migrations in Powershell Command-line\nDESCRIPTION: Example of how to specify applied migrations when running the flyway check command from the command-line using Powershell. This parameter defines which migration versions should be considered as already applied when creating snapshots.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Applied Migrations Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway check -changes -check.appliedMigrations=\"1,2,3\"\n```\n\n----------------------------------------\n\nTITLE: Disabling createSchemas in Properties Configuration File\nDESCRIPTION: This snippet illustrates setting the `createSchemas` property to `false` in a standard Java properties configuration file (e.g., `flyway.properties`). It uses the key-value format `property.name=value`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Create Schemas Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.createSchemas=false\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway lockRetryCount in Gradle Build Script\nDESCRIPTION: An example of configuring lockRetryCount in a Gradle build script using Groovy syntax. Defining lockRetryCount=10 inside the flyway closure controls Flyway's lock retry attempts within build automation.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Lock Retry Count Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    lockRetryCount = 10\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Snapshot Source: TOML\nDESCRIPTION: This TOML snippet shows how to define the `source` property for the `flyway.snapshot` configuration within a Flyway TOML configuration file. Setting the value to 'production' specifies the desired source for the snapshot.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Snapshot Namespace/Flyway Snapshot Source Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.snapshot]\nsource = \"production\"\n```\n\n----------------------------------------\n\nTITLE: Disabling query output via Java API\nDESCRIPTION: This snippet illustrates how to disable query result output programmatically by configuring Flyway using Java's API, suitable for integration in Java applications or scripts.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Output Query Results Setting.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .outputQueryResults(false)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Flyway Model Artifact Filename Configuration - TOML\nDESCRIPTION: This snippet demonstrates how to configure the `artifactFilename` using a TOML configuration file. It sets the `artifactFilename` to `artifact.diff` within the `flyway.model` section, determining where the Flyway model diff will be saved.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Model Namespace/Flyway Model Artifact Filename Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.model]\nartifactFilename = \"artifact.diff\"\n```\n\n----------------------------------------\n\nTITLE: Setting skipDefaultCallbacks in Gradle Build Script (Groovy)\nDESCRIPTION: Shows how to set the `skipDefaultCallbacks` property to `true` within the `flyway` configuration block in a Gradle build script (`build.gradle`). This configures the Flyway Gradle plugin.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Skip Default Callbacks Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    skipDefaultCallbacks = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Clickhouse Cluster Name in Properties File\nDESCRIPTION: This snippet shows the syntax for setting the ClickHouse cluster name in a standard Java `.properties` file used by Flyway. The property key follows the hierarchical format `flyway.clickhouse.clusterName`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Clickhouse Namespace/Flyway Clickhouse Cluster Name Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.clickhouse.clusterName=example_cluster\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway buildUser via Command-line (PowerShell)\nDESCRIPTION: Demonstrates how to specify the build database username 'buildUser' using the Flyway command-line interface in PowerShell. Requires Flyway CLI and appropriate JDBC URL. The '-check.buildUser' option sets the username during the 'check' command to override the default user. Input is a string username; output is the execution of the check command with the specified user context.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Build User Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway check -changes -url=\"jdbc://url1\" -check.buildUser=\"sa\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Group using Java API (Java)\nDESCRIPTION: Demonstrates setting the `flyway.group` parameter programmatically using the Flyway Java API's fluent configuration builder. The `.group(true)` method is used during the configuration process before loading the Flyway instance.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Group Setting.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nFlyway.configure()\n    .group(true)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variable for Flyway Config Files\nDESCRIPTION: Shell example showing how to set the FLYWAY_CONFIG_FILES environment variable to specify configuration files for Flyway. This takes precedence over the command-line parameter.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Maven Goal.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n> export FLYWAY_CONFIG_FILES=path/to/myAlternativeConfig.conf,other.conf\n```\n\n----------------------------------------\n\nTITLE: Setting publishResult via Flyway Command Line (Bash)\nDESCRIPTION: Demonstrates enabling the publishing of Flyway run results to Flyway Pipelines by setting the `-publishResult` flag to `true` when executing Flyway from the command line in a Bash shell.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Publish Result Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway -publishResult=true\n```\n\n----------------------------------------\n\nTITLE: Defining connectRetriesInterval in TOML Configuration File\nDESCRIPTION: This snippet shows setting the connectRetriesInterval to 60 seconds within a TOML configuration file under the default environment. It enables configuring connection retry timing persistently through configuration files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Connect Retries Interval Setting.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[environments.default]\nconnectRetriesInterval = 60\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway prepare in TOML file with abortOnWarningSeverity\nDESCRIPTION: Demonstrates how to set the 'abortOnWarningSeverity' parameter in a TOML configuration file for Flyway, specifying the severity level that triggers aborts during prepare.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Prepare Namespace/Flyway Prepare Abort On Warning Severity Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.prepare]\nabortOnWarningSeverity = \"High\"\n```\n\n----------------------------------------\n\nTITLE: Setting Clickhouse Zookeeper Path via Environment Variable\nDESCRIPTION: Example of setting the Clickhouse Zookeeper path using the `FLYWAY_CLICKHOUSE_ZOOKEEPER_PATH` environment variable. Flyway reads this variable to determine the Zookeeper node path for Clickhouse cluster configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Clickhouse Namespace/Flyway Clickhouse Zookeeper Path Setting.md#_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_CLICKHOUSE_ZOOKEEPER_PATH=/clickhouse/tables/{shard}/{database}/{table}\n```\n\n----------------------------------------\n\nTITLE: Setting connectRetriesInterval in Properties Configuration File\nDESCRIPTION: This code demonstrates setting the connectRetriesInterval parameter to 60 within a properties-style configuration file used by Flyway. It allows for simple configuration management outside of command-line operations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Connect Retries Interval Setting.md#_snippet_3\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.connectRetriesInterval=60\n```\n\n----------------------------------------\n\nTITLE: Clearing ignoreMigrationPatterns to Reset Default Behavior\nDESCRIPTION: Indicates that setting ignoreMigrationPatterns to an empty value resets the default behavior, stopping any migrations from being ignored explicitly, especially useful for re-enabling future migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Ignore Migration Patterns Setting.md#_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\nflyway.ignoreMigrationPatterns=\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Table via Java API\nDESCRIPTION: Provides a Java code snippet demonstrating how to configure the Flyway schema history table name programmatically using the `Flyway.configure().table()` method before loading the configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Table Setting.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nFlyway.configure()\n    .table(\"my_schema_history_table\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Setting Clickhouse Zookeeper Path via Flyway Command-line\nDESCRIPTION: Demonstrates configuring the Clickhouse Zookeeper path using the `-clickhouse.zookeeperPath` argument in the Flyway command-line interface. This parameter specifies the Zookeeper node containing the Clickhouse cluster configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Clickhouse Namespace/Flyway Clickhouse Zookeeper Path Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -clickhouse.zookeeperPath=\"/clickhouse/tables/{shard}/{database}/{table}\" info\n```\n\n----------------------------------------\n\nTITLE: Inserting a Document with JavaScript Migration - MongoDB - JavaScript\nDESCRIPTION: Provides a JavaScript command for MongoDB to insert a document into the 'user' collection. Intended for migration files executed by Flyway through the 'mongosh' shell. This requires 'mongosh' installed and accessible in the environment, and is run as part of a JavaScript-based migration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Using Native Connectors to connect to MongoDB.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndb.user.insert({name: \"Ada Lovelace\", age: 205});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Overrides - API (Java)\nDESCRIPTION: Shows how to configure error overrides programmatically using the Flyway Java API.  It calls the `errorOverrides()` method on a `Flyway.configure()` instance, passing the desired override string. The  `load()` method is then used to initialize Flyway. This method requires the Flyway Java library as a dependency.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Error Overrides Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .errorOverrides(\"STATE:12345:W\")\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Generating Flyway Migration with Version - Bash\nDESCRIPTION: This Bash snippet demonstrates how to generate a Flyway migration with a specific version using the command-line interface. The `-version` parameter allows specifying the version string to be used in the migration name. This command generates a migration and applies the provided version to the migration name.\n\nDependencies: Flyway CLI must be installed and configured.\nKey Parameters: `-version`:  specifies the version, in this case, \"001\".\nExpected Output:  A generated migration file with a name that includes the version specified in the parameter.\nLimitations: The version is a string, allowing for various formats.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Version Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway generate -version=\"001\"\n```\n\n----------------------------------------\n\nTITLE: Enabling skipExecutingMigrations in Flyway Maven Plugin Configuration (XML)\nDESCRIPTION: This snippet shows how to configure the skipExecutingMigrations setting in the Flyway Maven plugin by adding the option inside the plugin's <configuration> element in a pom.xml file. Setting this to true prevents execution of migration scripts during Maven builds but updates the schema history table accordingly. This requires the Flyway Maven plugin to be declared and used during the build lifecycle.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Skip Executing Migrations Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <skipExecutingMigrations>true</skipExecutingMigrations>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting majorTolerance via Command-line in PowerShell\nDESCRIPTION: Example of setting the majorTolerance to 3 when running a check command with code analysis enabled using the PowerShell command-line interface.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Major Tolerance Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway check -code -check.majorTolerance=3\n```\n\n----------------------------------------\n\nTITLE: Configure undoSqlMigrationPrefix in Properties File (Properties)\nDESCRIPTION: Illustrates how to define the `undoSqlMigrationPrefix` property in a traditional Java-style `.properties` configuration file used by Flyway. The format follows a simple key=value structure.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Undo SQL Migration Prefix Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.undoSqlMigrationPrefix=B\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault URL in TOML Configuration File for Flyway\nDESCRIPTION: Example of how to set the Vault resolver URL for a development environment in a TOML configuration file. This defines the URL for the Vault server that Flyway will connect to.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Vault Resolver/Vault Resolver URL Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development.resolvers.vault]\nurl = \"http://localhost:8200/v1\"\n```\n\n----------------------------------------\n\nTITLE: Setting GCSM Project ID via Flyway Command-Line (PowerShell)\nDESCRIPTION: Demonstrates how to configure the GCSM project ID using the `-gcsm.project` command-line argument when running Flyway. This example uses PowerShell syntax.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Google Cloud Secret Manager Namespace/Flyway Google Cloud Secret Manager Project Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -gcsm.project=\"quixotic-ferret-345678\" info\n```\n\n----------------------------------------\n\nTITLE: Setting Build Password - TOML Configuration\nDESCRIPTION: This TOML configuration example shows how to set the `buildPassword` within the `flyway.check` section.  This configuration approach is part of Flyway's support for TOML configuration files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Build Password Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.check]\nbuildPassword = \"mypassword\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Applied Migrations in Properties Configuration File\nDESCRIPTION: Example of how to specify applied migrations in a properties configuration file. This sets the migration IDs that will be considered already applied when running the check command.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Applied Migrations Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.check.appliedMigrations=1,2,3\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Token in TOML Configuration File\nDESCRIPTION: Example of how to define the Vault token in a TOML configuration file. This enables Flyway to authenticate with Vault to retrieve secrets as needed during execution.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Vault Resolver/Vault Resolver Token Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development.resolvers.vault]\ntoken = \"abc.1234567890\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Diff Source in TOML Configuration File\nDESCRIPTION: Example demonstrating how to specify the diff source parameter in a TOML configuration file, though it's noted this is typically not the preferred approach for this parameter.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DIff Namespace/Flyway Diff Source Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.diff]\nsource = \"env:development\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Community DB Support via Flyway Command-Line\nDESCRIPTION: Demonstrates how to disable community database support by setting the `-communityDBSupportEnabled` flag to `false` when running Flyway from the command-line.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Community DB Support Enabled Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -communityDBSupportEnabled=\"false\" migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle SQL*Plus Support in Java API\nDESCRIPTION: Illustrates how to programmatically enable SQL*Plus support by retrieving the OracleConfigurationExtension plugin from Flyway's configuration and setting the 'setSqlPlus' option to true. Used in Java-based integrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle SQLPlus Setting.md#_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nOracleConfigurationExtension oracleConfigurationExtension = configuration.getPluginRegister().getPlugin(OracleConfigurationExtension.class);\noracleConfigurationExtension.setSqlPlus(true);\n```\n\n----------------------------------------\n\nTITLE: Command Line Environment Configuration\nDESCRIPTION: Example of how to define and specify an environment using the Flyway command line interface, passing the JDBC URL as a parameter and selecting the environment to use.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway info -environments.example.url=jdbc:sqlite:local_database.db -environment=example\n```\n\n----------------------------------------\n\nTITLE: Setting kerberosConfigFile in Gradle build script\nDESCRIPTION: Example of setting the Kerberos configuration file path in a Gradle build script. This configuration works with the Flyway Gradle plugin for database migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Kerberos Config File Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    kerberosConfigFile = '/path/to/krb5.ini'\n}\n```\n\n----------------------------------------\n\nTITLE: Command-line configuration for validateMigrationNaming in PowerShell\nDESCRIPTION: Sets the validateMigrationNaming option to true or false when running Flyway via command-line in PowerShell. It enables or disables validation of migration filenames based on naming conventions.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Validate Migration Naming Setting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n./flyway -validateMigrationNaming=\"true\" info\n```\n\n----------------------------------------\n\nTITLE: Setting prepare.target in TOML Configuration File\nDESCRIPTION: Example of how to specify the target environment for the prepare command in a TOML configuration file. This sets 'production' as the target environment in the flyway.prepare namespace.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Prepare Namespace/Flyway Prepare Target Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.prepare]\ntarget = \"production\"\n```\n\n----------------------------------------\n\nTITLE: Configuring scriptPlaceholderPrefix in Properties File\nDESCRIPTION: Sets the Flyway script placeholder prefix to \"P__\" within a properties configuration file (e.g., `flyway.conf`). This configuration is applied when Flyway uses this file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Script Placeholder Prefix Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.scriptPlaceholderPrefix=P__\n```\n\n----------------------------------------\n\nTITLE: Environment Variable for ignoreMigrationPatterns in Flyway\nDESCRIPTION: Illustrates setting the ignoreMigrationPatterns via environment variable `FLYWAY_IGNORE_MIGRATION_PATTERNS`, allowing environment-specific configuration without modifying files or command-line arguments.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Ignore Migration Patterns Setting.md#_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_IGNORE_MIGRATION_PATTERNS=repeatable:missing\n```\n\n----------------------------------------\n\nTITLE: Defining a Flyway Check Rule in TOML\nDESCRIPTION: Example TOML configuration for a Flyway check rule. It targets all SQL dialects (`dialects = [\"TEXT\"]`), uses a case-insensitive Java-dialect regex `(?i)(^|\\\\s)TO\\\\s+DO($|\\\\s|;)` to find 'to do' phrases (`rules`), triggers a violation if the regex matches (`passOnRegexMatch = false`), and provides a description for the report (`description`). This rule helps identify leftover 'to do' comments in SQL migration scripts.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Code Analysis Rules.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\ndialects = [\"TEXT\"]\nrules = [\"(?i)(^|\\\\s)TO\\\\s+DO($|\\\\s|;)\"]\npassOnRegexMatch = false\ndescription = \"Phrase 'to do' remains in the code\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Debug Output with sls (Powershell)\nDESCRIPTION: This snippet demonstrates how to filter debug output from Flyway using `sls` (Select-String) in Powershell. The `-X` flag enables debug output, and `sls -Pattern` is used to exclude lines containing a specific term using `-NoMatch` parameter.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Command-line.md#_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\nflyway migrate -X | sls -Pattern 'term-to-filter-out' -NoMatch\n```\n\n----------------------------------------\n\nTITLE: Configuring flyway.snapshot.rebuild in TOML Configuration File\nDESCRIPTION: Shows how to enable the snapshot rebuild option in a TOML configuration file within the [flyway.snapshot] section.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Snapshot Namespace/Flyway Snapshot Rebuild Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.snapshot]\nrebuild = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Loggers in TOML File\nDESCRIPTION: Configures the `flyway.loggers` property within a TOML configuration file. Specifies 'auto' as the preferred logger, indicating auto-detection.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Loggers Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nloggers = [\"auto\"]\n```\n\n----------------------------------------\n\nTITLE: Setting nameOnly parameter in TOML configuration file\nDESCRIPTION: Example of configuring the nameOnly parameter in a TOML configuration file for Flyway. While possible, it's noted that this is unlikely to be desirable in a configuration file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Add Namespace/Flyway Add Name Only Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.add]\nnameOnly = false\n```\n\n----------------------------------------\n\nTITLE: Configuring `filterFile` in Flyway TOML\nDESCRIPTION: This TOML snippet demonstrates how to set the `filterFile` parameter within the `[redgateCompare.sqlserver]` section of a Flyway configuration file. It assigns the value \"Custom.scpf\" to specify a custom SQL Server filter file (`.scpf`) for Redgate Compare integration, overriding the default `Filter.scpf`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Filter File Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver]\nfilterFile = \"Custom.scpf\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GCSM Project ID in Flyway TOML File\nDESCRIPTION: Shows how to set the GCSM project ID within the `[flyway.gcsm]` section of a TOML configuration file using the `project` key.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Google Cloud Secret Manager Namespace/Flyway Google Cloud Secret Manager Project Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.gcsm]\nproject = \"quixotic-ferret-345678\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Debug Output with findstr (Windows command line)\nDESCRIPTION: This snippet demonstrates how to filter debug output from Flyway using `findstr` in Windows command line. The `-X` flag enables debug output, and `findstr /v` is used to exclude lines containing a specific term.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Command-line.md#_snippet_18\n\nLANGUAGE: batch\nCODE:\n```\nflyway migrate -X | findstr /v /c:\"term-to-filter-out\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Ignore Permissions in Flyway TOML Configuration\nDESCRIPTION: This TOML configuration snippet demonstrates how to set the `ignorePermissions` option to `true` within the `[redgateCompare.sqlserver.options.ignores]` section. Enabling this setting causes Flyway to ignore permissions on database objects during SQL Server comparisons and deployments. The default value is `false`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Permissions Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignorePermissions = true\n```\n\n----------------------------------------\n\nTITLE: Setting `filterFile` under `[flyway.check]` in TOML Configuration\nDESCRIPTION: Illustrates configuring the filter file (`Filters.scpf`) within a TOML configuration file specifically under the `[flyway.check]` table. This method is supported for backwards compatibility but is planned for future deprecation in favor of `[redgateCompare]`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Filter File Setting.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway.check]\nfilterFile=\"Filters.scpf\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Loggers in Properties File\nDESCRIPTION: Sets the `flyway.loggers` property in a standard Java .properties configuration file. Assigns 'auto' to enable Flyway's logger auto-detection.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Loggers Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.loggers=auto\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Server Kerberos Login File in Properties Configuration File\nDESCRIPTION: This snippet details setting the Kerberos login configuration file path in a standard properties file for Flyway. The key flyway.sqlserver.kerberos.login.file is assigned the path to the SQLJDBCDriver.conf file, enabling Kerberos authentication for SQL Server connections configured via this properties file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Server Namespace/Flyway SQL Server Kerberos Login File Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.sqlserver.kerberos.login.file=/path/to/SQLJDBCDriver.conf\n```\n\n----------------------------------------\n\nTITLE: Flyway Tablespace Configuration in TOML\nDESCRIPTION: Configures the Flyway tablespace within a TOML configuration file.  The `tablespace` key under the `flyway` section specifies the desired tablespace.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Tablespace Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\ntablespace = \"xyz\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GCSM Project ID in Flyway Properties File\nDESCRIPTION: Illustrates how to configure the GCSM project ID in a standard Java properties file using the `flyway.gcsm.project` key.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Google Cloud Secret Manager Namespace/Flyway Google Cloud Secret Manager Project Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.gcsm.project=quixotic-ferret-345678\n```\n\n----------------------------------------\n\nTITLE: Configuring Minor Rules in Flyway TOML File - TOML\nDESCRIPTION: This snippet shows how to specify minor code analysis rules in a Flyway configuration file using TOML syntax. Add or edit the [flyway.check] section and assign an array of rule codes to the minorRules property. This configuration is loaded automatically by Flyway at runtime, and the array can contain multiple rule IDs as strings. Ensure Flyway version supports TOML configuration and that the rules exist.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Minor Rules Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.check]\nminorRules = [\"L002\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Server Clean Mode with Properties\nDESCRIPTION: This snippet shows how to set the `flyway.sqlserver.clean.mode` and `flyway.sqlserver.clean.schemas.exclude` parameters within a properties configuration file.  It configures the clean mode to 'all' and excludes specific schemas from being dropped. This provides customization of the clean command by specifying modes and schemas to be excluded.  Requires a Flyway properties configuration file.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Server Namespace/Flyway SQL Server Clean Namespace/Flyway SQL Server Clean Mode Setting.md#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nflyway.sqlserver.clean.mode=all\nflyway.sqlserver.clean.schemas.exclude=schema1,schema2\n```\n\n----------------------------------------\n\nTITLE: Setting installedBy parameter in Gradle build script\nDESCRIPTION: Example of setting the installedBy parameter to 'ci-pipeline' in a Gradle build script for Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Installed By Setting.md#_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nflyway {\n    installedBy = 'ci-pipeline'\n}\n```\n\n----------------------------------------\n\nTITLE: TOML configuration example for specifying 'noneOf' tag filter in Flyway\nDESCRIPTION: This snippet provides a sample TOML configuration to set the 'noneOf' tags in Flyway's configuration file. It illustrates how to define an array of tags that migrations must not contain to be selected, enabling automated migration filtering based on tags.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Tags Namespace/Flyway Tags None Of Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway.tags]\nnoneOf = [\"tagA\", \"tagB\", \"tagC\"]\n```\n\n----------------------------------------\n\nTITLE: Configure includeSourceTables in TOML\nDESCRIPTION: This TOML snippet shows how to set the `includeSourceTables` option to `true` within a Flyway TOML configuration file for Redgate Compare Oracle data options. This configuration ensures that tables present only in the source database are included in the data comparison.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Data Comparison Options Namespace/Oracle Data Include Source Tables Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.oracle.data.options.comparison]\nincludeSourceTables = true\n```\n\n----------------------------------------\n\nTITLE: Using Flyway CLI to set baseline filename\nDESCRIPTION: This code snippet shows how to specify the baseline filename via the Flyway command-line interface using the generate command with the -baselineFilename parameter. It facilitates setting the filename for the generated baseline migration, which must be a string, and is used during database migration setup.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Baseline Filename Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway generate -baselineFilename=B001__baseline.sql\n```\n\n----------------------------------------\n\nTITLE: Enabling `disableForeignKeys` in TOML Configuration for Flyway Redgate Compare\nDESCRIPTION: This TOML configuration snippet demonstrates how to enable the `disableForeignKeys` option by setting it to `true`. This setting is placed within the `[redgateCompare.sqlserver.data.options.deployment]` table in a Flyway TOML configuration file to modify the behavior of foreign keys during SQL Server data deployment.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Data Deployment Options Namespace/SQL Server Data Disable Foreign Keys Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.data.options.deployment]\ndisableForeignKeys = true\n```\n\n----------------------------------------\n\nTITLE: Accessing Gradle Properties in build.gradle\nDESCRIPTION: Illustrates how to access Flyway configuration values defined in `gradle.properties` or passed via command-line properties within the `build.gradle` script using `project.ext`. While the standard `flyway {}` block often handles this implicitly, this shows explicit access.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Gradle Task.md#_snippet_10\n\nLANGUAGE: Groovy\nCODE:\n```\nproject.ext['flyway.user']='myUsr'\nproject.ext['flyway.password']='mySecretPwd'\nproject.ext['flyway.schemas']='schema1,schema2,schema3'\nproject.ext['flyway.placeholders.keyABC']='valueXYZ'\nproject.ext['flyway.placeholders.otherplaceholder']='value123'\n```\n\n----------------------------------------\n\nTITLE: Enabling checkDriftOnMigrate in Flyway TOML Configuration\nDESCRIPTION: Shows how to configure automatic drift checks in a Flyway TOML configuration file by setting `checkDriftOnMigrate=true` within the `[flyway]` section. This configuration also requires setting the `email`, `token`, and `publishResult` parameters.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Drift On Migrate Setting.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway]\nemail=\"foo.bar@red-gate.com\"\ntoken=\"1234ABCD\"\npublishResult=true\ncheckDriftOnMigrate=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway Placeholder Suffix in Properties File\nDESCRIPTION: Illustrates setting the `flyway.placeholderSuffix` property in a standard Java-style properties configuration file. This configures the placeholder suffix when the properties file is loaded by Flyway.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Placeholder Suffix Setting.md#_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nflyway.placeholderSuffix=$$\n```\n\n----------------------------------------\n\nTITLE: Setting compressTemporaryFiles in TOML\nDESCRIPTION: This snippet demonstrates how to enable the `compressTemporaryFiles` option within a TOML configuration file for Redgate SQL Compare. Enabling this option compresses temporary files during data comparison, which reduces the risk of running out of disk space when comparing large databases. The value is a boolean, and setting it to `true` enables the compression.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Data Comparison Options Namespace/SQL Server Data Compress Temporary Files Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.data.options.comparison]\ncompressTemporaryFiles = true\n```\n\n----------------------------------------\n\nTITLE: Initializing Flyway Project (CLI) - Shell\nDESCRIPTION: This snippet initializes a new Flyway project using the Flyway CLI. It highlights that the CLI command should be run from the target project directory. It also sets the database type and project name through command-line arguments. Requires Flyway CLI version 11.0.0 or later and a Teams/Enterprise license.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Migrating from flyway-dev to flyway CLI.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ mkdir C:\\Users\\redgate\\Documents\\SqlServerProject\n$ cd C:\\Users\\redgate\\Documents\\SqlServerProject\n$ flyway init \\\"-init.projectName=SqlServerProject\\\" \\\"-init.databaseType=sqlserver\\\"\n```\n\n----------------------------------------\n\nTITLE: Setting includeStorageCompression in TOML\nDESCRIPTION: This TOML snippet demonstrates how to set the `includeStorageCompression` option to `true` within the `redgateCompare.oracle.options.storage` section.  This setting ensures that compression clauses are included when comparing Oracle database storage using Redgate Compare. The option is a boolean, and setting it to `true` includes the compression clause.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Storage Options Namespace/Oracle Include Storage Compression Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.oracle.options.storage]\nincludeStorageCompression = true\n```\n\n----------------------------------------\n\nTITLE: Setting buildCherryPick in TOML Configuration File\nDESCRIPTION: Example of how to configure the buildCherryPick parameter in a TOML configuration file. The page notes this is possible but unlikely to be a desirable approach for this particular setting.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Snapshot Namespace/Flyway Snapshot Build Cherry Pick Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.snapshot]\nbuildCherryPick = [ \"001\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreDoubleQuotesInPlSqlBlocks in TOML\nDESCRIPTION: This snippet demonstrates how to configure the `ignoreDoubleQuotesInPlSqlBlocks` option in a TOML configuration file.  This option controls whether double quotes surrounding identifiers within PL/SQL blocks should be ignored during database comparison. Setting it to `true` will ignore the differences.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Ignore Options Namespace/Oracle Ignore Double Quotes In PlSql Blocks Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.oracle.options.ignores]\nignoreDoubleQuotesInPlSqlBlocks = true\n```\n\n----------------------------------------\n\nTITLE: Enabling Native Connectors via Environment Variable - Flyway - Properties\nDESCRIPTION: Sets the FLYWAY_NATIVE_CONNECTORS environment variable to 'true' to enable Flyway's new Native Connectors engine on Redgate editions. No dependencies other than environmental variable configuration are required. Set to 'false' to disable this feature.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Using Native Connectors to connect to MongoDB.md#_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nFLYWAY_NATIVE_CONNECTORS=true\n\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for SQL Server Container Build\nDESCRIPTION: This Dockerfile builds a custom SQL Server container image based on Microsoft's latest SQL Server image. It copies an entrypoint script and sets it as the container's entrypoint, enabling custom startup behavior for the database container.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Provisioner Setting/Docker Provisioner.md#_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM mcr.microsoft.com/mssql/server:2022-latest\n\nCOPY entrypoint.sh entrypoint.sh\n\nENTRYPOINT [ \"/bin/bash\", \"entrypoint.sh\" ]\n```\n\n----------------------------------------\n\nTITLE: Setting `disableDmlTriggers` in Flyway TOML Configuration\nDESCRIPTION: This TOML configuration snippet shows how to enable the disabling of DML triggers during SQL Server data deployment. Setting `disableDmlTriggers` to `true` within the `[redgateCompare.sqlserver.data.options.deployment]` section instructs Flyway (using Redgate Compare) to generate deployment scripts that disable DML triggers on affected tables/views before data changes and re-enable them afterwards.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Data Deployment Options Namespace/SQL Server Data disable DML Triggers Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.data.options.deployment]\ndisableDmlTriggers = true\n```\n\n----------------------------------------\n\nTITLE: Configuring dataContainerLifetime in Flyway TOML File\nDESCRIPTION: Illustrates how to configure the data container lifetime within a Flyway TOML configuration file. The `dataContainerLifetime` key is set under the `[environments.development.resolvers.clone]` table, with the value specifying the desired lifetime ('1h' in this example).\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Resolvers Namespace/Redgate Clone Resolver/Redgate Clone Resolver Data Container Lifetime Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[environments.development.resolvers.clone]\ndataContainerLifetime = \"1h\"\n```\n\n----------------------------------------\n\nTITLE: Setting skipDefaultCallbacks in TOML Configuration File\nDESCRIPTION: Shows how to configure `skipDefaultCallbacks` within a Flyway TOML configuration file. Setting this boolean parameter to `true` under the `[flyway]` section disables default callbacks.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Skip Default Callbacks Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nskipDefaultCallbacks = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Case-Sensitive Object Definition Mapping in Flyway with TOML\nDESCRIPTION: This snippet shows how to set the 'useCaseSensitiveObjectDefinition' option in the redgateCompare SQL Server mapping section using a TOML configuration file. Enabling this Boolean setting ensures that object names are mapped with case sensitivity, which is essential when comparing databases on case-sensitive SQL Servers. Set 'true' for strict matching of object names (tables, views, columns, etc.); required when working with case-sensitive sort orders. No external dependencies beyond Flyway and a TOML-compatible environment are needed.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Data Mapping Options Namespace/SQL Server Data Use Case Sensitive Object Definition Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.data.options.mapping]\nuseCaseSensitiveObjectDefinition = true\n```\n\n----------------------------------------\n\nTITLE: Setting skipDefaultCallbacks via Flyway Command Line (Powershell)\nDESCRIPTION: Demonstrates how to set the `skipDefaultCallbacks` parameter to `true` using the Flyway command-line interface. This command executes the `info` command while skipping the default callbacks.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Skip Default Callbacks Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n. flyway -skipDefaultCallbacks=\"true\" info\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Migration File Suffix - Flyway - TOML\nDESCRIPTION: Configures Flyway to recognize migration files with the '.json' extension for migration discovery. This should be set in the '[flyway]' block of the TOML configuration to enable JSON migration support for MongoDB. Only takes effect if JSON-based migrations are used.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Using Native Connectors to connect to MongoDB.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nsqlMigrationSuffixes = [\".json\"]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring 'ignoreCaseDifferencesInPlSqlBlocks' in TOML for Flyway Oracle\nDESCRIPTION: This snippet demonstrates how to enable the 'ignoreCaseDifferencesInPlSqlBlocks' boolean setting within a TOML configuration file for Flyway's Oracle database comparison. Setting this parameter to true allows case insensitivity for object creation scripts, excluding string literals and quoted identifiers.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Ignore Options Namespace/Oracle Ignore Case Differences In PlSql Blocks Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.ignores]\nignoreCaseDifferencesInPlSqlBlocks = true\n```\n\n----------------------------------------\n\nTITLE: Configuring baseline filename in TOML configuration file\nDESCRIPTION: This snippet illustrates how to configure the baseline filename within a TOML configuration file under the [flyway.generate] section. It allows specifying the filename as a string value, which is useful for automating or version-controlling migration settings, although it is generally discouraged to set this in configuration files.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Baseline Filename Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.generate]\nbaselineFilename = \"B001__baseline.sql\"\n```\n\n----------------------------------------\n\nTITLE: Flyway Diff Build Version Command-line Example (Bash)\nDESCRIPTION: This bash script example demonstrates the use of the `buildVersion` parameter in a Flyway diff operation. It specifies the source as a schema model and the target as migrations, setting the build version to '001'. This configuration is relevant when the source or target is migrations to indicate build environment migration. It is used from the command line interface.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DIff Namespace/Flyway Diff Build Version Setting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./flyway diff -source=\"schemaModel\" -target=\"migrations\" -buildVersion=\"001\"\n```\n\n----------------------------------------\n\nTITLE: Chaining Prepare and Deploy Inline with Flyway CLI - Shell\nDESCRIPTION: Illustrates a chained command using Flyway CLI where 'prepare' and 'deploy' are executed sequentially within a single instruction, streamlining deployment automation. All arguments (source, target, and environment) must be specified; Flyway must support inline chaining of these commands. This approach minimizes manual steps by combining preparation and deployment actions for the specified environment.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Deploy.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nflyway prepare deploy -source=schemaModel -target=production -environment=production\n```\n\n----------------------------------------\n\nTITLE: Configure ignoreDmlTriggers in TOML - Redgate Compare SQL Server\nDESCRIPTION: Configures the `ignoreDmlTriggers` option in a TOML configuration file for Redgate Compare for SQL Server. Setting this to `true` instructs Redgate Compare to ignore DML triggers during database comparisons and deployments. This option is found under the `redgateCompare.sqlserver.options.ignores` section.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore DML Triggers Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreDmlTriggers = true\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreSequenceMinValue Option in TOML Configuration File\nDESCRIPTION: Example of setting the ignoreSequenceMinValue option to true in a TOML configuration file. This setting instructs Flyway to ignore the MINVALUE property of sequences when comparing Oracle databases, but the MINVALUE will still be deployed if you deploy a sequence.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Ignore Options Namespace/Oracle Ignore Sequence MINVALUE Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.ignores]\nignoreSequenceMinValue = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway SQL Migration Suffixes\nDESCRIPTION: This TOML snippet shows how to configure Flyway to use `.js` files as SQL migration files for MongoDB. It sets the `sqlMigrationSuffixes` configuration option to an array containing only the `.js` suffix.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/MongoDB.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[flyway]\nsqlMigrationSuffixes = [\".js\"]\n```\n\n----------------------------------------\n\nTITLE: Viewing SQL Diff for a Specific Change with Flyway diffText (Bash)\nDESCRIPTION: This command queries the SQL diff for a provided change ID using the 'flyway diffText' command and the '-diffText.changes' argument. The output includes the explicit SQL required to create the changed object (e.g., a table) along with table constraints. Useful for reviewing generated SQL before applying. Requires Flyway installation and access to the relevant diff artifact.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Flyway Desktop migrations workflow with Flyway CLI.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ flyway diffText \"-diffText.changes=n6OaP76s3hsLYT8jwdpnl5.WaJ8\"\n\nFlyway Enterprise Edition {{ site.flywayVersion }} by Redgate\nLicensed to red-gate.com (license ID 1174ed6b-b10e-41bd-9a1b-285ddc3239c7)\n\nSee release notes here: https://rd.gt/416ObMi\n--- none\n+++ Table/dbo.TestTable3\nCREATE TABLE [dbo].[TestTable3]\n(\n[Id] [int] NOT NULL,\n[Name] [nvarchar] (255) NOT NULL\n)\nGO\nALTER TABLE [dbo].[TestTable3] ADD CONSTRAINT [PK__TestTabl__3214EC07250C0CE5] PRIMARY KEY CLUSTERED ([Id])\nGO\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreSequenceCurrentValue in TOML\nDESCRIPTION: This snippet demonstrates how to configure the `ignoreSequenceCurrentValue` option within a Flyway TOML configuration file. It sets the boolean value for the option under the `[redgateCompare.oracle.options.ignores]` section to control whether sequence current values are ignored during comparison.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Ignore Options Namespace/Oracle Ignore Sequence Current Value Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.ignores]\nignoreSequenceCurrentValue = true\n```\n\n----------------------------------------\n\nTITLE: Enabling Storage Partitioning Comparison in TOML\nDESCRIPTION: This snippet shows how to enable the inclusion of storage partitioning in Redgate Compare for Oracle databases using a TOML configuration file. Setting `includeStoragePartitioning` to `true` ensures that table and index partitioning are compared and scripted. This also impacts how LOBs and VARRAYs are handled during the comparison process.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Storage Options Namespace/Oracle Include Storage Partitioning Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.oracle.options.storage]\nincludeStoragePartitioning = true\n```\n\n----------------------------------------\n\nTITLE: Validating Migration Sync Between Schema Model and Shadow Database with Flyway CLI (Shell)\nDESCRIPTION: This command validates that the schema model and migrations in the shadow database are consistent after migrations have been applied. By running Flyway's 'diff', the user verifies all schema changes are represented and no unexpected differences exist. This is crucial for ensuring version control accuracy and clean environment synchronization. Depends on: latest migrations and schema model; requires a functional shadow environment. Output: diff artifact and 'No differences found' upon success.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Flyway Desktop migrations workflow with Flyway CLI.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ flyway diff \"-diff.source=schemaModel\" \"-diff.target=migrations\" \"-diff.buildEnvironment=shadow\"\n\nFlyway Enterprise Edition {{ site.flywayVersion }} by Redgate\nLicensed to red-gate.com (license ID 1174ed6b-b10e-41bd-9a1b-285ddc3239c7)\n\nSee release notes here: https://rd.gt/416ObMi\nSuccessfully validated 3 migrations (execution time 00:00.016s)\nCurrent version of schema [dbo]: 001.20241209164727\nMigrating schema [dbo] to version \"002.20241210110201 - NewTableAdded\"\nSuccessfully applied 1 migration to schema [dbo], now at version v002.20241210110201 (execution time 00:00.028s)\ndiff artifact generated: C:\\Users\\Flyway\\AppData\\Local\\Temp\\flyway.artifact.diff\n+-----------------------------+--------+-------------+--------+------+\n| Id                          | Change | Object Type | Schema | Name |\n+-----------------------------+--------+-------------+--------+------+\n| No differences found                                               |\n+-----------------------------+--------+-------------+--------+------+\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreMaterializedViewStartWithValue in TOML\nDESCRIPTION: This code snippet shows how to configure the `ignoreMaterializedViewStartWithValue` option within a TOML configuration file for Flyway. Setting it to `true` instructs Flyway to ignore the `START WITH` value of materialized views when comparing schemas. The setting is located under the `redgateCompare.oracle.options.ignores` section.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Ignore Options Namespace/Oracle Ignore Materialized View START WITH Value Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.oracle.options.ignores]\nignoreMaterializedViewStartWithValue = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignore SSMS Extended Properties in TOML\nDESCRIPTION: This snippet demonstrates how to configure the `ignoreInternallyUsedMicrosoftExtendedProperties` option within a Flyway TOML configuration file. Setting this boolean value to `true` instructs Flyway's SQL Server comparison engine to disregard extended properties that are used internally by SSMS designer tools, preventing them from being included in generated migration scripts.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Internally Used Microsoft Extended Properties Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreInternallyUsedMicrosoftExtendedProperties = true\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreMigrationScripts in Redgate SQL Server TOML Settings - TOML\nDESCRIPTION: This snippet demonstrates how to explicitly enable the ignoreMigrationScripts option in a TOML configuration file for Redgate SQL Server projects. Setting ignoreMigrationScripts to true instructs the comparison engine to disregard migration scripts, which can affect which changes are detected or deployed during compare operations. Requires a properly structured TOML file under a redgateCompare.sqlserver.options.behavior section. No parameters other than the Boolean value (true/false) are accepted.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Behavior Options Namespace/SQL Server Ignore Migration Scripts Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.behavior]\nignoreMigrationScripts = true\n```\n\n----------------------------------------\n\nTITLE: Configuring undoFilename in TOML Configuration File\nDESCRIPTION: Example of how to specify the undoFilename parameter in a TOML configuration file for Flyway. Though noted as unlikely to be desirable in a config file, this shows the correct syntax for configuration.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Undo Filename Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.generate]\nundoFilename = \"U001__dropTable.sql\"\n```\n\n----------------------------------------\n\nTITLE: Configuring jdbcProperties Legacy Command-line (PowerShell)\nDESCRIPTION: Shows how to pass a specific JDBC property, `accessToken`, directly as a command-line argument when using a legacy Flyway configuration (.conf file). This property is then passed to the JDBC driver during connection establishment. Requires a Flyway installation and a legacy project structure.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment JDBC Properties Namespace.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -jdbcProperties.accessToken=my-access-token info\n```\n\n----------------------------------------\n\nTITLE: Generating Migrations for Selected Changes via Stdin with Flyway (Bash)\nDESCRIPTION: This snippet shows how to pipe a change ID into the 'flyway generate' command to create migration scripts only for specific database changes. Using '-generate.changes=-' tells Flyway to read change identifiers from stdin. The command also specifies generation options for both versioned and undo migrations. Outputs include details about generated migration files. Requires an existing diff artifact and necessary file system access.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials/Tutorial - Flyway Desktop migrations workflow with Flyway CLI.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ echo \"rlWm41EHCIp8krJRqZ.PTVIx2fs\" | flyway generate \"-generate.changes=-\" \"-generate.types=versioned,undo\" \"-generate.description=TestTable1\"\n\nFlyway Enterprise Edition {{ site.flywayVersion }} by Redgate\nLicensed to red-gate.com (license ID 1174ed6b-b10e-41bd-9a1b-285ddc3239c7)\n\nSee release notes here: https://rd.gt/416ObMi\nUsing diff artifact: C:\\Users\\Flyway\\AppData\\Local\\Temp\\flyway.artifact.diff\nGenerating undo migration: C:\\Users\\Flyway\\FlywayProjects\\SqlServerProject\\migrations\\U003_20241210113916__TestTable1.sql\nGenerating versioned migration: C:\\Users\\Flyway\\FlywayProjects\\SqlServerProject\\migrations\\V003_20241210113916__TestTable1.sql\nGenerated: C:\\Users\\Flyway\\FlywayProjects\\SqlServerProject\\migrations\\V003_20241210113916__TestTable1.sql\nGenerated: C:\\Users\\Flyway\\FlywayProjects\\SqlServerProject\\migrations\\U003_20241210113916__TestTable1.sql\n```\n\n----------------------------------------\n\nTITLE: Setting ignoreFileGroupsPartitionSchemesAndPartitionFunctions in TOML\nDESCRIPTION: This TOML configuration snippet shows how to enable the 'ignoreFileGroupsPartitionSchemesAndPartitionFunctions' option within the '[redgateCompare.sqlserver.options.ignores]' section of a Flyway configuration file. Setting this to 'true' (the default) instructs Flyway's comparison engine to disregard differences related to filegroups, partition schemes, and partition functions when comparing SQL Server databases.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore File Groups Partition Schemes And Partition Functions Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreFileGroupsPartitionSchemesAndPartitionFunctions = true\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLID via TOML\nDESCRIPTION: This TOML configuration snippet shows how to set the `sqlId` property within the `flyway.db2z` section. This configuration is suitable for projects using TOML configuration files.  The `sqlId` is set to `example_group`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DB2 zOS Namespace/Flyway Db2 zOS SQL ID Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.db2z]\nsqlId=\"example_group\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreSystemPartitions in TOML File for Flyway Oracle Comparison\nDESCRIPTION: This snippet demonstrates how to enable the ignoreSystemPartitions option in a Toml configuration file for Flyway's Oracle comparison feature. It allows ignoring system partitions by setting the option to true within the 'redgateCompare.oracle.options.ignores' section.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Ignore Options Namespace/Oracle Ignore System Partitions Setting.md#_snippet_0\n\nLANGUAGE: Toml\nCODE:\n```\n[redgateCompare.oracle.options.ignores]\nignoreSystemPartitions = true\n```\n\n----------------------------------------\n\nTITLE: Invoking Mongosh with TLS for MongoDB in Shell\nDESCRIPTION: This shell command demonstrates invoking the Mongosh shell to connect securely to a MongoDB instance with TLS enabled, using a specific Certificate Authority file. The '--tls' and '--tlsCAFile' options ensure encrypted communication and server certificate verification. It requires Mongosh installed, the CA PEM file (here at '/tmp/certs/my_certificates.pem'), and connection details for the MongoDB instance. Inputs: connection URI, CA file path. Output: Secure Mongosh session to the database. Note: Replace 'localhost:27017' with your actual server address; user authentication parameters may also be required.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Security Configuration.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmongosh \"mongodb://localhost:27017\" --tls --tlsCAFile=\"/tmp/certs/my_certificates.pem\"\n```\n\n----------------------------------------\n\nTITLE: Flyway Properties File Configuration\nDESCRIPTION: Configures the Oracle Kerberos cache file in a properties file.  The `flyway.oracle.kerberosCacheFile` property is set to the desired cache file location. This file is read when Flyway is initialized.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle Kerberos Cache File Setting.md#_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nflyway.oracle.kerberosCacheFile=/temp/krb5cc_123\n```\n\n----------------------------------------\n\nTITLE: Adding Flyway TiDB Dependency via Maven\nDESCRIPTION: This Maven snippet defines the dependency needed to enable TiDB support within a Flyway-enabled Java project. It specifies the group ID, artifact ID, and version of the Flyway TiDB connector, which facilitates database migrations. The dependency must be added to the pom.xml of the project, and the project has to be rebuilt to make these new dependencies accessible.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/TiDB (Titanium DB).md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-database-tidb</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Password via Command-line (Basic) - powershell\nDESCRIPTION: This snippet demonstrates how to provide the database password directly using the command-line flag `-password`. This method is useful for simple configurations or scripting.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Environments Namespace/Environment Password Setting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./flyway -password=mysecretpassword info\n```\n\n----------------------------------------\n\nTITLE: Configuring CLR Assembly Deployment in Flyway with TOML\nDESCRIPTION: This TOML snippet configures the dontUseAlterAssemblyToChangeClrObjects option in a Flyway SQL Server project's configuration. Setting this boolean value to true ensures that any CLR assemblies and dependent objects are dropped and recreated instead of being updated through ALTER ASSEMBLY. This configuration can only be set in a TOML file and requires placing this block under the redgateCompare.sqlserver.options.behavior section. The expected input is a boolean value, and there are no explicit outputs beyond the deployment behavior change in affected migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Behavior Options Namespace/SQL Server Dont Use Alter Assembly To Change Clr Objects Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.options.behavior]\ndontUseAlterAssemblyToChangeClrObjects = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault URL Programmatically in Java\nDESCRIPTION: Provides code snippet for setting the Vault URL programmatically in a Java application using Flyway's plugin registration interface, suitable for dynamic runtime configuration within Java-based projects.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Vault Namespace/Flyway Vault URL Setting.md#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nVaultConfigurationExtension vaultConfigurationExtension = configuration.getPluginRegister().getPlugin(VaultConfigurationExtension.class)\nvaultConfigurationExtension.setVaultUrl(\"http://localhost:8200/v1/\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle SQL*Plus Support in Maven Plugin\nDESCRIPTION: Shows how to enable SQL*Plus support within a Maven plugin configuration by setting the 'oracleSqlplus' parameter to true. Useful for automated builds.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Oracle Namespace/Flyway Oracle SQLPlus Setting.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<configuration>\n    <oracleSqlplus>true</oracleSqlplus>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyway CQL Suffixes in TOML\nDESCRIPTION: Demonstrates how to configure the `sqlMigrationSuffixes` parameter within the `[flyway]` section of a TOML configuration file to include `.cql` extensions. This setting allows Flyway to recognize Cassandra Query Language files as valid SQL migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Cassandra Database.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[flyway]\nsqlMigrationSuffixes = [\".cql\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLID via Maven\nDESCRIPTION: This XML snippet shows how to configure the SQLID within a Maven pom.xml file. The `db2zSqlId` property is defined under the `pluginConfiguration` section. This sets the SQLID to use in Flyway operations. The value here is `example_group`.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway DB2 zOS Namespace/Flyway Db2 zOS SQL ID Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <pluginConfiguration>\n        <db2zSqlId>example_group</db2zSqlId>\n    </pluginConfiguration>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting Flyway Stream Option via Java API\nDESCRIPTION: This Java snippet shows how to configure the `stream` option programmatically using the Flyway API. The `stream(true)` method is called on a Flyway configuration object. The `load()` method is then called, effectively setting the configuration. The program expects the Flyway library to be present. The output is Flyway configured to stream migrations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Stream Setting.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlyway.configure()\n    .stream(true)\n    .load()\n```\n\n----------------------------------------\n\nTITLE: Specifying SQL Server Kerberos Login File in Maven Plugin Configuration\nDESCRIPTION: This XML snippet explains how to configure the SQL Server Kerberos login file path in Maven's Flyway plugin configuration. Under the <pluginConfiguration> section, the <sqlserverKerberosLoginFile> element should contain the full path to SQLJDBCDriver.conf, enabling Kerberos authentication during Flyway executions within Maven builds.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway SQL Server Namespace/Flyway SQL Server Kerberos Login File Setting.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n    <pluginConfiguration>\n        <sqlserverKerberosLoginFile>/path/to/SQLJDBCDriver.conf</sqlserverKerberosLoginFile>\n    </pluginConfiguration>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Kerberos Authentication Configuration for Oracle in Flyway.conf\nDESCRIPTION: Configuration properties for authenticating to Oracle databases using Kerberos, specifying the Kerberos configuration file and cache file locations.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Database Driver Reference/Oracle Database.md#_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\nflyway.oracle.kerberosConfigFile=/etc/krb5.conf\nflyway.oracle.kerberosCacheFile=/tmp/krb5cc_123\n```\n\n----------------------------------------\n\nTITLE: Configuring Applied Migrations in TOML Configuration File\nDESCRIPTION: Example of how to specify applied migrations in a TOML configuration file. This defines an array of migration IDs that will be considered already applied when generating snapshots via the check command.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Check Namespace/Flyway Check Applied Migrations Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.check]\nappliedMigrations = [\"1\", \"2\", \"3\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Ignore NOCHECK Options for SQL Server in Flyway - TOML\nDESCRIPTION: Defines the boolean configuration option 'ignoreNocheckAndWithNocheck' in the TOML config file for Flyway projects. When set to true, this option forces constraints to always be applied regardless of NOCHECK or WITH NOCHECK arguments on foreign keys and check constraints. It affects how Flyway performs migrations and schema comparisons for SQL Server projects using Redgate Compare integration. This option can only be set in the TOML configuration and is reflected in Flyway Desktop comparison settings.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Nocheck And With Nocheck Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreNocheckAndWithNocheck = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignore Index Names Option in Flyway (TOML)\nDESCRIPTION: This TOML code snippet shows how to configure Flyway's Redgate comparison options to ignore index names when comparing schemas in Oracle projects. The setting is applied by adding the ignoreIndexNames property under the redgateCompare.oracle.options.ignores section and setting its value to true. No additional dependencies are required aside from Flyway Desktop and a valid TOML configuration file. The input is a TOML file, and the effect is that index name differences will be ignored during schema comparisons; the default is false unless explicitly set.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Ignore Options Namespace/Oracle Ignore Index Names Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.oracle.options.ignores]\nignoreIndexNames = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle Storage Logging Option in TOML Configuration File\nDESCRIPTION: A TOML configuration snippet for enabling the includeStorageLogging option, which includes the LOGGING | NOLOGGING clause in Oracle storage settings. This setting can only be configured in a TOML configuration file or through Flyway Desktop's comparison options for Oracle projects.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Storage Options Namespace/Oracle Include Storage Logging Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.storage]\nincludeStorageLogging = true\n```\n\n----------------------------------------\n\nTITLE: Flyway Generate Versioned Filename - TOML Configuration\nDESCRIPTION: This snippet shows how to configure the `flyway.generate.versionedFilename` parameter in a Flyway TOML configuration file.  This sets the default filename for generated versioned migrations when using the `flyway generate` command. It is unlikely this would be included in a config file but is supported.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Flyway Namespace/Flyway Generate Namespace/Flyway Generate Versioned Filename Setting.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[flyway.generate]\nversionedFilename = \"V001__addTable.sql\"\n```\n\n----------------------------------------\n\nTITLE: JSON Output Example\nDESCRIPTION: This snippet demonstrates the structure of the JSON output produced when a deployment script is generated. It includes fields indicating the script generation status, filename, included dependencies, and any warnings that occurred during the process. The `scriptFilename` parameter specifies the path to the generated SQL file.  The `includedDependencies` array lists any database objects that are dependencies, and the `warnings` array contains warning messages if any.  No dependencies are necessary for understanding this JSON.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Commands/Prepare.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scriptWasGenerated\": true,\n  \"scriptFilename\": \"C:\\\\workingDirectory\\\\D__deployment.sql\",\n  \"includedDependencies\": [\n    \"dbo.someDependency\"\n  ],\n  \"warnings\": [\n    {\n      \"type\": \"WARNING_TYPE\",\n      \"message\": \"Warning message\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignore Full-Text Indexing in Flyway SQL Server Comparison with TOML\nDESCRIPTION: This snippet demonstrates how to enable the 'ignoreFullTextIndexing' option by setting it to true in the TOML configuration file. This setting causes Flyway to ignore full-text catalogs and full-text indexes during database schema comparison and deployments for SQL Server projects. It requires placing the key under the [redgateCompare.sqlserver.options.ignores] section within the TOML file. Modifying this can only be done via configuration files or via Flyway Desktop in SQL Server projects.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare SQL Server Namespace/SQL Server Ignore Options Namespace/SQL Server Ignore Full Text Indexing Setting.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[redgateCompare.sqlserver.options.ignores]\nignoreFullTextIndexing = true\n```\n\n----------------------------------------\n\nTITLE: Setting Oracle suppressDependentAlterCompile Option in TOML\nDESCRIPTION: This TOML snippet demonstrates how to enable the 'suppressDependentAlterCompile' option within the Flyway Oracle compare behavior configuration. It sets the option to true to suppress all calculations and scripting related to performing an 'ALTER COMPILE' on dependent objects that would otherwise be deployed. This option is experimental and affects deployment behavior. It can only be configured via a TOML file and not through other means.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Configuration/Redgate Compare Namespace/Redgate Compare Oracle Namespace/Oracle Behavior Options Namespace/Oracle Suppress Dependent Alter Compile Setting.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[redgateCompare.oracle.options.behavior]\nsuppressDependentAlterCompile = true\n```\n\n----------------------------------------\n\nTITLE: Understanding Case Sensitivity of flyway_schema_history\nDESCRIPTION: This section explains why the internal 'flyway_schema_history' table can be case-sensitive due to quoted identifiers. It also notes that the table name can be configured via 'flyway.table' and highlights that this table is an internal detail subject to change.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Usage/Frequently Asked Questions.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Including Child Pages with Jekyll\nDESCRIPTION: This snippet includes the content of the `childPages.html` file within the current page. The `{% include childPages.html %}` directive instructs Jekyll to insert the content of the specified file at the point where it's placed. This implies that `childPages.html` likely contains the logic or presentation for displaying child pages, which could be a list of links, summaries, or any other relevant content. There are no external dependencies for this snippet, it is a built-in functionality of the Jekyll templating engine.\nSOURCE: https://github.com/flyway/flyway/blob/main/documentation/Reference/Tutorials.md#_snippet_0\n\nLANGUAGE: Jekyll\nCODE:\n```\n{% include childPages.html %}\n```"
  }
]