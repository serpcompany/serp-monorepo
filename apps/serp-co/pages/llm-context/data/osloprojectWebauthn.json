[
  {
    "owner": "oslo-project",
    "repo": "webauthn",
    "content": "TITLE: Parsing and Validating WebAuthn Attestation Object in TypeScript\nDESCRIPTION: Demonstrates how to parse an attestation object and perform key validation checks including user presence, verification, relying party ID hash, and supported algorithms. Shows interaction with COSE key types and ES256 algorithm verification.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAttestationObject, COSEKeyType, coseAlgorithmES256 } from \"@oslojs/webauthn\";\n\nconst { attestationStatement, authenticatorData } = await parseAttestationObject(encoded);\nif (!authenticatorData.userPresent || !authenticatorData.userVerified) {\n\tthrow new Error(\"User must be verified\");\n}\n\nif (!authenticatorData.verifyRelyingPartyIdHash(\"example.com\")) {\n\tthrow new Error(\"Invalid relying party ID hash\");\n}\nif (authenticatorData.credential === null) {\n\tthrow new Error(\"Expected credential\");\n}\nif (authenticatorData.credential.publicKey.type() !== COSEKeyType.EC2) {\n\tthrow new Error(\"Unsupported algorithm\");\n}\nif (authenticatorData.credential.publicKey.algorithm() !== coseAlgorithmES256) {\n\tthrow new Error(\"Unsupported algorithm\");\n}\nconst publicKey = authenticatorData.credential.publicKey.ec2();\n```\n\n----------------------------------------\n\nTITLE: Verifying WebAuthn Attestation on Server Side in TypeScript\nDESCRIPTION: This server-side code verifies the attestation object and client data received from the client. It performs security checks on the attestation format, relying party ID, user verification flags, and cryptographic algorithms before storing the credential for future authentication.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/examples/registration.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tparseAttestationObject,\n\tAttestationStatementFormat,\n\tparseClientDataJSON,\n\tcoseAlgorithmES256,\n\tcoseEllipticCurveP256\n} from \"@oslojs/webauthn\";\nimport { ECDSAPublicKey, p256 } from \"@oslojs/crypto/ecdsa\";\n\n// Bytes sent from the client\nconst encodedAttestationObject = new Uint8Array();\nconst clientDataJSON = new Uint8Array();\n\nconst { attestationStatement, authenticatorData } = parseAttestationObject(encodedAttestationObject);\nif (attestationStatement.format !== AttestationStatementFormat.None) {\n\tthrow new Error(\"Invalid attestation statement format\");\n}\n// Use \"localhost\" for localhost\nif (!authenticatorData.verifyRelyingPartyIdHash(\"example.com\")) {\n\tthrow new Error(\"Invalid relying party ID hash\");\n}\nif (!authenticatorData.userPresent || !authenticatorData.userVerified) {\n\tthrow new Error(\"User must be present and verified\");\n}\nif (authenticatorData.credential === null) {\n\tthrow new Error(\"Missing credential\");\n}\nif (authenticatorData.credential.publicKey.algorithm() !== coseAlgorithmES256) {\n\tthrow new Error(\"Unsupported algorithm\");\n}\n\n// Parse the COSE key as an EC2 key\n// .rsa() for RSA, .okp() for EdDSA, etc\nconst cosePublicKey = authenticatorData.credential.publicKey.ec2();\nif (cosePublicKey.curve !== coseEllipticCurveP256) {\n\tthrow new Error(\"Unsupported algorithm\");\n}\n\nconst clientData = parseClientDataJSON(clientDataJSON);\nif (clientData.type !== ClientDataType.Create) {\n\tthrow new Error(\"Invalid client data type\");\n}\n\nif (!verifyChallenge(expectedChallenge)) {\n\tthrow new Error(\"Invalid challenge\");\n}\n// Use \"http://localhost:PORT\" for localhost\nif (clientData.origin !== \"https://example.com\") {\n\tthrow new Error(\"Invalid origin\");\n}\nif (clientData.crossOrigin !== null && clientData.crossOrigin) {\n\tthrow new Error(\"Invalid origin\");\n}\n\n// Store the credential ID, algorithm (ES256), and public key with the user's user ID\nconst credentialId = authenticatorData.credential.id;\nconst encodedPublicKey = new ECDSAPublicKey(p256, cosePublicKey.x, cosePublicKey.y).encodeSEC1Uncompressed();\n```\n\n----------------------------------------\n\nTITLE: Server-Side WebAuthn Authentication Verification with TypeScript\nDESCRIPTION: Verifies the WebAuthn authentication response from the client by parsing and validating the authenticator data, client data JSON, and signature. Uses Oslo.js libraries for cryptographic operations including ECDSA signature verification.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/examples/authentication.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tparseAuthenticatorData,\n\tAttestationStatementFormat,\n\tparseClientDataJSON,\n\tcreateAssertionSignatureMessage\n} from \"@oslojs/webauthn\";\nimport { decodeSEC1PublicKey, decodePKIXECDSASignature, p256, verifyECDSASignature } from \"@oslojs/crypto/ecdsa\";\nimport { sha256 } from \"@oslojs/crypto/sha2\";\n\n// Bytes sent from the client\nconst credentialId = new Uint8Array();\nconst signature = new Uint8Array();\nconst encodedAuthenticatorData = new Uint8Array();\nconst clientDataJSON = new Uint8Array();\n\nconst authenticatorData = parseAuthenticatorData(encodedAuthenticatorData);\n// Use \"localhost\" for localhost\nif (!authenticatorData.verifyRelyingPartyIdHash(\"example.com\")) {\n\tthrow new Error(\"Invalid relying party ID hash\");\n}\nif (!authenticatorData.userPresent || !authenticatorData.userVerified) {\n\tthrow new Error(\"User must be present and verified\");\n}\n\nconst clientData = parseClientDataJSON(clientDataJSON);\nif (clientData.type !== ClientDataType.Get) {\n\tthrow new Error(\"Invalid client data type\");\n}\n\nif (!verifyChallenge(expectedChallenge)) {\n\tthrow new Error(\"Invalid challenge\");\n}\n// Use \"http://localhost:PORT\" for localhost\nif (clientData.origin !== \"https://example.com\") {\n\tthrow new Error(\"Invalid origin\");\n}\nif (clientData.crossOrigin !== null && clientData.crossOrigin) {\n\tthrow new Error(\"Invalid origin\");\n}\n\n// Get public key and user ID from credential ID\nconst credential = getCredential(credentialId);\n// Decode DER-encoded signature\nconst ecdsaSignature = decodePKIXECDSASignature(signature);\nconst ecdsaPublicKey = decodeSEC1PublicKey(p256, credential.encodedPublicKey);\nconst hash = sha256(createAssertionSignatureMessage(encodedAuthenticatorData, clientDataJSON));\nconst valid = verifyECDSASignature(ecdsaPublicKey, hash, ecdsaSignature);\nif (valid) {\n\tconst userId = credential.userId;\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing and Validating Attestation Object in TypeScript\nDESCRIPTION: This snippet demonstrates how to use @oslojs/webauthn to parse an attestation object, verify user presence and verification, check the relying party ID hash, and validate the credential's public key type and algorithm.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAttestationObject, COSEKeyType, coseAlgorithmES256 } from \"@oslojs/webauthn\";\n\nconst { attestationStatement, authenticatorData } = await parseAttestationObject(encoded);\nif (!authenticatorData.userPresent || !authenticatorData.userVerified) {\n\tthrow new Error(\"User must be verified\");\n}\n\nif (!authenticatorData.verifyRelyingPartyIdHash(\"example.com\")) {\n\tthrow new Error(\"Invalid relying party ID hash\");\n}\nif (authenticatorData.credential === null) {\n\tthrow new Error(\"Expected credential\");\n}\nif (authenticatorData.credential.publicKey.type() !== COSEKeyType.EC2) {\n\tthrow new Error(\"Unsupported algorithm\");\n}\nif (authenticatorData.credential.publicKey.algorithm() !== coseAlgorithmES256) {\n\tthrow new Error(\"Unsupported algorithm\");\n}\nconst publicKey = authenticatorData.credential.publicKey.ec2();\n```\n\n----------------------------------------\n\nTITLE: Creating WebAuthn Credentials on Client Side in TypeScript\nDESCRIPTION: This code creates a new WebAuthn credential on the client device and sends the attestation data to the server. It uses navigator.credentials.create() to register a new passkey with ECDSA P-256 algorithm and requires user verification.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/examples/registration.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeBase64 } from \"@oslojs/encoding\";\n\nconst credential = await navigator.credentials.create({\n\tpublicKey: {\n\t\tchallenge,\n\t\tuser: {\n\t\t\tdisplayName: \"User\",\n\t\t\tid: userId,\n\t\t\tname: \"user@example.com\"\n\t\t},\n\t\trp: {\n\t\t\tname: \"My site\"\n\t\t},\n\t\tpubKeyCredParams: [\n\t\t\t{\n\t\t\t\talg: -7, // ECDSA with P-256 and SHA-256\n\t\t\t\ttype: \"public-key\"\n\t\t\t}\n\t\t],\n\t\tattestation: \"none\",\n\t\tauthenticatorSelection: {\n\t\t\tuserVerification: \"required\"\n\t\t}\n\t}\n});\n\nif (!(credential instanceof PublicKeyCredential)) {\n\tthrow new Error(\"Failed to create public key\");\n}\nif (!(credential.response instanceof AuthenticatorAttestationResponse)) {\n\tthrow new Error(\"Unexpected error\");\n}\n\nconst response = await fetch(\"/api/register\", {\n\tmethod: \"POST\",\n\tbody: JSON.stringify({\n\t\tattestationObject: encodeBase64(new Uint8Array(credential.response.attestationObject)),\n\t\tclientDataJSON: encodeBase64(new Uint8Array(credential.response.clientDataJSON))\n\t})\n});\n```\n\n----------------------------------------\n\nTITLE: Client-Side WebAuthn Authentication with TypeScript\nDESCRIPTION: Authenticates a user with WebAuthn by getting credentials from their device and sending them to the server. Uses navigator.credentials.get() API and encodes the credential data using base64 before sending it to the server via a POST request.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/examples/authentication.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeBase64 } from \"@oslojs/encoding\";\n\nconst credential = await await navigator.credentials.get({\n\tpublicKey: {\n\t\tchallenge,\n\t\tuserVerification: \"required\"\n\t}\n});\n\nif (!(credential instanceof PublicKeyCredential)) {\n\tthrow new Error(\"Failed to create public key\");\n}\nif (!(credential.response instanceof AuthenticatorAssertionResponse)) {\n\tthrow new Error(\"Unexpected error\");\n}\n\nconst response = await fetch(\"/api/register\", {\n\tmethod: \"POST\",\n\t// this example uses JSON but you can use something like CBOR to get something more compact\n\tbody: JSON.stringify({\n\t\tcredentialId: encodeBase64(new Uint8Array(credential.rawId)),\n\t\tsignature: encodeBase64(new Uint8Array(credential.response.signature)),\n\t\tauthenticatorData: encodeBase64(new Uint8Array(credential.response.authenticatorData)),\n\t\tclientDataJSON: encodeBase64(new Uint8Array(credential.response.clientDataJSON))\n\t})\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing WebAuthn Attestation Object in TypeScript\nDESCRIPTION: This snippet demonstrates how to parse an attestation object, check its format, and extract certificates from a Packed attestation statement. It uses the @oslojs/webauthn library to handle WebAuthn-specific data structures.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/examples/attestation.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseAttestationObject, AttestationStatementFormat } from \"@oslojs/webauthn\";\n\nconst { attestationStatement, authenticatorData } = parseAttestationObject(encodedAttestationObject);\nif (attestationStatement.format !== AttestationStatementFormat.Packed) {\n\tthrow new Error(\"Invalid attestation statement format\");\n}\nconst packed = attestationStatement.packed();\nconst certificates = packed.certificates;\n```\n\n----------------------------------------\n\nTITLE: Parsing Attestation Object in TypeScript for WebAuthn\nDESCRIPTION: This function parses an encoded attestation object. It takes a Uint8Array as input and returns an AttestationObject. The function can throw AttestationObjectParseError and AuthenticatorDataParseError.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/parseAttestationObject.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction parseAttestationObject(encoded: Uint8Array): AttestationObject;\n```\n\n----------------------------------------\n\nTITLE: Parsing Client Data JSON in WebAuthn (TypeScript)\nDESCRIPTION: This function parses the encoded client data JSON and returns a ClientData object. It can throw a ClientDataParseError if parsing fails. The function takes a Uint8Array as input, representing the encoded client data.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/parseClientDataJSON.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction parseClientDataJSON(encoded: Uint8Array): $$ClientData;\n```\n\n----------------------------------------\n\nTITLE: Verifying Relying Party ID Hash in WebAuthn AuthenticatorData in TypeScript\nDESCRIPTION: A method that takes a relying party ID string, hashes it, and compares the result with a stored hash value to verify authenticity. Returns a boolean indicating whether the hashes match.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/AuthenticatorData/verifyRelyingPartyIdHash.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction verifyRelyingPartyIdHash(relyingPartyId: string): boolean;\n```\n\n----------------------------------------\n\nTITLE: Creating WebAuthn Assertion Signature Message in TypeScript\nDESCRIPTION: A TypeScript function that generates a message for verifying WebAuthn assertion signatures. It takes authenticator data and client data JSON as Uint8Array parameters and returns the combined message as a Uint8Array.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/createAssertionSignatureMessage.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createAssertionSignatureMessage(authenticatorData: Uint8Array, clientDataJSON: Uint8Array): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Parsing Authenticator Data in TypeScript for WebAuthn\nDESCRIPTION: This function parses the encoded authenticator data and returns an AuthenticatorData object. It can throw an AuthenticatorDataParseError if parsing fails. The function takes a Uint8Array as input, representing the encoded authenticator data.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/parseAuthenticatorData.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction parseAuthenticatorData(encoded: Uint8Array): AuthenticatorData;\n```\n\n----------------------------------------\n\nTITLE: Defining AttestationObject Interface in TypeScript for WebAuthn\nDESCRIPTION: This TypeScript interface defines the structure of an AttestationObject, which is a parsed attestation object in WebAuthn. It contains two properties: attestationStatement of type AttestationStatement, and authenticatorData of type AuthenticatorData. These types are referenced from external files.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/AttestationObject.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AttestationObject {\n\tattestationStatement: $$AttestationStatement;\n\tauthenticatorData: $$AuthenticatorData;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WebAuthnCredential Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure of a WebAuthn credential. It includes the authenticator AAGUID as a Uint8Array, credential ID as Uint8Array, and a reference to a COSEPublicKey type.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/WebAuthnCredential.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ COSEPublicKey=/reference/main/COSEPublicKey\ninterface WebAuthnCredential {\n\tauthenticatorAAGUID: Uint8Array;\n\tid: Uint8Array;\n\tpublicKey: $$COSEPublicKey;\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor for AuthenticatorData in WebAuthn API (TypeScript)\nDESCRIPTION: Constructor for the AuthenticatorData class that takes the relying party ID hash, flags, signature counter, credential, and extensions as parameters. Returns the constructed instance.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/AuthenticatorData/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ AuthenticatorDataFlags=/reference/main/AuthenticatorDataFlags\n//$ WebAuthnCredential=/reference/main/WebAuthnCredential\nfunction constructor(\n\trelyingPartyIdHash: Uint8Array,\n\tflags: $$AuthenticatorDataFlags,\n\tsignatureCounter: number,\n\tcredential: $$WebAuthnCredential | null,\n\textensions: null\n): this;\n```\n\n----------------------------------------\n\nTITLE: Defining ClientData Interface in TypeScript for WebAuthn\nDESCRIPTION: Defines the structure of ClientData interface used in WebAuthn authentication. Includes properties for type, challenge, origin, crossOrigin status, and token binding information. References external types ClientDataType and TokenBinding.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/ClientData.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ ClientDataType=/reference/main/ClientDataType\n//$ TokenBinding=/reference/main/TokenBinding\ninterface ClientData {\n\ttype: $$ClientDataType;\n\tchallenge: Uint8Array;\n\torigin: string;\n\tcrossOrigin: boolean | null;\n\ttokenBinding: $$TokenBinding | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Properties Interface for AuthenticatorData in WebAuthn API (TypeScript)\nDESCRIPTION: Interface defining the properties of the AuthenticatorData class including relyingPartyIdHash, user presence and verification flags, signature counter, credential, and extensions.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/AuthenticatorData/index.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n//$ WebAuthnCredential=/reference/main/WebAuthnCredential\ninterface Properties {\n\trelyingPartyIdHash: Uint8Array;\n\tuserPresent: boolean;\n\tuserVerified: boolean;\n\tsignatureCounter: number;\n\tcredential: $$WebAuthnCredential | null;\n\textensions: null;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving COSE Algorithm ID in TypeScript\nDESCRIPTION: Method definition for retrieving the COSE algorithm ID (alg parameter) from a COSEPublicKey instance. The method returns a number and throws an Error if the algorithm parameter is undefined or has an invalid type.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/COSEPublicKey/algorithm.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction algorithm(): number;\n```\n\n----------------------------------------\n\nTITLE: Installing @oslojs/webauthn Package\nDESCRIPTION: Shows the npm command to install the @oslojs/webauthn package as a project dependency.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/index.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @oslojs/webauthn\n```\n\n----------------------------------------\n\nTITLE: Initializing COSEPublicKey Constructor in TypeScript\nDESCRIPTION: Constructor function for creating a new COSEPublicKey instance. Takes a decoded object parameter representing the COSE key data.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/COSEPublicKey/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(decoded: object): this;\n```\n\n----------------------------------------\n\nTITLE: Parsing COSE Key as EC2 Key in TypeScript\nDESCRIPTION: Method signature for the ec2() function which parses a COSE key as an elliptic curve (EC2) key. Returns a COSEEC2PublicKey object and throws an Error if parsing fails. Only supports keys where both x and y coordinates are defined. Does not check the key_ops parameter.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/COSEPublicKey/ec2.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ COSEEC2PublicKey=/reference/main/COSEEC2PublicKey\nfunction ec2(): $$COSEEC2PublicKey;\n```\n\n----------------------------------------\n\nTITLE: Defining AttestationStatementFormat Enum in TypeScript for WebAuthn\nDESCRIPTION: This enum defines all the supported attestation statement formats used in the WebAuthn API. These formats represent different ways that authenticators can attest to their provenance and characteristics during registration.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/AttestationStatementFormat.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum AttestationStatementFormat {\n\tPacked,\n\tTPM,\n\tAndroidKey,\n\tAndroidSafetyNet,\n\tFIDOU2F,\n\tAppleAnonymous,\n\tNone\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing COSE key as RSA key in TypeScript\nDESCRIPTION: Definition of the rsa() method on the COSEPublicKey class. This method attempts to parse the COSE key as an RSA key and returns a COSERSAPublicKey object. It will throw an Error if parsing fails.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/COSEPublicKey/rsa.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction rsa(): COSERSAPublicKey;\n```\n\n----------------------------------------\n\nTITLE: Parsing COSE Octet Key Pair Keys in TypeScript\nDESCRIPTION: The okp() method signature for parsing a COSE key as an octet key pair key. It returns a COSEOKPPublicKey object and throws an Error if parsing fails.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/COSEPublicKey/okp.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ COSEOKPPublicKey=/reference/main/COSEOKPPublicKey\nfunction okp(): $$COSEOKPPublicKey;\n```\n\n----------------------------------------\n\nTITLE: Retrieving COSE Key Type with COSEPublicKey.type() in TypeScript\nDESCRIPTION: A TypeScript function definition that returns the COSE key type. The function is part of the COSEPublicKey interface and returns a value of type COSEKeyType, which is referenced from another file.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/COSEPublicKey/type.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ COSEKeyType=/reference/main/COSEKeyType\nfunction type(): $$COSEKeyType;\n```\n\n----------------------------------------\n\nTITLE: Defining COSEPublicKey Properties Interface in TypeScript\nDESCRIPTION: Interface definition specifying the required properties for a COSEPublicKey instance, including the decoded object containing the key data.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/COSEPublicKey/index.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tdecoded: object;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing CBOR-decoded objects as packed attestation statements in TypeScript\nDESCRIPTION: The packed() method parses a CBOR-decoded object and returns it as a PackedAttestationStatement type. This is used in WebAuthn authentication to handle packed attestation formats.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/AttestationStatement/packed.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ PackedAttestationStatement=/reference/main/PackedAttestationStatement\nfunction packed(): $$PackedAttestationStatement;\n```\n\n----------------------------------------\n\nTITLE: Parsing FIDO U2F Attestation Statements in TypeScript\nDESCRIPTION: A function definition for parsing CBOR-decoded objects as FIDO U2F attestation statements. The function returns a FIDOU2FAttestationStatement object which represents the parsed attestation statement.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/AttestationStatement/fidoU2F.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ FIDOU2FAttestationStatement=/reference/main/FIDOU2FAttestationStatement\nfunction fidoU2F(): $$FIDOU2FAttestationStatement;\n```\n\n----------------------------------------\n\nTITLE: Initializing AttestationStatement Constructor in TypeScript\nDESCRIPTION: Constructor function for creating an AttestationStatement instance. Takes format and decoded parameters where decoded is a CBOR-decoded object containing COSE formatted data.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/AttestationStatement/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(format: $$AttestationStatementFormat, decoded: object): this;\n```\n\n----------------------------------------\n\nTITLE: Parsing Android SafetyNet Attestation Statement in TypeScript\nDESCRIPTION: Function definition that parses a CBOR-decoded object into an Android SafetyNet attestation statement format. Returns an AndroidSafetyNetAttestationStatement type.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/AttestationStatement/androidSafetyNet.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ AndroidSafetyNetAttestationStatement=/reference/main/AndroidSafetyNetAttestationStatement\nfunction androidSafetyNet(): $$AndroidSafetyNetAttestationStatement;\n```\n\n----------------------------------------\n\nTITLE: Parsing Android Key Attestation Statement in TypeScript\nDESCRIPTION: This function parses a CBOR-decoded object as an Android Key attestation statement. It returns an AndroidKeyAttestationStatement object. The function is part of the AttestationStatement class.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/AttestationStatement/androidKey.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction androidKey(): $$AndroidKeyAttestationStatement;\n```\n\n----------------------------------------\n\nTITLE: Parsing Apple Anonymous Attestation Statements in TypeScript\nDESCRIPTION: This function parses a CBOR-decoded object and returns it as an AppleAnonymousAttestationStatement. It's used in WebAuthn implementations to handle Apple's anonymous attestation format.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/AttestationStatement/appleAnonymous.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ AppleAnonymousAttestationStatement=/reference/main/AppleAnonymousAttestationStatement\nfunction appleAnonymous(): $$AppleAnonymousAttestationStatement;\n```\n\n----------------------------------------\n\nTITLE: Defining AttestationStatement Properties Interface in TypeScript\nDESCRIPTION: Interface definition specifying the required properties for an AttestationStatement including the format type and decoded object containing the attestation data.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/AttestationStatement/index.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tformat: $$AttestationStatementFormat;\n\tdecoded: object;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AndroidKeyAttestationStatement Interface in TypeScript for WebAuthn\nDESCRIPTION: TypeScript interface that defines the structure of Android Key Attestation statements as specified in the W3C WebAuthn Level 2 specification. It includes an algorithm identifier, a signature, and an array of certificates.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/AndroidKeyAttestationStatement.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AndroidKeyAttestationStatement {\n\talgorithm: number;\n\tsignature: Uint8Array;\n\tcertificates: Uint8Array[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining COSEEC2PublicKey Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure of a COSE elliptic curve (EC2) public key for ECDSA. It includes properties for the curve identifier and the x and y coordinates of the public key point.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/COSEEC2PublicKey.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface COSEEC2PublicKey {\n\tcurve: number;\n\tx: bigint;\n\ty: bigint;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining COSERSAPublicKey Interface in TypeScript\nDESCRIPTION: This code snippet defines the COSERSAPublicKey interface with two properties: 'e' and 'n', both of type bigint. These properties represent the public exponent and modulus of an RSA public key, respectively, as specified in RFC 8230 for COSE RSA public keys.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/COSERSAPublicKey.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface COSERSAPublicKey {\n\te: bigint;\n\tn: bigint;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TPMAttestationStatement Interface in TypeScript\nDESCRIPTION: Defines an interface for TPM attestation statements including algorithm ID, signature, certificate chain, attestation structure, and public key. This interface follows the W3C WebAuthn specification for TPM attestation statement format.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/TPMAttestationStatement.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TPMAttestationStatement {\n\talgorithm: number;\n\tsignature: Uint8Array;\n\tcertificates: Uint8Array[];\n\tattestation: Uint8Array;\n\tpublicKey: Uint8Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining COSEOKPPublicKey Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for a COSE octet key pair (OKP) public key. This interface represents EdDSA keys as specified in RFC 9053, containing the curve identifier and the x-coordinate of the public key point.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/COSEOKPPublicKey.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface COSEOKPPublicKey {\n\tcurve: number;\n\tx: Uint8Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PackedAttestationStatement Interface in TypeScript for WebAuthn\nDESCRIPTION: TypeScript interface definition for PackedAttestationStatement used in the WebAuthn packed attestation format. It contains the algorithm identifier, signature data, and optional certificate chain.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/PackedAttestationStatement.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PackedAttestationStatement {\n\talgorithm: number;\n\tsignature: Uint8Array;\n\tcertificates: Uint8Array[] | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing CBOR-decoded objects as TPM attestation statements in TypeScript\nDESCRIPTION: The tpm() function parses CBOR-decoded objects and returns them as TPM attestation statements. This is part of the WebAuthn implementation for handling attestation statements from TPM (Trusted Platform Module) authenticators.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/AttestationStatement/tpm.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ TPMAttestationStatement=/reference/main/TPMAttestationStatement\nfunction tpm(): $$TPMAttestationStatement;\n```\n\n----------------------------------------\n\nTITLE: Defining FIDO U2F Attestation Statement Interface in TypeScript\nDESCRIPTION: TypeScript interface that specifies the required properties for FIDO U2F attestation statements. It includes two properties: signature and certificate, both as Uint8Array types, following the W3C WebAuthn Level 2 specification requirements.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/FIDOU2FAttestationStatement.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FIDOU2FAttestationStatement {\n\tsignature: Uint8Array;\n\tcertificate: Uint8Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AndroidSafetyNetAttestationStatement Interface in TypeScript\nDESCRIPTION: Interface definition for Android SafetyNet attestation statements as specified in the W3C WebAuthn standard. It contains two properties: version (string) and response (Uint8Array).\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/AndroidSafetyNetAttestationStatement.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AndroidSafetyNetAttestationStatement {\n\tversion: string;\n\tresponse: Uint8Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AppleAnonymousAttestationStatement Interface in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript interface for Apple Anonymous Attestation Statement as specified in the W3C WebAuthn specification. It contains a single property 'certificates' which holds a series of X.509 encoded certificates.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/AppleAnonymousAttestationStatement.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AppleAnonymousAttestationStatement {\n\tcertificates: Uint8Array[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WebAuthn ClientDataType Enum in TypeScript\nDESCRIPTION: Defines an enum that represents the two possible types of WebAuthn client data operations: Get for authentication and Create for registration. The enum provides type safety when working with WebAuthn operations.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/ClientDataType.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum ClientDataType {\n\tGet,\n\tCreate\n}\n```\n\n----------------------------------------\n\nTITLE: Defining COSEKeyType Enum in TypeScript\nDESCRIPTION: This snippet defines an enum called COSEKeyType that represents the COSE key types registered on IANA. It includes six key types: OKP, EC2, RSA, Symmetric, HSSLMS, and WalnutDSA.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/COSEKeyType.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum COSEKeyType {\n\tOKP,\n\tEC2,\n\tRSA,\n\tSymmetric,\n\tHSSLMS,\n\tWalnutDSA\n}\n```\n\n----------------------------------------\n\nTITLE: Defining COSE Algorithm ID for ES256 in TypeScript\nDESCRIPTION: Declares a constant coseAlgorithmES256 with the value -7, representing the COSE algorithm ID for ES256 (ECDSA with SHA-256) as registered on IANA. This constant can be used in WebAuthn implementations or other cryptographic contexts where COSE algorithm identifiers are required.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/coseAlgorithmES256.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst coseAlgorithmES256 = -7;\n```\n\n----------------------------------------\n\nTITLE: Checking Algorithm Definition in COSEPublicKey (TypeScript)\nDESCRIPTION: Method signature for isAlgorithmDefined() which returns a boolean indicating whether the alg parameter is defined in a COSEPublicKey. The method throws an Error if the parameter is of the wrong type.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/COSEPublicKey/isAlgorithmDefined.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isAlgorithmDefined(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining RS256 COSE Algorithm Identifier in TypeScript\nDESCRIPTION: Declares the constant value for the COSE algorithm identifier representing RS256 (RSASSA-PKCS1-v1_5 with SHA-256) as registered with IANA. The value -257 is the official IANA-assigned identifier for this algorithm.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/coseAlgorithmRS256.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst coseAlgorithmRS256 = -257;\n```\n\n----------------------------------------\n\nTITLE: Defining COSE Algorithm ID for EdDSA in TypeScript\nDESCRIPTION: Declares a constant representing the COSE algorithm ID for EdDSA as registered on IANA. The value is set to -8, which is the official IANA-registered identifier for EdDSA in COSE.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/coseAlgorithmEdDSA.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst coseAlgorithmEdDSA = -8;\n```\n\n----------------------------------------\n\nTITLE: Defining COSE Elliptic Curve P256 Identifier in TypeScript\nDESCRIPTION: Declares a constant representing the COSE elliptic curve identifier for P256 curve as registered with IANA. This identifier is used in WebAuthn and CBOR Object Signing and Encryption (COSE) operations.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/coseEllipticCurveP256.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst coseEllipticCurveP256 = 1;\n```\n\n----------------------------------------\n\nTITLE: Defining COSE Elliptic Curve Constant for Ed25519 in TypeScript\nDESCRIPTION: Defines the COSE elliptic curve identifier constant for Ed25519 as registered with IANA. This constant (value 6) is used in WebAuthn implementations to specify the Ed25519 curve for cryptographic operations.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/coseEllipticCurveEd25519.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst coseEllipticCurveEd25519 = 6;\n```\n\n----------------------------------------\n\nTITLE: Defining TokenBinding Interface in TypeScript for WebAuthn\nDESCRIPTION: Declares the TokenBinding interface which contains two properties: an id of type Uint8Array and a status referencing the TokenBindingStatus enum. This interface is used in WebAuthn to represent token binding information.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/TokenBinding.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ TokenBindingStatus=/reference/main/TokenBindingStatus\ninterface TokenBinding {\n\tid: Uint8Array;\n\tstatus: $$TokenBindingStatus;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TokenBindingStatus Enum in TypeScript for WebAuthn\nDESCRIPTION: This code snippet defines an enumeration for token binding status in WebAuthn. It provides two states: 'Supported' indicating token binding capability exists, and 'Present' indicating token binding is actively being used.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/TokenBindingStatus.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum TokenBindingStatus {\n\tSupported,\n\tPresent\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AuthenticatorDataFlags Interface in TypeScript for WebAuthn\nDESCRIPTION: This code snippet defines the AuthenticatorDataFlags interface with two boolean properties: userPresent and userVerified. These flags are used in WebAuthn to indicate the user's presence and verification status during authentication.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/AuthenticatorDataFlags.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AuthenticatorDataFlags {\n\tuserPresent: boolean;\n\tuserVerified: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @oslojs/webauthn via npm\nDESCRIPTION: This command installs the @oslojs/webauthn package using npm (Node Package Manager).\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @oslojs/webauthn\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM for Oslo WebAuthn Project\nDESCRIPTION: This command installs the necessary dependencies for the Oslo WebAuthn project using PNPM package manager.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/CONTRIBUTING.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Building Oslo WebAuthn Package\nDESCRIPTION: These commands run the test suite and build the Oslo WebAuthn package. They are essential steps in the development process to ensure code quality and prepare for deployment.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/CONTRIBUTING.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Creating Changesets for Oslo WebAuthn Pull Requests\nDESCRIPTION: These commands create changesets for minor features and patch fixes in the Oslo WebAuthn project. Changesets are used to document changes and prepare for version updates.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/CONTRIBUTING.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm auri add minor\npnpm auri add patch\n```\n\n----------------------------------------\n\nTITLE: Defining the symmetric() Method for COSEPublicKey in TypeScript\nDESCRIPTION: Function signature for the COSEPublicKey.symmetric() method that parses a COSE key as a symmetric key and returns the key data as a Uint8Array. The method will throw an Error if parsing fails.\nSOURCE: https://github.com/oslo-project/webauthn/blob/main/docs/pages/reference/main/COSEPublicKey/symmetric.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction symmetric(): Uint8Array;\n```"
  }
]