[
  {
    "owner": "jitsi",
    "repo": "jitsi-videobridge",
    "content": "TITLE: Querying Videobridge Health Status via REST API\nDESCRIPTION: HTTP GET endpoint that returns the health status of the Videobridge service. Returns 200 OK with empty JSON response for healthy state, or 5xx errors for unhealthy states. The endpoint performs internal health checks and returns the latest result.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/health-checks.md#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /about/health\n```\n\n----------------------------------------\n\nTITLE: HOCON Configuration Structure Example\nDESCRIPTION: Demonstrates the nested structure format used in the new configuration system for defining videobridge properties.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/CONFIG.md#2025-04-16_snippet_1\n\nLANGUAGE: hocon\nCODE:\n```\nvideobridge {\n  health {\n    interval\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Values in HOCON Configuration\nDESCRIPTION: Example of overriding default videobridge configuration values using HOCON syntax, specifically for health check interval and onstage video suspension settings.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/CONFIG.md#2025-04-16_snippet_0\n\nLANGUAGE: hocon\nCODE:\n```\nvideobridge {\n    health {\n        // Override the health check interval\n        interval=60 seconds\n    }\n    cc {\n        // Override the onstage video suspension setting\n        onstage-video-suspension-enabled=true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jitsi Videobridge for XMPP MUC Mode\nDESCRIPTION: HOCON configuration for enabling MUC (Multi-User Chat) mode in Jitsi Videobridge. The configuration enables stats broadcasting via MUC and sets up connections to multiple XMPP servers with appropriate credentials and MUC rooms.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/muc.md#2025-04-16_snippet_1\n\nLANGUAGE: hocon\nCODE:\n```\nstats {\n  # Enable broadcasting stats/presence in a MUC\n  enabled = true\n  transports = [\n    { type = \"muc\" }\n  ]\n}\n\napis {\n  xmpp-client {\n    configs {\n      # Connect to the first XMPP server\n      xmpp-server-1 {\n        hostname=\"example.net\"\n        domain = \"auth.example.net\"\n        username = \"jvb\"\n        password = \"$PASSWORD\"\n        muc_jids = \"JvbBrewery@internal.auth.example.net\"\n        # The muc_nickname must be unique across all jitsi-videobridge instances\n        muc_nickname = \"unique-instance-id\"\n        # disable_certificate_verification = true\n      }\n      # Connect to a second XMPP server\n      xmpp-server-2 {\n        hostname=\"another.example.net\"\n        domain = \"auth.example.net\"\n        username = \"jvb\"\n        password = \"$PASSWORD\"\n        muc_jids = \"JvbBrewery@internal.auth.example.net\"\n        # The muc_nickname must be unique across all jitsi-videobridge instances\n        muc_nickname = \"unique-instance-id2\"\n        # disable_certificate_verification = true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Private HTTP Interface in Jitsi-Videobridge\nDESCRIPTION: HOCON configuration block for setting up the private HTTP interface of Jitsi-videobridge. Includes settings for REST API enablement, port configuration, TLS settings, and authentication options.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/rest.md#2025-04-16_snippet_0\n\nLANGUAGE: hocon\nCODE:\n```\nvideobridge {\n    apis {\n        rest {\n            enabled = true\n        }\n    }\n    http-servers {\n        private {\n            // The port for the private HTTP interface (or -1 to disable it).  Defaults to 8080.\n            port = <Number>\n            // The port for the private HTTP interface if TLS is to be used (or -1 to disable). Defaults to 8443.\n            tls-port = <Number>\n            // The address on which the server will listen\n            host = <String>\n            // The file path to the keystore to be used with HTTPS for the private interface.  If this is not specified,\n            // HTTPS is disabled for the private interface\n            key-store-path = <String (path to key store)>\n            // The password to be used by the SslContextFactory when HTTPS is used\n            key-store-password = <String>\n            // Whether or not client certificate authentication is to be required when\n            // HTTPS is used\n            need-client-auth: <Boolean>\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Statistics via REST Interface\nDESCRIPTION: Example of the JSON format returned by the /colibri/stats endpoint on the private REST interface. The report is generated periodically with a default interval of 5 seconds, configurable via the videobridge.stats.interval property.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/statistics.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Public HTTP Interface in Jitsi-Videobridge\nDESCRIPTION: HOCON configuration block for setting up the public HTTP interface of Jitsi-videobridge. Uses the same configuration structure as the private interface but under a different scope.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/rest.md#2025-04-16_snippet_1\n\nLANGUAGE: hocon\nCODE:\n```\nvideobridge {\n    http-servers {\n        public {\n            // Same values as above\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling WebSockets in Jitsi Videobridge Configuration\nDESCRIPTION: Configuration snippet for enabling WebSockets in Jitsi Videobridge. It includes settings for TLS, domain, advertise port, and an optional server ID for load balancing scenarios.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/web-sockets.md#2025-04-16_snippet_4\n\nLANGUAGE: conf\nCODE:\n```\nvideobridge {\n    websockets {\n        enabled = true\n        tls = true # or false, depending on your HTTP server config\n        # The port here is the 'advertise port' for websockets, which means the publicly-accessible\n        # port clients will use.  This may match the public http server port, but could also be different\n        # if a proxy is being used.\n        domain = \"example.com:443\"\n        # A server ID can optionally be provided.  This is useful when a set of jitsi-videobridge instances\n        # are fronted by an HTTP proxy and they advertise the same domain.\n        server-id = jvb2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Settings in Jitsi Videobridge (conf)\nDESCRIPTION: This snippet shows how to configure relay settings in the Jitsi Videobridge configuration file. It enables relays, sets the region, and assigns a unique ID to the Jitsi Videobridge instance.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/relay.md#2025-04-16_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\nvideobridge {\n  relay {\n    enabled=true\n    region=\"region1\"\n    relay-id=\"unique-id-of-the-jitsi-videobridge-instance\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Proxy Configuration for Jitsi Videobridge WebSockets\nDESCRIPTION: Nginx configuration for proxying WebSocket connections to multiple Jitsi Videobridge instances. It includes location blocks for routing requests to different JVB instances based on the server ID.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/web-sockets.md#2025-04-16_snippet_5\n\nLANGUAGE: nginx\nCODE:\n```\n   # colibri (JVB) websockets for jvb1\n   location ~ ^/colibri-ws/jvb1/(.*) {\n       proxy_pass http://127.0.0.1:9090/colibri-ws/jvb1/$1$is_args$args;\n       proxy_http_version 1.1;\n       proxy_set_header Upgrade $http_upgrade;\n       proxy_set_header Connection \"upgrade\";\n       tcp_nodelay on;\n   }\n   location ~ ^/colibri-ws/jvb2/(.*) {\n       proxy_pass http://127.0.0.1:9091/colibri-ws/jvb2/$1$is_args$args;\n       proxy_http_version 1.1;\n       proxy_set_header Upgrade $http_upgrade;\n       proxy_set_header Connection \"upgrade\";\n       proxy_set_header Host alpha.jitsi.net;\n       tcp_nodelay on;\n   }\n```\n\n----------------------------------------\n\nTITLE: Configuring Public HTTP Server with TLS in Jitsi Videobridge\nDESCRIPTION: Configuration snippet for enabling the publicly-accessible HTTP server with TLS in Jitsi Videobridge. It sets the TLS port, key store path, and password for secure communication.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/web-sockets.md#2025-04-16_snippet_3\n\nLANGUAGE: conf\nCODE:\n```\nvideobridge {\n    http-servers {\n        public {\n            tls-port = 443\n            key-store-path=/etc/jitsi/videobridge/ssl.store\n            key-store-password=KEY_STORE_PASSWORD\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Public HTTP Server without TLS in Jitsi Videobridge\nDESCRIPTION: Configuration snippet for enabling the publicly-accessible HTTP server without TLS in Jitsi Videobridge. It sets the port to 9090 for the public HTTP server.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/web-sockets.md#2025-04-16_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\nvideobridge {\n    http-servers {\n        public {\n            port = 9090\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jicofo for Octo and Bridge Selection Strategy (conf)\nDESCRIPTION: This snippet demonstrates how to configure Jicofo for Octo and set the bridge selection strategy. It enables Octo and sets the selection strategy to RegionBasedBridgeSelectionStrategy.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/relay.md#2025-04-16_snippet_1\n\nLANGUAGE: conf\nCODE:\n```\njicofo {\n  bridge {\n    selection-strategy = RegionBasedBridgeSelectionStrategy\n  }\n  octo {\n    enabled = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Receiver Video Constraints Message Format in JSON\nDESCRIPTION: Example JSON message format for signaling receiver video constraints to the bridge. It includes fields for lastN, selectedSources, onStageSources, defaultConstraints, and per-source constraints.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"colibriClass\": \"ReceiverVideoConstraints\",\n  \"lastN\": 2,\n  \"selectedSources\": [\"A-v0\", \"B-v0\"],\n  \"onStageSources\": [\"A-v1\",\"C-v0\", \"D-v0\"],\n  \"defaultConstraints\": { \"maxHeight\":  180 },\n  \"constraints\": {\n    \"A-v1\": { \"maxHeight\": 720 },\n    \"B-v0\": { \"maxHeight\": 360 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Source Names Capability in Jitsi Videobridge (XML)\nDESCRIPTION: This XML snippet shows how to enable the 'source-names' capability for an endpoint in a conference-modify request. This is necessary when using the new format with source names instead of endpoint IDs.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md#2025-04-16_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<iq xmlns='jabber:client' to='jvbbrewery@internal-muc.meet.jitsi/jvb1' id='VFLJ9-10' type='get'>\n   <conference-modify xmlns='jitsi:colibri2' meeting-id='62a5bc4c-c79c-4eab-a071-6740eb549296'>\n       <endpoint xmlns='jitsi:colibri2' id='fefbee3e' create='true' >\n           <capability name='source-names'/> <!--- SOURCE NAME CAPABILITY -->\n           <media type='audio'>\n               ...\n           </media>\n           <media type='video'>\n               ...\n           </media>\n           <transport ice-controlling='true'/>\n       </endpoint>\n   </conference-modify>\n</iq>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tile View with 360p for All Sources in Jitsi Videobridge (JSON)\nDESCRIPTION: This JSON configuration sets up a tile view where all video sources are constrained to 360p resolution.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"colibriClass\": \"ReceiverVideoConstraints\",\n  \"defaultConstraints\": { \"maxHeight\":  360 }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-stage View with On-stage Sources in Jitsi Videobridge (JSON)\nDESCRIPTION: This JSON configuration sets up a multi-stage view with two on-stage sources at 720p and up to 4 other sources at 180p, limiting the total number of sources to 6.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"colibriClass\": \"ReceiverVideoConstraints\",\n  \"onStageSources\": [\"A-v0\", \"B-v0\"],\n  \"lastN\": 6,\n  \"defaultConstraints\": { \"maxHeight\":  180 },\n  \"constraints\": {\n    \"A-v0\": { \"maxHeight\":  720 },\n    \"B-v0\": { \"maxHeight\":  720 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Prometheus Metrics with cURL\nDESCRIPTION: Examples of how to query Prometheus metrics from the /metrics endpoint in different formats: openmetrics format, 004 format, and JSON key-value format. Not all metrics are currently available in Prometheus format.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/statistics.md#2025-04-16_snippet_1\n\nLANGUAGE: commandline\nCODE:\n```\n# Query prometheus metrics in openmetrics format\ncurl 0:8080/metrics -H 'Accept: application/openmetrics-text'\n\n# Query prometheus metrics in 004 format\ncurl 0:8080/metrics -H 'Accept: text/plain; version=0.0.4;'\n\n# Query prometheus metrics in a JSON key-value format\ncurl 0:8080/metrics -H 'Accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Stage View Example 1: High Definition for One Source\nDESCRIPTION: JSON message for stage view configuration with one source in high definition and all others in 180p resolution.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"colibriClass\": \"ReceiverVideoConstraints\",\n  \"onStageSources\": [\"A-v0\"],\n  \"defaultConstraints\": { \"maxHeight\":  180 },\n  \"constraints\": {\n    \"A-v0\": { \"maxHeight\": 720 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tile View with 180p/15fps for All Sources in Jitsi Videobridge (JSON)\nDESCRIPTION: This JSON configuration sets up a tile view where all video sources are constrained to 180p resolution and 15 frames per second.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"colibriClass\": \"ReceiverVideoConstraints\",\n  \"defaultConstraints\": { \"maxHeight\":  180, \"maxFrameRate\": 15 }\n}\n```\n\n----------------------------------------\n\nTITLE: Stage View Example 2: Mixed Resolutions with Disabled Sources\nDESCRIPTION: JSON message for stage view with one high definition source, three in 180p, and all others disabled.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"colibriClass\": \"ReceiverVideoConstraints\",\n  \"onStageSources\": [\"A-v0\"],\n  \"defaultConstraints\": { \"maxHeight\":  0 },\n  \"constraints\": {\n    \"A-v0\": { \"maxHeight\": 720 },\n    \"B-v0\": { \"maxHeight\": 180 },\n    \"C-v0\": { \"maxHeight\": 180 },\n    \"D-v0\": { \"maxHeight\": 180 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stage View Example 3: High Definition with Specific Disabled Sources\nDESCRIPTION: JSON message for stage view with one high definition source, three specific sources disabled, and all others in 180p.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"colibriClass\": \"ReceiverVideoConstraints\",\n  \"onStageSources\": [\"A-v0\"],\n  \"defaultConstraints\": { \"maxHeight\":  180 },\n  \"constraints\": {\n    \"A-v0\": { \"maxHeight\": 720 },\n    \"B-v0\": { \"maxHeight\": 0 },\n    \"C-v0\": { \"maxHeight\": 0 },\n    \"D-v0\": { \"maxHeight\": 0 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conference Description Query\nDESCRIPTION: HTTP GET endpoint to get COLIBRI description of a specific conference\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/debugging.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nGET /colibri/conferences/<CONFERENCE_ID>\n```\n\n----------------------------------------\n\nTITLE: Stage View Example 4: Prioritized Source with High Definition\nDESCRIPTION: JSON message for stage view with one high definition source, all others in 180p, and a specific source prioritized over the dominant speaker.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"colibriClass\": \"ReceiverVideoConstraints\",\n  \"onStageEndpoints\": [\"A-v0\"],\n  \"selectedEndpoints\": [\"D-v0\"],\n  \"defaultConstraints\": { \"maxHeight\":  180 },\n  \"constraints\": {\n    \"A-v0\": { \"maxHeight\": 720 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tile View with Prioritized and Disabled Sources in Jitsi Videobridge (JSON)\nDESCRIPTION: This JSON configuration sets up a tile view with 180p resolution, prioritizes sources 'A-v0' and 'B-v0', and disables sources 'C-v0' and 'D-v0'.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"colibriClass\": \"ReceiverVideoConstraints\",\n  \"selectedSources\": [\"A-v0\", \"B-v0\"],\n  \"defaultConstraints\": { \"maxHeight\":  180 },\n  \"constraints\": {\n    \"C-v0\": { \"maxHeight\":  0 },\n    \"D-v0\": { \"maxHeight\":  0 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tile View with Selective Source Enabling in Jitsi Videobridge (JSON)\nDESCRIPTION: This JSON configuration sets up a tile view where all sources are disabled except for 'A-v0', 'B-v0', and 'C-v0', which are set to 180p resolution.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"colibriClass\": \"ReceiverVideoConstraints\",\n  \"defaultConstraints\": { \"maxHeight\":  0 },\n  \"constraints\": {\n    \"A-v0\": { \"maxHeight\":  180 },\n    \"B-v0\": { \"maxHeight\":  180 },\n    \"C-v0\": { \"maxHeight\":  180 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket URL Example in Jitsi Session Initiate XML\nDESCRIPTION: An example of the WebSocket URL as it appears in the session initiate XML for a Jitsi conference. This snippet shows how the WebSocket URL is advertised to clients within the XMPP signaling.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/web-sockets.md#2025-04-16_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<web-socket xmlns=\"http://jitsi.org/protocol/colibri\" url=\"wss://meet-jit-si-eu-west-2b-s5-jvb-51.jitsi.net:443/colibri-ws/default-id/4f9cb343985d4779/c814b6a6?pwd=23btmrjol5i83thk1t9s78bnkk\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Sender Video Constraints JSON Message in Jitsi Videobridge\nDESCRIPTION: This JSON message is sent by the bridge to a sender to indicate that resolutions higher than the specified value are not needed for a specific video source. The constraint limits the maximum height to 180 pixels for the video source named 'endpoint1-v0'.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/constraints.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"colibriClass\": \"SenderSourceConstraints\",\n  \"sourceName\": \"endpoint1-v0\",\n  \"maxHeight\": 180\n}\n```\n\n----------------------------------------\n\nTITLE: Bridge-to-Client EndpointMessage Format in JSON\nDESCRIPTION: The JSON format for messages forwarded by Jitsi Videobridge to clients. The bridge adds a 'from' property containing the sender's endpoint ID while preserving the original message structure.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/datachannel-communication.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    colibriClass: \"EndpointMessage\",\n    to: `<ENDPOINT-ID>`,\n    from: `<ENDPOINT-ID>`,\n    msgPayload: <PAYLOAD>\n}\n```\n\n----------------------------------------\n\nTITLE: Client-to-Bridge EndpointMessage Format in JSON\nDESCRIPTION: The JSON format for messages sent from clients to Jitsi Videobridge. The message requires a colibriClass of \"EndpointMessage\", a recipient endpoint ID (or empty string for broadcast), and a valid JSON payload.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/datachannel-communication.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    colibriClass: \"EndpointMessage\",  \n    to: `<ENDPOINT-ID>`,   \n    msgPayload: `<PAYLOAD>`  \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Old Format Video Constraints with Endpoint IDs in Jitsi Videobridge (JSON)\nDESCRIPTION: This JSON configuration demonstrates the old format using endpoint IDs instead of source names. It sets constraints for different endpoints and defines on-stage endpoints.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/allocation.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"colibriClass\": \"ReceiverVideoConstraints\",\n  \"lastN\": 2,\n  \"selectedEndpoints\": [\"A\", \"B\"],\n  \"onStageEndpoints\": [\"C\", \"D\"],\n  \"defaultConstraints\": { \"maxHeight\":  180 },\n  \"constraints\": {\n    \"A\": { \"maxHeight\": 720 },\n    \"B\": { \"maxHeight\": 360 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a New XMPP Client Connection in Jitsi Videobridge\nDESCRIPTION: JSON payload to add a new XMPP client connection by posting to the /colibri/muc-client/add endpoint. The configuration includes connection details like domain, hostname, credentials, and MUC (Multi-User Chat) settings.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/rest-muc-client.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"new-client-connection\",\n  \"domain\":\"xmpp.example.com\",\n  \"hostname\":\"10.0.0.1\",\n  \"username\":\"xmpp-username\",\n  \"password\":\"xmpp-password\",\n  \"muc_jids\":\"JvbBrewery@conference.xmpp.example.com\",\n  \"muc_nickname\":\"unique-resource\",\n  \"disable_certificate_verification\":\"false\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing an XMPP Client Connection in Jitsi Videobridge\nDESCRIPTION: JSON payload to remove an existing XMPP client connection by posting to the /colibri/muc-client/remove endpoint. The request only requires the ID of the connection to be removed.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/rest-muc-client.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"new-client-connection\"\n}\n```\n\n----------------------------------------\n\nTITLE: XML Format for XMPP MUC Statistics\nDESCRIPTION: Example of how statistics are published periodically via XMPP in XML format. By default, statistics are pushed every 5 seconds, configurable with the videobridge.apis.xmpp-client.presence-interval property in jvb.conf.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/statistics.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<stats xmlns=' http://jitsi.org/protocol/colibri'>\n\t<stat value='value' name='key'/>\n</stats>\n```\n\n----------------------------------------\n\nTITLE: Nginx Proxy Configuration for Secure Octo Relay WebSockets\nDESCRIPTION: Nginx configuration for proxying secure-octo relay WebSocket connections to multiple Jitsi Videobridge instances. It includes location blocks for routing relay requests to different JVB instances.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/web-sockets.md#2025-04-16_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\n   # colibri secure-octo relay websockets for jvb1\n   location ~ ^/colibri-relay-ws/jvb1/(.*) {\n       proxy_pass http://127.0.0.1:9090/colibri-relay-ws/jvb1/$1$is_args$args;\n       proxy_http_version 1.1;\n       proxy_set_header Upgrade $http_upgrade;\n       proxy_set_header Connection \"upgrade\";\n       tcp_nodelay on;\n   }\n   location ~ ^/colibri-relay-ws/jvb2/(.*) {\n       proxy_pass http://127.0.0.1:9091/colibri-relay-ws/jvb2/$1$is_args$args;\n       proxy_http_version 1.1;\n       proxy_set_header Upgrade $http_upgrade;\n       proxy_set_header Connection \"upgrade\";\n       proxy_set_header Host alpha.jitsi.net;\n       tcp_nodelay on;\n   }\n```\n\n----------------------------------------\n\nTITLE: WebSocket URL Format for Jitsi Videobridge\nDESCRIPTION: Demonstrates the format of the WebSocket URL used for client-to-bridge communication in Jitsi Videobridge. The URL includes server ID, conference ID, endpoint ID, and a password parameter.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/web-sockets.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nwss://example.com/colibri-ws/server-id/conf-id/endpoint-id?pwd=123\n```\n\n----------------------------------------\n\nTITLE: Secure Octo Relay WebSocket URL Format\nDESCRIPTION: Shows the format of the WebSocket URL used for secure-octo relays in Jitsi Videobridge. This URL is similar to the standard format but uses a different path and includes a relay ID.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/web-sockets.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nwss://example.com/colibri-relay-ws/server-id/conf-id/relay-id?pwd=123\n```\n\n----------------------------------------\n\nTITLE: Registering a Jitsi Videobridge User in Prosody\nDESCRIPTION: Command to register a shared user account for jitsi-videobridge instances in Prosody XMPP server. This creates the JVB user with the specified domain and password.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/muc.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nprosodyctl register jvb $DOMAIN $PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Settings for Jitsi Videobridge on Debian\nDESCRIPTION: Example configuration for the Java Virtual Machine settings on Debian systems. Shows how to increase the Java heap size to 8GB and change the garbage collector type.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: commandline\nCODE:\n```\n# Increase the java heap to 8GB\nVIDEOBRIDGE_MAX_MEMORY=8192m\n# Change the garbage collector (defaults to G1GC)\nVIDEOBRIDGE_GC_TYPE=G1GC\n```\n\n----------------------------------------\n\nTITLE: Running Jitsi Videobridge Locally with Maven\nDESCRIPTION: Shell script for running jitsi-videobridge locally using Maven. It sets up environment variables for configuration paths and executes the application with necessary Java system properties.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nJVB_HOME=\"/path/to/the/cloned/repo\"\nJVB_CONFIG_DIR_LOCATION=\"~/\"\nJVB_CONFIG_DIR_NAME=\".jvb\"\nJVB_CONFIG_FILE=\"$JVB_CONFIG_DIR_LOCATION/$JVB_JVB_CONFIG_DIR_NAME/jvb.conf\"\n\nmvn compile exec:exec -Dexec.executable=java -Dexec.args=\"-cp %classpath org.jitsi.videobridge.MainKt -Djava.library.path=$JVB_HOME/lib/native/linux-64 -Djava.util.logging.config.file=$JVB_HOME/lib/logging.properties -Dnet.java.sip.communicator.SC_HOME_DIR_LOCATION=$JVB_CONFIG_DIR_LOCATION -Dnet.java.sip.communicator.SC_HOME_DIR_NAME=$JVB_CONFIG_DIR_NAME -Dconfig.file=$JVB_CONFIG_FILE\"\n```\n\n----------------------------------------\n\nTITLE: Version Query Endpoint\nDESCRIPTION: HTTP GET endpoint to retrieve current running version\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/debugging.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGET /about/version\n```\n\n----------------------------------------\n\nTITLE: Health Check Endpoint\nDESCRIPTION: HTTP GET endpoint to check instance health status\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/debugging.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGET /about/health\n```\n\n----------------------------------------\n\nTITLE: Installing ktlint git pre-commit hook\nDESCRIPTION: Command to set up a git pre-commit hook that will automatically run ktlint before commits to ensure code style compliance.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/jitsi-media-transform/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nktlint --install-git-pre-commit-hook\n```\n\n----------------------------------------\n\nTITLE: Conference List Query\nDESCRIPTION: HTTP GET endpoint to list all running conferences\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/debugging.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nGET /colibri/conferences\n```\n\n----------------------------------------\n\nTITLE: Bridge Statistics Query\nDESCRIPTION: HTTP GET endpoint to retrieve overall bridge statistics\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/debugging.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nGET /colibri/stats\n```\n\n----------------------------------------\n\nTITLE: Debug Conference List Query\nDESCRIPTION: HTTP GET endpoint to list conferences and their endpoints without full state\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/debugging.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nGET /debug\n```\n\n----------------------------------------\n\nTITLE: Full Conference State Query\nDESCRIPTION: HTTP GET endpoint to list all conferences with complete state information\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/debugging.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nGET /debug?full=true\n```\n\n----------------------------------------\n\nTITLE: Specific Conference State Query\nDESCRIPTION: HTTP GET endpoint to get full state of a specific conference\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/debugging.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nGET /debug/CONFERENCE_ID\n```\n\n----------------------------------------\n\nTITLE: Endpoint State Query\nDESCRIPTION: HTTP GET endpoint to get full state of a specific endpoint in a conference\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/debugging.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nGET /debug/CONFERENCE_ID/ENDPOINT_ID\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Query with curl\nDESCRIPTION: Example of querying debug endpoint and formatting JSON output using curl and jq\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/debugging.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8080/debug | jq .\n```\n\n----------------------------------------\n\nTITLE: Debugging: Retrieving Full Conference State (commandline)\nDESCRIPTION: This command retrieves and displays the full state of a specific conference, including information about different bridge sessions.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/relay.md#2025-04-16_snippet_4\n\nLANGUAGE: commandline\nCODE:\n```\ncurl \"http://localhost:8888/debug/conference/test\\@conference.example.com\" | jq .\n```\n\n----------------------------------------\n\nTITLE: Installing ktlint via curl for Linux/Unix systems\nDESCRIPTION: Command to download ktlint version 0.39.0 from GitHub, make it executable, and move it to the system's bin directory for global access.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/jitsi-media-transform/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSLO https://github.com/pinterest/ktlint/releases/download/0.39.0/ktlint && chmod a+x ktlint && sudo mv ktlint /usr/local/bin/\n```\n\n----------------------------------------\n\nTITLE: Debugging: Listing Available Bridges (commandline)\nDESCRIPTION: This command retrieves and displays information about the bridges available to Jicofo, including their versions and regions.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/relay.md#2025-04-16_snippet_2\n\nLANGUAGE: commandline\nCODE:\n```\ncurl \"http://localhost:8888/debug\" | jq .bridge_selector\n```\n\n----------------------------------------\n\nTITLE: Debugging: Listing Running Conferences (commandline)\nDESCRIPTION: This command retrieves and displays a list of currently running conferences in Jicofo.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/doc/relay.md#2025-04-16_snippet_3\n\nLANGUAGE: commandline\nCODE:\n```\ncurl \"http://localhost:8888/debug\" | jq .focus_manager\n```\n\n----------------------------------------\n\nTITLE: Running ktlint Autoformatting with Maven\nDESCRIPTION: Maven command to execute the ktlint autoformatting task, which will automatically fix code style issues in the project.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/rtp/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn antrun:run@ktlint-format\n```\n\n----------------------------------------\n\nTITLE: Applying ktlint Rules to IntelliJ IDEA\nDESCRIPTION: Command to automatically update IntelliJ IDEA's formatting rules to be compatible with ktlint. Note that version 0.34.2 will override any Java code style settings.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/rtp/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nktlint --apply-to-idea-project\n```\n\n----------------------------------------\n\nTITLE: Installing Git Pre-commit Hook for ktlint\nDESCRIPTION: Command to install a git pre-commit or pre-push hook that runs ktlint before committing changes, ensuring code style compliance.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/rtp/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nktlint --install-git-pre-commit-hook\n```\n\n----------------------------------------\n\nTITLE: Installing ktlint on macOS with Homebrew\nDESCRIPTION: Simple command to install ktlint using the Homebrew package manager on macOS systems.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/rtp/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install ktlint\n```\n\n----------------------------------------\n\nTITLE: Installing ktlint Command-line Utility via curl\nDESCRIPTION: Command to download ktlint version 0.34.2, make it executable, and move it to the system's bin directory for global access.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/rtp/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSLO https://github.com/pinterest/ktlint/releases/download/0.34.2/ktlint && chmod a+x ktlint && sudo mv ktlint /usr/local/bin/\n```\n\n----------------------------------------\n\nTITLE: Configuring IntelliJ IDEA formatting for ktlint compatibility\nDESCRIPTION: Command to automatically update IntelliJ IDEA's code formatting rules to be compatible with ktlint standards.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/jitsi-media-transform/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nktlint --apply-to-idea-project\n```\n\n----------------------------------------\n\nTITLE: Installing ktlint via Homebrew for macOS\nDESCRIPTION: Command to install ktlint using the Homebrew package manager on macOS systems.\nSOURCE: https://github.com/jitsi/jitsi-videobridge/blob/master/jitsi-media-transform/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install ktlint\n```"
  }
]