[
  {
    "owner": "redux-saga",
    "repo": "redux-saga",
    "content": "TITLE: Implementing Saga Worker and Watcher Functions\nDESCRIPTION: Implementation of saga functions that watch for specific actions and handle API calls. Includes a worker saga (fetchUser) that performs the API call and dispatches success/failure actions, and watcher sagas using takeEvery/takeLatest patterns.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { call, put, takeEvery, takeLatest } from 'redux-saga/effects'\nimport Api from '...'\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\nfunction* fetchUser(action) {\n  try {\n    const user = yield call(Api.fetchUser, action.payload.userId)\n    yield put({ type: 'USER_FETCH_SUCCEEDED', user: user })\n  } catch (e) {\n    yield put({ type: 'USER_FETCH_FAILED', message: e.message })\n  }\n}\n\n/*\n  Starts fetchUser on each dispatched `USER_FETCH_REQUESTED` action.\n  Allows concurrent fetches of user.\n*/\nfunction* mySaga() {\n  yield takeEvery('USER_FETCH_REQUESTED', fetchUser)\n}\n\n/*\n  Alternatively you may use takeLatest.\n\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\n  dispatched while a fetch is already pending, that pending fetch is cancelled\n  and only the latest one will be run.\n*/\nfunction* mySaga() {\n  yield takeLatest('USER_FETCH_REQUESTED', fetchUser)\n}\n\nexport default mySaga\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with Saga Middleware in JavaScript\nDESCRIPTION: Creates a configureStore function that sets up Redux with Saga middleware and exposes the runSaga method. This pattern allows initializing the Redux store with middleware and provides access to run sagas after store creation.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport createSagaMiddleware from 'redux-saga'\nimport reducer from './path/to/reducer'\n\nexport default function configureStore(initialState) {\n  // Note: passing middleware as the last argument to createStore requires redux@>=3.1.0\n  const sagaMiddleware = createSagaMiddleware()\n  return {\n    ...createStore(reducer, initialState, applyMiddleware(/* other middleware, */sagaMiddleware)),\n    runSaga: sagaMiddleware.run\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login/Logout Flow with API Calls in Redux Saga\nDESCRIPTION: This snippet demonstrates a complete implementation of the login/logout flow, including API calls for authorization, token storage, and logout handling. It uses take, call, and put Effects to manage the flow and interact with the Redux store.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/NonBlockingCalls.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { take, call, put } from 'redux-saga/effects'\nimport Api from '...'\n\nfunction* authorize(user, password) {\n  try {\n    const token = yield call(Api.authorize, user, password)\n    yield put({type: 'LOGIN_SUCCESS', token})\n    return token\n  } catch(error) {\n    yield put({type: 'LOGIN_ERROR', error})\n  }\n}\n\nfunction* loginFlow() {\n  while (true) {\n    const {user, password} = yield take('LOGIN_REQUEST')\n    const token = yield call(authorize, user, password)\n    if (token) {\n      yield call(Api.storeItem, {token})\n      yield take('LOGOUT')\n      yield call(Api.clearItem, 'token')\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling API Errors with Try/Catch in Redux Saga (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use a try/catch block in a Redux Saga generator function to handle API errors. It calls an API function and dispatches different actions based on success or failure.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/basics/ErrorHandling.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Api from './path/to/api'\nimport { call, put } from 'redux-saga/effects'\n\n// ...\n\nfunction* fetchProducts() {\n  try {\n    const products = yield call(Api.fetch, '/products')\n    yield put({ type: 'PRODUCTS_RECEIVED', products })\n  }\n  catch(error) {\n    yield put({ type: 'PRODUCTS_REQUEST_FAILED', error })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Actions with Redux Saga\nDESCRIPTION: Saga implementation that handles asynchronous increment by waiting 1 second before dispatching the INCREMENT action, using delay and put effects.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/BeginnerTutorial.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { put, takeEvery } from 'redux-saga/effects'\n\nconst delay = (ms) => new Promise(res => setTimeout(res, ms))\n\n// ...\n\n// Our worker Saga: will perform the async increment task\nexport function* incrementAsync() {\n  yield delay(1000)\n  yield put({ type: 'INCREMENT' })\n}\n\n// Our watcher Saga: spawn a new incrementAsync task on each INCREMENT_ASYNC\nexport function* watchIncrementAsync() {\n  yield takeEvery('INCREMENT_ASYNC', incrementAsync)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Channels for Inter-Saga Communication with Concurrency Control\nDESCRIPTION: Demonstrates using channels to communicate between sagas with controlled concurrency. This example creates a channel to queue incoming requests and spawns three worker sagas that take from this channel, limiting concurrent execution to three tasks.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Channels.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { channel } from 'redux-saga'\nimport { take, fork, ... } from 'redux-saga/effects'\n\nfunction* watchRequests() {\n  // create a channel to queue incoming requests\n  const chan = yield call(channel)\n\n  // create 3 worker 'threads'\n  for (var i = 0; i < 3; i++) {\n    yield fork(handleRequest, chan)\n  }\n\n  while (true) {\n    const {payload} = yield take('REQUEST')\n    yield put(chan, payload)\n  }\n}\n\nfunction* handleRequest(chan) {\n  while (true) {\n    const payload = yield take(chan)\n    // process the request\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Sync with Cancellation in Redux Saga\nDESCRIPTION: This snippet demonstrates how to implement a background sync task that can be started and stopped using Redux actions. It uses fork to start the task and cancel to stop it. The code also shows how to handle cancellation cleanup in the finally block.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/TaskCancellation.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { take, put, call, fork, cancel, cancelled, delay } from 'redux-saga/effects'\nimport { someApi, actions } from 'somewhere'\n\nfunction* bgSync() {\n  try {\n    while (true) {\n      yield put(actions.requestStart())\n      const result = yield call(someApi)\n      yield put(actions.requestSuccess(result))\n      yield delay(5000)\n    }\n  } finally {\n    if (yield cancelled())\n      yield put(actions.requestFailure('Sync cancelled!'))\n  }\n}\n\nfunction* main() {\n  while ( yield take('START_BACKGROUND_SYNC') ) {\n    // starts the task in the background\n    const bgSyncTask = yield fork(bgSync)\n\n    // wait for the user stop action\n    yield take('STOP_BACKGROUND_SYNC')\n    // user clicked stop. cancel the background task\n    // this will cause the forked bgSync task to jump into its finally block\n    yield cancel(bgSyncTask)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a Saga with Declarative call() Effect\nDESCRIPTION: An example showing how to test a Saga that uses the call() effect. This approach is more reliable as it allows for simple equality tests without mocking.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/basics/DeclarativeEffects.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { call } from 'redux-saga/effects'\nimport Api from '...'\n\nconst iterator = fetchProducts()\n\n// expects a call instruction\nassert.deepEqual(\n  iterator.next().value,\n  call(Api.fetch, '/products'),\n  \"fetchProducts should yield an Effect call(Api.fetch, './products')\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Saga Workers and Watchers for User Fetching\nDESCRIPTION: Definition of a saga that watches for USER_FETCH_REQUESTED actions and handles API calls to fetch user data with both takeEvery and takeLatest patterns.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/GettingStarted.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { call, put, takeEvery, takeLatest } from 'redux-saga/effects'\nimport Api from '...'\n\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\nfunction* fetchUser(action) {\n  try {\n    const user = yield call(Api.fetchUser, action.payload.userId)\n    yield put({ type: 'USER_FETCH_SUCCEEDED', user: user })\n  } catch (e) {\n    yield put({ type: 'USER_FETCH_FAILED', message: e.message })\n  }\n}\n\n/*\n  Starts fetchUser on each dispatched `USER_FETCH_REQUESTED` action.\n  Allows concurrent fetches of user.\n*/\nfunction* mySaga() {\n  yield takeEvery('USER_FETCH_REQUESTED', fetchUser)\n}\n\n/*\n  Alternatively you may use takeLatest.\n\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\n  dispatched while a fetch is already pending, that pending fetch is cancelled\n  and only the latest one will be run.\n*/\nfunction* mySaga() {\n  yield takeLatest('USER_FETCH_REQUESTED', fetchUser)\n}\n\nexport default mySaga\n```\n\n----------------------------------------\n\nTITLE: Combining Sagas with Race Effect\nDESCRIPTION: Example of using the race() effect to implement a timed game scenario where tasks compete against a timeout. Demonstrates combining saga calls with other effects like delay.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/ComposingSagas.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* game(getState) {\n  let finished\n  while (!finished) {\n    // has to finish in 60 seconds\n    const {score, timeout} = yield race({\n      score: call(play, getState),\n      timeout: delay(60000)\n    })\n\n    if (!timeout) {\n      finished = true\n      yield put(showScore(score))\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an API Call Saga with Error Handling\nDESCRIPTION: Creates a saga that selects data from state, calls an API, and dispatches success or error actions based on the result. Returns the HTTP status or -1 on error.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Testing.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* callApi(url) {\n  const someValue = yield select(somethingFromState)\n  try {\n    const result = yield call(myApi, url, someValue)\n    yield put(success(result.json()))\n    return result.status\n  } catch (e) {\n    yield put(error(e))\n    return -1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with redux-saga-test-plan Library\nDESCRIPTION: Shows how to use redux-saga-test-plan, which supports both exact order testing with testSaga API and integration testing with expectSaga API. Demonstrates various testing approaches including providing mocked values.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Testing.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { expectSaga, testSaga } from 'redux-saga-test-plan';\n\ntest('exact order with redux-saga-test-plan', () => {\n  return testSaga(callApi, 'url')\n    .next()\n    .select(selectFromState)\n    .next()\n    .call(myApi, 'url', valueFromSelect);\n\n    ...\n});\n\ntest('recorded effects with redux-saga-test-plan', () => {\n  /*\n  * With expectSaga, you can assert that any yield from\n  * your saga occurs as expected, *regardless of order*.\n  * You must call .run() at the end.\n  */\n  return expectSaga(callApi, 'url')\n    .put(success(value)) // last effect from our saga, first one tested\n\n    .call(myApi, 'url', value)\n    .run();\n    /* notice no assertion for the select call */\n});\n\ntest('test only final effect with .provide()', () => {\n  /*\n  * With the .provide() method from expectSaga\n  * you can by pass in all expected values\n  * and test only your saga's final effect.\n  */\n  return expectSaga(callApi, 'url')\n    .provide([\n      [select(selectFromState), selectedValue],\n      [call(myApi, 'url', selectedValue), response]\n    ])\n    .put(success(response))\n    .run();\n});\n\ntest('integration test with withReducer', () => {\n  /*\n  * Using `withReducer` allows you to test\n  * the state shape upon completion of your reducer -\n  * a true integration test for your Redux store management.\n  */\n\n  return expectSaga(callApi, 'url')\n    .withReducer(myReducer)\n    .provide([\n      [call(myApi, 'url', value), response]\n    ])\n    .hasFinalState({\n      data: response\n    })\n    .run();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry Logic for API Requests with Redux-Saga\nDESCRIPTION: This example demonstrates how to use the retry effect to attempt an API request multiple times with a delay between attempts. It tries the request up to 3 times with a 10-second interval between attempts.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { put, retry } from 'redux-saga/effects'\nimport { request } from 'some-api';\n\nfunction* retrySaga(data) {\n  try {\n    const SECOND = 1000\n    const response = yield retry(3, 10 * SECOND, request, data)\n    yield put({ type: 'REQUEST_SUCCESS', payload: response })\n  } catch(error) {\n    yield put({ type: 'REQUEST_FAIL', payload: { error } })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Debounced API Requests with Redux-Saga\nDESCRIPTION: This example shows how to create a debounced API call for autocomplete functionality. The debounce effect ensures that fetchAutocomplete saga will only be called after the user stops typing for 1000ms, reducing unnecessary API calls.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { call, put, debounce } from `redux-saga/effects`\n\nfunction* fetchAutocomplete(action) {\n  const autocompleteProposals = yield call(Api.fetchAutocomplete, action.text)\n  yield put({type: 'FETCHED_AUTOCOMPLETE_PROPOSALS', proposals: autocompleteProposals})\n}\n\nfunction* debounceAutocomplete() {\n  yield debounce(1000, 'FETCH_AUTOCOMPLETE', fetchAutocomplete)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with Saga Middleware\nDESCRIPTION: Setting up the Redux store with Redux Toolkit's configureStore and connecting the Saga middleware to handle asynchronous actions.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/GettingStarted.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\nimport createSagaMiddleware from 'redux-saga'\n\nimport reducer from './reducers'\nimport mySaga from './sagas'\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware()\n// mount it on the Store\nconst store = configureStore({\n  reducer, \n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(sagaMiddleware),\n})\n\n// then run the saga\nsagaMiddleware.run(mySaga)\n\n// render the application\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Saga in Redux\nDESCRIPTION: A simple 'Hello World' saga that demonstrates the basic structure of a generator function used by Redux Saga.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/BeginnerTutorial.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport function* helloSaga() {\n  console.log('Hello Sagas!')\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Implementation of takeEvery Helper\nDESCRIPTION: Shows how the takeEvery helper could be implemented using low-level effects like take and fork. This demonstrates the underlying mechanism of continuously listening for actions while spawning non-blocking saga tasks.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst takeEvery = (patternOrChannel, saga, ...args) => fork(function*() {\n  while (true) {\n    const action = yield take(patternOrChannel)\n    yield fork(saga, ...args.concat(action))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Parallel Effects in Redux-Saga\nDESCRIPTION: Demonstrates how to run multiple blocking API calls in parallel using the all effect from redux-saga. This example fetches both customers and products data simultaneously.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fetchCustomers, fetchProducts } from './path/to/api'\nimport { all, call } from `redux-saga/effects`\n\nfunction* mySaga() {\n  const { customers, products } = yield all({\n    customers: call(fetchCustomers),\n    products: call(fetchProducts)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Saga Composition with Sequential Tasks\nDESCRIPTION: Demonstrates basic saga composition pattern with a fetch posts example showing how to wait for subtasks to complete before proceeding. Includes a watcher saga that monitors for FETCH_POSTS actions.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/ComposingSagas.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* fetchPosts() {\n  yield put(actions.requestPosts())\n  const products = yield call(fetchApi, '/products')\n  yield put(actions.receivePosts(products))\n}\n\nfunction* watchFetch() {\n  while (yield take('FETCH_POSTS')) {\n    yield call(fetchPosts) // waits for the fetchPosts task to terminate\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Redux Saga Middleware to Store\nDESCRIPTION: Code showing how to create a Redux store with the saga middleware, mount it on the store, and run the root saga function to start listening for actions.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore, applyMiddleware } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\n\nimport reducer from './reducers'\nimport mySaga from './sagas'\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware()\n// mount it on the Store\nconst store = createStore(reducer, applyMiddleware(sagaMiddleware))\n\n// then run the saga\nsagaMiddleware.run(mySaga)\n\n// render the application\n```\n\n----------------------------------------\n\nTITLE: Authorization with Cancellation Handling\nDESCRIPTION: Final implementation of the authorize function with proper cleanup handling for cancelled tasks using try/catch/finally pattern.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/NonBlockingCalls.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { take, call, put, cancelled } from 'redux-saga/effects'\nimport Api from '...'\n\nfunction* authorize(user, password) {\n  try {\n    const token = yield call(Api.authorize, user, password)\n    yield put({type: 'LOGIN_SUCCESS', token})\n    yield call(Api.storeItem, {token})\n    return token\n  } catch(error) {\n    yield put({type: 'LOGIN_ERROR', error})\n  } finally {\n    if (yield cancelled()) {\n      // ... put special cancellation handling code here\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Task Cancellation Pattern in Redux-Saga\nDESCRIPTION: Implements a background synchronization feature that can be started and stopped through UI commands. Shows how to cancel running tasks and handle the cancellation exception.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-hant.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { take, put, call, fork, cancel, SagaCancellationException } from 'redux-saga'\nimport actions from 'somewhere'\nimport { someApi, delay } from 'somewhere'\n\nfunction* bgSync() {\n  try {\n    while (true) {\n      yield put(actions.requestStart())\n      const result = yield call(someApi)\n      yield put(actions.requestSuccess(result))\n      yield call(delay, 5000)\n    }\n  } catch (error) {\n    if (error instanceof SagaCancellationException) yield put(actions.requestFailure('Sync cancelled!'))\n  }\n}\n\nfunction* main() {\n  while (yield take(START_BACKGROUND_SYNC)) {\n    // 開始一個任務於背景執行\n    const bgSyncTask = yield fork(bgSync)\n\n    // 等候使用者的停止 action\n    yield take(STOP_BACKGROUND_SYNC)\n    // 使用者點選了停止。取消背景任務\n    // 這會拋出 SagaCancellationException 例外到背景執行的任務\n    yield cancel(bgSyncTask)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parallel Task Execution in Redux Saga (Correct Approach)\nDESCRIPTION: Example showing the correct way to run tasks in parallel using the all effect from Redux Saga. This approach blocks the generator until all effects are resolved or one is rejected, similar to Promise.all behavior.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/RunningTasksInParallel.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { all, call } from 'redux-saga/effects'\n\n// correct, effects will get executed in parallel\nconst [users, repos] = yield all([\n  call(fetch, '/users'),\n  call(fetch, '/repos')\n])\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous API Task Function with Redux-Saga\nDESCRIPTION: Defines a generator function that handles fetching data from an API. It uses call to make the API request and put to dispatch success or failure actions based on the result.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/basics/UsingSagaHelpers.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { call, put } from 'redux-saga/effects'\nimport Api from './path/to/api'\n\nexport function* fetchData(action) {\n  try {\n    const data = yield call(Api.fetchUser, action.payload.url)\n    yield put({ type: 'FETCH_SUCCEEDED', data })\n  } catch (error) {\n    yield put({ type: 'FETCH_FAILED', error })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Native Testing with effectMiddlewares\nDESCRIPTION: An example of using Redux Saga's built-in effectMiddlewares for integration testing. This approach allows intercepting and resolving effects without external libraries, using a real Redux store with middleware.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Testing.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ntest('effectMiddleware', assert => {\n  assert.plan(1)\n\n  let actual = []\n\n  function rootReducer(state = {}, action) {\n    return action\n  }\n\n  const effectMiddleware = next => effect => {\n    if (effect === apiCall) {\n      Promise.resolve().then(() => next('injected value'))\n      return\n    }\n    return next(effect)\n  }\n\n  const middleware = sagaMiddleware({ effectMiddlewares: [effectMiddleware] })\n  const store = createStore(rootReducer, {}, applyMiddleware(middleware))\n\n  const apiCall = call(() => new Promise(() => {}))\n\n  function* root() {\n    actual.push(yield all([call(fnA), apiCall]))\n  }\n\n  function* fnA() {\n    const result = []\n    result.push((yield take('ACTION-1')).val)\n    result.push((yield take('ACTION-2')).val)\n    return result\n  }\n\n  const task = middleware.run(root)\n\n  Promise.resolve()\n    .then(() => store.dispatch({ type: 'ACTION-1', val: 1 }))\n    .then(() => store.dispatch({ type: 'ACTION-2', val: 2 }))\n\n  const expected = [[[1, 2], 'injected value']]\n\n  task\n    .toPromise()\n    .then(() => {\n      assert.deepEqual(\n        actual,\n        expected,\n        'effectMiddleware must be able to intercept and resolve effect in a custom way',\n      )\n    })\n    .catch(err => assert.fail(err))\n})\n```\n\n----------------------------------------\n\nTITLE: Using call() Effect for Declarative API Requests in Redux-Saga\nDESCRIPTION: This snippet demonstrates using the call() effect creator to make API requests in a declarative way. This approach creates a description of the function call rather than executing it immediately.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/basics/DeclarativeEffects.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { call } from 'redux-saga/effects'\n\nfunction* fetchProducts() {\n  const products = yield call(Api.fetch, '/products')\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Attached Forks in Redux-Saga with fork Effect\nDESCRIPTION: Demonstrates how to use the fork effect to create attached forks that execute tasks in the background. The example shows fetching multiple resources in parallel while waiting for all tasks to complete.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/ForkModel.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fork, call, put, delay } from 'redux-saga/effects'\nimport api from './somewhere/api' // app specific\nimport { receiveData } from './somewhere/actions' // app specific\n\nfunction* fetchAll() {\n  const task1 = yield fork(fetchResource, 'users')\n  const task2 = yield fork(fetchResource, 'comments')\n  yield delay(1000)\n}\n\nfunction* fetchResource(resource) {\n  const {data} = yield call(api.fetch, resource)\n  yield put(receiveData(data))\n}\n\nfunction* main() {\n  yield call(fetchAll)\n}\n```\n\n----------------------------------------\n\nTITLE: Root Saga with Spawn Effect\nDESCRIPTION: Implementation using spawn effect to disconnect child sagas from parent, preventing cascading failures while maintaining saga execution.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/RootSaga.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function* rootSaga() {\n  yield spawn(saga1)\n  yield spawn(saga2)\n  yield spawn(saga3)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Watch-and-Fork Pattern in Redux-Saga\nDESCRIPTION: Demonstrates the typical watch-and-fork pattern where a saga watches for REQUEST actions and forks a handler for each action. This allows concurrent processing of multiple requests.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Channels.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { take, fork, ... } from 'redux-saga/effects'\n\nfunction* watchRequests() {\n  while (true) {\n    const {payload} = yield take('REQUEST')\n    yield fork(handleRequest, payload)\n  }\n}\n\nfunction* handleRequest(payload) { ... }\n```\n\n----------------------------------------\n\nTITLE: Broadcasting to Multiple Workers Using multicastChannel in Redux-Saga\nDESCRIPTION: This example shows how to use multicastChannel to broadcast messages to multiple different worker sagas simultaneously. Unlike regular channels, multicastChannel delivers the same message to all subscribers, requiring a pattern argument when taking from the channel.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Channels.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { multicastChannel } from 'redux-saga'\nimport { take, fork, call, put } from 'redux-saga/effects'\n\nfunction* watchRequests() {\n  // create a multicastChannel to queue incoming requests\n  const channel = yield call(multicastChannel)\n\n  // fork different workers\n  yield fork(logWorker, channel)\n  yield fork(mainWorker, channel)\n\n  while (true) {\n    const { payload } = yield take('REQUEST')\n    yield put(channel, payload)\n  }\n}\n\nfunction* logWorker(channel) {\n  while (true) {\n    // Pattern '*' for simplicity\n    const payload = yield take(channel, '*')\n    // Log the request somewhere..\n    console.log('logWorker:', payload)\n  }\n}\n\nfunction* mainWorker(channel) {\n  while (true) {\n    // Pattern '*' for simplicity\n    const payload = yield take(channel, '*')\n    // Process the request\n    console.log('mainWorker', payload)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Declarative Effects with call() for Better Testability\nDESCRIPTION: Refactors the fetch saga to use the call effect creator, making it more testable by creating a description of the effect rather than executing it immediately.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-cn.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { call } from 'redux-saga'\n\nfunction* fetchSaga() {\n  const products = yield call(fetch, '/products') // don't run the effect\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Implementation of throttle Effect Using Low-Level Redux-Saga Effects\nDESCRIPTION: This snippet shows how the throttle helper could be implemented using low-level Redux-Saga effects such as take, fork, actionChannel, and delay. It demonstrates the internal workings of the throttle effect.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst throttle = (ms, pattern, task, ...args) => fork(function*() {\n  const throttleChannel = yield actionChannel(pattern, buffers.sliding(1))\n\n  while (true) {\n    const action = yield take(throttleChannel)\n    yield fork(task, ...args, action)\n    yield delay(ms)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Array-Based Race Effect in Redux-Saga\nDESCRIPTION: This example demonstrates the alternative array syntax for the race effect. It races between a fetch operation and a cancel action, allowing either result to be accessed by array destructuring.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { take, call, race } from `redux-saga/effects`\nimport fetchUsers from './path/to/fetchUsers'\n\nfunction* fetchUsersSaga() {\n  const [response, cancel] = yield race([\n    call(fetchUsers),\n    take(CANCEL_FETCH)\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing takeLatest Pattern in Redux-Saga\nDESCRIPTION: Example showing how to use takeLatest to handle USER_REQUESTED actions, ensuring only the latest fetch request is processed while canceling any pending ones.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { takeLatest } from `redux-saga/effects`\n\nfunction* fetchUser(action) {\n  ...\n}\n\nfunction* watchLastFetchUser() {\n  yield takeLatest('USER_REQUESTED', fetchUser)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeout Pattern with race Effect in Redux Saga\nDESCRIPTION: This snippet demonstrates how to trigger a remote fetch request with a 1-second timeout constraint using the race Effect. It handles both successful response and timeout conditions with appropriate action dispatches.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/RacingEffects.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { race, call, put, delay } from 'redux-saga/effects'\n\nfunction* fetchPostsWithTimeout() {\n  const {posts, timeout} = yield race({\n    posts: call(fetchApi, '/posts'),\n    timeout: delay(1000)\n  })\n\n  if (posts)\n    yield put({type: 'POSTS_RECEIVED', posts})\n  else\n    yield put({type: 'TIMEOUT_ERROR'})\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login/Logout Flow with Redux Saga\nDESCRIPTION: This snippet demonstrates how to implement a login/logout flow using the take effect. It creates a clear sequence of expected actions where LOGIN is always followed by LOGOUT in an infinite loop, making the control flow more readable and maintainable.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/FutureActions.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* loginFlow() {\n  while (true) {\n    yield take('LOGIN')\n    // ... perform the login logic\n    yield take('LOGOUT')\n    // ... perform the logout logic\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using fork() and join() for Task Management in Redux-Saga\nDESCRIPTION: Demonstrates how to create a non-blocking task with fork() and then wait for its result later with join(). The task object provides methods for checking task status and results.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-hant.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fork, join } from 'redux-saga'\n\nfunction* child() { ... }\n\nfunction *parent() {\n  // 非阻塞式呼叫\n  const task = yield fork(subtask, ...args)\n\n  // ... 稍候\n  // 現在是阻塞式呼叫，將會再開始帶著任務的結果\n  const result = yield join(task)\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous Increment Saga\nDESCRIPTION: Defines a saga that waits for INCREMENT_ASYNC actions, delays for 1 second, then dispatches an increment action.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-hant.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { take, put } from 'redux-saga'\n\nfunction* incrementAsync() {\n  while (true) {\n    const nextAction = yield take(INCREMENT_ASYNC)\n    yield delay(1000)\n    yield put(increment())\n  }\n}\n\nexport default [incrementAsync]\n```\n\n----------------------------------------\n\nTITLE: Using takeLatest to Handle Only the Most Recent Action in Redux-Saga\nDESCRIPTION: Creates a watcher saga with takeLatest that listens for 'FETCH_REQUESTED' actions but only runs one fetchData task at a time. If a new action is dispatched while a previous task is running, the previous task is automatically cancelled.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/basics/UsingSagaHelpers.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { takeLatest } from 'redux-saga/effects'\n\nfunction* watchFetchData() {\n  yield takeLatest('FETCH_REQUESTED', fetchData)\n}\n```\n\n----------------------------------------\n\nTITLE: Sequencing Sagas using yield* operator in Redux-Saga\nDESCRIPTION: This example demonstrates how to compose multiple sagas in a sequential flow using the yield* operator. The game saga runs three level sagas in sequence, capturing the return value from each and dispatching it via a put effect. This pattern allows for procedural-style sequencing of macro-tasks.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/SequencingSagas.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* playLevelOne() { ... }\n\nfunction* playLevelTwo() { ... }\n\nfunction* playLevelThree() { ... }\n\nfunction* game() {\n  const score1 = yield* playLevelOne()\n  yield put(showScore(score1))\n\n  const score2 = yield* playLevelTwo()\n  yield put(showScore(score2))\n\n  const score3 = yield* playLevelThree()\n  yield put(showScore(score3))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Channel from Interval in Redux-Saga\nDESCRIPTION: Creates an event channel from a countdown timer using setInterval. The subscriber function initializes the interval and emits the remaining seconds. When the countdown reaches zero, it emits END to close the channel.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Channels.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { eventChannel, END } from 'redux-saga'\n\nfunction countdown(secs) {\n  return eventChannel(emitter => {\n      const iv = setInterval(() => {\n        secs -= 1\n        if (secs > 0) {\n          emitter(secs)\n        } else {\n          // this causes the channel to close\n          emitter(END)\n        }\n      }, 1000);\n      // The subscriber must return an unsubscribe function\n      return () => {\n        clearInterval(iv)\n      }\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Watching for First Three Todo Creations in Redux Saga\nDESCRIPTION: This snippet demonstrates a more complex control flow that watches for the first three TODO_CREATED actions and then dispatches a congratulation message. It uses a finite for loop with take effects to precisely control when the observation terminates.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/FutureActions.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { take, put } from 'redux-saga/effects'\n\nfunction* watchFirstThreeTodosCreation() {\n  for (let i = 0; i < 3; i++) {\n    const action = yield take('TODO_CREATED')\n  }\n  yield put({type: 'SHOW_CONGRATULATION'})\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a Branching Saga with cloneableGenerator\nDESCRIPTION: Demonstrates using cloneableGenerator to test different branches of a saga without repeating steps, testing both even and odd number selection cases.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Testing.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { put, take } from 'redux-saga/effects'\nimport { cloneableGenerator } from '@redux-saga/testing-utils'\n\ntest('doStuffThenChangeColor', assert => {\n  const gen = cloneableGenerator(doStuffThenChangeColor)()\n  gen.next() // DO_STUFF\n  gen.next() // DO_STUFF\n  gen.next() // CHOOSE_NUMBER\n\n  assert.test('user choose an even number', a => {\n    // cloning the generator before sending data\n    const clone = gen.clone()\n    a.deepEqual(clone.next(chooseNumber(2)).value, put(changeUI('red')), 'should change the color to red')\n\n    a.equal(clone.next().done, true, 'it should be done')\n\n    a.end()\n  })\n\n  assert.test('user choose an odd number', a => {\n    const clone = gen.clone()\n    a.deepEqual(clone.next(chooseNumber(3)).value, put(changeUI('blue')), 'should change the color to blue')\n\n    a.equal(clone.next().done, true, 'it should be done')\n\n    a.end()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Race Effect in Redux-Saga for Cancellable API Requests\nDESCRIPTION: This example shows how to use the race effect to implement a cancellable API request. It races between a fetch operation and a cancel action, allowing the user to cancel an in-progress request.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { take, call, race } from `redux-saga/effects`\nimport fetchUsers from './path/to/fetchUsers'\n\nfunction* fetchUsersSaga() {\n  const { response, cancel } = yield race({\n    response: call(fetchUsers),\n    cancel: take(CANCEL_FETCH)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Self-Cancellation Pattern in Redux-Saga\nDESCRIPTION: Shows how to implement self-cancellation logic within a saga using cancel() effect. Includes error handling and cleanup logic in finally block.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* deleteRecord({ payload }) {\n  try {\n    const { confirm, deny } = yield call(prompt);\n    if (confirm) {\n      yield put(actions.deleteRecord.confirmed())\n    }\n    if (deny) {\n      yield cancel()\n    }\n  } catch(e) {\n    // handle failure\n  } finally {\n    if (yield cancelled()) {\n      // shared cancellation logic\n      yield put(actions.deleteRecord.cancel(payload))\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Login Flow Structure in Redux Saga\nDESCRIPTION: This snippet shows the basic structure of a login flow using a while loop and the take Effect to handle LOGIN and LOGOUT actions.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/NonBlockingCalls.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* loginFlow() {\n  while (true) {\n    yield take('LOGIN')\n    // ... perform the login logic\n    yield take('LOGOUT')\n    // ... perform the logout logic\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Saga for Fetching User Data\nDESCRIPTION: Defines a saga that watches for USER_FETCH_REQUESTED actions and performs an API call to fetch user data.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_ja.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { call, put, takeEvery, takeLatest } from 'redux-saga/effects'\nimport Api from '...'\n\n// ワーカー Saga: USER_FETCH_REQUESTED Action によって起動する\nfunction* fetchUser(action) {\n  try {\n    const user = yield call(Api.fetchUser, action.payload.userId)\n    yield put({ type: 'USER_FETCH_SUCCEEDED', user: user })\n  } catch (e) {\n    yield put({ type: 'USER_FETCH_FAILED', message: e.message })\n  }\n}\n\n/*\n  USER_FETCH_REQUESTED Action が送出されるたびに fetchUser を起動します。\n  ユーザ情報の並列取得にも対応しています。\n*/\nfunction* mySaga() {\n  yield takeEvery('USER_FETCH_REQUESTED', fetchUser)\n}\n\n/*\n  代わりに takeLatest を使うこともできます。\n\n  しかし、ユーザ情報の並列取得には対応しません。\n  もしレスポンス待ちの状態で USER_FETCH_REQUESTED を受け取った場合、\n  待ち状態のリクエストはキャンセルされて最後の1つだけが実行されます。\n*/\nfunction* mySaga() {\n  yield takeLatest('USER_FETCH_REQUESTED', fetchUser)\n}\n\nexport default mySaga\n```\n\n----------------------------------------\n\nTITLE: Implementing Debouncing with takeLatest in Redux Saga\nDESCRIPTION: Demonstrates how to implement debouncing more concisely using the takeLatest helper combined with delay. This achieves the same result as the manual fork/cancel pattern but with less code.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/Recipes.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { call, takeLatest, delay } from 'redux-saga/effects'\n\nfunction* handleInput({ input }) {\n  // debounce by 500ms\n  yield delay(500)\n  ...\n}\n\nfunction* watchInput() {\n  // will cancel current running handleInput task\n  yield takeLatest('INPUT_CHANGED', handleInput);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Root Saga Implementation with All Effect\nDESCRIPTION: Basic implementation of a root saga using the all effect to run multiple sagas in parallel. The all effect is blocking, meaning code after it executes only when all child sagas complete.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/RootSaga.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function* rootSaga() {\n  yield all([\n    helloSaga(),\n    watchIncrementAsync()\n  ])\n  // code after all-effect\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Implementation of debounce Effect Using Low-Level Redux-Saga Effects\nDESCRIPTION: This snippet shows how the debounce helper could be implemented using low-level Redux-Saga effects such as take, delay, race, and fork. It demonstrates the internal workings of the debounce effect.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst debounce = (ms, pattern, task, ...args) => fork(function*() {\n  while (true) {\n    let action = yield take(pattern)\n\n    while (true) {\n      const { debounced, latestAction } = yield race({\n        debounced: delay(ms),\n        latestAction: take(pattern)\n      })\n\n      if (debounced) {\n        yield fork(task, ...args, action)\n        break\n      }\n\n      action = latestAction\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Logger with take in Redux Saga\nDESCRIPTION: This snippet shows how to implement the same action logging functionality using the take effect instead of takeEvery. It uses an infinite while loop to continuously pull and process actions as they are dispatched.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/FutureActions.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { select, take } from 'redux-saga/effects'\n\nfunction* watchAndLog() {\n  while (true) {\n    const action = yield take('*')\n    const state = yield select()\n\n    console.log('action', action)\n    console.log('state after', state)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Generators with Fork Effect in Redux Saga\nDESCRIPTION: This snippet demonstrates how to test generators that use the fork effect in Redux Saga. It uses the createMockTask utility function to create a mock task for testing cancellation scenarios.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/TaskCancellation.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMockTask } from '@redux-saga/testing-utils';\n\ndescribe('main', () => {\n  const generator = main();\n\n  it('waits for start action', () => {\n    const expectedYield = take('START_BACKGROUND_SYNC');\n    expect(generator.next().value).to.deep.equal(expectedYield);\n  });\n\n  it('forks the service', () => {\n    const expectedYield = fork(bgSync);\n    const mockedAction = { type: 'START_BACKGROUND_SYNC' };\n    expect(generator.next(mockedAction).value).to.deep.equal(expectedYield);\n  });\n\n  it('waits for stop action and then cancels the service', () => {\n    const mockTask = createMockTask();\n\n    const expectedTakeYield = take('STOP_BACKGROUND_SYNC');\n    expect(generator.next(mockTask).value).to.deep.equal(expectedTakeYield);\n\n    const expectedCancelYield = cancel(mockTask);\n    expect(generator.next().value).to.deep.equal(expectedCancelYield);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using takeEvery to Watch for Actions in Redux-Saga\nDESCRIPTION: Creates a watcher saga that uses takeEvery to listen for 'FETCH_REQUESTED' actions and spawns a fetchData task for each action. This allows multiple concurrent fetchData tasks to run simultaneously.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/basics/UsingSagaHelpers.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { takeEvery } from 'redux-saga/effects'\n\nfunction* watchFetchData() {\n  yield takeEvery('FETCH_REQUESTED', fetchData)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing takeLatest Helper in Redux-Saga\nDESCRIPTION: This snippet demonstrates the implementation of the takeLatest helper using low-level Redux-Saga effects. It creates a generator function that takes a pattern and a saga, then repeatedly takes matching actions but cancels any previously running task before starting a new one, ensuring only one instance runs at a time.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Concurrency.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {cancel, fork, take} from \"redux-saga/effects\"\n\nconst takeLatest = (pattern, saga, ...args) => fork(function*() {\n  let lastTask\n  while (true) {\n    const action = yield take(pattern)\n    if (lastTask) {\n      yield cancel(lastTask) // cancel is no-op if the task has already terminated\n    }\n    lastTask = yield fork(saga, ...args.concat(action))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with Batched Actions Support in Redux Saga\nDESCRIPTION: Shows how to set up Redux Saga middleware to handle batched actions using redux-batched-actions. This setup enables dispatching multiple actions at once while only triggering a single reducer call, improving performance.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/Recipes.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware, { stdChannel } from 'redux-saga';\nimport { enableBatching, BATCH } from 'redux-batched-actions';\n\n// your root reducer\nimport { rootReducer } from './reducer';\n// your root saga\nimport { rootSaga } from './saga';\n\nconst channel = stdChannel();\nconst rawPut = channel.put;\nchannel.put = (action: ActionWithPayload<any>) => {\n  if (action.type === BATCH) {\n    action.payload.forEach(rawPut);\n    return;\n  }\n  rawPut(action);\n};\nconst sagaMiddleware = createSagaMiddleware({ channel });\n\nconst reducer = enableBatching(rootReducer);\n// https://redux-toolkit.js.org/api/configureStore\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: [sagaMiddleware],\n});\nsagaMiddleware.run(rootSaga);\n```\n\n----------------------------------------\n\nTITLE: Dispatching Actions Using put Effect in Redux Saga\nDESCRIPTION: The recommended declarative approach for dispatching actions from within a saga using the `put` effect. This allows the middleware to handle the actual dispatch operation.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/basics/DispatchingActions.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { call, put } from 'redux-saga/effects'\n// ...\n\nfunction* fetchProducts() {\n  const products = yield call(Api.fetch, '/products')\n  // create and yield a dispatch Effect\n  yield put({ type: 'PRODUCTS_RECEIVED', products })\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Sagas\nDESCRIPTION: Demonstrates error handling in a saga using try/catch blocks.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-hant.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* checkout(getState) {\n  while (yield take(types.CHECKOUT_REQUEST)) {\n    try {\n      const cart = getState().cart\n      yield call(api.buyProducts, cart)\n      yield put(actions.checkoutSuccess(cart))\n    } catch (error) {\n      yield put(actions.checkoutFailure(error))\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Saga for Async Increment\nDESCRIPTION: Defines an incrementAsync saga that listens for INCREMENT_ASYNC actions, waits 1 second, then dispatches an increment action. This demonstrates the basic pattern of taking actions and putting new ones.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-cn.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { take, put } from 'redux-saga'\n// sagas/index.js\n\nfunction* incrementAsync() {\n  while (true) {\n    // wait for each INCREMENT_ASYNC action\n    const nextAction = yield take(INCREMENT_ASYNC)\n\n    // delay is a sample function\n    // return a Promise that resolves after (ms) milliseconds\n    yield delay(1000)\n\n    // dispatch INCREMENT_COUNTER\n    yield put(increment())\n  }\n}\n\nexport default [incrementAsync]\n```\n\n----------------------------------------\n\nTITLE: Limited Retry Pattern for API Requests in Redux Saga\nDESCRIPTION: Implements a retry mechanism for failed API requests with a maximum retry count and delay between attempts. This pattern uses a for loop to attempt the API call up to 5 times with a 2-second delay between retries.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/Recipes.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { call, put, take, delay } from 'redux-saga/effects'\n\nfunction* updateApi(data) {\n  for (let i = 0; i < 5; i++) {\n    try {\n      const apiResponse = yield call(apiRequest, { data })\n      return apiResponse\n    } catch (err) {\n      if (i < 4) {\n        yield delay(2000)\n      }\n    }\n  }\n  // attempts failed after 5 attempts\n  throw new Error('API request failed')\n}\n\nexport default function* updateResource() {\n  while (true) {\n    const { data } = yield take('UPDATE_START')\n    try {\n      const apiResponse = yield call(updateApi, data)\n      yield put({\n        type: 'UPDATE_SUCCESS',\n        payload: apiResponse.body,\n      })\n    } catch (error) {\n      yield put({\n        type: 'UPDATE_ERROR',\n        error,\n      })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Redux Saga Middleware to the Store\nDESCRIPTION: Code showing how to create the saga middleware, connect it to the Redux store using applyMiddleware, and run a saga.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/BeginnerTutorial.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nimport { createStore, applyMiddleware } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\n\n// ...\nimport { helloSaga } from './sagas'\n\nconst sagaMiddleware = createSagaMiddleware()\nconst store = createStore(\n  reducer,\n  applyMiddleware(sagaMiddleware)\n)\nsagaMiddleware.run(helloSaga)\n\nconst action = type => store.dispatch({type})\n\n// rest unchanged\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Redux Saga for Color Changes\nDESCRIPTION: Defines a generator function that waits for a CHOOSE_COLOR action and then dispatches a CHANGE_UI action with the selected color.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Testing.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* changeColorSaga() {\n  const action = yield take(CHOOSE_COLOR)\n  yield put(changeUI(action.payload.color))\n}\n```\n\n----------------------------------------\n\nTITLE: Sequential Saga Composition\nDESCRIPTION: Shows how to compose multiple sagas sequentially using the yield* operator.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-hant.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* playLevelOne(getState) { ... }\n\nfunction* playLevelTwo(getState) { ... }\n\nfunction* playLevelThree(getState) { ... }\n\nfunction* game(getState) {\n  const score1 = yield* playLevelOne(getState)\n  put(showScore(score1))\n\n  const score2 = yield* playLevelTwo(getState)\n  put(showScore(score2))\n}\n```\n\n----------------------------------------\n\nTITLE: Integration Testing a Saga with Sinon Mocks\nDESCRIPTION: Demonstrates full integration testing of a saga using sinon to mock API calls, running the saga to completion, and asserting on dispatched actions.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Testing.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport sinon from 'sinon'\nimport * as api from './api'\n\ntest('callApi', async assert => {\n  const dispatched = []\n  sinon.stub(api, 'myApi').callsFake(() => ({\n    json: () => ({\n      some: 'value',\n    }),\n  }))\n  const url = 'http://url'\n  const result = await runSaga(\n    {\n      dispatch: action => dispatched.push(action),\n      getState: () => ({ state: 'test' }),\n    },\n    callApi,\n    url,\n  ).toPromise()\n\n  assert.true(myApi.calledWith(url, somethingFromState({ state: 'test' })))\n  assert.deepEqual(dispatched, [success({ some: 'value' })])\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Promise Cancellation in Redux-Saga\nDESCRIPTION: Demonstrates how to attach cancellation logic to a Promise result using the CANCEL symbol from redux-saga. Shows implementation of a cancellable API call with abort functionality.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CANCEL } from 'redux-saga'\nimport { fork, cancel } from 'redux-saga/effects'\n\nfunction myApi() {\n  const promise = myXhr(...)\n\n  promise[CANCEL] = () => myXhr.abort()\n  return promise\n}\n\nfunction* mySaga() {\n\n  const task = yield fork(myApi)\n\n  // ... later\n  // will call promise[CANCEL] on the result of myApi\n  yield cancel(task)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Event Channel in Redux-Saga\nDESCRIPTION: Creates an event channel from WebSocket events. The channel subscribes to 'ping' and 'error' events, and emits their payloads to the channel. It returns an unsubscribe function to clean up event listeners when the channel is closed.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Channels.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { take, put, call, apply, delay } from 'redux-saga/effects'\nimport { eventChannel } from 'redux-saga'\nimport { createWebSocketConnection } from './socketConnection'\n\n// this function creates an event channel from a given socket\n// Setup subscription to incoming `ping` events\nfunction createSocketChannel(socket) {\n  // `eventChannel` takes a subscriber function\n  // the subscriber function takes an `emit` argument to put messages onto the channel\n  return eventChannel(emit => {\n\n    const pingHandler = (event) => {\n      // puts event payload into the channel\n      // this allows a Saga to take this payload from the returned channel\n      emit(event.payload)\n    }\n\n    const errorHandler = (errorEvent) => {\n      // create an Error object and put it into the channel\n      emit(new Error(errorEvent.reason))\n    }\n\n    // setup the subscription\n    socket.on('ping', pingHandler)\n    socket.on('error', errorHandler)\n\n    // the subscriber must return an unsubscribe function\n    // this will be invoked when the saga calls `channel.close` method\n    const unsubscribe = () => {\n      socket.off('ping', pingHandler)\n    }\n\n    return unsubscribe\n  })\n}\n\n// reply with a `pong` message by invoking `socket.emit('pong')`\nfunction* pong(socket) {\n  yield delay(5000)\n  yield apply(socket, socket.emit, ['pong']) // call `emit` as a method with `socket` as context\n}\n\nexport function* watchOnPings() {\n  const socket = yield call(createWebSocketConnection)\n  const socketChannel = yield call(createSocketChannel, socket)\n\n  while (true) {\n    try {\n      // An error from socketChannel will cause the saga jump to the catch block\n      const payload = yield take(socketChannel)\n      yield put({ type: INCOMING_PONG_PAYLOAD, payload })\n      yield fork(pong, socket)\n    } catch(err) {\n      console.error('socket error:', err)\n      // socketChannel is still open in catch block\n      // if we want end the socketChannel, we need close it explicitly\n      // socketChannel.close()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using apply() Effect for Method Invocation in Redux-Saga\nDESCRIPTION: Demonstrates the apply() effect, which is an alias for the method invocation form of call() and serves the same purpose for invoking object methods.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/basics/DeclarativeEffects.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nyield apply(obj, obj.method, [arg1, arg2, ...])\n```\n\n----------------------------------------\n\nTITLE: Watching and Fetching Products with Direct Promise Approach in Redux-Saga\nDESCRIPTION: This snippet shows a basic implementation of a Saga that watches for a 'PRODUCTS_REQUESTED' action and fetches products directly using a Promise. This approach works but is less testable.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/basics/DeclarativeEffects.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { takeEvery } from 'redux-saga/effects'\nimport Api from './path/to/api'\n\nfunction* watchFetchProducts() {\n  yield takeEvery('PRODUCTS_REQUESTED', fetchProducts)\n}\n\nfunction* fetchProducts() {\n  const products = yield Api.fetch('/products')\n  console.log(products)\n}\n```\n\n----------------------------------------\n\nTITLE: Using cancelled() Effect in Redux-Saga to Handle Cancellation Logic\nDESCRIPTION: This snippet demonstrates how to use the cancelled() effect in a saga to execute specific logic when a generator has been cancelled. It's typically used in a finally block to run cancellation-specific code.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* saga() {\n  try {\n    // ...\n  } finally {\n    if (yield cancelled()) {\n      // logic that should execute only on Cancellation\n    }\n    // logic that should execute in all situations (e.g. closing a channel)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unlimited Retry Pattern with User Notification in Redux Saga\nDESCRIPTION: Implements an unlimited retry mechanism for API requests that notifies the user of each retry attempt. This pattern uses a while loop for unlimited retries and dispatches an UPDATE_RETRY action after each failure.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/Recipes.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { delay } from 'redux-saga/effects'\n\nfunction* updateApi(data) {\n  while (true) {\n    try {\n      const apiResponse = yield call(apiRequest, { data })\n      return apiResponse\n    } catch (error) {\n      yield put({\n        type: 'UPDATE_RETRY',\n        error,\n      })\n      yield delay(2000)\n    }\n  }\n}\n\nfunction* updateResource({ data }) {\n  const apiResponse = yield call(updateApi, data)\n  yield put({\n    type: 'UPDATE_SUCCESS',\n    payload: apiResponse.body,\n  })\n}\n\nexport function* watchUpdateResource() {\n  yield takeLatest('UPDATE_START', updateResource)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Undo Functionality with Race in Redux Saga\nDESCRIPTION: Demonstrates how to implement a time-limited undo feature using race and delay effects. This pattern shows an undo UI for a limited time and can either revert the action if the user chooses to undo, or commit the action if the time expires.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/Recipes.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { take, put, call, spawn, race, delay } from 'redux-saga/effects'\nimport { updateThreadApi, actions } from 'somewhere'\n\nfunction* onArchive(action) {\n  const { threadId } = action\n  const undoId = `UNDO_ARCHIVE_${threadId}`\n\n  const thread = { id: threadId, archived: true }\n\n  // show undo UI element, and provide a key to communicate\n  yield put(actions.showUndo(undoId))\n\n  // optimistically mark the thread as `archived`\n  yield put(actions.updateThread(thread))\n\n  // allow the user 5 seconds to perform undo.\n  // after 5 seconds, 'archive' will be the winner of the race-condition\n  const { undo, archive } = yield race({\n    undo: take(action => action.type === 'UNDO' && action.undoId === undoId),\n    archive: delay(5000),\n  })\n\n  // hide undo UI element, the race condition has an answer\n  yield put(actions.hideUndo(undoId))\n\n  if (undo) {\n    // revert thread to previous state\n    yield put(actions.updateThread({ id: threadId, archived: false }))\n  } else if (archive) {\n    // make the API call to apply the changes remotely\n    yield call(updateThreadApi, thread)\n  }\n}\n\nfunction* main() {\n  while (true) {\n    // wait for an ARCHIVE_THREAD to happen\n    const action = yield take('ARCHIVE_THREAD')\n    // use spawn to execute onArchive in a non-blocking fashion, which also\n    // prevents cancellation when main saga gets cancelled.\n    // This helps us in keeping state in sync between server and client\n    yield spawn(onArchive, action)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-Restarting Root Saga Implementation\nDESCRIPTION: Advanced implementation that automatically restarts child sagas on failure, using spawn and infinite loops with try-catch blocks.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/RootSaga.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* rootSaga () {\n  const sagas = [\n    saga1,\n    saga2,\n    saga3,\n  ];\n\n  yield all(sagas.map(saga =>\n    spawn(function* () {\n      while (true) {\n        try {\n          yield call(saga)\n          break\n        } catch (e) {\n          console.log(e)\n        }\n      }\n    })))\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using all Effect as Alternative to fork in Redux-Saga\nDESCRIPTION: Shows how the fetchAll saga could be rewritten using the parallel all effect instead of fork. This demonstrates the semantic similarity between attached forks and parallel effects.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/ForkModel.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* fetchAll() {\n  yield all([\n    call(fetchResource, 'users'),     // task1\n    call(fetchResource, 'comments'),  // task2,\n    delay(1000)\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cancellable Background Task with race Effect in Redux Saga\nDESCRIPTION: This snippet shows how to create a background task that runs in an endless loop and can be cancelled by dispatching a specific action. The race Effect automatically handles the cancellation of the backgroundTask when a CANCEL_TASK action is dispatched.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/RacingEffects.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { race, take, call } from 'redux-saga/effects'\n\nfunction* backgroundTask() {\n  while (true) { ... }\n}\n\nfunction* watchStartBackgroundTask() {\n  while (true) {\n    yield take('START_BACKGROUND_TASK')\n    yield race({\n      task: call(backgroundTask),\n      cancel: take('CANCEL_TASK')\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integration Testing with redux-saga-tester\nDESCRIPTION: Example of using redux-saga-tester for integration testing. The SagaTester class allows testing of saga execution with a simulated Redux store, including dispatching actions and checking state changes.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Testing.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport SagaTester from 'redux-saga-tester';\n\ntest('with redux-saga-tester', () => {\n  const sagaTester = new SagaTester({\n    initialState: defaultState,\n    reducers: reducer\n  });\n\n  sagaTester.start(callApi);\n\n  sagaTester.dispatch(actionToTriggerSaga());\n\n  await sagaTester.waitFor(success);\n\n  assert.true(sagaTester.wasCalled(success(response)));\n\n  assert.deepEqual(sagaTester.getState(), { data: response });\n});\n```\n\n----------------------------------------\n\nTITLE: Parallel Saga Execution with all() Effect\nDESCRIPTION: Shows how to execute multiple sagas in parallel using the all() effect combinator. Tasks will run concurrently and the saga will wait for all of them to complete before continuing.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/ComposingSagas.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* mainSaga(getState) {\n  const results = yield all([call(task1), call(task2), ...])\n  yield put(showResults(results))\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a Saga with Declarative Effects\nDESCRIPTION: Shows how to test sagas that use declarative effects by asserting on the shape of the effect description rather than mocking implementation details.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-cn.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { call } from 'redux-saga'\n\nconst iterator = fetchSaga()\nassert.deepEqual(iterator.next().value, call(fetch, '/products')) // expects a call(...) value\n```\n\n----------------------------------------\n\nTITLE: Creating a Limited-Time Saga\nDESCRIPTION: Defines a saga that waits for 3 INCREMENT_COUNTER actions before dispatching a congratulation action.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-hant.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* onBoarding() {\n  for (let i = 0; i < 3; i++) yield take(INCREMENT_COUNTER)\n\n  yield put(showCongratulation())\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Cancellation Propagation in Redux Saga\nDESCRIPTION: This code snippet shows how cancellation propagates downward through nested task calls in Redux Saga. It demonstrates that cancelling a parent task will also cancel its child tasks.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/TaskCancellation.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* main() {\n  const task = yield fork(subtask)\n  ...\n  // later\n  yield cancel(task)\n}\n\nfunction* subtask() {\n  ...\n  yield call(subtask2) // currently blocked on this call\n  ...\n}\n\nfunction* subtask2() {\n  ...\n  yield call(someApi) // currently blocked on this call\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Serial Request Processing with actionChannel\nDESCRIPTION: Shows how to use actionChannel to process REQUEST actions serially. Creates a channel that buffers incoming actions and processes them one at a time using a blocking call.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Channels.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { take, actionChannel, call, ... } from 'redux-saga/effects'\n\nfunction* watchRequests() {\n  // 1- Create a channel for request actions\n  const requestChan = yield actionChannel('REQUEST')\n  while (true) {\n    // 2- take from the channel\n    const {payload} = yield take(requestChan)\n    // 3- Note that we're using a blocking call\n    yield call(handleRequest, payload)\n  }\n}\n\nfunction* handleRequest(payload) { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing Throttled API Requests with Redux-Saga\nDESCRIPTION: This example shows how to create a throttled API call for autocomplete functionality. The throttle effect ensures that the fetchAutocomplete task won't be called more than once per 1000ms, preventing server flooding with requests.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { call, put, throttle } from `redux-saga/effects`\n\nfunction* fetchAutocomplete(action) {\n  const autocompleteProposals = yield call(Api.fetchAutocomplete, action.text)\n  yield put({type: 'FETCHED_AUTOCOMPLETE_PROPOSALS', proposals: autocompleteProposals})\n}\n\nfunction* throttleAutocomplete() {\n  yield throttle(1000, 'FETCH_AUTOCOMPLETE', fetchAutocomplete)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing takeEvery Helper in Redux-Saga\nDESCRIPTION: This snippet shows the implementation of the takeEvery helper using low-level Redux-Saga effects. It creates a generator function that takes a pattern and a saga, then repeatedly takes matching actions and forks the saga for each one, allowing multiple concurrent executions of the same saga.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Concurrency.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {fork, take} from \"redux-saga/effects\"\n\nconst takeEvery = (pattern, saga, ...args) => fork(function*() {\n  while (true) {\n    const action = yield take(pattern)\n    yield fork(saga, ...args.concat(action))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Dispatching a User Fetch Action in React Component\nDESCRIPTION: React component snippet showing how to dispatch a user fetch action when a button is clicked.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_ja.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass UserComponent extends React.Component {\n  ...\n  onSomeButtonClicked() {\n    const { userId, dispatch } = this.props\n    dispatch({type: 'USER_FETCH_REQUESTED', payload: {userId}})\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Low-level Implementation of takeLatest Effect\nDESCRIPTION: Shows how takeLatest is implemented using low-level effects like take and fork, demonstrating task cancellation logic.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst takeLatest = (patternOrChannel, saga, ...args) => fork(function*() {\n  let lastTask\n  while (true) {\n    const action = yield take(patternOrChannel)\n    if (lastTask) {\n      yield cancel(lastTask) // cancel is no-op if the task has already terminated\n    }\n    lastTask = yield fork(saga, ...args.concat(action))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Missed Actions in Redux Saga with Blocking vs Non-Blocking Calls\nDESCRIPTION: Demonstration of how a blocking call using 'call' can cause a saga to miss dispatched actions, and how to fix it by using a non-blocking 'fork' effect instead. The first example shows a saga that will miss actions during the API call, while the second shows the correct pattern.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/Troubleshooting.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* watchRequestActions() {\n  while (true) {\n    const { url, params } = yield take('REQUEST')\n    yield call(handleRequestAction, url, params) // The Saga will block here\n  }\n}\n\nfunction* handleRequestAction(url, params) {\n  const response = yield call(someRemoteApi, url, params)\n  yield put(someAction(response))\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* watchRequestActions() {\n  while (true) {\n    const { url, params } = yield take('REQUEST')\n    yield fork(handleRequestAction, url, params) // The Saga will resume immediately\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Debouncing with Fork and Cancel in Redux Saga\nDESCRIPTION: Shows how to implement debouncing behavior using basic Redux Saga effects like fork, cancel, take, and delay. This pattern cancels any pending task when a new input arrives and only processes input after a delay period with no new inputs.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/Recipes.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { call, cancel, fork, take, delay } from 'redux-saga/effects'\n\nfunction* handleInput(input) {\n  // debounce by 500ms\n  yield delay(500)\n  ...\n}\n\nfunction* watchInput() {\n  let task\n  while (true) {\n    const { input } = yield take('INPUT_CHANGED')\n    if (task) {\n      yield cancel(task)\n    }\n    task = yield fork(handleInput, input)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Blocking and Non-blocking calls in Redux Saga\nDESCRIPTION: This snippet illustrates the difference between blocking and non-blocking calls in Redux Saga. It shows various saga effects and whether they block the saga's execution or not.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/Glossary.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {call, cancel, join, take, put} from \"redux-saga/effects\"\n\nfunction* saga() {\n  yield take(ACTION)              // Blocking: will wait for the action\n  yield call(ApiFn, ...args)      // Blocking: will wait for ApiFn (If ApiFn returns a Promise)\n  yield call(otherSaga, ...args)  // Blocking: will wait for otherSaga to terminate\n\n  yield put(...)                   // Non-Blocking: will dispatch within internal scheduler\n\n  const task = yield fork(otherSaga, ...args)  // Non-blocking: will not wait for otherSaga\n  yield cancel(task)                           // Non-blocking: will resume immediately\n  // or\n  yield join(task)                              // Blocking: will wait for the task to terminate\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching with Direct Dispatch Function in Redux Saga\nDESCRIPTION: An example of the non-recommended approach that passes the dispatch function directly to a saga generator. This approach makes testing difficult as it requires mocking the dispatch function.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/basics/DispatchingActions.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n\nfunction* fetchProducts(dispatch) {\n  const products = yield call(Api.fetch, '/products')\n  dispatch({ type: 'PRODUCTS_RECEIVED', products })\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Cancellation with Event Channels in Redux-Saga\nDESCRIPTION: Extends the countdown saga to support cancellation. When the saga is cancelled, it detects this in the finally block using the cancelled() effect, closes the channel explicitly, and performs cleanup.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Channels.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { take, put, call, cancelled } from 'redux-saga/effects'\nimport { eventChannel, END } from 'redux-saga'\n\n// creates an event Channel from an interval of seconds\nfunction countdown(seconds) { ... }\n\nexport function* saga() {\n  const chan = yield call(countdown, value)\n  try {\n    while (true) {\n      let seconds = yield take(chan)\n      console.log(`countdown: ${seconds}`)\n    }\n  } finally {\n    if (yield cancelled()) {\n      chan.close()\n      console.log('countdown cancelled')\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using cloneableGenerator for Testing Saga Branches in JavaScript\nDESCRIPTION: Demonstrates how to use cloneableGenerator to test different branches of a saga without replaying actions. The example shows testing both odd and even number paths in a generator function by cloning the generator state.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cloneableGenerator } from '@redux-saga/testing-utils';\n\nfunction* oddOrEven() {\n  // some stuff are done here\n  yield 1;\n  yield 2;\n  yield 3;\n\n  const userInput = yield 'enter a number';\n  if (userInput % 2 === 0) {\n    yield 'even';\n  } else {\n    yield 'odd'\n  }\n}\n\ntest('my oddOrEven saga', assert => {\n  const data = {};\n  data.gen = cloneableGenerator(oddOrEven)();\n\n  assert.equal(\n    data.gen.next().value,\n    1,\n    'it should yield 1'\n  );\n\n  assert.equal(\n    data.gen.next().value,\n    2,\n    'it should yield 2'\n  );\n\n  assert.equal(\n    data.gen.next().value,\n    3,\n    'it should yield 3'\n  );\n\n  assert.equal(\n    data.gen.next().value,\n    'enter a number',\n    'it should ask for a number'\n  );\n\n  assert.test('even number is given', a => {\n    // we make a clone of the generator before giving the number;\n    data.clone = data.gen.clone();\n\n    a.equal(\n      data.gen.next(2).value,\n      'even',\n      'it should yield \"even\"'\n    );\n\n    a.equal(\n      data.gen.next().done,\n      true,\n      'it should be done'\n    );\n\n    a.end();\n  });\n\n  assert.test('odd number is given', a => {\n\n    a.equal(\n      data.clone.next(1).value,\n      'odd',\n      'it should yield \"odd\"'\n    );\n\n    a.equal(\n      data.clone.next().done,\n      true,\n      'it should be done'\n    );\n\n    a.end();\n  });\n\n  assert.end();\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting Saga to Custom Input/Output using runSaga in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the runSaga function from redux-saga to connect a saga to custom input/output. It sets up an EventEmitter and a channel for action handling, and creates a custom IO object to orchestrate take and put effects.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/UsingRunSaga.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { runSaga, stdChannel } from 'redux-saga'\n\nconst emitter = new EventEmitter()\nconst channel = stdChannel()\nemitter.on(\"action\", channel.put)\n\nconst myIO = {\n  // this will be used to orchestrate take and put Effects\n  channel,\n  // this will be used to resolve put Effects\n  dispatch(output) {\n    emitter.emit(\"action\", output)\n  },\n  // this will be used to resolve select Effects\n  getState() {\n    return state\n  }\n}\n\nrunSaga(\n  myIO,\n  function* saga() { ... },\n)\n```\n\n----------------------------------------\n\nTITLE: Consuming an Event Channel in a Redux-Saga Countdown Example\nDESCRIPTION: Demonstrates how to use an event channel in a saga. The saga creates a countdown channel, then continuously takes values from it until the channel is closed with END, which causes the saga to jump to the finally block.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Channels.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { take, put, call } from 'redux-saga/effects'\nimport { eventChannel, END } from 'redux-saga'\n\n// creates an event Channel from an interval of seconds\nfunction countdown(seconds) { ... }\n\nexport function* saga() {\n  const chan = yield call(countdown, value)\n  try {\n    while (true) {\n      // take(END) will cause the saga to terminate by jumping to the finally block\n      let seconds = yield take(chan)\n      console.log(`countdown: ${seconds}`)\n    }\n  } finally {\n    console.log('countdown terminated')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Flushing in Redux-Saga\nDESCRIPTION: Shows how to flush buffered items from a channel using the flush effect. Useful for handling cleanup operations.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* saga() {\n  const chan = yield actionChannel('ACTION')\n\n  try {\n    while (true) {\n      const action = yield take(chan)\n      // ...\n    }\n  } finally {\n    const actions = yield flush(chan)\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in Sagas with try/catch\nDESCRIPTION: Shows how to use try/catch blocks in sagas to handle errors from API calls. This pattern captures rejected promises and dispatches appropriate actions.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-cn.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* checkout(getState) {\n  while (yield take(types.CHECKOUT_REQUEST)) {\n    try {\n      const cart = getState().cart\n      yield call(api.buyProducts, cart)\n      yield put(actions.checkoutSuccess(cart))\n    } catch (error) {\n      yield put(actions.checkoutFailure(error))\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Watchers in a Root Saga with Redux-Saga\nDESCRIPTION: Creates a root saga that combines multiple watcher sagas using takeEvery. Each watcher listens for different action types and triggers the corresponding task function when those actions are dispatched.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/basics/UsingSagaHelpers.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { takeEvery } from 'redux-saga/effects'\n\n// FETCH_USERS\nfunction* fetchUsers(action) { ... }\n\n// CREATE_USER\nfunction* createUser(action) { ... }\n\n// use them in parallel\nexport default function* rootSaga() {\n  yield takeEvery('FETCH_USERS', fetchUsers)\n  yield takeEvery('CREATE_USER', createUser)\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Action from React Component\nDESCRIPTION: Example React component that dispatches a 'USER_FETCH_REQUESTED' action when a button is clicked. The action includes a userId payload.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass UserComponent extends React.Component {\n  ...\n  onSomeButtonClicked() {\n    const { userId, dispatch } = this.props\n    dispatch({type: 'USER_FETCH_REQUESTED', payload: {userId}})\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error Handling with all Effect in Redux-Saga\nDESCRIPTION: Illustrates how errors are handled in parallel effects using the all combinator. When any child effect fails, the parallel effect cancels all other pending effects and propagates the error.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/ForkModel.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nyield all([\n  call(fetchResource, 'users'),\n  call(fetchResource, 'comments'),\n  delay(1000)\n])\n```\n\n----------------------------------------\n\nTITLE: Effect Description Object in Redux-Saga\nDESCRIPTION: An example of what an Effect object looks like internally. This object describes calling the Api.fetch function with './products' as an argument, rather than executing the function directly.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/basics/DeclarativeEffects.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Effect -> call the function Api.fetch with `./products` as argument\n{\n  CALL: {\n    fn: Api.fetch,\n    args: ['./products']\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Logger with takeEvery in Redux Saga\nDESCRIPTION: This snippet demonstrates a basic logger that watches and logs all actions dispatched to the store using takeEvery with a wildcard pattern. It captures each action and logs both the action and the resulting state.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/FutureActions.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { select, takeEvery } from 'redux-saga/effects'\n\nfunction* watchAndLog() {\n  yield takeEvery('*', function* logger(action) {\n    const state = yield select()\n\n    console.log('action', action)\n    console.log('state after', state)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using cps() Effect for Node-style Callbacks in Redux-Saga\nDESCRIPTION: Shows how to use the cps() (Continuation Passing Style) effect to handle Node-style functions that use callbacks with the (error, result) signature.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/basics/DeclarativeEffects.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cps } from 'redux-saga/effects'\n\nconst content = yield cps(readFile, '/path/to/file')\n```\n\n----------------------------------------\n\nTITLE: Implementing a Branching Redux Saga\nDESCRIPTION: Creates a saga that dispatches two actions, then waits for a number choice and changes UI color to red or blue based on whether the number is even or odd.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Testing.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* doStuffThenChangeColor() {\n  yield put(doStuff())\n  yield put(doStuff())\n  const action = yield take(CHOOSE_NUMBER)\n  if (action.payload.number % 2 === 0) {\n    yield put(changeUI('red'))\n  } else {\n    yield put(changeUI('blue'))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Error Handling Approach in Redux Saga (JavaScript)\nDESCRIPTION: This snippet demonstrates an alternative approach to error handling in Redux Saga. Instead of using try/catch, it uses a wrapper function that returns an object with either a response or an error property.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/basics/ErrorHandling.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Api from './path/to/api'\nimport { call, put } from 'redux-saga/effects'\n\nfunction fetchProductsApi() {\n  return Api.fetch('/products')\n    .then(response => ({ response }))\n    .catch(error => ({ error }))\n}\n\nfunction* fetchProducts() {\n  const { response, error } = yield call(fetchProductsApi)\n  if (response)\n    yield put({ type: 'PRODUCTS_RECEIVED', products: response })\n  else\n    yield put({ type: 'PRODUCTS_REQUEST_FAILED', error })\n}\n```\n\n----------------------------------------\n\nTITLE: Building Static Website Content\nDESCRIPTION: Command to generate static website content in the build directory, ready for deployment to any static hosting service.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/website/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Login Flow with Task Cancellation\nDESCRIPTION: Enhanced implementation that properly handles task cancellation when logout occurs during authorization.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/NonBlockingCalls.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { take, put, call, fork, cancel } from 'redux-saga/effects'\n\nfunction* loginFlow() {\n  while (true) {\n    const {user, password} = yield take('LOGIN_REQUEST')\n    // fork return a Task object\n    const task = yield fork(authorize, user, password)\n    const action = yield take(['LOGOUT', 'LOGIN_ERROR'])\n    if (action.type === 'LOGOUT')\n      yield cancel(task)\n    yield call(Api.clearItem, 'token')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing takeLeading Pattern in Redux-Saga\nDESCRIPTION: Example showing how to use takeLeading to handle USER_REQUESTED actions, processing only the first action while ignoring subsequent ones until completion.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { takeLeading } from `redux-saga/effects`\n\nfunction* fetchUser(action) {\n  ...\n}\n\nfunction* watchLastFetchUser() {\n  yield takeLeading('USER_REQUESTED', fetchUser)\n}\n```\n\n----------------------------------------\n\nTITLE: Racing Effects with the race() Combinator\nDESCRIPTION: Shows how to use the race effect combinator to implement timeouts and race conditions between multiple effects, taking the result of the first one to complete.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-cn.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { race, take, put } from 'redux-saga'\n\nfunction* fetchPostsWithTimeout() {\n  while (yield take(FETCH_POSTS)) {\n    // starts a race between 2 effects\n    const { posts, timeout } = yield race({\n      posts: call(fetchApi, '/posts'),\n      timeout: call(delay, 1000),\n    })\n\n    if (posts) put(actions.receivePosts(posts))\n    else put(actions.timeoutError())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Buffered Channel with Sliding Window\nDESCRIPTION: Demonstrates how to create an actionChannel with a sliding buffer that only keeps the most recent five items. Uses the buffers utility from redux-saga.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Channels.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { buffers } from 'redux-saga'\nimport { actionChannel } from 'redux-saga/effects'\n\nfunction* watchRequests() {\n  const requestChan = yield actionChannel('REQUEST', buffers.sliding(5))\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fetch Saga with Promise-Based Effects\nDESCRIPTION: Shows a basic saga that fetches data and dispatches an action with the results. This demonstrates the direct use of Promises in sagas.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-cn.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* fetchSaga() {\n  // fetch is a sample function\n  // returns a Promise that will resolve with the GET response\n  const products = yield fetch('/products')\n\n  // dispatch a RECEIVE_PRODUCTS action\n  yield put(receiveProducts(products))\n}\n```\n\n----------------------------------------\n\nTITLE: Error Propagation with Attached Forks in Redux-Saga\nDESCRIPTION: Demonstrates how errors propagate with attached forks. When a forked task fails, it causes the parent saga to abort, which cancels all other pending tasks and propagates the error to where the parent was called.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/ForkModel.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n//... imports\n\nfunction* fetchAll() {\n  const task1 = yield fork(fetchResource, 'users')\n  const task2 = yield fork(fetchResource, 'comments')\n  yield delay(1000)\n}\n\nfunction* fetchResource(resource) {\n  const {data} = yield call(api.fetch, resource)\n  yield put(receiveData(data))\n}\n\nfunction* main() {\n  try {\n    yield call(fetchAll)\n  } catch (e) {\n    // handle fetchAll errors\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Effects in Parallel with all() Combinator\nDESCRIPTION: Demonstrates how to run multiple effects in parallel using the all effect combinator, which waits for all effects to complete before continuing.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-cn.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { call, all } from 'redux-saga/effects'\n\n// correct, effects will get executed in parallel\nconst [users, repose]  = yield all([\n  call(fetch, '/users'),\n  call(fetch, '/repose')\n])\n```\n\n----------------------------------------\n\nTITLE: Complete Login Flow with Token Management\nDESCRIPTION: Implementation showing proper token storage and handling of multiple concurrent actions including logout and login error cases.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/NonBlockingCalls.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fork, call, take, put } from 'redux-saga/effects'\nimport Api from '...'\n\nfunction* authorize(user, password) {\n  try {\n    const token = yield call(Api.authorize, user, password)\n    yield put({type: 'LOGIN_SUCCESS', token})\n    yield call(Api.storeItem, {token})\n  } catch(error) {\n    yield put({type: 'LOGIN_ERROR', error})\n  }\n}\n\nfunction* loginFlow() {\n  while (true) {\n    const {user, password} = yield take('LOGIN_REQUEST')\n    yield fork(authorize, user, password)\n    yield take(['LOGOUT', 'LOGIN_ERROR'])\n    yield call(Api.clearItem, 'token')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Race Conditions with race() Effect in Redux-Saga\nDESCRIPTION: Shows how to use the race() effect to implement timeout patterns. This example creates a game that must be completed within 60 seconds, otherwise it times out.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-hant.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* game(getState) {\n  let finished\n  while (!finished) {\n    // 必須在 60 秒內完成\n    const { score, timeout } = yield race({\n      score: call(play, getState),\n      timeout: call(delay, 60000),\n    })\n\n    if (!timeout) {\n      finished = true\n      yield put(showScore(score))\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using yield* for Sequential Saga Composition in JavaScript\nDESCRIPTION: Demonstrates how to use the yield* operator to combine multiple Sagas sequentially. This approach propagates the entire sequence through JavaScript's runtime but has limitations compared to more general middleware composition mechanisms.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-hant.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst score3 = yield* playLevelThree(getState)\nput(showScore(score3))\n\n}\n```\n\n----------------------------------------\n\nTITLE: Non-blocking Fork Pattern in Redux-Saga\nDESCRIPTION: Shows how to use fork() to create non-blocking calls, which allows the saga to handle multiple concurrent actions. This is useful for processes that shouldn't block the main flow.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-hant.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fork, call, take, put } from 'redux-saga'\n\nfunction* fetchPosts() {\n  yield put(actions.requestPosts())\n  const posts = yield call(fetchApi, '/posts')\n  yield put(actions.receivePosts(posts))\n}\n\nfunction* watchFetch() {\n  while (yield take(FETCH_POSTS)) {\n    yield fork(fetchPosts) // 非阻塞式呼叫\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Event Channel with Countdown Timer\nDESCRIPTION: Shows how to create an event channel that subscribes to a setInterval, implementing a countdown timer. The channel emits countdown values and properly handles cleanup.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst countdown = (secs) => {\n  return eventChannel(emitter => {\n      const iv = setInterval(() => {\n        console.log('countdown', secs)\n        secs -= 1\n        if (secs > 0) {\n          emitter(secs)\n        } else {\n          emitter(END)\n          clearInterval(iv)\n          console.log('countdown terminated')\n        }\n      }, 1000);\n      return () => {\n        clearInterval(iv)\n        console.log('countdown cancelled')\n      }\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Application Freeze by Yielding Effects in Redux Saga\nDESCRIPTION: Example showing how an infinite loop is created when effects are not yielded in a saga. The first snippet shows the incorrect implementation that causes the app to freeze, while the second shows the correct way to yield the take() effect.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/Troubleshooting.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { take } from 'redux-saga/effects'\n\nfunction* logActions() {\n  while (true) {\n    const action = take() // wrong\n    console.log(action)\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { take } from 'redux-saga/effects'\n\nfunction* logActions() {\n  while (true) {\n    const action = yield take() // correct\n    console.log(action)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sagas Outside Redux Middleware with runSaga\nDESCRIPTION: Demonstrates how to start sagas outside of Redux middleware using runSaga. This allows connecting sagas to external input/output sources beyond Redux store actions.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-hant.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport serverSaga from 'somewhere'\nimport {runSaga, storeIO} from 'redux-saga'\nimport configureStore from 'somewhere'\nimport rootReducer from 'somewhere'\n\nconst store = configureStore(rootReducer)\nrunSaga(\n  serverSaga(store.getState),\n  storeIO(store)\n).done.then(...)\n```\n\n----------------------------------------\n\nTITLE: Running a Saga for Integration Testing\nDESCRIPTION: Shows how to run a saga with mocked dependencies for integration testing, providing mock dispatch and getState functions.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Testing.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst dispatched = []\n\nconst saga = runSaga(\n  {\n    dispatch: action => dispatched.push(action),\n    getState: () => ({ value: 'test' }),\n  },\n  callApi,\n  'http://url',\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Root Saga to Manage Multiple Sagas\nDESCRIPTION: Final sagas.js file that creates a root saga to organize and start multiple child sagas in parallel using the all effect.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/BeginnerTutorial.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { put, takeEvery, all } from 'redux-saga/effects'\n\nexport const delay = (ms) => new Promise(res => setTimeout(res, ms))\n\nexport function* helloSaga() {\n  console.log('Hello Sagas!')\n}\n\nexport function* incrementAsync() {\n  yield delay(1000)\n  yield put({ type: 'INCREMENT' })\n}\n\nexport function* watchIncrementAsync() {\n  yield takeEvery('INCREMENT_ASYNC', incrementAsync)\n}\n\n// notice how we now only export the rootSaga\n// single entry point to start all Sagas at once\nexport default function* rootSaga() {\n  yield all([\n    helloSaga(),\n    watchIncrementAsync()\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Error Handling with Return Values\nDESCRIPTION: Shows an alternative approach to error handling in sagas by using API functions that return normalized result objects with error flags rather than throwing exceptions.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-cn.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction buyProducts(cart) {\n  return doPost(...)\n    .then(result => {result})\n    .catch(error => {error})\n}\n\nfunction* checkout(getState) {\n  while( yield take(types.CHECKOUT_REQUEST) ) {\n    const cart = getState().cart\n    const {result, error} = yield call(api.buyProducts, cart)\n    if(!error)\n      yield put(actions.checkoutSuccess(result))\n    else\n      yield put(actions.checkoutFailure(error))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Root Saga Implementation with Fork Effects\nDESCRIPTION: Implementation using multiple fork effects which are non-blocking and allow individual task management. Each fork returns a task descriptor and executes immediately.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/RootSaga.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function* rootSaga() {\n  yield fork(saga1)\n  yield fork(saga2)\n  yield fork(saga3)\n  // code after fork-effect\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling in Redux Saga Generator (JavaScript)\nDESCRIPTION: This code snippet shows how to test the failure case of a Redux Saga generator function. It uses assertions to verify that the generator yields the expected effects, including error handling.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/basics/ErrorHandling.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { call, put } from 'redux-saga/effects'\nimport Api from '...'\n\nconst iterator = fetchProducts()\n\n// expects a call instruction\nassert.deepEqual(\n  iterator.next().value,\n  call(Api.fetch, '/products'),\n  \"fetchProducts should yield an Effect call(Api.fetch, './products')\"\n)\n\n// create a fake error\nconst error = {}\n\n// expects a dispatch instruction\nassert.deepEqual(\n  iterator.throw(error).value,\n  put({ type: 'PRODUCTS_REQUEST_FAILED', error }),\n  \"fetchProducts should yield an Effect put({ type: 'PRODUCTS_REQUEST_FAILED', error })\"\n)\n```\n\n----------------------------------------\n\nTITLE: Action Channel Usage in Redux-Saga\nDESCRIPTION: Demonstrates how to use actionChannel effect to queue and process actions one at a time. Useful for sequential API calls.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { actionChannel, call } from 'redux-saga/effects'\nimport api from '...' \n\nfunction* takeOneAtMost() {\n  const chan = yield actionChannel('USER_REQUEST')\n  while (true) {\n    const {payload} = yield take(chan)\n    yield call(api.getUser, payload)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing the Next Step in a Saga Generator\nDESCRIPTION: Continues testing the saga by passing a value to next() to simulate the received action, then checks the put effect with the correct color.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Testing.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = 'red'\nassert.deepEqual(\n  gen.next(chooseColor(color)).value,\n  put(changeUI(color)),\n  'it should dispatch an action to change the ui',\n)\n```\n\n----------------------------------------\n\nTITLE: Testing a Saga with Direct Promise Implementation\nDESCRIPTION: An example showing the challenge of testing a Saga that directly yields a Promise. This approach requires mocking the API call, which makes tests less reliable.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/basics/DeclarativeEffects.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst iterator = fetchProducts()\nassert.deepEqual(iterator.next().value, ??) // what do we expect ?\n```\n\n----------------------------------------\n\nTITLE: Non-blocking Authorization with Fork\nDESCRIPTION: Updated login flow using fork for non-blocking authorization calls, showing the transition to background task execution.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/NonBlockingCalls.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fork, call, take, put } from 'redux-saga/effects'\n\nfunction* loginFlow() {\n  while (true) {\n    ...\n    try {\n      // non-blocking call, what's the returned value here ?\n      const ?? = yield fork(authorize, user, password)\n      ...\n    }\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parallel Effect Execution with all() in Redux-Saga\nDESCRIPTION: This snippet demonstrates how to use the all effect to run multiple API calls in parallel and wait for all of them to complete. It's similar to Promise.all() in standard JavaScript.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fetchCustomers, fetchProducts } from './path/to/api'\nimport { all, call } from `redux-saga/effects`\n\nfunction* mySaga() {\n  const [customers, products] = yield all([\n    call(fetchCustomers),\n    call(fetchProducts)\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Root Saga in the Main File\nDESCRIPTION: Updated main.js code that imports and runs the root saga, starting all child sagas at once.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/BeginnerTutorial.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nimport rootSaga from './sagas'\n\nconst sagaMiddleware = createSagaMiddleware()\nconst store = ...\nsagaMiddleware.run(rootSaga)\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Effect Creator Return Values\nDESCRIPTION: Examples showing the plain JavaScript objects returned by effect creators.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/BeginnerTutorial.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nput({type: 'INCREMENT'}) // => { PUT: {type: 'INCREMENT'} }\ncall(delay, 1000)        // => { CALL: {fn: delay, args: [1000]}}\n```\n\n----------------------------------------\n\nTITLE: Testing a Saga with cps() Effect in Redux-Saga\nDESCRIPTION: Demonstrates how to test a Saga that uses the cps() effect, showing the consistent testing approach across different effect types.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/basics/DeclarativeEffects.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cps } from 'redux-saga/effects'\n\nconst iterator = fetchSaga()\nassert.deepEqual(iterator.next().value, cps(readFile, '/path/to/file') )\n```\n\n----------------------------------------\n\nTITLE: Basic Login Flow with Blocking Call\nDESCRIPTION: Initial implementation showing a blocking login flow that can miss logout actions during authorization.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/NonBlockingCalls.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* loginFlow() {\n  while (true) {\n    // ...\n    try {\n      const token = yield call(authorize, user, password)\n      // ...\n    }\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sequential Task Composition with yield call() in Redux-Saga\nDESCRIPTION: Shows how to compose Sagas sequentially using yield call(), which waits for the generator to terminate before resuming with its return value. This approach allows for better testing and separation of concerns.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-hant.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* fetchPosts() {\n  yield put(actions.requestPosts())\n  const products = yield call(fetchApi, '/products')\n  yield put(actions.receivePosts(products))\n}\n\nfunction* watchFetch() {\n  while (yield take(FETCH_POSTS)) {\n    yield call(fetchPosts) // 等候 fetchPosts 任務結束\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with redux-saga-testing Library\nDESCRIPTION: Demonstrates using the redux-saga-testing library which provides a Jest-like interface for testing saga generators with the sagaHelper function.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Testing.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport sagaHelper from 'redux-saga-testing'\n\ntest('with redux-saga-testing', () => {\n  const it = sagaHelper(callApi())\n\n  it('should select from state', selectResult => {\n    // with Jest's `expect`\n    expect(selectResult).toBe(value)\n  })\n\n  it('should select from state', apiResponse => {\n    // without tape's `test`\n    assert.deepEqual(apiResponse.json(), jsonResponse)\n  })\n\n  // an empty call to `it` can be used to skip an effect\n  it('', () => {})\n})\n```\n\n----------------------------------------\n\nTITLE: Refactored Testable Saga Implementation\nDESCRIPTION: Improved implementation using redux-saga effects for better testability, including the delay helper function.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/BeginnerTutorial.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { put, takeEvery, all, call } from 'redux-saga/effects'\n\nexport const delay = (ms) => new Promise(res => setTimeout(res, ms))\n\n// ...\n\nexport function* incrementAsync() {\n  // use the call Effect\n  yield call(delay, 1000)\n  yield put({ type: 'INCREMENT' })\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Sagas with put Effect in Redux Saga\nDESCRIPTION: Demonstrates how to test a saga that uses the `put` effect. By using the declarative approach, testing becomes simpler as we can assert against the yielded effects instead of mocking functions.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/basics/DispatchingActions.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { call, put } from 'redux-saga/effects'\nimport Api from '...'\n\nconst iterator = fetchProducts()\n\n// expects a call instruction\nassert.deepEqual(\n  iterator.next().value,\n  call(Api.fetch, '/products'),\n  \"fetchProducts should yield an Effect call(Api.fetch, './products')\"\n)\n\n// create a fake response\nconst products = {}\n\n// expects a dispatch instruction\nassert.deepEqual(\n  iterator.next(products).value,\n  put({ type: 'PRODUCTS_RECEIVED', products }),\n  \"fetchProducts should yield an Effect put({ type: 'PRODUCTS_RECEIVED', products })\"\n)\n```\n\n----------------------------------------\n\nTITLE: Blocking API Call Pattern in Redux-Saga\nDESCRIPTION: Demonstrates a blocking call pattern where the watchFetch generator waits for the fetchApi call to complete before processing more actions. This can lead to missed events if multiple actions are dispatched during the API call.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-hant.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* watchFetch() {\n  while (yield take(FETCH_POSTS)) {\n    yield put(actions.requestPosts())\n    const posts = yield call(fetchApi, '/posts') // 阻塞式呼叫\n    yield put(actions.receivePosts(posts))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with redux-saga-test Library\nDESCRIPTION: Shows how to use the redux-saga-test library to test sagas step-by-step with a more expressive API that simplifies asserting yielded effects.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Testing.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport fromGenerator from 'redux-saga-test'\n\ntest('with redux-saga-test', () => {\n  const generator = callApi('url')\n  /*\n   * The assertions passed to fromGenerator\n   * requires a `deepEqual` method\n   */\n  const expect = fromGenerator(assertions, generator)\n\n  expect.next().select(somethingFromState)\n  expect.next(selectedData).call(myApi, 'url', selectedData)\n  expect.next(result).put(success(result.json))\n})\n```\n\n----------------------------------------\n\nTITLE: Using redux-saga-test-engine for Effect Collection\nDESCRIPTION: Basic example showing how to use createSagaTestEngine to collect and verify specific saga effects. This approach allows testing of effects in order of occurrence.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Testing.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst collectedEffects  = createSagaTestEngine(['SELECT', 'CALL', 'PUT']);\nconst actualEffects = collectEffects(mySaga, [ [myEffect(arg), value], ... ], argsToMySaga);\n```\n\n----------------------------------------\n\nTITLE: State Selection in Redux-Saga\nDESCRIPTION: Example of using selectors with Redux-Saga to extract data from the store state. Shows selector definition and usage within a saga.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getCart = state => state.cart\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { take, fork, select } from 'redux-saga/effects'\nimport { getCart } from './selectors'\n\nfunction* checkout() {\n  // query the state using the exported selector\n  const cart = yield select(getCart)\n\n  // ... call some API endpoint then dispatch a success/error action\n}\n\nexport default function* rootSaga() {\n  while (true) {\n    yield take('CHECKOUT_REQUEST')\n    yield fork(checkout)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Task Cancellation Propagation Chain in Redux-Saga\nDESCRIPTION: Illustrates how cancellation propagates through a chain of tasks. When a parent task is cancelled, the cancellation cascades to all subtasks that are currently blocked on a yield.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-hant.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* main() {\n  const task = yield fork(subtask)\n  ...\n  // 稍候\n  yield cancel(task)\n}\n\nfunction* subtask() {\n  ...\n  yield call(subtask2) // 目前被此呼叫阻塞\n  ...\n}\n\nfunction* subtask2() {\n  ...\n  yield call(someApi) // 目前被此呼叫阻塞\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Object Method Invocation with call() in Redux-Saga\nDESCRIPTION: Shows how to invoke object methods using the call() effect by providing a 'this' context for the invoked functions.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/basics/DeclarativeEffects.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nyield call([obj, obj.method], arg1, arg2, ...) // as if we did obj.method(arg1, arg2 ...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with Saga Middleware\nDESCRIPTION: Sets up the Redux store with the saga middleware applied.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-hant.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport sagaMiddleware from 'redux-saga'\nimport sagas from '../sagas'\n\nexport default function configureStore(initialState) {\n  return createStore(\n    reducer,\n    initialState,\n    applyMiddleware(/* other middleware, */sagaMiddleware(...sagas))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parallel Task Execution with yield all() in Redux-Saga\nDESCRIPTION: Demonstrates how to run multiple sub-generators in parallel using the all() effect. This waits for all tasks to complete and collects their results before continuing.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-hant.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* mainSaga(getState) {\n  const results = yield all([ call(task1), call(task2), ...])\n  yield put( showResults(results) )\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Async Actions to Redux Store\nDESCRIPTION: Updated render function that connects component actions to Redux store, dispatching plain object actions that will be handled by sagas.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/BeginnerTutorial.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction render() {\n  ReactDOM.render(\n    <Counter\n      value={store.getState()}\n      onIncrement={() => action('INCREMENT')}\n      onDecrement={() => action('DECREMENT')}\n      onIncrementAsync={() => action('INCREMENT_ASYNC')} />,\n    document.getElementById('root')\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Async Button to Counter Component in React\nDESCRIPTION: React component with added async increment button that will trigger a delayed increment action when clicked.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/BeginnerTutorial.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst Counter = ({ value, onIncrement, onDecrement, onIncrementAsync }) =>\n  <div>\n    <button onClick={onIncrementAsync}>\n      Increment after 1 second\n    </button>\n    {' '}\n    <button onClick={onIncrement}>\n      Increment\n    </button>\n    {' '}\n    <button onClick={onDecrement}>\n      Decrement\n    </button>\n    <hr />\n    <div>\n      Clicked: {value} times\n    </div>\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Updating Redux Saga Effect Imports in JavaScript\nDESCRIPTION: Changes in import statements for Redux Saga effects and utilities. Some imports have been moved to different modules or renamed.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Old imports\nimport { takeEvery, takeLatest, throttle } from 'redux-saga'\n\n// New imports\nimport { takeEvery, takeLatest, throttle } from 'redux-saga/effects'\nimport { delay } from '@redux-saga/delay-p'\nimport { is } from '@redux-saga/is'\nimport { createMockTask, cloneableGenerator } from '@redux-saga/testing-utils'\n```\n\n----------------------------------------\n\nTITLE: Testing a Saga Generator Step-by-Step\nDESCRIPTION: Demonstrates how to test a saga generator function by checking each yielded value with assertions. Tests that the saga properly waits for CHOOSE_COLOR and dispatches CHANGE_UI.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Testing.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst gen = changeColorSaga()\n\nassert.deepEqual(gen.next().value, take(CHOOSE_COLOR), 'it should wait for a user to choose a color')\n```\n\n----------------------------------------\n\nTITLE: Parallel Execution of Effects\nDESCRIPTION: Uses the all effect to execute multiple API calls in parallel.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-hant.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { call, all } from 'redux-saga/effects'\n\nconst [users, repose]  = yield all([\n  call(fetch, '/users'),\n  call(fetch, '/repose')\n])\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Actions for Branching Saga Test\nDESCRIPTION: Sets up additional action types and action creators for testing a saga with multiple branches based on number selection.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Testing.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst CHOOSE_NUMBER = 'CHOOSE_NUMBER'\nconst DO_STUFF = 'DO_STUFF'\n\nconst chooseNumber = number => ({\n  type: CHOOSE_NUMBER,\n  payload: {\n    number,\n  },\n})\n\nconst doStuff = () => ({\n  type: DO_STUFF,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up the Redux Saga Tutorial Project\nDESCRIPTION: Command line instructions for cloning and installing the tutorial repository, then starting the application.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/BeginnerTutorial.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ cd redux-saga-beginner-tutorial\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Creating a Task using fork in Redux Saga\nDESCRIPTION: This snippet demonstrates how to create a task in Redux Saga using the fork function. It shows the basic structure of a saga that forks another saga as a background task.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/Glossary.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {fork} from \"redux-saga/effects\"\n\nfunction* saga() {\n  ...\n  const task = yield fork(otherSaga, ...args)\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Limited-Duration Saga with Onboarding Example\nDESCRIPTION: Demonstrates a saga that only runs for a limited time, waiting for three INCREMENT_COUNTER actions before dispatching a congratulation action and terminating.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-cn.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* onBoarding() {\n  for (let i = 0; i < 3; i++) yield take(INCREMENT_COUNTER)\n\n  yield put(showCongratulation())\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Fork Effects in All Effect\nDESCRIPTION: Pattern combining fork and all effects to get an array of task descriptors while maintaining non-blocking behavior.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/RootSaga.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst [task1, task2, task3] = yield all([ fork(saga1), fork(saga2), fork(saga3) ])\n```\n\n----------------------------------------\n\nTITLE: Installing Redux Saga with npm or yarn\nDESCRIPTION: Commands to install the redux-saga package using either npm or yarn package managers.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/GettingStarted.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install redux-saga\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add redux-saga\n```\n\n----------------------------------------\n\nTITLE: Low-level Implementation of takeLeading Effect\nDESCRIPTION: Shows how takeLeading is implemented using low-level effects like take and call, demonstrating sequential action processing.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst takeLeading = (patternOrChannel, saga, ...args) => fork(function*() {\n  while (true) {\n    const action = yield take(patternOrChannel);\n    yield call(saga, ...args.concat(action));\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Connecting Redux Saga Middleware to Redux Store\nDESCRIPTION: Shows how to create and connect the Redux Saga middleware to a Redux store, and run the root saga.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_ja.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createStore, applyMiddleware } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\n\nimport reducer from './reducers'\nimport mySaga from './sagas'\n\n// Saga ミドルウェアを作成する\nconst sagaMiddleware = createSagaMiddleware()\n\n// Store にマウントする\nconst store = createStore(reducer, applyMiddleware(sagaMiddleware))\n\n// Saga を起動する\nsagaMiddleware.run(mySaga)\n\n// アプリケーションのレンダリング\n```\n\n----------------------------------------\n\nTITLE: Racing Effects with Timeout\nDESCRIPTION: Demonstrates using the race effect to implement a timeout for an API call.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-hant.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { race, take, put } from 'redux-saga'\n\nfunction* fetchPostsWithTimeout() {\n  while (yield take(FETCH_POSTS)) {\n    const { posts, timeout } = yield race({\n      posts: call(fetchApi, '/posts'),\n      timeout: call(delay, 1000),\n    })\n\n    if (posts) put(actions.receivePosts(posts))\n    else put(actions.timeoutError())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Redux Saga with NPM or Yarn\nDESCRIPTION: Commands for installing redux-saga using either npm or yarn package managers.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install redux-saga\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add redux-saga\n```\n\n----------------------------------------\n\nTITLE: Creating Saga Middleware with UMD Build\nDESCRIPTION: Demonstrates how to create the Saga middleware using the UMD build in a browser environment.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_ja.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar sagaMiddleware = ReduxSaga.default()\n```\n\n----------------------------------------\n\nTITLE: Creating Saga Middleware with UMD Build\nDESCRIPTION: Example of creating saga middleware using the UMD build of Redux Saga for use in browsers without a bundler.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/GettingStarted.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar sagaMiddleware = ReduxSaga.default()\n```\n\n----------------------------------------\n\nTITLE: Dispatching a User Fetch Action in React Component\nDESCRIPTION: Example of a React component that dispatches a USER_FETCH_REQUESTED action to the Redux store when a button is clicked.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/GettingStarted.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass UserComponent extends React.Component {\n  ...\n  onSomeButtonClicked() {\n    const { userId, dispatch } = this.props\n    dispatch({type: 'USER_FETCH_REQUESTED', payload: {userId}})\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Redux Saga with npm or yarn\nDESCRIPTION: Commands to install redux-saga using npm or yarn package managers.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_ja.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install --save redux-saga\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add redux-saga\n```\n\n----------------------------------------\n\nTITLE: Testing CPS Effects in Sagas\nDESCRIPTION: Shows how to test sagas that use the cps effect creator for Node-style callback functions.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-cn.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cps } from 'redux-saga'\n\nconst iterator = fetchSaga()\nassert.deepEqual(iterator.next().value, cps(readFile, '/path/to/file'))\n```\n\n----------------------------------------\n\nTITLE: Using UMD Build in Browser\nDESCRIPTION: Example of creating saga middleware using the UMD build without ES6 import syntax, useful for direct browser usage without bundlers.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar sagaMiddleware = ReduxSaga.default()\n```\n\n----------------------------------------\n\nTITLE: Transformed Redux Saga Code with Location Metadata\nDESCRIPTION: Example of Redux Saga code after transformation by the babel-plugin-redux-saga. Each saga function and yielded effect is instrumented with @@redux-saga/LOCATION metadata that includes file name and line number information.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/packages/babel-plugin-redux-saga/README.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* saga1() {\n    yield Object.defineProperty(call(foo, 1, 2, 3), \"@@redux-saga/LOCATION\", {\n        value: {\n            fileName: \"src/sagas/index.js\",\n            lineNumber: 1,\n            code: \"call(foo, 1, 2, 3)\"\n        }\n    })\n}\n\nObject.defineProperty(saga1, \"@@redux-saga/LOCATION\", {\n  value: {\n    fileName: \"src/sagas/index.js\",\n    lineNumber: 1\n  }\n})\nfunction* saga2() {\n    yield 2;\n}\nObject.defineProperty(saga2, \"@@redux-saga/LOCATION\", {\n  value: {\n    fileName: \"src/sagas/index.js\",\n    lineNumber: 5\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Redux-Saga\nDESCRIPTION: Simple npm command to install Redux-Saga in a project.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-cn.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install redux-saga\n```\n\n----------------------------------------\n\nTITLE: Updating Redux Saga Channel Usage in JavaScript\nDESCRIPTION: Changes in channel creation and usage, including updates to buffer defaults and removal of certain properties.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// New channel usage\nimport { buffers, channel, multicastChannel } from 'redux-saga'\n\nconst chan = channel(buffers.expanding())\nconst multiChan = multicastChannel()\n\n// Usage with take\nyield take(multiChan, pattern)\n```\n\n----------------------------------------\n\nTITLE: Defining Action Types and Action Creators in Redux\nDESCRIPTION: Sets up action types (CHOOSE_COLOR, CHANGE_UI) and corresponding action creator functions for a color selection feature.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Testing.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst CHOOSE_COLOR = 'CHOOSE_COLOR'\nconst CHANGE_UI = 'CHANGE_UI'\n\nconst chooseColor = color => ({\n  type: CHOOSE_COLOR,\n  payload: {\n    color,\n  },\n})\n\nconst changeUI = color => ({\n  type: CHANGE_UI,\n  payload: {\n    color,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Saga with Potential Crash Example\nDESCRIPTION: Example demonstrating a saga that may crash during startup, illustrating why automatic restart might not always be desirable.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/RootSaga.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* sagaThatMayCrash () {\n  // wait for something that happens _during app startup_\n  yield take('APP_INITIALIZED')\n\n  // assume it dies here\n  yield call(doSomethingThatMayCrash)\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Redux Saga Test Setup\nDESCRIPTION: Basic test setup for the incrementAsync saga showing the initial structure before implementing actual tests.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/BeginnerTutorial.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport test from 'tape'\n\nimport { incrementAsync } from './sagas'\n\ntest('incrementAsync Saga test', (assert) => {\n  const gen = incrementAsync()\n\n  // now what ?\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Redux Saga Error Handling in JavaScript\nDESCRIPTION: Changes in error handling behavior, including manual error catching for put execution and cancellation processes.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// New error handling\ntry {\n  yield put(action)\n} catch (error) {\n  // Handle error\n}\n\ntry {\n  // Your saga logic\n} finally {\n  // Ensure this block is fail-safe\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with Redux Saga Plugin\nDESCRIPTION: Configuration example for including the babel-plugin-redux-saga in a Babel configuration object.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/packages/babel-plugin-redux-saga/README.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n    plugins: [\n        'babel-plugin-redux-saga'\n    ]\n```\n\n----------------------------------------\n\nTITLE: Using Node-Style Callbacks with CPS Effect in Sagas\nDESCRIPTION: Demonstrates how to use the cps effect creator to handle Node-style callback functions (using the error-first callback pattern) in sagas.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-cn.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cps } from 'redux-saga'\n\nconst content = yield cps(readFile, '/path/to/file')\n```\n\n----------------------------------------\n\nTITLE: Initial Test Implementation Attempt\nDESCRIPTION: First attempt at implementing the saga test, highlighting the challenge of testing Promise returns.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/BeginnerTutorial.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport test from 'tape'\n\nimport { incrementAsync } from './sagas'\n\ntest('incrementAsync Saga test', (assert) => {\n  const gen = incrementAsync()\n\n  assert.deepEqual(\n    gen.next(),\n    { done: false, value: ??? },\n    'incrementAsync should return a Promise that will resolve after 1 second'\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Backer Links in HTML\nDESCRIPTION: HTML markup for displaying backer profile links and avatars from OpenCollective. Each link opens in a new tab and includes the backer's avatar image.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README.md#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/redux-saga/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/redux-saga/backer/0/avatar.svg\"></a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack with Redux Saga Plugin\nDESCRIPTION: Configuration example for using babel-plugin-redux-saga with webpack and babel-loader in a webpack configuration file.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/packages/babel-plugin-redux-saga/README.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n    loader: 'babel-loader',\n    options: {\n        plugins: [\n            'babel-plugin-redux-saga'\n        ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Error Message Comparison - With Plugin\nDESCRIPTION: Example of an enhanced Redux Saga error message after using the babel-plugin-redux-saga. The error trace includes file paths and line numbers for each saga in the hierarchy.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/packages/babel-plugin-redux-saga/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nThe above error occurred in task throwAnErrorSaga  src/sagas/index.js?16\n    created by errorInCallAsyncSaga  src/sagas/index.js?25\n    created by takeEvery(ACTION_ERROR_IN_CALL_ASYNC, errorInCallAsyncSaga)\n    created by rootSaga  src/sagas/index.js?78\n```\n\n----------------------------------------\n\nTITLE: Generator Next Method Example\nDESCRIPTION: Example showing the structure of a generator's next() method return value.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/BeginnerTutorial.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ngen.next() // => { done: boolean, value: any }\n```\n\n----------------------------------------\n\nTITLE: Verifying a Saga Generator is Complete\nDESCRIPTION: Checks that the saga generator is done after executing all its yield statements by asserting that done is true.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Testing.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nassert.deepEqual(gen.next().done, true, 'it should be done')\n```\n\n----------------------------------------\n\nTITLE: Updating Redux Saga Task Handling in JavaScript\nDESCRIPTION: Changes in how tasks are handled, including updates to cancellation, joining, and task completion checks.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Old usage\ncancel(...[tasks])\njoin(...[tasks])\nconst isDone = task.done\n\n// New usage\ncancel([tasks])\njoin([tasks])\nconst taskPromise = task.toPromise()\n```\n\n----------------------------------------\n\nTITLE: Incorrect Fork Usage with Race Effect\nDESCRIPTION: Example of incorrect fork effect usage within a race effect, which will always resolve immediately due to fork's non-blocking nature.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/RootSaga.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nyield race([\n  fork(someSaga),\n  take('SOME-ACTION'),\n  somePromise,\n])\n```\n\n----------------------------------------\n\nTITLE: Running Redux-Saga Async Example Locally\nDESCRIPTION: This command starts the Redux-Saga async example project on the local machine. It uses npm to run the start script defined in the project's package.json file.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/examples/async/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Fixing timeout issue in @redux-saga/delay-p v1.2.0\nDESCRIPTION: Fixes an issue where arguments exceeding the maximum value for setTimeout could cause immediate timeout resolution.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/packages/delay-p/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#2293](https://github.com/redux-saga/redux-saga/pull/2293) [`2d2214e`](https://github.com/redux-saga/redux-saga/commit/2d2214e9ca8949892c0a7a23ceef39fa32d13939) Thanks [@neurosnap](https://github.com/neurosnap)! - Fixed an issue with arguments that exceed the maximum value for the internally-used `setTimeout`. Previously it could overflow based on the input that was too big and thus a timeout could resolve immediately.\n```\n\n----------------------------------------\n\nTITLE: Updating Redux Saga Effect Usage in JavaScript\nDESCRIPTION: Changes in how certain Redux Saga effects are used, including renaming of some effects and changes in their behavior.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Old usage\nyield [effect1, effect2, effect3]\nyield put.sync(action)\nyield take.maybe(pattern)\n\n// New usage\nyield all([effect1, effect2, effect3])\nyield putResolve(action)\nyield takeMaybe(pattern)\n```\n\n----------------------------------------\n\nTITLE: Sequential Task Execution in Redux Saga (Incorrect Approach)\nDESCRIPTION: Example showing the incorrect way to run tasks in parallel, where effects are executed sequentially due to the use of individual yield statements.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/RunningTasksInParallel.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// wrong, effects will be executed in sequence\nconst users = yield call(fetch, '/users')\nconst repos = yield call(fetch, '/repos')\n```\n\n----------------------------------------\n\nTITLE: Running Redux Saga Counter Example Locally\nDESCRIPTION: Command to start the Redux Saga counter example on a local development environment.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/examples/counter/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Adding 'exports' field in @redux-saga/deferred v1.2.0\nDESCRIPTION: This minor version update adds the 'exports' field to the package.json manifest. It improves compatibility with Node.js ESM support while maintaining the package's public API accessibility.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/packages/deferred/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.2.0\n\n### Minor Changes\n\n- [#2308](https://github.com/redux-saga/redux-saga/pull/2308) [`8207e33`](https://github.com/redux-saga/redux-saga/commit/8207e33) Thanks [@Andarist](https://github.com/Andarist), [@neurosnap](https://github.com/neurosnap)! - `exports` field has been added to the `package.json` manifest. It limits what files can be imported from a package but we've tried our best to allow importing all the files that were considered to be a part of the public API.\n\n  This should fix the compatibility with Node.js ESM support.\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Channel Communication with Redux-Saga (Limited to Single Workers)\nDESCRIPTION: This example demonstrates a pattern using a basic channel that can only deliver messages to one worker at a time. When putting a message on the channel, only one of the forked workers (either logWorker or mainWorker) will receive it, not both.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Channels.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { channel } from 'redux-saga'\nimport { take, fork, call, put } from 'redux-saga/effects'\n\nfunction* watchRequests() {\n  // create a channel to queue incoming requests\n  const chan = yield call(channel)\n\n  // fork both workers\n  yield fork(logWorker, chan)\n  yield fork(mainWorker, chan)\n\n  while (true) {\n    const { payload } = yield take('REQUEST')\n\n    // put here will reach only one worker, not both!\n    yield put(chan, payload)\n  }\n}\n\nfunction* logWorker(channel) {\n  while (true) {\n    const payload = yield take(channel)\n    // Log the request somewhere..\n    console.log('logWorker:', payload)\n  }\n}\n\nfunction* mainWorker(channel) {\n  while (true) {\n    const payload = yield take(channel)\n    // Process the request\n    console.log('mainWorker', payload)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Regenerator Runtime for Browser Compatibility\nDESCRIPTION: Code showing how to import regenerator runtime before redux-saga to ensure compatibility with browsers that don't support ES2015 generators.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'regenerator-runtime/runtime'\n// then\nimport sagaMiddleware from 'redux-saga'\n```\n\n----------------------------------------\n\nTITLE: Running Redux Saga Example Locally Using npm\nDESCRIPTION: Command to start the Redux Saga cancellable counter example on a local development server.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/examples/cancellable-counter/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Setting up redux-saga Development Environment with Git and Yarn\nDESCRIPTION: This snippet shows the commands needed to clone a forked redux-saga repository, install dependencies, build the project, and run tests. It's the initial setup process for contributors.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/YOUR-GITHUB-PROFILE-NAME/redux-saga.git\n$ cd redux-saga\n$ yarn\n$ yarn build\n$ yarn test\n```\n\n----------------------------------------\n\nTITLE: Accessing Redux-Saga Async Example in Browser\nDESCRIPTION: This markdown link provides direct access to the Redux-Saga async example project on CodeSandbox. It allows users to view and interact with the example in a browser-based development environment.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/examples/async/README.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Click here](https://codesandbox.io/s/github/redux-saga/redux-saga/tree/main/examples/async)\n```\n\n----------------------------------------\n\nTITLE: Declarative Effect for API Call\nDESCRIPTION: Uses the call effect to declaratively describe an API call, making it easier to test.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-hant.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { call } from 'redux-saga'\n\nfunction* fetchSaga() {\n  const products = yield call(fetch, '/products') // doesn't execute the effect\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Redux Saga Development Server\nDESCRIPTION: Command to start the local development server for Redux Saga project using npm.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/examples/error-demo/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Deploying to GitHub Pages\nDESCRIPTION: Command to build and deploy the website to GitHub Pages, requiring GitHub username and SSH configuration.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/website/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start the local development server that provides live preview of the documentation website with hot-reloading capabilities.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/website/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Original Redux Saga Code Example\nDESCRIPTION: Example of Redux Saga code before transformation by the babel-plugin-redux-saga. This shows two simple generator functions that will be instrumented with metadata.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/packages/babel-plugin-redux-saga/README.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// src/sagas/index.js\nfunction* saga1(){\n    yield call(foo, 1, 2, 3);\n}\n\nfunction* saga2(){\n    yield 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Test Execution Command\nDESCRIPTION: Shell command to run the saga tests.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/BeginnerTutorial.md#2025-04-18_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Error Message Comparison - Without Plugin\nDESCRIPTION: Example of a typical Redux Saga error message without using the babel-plugin-redux-saga. The error trace only shows the saga task hierarchy without source file information.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/packages/babel-plugin-redux-saga/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nThe above error occurred in task throwAnErrorSaga\n    created by errorInCallAsyncSaga\n    created by takeEvery(ACTION_ERROR_IN_CALL_ASYNC, errorInCallAsyncSaga)\n    created by rootSaga\n```\n\n----------------------------------------\n\nTITLE: Installing Redux Saga Babel Plugin via NPM\nDESCRIPTION: Command to install the babel-plugin-redux-saga as a development dependency using npm.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/packages/babel-plugin-redux-saga/README.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm i --save-dev babel-plugin-redux-saga\n```\n\n----------------------------------------\n\nTITLE: Importing Regenerator Runtime for Browser Compatibility\nDESCRIPTION: Example showing how to import the regenerator runtime before Redux Saga for browsers that don't support ES2015 generators.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/GettingStarted.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'regenerator-runtime/runtime'\n// then\nimport sagaMiddleware from 'redux-saga'\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeScript Sources for Redux Saga\nDESCRIPTION: This command uses the TypeScript compiler to compile a specific source file with source map generation, targeting ES2015, and using ES2015 module format. It's likely used for testing or development purposes within the Redux Saga project.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/packages/babel-plugin-redux-saga/test/fixtures/typescript/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx tsc test/fixtures/typescript/source.ts --sourceMap -t es2015 -m es2015\n```\n\n----------------------------------------\n\nTITLE: Generator Sequential Results Example\nDESCRIPTION: Demonstration of sequential generator next() calls and their results.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/BeginnerTutorial.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ngen.next() // => { done: false, value: <result of calling delay(1000)> }\ngen.next() // => { done: false, value: <result of calling put({type: 'INCREMENT'})> }\ngen.next() // => { done: true, value: undefined }\n```\n\n----------------------------------------\n\nTITLE: Starting Redux-Saga Development Server\nDESCRIPTION: The command to start the Redux-Saga project locally using npm. This runs the development server and makes the project available for local development and testing.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/examples/real-world/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Starting the Redux Saga Tutorial Application\nDESCRIPTION: Command to start the application server, after which the counter app will be available at localhost:9966.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/BeginnerTutorial.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Documenting Patch Changes for @redux-saga/simple-saga-monitor in Markdown\nDESCRIPTION: This snippet lists the patch changes for version 1.1.3 of @redux-saga/simple-saga-monitor. It includes adding a LICENSE file and updating dependencies.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/packages/simple-saga-monitor/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @redux-saga/simple-saga-monitor\n\n## 1.1.3\n\n### Patch Changes\n\n- [#2324](https://github.com/redux-saga/redux-saga/pull/2324) [`2466c79`](https://github.com/redux-saga/redux-saga/commit/2466c798a5f56a5015e61c8fdf0ef8f2a6a852a4) Thanks [@neurosnap](https://github.com/neurosnap)! - Add LICENSE file\n\n- Updated dependencies [[`2466c79`](https://github.com/redux-saga/redux-saga/commit/2466c798a5f56a5015e61c8fdf0ef8f2a6a852a4)]:\n  - @redux-saga/is@1.1.3\n```\n\n----------------------------------------\n\nTITLE: Building Examples from Source\nDESCRIPTION: Commands for cloning the redux-saga repository, installing dependencies, and running tests.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/redux-saga/redux-saga.git\n$ cd redux-saga\n$ yarn\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Adding LICENSE file in @redux-saga/deferred v1.2.1\nDESCRIPTION: This update adds a LICENSE file to the @redux-saga/deferred package. It's a patch change, indicating a backwards-compatible bug fix.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/packages/deferred/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.2.1\n\n### Patch Changes\n\n- [#2324](https://github.com/redux-saga/redux-saga/pull/2324) [`2466c79`](https://github.com/redux-saga/redux-saga/commit/2466c798a5f56a5015e61c8fdf0ef8f2a6a852a4) Thanks [@neurosnap](https://github.com/neurosnap)! - Add LICENSE file\n```\n\n----------------------------------------\n\nTITLE: Running Redux-Saga Shopping Cart Example Locally\nDESCRIPTION: Command to start the Redux-Saga shopping cart example on a local development server using npm.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/examples/shopping-cart/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Adding LICENSE file in @redux-saga/delay-p v1.2.1\nDESCRIPTION: Adds a LICENSE file to the package and updates the @redux-saga/symbols dependency.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/packages/delay-p/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#2324](https://github.com/redux-saga/redux-saga/pull/2324) [`2466c79`](https://github.com/redux-saga/redux-saga/commit/2466c798a5f56a5015e61c8fdf0ef8f2a6a852a4) Thanks [@neurosnap](https://github.com/neurosnap)! - Add LICENSE file\n\n- Updated dependencies [[`2466c79`](https://github.com/redux-saga/redux-saga/commit/2466c798a5f56a5015e61c8fdf0ef8f2a6a852a4)]:\n  - @redux-saga/symbols@1.1.3\n```\n\n----------------------------------------\n\nTITLE: Rendering Sponsor Links in HTML\nDESCRIPTION: HTML markup for displaying sponsor profile links and avatars from OpenCollective. Each link opens in a new tab and includes the sponsor's avatar image.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README.md#2025-04-18_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/redux-saga/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/redux-saga/sponsor/0/avatar.svg\"></a>\n```\n\n----------------------------------------\n\nTITLE: Defining Redux-Saga Brand Colors with CSS\nDESCRIPTION: CSS color definitions for the official Redux-Saga brand. Contains the two primary colors: redux-saga gray (#999999) and redux-saga green (#89D96D).\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/logo/README.md#2025-04-18_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\nreduxSagaGray: #999999;\nreduxSagaGreen: #89D96D;\n```\n\n----------------------------------------\n\nTITLE: Installing Redux-Saga Website Dependencies\nDESCRIPTION: Command to install all required dependencies for the Redux-Saga documentation website using Yarn package manager.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/website/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Installing Redux Saga with npm\nDESCRIPTION: Command to install Redux Saga package using npm.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-hant.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install redux-saga\n```\n\n----------------------------------------\n\nTITLE: Complete redux-saga-test-engine Test Example\nDESCRIPTION: A comprehensive test example using redux-saga-test-engine to verify saga effects. It demonstrates creating a test engine, collecting effects, and asserting on the expected outcomes.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/advanced/Testing.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport createSagaTestEngine from 'redux-saga-test-engine'\n\ntest('testing with redux-saga-test-engine', () => {\n  const collectEffects = createSagaTestEngine(['CALL', 'PUT'])\n\n  const actualEffects = collectEffects(\n    callApi,\n    [[select(selectFromState), selectedValue], [call(myApi, 'url', selectedValue), response]],\n    // Any further args are passed to the saga\n    // Here it is our URL, but typically would be the dispatched action\n    'url',\n  )\n\n  // assert that the effects you care about occurred as expected, in order\n  assert.equal(actualEffects[0], call(myApi, 'url', selectedValue))\n  assert.equal(actualEffects[1], put(success, response))\n\n  // assert that your saga does nothing unexpected\n  assert.true(actualEffects.length === 2)\n})\n```\n\n----------------------------------------\n\nTITLE: Adding exports field in @redux-saga/delay-p v1.2.0\nDESCRIPTION: Adds an 'exports' field to package.json to improve compatibility with Node.js ESM support and limit importable files.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/packages/delay-p/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- [#2308](https://github.com/redux-saga/redux-saga/pull/2308) [`8207e33`](https://github.com/redux-saga/redux-saga/commit/8207e33) Thanks [@Andarist](https://github.com/Andarist), [@neurosnap](https://github.com/neurosnap)! - `exports` field has been added to the `package.json` manifest. It limits what files can be imported from a package but we've tried our best to allow importing all the files that were considered to be a part of the public API.\n\n  This should fix the compatibility with Node.js ESM support.\n```\n\n----------------------------------------\n\nTITLE: Implementing WatchFetchUser Saga with takeEvery\nDESCRIPTION: Creates a watcher saga that listens for USER_REQUESTED actions and spawns a fetchUser task for each occurrence. This pattern is useful for handling recurring asynchronous operations triggered by specific actions.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { takeEvery } from `redux-saga/effects`\n\nfunction* fetchUser(action) {\n  ...\n}\n\nfunction* watchFetchUser() {\n  yield takeEvery('USER_REQUESTED', fetchUser)\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Local HTML File in Browser - Markdown\nDESCRIPTION: Instructions for running the project locally by opening the index.html file directly in a web browser.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/examples/counter-vanilla/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Run locally\nOpen `index.html` file in a browser\n```\n\n----------------------------------------\n\nTITLE: Integrating Redux-Saga Middleware with Redux Store\nDESCRIPTION: Shows how to connect Redux-Saga middleware to the Redux store configuration. The sagaMiddleware is applied to the store and initialized with sagas to run.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/README_zh-cn.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// store/configureStore.js\nimport sagaMiddleware from 'redux-saga'\nimport sagas from '../sagas'\n\nexport default function configureStore(initialState) {\n  // Note: passing middleware as the last argument to createStore requires redux@>=3.1.0\n  return createStore(\n    reducer,\n    initialState,\n    applyMiddleware(/* other middleware, */sagaMiddleware(...sagas))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Root Saga in Redux Application\nDESCRIPTION: Demonstrates how to initialize a Redux store with the configureStore utility and start the root saga. This is typically done in the main entry point of a Redux-Saga application.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/API.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport configureStore from './configureStore'\nimport rootSaga from './sagas'\n// ... other imports\n\nconst store = configureStore()\nstore.runSaga(rootSaga)\n```\n\n----------------------------------------\n\nTITLE: Describing Redux-Saga Type Definitions Package in Markdown\nDESCRIPTION: This snippet provides a brief description of the @redux-saga/types package, explaining its purpose as a repository for shared types used by Redux-Saga packages. It emphasizes that the package should not be used directly and is intended to avoid cyclic dependencies between Redux-Saga packages.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/packages/types/README.md#2025-04-18_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @redux-saga/types\n\nRepository for shared types used by `redux-saga` packages. Shouldn't be used directly - its purpose is to avoid cyclic dependencies between `redux-saga` packages.\n```\n\n----------------------------------------\n\nTITLE: Throttling Input Changes with Redux Saga\nDESCRIPTION: Demonstrates how to use the built-in throttle helper to limit the frequency of handling input change actions. This ensures the saga processes at most one INPUT_CHANGED action every 500ms while still capturing the latest action.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/Recipes.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { throttle } from 'redux-saga/effects'\n\nfunction* handleInput(input) {\n  // ...\n}\n\nfunction* watchInput() {\n  yield throttle(500, 'INPUT_CHANGED', handleInput)\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Saga Test Implementation\nDESCRIPTION: Final implementation of the saga test using effect creators and assertions on yielded values.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/introduction/BeginnerTutorial.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport test from 'tape'\n\nimport { put, call } from 'redux-saga/effects'\nimport { incrementAsync, delay } from './sagas'\n\ntest('incrementAsync Saga test', (assert) => {\n  const gen = incrementAsync()\n\n  assert.deepEqual(\n    gen.next().value,\n    call(delay, 1000),\n    'incrementAsync Saga must call delay(1000)'\n  )\n\n  assert.deepEqual(\n    gen.next().value,\n    put({type: 'INCREMENT'}),\n    'incrementAsync Saga must dispatch an INCREMENT action'\n  )\n\n  assert.deepEqual(\n    gen.next(),\n    { done: true, value: undefined },\n    'incrementAsync Saga must be done'\n  )\n\n  assert.end()\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Watcher/Worker pattern in Redux Saga\nDESCRIPTION: This snippet demonstrates the Watcher/Worker pattern in Redux Saga. It shows how to create a watcher saga that listens for actions and forks worker sagas to handle them.\nSOURCE: https://github.com/redux-saga/redux-saga/blob/main/docs/Glossary.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* watcher() {\n  while (true) {\n    const action = yield take(ACTION)\n    yield fork(worker, action.payload)\n  }\n}\n\nfunction* worker(payload) {\n  // ... do some stuff\n}\n```"
  }
]