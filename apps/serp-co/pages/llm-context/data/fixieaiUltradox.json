[
  {
    "owner": "fixie-ai",
    "repo": "ultradox",
    "content": "TITLE: Joining a Call with UltravoxSession\nDESCRIPTION: The joinCall method initiates a connection to a call using a provided join URL. An optional clientVersion parameter can be included for application version tracking.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/sdk-reference/introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\njoinCall(joinUrl: string, clientVersion?: string): void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transcript Updates\nDESCRIPTION: Example of adding an event listener to receive transcript updates during a call, allowing you to display real-time text of what both the user and agent are saying.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/sdk-reference/introduction.mdx#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Listen for transcripts changing events\nsession.addEventListener('transcripts', (event) => {\n  console.log('Transcripts updated: ', session.transcripts);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Support Agent with Ultravox API\nDESCRIPTION: Demonstrates how to create a new customer support agent with configured system prompts, voice settings, and available tools using the Ultravox API. The agent template includes customizable customer name variables and predefined support capabilities.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/agents.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst createAgent = async () => {\n  const response = await fetch('https://api.ultravox.ai/api/agents', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-API-Key': 'your-api-key'\n    },\n    body: JSON.stringify({\n      name: 'Customer Support Agent',\n      callTemplate: {\n        systemPrompt: \"You are a friendly customer support agent for Acme Inc. Your name is Alex. You are talking to {{customerName}}. You should help them with their questions about our products and services. If you can't answer a question, offer to connect them with a human support agent.\",\n        voice: \"Jessica\",\n        languageHint: \"en\",\n        temperature: 0.4,\n        recordingEnabled: true,\n        firstSpeakerSettings: {\n          agent: {\n            text: \"Hello! This is Alex from Acme customer support. How can I help you today?\"\n          }\n        },\n        selectedTools: [\n          { toolName: 'knowledgebaseLookup' },\n          { toolName: 'transferToHuman' }\n        ]\n      }\n    })\n  });\n  \n  return await response.json();\n};\n```\n\n----------------------------------------\n\nTITLE: OpenAPI POST Endpoint Definition\nDESCRIPTION: API specification for the POST /api/agents/{agent_id}/calls endpoint that creates new agent calls\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/agents/agents-calls-post.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /api/agents/{agent_id}/calls\ntitle: \"Create Agent Call\"\ndescription: \"Creates a new call using the the specified agent\"\n```\n\n----------------------------------------\n\nTITLE: Defining Server vs. Client Tools in JavaScript\nDESCRIPTION: Example showing the difference between defining server tools (using 'http') and client tools (using 'client'). Server tools point to HTTP endpoints while client tools are implemented in the client application.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/tools.mdx#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"systemPrompt\": \"You are a helpful assistant...\",\n  \"selectedTools\": [\n    {\n      \"temporaryTool\": {\n        \"modelToolName\": \"sendEmail\",\n        ...\n        \"http\": {\n          \"baseUrlPattern\": \"https://foo.bar/sendEmail\",\n          \"httpMethod\": \"POST\"\n        }\n      }\n    },\n    {\n      \"temporaryTool\": {\n        \"modelToolName\": \"updateScreen\",\n        ...\n        \"client\": {}\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Call with Existing Agent in Ultravox\nDESCRIPTION: Shows how to initiate a call using a previously created agent ID, including the ability to pass customer context information to populate template variables.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/agents.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst startAgentCall = async (agentId) => {\n  const response = await fetch(`https://api.ultravox.ai/api/agents/${agentId}/calls`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-API-Key': 'your-api-key'\n    },\n    body: JSON.stringify({\n      templateContext: {\n        customerName: \"Jane Smith\"\n      }\n    })\n  });\n  \n  return await response.json();\n};\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for POST /api/calls\nDESCRIPTION: OpenAPI specification metadata for creating a new call via the POST /api/calls endpoint. The endpoint is titled 'Create Call' and is described as creating a new call with specified system prompt and properties.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/calls/calls-post.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /api/calls\ntitle: \"Create Call\"\ndescription: \"Creates a new call using the specified system prompt and other properties\"\n```\n\n----------------------------------------\n\nTITLE: Listening for Session Status Events\nDESCRIPTION: Example of adding an event listener to monitor changes in the UltravoxSession status, which includes states like connecting, idle, listening, thinking, and speaking.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/sdk-reference/introduction.mdx#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Listen for status changing events\nsession.addEventListener('status', (event) => {\n  console.log('Session status changed: ', session.status);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom RAG Tool in Ultravox\nDESCRIPTION: Example of creating a custom RAG tool that interfaces with an external product documentation API endpoint.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/rag.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"systemPrompt\": \"You are a helpful assistant. You have a tool called 'lookupProductInfo' that you must use to find answers.\",\n  \"model\": \"fixie-ai/ultravox\",\n  \"selectedTools\": [\n    {\n      \"temporaryTool\": {\n        \"modelToolName\": \"lookupProductInfo\",\n        \"description\": \"Searches official product documentation using semantic similarity to find relevant information. Use this tool to look up specific product features, specifications, limitations, pricing, or support information. The tool returns the most relevant text chunks from the documentation.\",\n        \"dynamicParameters\": [\n          {\n            \"name\": \"query\",\n            \"location\": \"PARAMETER_LOCATION_BODY\",\n            \"schema\": {\n              \"description\": \"A specific, focused search query to find relevant product information\",\n              \"type\": \"string\"\n            },\n            \"required\": true\n          }\n        ],\n        \"http\": {\n          \"baseUrlPattern\": \"https://foo.bar/lookupProductInfo\",\n          \"httpMethod\": \"POST\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing UltraVox Session with Stock Price Tool\nDESCRIPTION: Demonstrates how to create an UltraVox session, register a custom tool implementation for retrieving stock prices, and join a call. The code includes a placeholder function for the stock price lookup logic.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/snippets/code/client-tool-registration.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Start up our Ultravox Session\nuvSession = new UltravoxSession();\n\n// Register our client-side tool\nuvSession.registerToolImplementation(\n  \"stock_price\",\n  stock_price\n);\n\nuvSession.joinCall(joinUrl);\n\n// Function that implements tool logic\nconst stock_price = (parameters) => {\n  ...  // to be implemented\n  return `Stock price is ${value}`;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Tool Definition in JavaScript\nDESCRIPTION: Example showing how to define a custom 'sendConversationSummary' tool that sends a summary of the conversation via HTTP POST. The tool is configured with a dynamic parameter for the conversation summary.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/tools.mdx#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Creating a tool called 'sendConversationSummary'\n//\n// A 'string' parameter named 'conversationSummary'\n// is passed in the body of a POST request to https://foo.bar/sendSummary\n{\n  \"systemPrompt\": \"You are a helpful assistant...\",\n  \"model\": \"fixie-ai/ultravox\",\n  \"selectedTools\": [\n    {\n      \"temporaryTool\": {\n        \"modelToolName\": \"sendConversationSummary\",\n        \"description\": \"Use this tool at the end of a conversation to send the caller a summary of the conversation.\",\n        \"dynamicParameters\": [\n          {\n            \"name\": \"conversationSummary\",\n            \"location\": \"PARAMETER_LOCATION_BODY\",\n            \"schema\": {\n              \"description\": \"A 2-3 sentence summary of the conversation.\",\n              \"type\": \"string\"\n            },\n            \"required\": true\n          }\n        ],\n        \"http\": {\n          \"baseUrlPattern\": \"https://foo.bar/sendSummary\",\n          \"httpMethod\": \"POST\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OrderDetails React Component in TypeScript\nDESCRIPTION: A complete React component that displays order details with real-time updates. It includes functions for calculating totals, formatting currency, handling order updates, and clearing orders when calls end.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/tutorials/clienttools.mdx#2025-04-21_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { OrderDetailsData, OrderItem } from '@/lib/types';\n\n// Function to calculate order total\nfunction prepOrderDetails(orderDetailsData: string): OrderDetailsData {\n  try {\n    const parsedItems: OrderItem[] = JSON.parse(orderDetailsData);\n    const totalAmount = parsedItems.reduce((sum, item) => {\n      return sum + (item.price * item.quantity);\n    }, 0);\n\n    // Construct the final order details object with total amount\n    const orderDetails: OrderDetailsData = {\n      items: parsedItems,\n      totalAmount: Number(totalAmount.toFixed(2))\n    };\n\n    return orderDetails;\n  } catch (error) {\n    throw new Error(`Failed to parse order details: ${error}`);\n  }\n}\n\nconst OrderDetails: React.FC = () => {\n  const [orderDetails, setOrderDetails] = useState<OrderDetailsData>({\n    items: [],\n    totalAmount: 0\n  });\n\n  useEffect(() => {\n    // Update order details as things change\n    const handleOrderUpdate = (event: CustomEvent<string>) => {\n      console.log(`got event: ${JSON.stringify(event.detail)}`);\n\n      const formattedData: OrderDetailsData = prepOrderDetails(event.detail);\n      setOrderDetails(formattedData);\n    };\n\n    // Clear out order details when the call ends so it's empty for the next call\n    const handleCallEnded = () => {\n      setOrderDetails({\n        items: [],\n        totalAmount: 0\n      });\n    };\n\n    window.addEventListener('orderDetailsUpdated', handleOrderUpdate as EventListener);\n    window.addEventListener('callEnded', handleCallEnded as EventListener);\n\n    return () => {\n      window.removeEventListener('orderDetailsUpdated', handleOrderUpdate as EventListener);\n      window.removeEventListener('callEnded', handleCallEnded as EventListener);\n    };\n  }, []);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(amount);\n  };\n\n  const formatOrderItem = (item: OrderItem, index: number) => (\n    <div key={index} className=\"mb-2 pl-4 border-l-2 border-gray-200\">\n      <div className=\"flex justify-between items-center\">\n        <span className=\"font-medium\">{item.quantity}x {item.name}</span>\n        <span className=\"text-gray-600\">{formatCurrency(item.price * item.quantity)}</span>\n      </div>\n      {item.specialInstructions && (\n        <div className=\"text-sm text-gray-500 italic mt-1\">\n          Note: {item.specialInstructions}\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"mt-10\">\n      <h1 className=\"text-xl font-bold mb-4\">Order Details</h1>\n      <div className=\"shadow-md rounded p-4\">\n        <div className=\"mb-4\">\n          <span className=\"text-gray-400 font-mono mb-2 block\">Items:</span>\n          {orderDetails.items.length > 0 ? (\n            orderDetails.items.map((item, index) => formatOrderItem(item, index))\n          ) : (\n            <span className=\"text-gray-500 text-base font-mono\">No items</span>\n          )}\n        </div>\n        <div className=\"mt-6 pt-4 border-t border-gray-200\">\n          <div className=\"flex justify-between items-center font-bold\">\n            <span className=\"text-gray-400 font-mono\">Total:</span>\n            <span>{formatCurrency(orderDetails.totalAmount)}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OrderDetails;\n```\n\n----------------------------------------\n\nTITLE: Configuring Twilio and Ultravox for Outgoing Calls in JavaScript\nDESCRIPTION: This code initializes the configuration for both Twilio and Ultravox services. It imports required dependencies and sets up essential variables including Twilio credentials, phone numbers, and the Ultravox API key. The system prompt defines the AI assistant's behavior during the call.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/gettingstarted/quickstart-phone-outgoing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport twilio from 'twilio';\nimport https from 'https';\n\n// Twilio configuration\nconst TWILIO_ACCOUNT_SID = 'your_twilio_account_sid_here';\nconst TWILIO_AUTH_TOKEN = 'your_twilio_auth_token_here';\nconst TWILIO_PHONE_NUMBER = 'your_twilio_phone_number_here';\nconst DESTINATION_PHONE_NUMBER = 'the_destination_phone_number_here';\n\n// Ultravox configuration\nconst ULTRAVOX_API_KEY = 'your_ultravox_api_key_here';\nconst SYSTEM_PROMPT = 'Your name is Steve and you are calling a person on the phone. Ask them their name and see how they are doing.';\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Parameters for a Tool in JavaScript\nDESCRIPTION: This code demonstrates how to add a dynamic parameter to a stock price tool. It creates a required parameter named 'symbol' that will be passed as a query parameter and includes a schema definition with description for better model understanding.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/tools.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Adding a dynamic parameter to a stock price tool\n// The parameter will be named 'symbol' and will be passed as a query parameter\n{\n  \"name\": \"stock_price\",\n  \"description\": \"Get the current stock price for a given symbol\",\n  \"dynamicParameters\": [\n    {\n      \"name\": \"symbol\",\n      \"location\": \"PARAMETER_LOCATION_QUERY\",\n      \"schema\": {\n        \"type\": \"string\",\n        \"description\": \"Stock symbol (e.g., AAPL for Apple Inc.)\"\n      },\n      \"required\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ultravox Incoming Calls Server in Node.js\nDESCRIPTION: Creates a Node.js server that handles incoming Twilio calls, connects to the Ultravox API, and streams the call to an AI agent. It includes configuration, Ultravox call creation, and Twilio response handling.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/gettingstarted/quickstart-phone-incoming.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express';\nimport https from 'https';\nimport twilio from 'twilio';\n\nconst app = express();\nconst port = 3000;\n\n// Configuration\nconst ULTRAVOX_API_KEY = 'your_ultravox_api_key_here';\nconst ULTRAVOX_API_URL = 'https://api.ultravox.ai/api/calls';\n\n// Ultravox configuration\nconst SYSTEM_PROMPT = 'Your name is Steve. You are receiving a phone call. Ask them their name and see how they are doing.';\n\nconst ULTRAVOX_CALL_CONFIG = {\n    systemPrompt: SYSTEM_PROMPT,\n    model: 'fixie-ai/ultravox',\n    voice: 'Mark',\n    temperature: 0.3,\n    firstSpeaker: 'FIRST_SPEAKER_AGENT',\n    medium: { \"twilio\": {} }\n};\n\n// Create Ultravox call and get join URL\nasync function createUltravoxCall() {\n    const request = https.request(ULTRAVOX_API_URL, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-API-Key': ULTRAVOX_API_KEY\n        }\n    });\n\n    return new Promise((resolve, reject) => {\n        let data = '';\n\n        request.on('response', (response) => {\n            response.on('data', chunk => data += chunk);\n            response.on('end', () => resolve(JSON.parse(data)));\n        });\n\n        request.on('error', reject);\n        request.write(JSON.stringify(ULTRAVOX_CALL_CONFIG));\n        request.end();\n    });\n}\n\n// Handle incoming calls\napp.post('/incoming', async (req, res) => {\n    try {\n        console.log('Incoming call received');\n        const response = await createUltravoxCall();\n        const twiml = new twilio.twiml.VoiceResponse();\n        const connect = twiml.connect();\n        connect.stream({\n            url: response.joinUrl,\n            name: 'ultravox'\n        });\n\n        const twimlString = twiml.toString();\n        res.type('text/xml');\n        res.send(twimlString);\n\n    } catch (error) {\n        console.error('Error handling incoming call:', error);\n        const twiml = new twilio.twiml.VoiceResponse();\n        twiml.say('Sorry, there was an error connecting your call.');\n        res.type('text/xml');\n        res.send(twiml.toString());\n    }\n});\n\n// Start server\napp.listen(port, () => {\n    console.log(`Server running on port ${port}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Text Messages to the Agent\nDESCRIPTION: The sendText method sends a text message to the agent. The deferResponse parameter can be set to true to skip LLM generation when you just want to provide additional guidance without getting a response.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/sdk-reference/introduction.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsendText(text: string, deferResponse?: boolean): void\n```\n\n----------------------------------------\n\nTITLE: Defining Automatic Parameters for a Tool in JavaScript\nDESCRIPTION: This snippet demonstrates how to add automatic parameters to a profile creation tool. It creates two parameters: 'call_id' as a query parameter that will automatically include the current call ID, and 'conversation_history' in the request body that includes the entire conversation history.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/tools.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Adding automatic parameters to a profile creation tool\n// There are two parameters added:\n// 'call_id' which is sent as a query param\n// 'conversation_history' which is sent in the request body\n{\n  \"name\": \"create_profile\",\n  \"description\": \"Creates a profile for the current caller\",\n  \"automaticParameters\": [\n    {\n      \"name\": \"call_id\",\n      \"location\": \"PARAMETER_LOCATION_QUERY\",\n      \"knownValue\": \"KNOWN_PARAM_CALL_ID\"\n    },\n    {\n      \"name\": \"conversation_history\",\n      \"location\": \"PARAMETER_LOCATION_BODY\",\n      \"knownValue\": \"KNOWN_PARAM_CONVERSATION_HISTORY\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Prompt for Custom Tool Usage in JavaScript\nDESCRIPTION: Example showing how to update the system prompt to instruct the agent on when and how to use the custom tool. The prompt guides the agent to gather information and then use the 'sendSummary' tool.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/tools.mdx#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst updatedPrompt = `\n  You're a friendly and fun guy. You like to chat casually while learning more about the person you're chatting with (name, hobbies, likes/dislikes). \n  \n  Be casual. Be fun to chat with. Don't talk too much. Keep your sentences pretty short and fun. Let the user guide the conversation.\n  \n  As you chat, try and learn more about the person you are talking to such as their name, hobbies, and their likes/dislikes. \n  \n  Once you have all the information, call the 'sendSummary' tool to send a summary of the conversation.\n`;\n{\n  \"systemPrompt\": updatedPrompt,\n  \"model\": \"fixie-ai/ultravox\",\n  \"selectedTools\": [\n      // Same as before\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Corpus Query Tool in Ultravox\nDESCRIPTION: JSON configuration for setting up the built-in queryCorpus tool with a specific corpus ID for Seattle-related queries.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/rag.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"systemPrompt\": \"Use the queryCorpus tool to answer questions about Seattle.\",\n  \"selectedTools\": [\n    {\n      \"toolName\": \"queryCorpus\", \n      \"parameterOverrides\": {\n        \"corpus_id\": \"<your_corpus_id_here>\",\n        \"max_results\": 5\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Corpus Access\nDESCRIPTION: JSON configuration example showing how to set up an agent with the queryCorpus tool to access corpus data. Includes parameter overrides for corpus ID and maximum results.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/corpora/overview.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"systemPrompt\": \"Use the queryCorpus tool to answer questions about Seattle.\",\n  \"selectedTools\": [\n    {\n      \"toolName\": \"queryCorpus\", \n      \"parameterOverrides\": {\n        \"corpus_id\": \"<your_corpus_id_here>\",\n        \"max_results\": 5\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Ultravox Webhook Signature in Python\nDESCRIPTION: This code validates incoming webhook requests from Ultravox by checking two security aspects: timestamp freshness (rejecting requests older than 1 minute) and signature authenticity (using HMAC with SHA-256). The implementation protects against replay attacks and message tampering.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/snippets/code/webhooks-security.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nimport hmac\n\nrequest_timestamp = request.headers[\"X-Ultravox-Webhook-Timestamp\"]\nif datetime.datetime.now() - datetime.datetime.fromisoformat(request_timestamp) > datetime.timedelta(minutes=1):\n  raise RuntimeError(\"Expired message\")\nexpected_signature = hmac.new(WEBHOOK_SECRET.encode(), request.content + request_timestamp.encode(), \"sha256\").hexdigest()\nfor signature in request.headers[\"X-Ultravox-Webhook-Signature\"].split(\",\"):\n  if hmac.compare_digest(signature, expected_signature):\n    break  # Valid signature\nelse:\n  raise RuntimeError(\"Message or timestamp was tampered with\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stage Change Tool in Ultravox API\nDESCRIPTION: This snippet demonstrates how to create a custom tool that triggers stage changes in an Ultravox call. The tool responds with a 'new-stage' response type and provides updated parameters for the new stage.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/guides/callstages.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// HTTP handler for stage changes\napp.post('/next-stage', (req, res) => {\n  // Set the response type to create a new stage\n  res.set('X-Ultravox-Response-Type', 'new-stage');\n\n  // Return the configuration for the next stage\n  res.json({\n    systemPrompt: \"You are now helping the user with XYZ. Be concise and focused.\",\n    voice: \"nova\",  // Change the voice for this stage\n    // You can override any other stage-compatible properties here\n  });\n});\n\n// Client-side tool for stage changes\nconst stageChangeTool = {\n  name: \"change_stage\",\n  description: \"Changes to the next stage of the conversation\",\n  run: async () => {\n    return {\n      responseType: \"new-stage\",\n      responseBody: {\n        systemPrompt: \"You are now in the final stage. Wrap up the conversation politely.\",\n        // Other parameters to change in the new stage\n      }\n    };\n  }\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initiating Outbound Call with Twilio\nDESCRIPTION: Creates an outbound call using Twilio's Node.js library with TwiML stream configuration.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/telephony.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst call = await client.calls.create({\n    twiml: `<Response>\n                <Connect>\n                    <Stream url=\"${joinUrl}\"/>\n                </Connect>\n            </Response>`,\n    to: phoneNumber,\n    from: twilioPhoneNumber\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Dynamic Parameters in a Call Creation in JavaScript\nDESCRIPTION: This snippet shows how to override a dynamic parameter when starting a new call. It demonstrates setting a static value ('NVDA') for the dynamic 'symbol' parameter, which prevents the model from choosing its own value for this parameter.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/tools.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Overriding dynamic parameter when starting a new call\n// Always set the stock symbol to 'NVDA'\n{\n  \"model\": \"fixie-ai/ultravox-70B\",\n  \"systemPrompt\": ...\n  \"selectedTools\": [\n    \"toolName\": \"stock_price\",\n    \"parameterOverrides\": {\n      \"symbol\": \"NVDA\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Ultravox Call for WebSockets in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a WebSocket-based call with the Ultravox API using JavaScript. It shows the POST request to initialize a call with specific parameters including system prompt, model, voice, and WebSocket-specific settings like input and output sample rates.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/guides/websockets.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await fetch('https://api.ultravox.ai/api/calls', {\n    method: 'POST',\n    headers: {\n        'X-API-Key': 'your_api_key',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        systemPrompt: \"You are a helpful assistant...\",\n        model: \"fixie-ai/ultravox\",\n        voice: \"Mark\",\n        medium: {\n            serverWebSocket: {\n                inputSampleRate: 48000,\n                outputSampleRate: 48000,\n            }\n        }\n    })\n});\n\nconst { joinUrl } = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Creating an API Call with Specific Ultravox Model in JavaScript\nDESCRIPTION: This snippet demonstrates how to specify a model when creating a call to the Ultravox API. The example shows the request body format that includes the system prompt and model specification.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/availablemodels.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Example request body to create an Ultravox call\n{\n  \"systemPrompt\": \"You are a helpful assistant...\",\n  \"model\": \"fixie-ai/ultravox-70B\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Tool with HTTP Authentication in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a tool that uses HTTP Authentication with the Bearer scheme. It shows the tool definition with security requirements and how to pass the bearer token when creating a call.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/tools.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a tool that uses HTTP Authentication scheme 'Bearer'. When the tool is invoked it will receive an 'Authorization' header with value \"Bearer your_token_here\".\n{\n  \"name\": \"stock_price\"\n  \"definition\": {\n    \"description\": \"Get the current stock price for a given symbol\",\n    \"requirements\": {\n      \"httpSecurityOptions\": {\n        \"options\": [\n          \"requirements\": {\n            \"myServiceApiKey\": {\n              \"httpAuth\": {\n                \"scheme\": \"Bearer\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n\n// Pass the Bearer token during call creation\n{\n  \"model\": \"fixie-ai/ultravox-70B\"\n  \"systemPrompt\": ...\n  \"selectedTools\": [\n    {\n      \"toolName\": \"stock_price\"\n      \"authTokens\": {\n        \"myServiceApiKey\": \"your_token_here\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ultravox Model with Stock Price Server Tool in JSON\nDESCRIPTION: This configuration sets up the fixie-ai/ultravox-70B model with a temporary server tool for stock price retrieval. The tool is configured to make GET requests to a stock market API endpoint and requires a stock symbol as a parameter.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/snippets/code/temp-tool-server.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"fixie-ai/ultravox-70B\",\n  \"systemPrompt\": ...\n  \"selectedTools\": [\n    \"temporaryTool\": {\n      \"modelToolName\": \"stock_price\",\n      \"description\": \"Get the current stock price for a given symbol\",\n      \"dynamicParameters\": [\n        {\n          \"name\": \"symbol\",\n          \"location\": \"PARAMETER_LOCATION_QUERY\",\n          \"schema\": {\n            \"type\": \"string\",\n            \"description\": \"Stock symbol (e.g., AAPL for Apple Inc.)\"\n          },\n          \"required\": true\n        }\n      ],\n      \"http\": {\n        \"baseUrlPattern\": \"https://api.stockmarket.com/v1/price\",\n        \"httpMethod\": \"GET\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Client Tool Implementation\nDESCRIPTION: The registerToolImplementation method adds a client-side tool that can be invoked when the model calls for it. The tool name must match what was defined in the call creation request.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/sdk-reference/introduction.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nregisterToolImplementation(name: string, implementation: ClientToolImplementation): void\n```\n\n----------------------------------------\n\nTITLE: Implementing General Voice Prompt Structure\nDESCRIPTION: Basic template for structuring voice AI prompts that ensures casual, conversational responses without text-specific formatting.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/gettingstarted/prompting.mdx#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nYou are [Name], a friendly AI [customer service agent / helper / etc].\nYou're interacting with the user over voice, so speak casually.\nKeep your responses short and to the point, much like someone would in dialogue. \nSince this is a voice conversation, do not use lists, bullets, emojis, or other \nthings that do not translate to voice. In addition, do not use stage directions \nor otherwise engage in action-based roleplay (e.g., \"(pauses), \"*laughs\").\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Tool Server Function in Express.js\nDESCRIPTION: Example showing how to implement the server-side functionality for the 'sendConversationSummary' tool using Express.js. The function receives the summary via POST request and uses it to send an email.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/tools.mdx#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst express = require('express');\nconst router = express.Router();\n\nrouter.post('/sendSummary', async (req, res) => {\n  try {\n    const { conversationSummary } = req.body;\n\n    // Send the email using our email provider\n    sendEmail(conversationSummary);\n\n    return res.status(200).json({\n      message: 'Conversation summary sent successfully. Continue the conversation with the user.'\n    });\n  } catch (error) {\n    return res.status(500).json({\n      message: 'Internal server error',\n      error: error.message\n    });\n  }\n});\n\nmodule.exports = router;\n```\n\n----------------------------------------\n\nTITLE: Creating an Agent that Handles DTMF Input\nDESCRIPTION: Example system prompt configuration for an AI agent that can recognize and respond to DTMF keypad inputs from callers.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/telephony.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Example system prompt for an agent that handles DTMF input\n{\n  \"systemPrompt\": `You are an automated phone system.\n    When a caller joins, say: \"Welcome! Press 1 for sales, 2 for support, or 3 for billing.\"\n    If they press 1, transfer them to sales using the transfer tool.\n    If they press 2, transfer them to support.\n    If they press 3, transfer them to billing.\n    If they press any other key, ask them to try again with a valid option.\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Tool Logic for Order Updates\nDESCRIPTION: Implementation of the updateOrderTool client tool that dispatches a custom event when order details are updated. The tool receives order data from the AI agent and broadcasts it to UI components via a custom event.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/tutorials/clienttools.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClientToolImplementation } from 'ultravox-client';\n\nexport const updateOrderTool: ClientToolImplementation = (parameters) => {\n  const { ...orderData } = parameters;\n  \n  if (typeof window !== \"undefined\") {\n    const event = new CustomEvent(\"orderDetailsUpdated\", {\n      detail: orderData.orderDetailsData,\n    });\n    window.dispatchEvent(event);\n  }\n\n  return \"Updated the order details.\";\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Tool Context for Voice AI\nDESCRIPTION: Example showing how to provide context for tool usage in voice interactions.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/gettingstarted/prompting.mdx#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nYou have access to an address book that contains personnel information. \nIf someone asks for information for a particular person, you MUST use \nthe lookUpAddressBook tool to find that information before replying.\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Voice using Ultravox API\nDESCRIPTION: Example of sending a POST request to create a custom voice by uploading an audio sample. The request includes headers for authentication and content type, along with form data for the audio file and voice metadata.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/voices.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST https://api.ultravox.ai/api/voices \\\n  --header 'Content-Type: multipart/form-data' \\\n  --header 'X-API-Key: YOUR_API_KEY' \\\n  --form 'file=@\"/path/to/your/audio-sample.wav\"'\n  --form 'name=My Custom Voice' \\\n  --form 'description=Voice recorded on Jan 1, 2024'\n```\n\n----------------------------------------\n\nTITLE: Initializing Stock Price Tool Configuration with Fixie AI\nDESCRIPTION: JSON configuration that sets up a client tool for retrieving stock prices. Specifies the ultravox-70B model and defines a temporary tool with parameters for stock symbol input. The tool requires a stock symbol parameter and returns current price data.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/snippets/code/temp-tool-client.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"model\": \"fixie-ai/ultravox-70B\",\n  \"systemPrompt\": ...\n  \"selectedTools\": [\n    \"temporaryTool\": {\n      \"modelToolName\": \"stock_price\",\n      \"description\": \"Get the current stock price for a given symbol\",\n      \"dynamicParameters\": [\n        {\n          \"name\": \"symbol\",\n          \"location\": \"PARAMETER_LOCATION_BODY\",\n          \"schema\": {\n            \"type\": \"string\",\n            \"description\": \"Stock symbol (e.g., AAPL for Apple Inc.)\"\n          },\n          \"required\": true\n        }\n      ],\n      \"client\": {}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Endpoint Definition for Listing Call Messages\nDESCRIPTION: Defines the OpenAPI endpoint to retrieve all messages generated during a specific call. The endpoint uses a GET request to /api/calls/{call_id}/messages where call_id is the identifier of the call.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/calls/calls-messages-list.mdx#2025-04-21_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /api/calls/{call_id}/messages\ntitle: \"List Call Messages\"\ndescription: \"Returns all messages generated during the given call\"\n```\n\n----------------------------------------\n\nTITLE: Example Client Tool Implementation\nDESCRIPTION: An example of a client tool implementation function that accepts parameters and returns a formatted string result. This would be used with registerToolImplementation.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/sdk-reference/introduction.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n  const stock_price = (parameters) => {\n    ...  // to be implemented\n    return `Stock price is ${value}`;\n  };\n```\n\n----------------------------------------\n\nTITLE: Creating a Call with Built-in Tools in JavaScript\nDESCRIPTION: Example showing how to create a call with the built-in 'hangUp' tool using either the toolName or toolId. This allows the agent to end the call when the conversation naturally concludes.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/tools.mdx#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Example request body for creating a call with a built-in tool\n{\n  \"systemPrompt\":\"You are a helpful assistant. When the call naturally wraps up, use the 'hangUp' tool to end the call.\",\n  \"selectedTools\":[\n    { \"toolName\": \"hangUp\" }\n  ]\n};\n\n// The toolId can also be used\n{\n  \"systemPrompt\":\"You are a helpful assistant. When the call naturally wraps up, use the 'hangUp' tool to end the call.\",\n  \"selectedTools\":[\n    { \"toolId\": \"56294126-5a7d-4948-b67d-3b7e13d55ea7\" }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Agent Call Parameters in Ultravox\nDESCRIPTION: Demonstrates how to override default agent settings when creating a call, including template context, duration limits, metadata, and custom speaker settings.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/agents.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await fetch(`https://api.ultravox.ai/api/agents/${agentId}/calls`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-API-Key': 'your-api-key'\n  },\n  body: JSON.stringify({\n    templateContext: {\n      customerName: \"Alex\",\n      accountType: \"Premium\"\n    },\n    maxDuration: \"900s\",\n    metadata: {\n      source: \"mobile_app\",\n      sessionId: \"sess_789012\",\n      userTimezone: \"America/New_York\"\n    },\n    firstSpeakerSettings: {\n      agent: {\n        text: \"Hi Alex! Welcome back to premium support. How can I help you today?\"\n      }\n    }\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Client Tool Schema for Order Updates in Ultravox\nDESCRIPTION: Configuration for the updateOrder client tool that defines its parameters and schema. The tool accepts an array of order items with properties for name, quantity, special instructions, and price.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/tutorials/clienttools.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst selectedTools: SelectedTool[] = [\n  {\n    \"temporaryTool\": {\n      \"modelToolName\": \"updateOrder\",\n      \"description\": \"Update order details. Used any time items are added or removed or when the order is finalized. Call this any time the user updates their order.\",      \n      \"dynamicParameters\": [\n        {\n          \"name\": \"orderDetailsData\",\n          \"location\": ParameterLocation.BODY,\n          \"schema\": {\n            \"description\": \"An array of objects contain order items.\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"name\": { \"type\": \"string\", \"description\": \"The name of the item to be added to the order.\" },\n                \"quantity\": { \"type\": \"number\", \"description\": \"The quantity of the item for the order.\" },\n                \"specialInstructions\": { \"type\": \"string\", \"description\": \"Any special instructions that pertain to the item.\" },\n                \"price\": { \"type\": \"number\", \"description\": \"The unit price for the item.\" },\n              },\n              \"required\": [\"name\", \"quantity\", \"price\"]\n            }\n          },\n          \"required\": true\n        },\n      ],\n      \"client\": {}\n    }\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Tool Implementations at Once\nDESCRIPTION: The registerToolImplementations method allows registering multiple client tools at once using an object map where keys are tool names and values are implementation functions.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/sdk-reference/introduction.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nregisterToolImplementations(implementationMap: { [name: string]: ClientToolImplementation }): void \n```\n\n----------------------------------------\n\nTITLE: Configuring System Prompt for Stage Transitions in Ultravox\nDESCRIPTION: This snippet shows how to configure a system prompt that instructs an agent when to use the stage change tool. It also demonstrates adding the tool to the selectedTools array when creating a call.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/guides/callstages.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// System prompt instructing the agent on stage transitions\nconst systemPrompt = `You are an assistant helping users apply for a loan.\n\nThe conversation has multiple stages:\n1. Initial greeting and basic information gathering\n2. Financial assessment\n3. Property details\n4. Summary and next steps\n\nYou MUST use the change_stage tool to progress through these stages when appropriate.\nMove to the next stage ONLY when you have gathered all necessary information for the current stage.\n`;\n\n// Creating a call with the stage change tool included\nconst call = await ultravox.calls.create({\n  systemPrompt,\n  selectedTools: [\n    \"change_stage\", // Include our stage transition tool\n    \"loan_calculator\",\n    // Other tools as needed\n  ],\n  // Other call parameters\n});\n\n```\n\n----------------------------------------\n\nTITLE: Creating a System Prompt for the Drive-Thru AI Agent\nDESCRIPTION: System prompt that defines the AI agent's role, menu items, conversation flow, and tool usage rules. It specifies how and when the updateOrder tool should be called and provides guidelines for handling orders.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/tutorials/clienttools.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsysPrompt = `\n  # Drive-Thru Order System Configuration\n\n  ## Agent Role\n  - Name: Dr. Donut Drive-Thru Assistant\n  - Context: Voice-based order taking system with TTS output\n  - Current time: ${new Date()}\n\n  ## Menu Items\n    # DONUTS\n    PUMPKIN SPICE ICED DOUGHNUT $1.29\n    PUMPKIN SPICE CAKE DOUGHNUT $1.29\n    OLD FASHIONED DOUGHNUT $1.29\n    CHOCOLATE ICED DOUGHNUT $1.09\n    CHOCOLATE ICED DOUGHNUT WITH SPRINKLES $1.09\n    RASPBERRY FILLED DOUGHNUT $1.09\n    BLUEBERRY CAKE DOUGHNUT $1.09\n    STRAWBERRY ICED DOUGHNUT WITH SPRINKLES $1.09\n    LEMON FILLED DOUGHNUT $1.09\n    DOUGHNUT HOLES $3.99\n\n    # COFFEE & DRINKS\n    PUMPKIN SPICE COFFEE $2.59\n    PUMPKIN SPICE LATTE $4.59\n    REGULAR BREWED COFFEE $1.79\n    DECAF BREWED COFFEE $1.79\n    LATTE $3.49\n    CAPPUCINO $3.49\n    CARAMEL MACCHIATO $3.49\n    MOCHA LATTE $3.49\n    CARAMEL MOCHA LATTE $3.49\n\n  ## Conversation Flow\n  1. Greeting -> Order Taking -> Call \"updateOrder\" Tool -> Order Confirmation -> Payment Direction\n\n  ## Tool Usage Rules\n  - You must call the tool \"updateOrder\" immediately when:\n    - User confirms an item\n    - User requests item removal\n    - User modifies quantity\n  - Do not emit text during tool calls\n  - Validate menu items before calling updateOrder\n\n  ## Response Guidelines\n  1. Voice-Optimized Format\n    - Use spoken numbers (\"one twenty-nine\" vs \"$1.29\")\n    - Avoid special characters and formatting\n    - Use natural speech patterns\n\n  2. Conversation Management\n    - Keep responses brief (1-2 sentences)\n    - Use clarifying questions for ambiguity\n    - Maintain conversation flow without explicit endings\n    - Allow for casual conversation\n\n  3. Order Processing\n    - Validate items against menu\n    - Suggest similar items for unavailable requests\n    - Cross-sell based on order composition:\n      - Donuts -> Suggest drinks\n      - Drinks -> Suggest donuts\n      - Both -> No additional suggestions\n\n  4. Standard Responses\n    - Off-topic: \"Um... this is a Dr. Donut.\"\n    - Thanks: \"My pleasure.\"\n    - Menu inquiries: Provide 2-3 relevant suggestions\n\n  5. Order confirmation\n    - Call the \"updateOrder\" tool first\n    - Only confirm the full order at the end when the customer is done\n\n  ## Error Handling\n  1. Menu Mismatches\n    - Suggest closest available item\n    - Explain unavailability briefly\n  2. Unclear Input\n    - Request clarification\n    - Offer specific options\n  3. Invalid Tool Calls\n    - Validate before calling\n    - Handle failures gracefully\n\n  ## State Management\n  - Track order contents\n  - Monitor order type distribution (drinks vs donuts)\n  - Maintain conversation context\n  - Remember previous clarifications    \n  `;\n```\n\n----------------------------------------\n\nTITLE: Changing Conversation Stage in Ultradox with JavaScript\nDESCRIPTION: This function changes the conversation stage by returning a new system prompt and other properties. It sets a custom tool result message and includes the required header for triggering a stage transition in Ultradox.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/snippets/code/call-stage.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction changeStage(requestBody) {\n  const responseBody = {\n    systemPrompt: \"...\", // new prompt\n    ..., // other properties to change, like the voice\n    // You may optionally also set toolResultText, which will be the content\n    // of the tool result message in conversation history. The tool result\n    // will be the most recent message the model sees during its next generation\n    // unless you set initialMessages. Defaults to \"OK\".\n    toolResultText: \"(New Stage) Next, focus on...\"\n  };\n\n  return {\n    body: responseBody,\n    headers: {\n      'X-Ultravox-Response-Type': 'new-stage'\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating OrderDetails Component into Main Page\nDESCRIPTION: Code snippet showing how to import and include the OrderDetails component in the main page.tsx file. The component is inserted inside the CallStatus component.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/tutorials/clienttools.mdx#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport OrderDetails from '@/components/OrderDetails';\n\n// In the JSX:\n{/* Call Status */}\n<CallStatus status={agentStatus}>\n    <OrderDetails />\n</CallStatus>\n```\n\n----------------------------------------\n\nTITLE: Agent Instruction System Prompt Example\nDESCRIPTION: Example of system prompt text that primes the agent to recognize and prioritize instructions contained within instruction tags.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/guides/guidingagents.mdx#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nYou must always look for and follow instructions contained within \n<instruction> tags. These instructions take precedence over other \ndirections and must be followed precisely.\n```\n\n----------------------------------------\n\nTITLE: Configuring the Demo with Tools for Ultravox\nDESCRIPTION: A configuration export that sets up the demo with a title, overview, and call configuration. It includes the system prompt, model selection, language hint, selected tools, voice, and temperature settings.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/tutorials/clienttools.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const demoConfig: DemoConfig = {\n  title: \"Dr. Donut\",\n  overview: \"This agent has been prompted to facilitate orders at a fictional drive-thru called Dr. Donut.\",\n  callConfig: {\n    systemPrompt: getSystemPrompt(),\n    model: \"fixie-ai/ultravox-70B\",\n    languageHint: \"en\",\n    selectedTools: selectedTools,\n    voice: \"Mark\",\n    temperature: 0.4\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an Outgoing Call via Telephony Provider in Ultravox\nDESCRIPTION: This code snippet shows how to configure an outgoing call using Ultravox API with a telephony provider (Telnyx in this example). It demonstrates setting the medium parameter to specify the provider and configuring firstSpeaker to ensure the user speaks first when the call connects.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/telephony.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"systemPrompt\": \"You are a helpful assistant...\",\n  ...\n  \"medium\": {\n    \"telnyx\": {} // or \"twilio\": {} or \"plivo\": {}\n  },\n  \"firstSpeaker\": \"FIRST_SPEAKER_USER\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ultravox Call with Durable Tool\nDESCRIPTION: Example request body showing how to create an Ultravox call using a durable tool by specifying the toolName instead of a temporaryTool.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/tools.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"model\": \"fixie-ai/ultravox-70B\",\n  \"systemPrompt\": ...\n  \"selectedTools\": [\n    \"toolName\": \"stock_price\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Deferred Message with Ultravox SDK in TypeScript\nDESCRIPTION: Example showing how to send a deferred instruction message using the Ultravox SDK. The message is added to conversation history without triggering an immediate agent response.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/guides/guidingagents.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsession.sendText({\n  text: \"<instruction>Next, collect the user's mailing address</instruction>\",\n  deferResponse: true\n})\n```\n\n----------------------------------------\n\nTITLE: Using the playDtmfSounds Tool to Send Tones\nDESCRIPTION: Example of using the playDtmfSounds tool to send DTMF tones through the phone connection, useful for navigating IVR systems.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/telephony.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of using the playDtmfSounds tool to dial an extension\n{\n  \"digits\": \"123#\"  // Will play tones for 1, 2, 3, and # in sequence\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Tool with Header Authentication in JavaScript\nDESCRIPTION: This snippet shows how to create a tool that uses an HTTP Header for authentication. It defines a tool that requires an 'X-My-Header' header for authentication and demonstrates how to provide the authentication token when creating a call.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/tools.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a tool that uses an HTTP Header named 'X-My-Header'\n{\n  \"name\": \"stock_price\"\n  \"definition\": {\n    \"description\": \"Get the current stock price for a given symbol\",\n    \"requirements\": {\n      \"httpSecurityOptions\": {\n        \"options\": [\n          \"requirements\": {\n            \"myServiceApiKey\": {\n              \"headerApiKey\": {\n                \"name\": \"X-My-Header\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n\n// Pass the API key during call creation\n{\n  \"model\": \"fixie-ai/ultravox-70B\"\n  \"systemPrompt\": ...\n  \"selectedTools\": [\n    {\n      \"toolName\": \"stock_price\"\n      \"authTokens\": {\n        \"myServiceApiKey\": \"your_token_here\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint for Call Tools\nDESCRIPTION: OpenAPI specification for an endpoint that retrieves all tools available during a specific call identified by call_id.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/calls/calls-tools-list.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api/calls/{call_id}/tools\ntitle: \"List Call Tools\"\ndescription: \"Returns all tools that were available at any point during the call\"\n```\n\n----------------------------------------\n\nTITLE: Webhook Event Payload Structure in JavaScript\nDESCRIPTION: Demonstrates the standard JSON structure for webhook event payloads sent by Ultravox. The payload includes the event name and associated call object data.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/guides/webhooks.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"event\": {event_name}\n  \"call\": {call_object}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining POST /api/tools OpenAPI Endpoint\nDESCRIPTION: This YAML snippet defines an OpenAPI endpoint specification for creating a new tool. It includes the path, HTTP method (POST), title, and a brief description of the endpoint's functionality.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/tools/tools-post.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /api/tools\ntitle: \"Create Tool\"\ndescription: \"Creates a new tool\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Tool with Query Parameter Authentication in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a tool that requires API key authentication via a query parameter. It shows both the tool definition with security requirements and how to pass the API key when creating a call.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/tools.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a tool that uses a query parameter called 'apiKey'\n{\n  \"name\": \"stock_price\"\n  \"definition\": {\n    \"description\": \"Get the current stock price for a given symbol\",\n    \"requirements\": {\n      \"httpSecurityOptions\": {\n        \"options\": [\n          \"requirements\": {\n            \"mySeviceApiKey\": {\n              \"queryApiKey\": {\n                \"name\": \"apiKey\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n\n// Pass the API key during call creation\n{\n  \"model\": \"fixie-ai/ultravox-70B\"\n  \"systemPrompt\": ...\n  \"selectedTools\": [\n    {\n      \"toolName\": \"stock_price\"\n      \"authTokens\": {\n        \"myServiceApiKey\": \"your_token_here\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AI System Prompt for Ultravox Agent\nDESCRIPTION: JavaScript code snippet that configures the system prompt for the Ultravox AI agent, which defines the agent's identity and behavior during calls.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/examples/twilio-incoming-quickstart-js/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst SYSTEM_PROMPT = 'Your name is Steve...';\n```\n\n----------------------------------------\n\nTITLE: Configuring Medium for Outgoing SIP Calls in Ultravox\nDESCRIPTION: Configuration object for the medium parameter when creating an outgoing SIP call. Includes to, from, username, and password fields for SIP authentication and routing.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/guides/sip.mdx#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nmedium: {\n  sip: {\n    outgoing: {\n      to: \"sip:<destination>@<sip_domain>\",\n      from: \"<your_identifier>\",\n      username: \"<authentication_username>\",\n      password: \"<authentication_password>\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Listing Voices in YAML\nDESCRIPTION: This YAML snippet defines an OpenAPI specification for a GET endpoint that lists all available voices. It specifies the path, title, and description of the endpoint.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/voices/voices-list.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api/voices\ntitle: \"List Voices\"\ndescription: \"Retrieves all available voices\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Stage Management Tool for AI Assistant in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure and integrate a stage management tool called 'changeStage' into an AI assistant. The configuration includes setting up a system prompt that informs the assistant about the tool's availability and adding the tool to the selectedTools array with appropriate parameters.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/snippets/code/call-stage-prompt.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Instruct the agent on how to use the stage management tool\n// Add the tool to selectedTools\n{\n  systemPrompt: \"You are a helpful assistant...you have access to a tool called changeStage...\",\n  ...,\n  selectedTools: [\n    {\n      \"temporaryTool\": {\n        \"modelToolName\": \"changeStage\",\n        \"description\": ...,\n        \"dynamicParameters\": [...],\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Inactivity Messages in JavaScript for Ultravox API\nDESCRIPTION: This snippet demonstrates how to add inactivity messages to a call in the Ultravox API. It includes three messages with different durations and end behaviors to handle user inactivity gracefully.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/calls/overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"systemPrompt\": \"You are a helpful assistant.\",\n  \"inactivityMessages\": [\n    {\n      \"duration\": \"30s\",\n      \"message\": \"Are you still there?\"\n    },\n    {\n      \"duration\": \"15s\",\n      \"message\": \"If there's nothing else, may I end the call?\"\n    },\n    {\n      \"duration\": \"10s\",\n      \"message\": \"Thank you for calling. Have a great day. Goodbye.\",\n      \"endBehavior\": \"END_BEHAVIOR_HANG_UP_SOFT\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Outgoing SIP Call to Linphone\nDESCRIPTION: Example configuration for creating an outgoing SIP call specifically to a Linphone SIP client. Specifies the to and from parameters needed for the connection.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/guides/sip.mdx#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n    medium: {\n      sip: {\n        outgoing: {\n          to: \"sip:<username>@sip.linphone.org\",\n          from: \"<company_name>\"\n        }\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Initiating Outbound Call with Plivo\nDESCRIPTION: Creates an outbound call using Plivo's Node.js library with answer URL configuration.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/telephony.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst call = await plivo.calls.create({\n  to: phoneNumber,\n  from: plivoPhoneNumber,\n  answer_url: answerUrl,\n  answer_method: \"GET\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a Temporary Tool for Stock Price API Access in JSON\nDESCRIPTION: This JSON configuration defines a temporary tool named 'stock_price' that retrieves current stock prices using an API. It specifies the required 'symbol' parameter and configures the HTTP method and base URL for the stock market API endpoint.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/snippets/code/temp-tool.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"model\": \"fixie-ai/ultravox-70B\",\n  \"systemPrompt\": ...\n  \"selectedTools\": [\n    \"temporaryTool\": {\n      \"modelToolName\": \"stock_price\",\n      \"description\": \"Get the current stock price for a given symbol\",\n      \"dynamicParameters\": [\n        {\n          \"name\": \"symbol\",\n          \"location\": \"PARAMETER_LOCATION_QUERY\",\n          \"schema\": {\n            \"type\": \"string\",\n            \"description\": \"Stock symbol (e.g., AAPL for Apple Inc.)\"\n          },\n          \"required\": true\n        }\n      ],\n      \"http\": {\n        \"baseUrlPattern\": \"https://api.stockmarket.com/v1/price\",\n        \"httpMethod\": \"GET\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Endpoint Definition for Corpus Source Creation\nDESCRIPTION: OpenAPI specification for POST endpoint that creates new sources within a specified corpus. The endpoint path includes a corpus_id parameter.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/corpora/corpora-sources-post.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /api/corpora/{corpus_id}/sources\\ntitle: \"Create Corpus Source\"\\ndescription: \"Creates a new source for the specified corpus\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Incoming SIP Call with Ultravox\nDESCRIPTION: Configuration object for the medium parameter when creating an incoming SIP call. Uses an empty incoming object to indicate the call type.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/guides/sip.mdx#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmedium: {\n  sip: {\n    incoming: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Jambonz Outbound Call Creation\nDESCRIPTION: Creates an outbound call using Jambonz client with carrier and application configuration.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/telephony.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst JambonzClient = require('@jambonz/node-client');\n\nconst client = JambonzClient(\n  process.env.JAMBONZ_ACCOUNT_SID,\n  process.env.JAMBONZ_API_KEY,\n  {baseUrl: process.env.JAMBONZ_REST_API_BASE_URL || 'https://api.jambonz.cloud/v1'}\n);\n\nconst call = await client.calls.create({\n    from: process.env.FROM_NUMBER,  \n      to: {\n        type : 'phone',\n        number: phoneNumber,\n        trunk: process.env.CARRIER\n        },\n    application_sid: process.env.APPLICATION_SID\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling DTMF Sending Capability for Voice Agents\nDESCRIPTION: Configuration example showing how to enable the playDtmfSounds tool when creating a call or call stage to allow sending DTMF tones.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/telephony.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Example request body for creating a call with DTMF capability\n{\n  \"systemPrompt\": \"You are a helpful assistant. When prompted to dial an extension, use the 'playDtmfSounds' tool to send the appropriate tones.\",\n  \"selectedTools\": [\n    { \"toolName\": \"playDtmfSounds\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Client Tools with Ultravox Session\nDESCRIPTION: Code to register the updateOrderTool with the Ultravox session and handle call ending events. When a call ends, it dispatches a custom event that can be used to clear the order display.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/tutorials/clienttools.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { updateOrderTool } from '@/lib/clientTools';\n\n// Initialize Ultravox session\nuvSession = new UltravoxSession({ experimentalMessages: debugMessages });\n\n// Register tool\nuvSession.registerToolImplementation(\n    \"updateOrder\",\n    updateOrderTool\n);\n\n// Handle call ending -- This allows clearing the order details screen\nexport async function endCall(): Promise<void> {\n  if (uvSession) {\n    uvSession.leaveCall();\n    uvSession = null;\n    \n    if (typeof window !== 'undefined') {\n      window.dispatchEvent(new CustomEvent('callEnded'));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Microphone Mute Status\nDESCRIPTION: The isMicMuted method returns a boolean indicating if the end user's microphone is currently muted within the Ultravox SDK context.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/sdk-reference/introduction.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nisMicMuted(): boolean\n```\n\n----------------------------------------\n\nTITLE: Telnyx TeXML Stream Configuration\nDESCRIPTION: XML configuration for Telnyx streaming with bidirectional audio setup using PCMU codec.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/telephony.mdx#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Response>\n  <Connect>\n    <Stream url=\"${joinUrl}\" bidirectionalMode=\"rtp\"  codec=\"PCMU\" bidirectionalCodec=\"PCMU\"/>\n  </Connect>\n</Response>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Corpus Structure Flow with Mermaid\nDESCRIPTION: Flowchart showing the hierarchical relationship between Corpus, Source, Document, Chunk, and Vector components in the RAG system.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/corpora/overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    1(Corpus) -->|contains| 2(Source) -->|produces| 3(Document) -->|comprised of| 4(Chunk) -->|referenceable by| 5(Vector)\n```\n\n----------------------------------------\n\nTITLE: Unmuting the Microphone\nDESCRIPTION: The unmuteMic method enables the end user's microphone input within the Ultravox SDK.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/sdk-reference/introduction.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nunmuteMic(): void\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Webhook Update Endpoint Definition\nDESCRIPTION: OpenAPI specification for the webhook update endpoint that handles partial modifications to webhook configurations via PATCH method.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/webhooks/webhooks-patch.mdx#2025-04-21_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: patch /api/webhooks/{webhook_id}\ntitle: \"Update Webhook\"\ndescription: \"Updates the specified webhook configuration\"\n```\n\n----------------------------------------\n\nTITLE: Providing Initial Messages in JavaScript for Ultravox API\nDESCRIPTION: This example shows how to provide initial messages when creating a new call or call stage in the Ultravox API. It includes messages from both the user and agent roles to set up the conversation context.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/calls/overview.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"systemPrompt\": \"You are a helpful assistant.\",\n  \"initialMessages\": [\n    {\n      \"role\": \"MESSAGE_ROLE_USER\",\n      \"text\": \"My name is Steve\"\n    },\n    {\n      \"role\": \"MESSAGE_ROLE_AGENT\",\n      \"text\": \"Great to meet you, Steve! How can I help?\"\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Tools Possibilities Component with React in JSX\nDESCRIPTION: A React functional component that displays information about tools in Ultravox (also known as function calling). The component uses a CardGroup layout to showcase different tool capabilities including external communication, order management, knowledge bases, and call handling functionality.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/snippets/toolspossibilities.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const ToolsPossibilities = ({}) => (\n  <div>\n    Tools in Ultravox (also known as function calling) are a powerful way to extend your agents' capabilities by connecting them to external services and systems. At their core, tools are simply functions that agents can invoke to perform specific actions or retrieve information.\n    <br /><br />\n    Ultravox includes <a href=\"/essentials/tools#built-in-tools\">built-in tools</a> and you can <a href=\"/essentials/tools#creating-your-first-custom-tool\">create custom tools</a>.\n    <br /><br />\n    Here are some of the things you can do with tools:\n\n  <CardGroup cols={2}>\n    <Card title=\"Communicate with the Outside world\" icon=\"earth-americas\">\n      Lookup the weather, get movie times, create calendar events, or send emails.\n    </Card>\n    <Card title=\"Order Lookup\" icon=\"cart-shopping\">\n      Lookup orders, backordered items, or provide shipment updates.\n    </Card>\n    <Card title=\"Knowledge Base\" icon=\"circle-info\">\n      Consult product and support documentation for contextual support.\n    </Card>\n    <Card title=\"Create Support Case\" icon=\"message-question\">\n      Open tailored support cases for human follow-up.\n    </Card>\n    <Card title=\"Transfer Call\" icon=\"swap\">\n      Hand-off or escalate calls to human support agents.\n    </Card>\n    <Card title=\"End Call\" icon=\"phone-hangup\">\n      End calls due to user inactivity or after successful resolution.\n    </Card>\n  </CardGroup>\n  <br />\n  Any functionality you can encapsulate in a function can be exposed to your agents as a tool. Addtionally, Ultravox automatically calls the underlying function so you don't have to sweat gluing things together.\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Muting the Speaker\nDESCRIPTION: The muteSpeaker method disables the agent's voice output within the Ultravox SDK.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/sdk-reference/introduction.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nmuteSpeaker(): void\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers for Voice Output\nDESCRIPTION: Instructions for formatting numbers to be more voice-friendly using ellipsis separation.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/gettingstarted/prompting.mdx#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nWhen you're reading out numbers, please separate them into individual digits, \nseparated by an ellipsis. For example, the number 1234 should be read \nas \"1...2...3...4\".\n```\n\n----------------------------------------\n\nTITLE: Setting the Agent's Output Medium\nDESCRIPTION: The setOutputMedium method changes how the agent responds to the user, either via text or voice. Changes take effect after the current utterance completes.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/sdk-reference/introduction.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetOutputMedium(medium: Medium): void\n```\n\n----------------------------------------\n\nTITLE: Making API Requests with curl and JavaScript\nDESCRIPTION: Examples of how to make GET requests to the Ultravox API using curl and JavaScript fetch. Both examples demonstrate proper authentication using the X-API-Key header with a fictional API key.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n--url https://api.ultravox.ai/api/calls \\\n--header 'X-API-Key: aBCDef.123456'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://api.ultravox.ai/api/calls', {\n  method: 'GET',\n  headers: {\n    'X-API-Key': 'aBCDef.123456'\n  }\n})\n.then(response => response.json())\n.then(data => console.log(data))\n.catch(error => console.error('Error:', error));\n```\n\n----------------------------------------\n\nTITLE: Unmuting the Speaker\nDESCRIPTION: The unmuteSpeaker method enables the agent's voice output within the Ultravox SDK.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/sdk-reference/introduction.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nunmuteSpeaker(): void\n```\n\n----------------------------------------\n\nTITLE: Plivo XML Stream Configuration\nDESCRIPTION: XML configuration for Plivo streaming with high-quality audio settings.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/telephony.mdx#2025-04-21_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Response>\n    <Stream keepCallAlive=\"true\" \n            contentType=\"audio/x-l16;rate=16000\"\n            bidirectional=\"true\">\n        ${joinUrl}\n    </Stream>\n</Response>\n```\n\n----------------------------------------\n\nTITLE: Tool Call Result Debug Message Example (Bash)\nDESCRIPTION: This debug message example shows the format when a tool call completes. It contains an array of messages with both the tool call and its result, including details like role, text content, tool name, and invocation ID.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/sdk-reference/introduction.mdx#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nTool call complete.\n\nResult: [\n  role: MESSAGE_ROLE_TOOL_CALL ordinal: 6 text: \"{\\\"firstName\\\":\\\"Ron\\\",\\\"lastName\\\":\\\"Burgandy\\\",\\\"organization\\\":\\\"Fixie.ai\\\",\\\"useCase\\\":\\\"creating a talking AI news reporter\\\"}\" tool_name: \"createProfile\" invocation_id: \"call_D2qQVS8OQc998aMEw5PRa9cF\" tool_id: \"aa737e12-0989-4adb-9895-f387f40557d8\" ,\n  role: MESSAGE_ROLE_TOOL_RESULT ordinal: 7 text: \"{\\\"firstName\\\":\\\"Ron\\\",\\\"lastName\\\":\\\"Burgandy\\\",\\\"emailAddress\\\":null,\\\"organization\\\":\\\"Fixie\\\",\\\"useCase\\\":\\\"creating a talking AI news reporter\\\"}\" tool_name: \"createProfile\" invocation_id: \"call_D2qQVS8OQc998aMEw5PRa9cF\" tool_id: \"aa737e12-0989-4adb-9895-f387f40557d8\"\n]\n```\n\n----------------------------------------\n\nTITLE: Tool Response Message Implementation in JavaScript\nDESCRIPTION: Example of a tool response function that provides guidance for the next step after processing profile data.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/guides/guidingagents.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createProfile(parameters) {\n  const { ...profileData } = parameters;\n\n  return {\n    result: \"Successfully recorded customer name. Next ask for their email\",\n    responseType: \"tool-response\",\n    agentReaction: \"speaks-once\"\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Jambonz LLM Integration Setup\nDESCRIPTION: Configures an incoming call handler using Jambonz's LLM integration with Ultravox.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/telephony.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsession\n.pause({length: 1.5})\n.llm({\n  vendor: 'ultravox',\n  model: 'fixie-ai/ultravox',\n  auth: {\n    apiKey\n  },\n  actionHook: '/final',\n  eventHook: '/event',\n  llmOptions: {\n    systemPrompt: 'You are an agent named Karen. Greet the user and ask how you can help.',\n    firstSpeaker: 'FIRST_SPEAKER_AGENT',\n    initialMessages: [{\n      medium: 'MESSAGE_MEDIUM_VOICE',\n      role: 'MESSAGE_ROLE_USER'\n    }],\n    model: 'fixie-ai/ultravox',\n    voice: 'Tanya-English',\n    transcriptOptional: true,\n  }\n})\n.hangup()\n.send();\n```\n\n----------------------------------------\n\nTITLE: Twilio TwiML Stream Configuration\nDESCRIPTION: XML configuration for Twilio streaming setup for incoming calls.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/telephony.mdx#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Response>\n    <Connect>\n        <Stream url=\"your_ultravox_join_url\" />\n    </Connect>\n</Response>\n```\n\n----------------------------------------\n\nTITLE: Client Tool Parameter Location Configuration\nDESCRIPTION: Configuration snippet showing the required parameter location setting for client tools, which must use PARAMETER_LOCATION_BODY.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/sdk-reference/introduction.mdx#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n\"location\": \"PARAMETER_LOCATION_BODY\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Schema for UltraVox Base Tool\nDESCRIPTION: This YAML snippet defines the OpenAPI schema for the base tool definition in UltraVox. It specifies the schema version, title, and description for the base tool structure.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/schema/base-tool-definition.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi-schema: ultravox.v1.BaseToolDefinition\ntitle: \"Base Tool Definition\"\ndescription: \"\"\n```\n\n----------------------------------------\n\nTITLE: AI System Prompt Configuration\nDESCRIPTION: JavaScript code snippet showing how to modify the AI system prompt for customizing the agent's behavior and identity.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/examples/twilio-incoming-advanced-js/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst SYSTEM_PROMPT = 'Your name is Steve...';\n```\n\n----------------------------------------\n\nTITLE: Muting the Microphone\nDESCRIPTION: The muteMic method disables the end user's microphone input within the Ultravox SDK.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/sdk-reference/introduction.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nmuteMic(): void\n```\n\n----------------------------------------\n\nTITLE: Initiating Outbound Call with Telnyx\nDESCRIPTION: Creates an outbound call using Telnyx's Node.js library with stream configuration for bidirectional audio.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/telephony.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst call = await telnyx.calls.create({\n  connection_id: \"uuid\",\n  to: phoneNumber,\n  from: telnyxPhoneNumber,\n  stream_url: joinUrl,\n  stream_track: \"both_tracks\",\n  stream_bidirectional_mode: \"rtp\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AI System Prompt\nDESCRIPTION: Setting up the initial system prompt for the AI agent named Steve that will handle the phone conversation.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/examples/twilio-outgoing-quickstart-js/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst SYSTEM_PROMPT = 'Your name is Steve and you are calling...';\n```\n\n----------------------------------------\n\nTITLE: Creating Public URL for Local Server with ngrok\nDESCRIPTION: Uses ngrok to create a public URL for the local server running on port 3000. This allows Twilio to send webhooks to the local development server.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/gettingstarted/quickstart-phone-incoming.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 3000\n```\n\n----------------------------------------\n\nTITLE: Checking Speaker Mute Status\nDESCRIPTION: The isSpeakerMuted method returns a boolean indicating if the agent's voice output is currently muted within the Ultravox SDK context.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/sdk-reference/introduction.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nisSpeakerMuted(): boolean\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Tool Endpoint Specification\nDESCRIPTION: OpenAPI specification for getting details of a specific tool via its ID. The endpoint accepts a tool_id parameter and returns the tool details.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/tools/tools-get.mdx#2025-04-21_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /api/tools/{tool_id}\ntitle: \"Get Tool\"\ndescription: \"Gets details for the specified tool\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Project for Ultravox Incoming Calls\nDESCRIPTION: Creates a new directory for the project and initializes it with npm. This sets up the basic structure for the Ultravox incoming calls project.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/gettingstarted/quickstart-phone-incoming.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ultravox-incoming-calls\ncd ultravox-incoming-calls\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Definition for Listing Agents\nDESCRIPTION: This OpenAPI specification defines a GET endpoint at /api/agents that lists all agents. The endpoint is titled 'List Agents' and its purpose is to return details for all agents in the system.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/agents/agents-list.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api/agents\ntitle: \"List Agents\"\ndescription: \"Returns details for all agents\"\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Tool History in OpenAPI\nDESCRIPTION: OpenAPI specification for the GET endpoint that retrieves the history of all calls made to a specific tool. The endpoint path includes a tool_id parameter to identify which tool's history to retrieve.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/tools/tools-history-get.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api/tools/{tool_id}/history\ntitle: \"Get Tool History\"\ndescription: \"Gets all calls that have used the specified tool\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Package Manager\nDESCRIPTION: Commands to install the required Node.js dependencies using either pnpm or npm package managers.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/gettingstarted/quickstart-phone-outgoing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: File Upload Command for Corpus Source\nDESCRIPTION: Curl command for uploading a text file to the corpus storage using a pre-signed URL.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/rag.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nFILE_PATH=\"/path/to/your/file\"\nUPLOAD_URL=\"https://storage.googleapis.com/fixie-ultravox-prod/...\"\n\ncurl -X PUT \\\n  -H \"Content-Type: text/plain\" \\\n  --data-binary @\"$FILE_PATH\" \\\n  \"$UPLOAD_URL\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Listing Agent Calls\nDESCRIPTION: Specifies the OpenAPI endpoint configuration for retrieving all calls associated with a specific agent. The endpoint uses the GET method on the path '/api/agents/{agent_id}/calls' where {agent_id} is a path parameter identifying the agent.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/agents/agents-calls-list.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api/agents/{agent_id}/calls\ntitle: \"List Agent Calls\"\ndescription: \"Lists all calls that were created using the specified agent\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for Document Retrieval\nDESCRIPTION: OpenAPI specification for an endpoint that retrieves document details. The endpoint path includes parameters for corpus_id, source_id, and document_id to identify the specific document to retrieve.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/corpora/corpora-sources-documents-get.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api/corpora/{corpus_id}/sources/{source_id}/documents/{document_id}\ntitle: \"Get Corpus Source Document\"\ndescription: \"Retrieves details for the specified source document\"\n```\n\n----------------------------------------\n\nTITLE: Starting the Outgoing Call Application\nDESCRIPTION: Command to start the application and initiate the outgoing phone call after configuration is complete.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/gettingstarted/quickstart-phone-outgoing.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for GET /api/tools Endpoint\nDESCRIPTION: Defines the API endpoint for retrieving all available tools in the system. This endpoint is specified as a GET request to /api/tools with the title 'List Tools'.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/tools/tools-list.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api/tools\ntitle: \"List Tools\"\ndescription: \"Retrieves all available tools\"\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Definition for Retrieving Corpus Details\nDESCRIPTION: Defines an OpenAPI endpoint specification for retrieving details of a specific corpus by its ID. The endpoint uses the GET method and takes a corpus_id path parameter.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/corpora/corpora-get.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api/corpora/{corpus_id}\ntitle: \"Get Corpus\"\ndescription: \"Gets details for the specified corpus\"\n```\n\n----------------------------------------\n\nTITLE: Importing Types for Ultravox Client Tools\nDESCRIPTION: Import statement for the required types from the lib/types module, including DemoConfig, ParameterLocation, and SelectedTool for use with client tools configuration.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/tutorials/clienttools.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DemoConfig, ParameterLocation, SelectedTool } from \"@/lib/types\";\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install the required Node.js dependencies for the project using PNPM package manager.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/examples/twilio-outgoing-quickstart-js/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint for Call Usage Statistics\nDESCRIPTION: API endpoint definition to fetch call usage data. Returns both aggregate statistics and daily breakdown of call usage for the authenticated user's account.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/accounts/accounts-me-usage-calls-get.mdx#2025-04-21_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /api/accounts/me/usage/calls\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Definition for GET Corpus Source Endpoint\nDESCRIPTION: Defines the REST API endpoint for retrieving details about a specific source within a corpus using the corpus ID and source ID as path parameters.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/corpora/corpora-sources-get.mdx#2025-04-21_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /api/corpora/{corpus_id}/sources/{source_id}\ntitle: \"Get Corpus Source\"\ndescription: \"Retrieves details for the specified source\"\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with PNPM\nDESCRIPTION: A bash command to start the development server using PNPM for testing the implementation.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/tutorials/clienttools.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing Tools Possibilities Component in JSX\nDESCRIPTION: Import statement for the ToolsPossibilities component used to demonstrate tool functionality concepts in a React/MDX environment.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/gettingstarted/rule4.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ToolsPossibilities } from '/snippets/toolspossibilities.mdx'\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Account Retrieval\nDESCRIPTION: YAML definition for a REST API endpoint that returns account details for the authenticated user. The endpoint is accessible at /api/accounts/me using the GET method.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/accounts/accounts-me-get.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api/accounts/me\ntitle: \"Get Account\"\ndescription: \"Returns account details for a single account\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for GET Call Stages Endpoint in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /api/calls/{call_id}/stages endpoint. It specifies the operation to list all stages that occurred during a particular call.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/calls/calls-stages-list.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api/calls/{call_id}/stages\ntitle: \"List Call Stages\"\ndescription: \"Lists all stages that occurred during the specified call\"\n```\n\n----------------------------------------\n\nTITLE: Creating SDK Information Cards Component in React/JSX\nDESCRIPTION: A React functional component that displays information about the Ultravox SDK implementations available for different programming languages and platforms. The component includes installation commands, GitHub repository links, and appropriate icons for JavaScript, Flutter, Python, Kotlin (Android), and Swift (iOS).\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/snippets/sdkcards.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const SDKCards = ({}) => (\n  <div class=\"sdk-cards\">\n    There are currently five implementations of the SDK available:\n    <br />\n    <CardGroup>\n      <Card icon=\"js\" title=\"JavaScript\" horizontal>\n        <code>npm install ultravox-client</code>\n        <br />\n        <a href=\"https://github.com/fixie-ai/ultravox-client-sdk-js\" class=\"\">\n          <div className=\"flex justify-end\"><Icon icon=\"github\" size={24}  /></div>\n        </a>\n      </Card>\n      <Card icon=\"flutter\" title=\"Flutter\" horizontal>\n        <code>flutter add ultravox_client</code>\n        <br />\n        <a href=\"https://github.com/fixie-ai/ultravox-client-sdk-flutter\" class=\"\">\n          <div className=\"flex justify-end\"><Icon icon=\"github\" size={24}  /></div>\n        </a>\n      </Card>\n      <Card icon=\"python\" title=\"Python\" horizontal>\n        <code>pip install ultravox-client</code>\n        <br />\n        <a href=\"https://github.com/fixie-ai/ultravox-client-sdk-python\" class=\"\">\n          <div className=\"flex justify-end\"><Icon icon=\"github\" size={24}  /></div>\n        </a>\n      </Card>\n      <Card icon=\"android\" title=\"Kotlin (Android)\" horizontal>\n        <div className=\"flex flex-col\">\n          <code>Find it on Maven Central</code>\n          <br />\n          <a href=\"https://github.com/fixie-ai/ultravox-client-sdk-android\" class=\"\">\n            <div className=\"flex justify-end\"><Icon icon=\"github\" size={24}  /></div>\n          </a>\n        </div>\n      </Card>\n      <Card icon=\"swift\" title=\"Swift (iOS)\" horizontal>\n        <div className=\"flex flex-col\">\n          <code>Find it on Swift Package Index</code>\n          <br />\n          <a href=\"https://github.com/fixie-ai/ultravox-client-sdk-ios\" class=\"\">\n            <div className=\"flex justify-end\"><Icon icon=\"github\" size={24}  /></div>\n          </a>\n        </div>\n      </Card>\n    </CardGroup>\n  </div>\n\n\n\n  \n\n\n);\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for TTS API Key Retrieval\nDESCRIPTION: YAML configuration for an OpenAPI endpoint that retrieves TTS provider API keys for the active account. The endpoint returns only key prefixes for providers where a key has been added.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/accounts/accounts-me-tts-api-keys-retrieve.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api/accounts/me/tts_api_keys\ntitle: \"Get Account TTS API Keys\"\ndescription: \"Returns the TTS provider API keys associated with the active account\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Listing Calls\nDESCRIPTION: OpenAPI specification for a GET endpoint that retrieves a list of all calls. The endpoint is accessed via the /api/calls path and is titled 'List Calls'.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/calls/calls-list.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api/calls\ntitle: \"List Calls\"\ndescription: \"Returns details for all calls\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI GET Endpoint for Call Stage Message Audio Retrieval in YAML\nDESCRIPTION: This OpenAPI specification defines a GET endpoint for retrieving audio data from specific messages within call stages. The endpoint requires call_id, call_stage_id, and call_stage_message_index parameters to identify the exact audio resource to retrieve.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/calls/calls-stages-message-audio-get.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api/calls/{call_id}/stages/{call_stage_id}/messages/{call_stage_message_index}/audio\ntitle: \"Get Call Stage Message Audio\"\ndescription: \"Gets the audio for the specified message\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI PATCH Endpoint for Updating Corpus\nDESCRIPTION: Specifies the OpenAPI details for the PATCH /api/corpora/{corpus_id} endpoint. This endpoint is used to update an existing corpus, allowing partial modifications to its properties.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/corpora/corpora-patch.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /api/corpora/{corpus_id}\ntitle: \"Update Corpus\"\ndescription: \"Updates the specified corpus\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ultravox API Key in Node.js\nDESCRIPTION: JavaScript code snippet for setting the Ultravox API key which is required for authenticating with the Ultravox service when connecting calls.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/examples/twilio-incoming-quickstart-js/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ULTRAVOX_API_KEY = 'your_ultravox_api_key_here';\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for Get Call Endpoint\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /api/calls/{call_id} endpoint. It specifies the endpoint path, title, and description for retrieving call details.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/calls/calls-get.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api/calls/{call_id}\ntitle: \"Get Call\"\ndescription: \"Gets details for the specified call\"\n```\n\n----------------------------------------\n\nTITLE: OpenAPI DELETE Endpoint for Corpus Deletion\nDESCRIPTION: OpenAPI specification for the DELETE endpoint used to remove a corpus and its associated sources. The endpoint accepts a corpus_id parameter to identify which corpus to delete.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/corpora/corpora-delete.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /api/corpora/{corpus_id}\ntitle: \"Delete Corpus\"\ndescription: \"Deletes the specified corpus\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI POST Endpoint for Corpus Creation in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for a POST endpoint to create a new corpus. It specifies the path, title, and description of the operation.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/corpora/corpora-post.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /api/corpora\ntitle: \"Create Corpus\"\ndescription: \"Creates a new corpus using the specified name and description\"\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Definition for Delete Call Endpoint\nDESCRIPTION: OpenAPI specification for the DELETE /api/calls/{call_id} endpoint. This endpoint deletes a specified call and all its associated resources including messages, recordings, and stages.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/calls/calls-delete.mdx#2025-04-21_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: delete /api/calls/{call_id}\ntitle: \"Delete Call\"\ndescription: \"Deletes the specified call\"\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Definition for Get Voice Endpoint\nDESCRIPTION: An OpenAPI specification defining a GET endpoint to retrieve details for a specific voice. The endpoint requires a voice_id parameter in the path.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/voices/voices-get.mdx#2025-04-21_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /api/voices/{voice_id}\ntitle: \"Get Voice\"\ndescription: \"Gets details for the specified voice\"\n```\n\n----------------------------------------\n\nTITLE: Enabling and Listening for Debug Messages in UltravoxSession (JavaScript)\nDESCRIPTION: This code demonstrates how to create a new UltravoxSession with debug messages enabled and set up an event listener to capture these messages. Debug messages must be explicitly enabled through the experimentalMessages option.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/sdk-reference/introduction.mdx#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Start up our Ultravox Session with Debug Messages Enabled\nsession = new UltravoxSession({ experimentalMessages: [\"debug\"] });\n\n// Listen for debug messages\nsession.addEventListener('experimental_message', (msg) => {\n  console.log('Got a debug message: ', JSON.stringify(msg));\n});\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Definition for Agent Retrieval\nDESCRIPTION: Defines the OpenAPI specification for an endpoint that retrieves details of a specific agent using its unique identifier. The endpoint path includes a parameter for the agent ID.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/agents/agents-get.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api/agents/{agent_id}\ntitle: \"Get Agent\"\ndescription: \"Gets details for the specified agent\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Voice Clone Limit Component in Markdown\nDESCRIPTION: This code snippet inserts the imported VoiceCloneLimit component into the markdown document. The component will render information about voice cloning limitations.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/voices/voices-post.mdx#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<VoiceCloneLimit />\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint for Call Recording\nDESCRIPTION: OpenAPI specification defining the GET /api/calls/{call_id}/recording endpoint that returns a link to access a call recording.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/calls/calls-recording-get.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api/calls/{call_id}/recording\ntitle: \"Get Call Recording\"\ndescription: \"Returns a link to the recording of the call\"\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Update Endpoint in OpenAPI\nDESCRIPTION: OpenAPI specification for the PATCH endpoint that updates an agent. The endpoint takes an agent_id path parameter and allows partial updates to the specified agent.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/agents/agents-patch.mdx#2025-04-21_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: patch /api/agents/{agent_id}\ntitle: \"Update Agent\"\ndescription: \"Updates the specified agent\"\n```\n\n----------------------------------------\n\nTITLE: Importing Voice Clone Limit Component in Markdown\nDESCRIPTION: This code snippet imports a component named VoiceCloneLimit from a separate file. This component likely contains information about limitations on voice cloning.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/voices/voices-post.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nimport { VoiceCloneLimit } from '/snippets/voiceclonelimit.mdx'\n```\n\n----------------------------------------\n\nTITLE: Configuring Credentials and Environment Variables\nDESCRIPTION: Configuration block for setting up essential API credentials and phone numbers for both Ultravox and Twilio services. Includes placeholders for API keys, account details, and phone numbers.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/examples/twilio-outgoing-quickstart-js/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ULTRAVOX_API_KEY = 'your_ultravox_api_key_here';\nconst TWILIO_ACCOUNT_SID = 'your_twilio_account_sid_here';\nconst TWILIO_AUTH_TOKEN = 'your_twilio_auth_token_here';\nconst TWILIO_PHONE_NUMBER = 'your_twilio_phone_number_here';\nconst DESTINATION_PHONE_NUMBER = 'the_destination_phone_number_here';\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for List Corpora Endpoint\nDESCRIPTION: OpenAPI specification snippet that defines the 'List Corpora' endpoint. The endpoint is configured as a GET request to /api/corpora and returns details for all corpora in the system.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/corpora/corpora-list.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api/corpora\ntitle: \"List Corpora\"\ndescription: \"Returns details for all corpora\"\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Delete Voice Endpoint Definition\nDESCRIPTION: OpenAPI/Swagger specification for the DELETE endpoint that removes a voice resource identified by voice_id parameter.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/voices/voices-delete.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /api/voices/{voice_id}\ntitle: \"Delete Voice\"\ndescription: \"Deletes the specified voice\"\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE API Endpoint for Agent Deletion in OpenAPI\nDESCRIPTION: OpenAPI specification for the DELETE /api/agents/{agent_id} endpoint that allows deleting a specific agent identified by its ID.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/agents/agents-delete.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /api/agents/{agent_id}\ntitle: \"Delete Agent\"\ndescription: \"Deletes the specified agent\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for Listing Corpus Sources\nDESCRIPTION: This YAML snippet specifies the OpenAPI details for the GET endpoint to list corpus sources. It includes the endpoint path, title, and a brief description of the operation.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/corpora/corpora-sources-list.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api/corpora/{corpus_id}/sources\ntitle: \"List Corpus Sources\"\ndescription: \"Lists all sources that are part of the specified corpus\"\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Definition for Webhook Retrieval\nDESCRIPTION: Defines an OpenAPI endpoint specification for retrieving webhook configuration details. The endpoint uses a GET request to '/api/webhooks/{webhook_id}' to fetch information about a specific webhook identified by its ID.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/webhooks/webhooks-get.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api/webhooks/{webhook_id}\ntitle: \"Get Webhook\"\ndescription: \"Gets details for the specified webhook configuration\"\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Webhooks Endpoint Definition\nDESCRIPTION: OpenAPI specification defining the GET /api/webhooks endpoint that lists all configured webhooks for an account.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/webhooks/webhooks-list.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api/webhooks\ntitle: \"List Webhooks\"\ndescription: \"Retrieves all webhooks configured on an account\"\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Delete Corpus Source Endpoint\nDESCRIPTION: OpenAPI YAML definition for the DELETE endpoint that removes a specific source from a corpus. The endpoint requires corpus_id and source_id parameters to identify which source to delete.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/corpora/corpora-sources-delete.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /api/corpora/{corpus_id}/sources/{source_id}\ntitle: \"Delete Corpus Source\"\ndescription: \"Deletes the specified source\"\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for Deleting a Webhook\nDESCRIPTION: This OpenAPI snippet defines the DELETE endpoint for removing a webhook configuration. It specifies the path parameter webhook_id which identifies the webhook to be deleted.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/webhooks/webhooks-delete.mdx#2025-04-21_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: delete /api/webhooks/{webhook_id}\ntitle: \"Delete Webhook\"\ndescription: \"Deletes the specified webhook configuration\"\n```\n\n----------------------------------------\n\nTITLE: Defining PUT Webhook Replacement Endpoint in OpenAPI\nDESCRIPTION: OpenAPI specification for the PUT endpoint that handles complete webhook replacement. Used for replacing existing webhook configurations rather than partial updates.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/webhooks/webhooks-put.mdx#2025-04-21_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: put /api/webhooks/{webhook_id}\ntitle: \"Replace Webhook\"\ndescription: \"Replaces the specified webhook configuration\"\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint for Listing Corpus Source Documents in OpenAPI\nDESCRIPTION: Specifies the OpenAPI path, title, and description for an endpoint that retrieves all documents from a specific source within a corpus. The endpoint uses path parameters for corpus_id and source_id.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/corpora/corpora-sources-documents-list.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api/corpora/{corpus_id}/sources/{source_id}/documents\ntitle: \"List Corpus Source Documents\"\ndescription: \"Returns details for all documents contained in the source\"\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Configuration of environment variables in a .env file, containing API keys and other sensitive information needed for the application to work with various services.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/examples/twilio-incoming-advanced-js/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nCALCOM_API_KEY='your_cal_api_key_here'\nCALCOM_EVENT_TYPE_ID='the_cal_event_type_id'\nULTRAVOX_API_KEY='your_ultravox_api_key_here'\nMAKE_INCOMING_WH='your_make_incoming_webhook_url_here'\nFIXIE_CORPUS_ID='your_corpus_id_here'\nFIXIE_API_KEY='your_fixie_api_key_here'\nTWILIO_ACCOUNT_SID='your_twilio_account_sid__here'\nTWILIO_AUTH_TOKEN='your_twilio_auth_token_here'\nDESTINATION_PHONE_NUMBER='your_destination_phone_number_here'\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for Updating Corpus Source\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the PATCH endpoint to update a corpus source. It specifies the path, title, and description of the API operation.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/corpora/corpora-sources-patch.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /api/corpora/{corpus_id}/sources/{source_id}\ntitle: \"Update Corpus Source\"\ndescription: \"Updates the specified source\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for Corpus File Upload URL Creation\nDESCRIPTION: Specifies the OpenAPI definition for a POST endpoint to create a new URL and document ID for uploading a static file to a corpus. The endpoint path includes a corpus ID parameter.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/corpora/corpora-uploads-post.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /api/corpora/{corpus_id}/uploads\ntitle: \"Create Corpus File Upload\"\ndescription: \"Creates a new URL and document ID to use for uploading a static file\"\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL for Tools in Configuration\nDESCRIPTION: JavaScript code snippet for configuring the base URL used by the tools, typically set to an ngrok URL during development.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/examples/twilio-incoming-advanced-js/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst toolsBaseUrl = \"https://247e-88-16-973-488.ngrok-free.app\"; // TODO ngrok URL here\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for Voice Cloning Endpoint\nDESCRIPTION: This code snippet defines the OpenAPI specification for the POST /api/voices endpoint. It specifies the title, description, and playground settings for the API documentation.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/voices/voices-post.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /api/voices\ntitle: \"Create (Clone) Voice\"\ndescription: \"Create a new cloned voice\"\nplayground: \"none\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for Listing Models in YAML\nDESCRIPTION: This YAML snippet defines an OpenAPI specification for a GET endpoint that retrieves a list of available models. It includes the route, title, and description of the endpoint.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/other/models-get.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /api/models\ntitle: \"List Models\"\ndescription: \"Retrieves the list of all available models that can be used for inference\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm\nDESCRIPTION: Command to install the project dependencies using pnpm package manager.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/examples/twilio-incoming-advanced-js/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Ultravox Incoming Calls Project\nDESCRIPTION: Installs the required npm packages (express and twilio) for handling incoming calls and interacting with the Twilio API.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/gettingstarted/quickstart-phone-incoming.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install express twilio\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Schema Endpoint Definition\nDESCRIPTION: Endpoint specification for retrieving the OpenAPI schema with support for YAML and JSON response formats through content negotiation using different Accept headers.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/other/schema-get.mdx#2025-04-21_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /api/schema/\ntitle: \"Get OpenAPI Schema\"\ndescription: \"Gets the OpenAPI schema for the Ultravox REST API\"\n```\n\n----------------------------------------\n\nTITLE: Starting Node.js Server for Twilio Integration\nDESCRIPTION: Command to start the Node.js server that will handle incoming Twilio calls and connect them to the Ultravox AI agent.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/examples/twilio-incoming-quickstart-js/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Starting the Ultravox Incoming Calls Server\nDESCRIPTION: Starts the Node.js server that handles incoming Twilio calls and connects them to the Ultravox AI agent.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/gettingstarted/quickstart-phone-incoming.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode server.js\n```\n\n----------------------------------------\n\nTITLE: Delete Tool OpenAPI Specification\nDESCRIPTION: OpenAPI/Swagger specification for an endpoint that deletes a specific tool identified by tool_id.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/tools/tools-delete.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: delete /api/tools/{tool_id}\ntitle: \"Delete Tool\"\ndescription: \"Deletes the specified tool\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Step-by-Step Instructions\nDESCRIPTION: Pattern for delivering step-by-step instructions in customer support scenarios with interactive confirmation.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/gettingstarted/prompting.mdx#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nExample: User asks for help changing their password\n- You will call the \"searchArticle\" tool\n- Response from tool: {\"content\": \"1. Click \"Forgot Password\" on the login screen 2. Enter your email address and click \"Submit\" 3. Check your email for the reset link 4. Click the link and enter your new password 5. Log in with your new password\"}\n- You will then use this information and proceed step-by-step with the user like this:\n  * agent: \"There are a few steps we need to go through.\"\n  * agent: \"The first step is Click on Forgot Password on the login screen. Let me know when you're there.\"\n  * user: \"OK done.\"\n  * agent: \"Great. next you need to enter your email address and click Submit.\"\n  * user: \"got it.\"\n  * agent: \"Now check your email for the reset link\"\n  * user: \"uh huh.\"\n- Repeat in this manner until you complete the entire process.\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm for Ultravox Twilio Integration\nDESCRIPTION: Command to install the necessary Node.js dependencies for the Ultravox Twilio integration using pnpm package manager.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/examples/twilio-incoming-quickstart-js/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI PATCH Endpoint for TTS API Keys\nDESCRIPTION: YAML definition of an OpenAPI endpoint for setting TTS API keys. This endpoint allows users to add or update TTS provider API keys to their account, enabling the use of External Voices beyond the service's default offerings.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/accounts/accounts-me-tts-api-keys-partial-update.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /api/accounts/me/tts_api_keys\ntitle: \"Set TTS API keys\"\ndescription: \"Allows adding or updating TTS provider API keys to an account, enabling ExternalVoices\"\n```\n\n----------------------------------------\n\nTITLE: Creating Natural Speech Pauses\nDESCRIPTION: Technique for adding natural pauses in voice output using ellipsis.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/gettingstarted/prompting.mdx#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nYou want to speak slowly and clearly, so you must inject pauses between sentences. \nDo this by emitting \"...\" at the end of a sentence but before any final \npunctuation (e.g., \"Wow, that's really interesting… can you tell me a bit more \nabout that…?\". You should do this more when the topic is complex or requires \nspecial attention.\n```\n\n----------------------------------------\n\nTITLE: Sample Server Console Output for Incoming Calls\nDESCRIPTION: Expected console output when the server successfully receives and processes an incoming Twilio call, showing server initialization and call detection.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/examples/twilio-incoming-quickstart-js/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nServer running on port 3000\nIncoming call received\n```\n\n----------------------------------------\n\nTITLE: Exposing Local Server with ngrok for Twilio Webhooks\nDESCRIPTION: Command to create a public URL for your local server using ngrok, allowing Twilio to send webhooks to your application.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/examples/twilio-incoming-quickstart-js/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 3000\n```\n\n----------------------------------------\n\nTITLE: Implementing Jailbreak Prevention\nDESCRIPTION: Simple pattern for preventing model jailbreaking attempts through clear scope definition.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/gettingstarted/prompting.mdx#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nYour only job is to [primary job of your agent]. If someone asks you a question \nthat is not related to [the thing you're asking the model to do], politely \ndecline and redirect the conversation back to the task at hand.\n```\n\n----------------------------------------\n\nTITLE: Starting the Application\nDESCRIPTION: Command to launch the application using PNPM as the package manager.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/examples/twilio-outgoing-quickstart-js/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Defining Static Parameters for a Tool in JavaScript\nDESCRIPTION: This code demonstrates how to add a static parameter to a tool. It creates a parameter named 'utm' with a fixed value 'ultravox' that will always be sent as a query parameter with every tool invocation.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/essentials/tools.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Adding a static parameter that always sends utm=ultravox\n{\n  \"name\": \"stock_price\",\n  \"description\": \"Get the current stock price for a given symbol\",\n  \"staticParameters\": [\n    {\n      \"name\": \"utm\",\n      \"location\": \"PARAMETER_LOCATION_QUERY\",\n      \"value\": \"ultravox\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Call Setup Flow with Mermaid Sequence Diagram\nDESCRIPTION: Illustrates the sequence of interactions between a server, Ultravox Realtime API, and client application. Shows the process of creating a new call, obtaining a join URL, and establishing the connection.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/snippets/diagram.mdx#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant Server as Your Server\n  participant UVRESTAPI as Ultravox Realtime\n  participant App as Your Application\n\n  autonumber\n  Note left of UVRESTAPI: POST /calls\n  Server ->> UVRESTAPI: Create New Call\n  UVRESTAPI ->> Server: Returns \"joinUrl\"\n  Server ->> App: Handoff \"joinUrl\"\n  App ->> UVRESTAPI: Join the Call\n  UVRESTAPI ->> App: Call Connected\n```\n\n----------------------------------------\n\nTITLE: Example Console Output\nDESCRIPTION: Sample console output showing the expected logging when the application successfully initiates a call.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/examples/twilio-outgoing-quickstart-js/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nCreating Ultravox call...\nGot joinUrl: https://...\nCall initiated: CA1234...\n```\n\n----------------------------------------\n\nTITLE: Leaving a Call with UltravoxSession\nDESCRIPTION: The leaveCall method disconnects from the current call. It returns a Promise that resolves when the call has successfully been left.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/sdk-reference/introduction.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync leaveCall(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Rendering Voice Clone Limit Message in React/JSX\nDESCRIPTION: A React functional component that displays a note about the one voice clone per account limit and includes a mailto link for requesting additional voices. The component uses JSX syntax and accepts empty props.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/snippets/voiceclonelimit.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const VoiceCloneLimit = ({}) => (\n  <Note>\n    Currently, we support one cloned voice per account. If you need more cloned voices, please <a href=\"mailto:hello@fixie.ai?subject=Additional%20Voices\">reach out</a>.\n  </Note>\n);\n```\n\n----------------------------------------\n\nTITLE: Starting the Server with pnpm\nDESCRIPTION: Command to start the Node.js server using pnpm.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/examples/twilio-incoming-advanced-js/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Tool Call Debug Message Example (Bash)\nDESCRIPTION: This debug message example shows the format when an agent invokes a tool. It includes the function name, arguments, and an invocation ID that can be used to correlate the call with its result.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/sdk-reference/introduction.mdx#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nLLM response: Tool calls: [FunctionCall(name='createProfile', args='{\"firstName\":\"Ron\",\"lastName\":\"Burgandy\",\"organization\":\"Fixie.ai\",\"useCase\":\"creating a talking AI news reporter\"}', invocation_id='call_D2qQVS8OQc998aMEw5PRa9cF')]\n```\n\n----------------------------------------\n\nTITLE: Markdown Feature Updates Documentation\nDESCRIPTION: Markdown content detailing new platform features including WebSocket integration, telephony providers, SDK improvements and documentation updates.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/changelog/news.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* **WebSockets:** You can now integrate on the server side via [WebSockets](/guides/connectionoptions/#websocket-integration).\n* **Telnyx & Plivo:** New telephony integrations for Telnyx and Plivo are now available in addition to our existing support for Twilio. Check the [docs](/guides/connectionoptions/#phone-integration).\n```\n\n----------------------------------------\n\nTITLE: Exposing Local Server with ngrok\nDESCRIPTION: Command to create a public URL for the local server using ngrok, making it accessible for Twilio webhooks.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/examples/twilio-incoming-advanced-js/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 3000\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI for Documentation Preview\nDESCRIPTION: Command to install the Mintlify CLI globally using npm for local documentation preview.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes Documentation\nDESCRIPTION: Structured markdown content documenting platform updates, new features and improvements for the Ultravox voice AI platform. Includes information about model upgrades, new dashboard features, WebSocket integration, language support and other key developments.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/changelog/news.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Card title=\"Be in the Know\" icon=\"head-side-brain\">\n  All Ultravox customers automatically receive email updates. Create a [free account](https://app.ultravox.ai) to start building with the the best voice AI and to stay in the loop.\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates and Times for Voice\nDESCRIPTION: Guidelines for converting dates and times into voice-friendly formats.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/gettingstarted/prompting.mdx#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nWhen you're outputting dates, output them as individual components. For example, \nthe date 12/25/2022 should be read as \"December 25th 2022\". For times, \n\"10:00 AM\" should be outputted as \"10 AM\".\n```\n\n----------------------------------------\n\nTITLE: Running Mintlify Documentation Preview Server\nDESCRIPTION: Command to start the Mintlify development server at the root of the documentation folder where mint.json is located.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Joining an Ultravox Call via WebSockets in Python\nDESCRIPTION: This Python code demonstrates how to join a WebSocket-based Ultravox call and handle both audio data and messages. It shows the connection setup, audio transmission, and provides a structure for handling incoming audio and data messages.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/guides/websockets.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport websockets\n\nsocket = await websockets.connect(join_url)\naudio_send_task = asyncio.create_task(_send_audio(socket))\nasync for message in socket:\n    if isinstance(message, bytes):\n        # Handle agent audio data\n    else:\n        # Handle data message. See \"Data Messages\"\n\n...\n\nasync def _send_audio(socket: websockets.WebSocketClientProtocol):\n    async for chunk in some_audio_source:\n        # chunk should be a bytes object containing s16le PCM audio from the user\n        self._socket.send(chunk)\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Endpoint for Corpus Querying\nDESCRIPTION: OpenAPI specification for the POST endpoint that allows querying a corpus by ID and retrieving a specified number of results. This endpoint is intended for testing purposes rather than for direct use in deployed agents.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/corpora/corpus-query.mdx#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /api/corpora/{corpus_id}/query\ntitle: \"Query Corpus\"\ndescription: \"Queries the specified corpus and returns the specified number of results\"\n```\n\n----------------------------------------\n\nTITLE: OpenAPI GET Endpoint Definition for Call Stage Tools\nDESCRIPTION: API endpoint definition for retrieving tools available during a specific call stage. Uses path parameters call_id and call_stage_id to identify the exact stage.\nSOURCE: https://github.com/fixie-ai/ultradox/blob/main/api-reference/calls/calls-stages-tools-list.mdx#2025-04-21_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /api/calls/{call_id}/stages/{call_stage_id}/tools\n```"
  }
]