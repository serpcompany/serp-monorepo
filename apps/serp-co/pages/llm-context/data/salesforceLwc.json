[
  {
    "owner": "salesforce",
    "repo": "lwc",
    "content": "TITLE: Creating LWC Component by Extending LightningElement\nDESCRIPTION: This example demonstrates the basic structure for creating a Lightning Web Component.  It imports the LightningElement class from the 'lwc' module and extends it to create a new class 'LightningHello'. The component's custom logic and template would be added within this class.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/engine-core/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LightningElement } from 'lwc';\n\nclass LightningHello extends LightningElement {\n    // component implementation\n}\n```\n\n----------------------------------------\n\nTITLE: LWC HTML Template Example\nDESCRIPTION: This HTML template defines the structure of a counter component. It displays the current count and provides a button to increment the counter. The `count` variable is dynamically rendered, and the `increaseCounter` function is called when the button is clicked.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/lwc/README.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<template>\n    <p>Counter: {count}</p>\n    <button onclick=\"{increaseCounter}\">Add</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Public Property with @api Decorator in LWC\nDESCRIPTION: This code snippet demonstrates how to define a public property named 'hello' in a Lightning Web Component (LWC) using the @api decorator. Public properties are part of the component's API and can be set by parent components or external systems. The property 'hello' is initialized with a default value of 'default hello'.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/engine-core/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LightningElement, api } from 'lwc';\n\nclass LightningHello extends LightningElement {\n    @api\n    hello = 'default hello';\n}\n```\n\n----------------------------------------\n\nTITLE: LWC JavaScript Logic Example\nDESCRIPTION: This JavaScript defines the logic for a counter component. It imports the `LightningElement` base class from the `lwc` module. It initializes the `count` property to 0 and provides an `increaseCounter` function to increment the count.  This function is bound to the button click in the HTML template.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/lwc/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// counter.js\nimport { LightningElement } from 'lwc';\n\nexport default class Counter extends LightningElement {\n    count = 0;\n\n    increaseCounter() {\n        this.count += 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Wiring a Component to a Wire Adapter in LWC\nDESCRIPTION: This code snippet demonstrates how to use the `@wire` decorator to connect a Lightning Web Component to a wire adapter named `getBook`. It illustrates the declarative approach for defining data dependencies within a component. The `bookId` property is reactive, indicated by the `$` symbol, causing the wire adapter to update when the `bookId` changes.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/wire-service/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// bookItem.js\nimport { LightningElement } from 'lwc';\n\nexport default class WireExample extends {\n    @api bookId;\n\n    @wire(getBook, { id: '$bookId'})    book;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Signal in LWC Component (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use a signal within an LWC component to manage a reactive count. The `count` property is initialized as a signal with an initial value of 0. The `increment` method updates the signal's value, triggering reactivity.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/signals/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { signal } from 'some/signals';\n\nexport default class ExampleComponent extends LightningElement {\n    count = signal(0);\n\n    increment() {\n        this.count.value++;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Signal Value in LWC Template (HTML)\nDESCRIPTION: This snippet shows how to bind to a signal's `.value` property directly in an LWC template. When the signal's value changes, the template will automatically re-render to reflect the new value.  The button calls the `increment` method in the JS controller.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/signals/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n    <button onclick=\"{increment}\">Increment</button>\n    <p>{count.value}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Create LWC Component\nDESCRIPTION: Creates an LWC component instance and appends it to the document body. It uses the createElement function from 'lwc' and the LightningHello component constructor. This snippet demonstrates the standard way to instantiate and render an LWC component.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/engine-dom/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createElement } from 'lwc';\nimport LightningHello from 'lightning/hello';\n\nconst element = createElement('lightning-hello', { is: LightningHello });\n\ndocument.body.appendChild(element);\n```\n\n----------------------------------------\n\nTITLE: Rendering LWC Component to String with renderComponent() - JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the `renderComponent` function from the `@lwc/engine-server` package to render an LWC component to a string.  It imports the `renderComponent` function and an LWC component constructor, then calls `renderComponent` with the tag name, constructor, and component properties to produce a serialized string representation of the component. The output format is aligned with the declarative shadow DOM proposal.  Note that this is an experimental API and subject to change.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/engine-server/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderComponent } from '@lwc/engine-server';\nimport LightningHello from 'lightning/hello';\n\nconst componentProps = {};\nconst serialized = renderComponent('lightning-hello', LightningHello, componentProps);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Wire Adapter in LWC\nDESCRIPTION: This code snippet shows the implementation of a wire adapter, `getBook`, that fetches book data from a server endpoint. It includes methods for connecting, disconnecting, and updating the adapter based on configuration changes. The `provideBookWithId` method retrieves data from the `bookEndpoint` and calls the `dataCallback` to provide data to the component.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/wire-service/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// wire-adapter.js\nimport { bookEndpoint } from './server';\n\nexport class getBook {\n    connected = false;\n    bookId;\n\n    constructor(dataCallback) {\n        this.dataCallback = dataCallback;\n    }\n\n    connect() {\n        this.connected = true;\n        this.provideBookWithId(this.bookId);\n    }\n\n    disconnect() {\n        this.connected = false;\n    }\n\n    update(config) {\n        if (this.bookId !== config.id) {\n            this.bookId = config.id;\n            this.provideBookWithId(this.bookId);\n        }\n    }\n\n    provideBookWithId(id) {\n        if (this.connected && this.bookId !== undefined) {\n            const book = bookEndpoint.getById(id);\n\n            if (book) {\n                this.dataCallback(Object.assign({}, book));\n            } else {\n                this.dataCallback(null);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing LWC Engine Server\nDESCRIPTION: This code snippet demonstrates how to import `renderComponent` from the `@lwc/engine-server` module using the convenience `lwc` package. This allows server-side rendering of LWC components.  The `lwc` package re-exports modules from `@lwc/*` packages.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/lwc/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderComponent } from 'lwc/engine-server';\n```\n\n----------------------------------------\n\nTITLE: LWC Module Resolution Configuration - JSON\nDESCRIPTION: This JSON configuration demonstrates how to configure module resolution using `lwc.config.json`. It defines an array of modules, including an alias module record, a directory module record, and an NPM package module record.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/module-resolver/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"modules\": [\n        {\n            \"name\": \"ui/button\",\n            \"path\": \"src/modules/ui/button/button.js\"\n        },\n        {\n            \"dir\": \"src/modules\"\n        },\n        {\n            \"npm\": \"@ui/components\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Object Mutations with @track Decorator in LWC\nDESCRIPTION: This code demonstrates using the @track decorator on a private field 'name' in an LWC to track object mutations. The getter and setter methods for the 'name' property handle normalization of the input value. This ensures that changes to the 'raw' or 'normalized' properties of the 'name' object trigger reactivity in the component.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/engine-core/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LightningElement, api, track } from 'lwc';\n\nclass LightningHello extends LightningElement {\n    @api\n    get name() {\n        return name.raw;\n    }\n    set name(value) {\n        name.normalized = normalize(value);\n    }\n\n    @track\n    name = {\n        raw: 'Web components ',\n        normalized: 'Web Components',\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling LWC Template (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to import the compile function from @lwc/template-compiler, compile an HTML template, and log any warnings or the compiled code.  It uses a basic template with a heading.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/template-compiler/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { compile } from '@lwc/template-compiler';\n\nconst filename = 'component.html';\nconst options = {};\nconst { code, warnings } = compile(\n    `\n    <template>\n        <h1>Hello World!</h1>\n    </template>\n`,\n    filename,\n    options\n);\n\nfor (let warning of warnings) {\n    console.log(warning.message);\n}\n\nconsole.log(code);\n```\n\n----------------------------------------\n\nTITLE: Exposing LWC Modules via NPM Package - JSON\nDESCRIPTION: This JSON configuration shows how to expose LWC modules within an NPM package. The `expose` key lists the modules (`ui/button` and `ui/icon`) that are publicly available outside the package.  The directory module record indicates where modules are stored within the package.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/module-resolver/README.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"modules\": [\n        {\n            \"dir\": \"src/modules\"\n        }\n    ],\n    \"expose\": [\"ui/button\", \"ui/icon\"]\n}\n```\n\n----------------------------------------\n\nTITLE: ARIA Attribute and Property Reflection Example in JavaScript\nDESCRIPTION: This example demonstrates how the aria-pressed attribute is reflected to the ariaPressed property, and vice versa.  The polyfill ensures that setting the attribute updates the property, and setting the property updates the attribute. This is crucial for accessibility as it allows JavaScript code to interact with ARIA attributes using familiar property syntax.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/aria-reflection/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nelement.setAttribute('aria-pressed', 'true');\nconsole.log(element.ariaPressed); // true\nelement.ariaPressed = false;\nconsole.log(element.getAttribute('aria-pressed')); // false\n```\n\n----------------------------------------\n\nTITLE: SignalBaseClass Implementation (TypeScript)\nDESCRIPTION: This snippet provides a base class for implementing the `Signal` interface.  It manages subscribers using a `Set` and provides a `notify` method to trigger update callbacks when the signal's value changes. The `subscribe` method adds callbacks and returns an unsubscribe function.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/signals/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport abstract class SignalBaseClass<T> implements Signal<T> {\n    abstract get value(): T;\n\n    private subscribers: Set<OnUpdate> = new Set();\n\n    subscribe(onUpdate: OnUpdate) {\n        this.subscribers.add(onUpdate);\n        return () => {\n            this.subscribers.delete(onUpdate);\n        };\n    }\n\n    protected notify() {\n        for (const subscriber of this.subscribers) {\n            subscriber();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Alias Module Record Configuration - JSON\nDESCRIPTION: This JSON configuration represents an alias module record, which maps a module specifier to a specific file path. This allows you to resolve the `ui/button` module to the `src/modules/ui/button/button.js` file.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/module-resolver/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"modules\": [\n        {\n            \"name\": \"ui/button\",\n            \"path\": \"src/modules/ui/button/button.js\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing @lwc/types in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the @lwc/types package in a TypeScript file. This import enables the ability to import HTML templates and CSS stylesheets directly into LWC component files. It should be placed in a global declaration file (e.g., `global.d.ts`).\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/types/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport '@lwc/types';\n```\n\n----------------------------------------\n\nTITLE: Basic LWC Template Compilation (JavaScript)\nDESCRIPTION: This code snippet showcases a simple usage of the compile function to compile an HTML template string. It focuses on the basic compilation process and retrieval of the compiled code and any generated warnings.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/template-compiler/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { compile } from '@lwc/template-compiler';\nconst { code, warnings } = compile(`<template><h1>Hello World!</h1></template>`, {});\n```\n\n----------------------------------------\n\nTITLE: Importing Stylesheet and Template in LWC\nDESCRIPTION: This snippet demonstrates how to import a CSS stylesheet and an HTML template into an LWC component's TypeScript file. This assumes that the `@lwc/types` package has been imported elsewhere in the project to provide the necessary type definitions. The stylesheet and template are imported as modules.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/types/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport stylesheet from './my-component.css';\nimport template from './my-component.html';\n```\n\n----------------------------------------\n\nTITLE: Directory Module Record Configuration - JSON\nDESCRIPTION: This JSON configuration shows a directory module record, which specifies a directory path where LWC modules are located. This tells the resolver to look for modules within the `src/modules` directory, following the LWC module resolution rules.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/module-resolver/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"modules\": [\n        {\n            \"dir\": \"src/modules\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using @lwc/rollup-plugin in rollup.config.js\nDESCRIPTION: This JavaScript snippet demonstrates how to integrate the @lwc/rollup-plugin into a Rollup configuration file. The plugin is imported and included in the `plugins` array, enabling LWC compilation during the Rollup build process. The input specifies the main JavaScript file.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/rollup-plugin/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// rollup.config.js\nimport lwc from '@lwc/rollup-plugin';\n\nexport default {\n    input: './src/main.js',\n    plugins: [lwc()],\n};\n```\n\n----------------------------------------\n\nTITLE: LWC CSS Styling Example\nDESCRIPTION: This CSS styles the paragraph element within the component.  It sets the font family to serif and the font size to large. This affects how the counter value is displayed in the user interface.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/lwc/README.md#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n/* counter.css */\np {\n    font-family: serif;\n    font-size: large;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors During Module Resolution - JavaScript\nDESCRIPTION: This snippet shows how to handle errors that may occur during module resolution, specifically `LWC_CONFIG_ERROR` and `NO_LWC_MODULE_FOUND`. It attempts to resolve a module specifier and catches potential errors, logging specific messages based on the error code.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/module-resolver/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { resolveModule } from '@lwc/module-resolver';\n\nlet result;\ntry {\n    result = resolveModule('x/foo', './index.js');\n} catch (err) {\n    if (err.code === 'LWC_CONFIG_ERROR') {\n        console.error(`The request module can't be resolved due to an invalid configuration`, err);\n    } else if (err.code === 'NO_LWC_MODULE_FOUND') {\n        console.error(`The requested module doesn't exists. `, err);\n    } else {\n        throw err;\n    }\n}\n\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Type Assertion with 'satisfies' Operator (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the 'satisfies' operator in TypeScript to validate that a type meets a specific expectation. It ensures that the 'renderMode' property of 'MyComponent' is correctly set to either 'light' or 'shadow'.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/integration-types/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nMyComponent.renderMode satisfies 'light' | 'shadow'\n```\n\n----------------------------------------\n\nTITLE: Transforming LWC Component Synchronously with transformSync\nDESCRIPTION: Transforms a Lightning Web Component source code using the `transformSync` API. This allows for single-file LWC module processing. The example shows the basic usage with required parameters and demonstrates the retrieval of the compiled code.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/compiler/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { transformSync } from '@lwc/compiler';\n\nconst source = `\n    import { LightningElement } from 'lwc';\n    export default class App extends LightningElement {}\n`;\n\nconst filename = 'app.js';\n\nconst options = {\n    namespace: 'c',\n    name: 'app',\n};\n\nconst { code } = transformSync(source, filename, options);\n```\n\n----------------------------------------\n\nTITLE: Using @lwc/babel-plugin-component with Babel\nDESCRIPTION: This code snippet demonstrates how to use the @lwc/babel-plugin-component Babel plugin to transform LWC component code. It imports the necessary modules, defines a simple LWC component, and then uses babel.transformSync to apply the plugin. The transformed code is then available in the code variable.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/babel-plugin-component/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst babel = require('@babel/core');\nconst lwcPlugin = require('@lwc/babel-plugin-component');\n\nconst source = `\nimport { LightningElement } from 'lwc';\nexport default class extends LightningElement {}`;\n\nconst { code } = babel.transformSync(source, {\n    plugins: [\n        [\n            lwcPlugin,\n            {\n                /* options */\n            },\n        ],\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @lwc/style-compiler\nDESCRIPTION: This command installs the @lwc/style-compiler as a development dependency using yarn.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/style-compiler/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev @lwc/style-compiler\n```\n\n----------------------------------------\n\nTITLE: Installing @lwc/module-resolver with NPM\nDESCRIPTION: This command installs the @lwc/module-resolver package as a development dependency using npm. This allows you to use the module resolver in your LWC projects.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/module-resolver/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @lwc/module-resolver\n```\n\n----------------------------------------\n\nTITLE: Checking LWC Runtime Feature Flag - JavaScript\nDESCRIPTION: This snippet demonstrates how LWC internally references runtime flags to conditionally execute code.  The presence of `lwcRuntimeFlags` is assumed, and the specific feature flag is checked for a truthy value. The code within the `if` block will only execute if the `ENABLE_SOME_FEATURE` flag is set to `true`.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/features/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (lwcRuntimeFlags.ENABLE_SOME_FEATURE) {\n    // etc.\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Module Specifier Using resolveModule - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `resolveModule` function to resolve a module specifier. It imports the function from the `@lwc/module-resolver` package and calls it with a specifier and importer to find the module's entry point. The result contains the module's path, specifier, and scope.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/module-resolver/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { resolveModule } from '@lwc/module-resolver';\n\nconst result = resolveModule('x/foo', './index.js');\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Setting Sauce Labs Credentials in .env File\nDESCRIPTION: This sets Sauce Labs credentials by defining them in a `.env` file located in the root directory of the project. The `.env` file is automatically read by tools like `dotenv` to populate environment variables.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/integration-tests/README.md#_snippet_9\n\nLANGUAGE: env\nCODE:\n```\nSAUCE_USERNAME=my-user\nSAUCE_KEY=123-456-789\n```\n\n----------------------------------------\n\nTITLE: ReactiveObserver Instance Creation and Observation - JavaScript\nDESCRIPTION: Illustrates how to create a `ReactiveObserver` instance and use the `observe` method to track property access. The callback in the constructor is called when a tracked property is mutated. `valueObserved` is invoked within the `observe` callback to record the observed property.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/engine-core/src/libs/mutation-tracker/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ReactiveObserver } from '../libs/mutation-tracker';\nconst ro = new ReactiveObserver(() => {\n    // this callback will be called when tracked property `x` of `o`\n    // is mutated via `valueMutated` in the future.\n});\nro.observe(() => {\n    // every time observe() is invoked, the callback will be immediately\n    // called, and any observed value will be recorded and linked to this\n    // ReactiveObserver instance, in case a mutation happens in the future.\n    valueObserved(o, 'x');\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning the LWC Repository\nDESCRIPTION: This command clones the LWC repository from GitHub to the local machine, allowing developers to access and modify the codebase. It uses the Git protocol over SSH. Requires Git to be installed.\nSOURCE: https://github.com/salesforce/lwc/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:salesforce/lwc.git\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch\nDESCRIPTION: These commands create a new feature branch based on the master branch. This is used for isolating changes during development. Replace `<name-of-the-feature>` with a descriptive name for your feature branch.\nSOURCE: https://github.com/salesforce/lwc/blob/master/CONTRIBUTING.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\ngit pull origin master\ngit checkout -b <name-of-the-feature>\n```\n\n----------------------------------------\n\nTITLE: Running LWC Unit Tests\nDESCRIPTION: This command executes the unit tests for the LWC project. It uses Vitest, a testing framework, to verify the functionality of individual components and modules. It requires the LWC project to be built and the test dependencies to be installed.\nSOURCE: https://github.com/salesforce/lwc/blob/master/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: LWC Playground: Development Server Command\nDESCRIPTION: This command starts the development server for the LWC playground. It is used for local development and testing during the development process, enabling hot reloading and debugging features.\nSOURCE: https://github.com/salesforce/lwc/blob/master/playground/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Negative Type Assertion with @ts-expect-error (TypeScript)\nDESCRIPTION: This snippet shows how to make a negative assertion in TypeScript using the `@ts-expect-error` comment. It's used to verify that invalid code produces an error and ensures that TypeScript raises an error if no error is detected.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/integration-types/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @ts-expect-error [description]\n```\n\n----------------------------------------\n\nTITLE: Running LWC Unit Tests in Watch Mode\nDESCRIPTION: This command runs the LWC unit tests in watch mode. Vitest will automatically re-run the tests whenever a source file changes, providing continuous feedback during development. Requires Vitest to be configured in the project.\nSOURCE: https://github.com/salesforce/lwc/blob/master/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn test --watch\n```\n\n----------------------------------------\n\nTITLE: Rebasing a Feature Branch\nDESCRIPTION: These commands rebase a feature branch on top of the master branch. This ensures that the feature branch is up-to-date with the latest changes from the main repository. Replace `<name-of-the-feature>` with the name of your feature branch.\nSOURCE: https://github.com/salesforce/lwc/blob/master/CONTRIBUTING.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\ngit pull upstream master\ngit checkout <name-of-the-feature>\ngit rebase upstream/master\n```\n\n----------------------------------------\n\nTITLE: Building Performance Benchmarks\nDESCRIPTION: This command builds the performance benchmarks. It compiles the necessary files and prepares them for execution.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/perf-benchmarks/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn build:performance\n```\n\n----------------------------------------\n\nTITLE: Running Local Integration Tests - Yarn\nDESCRIPTION: This command executes integration tests locally in a headless Chrome browser. This allows for quick verification of code changes without manual browser interaction.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/integration-tests/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn local\n```\n\n----------------------------------------\n\nTITLE: LWC Playground: Production Build Command\nDESCRIPTION: This command builds the LWC application in production mode. It optimizes the code for deployment, including minification and bundling of static assets. It should be executed before deploying the application to a production environment.\nSOURCE: https://github.com/salesforce/lwc/blob/master/playground/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Running Performance Benchmarks\nDESCRIPTION: This command executes the performance benchmarks after they have been built.  It runs the tests and generates result files.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/perf-benchmarks/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn test:performance\n```\n\n----------------------------------------\n\nTITLE: Running LWC in Dev/Watch Mode\nDESCRIPTION: This command starts the LWC project in development mode, enabling automatic rebuilding and refreshing upon code changes. It uses Yarn to run a script that likely uses tools like webpack or rollup with watch options enabled. This provides a live-reload development environment.\nSOURCE: https://github.com/salesforce/lwc/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Executing a Specific LWC Test\nDESCRIPTION: This command runs a specific LWC test by specifying the path to the test file. Vitest will execute only the test suite defined in that particular file, allowing developers to focus on specific areas of the codebase. The specified path must be valid.\nSOURCE: https://github.com/salesforce/lwc/blob/master/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn test <path_to_test>\n```\n\n----------------------------------------\n\nTITLE: Running Best Benchmarks Locally\nDESCRIPTION: This command runs the Best.js benchmarks locally, allowing for local testing and debugging.  Best.js provides an alternative benchmark runner.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/perf-benchmarks/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nyarn test:performance:best\n```\n\n----------------------------------------\n\nTITLE: Enabling LWC Runtime Feature Flag - JavaScript\nDESCRIPTION: This snippet shows how to enable a specific LWC runtime feature by setting a boolean value in the `globalThis.lwcRuntimeFlags` object. The flag should be set before the LWC engine is initialized. If the flag is not explicitly set, the feature is disabled by default.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/features/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlwcRuntimeFlags.ENABLE_SOME_FEATURE = true;\n```\n\n----------------------------------------\n\nTITLE: Running LWC Karma Tests in Watch Mode\nDESCRIPTION: This command starts the Karma integration tests in watch mode, re-running the tests automatically whenever a file changes. This provides continuous feedback during development of browser-specific functionality. Requires Karma to be properly configured with watch functionality.\nSOURCE: https://github.com/salesforce/lwc/blob/master/CONTRIBUTING.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nyarn test:karma:start\n```\n\n----------------------------------------\n\nTITLE: LWC Playground: Serving Production Build Command\nDESCRIPTION: This command serves the built application from the 'build' directory. It relies on `npx serve` to start a simple HTTP server. This should be executed after running the `npm run build` command to serve the optimized application.\nSOURCE: https://github.com/salesforce/lwc/blob/master/playground/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ npx serve\n```\n\n----------------------------------------\n\nTITLE: Debugging LWC Tests\nDESCRIPTION: This command starts the LWC tests in debug mode, allowing developers to step through the code and inspect variables. It utilizes the Node.js debugger and requires a debugger client (e.g., Chrome DevTools) to be attached. It triggers a breakpoint at the `debugger` statement in the code.\nSOURCE: https://github.com/salesforce/lwc/blob/master/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:debug <path_to_test>\n```\n\n----------------------------------------\n\nTITLE: Running Manual Benchmark Test\nDESCRIPTION: This command runs a benchmark in manual mode, allowing for debugging using Chrome DevTools. It prints URLs that can be used to load the benchmark manually.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/perf-benchmarks/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd packages/@lwc/perf-benchmarks\nyarn tach --manual --config dist/__benchmarks__/path/to/tachometer.json\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests on Specific Browsers - Yarn\nDESCRIPTION: This command runs integration tests on specific browsers within Sauce Labs.  It takes a comma-separated list of browser names.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/integration-tests/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn sauce --browsers firefox\n```\n\n----------------------------------------\n\nTITLE: Transforming CSS with @lwc/style-compiler in JavaScript\nDESCRIPTION: This code demonstrates how to use the @lwc/style-compiler to transform a CSS string. It imports the `transform` function, defines a CSS source, and then calls `transform` to generate the transformed code. The transformed code is then stored in the `code` variable.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/style-compiler/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { transform } = require('@lwc/style-compiler');\n\nconst source = `\n    :host {\n        opacity: 0.4;\n    }\n\n    span {\n        text-transform: uppercase;\n    }\n`;\n\nconst { code } = transform(source, 'example.css');\n```\n\n----------------------------------------\n\nTITLE: Running Individual Benchmark\nDESCRIPTION: This command runs a specific benchmark using Tachometer. It requires specifying the path to the benchmark's Tachometer configuration file.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/perf-benchmarks/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd packages/@lwc/perf-benchmarks\nyarn tach --config dist/__benchmarks__/path/to/tachometer.json\n```\n\n----------------------------------------\n\nTITLE: Custom Renderer Configuration Example 1 (JavaScript)\nDESCRIPTION: This example demonstrates a custom renderer configuration to match `<use>` elements under the `svg` namespace and have the `href` attribute set. This allows for custom rendering hooks to be applied to these specific elements.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/template-compiler/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    customRendererConfig: {\n        directives: [],\n        elements: [\n            {\n                tagName: 'use',\n                namespace: 'http://www.w3.org/2000/svg',\n                attributes: ['href']\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building LWC\nDESCRIPTION: This command builds the LWC project, compiling the source code and generating the necessary artifacts for deployment or testing. It utilizes the Yarn package manager to execute the build script defined in the project's package.json file.\nSOURCE: https://github.com/salesforce/lwc/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Custom Renderer Configuration Example 2 (JavaScript)\nDESCRIPTION: This example configures the template compiler to match `<script>` elements, regardless of their attributes. Skipping attribute matching means any `<script>` element will trigger the custom renderer hook.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/template-compiler/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    customRendererConfig: {\n        directives: [],\n        elements: [\n            {\n                tagName: 'script'\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Benchmark Results\nDESCRIPTION: This command formats the benchmark results, generating summary tables in Markdown and HTML. It requires the JSON result files to exist.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/perf-benchmarks/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd packages/@lwc/perf-benchmarks\nyarn test:format\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test File - Yarn\nDESCRIPTION: This command runs a specific test file, providing the path to the spec file.  Used to debug or quickly verify a single test scenario.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/integration-tests/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn local --spec path/to/my/spec.js\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tests in Watch Mode\nDESCRIPTION: This command runs tests that match the specified pattern in watch mode.  It sets the `GREP` environment variable to \"ShadowRoot\" and executes the `yarn start` command.  This allows developers to focus on specific areas of the LWC framework and get immediate feedback on their changes.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/integration-karma/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nGREP=ShadowRoot yarn start     # Run \"ShadowRoot\" related tests in watch mode\n```\n\n----------------------------------------\n\nTITLE: Testing Against Another Branch\nDESCRIPTION: These environment variables specify a different repository and branch/tag/commit to compare the local code against during benchmarking. The BENCHMARK_REPO specifies the git repository, and BENCHMARK_REF specifies the branch, tag, or commit hash.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/perf-benchmarks/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nBENCHMARK_REPO=https://example.com/repo.git \\\n  BENCHMARK_REF=branchOrTagOrCommit \\\n  yarn build:performance\n```\n\n----------------------------------------\n\nTITLE: NPM Package Module Record Configuration - JSON\nDESCRIPTION: This JSON configuration demonstrates an NPM package module record, instructing the resolver to search for LWC modules within the `@ui/components` NPM package. This enables the use of LWC modules distributed via NPM.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/module-resolver/README.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"modules\": [\n        {\n            \"npm\": \"@ui/components\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting ReactiveObserver Tracker - JavaScript\nDESCRIPTION: Shows how to use the `reset` method on a `ReactiveObserver` instance to stop tracking property mutations. This unlinks any previously recorded property access associated with the observer.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/engine-core/src/libs/mutation-tracker/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nro.reset();\n```\n\n----------------------------------------\n\nTITLE: Adjusting Benchmark Settings\nDESCRIPTION: These environment variables adjust the default benchmark settings, such as sample size, auto-sampling conditions, timeout, and CPU throttling rate. See Tachometer documentation for details.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/perf-benchmarks/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nBENCHMARK_SAMPLE_SIZE=50\nBENCHMARK_AUTO_SAMPLE_CONDITIONS=25%\nBENCHMARK_TIMEOUT=5\nBENCHMARK_CPU_THROTTLING_RATE=4\n```\n\n----------------------------------------\n\nTITLE: Starting the Server - Yarn\nDESCRIPTION: This command starts the development server, which is not required for running tests. It's likely for manual testing or storybook like functionality.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/integration-tests/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing @lwc/rollup-plugin with Yarn\nDESCRIPTION: This command installs the @lwc/rollup-plugin as a development dependency using Yarn. This plugin is essential for compiling Lightning Web Components within a Rollup build.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/rollup-plugin/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add --dev @lwc/rollup-plugin\n```\n\n----------------------------------------\n\nTITLE: Running Best Benchmarks in CI\nDESCRIPTION: This command runs the Best.js benchmarks in a Continuous Integration (CI) environment, typically for automated testing and reporting.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/perf-benchmarks/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nyarn test:performance:best:ci\n```\n\n----------------------------------------\n\nTITLE: Setting Sauce Tunnel ID\nDESCRIPTION: This command sets the `SAUCE_TUNNEL_ID` environment variable, which specifies the Sauce Connect tunnel to use for the tests.  This is required when using Sauce Connect to route traffic between the test environment and Sauce Labs.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/integration-tests/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nSAUCE_TUNNEL_ID=my-tunnel-id\n```\n\n----------------------------------------\n\nTITLE: Regenerating LWC Test Snapshots\nDESCRIPTION: This command regenerates the test snapshots for the LWC project. Snapshots are used to verify the output of the compiler or other transformations. This is useful when the compiler's output changes and existing snapshots need to be updated. Use with caution as it overwrites existing snapshots.\nSOURCE: https://github.com/salesforce/lwc/blob/master/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn test -u\n```\n\n----------------------------------------\n\nTITLE: Importing LWC Engine Server Directly\nDESCRIPTION: This code snippet shows how to directly import `renderComponent` from the `@lwc/engine-server` module. This is an alternative to using the convenience `lwc` package. Both methods achieve the same result, importing the necessary function for server-side rendering.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/lwc/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderComponent } from '@lwc/engine-server';\n```\n\n----------------------------------------\n\nTITLE: Installing @lwc/template-compiler (Shell)\nDESCRIPTION: This command installs the @lwc/template-compiler as a development dependency using yarn.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/template-compiler/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add --dev @lwc/template-compiler\n```\n\n----------------------------------------\n\nTITLE: Installing LWC Compiler\nDESCRIPTION: Installs the @lwc/compiler package using npm. This is a necessary step before using the compiler's APIs.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/compiler/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @lwc/compiler\n```\n\n----------------------------------------\n\nTITLE: Installing LWC Dependencies\nDESCRIPTION: This command installs the dependencies required by the LWC project. It leverages Yarn, a package manager, to ensure faster and more reliable dependency resolution. Yarn must be installed prior to running this command.\nSOURCE: https://github.com/salesforce/lwc/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Getting the LWC Compiler Version\nDESCRIPTION: Retrieves the current version of the `@lwc/compiler` package using the `version` API. This can be useful for checking compatibility and debugging purposes.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/compiler/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { version } from '@lwc/compiler';\n\nconsole.log(version);\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite - Yarn\nDESCRIPTION: This command allows running a specific test suite by providing the suite name.  This isolates tests, reducing debugging time and speeding up feedback on changes related to a specific feature.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/integration-tests/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn local --suite SUITE_NAME\n```\n\n----------------------------------------\n\nTITLE: Running Tests without Synthetic Shadow Polyfills\nDESCRIPTION: This command runs the test suite without any synthetic shadow polyfills.  It sets the `DISABLE_SYNTHETIC` environment variable to 1 and executes the `yarn test` command. This allows for testing the LWC components against native shadow DOM implementations.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/integration-karma/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nDISABLE_SYNTHETIC=1 yarn test  # Run tests without any synthetic shadow polyfills\n```\n\n----------------------------------------\n\nTITLE: Building in Development Mode - Yarn\nDESCRIPTION: This command builds the project artifacts in development mode using Yarn. Setting the `MODE` environment variable to `dev` enables development-specific features and optimizations.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/integration-tests/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nMODE=dev yarn build\n```\n\n----------------------------------------\n\nTITLE: Wiring Data with @wire Decorator in LWC\nDESCRIPTION: This code shows how to use the @wire decorator to wire a property 'recordData' to a wire adapter, in this case 'getRecord' from 'recordDataService'. The adapter is configured to retrieve a record with an ID of 1.  The result of the 'getRecord' wire adapter call is automatically assigned to the 'recordData' property.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/engine-core/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LightningElement, wire } from 'lwc';\nimport { getRecord } from 'recordDataService';\n\nexport default class Test extends LightningElement {\n    @wire(getRecord, { id: 1 })\n    recordData;\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Smoke Test\nDESCRIPTION: This environment variable enables a smoke test to confirm that the benchmark tests are working correctly. It performs a quick run to verify the setup.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/perf-benchmarks/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nBENCHMARK_SMOKE_TEST=1\n```\n\n----------------------------------------\n\nTITLE: Building in Production Mode - Yarn\nDESCRIPTION: This command builds the project artifacts in production mode using Yarn. This prepares the project for deployment or testing in a production-like environment.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/integration-tests/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Computing Coverage After a Single Test Run\nDESCRIPTION: This command computes coverage after a single test run.  It sets the `COVERAGE` environment variable to 1 and executes the `yarn test` command. The generated coverage reports are stored in the `coverage` folder and can be combined using the `yarn coverage` command.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/integration-karma/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nCOVERAGE=1 yarn test           # Compute coverage after a single test run\n```\n\n----------------------------------------\n\nTITLE: Notifying Property Mutation - JavaScript\nDESCRIPTION: Demonstrates how to use the `valueMutated` function to notify about a property mutation. This is typically used within event listeners or setters. The `valueMutated` function records the mutation and triggers any registered `ReactiveObserver` instances.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/engine-core/src/libs/mutation-tracker/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nelm.addEventListener('click', () => {\n    // incrementing `o.x`\n    o.x += 1;\n    // record the mutation in case someone is tracking it\n    valueMutated(o, 'x');\n});\n```\n\n----------------------------------------\n\nTITLE: Signal Interface Definition (TypeScript)\nDESCRIPTION: This snippet defines the `Signal` interface expected by the LWC engine. It includes a `value` getter and a `subscribe` method for registering update callbacks. The `subscribe` method returns an `Unsubscribe` function.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/signals/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport type OnUpdate = () => void;\nexport type Unsubscribe = () => void;\n\nexport interface Signal<T> {\n    get value(): T;\n    subscribe(onUpdate: OnUpdate): Unsubscribe;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Sauce Labs Tests Locally\nDESCRIPTION: This command starts Karma with a specific configuration file to run tests on Sauce Labs. It requires Sauce Connect to be running and properly configured with `SAUCE_USERNAME`, `SAUCE_KEY`, and `SAUCE_TUNNEL_ID` environment variables. The `--single-run` flag ensures that tests run only once.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/integration-karma/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx karma start ./scripts/karma-configs/test/sauce.js --single-run\n```\n\n----------------------------------------\n\nTITLE: Running LWC Karma Tests\nDESCRIPTION: This command executes the Karma integration tests for the LWC project. Karma is a test runner that allows tests to be executed in a browser environment. This helps verify browser-specific behavior and compatibility. Requires Karma and related dependencies to be configured.\nSOURCE: https://github.com/salesforce/lwc/blob/master/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nyarn test:karma\n```\n\n----------------------------------------\n\nTITLE: Running LWC Bundle Size Monitoring\nDESCRIPTION: These commands build the LWC project and then run a bundle size analysis tool. The tool checks that the minified bundle sizes do not exceed predefined thresholds, helping to maintain optimal performance and download times. Requires a bundle size monitoring tool to be configured.\nSOURCE: https://github.com/salesforce/lwc/blob/master/CONTRIBUTING.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nyarn build\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn bundlesize\n```\n\n----------------------------------------\n\nTITLE: Committing LWC Changes\nDESCRIPTION: These commands add, commit, and push changes to a feature branch. Replace `<path/to/file/to/commit>` with the specific files that have been modified. `git cz` provides an interactive way to create commit messages, while `git commit` uses the standard commit process.\nSOURCE: https://github.com/salesforce/lwc/blob/master/CONTRIBUTING.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngit add <path/to/file/to/commit>\ngit commit or git cz\ngit push origin <name-of-the-feature>\n```\n\n----------------------------------------\n\nTITLE: Linting LWC Changes\nDESCRIPTION: This command runs the linter to check for code style and formatting issues. It uses Yarn to execute the linting script defined in the project's package.json file. ESLint or a similar tool must be configured.\nSOURCE: https://github.com/salesforce/lwc/blob/master/CONTRIBUTING.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nyarn run lint\n```\n\n----------------------------------------\n\nTITLE: Installing @lwc/aria-reflection with npm\nDESCRIPTION: This command installs the @lwc/aria-reflection package from npm.  This package provides a polyfill for ARIA string reflection.  The installation requires npm or yarn to be available in your development environment.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/aria-reflection/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @lwc/aria-reflection\n```\n\n----------------------------------------\n\nTITLE: Define Custom Element Constructor\nDESCRIPTION: This snippet showcases the deprecated and preferred ways to define a custom element. The deprecated `buildCustomElementConstructor` is discouraged, and the recommended approach is to use `LightningHello.CustomElementConstructor`. This shows how to register a Web Component class as a new element.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/engine-dom/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LightningElement } from 'lwc';\n\nclass LightningHello extends LightningElement {}\n\n// Don't do this.\ncustomElements.define('lightning-hello', buildCustomElementConstructor(LightningHello));\n\n// Do this instead.\ncustomElements.define('lightning-hello', LightningHello.CustomElementConstructor);\n```\n\n----------------------------------------\n\nTITLE: Importing @lwc/aria-reflection in JavaScript\nDESCRIPTION: This import statement includes the @lwc/aria-reflection polyfill in your JavaScript code.  Upon import, the polyfill is applied globally to Element.prototype, enabling ARIA string reflection for all elements. No further configuration is needed after the import.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/aria-reflection/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@lwc/aria-reflection';\n```\n\n----------------------------------------\n\nTITLE: Forking LWC Repository\nDESCRIPTION: This command clones a forked repository from GitHub. It assumes that the user has already forked the `salesforce/lwc` repository and configured SSH access. Replace `<YOUR-USERNAME>` with your GitHub username.\nSOURCE: https://github.com/salesforce/lwc/blob/master/CONTRIBUTING.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:<YOUR-USERNAME>/lwc.git\ncd lwc\ngit remote add upstream git@github.com:salesforce/lwc.git\n```\n\n----------------------------------------\n\nTITLE: Updating a Pull Request\nDESCRIPTION: These commands fetch the latest changes from the origin, rebase the feature branch, and push the changes. The `--force` option is used if there were merge conflicts during the rebase. Replace `${base_branch}` and `${feature_branch}` with the appropriate branch names.\nSOURCE: https://github.com/salesforce/lwc/blob/master/CONTRIBUTING.md#_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ngit fetch origin\ngit rebase origin/${base_branch}\n\n# If there were no merge conflicts in the rebase\ngit push origin ${feature_branch}\n\n# If there was a merge conflict that was resolved\ngit push origin ${feature_branch} --force\n```\n\n----------------------------------------\n\nTITLE: Running LWC Performance Tests\nDESCRIPTION: These commands build the LWC project, build performance-related artifacts, and then execute the performance tests. The tests compare current code performance against the latest `master` branch to identify regressions.  Requires `@lwc/perf-benchmarks` package to be set up.\nSOURCE: https://github.com/salesforce/lwc/blob/master/CONTRIBUTING.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nyarn build\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn build:performance\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn test:performance\n```\n\n----------------------------------------\n\nTITLE: Running Specific Browsers on Sauce Labs\nDESCRIPTION: Runs tests on Sauce Labs, targeting specified browsers using the `--browsers` argument with a comma-separated list of browser names. Environment variables are set inline for user and key.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/integration-tests/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nSAUCE_USERNAME=my_user SAUCE_KEY=123-456-789 yarn sauce:prod --browsers chrome\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests on Sauce Labs - Yarn\nDESCRIPTION: This command runs the integration tests across all configured browsers on Sauce Labs. Sauce Connect must be running for this to work.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/integration-tests/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn sauce\n```\n\n----------------------------------------\n\nTITLE: Setting Sauce Labs Credentials Inline\nDESCRIPTION: This command sets the Sauce Labs username and key as environment variables while executing the test script. Ensure Sauce Connect is already running.\nSOURCE: https://github.com/salesforce/lwc/blob/master/packages/@lwc/integration-tests/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nSAUCE_USERNAME=my-user SAUCE_KEY=123-456-789 yarn run test:integration:sauce\n```\n\n----------------------------------------\n\nTITLE: Commit Message Header Example\nDESCRIPTION: This example demonstrates the basic structure of a commit message header. It shows the type, scope, and subject of the commit. The scope is optional. It adheres to the guidelines of using the imperative, present tense for the subject and avoiding capitalization of the first letter.\nSOURCE: https://github.com/salesforce/lwc/blob/master/CONTRIBUTING.md#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\ndocs(changelog): update change log to beta.5\n```\n\n----------------------------------------\n\nTITLE: Commit Message Example with Body\nDESCRIPTION: This example demonstrates a commit message with a header and a body. The header includes the type, scope, and subject. The body provides more context and motivation for the change. This example follows the convention of using the imperative, present tense in both the subject and the body.\nSOURCE: https://github.com/salesforce/lwc/blob/master/CONTRIBUTING.md#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\nfix(release): need to depend on latest rxjs and zone.js\n\nThe version in our package.json gets copied to the one we publish, and users need the latest of these.\n```\n\n----------------------------------------\n\nTITLE: Commit Message Structure\nDESCRIPTION: This snippet illustrates the general structure of a commit message. It includes the header (type, scope, subject), a blank line, the body, another blank line, and the footer. It emphasizes that the header is mandatory, and the scope is optional.  Each line should not exceed 100 characters.\nSOURCE: https://github.com/salesforce/lwc/blob/master/CONTRIBUTING.md#_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n<type>(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<footer>\n```"
  }
]