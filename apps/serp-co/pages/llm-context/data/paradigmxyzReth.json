[
  {
    "owner": "paradigmxyz",
    "repo": "reth",
    "content": "TITLE: TransactionsManager Structure for Network Transaction Handling\nDESCRIPTION: Definition of the TransactionsManager struct that manages transaction propagation across the Ethereum network. It handles transaction requests, validation, propagation, and interfaces with the transaction pool.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_22\n\nLANGUAGE: rust\nCODE:\n```\npub struct TransactionsManager<Pool> {\n    /// Access to the transaction pool.\n    pool: Pool,\n    /// Network access.\n    network: NetworkHandle,\n    /// Subscriptions to all network related events.\n    ///\n    /// From which we get all new incoming transaction related messages.\n    network_events: UnboundedReceiverStream<NetworkEvent>,\n    /// All currently active requests for pooled transactions.\n    inflight_requests: Vec<GetPooledTxRequest>,\n    /// All currently pending transactions grouped by peers.\n    ///\n    /// This way we can track incoming transactions and prevent multiple pool imports for the same\n    /// transaction\n    transactions_by_peers: HashMap<TxHash, Vec<PeerId>>,\n    /// Transactions that are currently imported into the `Pool`\n    pool_imports: FuturesUnordered<PoolImportFuture>,\n    /// All the connected peers.\n    peers: HashMap<PeerId, Peer>,\n    /// Send half for the command channel.\n    command_tx: mpsc::UnboundedSender<TransactionsCommand>,\n    /// Incoming commands from [`TransactionsHandle`].\n    command_rx: UnboundedReceiverStream<TransactionsCommand>,\n    /// Incoming commands from [`TransactionsHandle`].\n    pending_transactions: ReceiverStream<TxHash>,\n    /// Incoming events from the [`NetworkManager`](crate::NetworkManager).\n    transaction_events: UnboundedReceiverStream<NetworkTransactionEvent>,\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Transactions in Reth's TransactionsManager\nDESCRIPTION: This function handles the import of transactions received from peers. It recovers the signer for each transaction, inserts it into the peer's LRU cache, and initiates the process of importing the transaction into the node's transaction pool. It also handles bad transactions by reporting the sending peer.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_32\n\nLANGUAGE: rust\nCODE:\n```\nfn import_transactions(&mut self, peer_id: PeerId, transactions: Vec<TransactionSigned>) {\n    let mut has_bad_transactions = false;\n    if let Some(peer) = self.peers.get_mut(&peer_id) {\n        for tx in transactions {\n            // recover transaction\n            let tx = if let Some(tx) = tx.into_ecrecovered() {\n                tx\n            } else {\n                has_bad_transactions = true;\n                continue\n            };\n\n            // track that the peer knows this transaction\n            peer.transactions.insert(tx.hash());\n\n            match self.transactions_by_peers.entry(tx.hash()) {\n                Entry::Occupied(mut entry) => {\n                    // transaction was already inserted\n                    entry.get_mut().push(peer_id);\n                }\n                Entry::Vacant(entry) => {\n                    // this is a new transaction that should be imported into the pool\n                    let pool_transaction = <Pool::Transaction as FromRecoveredTransaction>::from_recovered_transaction(tx);\n\n                    let pool = self.pool.clone();\n                    let import = Box::pin(async move {\n                        pool.add_external_transaction(pool_transaction).await\n                    });\n\n                    self.pool_imports.push(import);\n                    entry.insert(vec![peer_id]);\n                }\n            }\n        }\n    }\n\n    if has_bad_transactions {\n        self.report_bad_message(peer_id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Hello World ExEx with Event Handling\nDESCRIPTION: A complete Hello World ExEx that listens for notifications from the main node, logs chain events, and sends FinishedHeight events back to the node. This demonstrates the full notification and event handling cycle.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/exex/hello-world.md#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../../sources/exex/hello-world/src/bin/3.rs}}\n```\n\n----------------------------------------\n\nTITLE: Implementing ETH Request Handling in Rust\nDESCRIPTION: The poll method implementation for the ETH requests task that processes incoming Ethereum network requests. It routes GetBlockHeaders, GetBlockBodies, GetNodeData, and GetReceipts requests to their appropriate handlers.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\nfn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n    let this = self.get_mut();\n\n    loop {\n        match this.incoming_requests.poll_next_unpin(cx) {\n            Poll::Pending => return Poll::Pending,\n            Poll::Ready(None) => return Poll::Ready(()),\n            Poll::Ready(Some(incoming)) => match incoming {\n                IncomingEthRequest::GetBlockHeaders { peer_id, request, response } => {\n                    this.on_headers_request(peer_id, request, response)\n                }\n                IncomingEthRequest::GetBlockBodies { peer_id, request, response } => {\n                    this.on_bodies_request(peer_id, request, response)\n                }\n                IncomingEthRequest::GetNodeData { .. } => {}\n                IncomingEthRequest::GetReceipts { .. } => {}\n            },\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Testing Reth with Git and Cargo\nDESCRIPTION: Instructions for cloning the repository and running test suites with and without Geth integration. This snippet includes commands for basic testing, testing with Geth features, and running Ethereum Foundation tests.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/paradigmxyz/reth\ncd reth\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Without Geth\ncargo test --workspace\n\n# With Geth\ncargo test --workspace --features geth-tests\n\n# With Ethereum Foundation tests\n#\n# Note: Requires cloning https://github.com/ethereum/tests\n#\n#   cd testing/ef-tests && git clone https://github.com/ethereum/tests ethereum-tests\ncargo test -p ef-tests --features ef-tests\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics in Reth Node\nDESCRIPTION: Command to start a Reth node with metrics enabled on a specific endpoint. This exposes a Prometheus-compatible metrics endpoint at the specified address and port.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/observability.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nreth node --metrics 127.0.0.1:9001\n```\n\n----------------------------------------\n\nTITLE: Implementing poll_action for StateFetcher in Rust\nDESCRIPTION: Implements the poll_action method for StateFetcher, which determines the next action to take based on queued requests and available peers for block fetching.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\n/// Returns the next action to return\nfn poll_action(&mut self) -> PollAction {\n    // we only check and not pop here since we don't know yet whether a peer is available.\n    if self.queued_requests.is_empty() {\n        return PollAction::NoRequests\n    }\n\n    let peer_id = if let Some(peer_id) = self.next_peer() {\n        peer_id\n    } else {\n        return PollAction::NoPeersAvailable\n    };\n\n    let request = self.queued_requests.pop_front().expect(\"not empty\");\n    let request = self.prepare_block_request(peer_id, request);\n\n    PollAction::Ready(FetchAction::BlockRequest { peer_id, request })\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Network in Reth\nDESCRIPTION: This function initializes the network components in Reth, including the network manager, transaction pool, and ETH request handler. It spawns these components as separate tasks and returns a NetworkHandle for interaction.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nasync fn start_network<C>(config: NetworkConfig<C>) -> Result<NetworkHandle, NetworkError>\nwhere\n    C: BlockReader + HeaderProvider + 'static,\n{\n    let client = config.client.clone();\n    let (handle, network, _txpool, eth) =\n        NetworkManager::builder(config).await?.request_handler(client).split_with_handle();\n\n    tokio::task::spawn(network);\n    // TODO: tokio::task::spawn(txpool);\n    tokio::task::spawn(eth);\n    Ok(handle)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Pool Imports in Reth's TransactionsManager\nDESCRIPTION: This snippet describes the process of checking pool_imports in the TransactionsManager's poll method. It iterates over pool_imports, handles successful and unsuccessful imports, and updates the transactions_by_peers mapping.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_35\n\nLANGUAGE: rust\nCODE:\n```\n// Pseudo-code representation of the pool_imports checking process\nfor import in self.pool_imports.iter() {\n    if import.is_ready() {\n        if import.is_successful() {\n            self.on_good_import(tx_hash);\n        } else {\n            self.on_bad_import(tx_hash);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Limits in Reth\nDESCRIPTION: Settings that control the maximum number of inbound and outbound peer connections that Reth will maintain with the Ethereum network.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/config.md#2025-04-16_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[peers.connection_info]\n# The maximum number of outbound peers (peers we connect to)\nmax_outbound = 100\n# The maximum number of inbound peers (peers that connect to us)\nmax_inbound = 30\n```\n\n----------------------------------------\n\nTITLE: Implementing Stage Trait in Rust\nDESCRIPTION: Describes the Stage trait that all pipeline stages must implement, providing functions for getting stage ID, executing the stage, and unwinding changes if issues occur.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/stages.md#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ntrait Stage {\n    fn get_id(&self) -> StageId;\n    fn execute(&mut self) -> Result<ExecOutput>;\n    fn unwind(&mut self) -> Result<()>;\n}\n```\n\n----------------------------------------\n\nTITLE: Running op-reth node for Base Mainnet\nDESCRIPTION: Command line example for starting an op-reth node configured for the Base Mainnet OP Stack chain with HTTP, WebSocket, and authentication RPC enabled.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/optimism.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nop-reth node \\\n    --chain base \\\n    --rollup.sequencer-http https://mainnet-sequencer.base.org \\\n    --http \\\n    --ws \\\n    --authrpc.port 9551 \\\n    --authrpc.jwtsecret /path/to/jwt.hex\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stateful ExEx with the Future Trait in Rust\nDESCRIPTION: Example of turning a simple ExEx async function into a stateful struct by implementing the Future trait manually. This approach allows for state tracking and easier testing by making the internal state accessible.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/exex/tracking-state.md#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../../sources/exex/tracking-state/src/bin/1.rs}}\n```\n\n----------------------------------------\n\nTITLE: Adding a Peer using admin_addPeer in JavaScript\nDESCRIPTION: This snippet demonstrates how to add a peer to the current peer set of the node using the admin_addPeer method. It accepts an enode URL as a parameter and returns a boolean indicating success.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/admin.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// > {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"admin_addPeer\",\"params\":[\"enode://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@52.16.188.185:30303\"]}\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":true}\n```\n\n----------------------------------------\n\nTITLE: Tracing Chain Execution using debug_traceChain RPC Method\nDESCRIPTION: Returns structured logs created during EVM execution between two blocks (excluding start) as a JSON object. The method is called via RPC with start and end block parameters.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/debug.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"method\": \"debug_traceChain\", \"params\": [start_block, end_block]}\n```\n\n----------------------------------------\n\nTITLE: Initializing Network and Pipeline in Reth Node\nDESCRIPTION: This snippet shows how the network is initialized and used in the Reth node's pipeline setup. It demonstrates the creation of a network instance, fetch client, and the configuration of various pipeline stages.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nlet network = start_network(network_config(db.clone(), chain_id, genesis_hash)).await?;\n\nlet fetch_client = Arc::new(network.fetch_client().await?);\nlet mut pipeline = reth_stages::Pipeline::new()\n    .push(HeaderStage {\n        downloader: headers::reverse_headers::ReverseHeadersDownloaderBuilder::default()\n            .batch_size(config.stages.headers.downloader_batch_size)\n            .retries(config.stages.headers.downloader_retries)\n            .build(consensus.clone(), fetch_client.clone()),\n        consensus: consensus.clone(),\n        client: fetch_client.clone(),\n        network_handle: network.clone(),\n        commit_threshold: config.stages.headers.commit_threshold,\n        metrics: HeaderMetrics::default(),\n    })\n    .push(BodyStage {\n        downloader: Arc::new(\n            bodies::bodies::BodiesDownloader::new(\n                fetch_client.clone(),\n                consensus.clone(),\n            )\n            .with_batch_size(config.stages.bodies.downloader_batch_size)\n            .with_retries(config.stages.bodies.downloader_retries)\n            .with_concurrency(config.stages.bodies.downloader_concurrency),\n        ),\n        consensus: consensus.clone(),\n        commit_threshold: config.stages.bodies.commit_threshold,\n    })\n    .push(SenderRecoveryStage {\n        commit_threshold: config.stages.sender_recovery.commit_threshold,\n    })\n    .push(ExecutionStage { config: ExecutorConfig::new_ethereum() });\n\nif let Some(tip) = self.tip {\n    debug!(\"Tip manually set: {}\", tip);\n    consensus.notify_fork_choice_state(ForkchoiceState {\n        head_block_hash: tip,\n        safe_block_hash: tip,\n        finalized_block_hash: tip,\n    })?\n}\n\n// Run pipeline\ninfo!(\"Starting pipeline\");\npipeline.run(db.clone()).await?\n```\n\n----------------------------------------\n\nTITLE: Transaction Propagation Implementation in Rust\nDESCRIPTION: Implements the transaction propagation logic with two key methods: on_new_transactions which handles new transaction hashes and propagate_transactions which distributes transactions across the network using a hybrid approach of full transaction objects and transaction hashes.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_30\n\nLANGUAGE: rust\nCODE:\n```\nfn on_new_transactions(&mut self, hashes: impl IntoIterator<Item = TxHash>) {\n    trace!(target: \"net::tx\", \"Start propagating transactions\");\n\n    let propagated = self.propagate_transactions(\n        self.pool\n            .get_all(hashes)\n            .into_iter()\n            .map(|tx| {\n                (*tx.hash(), Arc::new(tx.transaction.to_recovered_transaction().into_tx()))\n            })\n            .collect(),\n    );\n\n    // notify pool so events get fired\n    self.pool.on_propagated(propagated);\n}\n\nfn propagate_transactions(\n    &mut self,\n    txs: Vec<(TxHash, Arc<TransactionSigned>)>,\n) -> PropagatedTransactions {\n    let mut propagated = PropagatedTransactions::default();\n\n    // send full transactions to a fraction of the connected peers (square root of the total\n    // number of connected peers)\n    let max_num_full = (self.peers.len() as f64).sqrt() as usize + 1;\n\n    // Note: Assuming ~random~ order due to random state of the peers map hasher\n    for (idx, (peer_id, peer)) in self.peers.iter_mut().enumerate() {\n        let (hashes, full): (Vec<_>, Vec<_>) =\n            txs.iter().filter(|(hash, _)| peer.transactions.insert(*hash)).cloned().unzip();\n\n        if !full.is_empty() {\n            if idx > max_num_full {\n                for hash in &hashes {\n                    propagated.0.entry(*hash).or_default().push(PropagateKind::Hash(*peer_id));\n                }\n                // send hashes of transactions\n                self.network.send_transactions_hashes(*peer_id, hashes);\n            } else {\n                // send full transactions\n                self.network.send_transactions(*peer_id, full);\n\n                for hash in hashes {\n                    propagated.0.entry(hash).or_default().push(PropagateKind::Full(*peer_id));\n                }\n            }\n        }\n    }\n\n    propagated\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Information using admin_nodeInfo in JavaScript\nDESCRIPTION: This example shows how to retrieve detailed information about the running node using the admin_nodeInfo method. It returns data such as the node's enode URL, IP, ports, and protocols.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/admin.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// > {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"admin_nodeInfo\",\"params\":[]}\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"enode\": \"enode://44826a5d6a55f88a18298bca4773fca5749cdc3a5c9f308aa7d810e9b31123f3e7c5fba0b1d70aac5308426f47df2a128a6747040a3815cc7dd7167d03be320d@[::]:30303\",\n            \"id\": \"44826a5d6a55f88a18298bca4773fca5749cdc3a5c9f308aa7d810e9b31123f3e7c5fba0b1d70aac5308426f47df2a128a6747040a3815cc7dd7167d03be320d\",\n            \"ip\": \"::\",\n            \"listenAddr\": \"[::]:30303\",\n            \"name\": \"reth/v0.0.1/x86_64-unknown-linux-gnu\",\n            \"ports\": {\n                \"discovery\": 30303,\n                \"listener\": 30303\n        },\n        \"protocols\": {\n            \"eth\": {\n                \"difficulty\": 17334254859343145000,\n                \"genesis\": \"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3\",\n                \"head\": \"0xb83f73fbe6220c111136aefd27b160bf4a34085c65ba89f24246b3162257c36a\",\n                \"network\": 1\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing op-reth from source\nDESCRIPTION: Commands to clone the Reth repository and install the op-reth binary with Optimism support using the Makefile in the workspace root.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/optimism.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/paradigmxyz/reth.git && \\\n    cd reth && \\\n    make install-op\n```\n\n----------------------------------------\n\nTITLE: NetworkConfig Struct Definition in Reth\nDESCRIPTION: This struct defines the configuration for the network layer in Reth. It includes settings for the client, secret key, boot nodes, discovery, peer management, sessions, and other network-related parameters.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\npub struct NetworkConfig<C> {\n    /// The client type that can interact with the chain.\n    pub client: Arc<C>,\n    /// The node's secret key, from which the node's identity is derived.\n    pub secret_key: SecretKey,\n    /// All boot nodes to start network discovery with.\n    pub boot_nodes: Vec<NodeRecord>,\n    /// How to set up discovery.\n    pub discovery_v4_config: Discv4Config,\n    /// Address to use for discovery\n    pub discovery_addr: SocketAddr,\n    /// Address to listen for incoming connections\n    pub listener_addr: SocketAddr,\n    /// How to instantiate peer manager.\n    pub peers_config: PeersConfig,\n    /// How to configure the [SessionManager](crate::session::SessionManager).\n    pub sessions_config: SessionsConfig,\n    /// The id of the network\n    pub chain: Chain,\n    /// Genesis hash of the network\n    pub genesis_hash: B256,\n    /// The [`ForkFilter`] to use at launch for authenticating sessions.\n    ///\n    /// See also <https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2124.md#stale-software-examples>\n    ///\n    /// For sync from block `0`, this should be the default chain [`ForkFilter`] beginning at the\n    /// first hardfork, `Frontier` for mainnet.\n    pub fork_filter: ForkFilter,\n    /// The block importer type.\n    pub block_import: Box<dyn BlockImport>,\n    /// The default mode of the network.\n    pub network_mode: NetworkMode,\n    /// The executor to use for spawning tasks.\n    pub executor: Option<TaskExecutor>,\n    /// The `Status` message to send to peers at the beginning.\n    pub status: Status,\n    /// Sets the hello message for the p2p handshake in ``RLPx``\n    pub hello_message: HelloMessage,\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Reth Docker Image from GitHub Container Registry\nDESCRIPTION: Command to pull the latest Reth Docker image from GitHub Container Registry. This is the easiest way to obtain a pre-built Reth image.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/docker.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/paradigmxyz/reth\n```\n\n----------------------------------------\n\nTITLE: Network Event Handler Implementation in Rust\nDESCRIPTION: Implementation of the network event handler that processes various peer events and manages peer sessions.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_28\n\nLANGUAGE: rust\nCODE:\n```\nfn on_network_event(&mut self, event_result: NetworkEvent) {\n    match event_result {\n        NetworkEvent::Peer(PeerEvent::SessionClosed { peer_id, .. }) => {\n            // remove the peer\n            self.peers.remove(&peer_id);\n            self.transaction_fetcher.remove_peer(&peer_id);\n        }\n        NetworkEvent::ActivePeerSession { info, messages } => {\n            // process active peer session and broadcast available transaction from the pool\n            self.handle_peer_session(info, messages);\n        }\n        NetworkEvent::Peer(PeerEvent::SessionEstablished(info)) => {\n            let peer_id = info.peer_id;\n            // get messages from existing peer\n             let messages = match self.peers.get(&peer_id) {\n                Some(p) => p.request_tx.clone(),\n                None => {\n                    debug!(target: \"net::tx\", ?peer_id, \"No peer request sender found\");\n                    return;\n                }\n            };\n            self.handle_peer_session(info, messages);\n        }\n         _ => {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Reth Pipeline\nDESCRIPTION: Explains how the Reth pipeline is initialized with stages and run in an infinite loop to sync the chain and keep it up to date with the chain tip.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/stages.md#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nPipeline::run\n```\n\n----------------------------------------\n\nTITLE: Implementing P2P Stream for Ethereum Network Communication\nDESCRIPTION: Defines the P2PStream struct, which manages low-level communication with Ethereum peers. It handles ping/pong messages, shared capabilities, and message compression/decompression using the Snappy algorithm.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/eth-wire.md#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[pin_project]\npub struct P2PStream<S> {\n    #[pin]\n    inner: S,\n    encoder: snap::raw::Encoder,\n    decoder: snap::raw::Decoder,\n    pinger: Pinger,\n    shared_capability: SharedCapability,\n    outgoing_messages: VecDeque<Bytes>,\n    disconnecting: bool,\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Pending Transactions in Reth's TransactionsManager\nDESCRIPTION: This snippet outlines the process of draining the pending_transactions stream in the TransactionsManager's poll method. It collects resolved transactions and calls on_new_transactions for propagation.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_36\n\nLANGUAGE: rust\nCODE:\n```\n// Pseudo-code representation of the pending_transactions processing\nlet mut new_transactions = Vec::new();\nwhile let Some(tx) = self.pending_transactions.poll_next() {\n    new_transactions.push(tx);\n}\nif !new_transactions.is_empty() {\n    self.on_new_transactions(new_transactions);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table, Key, and Value Traits in Rust for Reth Database\nDESCRIPTION: This code snippet defines the Table trait and associated Key and Value traits. The Table trait is central to Reth's database organization, specifying how data is stored and retrieved. Key and Value traits define the requirements for table keys and values, including encoding, decoding, compression, and serialization.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/db.md#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub trait Table: Send + Sync + Debug + 'static {\n    /// Return table name as it is present inside the MDBX.\n    const NAME: &'static str;\n    /// Key element of `Table`.\n    ///\n    /// Sorting should be taken into account when encoding this.\n    type Key: Key;\n    /// Value element of `Table`.\n    type Value: Value;\n}\n\n//--snip--\npub trait Key: Encode + Decode + Ord + Clone + Serialize + for<'a> Deserialize<'a> {}\n\n//--snip--\npub trait Value: Compress + Decompress + Serialize {}\n```\n\n----------------------------------------\n\nTITLE: Setting Request Timeouts for Peer Sessions in Reth (TOML)\nDESCRIPTION: Defines timeout durations for initial internal requests and protocol breach detection in Reth peer sessions. These settings help manage peer interactions and enforce protocol compliance, with severe penalties for protocol violations.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/config.md#2025-04-16_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n[sessions.initial_internal_request_timeout]\nsecs = 20\nnanos = 0\n\n[sessions.protocol_breach_request_timeout]\nsecs = 120\nnanos = 0\n```\n\n----------------------------------------\n\nTITLE: Importing OVM Blocks for OP Mainnet Full Bootstrap\nDESCRIPTION: Command to import OP Mainnet blocks from genesis to Bedrock from an exported RLP file. This is part of the full bootstrap process which includes historical OVM data.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/sync-op-mainnet.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ op-reth import-op --chain optimism <exported-blocks>\n```\n\n----------------------------------------\n\nTITLE: Defining Ethereum Protocol Message Types in Rust\nDESCRIPTION: Defines the main types for Ethereum protocol messages, including ProtocolMessage, EthMessage, and EthMessageID enums. These structures represent the various message types that can be sent and received in the Ethereum network.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/eth-wire.md#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub struct ProtocolMessage {\n    pub message_type: EthMessageID,\n    pub message: EthMessage,\n}\n\npub enum EthMessage {\n    Status(Status),\n    NewBlockHashes(NewBlockHashes),\n    Transactions(Transactions),\n    NewPooledTransactionHashes(NewPooledTransactionHashes),\n    GetBlockHeaders(RequestPair<GetBlockHeaders>),\n    // ...\n    GetReceipts(RequestPair<GetReceipts>),\n    Receipts(RequestPair<Receipts>),\n}\n\n#[repr(u8)]\npub enum EthMessageID {\n    Status = 0x00,\n    NewBlockHashes = 0x01,\n    Transactions = 0x02,\n    // ...\n    NodeData = 0x0e,\n    GetReceipts = 0x0f,\n    Receipts = 0x10,\n}\n```\n\n----------------------------------------\n\nTITLE: Tracing Transaction Execution using debug_traceTransaction RPC Method\nDESCRIPTION: Attempts to run the transaction in the same manner as it was executed on the network, replaying any prior transactions. The method is invoked via RPC with transaction hash and options parameters.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/debug.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\"method\": \"debug_traceTransaction\", \"params\": [tx_hash, opts]}\n```\n\n----------------------------------------\n\nTITLE: Implementing NetworkManager Structure in Rust\nDESCRIPTION: Defines the NetworkManager struct, which manages network connections, handles messages, and coordinates with other components like block import and transaction management.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npub struct NetworkManager<C> {\n    /// The type that manages the actual network part, which includes connections.\n    swarm: Swarm<C>,\n    /// Underlying network handle that can be shared.\n    handle: NetworkHandle,\n    /// Receiver half of the command channel set up between this type and the [`NetworkHandle`]\n    from_handle_rx: UnboundedReceiverStream<NetworkHandleMessage>,\n    /// Handles block imports according to the `eth` protocol.\n    block_import: Box<dyn BlockImport>,\n    /// All listeners for high level network events.\n    event_listeners: NetworkEventListeners,\n    /// Sender half to send events to the\n    /// [`TransactionsManager`](crate::transactions::TransactionsManager) task, if configured.\n    to_transactions_manager: Option<mpsc::UnboundedSender<NetworkTransactionEvent>>,\n    /// Sender half to send events to the\n    /// [`EthRequestHandler`](crate::eth_requests::EthRequestHandler) task, if configured.\n    to_eth_request_handler: Option<mpsc::UnboundedSender<IncomingEthRequest>>,\n    /// Tracks the number of active session (connected peers).\n    ///\n    /// This is updated via internal events and shared via `Arc` with the [`NetworkHandle`]\n    /// Updated by the `NetworkWorker` and loaded by the `NetworkService`.\n    num_active_peers: Arc<AtomicUsize>,\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Network ID with net_version RPC Method\nDESCRIPTION: This example demonstrates how to query the Ethereum network ID using the net_version RPC method. The response contains a numeric value that identifies the network (e.g., 1 for mainnet, 3 for Ropsten, etc.).\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/net.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// > {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"net_version\",\"params\":[]}\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":1}\n```\n\n----------------------------------------\n\nTITLE: Defining NetworkState Structure in Rust\nDESCRIPTION: Implements the NetworkState struct, which encapsulates the overall state of the network, including active peers, peer management, discovery, and the StateFetcher for handling data requests.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\npub struct NetworkState<C> {\n    /// All active peers and their state.\n    active_peers: HashMap<PeerId, ActivePeer>,\n    /// Manages connections to peers.\n    peers_manager: PeersManager,\n    /// Buffered messages until polled.\n    queued_messages: VecDeque<StateAction>,\n    /// The client type that can interact with the chain.\n    client: Arc<C>,\n    /// Network discovery.\n    discovery: Discovery,\n    /// The genesis hash of the network we're on\n    genesis_hash: B256,\n    /// The type that handles requests.\n    ///\n    /// The fetcher streams ``RLPx`` related requests on a per-peer basis to this type. This type will\n    /// then queue in the request and notify the fetcher once the result has been received.\n    state_fetcher: StateFetcher,\n}\n```\n\n----------------------------------------\n\nTITLE: Building Reth with maximum performance optimizations\nDESCRIPTION: Command to build Reth with CPU-specific optimizations and the maxperf profile for highest performance.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/source.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nRUSTFLAGS=\"-C target-cpu=native\" cargo build --profile maxperf\n```\n\n----------------------------------------\n\nTITLE: Reth P2P Command Line Interface Options\nDESCRIPTION: Complete CLI documentation showing all available commands and options for P2P networking configuration, including discovery settings, networking parameters, database configuration, and logging options\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/p2p.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth p2p [OPTIONS] <COMMAND>\n\nCommands:\n  header  Download block header\n  body    Download block body\n  rlpx    RLPx commands\n  help    Print this message or the help of the given subcommand(s)\n\nOptions:\n      --config <FILE>\n          The path to the configuration file to use.\n\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\n      --retries <RETRIES>\n          The number of retries per request\n\n          [default: 5]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nNetworking:\n  -d, --disable-discovery\n          Disable the discovery service\n\n      --disable-dns-discovery\n          Disable the DNS discovery\n\n      --disable-discv4-discovery\n          Disable Discv4 discovery\n\n      --enable-discv5-discovery\n          Enable Discv5 discovery\n\n      --disable-nat\n          Disable Nat discovery\n\n      --discovery.addr <DISCOVERY_ADDR>\n          The UDP address to use for devp2p peer discovery version 4\n\n          [default: 0.0.0.0]\n\n      --discovery.port <DISCOVERY_PORT>\n          The UDP port to use for devp2p peer discovery version 4\n\n          [default: 30303]\n\n      --discovery.v5.addr <DISCOVERY_V5_ADDR>\n          The UDP IPv4 address to use for devp2p peer discovery version 5. Overwritten by `RLPx` address, if it's also IPv4\n\n      --discovery.v5.addr.ipv6 <DISCOVERY_V5_ADDR_IPV6>\n          The UDP IPv6 address to use for devp2p peer discovery version 5. Overwritten by `RLPx` address, if it's also IPv6\n\n      --discovery.v5.port <DISCOVERY_V5_PORT>\n          The UDP IPv4 port to use for devp2p peer discovery version 5. Not used unless `--addr` is IPv4, or `--discovery.v5.addr` is set\n\n          [default: 9200]\n\n      --discovery.v5.port.ipv6 <DISCOVERY_V5_PORT_IPV6>\n          The UDP IPv6 port to use for devp2p peer discovery version 5. Not used unless `--addr` is IPv6, or `--discovery.addr.ipv6` is set\n\n          [default: 9200]\n\n      --discovery.v5.lookup-interval <DISCOVERY_V5_LOOKUP_INTERVAL>\n          The interval in seconds at which to carry out periodic lookup queries, for the whole run of the program\n\n          [default: 20]\n\n      --discovery.v5.bootstrap.lookup-interval <DISCOVERY_V5_BOOTSTRAP_LOOKUP_INTERVAL>\n          The interval in seconds at which to carry out boost lookup queries, for a fixed number of times, at bootstrap\n\n          [default: 5]\n\n      --discovery.v5.bootstrap.lookup-countdown <DISCOVERY_V5_BOOTSTRAP_LOOKUP_COUNTDOWN>\n          The number of times to carry out boost lookup queries at bootstrap\n\n          [default: 200]\n\n      --trusted-peers <TRUSTED_PEERS>\n          Comma separated enode URLs of trusted peers for P2P connections.\n\n          --trusted-peers enode://abcd@192.168.0.1:30303\n\n      --trusted-only\n          Connect to or accept from trusted peers only\n\n      --bootnodes <BOOTNODES>\n          Comma separated enode URLs for P2P discovery bootstrap.\n\n          Will fall back to a network-specific default if not specified.\n\n      --dns-retries <DNS_RETRIES>\n          Amount of DNS resolution requests retries to perform when peering\n\n          [default: 0]\n\n      --peers-file <FILE>\n          The path to the known peers file. Connected peers are dumped to this file on nodes\n          shutdown, and read on startup. Cannot be used with `--no-persist-peers`.\n\n      --identity <IDENTITY>\n          Custom node identity\n\n          [default: reth/<VERSION>-<SHA>/<ARCH>]\n\n      --p2p-secret-key <PATH>\n          Secret key to use for this node.\n\n          This will also deterministically set the peer ID. If not specified, it will be set in the data dir for the chain being used.\n\n      --no-persist-peers\n          Do not persist peers.\n\n      --nat <NAT>\n          NAT resolution method (any|none|upnp|publicip|extip:\\<IP\\>)\n\n          [default: any]\n\n      --addr <ADDR>\n          Network listening address\n\n          [default: 0.0.0.0]\n\n      --port <PORT>\n          Network listening port\n\n          [default: 30303]\n\n      --max-outbound-peers <MAX_OUTBOUND_PEERS>\n          Maximum number of outbound requests. default: 100\n\n      --max-inbound-peers <MAX_INBOUND_PEERS>\n          Maximum number of inbound requests. default: 30\n\n      --max-tx-reqs <COUNT>\n          Max concurrent `GetPooledTransactions` requests.\n\n          [default: 130]\n\n      --max-tx-reqs-peer <COUNT>\n          Max concurrent `GetPooledTransactions` requests per peer.\n\n          [default: 1]\n\n      --max-seen-tx-history <COUNT>\n          Max number of seen transactions to remember per peer.\n\n          Default is 320 transaction hashes.\n\n          [default: 320]\n\n      --max-pending-imports <COUNT>\n          Max number of transactions to import concurrently.\n\n          [default: 4096]\n\n      --pooled-tx-response-soft-limit <BYTES>\n          Experimental, for usage in research. Sets the max accumulated byte size of transactions\n          to pack in one response.\n          Spec'd at 2MiB.\n\n          [default: 2097152]\n\n      --pooled-tx-pack-soft-limit <BYTES>\n          Experimental, for usage in research. Sets the max accumulated byte size of transactions to\n          request in one request.\n\n          Since `RLPx` protocol version 68, the byte size of a transaction is shared as metadata in a\n          transaction announcement (see `RLPx` specs). This allows a node to request a specific size\n          response.\n\n          By default, nodes request only 128 KiB worth of transactions, but should a peer request\n          more, up to 2 MiB, a node will answer with more than 128 KiB.\n\n          Default is 128 KiB.\n\n          [default: 131072]\n\n      --max-tx-pending-fetch <COUNT>\n          Max capacity of cache of hashes for transactions pending fetch.\n\n          [default: 25600]\n\n      --net-if.experimental <IF_NAME>\n          Name of network interface used to communicate with peers.\n\n          If flag is set, but no value is passed, the default interface for docker `eth0` is tried.\n\n      --tx-propagation-policy <TX_PROPAGATION_POLICY>\n          Transaction Propagation Policy\n\n          The policy determines which peers transactions are gossiped to.\n\n          [default: All]\n\nDatadir:\n      --datadir <DATA_DIR>\n          The path to the data dir for all reth files and subdirectories.\n\n          Defaults to the OS-specific data directory:\n\n          - Linux: `$XDG_DATA_HOME/reth/` or `$HOME/.local/share/reth/`\n          - Windows: `{FOLDERID_RoamingAppData}/reth/`\n          - macOS: `$HOME/Library/Application Support/reth/`\n\n          [default: default]\n\n      --datadir.static-files <PATH>\n          The absolute path to store static files in.\n\nDatabase:\n      --db.log-level <LOG_LEVEL>\n          Database logging level. Levels higher than \"notice\" require a debug build\n\n          Possible values:\n          - fatal:   Enables logging for critical conditions, i.e. assertion failures\n          - error:   Enables logging for error conditions\n          - warn:    Enables logging for warning conditions\n          - notice:  Enables logging for normal but significant condition\n          - verbose: Enables logging for verbose informational\n          - debug:   Enables logging for debug-level messages\n          - trace:   Enables logging for trace debug-level messages\n          - extra:   Enables logging for extra debug-level messages\n\n      --db.exclusive <EXCLUSIVE>\n          Open environment in exclusive/monopolistic mode. Makes it possible to open a database on an NFS volume\n\n          [possible values: true, false]\n\n      --db.max-size <MAX_SIZE>\n          Maximum database size (e.g., 4TB, 8MB)\n\n      --db.growth-step <GROWTH_STEP>\n          Database growth step (e.g., 4GB, 4KB)\n\n      --db.read-transaction-timeout <READ_TRANSACTION_TIMEOUT>\n          Read transaction timeout in seconds, 0 means no timeout\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n```\n\n----------------------------------------\n\nTITLE: Executing trace_replayTransaction in JavaScript\nDESCRIPTION: Shows how to use the trace_replayTransaction method, which replays a transaction and returns the traces. It takes a transaction hash and trace types as parameters.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/trace.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// > {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"trace_replayTransaction\",\"params\":[\"0x02d4a872e096445e80d05276ee756cefef7f3b376bcec14246469c0cd97dad8f\",[\"trace\"]]}\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"output\": \"0x\",\n        \"stateDiff\": null,\n        \"trace\": [{\n            \"action\": { ... },\n            \"result\": {\n                \"gasUsed\": \"0x0\",\n                \"output\": \"0x\"\n            },\n            \"subtraces\": 0,\n            \"traceAddress\": [],\n            \"type\": \"call\"\n        }],\n        \"vmTrace\": null\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Ethereum Traces with trace_filter Method in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the trace_filter method to query Ethereum traces. It shows the JSON-RPC request format with filter parameters and the expected response structure containing trace information.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/trace.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// > {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"trace_filter\",\"params\":[{\"fromBlock\":\"0x2ed0c4\",\"toBlock\":\"0x2ed128\",\"toAddress\":[\"0x8bbB73BCB5d553B5A556358d27625323Fd781D37\"],\"after\":1000,\"count\":100}]}\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": [\n        {\n            \"action\": {\n                \"callType\": \"call\",\n                \"from\": \"0x32be343b94f860124dc4fee278fdcbd38c102d88\",\n                \"gas\": \"0x4c40d\",\n                \"input\": \"0x\",\n                \"to\": \"0x8bbb73bcb5d553b5a556358d27625323fd781d37\",\n                \"value\": \"0x3f0650ec47fd240000\"\n            },\n            \"blockHash\": \"0x86df301bcdd8248d982dbf039f09faf792684e1aeee99d5b58b77d620008b80f\",\n            \"blockNumber\": 3068183,\n            \"result\": {\n                \"gasUsed\": \"0x0\",\n                \"output\": \"0x\"\n            },\n            \"subtraces\": 0,\n            \"traceAddress\": [],\n            \"transactionHash\": \"0x3321a7708b1083130bd78da0d62ead9f6683033231617c9d268e2c7e3fa6c104\",\n            \"transactionPosition\": 3,\n            \"type\": \"call\"\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Tracing Block by Hash using debug_traceBlockByHash RPC Method\nDESCRIPTION: Similar to debug_traceBlock, but accepts a block hash and replays the block already present in the database. The method is invoked via RPC with block hash and options parameters.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/debug.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\"method\": \"debug_traceBlockByHash\", \"params\": [block_hash, opts]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Peer Reputation Weights in Reth (TOML)\nDESCRIPTION: Defines reputation penalties for various peer misbehaviors in Reth. Penalties are applied to peer reputation scores, with disconnection occurring if the score falls below a threshold. This configuration helps maintain network integrity by discouraging and penalizing malicious behavior.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/config.md#2025-04-16_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[peers.reputation_weights]\nbad_message = -16384\nbad_block = -16384\nbad_transactions = -16384\nalready_seen_transactions = 0\ntimeout = -4096\nbad_protocol = -2147483648\nfailed_to_connect = -25600\ndropped = -4096\n```\n\n----------------------------------------\n\nTITLE: TransactionsHandle for Controlling Transaction Manager\nDESCRIPTION: Definition of the TransactionsHandle struct that provides a shareable interface to control the TransactionsManager. It allows other components to send commands to the transaction manager via a channel.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_23\n\nLANGUAGE: rust\nCODE:\n```\npub struct TransactionsHandle {\n    /// Command channel to the [`TransactionsManager`]\n    manager_tx: mpsc::UnboundedSender<TransactionsCommand>,\n}\n```\n\n----------------------------------------\n\nTITLE: Running reth-bench for live sync benchmarking\nDESCRIPTION: Command to run the reth-bench tool with the new-payload-fcu command, which simulates mainnet live sync by alternating between engine_newPayload and engine_forkchoiceUpdated calls.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/bin/reth-bench/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nreth-bench new-payload-fcu --rpc-url <rpc-url> --from 21000000 --to <end_block> --jwtsecret <jwt_file_path>\n```\n\n----------------------------------------\n\nTITLE: Finishing State Root Calculation (Rust)\nDESCRIPTION: This snippet shows the final step of state root calculation, where the full state root hash is computed after exhausting the message channel and applying all updates.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/engine/tree/docs/root.md#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlet root = self.trie.root();\n```\n\n----------------------------------------\n\nTITLE: Entity-Relationship Diagram for Reth Database Tables\nDESCRIPTION: A Mermaid diagram illustrating the table layout and relationships in Reth's database. It shows various tables for storing blockchain data such as headers, transactions, accounts, and storage, along with their primary keys and relationships.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/design/database.md#2025-04-16_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\nCanonicalHeaders {\n    u64 BlockNumber \"PK\"\n    B256 HeaderHash \"Value for CanonicalHeaders\"\n}\nHeaderNumbers {\n    B256 BlockHash \"PK\"\n    u64 BlockNumber\n}\nHeaders {\n    u64 BlockNumber \"PK\"\n    Header Data\n}\nBlockBodyIndices {\n    u64 BlockNumber \"PK\"\n    u64 first_tx_num\n    u64 tx_count\n}\nBlockOmmers {\n    u64 BlockNumber \"PK\"\n    Header[] Ommers\n}\nBlockWithdrawals {\n    u64 BlockNumber \"PK\"\n    Withdrawal[] Withdrawals\n}\nTransactions {\n    u64 TxNumber \"PK\"\n    TransactionSigned Data\n}\nTransactionHashNumbers {\n    B256 TxHash \"PK\"\n    u64 TxNumber\n}\nTransactionBlocks {\n    u64 MaxTxNumber \"PK\"\n    u64 BlockNumber\n}\nReceipts {\n    u64 TxNumber \"PK\"\n    Receipt Data\n}\nBytecodes {\n    B256 CodeHash \"PK\"\n    Bytes Code\n}\nPlainAccountState {\n    Address Account \"PK\"\n    Account Data\n}\nPlainStorageState {\n    Address Account \"PK\"\n    B256 StorageKey \"PK\"\n    U256 StorageValue\n}\nAccountsHistory {\n    B256 Account \"PK\"\n    BlockNumberList BlockNumberList \"List of transitions where account was changed\"\n}\nStoragesHistory {\n    B256 Account \"PK\"\n    B256 StorageKey \"PK\"\n    BlockNumberList BlockNumberList \"List of transitions where account storage entry was changed\"\n}\nAccountChangeSets {\n    u64 BlockNumber \"PK\"\n    B256 Account \"PK\"\n    ChangeSet AccountChangeSets \"Account before transition\"\n}\nStorageChangeSets {\n    u64 BlockNumber \"PK\"\n    B256 Account \"PK\"\n    B256 StorageKey \"PK\"\n    ChangeSet StorageChangeSets \"Storage entry before transition\"\n}\nHashedAccounts {\n    B256 HashedAddress \"PK\"\n    Account Data\n}\nHashedStorages {\n    B256 HashedAddress \"PK\"\n    B256 HashedStorageKey \"PK\"\n    U256 StorageValue\n}\nAccountsTrie {\n    StoredNibbles Nibbles \"PK\"\n    BranchNodeCompact Node\n}\nStoragesTrie {\n    B256 HashedAddress \"PK\"\n    StoredNibblesSubKey NibblesSubKey \"PK\"\n    StorageTrieEntry Node\n}\nTransactionSenders {\n    u64 TxNumber \"PK\"\n    Address Sender\n}\nTransactionHashNumbers ||--|| Transactions : \"hash -> tx id\"\nTransactionBlocks ||--|{ Transactions : \"tx id -> block number\"\nBlockBodyIndices ||--o{ Transactions : \"block number -> tx ids\"\nHeaders ||--o{ AccountChangeSets : \"each block has zero or more changesets\"\nHeaders ||--o{ StorageChangeSets : \"each block has zero or more changesets\"\nAccountsHistory }|--|{ AccountChangeSets : index\nStoragesHistory }|--|{ StorageChangeSets : index\nHeaders ||--o| BlockOmmers : \"each block has 0 or more ommers\"\nBlockBodyIndices ||--|| Headers : \"index\"\nHeaderNumbers |o--|| Headers : \"block hash -> block number\"\nCanonicalHeaders |o--|| Headers : \"canonical chain block number -> block hash\"\nTransactions ||--|| Receipts : \"each tx has a receipt\"\nPlainAccountState }o--o| Bytecodes : \"an account can have a bytecode\"\nPlainAccountState ||--o{ PlainStorageState : \"an account has 0 or more storage slots\"\nTransactions ||--|| TransactionSenders : \"a tx has exactly 1 sender\"\n\nPlainAccountState ||--|| HashedAccounts : \"hashed representation\"\nPlainStorageState ||--|| HashedStorages : \"hashed representation\"\n```\n\n----------------------------------------\n\nTITLE: Building Reth with additional features\nDESCRIPTION: Command to build Reth with maximum performance optimizations and additional features like jemalloc and asm-keccak.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/source.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nRUSTFLAGS=\"-C target-cpu=native\" cargo build --profile maxperf --features jemalloc,asm-keccak\n```\n\n----------------------------------------\n\nTITLE: Setting Pruning Options in reth\nDESCRIPTION: Extensive options for configuring pruning behavior for various data types including sender recovery, transaction lookup, receipts, account history, and storage history.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/node.md#2025-04-16_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n--full\n--block-interval <BLOCK_INTERVAL>\n--prune.senderrecovery.full\n--prune.senderrecovery.distance <BLOCKS>\n--prune.senderrecovery.before <BLOCK_NUMBER>\n--prune.transactionlookup.full\n--prune.transactionlookup.distance <BLOCKS>\n--prune.transactionlookup.before <BLOCK_NUMBER>\n--prune.receipts.full\n--prune.receipts.distance <BLOCKS>\n--prune.receipts.before <BLOCK_NUMBER>\n--prune.accounthistory.full\n--prune.accounthistory.distance <BLOCKS>\n--prune.accounthistory.before <BLOCK_NUMBER>\n--prune.storagehistory.full\n--prune.storagehistory.distance <BLOCKS>\n--prune.storagehistory.before <BLOCK_NUMBER>\n--prune.receiptslogfilter <FILTER_CONFIG>\n```\n\n----------------------------------------\n\nTITLE: Executing trace_block in JavaScript\nDESCRIPTION: Illustrates the usage of trace_block method, which returns traces created at a given block. It takes a block identifier as a parameter.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/trace.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// > {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"trace_block\",\"params\":[\"0x2ed119\"]}\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": [\n        {\n            \"action\": {\n                \"callType\": \"call\",\n                \"from\": \"0xaa7b131dc60b80d3cf5e59b5a21a666aa039c951\",\n                \"gas\": \"0x0\",\n                \"input\": \"0x\",\n                \"to\": \"0xd40aba8166a212d6892125f079c33e6f5ca19814\",\n                \"value\": \"0x4768d7effc3fbe\"\n            },\n            \"blockHash\": \"0x7eb25504e4c202cf3d62fd585d3e238f592c780cca82dacb2ed3cb5b38883add\",\n            \"blockNumber\": 3068185,\n            \"result\": {\n                \"gasUsed\": \"0x0\",\n                \"output\": \"0x\"\n            },\n            \"subtraces\": 0,\n            \"traceAddress\": [],\n            \"transactionHash\": \"0x07da28d752aba3b9dd7060005e554719c6205c8a3aea358599fc9b245c52f1f6\",\n            \"transactionPosition\": 0,\n            \"type\": \"call\"\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Swarm Struct Definition in Reth\nDESCRIPTION: The Swarm struct is a key component in Reth's network management, handling incoming connections, session management, and network state tracking. It emits events to the NetworkManager and routes commands between SessionManager and NetworkState.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\npub(crate) struct Swarm<C> {\n    /// Listens for new incoming connections.\n    incoming: ConnectionListener,\n    /// All sessions.\n    sessions: SessionManager,\n    /// Tracks the entire state of the network and handles events received from the sessions.\n    state: NetworkState<C>,\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Legacy Transaction Parameters in Markdown\nDESCRIPTION: Lists the parameters included in Legacy Transactions (type 0x0), which are the traditional Ethereum transactions used since the network's inception.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/transactions.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `nonce`,\n- `gasPrice`,\n- `gasLimit`,\n- `to`,\n- `value`,\n- `data`,\n- `v`,\n- `r`,\n- `s`.\n```\n\n----------------------------------------\n\nTITLE: Enabling All JSON-RPC APIs on HTTP Transport\nDESCRIPTION: Command to enable all JSON-RPC API namespaces for HTTP access, required for using tools like Foundry's cast.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/intro.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nreth node --http --http.api \"admin,debug,eth,net,trace,txpool,web3,rpc\"\n```\n\n----------------------------------------\n\nTITLE: Defining DbTxMut Trait in Rust\nDESCRIPTION: Defines the DbTxMut trait for read-write transactions, including methods for putting and deleting values, clearing tables, and creating mutable cursors.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/db.md#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub trait DbTxMut: Send + Sync {\n    type CursorMut<T: Table>: DbCursorRW<T> + DbCursorRO<T> + Send + Sync;\n    type DupCursorMut<T: DupSort>: DbDupCursorRW<T>\n        + DbCursorRW<T>\n        + DbDupCursorRO<T>\n        + DbCursorRO<T>\n        + Send\n        + Sync;\n\n    fn put<T: Table>(&self, key: T::Key, value: T::Value) -> Result<(), DatabaseError>;\n    fn delete<T: Table>(&self, key: T::Key, value: Option<T::Value>) -> Result<bool, DatabaseError>;\n    fn clear<T: Table>(&self) -> Result<(), DatabaseError>;\n    fn cursor_write<T: Table>(&self) -> Result<Self::CursorMut<T>, DatabaseError>;\n    fn cursor_dup_write<T: DupSort>(&self) -> Result<Self::DupCursorMut<T>, DatabaseError>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Granular Receipt Pruning with Log Filtering in Reth (TOML)\nDESCRIPTION: Sets up a detailed receipt pruning configuration in Reth using log filtering. This allows for selective retention of receipts based on specific contract addresses and block ranges, enabling more precise control over receipt data storage.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/config.md#2025-04-16_snippet_18\n\nLANGUAGE: toml\nCODE:\n```\n[prune.segments.receipts_log_filter]\n\"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\" = { before = 17000000 }\n\"0xdac17f958d2ee523a2206206994597c13d831ec7\" = { distance = 1000 }\n```\n\n----------------------------------------\n\nTITLE: Reth Init-State Command Usage and Options\nDESCRIPTION: Comprehensive documentation of all available options and configurations for the reth init-state command, including datadir settings, database configurations, logging options, and display preferences\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/init-state.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth init-state [OPTIONS] <STATE_DUMP_FILE>\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --datadir <DATA_DIR>\n          The path to the data dir for all reth files and subdirectories.\n\n          Defaults to the OS-specific data directory:\n\n          - Linux: `$XDG_DATA_HOME/reth/` or `$HOME/.local/share/reth/`\n          - Windows: `{FOLDERID_RoamingAppData}/reth/`\n          - macOS: `$HOME/Library/Application Support/reth/`\n\n          [default: default]\n\n      --datadir.static-files <PATH>\n          The absolute path to store static files in.\n\n      --config <FILE>\n          The path to the configuration file to use\n\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nDatabase:\n      --db.log-level <LOG_LEVEL>\n          Database logging level. Levels higher than \"notice\" require a debug build\n\n          Possible values:\n          - fatal:   Enables logging for critical conditions, i.e. assertion failures\n          - error:   Enables logging for error conditions\n          - warn:    Enables logging for warning conditions\n          - notice:  Enables logging for normal but significant condition\n          - verbose: Enables logging for verbose informational\n          - debug:   Enables logging for debug-level messages\n          - trace:   Enables logging for trace debug-level messages\n          - extra:   Enables logging for extra debug-level messages\n\n      --db.exclusive <EXCLUSIVE>\n          Open environment in exclusive/monopolistic mode. Makes it possible to open a database on an NFS volume\n\n          [possible values: true, false]\n\n      --db.max-size <MAX_SIZE>\n          Maximum database size (e.g., 4TB, 8MB)\n\n      --db.growth-step <GROWTH_STEP>\n          Database growth step (e.g., 4GB, 4KB)\n\n      --db.read-transaction-timeout <READ_TRANSACTION_TIMEOUT>\n          Read transaction timeout in seconds, 0 means no timeout\n\n      --without-evm\n          Specifies whether to initialize the state without relying on EVM historical data.\n\n          When enabled, and before inserting the state, it creates a dummy chain up to the last EVM block specified. It then, appends the first block provided block.\n\n          - **Note**: **Do not** import receipts and blocks beforehand, or this will fail or be ignored.\n\n      --header <HEADER_FILE>\n          Header file containing the header in an RLP encoded format.\n\n      --total-difficulty <TOTAL_DIFFICULTY>\n          Total difficulty of the header.\n\n      --header-hash <HEADER_HASH>\n          Hash of the header.\n\n  <STATE_DUMP_FILE>\n          JSONL file with state dump.\n\n          Must contain accounts in following format, additional account fields are ignored. Must\n          also contain { \"root\": \\<state-root\\> } as first line.\n          {\n              \"balance\": \"\\<balance\\>\",\n              \"nonce\": \\<nonce\\>,\n              \"code\": \"\\<bytecode\\>\",\n              \"storage\": {\n                  \"\\<key\\>\": \"\\<value\\>\",\n                  ..\n              },\n              \"address\": \"\\<address\\>\",\n          }\n\n          Allows init at a non-genesis block. Caution! Blocks must be manually imported up until\n          and including the non-genesis block to init chain at. See 'import' command.\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Hashing Stage in Reth\nDESCRIPTION: Settings for the storage hashing stage which creates a secondary table of account storage using hashed keys. Includes clean threshold for full rebuilds and commit threshold for disk writes.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/config.md#2025-04-16_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[stages.storage_hashing]\n# The threshold in number of blocks before the stage starts from scratch\n# and re-hashes all storages as opposed to just the storages that changed.\nclean_threshold = 500000\n# The amount of storage slots to process before writing the results to disk.\n#\n# Lower thresholds correspond to more frequent disk I/O (writes),\n# but lowers memory usage\ncommit_threshold = 100000\n```\n\n----------------------------------------\n\nTITLE: Using DbTxMut for Inserting Values in Rust\nDESCRIPTION: Shows how to use DbTxMut::put() method to insert values into multiple tables in a database transaction.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/db.md#2025-04-16_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nself.tx.put::<tables::CanonicalHeaders>(block_number, block.hash())?;\nself.tx.put::<tables::Headers>(block_number, block.header.as_ref().clone())?;\nself.tx.put::<tables::HeaderNumbers>(block.hash(), block_number)?;\n```\n\n----------------------------------------\n\nTITLE: Executing trace_callMany in JavaScript\nDESCRIPTION: Shows how to use the trace_callMany method, which performs multiple call traces on top of the same block. It takes an array of call traces and an optional block identifier as parameters.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/trace.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// > {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"trace_callMany\",\"params\":[[[{\"from\":\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\"to\":\"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\",\"value\":\"0x186a0\"},[\"trace\"]],[{\"from\":\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\"to\":\"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\",\"value\":\"0x186a0\"},[\"trace\"]]],\"latest\"]}\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": [\n        {\n            \"output\": \"0x\",\n            \"stateDiff\": null,\n            \"trace\": [{\n                \"action\": {\n                    \"callType\": \"call\",\n                    \"from\": \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n                    \"gas\": \"0x1dcd12f8\",\n                    \"input\": \"0x\",\n                    \"to\": \"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\",\n                    \"value\": \"0x186a0\"\n                },\n                \"result\": {\n                    \"gasUsed\": \"0x0\",\n                    \"output\": \"0x\"\n                },\n                \"subtraces\": 0,\n                \"traceAddress\": [],\n                \"type\": \"call\"\n            }],\n            \"vmTrace\": null\n        },\n        {\n            \"output\": \"0x\",\n            \"stateDiff\": null,\n            \"trace\": [{\n                \"action\": {\n                    \"callType\": \"call\",\n                    \"from\": \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n                    \"gas\": \"0x1dcd12f8\",\n                    \"input\": \"0x\",\n                    \"to\": \"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\",\n                    \"value\": \"0x186a0\"\n                },\n                \"result\": {\n                    \"gasUsed\": \"0x0\",\n                    \"output\": \"0x\"\n                },\n                \"subtraces\": 0,\n                \"traceAddress\": [],\n                \"type\": \"call\"\n            }],\n            \"vmTrace\": null\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching All Traces of a Transaction with trace_transaction Method in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the trace_transaction method to retrieve all traces of a given transaction. It shows the JSON-RPC request format with the transaction hash and the expected response structure containing an array of trace information.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/trace.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// > {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"trace_transaction\",\"params\":[\"0x17104ac9d3312d8c136b7f44d4b8b47852618065ebfa534bd2d3b5ef218ca1f3\"]}\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": [\n        {\n            \"action\": {\n                \"callType\": \"call\",\n                \"from\": \"0x1c39ba39e4735cb65978d4db400ddd70a72dc750\",\n                \"gas\": \"0x13e99\",\n                \"input\": \"0x16c72721\",\n                \"to\": \"0x2bd2326c993dfaef84f696526064ff22eba5b362\",\n                \"value\": \"0x0\"\n            },\n            \"blockHash\": \"0x7eb25504e4c202cf3d62fd585d3e238f592c780cca82dacb2ed3cb5b38883add\",\n            \"blockNumber\": 3068185,\n            \"result\": {\n                \"gasUsed\": \"0x183\",\n                \"output\": \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n            },\n            \"subtraces\": 0,\n            \"traceAddress\": [\n                0\n            ],\n            \"transactionHash\": \"0x17104ac9d3312d8c136b7f44d4b8b47852618065ebfa534bd2d3b5ef218ca1f3\",\n            \"transactionPosition\": 2,\n            \"type\": \"call\"\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Peer Event Types Definition in Rust\nDESCRIPTION: Enum definition for PeerEvent that handles different peer lifecycle events in the network.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_26\n\nLANGUAGE: rust\nCODE:\n```\npub enum PeerEvent {\n    /// Closed the peer session.\n    SessionClosed {\n        /// The identifier of the peer to which a session was closed.\n        peer_id: PeerId,\n        /// Why the disconnect was triggered\n        reason: Option<DisconnectReason>,\n    },\n    /// Established a new session with the given peer.\n    SessionEstablished(SessionInfo),\n    /// Event emitted when a new peer is added\n    PeerAdded(PeerId),\n    /// Event emitted when a new peer is removed\n    PeerRemoved(PeerId),\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Reth release signing key using GPG\nDESCRIPTION: Command to fetch the Reth release signing key from the Ubuntu keyserver using GPG for signature verification.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/binaries.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngpg --keyserver keyserver.ubuntu.com --recv-keys 50FB7CC55B2E8AFA59FE03B7AA5ED56A7FBF253E\n```\n\n----------------------------------------\n\nTITLE: Defining DbTx Trait in Rust\nDESCRIPTION: Defines the DbTx trait for read-only transactions, including methods for getting values, committing transactions, and creating cursors.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/db.md#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\npub trait DbTx: Send + Sync {\n    type Cursor<T: Table>: DbCursorRO<T> + Send + Sync;\n    type DupCursor<T: DupSort>: DbDupCursorRO<T> + DbCursorRO<T> + Send + Sync;\n\n    fn get<T: Table>(&self, key: T::Key) -> Result<Option<T::Value>, DatabaseError>;\n    fn commit(self) -> Result<bool, DatabaseError>;\n    fn abort(self);\n    fn cursor_read<T: Table>(&self) -> Result<Self::Cursor<T>, DatabaseError>;\n    fn cursor_dup_read<T: DupSort>(&self) -> Result<Self::DupCursor<T>, DatabaseError>;\n    fn entries<T: Table>(&self) -> Result<usize, DatabaseError>;\n    fn disable_long_read_transaction_safety(&mut self);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reth as a Pruned Node with Custom Settings\nDESCRIPTION: TOML configuration for a pruned node that simulates full node behavior. This configuration prunes specific segments including sender recovery, receipts (except for Beacon Deposit Contract logs), and account/storage history beyond the last 10064 blocks.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/pruning.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[prune]\nblock_interval = 5\n\n[prune.segments]\nsender_recovery = \"full\"\n# transaction_lookup is not pruned\nreceipts = { before = 11052984 } # Beacon Deposit Contract deployment block: https://etherscan.io/tx/0xe75fb554e433e03763a1560646ee22dcb74e5274b34c5ad644e7c0f619a7e1d0\naccount_history = { distance = 10_064 }\nstorage_history = { distance = 10_064 }\n\n[prune.segments.receipts_log_filter]\n# Prune all receipts, leaving only those which contain logs from address `0x00000000219ab540356cbb839cbe05303d7705fa`,\n# starting from the block 11052984. This leaves receipts with the logs from the Beacon Deposit Contract.\n\"0x00000000219ab540356cbb839cbe05303d7705fa\" = { before = 11052984 }\n```\n\n----------------------------------------\n\nTITLE: Reth Debug Execution Help Output\nDESCRIPTION: Complete help output showing all available options and configurations for the reth debug execution command, including datadir settings, database configurations, networking options, and logging parameters.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug/execution.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth debug execution [OPTIONS] --to <TO>\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --datadir <DATA_DIR>\n          The path to the data dir for all reth files and subdirectories.\n\n          Defaults to the OS-specific data directory:\n\n          - Linux: `$XDG_DATA_HOME/reth/` or `$HOME/.local/share/reth/`\n          - Windows: `{FOLDERID_RoamingAppData}/reth/`\n          - macOS: `$HOME/Library/Application Support/reth/`\n\n          [default: default]\n\n      --datadir.static-files <PATH>\n          The absolute path to store static files in.\n\n      --config <FILE>\n          The path to the configuration file to use\n\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nDatabase:\n      --db.log-level <LOG_LEVEL>\n          Database logging level. Levels higher than \"notice\" require a debug build\n\n          Possible values:\n          - fatal:   Enables logging for critical conditions, i.e. assertion failures\n          - error:   Enables logging for error conditions\n          - warn:    Enables logging for warning conditions\n          - notice:  Enables logging for normal but significant condition\n          - verbose: Enables logging for verbose informational\n          - debug:   Enables logging for debug-level messages\n          - trace:   Enables logging for trace debug-level messages\n          - extra:   Enables logging for extra debug-level messages\n\n      --db.exclusive <EXCLUSIVE>\n          Open environment in exclusive/monopolistic mode. Makes it possible to open a database on an NFS volume\n\n          [possible values: true, false]\n\n      --db.max-size <MAX_SIZE>\n          Maximum database size (e.g., 4TB, 8MB)\n\n      --db.growth-step <GROWTH_STEP>\n          Database growth step (e.g., 4GB, 4KB)\n\n      --db.read-transaction-timeout <READ_TRANSACTION_TIMEOUT>\n          Read transaction timeout in seconds, 0 means no timeout\n\nNetworking:\n  -d, --disable-discovery\n          Disable the discovery service\n\n      --disable-dns-discovery\n          Disable the DNS discovery\n\n      --disable-discv4-discovery\n          Disable Discv4 discovery\n\n      --enable-discv5-discovery\n          Enable Discv5 discovery\n\n      --disable-nat\n          Disable Nat discovery\n\n      --discovery.addr <DISCOVERY_ADDR>\n          The UDP address to use for devp2p peer discovery version 4\n\n          [default: 0.0.0.0]\n\n      --discovery.port <DISCOVERY_PORT>\n          The UDP port to use for devp2p peer discovery version 4\n\n          [default: 30303]\n\n      --discovery.v5.addr <DISCOVERY_V5_ADDR>\n          The UDP IPv4 address to use for devp2p peer discovery version 5. Overwritten by `RLPx` address, if it's also IPv4\n\n      --discovery.v5.addr.ipv6 <DISCOVERY_V5_ADDR_IPV6>\n          The UDP IPv6 address to use for devp2p peer discovery version 5. Overwritten by `RLPx` address, if it's also IPv6\n\n      --discovery.v5.port <DISCOVERY_V5_PORT>\n          The UDP IPv4 port to use for devp2p peer discovery version 5. Not used unless `--addr` is IPv4, or `--discovery.v5.addr` is set\n\n          [default: 9200]\n\n      --discovery.v5.port.ipv6 <DISCOVERY_V5_PORT_IPV6>\n          The UDP IPv6 port to use for devp2p peer discovery version 5. Not used unless `--addr` is IPv6, or `--discovery.addr.ipv6` is set\n\n          [default: 9200]\n\n      --discovery.v5.lookup-interval <DISCOVERY_V5_LOOKUP_INTERVAL>\n          The interval in seconds at which to carry out periodic lookup queries, for the whole run of the program\n\n          [default: 20]\n\n      --discovery.v5.bootstrap.lookup-interval <DISCOVERY_V5_BOOTSTRAP_LOOKUP_INTERVAL>\n          The interval in seconds at which to carry out boost lookup queries, for a fixed number of times, at bootstrap\n\n          [default: 5]\n\n      --discovery.v5.bootstrap.lookup-countdown <DISCOVERY_V5_BOOTSTRAP_LOOKUP_COUNTDOWN>\n          The number of times to carry out boost lookup queries at bootstrap\n\n          [default: 200]\n\n      --trusted-peers <TRUSTED_PEERS>\n          Comma separated enode URLs of trusted peers for P2P connections.\n\n          --trusted-peers enode://abcd@192.168.0.1:30303\n\n      --trusted-only\n          Connect to or accept from trusted peers only\n\n      --bootnodes <BOOTNODES>\n          Comma separated enode URLs for P2P discovery bootstrap.\n\n          Will fall back to a network-specific default if not specified.\n\n      --dns-retries <DNS_RETRIES>\n          Amount of DNS resolution requests retries to perform when peering\n\n          [default: 0]\n\n      --peers-file <FILE>\n          The path to the known peers file. Connected peers are dumped to this file on nodes\n          shutdown, and read on startup. Cannot be used with `--no-persist-peers`.\n\n      --identity <IDENTITY>\n          Custom node identity\n\n          [default: reth/<VERSION>-<SHA>/<ARCH>]\n\n      --p2p-secret-key <PATH>\n          Secret key to use for this node.\n\n          This will also deterministically set the peer ID. If not specified, it will be set in the data dir for the chain being used.\n\n      --no-persist-peers\n          Do not persist peers.\n\n      --nat <NAT>\n          NAT resolution method (any|none|upnp|publicip|extip:<IP>)\n\n          [default: any]\n\n      --addr <ADDR>\n          Network listening address\n\n          [default: 0.0.0.0]\n\n      --port <PORT>\n          Network listening port\n\n          [default: 30303]\n\n      --max-outbound-peers <MAX_OUTBOUND_PEERS>\n          Maximum number of outbound requests. default: 100\n\n      --max-inbound-peers <MAX_INBOUND_PEERS>\n          Maximum number of inbound requests. default: 30\n\n      --max-tx-reqs <COUNT>\n          Max concurrent `GetPooledTransactions` requests.\n\n          [default: 130]\n\n      --max-tx-reqs-peer <COUNT>\n          Max concurrent `GetPooledTransactions` requests per peer.\n\n          [default: 1]\n\n      --max-seen-tx-history <COUNT>\n          Max number of seen transactions to remember per peer.\n\n          Default is 320 transaction hashes.\n\n          [default: 320]\n\n      --max-pending-imports <COUNT>\n          Max number of transactions to import concurrently.\n\n          [default: 4096]\n\n      --pooled-tx-response-soft-limit <BYTES>\n          Experimental, for usage in research. Sets the max accumulated byte size of transactions\n          to pack in one response.\n          Spec'd at 2MiB.\n\n          [default: 2097152]\n\n      --pooled-tx-pack-soft-limit <BYTES>\n          Experimental, for usage in research. Sets the max accumulated byte size of transactions to\n          request in one request.\n\n          Since `RLPx` protocol version 68, the byte size of a transaction is shared as metadata in a\n          transaction announcement (see `RLPx` specs). This allows a node to request a specific size\n          response.\n\n          By default, nodes request only 128 KiB worth of transactions, but should a peer request\n          more, up to 2 MiB, a node will answer with more than 128 KiB.\n\n          Default is 128 KiB.\n\n          [default: 131072]\n\n      --max-tx-pending-fetch <COUNT>\n          Max capacity of cache of hashes for transactions pending fetch.\n\n          [default: 25600]\n\n      --net-if.experimental <IF_NAME>\n          Name of network interface used to communicate with peers.\n\n          If flag is set, but no value is passed, the default interface for docker `eth0` is tried.\n\n      --tx-propagation-policy <TX_PROPAGATION_POLICY>\n          Transaction Propagation Policy\n\n          The policy determines which peers transactions are gossiped to.\n\n          [default: All]\n\n      --to <TO>\n          The maximum block height\n\n      --interval <INTERVAL>\n          The block interval for sync and unwind. Defaults to `1000`\n\n          [default: 1000]\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n```\n\n----------------------------------------\n\nTITLE: Executing trace_call in JavaScript\nDESCRIPTION: Demonstrates how to call the trace_call method using JSON-RPC, which executes a given call and returns possible traces for it. The method takes a transaction object, trace types, and an optional block identifier as parameters.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/trace.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// > {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"trace_call\",\"params\":[{},['trace']]}\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"output\": \"0x\",\n        \"stateDiff\": null,\n        \"trace\": [{\n            \"action\": { ... },\n            \"result\": {\n                \"gasUsed\": \"0x0\",\n                \"output\": \"0x\"\n            },\n            \"subtraces\": 0,\n            \"traceAddress\": [],\n            \"type\": \"call\"\n        }],\n        \"vmTrace\": null\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Reth using Homebrew or Linuxbrew\nDESCRIPTION: Command to install Reth from Paradigm's homebrew tap using macOS Homebrew or Linuxbrew package managers.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/binaries.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nbrew install paradigmxyz/brew/reth\n```\n\n----------------------------------------\n\nTITLE: Implementing basic gRPC server structure\nDESCRIPTION: Initial implementation of a gRPC server that listens on port 10000 and integrates with Reth's NodeBuilder task executor.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/exex/remote.md#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../../sources/exex/remote/src/exex_1.rs}}\n```\n\n----------------------------------------\n\nTITLE: Integrating ExEx with Reth node\nDESCRIPTION: Final integration code that connects the ExEx to the Reth node and passes the notification channel to enable communication.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/exex/remote.md#2025-04-16_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../../sources/exex/remote/src/exex.rs:snippet}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Headers Stage in Reth\nDESCRIPTION: Configuration options for the headers stage which downloads historical headers and controls the primary P2P downloader. Parameters control request concurrency, buffer sizes, and commit thresholds to balance sync speed with memory usage.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/config.md#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[stages.headers]\n# The minimum and maximum number of concurrent requests to have in flight at a time.\n#\n# The downloader uses these as best effort targets, which means that the number\n# of requests may be outside of these thresholds within a reasonable degree.\n#\n# Increase these for faster sync speeds at the cost of additional bandwidth and memory\ndownloader_max_concurrent_requests = 100\ndownloader_min_concurrent_requests = 5\n# The maximum number of responses to buffer in the downloader at any one time.\n#\n# If the buffer is full, no more requests will be sent until room opens up.\n#\n# Increase the value for a larger buffer at the cost of additional memory consumption\ndownloader_max_buffered_responses = 100\n# The maximum number of headers to request from a peer at a time.\ndownloader_request_limit = 1000\n# The amount of headers to persist to disk at a time.\n#\n# Lower thresholds correspond to more frequent disk I/O (writes),\n# but lowers memory usage\ncommit_threshold = 10000\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific JSON-RPC Namespaces for HTTP Server\nDESCRIPTION: Command to start a Reth node with HTTP JSON-RPC server and specific API namespaces enabled.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/intro.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nreth node --http --http.api eth,net,trace\n```\n\n----------------------------------------\n\nTITLE: Using the reth test-vectors Command in Bash\nDESCRIPTION: A comprehensive help output for the 'reth test-vectors' command, showing all available options including chain configuration, instance management, and logging settings. The command supports generating test vectors for all tables or specific ones.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/test-vectors.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth test-vectors --help\nUsage: reth test-vectors [OPTIONS] <COMMAND>\n\nCommands:\n  tables  Generates test vectors for specified tables. If no table is specified, generate for all\n  help    Print this message or the help of the given subcommand(s)\n\nOptions:\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, dev\n\n          [default: mainnet]\n\n      --instance <INSTANCE>\n          Add a new instance of a node.\n\n          Configures the ports of the node to avoid conflicts with the defaults. This is useful for running multiple nodes on the same machine.\n\n          Max number of instances is 200. It is chosen in a way so that it's not possible to have port numbers that conflict with each other.\n\n          Changes to the following port numbers: - `DISCOVERY_PORT`: default + `instance` - 1 - `AUTH_PORT`: default + `instance` * 100 - 100 - `HTTP_RPC_PORT`: default - `instance` + 1 - `WS_RPC_PORT`: default + `instance` * 2 - 2\n\n          [default: 1]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Updating Sparse Trie with Accumulated Messages (Rust)\nDESCRIPTION: This code outlines the process of updating the Sparse Trie with accumulated messages, including revealing proofs, applying updates, and calculating roots for modified storage tries.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/engine/tree/docs/root.md#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nself.trie.reveal_proof(&proof)?;\n\nlet storage_roots = self.update_storage_tries(&updates)?;\n\nself.trie.update_accounts(&updates, &storage_roots)?;\n\nself.trie.calculate_hashes(MAX_HASH_CALCULATION_DEPTH);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Data Pruning in Reth (TOML)\nDESCRIPTION: Demonstrates a custom pruning configuration for Reth, specifying pruning intervals and retention policies for different data segments. This setup allows for fine-grained control over data retention, balancing storage requirements with data availability needs.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/config.md#2025-04-16_snippet_17\n\nLANGUAGE: toml\nCODE:\n```\n[prune]\nblock_interval = 5\n\n[prune.segments]\nsender_recovery = { distance = 100_000 }\ntransaction_lookup = \"full\"\nreceipts = { before = 1920000 }\naccount_history = { distance = 100_000 }\nstorage_history = { distance = 100_000 }\n```\n\n----------------------------------------\n\nTITLE: Enabling All JSON-RPC Namespaces for HTTP Server (lowercase)\nDESCRIPTION: Command to enable all available JSON-RPC namespaces on the HTTP server using the 'all' shorthand.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/intro.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nreth node --http --http.api all\n```\n\n----------------------------------------\n\nTITLE: Handling GetBlockBodies Requests in Reth\nDESCRIPTION: Implementation of the handler for GetBlockBodies requests. It retrieves block bodies (transactions and ommers) for the requested block hashes while enforcing limits on response size and body count.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\nfn on_bodies_request(\n    &mut self,\n    _peer_id: PeerId,\n    request: GetBlockBodies,\n    response: oneshot::Sender<RequestResult<BlockBodies>>,\n) {\n    let mut bodies = Vec::new();\n\n    let mut total_bytes = APPROX_BODY_SIZE;\n\n    for hash in request.0 {\n        if let Some(block) = self.client.block(hash.into()).unwrap_or_default() {\n            let body = BlockBody { transactions: block.body, ommers: block.ommers };\n\n            bodies.push(body);\n\n            total_bytes += APPROX_BODY_SIZE;\n\n            if total_bytes > SOFT_RESPONSE_LIMIT {\n                break\n            }\n\n            if bodies.len() >= MAX_BODIES_SERVE {\n                break\n            }\n        } else {\n            break\n        }\n    }\n\n    let _ = response.send(Ok(BlockBodies(bodies)));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Buffer Sizes in Reth (TOML)\nDESCRIPTION: Sets the buffer sizes for incoming and outgoing messages in peer-to-peer connections for Reth. This configuration limits the number of pending events and commands each session can hold, affecting memory usage and message processing behavior.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/config.md#2025-04-16_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\n[sessions]\nsession_command_buffer = 32\nsession_event_buffer = 260\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev Testnet Mode in reth\nDESCRIPTION: Options for running reth in development mode, including block time and maximum transactions per block settings.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/node.md#2025-04-16_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n--dev\n--dev.block-max-transactions <BLOCK_MAX_TRANSACTIONS>\n--dev.block-time <BLOCK_TIME>\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Struct in Rust\nDESCRIPTION: Defines a Transaction struct that uses a generic Database type, and implements a method to open a new inner transaction.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/db.md#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\npub struct Transaction<'this, DB: Database> {\n    pub(crate) db: &'this DB,\n    tx: Option<<DB as Database>::TXMut>,\n}\n\nimpl<'this, DB> Transaction<'this, DB>\nwhere\n    DB: Database,\n{\n    pub fn open(&mut self) -> Result<(), Error> {\n        self.tx = Some(self.db.tx_mut()?);\n        Ok(())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running op-node rollup node with op-reth\nDESCRIPTION: Command to start the op-node rollup node connecting to the op-reth execution layer and an L1 node. This configures the op-node for Base Mainnet with execution layer sync mode.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/optimism.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nop-node \\\n    --network=\"base-mainnet\" \\\n    --l1=<your-L1-rpc> \\\n    --l2=http://localhost:9551 \\\n    --l2.jwt-secret=/path/to/jwt.hex \\\n    --rpc.addr=0.0.0.0 \\\n    --rpc.port=7000 \\\n    --l1.beacon=<your-beacon-node-http-endpoint>\n    --syncmode=execution-layer\n    --l2.enginekind=reth\n```\n\n----------------------------------------\n\nTITLE: Help output for reth debug in-memory-merkle command\nDESCRIPTION: Comprehensive help output detailing all available options for the reth debug in-memory-merkle command, including data directory configuration, database settings, networking parameters, and logging options.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug/in-memory-merkle.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth debug in-memory-merkle [OPTIONS]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --datadir <DATA_DIR>\n          The path to the data dir for all reth files and subdirectories.\n\n          Defaults to the OS-specific data directory:\n\n          - Linux: `$XDG_DATA_HOME/reth/` or `$HOME/.local/share/reth/`\n          - Windows: `{FOLDERID_RoamingAppData}/reth/`\n          - macOS: `$HOME/Library/Application Support/reth/`\n\n          [default: default]\n\n      --datadir.static-files <PATH>\n          The absolute path to store static files in.\n\n      --config <FILE>\n          The path to the configuration file to use\n\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nDatabase:\n      --db.log-level <LOG_LEVEL>\n          Database logging level. Levels higher than \"notice\" require a debug build\n\n          Possible values:\n          - fatal:   Enables logging for critical conditions, i.e. assertion failures\n          - error:   Enables logging for error conditions\n          - warn:    Enables logging for warning conditions\n          - notice:  Enables logging for normal but significant condition\n          - verbose: Enables logging for verbose informational\n          - debug:   Enables logging for debug-level messages\n          - trace:   Enables logging for trace debug-level messages\n          - extra:   Enables logging for extra debug-level messages\n\n      --db.exclusive <EXCLUSIVE>\n          Open environment in exclusive/monopolistic mode. Makes it possible to open a database on an NFS volume\n\n          [possible values: true, false]\n\n      --db.max-size <MAX_SIZE>\n          Maximum database size (e.g., 4TB, 8MB)\n\n      --db.growth-step <GROWTH_STEP>\n          Database growth step (e.g., 4GB, 4KB)\n\n      --db.read-transaction-timeout <READ_TRANSACTION_TIMEOUT>\n          Read transaction timeout in seconds, 0 means no timeout\n\nNetworking:\n  -d, --disable-discovery\n          Disable the discovery service\n\n      --disable-dns-discovery\n          Disable the DNS discovery\n\n      --disable-discv4-discovery\n          Disable Discv4 discovery\n\n      --enable-discv5-discovery\n          Enable Discv5 discovery\n\n      --disable-nat\n          Disable Nat discovery\n\n      --discovery.addr <DISCOVERY_ADDR>\n          The UDP address to use for devp2p peer discovery version 4\n\n          [default: 0.0.0.0]\n\n      --discovery.port <DISCOVERY_PORT>\n          The UDP port to use for devp2p peer discovery version 4\n\n          [default: 30303]\n\n      --discovery.v5.addr <DISCOVERY_V5_ADDR>\n          The UDP IPv4 address to use for devp2p peer discovery version 5. Overwritten by `RLPx` address, if it's also IPv4\n\n      --discovery.v5.addr.ipv6 <DISCOVERY_V5_ADDR_IPV6>\n          The UDP IPv6 address to use for devp2p peer discovery version 5. Overwritten by `RLPx` address, if it's also IPv6\n\n      --discovery.v5.port <DISCOVERY_V5_PORT>\n          The UDP IPv4 port to use for devp2p peer discovery version 5. Not used unless `--addr` is IPv4, or `--discovery.v5.addr` is set\n\n          [default: 9200]\n\n      --discovery.v5.port.ipv6 <DISCOVERY_V5_PORT_IPV6>\n          The UDP IPv6 port to use for devp2p peer discovery version 5. Not used unless `--addr` is IPv6, or `--discovery.addr.ipv6` is set\n\n          [default: 9200]\n\n      --discovery.v5.lookup-interval <DISCOVERY_V5_LOOKUP_INTERVAL>\n          The interval in seconds at which to carry out periodic lookup queries, for the whole run of the program\n\n          [default: 20]\n\n      --discovery.v5.bootstrap.lookup-interval <DISCOVERY_V5_BOOTSTRAP_LOOKUP_INTERVAL>\n          The interval in seconds at which to carry out boost lookup queries, for a fixed number of times, at bootstrap\n\n          [default: 5]\n\n      --discovery.v5.bootstrap.lookup-countdown <DISCOVERY_V5_BOOTSTRAP_LOOKUP_COUNTDOWN>\n          The number of times to carry out boost lookup queries at bootstrap\n\n          [default: 200]\n\n      --trusted-peers <TRUSTED_PEERS>\n          Comma separated enode URLs of trusted peers for P2P connections.\n\n          --trusted-peers enode://abcd@192.168.0.1:30303\n\n      --trusted-only\n          Connect to or accept from trusted peers only\n\n      --bootnodes <BOOTNODES>\n          Comma separated enode URLs for P2P discovery bootstrap.\n\n          Will fall back to a network-specific default if not specified.\n\n      --dns-retries <DNS_RETRIES>\n          Amount of DNS resolution requests retries to perform when peering\n\n          [default: 0]\n\n      --peers-file <FILE>\n          The path to the known peers file. Connected peers are dumped to this file on nodes\n          shutdown, and read on startup. Cannot be used with `--no-persist-peers`.\n\n      --identity <IDENTITY>\n          Custom node identity\n\n          [default: reth/<VERSION>-<SHA>/<ARCH>]\n\n      --p2p-secret-key <PATH>\n          Secret key to use for this node.\n\n          This will also deterministically set the peer ID. If not specified, it will be set in the data dir for the chain being used.\n\n      --no-persist-peers\n          Do not persist peers.\n\n      --nat <NAT>\n          NAT resolution method (any|none|upnp|publicip|extip:\\<IP\\>)\n\n          [default: any]\n\n      --addr <ADDR>\n          Network listening address\n\n          [default: 0.0.0.0]\n\n      --port <PORT>\n          Network listening port\n\n          [default: 30303]\n\n      --max-outbound-peers <MAX_OUTBOUND_PEERS>\n          Maximum number of outbound requests. default: 100\n\n      --max-inbound-peers <MAX_INBOUND_PEERS>\n          Maximum number of inbound requests. default: 30\n\n      --max-tx-reqs <COUNT>\n          Max concurrent `GetPooledTransactions` requests.\n\n          [default: 130]\n\n      --max-tx-reqs-peer <COUNT>\n          Max concurrent `GetPooledTransactions` requests per peer.\n\n          [default: 1]\n\n      --max-seen-tx-history <COUNT>\n          Max number of seen transactions to remember per peer.\n\n          Default is 320 transaction hashes.\n\n          [default: 320]\n\n      --max-pending-imports <COUNT>\n          Max number of transactions to import concurrently.\n\n          [default: 4096]\n\n      --pooled-tx-response-soft-limit <BYTES>\n          Experimental, for usage in research. Sets the max accumulated byte size of transactions\n          to pack in one response.\n          Spec'd at 2MiB.\n\n          [default: 2097152]\n\n      --pooled-tx-pack-soft-limit <BYTES>\n          Experimental, for usage in research. Sets the max accumulated byte size of transactions to\n          request in one request.\n\n          Since `RLPx` protocol version 68, the byte size of a transaction is shared as metadata in a\n          transaction announcement (see `RLPx` specs). This allows a node to request a specific size\n          response.\n\n          By default, nodes request only 128 KiB worth of transactions, but should a peer request\n          more, up to 2 MiB, a node will answer with more than 128 KiB.\n\n          Default is 128 KiB.\n\n          [default: 131072]\n\n      --max-tx-pending-fetch <COUNT>\n          Max capacity of cache of hashes for transactions pending fetch.\n\n          [default: 25600]\n\n      --net-if.experimental <IF_NAME>\n          Name of network interface used to communicate with peers.\n\n          If flag is set, but no value is passed, the default interface for docker `eth0` is tried.\n\n      --tx-propagation-policy <TX_PROPAGATION_POLICY>\n          Transaction Propagation Policy\n\n          The policy determines which peers transactions are gossiped to.\n\n          [default: All]\n\n      --retries <RETRIES>\n          The number of retries per request\n\n          [default: 5]\n\n      --skip-node-depth <SKIP_NODE_DEPTH>\n          The depth after which we should start comparing branch nodes\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n```\n\n----------------------------------------\n\nTITLE: Handling New Pooled Transactions in Reth\nDESCRIPTION: This function processes incoming pooled transaction hashes. It updates the peer's known transactions, filters out transactions already in the pool, and requests full transaction objects for unknown hashes. It also manages in-flight requests for these transactions.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_33\n\nLANGUAGE: rust\nCODE:\n```\nfn on_new_pooled_transactions(&mut self, peer_id: PeerId, msg: NewPooledTransactionHashes) {\n    if let Some(peer) = self.peers.get_mut(&peer_id) {\n        let mut transactions = msg.0;\n\n        // keep track of the transactions the peer knows\n        peer.transactions.extend(transactions.clone());\n\n        self.pool.retain_unknown(&mut transactions);\n\n        if transactions.is_empty() {\n            // nothing to request\n            return\n        }\n\n        // request the missing transactions\n        let (response, rx) = oneshot::channel();\n        let req = PeerRequest::GetPooledTransactions {\n            request: GetPooledTransactions(transactions),\n            response,\n        };\n\n        if peer.request_tx.try_send(req).is_ok() {\n            self.inflight_requests.push(GetPooledTxRequest { peer_id, response: rx })\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FetchClient Structure in Rust\nDESCRIPTION: Defines the FetchClient struct, which provides a lightweight interface for fetching data from the network, containing a channel for download requests and a handle to peer management.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\npub struct FetchClient {\n    /// Sender half of the request channel.\n    pub(crate) request_tx: UnboundedSender<DownloadRequest>,\n    /// The handle to the peers\n    pub(crate) peers_handle: PeersHandle,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ETL Stage in Reth\nDESCRIPTION: Configuration for the ETL (extract, transform, load) data collector which handles sorted data insertion into MDBX. The file size parameter controls temporary storage usage and flush frequency.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/config.md#2025-04-16_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[stages.etl]\n# The maximum size in bytes of data held in memory before being flushed to disk as a file.\n#\n# Lower threshold corresponds to more frequent flushes,\n# but lowers temporary storage usage\nfile_size = 524_288_000 # 500 * 1024 * 1024\n```\n\n----------------------------------------\n\nTITLE: Building reth with profiling profile for analysis\nDESCRIPTION: Command to build reth with the profiling profile, which includes debug symbols for performance analysis tools like perf or samply.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/bin/reth-bench/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake profiling\n```\n\n----------------------------------------\n\nTITLE: Implementing fetch_bodies for BodiesDownloader in Rust\nDESCRIPTION: Implements the fetch_bodies method for BodiesDownloader, which asynchronously fetches block bodies from peers using the client's get_block_bodies method.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nasync fn fetch_bodies(\n    &self,\n    headers: Vec<&SealedHeader>,\n) -> DownloadResult<Vec<BlockResponse>> {\n    // --snip--\n    let (peer_id, bodies) =\n        self.client.get_block_bodies(headers_with_txs_and_ommers).await?.split();\n    // --snip--\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OVM Receipts for OP Mainnet Full Bootstrap\nDESCRIPTION: Optional command to import OP Mainnet receipts from an exported RLP file. This is only required if you need receipt data for the pre-Bedrock blocks.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/sync-op-mainnet.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ op-reth import-receipts-op --chain optimism <exported-receipts>\n```\n\n----------------------------------------\n\nTITLE: Reth Debug Replay-Engine Command Usage and Options\nDESCRIPTION: This snippet shows the full usage instructions and available options for the 'reth debug replay-engine' command. It includes options for configuring the data directory, database, networking, logging, and engine API debugging.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug/replay-engine.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth debug replay-engine [OPTIONS] --engine-api-store <PATH>\n\nOptions:\n      --instance <INSTANCE>\n          Add a new instance of a node.\n\n          Configures the ports of the node to avoid conflicts with the defaults. This is useful for running multiple nodes on the same machine.\n\n          Max number of instances is 200. It is chosen in a way so that it's not possible to have port numbers that conflict with each other.\n\n          Changes to the following port numbers: - `DISCOVERY_PORT`: default + `instance` - 1 - `AUTH_PORT`: default + `instance` * 100 - 100 - `HTTP_RPC_PORT`: default - `instance` + 1 - `WS_RPC_PORT`: default + `instance` * 2 - 2\n\n          [default: 1]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --datadir <DATA_DIR>\n          The path to the data dir for all reth files and subdirectories.\n\n          Defaults to the OS-specific data directory:\n\n          - Linux: `$XDG_DATA_HOME/reth/` or `$HOME/.local/share/reth/`\n          - Windows: `{FOLDERID_RoamingAppData}/reth/`\n          - macOS: `$HOME/Library/Application Support/reth/`\n\n          [default: default]\n\n      --datadir.static-files <PATH>\n          The absolute path to store static files in.\n\n      --config <FILE>\n          The path to the configuration file to use\n\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, dev\n\n          [default: mainnet]\n\nDatabase:\n      --db.log-level <LOG_LEVEL>\n          Database logging level. Levels higher than \"notice\" require a debug build\n\n          Possible values:\n          - fatal:   Enables logging for critical conditions, i.e. assertion failures\n          - error:   Enables logging for error conditions\n          - warn:    Enables logging for warning conditions\n          - notice:  Enables logging for normal but significant condition\n          - verbose: Enables logging for verbose informational\n          - debug:   Enables logging for debug-level messages\n          - trace:   Enables logging for trace debug-level messages\n          - extra:   Enables logging for extra debug-level messages\n\n      --db.exclusive <EXCLUSIVE>\n          Open environment in exclusive/monopolistic mode. Makes it possible to open a database on an NFS volume\n\n          [possible values: true, false]\n\n      --db.max-size <MAX_SIZE>\n          Maximum database size (e.g., 4TB, 8MB)\n\n      --db.growth-step <GROWTH_STEP>\n          Database growth step (e.g., 4GB, 4KB)\n\n      --db.read-transaction-timeout <READ_TRANSACTION_TIMEOUT>\n          Read transaction timeout in seconds, 0 means no timeout\n\nNetworking:\n  -d, --disable-discovery\n          Disable the discovery service\n\n      --disable-dns-discovery\n          Disable the DNS discovery\n\n      --disable-discv4-discovery\n          Disable Discv4 discovery\n\n      --enable-discv5-discovery\n          Enable Discv5 discovery\n\n      --disable-nat\n          Disable Nat discovery\n\n      --discovery.addr <DISCOVERY_ADDR>\n          The UDP address to use for devp2p peer discovery version 4\n\n          [default: 0.0.0.0]\n\n      --discovery.port <DISCOVERY_PORT>\n          The UDP port to use for devp2p peer discovery version 4\n\n          [default: 30303]\n\n      --discovery.v5.addr <DISCOVERY_V5_ADDR>\n          The UDP IPv4 address to use for devp2p peer discovery version 5. Overwritten by `RLPx` address, if it's also IPv4\n\n      --discovery.v5.addr.ipv6 <DISCOVERY_V5_ADDR_IPV6>\n          The UDP IPv6 address to use for devp2p peer discovery version 5. Overwritten by `RLPx` address, if it's also IPv6\n\n      --discovery.v5.port <DISCOVERY_V5_PORT>\n          The UDP IPv4 port to use for devp2p peer discovery version 5. Not used unless `--addr` is IPv4, or `--discovery.v5.addr` is set\n\n          [default: 9200]\n\n      --discovery.v5.port.ipv6 <DISCOVERY_V5_PORT_IPV6>\n          The UDP IPv6 port to use for devp2p peer discovery version 5. Not used unless `--addr` is IPv6, or `--discovery.addr.ipv6` is set\n\n          [default: 9200]\n\n      --discovery.v5.lookup-interval <DISCOVERY_V5_LOOKUP_INTERVAL>\n          The interval in seconds at which to carry out periodic lookup queries, for the whole run of the program\n\n          [default: 20]\n\n      --discovery.v5.bootstrap.lookup-interval <DISCOVERY_V5_BOOTSTRAP_LOOKUP_INTERVAL>\n          The interval in seconds at which to carry out boost lookup queries, for a fixed number of times, at bootstrap\n\n          [default: 5]\n\n      --discovery.v5.bootstrap.lookup-countdown <DISCOVERY_V5_BOOTSTRAP_LOOKUP_COUNTDOWN>\n          The number of times to carry out boost lookup queries at bootstrap\n\n          [default: 200]\n\n      --trusted-peers <TRUSTED_PEERS>\n          Comma separated enode URLs of trusted peers for P2P connections.\n\n          --trusted-peers enode://abcd@192.168.0.1:30303\n\n      --trusted-only\n          Connect to or accept from trusted peers only\n\n      --bootnodes <BOOTNODES>\n          Comma separated enode URLs for P2P discovery bootstrap.\n\n          Will fall back to a network-specific default if not specified.\n\n      --dns-retries <DNS_RETRIES>\n          Amount of DNS resolution requests retries to perform when peering\n\n          [default: 0]\n\n      --peers-file <FILE>\n          The path to the known peers file. Connected peers are dumped to this file on nodes\n          shutdown, and read on startup. Cannot be used with `--no-persist-peers`.\n\n      --identity <IDENTITY>\n          Custom node identity\n\n          [default: reth/<VERSION>-<SHA>/<ARCH>]\n\n      --p2p-secret-key <PATH>\n          Secret key to use for this node.\n\n          This will also deterministically set the peer ID. If not specified, it will be set in the data dir for the chain being used.\n\n      --no-persist-peers\n          Do not persist peers.\n\n      --nat <NAT>\n          NAT resolution method (any|none|upnp|publicip|extip:\\<IP\\>)\n\n          [default: any]\n\n      --addr <ADDR>\n          Network listening address\n\n          [default: 0.0.0.0]\n\n      --port <PORT>\n          Network listening port\n\n          [default: 30303]\n\n      --max-outbound-peers <MAX_OUTBOUND_PEERS>\n          Maximum number of outbound requests. default: 100\n\n      --max-inbound-peers <MAX_INBOUND_PEERS>\n          Maximum number of inbound requests. default: 30\n\n      --max-tx-reqs <COUNT>\n          Max concurrent `GetPooledTransactions` requests.\n\n          [default: 130]\n\n      --max-tx-reqs-peer <COUNT>\n          Max concurrent `GetPooledTransactions` requests per peer.\n\n          [default: 1]\n\n      --max-seen-tx-history <COUNT>\n          Max number of seen transactions to remember per peer.\n\n          Default is 320 transaction hashes.\n\n          [default: 320]\n\n      --max-pending-imports <COUNT>\n          Max number of transactions to import concurrently.\n\n          [default: 4096]\n\n      --pooled-tx-response-soft-limit <BYTES>\n          Experimental, for usage in research. Sets the max accumulated byte size of transactions\n          to pack in one response.\n          Spec'd at 2MiB.\n\n          [default: 2097152]\n\n      --pooled-tx-pack-soft-limit <BYTES>\n          Experimental, for usage in research. Sets the max accumulated byte size of transactions to\n          request in one request.\n\n          Since `RLPx` protocol version 68, the byte size of a transaction is shared as metadata in a\n          transaction announcement (see `RLPx` specs). This allows a node to request a specific size\n          response.\n\n          By default, nodes request only 128 KiB worth of transactions, but should a peer request\n          more, up to 2 MiB, a node will answer with more than 128 KiB.\n\n          Default is 128 KiB.\n\n          [default: 131072]\n\n      --max-tx-pending-fetch <COUNT>\n          Max capacity of cache of hashes for transactions pending fetch.\n\n          [default: 25600]\n\n      --net-if.experimental <IF_NAME>\n          Name of network interface used to communicate with peers.\n\n          If flag is set, but no value is passed, the default interface for docker `eth0` is tried.\n\n      --engine-api-store <PATH>\n          The path to read engine API messages from\n\n      --interval <INTERVAL>\n          The number of milliseconds between Engine API messages\n\n          [default: 1000]\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n```\n\n----------------------------------------\n\nTITLE: Implementing Request-Response Pairing for Ethereum Messages\nDESCRIPTION: Defines the RequestPair struct, which is used to pair request messages with their corresponding response messages in the Ethereum protocol. This structure includes a request ID and the actual message content.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/eth-wire.md#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub struct RequestPair<T> {\n    pub request_id: u64,\n    pub message: T,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Execution Stage in Reth\nDESCRIPTION: Settings for the execution stage which processes historical transactions. This I/O and memory intensive stage can be tuned with various thresholds for blocks, state changes, gas, and duration before committing to disk.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/config.md#2025-04-16_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[stages.execution]\n# The maximum number of blocks to process before the execution stage commits.\nmax_blocks = 500000\n# The maximum number of state changes to keep in memory before the execution stage commits.\nmax_changes = 5000000\n# The maximum cumulative amount of gas to process before the execution stage commits.\nmax_cumulative_gas = 1500000000000 # 30_000_000 * 50_000_000\n# The maximum time spent on blocks processing before the execution stage commits.\nmax_duration = '10m'\n```\n\n----------------------------------------\n\nTITLE: Running reth node with samply for profiling\nDESCRIPTION: Command to start a reth node with samply for performance profiling, enabling metrics collection on a specified port.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/bin/reth-bench/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsamply record -p 3001 target/profiling/reth node --metrics localhost:9001 --authrpc.jwtsecret <jwt_file_path>\n```\n\n----------------------------------------\n\nTITLE: Complete exex.rs implementation\nDESCRIPTION: Full source code of the exex.rs file containing the complete implementation of both the ExEx and gRPC server components.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/exex/remote.md#2025-04-16_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../../sources/exex/remote/src/exex.rs}}\n```\n\n----------------------------------------\n\nTITLE: Peer Structure Definition in Rust\nDESCRIPTION: Definition of the Peer struct that maintains peer-specific data including transaction cache and communication channel.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_27\n\nLANGUAGE: rust\nCODE:\n```\nstruct Peer {\n    /// Keeps track of transactions that we know the peer has seen.\n    transactions: LruCache<B256>,\n    /// A communication channel directly to the session task.\n    request_tx: PeerRequestSender,\n}\n```\n\n----------------------------------------\n\nTITLE: BlockBodies Message Structure in Ress Protocol\nDESCRIPTION: Defines the BlockBodies message (0x04) structure that responds to GetBlockBodies requests with the body data of the requested blocks.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/ress/protocol/README.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`[request-id: P, [block-body₁, block-body₂, ...]]`\n```\n\n----------------------------------------\n\nTITLE: Implementing Ping State Machine for Ethereum P2P Communication\nDESCRIPTION: Implements the poll_ping function, which advances the state of the Pinger based on timeouts and received pongs. This function is crucial for maintaining the ping/pong mechanism in the Ethereum P2P network.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/eth-wire.md#2025-04-16_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\npub(crate) fn poll_ping(\n    &mut self,\n    cx: &mut Context<'_>,\n) -> Poll<Result<PingerEvent, PingerError>> {\n    match self.state() {\n        PingState::Ready => {\n            if self.ping_interval.poll_tick(cx).is_ready() {\n                self.timeout_timer.as_mut().reset(Instant::now() + self.timeout);\n                self.state = PingState::WaitingForPong;\n                return Poll::Ready(Ok(PingerEvent::Ping))\n            }\n        }\n        PingState::WaitingForPong => {\n            if self.timeout_timer.is_elapsed() {\n                self.state = PingState::TimedOut;\n                return Poll::Ready(Ok(PingerEvent::Timeout))\n            }\n        }\n        PingState::TimedOut => {\n            return Poll::Pending\n        }\n    };\n    Poll::Pending\n}\n```\n\n----------------------------------------\n\nTITLE: Building Reth Docker Image from Source\nDESCRIPTION: Command to build the Reth Docker image from source code. This is useful for development or when you need a custom build.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/docker.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build . -t reth:local\n```\n\n----------------------------------------\n\nTITLE: Command line options for reth db diff tool\nDESCRIPTION: Comprehensive output showing all available options for the 'reth db diff' command, including database settings, output configuration, logging options, and display preferences.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/diff.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth db diff [OPTIONS] --secondary-datadir <SECONDARY_DATADIR> --output <OUTPUT>\n\nOptions:\n      --secondary-datadir <SECONDARY_DATADIR>\n          The path to the data dir for all reth files and subdirectories.\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatabase:\n      --db.log-level <LOG_LEVEL>\n          Database logging level. Levels higher than \"notice\" require a debug build\n\n          Possible values:\n          - fatal:   Enables logging for critical conditions, i.e. assertion failures\n          - error:   Enables logging for error conditions\n          - warn:    Enables logging for warning conditions\n          - notice:  Enables logging for normal but significant condition\n          - verbose: Enables logging for verbose informational\n          - debug:   Enables logging for debug-level messages\n          - trace:   Enables logging for trace debug-level messages\n          - extra:   Enables logging for extra debug-level messages\n\n      --db.exclusive <EXCLUSIVE>\n          Open environment in exclusive/monopolistic mode. Makes it possible to open a database on an NFS volume\n\n          [possible values: true, false]\n\n      --db.max-size <MAX_SIZE>\n          Maximum database size (e.g., 4TB, 8MB)\n\n      --db.growth-step <GROWTH_STEP>\n          Database growth step (e.g., 4GB, 4KB)\n\n      --db.read-transaction-timeout <READ_TRANSACTION_TIMEOUT>\n          Read transaction timeout in seconds, 0 means no timeout\n\n      --table <TABLE>\n          The table name to diff. If not specified, all tables are diffed.\n\n      --output <OUTPUT>\n          The output directory for the diff report.\n\nDatadir:\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: GetHeaders Message Structure in Ress Protocol\nDESCRIPTION: Defines the GetHeaders message (0x01) structure that requests block headers from a peer, specifying the starting blockhash and limit.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/ress/protocol/README.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`[request-id: P, [blockhash: B_32, limit: P]]`\n```\n\n----------------------------------------\n\nTITLE: Tracing Call Execution using debug_traceCall RPC Method\nDESCRIPTION: Runs an eth_call within the context of a given block execution, using the final state of the parent block as the base. Accepts a transaction request, optional block identifier, and options as parameters.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/debug.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\"method\": \"debug_traceCall\", \"params\": [call, block_number, opts]}\n```\n\n----------------------------------------\n\nTITLE: Unwinding BodyStage in Reth Using Database Cursors\nDESCRIPTION: This function unwinds changes made to the database during the body stage execution. It uses multiple cursors to navigate and delete entries from various tables, including BlockBodyIndices, BlockOmmers, BlockWithdrawals, and TransactionBlocks.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/db.md#2025-04-16_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n/// Unwind the stage.\nfn unwind(&mut self, provider: &DatabaseProviderRW<DB>, input: UnwindInput) {\n    self.buffer.take();\n\n    let static_file_provider = provider.static_file_provider();\n    let tx = provider.tx_ref();\n    // Cursors to unwind bodies, ommers\n    let mut body_cursor = tx.cursor_write::<tables::BlockBodyIndices>()?;\n    let mut ommers_cursor = tx.cursor_write::<tables::BlockOmmers>()?;\n    let mut withdrawals_cursor = tx.cursor_write::<tables::BlockWithdrawals>()?;\n    // Cursors to unwind transitions\n    let mut tx_block_cursor = tx.cursor_write::<tables::TransactionBlocks>()?;\n\n    let mut rev_walker = body_cursor.walk_back(None)?;\n    while let Some((number, block_meta)) = rev_walker.next().transpose()? {\n        if number <= input.unwind_to {\n            break\n        }\n\n        // Delete the ommers entry if any\n        if ommers_cursor.seek_exact(number)?.is_some() {\n            ommers_cursor.delete_current()?;\n        }\n\n        // Delete the withdrawals entry if any\n        if withdrawals_cursor.seek_exact(number)?.is_some() {\n            withdrawals_cursor.delete_current()?;\n        }\n\n        // Delete the requests entry if any\n        if requests_cursor.seek_exact(number)?.is_some() {\n            requests_cursor.delete_current()?;\n        }\n\n        // Delete all transaction to block values.\n        if !block_meta.is_empty() &&\n            tx_block_cursor.seek_exact(block_meta.last_tx_num())?.is_some()\n        {\n            tx_block_cursor.delete_current()?;\n        }\n\n        // Delete the current body value\n        rev_walker.delete_current()?;\n    }\n    //--snip--\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking txpool_content RPC Method\nDESCRIPTION: RPC method call to retrieve details of all transactions pending for inclusion in the next blocks, as well as those scheduled for future execution.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/txpool.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"method\": \"txpool_content\", \"params\": []}\n```\n\n----------------------------------------\n\nTITLE: Querying RPC Modules in JavaScript\nDESCRIPTION: This snippet demonstrates how to query the enabled RPC modules and their versions using the 'rpc_modules' method. It shows both the request and the expected response format.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/rpc.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// > {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"rpc_modules\",\"params\":[]}\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":{\"txpool\":\"1.0\",\"eth\":\"1.0\",\"rpc\":\"1.0\"}}\n```\n\n----------------------------------------\n\nTITLE: Defining NetworkTransactionEvent Enum in Rust\nDESCRIPTION: This code snippet defines the NetworkTransactionEvent enum, which represents different types of transaction-related events that can occur in the network. It includes variants for incoming transactions, incoming pooled transaction hashes, and get pooled transactions requests.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_31\n\nLANGUAGE: rust\nCODE:\n```\npub enum NetworkTransactionEvent {\n    /// Received list of transactions from the given peer.\n    IncomingTransactions { peer_id: PeerId, msg: Transactions },\n    /// Received list of transactions hashes to the given peer.\n    IncomingPooledTransactionHashes { peer_id: PeerId, msg: NewPooledTransactionHashes },\n    /// Incoming `GetPooledTransactions` request from a peer.\n    GetPooledTransactions {\n        peer_id: PeerId,\n        request: GetPooledTransactions,\n        response: oneshot::Sender<RequestResult<PooledTransactions>>,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bodies Stage in Reth\nDESCRIPTION: Configuration options for the bodies stage which downloads historical block bodies via P2P. Settings control request limits, batch sizes, buffer sizes, and concurrency to optimize for network throughput and memory usage.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/config.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[stages.bodies]\n# The maximum number of bodies to request from a peer at a time.\ndownloader_request_limit = 200\n# The maximum amount of bodies to download before writing them to disk.\n#\n# A lower value means more frequent disk I/O (writes), but also\n# lowers memory usage.\ndownloader_stream_batch_size = 1000\n# The size of the internal block buffer in bytes.\n#\n# A bigger buffer means that bandwidth can be saturated for longer periods,\n# but also increases memory consumption.\n#\n# If the buffer is full, no more requests will be made to peers until\n# space is made for new blocks in the buffer.\n#\n# Defaults to around 2GB.\ndownloader_max_buffered_blocks_size_bytes = 2147483648\n# The minimum and maximum number of concurrent requests to have in flight at a time.\n#\n# The downloader uses these as best effort targets, which means that the number\n# of requests may be outside of these thresholds within a reasonable degree.\n#\n# Increase these for faster sync speeds at the cost of additional bandwidth and memory\ndownloader_min_concurrent_requests = 5\ndownloader_max_concurrent_requests = 100\n```\n\n----------------------------------------\n\nTITLE: Help output for reth debug build-block command\nDESCRIPTION: Detailed help output showing all available options for the 'reth debug build-block' command. This includes required parameters like prev-randao, timestamp, and fee recipient, as well as configuration options for datadir, database, logging, and display settings.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug/build-block.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth debug build-block [OPTIONS] --prev-randao <PREV_RANDAO> --timestamp <TIMESTAMP> --suggested-fee-recipient <SUGGESTED_FEE_RECIPIENT>\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --datadir <DATA_DIR>\n          The path to the data dir for all reth files and subdirectories.\n\n          Defaults to the OS-specific data directory:\n\n          - Linux: `$XDG_DATA_HOME/reth/` or `$HOME/.local/share/reth/`\n          - Windows: `{FOLDERID_RoamingAppData}/reth/`\n          - macOS: `$HOME/Library/Application Support/reth/`\n\n          [default: default]\n\n      --datadir.static-files <PATH>\n          The absolute path to store static files in.\n\n      --config <FILE>\n          The path to the configuration file to use\n\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nDatabase:\n      --db.log-level <LOG_LEVEL>\n          Database logging level. Levels higher than \"notice\" require a debug build\n\n          Possible values:\n          - fatal:   Enables logging for critical conditions, i.e. assertion failures\n          - error:   Enables logging for error conditions\n          - warn:    Enables logging for warning conditions\n          - notice:  Enables logging for normal but significant condition\n          - verbose: Enables logging for verbose informational\n          - debug:   Enables logging for debug-level messages\n          - trace:   Enables logging for trace debug-level messages\n          - extra:   Enables logging for extra debug-level messages\n\n      --db.exclusive <EXCLUSIVE>\n          Open environment in exclusive/monopolistic mode. Makes it possible to open a database on an NFS volume\n\n          [possible values: true, false]\n\n      --db.max-size <MAX_SIZE>\n          Maximum database size (e.g., 4TB, 8MB)\n\n      --db.growth-step <GROWTH_STEP>\n          Database growth step (e.g., 4GB, 4KB)\n\n      --db.read-transaction-timeout <READ_TRANSACTION_TIMEOUT>\n          Read transaction timeout in seconds, 0 means no timeout\n\n      --parent-beacon-block-root <PARENT_BEACON_BLOCK_ROOT>\n\n\n      --prev-randao <PREV_RANDAO>\n\n\n      --timestamp <TIMESTAMP>\n\n\n      --suggested-fee-recipient <SUGGESTED_FEE_RECIPIENT>\n\n\n      --transactions <TRANSACTIONS>\n          Array of transactions. NOTE: 4844 transactions must be provided in the same order as they appear in the blobs bundle\n\n      --blobs-bundle-path <BLOBS_BUNDLE_PATH>\n          Path to the file that contains a corresponding blobs bundle\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP JSON-RPC Server Address and Port\nDESCRIPTION: Command to start a Reth node with HTTP JSON-RPC server on a custom address and port.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/intro.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nreth node --http --http.addr 127.0.0.1 --http.port 12345\n```\n\n----------------------------------------\n\nTITLE: Configuring Tonic code generation in lib.rs\nDESCRIPTION: Configuration in lib.rs to instruct Tonic to generate Rust code from the Protobuf definitions at compile time.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/exex/remote.md#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../../sources/exex/remote/src/lib.rs}}\n```\n\n----------------------------------------\n\nTITLE: Invoking txpool_contentFrom RPC Method\nDESCRIPTION: RPC method call to retrieve transactions for a specific address from the transaction pool, including both pending and queued transactions grouped by nonce.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/txpool.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"method\": \"txpool_contentFrom\", \"params\": [address]}\n```\n\n----------------------------------------\n\nTITLE: Headers Message Structure in Ress Protocol\nDESCRIPTION: Defines the Headers message (0x02) structure that responds to GetHeaders requests with a list of requested block headers.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/ress/protocol/README.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`[request-id: P, [header₁, header₂, ...]]`\n```\n\n----------------------------------------\n\nTITLE: Configuring Sender Recovery Stage in Reth\nDESCRIPTION: Configuration for the sender recovery stage which recovers transaction sender addresses using signatures. The commit threshold controls how many transactions to process before writing results to disk.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/config.md#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[stages.sender_recovery]\n# The number of transactions to recover senders for before\n# writing the results to disk.\n#\n# Lower thresholds correspond to more frequent disk I/O (writes),\n# but lowers memory usage\ncommit_threshold = 100000\n```\n\n----------------------------------------\n\nTITLE: Pulling Specific Version of Reth Docker Image\nDESCRIPTION: Command to pull a specific version of the Reth Docker image from GitHub Container Registry. This allows you to use a particular release of Reth.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/docker.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/paradigmxyz/reth:v0.0.1\n```\n\n----------------------------------------\n\nTITLE: Calculating Keccak-256 Hash using Web3 SHA3 RPC\nDESCRIPTION: This snippet demonstrates how to calculate the Keccak-256 hash of the given data using the web3_sha3 RPC method. It shows the request and response format.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/web3.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// > {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"web3_sha3\",\"params\":[\"0x7275737420697320617765736f6d65\"]}\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0xe421b3428564a5c509ac118bad93a3b84485ec3f927e214b0c4c23076d4bc4e0\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Execution Extension\nDESCRIPTION: Core implementation of the RemoteExEx that captures blockchain notifications and forwards them to the gRPC server through a channel.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/exex/remote.md#2025-04-16_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../../sources/exex/remote/src/exex_4.rs:snippet}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Account Hashing Stage in Reth\nDESCRIPTION: Configuration for the account hashing stage which builds a secondary table of accounts using hashed addresses as keys. Controls clean threshold for full rebuilds and commit threshold for disk writes.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/config.md#2025-04-16_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[stages.account_hashing]\n# The threshold in number of blocks before the stage starts from scratch\n# and re-hashes all accounts as opposed to just the accounts that changed.\nclean_threshold = 500000\n# The amount of accounts to process before writing the results to disk.\n#\n# Lower thresholds correspond to more frequent disk I/O (writes),\n# but lowers memory usage\ncommit_threshold = 100000\n```\n\n----------------------------------------\n\nTITLE: RLPX Ping Command Usage and Options\nDESCRIPTION: Comprehensive documentation of the ping command's usage, including logging configuration, display options, and command arguments\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/p2p/rlpx/ping.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth p2p rlpx ping [OPTIONS] <NODE>\n\nArguments:\n  <NODE>\n          The node to ping\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Bytecode Message Structure in Ress Protocol\nDESCRIPTION: Defines the Bytecode message (0x06) structure that responds to GetBytecode requests with the requested bytecode.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/ress/protocol/README.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n`[request-id: P, [bytes]]`\n```\n\n----------------------------------------\n\nTITLE: Implementing the Subscribe method in gRPC service\nDESCRIPTION: Implementation of the Subscribe method that creates a new receiver for each client connection and streams serialized notifications.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/exex/remote.md#2025-04-16_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n{{#rustdoc_include ../../sources/exex/remote/src/exex_3.rs:snippet}}\n```\n\n----------------------------------------\n\nTITLE: Running reth with jemalloc profiling enabled\nDESCRIPTION: Command to launch reth with jemalloc profiling enabled, configuring the profiling parameters through environment variables. This will generate heap snapshots for analysis.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/profiling.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n_RJEM_MALLOC_CONF=prof:true,lg_prof_interval:32,lg_prof_sample:19 reth node\n```\n\n----------------------------------------\n\nTITLE: Tracing Block by Number using debug_traceBlockByNumber RPC Method\nDESCRIPTION: Similar to debug_traceBlockByHash, but accepts a block number instead of hash. Replays the block already present in the database. The method is called via RPC with block number and options parameters.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/debug.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\"method\": \"debug_traceBlockByNumber\", \"params\": [block_number, opts]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Transaction Lookup Stage in Reth\nDESCRIPTION: Settings for the transaction lookup stage which builds an index mapping transaction hashes to sequential IDs. The chunk size controls how many transactions to process before writing to disk.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/config.md#2025-04-16_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[stages.transaction_lookup]\n# The maximum number of transactions to process before writing the results to disk.\n#\n# Lower thresholds correspond to more frequent disk I/O (writes),\n# but lowers memory usage\nchunk_size = 5000000\n```\n\n----------------------------------------\n\nTITLE: Reth Node CLI Options Reference\nDESCRIPTION: Comprehensive listing of all available command line options for configuring a Reth node, including networking, discovery, RPC, metrics, and data directory settings\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/node.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth node [OPTIONS]\n\nOptions:\n      --config <FILE>\n          The path to the configuration file to use.\n\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\n      --instance <INSTANCE>\n          Add a new instance of a node.\n\n          Configures the ports of the node to avoid conflicts with the defaults. This is useful for running multiple nodes on the same machine.\n\n          Max number of instances is 200. It is chosen in a way so that it's not possible to have port numbers that conflict with each other.\n\n          Changes to the following port numbers: - `DISCOVERY_PORT`: default + `instance` - 1 - `AUTH_PORT`: default + `instance` * 100 - 100 - `HTTP_RPC_PORT`: default - `instance` + 1 - `WS_RPC_PORT`: default + `instance` * 2 - 2 - `IPC_PATH`: default + `-instance`\n\n      --with-unused-ports\n          Sets all ports to unused, allowing the OS to choose random unused ports when sockets are bound.\n\n          Mutually exclusive with `--instance`.\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nMetrics:\n      --metrics <SOCKET>\n          Enable Prometheus metrics.\n\n          The metrics will be served at the given interface and port.\n\nDatadir:\n      --datadir <DATA_DIR>\n          The path to the data dir for all reth files and subdirectories.\n\n          Defaults to the OS-specific data directory:\n\n          - Linux: `$XDG_DATA_HOME/reth/` or `$HOME/.local/share/reth/`\n          - Windows: `{FOLDERID_RoamingAppData}/reth/`\n          - macOS: `$HOME/Library/Application Support/reth/`\n\n          [default: default]\n\n      --datadir.static-files <PATH>\n          The absolute path to store static files in.\n\nNetworking:\n  -d, --disable-discovery\n          Disable the discovery service\n\n      --disable-dns-discovery\n          Disable the DNS discovery\n\n      --disable-discv4-discovery\n          Disable Discv4 discovery\n\n      --enable-discv5-discovery\n          Enable Discv5 discovery\n\n      --disable-nat\n          Disable Nat discovery\n\n      --discovery.addr <DISCOVERY_ADDR>\n          The UDP address to use for devp2p peer discovery version 4\n\n          [default: 0.0.0.0]\n\n      --discovery.port <DISCOVERY_PORT>\n          The UDP port to use for devp2p peer discovery version 4\n\n          [default: 30303]\n\n      --discovery.v5.addr <DISCOVERY_V5_ADDR>\n          The UDP IPv4 address to use for devp2p peer discovery version 5. Overwritten by `RLPx` address, if it's also IPv4\n\n      --discovery.v5.addr.ipv6 <DISCOVERY_V5_ADDR_IPV6>\n          The UDP IPv6 address to use for devp2p peer discovery version 5. Overwritten by `RLPx` address, if it's also IPv6\n\n      --discovery.v5.port <DISCOVERY_V5_PORT>\n          The UDP IPv4 port to use for devp2p peer discovery version 5. Not used unless `--addr` is IPv4, or `--discovery.v5.addr` is set\n\n          [default: 9200]\n\n      --discovery.v5.port.ipv6 <DISCOVERY_V5_PORT_IPV6>\n          The UDP IPv6 port to use for devp2p peer discovery version 5. Not used unless `--addr` is IPv6, or `--discovery.addr.ipv6` is set\n\n          [default: 9200]\n\n      --discovery.v5.lookup-interval <DISCOVERY_V5_LOOKUP_INTERVAL>\n          The interval in seconds at which to carry out periodic lookup queries, for the whole run of the program\n\n          [default: 20]\n\n      --discovery.v5.bootstrap.lookup-interval <DISCOVERY_V5_BOOTSTRAP_LOOKUP_INTERVAL>\n          The interval in seconds at which to carry out boost lookup queries, for a fixed number of times, at bootstrap\n\n          [default: 5]\n\n      --discovery.v5.bootstrap.lookup-countdown <DISCOVERY_V5_BOOTSTRAP_LOOKUP_COUNTDOWN>\n          The number of times to carry out boost lookup queries at bootstrap\n\n          [default: 200]\n\n      --trusted-peers <TRUSTED_PEERS>\n          Comma separated enode URLs of trusted peers for P2P connections.\n\n          --trusted-peers enode://abcd@192.168.0.1:30303\n\n      --trusted-only\n          Connect to or accept from trusted peers only\n\n      --bootnodes <BOOTNODES>\n          Comma separated enode URLs for P2P discovery bootstrap.\n\n          Will fall back to a network-specific default if not specified.\n\n      --dns-retries <DNS_RETRIES>\n          Amount of DNS resolution requests retries to perform when peering\n\n          [default: 0]\n\n      --peers-file <FILE>\n          The path to the known peers file. Connected peers are dumped to this file on nodes\n          shutdown, and read on startup. Cannot be used with `--no-persist-peers`.\n\n      --identity <IDENTITY>\n          Custom node identity\n\n          [default: reth/<VERSION>-<SHA>/<ARCH>]\n\n      --p2p-secret-key <PATH>\n          Secret key to use for this node.\n\n          This will also deterministically set the peer ID. If not specified, it will be set in the data dir for the chain being used.\n\n      --no-persist-peers\n          Do not persist peers.\n\n      --nat <NAT>\n          NAT resolution method (any|none|upnp|publicip|extip:\\<IP\\>)\n\n          [default: any]\n\n      --addr <ADDR>\n          Network listening address\n\n          [default: 0.0.0.0]\n\n      --port <PORT>\n          Network listening port\n\n          [default: 30303]\n\n      --max-outbound-peers <MAX_OUTBOUND_PEERS>\n          Maximum number of outbound requests. default: 100\n\n      --max-inbound-peers <MAX_INBOUND_PEERS>\n          Maximum number of inbound requests. default: 30\n\n      --max-tx-reqs <COUNT>\n          Max concurrent `GetPooledTransactions` requests.\n\n          [default: 130]\n\n      --max-tx-reqs-peer <COUNT>\n          Max concurrent `GetPooledTransactions` requests per peer.\n\n          [default: 1]\n\n      --max-seen-tx-history <COUNT>\n          Max number of seen transactions to remember per peer.\n\n          Default is 320 transaction hashes.\n\n          [default: 320]\n\n      --max-pending-imports <COUNT>\n          Max number of transactions to import concurrently.\n\n          [default: 4096]\n\n      --pooled-tx-response-soft-limit <BYTES>\n          Experimental, for usage in research. Sets the max accumulated byte size of transactions\n          to pack in one response.\n          Spec'd at 2MiB.\n\n          [default: 2097152]\n\n      --pooled-tx-pack-soft-limit <BYTES>\n          Experimental, for usage in research. Sets the max accumulated byte size of transactions to\n          request in one request.\n\n          Since `RLPx` protocol version 68, the byte size of a transaction is shared as metadata in a\n          transaction announcement (see `RLPx` specs). This allows a node to request a specific size\n          response.\n\n          By default, nodes request only 128 KiB worth of transactions, but should a peer request\n          more, up to 2 MiB, a node will answer with more than 128 KiB.\n\n          Default is 128 KiB.\n\n          [default: 131072]\n\n      --max-tx-pending-fetch <COUNT>\n          Max capacity of cache of hashes for transactions pending fetch.\n\n          [default: 25600]\n\n      --net-if.experimental <IF_NAME>\n          Name of network interface used to communicate with peers.\n\n          If flag is set, but no value is passed, the default interface for docker `eth0` is tried.\n\n      --tx-propagation-policy <TX_PROPAGATION_POLICY>\n          Transaction Propagation Policy\n\n          The policy determines which peers transactions are gossiped to.\n\n          [default: All]\n\nRPC:\n      --http\n          Enable the HTTP-RPC server\n\n      --http.addr <HTTP_ADDR>\n          Http server address to listen on\n\n          [default: 127.0.0.1]\n\n      --http.port <HTTP_PORT>\n          Http server port to listen on\n\n          [default: 8545]\n\n      --http.api <HTTP_API>\n          Rpc Modules to be configured for the HTTP server\n\n          [possible values: admin, debug, eth, net, trace, txpool, web3, rpc, reth, ots, flashbots, miner, mev]\n\n      --http.corsdomain <HTTP_CORSDOMAIN>\n          Http Corsdomain to allow request from\n\n      --ws\n          Enable the WS-RPC server\n\n      --ws.addr <WS_ADDR>\n          Ws server address to listen on\n\n          [default: 127.0.0.1]\n\n      --ws.port <WS_PORT>\n          Ws server port to listen on\n\n          [default: 8546]\n\n      --ws.origins <ws.origins>\n          Origins from which to accept `WebSocket` requests\n\n      --ws.api <WS_API>\n          Rpc Modules to be configured for the WS server\n\n          [possible values: admin, debug, eth, net, trace, txpool, web3, rpc, reth, ots, flashbots, miner, mev]\n\n      --ipcdisable\n          Disable the IPC-RPC server\n\n      --ipcpath <IPCPATH>\n          Filename for IPC socket/pipe within the datadir\n\n          [default: <CACHE_DIR>.ipc]\n\n      --authrpc.addr <AUTH_ADDR>\n          Auth server address to listen on\n\n          [default: 127.0.0.1]\n\n      --authrpc.port <AUTH_PORT>\n          Auth server port to listen on\n\n          [default: 8551]\n\n      --authrpc.jwtsecret <PATH>\n          Path to a JWT secret to use for the authenticated engine-API RPC server.\n\n          This will enforce JWT authentication for all requests coming from the consensus layer.\n\n          If no path is provided, a secret will be generated and stored in the datadir under `<DIR>/<CHAIN_ID>/jwt.hex`. For mainnet this would be `~/.reth/mainnet/jwt.hex` by default.\n\n      --auth-ipc\n          Enable auth engine API over IPC\n\n      --auth-ipc.path <AUTH_IPC_PATH>\n          Filename for auth IPC socket/pipe within the datadir\n\n          [default: <CACHE_DIR>_engine_api.ipc]\n\n      --rpc.jwtsecret <HEX>\n          Hex encoded JWT secret to authenticate the regular RPC server(s), see `--http.api` and `--ws.api`.\n\n          This is __not__ used for the authenticated engine-API RPC server, see `--authrpc.jwtsecret`.\n\n      --rpc.max-request-size <RPC_MAX_REQUEST_SIZE>\n```\n\n----------------------------------------\n\nTITLE: Spinning up Ethereum Private Testnet with Kurtosis\nDESCRIPTION: Bash command to run the Kurtosis Ethereum package, using the previously defined network parameters to create a private testnet with Reth nodes.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/private-testnet.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkurtosis run github.com/ethpandaops/ethereum-package --args-file ~/network_params.yaml --image-download always\n```\n\n----------------------------------------\n\nTITLE: Help Output for Reth Prune Command\nDESCRIPTION: Complete help output for the 'reth prune' command, listing all available options including datadir configuration, database settings, logging preferences, and display options.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/prune.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth prune [OPTIONS]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --datadir <DATA_DIR>\n          The path to the data dir for all reth files and subdirectories.\n\n          Defaults to the OS-specific data directory:\n\n          - Linux: `$XDG_DATA_HOME/reth/` or `$HOME/.local/share/reth/`\n          - Windows: `{FOLDERID_RoamingAppData}/reth/`\n          - macOS: `$HOME/Library/Application Support/reth/`\n\n          [default: default]\n\n      --datadir.static-files <PATH>\n          The absolute path to store static files in.\n\n      --config <FILE>\n          The path to the configuration file to use\n\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nDatabase:\n      --db.log-level <LOG_LEVEL>\n          Database logging level. Levels higher than \"notice\" require a debug build\n\n          Possible values:\n          - fatal:   Enables logging for critical conditions, i.e. assertion failures\n          - error:   Enables logging for error conditions\n          - warn:    Enables logging for warning conditions\n          - notice:  Enables logging for normal but significant condition\n          - verbose: Enables logging for verbose informational\n          - debug:   Enables logging for debug-level messages\n          - trace:   Enables logging for trace debug-level messages\n          - extra:   Enables logging for extra debug-level messages\n\n      --db.exclusive <EXCLUSIVE>\n          Open environment in exclusive/monopolistic mode. Makes it possible to open a database on an NFS volume\n\n          [possible values: true, false]\n\n      --db.max-size <MAX_SIZE>\n          Maximum database size (e.g., 4TB, 8MB)\n\n      --db.growth-step <GROWTH_STEP>\n          Database growth step (e.g., 4GB, 4KB)\n\n      --db.read-transaction-timeout <READ_TRANSACTION_TIMEOUT>\n          Read transaction timeout in seconds, 0 means no timeout\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Executing trace_replayBlockTransactions in JavaScript\nDESCRIPTION: Demonstrates the use of trace_replayBlockTransactions method, which replays all transactions in a block and returns the requested traces for each transaction. It takes a block identifier and trace types as parameters.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/trace.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// > {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"trace_replayBlockTransactions\",\"params\":[\"0x2ed119\",[\"trace\"]]}\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": [\n        {\n            \"output\": \"0x\",\n            \"stateDiff\": null,\n            \"trace\": [{\n                \"action\": { ... },\n                \"result\": {\n                    \"gasUsed\": \"0x0\",\n                    \"output\": \"0x\"\n                },\n                \"subtraces\": 0,\n                \"traceAddress\": [],\n                \"type\": \"call\"\n            }],\n            \"transactionHash\": \"0x...\",\n            \"vmTrace\": null\n        },\n        { ... }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Node Listening Status with net_listening RPC Method\nDESCRIPTION: This example demonstrates how to query whether the Ethereum node is actively listening for network connections using the net_listening RPC method. The method returns a boolean value indicating the node's listening status.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/net.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// > {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"net_listening\",\"params\":[]}\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":true}\n```\n\n----------------------------------------\n\nTITLE: Defining Network Parameters for Kurtosis Ethereum Package\nDESCRIPTION: YAML configuration file defining the parameters and shape of the private Ethereum network, specifying two nodes with Reth as the execution layer client and different consensus layer clients.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/private-testnet.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nparticipants:\n  - el_type: reth\n    el_image: ghcr.io/paradigmxyz/reth\n    cl_type: lighthouse\n    cl_image: sigp/lighthouse:latest\n  - el_type: reth\n    el_image: ghcr.io/paradigmxyz/reth\n    cl_type: teku\n    cl_image: consensys/teku:latest\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw Receipts using debug_getRawReceipts RPC Method\nDESCRIPTION: Returns an array of EIP-2718 binary-encoded receipts for a given block. The method is called via RPC with the block parameter.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/debug.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"method\": \"debug_getRawReceipts\", \"params\": [block]}\n```\n\n----------------------------------------\n\nTITLE: Reth Stage Unwind Command Help Output\nDESCRIPTION: Detailed help output showing all available options and configurations for the reth stage unwind command, including datadir settings, database configurations, logging options, and display preferences\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/unwind.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth stage unwind [OPTIONS] <COMMAND>\n\nCommands:\n  to-block    Unwinds the database from the latest block, until the given block number or hash has been reached, that block is not included\n  num-blocks  Unwinds the database from the latest block, until the given number of blocks have been reached\n  help        Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --datadir <DATA_DIR>\n          The path to the data dir for all reth files and subdirectories.\n\n          Defaults to the OS-specific data directory:\n\n          - Linux: `$XDG_DATA_HOME/reth/` or `$HOME/.local/share/reth/`\n          - Windows: `{FOLDERID_RoamingAppData}/reth/`\n          - macOS: `$HOME/Library/Application Support/reth/`\n\n          [default: default]\n\n      --datadir.static-files <PATH>\n          The absolute path to store static files in.\n\n      --config <FILE>\n          The path to the configuration file to use\n\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nDatabase:\n      --db.log-level <LOG_LEVEL>\n          Database logging level. Levels higher than \"notice\" require a debug build\n\n          Possible values:\n          - fatal:   Enables logging for critical conditions, i.e. assertion failures\n          - error:   Enables logging for error conditions\n          - warn:    Enables logging for warning conditions\n          - notice:  Enables logging for normal but significant condition\n          - verbose: Enables logging for verbose informational\n          - debug:   Enables logging for debug-level messages\n          - trace:   Enables logging for trace debug-level messages\n          - extra:   Enables logging for extra debug-level messages\n\n      --db.exclusive <EXCLUSIVE>\n          Open environment in exclusive/monopolistic mode. Makes it possible to open a database on an NFS volume\n\n          [possible values: true, false]\n\n      --db.max-size <MAX_SIZE>\n          Maximum database size (e.g., 4TB, 8MB)\n\n      --db.growth-step <GROWTH_STEP>\n          Database growth step (e.g., 4GB, 4KB)\n\n      --db.read-transaction-timeout <READ_TRANSACTION_TIMEOUT>\n          Read transaction timeout in seconds, 0 means no timeout\n\n      --offline\n          If this is enabled, then all stages except headers, bodies, and sender recovery will be unwound\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connected Peers Count with net_peerCount RPC Method\nDESCRIPTION: This example shows how to retrieve the number of peers currently connected to the Ethereum node using the net_peerCount RPC method. The response returns a number representing the count of connected peers.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/net.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// > {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"net_peerCount\",\"params\":[]}\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":10}\n```\n\n----------------------------------------\n\nTITLE: Running Reth with Docker Compose\nDESCRIPTION: Commands to run Reth using Docker Compose. This includes generating a JWT token and starting the Reth container along with Lighthouse, Prometheus, Grafana, and ethereum-metrics-exporter.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/docker.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./etc/generate-jwt.sh\ndocker compose -f etc/docker-compose.yml -f etc/lighthouse.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw Block Data using debug_getRawBlock RPC Method\nDESCRIPTION: Retrieves and returns the RLP encoded block by number, hash or tag. The method is called via RPC with the block parameter.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/debug.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"method\": \"debug_getRawBlock\", \"params\": [block]}\n```\n\n----------------------------------------\n\nTITLE: reth db Command Help Output\nDESCRIPTION: The help output for the reth db command, detailing all available subcommands (stats, list, checksum, diff, get, drop, clear, version, path) and configuration options for datadir, database settings, logging, and display preferences.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth db [OPTIONS] <COMMAND>\n\nCommands:\n  stats     Lists all the tables, their entry count and their size\n  list      Lists the contents of a table\n  checksum  Calculates the content checksum of a table\n  diff      Create a diff between two database tables or two entire databases\n  get       Gets the content of a table for the given key\n  drop      Deletes all database entries\n  clear     Deletes all table entries\n  version   Lists current and local database versions\n  path      Returns the full database path\n  help      Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --datadir <DATA_DIR>\n          The path to the data dir for all reth files and subdirectories.\n\n          Defaults to the OS-specific data directory:\n\n          - Linux: `$XDG_DATA_HOME/reth/` or `$HOME/.local/share/reth/`\n          - Windows: `{FOLDERID_RoamingAppData}/reth/`\n          - macOS: `$HOME/Library/Application Support/reth/`\n\n          [default: default]\n\n      --datadir.static-files <PATH>\n          The absolute path to store static files in.\n\n      --config <FILE>\n          The path to the configuration file to use\n\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nDatabase:\n      --db.log-level <LOG_LEVEL>\n          Database logging level. Levels higher than \"notice\" require a debug build\n\n          Possible values:\n          - fatal:   Enables logging for critical conditions, i.e. assertion failures\n          - error:   Enables logging for error conditions\n          - warn:    Enables logging for warning conditions\n          - notice:  Enables logging for normal but significant condition\n          - verbose: Enables logging for verbose informational\n          - debug:   Enables logging for debug-level messages\n          - trace:   Enables logging for trace debug-level messages\n          - extra:   Enables logging for extra debug-level messages\n\n      --db.exclusive <EXCLUSIVE>\n          Open environment in exclusive/monopolistic mode. Makes it possible to open a database on an NFS volume\n\n          [possible values: true, false]\n\n      --db.max-size <MAX_SIZE>\n          Maximum database size (e.g., 4TB, 8MB)\n\n      --db.growth-step <GROWTH_STEP>\n          Database growth step (e.g., 4GB, 4KB)\n\n      --db.read-transaction-timeout <READ_TRANSACTION_TIMEOUT>\n          Read transaction timeout in seconds, 0 means no timeout\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Checking Reth Database Integrity\nDESCRIPTION: This script clones the Reth repository, builds database tools, and runs a check on the database integrity. It's useful for diagnosing database-related errors.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/troubleshooting.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/paradigmxyz/reth\ncd reth\nmake db-tools\n./db-tools/mdbx_chk $(reth db path)/mdbx.dat | tee mdbx_chk.log\n```\n\n----------------------------------------\n\nTITLE: Starting Prometheus and Grafana Services\nDESCRIPTION: Commands to start the Prometheus and Grafana services using Homebrew services. This initializes both monitoring components as background services.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/observability.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew services start prometheus\nbrew services start grafana\n```\n\n----------------------------------------\n\nTITLE: Reth Stage Dump Help Output\nDESCRIPTION: Complete help output showing all available options and configurations for the reth stage dump command, including datadir settings, database configurations, logging options, and display preferences\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/dump.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth stage dump [OPTIONS] <COMMAND>\n\nCommands:\n  execution        Execution stage\n  storage-hashing  `StorageHashing` stage\n  account-hashing  `AccountHashing` stage\n  merkle           Merkle stage\n  help             Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --datadir <DATA_DIR>\n          The path to the data dir for all reth files and subdirectories.\n\n          Defaults to the OS-specific data directory:\n\n          - Linux: `$XDG_DATA_HOME/reth/` or `$HOME/.local/share/reth/`\n          - Windows: `{FOLDERID_RoamingAppData}/reth/`\n          - macOS: `$HOME/Library/Application Support/reth/`\n\n          [default: default]\n\n      --datadir.static-files <PATH>\n          The absolute path to store static files in.\n\n      --config <FILE>\n          The path to the configuration file to use\n\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nDatabase:\n      --db.log-level <LOG_LEVEL>\n          Database logging level. Levels higher than \"notice\" require a debug build\n\n          Possible values:\n          - fatal:   Enables logging for critical conditions, i.e. assertion failures\n          - error:   Enables logging for error conditions\n          - warn:    Enables logging for warning conditions\n          - notice:  Enables logging for normal but significant condition\n          - verbose: Enables logging for verbose informational\n          - debug:   Enables logging for debug-level messages\n          - trace:   Enables logging for trace debug-level messages\n          - extra:   Enables logging for extra debug-level messages\n\n      --db.exclusive <EXCLUSIVE>\n          Open environment in exclusive/monopolistic mode. Makes it possible to open a database on an NFS volume\n\n          [possible values: true, false]\n\n      --db.max-size <MAX_SIZE>\n          Maximum database size (e.g., 4TB, 8MB)\n\n      --db.growth-step <GROWTH_STEP>\n          Database growth step (e.g., 4GB, 4KB)\n\n      --db.read-transaction-timeout <READ_TRANSACTION_TIMEOUT>\n          Read transaction timeout in seconds, 0 means no timeout\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Retrieving Web3 Client Version using RPC\nDESCRIPTION: This snippet demonstrates how to get the web3 client version using an RPC call. It shows the request and response format.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/web3.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// > {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"web3_clientVersion\",\"params\":[]}\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"reth/v0.0.1/x86_64-unknown-linux-gnu\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Simplest ExEx Extension\nDESCRIPTION: A minimal ExEx implementation that does nothing but run an infinite loop. This demonstrates the basic structure of an ExEx with the context parameter that will be used for communication.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/exex/hello-world.md#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../../sources/exex/hello-world/src/bin/2.rs}}\n```\n\n----------------------------------------\n\nTITLE: Describing EIP-4844 Transaction Parameters in Markdown\nDESCRIPTION: Lists the additional parameters specific to EIP-4844 transactions (type 0x3), which were introduced in Ethereum's Dencun fork to provide temporary scaling relief for rollups.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/transactions.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- `max_fee_per_blob_gas`, The maximum total fee per gas the sender is willing to pay for blob gas in wei\n- `blob_versioned_hashes`, List of versioned blob hashes associated with the transaction's EIP-4844 data blobs.\n```\n\n----------------------------------------\n\nTITLE: Setting Database Options in reth\nDESCRIPTION: Provides options for configuring database behavior, including exclusive mode, maximum size, growth step, and read transaction timeout.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/node.md#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n--db.exclusive <EXCLUSIVE>\n--db.max-size <MAX_SIZE>\n--db.growth-step <GROWTH_STEP>\n--db.read-transaction-timeout <READ_TRANSACTION_TIMEOUT>\n```\n\n----------------------------------------\n\nTITLE: Reth P2P Header Command Help Output\nDESCRIPTION: Detailed help output showing all available options and arguments for the reth p2p header command, including logging configuration options and display settings\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/p2p/header.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth p2p header [OPTIONS] <ID>\n\nArguments:\n  <ID>\n          The header number or hash\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Peer Events using admin_peerEvents in JavaScript\nDESCRIPTION: This snippet demonstrates how to subscribe to peer events using the admin_peerEvents method and how to unsubscribe using admin_peerEvents_unsubscribe. It shows the subscription process and an example of a received event.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/admin.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// > {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"admin_peerEvents\",\"params\":[]}\n// responds with subscription ID\n{\"jsonrpc\": \"2.0\", \"id\": 1, \"result\": \"0xcd0c3e8af590364c09d0fa6a1210faf5\"}\n\n// Example event when a peer connects\n{\"jsonrpc\":\"2.0\",\"method\":\"admin_subscription\",\"params\":{\"subscription\":\"0xcd0c3e8af590364c09d0fa6a1210faf5\",\"result\":{\"type\":\"add\",\"peer\":{\"id\":\"44826a5d6a55f88a18298bca4773fca5749cdc3a5c9f308aa7d810e9b31123f3e7c5fba0b1d70aac5308426f47df2a128a6747040a3815cc7dd7167d03be320d\",\"enode\":\"enode://44826a5d6a55f88a18298bca4773fca5749cdc3a5c9f308aa7d810e9b31123f3e7c5fba0b1d70aac5308426f47df2a128a6747040a3815cc7dd7167d03be320d@192.168.1.1:30303\",\"addr\":\"192.168.1.1:30303\"}}}}\n\n// Unsubscribe\n// > {\"jsonrpc\":\"2.0\",\"id\":2,\"method\":\"admin_peerEvents_unsubscribe\",\"params\":[\"0xcd0c3e8af590364c09d0fa6a1210faf5\"]}\n{\"jsonrpc\":\"2.0\",\"id\":2,\"result\":true}\n```\n\n----------------------------------------\n\nTITLE: Enabling heap profiling with jemalloc-prof feature\nDESCRIPTION: Command to build reth with heap profiling enabled. This feature implicitly enables the jemalloc feature as well.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/profiling.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo build --features jemalloc-prof\n```\n\n----------------------------------------\n\nTITLE: Defining NetworkInner Structure in Rust\nDESCRIPTION: Defines the NetworkInner struct, which contains core components for network management including active peer count, message channel, listener address, peer ID, peers handle, and network mode.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nstruct NetworkInner {\n    /// Number of active peer sessions the node's currently handling.\n    num_active_peers: Arc<AtomicUsize>,\n    /// Sender half of the message channel to the [`NetworkManager`].\n    to_manager_tx: UnboundedSender<NetworkHandleMessage>,\n    /// The local address that accepts incoming connections.\n    listener_address: Arc<Mutex<SocketAddr>>,\n    /// The identifier used by this node.\n    local_peer_id: PeerId,\n    /// Access to all the nodes\n    peers: PeersHandle,\n    /// The mode of the network\n    network_mode: NetworkMode,\n}\n```\n\n----------------------------------------\n\nTITLE: Help Output for Reth Storage-Hashing Stage Dump Command\nDESCRIPTION: The complete help output for the storage-hashing dump command, showing all available options including output directory specification, block range selection, logging configurations, and display settings.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/dump/storage-hashing.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUsage: reth stage dump storage-hashing [OPTIONS] --output-datadir <OUTPUT_PATH> --from <FROM> --to <TO>\n\nOptions:\n      --output-datadir <OUTPUT_PATH>\n          The path to the new datadir folder.\n\n  -f, --from <FROM>\n          From which block\n\n  -t, --to <TO>\n          To which block\n\n  -d, --dry-run\n          If passed, it will dry-run a stage execution from the newly created database right after dumping\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Checking RAM Information and Testing RAM Health\nDESCRIPTION: These commands use lshw to display RAM information and memtester to check RAM health. They are useful for diagnosing potential memory-related issues affecting Reth performance.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/troubleshooting.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo lshw -short -C memory\nsudo memtester 10G\nsudo memtester 1G 1\n```\n\n----------------------------------------\n\nTITLE: Querying Transaction by ID in Reth\nDESCRIPTION: Mermaid diagram showing the process of querying a transaction by its ID in Reth, demonstrating the decision flow between DatabaseProvider and StaticFileProvider based on transaction number.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/static-file/static-file/README.md#2025-04-16_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n    RPC-->P\n    P(\"Provider::transaction_by_id(transaction_number)\")-->PF(ProviderFactory)\n    PF--get_-->DC1{transaction_number <br> > <br> highest static file transaction}\n    DC1 --> |true| PD1(\"DatabaseProvider::transaction_by_id(transaction_number)\")\n    DC1 --> |false| SFP(\"StaticFileProvider::transaction_by_id(transaction_number)\")\n    PD1 --> MDBX\n    SFP --find block range from transaction number--> JP(\"StaticFileJarProvider::transaction_by_id(transaction_number)\")\n    JP --\"creates\"-->SC(StaticFileCursor)\n    SC --\".get_one&lt; HeaderMask&lt; Header  &gt; &gt;(number)\"--->NJC(\"NippyJarCursor\")\n    NJC--\".row_by_number(row_index, mask)\"-->NJ[NippyJar]\n    NJ--\"&[u8]\"-->NJC\n    NJC--\"&[u8]\"-->SC\n    SC--\"Header\"--> JP\n    JP--\"Header\"--> SFP\n```\n\n----------------------------------------\n\nTITLE: Tracing Block Execution using debug_traceBlock RPC Method\nDESCRIPTION: Returns a full stack trace of all invoked opcodes of transactions included in the block. Expects an RLP-encoded block. The parent block must be present for this to work.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/debug.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\"method\": \"debug_traceBlock\", \"params\": [rlp, opts]}\n```\n\n----------------------------------------\n\nTITLE: Executing trace_rawTransaction in JavaScript\nDESCRIPTION: Illustrates the usage of trace_rawTransaction method, which traces a call to eth_sendRawTransaction without making the call and returns the traces. It takes a raw transaction and trace types as parameters.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/trace.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// > {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"trace_rawTransaction\",\"params\":[\"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\",[\"trace\"]]}\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"output\": \"0x\",\n            \"stateDiff\": null,\n            \"trace\": [{\n            \"action\": { ... },\n            \"result\": {\n                \"gasUsed\": \"0x0\",\n                \"output\": \"0x\"\n            },\n            \"subtraces\": 0,\n            \"traceAddress\": [],\n            \"type\": \"call\"\n        }],\n            \"vmTrace\": null\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reth Config CLI Help Output\nDESCRIPTION: Complete help output showing all available options for the reth config command, including logging configuration, file management, display settings, and verbosity levels\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/config.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth config [OPTIONS]\n\nOptions:\n      --config <FILE>\n          The path to the configuration file to use.\n\n      --default\n          Show the default config\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Configuring Engine Options in reth\nDESCRIPTION: Options for fine-tuning the reth engine, including persistence threshold, memory block buffer, caching, and proof task concurrency.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/node.md#2025-04-16_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n--engine.persistence-threshold <PERSISTENCE_THRESHOLD>\n--engine.memory-block-buffer-target <MEMORY_BLOCK_BUFFER_TARGET>\n--engine.legacy-state-root\n--engine.caching-and-prewarming\n--engine.cross-block-cache-size <CROSS_BLOCK_CACHE_SIZE>\n--engine.state-root-task-compare-updates\n--engine.accept-execution-requests-hash\n--engine.max-proof-task-concurrency <MAX_PROOF_TASK_CONCURRENCY>\n--engine.reserved-cpu-cores <RESERVED_CPU_CORES>\n--engine.precompile-cache\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Trace with trace_get Method in JavaScript\nDESCRIPTION: This snippet shows how to use the trace_get method to retrieve a specific trace at a given position. It includes the JSON-RPC request format with transaction hash and indices, and the expected response structure with detailed trace information.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/trace.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// > {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"trace_get\",\"params\":[\"0x17104ac9d3312d8c136b7f44d4b8b47852618065ebfa534bd2d3b5ef218ca1f3\",[\"0x0\"]]}\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"action\": {\n            \"callType\": \"call\",\n            \"from\": \"0x1c39ba39e4735cb65978d4db400ddd70a72dc750\",\n            \"gas\": \"0x13e99\",\n            \"input\": \"0x16c72721\",\n            \"to\": \"0x2bd2326c993dfaef84f696526064ff22eba5b362\",\n            \"value\": \"0x0\"\n        },\n        \"blockHash\": \"0x7eb25504e4c202cf3d62fd585d3e238f592c780cca82dacb2ed3cb5b38883add\",\n            \"blockNumber\": 3068185,\n            \"result\": {\n            \"gasUsed\": \"0x183\",\n            \"output\": \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n        },\n        \"subtraces\": 0,\n            \"traceAddress\": [\n            0\n        ],\n        \"transactionHash\": \"0x17104ac9d3312d8c136b7f44d4b8b47852618065ebfa534bd2d3b5ef218ca1f3\",\n        \"transactionPosition\": 2,\n        \"type\": \"call\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reth DB Version Command Help Output\nDESCRIPTION: Complete help output showing all available options for the reth db version command, including chain selection, logging configuration, and display settings\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/version.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth db version [OPTIONS]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Building reth with snmalloc allocator for profiling\nDESCRIPTION: Command to build reth with the snmalloc allocator instead of the default, for profiling memory allocation performance.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/bin/reth-bench/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nRUSTFLAGS=\"-C target-cpu=native\" cargo build --profile profiling --no-default-features --features \"snmalloc-native,asm-keccak\"\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf schema for ExEx notifications\nDESCRIPTION: Protobuf definition file that declares a gRPC service for streaming blockchain notifications from the ExEx to remote clients.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/exex/remote.md#2025-04-16_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\n{{#include ../../sources/exex/remote/proto/exex.proto}}\n```\n\n----------------------------------------\n\nTITLE: Implementing HeadersClient and BodiesClient for FetchClient in Rust\nDESCRIPTION: Defines the FetchClient implementation for HeadersClient and BodiesClient traits, enabling asynchronous fetching of block headers and bodies from peers.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nimpl HeadersClient for FetchClient {\n    /// Sends a `GetBlockHeaders` request to an available peer.\n    async fn get_headers(&self, request: HeadersRequest) -> PeerRequestResult<BlockHeaders> {\n        let (response, rx) = oneshot::channel();\n        self.request_tx.send(DownloadRequest::GetBlockHeaders { request, response })?;\n        rx.await?.map(WithPeerId::transform)\n    }\n}\n\nimpl BodiesClient for FetchClient {\n    async fn get_block_bodies(&self, request: Vec<B256>) -> PeerRequestResult<Vec<BlockBody>> {\n        let (response, rx) = oneshot::channel();\n        self.request_tx.send(DownloadRequest::GetBlockBodies { request, response })?;\n        rx.await?\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BodiesDownloader Structure in Rust\nDESCRIPTION: Defines the BodiesDownloader struct used for downloading block bodies, including fields for client, consensus, retries, batch size, and concurrency.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\npub struct BodiesDownloader<Client, Consensus> {\n    /// The bodies client\n    client: Arc<Client>,\n    /// The consensus client\n    consensus: Arc<Consensus>,\n    /// The number of retries for each request.\n    retries: usize,\n    /// The batch size per one request\n    batch_size: usize,\n    /// The maximum number of requests to send concurrently.\n    concurrency: usize,\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Reth to a specific version\nDESCRIPTION: Git and Cargo commands to update Reth to a specific version and rebuild it.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/source.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd reth\ngit fetch\ngit checkout ${VERSION}\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Implementing UnauthedP2PStream for Handshake in Rust\nDESCRIPTION: This snippet defines and implements UnauthedP2PStream, which is used to perform the initial Hello handshake in the RLPx layer. It sends a Hello message and waits for a response, then returns a P2PStream if successful.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/eth-wire.md#2025-04-16_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n#[pin_project]\npub struct UnauthedP2PStream<S> {\n    #[pin]\n    inner: S,\n}\n\nimpl<S> UnauthedP2PStream<S> {\n    // ...\n    pub async fn handshake(mut self, hello: HelloMessage) -> Result<(P2PStream<S>, HelloMessage), Error> {\n        self.inner.send(alloy_rlp::encode(P2PMessage::Hello(hello.clone())).into()).await?;\n        let first_message_bytes = tokio::time::timeout(HANDSHAKE_TIMEOUT, self.inner.next()).await;\n\n        let their_hello = match P2PMessage::decode(&mut &first_message_bytes[..]) {\n            Ok(P2PMessage::Hello(hello)) => Ok(hello),\n            // ...\n            };\n        }?;\n        let stream = P2PStream::new(self.inner, capability);\n\n        Ok((stream, their_hello))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building reth with debug symbols and jemalloc profiling\nDESCRIPTION: Commands to compile reth with debug symbols, jemalloc, profiling features, and a performance profile. The second command with RUSTFLAGS may further improve performance.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/profiling.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo build --features jemalloc-prof --profile profiling\n\n# May improve performance even more\nRUSTFLAGS=\"-C target-cpu=native\" cargo build --features jemalloc-prof --profile profiling\n```\n\n----------------------------------------\n\nTITLE: Setting Ress Subprotocol Options in reth\nDESCRIPTION: Options for configuring the ress subprotocol, including connection limits, witness window, and caching.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/node.md#2025-04-16_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n--ress.enable\n--ress.max-active-connections <MAX_ACTIVE_CONNECTIONS>\n--ress.max-witness-window <MAX_WITNESS_WINDOW>\n--ress.witness-max-parallel <WITNESS_MAX_PARALLEL>\n--ress.witness-cache-size <WITNESS_CACHE_SIZE>\n```\n\n----------------------------------------\n\nTITLE: Configuring Account History Indexing Stage in Reth\nDESCRIPTION: Configuration for the account history indexing stage which tracks block numbers where accounts changed. The commit threshold controls the balance between memory usage and disk write frequency.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/config.md#2025-04-16_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[stages.index_account_history]\n# The maximum amount of blocks to process before writing the results to disk.\n#\n# Lower thresholds correspond to more frequent disk I/O (writes),\n# but lowers memory usage\ncommit_threshold = 100000\n```\n\n----------------------------------------\n\nTITLE: Installing Reth on Arch Linux using AUR helper\nDESCRIPTION: Commands to install stable or unstable (git) versions of Reth on Arch Linux using an AUR helper like paru.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/binaries.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nparu -S reth # Stable\nparu -S reth-git # Unstable (git)\n```\n\n----------------------------------------\n\nTITLE: Describing EIP-1559 Transaction Parameters in Markdown\nDESCRIPTION: Lists the parameters specific to EIP-1559 transactions (type 0x2), which were introduced to address network congestion and transaction fee overpricing.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/transactions.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `maxPriorityFeePerGas`, specifying the maximum fee above the base fee the sender is willing to pay,\n- `maxFeePerGas`, setting the maximum total fee the sender is willing to pay.\n```\n\n----------------------------------------\n\nTITLE: GetWitness Message Structure in Ress Protocol\nDESCRIPTION: Defines the GetWitness message (0x07) structure that requests a state witness for a specific block hash from a peer.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/ress/protocol/README.md#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n`[request-id: P, [blockhash: B_32]]`\n```\n\n----------------------------------------\n\nTITLE: Implementing StateFetcher Structure in Rust\nDESCRIPTION: Defines the StateFetcher struct, which manages low-level data fetching operations, including tracking inflight requests, available peers, and handling download requests.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\npub struct StateFetcher {\n    /// Currently active [`GetBlockHeaders`] requests\n    inflight_headers_requests:\n        HashMap<PeerId, Request<HeadersRequest, PeerRequestResult<Vec<Header>>>>,\n    /// Currently active [`GetBlockBodies`] requests\n    inflight_bodies_requests:\n        HashMap<PeerId, Request<Vec<B256>, PeerRequestResult<Vec<BlockBody>>>>,\n    /// The list of _available_ peers for requests.\n    peers: HashMap<PeerId, Peer>,\n    /// The handle to the peers manager\n    peers_handle: PeersHandle,\n    /// Requests queued for processing\n    queued_requests: VecDeque<DownloadRequest>,\n    /// Receiver for new incoming download requests\n    download_requests_rx: UnboundedReceiverStream<DownloadRequest>,\n    /// Sender for download requests, used to detach a [`FetchClient`]\n    download_requests_tx: UnboundedSender<DownloadRequest>,\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Using Metrics in Rust\nDESCRIPTION: Example of how to register, update, and describe metrics using the 'metrics' crate macros in Rust. These macros provide a convenient way to create, update, and document various types of metrics.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/design/metrics.md#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nregister_<metric>!\n<metric>!\ndescribe_<metric>!\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage History Indexing Stage in Reth\nDESCRIPTION: Settings for the storage history indexing stage which tracks block numbers where storage slots changed. The commit threshold balances memory usage with disk write frequency.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/config.md#2025-04-16_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[stages.index_storage_history]\n# The maximum amount of blocks to process before writing the results to disk.\n#\n# Lower thresholds correspond to more frequent disk I/O (writes),\n# but lowers memory usage\ncommit_threshold = 100000\n```\n\n----------------------------------------\n\nTITLE: Interacting with JSON-RPC Using Cast Commands\nDESCRIPTION: Example commands for interacting with enabled JSON-RPC APIs using Foundry's cast tool.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/intro.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncast block-number\ncast rpc admin_nodeInfo\ncast rpc debug_traceTransaction\ncast rpc trace_replayBlockTransactions\n```\n\n----------------------------------------\n\nTITLE: Git Tagging and Pushing for Release in Markdown\nDESCRIPTION: Commands for tagging a new release version and pushing it to the repository. The 'v' prefix is crucial for triggering the release workflow.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/release.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] Tag the new commit on main with `vx.y.z` (`git tag vx.y.z SHA`)\n- [ ] Push the tag (`git push origin vx.y.z`)[^1]\n```\n\n----------------------------------------\n\nTITLE: Implementing Stream and Sink Traits for EthStream in Rust\nDESCRIPTION: This snippet shows the implementation of Stream and Sink traits for EthStream. It handles RLP decoding and encoding of Ethereum protocol messages, wrapping the underlying P2PStream functionality.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/eth-wire.md#2025-04-16_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nimpl<S, E> Stream for EthStream<S> {\n    // ...\n    fn poll_next(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>> {\n        let this = self.project();\n        let bytes = ready!(this.inner.poll_next(cx)).unwrap();\n        // ...\n        let msg = match ProtocolMessage::decode(&mut bytes.as_ref()) {\n            Ok(m) => m,\n            Err(err) => {\n                return Poll::Ready(Some(Err(err.into())))\n            }\n        };\n        Poll::Ready(Some(Ok(msg.message)))\n    }\n}\n\nimpl<S, E> Sink<EthMessage> for EthStream<S> {\n    // ...\n    fn start_send(self: Pin<&mut Self>, item: EthMessage) -> Result<(), Self::Error> {\n        // ...\n        let mut bytes = BytesMut::new();\n        ProtocolMessage::from(item).encode(&mut bytes);\n\n        let bytes = bytes.freeze();\n        self.project().inner.start_send(bytes)?;\n        Ok(())\n    }\n\n    fn poll_flush(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {\n        self.project().inner.poll_flush(cx).map_err(Into::into)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Trusted Peer using admin_addTrustedPeer in JavaScript\nDESCRIPTION: This example demonstrates adding a peer to the trusted peers list using the admin_addTrustedPeer method. It accepts an enode URL and returns a boolean indicating success.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/admin.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// > {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"admin_addTrustedPeer\",\"params\":[\"enode://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@52.16.188.185:30303\"]}\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":true}\n```\n\n----------------------------------------\n\nTITLE: Implementing GetBlockHeaders Response in Reth\nDESCRIPTION: Function that retrieves a sequence of block headers based on the parameters specified in the GetBlockHeaders request. It handles traversal in both directions and enforces limits on response size and header count.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\nfn get_headers_response(&self, request: GetBlockHeaders) -> Vec<Header> {\n    let GetBlockHeaders { start_block, limit, skip, direction } = request;\n\n    let mut headers = Vec::new();\n\n    let mut block: BlockHashOrNumber = match start_block {\n        BlockHashOrNumber::Hash(start) => start.into(),\n        BlockHashOrNumber::Number(num) => {\n            if let Some(hash) = self.client.block_hash(num.into()).unwrap_or_default() {\n                hash.into()\n            } else {\n                return headers\n            }\n        }\n    };\n\n    let skip = skip as u64;\n    let mut total_bytes = APPROX_HEADER_SIZE;\n\n    for _ in 0..limit {\n        if let Some(header) = self.client.header_by_hash_or_number(block).unwrap_or_default() {\n            match direction {\n                HeadersDirection::Rising => {\n                    if let Some(next) = (header.number + 1).checked_add(skip) {\n                        block = next.into()\n                    } else {\n                        break\n                    }\n                }\n                HeadersDirection::Falling => {\n                    if skip > 0 {\n                        // prevent under flows for block.number == 0 and `block.number - skip <\n                        // 0`\n                        if let Some(next) =\n                            header.number.checked_sub(1).and_then(|num| num.checked_sub(skip))\n                        {\n                            block = next.into()\n                        } else {\n                            break\n                        }\n                    } else {\n                        block = header.parent_hash.into()\n                    }\n                }\n            }\n\n            headers.push(header);\n\n            if headers.len() >= MAX_HEADERS_SERVE {\n                break\n            }\n\n            total_bytes += APPROX_HEADER_SIZE;\n\n            if total_bytes > SOFT_RESPONSE_LIMIT {\n                break\n            }\n        } else {\n            break\n        }\n    }\n\n    headers\n}\n```\n\n----------------------------------------\n\nTITLE: Witness Message Structure in Ress Protocol\nDESCRIPTION: Defines the Witness message (0x08) structure that responds to GetWitness requests with the requested state witness data.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/ress/protocol/README.md#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n`[request-id: P, [node₁: bytes, node₂: bytes, ...]]`\n```\n\n----------------------------------------\n\nTITLE: Visualizing Release Tagging Workflow in Mermaid\nDESCRIPTION: This Mermaid diagram demonstrates the release process in the Reth project. It shows how releases are created by tagging specific commits on the main branch after merging feature branches.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/workflow.md#2025-04-16_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Releases are tags on main\n---\ngitGraph\n   commit\n   commit\n   branch feat/cool-feature\n   checkout feat/cool-feature\n   commit\n   commit\n   checkout main\n   merge feat/cool-feature\n   commit tag: \"v1.2.0\"\n   commit\n```\n\n----------------------------------------\n\nTITLE: Querying Raw Header using debug_getRawHeader RPC Method\nDESCRIPTION: Returns an RLP-encoded header for a given block. The method is invoked via RPC with the block parameter.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/debug.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"method\": \"debug_getRawHeader\", \"params\": [block]}\n```\n\n----------------------------------------\n\nTITLE: Implementing Transactions Message in Ethereum Protocol\nDESCRIPTION: Defines the Transactions struct and implements the necessary traits for encoding and decoding transaction messages in the Ethereum protocol. This includes the TransactionSigned struct and its associated methods.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/eth-wire.md#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\npub struct Transactions(\n    /// New transactions for the peer to include in its mempool.\n    pub Vec<TransactionSigned>,\n);\n\n#[reth_codec]\npub struct TransactionSigned {\n    pub hash: TxHash,\n    pub signature: Signature,\n    #[deref]\n    #[as_ref]\n    pub transaction: Transaction,\n}\n\nimpl Encodable for TransactionSigned {\n    fn encode(&self, out: &mut dyn bytes::BufMut) {\n        self.encode_inner(out, true);\n    }\n\n    fn length(&self) -> usize {\n        let len = self.payload_len();\n        len + length_of_length(len)\n    }\n}\n\nimpl Decodable for TransactionSigned {\n    fn decode(buf: &mut &[u8]) -> alloy_rlp::Result<Self> {\n        // Implementation omitted for brevity\n        //...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus and Grafana with Homebrew\nDESCRIPTION: Commands to install Prometheus and Grafana using Homebrew. These tools will be used to collect and visualize metrics from the Reth node.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/observability.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew update\nbrew install prometheus\nbrew install grafana\n```\n\n----------------------------------------\n\nTITLE: Using DbTx for Cursor Creation in Rust\nDESCRIPTION: Demonstrates how to use DbTx::cursor_read() method to create a cursor for reading from the Headers table.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/db.md#2025-04-16_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nlet mut headers_cursor = provider.tx_ref().cursor_read::<tables::Headers>()?;\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for the Reth Storage-Hashing Stage Dump Command\nDESCRIPTION: This command displays the help information for the 'reth stage dump storage-hashing' command, showing all available options and parameters.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/dump/storage-hashing.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth stage dump storage-hashing --help\n```\n\n----------------------------------------\n\nTITLE: Implementing Ping Management for Ethereum P2P Communication\nDESCRIPTION: Defines the Pinger struct and associated PingState enum for managing ping/pong messages in the Ethereum P2P network. It includes a state machine for tracking ping status and timeouts.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/eth-wire.md#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npub(crate) struct Pinger {\n    /// The timer used for the next ping.\n    ping_interval: Interval,\n    /// The timer used for the next ping.\n    timeout_timer: Pin<Box<Sleep>>,\n    timeout: Duration,\n    state: PingState,\n}\n\npub(crate) enum PingState {\n    /// There are no pings in flight, or all pings have been responded to.\n    Ready,\n    /// We have sent a ping and are waiting for a pong, but the peer has missed n pongs.\n    WaitingForPong,\n    /// The peer has failed to respond to a ping.\n    TimedOut,\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking txpool_status RPC Method\nDESCRIPTION: RPC method call to get the number of transactions pending for inclusion in the next blocks, as well as those scheduled for future execution.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/txpool.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"method\": \"txpool_status\", \"params\": []}\n```\n\n----------------------------------------\n\nTITLE: Transaction Manager Poll Implementation in Rust\nDESCRIPTION: Core polling logic for the TransactionsManager that processes network events, commands, transaction events, and manages inflight requests and pool imports.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\nfn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n    let this = self.get_mut();\n\n    // drain network/peer related events\n    while let Poll::Ready(Some(event)) = this.network_events.poll_next_unpin(cx) {\n        this.on_network_event(event);\n    }\n\n    // drain commands\n    while let Poll::Ready(Some(cmd)) = this.command_rx.poll_next_unpin(cx) {\n        this.on_command(cmd);\n    }\n\n    // drain incoming transaction events\n    while let Poll::Ready(Some(event)) = this.transaction_events.poll_next_unpin(cx) {\n        this.on_network_tx_event(event);\n    }\n\n    // Advance all requests.\n    // We remove each request one by one and add them back.\n    for idx in (0..this.inflight_requests.len()).rev() {\n        let mut req = this.inflight_requests.swap_remove(idx);\n        match req.response.poll_unpin(cx) {\n            Poll::Pending => {\n                this.inflight_requests.push(req);\n            }\n            Poll::Ready(Ok(Ok(txs))) => {\n                this.import_transactions(req.peer_id, txs.0);\n            }\n            Poll::Ready(Ok(Err(_))) => {\n                this.report_bad_message(req.peer_id);\n            }\n            Poll::Ready(Err(_)) => {\n                this.report_bad_message(req.peer_id);\n            }\n        }\n    }\n\n    // Advance all imports\n    while let Poll::Ready(Some(import_res)) = this.pool_imports.poll_next_unpin(cx) {\n        match import_res {\n            Ok(hash) => {\n                this.on_good_import(hash);\n            }\n            Err(err) => {\n                this.on_bad_import(*err.hash());\n            }\n        }\n    }\n\n    // handle and propagate new transactions\n    let mut new_txs = Vec::new();\n    while let Poll::Ready(Some(hash)) = this.pending_transactions.poll_next_unpin(cx) {\n        new_txs.push(hash);\n    }\n    if !new_txs.is_empty() {\n        this.on_new_transactions(new_txs);\n    }\n\n    // all channels are fully drained and import futures pending\n\n    Poll::Pending\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Trait in Rust\nDESCRIPTION: Defines the main Database trait with associated types for read-only and read-write transactions, and methods for creating and managing these transactions.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/db.md#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub trait Database: Send + Sync {\n    type TX: DbTx + Send + Sync + Debug + 'static;\n    type TXMut: DbTxMut + DbTx + TableImporter + Send + Sync + Debug + 'static;\n\n    #[track_caller]\n    fn tx(&self) -> Result<Self::TX, DatabaseError>;\n\n    #[track_caller]\n    fn tx_mut(&self) -> Result<Self::TXMut, DatabaseError>;\n\n    fn view<T, F>(&self, f: F) -> Result<T, DatabaseError>\n    where\n        F: FnOnce(&Self::TX) -> T,\n    {\n        let tx = self.tx()?;\n\n        let res = f(&tx);\n        tx.commit()?;\n\n        Ok(res)\n    }\n\n    fn update<T, F>(&self, f: F) -> Result<T, DatabaseError>\n    where\n        F: FnOnce(&Self::TXMut) -> T,\n    {\n        let tx = self.tx_mut()?;\n\n        let res = f(&tx);\n        tx.commit()?;\n\n        Ok(res)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Armbian Compile Script\nDESCRIPTION: Command to run the Armbian compile script with specific parameters. This script is used to build a custom OS image with the required kernel features for running Reth on ARM devices.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/build-for-arm-devices.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./compile.sh \\\nBUILD_MINIMAL=yes \\\nBUILD_DESKTOP=no \\\nKERNEL_CONFIGURE=yes \\\nCARD_DEVICE=\"/dev/sdX\" # Replace sdX with your own storage device\n```\n\n----------------------------------------\n\nTITLE: Defining Bit Size Function for Compact Codec in Rust\nDESCRIPTION: This snippet references the get_bit_size function, which determines the number of bits required for each aid field in the Compact codec's bitflag struct.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/codecs/README.md#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nderive/src/compact/mod.rs#L170\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for reth stage dump account-hashing Command in Bash\nDESCRIPTION: This snippet shows how to display the help information for the 'reth stage dump account-hashing' command using the --help flag.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/dump/account-hashing.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth stage dump account-hashing --help\n```\n\n----------------------------------------\n\nTITLE: Defining EthRequestHandler Structure in Rust\nDESCRIPTION: Defines the EthRequestHandler struct used for handling incoming ETH protocol requests, including fields for client, peers handle, and incoming requests stream.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\npub struct EthRequestHandler<C> {\n    /// The client type that can interact with the chain.\n    client: Arc<C>,\n    /// Used for reporting peers.\n    #[expect(dead_code)]\n    peers: PeersHandle,\n    /// Incoming request from the [NetworkManager](crate::NetworkManager).\n    incoming_requests: UnboundedReceiverStream<IncomingEthRequest>,\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Types in Compact Codec Derive Macro\nDESCRIPTION: This snippet points to the location where unknown types are handled in the Compact codec derive macro. Unknown types are treated similarly to Bytes fields due to limitations in proc_macro.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/codecs/README.md#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nderive/src/compact/generator.rs#55\n```\n\n----------------------------------------\n\nTITLE: Reth Stage Run Help Output\nDESCRIPTION: Comprehensive help output showing all available options and configuration parameters for running a single stage in Reth, including datadir options, database settings, networking configurations, and logging preferences.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/run.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth stage run [OPTIONS] --from <FROM> --to <TO> <STAGE>\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --datadir <DATA_DIR>\n          The path to the data dir for all reth files and subdirectories.\n\n          Defaults to the OS-specific data directory:\n\n          - Linux: `$XDG_DATA_HOME/reth/` or `$HOME/.local/share/reth/`\n          - Windows: `{FOLDERID_RoamingAppData}/reth/`\n          - macOS: `$HOME/Library/Application Support/reth/`\n\n          [default: default]\n\n      --datadir.static-files <PATH>\n          The absolute path to store static files in.\n\n      --config <FILE>\n          The path to the configuration file to use\n\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nDatabase:\n      --db.log-level <LOG_LEVEL>\n          Database logging level. Levels higher than \"notice\" require a debug build\n\n          Possible values:\n          - fatal:   Enables logging for critical conditions, i.e. assertion failures\n          - error:   Enables logging for error conditions\n          - warn:    Enables logging for warning conditions\n          - notice:  Enables logging for normal but significant condition\n          - verbose: Enables logging for verbose informational\n          - debug:   Enables logging for debug-level messages\n          - trace:   Enables logging for trace debug-level messages\n          - extra:   Enables logging for extra debug-level messages\n\n      --db.exclusive <EXCLUSIVE>\n          Open environment in exclusive/monopolistic mode. Makes it possible to open a database on an NFS volume\n\n          [possible values: true, false]\n\n      --db.max-size <MAX_SIZE>\n          Maximum database size (e.g., 4TB, 8MB)\n\n      --db.growth-step <GROWTH_STEP>\n          Database growth step (e.g., 4GB, 4KB)\n\n      --db.read-transaction-timeout <READ_TRANSACTION_TIMEOUT>\n          Read transaction timeout in seconds, 0 means no timeout\n\n      --metrics <SOCKET>\n          Enable Prometheus metrics.\n\n          The metrics will be served at the given interface and port.\n\n      --from <FROM>\n          The height to start at\n\n  -t, --to <TO>\n          The end of the stage\n\n      --batch-size <BATCH_SIZE>\n          Batch size for stage execution and unwind\n\n  -s, --skip-unwind\n          Normally, running the stage requires unwinding for stages that already have been run, in order to not rewrite to the same database slots.\n\n          You can optionally skip the unwinding phase if you're syncing a block range that has not been synced before.\n\n  -c, --commit\n          Commits the changes in the database. WARNING: potentially destructive.\n\n          Useful when you want to run diagnostics on the database.\n\n      --checkpoints\n          Save stage checkpoints\n\n  <STAGE>\n          The name of the stage to run\n\n          Possible values:\n          - headers:         The headers stage within the pipeline\n          - bodies:          The bodies stage within the pipeline\n          - senders:         The senders stage within the pipeline\n          - execution:       The execution stage within the pipeline\n          - account-hashing: The account hashing stage within the pipeline\n          - storage-hashing: The storage hashing stage within the pipeline\n          - hashing:         The account and storage hashing stages within the pipeline\n          - merkle:          The merkle stage within the pipeline\n          - tx-lookup:       The transaction lookup stage within the pipeline\n          - account-history: The account history stage within the pipeline\n          - storage-history: The storage history stage within the pipeline\n\nNetworking:\n  -d, --disable-discovery\n          Disable the discovery service\n\n      --disable-dns-discovery\n          Disable the DNS discovery\n\n      --disable-discv4-discovery\n          Disable Discv4 discovery\n\n      --enable-discv5-discovery\n          Enable Discv5 discovery\n\n      --disable-nat\n          Disable Nat discovery\n\n      --discovery.addr <DISCOVERY_ADDR>\n          The UDP address to use for devp2p peer discovery version 4\n\n          [default: 0.0.0.0]\n\n      --discovery.port <DISCOVERY_PORT>\n          The UDP port to use for devp2p peer discovery version 4\n\n          [default: 30303]\n\n      --discovery.v5.addr <DISCOVERY_V5_ADDR>\n          The UDP IPv4 address to use for devp2p peer discovery version 5. Overwritten by `RLPx` address, if it's also IPv4\n\n      --discovery.v5.addr.ipv6 <DISCOVERY_V5_ADDR_IPV6>\n          The UDP IPv6 address to use for devp2p peer discovery version 5. Overwritten by `RLPx` address, if it's also IPv6\n\n      --discovery.v5.port <DISCOVERY_V5_PORT>\n          The UDP IPv4 port to use for devp2p peer discovery version 5. Not used unless `--addr` is IPv4, or `--discovery.v5.addr` is set\n\n          [default: 9200]\n\n      --discovery.v5.port.ipv6 <DISCOVERY_V5_PORT_IPV6>\n          The UDP IPv6 port to use for devp2p peer discovery version 5. Not used unless `--addr` is IPv6, or `--discovery.addr.ipv6` is set\n\n          [default: 9200]\n\n      --discovery.v5.lookup-interval <DISCOVERY_V5_LOOKUP_INTERVAL>\n          The interval in seconds at which to carry out periodic lookup queries, for the whole run of the program\n\n          [default: 20]\n\n      --discovery.v5.bootstrap.lookup-interval <DISCOVERY_V5_BOOTSTRAP_LOOKUP_INTERVAL>\n          The interval in seconds at which to carry out boost lookup queries, for a fixed number of times, at bootstrap\n\n          [default: 5]\n\n      --discovery.v5.bootstrap.lookup-countdown <DISCOVERY_V5_BOOTSTRAP_LOOKUP_COUNTDOWN>\n          The number of times to carry out boost lookup queries at bootstrap\n\n          [default: 200]\n\n      --trusted-peers <TRUSTED_PEERS>\n          Comma separated enode URLs of trusted peers for P2P connections.\n\n          --trusted-peers enode://abcd@192.168.0.1:30303\n\n      --trusted-only\n          Connect to or accept from trusted peers only\n\n      --bootnodes <BOOTNODES>\n          Comma separated enode URLs for P2P discovery bootstrap.\n\n          Will fall back to a network-specific default if not specified.\n\n      --dns-retries <DNS_RETRIES>\n          Amount of DNS resolution requests retries to perform when peering\n\n          [default: 0]\n\n      --peers-file <FILE>\n          The path to the known peers file. Connected peers are dumped to this file on nodes\n          shutdown, and read on startup. Cannot be used with `--no-persist-peers`.\n\n      --identity <IDENTITY>\n          Custom node identity\n\n          [default: reth/<VERSION>-<SHA>/<ARCH>]\n\n      --p2p-secret-key <PATH>\n          Secret key to use for this node.\n\n          This will also deterministically set the peer ID. If not specified, it will be set in the data dir for the chain being used.\n\n      --no-persist-peers\n          Do not persist peers.\n\n      --nat <NAT>\n          NAT resolution method (any|none|upnp|publicip|extip:\\<IP\\>)\n\n          [default: any]\n\n      --addr <ADDR>\n          Network listening address\n\n          [default: 0.0.0.0]\n\n      --port <PORT>\n          Network listening port\n\n          [default: 30303]\n\n      --max-outbound-peers <MAX_OUTBOUND_PEERS>\n          Maximum number of outbound requests. default: 100\n\n      --max-inbound-peers <MAX_INBOUND_PEERS>\n          Maximum number of inbound requests. default: 30\n\n      --max-tx-reqs <COUNT>\n          Max concurrent `GetPooledTransactions` requests.\n\n          [default: 130]\n\n      --max-tx-reqs-peer <COUNT>\n          Max concurrent `GetPooledTransactions` requests per peer.\n\n          [default: 1]\n\n      --max-seen-tx-history <COUNT>\n          Max number of seen transactions to remember per peer.\n\n          Default is 320 transaction hashes.\n\n          [default: 320]\n\n      --max-pending-imports <COUNT>\n          Max number of transactions to import concurrently.\n\n          [default: 4096]\n\n      --pooled-tx-response-soft-limit <BYTES>\n          Experimental, for usage in research. Sets the max accumulated byte size of transactions\n          to pack in one response.\n          Spec'd at 2MiB.\n\n          [default: 2097152]\n\n      --pooled-tx-pack-soft-limit <BYTES>\n          Experimental, for usage in research. Sets the max accumulated byte size of transactions to\n          request in one request.\n\n          Since `RLPx` protocol version 68, the byte size of a transaction is shared as metadata in a\n          transaction announcement (see `RLPx` specs). This allows a node to request a specific size\n          response.\n\n          By default, nodes request only 128 KiB worth of transactions, but should a peer request\n          more, up to 2 MiB, a node will answer with more than 128 KiB.\n\n          Default is 128 KiB.\n\n          [default: 131072]\n\n      --max-tx-pending-fetch <COUNT>\n          Max capacity of cache of hashes for transactions pending fetch.\n\n          [default: 25600]\n\n      --net-if.experimental <IF_NAME>\n          Name of network interface used to communicate with peers.\n\n          If flag is set, but no value is passed, the default interface for docker `eth0` is tried.\n\n      --tx-propagation-policy <TX_PROPAGATION_POLICY>\n          Transaction Propagation Policy\n\n          The policy determines which peers transactions are gossiped to.\n\n          [default: All]\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n\n```\n\n----------------------------------------\n\nTITLE: Adding Transaction Tracking State to an ExEx in Rust\nDESCRIPTION: Enhanced version of the ExEx that tracks the number of transactions in each block while handling chain reorganizations. It maintains the first block seen and total transaction count while properly accounting for reverted transactions during reorgs.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/exex/tracking-state.md#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../../sources/exex/tracking-state/src/bin/2.rs}}\n```\n\n----------------------------------------\n\nTITLE: Defining Hardfork Mappings in ChainSpec\nDESCRIPTION: Example of mapping Optimism (Op) hardforks to Ethereum hardforks in the ChainSpec. This is necessary because Opstack uses L1 header primitives, requiring equivalent consensus checks for new L1 hardforks.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/HARDFORK-CHECKLIST.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`OpHardfork::Isthmus` corresponds to `EthereumHardfork::Prague`. These mappings must be defined in the `ChainSpec`.\n```\n\n----------------------------------------\n\nTITLE: Displaying Reth Stage Dump Help Command\nDESCRIPTION: Command to display help information for the reth stage dump functionality\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/dump.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth stage dump --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Peer Connections in Reth\nDESCRIPTION: Top-level peer connection settings for Reth's networking component. Controls peer connection behavior, trusted nodes, connection intervals, and ban duration for misbehaving peers.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/config.md#2025-04-16_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[peers]\n# How often reth will attempt to make outgoing connections,\n# if there is room for more peers\nrefill_slots_interval = '1s'\n# A list of ENRs for trusted peers, which are peers reth will always try to connect to.\ntrusted_nodes = []\n# Whether reth will only attempt to connect to the peers specified above,\n# or if it will connect to other peers in the network\nconnect_trusted_nodes_only = false\n# The duration for which a badly behaving peer is banned\nban_duration = '12h'\n```\n\n----------------------------------------\n\nTITLE: Implementing get_or_init_fut for ReverseHeadersDownloader in Rust\nDESCRIPTION: Implements the get_or_init_fut method for ReverseHeadersDownloader, which initializes and returns a HeadersRequestFuture for fetching headers from peers.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nfn get_or_init_fut(&mut self) -> HeadersRequestFuture {\n    match self.request.take() {\n        None => {\n            // queue in the first request\n            let client = Arc::clone(&self.client);\n            let req = self.headers_request();\n            tracing::trace!(\n                target: \"downloaders::headers\",\n                \"requesting headers {req:?}\"\n            );\n            HeadersRequestFuture {\n                request: req.clone(),\n                fut: Box::pin(async move { client.get_headers(req).await }),\n                retries: 0,\n                max_retries: self.request_retries,\n            }\n        }\n        Some(fut) => fut,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Reth release signature using GPG\nDESCRIPTION: Example command to verify a Reth release signature using GPG. Users should replace the filenames with those corresponding to their downloaded Reth release.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/binaries.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngpg --verify reth-v0.2.0-beta.9-x86_64-unknown-linux-gnu.tar.gz.asc reth-v0.1.0-beta.9-x86_64-unknown-linux-gnu.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Continuous Metrics Monitoring via Command Line\nDESCRIPTION: Bash one-liner that continuously polls the metrics endpoint, filters the output to show only metric values (without headers), sorts them, and displays them with timestamps every 10 seconds.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/observability.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwhile true; do date; curl -s localhost:9001 | grep -Ev '^(#|$)' | sort; echo; sleep 10; done\n```\n\n----------------------------------------\n\nTITLE: Executing Reth Debug Replay-Engine Help Command\nDESCRIPTION: This command displays the help information for the 'reth debug replay-engine' command, showing all available options and their descriptions.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug/replay-engine.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth debug replay-engine --help\n```\n\n----------------------------------------\n\nTITLE: Defining State Root Message Structure (Rust)\nDESCRIPTION: This code defines the structure of messages sent to the Sparse Trie from the State Root Task. It includes the proof to be revealed and a list of updates to be applied.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/engine/tree/docs/root.md#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub struct StateRootMessage {\n    /// The proof that needs to be revealed\n    pub proof: Vec<Bytes>,\n    /// The list of updates that need to be applied\n    pub updates: Vec<StateRootUpdate>,\n}\n```\n\n----------------------------------------\n\nTITLE: Reth Stage Dump Execution Help Output\nDESCRIPTION: The full help text for the 'reth stage dump execution' command, showing required parameters like output directory and block range, along with options for chain selection, logging configuration, and verbosity levels.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/dump/execution.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth stage dump execution [OPTIONS] --output-datadir <OUTPUT_PATH> --from <FROM> --to <TO>\n\nOptions:\n      --output-datadir <OUTPUT_PATH>\n          The path to the new datadir folder.\n\n  -f, --from <FROM>\n          From which block\n\n  -t, --to <TO>\n          To which block\n\n  -d, --dry-run\n          If passed, it will dry-run a stage execution from the newly created database right after dumping\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Adding communication channel between ExEx and gRPC server\nDESCRIPTION: Enhanced implementation that creates a communication channel between the ExEx and gRPC server components to pass notifications.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/exex/remote.md#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../../sources/exex/remote/src/exex_2.rs}}\n```\n\n----------------------------------------\n\nTITLE: Querying Header by Block Number in Reth\nDESCRIPTION: Mermaid diagram showing the flow of a header query by block number through the Reth provider system, including the decision process between DatabaseProvider and StaticFileProvider.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/static-file/static-file/README.md#2025-04-16_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n    RPC-->P\n    P(\"Provider::header(block_number)\")-->PF(ProviderFactory)\n    PF--get_-->DC1{block_number <br> > <br> highest static file block}\n    DC1 --> |true| PD1(\"DatabaseProvider::header(block_number)\")\n    DC1 --> |false| SFP(\"StaticFileProvider::header(block_number)\")\n    PD1 --> MDBX\n    SFP --find block range from block number--> JP(\"StaticFileJarProvider::header(block_number)\")\n    JP --\"creates\"-->SC(StaticFileCursor)\n    SC --\".get_one&lt; HeaderMask&lt; Header  &gt; &gt;(number)\"--->NJC(\"NippyJarCursor\")\n    NJC--\".row_by_number(row_index, mask)\"-->NJ[NippyJar]\n    NJ--\"&[u8]\"-->NJC\n    NJC--\"&[u8]\"-->SC\n    SC--\"Header\"--> JP\n    JP--\"Header\"--> SFP\n```\n\n----------------------------------------\n\nTITLE: Recommended VSCode Settings for Rust Development\nDESCRIPTION: JSON configuration for VSCode that sets up automatic formatting on save using rust-analyzer with nightly settings for the Reth codebase.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"editor.formatOnSave\": true,\n\"rust-analyzer.rustfmt.extraArgs\": [\"+nightly\"],\n\"[rust]\": {\n\"editor.defaultFormatter\": \"rust-lang.rust-analyzer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Help output for reth db get command\nDESCRIPTION: Displays the complete help output for the 'reth db get' command, including all available subcommands, options, and configuration parameters for datadir, logging, and display settings.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/get.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth db get [OPTIONS] <COMMAND>\n\nCommands:\n  mdbx         Gets the content of a database table for the given key\n  static-file  Gets the content of a static file segment for the given key\n  help         Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Displaying Reth Debug Merkle Help Command\nDESCRIPTION: Command to display help information for the reth debug merkle functionality\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug/merkle.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth debug merkle --help\n```\n\n----------------------------------------\n\nTITLE: Using DbTx for Header Retrieval in Rust\nDESCRIPTION: Demonstrates the use of DbTx::get() method to retrieve a header from the Headers table in a DatabaseProvider implementation.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/db.md#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nimpl<TX: DbTx> HeaderProvider for DatabaseProvider<TX> {\n    fn header_by_number(&self, num: BlockNumber) -> ProviderResult<Option<Header>> {\n        self.static_file_provider.get_with_static_file_or_database(\n            StaticFileSegment::Headers,\n            num,\n            |static_file| static_file.header_by_number(num),\n            || Ok(self.tx.get::<tables::Headers>(num)?),\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies in Cargo.toml for Reth ExEx\nDESCRIPTION: The Cargo.toml configuration that specifies the necessary Reth dependencies for building the ExEx extension.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/exex/hello-world.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n{{#include ../../sources/exex/hello-world/Cargo.toml}}\n```\n\n----------------------------------------\n\nTITLE: Responding to GetPooledTransactions Requests in Reth\nDESCRIPTION: This function handles requests for pooled transactions. It collects all transactions from the node's pool, recovers their signers, updates the requesting peer's known transactions, and sends the transactions back to the peer in a PooledTransactions message.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_34\n\nLANGUAGE: rust\nCODE:\n```\nfn on_get_pooled_transactions(\n    &mut self,\n    peer_id: PeerId,\n    request: GetPooledTransactions,\n    response: oneshot::Sender<RequestResult<PooledTransactions>>,\n) {\n    if let Some(peer) = self.peers.get_mut(&peer_id) {\n        let transactions = self\n            .pool\n            .get_all(request.0)\n            .into_iter()\n            .map(|tx| tx.transaction.to_recovered_transaction().into_tx())\n            .collect::<Vec<_>>();\n\n        // we sent a response at which point we assume that the peer is aware of the transaction\n        peer.transactions.extend(transactions.iter().map(|tx| tx.hash()));\n\n        let resp = PooledTransactions(transactions);\n        let _ = response.send(Ok(resp));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Block by Hash in Reth\nDESCRIPTION: Mermaid diagram illustrating the process of querying a block by its hash in Reth, showing the interaction between DatabaseProvider and StaticFileProvider based on block number.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/static-file/static-file/README.md#2025-04-16_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n    RPC-->P\n    P(\"Provider::block_by_hash(block_number)\")-->PF(ProviderFactory)\n    PF --> PD1(\"DatabaseProvider::block_id(block_hash)\")\n    PD1 --block number--> DC1{block_number <br> > <br> highest static file block}\n    DC1 --> |true| PD2(\"DatabaseProvider::block_by_id(block_number)\")\n    DC1 --> |false| SFP(\"StaticFileProvider::block_by_id(block_number)\")\n    PD2 --> MDBX\n    SFP --find block range from block number--> JP(\"StaticFileJarProvider::block_by_id(block_number)\")\n    JP --\"creates\"-->SC(StaticFileCursor)\n    SC --\".get_one&lt; HeaderMask&lt; Header  &gt; &gt;(number)\"--->NJC(\"NippyJarCursor\")\n  NJC--\".row_by_number(row_index, mask)\"-->NJ[NippyJar]\n    NJ--\"&[u8]\"-->NJC\n    NJC--\"&[u8]\"-->SC\n    SC--\"Header\"--> JP\n    JP--\"Header\"--> SFP\n```\n\n----------------------------------------\n\nTITLE: Setting Log Verbosity Levels in CLI\nDESCRIPTION: Specifies command line options for setting the minimum log level, ranging from errors to very verbose trace output. Also includes an option to silence all log output.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug/in-memory-merkle.md#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: GetBlockHeaders Data Structure in Ethereum Wire Protocol\nDESCRIPTION: Definition of the GetBlockHeaders struct used in Ethereum's wire protocol. It specifies parameters for retrieving block headers including the starting block, limit, skip count, and traversal direction.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\npub struct GetBlockHeaders {\n    /// The block number or hash that the peer should start returning headers from.\n    pub start_block: BlockHashOrNumber,\n\n    /// The maximum number of headers to return.\n    pub limit: u64,\n\n    /// The number of blocks that the node should skip while traversing and returning headers.\n    /// A skip value of zero denotes that the peer should return contiguous headers, starting from\n    /// [`start_block`](#structfield.start_block) and returning at most\n    /// [`limit`](#structfield.limit) headers.\n    pub skip: u32,\n\n    /// The direction in which the headers should be returned in.\n    pub direction: HeadersDirection,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Format and Filter for Stdout in Reth\nDESCRIPTION: These options allow setting the log format and filter for stdout. The format can be json, log-fmt, or terminal, with terminal as the default. The filter option is empty by default.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/run.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n--log.stdout.format <FORMAT>\n    The format to use for logs written to stdout\n\n    [default: terminal]\n\n    Possible values:\n    - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n    - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n    - terminal: Represents terminal-friendly formatting for logs\n\n--log.stdout.filter <FILTER>\n    The filter to use for logs written to stdout\n\n    [default: ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Journald Logging in Reth\nDESCRIPTION: These options enable writing logs to journald and set the filter for journald logs. The default filter is set to error level.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/run.md#2025-04-16_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n--log.journald\n    Write logs to journald\n\n--log.journald.filter <FILTER>\n    The filter to use for logs written to journald\n\n    [default: error]\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Reth Database Drop Command\nDESCRIPTION: This command displays the help information for the 'reth db drop' command, showing its usage and available options.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/drop.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth db drop --help\n```\n\n----------------------------------------\n\nTITLE: Returning Execution Output in Rust\nDESCRIPTION: Shows the common return value structure used by stages to indicate successful completion of their execution.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/stages.md#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nOk(ExecOutput { stage_progress, done: true })\n```\n\n----------------------------------------\n\nTITLE: Importing State Snapshot for OP Mainnet Minimal Bootstrap\nDESCRIPTION: Command to import the state snapshot at Bedrock block for Optimism Mainnet without OVM historical data. This is the first step in the recommended minimal bootstrap process.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/sync-op-mainnet.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ op-reth init-state --without-ovm --chain optimism --datadir op-mainnet world_trie_state.jsonl\n```\n\n----------------------------------------\n\nTITLE: Implementing WalletManager Struct in Rust for Reth\nDESCRIPTION: This snippet defines the WalletManager struct and its associated methods for managing Ethereum wallets. It includes functionality for creating wallets, unlocking them with passwords, and signing transactions.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/design/codecs.md#2025-04-16_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nuse super::*;\nuse ethers_signers::{LocalWallet, Signer};\nuse reth_primitives::{Address, Transaction, TxKind};\nuse std::collections::HashMap;\n\n/// A wallet manager that handles multiple wallets.\npub struct WalletManager {\n    wallets: HashMap<Address, LocalWallet>,\n}\n\nimpl WalletManager {\n    /// Creates a new wallet manager.\n    pub fn new() -> Self {\n        Self { wallets: HashMap::new() }\n    }\n\n    /// Creates a new wallet and adds it to the manager.\n    pub fn create_wallet(&mut self, password: &str) -> Result<Address> {\n        let wallet = LocalWallet::new(&mut rand::thread_rng());\n        let address = wallet.address();\n        self.wallets.insert(address, wallet);\n        Ok(address)\n    }\n\n    /// Unlocks a wallet with the given password.\n    pub fn unlock_wallet(&mut self, address: Address, password: &str) -> Result<()> {\n        // In a real implementation, this would decrypt the wallet using the password\n        Ok(())\n    }\n\n    /// Signs a transaction with the given wallet.\n    pub fn sign_transaction(\n        &self,\n        address: Address,\n        transaction: Transaction,\n    ) -> Result<Transaction> {\n        let wallet = self.wallets.get(&address).ok_or(Error::WalletNotFound)?;\n        let signature = wallet.sign_transaction(&transaction)?;\n        Ok(transaction.with_signature(signature))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Disk Speed with IOzone\nDESCRIPTION: These commands use IOzone to test disk speed for various operations. They are useful for evaluating hardware performance and diagnosing potential disk-related issues.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/troubleshooting.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\niozone -e -t1 -i0 -i2 -r1k -s1g /tmp\niozone -B -G -e -t1 -i0 -i2 -r1k -s1g /tmp\n```\n\n----------------------------------------\n\nTITLE: Enabling Journald Logging and Filtering in Command Line\nDESCRIPTION: These options enable writing logs to journald and set a filter for the logs. The default filter level is 'error'.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug/replay-engine.md#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n--log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n```\n\n----------------------------------------\n\nTITLE: Using the op-reth import-op CLI Command\nDESCRIPTION: A comprehensive help output for the op-reth import-op command, showing all available options including database configuration, logging settings, and display preferences. The command is designed to import RLP encoded blocks from files with support for OVM blocks from Bedrock datadir.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/import-op.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ op-reth import-op --help\nUsage: op-reth import-op [OPTIONS] <IMPORT_PATH>\n\nOptions:\n      --config <FILE>\n          The path to the configuration file to use.\n\n      --datadir <DATA_DIR>\n          The path to the data dir for all reth files and subdirectories.\n\n          Defaults to the OS-specific data directory:\n\n          - Linux: `$XDG_DATA_HOME/reth/` or `$HOME/.local/share/reth/`\n          - Windows: `{FOLDERID_RoamingAppData}/reth/`\n          - macOS: `$HOME/Library/Application Support/reth/`\n\n          [default: default]\n\n      --chunk-len <CHUNK_LEN>\n          Chunk byte length to read from file.\n\n          [default: 1GB]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatabase:\n      --db.log-level <LOG_LEVEL>\n          Database logging level. Levels higher than \"notice\" require a debug build\n\n          Possible values:\n          - fatal:   Enables logging for critical conditions, i.e. assertion failures\n          - error:   Enables logging for error conditions\n          - warn:    Enables logging for warning conditions\n          - notice:  Enables logging for normal but significant condition\n          - verbose: Enables logging for verbose informational\n          - debug:   Enables logging for debug-level messages\n          - trace:   Enables logging for trace debug-level messages\n          - extra:   Enables logging for extra debug-level messages\n\n      --db.exclusive <EXCLUSIVE>\n          Open environment in exclusive/monopolistic mode. Makes it possible to open a database on an NFS volume\n\n          [possible values: true, false]\n\n  <IMPORT_PATH>\n          The path to a `.rlp` block file for import.\n\n          The online sync pipeline stages (headers and bodies) are replaced by a file import. Skips block execution since blocks below Bedrock are built on OVM.\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for reth db checksum Command in Bash\nDESCRIPTION: This command shows the help information for the 'reth db checksum' command, which is used to calculate the content checksum of a database table.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/checksum.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth db checksum --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Options in reth\nDESCRIPTION: Detailed options for configuring logging behavior, including output formats, filters, file management, and journald integration.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/node.md#2025-04-16_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n--log.stdout.format <FORMAT>\n--log.stdout.filter <FILTER>\n--log.file.format <FORMAT>\n--log.file.filter <FILTER>\n--log.file.directory <PATH>\n--log.file.max-size <SIZE>\n--log.file.max-files <COUNT>\n--log.journald\n--log.journald.filter <FILTER>\n--color <COLOR>\n```\n\n----------------------------------------\n\nTITLE: Using Reth Test-Vectors Tables CLI Command Help in Bash\nDESCRIPTION: Example of running the help command for the `reth test-vectors tables` utility, which shows all available options and arguments. The command generates test vectors for specified tables in reth's database, with options for chain selection, instance configuration, and comprehensive logging settings.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/test-vectors/tables.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth test-vectors tables --help\nUsage: reth test-vectors tables [OPTIONS] [NAMES]...\n\nArguments:\n  [NAMES]...\n          List of table names. Case-sensitive\n\nOptions:\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, dev\n\n          [default: mainnet]\n\n      --instance <INSTANCE>\n          Add a new instance of a node.\n\n          Configures the ports of the node to avoid conflicts with the defaults. This is useful for running multiple nodes on the same machine.\n\n          Max number of instances is 200. It is chosen in a way so that it's not possible to have port numbers that conflict with each other.\n\n          Changes to the following port numbers: - `DISCOVERY_PORT`: default + `instance` - 1 - `AUTH_PORT`: default + `instance` * 100 - 100 - `HTTP_RPC_PORT`: default - `instance` + 1 - `WS_RPC_PORT`: default + `instance` * 2 - 2\n\n          [default: 1]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Defining EthStream Structure in Rust\nDESCRIPTION: This snippet defines the EthStream structure, which wraps a P2PStream. It's a simple structure that doesn't keep track of any state and is used for Ethereum-specific communication.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/eth-wire.md#2025-04-16_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n#[pin_project]\npub struct EthStream<S> {\n    #[pin]\n    inner: S,\n}\n```\n\n----------------------------------------\n\nTITLE: Compacting Reth Database using MDBX Tools\nDESCRIPTION: This series of commands clones the Reth repository, builds database tools, and runs a database compaction process. It's used to optimize database performance when experiencing slow inserts and updates.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/troubleshooting.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/paradigmxyz/reth\ncd reth\nmake db-tools\n./db-tools/mdbx_copy -c $(reth db path) reth_compact.dat\nmv $(reth db path)/mdbx.dat reth_old.dat\nmv reth_compact.dat $(reth db path)/mdbx.dat\nrm reth_old.dat\n```\n\n----------------------------------------\n\nTITLE: Displaying Reth Import Help Command\nDESCRIPTION: Shows how to access the help documentation for the reth import command.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/import.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth import --help\n```\n\n----------------------------------------\n\nTITLE: Invoking txpool_inspect RPC Method\nDESCRIPTION: RPC method call to get a summary of all transactions pending for inclusion in the next blocks, as well as those scheduled for future execution.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/txpool.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"method\": \"txpool_inspect\", \"params\": []}\n```\n\n----------------------------------------\n\nTITLE: Querying Transaction by Hash in Reth\nDESCRIPTION: Mermaid diagram illustrating the process of querying a transaction by its hash in Reth, showing the interaction between DatabaseProvider and StaticFileProvider based on transaction number.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/static-file/static-file/README.md#2025-04-16_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n    RPC-->P\n    P(\"Provider::transaction_by_hash(transaction_number)\")-->PF(ProviderFactory)\n    PF --> PD1(\"DatabaseProvider::transaction_id(transaction_hash)\")\n    PD1 --transaction number--> DC1{transaction_number <br> > <br> highest static file transaction}\n    DC1 --> |true| PD2(\"DatabaseProvider::transaction_by_id(transaction_number)\")\n    DC1 --> |false| SFP(\"StaticFileProvider::transaction_by_id(transaction_number)\")\n    PD2 --> MDBX\n    SFP --find block range from transaction number--> JP(\"StaticFileJarProvider::transaction_by_id(transaction_number)\")\n    JP --\"creates\"-->SC(StaticFileCursor)\n    SC --\".get_one&lt; HeaderMask&lt; Header  &gt; &gt;(number)\"--->NJC(\"NippyJarCursor\")\n  NJC--\".row_by_number(row_index, mask)\"-->NJ[NippyJar]\n    NJ--\"&[u8]\"-->NJC\n    NJC--\"&[u8]\"-->SC\n    SC--\"Header\"--> JP\n    JP--\"Header\"--> SFP\n```\n\n----------------------------------------\n\nTITLE: Building reth with jemalloc memory profiling\nDESCRIPTION: Command to build reth with the profiling profile and jemalloc-prof feature for memory profiling with jeprof (Linux only).\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/bin/reth-bench/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nRUSTFLAGS=\"-C target-cpu=native\" cargo build --profile profiling --features \"jemalloc-prof,asm-keccak\"\n```\n\n----------------------------------------\n\nTITLE: Reth DB Stats Command Help Output\nDESCRIPTION: Detailed help output showing all available options and configurations for the reth db stats command, including database analysis options, logging configurations, and display settings\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/stats.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth db stats [OPTIONS]\n\nOptions:\n      --detailed-sizes\n          Show only the total size for static files\n\n      --detailed-segments\n          Show detailed information per static file segment\n\n      --checksum\n          Show a checksum of each table in the database.\n\n          WARNING: this option will take a long time to run, as it needs to traverse and hash the entire database.\n\n          For individual table checksums, use the `reth db checksum` command.\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Invoking Reth Help Command\nDESCRIPTION: Shows how to invoke the help command for Reth to display available options and commands.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth --help\n```\n\n----------------------------------------\n\nTITLE: Help Output for reth stage dump account-hashing Command\nDESCRIPTION: This snippet displays the full help output for the 'reth stage dump account-hashing' command, including usage, options, and configuration parameters for datadir, logging, and display settings.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/dump/account-hashing.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth stage dump account-hashing [OPTIONS] --output-datadir <OUTPUT_PATH> --from <FROM> --to <TO>\n\nOptions:\n      --output-datadir <OUTPUT_PATH>\n          The path to the new datadir folder.\n\n  -f, --from <FROM>\n          From which block\n\n  -t, --to <TO>\n          To which block\n\n  -d, --dry-run\n          If passed, it will dry-run a stage execution from the newly created database right after dumping\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Updating Network Status in HeaderStage\nDESCRIPTION: Shows how the NetworkHandle is used in the HeaderStage to update the node's status with the latest block information.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nasync fn update_head<DB: Database>(\n    &self,\n    tx: &Transaction<'_, DB>,\n    height: BlockNumber,\n) -> Result<(), StageError> {\n    // --snip--\n    self.network_handle.update_status(height, block_key.hash(), td);\n    // --snip--\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Levels in reth\nDESCRIPTION: Specifies various logging levels available in reth, ranging from warnings to extra debug-level messages.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/node.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n- warn:    Enables logging for warning conditions\n- notice:  Enables logging for normal but significant condition\n- verbose: Enables logging for verbose informational\n- debug:   Enables logging for debug-level messages\n- trace:   Enables logging for trace debug-level messages\n- extra:   Enables logging for extra debug-level messages\n```\n\n----------------------------------------\n\nTITLE: Running the ExEx server on Holesky testnet\nDESCRIPTION: Command to run the ExEx server binary that synchronizes with the Holesky testnet and starts the gRPC server.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/exex/remote.md#2025-04-16_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nexport ETHERSCAN_API_KEY={YOUR_API_KEY} && cargo run --bin exex --release -- node --chain holesky --debug.etherscan\n```\n\n----------------------------------------\n\nTITLE: Handling Calculation Completion in State Root Task (Rust)\nDESCRIPTION: This snippet shows the 'on_calculation_complete' method in the State Root Task. It's called when a proof is calculated and is responsible for spawning a new proof calculation thread.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/engine/tree/docs/root.md#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn on_calculation_complete(&mut self) -> Result<(), SpawnError> {\n    if let Some(item) = self.calculation_queue.pop_front() {\n        self.spawn_calculation_thread(item)?;\n    }\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Importing State Snapshot for OP Mainnet Full Bootstrap\nDESCRIPTION: Command to import the state dump at the Bedrock transition block as part of the full bootstrap process.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/sync-op-mainnet.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ op-reth init-state --chain optimism <state-dump>\n```\n\n----------------------------------------\n\nTITLE: Running the help command for reth debug build-block\nDESCRIPTION: Shows how to display the help information for the 'reth debug build-block' command using the command line interface.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug/build-block.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth debug build-block --help\n```\n\n----------------------------------------\n\nTITLE: Implementing Compact Codec for Alloy Types in Rust\nDESCRIPTION: The reth-codecs crate implements the Compact codec for alloy types using bridge types alongside reth_codec. This snippet references the file locations for these implementations.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/codecs/README.md#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nsrc/alloy/mod.rs\n```\n\nLANGUAGE: rust\nCODE:\n```\nderive/src/lib.rs\n```\n\n----------------------------------------\n\nTITLE: Network Event Types Definition in Rust\nDESCRIPTION: Enum definitions for NetworkEvent and associated types used in peer-to-peer network communication.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_25\n\nLANGUAGE: rust\nCODE:\n```\npub enum NetworkEvent<R = PeerRequest> {\n    /// Basic peer lifecycle event.\n    Peer(PeerEvent),\n    /// Session established with requests.\n    ActivePeerSession {\n        /// Session information\n        info: SessionInfo,\n        /// A request channel to the session task.\n        messages: PeerRequestSender<R>,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Running Reth as a Full Node with JWT Authentication\nDESCRIPTION: Command for running Reth in full node mode with authentication configured for consensus client communication. The full node mode maintains only the latest state and historical data for the last 10064 blocks.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/pruning.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nreth node \\\n    --full \\\n    --authrpc.jwtsecret /path/to/secret \\\n    --authrpc.addr 127.0.0.1 \\\n    --authrpc.port 8551\n```\n\n----------------------------------------\n\nTITLE: Fetching Bad Blocks using debug_getBadBlocks RPC Method\nDESCRIPTION: Returns an array of recent bad blocks that the client has seen on the network. The method is invoked via RPC with no parameters.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/debug.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\"method\": \"debug_getBadBlocks\", \"params\": []}\n```\n\n----------------------------------------\n\nTITLE: RLPx Command Help Output in Reth CLI\nDESCRIPTION: Complete help output for the 'reth p2p rlpx' command, showing available subcommands ('ping' and 'help'), along with logging configuration options, display settings, and other parameters.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/p2p/rlpx.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth p2p rlpx [OPTIONS] <COMMAND>\n\nCommands:\n  ping  ping node\n  help  Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Implementing the gRPC consumer client\nDESCRIPTION: Implementation of a consumer client that connects to the gRPC server, receives serialized notifications, and displays them to the user.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/exex/remote.md#2025-04-16_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../../sources/exex/remote/src/consumer.rs}}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Default Reth Node in Rust\nDESCRIPTION: Initial implementation that sets up a default Reth node. This code creates the foundation for the ExEx by launching a standard Reth node instance.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/exex/hello-world.md#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n{{#include ../../sources/exex/hello-world/src/bin/1.rs}}\n```\n\n----------------------------------------\n\nTITLE: Running reth under the memory-limited cgroup\nDESCRIPTION: Command to execute the reth node with the memory limitations defined in the cgroup.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/profiling.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncgexec -g memory:rethMemory reth node\n```\n\n----------------------------------------\n\nTITLE: Help output for reth stage command\nDESCRIPTION: The complete help text for the 'reth stage' command, showing all available subcommands (run, drop, dump, unwind) and configuration options for logging and display.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth stage [OPTIONS] <COMMAND>\n\nCommands:\n  run     Run a single stage\n  drop    Drop a stage's tables from the database\n  dump    Dumps a stage from a range into a new database\n  unwind  Unwinds a certain block range, deleting it from the database\n  help    Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Enabling All JSON-RPC Namespaces for HTTP Server (capitalized)\nDESCRIPTION: Alternative command to enable all available JSON-RPC namespaces on the HTTP server using capitalized 'All'.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/intro.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nreth node --http --http.api All\n```\n\n----------------------------------------\n\nTITLE: Updating libmdbx Version for Rust Bindings\nDESCRIPTION: A bash script that demonstrates how to update the libmdbx version in the project. It includes cloning the libmdbx repository at a specific tag, building the distribution, copying the dist folder into mdbx-sys/libmdbx, and staging the changes for a git commit.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# clone libmmdbx to a repository outside at specific tag\ngit clone https://gitflic.ru/project/erthink/libmdbx.git ../libmdbx --branch v0.7.0\nmake -C ../libmdbx dist\n\n# copy the `libmdbx/dist/` folder just created into `mdbx-sys/libmdbx`\nrm -rf mdbx-sys/libmdbx\ncp -R ../libmdbx/dist mdbx-sys/libmdbx\n\n# add the changes to the next commit you will make\ngit add mdbx-sys/libmdbx\n```\n\n----------------------------------------\n\nTITLE: Building reth with maxperf profile for benchmark\nDESCRIPTION: Command to build reth with the maxperf profile, which is optimized for measuring maximum performance during benchmarks.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/bin/reth-bench/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake maxperf\n```\n\n----------------------------------------\n\nTITLE: Defining RLP Encoding and Decoding Traits\nDESCRIPTION: Defines the Encodable and Decodable traits used for RLP (Recursive Length Prefix) encoding and decoding of Ethereum messages. These traits are implemented by all Ethereum message types for serialization and deserialization.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/eth-wire.md#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\npub trait Decodable: Sized {\n    fn decode(buf: &mut &[u8]) -> alloy_rlp::Result<Self>;\n}\npub trait Encodable {\n    fn encode(&self, out: &mut dyn BufMut);\n    fn length(&self) -> usize;\n}\n```\n\n----------------------------------------\n\nTITLE: Storage Tries Recovery Command Help Output - Text\nDESCRIPTION: Detailed help output showing all available options and configurations for the storage tries recovery command, including datadir settings, database options, logging configurations, and display preferences\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/recover/storage-tries.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth recover storage-tries [OPTIONS]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --datadir <DATA_DIR>\n          The path to the data dir for all reth files and subdirectories.\n\n          Defaults to the OS-specific data directory:\n\n          - Linux: `$XDG_DATA_HOME/reth/` or `$HOME/.local/share/reth/`\n          - Windows: `{FOLDERID_RoamingAppData}/reth/`\n          - macOS: `$HOME/Library/Application Support/reth/`\n\n          [default: default]\n\n      --datadir.static-files <PATH>\n          The absolute path to store static files in.\n\n      --config <FILE>\n          The path to the configuration file to use\n\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nDatabase:\n      --db.log-level <LOG_LEVEL>\n          Database logging level. Levels higher than \"notice\" require a debug build\n\n          Possible values:\n          - fatal:   Enables logging for critical conditions, i.e. assertion failures\n          - error:   Enables logging for error conditions\n          - warn:    Enables logging for warning conditions\n          - notice:  Enables logging for normal but significant condition\n          - verbose: Enables logging for verbose informational\n          - debug:   Enables logging for debug-level messages\n          - trace:   Enables logging for trace debug-level messages\n          - extra:   Enables logging for extra debug-level messages\n\n      --db.exclusive <EXCLUSIVE>\n          Open environment in exclusive/monopolistic mode. Makes it possible to open a database on an NFS volume\n\n          [possible values: true, false]\n\n      --db.max-size <MAX_SIZE>\n          Maximum database size (e.g., 4TB, 8MB)\n\n      --db.growth-step <GROWTH_STEP>\n          Database growth step (e.g., 4GB, 4KB)\n\n      --db.read-transaction-timeout <READ_TRANSACTION_TIMEOUT>\n          Read transaction timeout in seconds, 0 means no timeout\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Setting Up C++ and C Language Standards\nDESCRIPTION: Determines and sets the appropriate C++ and C language standards based on compiler support and project requirements.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(FIND CMAKE_C_COMPILE_FEATURES c_std_11 HAS_C11)\nlist(FIND CMAKE_CXX_COMPILE_FEATURES cxx_std_11 HAS_CXX11)\n# ... (additional feature checks)\n\nif(NOT DEFINED MDBX_CXX_STANDARD)\n  # ... (C++ standard selection logic)\nendif()\n\nif(NOT DEFINED MDBX_C_STANDARD)\n  # ... (C standard selection logic)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Reth Init-State Command\nDESCRIPTION: Shows how to access the help documentation for the reth init-state command\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/init-state.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth init-state --help\n```\n\n----------------------------------------\n\nTITLE: Help Output for reth db get mdbx Command\nDESCRIPTION: Comprehensive help output showing all arguments and options for the 'reth db get mdbx' command including table, key, and subkey parameters, output formatting options, chain configuration, logging settings, and display preferences.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/get/mdbx.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth db get mdbx [OPTIONS] <TABLE> <KEY> [SUBKEY]\n\nArguments:\n  <TABLE>\n\n\n  <KEY>\n          The key to get content for\n\n  [SUBKEY]\n          The subkey to get content for\n\nOptions:\n      --raw\n          Output bytes instead of human-readable decoded value\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Testing Reth Docker Image\nDESCRIPTION: Command to test the Reth Docker image by running it and checking the version. This verifies that the image is working correctly.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/docker.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm ghcr.io/paradigmxyz/reth --version\n```\n\n----------------------------------------\n\nTITLE: MDBX Library Setup Macro\nDESCRIPTION: Defines a macro for setting up platform-specific library dependencies and linking options for MDBX targets.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(libmdbx_setup_libs TARGET MODE)\n  if(CMAKE_VERSION VERSION_LESS 3.1)\n    target_link_libraries(${TARGET} ${MODE} ${CMAKE_THREAD_LIBS_INIT})\n  else()\n    target_link_libraries(${TARGET} ${MODE} Threads::Threads)\n  endif()\n  if(${CMAKE_SYSTEM_NAME} STREQUAL \"Windows\")\n    target_link_libraries(${TARGET} ${MODE} ntdll user32 kernel32 advapi32)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: TransactionsCommand Enum Definition in Rust\nDESCRIPTION: Defines the TransactionsCommand enum used for manual transaction propagation via TransactionsHandle. Currently, it only contains a PropagateHash variant for propagating transaction hashes.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_29\n\nLANGUAGE: rust\nCODE:\n```\nenum TransactionsCommand {\n    PropagateHash(B256),\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Interprocedural Optimization (LTO)\nDESCRIPTION: Sets up Link-Time Optimization (LTO) options based on compiler support and version, including specific configurations for GCC, Clang, and MSVC.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INTERPROCEDURAL_OPTIMIZATION_AVAILABLE\n    OR GCC_LTO_AVAILABLE OR MSVC_LTO_AVAILABLE OR CLANG_LTO_AVAILABLE)\n  if((CMAKE_CONFIGURATION_TYPES OR NOT CMAKE_BUILD_TYPE_UPPERCASE STREQUAL \"DEBUG\") AND\n      ((MSVC_LTO_AVAILABLE AND NOT CMAKE_C_COMPILER_VERSION VERSION_LESS 19) OR\n      (GCC_LTO_AVAILABLE AND NOT CMAKE_C_COMPILER_VERSION VERSION_LESS 7) OR\n      (CLANG_LTO_AVAILABLE AND NOT CMAKE_C_COMPILER_VERSION VERSION_LESS 5)))\n    set(INTERPROCEDURAL_OPTIMIZATION_DEFAULT ON)\n  else()\n    set(INTERPROCEDURAL_OPTIMIZATION_DEFAULT OFF)\n  endif()\n  option(INTERPROCEDURAL_OPTIMIZATION \"Enable interprocedural/LTO optimization.\" ${INTERPROCEDURAL_OPTIMIZATION_DEFAULT})\nendif()\n\nif(INTERPROCEDURAL_OPTIMIZATION)\n  # ... (LTO configuration for different compilers)\nelse()\n  set(CMAKE_INTERPROCEDURAL_OPTIMIZATION FALSE)\n  set(LTO_ENABLED FALSE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Sink Trait for P2PStream in Rust\nDESCRIPTION: This snippet demonstrates the implementation of the Sink trait for P2PStream. It handles compressing and sending data to the inner stream. The code includes methods for starting sends and flushing the outgoing messages.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/eth-wire.md#2025-04-16_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nimpl<S> Sink<Bytes> for P2PStream<S> {\n    fn start_send(self: Pin<&mut Self>, item: Bytes) -> Result<(), Self::Error> {\n        let this = self.project();\n        let mut compressed = BytesMut::zeroed(1 + snap::raw::max_compress_len(item.len() - 1));\n        let compressed_size = this.encoder.compress(&item[1..], &mut compressed[1..])?;\n        compressed.truncate(compressed_size + 1);\n        compressed[0] = item[0] + this.shared_capability.offset();\n        this.outgoing_messages.push_back(compressed.freeze());\n        Ok(())\n    }\n\n    fn poll_flush(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {\n        let mut this = self.project();\n        loop {\n            match ready!(this.inner.as_mut().poll_flush(cx)) {\n                Err(err) => return Poll::Ready(Err(err.into())),\n                Ok(()) => {\n                    if let Some(message) = this.outgoing_messages.pop_front() {\n                        if let Err(err) = this.inner.as_mut().start_send(message) {\n                            return Poll::Ready(Err(err.into()))\n                        }\n                    } else {\n                        return Poll::Ready(Ok(()))\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Storage Tries Recovery Help Command - Bash\nDESCRIPTION: Command to display help information for the reth recover storage-tries utility\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/recover/storage-tries.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth recover storage-tries --help\n```\n\n----------------------------------------\n\nTITLE: Walking Database Cursor for Block Headers in Rust\nDESCRIPTION: This snippet demonstrates how to create a walker for a headers cursor to iterate over a specific block range. It's used to retrieve block headers within a given range.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/db.md#2025-04-16_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nlet headers_walker = headers_cursor.walk_range(block_range.clone())?\n```\n\n----------------------------------------\n\nTITLE: Running Individual Tests with Cargo\nDESCRIPTION: Shell command showing how to run specific tests using cargo, either by navigating to the package directory or using the -p option to specify a package from anywhere in the workspace.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo test -p reth-rpc mytest\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tests for libmdbx in CMake\nDESCRIPTION: Sets up the test directory for libmdbx if tests are enabled and the source is not amalgamated. It verifies that the C++ compiler is loaded since it's required for building the tests.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT MDBX_AMALGAMATED_SOURCE AND MDBX_ENABLE_TESTS)\n  if(NOT CMAKE_CXX_COMPILER_LOADED)\n    message(FATAL_ERROR \"MDBX_ENABLE_TESTS=${MDBX_ENABLE_TESTS}: The C++ compiler is required to build the tests.\")\n  endif()\n  add_subdirectory(test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Viewing Merkle Stage Dump Help Command\nDESCRIPTION: Command to display help information for the reth stage dump merkle functionality\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/dump/merkle.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth stage dump merkle --help\n```\n\n----------------------------------------\n\nTITLE: Installing Reth binary\nDESCRIPTION: Cargo command to install the Reth binary directly into the user's PATH.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/source.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --locked --path bin/reth --bin reth\n```\n\n----------------------------------------\n\nTITLE: Including External Rust Code with Path Variables\nDESCRIPTION: A template that uses Rust's documentation inclusion feature to embed code from external files. The snippet uses variables for paths and anchors to dynamically reference code sections.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/templates/source_and_github.md#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n{{#include [[ #path_to_root ]][[ #path ]]:[[ #anchor ]]}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Verbosity and Quiet Mode in Command Line\nDESCRIPTION: These options allow setting the minimum log level with increasing verbosity levels, from errors to traces. The quiet option silences all log output.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug/replay-engine.md#2025-04-16_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Defining ReverseHeadersDownloader Structure in Rust\nDESCRIPTION: Defines the ReverseHeadersDownloader struct used for streaming headers from the network, including fields for consensus client, headers client, batch size, and retry count.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\npub struct ReverseHeadersDownloader<C, H> {\n    /// The consensus client\n    consensus: Arc<C>,\n    /// The headers client\n    client: Arc<H>,\n    /// The batch size per one request\n    pub batch_size: u64,\n    /// The number of retries for downloading\n    pub request_retries: usize,\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Reth Stage Dump Execution Help Command\nDESCRIPTION: Command to display the help information for the 'reth stage dump execution' utility, which shows available options and usage patterns.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/dump/execution.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth stage dump execution --help\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version Requirements for libmdbx\nDESCRIPTION: Determines the minimum required CMake version based on the current CMake version. This ensures compatibility with different CMake versions while utilizing newer features when available.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_VERSION VERSION_LESS 3.8.2)\n  cmake_minimum_required(VERSION 3.0.2)\nelseif(CMAKE_VERSION VERSION_LESS 3.12)\n  cmake_minimum_required(VERSION 3.8.2)\nelse()\n  cmake_minimum_required(VERSION 3.12)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Reth P2P Body Help Command\nDESCRIPTION: Command to display help information for the reth p2p body functionality\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/p2p/body.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth p2p body --help\n```\n\n----------------------------------------\n\nTITLE: Enabling jemalloc in reth with Cargo\nDESCRIPTION: Command to build reth with jemalloc instead of the system allocator. This provides performance benefits and enables the foundation for memory profiling.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/profiling.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo build --features jemalloc\n```\n\n----------------------------------------\n\nTITLE: Visualizing Feature Branch Workflow in Mermaid\nDESCRIPTION: This Mermaid diagram illustrates the branching strategy for feature development in the Reth project. It shows how feature branches are created from main, developed, and then merged back into main.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/workflow.md#2025-04-16_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: A feature or bug fix lives off of main\n---\ngitGraph\n   commit\n   commit\n   branch feat/cool-feature\n   checkout feat/cool-feature\n   commit\n   commit\n   checkout main\n   merge feat/cool-feature\n   commit\n   commit\n```\n\n----------------------------------------\n\nTITLE: Syncing OP Mainnet to Recent Block\nDESCRIPTION: Command to sync the node to a recent finalized block after state import. This helps catch up close to the tip before pairing with op-node.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/sync-op-mainnet.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ op-reth node --chain optimism --datadir op-mainnet --debug.tip 0x098f87b75c8b861c775984f9d5dbe7b70cbbbc30fc15adb03a5044de0144f2d0 # block #125200000\n```\n\n----------------------------------------\n\nTITLE: Running Main/Scale Codec Benchmarks in reth\nDESCRIPTION: Command to run benchmarks using the main/scale codec for header encoding/decoding. This requires the bench feature to be enabled when running cargo bench.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/db/benches/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo bench --features bench\n```\n\n----------------------------------------\n\nTITLE: Removing a Peer using admin_removePeer in JavaScript\nDESCRIPTION: This snippet shows how to disconnect from a peer using the admin_removePeer method. It takes an enode URL as a parameter and returns a boolean indicating whether the peer was successfully removed.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/admin.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// > {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"admin_removePeer\",\"params\":[\"enode://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@52.16.188.185:30303\"]}\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":true}\n```\n\n----------------------------------------\n\nTITLE: Reth Debug Merkle Command Help Output\nDESCRIPTION: Comprehensive help output showing all available options and configurations for the reth debug merkle command, including datadir settings, database configurations, networking options, and logging parameters\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug/merkle.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth debug merkle [OPTIONS] --to <TO>\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --datadir <DATA_DIR>\n          The path to the data dir for all reth files and subdirectories.\n\n          Defaults to the OS-specific data directory:\n\n          - Linux: `$XDG_DATA_HOME/reth/` or `$HOME/.local/share/reth/`\n          - Windows: `{FOLDERID_RoamingAppData}/reth/`\n          - macOS: `$HOME/Library/Application Support/reth/`\n\n          [default: default]\n\n      --datadir.static-files <PATH>\n          The absolute path to store static files in.\n\n      --config <FILE>\n          The path to the configuration file to use\n\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nDatabase:\n      --db.log-level <LOG_LEVEL>\n          Database logging level. Levels higher than \"notice\" require a debug build\n\n          Possible values:\n          - fatal:   Enables logging for critical conditions, i.e. assertion failures\n          - error:   Enables logging for error conditions\n          - warn:    Enables logging for warning conditions\n          - notice:  Enables logging for normal but significant condition\n          - verbose: Enables logging for verbose informational\n          - debug:   Enables logging for debug-level messages\n          - trace:   Enables logging for trace debug-level messages\n          - extra:   Enables logging for extra debug-level messages\n\n      --db.exclusive <EXCLUSIVE>\n          Open environment in exclusive/monopolistic mode. Makes it possible to open a database on an NFS volume\n\n          [possible values: true, false]\n\n      --db.max-size <MAX_SIZE>\n          Maximum database size (e.g., 4TB, 8MB)\n\n      --db.growth-step <GROWTH_STEP>\n          Database growth step (e.g., 4GB, 4KB)\n\n      --db.read-transaction-timeout <READ_TRANSACTION_TIMEOUT>\n          Read transaction timeout in seconds, 0 means no timeout\n\nNetworking:\n  -d, --disable-discovery\n          Disable the discovery service\n\n      --disable-dns-discovery\n          Disable the DNS discovery\n\n      --disable-discv4-discovery\n          Disable Discv4 discovery\n\n      --enable-discv5-discovery\n          Enable Discv5 discovery\n\n      --disable-nat\n          Disable Nat discovery\n\n      --discovery.addr <DISCOVERY_ADDR>\n          The UDP address to use for devp2p peer discovery version 4\n\n          [default: 0.0.0.0]\n\n      --discovery.port <DISCOVERY_PORT>\n          The UDP port to use for devp2p peer discovery version 4\n\n          [default: 30303]\n\n      --discovery.v5.addr <DISCOVERY_V5_ADDR>\n          The UDP IPv4 address to use for devp2p peer discovery version 5. Overwritten by `RLPx` address, if it's also IPv4\n\n      --discovery.v5.addr.ipv6 <DISCOVERY_V5_ADDR_IPV6>\n          The UDP IPv6 address to use for devp2p peer discovery version 5. Overwritten by `RLPx` address, if it's also IPv6\n\n      --discovery.v5.port <DISCOVERY_V5_PORT>\n          The UDP IPv4 port to use for devp2p peer discovery version 5. Not used unless `--addr` is IPv4, or `--discovery.v5.addr` is set\n\n          [default: 9200]\n\n      --discovery.v5.port.ipv6 <DISCOVERY_V5_PORT_IPV6>\n          The UDP IPv6 port to use for devp2p peer discovery version 5. Not used unless `--addr` is IPv6, or `--discovery.addr.ipv6` is set\n\n          [default: 9200]\n\n      --discovery.v5.lookup-interval <DISCOVERY_V5_LOOKUP_INTERVAL>\n          The interval in seconds at which to carry out periodic lookup queries, for the whole run of the program\n\n          [default: 20]\n\n      --discovery.v5.bootstrap.lookup-interval <DISCOVERY_V5_BOOTSTRAP_LOOKUP_INTERVAL>\n          The interval in seconds at which to carry out boost lookup queries, for a fixed number of times, at bootstrap\n\n          [default: 5]\n\n      --discovery.v5.bootstrap.lookup-countdown <DISCOVERY_V5_BOOTSTRAP_LOOKUP_COUNTDOWN>\n          The number of times to carry out boost lookup queries at bootstrap\n\n          [default: 200]\n\n      --trusted-peers <TRUSTED_PEERS>\n          Comma separated enode URLs of trusted peers for P2P connections.\n\n          --trusted-peers enode://abcd@192.168.0.1:30303\n\n      --trusted-only\n          Connect to or accept from trusted peers only\n\n      --bootnodes <BOOTNODES>\n          Comma separated enode URLs for P2P discovery bootstrap.\n\n          Will fall back to a network-specific default if not specified.\n\n      --dns-retries <DNS_RETRIES>\n          Amount of DNS resolution requests retries to perform when peering\n\n          [default: 0]\n\n      --peers-file <FILE>\n          The path to the known peers file. Connected peers are dumped to this file on nodes\n          shutdown, and read on startup. Cannot be used with `--no-persist-peers`.\n\n      --identity <IDENTITY>\n          Custom node identity\n\n          [default: reth/<VERSION>-<SHA>/<ARCH>]\n\n      --p2p-secret-key <PATH>\n          Secret key to use for this node.\n\n          This will also deterministically set the peer ID. If not specified, it will be set in the data dir for the chain being used.\n\n      --no-persist-peers\n          Do not persist peers.\n\n      --nat <NAT>\n          NAT resolution method (any|none|upnp|publicip|extip:\\<IP\\>)\n\n          [default: any]\n\n      --addr <ADDR>\n          Network listening address\n\n          [default: 0.0.0.0]\n\n      --port <PORT>\n          Network listening port\n\n          [default: 30303]\n\n      --max-outbound-peers <MAX_OUTBOUND_PEERS>\n          Maximum number of outbound requests. default: 100\n\n      --max-inbound-peers <MAX_INBOUND_PEERS>\n          Maximum number of inbound requests. default: 30\n\n      --max-tx-reqs <COUNT>\n          Max concurrent `GetPooledTransactions` requests.\n\n          [default: 130]\n\n      --max-tx-reqs-peer <COUNT>\n          Max concurrent `GetPooledTransactions` requests per peer.\n\n          [default: 1]\n\n      --max-seen-tx-history <COUNT>\n          Max number of seen transactions to remember per peer.\n\n          Default is 320 transaction hashes.\n\n          [default: 320]\n\n      --max-pending-imports <COUNT>\n          Max number of transactions to import concurrently.\n\n          [default: 4096]\n\n      --pooled-tx-response-soft-limit <BYTES>\n          Experimental, for usage in research. Sets the max accumulated byte size of transactions\n          to pack in one response.\n          Spec'd at 2MiB.\n\n          [default: 2097152]\n\n      --pooled-tx-pack-soft-limit <BYTES>\n          Experimental, for usage in research. Sets the max accumulated byte size of transactions to\n          request in one request.\n\n          Since `RLPx` protocol version 68, the byte size of a transaction is shared as metadata in a\n          transaction announcement (see `RLPx` specs). This allows a node to request a specific size\n          response.\n\n          By default, nodes request only 128 KiB worth of transactions, but should a peer request\n          more, up to 2 MiB, a node will answer with more than 128 KiB.\n\n          Default is 128 KiB.\n\n          [default: 131072]\n\n      --max-tx-pending-fetch <COUNT>\n          Max capacity of cache of hashes for transactions pending fetch.\n\n          [default: 25600]\n\n      --net-if.experimental <IF_NAME>\n          Name of network interface used to communicate with peers.\n\n          If flag is set, but no value is passed, the default interface for docker `eth0` is tried.\n\n      --tx-propagation-policy <TX_PROPAGATION_POLICY>\n          Transaction Propagation Policy\n\n          The policy determines which peers transactions are gossiped to.\n\n          [default: All]\n\n      --retries <RETRIES>\n          The number of retries per request\n\n          [default: 5]\n\n      --to <TO>\n          The height to finish at\n\n      --skip-node-depth <SKIP_NODE_DEPTH>\n          The depth after which we should start comparing branch nodes\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Raw Transaction Data using debug_getRawTransaction RPC Method\nDESCRIPTION: Returns an EIP-2718 binary-encoded transaction for a given transaction hash. The method is invoked via RPC with the transaction hash parameter.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/debug.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"method\": \"debug_getRawTransaction\", \"params\": [tx_hash]}\n```\n\n----------------------------------------\n\nTITLE: Merkle Stage Dump Help Output\nDESCRIPTION: Detailed help output showing all available options for the merkle stage dump command, including output directory configuration, block range specification, logging options, and display settings\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/dump/merkle.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth stage dump merkle [OPTIONS] --output-datadir <OUTPUT_PATH> --from <FROM> --to <TO>\n\nOptions:\n      --output-datadir <OUTPUT_PATH>\n          The path to the new datadir folder.\n\n  -f, --from <FROM>\n          From which block\n\n  -t, --to <TO>\n          To which block\n\n  -d, --dry-run\n          If passed, it will dry-run a stage execution from the newly created database right after dumping\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Testing Locally Built Reth Docker Image\nDESCRIPTION: Command to test the locally built Reth Docker image by checking its version. This ensures the built image is functioning correctly.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/docker.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run reth:local --version\n```\n\n----------------------------------------\n\nTITLE: Reth CLI Help Output\nDESCRIPTION: Displays the complete help output for the Reth CLI, including all available commands, logging options, and display configuration options.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth [OPTIONS] <COMMAND>\n\nCommands:\n  node          Start the node\n  init          Initialize the database from a genesis file\n  init-state    Initialize the database from a state dump file\n  import        This syncs RLP encoded blocks from a file\n  dump-genesis  Dumps genesis block JSON configuration to stdout\n  db            Database debugging utilities\n  stage         Manipulate individual stages\n  p2p           P2P Debugging utilities\n  config        Write config to stdout\n  debug         Various debug routines\n  recover       Scripts for node recovery\n  prune         Prune according to the configuration without any limits\n  help          Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -V, --version\n          Print version\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Configuring Log File Size and Count in Command Line\nDESCRIPTION: These options allow setting the maximum size of individual log files and the total number of log files to maintain. The default log file size is 200MB, and the default number of files is 5. Setting the file count to 0 disables background file logging.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug/replay-engine.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n--log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n```\n\n----------------------------------------\n\nTITLE: Determining Compiler Information for libmdbx in CMake\nDESCRIPTION: Executes a process to determine the compiler information for libmdbx. If the command fails or returns nothing, it falls back to using the CMAKE_C_COMPILER_ID and CMAKE_C_COMPILER_VERSION variables.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\n# get compiler info\nexecute_process(COMMAND sh -c \"${CMAKE_C_COMPILER} --version | head -1\"\n  OUTPUT_VARIABLE MDBX_BUILD_COMPILER\n  OUTPUT_STRIP_TRAILING_WHITESPACE\n  ERROR_QUIET\n  RESULT_VARIABLE rc)\nif(rc OR NOT MDBX_BUILD_COMPILER)\n  string(STRIP \"${CMAKE_C_COMPILER_ID}-${CMAKE_C_COMPILER_VERSION}\" MDBX_BUILD_COMPILER)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Viewing help for reth db get command in Bash\nDESCRIPTION: Shows how to access the help documentation for the 'reth db get' command, which provides information on retrieving content from database tables.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/get.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth db get --help\n```\n\n----------------------------------------\n\nTITLE: Enabling Quiet Mode in CLI (Bash)\nDESCRIPTION: This snippet defines a CLI option for silencing all log output. It provides a quick way to suppress all logging information.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug/merkle.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n-q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Opening Shell in Reth Docker Container\nDESCRIPTION: Command to open a shell inside the Reth Docker container. This allows direct interaction with the Reth instance.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/docker.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it reth bash\n```\n\n----------------------------------------\n\nTITLE: Reth Dump-Genesis Command Usage and Options\nDESCRIPTION: Detailed output of the 'reth dump-genesis --help' command, showing all available options including chain selection, logging configurations, and display settings.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/dump-genesis.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth dump-genesis [OPTIONS]\n\nOptions:\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Configuring ANSI Color Formatting in reth CLI\nDESCRIPTION: Specifies options for enabling or disabling ANSI terminal escape codes for colors and text formatting. The default setting is 'always', with options for 'auto' and 'never'.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/p2p.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nSets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n[default: always]\n\nPossible values:\n- always: Colors on\n- auto:   Colors on\n- never:  Colors off\n```\n\n----------------------------------------\n\nTITLE: Setting Peer Connection Backoff Durations in Reth (TOML)\nDESCRIPTION: Configures the waiting periods before retrying failed peer connections in Reth. Different durations are set for various severity levels of connection failures, helping to manage network resources efficiently and avoid unnecessary connection attempts.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/config.md#2025-04-16_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\n[peers.backoff_durations]\nlow = '30s'\nmedium = '3m'\nhigh = '15m'\nmax = '1h'\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Output in CLI (Bash)\nDESCRIPTION: This snippet defines a CLI option for setting the color output mode. It allows users to specify whether ANSI terminal escape codes should be used for colors and text formatting.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug/merkle.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Info Header for libmdbx in CMake\nDESCRIPTION: Configures the config.h file for libmdbx by processing the config.h.in template with the collected build information. It also adds a definition to locate the generated config.h file.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\n# provide config.h for library build info\nconfigure_file(\"${MDBX_SOURCE_DIR}/config.h.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/config.h\" ESCAPE_QUOTES)\nadd_definitions(-DMDBX_CONFIG_H=\"${CMAKE_CURRENT_BINARY_DIR}/config.h\")\n```\n\n----------------------------------------\n\nTITLE: Reth DB Clear Command Help Output - Text\nDESCRIPTION: Complete help output showing all available options and commands for the reth db clear functionality, including logging configuration, chain selection, and display options\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/clear.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth db clear [OPTIONS] <COMMAND>\n\nCommands:\n  mdbx         Deletes all database table entries\n  static-file  Deletes all static file segment entries\n  help         Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Setting Color Output in Command Line\nDESCRIPTION: This option controls whether ANSI terminal escape codes are used for colors and text formatting. It can be set to 'always', 'auto', or 'never', with 'always' as the default.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug/replay-engine.md#2025-04-16_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n--color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n```\n\n----------------------------------------\n\nTITLE: Creating a New Cargo Project for Reth ExEx\nDESCRIPTION: Commands to create a new Rust project for the Reth ExEx extension. This sets up the basic project structure for a binary application.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/exex/hello-world.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncargo new --bin my-exex\ncd my-exex\n```\n\n----------------------------------------\n\nTITLE: Reth Init Command Help Output\nDESCRIPTION: Comprehensive help output showing all available options for the reth init command, including datadir configuration, database settings, logging options, and display parameters.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/init.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth init [OPTIONS]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --datadir <DATA_DIR>\n          The path to the data dir for all reth files and subdirectories.\n\n          Defaults to the OS-specific data directory:\n\n          - Linux: `$XDG_DATA_HOME/reth/` or `$HOME/.local/share/reth/`\n          - Windows: `{FOLDERID_RoamingAppData}/reth/`\n          - macOS: `$HOME/Library/Application Support/reth/`\n\n          [default: default]\n\n      --datadir.static-files <PATH>\n          The absolute path to store static files in.\n\n      --config <FILE>\n          The path to the configuration file to use\n\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nDatabase:\n      --db.log-level <LOG_LEVEL>\n          Database logging level. Levels higher than \"notice\" require a debug build\n\n          Possible values:\n          - fatal:   Enables logging for critical conditions, i.e. assertion failures\n          - error:   Enables logging for error conditions\n          - warn:    Enables logging for warning conditions\n          - notice:  Enables logging for normal but significant condition\n          - verbose: Enables logging for verbose informational\n          - debug:   Enables logging for debug-level messages\n          - trace:   Enables logging for trace debug-level messages\n          - extra:   Enables logging for extra debug-level messages\n\n      --db.exclusive <EXCLUSIVE>\n          Open environment in exclusive/monopolistic mode. Makes it possible to open a database on an NFS volume\n\n          [possible values: true, false]\n\n      --db.max-size <MAX_SIZE>\n          Maximum database size (e.g., 4TB, 8MB)\n\n      --db.growth-step <GROWTH_STEP>\n          Database growth step (e.g., 4GB, 4KB)\n\n      --db.read-transaction-timeout <READ_TRANSACTION_TIMEOUT>\n          Read transaction timeout in seconds, 0 means no timeout\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Unwinding reth node to prepare for benchmarking\nDESCRIPTION: Command to unwind a reth node to a specific block number before running a benchmark. This ensures the node's head is at the correct starting point for the benchmark.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/bin/reth-bench/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nreth stage unwind to-block 21000000\n```\n\n----------------------------------------\n\nTITLE: Configuring pthread Compiler Flag for Non-Apple and Non-MSVC Systems\nDESCRIPTION: Adds the -pthread flag to linker flags for non-Apple and non-MSVC systems using pthreads to avoid potential issues.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT APPLE AND NOT MSVC\n    AND CMAKE_USE_PTHREADS_INIT AND NOT CMAKE_THREAD_LIBS_INIT\n    AND (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG))\n  check_compiler_flag(\"-pthread\" CC_HAS_PTHREAD)\n  if(CC_HAS_PTHREAD AND NOT CMAKE_EXE_LINKER_FLAGS MATCHES \"-pthread\")\n    message(STATUS \"Force add -pthread for linker flags to avoid troubles\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -pthread\")\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -pthread\")\n    set(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} -pthread\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running PR Check Command with Make\nDESCRIPTION: Command to run pre-pull request checks to ensure the code meets quality standards before submission.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake pr\n```\n\n----------------------------------------\n\nTITLE: Setting memory limit for the cgroup\nDESCRIPTION: Command to set an 8 gigabyte memory limit for the previously created cgroup.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/profiling.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho 8G > /sys/fs/cgroup/memory/rethMemory/memory.limit_in_bytes\n```\n\n----------------------------------------\n\nTITLE: Creating a new Cargo project for ExEx Remote\nDESCRIPTION: Command to create a new Rust library project for implementing the remote ExEx functionality.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/exex/remote.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ cargo new --lib exex-remote\n$ cd exex-remote\n```\n\n----------------------------------------\n\nTITLE: Reth Import Command Help Output\nDESCRIPTION: Detailed help output showing all available options and configurations for the reth import command, including datadir settings, database configurations, logging options, and display preferences.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/import.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth import [OPTIONS] <IMPORT_PATH>\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --datadir <DATA_DIR>\n          The path to the data dir for all reth files and subdirectories.\n\n          Defaults to the OS-specific data directory:\n\n          - Linux: `$XDG_DATA_HOME/reth/` or `$HOME/.local/share/reth/`\n          - Windows: `{FOLDERID_RoamingAppData}/reth/`\n          - macOS: `$HOME/Library/Application Support/reth/`\n\n          [default: default]\n\n      --datadir.static-files <PATH>\n          The absolute path to store static files in.\n\n      --config <FILE>\n          The path to the configuration file to use\n\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nDatabase:\n      --db.log-level <LOG_LEVEL>\n          Database logging level. Levels higher than \"notice\" require a debug build\n\n          Possible values:\n          - fatal:   Enables logging for critical conditions, i.e. assertion failures\n          - error:   Enables logging for error conditions\n          - warn:    Enables logging for warning conditions\n          - notice:  Enables logging for normal but significant condition\n          - verbose: Enables logging for verbose informational\n          - debug:   Enables logging for debug-level messages\n          - trace:   Enables logging for trace debug-level messages\n          - extra:   Enables logging for extra debug-level messages\n\n      --db.exclusive <EXCLUSIVE>\n          Open environment in exclusive/monopolistic mode. Makes it possible to open a database on an NFS volume\n\n          [possible values: true, false]\n\n      --db.max-size <MAX_SIZE>\n          Maximum database size (e.g., 4TB, 8MB)\n\n      --db.growth-step <GROWTH_STEP>\n          Database growth step (e.g., 4GB, 4KB)\n\n      --db.read-transaction-timeout <READ_TRANSACTION_TIMEOUT>\n          Read transaction timeout in seconds, 0 means no timeout\n\n      --no-state\n          Disables stages that require state.\n\n      --chunk-len <CHUNK_LEN>\n          Chunk byte length to read from file.\n\n  <IMPORT_PATH>\n          The path to a block file for import.\n\n          The online stages (headers and bodies) are replaced by a file import, after which the\n          remaining stages are executed.\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Setting Verbosity Levels in CLI\nDESCRIPTION: Defines command line options for setting the minimum log level. It includes options from showing only errors (-v) to very verbose trace output (-vvvvv). Also includes a quiet option to silence all log output.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug/execution.md#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo.toml with dependencies for gRPC\nDESCRIPTION: Cargo.toml file containing all the required dependencies for the remote ExEx project, including Reth, Tonic for gRPC, and serialization libraries.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/exex/remote.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n{{#include ../../sources/exex/remote/Cargo.toml}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Restrictions for Bytes Fields in Compact Codec\nDESCRIPTION: This snippet references the location where restrictions for Bytes fields are implemented in the Compact codec. Bytes fields must be placed last in the struct to optimize serialization.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/codecs/README.md#2025-04-16_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nderive/src/compact/structs.rs#L117\n```\n\n----------------------------------------\n\nTITLE: Accumulating Messages in Sparse Trie Task (Rust)\nDESCRIPTION: This snippet shows how messages are accumulated in the Sparse Trie Task until the channel is empty, after which they are processed in bulk.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/engine/tree/docs/root.md#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nwhile let Ok(msg) = rx.try_recv() {\n    messages.push(msg);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for libmdbx\nDESCRIPTION: Sets up build options and configurations based on whether libmdbx is being built as a subproject or the main project. This includes enabling languages, setting up testing options, and configuring output directories.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(DEFINED PROJECT_NAME)\n  option(MDBX_FORCE_BUILD_AS_MAIN_PROJECT \"Force libmdbx to full control build options even it added as a subdirectory to your project.\" OFF)\nendif()\n\nif(DEFINED PROJECT_NAME AND NOT MDBX_FORCE_BUILD_AS_MAIN_PROJECT)\n  set(SUBPROJECT ON)\n  set(NOT_SUBPROJECT OFF)\n  if(NOT MDBX_AMALGAMATED_SOURCE AND NOT DEFINED BUILD_TESTING)\n    set(BUILD_TESTING OFF)\n  endif()\n  enable_language(C)\nelse()\n  set(SUBPROJECT OFF)\n  set(NOT_SUBPROJECT ON)\n  project(libmdbx C)\n  if(NOT MDBX_AMALGAMATED_SOURCE AND NOT DEFINED BUILD_TESTING)\n    set(BUILD_TESTING ON)\n  endif()\nendif()\n\nif(NOT MDBX_AMALGAMATED_SOURCE)\n  include(CTest)\n  option(MDBX_ENABLE_TESTS \"Build libmdbx tests.\" ${BUILD_TESTING})\nelseif(DEFINED MDBX_ENABLE_TESTS AND MDBX_ENABLE_TESTS)\n  message(WARNING \"MDBX_ENABLE_TESTS=${MDBX_ENABLE_TESTS}: But amalgamated source code don't includes tests.\")\n  set(MDBX_ENABLE_TESTS OFF)\nendif()\n\n# Try to find a C++ compiler unless sure that this is unnecessary.\nif (NOT CMAKE_CXX_COMPILER_LOADED)\n  include(CheckLanguage)\n  if(NOT DEFINED MDBX_BUILD_CXX OR MDBX_BUILD_CXX\n      OR (NOT MDBX_AMALGAMATED_SOURCE AND (NOT DEFINED MDBX_ENABLE_TESTS OR MDBX_ENABLE_TESTS)))\n    check_language(CXX)\n    if(CMAKE_CXX_COMPILER)\n      enable_language(CXX)\n    endif()\n  endif()\nelse()\n  enable_language(CXX)\nendif()\n\n# Set default build type to Release. This is to ease a User's life.\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Release CACHE STRING\n    \"Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel.\"\n    FORCE)\nendif()\nstring(TOUPPER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_UPPERCASE)\n\nif(NOT_SUBPROJECT AND (CMAKE_CROSSCOMPILING OR IOS))\n  set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)\nendif()\n\nif(NOT \"$ENV{TEAMCITY_PROCESS_FLOW_ID}\" STREQUAL \"\")\n  set(CI TEAMCITY)\n  message(STATUS \"TeamCity CI\")\nelseif(NOT \"$ENV{TRAVIS}\" STREQUAL \"\")\n  set(CI TRAVIS)\n  message(STATUS \"Travis CI\")\nelseif(NOT \"$ENV{CIRCLECI}\" STREQUAL \"\")\n  set(CI CIRCLE)\n  message(STATUS \"Circle CI\")\nelseif(NOT \"$ENV{APPVEYOR}\" STREQUAL \"\")\n  set(CI APPVEYOR)\n  message(STATUS \"AppVeyor CI\")\nelseif(NOT \"$ENV{CI}\" STREQUAL \"\")\n  set(CI \"$ENV{CI}\")\n  message(STATUS \"Other CI (${CI})\")\nelse()\n  message(STATUS \"Assume No any CI environment\")\n  unset(CI)\nendif()\n\n# output all mdbx-related targets in single directory\nif(NOT DEFINED MDBX_OUTPUT_DIR)\n  set(MDBX_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR})\nendif()\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${MDBX_OUTPUT_DIR})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${MDBX_OUTPUT_DIR})\nset(CMAKE_PDB_OUTPUT_DIRECTORY ${MDBX_OUTPUT_DIR})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${MDBX_OUTPUT_DIR})\n\ninclude(CheckFunctionExists)\ninclude(FindPackageMessage)\ninclude(GNUInstallDirs)\n\nif(CMAKE_C_COMPILER_ID STREQUAL \"MSVC\" AND MSVC_VERSION LESS 1900)\n  message(SEND_ERROR \"MSVC compiler ${MSVC_VERSION} is too old for building MDBX.\"\n    \" At least 'Microsoft Visual Studio 2015' is required.\")\nendif()\n\nif(NOT DEFINED THREADS_PREFER_PTHREAD_FLAG)\n  set(THREADS_PREFER_PTHREAD_FLAG TRUE)\nendif()\nfind_package(Threads REQUIRED)\n\ninclude(cmake/utils.cmake)\ninclude(cmake/compiler.cmake)\ninclude(cmake/profile.cmake)\n```\n\n----------------------------------------\n\nTITLE: Cloning Reth repository\nDESCRIPTION: Git commands to clone the Reth repository from GitHub and change into the project directory.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/source.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/paradigmxyz/reth\ncd reth\n```\n\n----------------------------------------\n\nTITLE: Reth Stage Drop Command Help Output\nDESCRIPTION: Detailed help output showing all available options and configurations for the reth stage drop command, including datadir settings, database configurations, logging options, and display preferences\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/drop.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth stage drop [OPTIONS] <STAGE>\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --datadir <DATA_DIR>\n          The path to the data dir for all reth files and subdirectories.\n\n          Defaults to the OS-specific data directory:\n\n          - Linux: `$XDG_DATA_HOME/reth/` or `$HOME/.local/share/reth/`\n          - Windows: `{FOLDERID_RoamingAppData}/reth/`\n          - macOS: `$HOME/Library/Application Support/reth/`\n\n          [default: default]\n\n      --datadir.static-files <PATH>\n          The absolute path to store static files in.\n\n      --config <FILE>\n          The path to the configuration file to use\n\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nDatabase:\n      --db.log-level <LOG_LEVEL>\n          Database logging level. Levels higher than \"notice\" require a debug build\n\n          Possible values:\n          - fatal:   Enables logging for critical conditions, i.e. assertion failures\n          - error:   Enables logging for error conditions\n          - warn:    Enables logging for warning conditions\n          - notice:  Enables logging for normal but significant condition\n          - verbose: Enables logging for verbose informational\n          - debug:   Enables logging for debug-level messages\n          - trace:   Enables logging for trace debug-level messages\n          - extra:   Enables logging for extra debug-level messages\n\n      --db.exclusive <EXCLUSIVE>\n          Open environment in exclusive/monopolistic mode. Makes it possible to open a database on an NFS volume\n\n          [possible values: true, false]\n\n      --db.max-size <MAX_SIZE>\n          Maximum database size (e.g., 4TB, 8MB)\n\n      --db.growth-step <GROWTH_STEP>\n          Database growth step (e.g., 4GB, 4KB)\n\n      --db.read-transaction-timeout <READ_TRANSACTION_TIMEOUT>\n          Read transaction timeout in seconds, 0 means no timeout\n\n  <STAGE>\n          Possible values:\n          - headers:         The headers stage within the pipeline\n          - bodies:          The bodies stage within the pipeline\n          - senders:         The senders stage within the pipeline\n          - execution:       The execution stage within the pipeline\n          - account-hashing: The account hashing stage within the pipeline\n          - storage-hashing: The storage hashing stage within the pipeline\n          - hashing:         The account and storage hashing stages within the pipeline\n          - merkle:          The merkle stage within the pipeline\n          - tx-lookup:       The transaction lookup stage within the pipeline\n          - account-history: The account history stage within the pipeline\n          - storage-history: The storage history stage within the pipeline\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Configuring ANSI Color Output in CLI\nDESCRIPTION: Specifies options for controlling ANSI terminal escape codes for colors and text formatting. The default setting is 'always'. Options include 'always' (colors on), 'auto' (colors on), and 'never' (colors off).\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug/execution.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nSets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n[default: always]\n\nPossible values:\n- always: Colors on\n- auto:   Colors on\n- never:  Colors off\n```\n\n----------------------------------------\n\nTITLE: Reth DB Path Help Command\nDESCRIPTION: Command to display help information for the reth db path functionality\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/path.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth db path --help\n```\n\n----------------------------------------\n\nTITLE: Implementing Stream Trait for P2PStream in Rust\nDESCRIPTION: This snippet shows the implementation of the Stream trait for P2PStream. It handles polling the inner stream, decompressing data, and error handling. The code processes incoming data from the P2P network.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/eth-wire.md#2025-04-16_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nimpl<S> Stream for P2PStream<S> {\n    type Item = Result<BytesMut, P2PStreamError>;\n\n    fn poll_next(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>> {\n        while let Poll::Ready(res) = this.inner.poll_next_unpin(cx) {\n            let bytes = match res {\n                Some(Ok(bytes)) => bytes,\n                Some(Err(err)) => return Poll::Ready(Some(Err(err.into()))),\n                None => return Poll::Ready(None),\n            };\n            let decompressed_len = snap::raw::decompress_len(&bytes[1..])?;\n            let mut decompress_buf = BytesMut::zeroed(decompressed_len + 1);\n            this.decoder.decompress(&bytes[1..], &mut decompress_buf[1..])?;\n            // ... Omitted Error handling\n            decompress_buf[0] = bytes[0] - this.shared_capability.offset();\n            return Poll::Ready(Some(Ok(decompress_buf)))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MDBX Build Options\nDESCRIPTION: Sets up various build options for MDBX using a custom macro. This includes options for static/shared libraries, tools, transaction checking, and platform-specific features.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nset(MDBX_BUILD_OPTIONS ENABLE_UBSAN ENABLE_ASAN MDBX_USE_VALGRIND ENABLE_GPROF ENABLE_GCOV)\nmacro(add_mdbx_option NAME DESCRIPTION DEFAULT)\n  list(APPEND MDBX_BUILD_OPTIONS ${NAME})\n  if(NOT ${DEFAULT} STREQUAL \"AUTO\")\n    option(${NAME} \"${DESCRIPTION}\" ${DEFAULT})\n  elseif(NOT DEFINED ${NAME})\n    set(${NAME}_AUTO ON)\n  endif()\nendmacro()\n\n# ... (multiple add_mdbx_option calls)\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information for Reth DB Clear Static-File Command\nDESCRIPTION: This command shows the help information for the 'reth db clear static-file' command, providing details on its usage, arguments, and available options.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/clear/static-file.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth db clear static-file --help\n```\n\n----------------------------------------\n\nTITLE: Showing Help for Reth Stage Unwind Command\nDESCRIPTION: Example of how to display help information for the reth stage unwind num-blocks command.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/unwind/num-blocks.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth stage unwind num-blocks --help\n```\n\n----------------------------------------\n\nTITLE: Reth Stage Unwind Command Help Output\nDESCRIPTION: Complete help output showing all available options and arguments for the reth stage unwind num-blocks command, including chain selection, logging configuration, and display options.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/unwind/num-blocks.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth stage unwind num-blocks [OPTIONS] <AMOUNT>\n\nArguments:\n  <AMOUNT>\n\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Checking File Permissions in Bash\nDESCRIPTION: This command checks the permissions of the datadir folder using the stat command. It's useful for diagnosing permission-related issues when accessing the database.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/troubleshooting.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nstat /full/path/datadir\n```\n\n----------------------------------------\n\nTITLE: Configuring Merkle Stage in Reth\nDESCRIPTION: Configuration for the merkle stage which computes state roots using hash indexes. The clean threshold determines when to recompute the entire state root from scratch versus incrementally updating it.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/config.md#2025-04-16_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[stages.merkle]\n# The threshold in number of blocks before the stage starts from scratch\n# and re-computes the state root, discarding the trie that has already been built,\n# as opposed to incrementally updating the trie.\nclean_threshold = 5000\n```\n\n----------------------------------------\n\nTITLE: Setting Up C++ and Test Build Options\nDESCRIPTION: Configures options for building C++ API and tests. This includes checking compiler compatibility and setting up appropriate flags based on the build environment.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_CXX_COMPILER_LOADED AND MDBX_CXX_STANDARD LESS 83 AND NOT MDBX_CXX_STANDARD LESS 11)\n  if(NOT MDBX_AMALGAMATED_SOURCE)\n    option(MDBX_ENABLE_TESTS \"Build MDBX tests\" ${BUILD_TESTING})\n  endif()\n  if(NOT MDBX_WITHOUT_MSVC_CRT\n      AND NOT (CMAKE_COMPILER_IS_GNUCXX AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.8)\n      AND NOT (CMAKE_COMPILER_IS_CLANG AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.9)\n      AND NOT (MSVC AND MSVC_VERSION LESS 1900))\n    option(MDBX_BUILD_CXX \"Build C++ portion\" ON)\n  else()\n    set(MDBX_BUILD_CXX FALSE)\n  endif()\nelse()\n  set(MDBX_BUILD_CXX FALSE)\n  set(MDBX_ENABLE_TESTS FALSE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Display Reth P2P Header Help Command\nDESCRIPTION: Command to display help information for the reth p2p header functionality\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/p2p/header.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth p2p header --help\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Reth Recover CLI\nDESCRIPTION: This command displays the help text for the reth recover command, showing available options and subcommands for node recovery operations.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/recover.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth recover --help\n```\n\n----------------------------------------\n\nTITLE: Reth DB List Command Help Output\nDESCRIPTION: The complete help documentation for the 'reth db list' command, showing all available options including pagination controls, search parameters, filtering by size, output formatting, and logging configuration.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/list.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth db list [OPTIONS] <TABLE>\n\nArguments:\n  <TABLE>\n          The table name\n\nOptions:\n  -s, --skip <SKIP>\n          Skip first N entries\n\n          [default: 0]\n\n  -r, --reverse\n          Reverse the order of the entries. If enabled last table entries are read\n\n  -l, --len <LEN>\n          How many items to take from the walker\n\n          [default: 5]\n\n      --search <SEARCH>\n          Search parameter for both keys and values. Prefix it with `0x` to search for binary data, and text otherwise.\n\n          ATTENTION! For compressed tables (`Transactions` and `Receipts`), there might be missing results since the search uses the raw uncompressed value from the database.\n\n      --min-row-size <MIN_ROW_SIZE>\n          Minimum size of row in bytes\n\n          [default: 0]\n\n      --min-key-size <MIN_KEY_SIZE>\n          Minimum size of key in bytes\n\n          [default: 0]\n\n      --min-value-size <MIN_VALUE_SIZE>\n          Minimum size of value in bytes\n\n          [default: 0]\n\n  -c, --count\n          Returns the number of rows found\n\n  -j, --json\n          Dump as JSON instead of using TUI\n\n      --raw\n          Output bytes instead of human-readable decoded value\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Configuring MDBX Source Files and Headers\nDESCRIPTION: Sets up source files and headers for MDBX library build, handling both amalgamated and non-amalgamated build configurations. Includes version file generation and platform-specific source selection.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIBMDBX_PUBLIC_HEADERS mdbx.h)\nset(LIBMDBX_SOURCES mdbx.h \"${CMAKE_CURRENT_BINARY_DIR}/config.h\")\nif(MDBX_AMALGAMATED_SOURCE)\n  list(APPEND LIBMDBX_SOURCES mdbx.c)\nelse()\n  configure_file(\"${MDBX_SOURCE_DIR}/version.c.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/version.c\" ESCAPE_QUOTES)\n  file(SHA256 \"${CMAKE_CURRENT_BINARY_DIR}/version.c\" MDBX_SOURCERY_DIGEST)\n  string(MAKE_C_IDENTIFIER \"${MDBX_GIT_DESCRIBE}\" MDBX_SOURCERY_SUFFIX)\n  set(MDBX_BUILD_SOURCERY \"${MDBX_SOURCERY_DIGEST}_${MDBX_SOURCERY_SUFFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Reth Stage Drop Help Command\nDESCRIPTION: Command to display help information for the reth stage drop functionality\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/drop.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth stage drop --help\n```\n\n----------------------------------------\n\nTITLE: Reth P2P Body Command Usage and Options\nDESCRIPTION: Detailed usage instructions and available options for the reth p2p body command, including logging configuration, file handling, and display settings\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/p2p/body.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth p2p body [OPTIONS] <ID>\n\nArguments:\n  <ID>\n          The block number or hash\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Reth Node\nDESCRIPTION: Basic command to start the Reth node via CLI and instructions for stopping it using ctrl-c, with note about cleanup tasks.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/cli.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nreth node\n```\n\n----------------------------------------\n\nTITLE: Accessing Help for reth db get mdbx Command in Bash\nDESCRIPTION: Command to display the help information for the 'reth db get mdbx' utility in the reth database toolset.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/get/mdbx.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth db get mdbx --help\n```\n\n----------------------------------------\n\nTITLE: Setting Log Verbosity Levels in CLI (Bash)\nDESCRIPTION: This snippet defines CLI options for setting the minimum log level. It uses a series of -v flags to increase verbosity, with each additional v corresponding to a more detailed log level.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug/merkle.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n-v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n```\n\n----------------------------------------\n\nTITLE: MDBX Target Setup Options Macro\nDESCRIPTION: Defines a macro for setting up common compilation options for MDBX targets, including C/C++ standards, optimization flags, and visibility settings.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(target_setup_options TARGET)\n  if(DEFINED INTERPROCEDURAL_OPTIMIZATION)\n    set_target_properties(${TARGET} PROPERTIES\n      INTERPROCEDURAL_OPTIMIZATION $<BOOL:${INTERPROCEDURAL_OPTIMIZATION}>)\n  endif()\n  if(NOT C_FALLBACK_GNU11 AND NOT C_FALLBACK_11)\n    set_target_properties(${TARGET} PROPERTIES\n      C_STANDARD ${MDBX_C_STANDARD} C_STANDARD_REQUIRED ON)\n  endif()\n  if(MDBX_BUILD_CXX)\n    set_target_properties(${TARGET} PROPERTIES\n      CXX_STANDARD ${MDBX_CXX_STANDARD} CXX_STANDARD_REQUIRED ON)\n    if(MSVC AND NOT MSVC_VERSION LESS 1910)\n      target_compile_options(${TARGET} INTERFACE \"/Zc:__cplusplus\")\n    endif()\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Installing Rust using rustup\nDESCRIPTION: Command to install Rust programming language using the rustup installer. This is a prerequisite for building Reth.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/source.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n----------------------------------------\n\nTITLE: Setting Display and Verbosity Options in reth\nDESCRIPTION: Options for controlling the verbosity of log output and silencing all logs.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/node.md#2025-04-16_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n-v, --verbosity...\n-q, --quiet\n```\n\n----------------------------------------\n\nTITLE: Displaying Reth Node Help Command\nDESCRIPTION: Shows how to display the help menu for the Reth node command\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/node.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth node --help\n```\n\n----------------------------------------\n\nTITLE: GetBlockBodies Message Structure in Ress Protocol\nDESCRIPTION: Defines the GetBlockBodies message (0x03) structure that requests block body data by hash from a peer.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/ress/protocol/README.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`[request-id: P, [blockhash₁: B_32, blockhash₂: B_32, ...]]`\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies for libmdbx Build\nDESCRIPTION: Sets various CMake policies based on the CMake version in use. This ensures consistent behavior across different CMake versions and enables newer features when available.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(PUSH)\ncmake_policy(VERSION ${CMAKE_MINIMUM_REQUIRED_VERSION})\nif(NOT CMAKE_VERSION VERSION_LESS 3.21)\n  cmake_policy(SET CMP0126 NEW)\nendif()\nif(NOT CMAKE_VERSION VERSION_LESS 3.17)\n  cmake_policy(SET CMP0102 NEW)\nendif()\nif(NOT CMAKE_VERSION VERSION_LESS 3.15)\n  cmake_policy(SET CMP0091 NEW)\nendif()\nif(NOT CMAKE_VERSION VERSION_LESS 3.13)\n  cmake_policy(SET CMP0077 NEW)\nendif()\nif(NOT CMAKE_VERSION VERSION_LESS 3.12)\n  cmake_policy(SET CMP0075 NEW)\nendif()\nif(NOT CMAKE_VERSION VERSION_LESS 3.9)\n  cmake_policy(SET CMP0068 NEW)\n  cmake_policy(SET CMP0069 NEW)\n  include(CheckIPOSupported)\n  check_ipo_supported(RESULT CMAKE_INTERPROCEDURAL_OPTIMIZATION_AVAILABLE)\nelse()\n  set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_AVAILABLE FALSE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Reth Stage Unwind Command in Bash\nDESCRIPTION: This command shows the help information for the 'reth stage unwind to-block' command, including its usage and available options.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/unwind/to-block.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth stage unwind to-block --help\n```\n\n----------------------------------------\n\nTITLE: Showing help for reth stage command in Bash\nDESCRIPTION: Command to display the help information for the 'reth stage' command, showing all available subcommands and options.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth stage --help\n```\n\n----------------------------------------\n\nTITLE: Defining Compact Codec Derive Macros in Rust\nDESCRIPTION: The reth-codecs-derive crate provides various derive macros for implementing Compact and Arbitrary traits. This snippet shows the available macro options and their functionalities.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/codecs/README.md#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[reth_codec]\n#[reth_codec(rlp)]\n#[reth_codec(no_arbitrary)]\n#[derive_arbitrary]\n#[derive_arbitrary(rlp)]\n#[derive_arbitrary(compact, rlp)]\n#[derive_arbitrary(rlp, N)]\n#[add_arbitrary_tests]\n#[add_arbitrary_tests(rlp)]\n```\n\n----------------------------------------\n\nTITLE: Cloning Armbian Build Framework Repository\nDESCRIPTION: Commands to clone the Armbian build framework repository and change to the project directory. This is a prerequisite for building a custom OS image for ARM devices.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/build-for-arm-devices.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/armbian/build\ncd build\n```\n\n----------------------------------------\n\nTITLE: Setting Verbosity Levels in reth CLI\nDESCRIPTION: Defines command line options for setting the minimum log level, ranging from errors to very verbose trace logs. Also includes an option to silence all log output.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/p2p.md#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Referencing Compact Trait Implementation in Rust\nDESCRIPTION: This snippet points to the location of the Compact trait implementation in the reth-codecs crate. The Compact codec aims to minimize serialized data size without compression.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/codecs/README.md#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nsrc/lib.rs#L30\n```\n\n----------------------------------------\n\nTITLE: Reth Recover CLI Help Output\nDESCRIPTION: The help output for the reth recover command, showing available subcommands (storage-tries), general options, and extensive logging configuration options including format, filtering, and file management parameters.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/recover.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth recover [OPTIONS] <COMMAND>\n\nCommands:\n  storage-tries  Recover the node by deleting dangling storage tries\n  help           Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Domain for HTTP JSON-RPC Server\nDESCRIPTION: Command to restrict HTTP JSON-RPC server access to a specific domain using CORS.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/intro.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nreth node --http --http.corsdomain https://mycoolapp.rs\n```\n\n----------------------------------------\n\nTITLE: Reth Debug CLI Help Output\nDESCRIPTION: Comprehensive help output showing all available debug commands and configuration options, including logging settings, verbosity levels, and display preferences.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth debug [OPTIONS] <COMMAND>\n\nCommands:\n  execution         Debug the roundtrip execution of blocks as well as the generated data\n  merkle            Debug the clean & incremental state root calculations\n  in-memory-merkle  Debug in-memory state root calculation\n  build-block       Debug block building\n  help              Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Displaying Reth Debug Execution Help Command\nDESCRIPTION: Command to display the help menu for the reth debug execution functionality.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug/execution.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth debug execution --help\n```\n\n----------------------------------------\n\nTITLE: Checking available memory and swap\nDESCRIPTION: Command to check the system's memory and swap usage, useful when determining appropriate memory limits.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/profiling.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfree -m\n```\n\n----------------------------------------\n\nTITLE: Configuring ANSI Color Output in CLI\nDESCRIPTION: Defines options for enabling or disabling ANSI terminal escape codes for colors and text formatting. The default setting is 'always', with options for 'auto' and 'never'.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug/in-memory-merkle.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nSets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n[default: always]\n\nPossible values:\n- always: Colors on\n- auto:   Colors on\n- never:  Colors off\n```\n\n----------------------------------------\n\nTITLE: Implementing Compact Codec for Primitive Types in Rust\nDESCRIPTION: The reth-codecs crate implements the Compact codec for primitive types. This snippet references the file location where these implementations can be found.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/codecs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nsrc/lib.rs\n```\n\n----------------------------------------\n\nTITLE: GetBytecode Message Structure in Ress Protocol\nDESCRIPTION: Defines the GetBytecode message (0x05) structure that requests bytecode from a peer by providing a code hash.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/ress/protocol/README.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n`[request-id: P, [codehash: B_32]]`\n```\n\n----------------------------------------\n\nTITLE: Running Reth Examples Command\nDESCRIPTION: Demonstrates the command to run a Reth example using Cargo.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/examples/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -p <example>\n```\n\n----------------------------------------\n\nTITLE: Allowing All CORS Domains for HTTP JSON-RPC Server\nDESCRIPTION: Command to allow any domain to access the HTTP JSON-RPC server using wildcard CORS setting.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/intro.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nreth node --http --http.corsdomain \"*\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Update Priority Table in Markdown\nDESCRIPTION: This snippet shows how the Update Priority table is formatted in Markdown. It categorizes users into Payload Builders and Non-Payload Builders, assigning different priority levels for updates.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/priorities.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| User Class           | Priority        |\n|----------------------|------------------|\n| Payload Builders     | Medium Priority |\n| Non-Payload Builders | Low Priority    |\n```\n\n----------------------------------------\n\nTITLE: Accessing Reth Config Help Command\nDESCRIPTION: Command to display help information for the reth config utility\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/config.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth config --help\n```\n\n----------------------------------------\n\nTITLE: Displaying Reth Debug Help Command\nDESCRIPTION: Command to display the help menu for the Reth debug functionality.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth debug --help\n```\n\n----------------------------------------\n\nTITLE: Help Output for Reth Stage Unwind Command\nDESCRIPTION: This snippet shows the detailed help output for the 'reth stage unwind to-block' command, including arguments, options for datadir, logging, and display settings.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/unwind/to-block.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth stage unwind to-block [OPTIONS] <TARGET>\n\nArguments:\n  <TARGET>\n\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Detecting Source Code Structure for libmdbx\nDESCRIPTION: Checks if the source code is in the full repository structure or an amalgamated form. Sets appropriate variables and performs necessary checks based on the source structure.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/.git\" AND\n    EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt\" AND\n    EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/src/core.c\" AND\n    EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/src/alloy.c\" AND\n    EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/src/config.h.in\" AND\n    EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/src/version.c.in\" AND\n    EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/src/man1\" AND\n    EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/src/mdbx_chk.c\" AND\n    EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/src/mdbx.c++\")\n  set(MDBX_AMALGAMATED_SOURCE FALSE)\n  find_program(GIT git)\n  if(NOT GIT)\n    message(SEND_ERROR \"Git command-line tool not found\")\n  endif()\n  set(MDBX_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/src\")\nelseif(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/VERSION.txt\" AND\n    EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/mdbx.c\" AND\n    EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/mdbx.c++\" AND\n    EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/config.h.in\" AND\n    EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/man1\" AND\n    EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/mdbx_chk.c\")\n  set(MDBX_AMALGAMATED_SOURCE TRUE)\n  set(MDBX_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\")\nelse()\n  message(FATAL_ERROR \"\\n\"\n    \"Please don't use tarballs nor zips which are automatically provided by Github!  \"\n    \"These archives do not contain version information and thus are unfit to build libmdbx.  \"\n    \"You can vote for ability of disabling auto-creation such unsuitable archives at https://github.community/t/disable-tarball\\n\"\n    \"Instead of above, just clone the git repository, either download a tarball or zip with the properly amalgamated source core.  \"\n    \"For embedding libmdbx use a git-submodule or the amalgamated source code.\\n\"\n    \"Please, avoid using any other techniques.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus for Reth in YAML\nDESCRIPTION: An example Prometheus configuration file for the Reth project. It is located in the prometheus directory and named prometheus.yml.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/etc/README.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- [**Prometheus**](./prometheus/prometheus.yml): An example Prometheus configuration.\n```\n\n----------------------------------------\n\nTITLE: Displaying Reth P2P Help Command\nDESCRIPTION: Shows how to access the help documentation for the reth p2p command\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/p2p.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nreth p2p --help\n```\n\n----------------------------------------\n\nTITLE: Displaying reth db Help Information\nDESCRIPTION: Command to display the help information for the reth db utility, which shows all available subcommands and options for database debugging and management.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth db --help\n```\n\n----------------------------------------\n\nTITLE: Running the consumer client\nDESCRIPTION: Command to run the consumer client binary that connects to the gRPC server and receives blockchain notifications.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/exex/remote.md#2025-04-16_snippet_12\n\nLANGUAGE: console\nCODE:\n```\ncargo run --bin consumer --release\n```\n\n----------------------------------------\n\nTITLE: Reth DB Path Command Options\nDESCRIPTION: Comprehensive list of command line options and configurations for the reth db path command, including chain selection, logging formats, and display settings\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/path.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth db path [OPTIONS]\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Creating Extra Import Library for NTDLL on Windows\nDESCRIPTION: Creates an extra import library for ntdll.dll on Windows systems using MSVC's lib tool.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(${CMAKE_SYSTEM_NAME} STREQUAL \"Windows\" AND EXISTS \"${MDBX_SOURCE_DIR}/ntdll.def\")\n  if(MSVC)\n    if(NOT MSVC_LIB_EXE)\n      # Find lib.exe\n      get_filename_component(CL_NAME ${CMAKE_C_COMPILER} NAME)\n      string(REPLACE cl.exe lib.exe MSVC_LIB_EXE ${CL_NAME})\n      find_program(MSVC_LIB_EXE ${MSVC_LIB_EXE})\n    endif()\n    if(MSVC_LIB_EXE)\n      message(STATUS \"Found MSVC's lib tool: ${MSVC_LIB_EXE}\")\n      set(MDBX_NTDLL_EXTRA_IMPLIB \"${CMAKE_CURRENT_BINARY_DIR}/mdbx_ntdll_extra.lib\")\n      add_custom_command(OUTPUT \"${MDBX_NTDLL_EXTRA_IMPLIB}\"\n        COMMENT \"Create extra-import-library for ntdll.dll\"\n        MAIN_DEPENDENCY \"${MDBX_SOURCE_DIR}/ntdll.def\"\n        COMMAND ${MSVC_LIB_EXE} /def:\"${MDBX_SOURCE_DIR}/ntdll.def\" /out:\"${MDBX_NTDLL_EXTRA_IMPLIB}\" ${INITIAL_CMAKE_STATIC_LINKER_FLAGS})\n    else()\n      message(WARNING \"MSVC's lib tool not found\")\n    endif()\n  endif(MSVC)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Viewing Reth DB Stats Help Command\nDESCRIPTION: Command to display help information for the reth db stats utility\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/stats.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth db stats --help\n```\n\n----------------------------------------\n\nTITLE: Viewing Help for Reth DB List Command in Bash\nDESCRIPTION: Shows how to access the help documentation for the 'reth db list' command, which displays information about usage, arguments, and options.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/list.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth db list --help\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Reth Dump-Genesis Command in Bash\nDESCRIPTION: This command shows the help information for the 'reth dump-genesis' command, which is used to dump the genesis block JSON configuration to stdout.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/dump-genesis.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth dump-genesis --help\n```\n\n----------------------------------------\n\nTITLE: Finalizing MDBX Build Configuration\nDESCRIPTION: Performs final checks and configurations for the MDBX build. This includes verifying C++ compiler availability, probing for C++ filesystem library, and fetching the MDBX version.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(MDBX_BUILD_CXX AND NOT CMAKE_CXX_COMPILER_LOADED)\n  message(FATAL_ERROR \"MDBX_BUILD_CXX=${MDBX_BUILD_CXX}: The C++ compiler is required to build the C++API.\")\nendif()\n\nif(MDBX_BUILD_CXX)\n  # determine library for C++ std::filesystem\n  probe_libcxx_filesystem()\nendif()\n\n# Get version\nfetch_version(MDBX \"${CMAKE_CURRENT_SOURCE_DIR}\" FALSE)\nmessage(STATUS \"libmdbx version is ${MDBX_VERSION}\")\n```\n\n----------------------------------------\n\nTITLE: Running the help command for reth database diff\nDESCRIPTION: Basic command to display the help information for the 'reth db diff' command.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/diff.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth db diff --help\n```\n\n----------------------------------------\n\nTITLE: Running the help command for reth debug in-memory-merkle\nDESCRIPTION: Shows how to display the help information for the reth debug in-memory-merkle command, which provides details on its usage and available options.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/debug/in-memory-merkle.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth debug in-memory-merkle --help\n```\n\n----------------------------------------\n\nTITLE: Testing Reth Node Initialization with Cargo\nDESCRIPTION: Command to test the Reth node initialization with the Holesky testnet using a custom data directory to avoid conflicts with existing Reth installations.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/exex/hello-world.md#2025-04-16_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ cargo run -- init --chain holesky --datadir data\n\n2024-06-12T16:48:06.420296Z  INFO reth init starting\n2024-06-12T16:48:06.422380Z  INFO Opening storage db_path=\"data/db\" sf_path=\"data/static_files\"\n2024-06-12T16:48:06.432939Z  INFO Verifying storage consistency.\n2024-06-12T16:48:06.577673Z  INFO Genesis block written hash=0xb5f7f912443c940f21fd611f12828d75b53\n4364ed9e95ca4e307729a4661bde4\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for Subproject and Main Project\nDESCRIPTION: Sets up build options differently based on whether the project is a subproject or the main project, including shared libraries, PIC, and native CPU optimization.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(SUBPROJECT)\n  if(NOT DEFINED BUILD_SHARED_LIBS)\n    option(BUILD_SHARED_LIBS \"Build shared libraries (DLLs)\" OFF)\n  endif()\n  if(NOT DEFINED CMAKE_POSITION_INDEPENDENT_CODE)\n    option(CMAKE_POSITION_INDEPENDENT_CODE \"Generate position independent (PIC)\" ON)\n  endif()\n  set(MDBX_MANAGE_BUILD_FLAGS_DEFAULT OFF)\nelse()\n  option(BUILD_SHARED_LIBS \"Build shared libraries (DLLs)\" ON)\n  option(CMAKE_POSITION_INDEPENDENT_CODE \"Generate position independent (PIC)\" ON)\n  if (CC_HAS_ARCH_NATIVE)\n    option(BUILD_FOR_NATIVE_CPU \"Generate code for the compiling machine CPU\" OFF)\n  endif()\n  # ... (additional configuration for main project)\nendif(SUBPROJECT)\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific MDBX Options\nDESCRIPTION: Sets up platform-specific options for MDBX, including iOS, Linux, macOS, and Windows-specific settings. This ensures proper configuration across different operating systems.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(IOS)\n  set(MDBX_BUILD_TOOLS_DEFAULT OFF)\n  if(NOT_SUBPROJECT)\n    cmake_policy(SET CMP0006 OLD)\n    set(CMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED \"NO\")\n  endif()\nelse()\n  set(MDBX_BUILD_TOOLS_DEFAULT ON)\nendif()\n\n# ... (platform-specific options)\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for reth db get static-file Command in Bash\nDESCRIPTION: This command shows the help information for the 'reth db get static-file' command, providing details on its usage, arguments, and options.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/get/static-file.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth db get static-file --help\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Issue in Markdown\nDESCRIPTION: This snippet demonstrates how to reference a GitHub issue using Markdown syntax. It links to issue #64 in the Reth repository, which was the starting point for the P2P stack design exploration.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/design/p2p.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[#64](https://github.com/paradigmxyz/reth/issues/64)\n```\n\n----------------------------------------\n\nTITLE: Creating a named cgroup for memory limitation\nDESCRIPTION: Command to create a named cgroup that will be used to limit memory for the reth process. This requires appropriate permissions.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/developers/profiling.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo cgcreate -t $USER:$USER -a $USER:$USER -g memory:rethMemory\n```\n\n----------------------------------------\n\nTITLE: Displaying RLPx Command Help in Reth CLI\nDESCRIPTION: Command to display the help information for the 'reth p2p rlpx' command, which shows available subcommands and configuration options for RLPx protocol operations.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/p2p/rlpx.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth p2p rlpx --help\n```\n\n----------------------------------------\n\nTITLE: Displaying Reth Init Help Command\nDESCRIPTION: Command to display the help information for the reth init command.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/init.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth init --help\n```\n\n----------------------------------------\n\nTITLE: Help Output for Reth DB Clear Static-File Command\nDESCRIPTION: This snippet shows the detailed help output for the 'reth db clear static-file' command. It includes information on the command's usage, available arguments, and various configuration options for datadir, logging, and display settings.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/clear/static-file.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth db clear static-file [OPTIONS] <SEGMENT>\n\nArguments:\n  <SEGMENT>\n          Possible values:\n          - headers:      Static File segment responsible for the `CanonicalHeaders`, `Headers`, `HeaderTerminalDifficulties` tables\n          - transactions: Static File segment responsible for the `Transactions` table\n          - receipts:     Static File segment responsible for the `Receipts` table\n          - block-meta:   Static File segment responsible for the `BlockBodyIndices`, `BlockOmmers`, `BlockWithdrawals` tables\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: NodeType Message Structure in Ress Protocol\nDESCRIPTION: Defines the NodeType message (0x00) structure that informs peers of node type. This must be sent immediately after connection establishment.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/ress/protocol/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`[nodetype]`\n```\n\n----------------------------------------\n\nTITLE: Configuring libmdbx Static Library Installation in CMake\nDESCRIPTION: Configures the installation of the mdbx-static library target based on the CMake version. For versions below 3.12, it uses a simpler install command, while for newer versions it includes the NAMELINK_COMPONENT parameter.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\n# mdbx-static-lib installation\nif(MDBX_INSTALL_STATIC)\n  if(CMAKE_VERSION VERSION_LESS 3.12)\n    install(TARGETS mdbx-static EXPORT libmdbx\n      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT devel\n      OBJECTS DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT devel\n      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT devel\n      PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT devel\n      INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT devel)\n  else()\n    install(TARGETS mdbx-static EXPORT libmdbx\n      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT devel\n      NAMELINK_COMPONENT devel\n      OBJECTS DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT devel\n      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT devel\n      PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT devel\n      INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT devel)\n  endif()\nendif(MDBX_INSTALL_STATIC)\n```\n\n----------------------------------------\n\nTITLE: Displaying RLPX Ping Help Command\nDESCRIPTION: Shows how to access the help documentation for the RLPX ping command\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/p2p/rlpx/ping.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth p2p rlpx ping --help\n```\n\n----------------------------------------\n\nTITLE: Displaying Reth DB Clear Help Command - Bash\nDESCRIPTION: Command to display help information for the reth db clear functionality\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/clear.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth db clear --help\n```\n\n----------------------------------------\n\nTITLE: Displaying Reth Stage Run Help Command\nDESCRIPTION: Shows how to access the help documentation for the reth stage run command.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/run.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth stage run --help\n```\n\n----------------------------------------\n\nTITLE: Usage and Options for reth db get static-file Command\nDESCRIPTION: This snippet outlines the complete usage instructions, arguments, and options for the 'reth db get static-file' command. It includes details on segment types, key usage, datadir options, logging configurations, and display settings.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/get/static-file.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth db get static-file [OPTIONS] <SEGMENT> <KEY>\n\nArguments:\n  <SEGMENT>\n          Possible values:\n          - headers:      Static File segment responsible for the `CanonicalHeaders`, `Headers`, `HeaderTerminalDifficulties` tables\n          - transactions: Static File segment responsible for the `Transactions` table\n          - receipts:     Static File segment responsible for the `Receipts` table\n          - block-meta:   Static File segment responsible for the `BlockBodyIndices`, `BlockOmmers`, `BlockWithdrawals` tables\n\n  <KEY>\n          The key to get content for\n\nOptions:\n      --raw\n          Output bytes instead of human-readable decoded value\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Processing Build Flags for libmdbx in CMake\nDESCRIPTION: Processes and formats the build flags for libmdbx, removing duplicates and handling configuration-dependent flags. For multi-configuration builds, it adds dynamic configuration-dependent flags via per-configuration define.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nlist(REMOVE_DUPLICATES MDBX_BUILD_FLAGS)\nstring(REPLACE \";\" \" \" MDBX_BUILD_FLAGS \"${MDBX_BUILD_FLAGS}\")\nif(CMAKE_CONFIGURATION_TYPES)\n  # add dynamic part via per-configuration define\n  message(STATUS \"MDBX Compile Flags: ${MDBX_BUILD_FLAGS} <AND CONFIGURATION DEPENDENT>\")\n  add_definitions(-DMDBX_BUILD_FLAGS_CONFIG=\"$<$<CONFIG:Debug>:${CMAKE_C_FLAGS_DEBUG} ${CMAKE_C_DEFINES_DEBUG}>$<$<CONFIG:Release>:${CMAKE_C_FLAGS_RELEASE} ${CMAKE_C_DEFINES_RELEASE}>$<$<CONFIG:RelWithDebInfo>:${CMAKE_C_FLAGS_RELWITHDEBINFO} ${CMAKE_C_DEFINES_RELWITHDEBINFO}>$<$<CONFIG:MinSizeRel>:${CMAKE_C_FLAGS_MINSIZEREL} ${CMAKE_C_DEFINES_MINSIZEREL}>\")\nelse()\n  message(STATUS \"MDBX Compile Flags: ${MDBX_BUILD_FLAGS}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for reth db clear mdbx Command in Bash\nDESCRIPTION: This command shows the help information for the 'reth db clear mdbx' command, which deletes all database table entries from the MDBX database in reth.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/clear/mdbx.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth db clear mdbx --help\n```\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth db clear mdbx [OPTIONS] <TABLE>\n\nArguments:\n  <TABLE>\n\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Usage and Options for Reth Database Drop Command\nDESCRIPTION: This snippet shows the detailed usage instructions and available options for the 'reth db drop' command. It includes options for force dropping, chain selection, logging configuration, and display settings.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/drop.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth db drop [OPTIONS]\n\nOptions:\n  -f, --force\n          Bypasses the interactive confirmation and drops the database directly\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Displaying Build Options for libmdbx in CMake\nDESCRIPTION: Displays the build options for libmdbx by iterating through a list of options and checking for their values in different variable namespaces. It shows either the defined value or a default message if not explicitly defined.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\n# options\nset(options VERSION C_COMPILER CXX_COMPILER MDBX_BUILD_TARGET MDBX_BUILD_TYPE ${MDBX_BUILD_OPTIONS})\nforeach(item IN LISTS options)\n  if(DEFINED ${item})\n    set(value \"${${item}}\")\n  elseif(DEFINED MDBX_${item})\n    set(item MDBX_${item})\n    set(value \"${${item}}\")\n  elseif(DEFINED CMAKE_${item})\n    set(item CMAKE_${item})\n    set(value \"${${item}}\")\n  else()\n    set(value \"AUTO (not pre-defined explicitly)\")\n  endif()\n  message(STATUS \"${item}: ${value}\")\nendforeach(item)\n```\n\n----------------------------------------\n\nTITLE: Starting Reth Node with HTTP JSON-RPC Server\nDESCRIPTION: Command to start a Reth node with HTTP JSON-RPC server enabled on the default port 8545 and localhost address.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/intro.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nreth node --http\n```\n\n----------------------------------------\n\nTITLE: Setting Up NTDLL Extra Import Library Target\nDESCRIPTION: Creates CMake targets for the NTDLL extra import library. This includes custom targets and imported library setup to integrate the generated library into the build system.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(MDBX_NTDLL_EXTRA_IMPLIB)\n    # LY: Sometimes CMake requires a nightmarish magic for simple things.\n    # 1) create a target out of the library compilation result\n    add_custom_target(ntdll_extra_target DEPENDS \"${MDBX_NTDLL_EXTRA_IMPLIB}\")\n    # 2) create an library target out of the library compilation result\n    add_library(ntdll_extra STATIC IMPORTED GLOBAL)\n    add_dependencies(ntdll_extra ntdll_extra_target)\n    # 3) specify where the library is (and where to find the headers)\n    set_target_properties(ntdll_extra\n      PROPERTIES\n      IMPORTED_LOCATION \"${MDBX_NTDLL_EXTRA_IMPLIB}\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Building Reth from source\nDESCRIPTION: Cargo command to build Reth from source code in release mode.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/source.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Checking for Math Library Dependency\nDESCRIPTION: Determines if the math library (libm) is needed and sets the LIB_MATH variable accordingly.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nCHECK_FUNCTION_EXISTS(pow NOT_NEED_LIBM)\nif(NOT_NEED_LIBM)\n  set(LIB_MATH \"\")\nelse()\n  set(CMAKE_REQUIRED_LIBRARIES m)\n  CHECK_FUNCTION_EXISTS(pow HAVE_LIBM)\n  if(HAVE_LIBM)\n    set(LIB_MATH m)\n  else()\n    message(FATAL_ERROR \"No libm found for math support\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Accessing Metrics via cURL\nDESCRIPTION: Basic command to fetch metrics from the Reth node using cURL. This retrieves a text dump of all current metrics from the specified endpoint.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/run/observability.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl 127.0.0.1:9001\n```\n\n----------------------------------------\n\nTITLE: Setting Color Output for Reth Logs\nDESCRIPTION: This option controls whether ANSI terminal escape codes are used for colors and text formatting in logs. The default is 'always'.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/run.md#2025-04-16_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n--color <COLOR>\n    Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n    [default: always]\n\n    Possible values:\n    - always: Colors on\n    - auto:   Colors on\n    - never:  Colors off\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Verbosity and Quiet Mode in Reth\nDESCRIPTION: These options allow setting the minimum log level using verbosity flags or silencing all log output with quiet mode.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/run.md#2025-04-16_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n-v, --verbosity...\n    Set the minimum log level.\n\n    -v      Errors\n    -vv     Warnings\n    -vvv    Info\n    -vvvv   Debug\n    -vvvvv  Traces (warning: very verbose!)\n\n-q, --quiet\n    Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Removing a Trusted Peer using admin_removeTrustedPeer in JavaScript\nDESCRIPTION: This snippet illustrates how to remove a peer from the trusted peer set using the admin_removeTrustedPeer method. It takes an enode URL as input and returns a boolean indicating success.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/admin.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// > {\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"admin_removeTrustedPeer\",\"params\":[\"enode://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@52.16.188.185:30303\"]}\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":true}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log File Options in Reth\nDESCRIPTION: These options configure log file formatting, filtering, directory, size limits, and file count. The default format is terminal, filter is debug, and directory is in the cache folder.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/run.md#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n--log.file.format <FORMAT>\n    The format to use for logs written to the log file\n\n    [default: terminal]\n\n    Possible values:\n    - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n    - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n    - terminal: Represents terminal-friendly formatting for logs\n\n--log.file.filter <FILTER>\n    The filter to use for logs written to the log file\n\n    [default: debug]\n\n--log.file.directory <PATH>\n    The path to put log files in\n\n    [default: <CACHE_DIR>/logs]\n\n--log.file.max-size <SIZE>\n    The maximum size (in MB) of one log file\n\n    [default: 200]\n\n--log.file.max-files <COUNT>\n    The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n    [default: 5]\n```\n\n----------------------------------------\n\nTITLE: Displaying Reth Stage Unwind Help Command\nDESCRIPTION: Shows how to access the help menu for the reth stage unwind command\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/stage/unwind.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth stage unwind --help\n```\n\n----------------------------------------\n\nTITLE: Displaying Reth DB Version Help Command\nDESCRIPTION: Command to display help information for the reth db version utility\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/version.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth db version --help\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information for Reth Prune Command in Bash\nDESCRIPTION: Command to display help information for the 'reth prune' command, showing all available options and configurations.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/prune.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ reth prune --help\n```\n\n----------------------------------------\n\nTITLE: Displaying op-reth Help Documentation and Commands\nDESCRIPTION: Shows the complete help documentation for op-reth CLI, including available commands for importing Optimism Bedrock data and various configuration options for logging and display.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/op-reth.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ op-reth --help\nUsage: op-reth [OPTIONS] <COMMAND>\n\nCommands:\n  import-op           Imports the Bedrock datadir blocks from a file\n  import-receipts-op  Imports the Bedrock datadir receipts from a file\n\nOptions:\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -V, --version\n          Print version\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Usage and Options for reth db checksum Command\nDESCRIPTION: This snippet provides detailed information about the usage, arguments, and options for the 'reth db checksum' command. It includes options for specifying the table, range, data directory, logging settings, and display preferences.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/db/checksum.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: reth db checksum [OPTIONS] <TABLE>\n\nArguments:\n  <TABLE>\n          The table name\n\nOptions:\n      --start-key <START_KEY>\n          The start of the range to checksum\n\n      --end-key <END_KEY>\n          The end of the range to checksum\n\n      --limit <LIMIT>\n          The maximum number of records that are queried and used to compute the checksum\n\n  -h, --help\n          Print help (see a summary with '-h')\n\nDatadir:\n      --chain <CHAIN_OR_PATH>\n          The chain this node is running.\n          Possible values are either a built-in chain or the path to a chain specification file.\n\n          Built-in chains:\n              mainnet, sepolia, holesky, hoodi, dev\n\n          [default: mainnet]\n\nLogging:\n      --log.stdout.format <FORMAT>\n          The format to use for logs written to stdout\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.stdout.filter <FILTER>\n          The filter to use for logs written to stdout\n\n          [default: ]\n\n      --log.file.format <FORMAT>\n          The format to use for logs written to the log file\n\n          [default: terminal]\n\n          Possible values:\n          - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging\n          - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications\n          - terminal: Represents terminal-friendly formatting for logs\n\n      --log.file.filter <FILTER>\n          The filter to use for logs written to the log file\n\n          [default: debug]\n\n      --log.file.directory <PATH>\n          The path to put log files in\n\n          [default: <CACHE_DIR>/logs]\n\n      --log.file.max-size <SIZE>\n          The maximum size (in MB) of one log file\n\n          [default: 200]\n\n      --log.file.max-files <COUNT>\n          The maximum amount of log files that will be stored. If set to 0, background file logging is disabled\n\n          [default: 5]\n\n      --log.journald\n          Write logs to journald\n\n      --log.journald.filter <FILTER>\n          The filter to use for logs written to journald\n\n          [default: error]\n\n      --color <COLOR>\n          Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting\n\n          [default: always]\n\n          Possible values:\n          - always: Colors on\n          - auto:   Colors on\n          - never:  Colors off\n\nDisplay:\n  -v, --verbosity...\n          Set the minimum log level.\n\n          -v      Errors\n          -vv     Warnings\n          -vvv    Info\n          -vvvv   Debug\n          -vvvvv  Traces (warning: very verbose!)\n\n  -q, --quiet\n          Silence all log output\n```\n\n----------------------------------------\n\nTITLE: Generating Input for Keccak-256 Hash using xxd\nDESCRIPTION: This snippet shows how to generate a hexadecimal representation of the input string 'rust is awesome' using the xxd command-line tool.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/web3.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n// > echo -n \"rust is awesome\" | xxd -p\n7275737420697320617765736f6d65\n```\n\n----------------------------------------\n\nTITLE: Using op-reth import-receipts-op Help Command in Bash\nDESCRIPTION: Shows the complete help menu for the op-reth import-receipts-op command. It displays all available options including datadir configuration, chunk length settings, database options, logging preferences, and display parameters. The command is specifically designed to import non-standard RLP encoded receipts from a file using the OpGethReceiptFileCodec format.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/cli/reth/import-receipts-op.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ op-reth import-receipts-op --help\n```\n\n----------------------------------------\n\nTITLE: Release Note on Tag Prefix Importance in Markdown\nDESCRIPTION: A note emphasizing the importance of using the 'v' prefix when tagging releases to ensure the release workflow runs correctly.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/release.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> **Note**\n> \n> The `v` prefix for the tag is important! If it is missing, the release workflow **will not run**.\n```\n\n----------------------------------------\n\nTITLE: Running Grafana Only in Docker\nDESCRIPTION: Command to run only the Grafana container from the Docker Compose setup. This is useful for importing existing Grafana dashboards without running the full Reth stack.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/docker.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f etc/docker-compose.yml up -d --no-deps grafana\n```\n\n----------------------------------------\n\nTITLE: Checking Reth Logs in Docker Compose\nDESCRIPTION: Command to check the logs of the Reth container when running with Docker Compose. This is useful for monitoring and troubleshooting.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/docker.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f etc/docker-compose.yml -f etc/lighthouse.yml logs -f reth\n```\n\n----------------------------------------\n\nTITLE: Running Reth with Plain Docker\nDESCRIPTION: Command to run Reth using plain Docker. This sets up a named volume for data persistence, exposes necessary ports, and enables metrics.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/installation/docker.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n    -v rethdata:/root/.local/share/reth/mainnet \\\n    -d \\\n    -p 9001:9001 \\\n    -p 30303:30303 \\\n    -p 30303:30303/udp \\\n    --name reth \\\n    reth:local \\\n    node \\\n    --metrics 0.0.0.0:9001\n```\n\n----------------------------------------\n\nTITLE: Configuring NTDLL Extra Import Library for MinGW\nDESCRIPTION: Creates an extra import library for ntdll.dll when building with MinGW. This snippet finds the dlltool, generates the import library, and sets up CMake targets for it.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(MINGW OR MINGW64)\n    if(NOT DLLTOOL)\n      # Find dlltool\n      get_filename_component(GCC_NAME ${CMAKE_C_COMPILER} NAME)\n      string(REPLACE gcc dlltool DLLTOOL_NAME ${GCC_NAME})\n      find_program(DLLTOOL NAMES ${DLLTOOL_NAME})\n    endif()\n    if(DLLTOOL)\n      message(STATUS \"Found dlltool: ${DLLTOOL}\")\n      set(MDBX_NTDLL_EXTRA_IMPLIB \"${CMAKE_CURRENT_BINARY_DIR}/mdbx_ntdll_extra.a\")\n      add_custom_command(OUTPUT \"${MDBX_NTDLL_EXTRA_IMPLIB}\"\n        COMMENT \"Create extra-import-library for ntdll.dll\"\n        MAIN_DEPENDENCY \"${MDBX_SOURCE_DIR}/ntdll.def\"\n        COMMAND ${DLLTOOL} -d \"${MDBX_SOURCE_DIR}/ntdll.def\" -l \"${MDBX_NTDLL_EXTRA_IMPLIB}\")\n    else()\n      message(WARNING \"dlltool not found\")\n    endif()\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Collecting Build Information for libmdbx in CMake\nDESCRIPTION: Collects build information including timestamp, compiler flags, and definitions for the libmdbx library. It determines which target to fetch definitions from based on whether the shared library build is enabled.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\n# collect options & build info\nif(NOT DEFINED MDBX_BUILD_TIMESTAMP)\n  string(TIMESTAMP MDBX_BUILD_TIMESTAMP UTC)\nendif()\nset(MDBX_BUILD_FLAGS ${CMAKE_C_FLAGS})\nif(MDBX_BUILD_CXX)\n  set(MDBX_BUILD_FLAGS ${CMAKE_CXX_FLAGS})\nendif()\n\n# append cmake's build-type flags and defines\nif(NOT CMAKE_CONFIGURATION_TYPES)\n  list(APPEND MDBX_BUILD_FLAGS ${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPERCASE}})\n  if(MDBX_BUILD_CXX)\n    list(APPEND MDBX_BUILD_FLAGS ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPERCASE}})\n  endif()\nendif()\n\n# choice target to fetch definitions and options\nif(MDBX_BUILD_SHARED_LIBRARY)\n  set(target4fetch mdbx)\nelse()\n  set(target4fetch mdbx-static)\nendif()\n\n# get definitions\nget_target_property(defs_list ${target4fetch} COMPILE_DEFINITIONS)\nif(defs_list)\n  list(APPEND MDBX_BUILD_FLAGS ${defs_list})\nendif()\n\n# get target compile options\nget_target_property(options_list ${target4fetch} COMPILE_OPTIONS)\nif(options_list)\n  list(APPEND MDBX_BUILD_FLAGS ${options_list})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Build Type for libmdbx in CMake\nDESCRIPTION: Sets the build type for libmdbx, either as a configuration-dependent value for multi-configuration builds or using the CMAKE_BUILD_TYPE value for single-configuration builds.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\n# provide build-type\nif(CMAKE_CONFIGURATION_TYPES)\n  # via per-configuration define\n  add_definitions(-DMDBX_BUILD_TYPE=\"$<CONFIG>\")\n  set(MDBX_BUILD_TYPE \"<CONFIGURATION DEPENDENT>\")\nelse()\n  set(MDBX_BUILD_TYPE ${CMAKE_BUILD_TYPE})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Build Target Triplet for libmdbx in CMake\nDESCRIPTION: Creates a build target triplet for libmdbx by checking various CMake variables in a priority order. It combines architecture ID, system information, compiler ABI, and platform ID to form a complete target specification.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\n# make a build-target triplet\nif(CMAKE_C_COMPILER_TARGET)\n  set(MDBX_BUILD_TARGET \"${CMAKE_C_COMPILER_TARGET}\")\nelse()\n  if(CMAKE_C_COMPILER_ARCHITECTURE_ID)\n    string(STRIP \"${CMAKE_C_COMPILER_ARCHITECTURE_ID}\" MDBX_BUILD_TARGET)\n  elseif(CMAKE_GENERATOR_PLATFORM AND NOT CMAKE_GENERATOR_PLATFORM STREQUAL CMAKE_SYSTEM_NAME)\n    string(STRIP \"${CMAKE_GENERATOR_PLATFORM}\" MDBX_BUILD_TARGET)\n  elseif(CMAKE_SYSTEM_ARCH)\n    string(STRIP \"${CMAKE_SYSTEM_ARCH}\" MDBX_BUILD_TARGET)\n  elseif(CMAKE_LIBRARY_ARCHITECTURE)\n    string(STRIP \"${CMAKE_LIBRARY_ARCHITECTURE}\" MDBX_BUILD_TARGET)\n  elseif(CMAKE_SYSTEM_PROCESSOR)\n    string(STRIP \"${CMAKE_SYSTEM_PROCESSOR}\" MDBX_BUILD_TARGET)\n  else()\n    set(MDBX_BUILD_TARGET \"unknown\")\n  endif()\n  if(CMAKE_C_COMPILER_ABI\n      AND NOT (CMAKE_C_COMPILER_ABI MATCHES \".*${MDBX_BUILD_TARGET}.*\" OR MDBX_BUILD_TARGET MATCHES \".*${CMAKE_C_COMPILER_ABI}.*\"))\n    string(CONCAT MDBX_BUILD_TARGET \"${MDBX_BUILD_TARGET}-${CMAKE_C_COMPILER_ABI}\")\n  endif()\n  if(CMAKE_C_PLATFORM_ID\n      AND NOT (CMAKE_SYSTEM_NAME\n        AND (CMAKE_C_PLATFORM_ID MATCHES \".*${CMAKE_SYSTEM_NAME}.*\" OR CMAKE_SYSTEM_NAME MATCHES \".*${CMAKE_C_PLATFORM_ID}.*\"))\n      AND NOT (CMAKE_C_PLATFORM_ID MATCHES \".*${CMAKE_C_PLATFORM_ID}.*\" OR MDBX_BUILD_TARGET MATCHES \".*${CMAKE_C_PLATFORM_ID}.*\"))\n    string(CONCAT MDBX_BUILD_TARGET \"${MDBX_BUILD_TARGET}-${CMAKE_C_COMPILER_ABI}\")\n  endif()\n  if(CMAKE_SYSTEM_NAME)\n    string(CONCAT MDBX_BUILD_TARGET \"${MDBX_BUILD_TARGET}-${CMAKE_SYSTEM_NAME}\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Package Versioning for libmdbx in CMake\nDESCRIPTION: Sets up package versioning information for libmdbx when it's not built as a subproject. It defines package name, version components, generates a full version string, and writes it to a VERSION.txt file.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/crates/storage/libmdbx-rs/mdbx-sys/libmdbx/CMakeLists.txt#2025-04-16_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT SUBPROJECT)\n  set(PACKAGE \"libmdbx\")\n  set(CPACK_PACKAGE_VERSION_MAJOR ${MDBX_VERSION_MAJOR})\n  set(CPACK_PACKAGE_VERSION_MINOR ${MDBX_VERSION_MINOR})\n  set(CPACK_PACKAGE_VERSION_PATCH ${MDBX_VERSION_RELEASE})\n  set(CPACK_PACKAGE_VERSION_COMMIT ${MDBX_VERSION_REVISION})\n  set(PACKAGE_VERSION \"${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}.${CPACK_PACKAGE_VERSION_COMMIT}\")\n  message(STATUS \"libmdbx package version is ${PACKAGE_VERSION}\")\n  file(WRITE \"${CMAKE_CURRENT_BINARY_DIR}/VERSION.txt\" \"${MDBX_VERSION_MAJOR}.${MDBX_VERSION_MINOR}.${MDBX_VERSION_RELEASE}.${MDBX_VERSION_REVISION}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Referencing eth Namespace Documentation in Markdown\nDESCRIPTION: This snippet provides a markdown header and a link to the official Ethereum documentation for the eth namespace API methods. It directs users to the JSON-RPC API documentation on ethereum.org.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/book/jsonrpc/eth.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `eth` Namespace\n\nDocumentation for the API methods in the `eth` namespace can be found on [ethereum.org](https://ethereum.org/en/developers/docs/apis/json-rpc/).\n```\n\n----------------------------------------\n\nTITLE: GetBlockBodies Data Structure in Ethereum Wire Protocol\nDESCRIPTION: Definition of the GetBlockBodies struct used in Ethereum's wire protocol. It contains a vector of block hashes for which block bodies are requested.\nSOURCE: https://github.com/paradigmxyz/reth/blob/main/docs/crates/network.md#2025-04-16_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\npub struct GetBlockBodies(\n    /// The block hashes to request bodies for.\n    pub Vec<B256>,\n);\n```"
  }
]