[
  {
    "owner": "cypress-io",
    "repo": "cypress-documentation",
    "content": "TITLE: Cypress Element Query Test\nDESCRIPTION: Demonstrates how to find and verify the presence of content on a page using cy.contains() command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/end-to-end-testing/writing-your-first-end-to-end-test.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('My First Test', () => {\n  it('finds the content \"type\"', () => {\n    cy.visit('https://example.cypress.io')\n\n    cy.contains('type')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Clicking an Element in Cypress\nDESCRIPTION: This snippet demonstrates how to visit a page and click on a specific element using Cypress commands. It uses cy.visit() to navigate to a URL and cy.contains() to find and click an element with specific text.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/end-to-end-testing/writing-your-first-end-to-end-test.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('My First Test', () => {\n  it('clicks the link \"type\"', () => {\n    cy.visit('https://example.cypress.io')\n\n    cy.contains('type').click()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Cypress Page Visit Test\nDESCRIPTION: Shows how to visit a webpage using Cypress cy.visit() command. This is typically the first step in any E2E test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/end-to-end-testing/writing-your-first-end-to-end-test.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('My First Test', () => {\n  it('Visits the Kitchen Sink', () => {\n    cy.visit('https://example.cypress.io')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Database Seeding with Cypress Task\nDESCRIPTION: Example showing how to reset and re-seed a database using a custom Cypress task in a beforeEach hook to ensure clean test state\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/best-practices.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nbeforeEach(function () {\n  cy.task('db:seed')\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Login with Cypress\nDESCRIPTION: Custom Cypress command implementation for Google authentication flow with error handling and waiting periods to manage dynamic content loading.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/social-authentication.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction logIntoGoogle(username: string, password: string, name: string) {\n  Cypress.on(\n    'uncaught:exception',\n    (err) =>\n      !err.message.includes('ResizeObserver loop') &&\n      !err.message.includes('Error in protected function')\n  )\n  cy.visit('http://localhost:3000')\n  cy.get('#qsLoginBtn').click()\n\n  cy.origin(Auth0Domain, () => {\n    cy.scrollTo('bottom')\n    cy.get('form[data-provider=\"google\"]').submit()\n  })\n\n  cy.origin(\n    'https://accounts.google.com',\n    {\n      args: {\n        username,\n        password,\n      },\n    },\n    ({ username, password }) => {\n      Cypress.on(\n        'uncaught:exception',\n        (err) =>\n          !err.message.includes('ResizeObserver loop') &&\n          !err.message.includes('Error in protected function')\n      )\n\n      cy.get('input[type=\"email\"]').type(username, {\n        log: false,\n      })\n      cy.contains('Next').click().wait(4000)\n      cy.get('[type=\"password\"]').type(password, {\n        log: false,\n      })\n      cy.contains('Next').click().wait(4000)\n    }\n  )\n\n  cy.get('h6.dropdown-header').should('contain', name)\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Cypress Test with API Seeding\nDESCRIPTION: JavaScript code showing how to seed data using API requests in Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/end-to-end-testing/testing-your-app.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('The Home Page', () => {\n  beforeEach(() => {\n    // reset and seed the database prior to every test\n    cy.exec('npm run db:reset && npm run db:seed')\n\n    // seed a post in the DB that we control from our tests\n    cy.request('POST', '/test/seed/post', {\n      title: 'First Post',\n      authorId: 1,\n      body: '...'\n    })\n\n    // seed a user in the DB that we can control from our tests\n    cy.request('POST', '/test/seed/user', { name: 'Jane' })\n      .its('body')\n      .as('currentUser')\n  })\n\n  it('successfully loads', () => {\n    // this.currentUser will now point to the response\n    // body of the cy.request() that we could use\n    // to log in or work with in some way\n\n    cy.visit('/')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Cypress with pnpm 10.4.0+ Using Allow-Build Flag\nDESCRIPTION: Command for installing Cypress with pnpm version 10.4.0 or above, using the --allow-build flag to permit the execution of build scripts required by Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/get-started/install-cypress.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm --allow-build cypress add --save-dev cypress\n```\n\n----------------------------------------\n\nTITLE: Complete Basic GitHub Actions Workflow for Cypress Tests\nDESCRIPTION: A complete basic GitHub Actions workflow that runs Cypress tests on Ubuntu. The workflow triggers on push events, checks out the code, and uses the Cypress GitHub Action to build the project, start the application, and run tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/github-actions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Cypress Tests\n\non: push\n\njobs:\n  cypress-run:\n    runs-on: ubuntu-24.04\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      # Install npm dependencies, cache them correctly\n      # and run all Cypress tests\n      - name: Cypress run\n        uses: cypress-io/github-action@v6\n        with:\n          build: npm run build\n          start: npm start\n```\n\n----------------------------------------\n\nTITLE: Basic intercept Command Syntax for Spying\nDESCRIPTION: Syntax options for using cy.intercept to spy on network requests without modifying them, showing different parameter combinations.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// spying only\ncy.intercept(url)\ncy.intercept(method, url)\ncy.intercept(routeMatcher)\n```\n\n----------------------------------------\n\nTITLE: Writing Basic React Component Test with Cypress\nDESCRIPTION: A simple React component test that demonstrates how to mount a Stepper component for testing. It uses the cy.mount() command to render the component in the test environment.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/get-started.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport Stepper from './Stepper'\n\ndescribe('<Stepper />', () => {\n  it('mounts', () => {\n    // see: https://on.cypress.io/mounting-react\n    cy.mount(<Stepper />)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Route Handlers in Cypress Intercept\nDESCRIPTION: Demonstrates how to use the routeHandler function in cy.intercept() to access and modify the entire request-response cycle, including making assertions, modifying requests, and dynamically controlling responses.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/users*', (req) => {\n  /* do something with request and/or response */\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('POST', '/organization', (req) => {\n  expect(req.body).to.include('Acme Company')\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// set the request body to something different\n// before it's sent to the destination\ncy.intercept('POST', '/login', (req) => {\n  req.body = 'username=janelane&password=secret123'\n})\n\n// dynamically set the alias\ncy.intercept('POST', '/login', (req) => {\n  req.alias = 'login'\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/req-headers', (req) => {\n  req.headers['x-custom-headers'] = 'added by cy.intercept'\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/req-headers', (req) => {\n  req.headers['x-custom-headers'] = 'added by cy.intercept'\n}).as('headers')\n\n// the application makes the call ...\n// confirm the custom header was added\ncy.wait('@headers')\n  .its('request.headers')\n  .should('have.property', 'x-custom-headers', 'added by cy.intercept')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  cy.intercept(\n    { url: 'http://localhost:3001/**', middleware: true },\n    // Delete 'if-none-match' header from all outgoing requests\n    (req) => delete req.headers['if-none-match']\n  )\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/billing', (req) => {\n  // functions on 'req' can be used to\n  // dynamically respond to a request here\n\n  // send the request to the destination server\n  req.reply()\n\n  // respond to the request with a JSON object\n  req.reply({ plan: 'starter' })\n\n  // send the request to the destination server\n  // and intercept the response\n  req.continue((res) => {\n    // 'res' represents the real destination's response\n    // See \"Intercepting a response\" for more details and examples\n  })\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('POST', '/login', (req) => {\n  // you could asynchronously fetch test data...\n  return getLoginCredentials().then((credentials) => {\n    // ...and then, use it to supplement the outgoing request\n    req.headers['authorization'] = credentials\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Data Attributes for Element Selection in HTML\nDESCRIPTION: Demonstrates how to use data-cy attributes to create reliable selectors for Cypress tests. This approach isolates selectors from styling and behavioral changes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/best-practices.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button\n  id=\"main\"\n  class=\"btn btn-large\"\n  name=\"submission\"\n  role=\"button\"\n  data-cy=\"submit\"\n>\n  Submit\n</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Hooks in Cypress Tests\nDESCRIPTION: Shows how to use before, beforeEach, afterEach, and after hooks in Cypress tests at both root and describe block levels.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/writing-and-organizing-tests.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbefore(() => {\n  // root-level hook\n  // runs once before all tests\n})\n\nbeforeEach(() => {\n  // root-level hook\n  // runs before every test block\n})\n\nafterEach(() => {\n  // runs after each test block\n})\n\nafter(() => {\n  // runs once all tests are done\n})\n\ndescribe('Hooks', () => {\n  before(() => {\n    // runs once before all tests in the block\n  })\n\n  beforeEach(() => {\n    // runs before each test in the block\n  })\n\n  afterEach(() => {\n    // runs after each test in the block\n  })\n\n  after(() => {\n    // runs once after all tests in the block\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Best Practice: Combining Multiple Coupled Tests into One Test\nDESCRIPTION: A better approach to handle form testing by combining multiple steps into a single test. This allows the test to run independently without relying on the state of previous tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/best-practices.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// a bit better\ndescribe('my form', () => {\n  it('can submit a valid form', () => {\n    -cy.visit('/users/new')::cy.mount(<NewUser />)-\n\n    cy.log('filling out first name') // if you really need this\n    cy.get('[data-testid=\"first-name\"]').type('Johnny')\n\n    cy.log('filling out last name') // if you really need this\n    cy.get('[data-testid=\"last-name\"]').type('Appleseed')\n\n    cy.log('submitting form') // if you really need this\n    cy.get('form').submit()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using the createUser Custom Command\nDESCRIPTION: Shows how to use the createUser command to create a new user with specific properties via API.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ncy.createUser({\n  id: 123,\n  name: 'Jane Lane',\n})\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Assertion in Cypress\nDESCRIPTION: Example of making an HTTP request and asserting on the response body content. Shows deep equality checking on a JSON response.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ncy.request('/users/1').its('body').should('deep.eq', { name: 'Jane' })\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress Configuration Example in TypeScript\nDESCRIPTION: Example showing basic Cypress configuration using TypeScript with the defineConfig helper function. Demonstrates setting a baseUrl configuration option.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  e2e: {\n    baseUrl: 'http://localhost:1234',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Seeding a Database Using cy.task() in Cypress\nDESCRIPTION: Demonstrates how to use cy.task() to seed a database before running tests. The task is called in a beforeEach hook to ensure a clean database state for each test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/task.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('e2e', () => {\n  beforeEach(() => {\n    cy.task('defaults:db')\n    cy.visit('/')\n  })\n\n  it('displays article values', () => {\n    cy.get('.article-list').should('have.length', 10)\n  })\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from '../../server/src/db'\n\non('task', {\n  'defaults:db': () => {\n    return db.seed('defaults')\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Waiting and Asserting on Multiple API Calls in Cypress\nDESCRIPTION: This example shows how to intercept a POST request, alias it, and then wait for multiple occurrences of the same request. It demonstrates making assertions on the response body of each intercepted request.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/network-requests.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept({\n  method: 'POST',\n  url: '/myApi',\n}).as('apiCheck')\n\ncy.visit('/')\ncy.wait('@apiCheck').then((interception) => {\n  assert.isNotNull(interception.response.body, '1st API call has data')\n})\n\ncy.wait('@apiCheck').then((interception) => {\n  assert.isNotNull(interception.response.body, '2nd API call has data')\n})\n\ncy.wait('@apiCheck').then((interception) => {\n  assert.isNotNull(interception.response.body, '3rd API call has data')\n})\n```\n\n----------------------------------------\n\nTITLE: Handling State Changes in Cypress Assertions\nDESCRIPTION: Demonstrates the correct way to handle assertions for elements that change state over time, such as a loading element that appears and then disappears. It shows an incorrect approach and the correct method of re-querying the element for each assertion.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/assertions.mdx#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// ⛔️ DOES NOT WORK\ncy.get('[data-testid=\"loading\"]').should('be.visible').and('not.be.visible')\n\n// ✅ THE CORRECT WAY\ncy.get('[data-testid=\"loading\"]').should('be.visible')\ncy.get('[data-testid=\"loading\"]').should('not.be.visible')\n```\n\n----------------------------------------\n\nTITLE: Using Callback Functions for Complex Assertions in Cypress\nDESCRIPTION: Shows how to use .should() with a callback function to perform complex assertions across multiple elements, with Cypress automatically applying retry logic.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('p').should(($p) => {\n  // massage our subject from a DOM element\n  // into an array of texts from all of the p's\n  let texts = $p.map((i, el) => {\n    return Cypress.$(el).text()\n  })\n\n  // jQuery map returns jQuery object\n  // and .get() converts this to an array\n  texts = texts.get()\n\n  // array should have length of 3\n  expect(texts).to.have.length(3)\n\n  // with this specific content\n  expect(texts).to.deep.eq([\n    'Some text from first p',\n    'More text from second p',\n    'And even more text from third p',\n  ])\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Request Syntax in Cypress\nDESCRIPTION: Shows the different ways to call cy.request() including basic URL, method and body combinations.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/request.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.request(url)\ncy.request(url, body)\ncy.request(method, url)\ncy.request(method, url, body)\ncy.request(options)\n```\n\n----------------------------------------\n\nTITLE: Dynamically Generating Cypress Tests\nDESCRIPTION: This snippet shows how to dynamically generate Cypress tests using JavaScript. It creates a suite of tests that trigger different mouse events if the app uses jQuery.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/writing-and-organizing-tests.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('if your app uses jQuery', () => {\n  ;['mouseover', 'mouseout', 'mouseenter', 'mouseleave'].forEach((event) => {\n    it('triggers event: ' + event, () => {\n      // if your app uses jQuery, then we can trigger a jQuery\n      // event that causes the event callback to fire\n      cy.get('#with-jquery')\n        .invoke('trigger', event)\n        .get('[data-testid=\"messages\"]')\n        .should('contain', 'the event ' + event + 'was fired')\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Making Assertions in Cypress\nDESCRIPTION: This snippet shows how to make assertions after clicking an element. It visits a page, clicks an element, and then asserts that the URL has changed as expected using cy.url().should().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/end-to-end-testing/writing-your-first-end-to-end-test.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('My First Test', () => {\n  it('clicking \"type\" navigates to a new url', () => {\n    cy.visit('https://example.cypress.io')\n\n    cy.contains('type').click()\n\n    // Should be on a new URL which\n    // includes '/commands/actions'\n    cy.url().should('include', '/commands/actions')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Best Practice: Using Multiple Assertions in a Single Test\nDESCRIPTION: The recommended approach for Cypress testing with multiple assertions in a single test. This is more efficient and still provides clear failure information.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/best-practices.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('my form', () => {\n  beforeEach(() => {\n    cy.visit('/users/new')\n  })\n\n  it('validates and formats first name', () => {\n    cy.get('[data-testid=\"first-name\"]')\n      .type('johnny')\n      .should('have.attr', 'data-validation', 'required')\n      .and('have.class', 'active')\n      .and('have.value', 'Johnny')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing User Signup Test in Cypress\nDESCRIPTION: Equivalent Cypress test for validating user signup functionality. The test uses Cypress commands to visit the signup page, interact with form elements, and assert the resulting URL.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Authorization Tests', () => {\n  it('allows the user to signup for a new account', () => {\n    cy.visit('/signup')\n    cy.get('#email-field').type('user@email.com')\n    cy.get('#confirm-email-field').type('user@email.com')\n    cy.get('#password-field').type('testPassword1234')\n    cy.get('button').contains('Create new account').click()\n\n    cy.url().should('include', '/signup/success')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Failing Cypress Test Example\nDESCRIPTION: Demonstrates a deliberately failing test to show how Cypress handles test failures and displays error messages.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/end-to-end-testing/writing-your-first-end-to-end-test.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('My First Test', () => {\n  it('Does not do much!', () => {\n    expect(true).to.equal(false)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Matching Routes with RouteMatcher in Cypress\nDESCRIPTION: Demonstrates how to use cy.intercept() with different RouteMatcher objects to match specific HTTP requests. Examples include matching by method and URL, pathname and query parameters, and complex URL patterns.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// These both yield the same result:\ncy.intercept({ method: 'GET', url: '**/users' })\ncy.intercept('GET', '**/users')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Match any type of request with the pathname `/search`\n// and the query parameter 'q=some+terms'\ncy.intercept({\n  pathname: '/search',\n  query: {\n    q: 'some terms',\n  },\n}).as('searchForTerms')\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept(\n  {\n    // this RegExp matches any URL beginning with\n    // 'http://api.example.com/' and ending with '/edit' or '/save'\n    url: /^http:\\/\\/api\\.example\\.com\\/.*\\/(edit|save)/,\n    // matching requests must also contain this header\n    headers: {\n      'x-requested-with': 'exampleClient',\n    },\n  }\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// this example will cause 1 request to `/temporary-error`\n// to receive a network error and subsequent requests will\n// not match this `RouteMatcher`\ncy.intercept({ url: '/temporary-error', times: 1 }, { forceNetworkError: true })\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Assertions in Cypress\nDESCRIPTION: Illustrates how to chain multiple assertions against the same element using .should() and .and() methods to create readable test sequences.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#header a')\n  .should('have.class', 'active')\n  .and('have.attr', 'href', '/users')\n```\n\n----------------------------------------\n\nTITLE: Optimized Social Login Command with Session Caching\nDESCRIPTION: Enhanced version of the social login command that implements cy.session() for caching authenticated sessions. Includes validation logic for each social provider and reduces authentication overhead in tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/social-authentication.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nCypress.Commands.add(\n  'loginToAuth0ViaSocial',\n  (SOCIAL_PROVIDER: 'microsoft' | 'google' | 'facebook') => {\n    const log = Cypress.log({\n      displayName: 'Social LOGIN',\n      message: [`🔐 Authenticating | ${SOCIAL_PROVIDER}`],\n      // @ts-ignore\n      autoEnd: false,\n    })\n    log.snapshot('before')\n\n    cy.session(\n      `social-${SOCIAL_PROVIDER}`,\n      () => {\n        switch (SOCIAL_PROVIDER) {\n          case 'microsoft':\n            logIntoMicrosoft(\n              Cypress.env('MICROSOFT_USERNAME'),\n              Cypress.env('MICROSOFT_PASSWORD'),\n              Cypress.env('MICROSOFT_NAME')\n            )\n            break\n          case 'google':\n            logIntoGoogle(\n              Cypress.env('GOOGLE_USERNAME'),\n              Cypress.env('GOOGLE_PASSWORD'),\n              Cypress.env('GOOGLE_NAME')\n            )\n            break\n          case 'facebook':\n            logIntoFacebook(\n              Cypress.env('FACEBOOK_USERNAME'),\n              Cypress.env('FACEBOOK_PASSWORD'),\n              Cypress.env('FACEBOOK_NAME')\n            )\n            break\n          default:\n            throw new Error('no social provider configured!')\n        }\n      },\n      {\n        validate: () => {\n          cy.visit('http://localhost:3000')\n          switch (SOCIAL_PROVIDER) {\n            case 'microsoft':\n              cy.get('h6.dropdown-header').should(\n                'contain',\n                Cypress.env('MICROSOFT_NAME')\n              )\n              break\n            case 'google':\n              cy.get('h6.dropdown-header').should(\n                'contain',\n                Cypress.env('GOOGLE_NAME')\n              )\n              break\n            case 'facebook':\n              cy.get('h6.dropdown-header').should(\n                'contain',\n                Cypress.env('FACEBOOK_NAME')\n              )\n              break\n            default:\n              throw new Error('no social provider configured!')\n          }\n        },\n      }\n    )\n\n    log.snapshot('after')\n    log.end()\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Cypress Assertion Styles: BDD and TDD\nDESCRIPTION: This snippet demonstrates both BDD (expect/should) and TDD (assert) style assertions in Cypress. It also shows how to use the .should() command for chaining assertions off of Cypress commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/writing-and-organizing-tests.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nit('can add numbers', () => {\n  expect(add(1, 2)).to.eq(3)\n})\n\nit('can subtract numbers', () => {\n  assert.equal(subtract(5, 12), -7, 'these numbers are equal')\n})\n\ncy.wrap(add(1, 2)).should('equal', 3)\n```\n\n----------------------------------------\n\nTITLE: Disabling Browser Cache for Intercepted Requests in TypeScript\nDESCRIPTION: Presents a workaround using `cy.intercept` with middleware to address issues where browser caching prevents requests from being intercepted. By modifying the 'cache-control' header in the 'before:response' event, it forces API responses to not be cached, ensuring subsequent requests hit the network and are captured by Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_44\n\nLANGUAGE: ts\nCODE:\n```\nbeforeEach(() => {\n  cy.intercept(\n    'https://api.example.com/**/*',\n    { middleware: true },\n    (req) => {\n      req.on('before:response', (res) => {\n        // force all API responses to not be cached\n        res.headers['cache-control'] = 'no-store'\n      })\n    }\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Promises in Cypress Intercept\nDESCRIPTION: Examples of returning Promises from intercept route callbacks to handle asynchronous operations before continuing with the request.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('POST', '/users', (req) => {\n  // asynchronously fetch test data\n  return getAuthToken().then((token) => {\n    // ...and apply it to the outgoing request\n    req.headers['Authorization'] = `Basic ${token}`\n  })\n})\n\ncy.intercept('POST', '/users', (req) => {\n  req.continue((res) => {\n    // the response will not be sent to the browser until\n    // `waitForSomething()` resolves:\n    return waitForSomething()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Avoiding Direct Assignment of Cypress Commands in JavaScript\nDESCRIPTION: This example demonstrates the incorrect approach of assigning Cypress commands to variables and the correct pattern using aliases. Cypress commands are asynchronous and cannot be used with direct variable assignment.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/best-practices.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// DONT DO THIS. IT DOES NOT WORK\n// THE WAY YOU THINK IT DOES.\nconst a = cy.get('a')\n\ncy.visit('https://example.cypress.io')\n\n// nope, fails\na.first().click()\n\n// Instead, do this.\ncy.get('a').as('links')\ncy.get('@links').first().click()\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress Test Suite for Browser-Specific Execution\nDESCRIPTION: This snippet demonstrates how to configure a Cypress test suite to run or be excluded based on the browser being used. It uses the browser configuration option which accepts arguments similar to Cypress.isBrowser().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/writing-and-organizing-tests.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('When NOT in Chrome', { browser: '!chrome' }, () => {\n  it('Shows warning', () => {\n    cy.get('[data-testid=\"browser-warning\"]').should(\n      'contain',\n      'For optimal viewing, use Chrome browser'\n    )\n  })\n\n  it('Links to browser compatibility doc', () => {\n    cy.get('a.browser-compat')\n      .should('have.attr', 'href')\n      .and('include', 'browser-compatibility')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Element Testing in Cypress\nDESCRIPTION: Shows how to handle testing scenarios where different elements might be present, using synchronous DOM querying to determine which element exists and then interact with it.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/conditional-testing.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').click()\ncy.get('body')\n  .then(($body) => {\n    // synchronously query from body\n    // to find which element was created\n    if ($body.find('input').length) {\n      // input was found, do something else here\n      return 'input'\n    }\n\n    // else assume it was textarea\n    return 'textarea'\n  })\n  .then((selector) => {\n    // selector is a string that represents\n    // the selector we could use to find it\n    cy.get(selector).type(`found the element by selector ${selector}`)\n  })\n```\n\n----------------------------------------\n\nTITLE: Testing Login Flow with Database Seeding in Cypress\nDESCRIPTION: This snippet demonstrates how to test a login flow by seeding the database, creating a test user, and verifying the login process. It includes checking for redirects, cookie presence, and UI updates.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/end-to-end-testing/testing-your-app.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('The Login Page', () => {\n  beforeEach(() => {\n    // reset and seed the database prior to every test\n    cy.exec('npm run db:reset && npm run db:seed')\n\n    // seed a user in the DB that we can control from our tests\n    // assuming it generates a random password for us\n    cy.request('POST', '/test/seed/user', { username: 'jane.lane' })\n      .its('body')\n      .as('currentUser')\n  })\n\n  it('sets auth cookie when logging in via form submission', function () {\n    // destructuring assignment of the this.currentUser object\n    const { username, password } = this.currentUser\n\n    cy.visit('/login')\n\n    cy.get('input[name=username]').type(username)\n\n    // {enter} causes the form to submit\n    cy.get('input[name=password]').type(`${password}{enter}`)\n\n    // we should be redirected to /dashboard\n    cy.url().should('include', '/dashboard')\n\n    // our auth cookie should be present\n    cy.getCookie('your-session-cookie').should('exist')\n\n    // UI should reflect this user being logged in\n    cy.get('h1').should('contain', 'jane.lane')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a New Post Test in Cypress\nDESCRIPTION: This snippet demonstrates a simple Cypress test for creating a new post. It shows how to visit a page, interact with input fields, click a submit button, and verify the result.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Post Resource', () => {\n  it('Creating a New Post', () => {\n    -{cy.visit('/posts/new')::cy.mount(<PostBuilder />)}- // 1.\n\n    cy.get(\"input.post-title\") // 2.\n      .type(\"My First Post\"); // 3.\n\n    cy.get(\"input.post-body\") // 4.\n      .type(\"Hello, world!\"); // 5.\n\n    cy.contains(\"Submit\") // 6.\n      .click(); // 7.\n\n    cy.get(\"h1\") // 8.\n      .should(\"contain\", \"My First Post\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Commands and Assertions in Cypress\nDESCRIPTION: This snippet demonstrates a more complex test with multiple interactions and assertions. It visits a page, clicks an element, verifies the URL, types into an input field, and then verifies the input value.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/end-to-end-testing/writing-your-first-end-to-end-test.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('My First Test', () => {\n  it('Gets, types and asserts', () => {\n    cy.visit('https://example.cypress.io')\n\n    cy.contains('type').click()\n\n    // Should be on a new URL which\n    // includes '/commands/actions'\n    cy.url().should('include', '/commands/actions')\n\n    // Get an input, type into it\n    cy.get('.action-email').type('fake@email.com')\n\n    //  Verify that the value has been updated\n    cy.get('.action-email').should('have.value', 'fake@email.com')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing End-to-End Testing with Cypress\nDESCRIPTION: Demonstrates a basic end-to-end test that visits a website, interacts with UI elements, and verifies expected behavior. Shows how to use cy.visit(), cy.get(), and assertions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/get-started/why-cypress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nit('adds todos', () => {\n  cy.visit('https://example.cypress.io/')\n  cy.get('[data-cy=\"new-todo\"]').type('write tests{enter}')\n  // confirm the application is showing one item\n  cy.get('[data-cy=\"todos\"]').should('have.length', 1)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Login Command in Cypress\nDESCRIPTION: This snippet shows how to create a custom 'login' command in Cypress. It encapsulates the login logic, making it reusable across multiple test files. The command handles navigation, form submission, and verification steps.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/end-to-end-testing/testing-your-app.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// In cypress/support/commands.js\n\nCypress.Commands.add('login', (username, password) => {\n  cy.visit('/login')\n\n  cy.get('input[name=username]').type(username)\n\n  // {enter} causes the form to submit\n  cy.get('input[name=password]').type(`${password}{enter}`, { log: false })\n\n  // we should be redirected to /dashboard\n  cy.url().should('include', '/dashboard')\n\n  // our auth cookie should be present\n  cy.getCookie('your-session-cookie').should('exist')\n\n  // UI should reflect this user being logged in\n  cy.get('h1').should('contain', username)\n})\n\n// In your spec file\n\nit('does something on a secured page', function () {\n  const { username, password } = this.currentUser\n  cy.login(username, password)\n\n  // ...rest of test\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Cypress Folder Structure for JavaScript Projects\nDESCRIPTION: Shows the default folder structure created by Cypress for JavaScript projects, including separate structures for E2E testing, component testing, and a combined setup.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/writing-and-organizing-tests.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nE2E:\n/cypress.config.js\n/cypress/fixtures/example.json\n/cypress/support/commands.js\n/cypress/support/e2e.js\n\nComponent:\n/cypress.config.js\n/cypress/fixtures/example.json\n/cypress/support/commands.js\n/cypress/support/component.js\n/cypress/support/component-index.html\n\nBoth:\n/cypress.config.js\n/cypress/fixtures/example.json\n/cypress/support/commands.js\n/cypress/support/e2e.js\n/cypress/support/component.js\n/cypress/support/component-index.html\n```\n\n----------------------------------------\n\nTITLE: Intercepting and Waiting for Multiple Requests in Cypress\nDESCRIPTION: This snippet demonstrates how to intercept multiple API requests, alias them, and then wait for their responses before proceeding with assertions. It shows the usage of cy.intercept() and cy.wait() for both page visits and component mounting scenarios.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/network-requests.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/activities/*', { fixture: 'activities' }).as('getActivities')\ncy.intercept('/messages/*', { fixture: 'messages' }).as('getMessages')\n\n-{// visiting the dashboard should make requests that match\n// the two routes above\ncy.visit('http://localhost:8888/dashboard')::// mounting the dashboard should make requests that match\n// the two routes above\ncy.mount(<Dashboard />)}-\n\n// pass an array of Route Aliases that forces Cypress to wait\n// until it sees a response for each request that matches\n// each of these aliases\ncy.wait(['@getActivities', '@getMessages'])\n\n// these commands will not run until the wait command resolves above\ncy.get('h1').should('contain', 'Dashboard')\n```\n\n----------------------------------------\n\nTITLE: Structuring Unit Tests for Math Functions in Cypress\nDESCRIPTION: Demonstrates how to structure unit tests for math functions using Cypress with describe, context, it, and specify blocks.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/writing-and-organizing-tests.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// -- Start: Our Application Code --\nfunction add(a, b) {\n  return a + b\n}\n\nfunction subtract(a, b) {\n  return a - b\n}\n\nfunction divide(a, b) {\n  return a / b\n}\n\nfunction multiply(a, b) {\n  return a * b\n}\n// -- End: Our Application Code --\n\n// -- Start: Our Cypress Tests --\ndescribe('Unit test our math functions', () => {\n  context('math', () => {\n    it('can add numbers', () => {\n      expect(add(1, 2)).to.eq(3)\n    })\n\n    it('can subtract numbers', () => {\n      expect(subtract(5, 12)).to.eq(-7)\n    })\n\n    specify('can divide numbers', () => {\n      expect(divide(27, 9)).to.eq(3)\n    })\n\n    specify('can multiply numbers', () => {\n      expect(multiply(5, 4)).to.eq(20)\n    })\n  })\n})\n// -- End: Our Cypress Tests --\n```\n\n----------------------------------------\n\nTITLE: Intercepting Network Requests with Cypress\nDESCRIPTION: Example of using cy.intercept() to intercept GET requests to a specific URL pattern ('/users/*') and stub the response as an empty array. The intercepted request is also assigned an alias ('getUsers') for reference later in tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/network-requests.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept(\n  {\n    method: 'GET', // Route all GET requests\n    url: '/users/*', // that have a URL that matches '/users/*'\n  },\n  [] // and force the response to be: []\n).as('getUsers') // and assign an alias\n```\n\n----------------------------------------\n\nTITLE: Using Aliases to Reference Elements in Cypress\nDESCRIPTION: This example shows how to use the .as() command to create an alias for an element, and then later reference that element using the @ syntax, which allows for easier test readability and automatic re-querying of the DOM.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.my-selector')\n  .as('myElement') // sets the alias\n  .click()\n\n/* many more actions */\n\ncy.get('@myElement') // re-queries the DOM as before\n  .click()\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress GitHub Action with Cypress Cloud Integration\nDESCRIPTION: This YAML snippet demonstrates how to set up the Cypress GitHub Action with Cypress Cloud integration, including recording test results, parallelization, and grouping of test runs.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/github-actions.mdx#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nname: Cypress tests\non: push\njobs:\n  cypress-run:\n    name: Cypress run\n    runs-on: ubuntu-24.04\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Cypress run\n        uses: cypress-io/github-action@v6\n        with:\n          record: true\n        env:\n          # pass GitHub token to detect new build vs re-run build\n          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of cy.visit()\nDESCRIPTION: Shows proper usage patterns for the visit command, including visiting relative paths with baseUrl, local files, and absolute URLs.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('/') // visits the baseUrl\ncy.visit('index.html') // visits the local file \"index.html\" if baseUrl is null\ncy.visit('http://localhost:3000') // specify full URL if baseUrl is null or the domain is different the baseUrl\ncy.visit({\n  url: '/pages/hello.html',\n  method: 'GET',\n})\n```\n\n----------------------------------------\n\nTITLE: Intercepting Response Data with req.continue()\nDESCRIPTION: Demonstrates accessing and manipulating the real server response by using the req.continue() method with a callback function.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/integrations', (req) => {\n  // req.continue() with a callback will send the request to\n  // the destination server\n  req.continue((res) => {\n    // 'res' represents the real destination response\n    // you can manipulate 'res' before it's sent to the browser\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Elements by Text Content in Cypress\nDESCRIPTION: This code demonstrates how to use the cy.contains() command in Cypress to find elements by their text content. It shows examples of finding elements both in the entire document and within a specific selector.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Find an element in the document containing the text 'New Post'\ncy.contains('New Post')\n\n// Find an element within '.main' containing the text 'New Post'\ncy.get('.main').contains('New Post')\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Cypress Commands with TypeScript\nDESCRIPTION: Example of adding a custom command 'dataCy' with TypeScript type definitions\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/typescript-support.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// cypress/support/index.ts\nCypress.Commands.add('dataCy', (value) => {\n  return cy.get(`[data-cy=${value}]`)\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Request Interception in Cypress\nDESCRIPTION: Basic example of intercepting an API request and accessing the request object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/api', (req) => {\n  // `req` represents the intercepted HTTP request\n})\n```\n\n----------------------------------------\n\nTITLE: Mounting a React Component in Cypress\nDESCRIPTION: Demonstrates how to mount a React component in a Cypress test and make assertions on its initial state.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/react/examples.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Stepper } from './stepper'\n\nit('mounts', () => {\n  cy.mount(<Stepper />)\n  //Stepper should have initial count of 0 (default)\n  cy.get('[data-cy=counter]').should('have.text', '0')\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Image Alt Text with Standard Cypress Commands\nDESCRIPTION: Demonstrates how to explicitly check the alt text attribute of an image using Cypress assertions. This ensures that proper alternative text is available for screen readers and other assistive technologies.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/accessibility-testing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nit('adds todos', () => {\n  cy.visit('https://example.cypress.io/')\n  // explicitly check the alt text of an image\n  cy.get('img[data-cy=\"logo\"]').should('have.attr', 'alt', 'Cypress Logo')\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Tasks in Cypress Plugins\nDESCRIPTION: Real-world example showing how to register custom tasks for database operations in the setupNodeEvents function, including seeding a database and filtering/finding test data.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/overview.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\non('task', {\n  async 'db:seed'() {\n    // seed database with test data\n    const { data } = await axios.post(`${testDataApiEndpoint}/seed`)\n    return data\n  },\n\n  // fetch test data from a database (MySQL, PostgreSQL, etc...)\n  'filter:database'(queryPayload) {\n    return queryDatabase(queryPayload, (data, attrs) =>\n      _.filter(data.results, attrs)\n    )\n  },\n  'find:database'(queryPayload) {\n    return queryDatabase(queryPayload, (data, attrs) =>\n      _.find(data.results, attrs)\n    )\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: GraphQL Test Utilities Implementation in JavaScript\nDESCRIPTION: Utility functions for matching and aliasing GraphQL operations based on operation names. Includes functions to check operation names and alias both queries and mutations.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/network-requests.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Utility to match GraphQL mutation based on the operation name\nexport const hasOperationName = (req, operationName) => {\n  const { body } = req\n  return (\n    Object.prototype.hasOwnProperty.call(body, 'operationName') &&\n    body.operationName === operationName\n  )\n}\n\n// Alias query if operationName matches\nexport const aliasQuery = (req, operationName) => {\n  if (hasOperationName(req, operationName)) {\n    req.alias = `gql${operationName}Query`\n  }\n}\n\n// Alias mutation if operationName matches\nexport const aliasMutation = (req, operationName) => {\n  if (hasOperationName(req, operationName)) {\n    req.alias = `gql${operationName}Mutation`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Cypress Command with cy.session() for Amazon Cognito Authentication\nDESCRIPTION: This snippet shows how to refactor the loginByCognito command to use cy.session() for storing the logged-in user state. This approach prevents reauthentication with every test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/amazon-cognito-authentication.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// Amazon Cognito\nCypress.Commands.add(\n  'loginByCognito, cy.origin() login',\n  (username, password) => {\n    cy.session(\n      `cognito-${username}`,\n      () => {\n        return loginToCognito(username, password)\n      },\n      {\n        validate() {\n          cy.visit('/')\n          // revalidate our session to make sure we are logged in\n          cy.contains('Get Started').should('be.visible')\n        },\n      }\n    )\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Best Practice: Using beforeEach Hook for Shared Test Setup\nDESCRIPTION: Another approach to handle form testing by using beforeEach hook to set up the initial state for each test. This ensures each test starts with a clean, consistent state.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/best-practices.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('my form', () => {\n  beforeEach(() => {\n    -cy.visit('/users/new')::cy.mount(<NewUser />)-\n    cy.get('[data-testid=\"first-name\"]').type('Johnny')\n    cy.get('[data-testid=\"last-name\"]').type('Appleseed')\n  })\n\n  it('displays form validation', () => {\n    // clear out first name\n    cy.get('[data-testid=\"first-name\"]').clear()\n    cy.get('form').submit()\n    cy.get('[data-testid=\"errors\"]').should('contain', 'First name is required')\n  })\n\n  it('can submit a valid form', () => {\n    cy.get('form').submit()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Component Visibility with Cypress Commands\nDESCRIPTION: Example test that demonstrates Cypress's sequential command execution to verify an element's visibility before and after a click action. Shows how Cypress commands are executed in order with built-in waiting and retry mechanisms.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nit('hides the thing when it is clicked', () => {\n  -{cy.visit('/my/resource/path')::cy.mount(<MyComponent />)}- // 1.\n\n  cy.get('.hides-when-clicked') // 2\n    .should('be.visible') // 3\n    .click() // 4\n\n  cy.get('.hides-when-clicked') // 5\n    .should('not.be.visible') // 6\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Okta JWT Token Verification Middleware (Node.js, TypeScript)\nDESCRIPTION: This middleware function verifies the Okta JWT Bearer token in incoming Express.js API requests. If a valid Bearer token is present in the 'Authorization' header, it validates the token and assigns user information to the request; otherwise, it returns a 401 Unauthorized error. Dependencies include the OktaJwtVerifier instance and Express request/response objects. Inputs are the Bearer token from headers; outputs are authorized or unauthorized responses; errors are logged but not returned in the response, which may be a limitation.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/okta-authentication.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n\nexport const verifyOktaToken = (req, res, next) => {\n  const bearerHeader = req.headers['authorization']\n\n  if (bearerHeader) {\n    const bearer = bearerHeader.split(' ')\n    const bearerToken = bearer[1]\n\n    oktaJwtVerifier\n      .verifyAccessToken(bearerToken, 'api://default')\n      .then((jwt) => {\n        // the token is valid\n        req.user = {\n          // @ts-ignore\n          sub: jwt.sub,\n        }\n\n        return next()\n      })\n      .catch((err) => {\n        // a validation failed, inspect the error\n        console.log('error', err)\n      })\n  } else {\n    res.status(401).send({\n      error: 'Unauthorized',\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Aliasing Intercepted Routes in JavaScript\nDESCRIPTION: Shows how to define multiple `cy.intercept` rules using different RouteMatchers (glob patterns, specific paths, objects) and assign aliases using `.as()`. These aliased routes are then listed in the Cypress Command Log's 'Routes' Instrument Panel for visibility during test execution.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/accounts*').as('accountsGet')\ncy.intercept('/company', { companyId: 1 }).as('companyGet')\ncy.intercept('/teams*', [{ teamId: 2 }]).as('teamsGet')\n```\n\n----------------------------------------\n\nTITLE: Modifying Real Responses with req.continue() in Cypress\nDESCRIPTION: Shows how to intercept a real response on its way back to the client and make assertions on it using req.continue() with a callback function.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// pass the request through and make an assertion on\n// the real response\ncy.intercept('POST', '/users', (req) => {\n  req.continue((res) => {\n    expect(res.body).to.include('Peter Pan')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Testing GraphQL Query Response Data\nDESCRIPTION: Example showing how to make assertions against GraphQL query responses using cy.wait() and chai assertions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/network-requests.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { aliasQuery } from '../utils/graphql-test-utils'\n\ncontext('Tests', () => {\n  beforeEach(() => {\n    cy.intercept('POST', 'http://localhost:3000/graphql', (req) => {\n      // Queries\n      aliasQuery(req, 'Login')\n\n      // ...\n    })\n  })\n\n  it('should verify login data', () => {\n    cy.wait('@gqlLoginQuery')\n      .its('response.body.data.login')\n      .should('have.property', 'id')\n      .and('have.property', 'token')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Conditionally Handling Okta Authentication for Cypress Testing (React, TypeScript/JSX)\nDESCRIPTION: This code alternates authentication logic in AppOkta for standard app usage and Cypress end-to-end tests. When under test (window.Cypress is true), credentials are retrieved from the 'oktaCypress' localStorage item and an OKTA event is sent without using the withOktaAuth HOC; otherwise, Okta authentication proceeds as normal. The export of the component is conditionally wrapped for compatibility. Dependencies include '@okta/okta-react' and localStorage availability. This enables seamless test automation while maintaining Okta security elsewhere.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/okta-authentication.mdx#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n// initial imports ...\nimport { LoginCallback, SecureRoute, useOktaAuth, withOktaAuth } from \"@okta/okta-react\";\n\n// ...\n\nconst AppOkta: React.FC = () => {\n  const { authState, oktaAuth } = useOktaAuth();\n\n  // ...\n\n  // If under test in Cypress, get credentials from \"oktaCypress\" localstorage item and send event to our state management to log the user into the SPA\n  if (window.Cypress) {\n    useEffect(() => {\n      const okta = JSON.parse(localStorage.getItem(\"oktaCypress\")!);\n      authService.send(\"OKTA\", {\n        user: okta.user,\n        token: okta.token,\n      });\n    }, []);\n  } else {\n    useEffect(() => {\n      if (authState.isAuthenticated) {\n        oktaAuth.getUser().then((user) => {\n          authService.send(\"OKTA\", { user, token: oktaAuthState.accessToken });\n        });\n      }\n    }, [authState, oktaAuth]);\n  }\n\n  // ...\n\n  return (\n    <div className={classes.root}>\n\n      // ...\n\n      {authState.matches(\"unauthorized\") && (\n        <>\n          <Route path=\"/implicit/callback\" component={LoginCallback} />\n          <SecureRoute exact path=\"/\" />\n        </>\n      )}\n\n      // ...\n    </div>\n  );\n};\n\n// Conditional export wrapped with `withOktaAuth` if we are not under test in Cypress\nlet appOkta = window.Cypress ? AppOkta : withOktaAuth(AppOkta);\nexport default appOkta;\n```\n\n----------------------------------------\n\nTITLE: Testing Auto-complete Functionality with Cypress\nDESCRIPTION: This snippet demonstrates how to test an auto-complete field by intercepting the search request, stubbing the response, and waiting for the request before asserting on the results. It shows how to handle throttled requests effectively.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/network-requests.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/search*', [{ item: 'Book 1' }, { item: 'Book 2' }]).as(\n  'getSearch'\n)\n\n// our autocomplete field is throttled\n// meaning it only makes a request after\n// 500ms from the last keyPress\ncy.get('[data-testid=\"autocomplete\"]').type('Book')\n\n// wait for the request + response\n// thus insulating us from the\n// throttled request\ncy.wait('@getSearch')\n\ncy.get('[data-testid=\"results\"]')\n  .should('contain', 'Book 1')\n  .and('contain', 'Book 2')\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress Test Demonstrating Retry-ability\nDESCRIPTION: A simple test that creates a todo item, showing the different types of commands in Cypress: non-query commands, queries, and assertions. It demonstrates how these commands link together with retry-ability.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/retry-ability.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nit('creates an item', () => {\n  // Non-query commands only execute once.\n  cy.visit('/')\n\n  // The .focused() query and .should() assertion link together,\n  // rerunning until the currently focused element has\n  // the 'new-todo' class\n  cy.focused().should('have.class', 'new-todo')\n\n  // The queries .get() and .find()\n  // link together, forming the subject for\n  // the non-query `.type()`.\n  cy.get('.header').find('.new-todo').type('todo A{enter}')\n\n  // Two queries and an assertion chained together\n  cy.get('.todoapp').find('.todo-list li').should('have.length', 1)\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Focus in Cypress\nDESCRIPTION: Shows how to assert that an element has focus after a button click using the 'have.focus' or 'be.focused' assertion.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#btn-focuses-input').click()\ncy.get('#input-receives-focus').should('have.focus') // equivalent to should('be.focused')\n```\n\n----------------------------------------\n\nTITLE: Standard Assertion Types in Cypress\nDESCRIPTION: Common assertion patterns including length checking, regex matching, string containment, and property verification. Each assertion can be used with both .should() and expect() syntax.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/assertions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n.should('have.lengthOf', 4)\nexpect('test').to.have.lengthOf(4)\n\n.should('to.match', /^test/)\nexpect('testing').to.match(/^test/)\n\n.should('have.string', 'test')\nexpect('testing').to.have.string('test')\n```\n\n----------------------------------------\n\nTITLE: Aliasing Intercepted Routes in Cypress\nDESCRIPTION: Demonstrates how to use .as() to create aliases for intercepted routes, which can be used later for waiting on requests or making assertions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('GET', '/users').as('getAllUsers')\ncy.intercept('POST', '/users').as('createUser')\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('POST', '/graphql', (req) => {\n  if (req.body.hasOwnProperty('query') && req.body.query.includes('mutation')) {\n    req.alias = 'gqlMutation'\n  }\n})\n\n// assert that a matching request has been made\ncy.wait('@gqlMutation')\n```\n\n----------------------------------------\n\nTITLE: Forcing Cypress Action Commands\nDESCRIPTION: Shows how to bypass Cypress's actionability checks by using the force: true option. This is useful when traditional user interaction patterns are too complex to replicate or unnecessary for testing purposes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/interacting-with-elements.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// force the click and all subsequent events\n// to fire even if this element isn't considered 'actionable'\ncy.get('button').click({ force: true })\n```\n\n----------------------------------------\n\nTITLE: Best Practice: Using Root Level beforeEach Hook for State Reset\nDESCRIPTION: The recommended approach for resetting application state using a root level beforeEach hook in Cypress support files. This ensures that state is reset before each test runs, even if the browser is refreshed.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/best-practices.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// cypress/support/e2e.js or cypress/support/component.js\n\nbeforeEach(() => {\n  // now this runs prior to every test\n  // across all files no matter what\n  cy.resetDb()\n})\n```\n\n----------------------------------------\n\nTITLE: Intercepting and Aliasing Network Requests in Cypress\nDESCRIPTION: This snippet shows how to intercept a network request, alias it, and then wait for and assert on the intercepted request in a Cypress test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/variables-and-aliases.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('POST', '/users', { id: 123 }).as('postUser')\n\ncy.get('form').submit()\n\ncy.wait('@postUser').then(({ request }) => {\n  expect(request.body).to.have.property('name', 'Brian')\n})\n\ncy.contains('Successfully created user: Brian')\n```\n\n----------------------------------------\n\nTITLE: Typing into a Contenteditable Element in Cypress\nDESCRIPTION: Demonstrates typing into a contenteditable element with the default delay between keypresses to simulate user typing behavior.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/type.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[contenteditable]').type('some text!')\n```\n\n----------------------------------------\n\nTITLE: Testing Default Counter Value in React Stepper\nDESCRIPTION: Test verifying the default counter value of 0 in a React Stepper component using cy.get() and should assertions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/get-started.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nit('stepper should default to 0', () => {\n  cy.mount(<Stepper />)\n  cy.get('span').should('have.text', '0')\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamically Changing Cypress Configuration within a Test (JavaScript)\nDESCRIPTION: Demonstrates using the `Cypress.config()` API within a test file to modify a writeable configuration option like `pageLoadTimeout`. The change persists only for the remaining duration of the current spec file's execution.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/configuration.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.config('pageLoadTimeout', 100000)\n\nCypress.config('pageLoadTimeout') // => 100000\n```\n\n----------------------------------------\n\nTITLE: Combining UI and API Testing in Cypress\nDESCRIPTION: Shows how to combine UI interactions with API testing in a single test. The test adds todos through the UI and then verifies the server state using an API request.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('adds todos', () => {\n  // drive the application through its UI\n  cy.visit('/')\n  cy.get('.new-todo')\n    .type('write E2E tests{enter}')\n    .type('add API tests as needed{enter}')\n  // now confirm the server has 2 todo items\n  cy.request('/todos')\n    .its('body')\n    .should('have.length', 2)\n    .and((items) => {\n      // confirm the returned items\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Accessible Name of Button using Testing Library ByRole\nDESCRIPTION: Shows how to click a button with the role 'button' and accessible name 'Submit' using Testing Library's findByRole method in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/accessibility-testing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.findByRole('button', { name: 'Submit' }).click()\n```\n\n----------------------------------------\n\nTITLE: Importing Modules in Cypress Tests\nDESCRIPTION: Demonstrates how to import and use modules in Cypress tests, including both npm and local modules.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/error-messages.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport _ from 'lodash'\nimport util from './util'\n\nit('uses modules', () => {\n  expect(_.kebabCase('FooBar')).to.equal('foo-bar')\n  expect(util.secretCode()).to.equal('1-2-3-4')\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Angular Components via componentProperties\nDESCRIPTION: Shows how to provide inputs and outputs to an Angular component during testing by setting componentProperties in the mount options. The example passes a count value and an EventEmitter to the component.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/examples.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncy.mount(StepperComponent, {\n  componentProperties: {\n    count: 100,\n    change: new EventEmitter(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Form Handling with within Command\nDESCRIPTION: Example showing how to interact with form elements using .within() to scope commands to a specific form.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/within.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <input name=\"email\" type=\"email\" />\n  <input name=\"password\" type=\"password\" />\n  <button type=\"submit\">Login</button>\n</form>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('form').within(($form) => {\n  // you have access to the found form via\n  // the jQuery object $form if you need it\n\n  // cy.get() will only search for elements within form,\n  // not within the entire document\n  cy.get('input[name=\"email\"]').type('john.doe@email.com')\n  cy.get('input[name=\"password\"]').type('password')\n  cy.root().submit()\n})\n```\n\n----------------------------------------\n\nTITLE: GitLab CI Parallel Execution with Cypress Cloud\nDESCRIPTION: Configures parallel execution of Cypress tests using GitLab CI and Cypress Cloud. This setup enables running tests across multiple machines for faster results.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/gitlab-ci.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  - build\n  - test\n\n## Set environment variables for folders in \"cache\" job settings\n## for npm modules and Cypress binary\nvariables:\n  npm_config_cache: '$CI_PROJECT_DIR/.npm'\n  CYPRESS_CACHE_FOLDER: '$CI_PROJECT_DIR/cache/Cypress'\n\ncache:\n  key: ${CI_COMMIT_REF_SLUG}\n  paths:\n    - .cache/*\n    - cache/Cypress\n    - node_modules\n    - build\n\n## Install npm dependencies and Cypress\ninstall:\n  image: cypress/browsers:22.12.0\n  stage: build\n  script:\n    - npm ci\n\nui-chrome-tests:\n  image: cypress/browsers:22.12.0\n  stage: test\n  parallel: 5\n  script:\n    # install dependencies\n    - npm ci\n    # start the server in the background\n    - npm start &\n    # run Cypress tests in parallel\n    - npx cypress run --record --parallel --browser chrome --group UI-Chrome\n```\n\n----------------------------------------\n\nTITLE: Using debugger with .then() in Cypress tests\nDESCRIPTION: Proper implementation of debugger in Cypress tests using .then() to ensure the debugger is executed at the right time after commands have completed execution.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/debugging.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('let me debug when the after the command executes', () => {\n  cy.visit('/my/page/path')\n\n  cy.get('[data-testid=\"selector-in-question\"]').then(($selectedElement) => {\n    // Debugger is hit after the cy.visit\n    // and cy.get commands have completed\n    debugger\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Best Practice: Wait for Route Alias\nDESCRIPTION: Improved approach using route aliasing to explicitly wait for network requests to complete\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/best-practices.mdx#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('GET', '/users', [{ name: 'Maggy' }, { name: 'Joan' }]).as('getUsers')\ncy.get('[data-testid=\"fetch-users\"]').click()\ncy.wait('@getUsers') // <--- wait explicitly for this route to finish\ncy.get('table tr').should('have.length', 2)\n```\n\n----------------------------------------\n\nTITLE: Implementing Login with Session Caching in Cypress\nDESCRIPTION: This snippet demonstrates how to use cy.session() to cache the browser context for improved login performance. It modifies the custom login command to use session caching, reducing the need for repeated login flows across tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/end-to-end-testing/testing-your-app.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add('login', (username, password) => {\n  cy.session(\n    username,\n    () => {\n      cy.visit('/login')\n      cy.get('input[name=username]').type(username)\n      cy.get('input[name=password]').type(`${password}{enter}`, { log: false })\n      cy.url().should('include', '/dashboard')\n      cy.get('h1').should('contain', username)\n    },\n    {\n      validate: () => {\n        cy.getCookie('your-session-cookie').should('exist')\n      },\n    }\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of cy.session() Command\nDESCRIPTION: Shows proper implementation of the session command for caching login sessions, both when logging in via page visits and via API requests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/session.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Caching session when logging in via page visit\ncy.session(name, () => {\n  cy.visit('/login')\n  cy.get('[data-test=name]').type(name)\n  cy.get('[data-test=password]').type('s3cr3t')\n  cy.get('form').contains('Log In').click()\n  cy.url().should('contain', '/login-successful')\n})\n\n// Caching session when logging in via API\ncy.session(username, () => {\n  cy.request({\n    method: 'POST',\n    url: '/login',\n    body: { username, password },\n  }).then(({ body }) => {\n    window.localStorage.setItem('authToken', body.token)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Cross-Origin Test with cy.origin() in Cypress JavaScript\nDESCRIPTION: This snippet shows a single, consolidated Cypress test utilizing the cy.origin() command to securely perform user and content actions across multiple domains. It encapsulates login and data editing in respective cy.origin() callbacks, then validates the result. This approach adheres to test isolation principles by keeping cross-origin actions within one test. Dependencies include Cypress v12.0+ for cy.origin() support.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('securely edits content', () => {\\n  cy.origin('cypress.io', () => {\\n    cy.visit('https://example.cypress.io')\\n    cy.get('input#password').type('Password123!')\\n    cy.get('button#submit').click()\\n  })\\n\\n  cy.origin('cypress-dx.com', () => {\\n    cy.url().should('contain', 'cms')\\n    cy.get('#current-user').contains('logged in')\\n    cy.get('button#edit-1').click()\\n    cy.get('input#title').type('Updated title')\\n    cy.get('button#submit').click()\\n    cy.get('.toast').contains('Changes saved!')\\n  })\\n\\n  cy.visit('/items/1')\\n  cy.get('h1').contains('Updated title')\\n})\n```\n\n----------------------------------------\n\nTITLE: Using Social Login Command in Cypress Tests\nDESCRIPTION: Example test implementation showing how to use the loginToAuth0ViaSocial command in a test suite. Sets up the test environment using beforeEach hook and includes a basic validation test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/social-authentication.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Social Logins Demo', () => {\n  beforeEach(() => {\n    // can provide facebook, google, or microsoft here\n    cy.loginToAuth0ViaSocial('facebook')\n    cy.visit('http://localhost:3000/')\n  })\n\n  it('navigates to the app after navigation and displays the sample project header', () => {\n    cy.get('h1').should('contain', 'React.js Sample Project')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Database Connection Configuration and Query Function\nDESCRIPTION: Implementation of database connection management and query execution in the plugins file. Includes connection configuration for multiple databases and a Promise-based query function.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/task.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport mysql from 'mysql'\n// the connection strings for different databases could\n// come from the Cypress configuration or from environment variables\nconst connections = {\n  stagingA: {\n    host: 'staging.my.co',\n    user: 'test',\n    password: '***',\n    database: 'users',\n  },\n  stagingB: {\n    host: 'staging-b.my.co',\n    user: 'test',\n    password: '***',\n    database: 'users',\n  },\n}\n\n// querying the database from Node\nfunction queryDB(connectionInfo, query) {\n  const connection = mysql.createConnection(connectionInfo)\n\n  connection.connect()\n\n  return new Promise((resolve, reject) => {\n    connection.query(query, (error, results) => {\n      if (error) {\n        return reject(error)\n      }\n\n      connection.end()\n\n      return resolve(results)\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global Hooks in Cypress Support File\nDESCRIPTION: Example of defining a beforeEach hook in a Cypress support file that runs before every test in every spec file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/writing-and-organizing-tests.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  cy.log('I run before every test in every spec file!!!!!!')\n})\n```\n\n----------------------------------------\n\nTITLE: Stubbing Responses in Cypress Intercepts\nDESCRIPTION: Shows how to use req.reply() to stub responses with custom status codes, headers, bodies, and other properties without hitting a real backend.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// stub out the response without interacting with a real back-end\ncy.intercept('POST', '/users', (req) => {\n  req.reply({\n    headers: {\n      Set-Cookie: 'newUserName=Peter Pan;'\n    },\n    statusCode: 201,\n    body: {\n      name: 'Peter Pan'\n    },\n    delay: 10, // milliseconds\n    throttleKbps: 1000, // to simulate a 3G connection\n    forceNetworkError: false // default\n  })\n})\n\n// stub out a response body using a fixture\ncy.intercept('GET', '/users', (req) => {\n  req.reply({\n    statusCode: 200, // default\n    fixture: 'users.json'\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Autocomplete Functionality with Tab Key\nDESCRIPTION: Example test that demonstrates how to use cy.press() to verify that pressing Tab triggers autocomplete functionality in a search input.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/press.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nit('autocompletes search input when pressing Tab', () => {\n  cy.get('[data-cy=\"search\"]').type('cy')\n  cy.press(Cypress.Keyboard.Keys.TAB)\n  cy.get('[data-cy=\"search\"]').should('have.value', 'cypress')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Dual Command in Cypress\nDESCRIPTION: Demonstrates how to create a dual command that can work both with and without a subject. The command 'dismiss' can be called directly or chained from another command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add('dismiss', {\n  prevSubject: 'optional'\n}, (subject, arg1, arg2) => {\n  // subject may be defined or undefined\n  // so you likely want to branch the logic\n  // based off of that\n\n  if (subject) {\n    // wrap the existing subject\n    // and do something with it\n    cy.wrap(subject)\n    ...\n  } else {\n    ...\n  }\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.dismiss() // no subject\ncy.get('#dialog').dismiss() // with subject\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Commands for Element Selection in TypeScript\nDESCRIPTION: Defines custom Cypress commands 'getBySel' and 'getBySelLike' to select elements using data-test attributes. These commands simplify element selection in tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/best-practices.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// cypress/support/commands.ts\n\nCypress.Commands.add('getBySel', (selector, ...args) => {\n  return cy.get(`[data-test=${selector}]`, ...args)\n})\n\nCypress.Commands.add('getBySelLike', (selector, ...args) => {\n  return cy.get(`[data-test*=${selector}]`, ...args)\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress Test with Simple Assertion\nDESCRIPTION: A basic test structure using Cypress with a simple boolean assertion. Demonstrates the use of describe and it blocks with expect assertion.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/end-to-end-testing/writing-your-first-end-to-end-test.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('My First Test', () => {\n  it('Does not do much!', () => {\n    expect(true).to.equal(true)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Submitting an HTML form using cy.request() in Cypress\nDESCRIPTION: This snippet demonstrates how to use cy.request() to submit form data directly without visiting the login page. It uses the form option to properly encode the request body and sets the appropriate content type header.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/request.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncy.request({\n  method: 'POST',\n  url: '/login_with_form', // baseUrl is prepend to URL\n  form: true, // indicates the body should be form urlencoded and sets Content-Type: application/x-www-form-urlencoded headers\n  body: {\n    username: 'jane.lane',\n    password: 'password123',\n  },\n})\n\n// to prove we have a session\ncy.getCookie('cypress-session-cookie').should('exist')\n```\n\n----------------------------------------\n\nTITLE: Cypress Base URL Configuration\nDESCRIPTION: Configuration example showing how to set a global baseUrl in Cypress config file\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/best-practices.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  e2e: {\n    baseUrl: 'http://localhost:8484',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Button Accessibility Test in Cypress\nDESCRIPTION: This snippet demonstrates how to write a custom Cypress test that verifies proper accessible naming for buttons. It checks both the aria-label attribute and visible text content, ensuring the button meets accessibility requirements specific to the application context.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/accessibility/guides/maximize-coverage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Button Accessibility Test', () => {\n  it('should have the correct accessible name for the button', () => {\n    // Visit the page containing the button\n    cy.visit('/your-page-url')\n\n    // Select the button by its identifier\n    cy.get('[data-test-id=\"submit-button\"]')\n      // Ensure the button has an accessible name\n      .should('have.attr', 'aria-label', 'Submit Form')\n      // Optionally, assert the button contains the visible text\n      .and('contain', 'Submit')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Okta Token Middleware to Express App (Node.js, TypeScript)\nDESCRIPTION: This snippet conditionally applies the verifyOktaToken middleware globally to an Express app if the REACT_APP_OKTA environment variable is set. It imports the middleware and ensures all routes are protected when Okta authentication is enabled. Dependencies include Express and prior definition of verifyOktaToken. This pattern centralizes authentication enforcement for all backend API routes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/okta-authentication.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// initial imports ...\nimport { verifyOktaToken } from './helpers'\n\n// ...\n\nif (process.env.REACT_APP_OKTA) {\n  app.use(verifyOktaToken)\n}\n\n// routes ...\n```\n\n----------------------------------------\n\nTITLE: Implementing UI-based Login Custom Command with Session\nDESCRIPTION: Creates a login command that uses the Cypress UI to log in and maintains the session for subsequent tests, including validation of the authentication cookie.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add('loginViaUi', (user) => {\n  cy.session(\n    user,\n    () => {\n      cy.visit('/login')\n      cy.get('input[name=email]').type(user.email)\n      cy.get('input[name=password]').type(user.password)\n      cy.click('button#login')\n      cy.get('h1').contains(`Welcome back ${user.name}!`)\n    },\n    {\n      validate: () => {\n        cy.getCookie('auth_key').should('exist')\n      },\n    }\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Fixed/Sticky Elements in Full Page Cypress Screenshots\nDESCRIPTION: Demonstrates a technique to prevent fixed or sticky elements from appearing multiple times in full page screenshots by temporarily changing their position.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/screenshot.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.sticky-header').invoke('css', 'position', 'absolute')\ncy.screenshot()\ncy.get('.sticky-header').invoke('css', 'position', null)\n```\n\n----------------------------------------\n\nTITLE: URL Matching Examples with cy.intercept\nDESCRIPTION: Examples demonstrating different ways to match URLs in cy.intercept using exact URLs, glob patterns, and regular expressions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// match any request that exactly matches the URL\ncy.intercept('https://prod.cypress.io/users')\n\n// match any request that satisfies a glob pattern\ncy.intercept('/users?_limit=*')\n\n// match any request that satisfies a regex pattern\ncy.intercept(/\\/users\\?_limit=(3|5)$/)\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Cognito Authentication in React with Amplify v6\nDESCRIPTION: This snippet demonstrates how to configure AWS Amplify v6 and use a `useEffect` hook within a React component (`AppCognito.tsx`) to manage AWS Cognito authentication. It attempts to fetch the current authentication session; if successful, it extracts the access token and user details, sending them to an authentication state machine (`authService`). If no session exists, it redirects the user to the Cognito Hosted UI for login using `signInWithRedirect`. The component returns `null` while waiting for redirection or session validation. Dependencies include React, `aws-amplify`, and a local `aws-exports` configuration file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/amazon-cognito-authentication.mdx#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"src/containers/AppCognito.tsx\"\n// amplify v6\n// initial imports ...\nimport { Amplify, ResourcesConfig } from \"aws-amplify\";\nimport { fetchAuthSession, signInWithRedirect, signOut } from \"aws-amplify/auth\";\n\nimport awsConfig from \"../aws-exports\";\n\nAmplify.configure(awsConfig as ResourcesConfig);\n\n// ...\n\nconst AppCognito: React.FC = () => {\n\n  // ...\n\n  useEffect(() => {\n    if (!isLoggedIn) {\n      fetchAuthSession().then((authSession) => {\n        if (authSession && authSession.tokens && authSession.tokens.accessToken) {\n          const { tokens, userSub } = authSession;\n          authService.send(\"COGNITO\", {\n            accessTokenJwtString: tokens!.accessToken.toString(),\n            userSub: userSub!,\n            email: tokens!.idToken!.payload.email,\n          });\n        } else {\n          void signInWithRedirect();\n        }\n      });\n    }\n  }, [isLoggedIn]);\n\n  // ...\n\n  if (!isLoggedIn) {\n    return null; // redirection will occur soon anyway\n  }\n};\n\nexport default AppCognito;\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Asynchronous Nature of Cypress Commands\nDESCRIPTION: This test example illustrates that Cypress commands are asynchronous and do not execute immediately when invoked, but rather queue themselves to be run later after the test function has finished executing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nit('hides the thing when it is clicked', () => {\n  cy.mount(<MyComponent />) // Nothing happens yet\n\n  cy.get(\".hides-when-clicked\") // Still nothing happening\n    .should(\"be.visible\") // Still absolutely nothing\n    .click() // Nope, nothing\n\n  cy.get('.hides-when-clicked') // Still nothing happening\n    .should('not.be.visible') // Definitely nothing happening yet\n})\n\n// Ok, the test function has finished executing...\n// We've queued all of these commands and now\n// Cypress will begin running them in order!\n```\n\n----------------------------------------\n\nTITLE: Using Event Handlers with req.on() in Cypress\nDESCRIPTION: Demonstrates attaching event handlers to intercept request/response lifecycle events like 'before:response' and 'response'.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('GET', '/users', (req) => {\n  req.on('before:response', (res) => {\n    // do something when the `before:response` event is triggered\n  })\n})\ncy.intercept('POST', '/users', (req) => {\n  req.on('response', (res) => {\n    // do something when the `response` event is triggered\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Intercepting URLs with Glob Patterns using cy.intercept in JavaScript\nDESCRIPTION: Illustrates using `cy.intercept` with glob patterns to match URLs based on patterns rather than exact strings. This allows matching across different hosts or with variable query parameters, providing more flexibility than exact URL matching.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_41\n\nLANGUAGE: js\nCODE:\n```\ncy.intercept('/users')\n// matches all of these:\n//   https://prod.cypress.io/users\n//   https://staging.cypress.io/users\n//   http://localhost/users\n\ncy.intercept('/users?_limit=+(3|5)')\n// matches all of these:\n//   https://prod.cypress.io/users?_limit=3\n//   http://localhost/users?_limit=5\n```\n\n----------------------------------------\n\nTITLE: Using Aliases with Fixtures in Cypress\nDESCRIPTION: This snippet shows how to use aliases with fixtures in Cypress tests, allowing you to load fixture data in a beforeEach hook and use it in individual tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/variables-and-aliases.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  // alias the users fixtures\n  cy.fixture('users.json').as('users')\n})\n\nit('utilize users in some way', function () {\n  // access the users property\n  const user = this.users[0]\n\n  // make sure the header contains the first\n  // user's name\n  cy.get('header').should('contain', user.name)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing API-based Login Custom Command\nDESCRIPTION: Creates a custom command that logs in programmatically via API requests instead of UI interactions, useful for setting up test state efficiently.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add('loginViaApi', (userType, options = {}) => {\n  // this is an example of skipping your UI and logging in programmatically\n\n  // setup some basic types\n  // and user properties\n  const types = {\n    admin: {\n      name: 'Jane Lane',\n      admin: true,\n    },\n    user: {\n      name: 'Jim Bob',\n      admin: false,\n    },\n  }\n\n  // grab the user\n  const user = types[userType]\n\n  // create the user first in the DB\n  cy.request({\n    url: '/seed/users', // assuming you've exposed a seeds route\n    method: 'POST',\n    body: user,\n  })\n    .its('body')\n    .then((body) => {\n      // assuming the server sends back the user details\n      // including a randomly generated password\n      //\n      // we can now login as this newly created user\n      cy.request({\n        url: '/login',\n        method: 'POST',\n        body: {\n          email: body.email,\n          password: body.password,\n        },\n      })\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Yielding DOM Element after Assertion in Cypress\nDESCRIPTION: Demonstrates that after a 'should' assertion, the DOM element is yielded and available in the callback function.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('option:first')\n  .should('be.selected')\n  .then(($option) => {\n    // $option is yielded\n  })\n```\n\n----------------------------------------\n\nTITLE: Using cy.get() with Aliases in Cypress\nDESCRIPTION: Shows examples of using cy.get() with aliases to retrieve previously defined elements or fixtures.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/get.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('ul#todos').as('todos')\n\n//...hack hack hack...\n\n//later retrieve the todos\ncy.get('@todos')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  cy.get('button[type=submit]').as('submitBtn')\n})\n\nit('disables on click', () => {\n  cy.get('@submitBtn').should('be.disabled')\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  cy.fixture('users.json').as('users')\n})\n\nit('disables on click', () => {\n  // access the array of users\n  cy.get('@users').then((users) => {\n    // get the first user\n    const user = users[0]\n\n    cy.get('header').contains(user.name)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Visual Testing with cypress-plugin-snapshots\nDESCRIPTION: This example demonstrates how to use the cypress-plugin-snapshots for visual testing. It completes a todo item and then captures a screenshot to compare against a baseline image, with a specified threshold for pixel differences.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/visual-testing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('completes todo', () => {\n  cy.visit('/')\n  cy.get('.new-todo').type('write tests{enter}')\n  cy.contains('.todo-list li', 'write tests').find('.toggle').check()\n\n  cy.contains('.todo-list li', 'write tests').should('have.class', 'completed')\n\n  // run 'npm install cypress-plugin-snapshots --save'\n  // capture the element screenshot and\n  // compare to the baseline image\n  cy.get('.todoapp').toMatchImageSnapshot({\n    imageConfig: {\n      threshold: 0.001,\n    },\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Todo List Assertions with Cypress - JavaScript\nDESCRIPTION: These snippets demonstrate how to test adding items to a Todo list by asserting on the list's length before and after adding a new item. The first uses a positive assertion to check for a specific count, while the second uses a negative assertion to check the count is not equal to the previous value. Both approaches require existing data-testid attributes and the ability to simulate input events, highlighting possible pitfalls of negative assertions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/assertions.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[data-testid=\"todos\"]').should('have.length', 2)\ncy.get('[data-testid=\"new-todo\"]').type('Write tests{enter}')\n\n// using a positive assertion to check the\n// exact number of items\ncy.get('[data-testid=\"todos\"]').should('have.length', 3)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[data-testid=\"todos\"]').should('have.length', 2)\ncy.get('[data-testid=\"new-todo\"]').type('Write tests{enter}')\n\n// using negative assertion to check it's\n// not a number of items\ncy.get('[data-testid=\"todos\"]').should('not.have.length', 2)\n```\n\n----------------------------------------\n\nTITLE: Performing API Testing with Cypress\nDESCRIPTION: This code snippet shows how to use Cypress for API testing. It sends a POST request to add a todo item and then verifies the response body contains the expected data.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/get-started/why-cypress.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nit('adds a todo', () => {\n  cy.request('POST', '/todos', { title: 'Write API Tests' })\n    .its('body')\n    .should('contain', { title: 'Write API Tests' })\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing a Method with a Stub in Cypress\nDESCRIPTION: Shows how to replace an object's method with a stub in a single operation and verify it was called.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/stub.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// assume App.start calls util.addListeners\ncy.stub(util, 'addListeners')\n\nApp.start()\nexpect(util.addListeners).to.be.called\n```\n\n----------------------------------------\n\nTITLE: Chaining debug() after click() in Cypress Tests\nDESCRIPTION: Shows how to use debug() after performing a click action, which will log the current subject for debugging purposes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/debug.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.ls-btn').click({ force: true }).debug()\n```\n\n----------------------------------------\n\nTITLE: Command Chain Example in Cypress\nDESCRIPTION: A code snippet showing a chain of commands in Cypress including queries and assertions. This demonstrates how commands are linked together for retry-ability.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/retry-ability.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.todoapp') // query\n  .find('.todo-list li') // query\n  .should('have.length', 1) // assertion\n```\n\n----------------------------------------\n\nTITLE: Saving and Retrieving Variables Across Non Same-Origin URL Visits in Cypress\nDESCRIPTION: Demonstrates how to use cy.task() to save and retrieve variables when visiting non same-origin URLs, which would otherwise wipe the state of local variables.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/task.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Href visit', () => {\n  it('captures href', () => {\n    cy.visit('https://example.cypress.io')\n    cy.get('a')\n      .invoke('attr', 'href')\n      .then((href) => {\n        cy.task('setHref', href)\n      })\n  })\n\n  it('visit href', () => {\n    cy.task('getHref').then((href) => {\n      cy.visit(href)\n    })\n  })\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlet href: string\n\non('task', {\n  setHref: (val) => {\n    return (href = val)\n  },\n  getHref: () => {\n    return href\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic GitLab CI Setup for Cypress Tests\nDESCRIPTION: Configures a basic GitLab CI job to run Cypress tests using Node.js. It installs dependencies, starts the server, and runs Cypress tests in Electron browser.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/gitlab-ci.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  - test\n\ntest:\n  image: node:latest\n  stage: test\n  script:\n    # install dependencies\n    - npm ci\n    # start the server in the background\n    - npm start &\n    # run Cypress tests\n    - npm run e2e\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress visit Command Syntax\nDESCRIPTION: Demonstrates the basic syntax patterns for the cy.visit() command, showing the different parameter combinations available.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit(url)\ncy.visit(url, options)\ncy.visit(options)\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Cypress.ensure Methods in Custom Query for Element Verification\nDESCRIPTION: Demonstrates using multiple Cypress.ensure methods in a custom query to verify various conditions of an element, such as visibility, not being disabled, and not being readonly.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/ensure.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst queryName = 'verifyElementActionable'\n\nCypress.Commands.addQuery(queryName, function (...args) {\n  return (subject) => {\n    // Verify that the subject fulfills a variety of conditions\n    Cypress.ensure.isElement(subject, queryName, cy)\n    Cypress.ensure.isVisible(subject, queryName, cy)\n    Cypress.ensure.isNotDisabled(subject, queryName, cy)\n    Cypress.ensure.isNotReadonly(subject, queryName, cy)\n\n    return subject\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing cy.mount() Command for React\nDESCRIPTION: Example of creating a custom cy.mount() command for React components using the Cypress.Commands.add() method. This allows wrapping components in providers and making the mount command globally available.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/mount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount } from 'cypress/react'\n\nCypress.Commands.add('mount', (component, options) => {\n  // Wrap any parent components needed\n  // ie: return mount(<MyProvider>{component}</MyProvider>, options)\n  return mount(component, options)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up GraphQL Request Interception in Cypress Tests\nDESCRIPTION: Example of how to use the utility functions to intercept and alias multiple GraphQL queries and mutations in a Cypress test's beforeEach hook.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/network-requests.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { aliasQuery, aliasMutation } from '../utils/graphql-test-utils'\n\ncontext('Tests', () => {\n  beforeEach(() => {\n    cy.intercept('POST', 'http://localhost:3000/graphql', (req) => {\n      // Queries\n      aliasQuery(req, 'GetLaunchList')\n      aliasQuery(req, 'LaunchDetails')\n      aliasQuery(req, 'GetMyTrips')\n\n      // Mutations\n      aliasMutation(req, 'Login')\n      aliasMutation(req, 'BookTrips')\n    })\n  })\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting on Response Data in Cypress\nDESCRIPTION: Shows how to make assertions on the response body from an intercepted request using req.continue() and expect statements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/projects/2', (req) => {\n  req.continue((res) => {\n    expect(res.body).to.include('My Project')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Angular Event Emitters with Template Syntax\nDESCRIPTION: Demonstrates how to test event emitters when using the template syntax for mounting components. This example creates a spy for the onClick event emitter and verifies it's called when the button is clicked.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/examples.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncy.mount('<app-button (click)=\"onClick.emit($event)\">Click me</app-button>', {\n  declarations: [ButtonComponent]\n  componentProperties: {\n    onClick: createOutputSpy('onClickSpy'),\n  },\n})\ncy.get('button').click();\ncy.get('@onClickSpy').should('have.been.called');\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command Syntax in Cypress\nDESCRIPTION: Shows the basic syntax for adding and overwriting commands in Cypress using the Cypress.Commands API.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add(name, callbackFn)\nCypress.Commands.add(name, options, callbackFn)\nCypress.Commands.addAll(callbackObj)\nCypress.Commands.addAll(options, callbackObj)\nCypress.Commands.overwrite(name, callbackFn)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress Test Suite for Firefox with Custom Settings\nDESCRIPTION: This snippet shows how to configure a Cypress test suite to run only in Firefox, with custom viewport settings and environment variables. It demonstrates overwriting viewport resolution and merging environment variables.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/writing-and-organizing-tests.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\n  'When in Firefox',\n  {\n    browser: 'firefox',\n    viewportWidth: 1024,\n    viewportHeight: 700,\n    env: {\n      DEMO: true,\n      API: 'http://localhost:9000',\n    },\n  },\n  () => {\n    it('Sets the expected viewport and API URL', () => {\n      expect(cy.config('viewportWidth')).to.equal(1024)\n      expect(cy.config('viewportHeight')).to.equal(700)\n      expect(cy.env('API')).to.equal('http://localhost:9000')\n    })\n\n    it(\n      'Uses the closest API environment variable',\n      {\n        env: {\n          API: 'http://localhost:3003',\n        },\n      },\n      () => {\n        expect(cy.env('API')).to.equal('http://localhost:3003')\n        // other environment variables remain unchanged\n        expect(cy.env('DEMO')).to.be.true\n      }\n    )\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using Lodash _.chain with Cypress API Request in JavaScript\nDESCRIPTION: Shows how to use Lodash's _.chain method along with _.map, _.take, and _.value to process data from a Cypress API request. It demonstrates chaining Lodash methods for data manipulation.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/lodash.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy\n  // use the _.chain, _.map, _.take, and _.value functions\n  .request('http://jsonplaceholder.typicode.com/users')\n  .then((response) => {\n    const ids = Cypress._.chain(response.body).map('id').take(3).value()\n\n    expect(ids).to.deep.eq([1, 2, 3])\n  })\n```\n\n----------------------------------------\n\nTITLE: Basic Session Command Syntax in Cypress\nDESCRIPTION: Demonstrates the basic syntax options for the cy.session() command, showing how to provide an identifier and setup function, with optional configuration parameters.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/session.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.session(id, setup)\ncy.session(id, setup, options)\n```\n\n----------------------------------------\n\nTITLE: Advanced Assertions on Intercepted Requests in Cypress\nDESCRIPTION: This example showcases how to make detailed assertions on the intercepted request object, including checking the URL, request body, and response headers. It demonstrates the use of cy.wait() and cy.get() with aliases for accessing the interception object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/network-requests.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// spy on POST requests to /users endpoint\ncy.intercept('POST', '/users').as('new-user')\n\n// trigger network calls by manipulating web app's\n// user interface, then\ncy.wait('@new-user').should('have.property', 'response.statusCode', 201)\n\n// we can grab the completed interception object\n// again to run more assertions using cy.get(<alias>)\ncy.get('@new-user') // yields the same interception object\n  .its('request.body')\n  .should(\n    'deep.equal',\n    JSON.stringify({\n      id: '101',\n      firstName: 'Joe',\n      lastName: 'Black',\n    })\n  )\n\n// and we can place multiple assertions in a\n// single \"should\" callback\ncy.get('@new-user').should(({ request, response }) => {\n  expect(request.url).to.match(/\\/users$/)\n  expect(request.method).to.equal('POST')\n  // it is a good practice to add assertion messages\n  // as the 2nd argument to expect()\n  expect(response.headers, 'response headers').to.include({\n    'cache-control': 'no-cache',\n    expires: '-1',\n    'content-type': 'application/json; charset=utf-8',\n    location: '<domain>/users/101',\n  })\n})\n\n// Tip: you can inspect the full request cycle object by logging it to the\n// console\ncy.wait('@new-user').then(console.log)\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of Cypress .siblings() Command\nDESCRIPTION: Examples showing the proper way to use the .siblings() command in Cypress, including getting all siblings and filtering siblings by a selector.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/siblings.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('td').siblings() // Yield all td's siblings\ncy.get('li').siblings('.active') // Yield all li's siblings with class '.active'\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Parent Command to Click a Link by Text\nDESCRIPTION: Creates a custom parent command that finds and clicks a link containing specific text, streamlining the process of interacting with text-based links.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add('clickLink', (label) => {\n  cy.get('a').contains(label).click()\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Sessions with Cypress\nDESCRIPTION: Examples of validate functions used to ensure sessions are correctly established in Cypress. These validate functions attempt to verify a user is logged in by visiting protected pages, making API requests, or running commands that would fail for unauthenticated users.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/session.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Attempt to visit a page that only a logged-in user can see\nfunction validate() {\n  cy.visit('/private')\n}\n\n// Make an API request that returns a 200 only when logged in\nfunction validate() {\n  cy.request('/api/user').its('status').should('eq', 200)\n}\n\n// Run any Cypress command that fails if the user is not logged in\nfunction validate() {\n  cy.visit('/account', { failOnStatusCode: false })\n  cy.url().should('match', /^/account/)\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of Cypress 'should' Command\nDESCRIPTION: Demonstrates the correct way to use the 'should' command for assertions in Cypress, including element emptiness, visibility and property checking.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.error').should('be.empty') // Assert that '.error' is empty\ncy.contains('Login').should('be.visible') // Assert that el is visible\ncy.wrap({ foo: 'bar' }).its('foo').should('eq', 'bar') // Assert the 'foo' property equals 'bar'\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching in Cypress Intercept\nDESCRIPTION: Shows how to use glob matching and regular expressions with cy.intercept() to match specific HTTP methods and URL patterns.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// match updates to the `/users` endpoint using glob matching\ncy.intercept({\n  method: '+(PUT|PATCH)',\n  url: '**/users/*',\n})\n// matches:\n//   PUT /users/1\n//   PATCH /users/1\n//\n// doesn't match:\n//   GET /users\n//   GET /users/1\n\n// same as above, but using regex\ncy.intercept({\n  method: '/PUT|PATCH/',\n  url: '**/users/*',\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Count with cy.get() in Cypress\nDESCRIPTION: Shows how to use cy.get() with a data attribute selector and assert the number of matching elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/get.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[data-test-id=\"test-example\"]').should('have.length', 5)\n```\n\n----------------------------------------\n\nTITLE: Using cy.pause() for Interactive Debugging in Cypress Tests\nDESCRIPTION: Example showing how to use cy.pause() within a Cypress test to pause execution and step through commands one by one. This helps in debugging by allowing inspection of the application state at specific points during test execution.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/open-mode.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('My First Test', () => {\n  it('clicking \"type\" shows the right headings', () => {\n    cy.visit('https://example.cypress.io')\n\n    cy.pause()\n\n    cy.contains('type').click()\n\n    // Should be on a new URL which includes '/commands/actions'\n    cy.url().should('include', '/commands/actions')\n\n    // Get an input, type into it and verify that the value has been updated\n    cy.get('[data-testid=\"action-email\"]')\n      .type('fake@email.com')\n      .should('have.value', 'fake@email.com')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Parent with Class Selector in Cypress\nDESCRIPTION: Example of getting the parent element with a specific class selector from a set of list items.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/parent.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"main-nav\">\n  <li>Overview</li>\n  <li>\n    Getting started\n    <ul class=\"sub-nav\">\n      <li>Install</li>\n      <li class=\"active\">Build</li>\n      <li>Test</li>\n    </ul>\n  </li>\n</ul>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// yields .sub-nav\ncy.get('li').parent('.sub-nav')\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Assertions in Cypress\nDESCRIPTION: Demonstrates how to chain multiple assertions together using 'should' and 'and' commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// our subject is not changed by our first assertion,\n// so we can continue to use DOM based assertions\ncy.get('option:first').should('be.selected').and('have.value', 'Metallica')\n```\n\n----------------------------------------\n\nTITLE: Using .only to Run Specific Tests in Cypress\nDESCRIPTION: Demonstrates how to use .only to run a specific test or suite in Cypress, using a FizzBuzz example.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/writing-and-organizing-tests.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// -- Start: Our Application Code --\nfunction fizzbuzz(num) {\n  if (num % 3 === 0 && num % 5 === 0) {\n    return 'fizzbuzz'\n  }\n\n  if (num % 3 === 0) {\n    return 'fizz'\n  }\n\n  if (num % 5 === 0) {\n    return 'buzz'\n  }\n}\n// -- End: Our Application Code --\n\n// -- Start: Our Cypress Tests --\ndescribe('Unit Test FizzBuzz', () => {\n  function numsExpectedToEq(arr, expected) {\n    // loop through the array of nums and make\n    // sure they equal what is expected\n    arr.forEach((num) => {\n      expect(fizzbuzz(num)).to.eq(expected)\n    })\n  }\n\n  // only run this test\n  it.only('returns \"fizz\" when number is multiple of 3', () => {\n    numsExpectedToEq([9, 12, 18], 'fizz')\n  })\n\n  it('returns \"buzz\" when number is multiple of 5', () => {\n    numsExpectedToEq([10, 20, 25], 'buzz')\n  })\n\n  it('returns \"fizzbuzz\" when number is multiple of both 3 and 5', () => {\n    numsExpectedToEq([15, 30, 60], 'fizzbuzz')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Cypress Environment Variables in JavaScript\nDESCRIPTION: Demonstrates how to use Cypress.env() to access environment variables in test files. This snippet shows both accessing all variables and specific named variables.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/environment-variables.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.env() // {login_url: '/login', products_url: '/products'}\nCypress.env('login_url') // '/login'\nCypress.env('products_url') // '/products'\n```\n\n----------------------------------------\n\nTITLE: Asserting Text Content with Cypress - JavaScript\nDESCRIPTION: This group of snippets shows various ways to assert text content in different elements using Cypress's should and contains commands. Scenarios covered include checking for exact text, substring matches, absence, regular expression matches, and the use of cy.contains for regex. All commands expect matching elements to exist and rely on Cypress and proper data-testid attributes in the DOM.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/assertions.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// assert the element's text content is exactly the given text\ncy.get('[data-testid=\"user-name\"]').should('have.text', 'Joe Smith')\n// assert the element's text includes the given substring\ncy.get('[data-testid=\"address\"]').should('include.text', 'Atlanta')\n// retry until this span does not contain 'click me'\ncy.get('a').parent('span.help').should('not.contain', 'click me')\n// the element's text should start with \"Hello\"\ncy.get('[data-testid=\"greeting\"]')\n  .invoke('text')\n  .should('match', /^Hello/)\n// use cy.contains to find an element with its text\n// matching the given regular expression\ncy.contains('[data-testid=\"greeting\"]', /^Hello/)\n```\n\n----------------------------------------\n\nTITLE: Testing setTimeout with Clock and Tick in Cypress\nDESCRIPTION: Example showing how to test setTimeout functionality by creating a clock and moving time forward using tick.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/tick.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addIntro = () => {\n  setTimeout(() => {\n    document.getElementById('#header').textContent = 'Hello, World'\n  }, 500)\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clock()\ncy.visit('/index.html')\ncy.window().invoke('addIntro')\ncy.tick(500)\ncy.get('#header').should('have.text', 'Hello, World')\n```\n\n----------------------------------------\n\nTITLE: Getting the Last List Item using last() in Cypress\nDESCRIPTION: Example showing how to use the .last() command to retrieve the final list item from a collection of list elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/last.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// yields <li class=\"four\">Knick knack on my door</li>\ncy.get('li').last()\n```\n\n----------------------------------------\n\nTITLE: Using Aliases in Cypress Tests\nDESCRIPTION: This snippet demonstrates how to use aliases in Cypress to share context between hooks and tests, avoiding the need for closure-based workarounds.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/variables-and-aliases.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  // alias the $btn.text() as 'text'\n  cy.get('button').invoke('text').as('text')\n})\n\nit('has access to text', function () {\n  this.text // is now available\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Configuration for Specific Testing Types in TypeScript\nDESCRIPTION: Example Cypress configuration showing how to set global default options and then override specific settings for Component Testing (within the `component` object) and E2E Testing (within the `e2e` object).\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/configuration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n{\n  // These settings apply everywhere unless overridden\n  defaultCommandTimeout: 5000,\n  viewportWidth: 1000,\n  viewportHeight: 600,\n  // Viewport settings overridden for component tests\n  component: {\n    viewportWidth: 500,\n    viewportHeight: 500,\n  },\n  // Command timeout overridden for E2E tests\n  e2e: {\n    defaultCommandTimeout: 10000,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Validation for Auth0 in Express Backend\nDESCRIPTION: This snippet sets up JWT validation for Auth0 in an Express backend using express-jwt and jwks-rsa libraries. It configures the JWT secret, audience, issuer, and algorithms for validation.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/auth0-authentication.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport jwt from 'express-jwt'\nimport jwksRsa from 'jwks-rsa'\n\ndotenv.config()\n\nconst auth0JwtConfig = {\n  secret: jwksRsa.expressJwtSecret({\n    cache: true,\n    rateLimit: true,\n    jwksRequestsPerMinute: 5,\n    jwksUri: `https://${process.env.REACT_APP_AUTH0_DOMAIN}/.well-known/jwks.json`,\n  }),\n\n  // Validate the audience and the issuer.\n  audience: process.env.REACT_APP_AUTH0_AUDIENCE,\n  issuer: `https://${process.env.REACT_APP_AUTH0_DOMAIN}/`,\n  algorithms: ['RS256'],\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CircleCI Configuration with Cypress Orb\nDESCRIPTION: Basic setup for running Cypress tests in CircleCI using the Cypress orb. This configuration installs dependencies, caches them, and runs Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/circleci.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\norbs:\n  cypress: cypress-io/cypress@3\nworkflows:\n  build:\n    jobs:\n      - cypress/run:\n          start-command: 'npm run start'\n```\n\n----------------------------------------\n\nTITLE: Using Cypress.env Basic Syntax\nDESCRIPTION: The basic syntax patterns for using Cypress.env to get and set environment variables. Includes all the different parameter patterns accepted by the method.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/env.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.env()\nCypress.env(name)\nCypress.env(name, value)\nCypress.env(object)\n```\n\n----------------------------------------\n\nTITLE: Verifying Request Modifications in Cypress\nDESCRIPTION: Demonstrates how to verify that request modifications have been applied by using aliases and assertions on the intercepted request.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('POST', '/users', (req) => {\n  req.headers['x-custom-header'] = 'added by cy.intercept'\n}).as('createUser')\n\ncy.get('button.save').click()\n// you can see the headers in the console output by selecting\n// this line in the command log:\ncy.wait('@createUser')\n  // ...or make an assertion:\n  .its('request.headers')\n  .should('have.property', 'x-custom-header', 'added by cy.intercept')\n```\n\n----------------------------------------\n\nTITLE: Efficiently Organizing Tests with cy.session() and cy.visit()\nDESCRIPTION: Shows how to optimize test organization when using cy.session() by calling cy.visit() only when necessary. The example demonstrates using beforeEach hooks to organize tests into suites for different pages, reducing redundant page visits.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/session.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst login = (name) => {\n  cy.session(name, () => {\n    cy.visit('/login')\n    cy.get('[data-test=name]').type(name)\n    cy.get('[data-test=password]').type('s3cr3t')\n    cy.get('#submit').click()\n    cy.url().should('contain', '/home')\n  })\n  // no visit here\n}\n\ndescribe('home page tests', () => {\n  beforeEach(() => {\n    login('user')\n    cy.visit('/home')\n  })\n\n  it('should test something on the /home page', () => {\n    // assertions\n  })\n\n  it('should test something else on the /home page', () => {\n    // assertions\n  })\n})\n\ndescribe('other page tests', () => {\n  beforeEach(() => {\n    login('user')\n    cy.visit('/other')\n  })\n\n  it('should test something on the /other page', () => {\n    // assertions\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Enhanced Auth0 Login Command with Session Caching\nDESCRIPTION: Improved version of the Auth0 login command utilizing cy.session() for caching authenticated sessions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/auth0-authentication.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nCypress.Commands.add('loginToAuth0', (username: string, password: string) => {\n  const log = Cypress.log({\n    displayName: 'AUTH0 LOGIN',\n    message: [`🔐 Authenticating | ${username}`],\n    autoEnd: false,\n  })\n  log.snapshot('before')\n\n  cy.session(\n    `auth0-${username}`,\n    () => {\n      loginViaAuth0Ui(username, password)\n    },\n    {\n      validate: () => {\n        cy.wrap(localStorage)\n          .invoke('getItem', 'authAccessToken')\n          .should('exist')\n      },\n    }\n  )\n\n  log.snapshot('after')\n  log.end()\n})\n```\n\n----------------------------------------\n\nTITLE: Multiple Assertions in Cypress\nDESCRIPTION: A test with multiple assertions including .should() and .and() commands. This demonstrates how Cypress handles multiple assertions in sequence, retrying each one until it passes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/retry-ability.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nit('creates two items', () => {\n  cy.visit('/')\n\n  cy.get('.new-todo').type('todo A{enter}')\n  cy.get('.new-todo').type('todo B{enter}')\n\n  cy.get('.todo-list li') // query\n    .should('have.length', 2) // assertion\n    .and(($li) => {\n      // 2 mocha assertions inside of the .and() assertion\n      expect($li.get(0).textContent, 'first item').to.equal('todo a')\n      expect($li.get(1).textContent, 'second item').to.equal('todo B')\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Throttling API Responses in Cypress Tests\nDESCRIPTION: Demonstrates how to throttle all API responses using beforeEach hook to simulate real-world network conditions like a mobile 3G connection.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// Throttle API responses to simulate real-world conditions\nbeforeEach(() => {\n  cy.intercept(\n    {\n      url: 'http://localhost:3001/**',\n      middleware: true,\n    },\n    (req) => {\n      req.on('response', (res) => {\n        // Throttle the response to 1 Mbps to simulate a\n        // mobile 3G connection\n        res.setThrottle(1000)\n      })\n    }\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Login Command in Cypress TypeScript\nDESCRIPTION: Creates a custom Cypress command 'loginToAuth0ViaSocial' that handles authentication for multiple social providers (Microsoft, Google, Facebook). Uses Cypress.log for tracking authentication state and implements provider-specific login logic.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/social-authentication.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nCypress.Commands.add(\n  'loginToAuth0ViaSocial',\n  (SOCIAL_PROVIDER: 'microsoft' | 'google' | 'facebook') => {\n    const log = Cypress.log({\n      displayName: 'Social LOGIN',\n      message: [`🔐 Authenticating | ${SOCIAL_PROVIDER}`],\n      // @ts-ignore\n      autoEnd: false,\n    })\n    log.snapshot('before')\n\n    switch (SOCIAL_PROVIDER) {\n      case 'microsoft':\n        logIntoMicrosoft(\n          Cypress.env('MICROSOFT_USERNAME'),\n          Cypress.env('MICROSOFT_PASSWORD'),\n          Cypress.env('MICROSOFT_NAME')\n        )\n        break\n      case 'google':\n        logIntoGoogle(\n          Cypress.env('GOOGLE_USERNAME'),\n          Cypress.env('GOOGLE_PASSWORD'),\n          Cypress.env('GOOGLE_NAME')\n        )\n        break\n      case 'facebook':\n        logIntoFacebook(\n          Cypress.env('FACEBOOK_USERNAME'),\n          Cypress.env('FACEBOOK_PASSWORD'),\n          Cypress.env('FACEBOOK_NAME')\n        )\n        break\n      default:\n        throw new Error('no social provider configured!')\n    }\n\n    log.snapshot('after')\n    log.end()\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Navigating Within Same Origin in Cypress\nDESCRIPTION: Example of a Cypress test that successfully navigates between URLs with the same origin, demonstrating that no special handling is needed in this case.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cross-origin-testing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This test will run without error\nit('navigates', () => {\n  cy.visit('https://www.cypress.io')\n  cy.visit('https://www.cypress.io/app')\n  cy.get('selector') // yup all good\n})\n```\n\n----------------------------------------\n\nTITLE: Generated Test Code from Cypress Studio (JavaScript)\nDESCRIPTION: This is the complete test code generated after using Cypress Studio to record interactions for creating a new transaction. It includes commands for clicking buttons, typing into fields, and making assertions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cypress-studio.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Cypress Studio Demo', () => {\n  beforeEach(() => {\n    // Seed database with test data\n    cy.task('db:seed')\n\n    // Login test user\n    cy.database('find', 'users').then((user) => {\n      cy.login(user.username, 's3cret', true)\n    })\n  })\n\n  it('create new transaction', () => {\n    /* ==== Generated with Cypress Studio ==== */\n    cy.get('[data-test=nav-top-new-transaction]').click()\n    cy.get('[data-test=user-list-search-input]').clear()\n    cy.get('[data-test=user-list-search-input]').type('dev')\n    cy.get(\n      '[data-test=user-list-item-tsHF6_D5oQ] > .MuiListItemText-root > .MuiListItemText-primary'\n    ).should('have.text', 'Devon Becker')\n    cy.get('[data-test=user-list-item-tsHF6_D5oQ]').click()\n    cy.get('#amount').clear()\n    cy.get('#amount').type('$25')\n    cy.get('#transaction-create-description-input').clear()\n    cy.get('#transaction-create-description-input').type('Sushi dinner')\n    cy.get('[data-test=transaction-create-submit-payment]').should('be.enabled')\n    cy.get('[data-test=transaction-create-submit-payment]').click()\n    /* ==== End Cypress Studio ==== */\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Commands as a Function in TypeScript\nDESCRIPTION: This snippet shows how to wrap custom Cypress commands in a function to support Webpack 5's tree shaking with 'sideEffects:false'. It demonstrates the pattern for both the commands file and the support file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n// cypress/support/commands.ts\nexport function registerCommands(){\n  Cypress.Commands.add(\"login\", (email, password) => { ... })\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// cypress/support/e2e.ts\nimport { registerCommands } from './commands'\n\nregisterCommands()\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Cypress Tests\nDESCRIPTION: JavaScript example showing how to use custom environment variables within Cypress tests\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/overview.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncy.request({\n  method: 'POST',\n  url: Cypress.env('EXTERNAL_API_SERVER') + '/users/1',\n  body: {\n    foo: 'bar',\n    baz: 'quux',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Forcing Click with Relative Coordinates in Cypress\nDESCRIPTION: Demonstrates forcing a click at specific coordinates relative to an element in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/click.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#footer .next').click(5, 60, { force: true })\n```\n\n----------------------------------------\n\nTITLE: Creating Assertions with Stubs and Spies\nDESCRIPTION: Demonstrates how to create assertions against stubs and spies to verify function behavior. Shows various assertion types including call counts, arguments, return values, and thrown errors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/stubs-spies-and-clocks.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = {\n  getName: (arg) => {\n    return arg\n  },\n\n  updateEmail: (arg) => {\n    return arg\n  },\n\n  fail: () => {\n    throw new Error('fail whale')\n  },\n}\n\n// force user.getName() to return \"Jane\"\ncy.stub(user, 'getName').returns('Jane Lane')\n\n// spy on updateEmail but do not change its behavior\ncy.spy(user, 'updateEmail')\n\n// spy on fail but do not change its behavior\ncy.spy(user, 'fail')\n\n// invoke getName\nconst name = user.getName(123)\n\n// invoke updateEmail\nconst email = user.updateEmail('jane@devs.com')\n\ntry {\n  // invoke fail\n  user.fail()\n} catch (e) {}\n\nexpect(name).to.eq('Jane Lane') // true\nexpect(user.getName).to.be.calledOnce // true\nexpect(user.getName).not.to.be.calledTwice // true\nexpect(user.getName).to.be.calledWith(123)\nexpect(user.getName).to.be.calledWithExactly(123) // true\nexpect(user.getName).to.be.calledOn(user) // true\n\nexpect(email).to.eq('jane@devs.com') // true\nexpect(user.updateEmail).to.be.calledWith('jane@devs.com') // true\nexpect(user.updateEmail).to.have.returned('jane@devs.com') // true\n\nexpect(user.fail).to.have.thrown('Error') // true\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Syntax for req.reply() in Cypress\nDESCRIPTION: Demonstrates shorthand syntax options for req.reply() that avoid having to specify a full StaticResponse object for simpler stubbing cases.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// equivalent to `req.reply({ body })`\nreq.reply(body)\n\n// equivalent to `req.reply({ body, headers })`\nreq.reply(body, headers)\n\n// equivalent to `req.reply({ statusCode, body, headers})`\nreq.reply(statusCode, body, headers)\n```\n\n----------------------------------------\n\nTITLE: Correct Async Command Handling in Cypress\nDESCRIPTION: Proper implementation using .then() to ensure commands execute in the correct order and synchronous code evaluates after async operations complete.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nit('does not work as we expect', () => {\n  cy.visit('/my/resource/path') // Nothing happens yet\n\n  cy.get('.awesome-selector') // Still nothing happening\n    .click() // Nope, nothing\n    .then(() => {\n      // placing this code inside the .then() ensures\n      // it runs after the cypress commands 'execute'\n      let el = Cypress.$('.new-el') // evaluates after .then()\n\n      if (el.length) {\n        cy.get('.another-selector')\n      } else {\n        cy.get('.optional-selector')\n      }\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Accessibility-Aware Selectors in Cypress\nDESCRIPTION: Shows how to locate an image element by its alt text attribute rather than using test IDs. This approach is more accessibility-friendly and documents the expected accessible content.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/accessibility-testing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// use the `alt` content to target the image\ncy.get('img[alt=\"Cypress Logo\"]').should('be.visible')\n```\n\n----------------------------------------\n\nTITLE: Controlling Time with cy.clock and cy.tick\nDESCRIPTION: Demonstrates how to use the clock feature to control time in tests, particularly useful for testing setInterval, setTimeout, and date-dependent code without waiting for actual time to pass.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/stubs-spies-and-clocks.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clock()\ncy.visit('http://localhost:3333')\ncy.get('#search').type('Acme Company')\ncy.tick(1000)\n```\n\n----------------------------------------\n\nTITLE: Testing Glob Patterns with Cypress.minimatch in JavaScript\nDESCRIPTION: Shows how to utilize the `Cypress.minimatch` utility function, which underlies `cy.intercept`'s glob matching, to test if a given URL string matches a specific glob pattern. It confirms matches and non-matches using assertions, demonstrating its use for debugging patterns with the `{ matchBase: true }` option (often applied by default in `cy.intercept`).\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(\n  Cypress.minimatch('http://localhost/users?_limit=3', '**/users?_limit=+(3|5)')\n).to.be.true\nexpect(\n  Cypress.minimatch('http://localhost/users?_limit=5', '/users?_limit=+(3|5)', {\n    matchBase: true,\n  })\n).to.be.true\nexpect(\n  Cypress.minimatch('http://localhost/users?_limit=7', '**/users?_limit=+(3|5)')\n).to.be.false\n```\n\n----------------------------------------\n\nTITLE: Asserting on Request Payload in Cypress\nDESCRIPTION: Demonstrates making assertions on the request body before it is sent to the server using cy.intercept() and expect statements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// match requests to create a user\ncy.intercept('POST', '/users', (req) => {\n  // make an assertion on the payload contents\n  expect(req.body).to.include('Peter Pan')\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of cy.contains() in Cypress\nDESCRIPTION: Demonstrates the correct and incorrect usage of the cy.contains() command for finding DOM elements containing specific text.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/contains.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.nav').contains('About') // Yield el in .nav containing 'About'\ncy.contains('Hello') // Yield first el in document containing 'Hello'\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.title().contains('My App') // Errors, 'title' does not yield DOM element\ncy.getCookies().contains('_key') // Errors, 'getCookies' does not yield DOM element\n```\n\n----------------------------------------\n\nTITLE: Stubbing Network Request Responses in Cypress (JavaScript)\nDESCRIPTION: This Cypress snippet demonstrates stubbing a network request to '/projects' with a custom JSON response body using `cy.intercept()`. It uses `.as('projects')` to alias the intercept and `cy.wait('@projects')` to wait for the request, then asserts properties of the stubbed response.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nit('projects endpoint should return 2 projects', () => {\n  cy.intercept('/projects', {\n    body: [{ projectId: '1' }, { projectId: '2' }],\n  }).as('projects')\n  cy.wait('@projects').its('response.body').should('have.length', 2)\n})\n```\n\n----------------------------------------\n\nTITLE: Form Submission HTML Structure\nDESCRIPTION: Shows HTML structure for a login form that demonstrates implicit form submission behavior with multiple inputs and a submit button.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/type.mdx#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/login\">\n  <input id=\"username\" />\n  <input id=\"password\" />\n  <button type=\"submit\">Log In</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of selectFile\nDESCRIPTION: Demonstrates proper usage of the selectFile command including single file selection, multiple file selection, and drag-drop operations.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/selectfile.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input[type=file]').selectFile('file.json')\ncy.get('input[type=file]').selectFile(['file.json', 'file2.json'])\n\ncy.get('input[type=file]').selectFile({\n  contents: Cypress.Buffer.from('file contents'),\n  fileName: 'file.txt',\n  mimeType: 'text/plain',\n  lastModified: Date.now(),\n})\n\ncy.get('input[type=file]').selectFile('file.json', { action: 'drag-drop' })\ncy.document().selectFile('file.json', { action: 'drag-drop' })\n```\n\n----------------------------------------\n\nTITLE: Selecting and Clicking Link with cy.get() in Cypress\nDESCRIPTION: Demonstrates using cy.get() to find a link with a specific href attribute and perform a click action.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/get.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('a[href*=\"questions\"]').click()\n```\n\n----------------------------------------\n\nTITLE: Modifying Outgoing Requests in Cypress\nDESCRIPTION: Shows multiple examples of modifying outgoing request properties like body and headers before they are sent to the server.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// modify the request body before it's sent to its destination\ncy.intercept('POST', '/users', (req) => {\n  req.body = {\n    name: 'Peter Pan',\n  }\n})\n\n// add a header to an outgoing request\ncy.intercept('POST', '/users', (req) => {\n  req.headers['x-custom-header'] = 'added by cy.intercept'\n})\n\n// modify an existing header\ncy.intercept('POST', '/users', (req) => {\n  req.headers['authorization'] = 'Basic YWxhZGRpbjpvcGVuc2VzYW1l'\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Event Handlers in React Components with Cypress\nDESCRIPTION: Demonstrates how to use Cypress spies to test event handlers in React components.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/react/examples.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nit('clicking + fires a change event with the incremented value', () => {\n  const onChangeSpy = cy.spy().as('onChangeSpy')\n  cy.mount(<Stepper onChange={onChangeSpy} />)\n  cy.get('[data-cy=increment]').click()\n  cy.get('@onChangeSpy').should('have.been.calledWith', 1)\n})\n```\n\n----------------------------------------\n\nTITLE: Waiting for Assertions to Pass in Cypress\nDESCRIPTION: Demonstrates how Cypress automatically waits for assertions to pass when elements change state after a timeout.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button')\n  .click()\n  .should('have.class', 'active')\n  .and('not.have.class', 'inactive')\n```\n\n----------------------------------------\n\nTITLE: Escaping within Context Temporarily\nDESCRIPTION: Example showing how to temporarily escape the .within() context using root() and closest() commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/within.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<section class=\"example\">\n  <input id=\"name\" type=\"text\" />\n  <form>\n    <input name=\"email\" type=\"email\" />\n    <input name=\"password\" type=\"password\" />\n    <button type=\"submit\">Login</button>\n  </form>\n</section>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('form').within(($form) => {\n  // temporarily escape the .within context\n  cy.root().closest('.example').find('#name').type('Joe')\n  // continue using the .within context\n  cy.get('input[name=\"email\"]').type('john.doe@email.com')\n  cy.get('input[name=\"password\"]').type('password')\n  cy.root().submit()\n})\n```\n\n----------------------------------------\n\nTITLE: Multiple Assertions in Cypress\nDESCRIPTION: Shows how to chain multiple assertions to a single Cypress command. The example checks for the presence of a specific class, the existence of an href attribute, and verifies that the href includes a specific string.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/assertions.mdx#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<a\n  data-testid=\"assertions-link\"\n  class=\"active\"\n  href=\"https://on.cypress.io\"\n  target=\"_blank\"\n>\n  Cypress Docs\n</a>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[data-testid=\"assertions-link\"]')\n  .should('have.class', 'active')\n  .and('have.attr', 'href')\n  .and('include', 'cypress.io')\n```\n\n----------------------------------------\n\nTITLE: Asserting the Current URL with cy.url() in JavaScript\nDESCRIPTION: Example showing how to click a link and then assert the resulting URL using both 'include' and 'eq' assertions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/url.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// clicking the anchor causes the browser to follow the link\ncy.get('#user-edit a').click()\ncy.url().should('include', '/users/1/edit') // => true\ncy.url().should('eq', 'http://localhost:8000/users/1/edit') // => true\n```\n\n----------------------------------------\n\nTITLE: Using Lodash _.each with Cypress in JavaScript\nDESCRIPTION: Demonstrates how to use the Lodash _.each function within a Cypress test. It iterates over list items and performs assertions on each element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/lodash.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// set local reference to lodash and jquery\nconst { _, $ } = Cypress\n\ncy.get('li').then(($li) => {\n  // use the _.each function\n  _.each($li.get(), (el, i) => {\n    // use $(...) to wrap the DOM element\n    // into a jQuery object\n    expect($(el).parent()).to.match('ul')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Fixture Data in Network Intercepts\nDESCRIPTION: Shows how to use fixture data to stub network responses using cy.intercept().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/fixture.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.fixture('users').then((json) => {\n  cy.intercept('GET', '/users/**', json)\n})\n```\n\n----------------------------------------\n\nTITLE: Using cy.get() with Attribute Selectors in Cypress\nDESCRIPTION: Shows examples of using cy.get() with various attribute selectors to find elements with specific id patterns.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/get.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[id^=local-]')\ncy.get('[id$=-remote]')\ncy.get('[id^=local-][id$=-remote]')\ncy.get('#id\\\\.\\\\.\\\\.1234') // escape the character with \\\\\n```\n\n----------------------------------------\n\nTITLE: Using Chai Assertions in Cypress Tests\nDESCRIPTION: This snippet demonstrates various Chai assertions used in Cypress tests. It covers different types of assertions including equality, type checking, property existence, and more.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/assertions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.should('not.equal', 'Jane')\nexpect(name).to.not.equal('Jane')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('deep.equal', { name: 'Jane' })\nexpect(obj).to.deep.equal({ name: 'Jane' })\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('have.nested.property', 'a.b[1]')\n.should('nested.include', {'a.b[1]': 'y'})\nexpect({a: {b: 'x'}}).to.have.nested.property('a.b')\nexpect({a: {b: 'x'}}).to.nested.include({'a.b': 'x'})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('have.ordered.members', [1, 2])\nexpect([1, 2]).to.have.ordered.members([1, 2])\nexpect([1, 2]).not.to.have.ordered.members([2, 1])\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('have.any.keys', 'age')\nexpect(arr).to.have.any.keys('age')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('have.all.keys', 'name', 'age')\nexpect(arr).to.have.all.keys('name', 'age')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('be.a', 'string')\nexpect('test').to.be.a('string')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('include', 2)\nexpect([1,2,3]).to.include(2)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('not.be.ok')\nexpect(undefined).to.not.be.ok\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('be.true')\nexpect(true).to.be.true\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('be.false')\nexpect(false).to.be.false\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('be.null')\nexpect(null).to.be.null\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('be.undefined')\nexpect(undefined).to.be.undefined\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('exist')\nexpect(myVar).to.exist\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('be.empty')\nexpect([]).to.be.empty\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('be.arguments')\nexpect(arguments).to.be.arguments\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('equal', 42)\nexpect(42).to.equal(42)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('deep.equal', { name: 'Jane' })\nexpect({ name: 'Jane' }).to.deep.equal({ name: 'Jane' })\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('eql', { name: 'Jane' })\nexpect({ name: 'Jane' }).to.eql({ name: 'Jane' })\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('be.greaterThan', 5)\nexpect(10).to.be.greaterThan(5)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('be.at.least', 10)\nexpect(10).to.be.at.least(10)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('be.lessThan', 10)\nexpect(5).to.be.lessThan(10)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('have.length.of.at.most', 4)\nexpect('test').to.have.length.of.at.most(4)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('be.within', 5, 10)\nexpect(7).to.be.within(5, 10)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('be.instanceOf', Array)\nexpect([1, 2, 3]).to.be.instanceOf(Array)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('have.property', 'name')\nexpect(obj).to.have.property('name')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('have.deep.property', 'tests[1]', 'e2e')\nexpect(deepObj).to.have.deep.property('tests[1]', 'e2e')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('have.ownProperty', 'length')\nexpect('test').to.have.ownProperty('length')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n.should('have.ownPropertyDescriptor', 'a')\nexpect({a: 1}).to.have.ownPropertyDescriptor('a')\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress for Back-end Code Coverage Collection\nDESCRIPTION: Shows how to configure Cypress to retrieve back-end code coverage by specifying the coverage endpoint URL in the Cypress configuration file. This tells the code coverage plugin where to fetch server-side coverage data.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/code-coverage.mdx#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  env: {\n    codeCoverage: {\n      url: 'http://localhost:3000/__coverage__'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Browser and Spec Information Before Cypress Run\nDESCRIPTION: Example of using the before:run event to log information about the browser and number of specs that will be executed. The handler accesses details provided in the event object, which differs between run and open modes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/before-run-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\non('before:run', (details) => {\n  // details will look something like this when run via `cypress run`:\n  // {\n  //   config: {\n  //     projectId: '12345',\n  //     baseUrl: 'http://example.com/',\n  //     viewportWidth: 1000,\n  //     viewportHeight: 660,\n  //     // ...more properties...\n  //   },\n  //   browser: {\n  //     name: 'electron',\n  //     version: '59.0.3071.115',\n  //     // ...more properties...\n  //   },\n  //   system: {\n  //     osName: 'darwin',\n  //     osVersion: '16.7.0',\n  //   }\n  //   cypressVersion: '6.1.0',\n  //   specs: [\n  //     {\n  //       name: 'login_cy.js',\n  //       relative: 'cypress/e2e/login_cy.js',\n  //       absolute: '/Users/janelane/app/cypress/e2e/login_cy.js',\n  //     },\n  //     // ... more specs\n  //   ],\n  //   specPattern: [\n  //     '**/*.cy.{js,jsx,ts,tsx}'\n  //   ],\n  //   parallel: false,\n  //   group: 'group-1',\n  //   tag: 'tag-1'\n  // }\n  // details will look something like this when run via `cypress open`:\n  // {\n  //   config: {\n  //     projectId: '12345',\n  //     baseUrl: 'http://example.com/',\n  //     viewportWidth: 1000,\n  //     viewportHeight: 660,\n  //     // ...more properties...\n  //   },\n  //   system: {\n  //     osName: 'darwin',\n  //     osVersion: '16.7.0',\n  //   }\n  //   cypressVersion: '7.0.0'\n  // }\n  if (details.specs && details.browser) {\n    // details.specs and details.browser will be undefined in interactive mode\n    console.log(\n      'Running',\n      details.specs.length,\n      'specs in',\n      details.browser.name\n    )\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Converting an image to a Data URL with base64 encoding in Cypress\nDESCRIPTION: This snippet shows how to request an image with base64 encoding to create a Data URI. It retrieves the content type from the response headers and constructs a complete data URI for use in the application.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/request.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncy.request({\n  url: 'https://docs.cypress.io/img/logo.png',\n  encoding: 'base64',\n}).then((response) => {\n  const base64Content = response.body\n  const mime = response.headers['content-type'] // or 'image/png'\n  // see https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\n  const imageDataUrl = `data:${mime};base64,${base64Content}`\n})\n```\n\n----------------------------------------\n\nTITLE: Clearing a Cookie After Login in Cypress E2E Tests\nDESCRIPTION: Shows how to clear a session cookie after logging in, then verifying redirection to the login page when accessing a protected route.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clearcookie.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// assume we just logged in\ncy.contains('Login').click()\ncy.url().should('include', 'profile')\ncy.clearCookie('session_id')\ncy.visit('/dashboard') // we should be redirected back to login\ncy.url().should('include', 'login')\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP response properties with cy.request() in Cypress\nDESCRIPTION: This snippet shows how to make a request to an external API and verify various properties of the response, including status code, body length, and presence of headers and duration properties.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/request.mdx#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ncy.request('https://jsonplaceholder.typicode.com/comments').then((response) => {\n  expect(response.status).to.eq(200)\n  expect(response.body).to.have.length(500)\n  expect(response).to.have.property('headers')\n  expect(response).to.have.property('duration')\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Assertions in Cypress\nDESCRIPTION: More complex assertions including throwing errors, method checking, mathematical comparisons, and array operations. These assertions provide deeper verification capabilities.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/assertions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n.should('throw', Error)\nexpect(fn).to.throw(Error)\n\n.should('respondTo', 'getName')\nexpect(obj).to.respondTo('getName')\n\n.should('be.closeTo', 1, 0.5)\nexpect(1.5).to.be.closeTo(1, 0.5)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples of cy.session() Command\nDESCRIPTION: Demonstrates common mistakes when implementing cy.session(), such as visiting pages outside the setup function and placing assertions in the wrong scope.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/session.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// visiting before calling cy.session() is redundant, it needs to\n// be done inside the setup function\ncy.visit('/login')\ncy.session(name, () => {\n  // need to call cy.visit() here because the page is blank when\n  // the setup function runs\n  cy.get('[data-test=name]').type(name)\n  cy.get('[data-test=password]').type('s3cr3t')\n  cy.get('form').contains('Log In').click()\n  // should assert that login was successful here to guarantee the\n  // login process completes before it is cached\n})\n// should have asserted this inside the cy.session() setup\n// function because the page is blank here\ncy.url().should('contain', '/login-successful')\n```\n\n----------------------------------------\n\nTITLE: Testing DOM Element Existence and Actionability in Cypress\nDESCRIPTION: Demonstrates how Cypress implicitly asserts that elements exist in the DOM before proceeding, and ensures elements are in an actionable state before interacting with them.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ncy\n  // there is an implicit assertion that this\n  // button must exist in the DOM before proceeding\n  .get('button')\n\n  // before issuing the click, this button must be \"actionable\"\n  // it cannot be disabled, covered, or hidden from view.\n  .click()\n```\n\n----------------------------------------\n\nTITLE: Cypress E2E Configuration Type Definition\nDESCRIPTION: TypeScript configuration object showing the structure for E2E testing configuration in Cypress. This code demonstrates how to specify E2E-specific options within the configuration file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/configuration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  e2e: {\n    // e2e options here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Multiple XHR Requests in Cypress\nDESCRIPTION: Demonstrates how to handle multiple requests to the same URL using Cypress intercept and wait commands with aliases.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/users*').as('getUsers')\ncy.wait('@getUsers') // Wait for first GET to /users/\ncy.get('#list>li').should('have.length', 10)\ncy.get('#load-more-btn').click()\ncy.wait('@getUsers') // Wait for second GET to /users/\ncy.get('#list>li').should('have.length', 20)\n```\n\n----------------------------------------\n\nTITLE: Implementing Bank Account Creation Test with Cypress Studio\nDESCRIPTION: Example test suite demonstrating Cypress Studio usage for creating a bank account test. Shows database seeding, user login setup, and recorded UI interactions for creating a new bank account. The test includes element selections, form interactions, and button clicks.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cypress-studio.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Code from Real World App (RWA)\nimport { User } from 'models'\n\ndescribe('Cypress Studio Demo', () => {\n  beforeEach(() => {\n    cy.task('db:seed')\n\n    cy.database('find', 'users').then((user: User) => {\n      cy.login(user.username, 's3cret', true)\n    })\n  })\n\n  it('create new transaction', () => {\n    // Extend test with Cypress Studio\n  })\n\n  /* === Test Created with Cypress Studio === */\n  it('create bank account', function () {\n    /* ==== Generated with Cypress Studio ==== */\n    cy.get('[data-test=sidenav-bankaccounts]').click()\n    cy.get('[data-test=bankaccount-new] > .MuiButton-label').click()\n    cy.get('#bankaccount-bankName-input').click()\n    cy.get('#bankaccount-bankName-input').type('Test Bank Account')\n    cy.get('#bankaccount-routingNumber-input').click()\n    cy.get('#bankaccount-routingNumber-input').type('987654321')\n    cy.get('#bankaccount-accountNumber-input').click()\n    cy.get('#bankaccount-accountNumber-input').type('123456789')\n    cy.get('[data-test=bankaccount-submit] > .MuiButton-label').click()\n    /* ==== End Cypress Studio ==== */\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Handling of Window Object Classes in Cypress\nDESCRIPTION: Example showing the proper way to check event types by using the window's own KeyboardEvent constructor, accounting for Cypress's iframe-based testing architecture.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/window.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nit('should trigger KeyboardEvent with .type inside Cypress event listener', (done) => {\n  cy.window().then((win) => {\n    cy.get('#test-input').then((jQueryElement) => {\n      let elemHtml = jQueryElement.get(0)\n\n      elemHtml.addEventListener('keydown', (event) => {\n        expect(event instanceof win['KeyboardEvent']).to.be.true\n        done()\n      })\n    })\n  })\n\n  cy.get('#test-input').type('A')\n})\n```\n\n----------------------------------------\n\nTITLE: Using cy.origin() for Cross-Origin Interactions in Cypress 14.0\nDESCRIPTION: Demonstrates how to use cy.origin() to interact with elements across different origins in Cypress 14.0, which is now required due to changes in document.domain handling.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('https://www.cypress.io')\ncy.visit('https://docs.cypress.io')\ncy.origin('https://docs.cypress.io', () => {\n  cy.get('[role=\"banner\"]').should('be.visible')\n})\n```\n\n----------------------------------------\n\nTITLE: Testing HTML Head Element Content in Cypress\nDESCRIPTION: Demonstrates how to test and make assertions on elements within the HTML head section. The example shows accessing the document object and making assertions on title and meta tags using standard Cypress selectors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'\" />\n    <meta name=\"description\" content=\"This description is so meta\" />\n    <title>Test the HEAD content</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  </head>\n  <body></body>\n</html>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('The Document Metadata', () => {\n  beforeEach(() => {\n    cy.visit('/')\n  })\n\n  it('looks inside the head content using `cy.document()`', () => {\n    // this will yield the entire window.document object\n    // if you click on DOCUMENT from the command log,\n    // it will output the entire #document to the console\n    cy.document()\n  })\n\n  // or make assertions on any of the metadata in the head element\n\n  it('looks inside <title> tag', () => {\n    cy.get('head title').should('contain', 'Test the HEAD content')\n  })\n\n  it('looks inside <meta> tag for description', () => {\n    cy.get('head meta[name=\"description\"]').should(\n      'have.attr',\n      'content',\n      'This description is so meta'\n    )\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a UI-based Logout Custom Command\nDESCRIPTION: Implements a logout command that performs UI interactions to log out a user and verifies the authentication state has been cleared.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add('logout', () => {\n  cy.contains('Login').should('not.exist')\n  cy.get('.avatar').click()\n  cy.contains('Logout').click()\n  cy.get('h1').contains('Login')\n  cy.getCookie('auth_key').should('not.exist')\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Command with Options in Cypress\nDESCRIPTION: Shows how to execute a system command with additional options, such as timeout, environment variables, or behavior on non-zero exit codes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/exec.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.exec(command, options)\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Cypress\nDESCRIPTION: Basic tsconfig.json configuration for Cypress testing with TypeScript including compiler options and file inclusion patterns\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/typescript-support.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\"es5\", \"dom\"],\n    \"sourceMap\": true,\n    \"types\": [\"cypress\", \"node\"]\n  },\n  \"include\": [\"**/*.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatic Auth0 API Login Command\nDESCRIPTION: Implementation of programmatic Auth0 authentication using the OAuth token endpoint and localStorage management.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/auth0-authentication.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nCypress.Commands.add(\n  'loginByAuth0Api',\n  (username: string, password: string) => {\n    cy.log(`Logging in as ${username}`)\n    const client_id = Cypress.env('auth0_client_id')\n    const client_secret = Cypress.env('auth0_client_secret')\n    const audience = Cypress.env('auth0_audience')\n    const scope = Cypress.env('auth0_scope')\n\n    cy.request({\n      method: 'POST',\n      url: `https://${Cypress.env('auth0_domain')}/oauth/token`,\n      body: {\n        grant_type: 'password',\n        username,\n        password,\n        audience,\n        scope,\n        client_id,\n        client_secret,\n      },\n    }).then(({ body }) => {\n      const claims = jwt.decode(body.id_token)\n      const {\n        nickname,\n        name,\n        picture,\n        updated_at,\n        email,\n        email_verified,\n        sub,\n        exp,\n      } = claims\n\n      const item = {\n        body: {\n          ...body,\n          decodedToken: {\n            claims,\n            user: {\n              nickname,\n              name,\n              picture,\n              updated_at,\n              email,\n              email_verified,\n              sub,\n            },\n            audience,\n            client_id,\n          },\n        },\n        expiresAt: exp,\n      }\n\n      window.localStorage.setItem('auth0Cypress', JSON.stringify(item))\n\n      cy.visit('/')\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using Cypress Testing Library for Accessibility-Friendly Selectors\nDESCRIPTION: Demonstrates using the Cypress Testing Library plugin to find elements using accessibility-focused selectors. This approach uses ARIA roles and accessible names to target elements as screen readers would.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/accessibility-testing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// use the recommended ByRole Testing Library locator\ncy.findByRole('img', { name: 'Cypress Logo' }).should('be.visible')\n```\n\n----------------------------------------\n\nTITLE: Typing into a Textarea Element with Cypress\nDESCRIPTION: This snippet demonstrates how to use the cy.get() command to select a textarea element and then chain the .type() command to input text into it.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('textarea.post-body').type('This is an excellent post.')\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of Viewport Command in Cypress\nDESCRIPTION: Demonstrates proper usage of the viewport command with explicit dimensions or using device presets.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/viewport.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.viewport(550, 750) // Set viewport to 550px x 750px\ncy.viewport('iphone-6') // Set viewport to 375px x 667px\n```\n\n----------------------------------------\n\nTITLE: Clicking Specific Corner of Element in Cypress\nDESCRIPTION: Demonstrates how to click the top right corner of an image element using Cypress .click() command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/click.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('img').click('topRight')\n```\n\n----------------------------------------\n\nTITLE: Asserting List Element Length with Cypress - JavaScript\nDESCRIPTION: This snippet demonstrates how to use Cypress to retry an assertion until exactly three <li> elements with the class 'selected' are found. It assumes Cypress and related testing dependencies are installed and the <li.selected> selector matches the intended test subject. The command outputs a pass if three elements are found, and a failure otherwise, retrying as needed based on Cypress's default behavior.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/assertions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// retry until we find 3 matching <li.selected>\ncy.get('li.selected').should('have.length', 3)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Framework Definition for Solid.js in Cypress\nDESCRIPTION: This code snippet demonstrates how to create a Framework Definition for the Solid.js library. It includes the necessary dependencies, configuration options, and metadata for Cypress to recognize and support the framework.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/custom-frameworks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { defineFrameworkDefinition } = require('cypress')\n\nconst solidDep = {\n  type: 'solid-js',\n  name: 'Solid',\n  package: 'solid-js',\n  installer: 'solid-js',\n  description:\n    'A declarative, efficient, and flexible JavaScript library for building user interfaces.',\n  minVersion: '^1.6.0',\n}\n\nconst solidVitePlugin = {\n  type: 'solid-js-vite-plugin',\n  name: 'Vite Plugin Solid',\n  package: 'vite-plugin-solid',\n  installer: 'vite-plugin-solid',\n  description: 'A simple integration to run solid-js with vite',\n  minVersion: '^1.6.0 || ^2.0.0',\n}\n\nmodule.exports = defineFrameworkDefinition({\n  type: '@lmiller1990/cypress-ct-solid-js',\n  name: 'Solid.js',\n  supportedBundlers: ['vite'],\n  detectors: [solidDep],\n  dependencies: (bundler) => {\n    return [solidDep, solidVitePlugin]\n  },\n  icon: `\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 166 155.3\"><path d=\"M163 35S110-4 69 5l-3 1c-6 2-11 5-14 9l-2 3-15 26 26 5c11 7 25 10 38 7l46 9 18-30z\" fill=\"#76b3e1\"/><linearGradient id=\"a\" gradientUnits=\"userSpaceOnUse\" x1=\"27.5\" y1=\"3\" x2=\"152\" y2=\"63.5\"><stop offset=\".1\" stop-color=\"#76b3e1\"/><stop offset=\".3\" stop-color=\"#dcf2fd\"/><stop offset=\"1\" stop-color=\"#76b3e1\"/></linearGradient><path d=\"M163 35S110-4 69 5l-3 1c-6 2-11 5-14 9l-2 3-15 26 26 5c11 7 25 10 38 7l46 9 18-30z\" opacity=\".3\" fill=\"url(#a)\"/><path d=\"M52 35l-4 1c-17 5-22 21-13 35 10 13 31 20 48 15l62-21S92 26 52 35z\" fill=\"#518ac8\"/><linearGradient id=\"b\" gradientUnits=\"userSpaceOnUse\" x1=\"95.8\" y1=\"32.6\" x2=\"74\" y2=\"105.2\"><stop offset=\"0\" stop-color=\"#76b3e1\"/><stop offset=\".5\" stop-color=\"#4377bb\"/><stop offset=\"1\" stop-color=\"#1f3b77\"/></linearGradient><path d=\"M52 35l-4 1c-17 5-22 21npm install https://cdn.cypress.io/beta/npm/12.6.0/darwin-arm64/feature/ct-public-api-ab820f062d313fbef51665bdd1d883c69d89b3be/cypress.tgz-13 35 10 13 31 20 48 15l62-21S92 26 52 35z\" opacity=\".3\" fill=\"url(#b)\"/><linearGradient id=\"c\" gradientUnits=\"userSpaceOnUse\" x1=\"18.4\" y1=\"64.2\" x2=\"144.3\" y2=\"149.8\"><stop offset=\"0\" stop-color=\"#315aa9\"/><stop offset=\".5\" stop-color=\"#518ac8\"/><stop offset=\"1\" stop-color=\"#315aa9\"/></linearGradient><path d=\"M134 80a45 45 0 00-48-15L24 85 4 120l112 19 20-36c4-7 3-15-2-23z\" fill=\"url(#c)\"/><linearGradient id=\"d\" gradientUnits=\"userSpaceOnUse\" x1=\"75.2\" y1=\"74.5\" x2=\"24.4\" y2=\"260.8\"><stop offset=\"0\" stop-color=\"#4377bb\"/><stop offset=\".5\" stop-color=\"#1a336b\"/><stop offset=\"1\" stop-color=\"#1a336b\"/></linearGradient><path d=\"M114 115a45 45 0 00-48-15L4 120s53 40 94 30l3-1c17-5 23-21 13-34z\" fill=\"url(#d)\"/></svg>\n  `,\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of cy.task() in Cypress\nDESCRIPTION: Demonstrates the correct usage of cy.task() to log a message to the terminal. The task is defined in the plugin file and executed in the test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/task.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.task('log', 'This will be output to the terminal')\n```\n\nLANGUAGE: javascript\nCODE:\n```\non('task', {\n  log(message) {\n    console.log(message)\n\n    return null\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Timeout for Element Selection in Cypress\nDESCRIPTION: This snippet shows how to set a custom timeout for a Cypress command. It demonstrates setting a 10-second timeout for finding an element with a specific class.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Give this element 10 seconds to appear\ncy.get('.my-slow-selector', { timeout: 10000 })\n```\n\n----------------------------------------\n\nTITLE: Basic Wait Command Syntax in JavaScript\nDESCRIPTION: Shows the basic syntax variations for the cy.wait() command including waiting for time periods and aliases.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/wait.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.wait(time)\ncy.wait(alias)\ncy.wait(aliases)\ncy.wait(time, options)\ncy.wait(alias, options)\ncy.wait(aliases, options)\n```\n\n----------------------------------------\n\nTITLE: Using Closures with Cypress Commands\nDESCRIPTION: This snippet shows how to properly use closures with Cypress commands to access the yielded objects and perform actions on them.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/variables-and-aliases.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').then(($btn) => {\n\n  // store the button's text\n  const txt = $btn.text()\n\n  // submit a form\n  cy.get('form').submit()\n\n  // compare the two buttons' text\n  // and make sure they are different\n  cy.get('button').should(($btn2) => {\n    expect($btn2.text()).not.to.eq(txt)\n  })\n})\n\n// these commands run after all of the\n// other previous commands have finished\ncy.get(...).find(...).should(...)\n```\n\n----------------------------------------\n\nTITLE: Handling Non-breaking Spaces in Cypress Filter\nDESCRIPTION: Shows how to handle non-breaking space entities (&nbsp;) when using jQuery's :contains selector by using the Unicode value \\u00a0 instead of &nbsp;.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/filter.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div data-testid=\"testattr\">\n  <span>Hello&nbsp;world</span>\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[data-testid=\"testattr\"]').filter(':contains(\"Hello\\u00a0world\")')\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of .then() Command in Cypress\nDESCRIPTION: Examples showing the correct way to use the .then() command in Cypress to work with elements and location objects.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/then.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.nav').then(($nav) => {}) // Yields .nav as first arg\ncy.location().then((loc) => {}) // Yields location object as first arg\n```\n\n----------------------------------------\n\nTITLE: Using Aliases for DOM Elements in Cypress Tests\nDESCRIPTION: Shows how to alias a DOM element and use it later in a test with cy.get().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/as.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('disables on click', () => {\n  cy.get('button[type=submit]').as('submitBtn')\n  cy.get('@submitBtn').click().should('be.disabled')\n})\n```\n\n----------------------------------------\n\nTITLE: Intercept Command Syntax for Dynamic Request/Response Handling\nDESCRIPTION: Syntax options for cy.intercept that enable dynamic request modification and response stubbing using route handlers.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// spying, dynamic stubbing, request modification, etc.\ncy.intercept(url, routeHandler)\ncy.intercept(method, url, routeHandler)\ncy.intercept(routeMatcher, routeHandler)\ncy.intercept(url, routeMatcher, routeHandler)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Node Events for E2E and Component Testing\nDESCRIPTION: Example showing how to configure setupNodeEvents for both E2E and component testing to tap into, modify, or extend Cypress' internal behavior.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/configuration.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  e2e: {\n    setupNodeEvents(on, config) {\n      // e2e testing node events setup code\n    },\n  },\n  component: {\n    setupNodeEvents(on, config) {\n      // component testing node events setup code\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Document in Cypress Tests\nDESCRIPTION: Example showing how to get the document and perform operations on it using a callback function.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/document.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.document().then((doc) => {\n  // work with document element\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Way to Sequence Async Functions in Cypress\nDESCRIPTION: Shows the proper approach to sequencing multiple async functions using then() to ensure the second function executes after previous commands complete.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/wrap.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncy.wrap(foo())\n\ncy.get('some-button').click()\ncy.get('some-input').type(someValue)\ncy.get('some-submit-button')\n  .click()\n  .then(() => {\n    // this will execute `bar()` after the\n    // other cy.get(...) functions complete\n    cy.wrap(bar())\n  })\n```\n\n----------------------------------------\n\nTITLE: Clicking a Link in Navigation with Cypress\nDESCRIPTION: Example of clicking a link within a navigation element using Cypress .click() command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/click.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.nav > a').click()\n```\n\n----------------------------------------\n\nTITLE: Modifying Session Data Before Caching in Cypress\nDESCRIPTION: Demonstrates how to modify which session data is cached by manipulating cookies, localStorage, and sessionStorage within the setup function. Shows how to remove unwanted authentication data and add specific session identifiers.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/session.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.session('user', () => {\n  cy.visit('/login')\n  cy.get('name').type('user')\n  cy.get('password').type('p4ssw0rd123')\n  cy.get('#submit').click()\n  cy.url().should('contain', '/home')\n  // Remove session data we don't want to cache\n  cy.clearCookie('authId')\n  cy.window().then((win) => {\n    win.localStorage.removeItem('authToken')\n  })\n  // Add session data we do want to cache\n  cy.setCookie('session_id', '189jd09sufh33aaiidhf99d09')\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronicity with Automatic Retries in Cypress (JavaScript)\nDESCRIPTION: This Cypress snippet demonstrates how automatic waiting and retrying handle asynchronicity. After clicking a button, the assertion `cy.get('.list-item').contains('my text')` automatically retries until the element appears and contains the text, or times out, eliminating the need for explicit waits.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// Clicking a button\ncy.get('button').click()\n// Make assertion. No waiting necessary!\ncy.get('.list-item').contains('my text')\n```\n\n----------------------------------------\n\nTITLE: Creating Optional Multi-Type Commands in Cypress\nDESCRIPTION: Shows how to implement commands that can work with optional subjects while still maintaining type validation.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add(\n  'scrollTo',\n  {\n    prevSubject: ['optional', 'element', 'window'],\n  },\n  (subject, ...args) => {\n    if (subject) {\n      // ...\n    } else {\n      // ...\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Facebook Login with Cypress\nDESCRIPTION: Custom Cypress command implementation for Facebook authentication flow using cy.origin() to handle cross-origin navigation and login.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/social-authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction logIntoFacebook(username: string, password: string, name: string) {\n  cy.visit('http://localhost:3000')\n  cy.get('#qsLoginBtn').click()\n\n  cy.origin(Auth0Domain, () => {\n    cy.scrollTo('bottom')\n    cy.get('form[data-provider=\"facebook\"]').submit()\n  })\n\n  cy.origin(\n    'https://www.facebook.com',\n    {\n      args: {\n        username,\n        password,\n      },\n    },\n    ({ username, password }) => {\n      cy.get('input#email').type(username)\n      cy.get('input#pass').type(password, {\n        log: false,\n      })\n      cy.get('[type=\"submit\"]').contains('Log In').click()\n    }\n  )\n\n  cy.get('h6.dropdown-header').should('contain', name)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cypress Spy to Test Component Events in React\nDESCRIPTION: This snippet shows how to create a spy to validate that clicking the increment button in a Stepper component fires an onChange event with the incremented value. The spy is created, passed to the component, and then verified after the action is performed.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/get-started.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nit('clicking + fires a change event with the incremented value', () => {\n  const onChangeSpy = cy.spy().as('onChangeSpy')\n  cy.mount(<Stepper onChange={onChangeSpy} />)\n  cy.get('[data-cy=increment]').click()\n  cy.get('@onChangeSpy').should('have.been.calledWith', 1)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Spies in Cypress\nDESCRIPTION: Shows how to create a spy on an object's method to monitor its calls without modifying its behavior. Spies allow you to assert on call counts, arguments, and return values.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/stubs-spies-and-clocks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.spy(obj, 'method')\n```\n\n----------------------------------------\n\nTITLE: Migrating Selenium Wait and Click to Cypress\nDESCRIPTION: Demonstrates how to convert a Selenium wait and click action to Cypress syntax, which has built-in waiting functionality.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/selenium-to-cypress.mdx#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwait.until(EC.element_to_be_clickable((By.ID, \"myButton\"))).click()\n```\n\n----------------------------------------\n\nTITLE: Overwriting the 'get' Query with Logging in Cypress\nDESCRIPTION: Demonstrates how to overwrite the existing 'get' query in Cypress, adding console logging to track arguments and subject handling.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-queries.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.overwriteQuery('get', function (originalFn, ...args) {\n  console.log('get called with args:', args)\n\n  const innerFn = originalFn.apply(this, args)\n\n  return (subject) => {\n    console.log('get inner function called with subject:', subject)\n\n    return innerFn(subject)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Refactoring Login Functions that Return Values with cy.session()\nDESCRIPTION: Demonstrates how to refactor a login command that returns a value to work with cy.session() by moving assertions inside the setup function. This approach maintains the validation functionality while enabling session caching.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/session.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add('loginByApi', (username, password) => {\n  cy.session(username, () => {\n    cy.request('POST', `/api/login`, {\n      username,\n      password,\n    }).then((response) => {\n      expect(response.status).to.eq(200)\n    })\n  })\n})\n\nit('is a redundant test', () => {\n  /* which you can now delete! */\n})\n```\n\n----------------------------------------\n\nTITLE: Proper Order for Intercepting Requests in JavaScript\nDESCRIPTION: Demonstrates the correct approach for intercepting requests that occur on page load by setting up the intercept before visiting the page.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// this code is probably what you want\ncy.intercept('/users/**', {...})\ncy.visit('http://localhost:8000/#/app')\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress Module API Usage\nDESCRIPTION: Demonstrates basic usage of cypress.run() with configuration options including reporter, browser selection, base URL, and environment variables.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/module-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst cypress = require('cypress')\n\ncypress.run({\n  reporter: 'junit',\n  browser: 'chrome',\n  config: {\n    baseUrl: 'http://localhost:8080',\n    video: true,\n  },\n  env: {\n    login_url: '/login',\n    products_url: '/products',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Ensuring Element Visibility in Cypress Tests\nDESCRIPTION: This code demonstrates how to reveal hidden elements that might not be captured in coverage reports. It clicks on a dropdown toggle to reveal dropdown items before interacting with them.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/guides/address-coverage-gaps.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[data-cy=\"dropdown-toggle\"]').click() // Reveal hidden elements\ncy.get('[data-cy=\"dropdown-item\"]').should('be.visible').click()\n```\n\n----------------------------------------\n\nTITLE: Controlling Window Confirmations in Cypress Tests\nDESCRIPTION: This snippet demonstrates how to control and assert on multiple window confirmations in a Cypress test. It uses the 'window:confirm' event to handle confirmations and make assertions on their content.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/catalog-of-events.mdx#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nit('can control application confirms', (done) => {\n  let count = 0\n\n  // make sure you bind to this **before** the\n  // confirm method is called in your application\n  //\n  // this event will automatically be unbound when this\n  // test ends because it's attached to 'cy'\n  cy.on('window:confirm', (str) => {\n    count += 1\n\n    switch (count) {\n      case 1:\n        expect(str).to.eq('first confirm')\n      // returning nothing here automatically\n      // accepts the confirmation\n      case 2:\n        expect(str).to.eq('second confirm')\n\n        // reject the confirmation\n        return false\n\n      case 3:\n        expect(str).to.eq('third confirm')\n\n        // don't have to return true but it works\n        // as well\n        return true\n\n      case 4:\n        expect(str).to.eq('third confirm was true')\n\n        // using mocha's async done callback to finish\n        // this test so we are guaranteed everything\n        // got to this point okay without throwing an error\n        done()\n    }\n  })\n\n  // click the button causing the confirm to fire\n  cy.get('button').click()\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Two-Way Data Binding with Writable Signal in Angular/Cypress\nDESCRIPTION: Illustrates testing two-way data binding for model() signals in an Angular component using Cypress. It covers mounting the component, updating the signal, verifying component state, simulating user interaction, and checking the updated signal value.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/examples.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nlet count = signal(5)\ncy.mount(TestComponent, {\n  componentProperties: {\n    title: 'Test Component',\n    count,\n  },\n})\n\ncy.then(() => {\n  // now set the model() through a signal to update the binding in the component\n  count.set(8)\n})\n\ncy.get('[data-cy=\"test-component-count-display\"]').should('have.text', '8')\n\n// some action occurs that changes the count to 9 inside the component, which updates the binding in our test\ncy.get('[data-cy=\"test-component-count-incr\"]').click()\ncy.get('[data-cy=\"test-component-count-display\"]').should('have.text', '9')\ncy.then(() => {\n  expect(count()).to.equal(9)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Command to Verify Local Storage Token\nDESCRIPTION: Defines a custom command that checks if a token in localStorage matches an expected value, useful for authentication verification.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add('checkToken', (token) => {\n  cy.window().its('localStorage.token').should('eq', token)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Cypress Spy to Test Component Events in Vue\nDESCRIPTION: This snippet shows how to create a spy to validate that clicking the increment button in a Vue Stepper component fires an onChange event with the expected value. The spy is passed to the component as a prop and then verified after the action.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/get-started.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nit('clicking + fires a change event with the incremented value', () => {\n  const onChangeSpy = cy.spy().as('onChangeSpy')\n  cy.mount(Stepper, { props: { onChange: onChangeSpy } })\n  cy.get('[data-cy=increment]').click()\n  cy.get('@onChangeSpy').should('have.been.calledWith', 1)\n})\n```\n\n----------------------------------------\n\nTITLE: Using cy.get() within .within() in Cypress\nDESCRIPTION: Demonstrates how to use cy.get() inside a .within() command to limit the search scope to a specific form element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/get.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('form').within(() => {\n  cy.get('input').type('Pamela') // Only yield inputs within form\n  cy.get('textarea').type('is a developer') // Only yield textareas within form\n})\n```\n\n----------------------------------------\n\nTITLE: Spying on Network Requests in Cypress (JavaScript)\nDESCRIPTION: This Cypress snippet demonstrates how to use `cy.intercept()` to spy on network requests matching the pattern '/users/**'. Cypress will automatically wait for any matching request initiated after the intercept is defined to complete before proceeding with subsequent commands like `cy.get('button')`.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nit('should display a Load More button after fetching and displaying a list of users', () => {\n  cy.visit('/users')\n  cy.intercept('/users/**')\n  cy.get('button').contains('Load More')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Session IDs with Multiple Parameters in JavaScript\nDESCRIPTION: Proper implementation of a login function with cy.session() that uses a composite array as the session ID to ensure uniqueness. This approach prevents session collisions when parameters change.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/session.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst login = (name, token, password, uniqueKey) => {\n  cy.session([name, uniqueKey], () => {\n    cy.visit('/login')\n    cy.get('[data-test=name]').type(name)\n    cy.get('[data-test=token]').type(token)\n    cy.get('[data-test=password]').type(password)\n    cy.get('#submit').click()\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Parallel Test Execution Configuration in CircleCI\nDESCRIPTION: Configuration for running Cypress tests across multiple CI machines in parallel. This setup enables test parallelization across 4 machines with test recording enabled.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/circleci.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\norbs:\n  cypress: cypress-io/cypress@3\nworkflows:\n  build:\n    jobs:\n      - cypress/run:\n          start-command: 'npm run start'\n          cypress-command: 'npx cypress run --parallel --record --group all tests'\n          parallelism: 4\n```\n\n----------------------------------------\n\nTITLE: Replacing a Method with a Custom Implementation in Cypress\nDESCRIPTION: Demonstrates how to replace a method with a custom implementation using callsFake() to execute custom code when the stubbed method is called.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/stub.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// assume App.start calls util.addListeners\nlet listenersAdded = false\n\ncy.stub(util, 'addListeners').callsFake(() => {\n  listenersAdded = true\n})\n\nApp.start()\nexpect(listenersAdded).to.be.true\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Existence with Cypress - JavaScript\nDESCRIPTION: This snippet demonstrates checking that a loading spinner element (identified by data-testid=\"loading\") no longer exists in the DOM. The assertion .should('not.exist') retries until the element is gone, which is commonly used to wait for asynchronous UI updates. Requires Cypress and matching test IDs.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/assertions.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// retry until loading spinner no longer exists\ncy.get('[data-testid=\"loading\"]').should('not.exist')\n```\n\n----------------------------------------\n\nTITLE: Customizing cy.mount() for Redux in Cypress\nDESCRIPTION: Shows how to create a custom mount command that wraps components with a Redux Provider for testing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/react/examples.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { mount } from 'cypress/react'\nimport { Provider } from 'react-redux'\nimport { getStore } from '../../src/store'\n\nCypress.Commands.add('mount', (component, options = {}) => {\n  // Use the default store if one is not provided\n  const { reduxStore = getStore(), ...mountOptions } = options\n\n  const wrapped = <Provider store={reduxStore}>{component}</Provider>\n\n  return mount(wrapped, mountOptions)\n})\n```\n\n----------------------------------------\n\nTITLE: Comparing cy.get() and .find() in Cypress\nDESCRIPTION: Illustrates the difference between cy.get() and .find() commands in terms of their search scope and behavior.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/get.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#comparison')\n  .get('div')\n  // finds the div.test-title outside the #comparison\n  // and the div.feature inside\n  .should('have.class', 'test-title')\n  .and('have.class', 'feature')\ncy.get('#comparison')\n  .find('div')\n  // the search is limited to the tree at #comparison element\n  // so it finds div.feature only\n  .should('have.length', 1)\n  .and('have.class', 'feature')\n```\n\n----------------------------------------\n\nTITLE: Basic GitHub Actions Workflow for Cypress Tests\nDESCRIPTION: A minimal GitHub Actions workflow configuration that runs Cypress tests on push events. It checks out the code, builds the project, starts the application, and runs Cypress tests using the official Cypress GitHub Action.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/github-actions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  cypress-run:\n    steps:\n      - uses: cypress-io/github-action@v6\n```\n\n----------------------------------------\n\nTITLE: Correct Trigger Usage Example\nDESCRIPTION: Shows proper usage of trigger command to fire mousedown event on a link element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/trigger.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('a').trigger('mousedown') // Trigger mousedown event on link\n```\n\n----------------------------------------\n\nTITLE: Setting Default Timeouts in Cypress Configuration\nDESCRIPTION: TypeScript configuration example for setting default command timeout and page load timeout in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/config.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  defaultCommandTimeout: 4000,\n  pageLoadTimeout: 30000,\n}\n```\n\n----------------------------------------\n\nTITLE: Overwriting an Existing Query in Cypress\nDESCRIPTION: Shows how to overwrite an existing query in Cypress. The callback function receives the original function and any arguments, allowing modification of the query's behavior.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-queries.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.overwriteQuery('get', function (originalFn, ...args) {\n  return originalFn.apply(this, args)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Login Commands with Unique Session IDs\nDESCRIPTION: Demonstrates how to implement multiple login commands using cy.session() with unique identifiers to prevent session collisions. The example shows form-based login and API-based login functions with properly differentiated session IDs.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/session.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst loginByForm = (name, password) => {\n  cy.session(['loginByForm', name], () => {\n    cy.visit('/login')\n    cy.get('[data-test=name]').type(name)\n    cy.get('[data-test=password]').type(password)\n    cy.get('#submit').click()\n    cy.url().should('contain', '/home')\n  })\n}\n\nconst loginByApi = (name, password) => {\n  cy.session(['loginByApi', name], () => {\n    cy.request({\n      method: 'POST',\n      url: '/api/login',\n      body: { name, password },\n    }).then(({ body }) => {\n      window.localStorage.setItem('authToken', body.token)\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Focus, Type and Blur Sequence on a Textarea in Cypress\nDESCRIPTION: Example demonstrating a complete interaction sequence: focusing on a textarea, typing text, and then blurring the element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/focus.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// yields the <textarea> for further chaining\ncy.get('textarea').focus().type('Nice Product!').blur()\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Check Command in Cypress\nDESCRIPTION: Demonstrates proper usage of the check command on checkbox and radio elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/check.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[type=\"checkbox\"]').check() // Check checkbox element\ncy.get('[type=\"radio\"]').first().check() // Check first radio element\n```\n\n----------------------------------------\n\nTITLE: Using .debug() helper in Cypress tests\nDESCRIPTION: Example showing how to use Cypress's built-in .debug() method as a shortcut for debugging. This method exposes the current subject as a variable in Developer Tools for console interaction.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/debugging.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('let me debug like a fiend', () => {\n  cy.visit('/my/page/path')\n\n  cy.get('[data-testid=\"selector-in-question\"]').debug()\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Form Validation in Cypress\nDESCRIPTION: This snippet shows how to test custom form validation in Cypress. It includes HTML and JavaScript for setting up custom validation, and Cypress commands to test the validation behavior.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <form>\n    <input type=\"email\" id=\"email\" name=\"email\" />\n    <button type=\"submit\">Submit</button>\n  </form>\n  <script>\n    const email = document.getElementById('email')\n\n    email.addEventListener('input', function (event) {\n      if (email.validity.typeMismatch) {\n        email.setCustomValidity('I expect an email!')\n      } else {\n        email.setCustomValidity('')\n      }\n    })\n  </script>\n</body>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input:invalid').should('have.length', 0)\ncy.get('[type=\"email\"]').type('not_an_email')\ncy.get('[type=\"submit\"]').click()\ncy.get('input:invalid').should('have.length', 1)\ncy.get('[type=\"email\"]').then(($input) => {\n  expect($input[0].validationMessage).to.eq('I expect an email!')\n})\n```\n\n----------------------------------------\n\nTITLE: Random Element Creation in Application Code\nDESCRIPTION: Example application code that randomly creates either an input or textarea element on button click, demonstrating synchronous DOM manipulation.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/conditional-testing.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n$('button').on('click', (e) => {\n  // do something synchronously randomly\n  if (Math.random() < 0.5) {\n    // append an input\n    $('<input />').appendTo($('body'))\n  } else {\n    // or append a textarea\n    $('<textarea />').appendTo($('body'))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Debugging Cypress Commands with Debug Statement\nDESCRIPTION: Demonstrates how to use the debug() command before an action to pause execution and inspect element state. This allows developers to investigate why Cypress might consider an element non-actionable.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/interacting-with-elements.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// break on a debugger before the action command\ncy.get('button').debug().click()\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress Test Setup in Bitbucket Pipelines\nDESCRIPTION: Basic configuration for running Cypress tests in Bitbucket Pipelines using a Cypress Docker image with Firefox browser.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/bitbucket-pipelines.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimage: cypress/browsers:22.12.0\n\npipelines:\n  default:\n    - step:\n        script:\n          # install dependencies\n          - npm ci\n          # start the server in the background\n          - npm run start &\n          # run Cypress tests in Firefox\n          - npx cypress run --browser firefox\n```\n\n----------------------------------------\n\nTITLE: Cross-Origin Navigation Examples\nDESCRIPTION: Various patterns for navigating between origins including correct and incorrect approaches.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/origin.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Do things in primary origin...\n\ncy.origin('example.cypress.io', () => {\n  // Visit https://example.cypress.io/history/founder\n  cy.visit('/history/founder')\n  cy.get('h1').contains('About our Founder')\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Do things in primary origin...\n\ncy.visit('https://example.cypress.io/history/founder')\n\n// The cy.origin block is required to interact with the cross-origin page.\ncy.origin('example.cypress.io', () => {\n  cy.get('h1').contains('About our Founder')\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Do things in primary origin...\n\ncy.visit('https://www.cypress.io/history/founder')\n\n// This command will fail, it's executed on localhost but the application is at cypress.io\ncy.get('h1').contains('About our Founder, Marvin Acme')\n```\n\n----------------------------------------\n\nTITLE: Importing mount function from Cypress React\nDESCRIPTION: Shows how to import the mount function from the Cypress React module, which is used to mount React components for testing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/react/api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount } from 'cypress/react'\n```\n\n----------------------------------------\n\nTITLE: Example of a failing Cypress test for error anatomy\nDESCRIPTION: A sample test that will fail because the element's center is hidden from view. Used to demonstrate how errors are displayed and structured in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/debugging.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nit('reroutes on users page', () => {\n  cy.contains('Users').click()\n  cy.url().should('include', 'users')\n})\n```\n\n----------------------------------------\n\nTITLE: Using Fixture Data with Test Context\nDESCRIPTION: Demonstrates how to store and access fixture data using the test context object with function callbacks.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/fixture.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('User page', () => {\n  beforeEach(function () {\n    // \"this\" points at the test context object\n    cy.fixture('user').then((user) => {\n      // \"this\" is still the test context object\n      this.user = user\n    })\n  })\n\n  // the test callback is in \"function () { ... }\" form\n  it('has user', function () {\n    // this.user exists\n    expect(this.user.firstName).to.equal('Jane')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Mounting Angular Components in Cypress Tests\nDESCRIPTION: Demonstrates mounting an Angular component with services and module imports, as well as mounting using a component template string. Shows how to test component interactions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mount } from '@cypress/angular'\nimport { StepperComponent } from './stepper.component'\nimport { MyService } from 'services/my.service'\nimport { SharedModule } from 'shared/shared.module'\nit('mounts', () => {\n  mount(StepperComponent, {\n    providers: [MyService],\n    imports: [SharedModule],\n  })\n  cy.get('[data-cy=increment]').click()\n  cy.get('[data-cy=counter]').should('have.text', '1')\n})\n\n// or\n\nit('mounts with template', () => {\n  mount('<app-stepper></app-stepper>', {\n    declarations: [StepperComponent],\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Responsive Navigation with Viewport Changes\nDESCRIPTION: Example of testing responsive behavior by changing viewport size and verifying UI elements appear or disappear appropriately.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/viewport.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#navbar').should('be.visible')\n\ncy.viewport(320, 480)\n\n// the navbar should have collapse since our screen is smaller\ncy.get('#navbar').should('not.be.visible')\ncy.get('.navbar-toggle').should('be.visible').click()\ncy.get('.nav').find('a').should('be.visible')\n```\n\n----------------------------------------\n\nTITLE: Cypress Test with Database Reset and Seeding\nDESCRIPTION: JavaScript code demonstrating how to reset and seed a database before each test using Cypress commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/end-to-end-testing/testing-your-app.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('The Home Page', () => {\n  beforeEach(() => {\n    // reset and seed the database prior to every test\n    cy.exec('npm run db:reset && npm run db:seed')\n  })\n\n  it('successfully loads', () => {\n    cy.visit('/')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Caching Sessions Across Cypress Specs\nDESCRIPTION: Shows how to use the same session across multiple spec files in the same Cypress run by setting the cacheAcrossSpecs option to true. This avoids repeatedly logging in for each spec file, improving test efficiency.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/session.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst login = (name = 'user1') => {\n  cy.session(\n    name,\n    () => {\n      cy.request({\n        method: 'POST',\n        url: '/login',\n        body: { name, password: 's3cr3t' },\n      }).then(({ body }) => {\n        window.localStorage.setItem('authToken', body.token)\n      })\n    },\n    {\n      validate() {\n        cy.visit('/user_profile')\n        cy.contains(`Hello ${name}`)\n      },\n      cacheAcrossSpecs: true,\n    }\n  )\n}\n\n// profile.cy.js\nit('can view profile', () => {\n  login()\n})\n\n// add_blog.cy.js\nit('can create a blog post', () => {\n  login()\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Cypress Using Package Managers (npm, Yarn, or pnpm)\nDESCRIPTION: Command example referenced through a component that displays the appropriate installation commands for npm, Yarn, or pnpm to install Cypress as a development dependency.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/get-started/install-cypress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n<CypressInstallCommands />\n```\n\n----------------------------------------\n\nTITLE: Creating Commands with Element Validation in Cypress\nDESCRIPTION: Shows implementation of commands that require specific subject types like elements, documents, or windows.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add(\n  'click',\n  {\n    prevSubject: 'element',\n  },\n  (subject, options) => {\n    // receives the previous subject and it's\n    // guaranteed to be an element\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Class with Timeout in Event Handler\nDESCRIPTION: Shows JavaScript code that adds a class to a button after a 2-second delay when clicked. This demonstrates why Cypress's retry-ability is important for testing asynchronous behaviors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n$('button').on('click', (e) => {\n  setTimeout(() => {\n    $(e.target).addClass('active')\n  }, 2000)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress mount command for global Vue components\nDESCRIPTION: Custom Cypress mount command to register global components for testing. This ensures that components registered globally in the main application are available during component tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/vue/examples.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount } from 'cypress/vue'\nimport Button from '../../src/components/Button.vue'\n\nCypress.Commands.add('mount', (component, options = {}) => {\n  // Setup options object\n  options.global = options.global || {}\n  options.global.components = options.global.components || {}\n\n  // Register global components\n  options.global.components['Button'] = Button\n\n  return mount(component, options)\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Cypress Filter with Command Log\nDESCRIPTION: A complete example of using the filter command to find an active list item in a navigation menu. This example would display in the Cypress Command Log.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/filter.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.left-nav>.nav').find('>li').filter('.active')\n```\n\n----------------------------------------\n\nTITLE: NPM Scripts for Browser-Specific Test Execution\nDESCRIPTION: Package.json configuration showing npm script shortcuts for running Cypress tests in specific browsers.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cross-browser-testing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"cy:run:chrome\": \"cypress run --browser chrome\",\n  \"cy:run:firefox\": \"cypress run --browser firefox\"\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Fixture Data Before Use\nDESCRIPTION: Demonstrates how to modify fixture data before using it to intercept network requests during tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/fixture.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncy.fixture('user').then((user) => {\n  user.firstName = 'Jane'\n  cy.intercept('GET', '/users/1', user).as('getUser')\n})\n\n-{cy.visit('/users')::cy.mount(<Users />)}-\ncy.wait('@getUser').then(({ request }) => {\n  expect(request.body.firstName).to.eq('Jane')\n})\n```\n\n----------------------------------------\n\nTITLE: Testing One-Way Data Binding with Writable Signal in Angular/Cypress\nDESCRIPTION: Demonstrates how to use a writable signal to test one-way data binding for input() signals in an Angular component. It shows mounting a component, asserting initial state, updating the signal, and verifying the updated state.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/examples.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst myTitlePropAsSignal = signal('Test Component')\ncy.mount(TestComponent, {\n  componentProperties: {\n    title: myTitlePropAsSignal,\n  },\n})\n\ncy.get('[data-cy=\"test-component-title-display\"]').should(\n  'have.text',\n  'Test Component'\n)\ncy.then(() => {\n  // now set the input() through a signal to update the one-way binding\n  myTitlePropAsSignal.set('FooBar')\n})\n\ncy.get('[data-cy=\"test-component-title-display\"]').should('have.text', 'FooBar')\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Login Custom Command with Session Caching\nDESCRIPTION: Shows how to enhance a custom login command by adding session caching, with examples of basic implementation and implementation with session validation.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/session.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add('login', (username, password) => {\n  cy.visit('/login')\n  cy.get('[data-test=name]').type(username)\n  cy.get('[data-test=password]').type(password)\n  cy.get('form').contains('Log In').click()\n  cy.url().should('contain', '/login-successful')\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add('login', (username, password) => {\n  cy.session([username, password], () => {\n    cy.visit('/login')\n    cy.get('[data-test=name]').type(username)\n    cy.get('[data-test=password]').type(password)\n    cy.get('form').contains('Log In').click()\n    cy.url().should('contain', '/login-successful')\n  })\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add('login', (username, password) => {\n  cy.session(\n    [username, password],\n    () => {\n      cy.visit('/login')\n      cy.get('[data-test=name]').type(username)\n      cy.get('[data-test=password]').type(password)\n      cy.get('form').contains('Log In').click()\n      cy.url().should('contain', '/login-successful')\n    },\n    {\n      validate() {\n        cy.request('/whoami').its('status').should('eq', 200)\n      },\n    }\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Intercept Command Syntax for Response Stubbing\nDESCRIPTION: Syntax options for using cy.intercept to both spy on requests and provide static response stubs.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// spying and response stubbing\ncy.intercept(url, staticResponse)\ncy.intercept(method, url, staticResponse)\ncy.intercept(routeMatcher, staticResponse)\ncy.intercept(url, routeMatcher, staticResponse)\n```\n\n----------------------------------------\n\nTITLE: Using cy.origin() for Cross-Origin Testing in Cypress\nDESCRIPTION: Example demonstrating the correct way to handle cross-origin navigation within a single test using the cy.origin() command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cross-origin-testing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('navigates', () => {\n  cy.visit('https://example.cypress.io')\n  cy.visit('https://docs.cypress.io')\n  cy.origin('https://docs.cypress.io', () => {\n    cy.get('selector') // yup all good\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using .pause() command in Cypress tests\nDESCRIPTION: Example demonstrating the .pause() command which allows stepping through test commands one by one, enabling inspection of the application state after each command execution.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/debugging.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nit('adds items', () => {\n  cy.pause()\n  cy.get('[data-testid=\"new-todo\"]')\n  // more commands\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Functionality as a JavaScript Function in Cypress\nDESCRIPTION: This snippet demonstrates how to create a reusable search function for a specific spec file instead of a custom command. It includes intercepting network requests, typing search terms, and handling different search result scenarios.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst search = (term, options = {}) => {\n  // example massaging to defaults\n  _.defaults(options, {\n    headers: {},\n  })\n\n  const { fixture, headers } = options\n\n  // return cy chain here so we can\n  // chain off this function below\n  return cy\n    .log(`Searching for: ${term} `)\n    .intercept('GET', '/search/**', (req) => {\n      req.reply({\n        statusCode: 200,\n        body: `fixture:${fixture}`,\n        headers: headers,\n      })\n    })\n    .as('getSearchResults')\n    .get('#search')\n    .type(term)\n    .wait('@getSearchResults')\n}\n\nit('displays a list of search results', () => {\n  cy.visit('/page')\n    .then(() => {\n      search('cypress.io', {\n        fixture: 'list',\n      }).then((reqRes) => {\n        // do something with the '@getSearchResults'\n        // request such as make assertions on the\n        // request body or url params\n        // {\n        //   url: 'http://app.com/search?cypress.io'\n        //   method: 'GET',\n        //   duration: 123,\n        //   request: {...},\n        //   response: {...},\n        // }\n      })\n    })\n    .get('#results li')\n    .should('have.length', 5)\n    .get('#pagination')\n    .should('not.exist')\n})\n\nit('displays no search results', () => {\n  cy.visit('/page')\n    .then(() => {\n      search('cypress.io', {\n        fixture: 'zero',\n      })\n    })\n    .get('#results')\n    .should('contain', 'No results found')\n})\n\nit('paginates many search results', () => {\n  cy.visit('/page')\n    .then(() => {\n      search('cypress.io', {\n        fixture: 'list',\n        headers: {\n          // trick our app into thinking\n          // there's a bunch of pages\n          'x-pagination-total': 3,\n        },\n      })\n    })\n    .get('#pagination')\n    .should(($pagination) => {\n      // should offer to goto next page\n      expect($pagination).to.contain('Next')\n\n      // should have provided 3 page links\n      expect($pagination.find('li.page')).to.have.length(3)\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Correctly Waiting for Values in Cypress Using Callback\nDESCRIPTION: A demonstration of the correct way to wait for and assert on a value that changes asynchronously, using a callback function with .should() for better retry-ability.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/retry-ability.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[data-testid=\"random-number\"]').should(($div) => {\n  // all the code inside here will retry\n  // until it passes or times out\n  const n = parseFloat($div.text())\n\n  expect(n).to.be.gte(1).and.be.lte(10)\n})\n```\n\n----------------------------------------\n\nTITLE: Drag-Drop File Operation in Cypress\nDESCRIPTION: Shows how to simulate dropping a file onto the document using the selectFile command with drag-drop action option.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/selectfile.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncy.document().selectFile('file.json', { action: 'drag-drop' })\n```\n\n----------------------------------------\n\nTITLE: Counting Files in a Folder Using cy.task() in Cypress\nDESCRIPTION: Shows how to use cy.task() to count the number of files in a specified folder. The task returns a promise that resolves with the file count.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/task.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.task('countFiles', 'cypress/downloads').then((count) => { ... })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs'\n\non('task', {\n  countFiles(folderName) {\n    return new Promise((resolve, reject) => {\n      fs.readdir(folderName, (err, files) => {\n        if (err) {\n          return reject(err)\n        }\n\n        resolve(files.length)\n      })\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Class Name Pattern in Cypress\nDESCRIPTION: Shows how to assert that an element's class name matches a pattern using a 'should' callback function with regex.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.docs-header')\n  .find('div')\n  // .should(cb) callback function will be retried\n  .should(($div) => {\n    expect($div).to.have.length(1)\n\n    const className = $div[0].className\n\n    expect(className).to.match(/heading-/)\n  })\n  // .then(cb) callback is not retried,\n  // it either passes or fails\n  .then(($div) => {\n    expect($div).to.have.text('Introduction')\n  })\n```\n\n----------------------------------------\n\nTITLE: Finding and Clicking a Button in Shadow DOM with Cypress\nDESCRIPTION: Demonstrates how to find and click a button inside the shadow DOM using the .shadow() command in combination with other Cypress commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/shadow.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// yields [#shadow-root (open)]\ncy.get('.shadow-host').shadow().find('.my-button').click()\n```\n\n----------------------------------------\n\nTITLE: Aliasing and Asserting on HTTP Requests in Cypress\nDESCRIPTION: This snippet demonstrates how to alias an HTTP request made with cy.request() and later assert on its properties in a Cypress test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/variables-and-aliases.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncy.request('https://jsonplaceholder.cypress.io/comments').as('comments')\n\n// other test code here\n\ncy.get('@comments').should((response) => {\n  if (response.status === 200) {\n      expect(response).to.have.property('duration')\n    } else {\n      // whatever you want to check here\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Automatic Retries with 'invoke'\nDESCRIPTION: Shows how '.invoke()' automatically retries calling a method until the returned value satisfies the attached assertions, useful for asynchronous state changes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/invoke.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet message = 'hello'\nconst english = {\n  greeting() {\n    return message\n  },\n}\n\nsetTimeout(() => {\n  message = 'bye'\n}, 1000)\n\n// initially the english.greeting() returns \"hello\" failing the assertion.\n// .invoke('greeting') tries again and again until after 1 second\n// the returned message becomes \"bye\" and the assertion passes\ncy.wrap(english).invoke('greeting').should('equal', 'bye')\n```\n\n----------------------------------------\n\nTITLE: Passing Timeout Option to Assertions in Cypress\nDESCRIPTION: Shows how timeout options are passed down to chained assertions, allowing them to retry for the specified duration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/and.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input', {timeout: 10000}).should('have.value', '10').and('have.class', 'error')\n                         ↲\n  // timeout here will be passed down to the '.and()'\n  // and it will retry for up to 10 secs\n```\n\n----------------------------------------\n\nTITLE: Taking a Screenshot with Custom Filename in Cypress\nDESCRIPTION: Shows how to take a screenshot and save it with a specific filename using the Cypress .screenshot() command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/screenshot.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// screenshot will be saved as\n// cypress/screenshots/spec.cy.js/clicking-on-nav.png\ncy.screenshot('clicking-on-nav')\n```\n\n----------------------------------------\n\nTITLE: Visit Command in beforeEach Hook in JavaScript\nDESCRIPTION: Shows how to set up a visit command in a beforeEach hook to navigate to a specific page before each test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  cy.visit('https://example.cypress.io/commands/viewport')\n})\n```\n\n----------------------------------------\n\nTITLE: Making Assertions on Wrapped Objects\nDESCRIPTION: Shows how to make assertions on properties of a wrapped object using should and and commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/wrap.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.wrap({ amount: 10 }).should('have.property', 'amount').and('eq', 10)\n```\n\n----------------------------------------\n\nTITLE: Confirming Window Properties After Visit\nDESCRIPTION: Demonstrates how to chain commands after cy.visit() to validate window properties like navigator language.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('/') // yields the window object\n  .its('navigator.language') // yields window.navigator.language\n  .should('equal', 'en-US') // asserts the expected value\n```\n\n----------------------------------------\n\nTITLE: Using Basic Stubs in Cypress\nDESCRIPTION: Demonstrates various ways to create and configure stubs in Cypress. Shows how to create standalone stubs, replace object methods, force return values, handle specific arguments, and work with promises.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/stubs-spies-and-clocks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// create a standalone stub (generally for use in unit test)\ncy.stub()\n\n// replace obj.method() with a stubbed function\ncy.stub(obj, 'method')\n\n// force obj.method() to return \"foo\"\ncy.stub(obj, 'method').returns('foo')\n\n// force obj.method() when called with \"bar\" argument to return \"foo\"\ncy.stub(obj, 'method').withArgs('bar').returns('foo')\n\n// force obj.method() to return a promise which resolves to \"foo\"\ncy.stub(obj, 'method').resolves('foo')\n\n// force obj.method() to return a promise rejected with an error\ncy.stub(obj, 'method').rejects(new Error('foo'))\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of the Screenshot Command in Cypress\nDESCRIPTION: Demonstrates the proper way to use the screenshot command, either to capture the entire viewport or a specific element selected with a CSS selector.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/screenshot.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.screenshot()\ncy.get('.post').screenshot()\n```\n\n----------------------------------------\n\nTITLE: Adding Hapi Middleware for Code Coverage Collection\nDESCRIPTION: Shows how to add the code coverage middleware to a Hapi server. The middleware is conditionally registered only if global coverage object exists.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/code-coverage.mdx#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nif (global.__coverage__) {\n  require('@cypress/code-coverage/middleware/hapi')(server)\n}\n```\n\n----------------------------------------\n\nTITLE: Long Press Event Simulation\nDESCRIPTION: Shows how to simulate a long press event using mousedown, wait, and mouseup triggers.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/trigger.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.target').trigger('mousedown')\ncy.wait(1000)\ncy.get('.target').trigger('mouseup')\n```\n\n----------------------------------------\n\nTITLE: Passing Multiple Arguments to cy.task() in Cypress\nDESCRIPTION: Shows how to pass multiple arguments to a task using an object. The task function deconstructs the object to access individual properties.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/task.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.task('hello', { greeting: 'Hello', name: 'World' })\n```\n\nLANGUAGE: typescript\nCODE:\n```\non('task', {\n  hello({ greeting, name }) {\n    console.log('%s, %s', greeting, name)\n\n    return null\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Complete UI Coverage Configuration Structure in JSON\nDESCRIPTION: This JSON structure shows all available configuration options for Cypress UI Coverage, including element filters, views, view filters, attribute filters, element groups, and significant attributes. These settings can be used to customize how UI Coverage behaves with your application.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"elementFilters\": [\n    {\n      \"selector\": string,\n      \"include\": boolean\n    }\n  ],\n  \"views\": [\n    {\n      \"pattern\": string,\n      \"groupBy\": [\n        string\n      ]\n    }\n  ],\n  \"viewFilters\": [\n    {\n      \"pattern\": string,\n      \"include\": boolean\n    }\n  ],\n  \"uiCoverage\": {\n    \"attributeFilters\": [\n      {\n        \"attribute\": string,\n        \"value\": string,\n        \"include\": boolean\n      }\n    ],\n    \"elementGroups\": [\n      {\n        \"selector\": string,\n        \"name\": string\n      }\n    ],\n    \"significantAttributes\": [\n      string\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Angular Event Handlers with Spies\nDESCRIPTION: Demonstrates how to test event handling in Angular components by using Cypress spies to verify that events are emitted correctly. The example tests that clicking an increment button fires a change event with the updated value.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/examples.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nit('clicking + fires a change event with the incremented value', () => {\n  cy.mount(StepperComponent, {\n    componentProperties: {\n      change: createOutputSpy('changeSpy'),\n    },\n  })\n  cy.get('[data-cy=increment]').click()\n  cy.get('@changeSpy').should('have.been.calledWith', 1)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Command Line Environment Variables\nDESCRIPTION: Example showing how to set environment variables through the command line using the CYPRESS_ prefix. Variables are automatically converted to appropriate types.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/env.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nCYPRESS_HOST=laura.dev CYPRESS_IS_CI=true CYPRESS_MY_ID=123 cypress run\n```\n\n----------------------------------------\n\nTITLE: Basic GET Request Example\nDESCRIPTION: Demonstrates the correct usage of a simple GET request in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/request.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.request('http://dev.local/seed')\n```\n\n----------------------------------------\n\nTITLE: Browser-Specific Test Configuration in Cypress\nDESCRIPTION: JavaScript code demonstrating how to configure tests to run or be excluded based on specific browsers using test configuration options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cross-browser-testing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Run the test if Cypress is running\n// using the built-in Electron browser\nit('has access to clipboard', { browser: 'electron' }, () => {\n  // ...\n})\n\n// Run the test if Cypress is run via Firefox\nit('Download extension in Firefox', { browser: 'firefox' }, () => {\n  cy.get('#dl-extension').should('contain', 'Download Firefox Extension')\n})\n\n// Run happy path tests if Cypress is run via Firefox\ndescribe('happy path suite', { browser: 'firefox' }, () => {\n  it('...')\n})\n\n// Ignore test if Cypress is running via Chrome\n// This test is not recorded to Cypress Cloud\nit('Show warning outside Chrome', { browser: '!chrome' }, () => {\n  cy.get('.browser-warning').should(\n    'contain',\n    'For optimal viewing, use Chrome browser'\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Tab Focus Order in Forms with cy.press()\nDESCRIPTION: Example test that verifies the correct focus order in a login form when Tab key is pressed, moving from email field to password field.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/press.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nit('moves focus to the next form element when pressing Tab', () => {\n  cy.visit('/my-login')\n  cy.get('input.email').type('username')\n  cy.press(Cypress.Keyboard.Keys.TAB)\n  cy.get('input.password').should('have.focus')\n})\n```\n\n----------------------------------------\n\nTITLE: Working with DOM Elements in .then() Callback\nDESCRIPTION: Example showing how to use .then() to access a button element, get its class attribute, and perform assertions after actions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/then.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').then(($btn) => {\n  const cls = $btn.attr('class')\n\n  cy.wrap($btn).click().should('not.have.class', cls)\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Cross-Domain Sessions in Cypress\nDESCRIPTION: Shows how to switch domains while caching sessions by explicitly visiting the target domain before calling cy.session(). The example includes a validation function that uses an API request to verify the session is still valid.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/session.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst login = (name) => {\n  if (location.hostname !== 'cypress.io') {\n    cy.visit('https://example.cypress.io')\n  }\n  cy.session(name, () => {\n    cy.visit('/login')\n    // etc\n  }, {\n    validate() {\n      cy.request('/whoami', {\n        headers: { 'Authorization' : localStorage.token },\n        method: 'POST'\n      }).its('status').should('equal', 200)\n    }\n  })\n}\n\nit('t1', () => {\n  login('bob')\n  // do things on cypress.io\n})\n\nit('t2', () => {\n  cy.visit('http://www.cypress-dx.com')\n  // do things on anotherexample.com\n})\n\nit('t3', () => {\n  login('bob')\n  // do things on cypress.io\n})\n```\n\n----------------------------------------\n\nTITLE: Using cy.get() with Assertions in Cypress\nDESCRIPTION: Demonstrates how to use cy.get() to select an input element and assert its disabled state.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/get.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input').should('be.disabled')\n```\n\n----------------------------------------\n\nTITLE: Parallelizing Cypress Tests with GitHub Actions Matrix Strategy\nDESCRIPTION: This YAML configuration defines a worker job that runs Cypress tests in parallel using a matrix strategy. It downloads the build artifacts from the install job and executes the tests with recording and parallelization enabled.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/github-actions.mdx#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nname: Cypress Tests\n\non: push\n\njobs:\n  install:\n  # ... omitted install job from above\n\n  cypress-run:\n    runs-on: ubuntu-24.04\n    needs: install\n    strategy:\n      # don't fail the entire matrix on failure\n      fail-fast: false\n      matrix:\n        # run copies of the current job in parallel\n        containers: [1, 2, 3, 4, 5]\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Download the build folder\n        uses: actions/download-artifact@v4\n        with:\n          name: build\n\n      - name: Cypress run\n        uses: cypress-io/github-action@v6\n        with:\n          record: true\n          parallel: true\n          group: 'UI-Chrome'\n          start: npm start\n```\n\n----------------------------------------\n\nTITLE: Adding Cypress npm Scripts in package.json\nDESCRIPTION: This snippet shows how to add a Cypress open command to the scripts section of your package.json file for easier execution. This creates a shorthand command that can be used to open Cypress without typing the full path.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/get-started/open-the-app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"scripts\": {\n    \"cy:open\": \"cypress open\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a User Creation Custom Command with API Authentication\nDESCRIPTION: Implements a command to create users via API with proper authentication token handling, useful for test data setup.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add('createUser', (user) => {\n  cy.request({\n    method: 'POST',\n    url: 'https://www.example.com/tokens',\n    body: {\n      email: 'admin_username',\n      password: 'admin_password',\n    },\n  }).then((resp) => {\n    cy.request({\n      method: 'POST',\n      url: 'https://www.example.com/users',\n      headers: { Authorization: 'Bearer ' + resp.body.token },\n      body: user,\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of Cypress Pause Command\nDESCRIPTION: Demonstrates proper implementation of the pause command in different scenarios within test flows.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/pause.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.pause().getCookie('app') // Pause at the beginning of commands\ncy.get('nav').pause() // Pause after the 'get' commands yield\n```\n\n----------------------------------------\n\nTITLE: Displaying Cypress Folder Structure for TypeScript Projects\nDESCRIPTION: Shows the default folder structure created by Cypress for TypeScript projects, including separate structures for E2E testing, component testing, and a combined setup.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/writing-and-organizing-tests.mdx#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nE2E:\n/cypress.config.ts\n/cypress/fixtures/example.json\n/cypress/support/commands.ts\n/cypress/support/e2e.ts\n\nComponent:\n/cypress.config.ts\n/cypress/fixtures/example.json\n/cypress/support/commands.ts\n/cypress/support/component.ts\n/cypress/support/component-index.html\n\nBoth:\n/cypress.config.ts\n/cypress/fixtures/example.json\n/cypress/support/commands.ts\n/cypress/support/e2e.ts\n/cypress/support/component.ts\n/cypress/support/component-index.html\n```\n\n----------------------------------------\n\nTITLE: Making Assertions on the Focused Element in Cypress\nDESCRIPTION: Example of making assertions on the focused element to verify its attributes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/focused.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.focused().should('have.attr', 'name', 'username')\n```\n\n----------------------------------------\n\nTITLE: Identifying Elements with Dynamic Selectors\nDESCRIPTION: Configuration example showing how to identify elements whose IDs change between snapshots by using CSS selector patterns in the UI Coverage configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/elements.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"elements\": [\n      {\n        \"selector\": \"#my-form [id^='dropdown']\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Auth0 Authentication Test\nDESCRIPTION: Example test case demonstrating Auth0 authentication flow and basic verification.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/auth0-authentication.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Auth0', function () {\n  beforeEach(function () {\n    cy.task('db:seed')\n    cy.intercept('POST', '/graphql').as('createBankAccount')\n    cy.loginToAuth0(\n      Cypress.env('auth0_username'),\n      Cypress.env('auth0_password')\n    )\n    cy.visit('/')\n  })\n\n  it('shows onboarding', function () {\n    cy.contains('Get Started').should('be.visible')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress mount command for Vue Router\nDESCRIPTION: Custom Cypress mount command to set up Vue Router for component testing. Includes creating a memory history router and adding it as a plugin.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/vue/examples.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount } from 'cypress/vue'\nimport { createMemoryHistory, createRouter } from 'vue-router'\nimport { routes } from '../../src/router'\n\nCypress.Commands.add('mount', (component, options = {}) => {\n  // Setup options object\n  options.global = options.global || {}\n  options.global.plugins = options.global.plugins || []\n\n  // create router if one is not provided\n  if (!options.router) {\n    options.router = createRouter({\n      routes: routes,\n      history: createMemoryHistory(),\n    })\n  }\n\n  // Add router plugin\n  options.global.plugins.push({\n    install(app) {\n      app.use(options.router)\n    },\n  })\n\n  return mount(component, options)\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mount } from 'cypress/vue'\nimport { Router } from 'vue-router'\n\ntype MountParams = Parameters<typeof mount>\ntype OptionsParam = MountParams[1] & { router?: Router }\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      /**\n       * Helper mount function for Vue Components\n       * @param component Vue Component or JSX Element to mount\n       * @param options Options passed to Vue Test Utils\n       */\n      mount(component: any, options?: OptionsParam): Chainable<any>\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport Navigation from './Navigation.vue'\nimport { routes } from '../router'\nimport { createMemoryHistory, createRouter } from 'vue-router'\n\nit('home link should be active when url is \"/\"', () => {\n  // No need to pass in custom router as default url is '/'\n  cy.mount(<Navigation />)\n\n  cy.get('a').contains('Home').should('have.class', 'router-link-active')\n})\n\nit('login link should be active when url is \"/login\"', () => {\n  // Create a new router instance for each test\n  const router = createRouter({\n    routes: routes,\n    history: createMemoryHistory(),\n  })\n\n  // Change location to `/login`,\n  // and await on the promise with cy.wrap\n  cy.wrap(router.push('/login'))\n\n  // Pass the already initialized router for use\n  cy.mount(<Navigation />, { router })\n\n  cy.get('a').contains('Login').should('have.class', 'router-link-active')\n})\n```\n\n----------------------------------------\n\nTITLE: Modifying GraphQL Response Data in Cypress Tests\nDESCRIPTION: Demonstrates how to modify GraphQL response data for testing UI behavior with specific data conditions, including response manipulation and assertions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/network-requests.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { hasOperationName, aliasQuery } from '../utils/graphql-test-utils'\n\ncontext('Tests', () => {\n  beforeEach(() => {\n    cy.intercept('POST', 'http://localhost:3000/graphql', (req) => {\n      // Queries\n      aliasQuery(req, 'GetLaunchList')\n\n      // ...\n    })\n  })\n\n  it('should not display the load more button on the launches page', () => {\n    cy.intercept('POST', 'http://localhost:3000/graphql', (req) => {\n      if (hasOperationName(req, 'GetLaunchList')) {\n        // Declare the alias from the initial intercept in the beforeEach\n        req.alias = 'gqlGetLaunchListQuery'\n\n        // Set req.fixture or use req.reply to modify portions of the response\n        req.reply((res) => {\n          // Modify the response body directly\n          res.body.data.launches.hasMore = false\n          res.body.data.launches.launches =\n            res.body.data.launches.launches.slice(5)\n        })\n      }\n    })\n\n    // Must visit after cy.intercept\n    cy.visit('/')\n\n    cy.wait('@gqlGetLaunchListQuery')\n      .its('response.body.data.launches')\n      .should((launches) => {\n        expect(launches.hasMore).to.be.false\n        expect(launches.length).to.be.lte(20)\n      })\n\n    cy.get('#launch-list').its('length').should('be.gte', 1).and('be.lt', 20)\n    cy.contains('button', 'Load More').should('not.exist')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Switching Between User Sessions Inside Tests\nDESCRIPTION: Shows how to switch between different user sessions within a single test to represent real-world multi-user interactions without explicitly logging users out.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/session.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst login = (name) => {\n  cy.session(name, () => {\n    cy.request({\n      method: 'POST',\n      url: '/login',\n      body: { name, password: 's3cr3t' },\n    }).then(({ body }) => {\n      window.localStorage.setItem('authToken', body.token)\n    })\n  })\n}\n\nit('should transfer money between users', () => {\n  login('user')\n  cy.visit('/transfer')\n  cy.get('#amount').type('100.00')\n  cy.get('#send-money').click()\n\n  login('other-user')\n  cy.visit('/account_balance')\n  cy.get('#balance').should('eq', '100.00')\n})\n```\n\n----------------------------------------\n\nTITLE: Using debugger in Cypress tests with timing issues\nDESCRIPTION: Example of incorrect debugger usage in Cypress tests. This code demonstrates why placing debugger directly in the test doesn't work as expected due to Cypress's command enqueuing behavior.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/debugging.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nit('let me debug like a fiend', () => {\n  cy.visit('/my/page/path')\n\n  cy.get('[data-testid=\"selector-in-question\"]')\n\n  debugger // Doesn't work\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of cy.fixture() Command\nDESCRIPTION: Demonstrates proper usage patterns for the fixture command, including loading JSON data and image files with aliases.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/fixture.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.fixture('users').as('usersJson') // load data from users.json\ncy.fixture('logo.png').then((logo) => {\n  // load data from logo.png\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing localStorage-based Logout Custom Command for E2E Tests\nDESCRIPTION: Creates a logout command that clears the session from localStorage and redirects to the login page, designed specifically for end-to-end tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add('logout', () => {\n  cy.window().its('localStorage').invoke('removeItem', 'session')\n\n  cy.visit('/login')\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Aliases without 'this' in Cypress Tests\nDESCRIPTION: This snippet demonstrates how to access aliases using cy.get() with the '@' syntax, avoiding the use of 'this'. It shows how to alias fixtures and use them in tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/variables-and-aliases.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  // alias the users fixtures\n  cy.fixture('users.json').as('users')\n})\n\nit('utilize users in some way', function () {\n  // use the special '@' syntax to access aliases\n  // which avoids the use of 'this'\n  cy.get('@users').then((users) => {\n    // access the users argument\n    const user = users[0]\n\n    // make sure the header contains the first\n    // user's name\n    cy.get('header').should('contain', user.name)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Visibility with Cypress - JavaScript\nDESCRIPTION: These snippets illustrate how Cypress checks for element visibility using should('be.visible'). They show how to await the visibility of single or multiple elements, and how behavior differs between positive and negative visibility assertions. Requires Cypress and elements identified by data-testid or suitable selectors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/assertions.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// retry until the element with\n// data-testid \"form-submit\" is visible\ncy.get('[data-testid=\"form-submit\"]').should('be.visible')\n// retry until the list item with\n// text \"write tests\" is visible\ncy.contains('[data-testid=\"todo\"] li', 'write tests').should('be.visible')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// retry until SOME elements are visible\ncy.get('li').should('be.visible')\n// retry until EVERY element is invisible\ncy.get('li.hidden').should('not.be.visible')\n```\n\n----------------------------------------\n\nTITLE: Multiple Assertions on Paragraph Elements in Cypress\nDESCRIPTION: Complex example showing how to verify multiple properties of paragraph elements including length, content, and classes using a callback function.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('p').should(($p) => {\n  // should have found 3 elements\n  expect($p).to.have.length(3)\n\n  // make sure the first contains some text content\n  expect($p.first()).to.contain('Hello World')\n\n  // use jquery's map to grab all of their classes\n  // jquery's map returns a new jquery object\n  const classes = $p.map((i, el) => {\n    return Cypress.$(el).attr('class')\n  })\n\n  // call classes.get() to make this a plain array\n  expect(classes.get()).to.deep.eq([\n    'text-primary',\n    'text-danger',\n    'text-default',\n  ])\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Timeout to Callback Function Assertions in Cypress\nDESCRIPTION: Shows how timeout options work with callback functions, allowing all assertions within the callback to retry for the specified duration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/and.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input', {timeout: 10000}).should('have.value', 'US').and(($input) => {\n                         ↲\n  // timeout here will be passed down to the '.and()'\n  // unless an assertion throws earlier,\n  // ALL of the assertions will retry for up to 10 secs\n  expect($input).to.not.be('disabled')\n  expect($input).to.not.have.class('error')\n})\n```\n\n----------------------------------------\n\nTITLE: HTTP Method Matching Examples with cy.intercept\nDESCRIPTION: Examples showing how to match specific HTTP methods or all methods with cy.intercept, with warnings about default behavior.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/users')\n// matches this: GET http://localhost/users\n// ...and this, too: POST http://localhost/users\n\ncy.intercept('GET', '/users')\n// matches this: GET http://localhost/users\n// ...but not this: POST http://localhost/users\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Example of cy.get() in Cypress\nDESCRIPTION: Shows a correct example of using cy.get() to yield <li> elements within a .list element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/get.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.list > li') // Yield the <li>'s in .list\n```\n\n----------------------------------------\n\nTITLE: Dynamic Data Usage in Secondary Origin\nDESCRIPTION: Example showing how to pass and use dynamic data in a secondary origin using the args option.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/origin.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst sentArgs = { username: 'username', password: 'P@55w0rd!' }\ncy.origin(\n  'supersecurelogons.com',\n  // Send the args here...\n  { args: sentArgs },\n  // ...and receive them at the other end here!\n  ({ username, password }) => {\n    cy.visit('/login')\n    cy.get('input#username').type(username)\n    cy.get('input#password').type(password)\n    cy.contains('button', 'Login').click()\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using Promises in Cypress Intercept Callbacks\nDESCRIPTION: Demonstrates returning a Promise from an intercept callback to delay sending the response until the Promise resolves.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/users', (req) => {\n  req.continue((res) => {\n    // the response will not be sent to the browser until\n    // 'waitForSomething()' resolves\n    return waitForSomething()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom SessionStorage Commands\nDESCRIPTION: Shows how to use the custom sessionStorage commands to set and verify values in the browser's session storage.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.setSessionStorage('token', 'abc123')\ncy.getSessionStorage('token').should('eq', 'abc123')\n```\n\n----------------------------------------\n\nTITLE: Aliasing Intercepted Routes in Cypress\nDESCRIPTION: Demonstrates how to alias an intercepted route and use it with cy.wait() in a test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/as.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('PUT', '/users', { fixture: 'user' }).as('editUser')\n\n// we'll assume submitting `form` triggers a matching request\ncy.get('form').submit()\n\n// once a response comes back from the `editUser`\n// this `wait` will resolve with the subject containing `url`\ncy.wait('@editUser').its('url').should('contain', 'users')\n```\n\n----------------------------------------\n\nTITLE: Aliasing Fixture Data in Cypress\nDESCRIPTION: Shows how to alias fixture data and access it using 'this' in a test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/as.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  cy.fixture('users-admins.json').as('admins')\n})\n\nit('the users fixture is bound to this.admins', function () {\n  cy.log(`There are ${this.admins.length} administrators.`)\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Properties\nDESCRIPTION: Example of accessing object properties using .its()\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/its.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.wrap({ age: 52 }).its('age').should('eq', 52) // true\n```\n\n----------------------------------------\n\nTITLE: Overwriting Existing Visit Command in Cypress\nDESCRIPTION: Shows how to overwrite the built-in 'visit' command to add custom URL handling based on environment variables and options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.overwrite('visit', (originalFn, url, options) => {\n  const domain = Cypress.env('BASE_DOMAIN')\n\n  if (domain === '...') {\n    url = '...'\n  }\n\n  if (options.something === 'else') {\n    url = '...'\n  }\n\n  return originalFn(url, options)\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Cookies for Current Domain in Cypress\nDESCRIPTION: Example of correct usage to retrieve cookies for the current domain.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/getcookies.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.getCookies() // Get cookies for the currrent domain\n```\n\n----------------------------------------\n\nTITLE: Basic Input Type Command Example\nDESCRIPTION: Simple example of using Cypress type command to input text into a form field.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/type.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input[name=firstName]').type('Jane Lane')\n```\n\n----------------------------------------\n\nTITLE: Creating Sessions with Different ID Types in JavaScript\nDESCRIPTION: Demonstrates how to properly create unique session IDs using strings, objects, arrays, or combinations of variables. Proper session identification ensures correct caching behavior.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/session.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// If your session setup code uses a string variable, pass in the\n// string as the id\nconst login = (name) => {\n  cy.session(name, () => {\n    loginWith(name)\n  })\n}\n\n// If your session setup code uses a single object, pass in the\n// object as the id and it will be serialized into an identifier\nconst login = (params = {}) => {\n  cy.session(params, () => {\n    loginWith(params)\n  })\n}\n\n// If your session setup code uses multiple variables, pass in an\n// array of those variables and it will be serialized into an\n// identifier\nconst login = (name, email, params = {}) => {\n  cy.session([name, email, params], () => {\n    loginWith(name, email, params)\n  })\n}\n\n// If your session setup code uses external constants, they don't\n// need to be included in the id, since they will never change\nconst API_KEY = 'I_AM_AN_API_KEY'\nconst login = (name, email) => {\n  cy.session([name, email], () => {\n    loginWith(name, email, API_KEY)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Test Repetition for Reliability Verification\nDESCRIPTION: Demonstrates how to repeat a test multiple times to verify its reliability and detect potential flakiness in conditional testing scenarios.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/conditional-testing.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nCypress._.times(100, (i) => {\n  it(`num ${i + 1} - test the thing conditionally`, () => {\n    // do the conditional bits 100 times\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Finding Previous Element of Active Element in Cypress\nDESCRIPTION: Example of using .prev() to find the element preceding one with a specific class in an HTML list.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/prev.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>Cockatiels</li>\n  <li>Lorikeets</li>\n  <li class=\"active\">Cockatoos</li>\n  <li>Conures</li>\n  <li>Eclectus</li>\n</ul>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// yields <li>Lorikeets</li>\ncy.get('.active').prev()\n```\n\n----------------------------------------\n\nTITLE: Navigating to Multiple Secondary Origins in Cypress\nDESCRIPTION: Shows how to visit multiple origins in succession using separate cy.origin() calls at the top level of the test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/origin.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.origin('example.cypress.com', () => {\n  cy.visit('/')\n  cy.url().should('contain', 'example.cypress.com')\n})\n\ncy.origin('cypress-dx.com', () => {\n  cy.visit('/')\n  cy.url().should('contain', 'cypress-dx.com')\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for clear Command in JavaScript\nDESCRIPTION: Demonstrates the basic syntax for using the clear() command in Cypress, showing two variations: one without options and one with an options object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clear.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.clear()\n.clear(options)\n```\n\n----------------------------------------\n\nTITLE: Chai-jQuery DOM Assertions\nDESCRIPTION: DOM-specific assertions for checking attributes, properties, CSS, visibility, and element states. These chainers are used after DOM commands like cy.get() or cy.contains().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/assertions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n.should('have.attr', 'bar')\nexpect($el).to.have.attr('foo', 'bar')\n\n.should('have.prop', 'disabled', false)\nexpect($el).to.have.prop('disabled', false)\n\n.should('have.css', 'background-color', 'rgb(0, 0, 0)')\nexpect($el).to.have.css('background-color', 'rgb(0, 0, 0)')\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Setup File for Component Testing\nDESCRIPTION: Example of a setup.js file that imports necessary styles and creates store, router, and application instances. This setup can be reused in both the main application and Cypress component tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/styling-components.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport '~normalize/normalize.css'\nimport 'font-awesome'\nimport './main.css'\n\nexport const createStore = () => {\n  return /* store */\n}\n\nexport const createRouter = () => {\n  return /* router */\n}\n\nexport const createApp = () => {\n  return <App router={createRouter()} store={createStore()}></App>\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Fixtures in Cypress\nDESCRIPTION: Shows how to access fixture files that are organized in subdirectories. The example loads a fixture file 'dogs.png' from the 'images' subfolder, which will be yielded as Base64 encoded data.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/network-requests.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.fixture('images/dogs.png') // yields dogs.png as Base64\n```\n\n----------------------------------------\n\nTITLE: Cypress Test Without Explicit Assertions\nDESCRIPTION: Example of a Cypress test that contains no explicit assertions but still effectively tests application functionality through Cypress's implicit assertions on each command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n-{cy.visit('/home')::cy.mount(<MyComponent />)}-\n\ncy.get('.main-menu').contains('New Project').click()\n\ncy.get('.title').type('My Awesome Project')\n\ncy.get('form').submit()\n```\n\n----------------------------------------\n\nTITLE: DOM Element Selection in Protractor vs Cypress\nDESCRIPTION: Comparison of element selection methods between Protractor and Cypress, showing equivalent syntax for various selector patterns.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Protractor\nelement(by.tagName('h1'))\nelement(by.css('.my-class'))\nelement(by.id('my-id'))\nelement(by.name('field-name'))\nelement(by.cssContainingText('.my-class', 'text'))\nelement(by.linkText('text'))\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Cypress\ncy.get('h1')\ncy.get('.my-class')\ncy.get('#my-id')\ncy.get('input[name=\"field-name\"]')\ncy.get('.my-class').contains('text')\ncy.contains('text')\n```\n\n----------------------------------------\n\nTITLE: Asserting Textarea Value with Cypress - JavaScript\nDESCRIPTION: This snippet checks that a textarea element contains an exact value ('foo bar baz'), using Cypress's built-in should assertion. It retries until the textarea's value matches the given string, which is helpful for checking asynchronous form interactions. Cypress and a suitably identified textarea in the DOM are required.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/assertions.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// retry until this textarea has the correct value\ncy.get('textarea').should('have.value', 'foo bar baz')\n```\n\n----------------------------------------\n\nTITLE: Loading and Aliasing JSON Fixtures\nDESCRIPTION: Demonstrates loading a JSON fixture file and creating an alias for later reference in tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/fixture.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.fixture('users.json').as('usersData')\n```\n\n----------------------------------------\n\nTITLE: GitLab CI Caching for Cypress Dependencies\nDESCRIPTION: Implements caching for node_modules and npm cache to speed up builds. Also configures artifacts to store Cypress videos and screenshots.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/gitlab-ci.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  - test\n\ncache:\n  key: ${CI_COMMIT_REF_SLUG}\n  paths:\n    - node_modules/\n    - .npm/\n\ntest:\n  image: cypress/browsers:22.12.0\n  stage: test\n  script:\n    # install dependencies\n    - npm ci\n    # start the server in the background\n    - npm start &\n    # run Cypress tests\n    - npx cypress run --browser firefox\n  artifacts:\n    when: always\n    paths:\n      - cypress/videos/**/*.mp4\n      - cypress/screenshots/**/*.png\n    expire_in: 1 day\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax of Cypress 'should' Command\nDESCRIPTION: Shows the different syntax variations for the 'should' command in Cypress, including using chainers, values, methods with values, and callback functions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.should(chainers)\n.should(chainers, value)\n.should(chainers, method, value)\n.should(callbackFn)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables via CLI Arguments\nDESCRIPTION: Demonstrates how to pass environment variables as options when using the Cypress CLI tool. This method allows for dynamic values between different machines.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/environment-variables.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --env host=kevin.dev.local,api_server=http://localhost:8888/api/v1\n```\n\n----------------------------------------\n\nTITLE: Structuring Tests in Cypress\nDESCRIPTION: Demonstrates how to structure tests in Cypress using describe and it blocks, with a beforeEach hook for common setup.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/selenium-to-cypress.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('General information', () => {\n  beforeEach(() => {\n    cy.get('#loginButton').click()\n  })\n\n  it('Header is visible', () => {\n    cy.get('#header').should('be.visible')\n  })\n\n  it('Footer is visible', () => {\n    cy.get('#footer').should('be.visible')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Request Headers with Cypress Intercept\nDESCRIPTION: Example of modifying request headers using Cypress intercept functionality.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/network-requests.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/users*', (req) => {\n  req.headers['authorization'] = 'bearer my-bearer-auth-token'\n}).as('addAuthHeader')\n```\n\n----------------------------------------\n\nTITLE: Adding a custom hover command in Cypress\nDESCRIPTION: This snippet demonstrates how to add a custom cy.hover() command using Cypress.Commands.add(). Note that the implementation is not provided and should be defined based on specific requirements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/hover.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add('hover', (...args) => {})\n```\n\n----------------------------------------\n\nTITLE: Request Object Properties Interface in Cypress\nDESCRIPTION: TypeScript interface showing all available properties on the request object in Cypress intercept.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  /**\n   * The body of the request.\n   * If a JSON Content-Type was used and the body was valid JSON,\n   * this will be an object.\n   * If the body was binary content, this will be a buffer.\n   */\n  body: string | object | any\n  /**\n   * The headers of the request.\n   */\n  headers: { [key: string]: string }\n  /**\n   * Request HTTP method (GET, POST, ...).\n   */\n  method: string\n  /**\n   * Request URL.\n   */\n  url: string\n  /**\n   * URL query string as object.\n   */\n  query: Record<string, string|number>\n  /**\n   * The HTTP version used in the request. Read only.\n   */\n  httpVersion: string\n  /**\n   * The resource type of the request. Read only.\n   */\n  resourceType: 'document' | 'fetch' | 'xhr' | 'websocket' | 'stylesheet'\n              | 'script' | 'image' | 'font' | 'cspviolationreport' | 'ping'\n              | 'manifest' | 'other'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting OS-level Environment Variables for Cypress\nDESCRIPTION: Shows how to set OS-level environment variables that Cypress will automatically parse. Variables starting with CYPRESS_ or cypress_ will be recognized by Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/environment-variables.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport CYPRESS_VIEWPORT_WIDTH=800\nexport CYPRESS_VIEWPORT_HEIGHT=600\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport CYPRESS_HOST=laura.dev.local\nexport cypress_api_server=http://localhost:8888/api/v1/\n```\n\n----------------------------------------\n\nTITLE: Programmatic Okta Login Test Example\nDESCRIPTION: Test demonstrating usage of programmatic Okta login command with basic verification.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/okta-authentication.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Okta', function () {\n  beforeEach(function () {\n    cy.task('db:seed')\n    cy.loginByOktaApi(\n      Cypress.env('auth_username'),\n      Cypress.env('auth_password')\n    )\n  })\n\n  it('shows onboarding', function () {\n    cy.contains('Get Started').should('be.visible')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Before and After Screenshot Hooks in Cypress for DOM Manipulation\nDESCRIPTION: Demonstrates how to use onBeforeScreenshot and onAfterScreenshot callbacks to temporarily modify DOM elements before taking a screenshot and restore them afterward. This example hides a clock element to create more consistent screenshots.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/screenshot-api.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Screenshot.defaults({\n  onBeforeScreenshot($el) {\n    const $clock = $el.find('.clock')\n\n    if ($clock) {\n      $clock.hide()\n    }\n  },\n\n  onAfterScreenshot($el, props) {\n    const $clock = $el.find('.clock')\n\n    if ($clock) {\n      $clock.show()\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Response Stubbing in Cypress Intercept\nDESCRIPTION: Examples of dynamically stubbing responses using req.reply() with both direct values and fixtures.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/billing', (req) => {\n  // dynamically get billing plan name at request-time\n  const planName = getPlanName()\n  // this object will automatically be JSON.stringified and\n  // sent as the response\n  req.reply({ plan: planName })\n})\n\ncy.intercept('/api/users/*', async (req) => {\n  // asynchronously retrieve fixture filename at request-time\n  const fixtureFilename = await getFixtureFilenameForUrl(req.url)\n  req.reply({\n    fixture: fixtureFilename,\n    delay: 500,\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Waiting on Requests in Cypress\nDESCRIPTION: Shows how to use cy.wait() with aliased routes to wait for request/response cycles to complete and make assertions on the intercepted requests and responses.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('http://example.com/settings').as('getSettings')\n\n// once a request to get settings responds, 'cy.wait' will resolve\ncy.wait('@getSettings')\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept({\n  url: 'http://example.com/search*',\n  query: { q: 'expected terms' },\n}).as('search')\n\n// once any type of request to search with a querystring\n// containing 'q=expected+terms' responds, 'cy.wait' will resolve\ncy.wait('@search')\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.wait('@someRoute').then((interception) => {\n  // 'interception' is an object with properties\n  // 'id', 'request' and 'response'\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// assert that a request to this route\n// was made with a body that included 'user'\ncy.wait('@someRoute').its('request.body').should('include', 'user')\n\n// assert that a request to this route\n// received a response with HTTP status 500\ncy.wait('@someRoute').its('response.statusCode').should('eq', 500)\n\n// assert that a request to this route\n// received a response body that includes 'id'\ncy.wait('@someRoute').its('response.body').should('include', 'id')\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('GET', '/should-err', { forceNetworkError: true }).as('err')\n\n// assert that this request happened\n// and that it ended in an error\ncy.wait('@err').should('have.property', 'error')\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic Based on Testing Type\nDESCRIPTION: Example showing how to execute different code paths based on the current testing type. This allows for writing tests that can adapt their behavior depending on whether they're running in E2E or Component testing mode.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/testing-type.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('does something differently', () => {\n  if (Cypress.testingType === 'e2e') {\n    cy.exec('something')\n  } else {\n    cy.exec('something else')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of debug() in Cypress Tests\nDESCRIPTION: Shows correct usage examples of the debug() command, including pausing at the beginning of commands and debugging a specific command's yield.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/debug.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.debug().getCookie('app') // Pause to debug at beginning of commands\ncy.get('nav').debug() // Debug the `get` command's yield\n```\n\n----------------------------------------\n\nTITLE: Using Cognito Login Command in Cypress Test\nDESCRIPTION: Example test demonstrating how to use the loginByCognitoApi command in a Cypress test suite with database seeding.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/amazon-cognito-authentication.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\ndescribe('Cognito, programmatic login', function () {\n  beforeEach(function () {\n    // Seed database with test data\n    cy.task('db:seed')\n\n    // Programmatically login via Amazon Cognito API\n    cy.loginByCognitoApi(\n      Cypress.env('cognito_username'),\n      Cypress.env('cognito_password')\n    )\n  })\n\n  it('shows onboarding', function () {\n    cy.contains('Get Started').should('be.visible')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Amplify for Amazon Cognito Authentication (v6.x.x)\nDESCRIPTION: This snippet shows how to configure AWS Amplify v6.x.x for Amazon Cognito authentication. It includes importing the necessary modules, configuring the Auth category, and performing a sign-in operation with the new API.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/amazon-cognito-authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Amplify } from \"aws-amplify\";\nimport { fetchAuthSession, signIn } from \"aws-amplify/auth\";\n\nAmplify.configure({\n  Auth: {\n    Cognito: {\n      userPoolId: \"XX-XXXX-X_XXXXXXXXX\",\n      userPoolClientId: \"XXXXXXXXXXXXXXXXXXXXXXXXX\",\n      // OR:\n      identityPoolId: 'XX-XXXX-X:XXXXXXXX-XXXX', // Amazon Cognito Identity Pool ID\n    },\n  },\n});\nsignIn({ username, password, { authFlowType: \"USER_PASSWORD_AUTH\" } })\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  .then((_signInOutput) => fetchAuthSession())\n  .then((authSession) => console.log(authSession))\n  .catch((err) => console.log(err));\n```\n\n----------------------------------------\n\nTITLE: Customizing cy.mount() for React Router in Cypress\nDESCRIPTION: Shows how to create a custom mount command that wraps components with React Router's MemoryRouter for testing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/react/examples.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { mount } from 'cypress/react'\nimport { MemoryRouter } from 'react-router-dom'\n\nCypress.Commands.add('mount', (component, options = {}) => {\n  const { routerProps = { initialEntries: ['/'] }, ...mountOptions } = options\n\n  const wrapped = <MemoryRouter {...routerProps}>{component}</MemoryRouter>\n\n  return mount(wrapped, mountOptions)\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Recursive Pattern in Cypress\nDESCRIPTION: Proper implementation using recursion instead of loops to handle repeated checks and operations in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst checkAndReload = () => {\n  // get the element's text, convert into a number\n  cy.get('#result')\n    .should('not.be.empty')\n    .invoke('text')\n    .then(parseInt)\n    .then((number) => {\n      // if the expected number is found\n      // stop adding any more commands\n      if (number === 7) {\n        cy.log('lucky **7**')\n\n        return\n      }\n\n      // otherwise insert more Cypress commands\n      // by calling the function after reload\n      cy.wait(500, { log: false })\n      cy.reload()\n      checkAndReload()\n    })\n}\n\ncy.visit('public/index.html')\ncheckAndReload()\n```\n\n----------------------------------------\n\nTITLE: Forcing Click with Position Argument in Cypress\nDESCRIPTION: Shows how to force a click on a specific position of an element in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/click.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#collapse-sidebar').click('bottomLeft', { force: true })\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress mount command for Vuex\nDESCRIPTION: Custom Cypress mount command to set up Vuex store for component testing. Includes initializing a new store and adding it as a plugin.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/vue/examples.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount } from 'cypress/vue'\nimport { getStore } from '../../src/plugins/store'\n\nCypress.Commands.add('mount', (component, options = {}) => {\n  // Setup options object\n  options.global = options.global || {}\n  options.global.stubs = options.global.stubs || {}\n  options.global.stubs['transition'] = false\n  options.global.components = options.global.components || {}\n  options.global.plugins = options.global.plugins || []\n\n  // Use store passed in from options, or initialize a new one\n  const { store = getStore(), ...mountOptions } = options\n\n  // Add Vuex plugin\n  options.global.plugins.push({\n    install(app) {\n      app.use(store)\n    },\n  })\n\n  return mount(component, mountOptions)\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mount } from 'cypress/vue'\nimport { Store } from 'vuex'\n\ntype MountParams = Parameters<typeof mount>\ntype OptionsParam = MountParams[1]\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      /**\n       * Helper mount function for Vue Components\n       * @param component Vue Component or JSX Element to mount\n       * @param options Options passed to Vue Test Utils\n       */\n      mount(\n        component: any,\n        options?: OptionsParam & { store?: Store }\n      ): Chainable<any>\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getStore } from '@/plugins/store'\nimport UserProfile from './UserProfile.vue'\n\nit.only('User profile should display user name', () => {\n  const user = { name: 'test person' }\n\n  // getStore is a factory method that creates a new store\n  const store = getStore()\n\n  // mutate the store with user\n  store.commit('setUser', user)\n\n  cy.mount(UserProfile, {\n    store,\n  })\n\n  cy.get('div.name').should('have.text', user.name)\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Angular Components with autoSpyOutputs\nDESCRIPTION: Shows how to use the autoSpyOutputs feature, which automatically creates spies for all component outputs, reducing test boilerplate. After mounting, spies can be accessed using the output property name plus 'Spy'.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/examples.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nit('clicking + fires a change event with the incremented value', () => {\n  cy.mount(StepperComponent, {\n    autoSpyOutputs: true,\n    componentProperties: {\n      count: 100,\n    },\n  })\n  cy.get(incrementSelector).click()\n  cy.get('@changeSpy').should('have.been.calledWith', 101)\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Text Content of Multiple Elements in Cypress\nDESCRIPTION: Shows how to verify the text content of multiple list items using a 'should' callback function with multiple assertions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.connectors-list > li').should(($lis) => {\n  expect($lis).to.have.length(3)\n  expect($lis.eq(0)).to.contain('Walk the dog')\n  expect($lis.eq(1)).to.contain('Feed the cat')\n  expect($lis.eq(2)).to.contain('Write JavaScript')\n})\n```\n\n----------------------------------------\n\nTITLE: Selecting First List Item with cy.get() in Cypress\nDESCRIPTION: Shows how to use cy.get() to find the first <li> descendant within a <ul> element and assert its class.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/get.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('ul li:first').should('have.class', 'active')\n```\n\n----------------------------------------\n\nTITLE: Clicking with Specific Coordinates in Cypress\nDESCRIPTION: Shows how to click at specific coordinates within an element using Cypress .click() command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/click.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#top-banner').click(15, 40)\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress Clock Command Syntax\nDESCRIPTION: The different ways to call cy.clock() command in Cypress, including with no arguments, with timestamp, function names, and options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clock.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clock()\ncy.clock(now)\ncy.clock(now, functionNames)\ncy.clock(options)\ncy.clock(now, options)\ncy.clock(now, functionNames, options)\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples for Cypress eq Command\nDESCRIPTION: Demonstrates the proper way to use the .eq() command to select elements at specific positions in a collection.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/eq.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('tbody>tr').eq(0) // Yield first 'tr' in 'tbody'\ncy.get('ul>li').eq(4) // Yield fifth 'li' in 'ul'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of Cypress Stubs\nDESCRIPTION: Examples of proper usage of cy.stub() to replace an object's method and optionally aliasing it for later reference.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/stub.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.stub(user, 'addFriend')\ncy.stub(user, 'addFriend').as('addFriend')\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Example of getAllSessionStorage in Cypress\nDESCRIPTION: Shows the correct way to use the getAllSessionStorage command in Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/getallsessionstorage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.getAllSessionStorage()\n```\n\n----------------------------------------\n\nTITLE: Using focus() in Cypress Command Log Example\nDESCRIPTION: Example showing how to focus on a textarea element by name attribute, which would be displayed in the Cypress Command Log.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/focus.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[name=\"comment\"]').focus()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Commands in Cypress\nDESCRIPTION: This snippet shows how to create and use custom commands in Cypress. It demonstrates adding a login command and using it in a test case, which can help in reducing code duplication and improving test readability.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add('login', (username, password) => {\n  cy.get('.username').type(username)\n  cy.get('.password').type(password)\n})\n\nit('should display the username of a logged in user', () => {\n  cy.login('Matt', Cypress.env('password'))\n  cy.get('.username').contains('Matt')\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Environment Variables\nDESCRIPTION: Example demonstrating how to set a single environment variable during test execution and then retrieve its value. These changes only persist within the current spec file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/env.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.env('host', 'http://server.dev.local')\n\nCypress.env('host') // => http://server.dev.local\n```\n\n----------------------------------------\n\nTITLE: Configuring View Filters to Only Include Local URLs in Cypress UI Coverage\nDESCRIPTION: JSON configuration example showing how to include only localhost URLs while excluding all others. This configuration first includes all URLs matching the localhost pattern, then excludes everything else with a wildcard pattern.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/guides/ignore-views-and-links.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"viewFilters\": [\n    {\n      \"pattern\": \"http://localhost:3000/*\",\n      \"include\": true\n    },\n    {\n      \"pattern\": \"*\",\n      \"include\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of Cypress Commands API\nDESCRIPTION: Demonstrates the proper way to use the Cypress.Commands API for adding single commands, multiple commands, and overwriting existing commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add('login', (email, pw) => {})\nCypress.Commands.addAll({\n  login(email, pw) {},\n  visit(orig, url, options) {},\n})\nCypress.Commands.overwrite('visit', (orig, url, options) => {})\n```\n\n----------------------------------------\n\nTITLE: Asserting URL Hash Fragment in JavaScript\nDESCRIPTION: Example showing how to assert that the URL contains a specific hash fragment ('#users/new').\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/url.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.url().should('contain', '#users/new')\n```\n\n----------------------------------------\n\nTITLE: Configuring baseUrl in Cypress Configuration\nDESCRIPTION: Shows how to configure the baseUrl in Cypress configuration to avoid repeating URLs in every cy.visit() command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  e2e: {\n    baseUrl: 'http://localhost:3000/#/',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making Assertions about Element States in Cypress\nDESCRIPTION: These examples show how to use the .should() command to make assertions about element states, including checking if an element is disabled, has a specific class, or does not have a certain value.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get(':checkbox').should('be.disabled')\n\ncy.get('form').should('have.class', 'form-horizontal')\n\ncy.get('input').should('not.have.value', 'US')\n```\n\n----------------------------------------\n\nTITLE: Scrolling an Element into View and Asserting Visibility\nDESCRIPTION: Example of scrolling a button into view and then asserting that it's visible. This is a common usage pattern for scroll-then-interact workflows.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/scrollintoview.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button#checkout').scrollIntoView().should('be.visible')\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Login Helper Function with Session Caching\nDESCRIPTION: Demonstrates how to refactor a login helper function to use session caching, with examples of basic implementation and with validation.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/session.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst login = (name, password) => {\n  cy.visit('/login')\n  cy.get('[data-test=name]').type(name)\n  cy.get('[data-test=password]').type(password)\n  cy.get('#submit').click()\n  cy.url().should('contain', '/home')\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst login = (name, password) => {\n  cy.session([name, password], () => {\n    cy.visit('/login')\n    cy.get('[data-test=name]').type(name)\n    cy.get('[data-test=password]').type(password)\n    cy.get('#submit').click()\n    cy.url().should('contain', '/home')\n  })\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst login = (name, password) => {\n  cy.session(\n    [name, password],\n    () => {\n      cy.visit('/login')\n      cy.get('[data-test=name]').type(name)\n      cy.get('[data-test=password]').type(password)\n      cy.get('#submit').click()\n      cy.url().should('contain', '/home')\n    },\n    {\n      validate() {\n        // Protected URLs should return a 40x http code if user is unauthorized,\n        // and by default this will cause cy.visit() to fail\n        cy.visit('/account-details')\n      },\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Debug Current Session Data\nDESCRIPTION: Example showing how to verify and debug the current session data after cy.session() completes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/session.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nit('debug session', () => {\n    cy.session('id', () => {\n        ...\n    })\n    .then(async () => {\n        const sessionData = await Cypress.session.getCurrentSessionData()\n        cy.debug()\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Assertions in .should() Callback in Cypress (JavaScript)\nDESCRIPTION: This example demonstrates using multiple assertions within a .should() callback. All assertions will retry until they pass or the timeout is reached.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input', { timeout: 10000 }).should(($input) => {\n  // timeout here will be passed down to the '.should()'\n  // unless an assertion throws earlier,\n  // ALL of the assertions will retry for up to 10 secs\n  expect($input).to.not.be('disabled')\n  expect($input).to.not.have.class('error')\n  expect($input).to.have.value('US')\n})\n```\n\n----------------------------------------\n\nTITLE: Positive and Negative Assertions with Cypress - JavaScript\nDESCRIPTION: These snippets show how to perform positive and negative assertions using Cypress. Positive assertions include checks for the presence of classes or item counts, while negative assertions use the 'not' chainer to invert assertions for classes or visibility. Ideal for verifying both expected presence and absence of UI states.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/assertions.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[data-testid=\"todo-item\"]')\n  .should('have.length', 2)\n  .and('have.class', 'completed')\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.contains('first todo').should('not.have.class', 'completed')\ncy.get('[data-testid=\"loading\"]').should('not.be.visible')\n```\n\n----------------------------------------\n\nTITLE: Using cy.wait() with intercepted HTTP requests in Cypress\nDESCRIPTION: This example demonstrates how to intercept a PUT request to a users endpoint, submit a form, and then wait for the intercepted request to resolve before making assertions on the request URL.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/wait.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('PUT', /users/, {}).as('userPut')\ncy.get('form').submit()\ncy.wait('@userPut').its('request.url').should('include', 'users')\n```\n\n----------------------------------------\n\nTITLE: Handling Whitespace in <pre> Tags with cy.contains()\nDESCRIPTION: Demonstrates how cy.contains() behaves differently with <pre> tags, preserving leading, trailing, and duplicate whitespaces.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/contains.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('p').contains('Hello, World !') // pass\ncy.get('p').contains('           Hello,          World   !') // fail\n\ncy.get('pre').contains('Hello, World !') // fail\ncy.get('pre').contains('                 Hello,           World      !') // pass\n```\n\n----------------------------------------\n\nTITLE: Custom Assertion Callback in Cypress\nDESCRIPTION: Demonstrates how to use a custom assertion callback with the .should() command in Cypress. The callback checks the length of the selected element and verifies that its class name matches a specific pattern.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/assertions.mdx#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"main-abc123 heading-xyz987\">Introduction</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('div').should(($div) => {\n  expect($div).to.have.length(1)\n\n  const className = $div[0].className\n\n  // className will be a string like \"main-abc123 heading-xyz987\"\n  expect(className).to.match(/heading-/)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress Test Retries\nDESCRIPTION: This snippet demonstrates how to configure the number of retry attempts for a single Cypress test during both 'cypress run' and 'cypress open' modes using the retries option.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/writing-and-organizing-tests.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nit('should redirect unauthenticated user to sign-in page', {\n    retries: {\n      runMode: 3,\n      openMode: 2\n    }\n  } () => {\n    // test code...\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using .shadow() Command in Cypress\nDESCRIPTION: Demonstrates the correct usage of the .shadow() command to traverse into the shadow DOM of an element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/shadow.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.shadow-host').shadow()\n```\n\n----------------------------------------\n\nTITLE: Testing Vue Named Slots\nDESCRIPTION: Demonstrates testing Vue components with named slots.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/vue/examples.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport NamedSlot from './NamedSlot.vue'\n\ndescribe('<NamedSlot />', () => {\n  it('renders', () => {\n    const slots = {\n      header: 'my header',\n      footer: 'my footer',\n    }\n    cy.mount(NamedSlot, {\n      slots,\n    })\n    cy.get('header').should('have.text', 'my header')\n    cy.get('footer').should('have.text', 'my footer')\n  })\n})\n```\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <header>\n      <slot name=\"header\" />\n    </header>\n    <footer>\n      <slot name=\"footer\" />\n    </footer>\n  </div>\n</template>\n\n<script setup></script>\n```\n\n----------------------------------------\n\nTITLE: Using Cypress.ensure in Custom Query for Element Type Checking\nDESCRIPTION: Example of using Cypress.ensure.isType in a custom query to verify the subject is an element, document, or window object before querying for a child element by ID.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/ensure.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.addQuery('getChildById', function (id) {\n  return (subject) => {\n    // Verify that the subject is an element, document, or window object\n    Cypress.ensure.isType(\n      subject,\n      ['element', 'document', 'window'],\n      'getChildById',\n      cy\n    )\n\n    return $$(`#${id}`, subject)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Making Assertions on Document Properties in Cypress\nDESCRIPTION: Example demonstrating how to make assertions about document properties, specifically checking the contentType.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/document.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.document().its('contentType').should('eq', 'text/html')\n```\n\n----------------------------------------\n\nTITLE: Inspecting Cookie Properties in Cypress\nDESCRIPTION: Example of getting cookies and inspecting various properties of the returned cookie objects.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/getcookies.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.getCookies()\n  .should('have.length', 1)\n  .then((cookies) => {\n    expect(cookies[0]).to.have.property('name', 'fakeCookie1')\n    expect(cookies[0]).to.have.property('value', '123ABC')\n    expect(cookies[0]).to.have.property('domain')\n    expect(cookies[0]).to.have.property('httpOnly')\n    expect(cookies[0]).to.have.property('path')\n    expect(cookies[0]).to.have.property('secure')\n  })\n```\n\n----------------------------------------\n\nTITLE: External Navigation Test with cy.origin\nDESCRIPTION: Cypress test code demonstrating how to handle external navigation using cy.origin command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cross-origin-testing.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('http://localhost:8080')\ncy.get('a').click()\ncy.origin('https://example.cypress.io', () => {\n  cy.get('selector').should('exist')\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Event Handlers in Svelte Component\nDESCRIPTION: Demonstrates testing event handlers using Cypress spy to verify event emissions. The example shows how to test an onChange event handler when incrementing a stepper component.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/svelte/examples.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('clicking + fires a change event with the incremented value', () => {\n  const onChangeSpy = cy.spy().as('onChangeSpy')\n  cy.mount(Stepper, { props: { onChange: onChangeSpy } })\n  cy.get('[data-cy=increment]').click()\n  cy.get('@onChangeSpy').should('have.been.calledWith', 1)\n})\n```\n\n----------------------------------------\n\nTITLE: Testing API Endpoints with Cypress Request Command\nDESCRIPTION: Demonstrates how to use cy.request() to test a backend API endpoint for adding a todo item. The test sends a POST request and verifies the response body.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('adds a todo', () => {\n  cy.request({\n    url: '/todos',\n    method: 'POST',\n    body: {\n      title: 'Write REST API',\n    },\n  })\n    .its('body')\n    .should('deep.contain', {\n      title: 'Write REST API',\n      completed: false,\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress for Amazon Cognito Authentication\nDESCRIPTION: This snippet demonstrates how to configure Cypress to use Amazon Cognito environment variables and AWS exports. It shows loading environment variables from a .env file and setting up Cypress configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/amazon-cognito-authentication.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// Populate process.env with values from .env file\nrequire('dotenv').config()\n// AWS exports\nconst awsConfig = require('./aws-exports-es5.js')\n```\n\nLANGUAGE: js\nCODE:\n```\n{\n  env: {\n    cognito_username: process.env.AWS_COGNITO_USERNAME,\n    cognito_password: process.env.AWS_COGNITO_PASSWORD,\n    awsConfig: awsConfig.default\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Testing Across Multiple Frameworks\nDESCRIPTION: Shows how to implement component testing in React, Angular, Vue, and Svelte using Cypress. Each example demonstrates mounting a Button component and testing its label text.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/get-started/why-cypress.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Button from './Button'\n\nit('uses custom text for the button label', () => {\n  cy.mount(<Button>Click me!</Button>)\n  // Assert that a button component has the correct text\n  cy.get('button').should('contains.text', 'Click me!')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport ButtonComponent from './button.component'\n\nit('uses custom text for the button label', () => {\n  cy.mount('<app-button>Click me!</app-button>', {\n    declarations: [ButtonComponent],\n  })\n  // Assert that a button component has the correct text\n  cy.get('button').should('contains.text', 'Click me!')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport Button from './Button.vue'\n\nit('uses custom text for the button label', () => {\n  cy.mount(Button, {\n    slots: {\n      default: 'Click me!',\n    },\n  })\n  // Assert that a button component has the correct text\n  cy.get('button').should('contains.text', 'Click me!')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport Button from './Button.svelte'\n\nit('uses custom text for the button label', () => {\n  cy.mount(Button, { props: { msg: 'Click me!' } })\n  // Assert that a button component has the correct text\n  cy.get('button').should('contains.text', 'Click me!')\n})\n```\n\n----------------------------------------\n\nTITLE: Using the checkToken Custom Command\nDESCRIPTION: Shows how to use the custom checkToken command to verify a specific token value in localStorage.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.checkToken('abc123')\n```\n\n----------------------------------------\n\nTITLE: Implementing an Asynchronous Task with Promise in Cypress\nDESCRIPTION: Shows how to implement an asynchronous task that returns a Promise. The task pauses execution for a specified number of milliseconds.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/task.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.task('pause', 1000)\n```\n\nLANGUAGE: typescript\nCODE:\n```\non('task', {\n  pause(ms) {\n    return new Promise((resolve) => {\n      setTimeout(() => resolve(null), ms)\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Authentication Container Component in React/TypeScript\nDESCRIPTION: Creates an AppGoogle container component that handles Google authentication using react-google-login. Includes configuration of Google login hooks and conditional rendering of authentication UI elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/google-authentication.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// initial imports ...\nimport { GoogleLogin, useGoogleLogin } from 'react-google-login'\n// ...\nconst AppGoogle = () => {\n  // ...\n  useGoogleLogin({\n    clientId: process.env.REACT_APP_GOOGLE_CLIENTID!,\n    onSuccess: (res) => {\n      authService.send('GOOGLE', { user: res.profileObj, token: res.tokenId })\n    },\n    cookiePolicy: 'single_host_origin',\n    isSignedIn: true,\n  })\n  // ...\n  const isLoggedIn =\n    isAuthenticated &&\n    (authState.matches('authorized') ||\n      authState.matches('refreshing') ||\n      authState.matches('updating'))\n  return (\n    <div className={classes.root}>\n      // ...\n      {authState.matches('unauthorized') && (\n        <Container component=\"main\" maxWidth=\"xs\">\n          <CssBaseline />\n          <div className={classes.paper}>\n            <GoogleLogin\n              clientId={process.env.REACT_APP_GOOGLE_CLIENTID!}\n              buttonText=\"Login\"\n              cookiePolicy={'single_host_origin'}\n            />\n          </div>\n        </Container>\n      )}\n    </div>\n  )\n}\nexport default AppGoogle\n```\n\n----------------------------------------\n\nTITLE: Testing CORS bypass with cy.request() in Cypress\nDESCRIPTION: This snippet demonstrates how cy.request() bypasses CORS restrictions, allowing tests to make requests to any external server without the preflight OPTIONS check that browsers would normally perform.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/request.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// we can make requests to any external server, no problem.\ncy.request('https://www.google.com/webhp?#q=cypress.io+cors')\n  .its('body')\n  .should('include', 'Testing, the way it should be') // true\n```\n\n----------------------------------------\n\nTITLE: Implicit Assertions with .eq() in Cypress\nDESCRIPTION: A code snippet demonstrating implicit assertions in Cypress using the .eq() command. This shows how some commands have built-in assertions that will cause retry behavior.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/retry-ability.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.todo-list li') // query\n  .should('have.length', 2) // assertion\n  .eq(3) // query\n```\n\n----------------------------------------\n\nTITLE: Chaining Assertions on Focused Element in Cypress\nDESCRIPTION: Example showing multiple chained assertions on the focused element to verify its attributes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/focused.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.focused().should('have.attr', 'name').and('eq', 'num')\n```\n\n----------------------------------------\n\nTITLE: Creating Fixture from Response Body in Cypress\nDESCRIPTION: Demonstrates how to use cy.exec() to write a response body to a file, creating a fixture that can be used in tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/exec.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('POST', '/comments').as('postComment')\ncy.get('.add-comment').click()\ncy.wait('@postComment').then(({ response }) => {\n  cy.exec(\n    `echo ${JSON.stringify(response.body)} >cypress/fixtures/comment.json`\n  )\n  cy.fixture('comment.json').should('deep.eq', response.body)\n})\n```\n\n----------------------------------------\n\nTITLE: Cypress Form Submission Test\nDESCRIPTION: Example of typing into form fields and triggering form submission using the enter key in Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/type.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#username').type('bob@burgers.com')\ncy.get('#password').type('password123{enter}')\n```\n\n----------------------------------------\n\nTITLE: Finding Elements with Text Content in Cypress\nDESCRIPTION: Examples of using cy.contains() to find elements with specific text content, including using regular expressions and numbers.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/contains.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// yields <li>apples</li>\ncy.contains('apples')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// yields input[type='submit'] element then clicks it\ncy.get('form').contains('submit the form!').click()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// yields <button>\ncy.contains(4)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// yields <li>bananas</li>\ncy.contains(/^b\\w+/)\n```\n\n----------------------------------------\n\nTITLE: Wrapping Application Login Service for E2E Testing\nDESCRIPTION: Shows how to wrap a user service login promise from application code and make assertions against the resolved user object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/wrap.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// import application code for logging in\nimport { userService } from '../../src/_services/user.service'\n\nit('can assert against resolved object using .should', () => {\n  cy.log('user service login')\n  const username = Cypress.env('username')\n  const password = Cypress.env('password')\n\n  // wrap the promise returned by the application code\n  cy.wrap(userService.login(username, password))\n    // check the yielded object\n    .should('be.an', 'object')\n    .and('have.keys', ['firstName', 'lastName', 'username', 'id', 'token'])\n    .and('contain', {\n      username: 'test',\n      firstName: 'Test',\n      lastName: 'User',\n    })\n\n  // cy.visit command will wait for the promise returned from\n  // the \"userService.login\" to resolve. Then local storage item is set\n  // and the visit will immediately be authenticated and logged in\n  cy.visit('/')\n  // we should be logged in\n  cy.contains('Hi Test!').should('be.visible')\n})\n```\n\n----------------------------------------\n\nTITLE: Debugging after get() in Cypress Tests\nDESCRIPTION: Demonstrates how to pause with a debugger after using the get() command and before running an assertion.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/debug.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('a').debug().should('have.attr', 'href')\n```\n\n----------------------------------------\n\nTITLE: Simulating Network Errors with req.destroy() in Cypress\nDESCRIPTION: Demonstrates how to force a network error response for specific requests based on conditional logic.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// dynamically destroy the request and\n// respond with a network error\ncy.intercept('POST', '/users', (req) => {\n  if (mustDestroy(req)) {\n    req.destroy()\n  }\n\n  function mustDestroy(req) {\n    // code that determines whether to force a network error\n    // based on the contents of `req`\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Example of Clearing an Input Field and Adding New Text in JavaScript\nDESCRIPTION: Demonstrates clearing an input field by name and typing a new value, showing a common form interaction pattern in tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clear.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input[name=\"name\"]').clear().type('Jane Lane')\n```\n\n----------------------------------------\n\nTITLE: Using Middleware Request Handlers in Cypress\nDESCRIPTION: Demonstrates how to implement middleware handlers in Cypress that are called before more specific handlers. This example shows setting authorization headers on all requests while also making assertions on specific requests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// you could have a top-level middleware handler that\n// sets an auth token on all requests\n// but remember setting `middleware: true` will\n// cause this to always be called first\ncy.intercept('http://api.company.com/', { middleware: true }, (req) => {\n  req.headers['authorization'] = `token ${token}`\n})\n\n// and then have another handler that\n// more narrowly asserts on certain requests\ncy.intercept('POST', 'http://api.company.com/widgets', (req) => {\n  expect(req.body).to.include('analytics')\n})\n\n// a POST request to http://api.company.com/widgets would hit both\n// of those callbacks, middleware first, then the request would be\n// sent out with the modified request headers to the\n// real destination\n```\n\n----------------------------------------\n\nTITLE: Customizing File Properties with selectFile in Cypress\nDESCRIPTION: Demonstrates how to use selectFile() with custom fileName, mimeType and lastModified properties. Shows validation of file properties including name inference, MIME type handling, and timestamp modifications.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/selectfile.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input[type=file][multiple]')\n  .selectFile([\n    {\n      contents: 'cypress/fixtures/example.json',\n    },\n    {\n      contents: 'cypress/fixtures/example.json',\n      fileName: 'file.png',\n    },\n    {\n      contents: 'cypress/fixtures/example.json',\n      fileName: 'file.png',\n      mimeType: 'text/plain',\n      lastModified: new Date('Feb 18 1989').valueOf(),\n    },\n  ])\n  .then(($input) => {\n    const files = $input[0].files\n\n    // If nothing is specified, the fileName and MIME type will be inferred from the path on disk.:\n    expect(files[0].name).to.eq('example.json')\n    expect(files[0].type).to.eq('application/json')\n\n    // If the fileName is given, the MIME type will be inferred based on that.\n    expect(files[1].name).to.eq('file.png')\n    expect(files[1].type).to.eq('image/png')\n\n    // But an explicitly specified MIME type is always used.\n    expect(files[2].name).to.eq('file.png')\n    expect(files[2].type).to.eq('text/plain')\n\n    // lastModified defaults to the current time, but can be overridden.\n    expect(files[0].lastModified).to.be.closeTo(Date.now(), 1000)\n    expect(files[1].lastModified).to.be.closeTo(Date.now(), 1000)\n    expect(files[2].lastModified).to.eql(new Date('Feb 18 1989').valueOf())\n  })\n```\n\n----------------------------------------\n\nTITLE: Focusing and Blurring an Element in Cypress\nDESCRIPTION: Example of focusing an element before blurring it using Cypress commands. This pattern ensures the element is focused before attempting to blur it.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/blur.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').as('btn').focus()\ncy.get('@btn').blur()\n```\n\n----------------------------------------\n\nTITLE: Implementing Okta Login with cy.origin()\nDESCRIPTION: Custom command implementation for Okta authentication using cy.origin() to handle cross-origin login flow.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/okta-authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst loginToOkta = (username: string, password: string) => {\n  Cypress.log({\n    displayName: 'OKTA LOGIN',\n    message: [`🔐 Authenticating | ${username}`],\n    autoEnd: false,\n  })\n\n  cy.visit('/')\n  cy.origin(\n    Cypress.env('okta_domain'),\n    { args: { username, password } },\n    ({ username, password }) => {\n      cy.get('input[name=\"identifier\"]').type(username)\n      cy.get('input[name=\"credentials.passcode\"]').type(password, {\n        log: false,\n      })\n      cy.get('[type=\"submit\"]').click()\n    }\n  )\n\n  cy.get('[data-test=\"sidenav-username\"]').should('contain', username)\n}\n\nCypress.Commands.add('loginByOkta', (username: string, password: string) => {\n  return loginToOkta(username, password)\n})\n```\n\n----------------------------------------\n\nTITLE: Example Svelte Component Test using @cypress/svelte@2\nDESCRIPTION: Provides a basic example of a Svelte component test file (`.cy.ts`). It imports a Svelte component and the `mount` function from the `@cypress/svelte@2` package, then uses `cy.mount()` to render the component in a test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport MySvelteComponent from './MySvelteComponent'\nimport { mount } from `@cypress/svelte`\n\nit('renders', () => {\n  cy.mount(MySvelteComponent)\n})\n```\n\n----------------------------------------\n\nTITLE: Launching Chrome Canary with --browser Flag\nDESCRIPTION: This example shows that the syntax for launching Chrome Canary with the --browser CLI flag has changed. Instead of passing 'canary', you must now pass 'chrome:canary'.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_109\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --browser canary\n```\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --browser chrome:canary\n```\n\n----------------------------------------\n\nTITLE: Renaming blacklistHosts configuration to blockHosts in Cypress\nDESCRIPTION: Migration example showing the change from 'blacklistHosts' configuration option to 'blockHosts' to more accurately reflect its behavior.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_90\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"blacklistHosts\": \"www.google-analytics.com\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"blockHosts\": \"www.google-analytics.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Next Element After '.second' Class\nDESCRIPTION: Example of using 'next' to find the element following an element with class 'second'.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/next.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>apples</li>\n  <li class=\"second\">oranges</li>\n  <li>bananas</li>\n</ul>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// yields <li>bananas</li>\ncy.get('.second').next()\n```\n\n----------------------------------------\n\nTITLE: Automating UI Coverage Scan Using Sitemap.xml in Cypress\nDESCRIPTION: This code snippet demonstrates how to automate UI Coverage scanning by fetching URLs from a sitemap.xml file and visiting each URL to collect coverage data. This approach is useful for projects without existing Cypress tests to quickly understand initial coverage gaps.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/guides/identify-coverage-gaps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('UI Coverage Scan', () => {\n  it('Checks ui coverage with the sitemap.xml', () => {\n    cy.request('https://<YOUR_WEBSITE>/sitemap.xml').then((response) => {\n      const xmlString = response.body\n      const parser = new DOMParser()\n        (loc) => loc.textContent\n    })\n    Cypress._.each(URLs, (URL) => {\n      cy.visit(URL)\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Using getAllSessionStorage in Cypress\nDESCRIPTION: Demonstrates a full example of setting sessionStorage during a page visit and then retrieving and asserting on the stored values using getAllSessionStorage.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/getallsessionstorage.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('/users', {\n  onBeforeLoad(win) {\n    win.sessionStorage.setItem('key', 'value')\n  },\n})\n\ncy.getAllSessionStorage().then((result) => {\n  expect(result).to.deep.equal({\n    'http://localhost:8080': {\n      key: 'value',\n    },\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Splitting Cross-Origin Navigation into Separate Tests\nDESCRIPTION: Alternative approach to handling cross-origin scenarios by splitting navigation to different origins into separate test cases.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cross-origin-testing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nit('navigates', () => {\n  cy.visit('https://www.cypress.io')\n})\n\n// split visiting different origin in another test\nit('navigates to new origin', () => {\n  cy.visit('https://cypress-dx.com')\n  cy.get('selector') // yup all good\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating Simple Routes from cy.route() to cy.intercept()\nDESCRIPTION: Shows how to replace cy.route() with cy.intercept() for basic HTTP request interception, eliminating the need for cy.server() which is no longer required.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\n// Set up XHR listeners using cy.route()\ncy.server()\ncy.route('/users').as('getUsers')\ncy.route('POST', '/project').as('createProject')\ncy.route('PATCH', '/projects/*').as('updateProject')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Intercept HTTP requests\ncy.intercept('/users').as('getUsers')\ncy.intercept('POST', '/project').as('createProject')\ncy.intercept('PATCH', '/projects/*').as('updateProject')\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Coverage Endpoint for Any Server Type\nDESCRIPTION: Shows how to implement a custom code coverage endpoint for server types that don't have dedicated middleware. This endpoint returns the global coverage object in response to GET requests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/code-coverage.mdx#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nif (global.__coverage__) {\n  // handle \"GET __coverage__\" requests\n  onRequest = (response) => {\n    response.sendJSON({ coverage: global.__coverage__ })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic within Command Syntax in Cypress\nDESCRIPTION: Basic syntax examples showing correct and incorrect usage of the .within() command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/within.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.within(callbackFn)\n.within(options, callbackFn)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.list')\n  .first()\n  .within(($list) => {}) // Yield the first `.list` and scope all commands within it\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.within(() => {}) // Errors, cannot be chained off 'cy'\ncy.getCookies().within(() => {}) // Errors, 'getCookies' does not yield DOM element\ncy.get('div').within(($divs) => {}) // Probably errors, because get('div') yields multiple elements\n```\n\n----------------------------------------\n\nTITLE: Using Cookie Value in Subsequent Requests\nDESCRIPTION: Example of retrieving a cookie, saving its value, and using it in a subsequent API request.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/getcookie.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet cookie\n\ncy.getCookie('session_id')\n  .should('exist')\n  .then((c) => {\n    // save cookie until we need it\n    cookie = c\n  })\n\n// some time later, force the \"cy.request\"\n// to run ONLY after the cookie has been set\n// by placing it inside \".then\"\ncy.get('#submit')\n  .click()\n  .then(() => {\n    cy.request({\n      url: '/api/admin',\n      headers: {\n        'my-token-x': cookie.value,\n      },\n    })\n  })\n```\n\n----------------------------------------\n\nTITLE: Using .then() to Manipulate Subjects in Cypress\nDESCRIPTION: This snippet demonstrates how to use the .then() command to access and manipulate the subject of a previous command, in this case extracting and modifying the href property of an element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy\n  // Find the el with id 'some-link'\n  .get('#some-link')\n\n  .then(($myElement) => {\n    // ...massage the subject with some arbitrary code\n\n    // grab its href property\n    const href = $myElement.prop('href')\n\n    // strip out the 'hash' character and everything after it\n    return href.replace(/(#.*)/, '')\n  })\n  .then((href) => {\n    // href is now the new subject\n    // which we can work with now\n  })\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Aliases with beforeEach in Cypress\nDESCRIPTION: This snippet illustrates the correct way to use aliases in Cypress tests by creating them in the beforeEach hook, ensuring they are available for each test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/variables-and-aliases.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ THE CORRECT EXAMPLE\nbeforeEach(() => {\n  // we will create a new alias before each test\n  cy.wrap('some value').as('exampleValue')\n})\n\nit('works in the first test', () => {\n  cy.get('@exampleValue').should('equal', 'some value')\n})\n\nit('works in the second test', () => {\n  cy.get('@exampleValue').should('equal', 'some value')\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Database Query with Multiple Arguments in Cypress\nDESCRIPTION: Shows how to pass multiple arguments to a task by using an object and destructuring. The example demonstrates querying a database with a profile name and query string.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/task.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// in test\nconst dbName = 'stagingA'\nconst query = 'SELECT * FROM users'\n\ncy.task('queryDatabase', { dbName, query })\n```\n\n----------------------------------------\n\nTITLE: Asserting Class Value with Cypress 'should' Command\nDESCRIPTION: Shows how to assert that an element has a specific class using the 'have.class' chainer with a value argument.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('form').should('have.class', 'form-horizontal')\n```\n\n----------------------------------------\n\nTITLE: Adapting AppAuth0 Component for Cypress Testing\nDESCRIPTION: This snippet updates the AppAuth0 component to handle authentication differently when running under Cypress tests. It uses localStorage for authentication in test environments and conditionally applies withAuthenticationRequired HOC.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/auth0-authentication.mdx#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n// initial imports ...\n\nimport { withAuthenticationRequired, useAuth0 } from \"@auth0/auth0-react\";\n\n// ...\n\nconst AppAuth0 = () => {\n  const { isAuthenticated, user, getAccessTokenSilently } = useAuth0();\n\n  // ...\n\n  useEffect(() => {\n      (async function waitForToken() {\n        const token = await getAccessTokenSilently();\n        authService.send(\"AUTH0\", { user, token });\n      })();\n    }, [user, getAccessTokenSilently]);\n\n  // If under test in Cypress, get credentials from \"auth0Cypress\"\n  // localstorage and send event to our state management to log the user into the SPA\n  if (window.Cypress) {\n    useEffect(() => {\n      const auth0 = JSON.parse(localStorage.getItem(\"auth0Cypress\")!);\n      authService.send(\"AUTH0\", {\n        user: auth0.body.decodedToken.user,\n        token: auth0.body.access_token,\n      });\n    }, []);\n  } else {\n    useEffect(() => {\n      (async function waitForToken() {\n        const token = await getAccessTokenSilently();\n        authService.send(\"AUTH0\", { user, token });\n      })();\n    }, [isAuthenticated, user, getAccessTokenSilently]);\n  }\n\n  // ...\n\n  const isLoggedIn =\n    isAuthenticated &&\n    (authState.matches(\"authorized\") ||\n      authState.matches(\"refreshing\") ||\n      authState.matches(\"updating\"));\n\n  return (\n    <div className={classes.root}>\n      // ...\n    </div>\n  );\n};\n\n// Conditional export wrapped with `withAuthenticationRequired`\n// if we aren't under test in Cypress.\nlet appAuth0 = window.Cypress ? AppAuth0 : withAuthenticationRequired(AppAuth0);\nexport default appAuth0\n```\n\n----------------------------------------\n\nTITLE: Opening DevTools Automatically for Different Browser Families\nDESCRIPTION: Example showing how to configure different browser families (chromium, firefox, electron) to automatically open developer tools when launched by Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/browser-launch-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\non('before:browser:launch', (browser = {}, launchOptions) => {\n  // `args` is an array of all the arguments that will\n  // be passed to browsers when it launches\n  console.log(launchOptions.args) // print all current args\n\n  if (browser.family === 'chromium' && browser.name !== 'electron') {\n    // auto open devtools\n    launchOptions.args.push('--auto-open-devtools-for-tabs')\n  }\n\n  if (browser.family === 'firefox') {\n    // auto open devtools\n    launchOptions.args.push('-devtools')\n  }\n\n  if (browser.name === 'electron') {\n    // auto open devtools\n    launchOptions.preferences.devTools = true\n  }\n\n  // whatever you return here becomes the launchOptions\n  return launchOptions\n})\n```\n\n----------------------------------------\n\nTITLE: Modifying Command Timeouts in Cypress\nDESCRIPTION: Demonstrates how to modify the timeout for a Cypress command, which affects both implicit assertions and any explicitly chained assertions after the command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// we've modified the timeout which affects the implicit\n// assertions as well as all explicit ones.\ncy.get('.mobile-nav', { timeout: 10000 })\n  .should('be.visible')\n  .and('contain', 'Home')\n```\n\n----------------------------------------\n\nTITLE: Stubbing Responses with Fixtures in Cypress\nDESCRIPTION: Demonstrates how to use fixtures to provide stubbed response data for network requests. This example intercepts GET requests to '/activities/*' and responds with the contents of the 'activities.json' fixture file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/network-requests.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// we set the response to be the activites.json fixture\ncy.intercept('GET', '/activities/*', { fixture: 'activities.json' })\n```\n\n----------------------------------------\n\nTITLE: Safely Accessing Retry Information with Lodash in Cypress\nDESCRIPTION: This snippet demonstrates a more robust way to access retry information in Cypress tests using Lodash. It provides fallback values to ensure compatibility across different Cypress versions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/test-retries.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nit('does something differently on retry', { retries: 3 }, () => {\n  // _.get: if the object or property is missing use the provided default value\n  const attempt = Cypress.currentRetry\n  const retries = Cypress._.get(cy.state('runnable'), '_retries', 0)\n  // use the \"attempt\" and \"retries\" values somehow\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Variables in cy.origin() Callback in Cypress\nDESCRIPTION: Shows the correct way to pass variables into cy.origin() callback using the args option.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/origin.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = 1\ncy.origin('cypress.io', { args: { foo } }, ({ foo }) => {\n  cy.visit('/')\n  // Now it will pass\n  cy.get('input').type(foo)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic DOM Updates with Aliases in Cypress\nDESCRIPTION: This snippet demonstrates how Cypress handles dynamic DOM updates when using aliases. It shows that Cypress re-queries the DOM to avoid stale element references.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/variables-and-aliases.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[data-testid=\"todos\"] li').first().as('firstTodo')\n\ncy.get('@firstTodo').find('.edit').click()\n\ncy.get('@firstTodo')\n  .should('have.class', 'editing')\n  .find('input')\n  .type('Clean the kitchen')\n```\n\n----------------------------------------\n\nTITLE: Implementing Cognito Login Command with Amplify v6\nDESCRIPTION: Cypress command implementation for programmatic login using AWS Amplify v6, featuring updated authentication flow and token management.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/amazon-cognito-authentication.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Amplify } from 'aws-amplify'\nimport { fetchAuthSession, signIn } from 'aws-amplify/auth'\n\nAmplify.configure(Cypress.env('awsConfig'))\nconst fetchJwts = async (username: string, password: string) => {\n  const options = { authFlowType: 'USER_PASSWORD_AUTH' as const }\n  await signIn({ username, password, options })\n  const authSession = await fetchAuthSession()\n  const tokens = authSession.tokens!\n  const accessToken = tokens.accessToken\n  const accessTokenPayload = accessToken.payload\n  return {\n    idToken: tokens.idToken!.toString(),\n    accessToken: accessToken.toString(),\n    clientId: accessTokenPayload.client_id as string,\n    accessTokenSub: accessTokenPayload.sub!,\n  }\n}\ntype JwtResponse = Awaited<ReturnType<typeof fetchJwts>>\n\n// Amazon Cognito\nCypress.Commands.add(\n  'loginByCognitoApi',\n  (username: string, password: string) => {\n    const log = Cypress.log({\n      displayName: 'COGNITO LOGIN',\n      message: [`🔐 Authenticating | ${username}`],\n      autoEnd: false,\n    })\n\n    log.snapshot('before')\n\n    cy.wrap(fetchJwts(username, password), { log: false }).then(\n      (unknownJwts) => {\n        const { idToken, accessToken, clientId, accessTokenSub } =\n          unknownJwts as JwtResponse\n\n        const keyPrefix = `CognitoIdentityServiceProvider.${clientId}`\n        const keyPrefixWithUsername = `${keyPrefix}.${accessTokenSub}`\n\n        const ls = window.localStorage\n        ls.setItem(`${keyPrefixWithUsername}.idToken`, idToken)\n        ls.setItem(`${keyPrefixWithUsername}.accessToken`, accessToken)\n        ls.setItem(`${keyPrefix}.LastAuthUser`, accessTokenSub)\n\n        log.snapshot('after')\n        log.end()\n      }\n    )\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in a Plugin\nDESCRIPTION: Example of how to dynamically set environment variables in a Cypress plugin based on the current Node environment. This allows for environment-specific configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/env.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconfig.env.sharedSecret =\n  process.env.NODE_ENV === 'qa' ? 'hoop brick tort' : 'sushi cup lemon'\n\nreturn config\n```\n\n----------------------------------------\n\nTITLE: Extending cy.contains() to Support Aliased Subjects in Cypress\nDESCRIPTION: This code snippet demonstrates how to overwrite the 'contains' query to add support for aliased subjects. It allows for using aliases like '@foo' within the contains query by retrieving the actual subject from Cypress state.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-queries.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.overwriteQuery(\n  'contains',\n  function (originalFn, filter, text, userOptions) {\n    if (_.isString(filter) && filter[0] === '@') {\n      let alias = cy.state('aliases')[filter.slice(1)]\n      let subject = cy.getSubjectFromChain(alias?.subjectChain)\n      filter = subject\n    }\n\n    if (_.isString(text) && text[0] === '@') {\n      let alias = cy.state('aliases')[text.slice(1)]\n      let subject = cy.getSubjectFromChain(alias?.subjectChain)\n      text = subject\n    }\n\n    return originalFn.call(this, filter, text, userOptions)\n  }\n)\n\ncy.wrap('li').as('element')\ncy.wrap('asdf 1').as('content')\n\ncy.contains('@element', '@content')\n```\n\n----------------------------------------\n\nTITLE: Applying JWT Middleware Globally in Express App\nDESCRIPTION: This code applies the checkJwt middleware globally to all routes in the Express application when the REACT_APP_AUTH0 environment variable is set.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/auth0-authentication.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// initial imports ...\nimport { checkJwt } from './helpers'\n\n// ...\n\nif (process.env.REACT_APP_AUTH0) {\n  app.use(checkJwt)\n}\n\n// routes ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging for Cypress Events\nDESCRIPTION: This snippet shows how to enable debug logging for all Cypress events. It uses the localStorage to set the debug flag, which will display a stream of Cypress events in the browser's console.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/catalog-of-events.mdx#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nlocalStorage.debug = 'cypress:*'\n```\n\n----------------------------------------\n\nTITLE: Aliasing Multiple Routes in Cypress\nDESCRIPTION: Shows how to alias several routes using cy.intercept() for different HTTP methods and URL patterns.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/as.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/company/*').as('companyGet')\ncy.intercept('/roles/*').as('rolesGet')\ncy.intercept('/teams/*').as('teamsGet')\ncy.intercept(/users\\/\\d+/).as('userGet')\ncy.intercept('PUT', /^\\/users\\/\\d+/).as('userPut')\n```\n\n----------------------------------------\n\nTITLE: Chaining Assertions on the Same Subject in Cypress\nDESCRIPTION: Example showing how to chain assertions on the same DOM element using .should() and .and() to verify multiple conditions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/and.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('nav') // yields <nav>\n  .should('be.visible') // yields <nav>\n  .and('have.class', 'open') // yields <nav>\n```\n\n----------------------------------------\n\nTITLE: Delayed UI Update in TodoMVC Model\nDESCRIPTION: An example showing how to artificially delay UI updates in a TodoMVC application model. This demonstrates how Cypress's retry-ability works even with delayed DOM updates.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/retry-ability.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\napp.TodoModel.prototype.addTodo = function (title) {\n  this.todos = this.todos.concat({\n    id: Utils.uuid(),\n    title: title,\n    completed: false,\n  })\n\n  // let's trigger the UI to render after 3 seconds\n  setTimeout(() => {\n    this.inform()\n  }, 3000)\n}\n```\n\n----------------------------------------\n\nTITLE: Using onBeforeLoad Callback\nDESCRIPTION: Demonstrates how to use the onBeforeLoad callback which executes before the page has fully loaded its resources.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('http://localhost:3000/#dashboard', {\n  onBeforeLoad: (contentWindow) => {\n    // contentWindow is the remote page's window object\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of cy.intercept\nDESCRIPTION: Examples of properly implementing cy.intercept for spying, stubbing responses, and request modification in different scenarios.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// spying\ncy.intercept('/users/**')\ncy.intercept('GET', '/users*')\ncy.intercept({\n  method: 'GET',\n  url: '/users*',\n  hostname: 'localhost',\n})\n\n// spying and response stubbing\ncy.intercept('POST', '/users*', {\n  statusCode: 201,\n  body: {\n    name: 'Peter Pan',\n  },\n})\n\n// spying, dynamic stubbing, request modification, etc.\ncy.intercept('/users*', { hostname: 'localhost' }, (req) => {\n  /* do something with request and/or response */\n})\n```\n\n----------------------------------------\n\nTITLE: Using Stubs for Window Confirmation Assertions in Cypress\nDESCRIPTION: This snippet shows an alternative approach to handling window confirmations using Cypress stubs. It demonstrates how to create a stub, set its behavior for multiple calls, and make assertions on the stub calls.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/catalog-of-events.mdx#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nit('could also use a stub instead of imperative code', () => {\n  const stub = cy.stub()\n\n  // not necessary but showing for clarity\n  stub.onFirstCall().returns(undefined)\n  stub.onSecondCall().returns(false)\n  stub.onThirdCall().returns(true)\n\n  cy.on('window:confirm', stub)\n\n  cy.get('button')\n    .click()\n    .then(() => {\n      expect(stub.getCall(0)).to.be.calledWith('first confirm')\n      expect(stub.getCall(1)).to.be.calledWith('second confirm')\n      expect(stub.getCall(2)).to.be.calledWith('third confirm')\n      expect(stub.getCall(3)).to.be.calledWith('third confirm was true')\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: res.send() Shorthand Syntax for Cypress Response Interception\nDESCRIPTION: Shows the shorthand syntax options for res.send() to avoid specifying a full StaticResponse object, demonstrating three different ways to send modified responses.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// equivalent to `res.send({ body })`\nres.send(body)\n\n// equivalent to `res.send({ body, headers })`\nres.send(body, headers)\n\n// equivalent to `res.send({ statusCode, body, headers})`\nres.send(statusCode, body, headers)\n```\n\n----------------------------------------\n\nTITLE: Using Cypress Spy to Test Component Events in Angular\nDESCRIPTION: This snippet demonstrates creating a spy for an Angular component to validate that clicking the increment button fires a change event with the incremented value. It passes the spy to the component's emit method via componentProperties.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/get-started.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nit('clicking + fires a change event with the incremented value', () => {\n  const onChangeSpy = cy.spy().as('onChangeSpy')\n  cy.mount(StepperComponent, {\n    componentProperties: {\n      change: {\n        emit: onChangeSpy,\n      } as any,\n    },\n  })\n  cy.get('[data-cy=increment]').click()\n  cy.get('@changeSpy').should('have.been.calledWith', 1)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for cy.exec() in Cypress\nDESCRIPTION: Shows how to increase the allowed time for a command to execute using the timeout option.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/exec.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// will fail if script takes longer than 20 seconds to finish\ncy.exec('npm run build', { timeout: 20000 })\n```\n\n----------------------------------------\n\nTITLE: Typing Key Combinations in Cypress\nDESCRIPTION: Demonstrates how to type key combinations using the .type() command in Cypress. This example shows typing a SHIFT+ALT+b combination followed by 'hello'.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/type.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input').type('{shift+alt+b}hello')\n```\n\n----------------------------------------\n\nTITLE: Multiple Screenshot Examples in Cypress Test\nDESCRIPTION: Demonstrates various screenshot scenarios within a single Cypress test, including duplicate names, custom naming, and failure screenshots.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/screenshot.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('my tests', () => {\n  it('takes a screenshot', () => {\n    // NOTE: This file has multiple screenshots\n    // each screenshot has a common ancestor path of `/users/`.\n    // In this scenario `/users/` is stripped from the path.\n    // cypress/screenshots/login.cy.js/my tests -- takes a screenshot.png\n    cy.screenshot()\n    // cypress/screenshots/login.cy.js/my tests -- takes a screenshot (1).png\n    cy.screenshot()\n    // cypress/screenshots/login.cy.js/my tests -- takes a screenshot (2).png\n    cy.screenshot()\n\n    // cypress/screenshots/login.cy.js/my-screenshot.png\n    cy.screenshot('my-screenshot')\n    // cypress/screenshots/login.cy.js/my-screenshot (1).png\n    cy.screenshot('my-screenshot')\n    // cypress/screenshots/login.cy.js/my/nested/screenshot.png\n    cy.screenshot('my/nested/screenshot')\n\n    // if this test fails, the screenshot will be saved to\n    // cypress/screenshots/login.cy.js/my tests -- takes a screenshot (failed).png\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Cypress Submit Command\nDESCRIPTION: Demonstrates the correct way to use the submit command on a form element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/submit.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('form').submit() // Submit a form\n```\n\n----------------------------------------\n\nTITLE: Implementing Microsoft Login with Cypress\nDESCRIPTION: Custom Cypress command implementation for Microsoft authentication flow using cy.origin() to handle the Microsoft login process.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/social-authentication.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction logIntoMicrosoft(username: string, password: string, name: string) {\n  cy.visit('http://localhost:3000')\n  cy.get('#qsLoginBtn').click()\n\n  cy.origin(Auth0Domain, () => {\n    cy.scrollTo('bottom')\n    cy.get('form[data-provider=\"windowslive\"]').submit()\n  })\n\n  cy.origin(\n    'login.live.com',\n    {\n      args: {\n        username,\n        password,\n      },\n    },\n    ({ username, password }) => {\n      cy.get('input[type=\"email\"]').type(username)\n      cy.get('input[type=\"submit\"]').click()\n      cy.get('input[type=\"password\"]').type(password, {\n        log: false,\n      })\n      cy.get('input[type=\"submit\"]').click()\n      cy.get('#idBtn_Back').click()\n    }\n  )\n\n  cy.get('h6.dropdown-header').should('contain', name)\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'invoke' with Arrays to Call Indexed Functions\nDESCRIPTION: Demonstrates how '.invoke()' works with arrays by using a numeric index to select and call a function from an array of functions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/invoke.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst reverse = (s) => Cypress._.reverse(s)\nconst double = (n) => n * n\n\n// picks function with index 1 and calls it with argument 4\ncy.wrap([reverse, double]).invoke(1, 4).should('eq', 16)\n```\n\n----------------------------------------\n\nTITLE: Listing Cypress Cache Versions\nDESCRIPTION: Commands to find Cypress binary versions and list cached versions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n$ npx cypress cache path\n/home/<username>/.cache/Cypress\n$ npx cypress cache list\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of root Command in Cypress\nDESCRIPTION: Shows correct usage examples of the root command, including getting the default root element and using it within a specific context.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/root.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.root() // Yield root element <html>\ncy.get('nav').within(($nav) => {\n  cy.root() // Yield root element <nav>\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Each Command Syntax in Cypress\nDESCRIPTION: Basic syntax for the .each() command that takes a callback function.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/each.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.each(callbackFn)\n```\n\n----------------------------------------\n\nTITLE: Jenkins Pipeline with UI Coverage Verification\nDESCRIPTION: Example Jenkins pipeline configuration showing how to add a UI Coverage verification stage to an existing Cypress test pipeline.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/results-api.mdx#2025-04-22_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\npipeline {\n  agent {\n    docker {\n      image 'cypress/base:22.12.0'\n    }\n  }\n\n  environment {\n    CYPRESS_PROJECT_ID: 'xxxx'\n    CYPRESS_RECORD_KEY = credentials('cypress-record-key')\n  }\n\n  stages {\n    stage('build and test') {\n      steps {\n        sh 'npm ci'\n        sh 'npx cypress run --record'\n      }\n    }\n\n   stage('Verify UI Coverage Results') {\n     steps {\n       sh 'npm install --force https://cdn.cypress.io/extract-cloud-results/v1/extract-cloud-results.tgz'\n       sh 'node ./scripts/verifyUICoverageResults.js'\n     }\n   }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Typing into an Element with Tabindex in Cypress\nDESCRIPTION: Demonstrates typing into a non-input element that can receive focus via a tabindex attribute.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/type.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <div id=\"el\" tabindex=\"1\">This div can receive focus!</div>\n</body>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#el').type('supercalifragilisticexpialidocious')\n```\n\n----------------------------------------\n\nTITLE: Increasing Timeouts for Long Animations in Cypress (JavaScript)\nDESCRIPTION: This example shows how to increase the default timeout for Cypress commands when dealing with long animations. It applies a 10-second timeout to `cy.get()` to wait for the button to exist and be visible, and also to the `.click()` action followed by `.should()` to wait for the element to lose the 'animating' class.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\ncy.get('button', { timeout: 10000 }) // wait up to 10 seconds for this 'button' to exist\n  .should('be.visible') // and to be visible\n\ncy.get('.element')\n  .click({ timeout: 10000 })\n  .should('not.have.class', 'animating')\n// wait up to 10 seconds for the .element to not have 'animating' class\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Type Validation Commands in Cypress\nDESCRIPTION: Demonstrates how to create commands that accept multiple types of subjects using array notation in prevSubject.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add(\n  'trigger',\n  {\n    prevSubject: ['element', 'document', 'window'],\n  },\n  (subject, eventName, options) => {\n    // receives the previous subject and it's\n    // guaranteed to be an element, document, or window\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Comparing Text Values Between Elements in Cypress\nDESCRIPTION: Shows how to normalize and compare text values from different elements using closures and 'should' callback.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst normalizeText = (s) => s.replace(/\\s/g, '').toLowerCase()\n\n// will keep text from title element\nlet titleText\n\ncy.get('.company-details')\n  .find('.title')\n  .then(($title) => {\n    // save text from the first element\n    titleText = normalizeText($title.text())\n  })\n\ncy.get('.company-details')\n  .find('.identifier')\n  .should(($identifier) => {\n    // we can massage text before comparing\n    const idText = normalizeText($identifier.text())\n\n    // text from the title element should already be set\n    expect(idText, 'ID').to.equal(titleText)\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom 'focused2' Query in Cypress\nDESCRIPTION: Provides a detailed example of implementing a custom 'focused2' query in Cypress, demonstrating the structure of the outer and inner functions, logging, and subject handling.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-queries.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.addQuery('focused2', function focused2(options = {}) {\n  const log = options.log !== false && Cypress.log({ timeout: options.timeout })\n\n  this.set('timeout', options.timeout)\n\n  return () => {\n    let $el = cy.getFocused()\n\n    log &&\n      cy.state('current') === this &&\n      log.set({\n        $el,\n        consoleProps: () => {\n          return {\n            Yielded: $el?.length ? $el[0] : '--nothing--',\n            Elements: $el != null ? $el.length : 0,\n          }\n        },\n      })\n\n    if (!$el) {\n      $el = cy.$$(null)\n      $el.selector = 'focused'\n    }\n\n    return $el\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using the loginViaApi Custom Command\nDESCRIPTION: Demonstrates two ways to use the loginViaApi custom command: directly as a parent command and in a chain where it ignores the previous subject.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// can start a chain off of cy\ncy.loginViaApi('admin')\n\n// can be chained but will not receive the previous subject\ncy.get('button').loginViaApi('user')\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Using 'invoke' to Show Hidden Elements\nDESCRIPTION: A full example showing how to use '.invoke()' to make a hidden element visible and then assert its visibility for testing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/invoke.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.connectors-div')\n  .should('be.hidden')\n  .invoke('show')\n  .should('be.visible')\n```\n\n----------------------------------------\n\nTITLE: Asserting Disabled Property and Toggling State with Cypress - JavaScript/HTML\nDESCRIPTION: This combined HTML and JavaScript example shows how to assert that an input element is disabled, enable it via Cypress's .invoke(), and subsequently check that it is enabled using both .should('be.enabled') and the negated .should('not.be.disabled') assertion. Requires an HTML input with data-testid and Cypress set up. Demonstrates chaining and state manipulation.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/assertions.mdx#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" data-testid=\"example-input\" disabled />\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[data-testid=\"example-input\"]')\n  .should('be.disabled')\n  // let's enable this element from the test\n  .invoke('prop', 'disabled', false)\n\ncy.get('[data-testid=\"example-input\"]')\n  // we can use \"enabled\" assertion\n  .should('be.enabled')\n  // or negate the \"disabled\" assertion\n  .and('not.be.disabled')\n```\n\n----------------------------------------\n\nTITLE: Custom Selector Function with onElement Callback\nDESCRIPTION: Example of setting a custom function for determining the selector for an element using the onElement callback. The function checks for a custom attribute and falls back to default behavior if not found.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/selector-playground-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.SelectorPlayground.defaults({\n  onElement: ($el) => {\n    const customId = $el.attr('my-custom-attr')\n\n    if (customId) {\n      return `[my-custom-attr=${customId}]`\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Checkbox Disabled State in Cypress\nDESCRIPTION: Shows how to assert that a checkbox element is disabled using the 'should' command with the 'be.disabled' chainer.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get(':checkbox').should('be.disabled')\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Text Content in Cypress\nDESCRIPTION: Demonstrates various ways to assert on an element's text content, including handling non-breaking spaces and using different assertion methods.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('div').should('have.text', 'foobarbaz')\n\ncy.get('div').should('have.text', 'Hello\\u00a0world')\n\ncy.contains('div', 'Hello world')\n\ncy.get('div').should(($div) => {\n  const text = $div.text()\n\n  expect(text).to.match(/foo/)\n  expect(text).to.include('foo')\n  expect(text).not.to.include('bar')\n})\n```\n\n----------------------------------------\n\nTITLE: Using createOutputSpy to Test Angular Component Outputs\nDESCRIPTION: Demonstrates how to test Angular component output events using the createOutputSpy utility, which creates and monitors event emitters.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StepperComponent } from './stepper.component'\nimport { mount, createOutputSpy } from '@cypress/angular'\n\nit('Has spy', () => {\n  mount(StepperComponent, { change: createOutputSpy('changeSpy') })\n  cy.get('[data-cy=increment]').click()\n  cy.get('@changeSpy').should('have.been.called')\n})\n```\n\n----------------------------------------\n\nTITLE: Using baseUrl Configuration in Assertions with JavaScript\nDESCRIPTION: Shows how to use Cypress.config().baseUrl to avoid hardcoding base URLs in test assertions, making tests more maintainable.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/url.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.url().should('eq', 'http://localhost:8000/index.html')\ncy.url().should('eq', Cypress.config().baseUrl + '/index.html') // tests won't fail in case the port changes\n```\n\n----------------------------------------\n\nTITLE: Multiple File Selection Example\nDESCRIPTION: Demonstrates how to select multiple files at once for inputs with the multiple property.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/selectfile.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input[type=file]').selectFile([\n  'file1.json',\n  'file2.json',\n  'file3.json',\n])\n```\n\n----------------------------------------\n\nTITLE: Selecting an Option from HTML Datalist in Cypress\nDESCRIPTION: Shows how to 'select' an option from a datalist by typing the option text into the associated input element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/type.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<input list=\"fruit\" />\n<datalist id=\"fruit\">\n  <option>Apple</option>\n  <option>Banana</option>\n  <option>Cantaloupe</option>\n</datalist>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input').type('Apple')\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Google Login Command in Cypress\nDESCRIPTION: Implementation of a custom Cypress command that handles Google authentication using refresh tokens and API calls\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/google-authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nCypress.Commands.add('loginByGoogleApi', () => {\n  cy.log('Logging in to Google')\n  cy.request({\n    method: 'POST',\n    url: 'https://www.googleapis.com/oauth2/v4/token',\n    body: {\n      grant_type: 'refresh_token',\n      client_id: Cypress.env('googleClientId'),\n      client_secret: Cypress.env('googleClientSecret'),\n      refresh_token: Cypress.env('googleRefreshToken'),\n    },\n  }).then(({ body }) => {\n    const { access_token, id_token } = body\n\n    cy.request({\n      method: 'GET',\n      url: 'https://www.googleapis.com/oauth2/v3/userinfo',\n      headers: { Authorization: `Bearer ${access_token}` },\n    }).then(({ body }) => {\n      cy.log(body)\n      const userItem = {\n        token: id_token,\n        user: {\n          googleId: body.sub,\n          email: body.email,\n          givenName: body.given_name,\n          familyName: body.family_name,\n          imageUrl: body.picture,\n        },\n      }\n\n      window.localStorage.setItem('googleCypress', JSON.stringify(userItem))\n      cy.visit('/')\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating Fixture Stubbing from cy.route() to cy.intercept()\nDESCRIPTION: Demonstrates how to use fixtures to stub responses when migrating from cy.route() to cy.intercept(), showing the updated syntax.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\n// Stub response with fixture data using cy.route()\ncy.route('GET', '/projects', 'fx:projects')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Stub response with fixture data using cy.intercept()\ncy.intercept('GET', '/projects', {\n  fixture: 'projects',\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Input Class Absence with Cypress - JavaScript\nDESCRIPTION: This snippet uses Cypress to find an <input> element inside a form and asserts that it does not have the 'disabled' class, retrying the check until the assertion passes or times out. It depends on Cypress and a properly structured form element in the DOM. The selector and the negated assertion ensure flexibility for dynamic UI states.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/assertions.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// retry until this input does not have class disabled\ncy.get('form').find('input').should('not.have.class', 'disabled')\n```\n\n----------------------------------------\n\nTITLE: Testing with Multiple Viewports Dynamically in Cypress\nDESCRIPTION: Shows how to iterate through an array of viewport configurations to test the same component across different screen sizes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/viewport.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst sizes = ['iphone-6', 'ipad-2', [1024, 768]]\n\ndescribe('Logo', () => {\n  sizes.forEach((size) => {\n    // make assertions on the logo using\n    // an array of different viewports\n    it(`Should display logo on ${size} screen`, () => {\n      if (Cypress._.isArray(size)) {\n        cy.viewport(size[0], size[1])\n      } else {\n        cy.viewport(size)\n      }\n\n      -{cy.visit('https://example.cypress.io')::cy.mount(<MyComponent />)}-\n      cy.get('#logo').should('be.visible')\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Server Requests for Campaign Information in Cypress\nDESCRIPTION: This example demonstrates requesting campaign information from the server after a page visit, then using that information to determine which tests to run.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/conditional-testing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// this sends us the session cookies\ncy.visit('https://example.cypress.io')\n\n// assuming this sends us back\n// the campaign information\ncy.request('https://example.cypress.io/me')\n  .its('body.campaign')\n  .then((campaign) => {\n    // runs different cypress test code\n    // based on the type of campaign\n    return campaigns.test(campaign)\n  })\n```\n\n----------------------------------------\n\nTITLE: Request Event Handling in Cypress Intercept\nDESCRIPTION: Example of subscribing to various request lifecycle events using req.on() for advanced interception control.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/shop', (req) => {\n  req.on('before:response', (res) => {\n    /**\n     * Emitted before `response` and before any `req.continue`\n     * handlers. Modifications to `res` will be applied to the\n     * incoming response. If a promise is returned, it will be\n     * awaited before processing other event handlers.\n     */\n  })\n\n  req.on('response', (res) => {\n    /**\n     * Emitted after `before:response` and after any\n     * `req.continue` handlers - before the response is sent\n     * to the browser. Modifications to `res` will be applied\n     * to the incoming response. If a promise is returned, it\n     * will be awaited before processing other event handlers.\n     */\n  })\n\n  req.on('after:response', (res) => {\n    /**\n     * Emitted once the response to a request has finished\n     * sending to the browser. Modifications to `res` have no\n     * impact. If a promise is returned, it will be awaited\n     * before processing other event handlers.\n     */\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Writing API Response to a Fixture File\nDESCRIPTION: Example of making an API request and writing the response data to a fixture file for later use in tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/writefile.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.request('https://jsonplaceholder.typicode.com/users').then((response) => {\n  cy.writeFile('cypress/fixtures/users.json', response.body)\n})\n\n// our fixture file is now generated and can be used\ncy.fixture('users').then((users) => {\n  expect(users[0].name).to.exist\n})\n```\n\n----------------------------------------\n\nTITLE: Registering a Before Run Event Handler in Cypress\nDESCRIPTION: Basic syntax for registering a handler for the before:run event in Cypress. This event fires before a test run starts and receives details about the run.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/before-run-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\non('before:run', (details) => {\n  /* ... */\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Visibility with Retry in Cypress (JavaScript)\nDESCRIPTION: This Cypress snippet shows how to assert that a button element should become visible. Cypress automatically retries the assertion `should('be.visible')` until it passes or times out.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// retry until this button is visible\ncy.get('button').should('be.visible')\n```\n\n----------------------------------------\n\nTITLE: Customizing cy.mount() for Angular Component Testing in Cypress\nDESCRIPTION: Shows how to create a custom cy.mount() command in Cypress for Angular component testing. This example adds default component declarations while still allowing additional ones to be passed in via the config parameter.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/examples.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Type } from '@angular/core'\nimport { mount, MountConfig } from 'cypress/angular'\nimport { ButtonComponent } from 'src/app/button/button.component'\nimport { CardComponent } from 'src/app/card/card.component'\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      mount: typeof customMount\n    }\n  }\n}\n\nconst declarations = [ButtonComponent, CardComponent]\n\nfunction customMount<T>(component: string | Type<T>, config?: MountConfig<T>) {\n  if (!config) {\n    config = { declarations }\n  } else {\n    config.declarations = [...(config?.declarations || []), ...declarations]\n  }\n  return mount<T>(component, config)\n}\n\nCypress.Commands.add('mount', customMount)\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple cy.contains() Commands\nDESCRIPTION: Illustrates the correct way to chain multiple cy.contains() commands to avoid unintended scoping issues.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/contains.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// This doesn't work as intended\ncy.contains('Delete User').click().contains('Yes, Delete!').click()\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.contains('Delete User').click()\ncy.contains('Yes, Delete!').click()\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport Size in Test Configuration\nDESCRIPTION: Shows how to configure the viewport size for a specific test suite by passing configuration in the describe block.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/viewport.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\n  'page display on medium size screen',\n  {\n    viewportHeight: 1000,\n    viewportWidth: 400,\n  },\n  () => {\n    it('does not display sidebar', () => {\n      cy.get('#sidebar').should('not.be.visible')\n    })\n\n    it('shows hamburger menu', () => {\n      cy.get('#header').find('i.menu').should('be.visible')\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress E2E Test Navigation Example in JavaScript\nDESCRIPTION: A simple Cypress test that navigates to a website and asserts on the page title. This demonstrates the basic structure of a Cypress test that would be displayed in the Application Under Test preview.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/open-mode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('https://example.cypress.io')\n\ncy.title().should('include', 'Kitchen Sink')\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements by Text Content in Cypress\nDESCRIPTION: Demonstrates using jQuery's :contains selector to filter elements based on their text content. This performs a case-sensitive text substring match.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/filter.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>Home</li>\n  <li>Services</li>\n  <li>Advanced Services</li>\n  <li>Pricing</li>\n  <li>Contact</li>\n</ul>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('li').filter(':contains(\"Services\")').should('have.length', 2)\n```\n\n----------------------------------------\n\nTITLE: Holding Modifier Key While Typing in Cypress\nDESCRIPTION: Demonstrates how to hold down a modifier key (in this case, CTRL) while typing a word using the .type() command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/type.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input').type('{ctrl}test')\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Query in Cypress\nDESCRIPTION: Demonstrates the basic syntax for adding a custom query in Cypress. The query function receives arguments and returns an inner function that takes a subject and returns a new subject.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-queries.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.addQuery('getById', function (id) {\n  return (subject) => newSubject\n})\n```\n\n----------------------------------------\n\nTITLE: Reading YAML Files in Cypress JavaScript\nDESCRIPTION: Shows how to read a YAML file, parse it using the YAML library, and use the data to verify UI elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/readfile.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst YAML = require('yamljs')\n\ncy.readFile('languages/en.yml').then((str) => {\n  // parse the string into object literal\n  const english = YAML.parse(str)\n\n  cy.get('#sidebar')\n    .find('.sidebar-title')\n    .each(($el, i) => {\n      englishTitle = english.sidebar[i]\n\n      expect($el.text()).to.eq(englishTitle)\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Finding First Input in a Form with Cypress\nDESCRIPTION: Shows how to chain commands to find the first input element within a form using .find() and .first().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/first.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('form').find('input').first()\n```\n\n----------------------------------------\n\nTITLE: Multiple Log Commands Example\nDESCRIPTION: Shows multiple cy.log() commands with different types of arguments including arrays.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/log.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.log('log out any message we want here')\ncy.log('another message', ['one', 'two', 'three'])\n```\n\n----------------------------------------\n\nTITLE: Clicking Multiple Elements in Cypress\nDESCRIPTION: Shows how to click all elements with IDs starting with 'btn' using the multiple option in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/click.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[id^=btn]').click({ multiple: true })\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshot of Specific Element in Cypress\nDESCRIPTION: Demonstrates how to take a screenshot of a specific element using Cypress commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/screenshot.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.post').first().screenshot()\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of getCookie in Cypress\nDESCRIPTION: Example of correctly using cy.getCookie() to retrieve a cookie named 'auth_key'.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/getcookie.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.getCookie('auth_key') // Get cookie with name 'auth_key'\n```\n\n----------------------------------------\n\nTITLE: Implementing AAD Login with cy.origin() in Commands\nDESCRIPTION: TypeScript implementation of a custom Cypress command for Azure Active Directory authentication using cy.origin() to handle cross-origin redirects. This function navigates to the AAD login page, enters credentials, and verifies successful login.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/azure-active-directory-authentication.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction loginViaAAD(username: string, password: string) {\n  cy.visit('http://localhost:3000/')\n  cy.get('button#signIn').click()\n\n  // Login to your AAD tenant.\n  cy.origin(\n    'login.microsoftonline.com',\n    {\n      args: {\n        username,\n      },\n    },\n    ({ username }) => {\n      cy.get('input[type=\"email\"]').type(username, {\n        log: false,\n      })\n      cy.get('input[type=\"submit\"]').click()\n    }\n  )\n\n  // depending on the user and how they are registered with Microsoft, the origin may go to live.com\n  cy.origin(\n    'login.live.com',\n    {\n      args: {\n        password,\n      },\n    },\n    ({ password }) => {\n      cy.get('input[type=\"password\"]').type(password, {\n        log: false,\n      })\n      cy.get('input[type=\"submit\"]').click()\n      cy.get('#idBtn_Back').click()\n    }\n  )\n\n  // Ensure Microsoft has redirected us back to the sample app with our logged in user.\n  cy.url().should('equal', 'http://localhost:3000/')\n  cy.get('#welcome-div').should(\n    'contain',\n    `Welcome ${Cypress.env('aad_username')}!`\n  )\n}\n\nCypress.Commands.add('loginToAAD', (username: string, password: string) => {\n  const log = Cypress.log({\n    displayName: 'Azure Active Directory Login',\n    message: [`🔐 Authenticating | ${username}`],\n    autoEnd: false,\n  })\n  log.snapshot('before')\n\n  loginViaAAD(username, password)\n\n  log.snapshot('after')\n  log.end()\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for cy.press() Command in JavaScript\nDESCRIPTION: Demonstrates the basic syntax for using the cy.press() command to simulate keyboard interactions in Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/press.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.press(key)\ncy.press(key, options)\n```\n\n----------------------------------------\n\nTITLE: Invalid Error Recovery Pattern in Cypress\nDESCRIPTION: Shows another invalid implementation of error handling in Cypress, demonstrating why trying to recover from failed commands is not recommended.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/conditional-testing.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n//! You cannot add error handling to Cypress commands.\n//! This code is just for demonstration purposes\nfunction keepCalmAndCarryOn () {\n  cy.get(...).should(...).click()\n}\n\ncy\n  .get('#wizard').contains('Close').click()\n  .catch((err) => {\n    // no problem, i guess the wizard didn't exist\n    // or something... no worries\n    keepCalmAndCarryOn()\n  })\n  .then(keepCalmAndCarryOn)\n```\n\n----------------------------------------\n\nTITLE: Reading a File That May Not Exist Using cy.task() in Cypress\nDESCRIPTION: Demonstrates how to use cy.task() to read a file that might not exist, which is not possible with cy.readFile(). The task checks if the file exists before reading it.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/task.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.task('readFileMaybe', 'my-file.txt').then((textOrNull) => { ... })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs'\n\non('task', {\n  readFileMaybe(filename) {\n    if (fs.existsSync(filename)) {\n      return fs.readFileSync(filename, 'utf8')\n    }\n\n    return null\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Redux-Connected Components with Custom Mount Command\nDESCRIPTION: Demonstrates how to use the custom mount command with Redux to test components that depend on Redux state.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/react/examples.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getStore } from '../redux/store'\nimport { setUser } from '../redux/userSlice'\nimport { UserProfile } from './UserProfile'\n\nit('User profile should display user name', () => {\n  const user = { name: 'test person' }\n\n  // getStore is a factory method that creates a new store\n  const store = getStore()\n\n  // setUser is an action exported from the user slice\n  store.dispatch(setUser(user))\n\n  cy.mount(<UserProfile />, { reduxStore: store })\n\n  cy.get('div.name').should('have.text', user.name)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress Angular Schematic for Parallel Execution in CI\nDESCRIPTION: This JSON configuration demonstrates how to set up the Cypress Angular Schematic for parallel test execution in CI environments. It includes options for parallelization, recording, and specifying the Cypress Cloud recording key.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n\"cypress-run\": {\n  \"builder\": \"@cypress/schematic:cypress\",\n  \"options\": {\n    \"devServerTarget\": \"{project-name}:serve\",\n    \"parallel\": true,\n    \"record\": true,\n    \"key\": \"your-cypress-dashboard-recording-key\"\n  },\n  \"configurations\": {\n    \"production\": {\n      \"devServerTarget\": \"{project-name}:production\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Spy Aliasing Example\nDESCRIPTION: Example demonstrating how to alias spies and make assertions against them using cy.get()\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/spy.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = {\n  foo() {},\n}\nconst spy = cy.spy(obj, 'foo').as('anyArgs')\nconst withFoo = spy.withArgs('foo').as('withFoo')\n\nobj.foo()\n\nexpect(spy).to.be.called\ncy.get('@withFoo').should('be.called') // purposefully failing assertion\n```\n\n----------------------------------------\n\nTITLE: Database Task Handler Configuration\nDESCRIPTION: Task handler setup in Cypress plugins file that processes database queries with error handling for invalid database names.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/task.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\non('task', {\n  // destructure the argument into the individual fields\n  queryDatabase({ dbName, query }) {\n    const connectionInfo = connections[dbName]\n\n    if (!connectionInfo) {\n      throw new Error(`Do not have DB connection under name ${dbName}`)\n    }\n\n    return queryDB(connectionInfo, query)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Aliases in Cypress Tests\nDESCRIPTION: This example shows how aliases can be accessed across different levels of describe blocks in Cypress tests, demonstrating the hierarchical nature of alias sharing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/variables-and-aliases.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('parent', () => {\n  beforeEach(() => {\n    cy.wrap('one').as('a')\n  })\n\n  context('child', () => {\n    beforeEach(() => {\n      cy.wrap('two').as('b')\n    })\n\n    describe('grandchild', () => {\n      beforeEach(() => {\n        cy.wrap('three').as('c')\n      })\n\n      it('can access all aliases as properties', function () {\n        expect(this.a).to.eq('one') // true\n        expect(this.b).to.eq('two') // true\n        expect(this.c).to.eq('three') // true\n      })\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Importing mount function for Angular in Cypress component testing\nDESCRIPTION: The mount function for Angular components is exported from the cypress/angular library. It utilizes Angular TestBed internally but mounts components in the actual browser instead of a virtual browser in node.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_import-mount-functions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mount } from 'cypress/angular'\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Cookie in Cypress\nDESCRIPTION: Basic syntax for using cy.getCookie() to retrieve a browser cookie by its name. The command can be used with or without additional options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/getcookie.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.getCookie(name)\ncy.getCookie(name, options)\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of Each Command\nDESCRIPTION: Examples of correct usage of the .each() command for iterating through list items and cookies.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/each.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('ul>li').each(() => {...}) // Iterate through each 'li'\ncy.getCookies().each(() => {...}) // Iterate through each cookie\n```\n\n----------------------------------------\n\nTITLE: Custom Mount Command with Plugins\nDESCRIPTION: Shows how to create a custom mount command that includes Vue plugins like Pinia and i18n.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/vue/examples.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPinia } from 'pinia' // or Vuex\nimport { createI18n } from 'vue-i18n'\nimport { mount } from 'cypress/vue'\nimport { h } from 'vue'\n\nconst i18nOptions = {\n  locale: 'en',\n  messages: {\n    en: {\n      hello: 'hello!',\n    },\n    ja: {\n      hello: 'こんにちは！',\n    },\n  },\n}\n\nCypress.Commands.add('mount', (component, ...args) => {\n  args.global = args.global || {}\n  args.global.plugins = args.global.plugins || []\n  args.global.plugins.push(createPinia())\n  args.global.plugins.push(createI18n())\n\n  return mount(\n    () => {\n      return h(VApp, {}, component)\n    },\n    ...args\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Angular Component Instance in Tests\nDESCRIPTION: Shows how to directly access the mounted component instance within tests using .then() to work with the yield from cy.mount(). This allows direct interaction with component properties and methods for testing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/examples.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nit('clicking + fires a change event with the incremented value', () => {\n  cy.mount(\n    '<app-stepper count=\"100\" (change)=\"change.emit($event)\"></app-stepper>',\n    {\n      componentProperties: { change: new EventEmitter() },\n      declarations: [StepperComponent],\n    }\n  ).then((wrapper) => {\n    console.log({ wrapper })\n    cy.spy(wrapper.component.change, 'emit').as('changeSpy')\n    return cy.wrap(wrapper).as('angular')\n  })\n  cy.get(incrementSelector).click()\n  cy.get('@changeSpy').should('have.been.calledWith', 101)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting App Readiness Signal for Cypress Testing\nDESCRIPTION: Example of how an application can signal its readiness for testing by setting a property on the window object that Cypress can wait for.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/window.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// app.js\n// only set property \"appReady\" if Cypress is running tests\nif (window.Cypress) {\n  window.appReady = true\n}\n```\n\n----------------------------------------\n\nTITLE: Force Reloading a Page Without Cache in Cypress\nDESCRIPTION: Example demonstrating how to force reload a page without using the browser cache by passing true to the reload command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/reload.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('http://localhost:3000/admin')\ncy.reload(true)\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Cypress Commands with 'should'\nDESCRIPTION: Shows proper placement of Cypress commands before or after 'should' assertion, not within the callback function.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('p')\n  .should(($p) => {\n    // ...\n  })\n  .log()\n\n// or\n\ncy.get('p').then(($p) => {\n  // ...\n  cy.log($p)\n})\n```\n\n----------------------------------------\n\nTITLE: Running Script and Asserting Output in Cypress\nDESCRIPTION: Executes an arbitrary script using cy.exec() and asserts on its stdout output.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/exec.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.exec('npm run my-script')\n  .its('stdout')\n  .should('contain', 'Done running the script')\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Zero Exit Codes in Cypress\nDESCRIPTION: Demonstrates how to handle and assert on non-zero exit codes and stderr output when using cy.exec().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/exec.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.exec('man bear pig', { failOnNonZeroExit: false }).then((result) => {\n  expect(result.code).to.eq(1)\n  expect(result.stderr).to.contain('No manual entry for bear')\n})\n```\n\n----------------------------------------\n\nTITLE: DOM Element Interaction Patterns\nDESCRIPTION: Comparison of element interaction methods between Protractor and Cypress for actions like clicking, typing, and form interactions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Protractor\nelement(by.css('button')).click()\nelement(by.css('input')).sendKeys('my text')\nelement(by.css('input')).clear()\nelement.all(by.css('[type=\"checkbox\"]')).first().click()\nelement(by.css('[type=\"radio\"][value=\"radio1\"]')).click()\nelement.all(by.css('[type=\"checkbox\"][checked=\"true\"]')).first().click()\nelement(by.cssContainingText('option', 'my value')).click()\nbrowser.actions().mouseMove(element(by.id('my-id'))).perform()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Cypress\ncy.get('button').click()\ncy.get('input').type('my text')\ncy.get('input').clear()\ncy.get('[type=\"checkbox\"]').first().check()\ncy.get('[type=\"radio\"]').check('radio1')\ncy.get('[type=\"checkbox\"]').not('[disabled]').first().uncheck()\ncy.get('select[name=\"optionsList\"]').select('my value')\ncy.get('#my-id').scrollIntoView()\n```\n\n----------------------------------------\n\nTITLE: Clicking Dropdown Menu with cy.get() in Cypress\nDESCRIPTION: Demonstrates using cy.get() to find a dropdown menu element and perform a click action.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/get.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.dropdown-menu').click()\n```\n\n----------------------------------------\n\nTITLE: Spying on console.log Using cy.stub() in Cypress Tests\nDESCRIPTION: Demonstrates how to spy on console.log by using cy.stub() either in a page visit or during component testing. The technique involves stubbing the console.log method and creating an alias to make assertions against it later.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n-{cy.visit('/', {\n  onBeforeLoad(win) {\n    // Stub your functions here\n    cy.stub(win.console, 'log').as('consoleLog')\n  },\n})::// Stub your functions here\ncy.stub(window, 'prompt').returns('my custom message')\n// After that, mount your component\ncy.mount(<MyComponent />)}-\n\n// Other test code\n\ncy.get('@consoleLog').should('be.calledWith', 'Hello World!')\n```\n\n----------------------------------------\n\nTITLE: Migrating URL Matching from cy.route() to cy.intercept()\nDESCRIPTION: Demonstrates how URL matching differs between cy.route() and cy.intercept(), showing how to match against paths and full URLs in the new API.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\n// Match XHRs with a path or url of /users\ncy.server()\ncy.route({\n  method: 'POST',\n  url: '/users',\n}).as('getUsers')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Match HTTP requests with a path of /users\ncy.intercept({\n  method: 'POST',\n  path: '/users',\n}).as('getUsers')\n\n// OR\n// Match HTTP requests with an exact url of https://example.cypress.io/users\ncy.intercept({\n  method: 'POST',\n  url: 'https://example.cypress.io/users',\n}).as('getUsers')\n```\n\n----------------------------------------\n\nTITLE: Using Testing Library with Cypress\nDESCRIPTION: This snippet demonstrates how to use Testing Library with Cypress. It shows various methods to find DOM elements using Testing Library's queries.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ncy.findByRole('button', { name: /Jackie Chan/i }).click()\ncy.findByRole('button', { name: /Button Text/i }).should('exist')\ncy.findByRole('button', { name: /Non-existing Button Text/i }).should(\n  'not.exist'\n)\n\ncy.findByLabelText(/Label text/i, { timeout: 7000 }).should('exist')\n\n// findAllByText _inside_ a form element\ncy.get('form')\n  .findByText('button', { name: /Button Text/i })\n  .should('exist')\n\ncy.findByRole('dialog').within(() => {\n  cy.findByRole('button', { name: /confirm/i })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Retries with Different Values for Run and Open Modes\nDESCRIPTION: Configures different retry attempt values for 'cypress run' and 'cypress open' modes in Cypress configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/test-retries.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  retries: {\n    // Configure retry attempts for `cypress run`\n    // Default is 0\n    runMode: 2,\n    // Configure retry attempts for `cypress open`\n    // Default is 0\n    openMode: 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling A/B Testing with URL Parameters in Cypress\nDESCRIPTION: This snippet shows how to control which A/B campaign is tested by using URL query parameters, allowing for deterministic testing without conditional logic.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/conditional-testing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// tell your back end server which campaign you want sent\n// so you can deterministically know what it is ahead of time\ncy.visit('https://example.cypress.io?campaign=A')\n// tests...\n\ncy.visit('https://example.cypress.io?campaign=B')\n// tests...\n\ncy.visit('https://example.cypress.io?campaign=C')\n// tests...\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Dev Server in Cypress Config - JavaScript\nDESCRIPTION: Demonstrates how to define a custom dev server for Cypress Component Testing using the defineConfig function in a JavaScript configuration file. This snippet uses CommonJS syntax to export the configuration, with a devServer function that returns a devServer instance. Requires 'cypress' as a dependency and expects the custom server to adhere to the required interface with port and close handler properties.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_component-testing-config.mdx#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst { defineConfig } = require('cypress')\\n\\nmodule.exports = defineConfig({\\n  component: {\\n    devServer(cypressConfig) {\\n      // return devServer instance or a promise that resolves to\\n      // a dev server here\\n      return {\\n        port: 1234,\\n        close: () => {},\\n      }\\n    },\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: Cypress Test Statuses: Pending and Skipped Tests\nDESCRIPTION: This snippet illustrates various ways to create pending tests in Cypress, including empty tests, skipped tests, and browser-specific tests. It also demonstrates how tests can be skipped due to run-time errors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/writing-and-organizing-tests.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('TodoMVC', () => {\n  it('is not written yet')\n\n  it.skip('adds 2 todos', function () {\n    cy.visit('/')\n    cy.get('[data-testid=\"new-todo\"]').as('new').type('learn testing{enter}')\n\n    cy.get('@new').type('be cool{enter}')\n\n    cy.get('[data-testid=\"todo-list\"] li').should('have.length', 100)\n  })\n\n  xit('another test', () => {\n    expect(false).to.true\n  })\n\n  it('only test chrome', { browser: 'chrome' }, () => {\n    cy.visit('/')\n    cy.contains('To Do')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using the downloadFile Custom Command\nDESCRIPTION: Demonstrates how to use the downloadFile command to download a PDF file to a specific directory with a custom name.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.downloadFile('https://path_to_file.pdf', 'mydownloads', 'demo.pdf')\n```\n\n----------------------------------------\n\nTITLE: Using the decode Option with cy.url() in JavaScript\nDESCRIPTION: Example showing how to use the decode option to handle URLs with non-ASCII characters like Korean text.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/url.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// For the curious, '사랑' means 'love' in Korean.\ncy.url({ decode: true }).should('contain', '사랑')\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for cy.url() Command in JavaScript\nDESCRIPTION: Demonstrates the basic syntax for the Cypress URL command, which can be called with or without options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/url.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.url()\ncy.url(options)\n```\n\n----------------------------------------\n\nTITLE: Using onLoad Callback\nDESCRIPTION: Shows how to use the onLoad callback which executes after the page has fired its load event when all resources are available.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('http://localhost:3000/#/users', {\n  onLoad: (contentWindow) => {\n    // contentWindow is the remote page's window object\n    if (contentWindow.angular) {\n      // do something\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Writing JSON Data to a File in Cypress\nDESCRIPTION: Example of writing a JavaScript object to a file as JSON and then verifying its contents.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/writefile.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.writeFile('path/to/data.json', { name: 'Eliza', email: 'eliza@example.com' })\ncy.readFile('path/to/data.json').then((user) => {\n  expect(user.name).to.equal('Eliza') // true\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Button Interactions\nDESCRIPTION: Tests for verifying increment and decrement button functionality using click events and assertions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/get-started.mdx#2025-04-22_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nit('when the increment button is pressed, the counter is incremented', () => {\n  cy.mount(<Stepper />)\n  cy.get('[data-cy=increment]').click()\n  cy.get('[data-cy=counter]').should('have.text', '1')\n})\n\nit('when the decrement button is pressed, the counter is decremented', () => {\n  cy.mount(<Stepper />)\n  cy.get('[data-cy=decrement]').click()\n  cy.get('[data-cy=counter]').should('have.text', '-1')\n})\n```\n\n----------------------------------------\n\nTITLE: Wrapping Method with Spy Example\nDESCRIPTION: Example showing how to wrap a utility method with a spy and verify it was called\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/spy.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// assume App.start calls util.addListeners\ncy.spy(util, 'addListeners')\nApp.start()\nexpect(util.addListeners).to.be.called\n```\n\n----------------------------------------\n\nTITLE: Promise Handling in Each Command\nDESCRIPTION: Example showing how promises are handled within .each() callback functions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/each.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.wrap([1, 2, 3]).each((num, i, array) => {\n  return new Cypress.Promise((resolve) => {\n    setTimeout(() => {\n      resolve()\n    }, num * 100)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Syntax for .prev() Command in Cypress\nDESCRIPTION: Shows the various ways to use the .prev() command in Cypress, including with and without selectors and options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/prev.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.prev()\n.prev(selector)\n.prev(options)\n.prev(selector, options)\n```\n\n----------------------------------------\n\nTITLE: Implementing File Download Custom Command\nDESCRIPTION: Creates a custom command for downloading files that leverages Cypress tasks and handles cookies, originally from the cypress-downloadfile package.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add('downloadFile', (url, directory, fileName) => {\n  return cy.getCookies().then((cookies) => {\n    return cy.task('downloadFile', {\n      url,\n      directory,\n      cookies,\n      fileName,\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Cypress Submit with Network Intercept\nDESCRIPTION: Example showing form submission with network request interception.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/submit.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('POST', '/users', { fixture: 'user' }).as('userSuccess')\ncy.get('form').submit()\n```\n\n----------------------------------------\n\nTITLE: Stubbing Response with String in Cypress Intercept\nDESCRIPTION: Example of stubbing a response with a simple string value for POST requests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// requests to create a user will be fulfilled\n// with a body of 'success'\ncy.intercept('POST', '/users', 'success')\n// { body: 'success' }\n```\n\n----------------------------------------\n\nTITLE: Creating Test Scaffolding for Cypress Studio (JavaScript)\nDESCRIPTION: This code sets up a test suite with a beforeEach hook to seed the database and login a test user. It includes an empty test that can be extended using Cypress Studio.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cypress-studio.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Cypress Studio Demo', () => {\n  beforeEach(() => {\n    // Seed database with test data\n    cy.task('db:seed')\n\n    // Login test user\n    cy.database('find', 'users').then((user) => {\n      cy.login(user.username, 's3cret', true)\n    })\n  })\n\n  it('create new transaction', () => {\n    // Extend test with Cypress Studio\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Changing Viewport Configuration at Runtime in Cypress\nDESCRIPTION: Demonstrates how to update viewport settings during test execution using Cypress.config().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/viewport.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.config('viewportWidth', 800)\nCypress.config('viewportWidth') // => 800\n```\n\n----------------------------------------\n\nTITLE: Getting Children with Class Filter in Cypress\nDESCRIPTION: Example showing how to filter children with a specific class selector to get only elements matching the criteria.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/children.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <ul>\n    <li class=\"active\">Unit Testing</li>\n    <li>Integration Testing</li>\n  </ul>\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// yields [\n//  <li class=\"active\">Unit Testing</li>\n// ]\ncy.get('ul').children('.active')\n```\n\n----------------------------------------\n\nTITLE: Parallel Tests Command\nDESCRIPTION: Command to run Cypress tests in parallel across multiple machines\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/overview.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --record --key=abc123 --parallel\n```\n\n----------------------------------------\n\nTITLE: Testing React Router Navigation with Custom Mount Command\nDESCRIPTION: Demonstrates how to use the custom mount command with React Router to test navigation and active link states.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/react/examples.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Navigation } from './Navigation'\n\nit('home link should be active when url is \"/\"', () => {\n  // No need to pass in custom initialEntries as default url is '/'\n  cy.mount(<Navigation />)\n\n  cy.get('a').contains('Home').should('have.class', 'active')\n})\n\nit('login link should be active when url is \"/login\"', () => {\n  cy.mount(<Navigation />, {\n    routerProps: {\n      initialEntries: ['/login'],\n    },\n  })\n\n  cy.get('a').contains('Login').should('have.class', 'active')\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Wizard Dismissal Using Cookies in Cypress\nDESCRIPTION: This snippet demonstrates checking a cookie value to determine whether a welcome wizard should be shown, and conditionally dismissing it if needed.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/conditional-testing.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('https://example.cypress.io')\ncy.getCookie('showWizard').then((val) => {\n  if (val) {\n    // dismiss the wizard conditionally by enqueuing these\n    // three additional commands\n    cy.get('#wizard').contains('Close').click()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Fixture Syntax in Cypress\nDESCRIPTION: Shows the various syntax options for loading fixtures in Cypress, including with different encoding options and configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/fixture.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.fixture(filePath)\ncy.fixture(filePath, encoding)\ncy.fixture(filePath, options)\ncy.fixture(filePath, encoding, options)\n```\n\n----------------------------------------\n\nTITLE: Advanced Retries with Chained Commands in Cypress JavaScript\nDESCRIPTION: Shows how cy.readFile() will retry until all chained commands pass, including property access and assertions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/readfile.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// will retry until the json file has a `users[123].name` field, and\n// the assertion passes\ncy.readFile('users.json').its('users.123.name').should('eq', 'John Doe')\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress Component Testing with Vue and Vite\nDESCRIPTION: Configuration example for setting up Cypress component testing with Vue using Vite as the bundler. Specifies the framework as Vue and bundler as Vite in the component configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/vue/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  component: {\n    devServer: {\n      framework: 'vue',\n      bundler: 'vite',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Commands in Tests\nDESCRIPTION: Example of using custom TypeScript commands in Cypress tests\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/typescript-support.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nit('works', () => {\n  cy.visit('/')\n  cy.dataCy('greeting')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuration Example with Environment Variables\nDESCRIPTION: Example of how to set environment variables in Cypress configuration file. This shows the env object with two sample variables.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/env.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  env: {\n    foo: 'bar',\n    baz: 'quux',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Cypress .click() Command\nDESCRIPTION: Demonstrates proper ways to use the .click() command on DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/click.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.btn').click() // Click on button\ncy.focused().click() // Click on el with focus\ncy.contains('Welcome').click() // Click on first el containing 'Welcome'\n```\n\n----------------------------------------\n\nTITLE: Basic AWS CodeBuild Configuration for Cypress Tests\nDESCRIPTION: A basic buildspec.yml configuration for running Cypress tests in AWS CodeBuild using Electron browser. Sets up Git information variables for Cypress Cloud recording, installs dependencies, verifies Cypress installation, and runs the tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/aws-codebuild.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 0.2\n\nphases:\n  install:\n    runtime-versions:\n      nodejs: latest\n    commands:\n      # Set COMMIT_INFO variables to send Git specifics to Cypress Cloud when recording\n      # https://docs.cypress.io/app/continuous-integration/overview#Git-information\n      - export COMMIT_INFO_BRANCH=\"$(git rev-parse HEAD | xargs git name-rev |\n        cut -d' ' -f2 | sed 's/remotes\\/origin\\///g')\"\n      - export COMMIT_INFO_MESSAGE=\"$(git log -1 --pretty=%B)\"\n      - export COMMIT_INFO_EMAIL=\"$(git log -1 --pretty=%ae)\"\n      - export COMMIT_INFO_AUTHOR=\"$(git log -1 --pretty=%an)\"\n      - export COMMIT_INFO_SHA=\"$(git log -1 --pretty=%H)\"\n      - export COMMIT_INFO_REMOTE=\"$(git config --get remote.origin.url)\"\n      - npm ci\n  pre_build:\n    commands:\n      - npm run cy:verify\n      - npm run cy:info\n  build:\n    commands:\n      - npm run start:ci &\n      - npx cypress run --record\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Pause Command in Cypress\nDESCRIPTION: Basic syntax examples for using the pause command in Cypress tests, showing both chainable and standalone usage.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/pause.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.pause()\n.pause(options)\n\ncy.pause()\ncy.pause(options)\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Example of cy.press() with Tab Key\nDESCRIPTION: Shows the proper way to use cy.press() to test focus movement between form elements by pressing the Tab key.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/press.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input.first').focus()\ncy.press(Cypress.Keyboard.Keys.TAB)\ncy.get('input.second').should('have.focus')\n```\n\n----------------------------------------\n\nTITLE: Clearing an Input and Typing a New Value in JavaScript\nDESCRIPTION: Shows how to clear a textarea and then type new content into it, demonstrating command chaining after clear().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clear.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('textarea').clear().type('Hello, World')\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples for Cypress 'invoke' Command\nDESCRIPTION: Demonstrates proper usage of the '.invoke()' command to call methods like jQuery's 'val' and 'show' on elements or functions on wrapped objects.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/invoke.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.input').invoke('val').should('eq', 'foo') // Invoke the 'val' function\ncy.get('.modal').invoke('show') // Invoke the jQuery 'show' function\ncy.wrap({ animate: fn }).invoke('animate') // Invoke the 'animate' function\n```\n\n----------------------------------------\n\nTITLE: Mounting Basic Svelte Component with Cypress\nDESCRIPTION: Demonstrates how to mount a basic Svelte component using cy.mount() command. Requires importing the component first before mounting it for testing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/svelte/examples.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Stepper } from './stepper.svelte'\n\nit('mounts', () => {\n  cy.mount(Stepper)\n})\n```\n\n----------------------------------------\n\nTITLE: Aliasing Stubs in Cypress for Better Identification\nDESCRIPTION: Demonstrates how to alias stubs for easier identification in error messages and command logs, and for making assertions using cy.get().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/stub.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = {\n  foo() {},\n}\nconst stub = cy.stub(obj, 'foo').as('anyArgs')\nconst withFoo = stub.withArgs('foo').as('withFoo')\n\nobj.foo()\n\nexpect(stub).to.be.called\ncy.get('@withFoo').should('be.called') // purposefully failing assertion\n```\n\n----------------------------------------\n\nTITLE: Implementing cy.mount() Command for Angular\nDESCRIPTION: Example of creating a custom cy.mount() command for Angular components. This simple implementation passes the component and configuration to the mount function.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/mount.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount } from 'cypress/angular'\n\nCypress.Commands.add('mount', (component, config) => {\n  return mount(component, config)\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying clearCookies Results in Cypress\nDESCRIPTION: Example showing how to verify the clearCookies command worked by checking cookie count before and after using the command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clearcookies.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.getCookies().should('have.length', 1)\ncy.clearCookies()\ncy.getCookies().should('be.empty')\n```\n\n----------------------------------------\n\nTITLE: Login Cookie Verification Example\nDESCRIPTION: Shows how to verify cookies after a login process through an identity provider, including origin handling and assertions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/getallcookies.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.contains('Log in').click()\ncy.origin('https://example.cypress.io', () => {\n  cy.get('[type=password]').type('*****')\n  cy.contains('Log in').click()\n})\ncy.url().should('include', 'profile')\ncy.getAllCookies()\n  .should('have.length', 2)\n  .then((cookies) => {\n    expect(cookies[0]).to.have.property('name', 'identity_session_id')\n    expect(cookies[1]).to.have.property('name', 'session_id')\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command with Custom Logging in Cypress\nDESCRIPTION: Demonstrates how to create a custom command that sets session storage while implementing custom logging with Cypress.log. The example shows how to customize the command log display and configure console properties for debugging.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/cypress-log.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add('setSessionStorage', (key, value) => {\n  // Turn off logging of the cy.window() to command log\n  cy.window({ log: false }).then((window) => {\n    window.sessionStorage.setItem(key, value)\n  })\n\n  const log = Cypress.log({\n    name: 'setSessionStorage',\n    // shorter name for the Command Log\n    displayName: 'setSS',\n    message: `${key}, ${value}`,\n    consoleProps: () => {\n      // return an object which will\n      // print to dev tools console on click\n      return {\n        Key: key,\n        Value: value,\n        'Session Storage': window.sessionStorage,\n      }\n    },\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing request polling with recursive function in Cypress\nDESCRIPTION: This snippet demonstrates how to implement polling by creating a recursive function that repeatedly calls cy.request() until a desired condition is met. It's useful for testing operations that may take time to complete on the server.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/request.mdx#2025-04-22_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n// a regular ol' function folks\nfunction req () {\n  cy\n    .request(...)\n    .then((resp) => {\n      // if we got what we wanted\n\n      if (resp.status === 200 && resp.body.ok === true)\n        // break out of the recursive loop\n        return\n\n      // else recurse\n      req()\n    })\n}\n\ncy\n  // do the thing causing the side effect\n  .get('button').click()\n\n  // now start the requests\n  .then(req)\n```\n\n----------------------------------------\n\nTITLE: Express Middleware for JWT Verification\nDESCRIPTION: Implementation of Express middleware for verifying Google JWTs in API requests\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/google-authentication.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport const checkJwt = jwt(googleJwtConfig).unless({ path: ['/testData/*'] })\n```\n\nLANGUAGE: jsx\nCODE:\n```\nif (process.env.REACT_APP_GOOGLE) {\n  app.use(checkJwt)\n}\n```\n\n----------------------------------------\n\nTITLE: File Upload Testing in Cypress\nDESCRIPTION: Example of how to test file uploads using Cypress's selectFile command. Shows the basic usage for selecting and uploading a file from fixtures.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[data-cy=\"file-input\"]').selectFile('cypress/fixtures/data.json')\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Angular Component Test with Cypress\nDESCRIPTION: A simple Angular component test that demonstrates how to mount a StepperComponent for testing. It uses the cy.mount() command to render the component in the test environment.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/get-started.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StepperComponent } from './stepper.component'\n\ndescribe('StepperComponent', () => {\n  it('mounts', () => {\n    // see: https://on.cypress.io/mounting-angular\n    cy.mount(StepperComponent)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Retries for a Test Suite in Cypress\nDESCRIPTION: Shows how to configure retry attempts for an entire suite of tests using the suite's configuration, applying the settings to all tests within that suite.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/test-retries.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// Customizing retry attempts for a suite of tests\ndescribe(\n  'User bank accounts',\n  {\n    retries: {\n      runMode: 2,\n      openMode: 1,\n    },\n  },\n  () => {\n    // The per-suite configuration is applied to each test\n    // If a test fails, it will be retried\n    it('allows a user to view their transactions', () => {\n      // ...\n    })\n\n    it('allows a user to edit their transactions', () => {\n      // ...\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables from Plugin in Tests\nDESCRIPTION: Example showing how to access environment variables that were set in a plugin within a test. Uses before hook to grab the value once before tests run.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/env.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// cypress/e2e/secrets.cy.js\ndescribe('Environment variable set in plugin', () => {\n  let sharedSecret\n\n  before(() => {\n    sharedSecret = Cypress.env('sharedSecret')\n  })\n\n  it.only('can be accessed within test.', () => {\n    cy.log(sharedSecret)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests in Chrome with Parallelization\nDESCRIPTION: Command to run Cypress tests in Chrome browser with parallelization enabled, using a specific group label (2x-chrome) for easy identification in Cypress Cloud.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/features/smart-orchestration/parallelization.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --record --group 2x-chrome --browser chrome --parallel\n```\n\n----------------------------------------\n\nTITLE: Increasing Keystroke Delay with Cypress.Keyboard.defaults in JavaScript\nDESCRIPTION: Shows how to increase the delay between keystrokes when using the .type() command by setting the keystrokeDelay option to a higher value (20ms).\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/keyboard-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Keyboard.defaults({\n  keystrokeDelay: 20,\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements without Active Class in Cypress\nDESCRIPTION: Example showing how to use .not() to filter out elements with a specific class and make assertions on the result.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/not.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>Home</li>\n  <li class=\"active\">About</li>\n  <li>Services</li>\n  <li>Pricing</li>\n  <li>Contact</li>\n</ul>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('ul>li').not('.active').should('have.length', 4) // true\n```\n\n----------------------------------------\n\nTITLE: Forcing a Double-click in Cypress\nDESCRIPTION: Demonstrates how to force a double-click regardless of the element's actionable state.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/dblclick.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').dblclick({ force: true })\n```\n\n----------------------------------------\n\nTITLE: Going Forward in Browser's History with String Parameter\nDESCRIPTION: Shows how to navigate forward in the browser's history using the 'forward' string parameter, equivalent to clicking the forward button.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/go.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.go('forward') // equivalent to clicking forward button\n```\n\n----------------------------------------\n\nTITLE: Checking All Checkboxes in Cypress\nDESCRIPTION: Example of checking all checkbox elements on a page.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/check.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[type=\"checkbox\"]').check()\n```\n\n----------------------------------------\n\nTITLE: Using res.send() to Conditionally Modify HTTP Responses in Cypress\nDESCRIPTION: Example of intercepting a request and conditionally modifying the response by sending a fixture instead of the original response body when the status is 'failed'.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/notification', (req) => {\n  req.continue((res) => {\n    if (res.body.status === 'failed') {\n      // sends a fixture body instead of the existing 'res.body'\n      res.send({ fixture: 'success.json' })\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Multiple Cypress Configuration Options\nDESCRIPTION: JavaScript example showing how to update multiple configuration options at once by passing an object to Cypress.config().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/config.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.config({\n  defaultCommandTimeout: 10000,\n  viewportHeight: 900,\n})\n\nCypress.config() // => {defaultCommandTimeout: 10000, viewportHeight: 900, ...}\n```\n\n----------------------------------------\n\nTITLE: Forcing Blur on an Element in Cypress\nDESCRIPTION: Example of using the force option to blur an input regardless of whether it's currently focusable or focused.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/blur.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input:first').blur({ force: true })\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Module Settings for Component Testing\nDESCRIPTION: Shows how to set up imports, declarations, and providers for Angular component testing, similar to configuring an NgModule. This is necessary when components have dependencies on services or other components.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/examples.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncy.mount(ComponentThatFetchesData, {\n  imports: [HttpClientModule],\n  declarations: [ButtonComponent],\n  providers: [DataService],\n})\n```\n\n----------------------------------------\n\nTITLE: Getting the Document in Cypress Command Log Example\nDESCRIPTION: Simple example showing the cy.document() command as it would appear in documentation and command logs.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/document.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.document()\n```\n\n----------------------------------------\n\nTITLE: Visiting Local Files in JavaScript\nDESCRIPTION: Demonstrates how to visit local files when baseUrl is not defined. The path should be relative to the project's root folder.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('app/index.html')\n```\n\n----------------------------------------\n\nTITLE: Assert URL Hash Matches RegExp Pattern\nDESCRIPTION: Demonstrates clicking on a link and then using a regular expression to verify the resulting URL hash matches the expected pattern.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/hash.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul id=\"users\">\n  <li>\n    <a href=\"#/users/8fc45b67-d2e5-465a-b822-b281d9c8e4d1\">Fred</a>\n  </li>\n</ul>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#users li').find('a').click()\ncy.hash().should('match', /users\\/.+$/) // => true\n```\n\n----------------------------------------\n\nTITLE: Correct Approach to Checking Window Properties in Cypress\nDESCRIPTION: Example showing the proper way to check window property values by using chained .then() callbacks to ensure the value is available before assertions are made.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/window.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nit('equals bar', () => {\n  let foo\n\n  cy.window()\n    .then((win) => {\n      foo = win.tags.foo\n    })\n    .then(() => {\n      // variable \"foo\" has been set\n      expect(foo).to.equal('bar') // test passes\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Visibility with isHidden in JavaScript\nDESCRIPTION: Demonstrates how to check if an element is hidden using Cypress.dom.isHidden. Used internally by Cypress for actionability.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/dom.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('p').then(($el) => {\n  Cypress.dom.isHidden($el) // false\n})\n```\n\n----------------------------------------\n\nTITLE: Chromium-based Browser Family Detection\nDESCRIPTION: This example shows how the browser.family field has changed in Cypress 4. All Chromium-based browsers now have 'chromium' as their family field, including Electron which previously had 'electron'.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_110\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (on, config) => {\n  on('before:browser:launch', (browser = {}, launchOptions) => {\n    if (browser.family === 'electron') {\n      // would match Electron in 3.x\n      // will match no browsers in 4.0.0\n      return launchOptions\n    }\n\n    if (browser.family === 'chromium') {\n      // would match no browsers in 3.x\n      // will match any Chromium-based browser in 4.0.0\n      // ie Chrome, Canary, Chromium, Electron, Edge (Chromium-based)\n      return launchOptions\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples for Cypress eq Command\nDESCRIPTION: Shows invalid ways to use the .eq() command that will result in errors, as it must be chained off commands that yield DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/eq.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.eq(0) // Errors, cannot be chained off 'cy'\ncy.getCookies().eq(4) // Errors, 'getCookies' does not yield DOM element\n```\n\n----------------------------------------\n\nTITLE: Using 'invoke' with jQuery 'show' Method to Interact with Hidden Elements\nDESCRIPTION: Demonstrates how to use '.invoke()' to call jQuery's 'show' method on a hidden element to make it visible before interacting with its children.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/invoke.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('div.container')\n  .should('be.hidden') // element is hidden\n  .invoke('show') // call jquery method 'show' on the '.container'\n  .should('be.visible') // element is visible now\n  .find('input') // drill down into a child \"input\" element\n  .type('Cypress is great') // and type text\n```\n\n----------------------------------------\n\nTITLE: Vue Component Testing Example in JavaScript\nDESCRIPTION: A Cypress component test for a Vue LoginForm component that mounts the component and verifies a password input has the correct type. Similar to the React example but with Vue-specific syntax.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/open-mode.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('should have password input of type password', () => {\n  mount(LoginForm)\n  cy.contains('Password').find('input').should('have.attr', 'type', 'password')\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress Origin Command Syntax\nDESCRIPTION: Shows the basic syntax patterns for using cy.origin() command with and without options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/origin.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.origin(url, callbackFn)\ncy.origin(url, options, callbackFn)\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshot with Custom Filename in Cypress\nDESCRIPTION: Demonstrates how to capture a screenshot using cy.screenshot() command with a custom filename. The screenshot will be saved with the specified name 'my-image' in the screenshots directory.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/screenshot.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncy.screenshot('my-image')\n```\n\n----------------------------------------\n\nTITLE: Taking Element Screenshot with Padding in Cypress\nDESCRIPTION: Shows how to take a screenshot of an element with additional padding around it using Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/screenshot.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.post').first().screenshot({ padding: 10 })\n```\n\n----------------------------------------\n\nTITLE: Mounting a Svelte component with props in Cypress test\nDESCRIPTION: This example demonstrates how to use the mount function to render a Svelte component in a Cypress test. It mounts a Counter component with an initial count of 42 and then checks if the button displays the correct value.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/svelte/api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Counter from './Counter.svelte'\nimport { mount } from 'cypress/svelte'\n\nit('should render', () => {\n  mount(Counter, { props: { count: 42 } })\n  cy.get('button').contains(42)\n})\n```\n\n----------------------------------------\n\nTITLE: Assertion Patterns Comparison\nDESCRIPTION: Examples of assertion syntax differences between Protractor and Cypress for checking element properties and content.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Protractor Assertions\nconst list = element.all(by.css('li.selected'))\nexpect(list.count()).toBe(3)\nexpect(element(by.tagName('form')).element(by.tagName('input')).getAttribute('class')).not.toContain('disabled')\nexpect(element(by.tagName('textarea'))).getAttribute('value')).toBe('foo bar baz')\nexpect(element(by.id('user-name')).getText()).toBe('Joe Smith')\nexpect(element(by.id('address')).getText()).toContain('Atlanta')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Cypress Assertions\ncy.get('li.selected').should('have.length', 3)\ncy.get('form').find('input').should('not.have.class', 'disabled')\ncy.get('textarea').should('have.value', 'foo bar baz')\ncy.get('#user-name').should('have.text', 'Joe Smith')\ncy.get('#address').should('include.text', 'Atlanta')\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of dblclick Command in Cypress\nDESCRIPTION: Demonstrates correct ways to use the dblclick command on various DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/dblclick.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').dblclick() // Double click on button\ncy.focused().dblclick() // Double click on el with focus\ncy.contains('Welcome').dblclick() // Double click on first el containing 'Welcome'\n```\n\n----------------------------------------\n\nTITLE: Correctly Waiting for Stub Calls in Cypress React Component Test\nDESCRIPTION: A demonstration of the correct way to structure a test to check stub calls, using aliases and separate assertions for better retry-ability.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/retry-ability.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nit('calls the click prop', () => {\n  const onClick = cy.stub().as('clicker')\n\n  cy.mount(<Clicker click={onClick} />)\n  // Good practice 💡: Don't chain anything off of commands\n  cy.get('button').click()\n  cy.get('button').click()\n\n  // Good practice 💡: Reference the stub with an alias\n  cy.get('@clicker').should('have.been.calledTwice')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress for Angular Component Testing\nDESCRIPTION: Basic configuration for setting up Cypress component testing with Angular. This configuration uses webpack as the bundler and sets the specification pattern for test files.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  component: {\n    devServer: {\n      framework: 'angular',\n      bundler: 'webpack',\n    },\n    specPattern: '**/*.cy.ts',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Items to a JSON Array\nDESCRIPTION: Example of reading a JSON array from a file, adding a new item, and writing it back to the file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/writefile.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst filename = '/path/to/list.json'\n\ncy.readFile(filename).then((list) => {\n  list.push({ item: 'example' })\n  // write the merged array\n  cy.writeFile(filename, list)\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Cypress Commands in TypeScript\nDESCRIPTION: Example of creating external type definitions for custom Cypress commands, specifically for the mount command used in component testing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/typescript-support.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mount } from 'cypress/react'\n\n// Augment the Cypress namespace to include type definitions for\n// your custom command.\n// Alternatively, can be defined in cypress/support/component.d.ts\n// with a <reference path=\"./component\" /> at the top of your spec.\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      mount: typeof mount\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Double-clicking with Key Modifiers in Cypress\nDESCRIPTION: Demonstrates how to perform a double-click while holding down a modifier key (ALT in this case).\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/dblclick.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// execute ALT + dblclick on the first <li>\ncy.get('li:first').dblclick({\n  altKey: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Changing Subject Implicitly with Cypress Commands\nDESCRIPTION: Example showing how the subject changes when a Cypress command is the last operation in the .then() callback.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/then.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button')\n  .then(($btn) => {\n    const cls = $btn.attr('class')\n\n    cy.wrap($btn).click().should('not.have.class', cls).find('i')\n    // since there is no explicit return\n    // the last Cypress command's yield is yielded\n  })\n  .should('have.class', 'spin') // assert on i element\n```\n\n----------------------------------------\n\nTITLE: Performing Shift-Click in Cypress\nDESCRIPTION: Demonstrates how to perform a SHIFT+click operation on an element using a combination of .type() and .click() commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/type.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('body').type('{shift}', { release: false }).get('li:first').click()\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Angular Signal Component\nDESCRIPTION: The HTML template for the test component that uses Angular signals. It displays the title and count signals and includes buttons to increment and decrement the count value through the model signal.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/examples.mdx#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!-- app/components/test-component.component.html -->\n<p data-cy=\"test-component-title-display\">{{ title() }}</p>\n<p data-cy=\"test-component-count-display\">{{ count() }}</p>\n<button data-cy=\"test-component-count-incr\" (click)=\"count.set(count() + 1)\">\n  Increase\n</button>\n<button data-cy=\"test-component-count-decr\" (click)=\"count.set(count() - 1)\">\n  Decrease\n</button>\n```\n\n----------------------------------------\n\nTITLE: Asserting Element State After Animation in Cypress (JavaScript)\nDESCRIPTION: This snippet demonstrates how to wait for an animation triggered by a click event to complete in Cypress. It uses `.should('not.have.class', 'animating')` to assert that the element no longer has the 'animating' class after the click, implicitly waiting for the animation to finish.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n// assuming a click event causes the animation\ncy.get('.element').click().should('not.have.class', 'animating')\n```\n```\n\n----------------------------------------\n\nTITLE: Command Log Example with Multiple Assertions in Cypress\nDESCRIPTION: Example showing how to chain assertions on checkbox elements, verifying they are both checked and not disabled.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/and.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.list')\n  .find('input[type=\"checkbox\"]')\n  .should('be.checked')\n  .and('not.be.disabled')\n```\n\n----------------------------------------\n\nTITLE: Asserting Radio Button State with Retry in Cypress (JavaScript)\nDESCRIPTION: This Cypress snippet asserts that a radio button element should be checked. It uses `cy.get(':radio')` to select radio buttons and the `should('be.checked')` assertion, which retries automatically.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// retry until our radio is checked\ncy.get(':radio').should('be.checked')\n```\n\n----------------------------------------\n\nTITLE: Mounting a React component with Cypress\nDESCRIPTION: Demonstrates how to mount a React component using Cypress, interact with it using clicks, and verify component behavior with assertions. This example tests a Stepper component by clicking an increment button and checking the counter value.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/react/api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { mount } from '@cypress/react'\nimport { Stepper } from './Stepper'\n\nit('mounts', () => {\n  mount(<StepperComponent />)\n  cy.get('[data-cy=increment]').click()\n  cy.get('[data-cy=counter]').should('have.text', '1')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Command to Skip Welcome Screen and Testing Pages Efficiently\nDESCRIPTION: This snippet demonstrates how to reduce test duplication by creating a custom Cypress command that skips the welcome screen. It shows two test cases: one that explicitly tests the welcome page functionality, and another that uses the custom command to bypass the welcome screen and directly test the projects page.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/guides/reduce-test-duplication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// This example is simplified for demonstration purposes\n// In a real-world scenario, you would change the properties that are checked\n// to hide or display the welcome screen for first-time users\nCypress.Commands.add('skipWelcome', () => {\n  cy.setCookie('welcome', 'dismissed')\n})\n\nit('shows welcome page', () => {\n  cy.visit('/')\n  cy.contains('Welcome')\n  cy.get('[data-cy=\"continue\"]').click()\n  cy.contains('Projects')\n})\n\nit('shows projects page', () => {\n  cy.skipWelcome()\n  cy.visit('/')\n  cy.contains('Projects')\n})\n```\n\n----------------------------------------\n\nTITLE: JavaScript Redirect HTML Example\nDESCRIPTION: HTML and JavaScript code showing client-side navigation using window.location.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cross-origin-testing.mdx#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <button id=\"nav\">Navigate to Cypress example</button>\n  <script>\n    document.querySelector('#nav').addEventListener('click', () => {\n      window.location.href = 'https://example.cypress.io'\n    })\n  </script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Cypress Equivalent of Selenium Wait and Click\nDESCRIPTION: Shows the Cypress equivalent of the Selenium wait and click action, which is more concise due to built-in retry-ability.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/selenium-to-cypress.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#myButton').click()\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests in Parallel with Custom CI Build ID (Shell)\nDESCRIPTION: This shell command executes Cypress tests, enabling recording to Cypress Cloud (`--record`), running spec files in parallel (`--parallel`), and associating the run with a specific CI build using a custom identifier (`--ci-build-id`). It relies on an environment variable `$CI_RUN_ID` (or a similar unique identifier for the CI run across parallel jobs) to group parallel runs correctly in Cypress Cloud for load balancing, especially in custom CI environments (like Docker-based setups) where standard CI provider detection might not work.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/faq.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --record --parallel --ci-build-id $CI_RUN_ID\n```\n\n----------------------------------------\n\nTITLE: Finding Previous Siblings with Selector Filter in Cypress\nDESCRIPTION: Example showing how to find previous siblings of list items that match a specific selector class 'selected'.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/prevall.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>apples</li>\n  <li>oranges</li>\n  <li>bananas</li>\n  <li class=\"selected\">pineapples</li>\n  <li>grapes</li>\n</ul>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// yields <li>pineapples</li>\ncy.get('li').prevAll('.selected')\n```\n\n----------------------------------------\n\nTITLE: Working with Promises in .then() using jQuery Deferred\nDESCRIPTION: Example showing how to use jQuery deferred objects with the .then() command to control flow.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/then.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button')\n  .click()\n  .then(($button) => {\n    const df = $.Deferred()\n\n    setTimeout(() => {\n      df.resolve()\n    }, 1000)\n\n    return df\n  })\n```\n\n----------------------------------------\n\nTITLE: Asserting Class and Specific Attribute Value in Cypress\nDESCRIPTION: Example demonstrating how to assert both a class and a specific attribute value on a header link element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/and.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#header a')\n  .should('have.class', 'active')\n  .and('have.attr', 'href', '/users')\n```\n\n----------------------------------------\n\nTITLE: Disabling Request Logs in Cypress Intercepts\nDESCRIPTION: Shows how to disable Cypress's default logging behavior for network requests by using the log option in cy.intercept().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// disable Cypress's default behavior of logging all XMLHttpRequests and fetches\ncy.intercept({ resourceType: /xhr|fetch/ }, { log: false })\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Cypress.Promise\nDESCRIPTION: Demonstrates the proper way to instantiate a Cypress.Promise with resolve and reject parameters.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/promise.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew Cypress.Promise((resolve, reject) => { ... })\n```\n\n----------------------------------------\n\nTITLE: Controlling setInterval with Cypress Clock and Tick\nDESCRIPTION: Example showing how to test app code that uses setInterval by controlling time with cy.clock() and cy.tick().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clock.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// your app code\nlet seconds = 0\n\nsetInterval(() => {\n  $('#seconds-elapsed').text(++seconds + ' seconds')\n}, 1000)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clock()\ncy.visit('/index.html')\ncy.tick(1000)\ncy.get('#seconds-elapsed').should('have.text', '1 seconds')\ncy.tick(1000)\ncy.get('#seconds-elapsed').should('have.text', '2 seconds')\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow with Dependency and Artifact Caching\nDESCRIPTION: An optimized workflow that separates installation and test execution into separate jobs. It uses GitHub's artifact actions to cache and share the build directory between jobs, improving efficiency in multi-job workflows.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/github-actions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: Cypress Tests with Dependency and Artifact Caching\n\non: push\n\njobs:\n  install:\n    runs-on: ubuntu-24.04\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Cypress install\n        uses: cypress-io/github-action@v6\n        with:\n          # Disable running of tests within install job\n          runTests: false\n          build: npm run build\n\n      - name: Save build folder\n        uses: actions/upload-artifact@v4\n        with:\n          name: build\n          if-no-files-found: error\n          path: build\n\n  cypress-run:\n    runs-on: ubuntu-24.04\n    needs: install\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Download the build folder\n        uses: actions/download-artifact@v4\n        with:\n          name: build\n          path: build\n\n      - name: Cypress run\n        uses: cypress-io/github-action@v6\n        with:\n          start: npm start\n          browser: chrome\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Using afterEach for Database Reset\nDESCRIPTION: An example showing the unreliable pattern of using afterEach hook to reset the database state. This approach fails to guarantee state consistency if tests are refreshed.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/best-practices.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nafterEach(() => {\n  cy.resetDb()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress Component Testing with React and Vite\nDESCRIPTION: Configuration example for setting up Cypress Component Testing with React applications using Vite as the bundler. Shows how to provide custom Vite configuration either directly or via a function.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/react/overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  component: {\n    devServer: {\n      framework: 'react',\n      bundler: 'vite',\n      // optionally pass in vite config\n      viteConfig: customViteConfig,\n      // or a function - the result is merged with\n      // any `vite.config` file that is detected\n      viteConfig: async () => {\n        // ... do things ...\n        const modifiedConfig = await injectCustomConfig(baseConfig)\n        return modifiedConfig\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Element Type with isElement in JavaScript\nDESCRIPTION: Shows how to determine if an object is a DOM element using Cypress.dom.isElement. Returns true for DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/dom.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('p').then(($el) => {\n  Cypress.dom.isElement($el) // true\n})\n```\n\n----------------------------------------\n\nTITLE: Changing Number Subject with Cypress Commands\nDESCRIPTION: Example showing how a numeric subject changes when using Cypress commands in a .then() callback.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/then.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.wrap(1).then((num) => {\n  cy.wrap(num)).should('equal', 1) // true\n  cy.wrap(2)\n}).should('equal', 2) // true\n```\n\n----------------------------------------\n\nTITLE: Finding Closest Nav Element\nDESCRIPTION: Example demonstrating how to find the closest nav element from an active list item.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/closest.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('li.active').closest('.nav')\n```\n\n----------------------------------------\n\nTITLE: jQuery UI Sortable Example\nDESCRIPTION: Demonstrates simulating drag and drop with jQuery UI sortable using pageX and pageY coordinates.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/trigger.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[data-cy=draggable]')\n  .trigger('mousedown', { which: 1, pageX: 600, pageY: 100 })\n  .trigger('mousemove', { which: 1, pageX: 600, pageY: 600 })\n  .trigger('mouseup')\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Asynchronous Behavior of 'as' in Cypress\nDESCRIPTION: Illustrates the asynchronous nature of the 'as' command and how to properly access aliased data.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/as.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('A fixture', () => {\n  describe('alias can be accessed', () => {\n    it('via get().', () => {\n      cy.fixture('admin-users.json').as('admins')\n      cy.get('@admins').then((users) => {\n        cy.log(`There are ${users.length} admins.`)\n      })\n    })\n\n    it('via then().', function () {\n      cy.fixture('admin-users.json').as('admins')\n      cy.visit('/').then(() => {\n        cy.log(`There are ${this.admins.length} admins.`)\n      })\n    })\n  })\n\n  describe('aliased in beforeEach()', () => {\n    beforeEach(() => {\n      cy.fixture('admin-users.json').as('admins')\n    })\n\n    it('is bound to this.', function () {\n      cy.log(`There are ${this.admins.length} admins.`)\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests with Record Mode Using Environment Variable - Shell\nDESCRIPTION: This snippet shows how to run Cypress tests in record mode without explicitly passing the '--key' flag. The command relies on the 'CYPRESS_RECORD_KEY' environment variable being set in the environment. This approach is useful in CI/CD pipelines where the record key is injected via environment configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/error-messages.mdx#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --record\n```\n\n----------------------------------------\n\nTITLE: Cypress CT Configuration for Vue CLI (Before Migration)\nDESCRIPTION: Shows the previous Cypress component testing configuration using the `vue-cli` framework setting, which relied on `@vue/cli-service` for bundling. This configuration is no longer supported directly in Cypress v14+.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  component: {\n    devServer: {\n      framework: 'vue-cli',\n      bundler: 'webpack',\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subject Yielding with Cypress 'should' Command\nDESCRIPTION: Examples showing how the 'should' command yields the same subject it was given, allowing for command chaining.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('nav') // yields <nav>\n  .should('be.visible') // yields <nav>\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of cy.document() in Cypress\nDESCRIPTION: Demonstrates the correct way to use the cy.document() command to yield the window.document object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/document.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.document() // yield the window.document object\n```\n\n----------------------------------------\n\nTITLE: Basic Title Command Syntax\nDESCRIPTION: Basic syntax examples showing how to use the cy.title() command with and without options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/title.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.title()\ncy.title(options)\n```\n\n----------------------------------------\n\nTITLE: Using Angular Template Syntax with cy.mount()\nDESCRIPTION: Shows an alternative approach to mounting components using Angular's template syntax. This approach may be preferred by some developers as it more closely resembles how components are used in templates.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/examples.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ncy.mount(`<app-stepper [count]=\"100\"></app-stepper>`, {\n  declarations: [StepperComponent],\n})\n```\n\n----------------------------------------\n\nTITLE: Excluding a Specific Browser with Negation\nDESCRIPTION: Example demonstrating how to run test code in all browsers except Chrome by using the negation prefix (!) with the browser name.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/isbrowser.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('warns to view page in Chrome browser', () => {\n  // true when running in Firefox, etc...\n  if (Cypress.isBrowser('!chrome')) {\n    cy.get('.browser-warning').should(\n      'contain',\n      'For optimal viewing, use Chrome browser'\n    )\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Table Row Operations with within Command\nDESCRIPTION: Example demonstrating how to work with table rows and cells using .within() for scoped operations.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/within.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr>\n    <td>My first client</td>\n    <td>My first project</td>\n    <td>0</td>\n    <td>Active</td>\n    <td><button>Edit</button></td>\n  </tr>\n</table>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.contains('My first client')\n  .parent('tr')\n  .within(() => {\n    // all searches are automatically rooted to the found tr element\n    cy.get('td').eq(1).contains('My first project')\n    cy.get('td').eq(2).contains('0')\n    cy.get('td').eq(3).contains('Active')\n    cy.get('td').eq(4).contains('button', 'Edit').click()\n  })\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Example of cy.url() in JavaScript\nDESCRIPTION: Shows the proper way to use the cy.url() command to yield the current URL as a string.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/url.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.url() // Yields the current URL as a string\n```\n\n----------------------------------------\n\nTITLE: Setting up Code Coverage Plugin Configuration\nDESCRIPTION: Plugin setup code to enable code coverage tracking in Cypress configuration\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/code-coverage.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('@cypress/code-coverage/task')(on, config)\n// include any other plugin code...\n\n// It's IMPORTANT to return the config object\n// with any changed environment variables\nreturn config\n```\n\n----------------------------------------\n\nTITLE: Invoking a Function and Asserting Its Return Value\nDESCRIPTION: Shows how to invoke a simple function and assert on its return value using the '.invoke()' command in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/invoke.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst fn = () => {\n  return 'bar'\n}\n\ncy.wrap({ foo: fn }).invoke('foo').should('eq', 'bar') // true\n```\n\n----------------------------------------\n\nTITLE: POST Request with JSON Body\nDESCRIPTION: Example of making a POST request with JSON data.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/request.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.request('POST', 'http://localhost:8888/users/admin', { name: 'Jane' }).then(\n  (response) => {\n    // response.body is automatically serialized into JSON\n    expect(response.body).to.have.property('name', 'Jane') // true\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Case Sensitivity Options in cy.contains()\nDESCRIPTION: Shows how to use the matchCase option to ignore case sensitivity when searching for text content.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/contains.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('div').contains('capital sentence') // fail\ncy.get('div').contains('capital sentence', { matchCase: false }) // pass\n```\n\n----------------------------------------\n\nTITLE: Asserting Radio Button State with Cypress - JavaScript\nDESCRIPTION: This snippet checks if a radio input is checked, retrying until the assertion passes or times out. It uses the CSS :radio selector and assumes an interactive radio group exists in the test DOM. Cypress dependencies are required.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/assertions.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// retry until our radio is checked\ncy.get(':radio').should('be.checked')\n```\n\n----------------------------------------\n\nTITLE: Asserting and Modifying Disabled State in Cypress (JavaScript)\nDESCRIPTION: This Cypress snippet demonstrates asserting the disabled state of an input using `should('be.disabled')`, programmatically enabling it using `.invoke('prop', 'disabled', false)`, and then asserting its enabled state using `should('be.enabled')` and `and('not.be.disabled')`. Cypress assertions include retry-ability.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#example-input')\n  .should('be.disabled')\n  // let's enable this element from the test\n  .invoke('prop', 'disabled', false)\n\ncy.get('#example-input')\n  // we can use \"enabled\" assertion\n  .should('be.enabled')\n  // or negate the \"disabled\" assertion\n  .and('not.be.disabled')\n```\n\n----------------------------------------\n\nTITLE: Using onAfterScreenshot Callback in Cypress\nDESCRIPTION: Shows how to use the onAfterScreenshot callback to access information about the taken screenshot in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/screenshot.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.screenshot('my-screenshot', {\n  onAfterScreenshot($el, props) {\n    // props has information about the screenshot,\n    // including but not limited to the following:\n    // {\n    //   name: 'my-screenshot',\n    //   path: '/Users/janelane/project/screenshots/spec.cy.js/my-screenshot.png',\n    //   size: '15 kb',\n    //   dimensions: {\n    //     width: 1000,\n    //     height: 660,\n    //   },\n    //   scaled: true,\n    //   blackout: [],\n    //   duration: 2300,\n    // }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Skipping Tests in Cypress\nDESCRIPTION: Shows how to use .skip() to skip a specific test or suite in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/writing-and-organizing-tests.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nit.skip('returns \"fizz\" when number is multiple of 3', () => {\n  numsExpectedToEq([9, 12, 18], 'fizz')\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Mount Function for Angular Components in Cypress\nDESCRIPTION: Shows how to import the mount function from the Cypress Angular integration package, which is used to mount Angular components in tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount } from 'cypress/angular'\n```\n\n----------------------------------------\n\nTITLE: Shift-Clicking in Cypress\nDESCRIPTION: Demonstrates how to perform a shift-click on the first list item element using Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/click.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// execute a SHIFT + click on the first <li>\ncy.get('li:first').click({\n  shiftKey: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Cookie Properties in Cypress\nDESCRIPTION: Example of retrieving a session_id cookie after login and asserting its value. Also demonstrates chaining commands and accessing cookie properties.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/getcookie.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// assume we just logged in\ncy.contains('Login').click()\ncy.url().should('include', 'profile')\n// retries until cookie with value=189jd09su\n// is found or default command timeout ends\ncy.getCookie('session_id')\n  .should('have.property', 'value', '189jd09su')\n  .then((cookie) => {\n    // cookie is an object with \"domain\", \"name\" and other properties\n  })\n```\n\n----------------------------------------\n\nTITLE: Changing Configuration Values During Test Execution\nDESCRIPTION: JavaScript example showing how to modify a configuration value at runtime and get the updated value.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/config.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.config('viewportWidth', 800)\n\nCypress.config('viewportWidth') // => 800\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Vue Component Test with Cypress\nDESCRIPTION: A simple Vue component test that demonstrates how to mount a Stepper component for testing. It uses the cy.mount() command to render the component in the test environment.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/get-started.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Stepper from './Stepper.vue'\n\ndescribe('<Stepper />', () => {\n  it('mounts', () => {\n    // see: https://on.cypress.io/mounting-vue\n    cy.mount(Stepper)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Spy Usage Examples\nDESCRIPTION: Examples showing proper usage of cy.spy() including aliasing\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/spy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.spy(user, 'addFriend')\ncy.spy(user, 'addFriend').as('addFriend')\n```\n\n----------------------------------------\n\nTITLE: Using .then() Command in Cypress - Basic Syntax\nDESCRIPTION: The basic syntax for the Cypress .then() command, showing both the simple form and the form with options parameter.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/then.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.then(callbackFn)\n.then(options, callbackFn)\n```\n\n----------------------------------------\n\nTITLE: Filtering Available Browsers in Cypress Configuration\nDESCRIPTION: Demonstrates how to filter the list of available browsers in Cypress to only include Chromium-based browsers while excluding Electron. Uses the setupNodeEvents configuration to modify the browser list.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/launching-browsers.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nreturn {\n  browsers: config.browsers.filter(\n    (b) => b.family === 'chromium' && b.name !== 'electron'\n  ),\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Promises Example\nDESCRIPTION: Complete example demonstrating waiting for promise resolution with timeout and assertions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/promise.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nit('waits for promises to resolve', () => {\n  let waited = false\n\n  function waitOneSecond() {\n    // return a promise that resolves after 1 second\n    return new Cypress.Promise((resolve, reject) => {\n      setTimeout(() => {\n        // set waited to true\n        waited = true\n\n        // resolve with 'foo' string\n        resolve('foo')\n      }, 1000)\n    })\n  }\n\n  cy.wrap(null).then(() => {\n    // return a promise to cy.then() that\n    // is awaited until it resolves\n    return waitOneSecond().then((str) => {\n      expect(str).to.eq('foo')\n      expect(waited).to.be.true\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying Accessibility Results Script\nDESCRIPTION: Example script using getAccessibilityResults to fetch and analyze accessibility test results. Includes logic for checking existing violations and detecting new regressions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/accessibility/results-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getAccessibilityResults } = require('@cypress/extract-cloud-results')\n\nconst rulesWithExistingViolations = [\n  'aria-required-children',\n  'empty-heading',\n  'aria-dialog-name',\n  'link-in-text-block',\n  'list',\n]\n\ngetAccessibilityResults({\n  projectId: '...', // optional if set from env\n  recordKey: '...', // optional if set from env\n  runTags: [process.env.RUN_TAGS], // required if recording multiple runs\n}).then((results) => {\n  const { runNumber, accessibilityReportUrl, summary, rules } = results\n  const { total } = summary.violationCounts\n\n  console.log(\n    `Received ${summary.isPartialReport ? 'partial' : ''} results for run #${runNumber}.`\n  )\n  console.log(`See full report at ${accessibilityReportUrl}.`)\n\n  if (total === 0) {\n    console.log('No Accessibility violations detected!')\n    return\n  }\n\n  const { critical, serious, moderate, minor } = summary.violationCounts\n\n  console.log(`${total} Accessibility violations were detected:`)\n  console.log(`  - ${critical} critical`)\n  console.log(`  - ${serious} serious`)\n  console.log(`  - ${moderate} moderate`)\n  console.log(`  - ${minor} minor.`)\n\n  const newRuleViolations = rules.filter((rule) => {\n    return !rulesWithExistingViolations.includes(rule.name)\n  })\n\n  if (newRuleViolations.length > 0) {\n    console.error(\n      'The following rules were violated that were previously passing:'\n    )\n    console.error(newRuleViolations)\n    throw new Error(\n      `${newRuleViolations.length} rule regressions were introduced and must be fixed.`\n    )\n  }\n\n  if (total < rulesWithExistingViolations.length) {\n    console.warn(\n      `It seems you have resolved ${rulesWithExistingViolations.length - total} rule(s). Remove them from the list of problematic rules so regressions are not introduced.`\n    )\n  }\n\n  console.log('No new Accessibility violations detected!')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress Cloud projectId - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to specify the unique projectId in the Cypress configuration file. The 'projectId' is a required string generated by Cypress that links your test project with Cypress Cloud. The configuration should be added to your cypress.config.{js,ts} or cypress.json as applicable, ensuring recorded test runs are properly associated with your account. No additional packages are required, but you must retrieve your projectId from Cypress Cloud and ensure it's correctly copied.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/faq.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n```ts\n{\n  projectId: 'a7bq2k'\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Example Test Using Current Retry Count\nDESCRIPTION: Example test case demonstrating how to check the current retry count using Cypress.currentRetry property and asserting its initial value is 0.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/currentretry.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('example', () => {\n  expect(Cypress.currentRetry).to.eq(0)\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of cy.exec() in Cypress\nDESCRIPTION: Demonstrates the basic syntax for executing a system command using cy.exec(). The command is run from the project root directory.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/exec.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.exec('npm run build')\n```\n\n----------------------------------------\n\nTITLE: ScrollTo Options Examples\nDESCRIPTION: Examples showing how to use various options like easing and duration with scrollTo.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/scrollto.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.documentation').scrollTo('top', { easing: 'linear' })\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#slider').scrollTo('right', { duration: 2000 })\n```\n\n----------------------------------------\n\nTITLE: Using the fixture Property in StaticResponse\nDESCRIPTION: Shows how to reference fixtures directly in cy.intercept() using the fixture property without calling cy.fixture().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/fixture.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('GET', '/users/**', { fixture: 'users' })\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple Options in Cypress\nDESCRIPTION: Shows how to select multiple options from a <select> element using an array of values.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/select.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('select')\n  .select(['apples', 'bananas'])\n  .invoke('val')\n  .should('deep.equal', ['456', '458'])\n```\n\n----------------------------------------\n\nTITLE: Spy with Assertions Example\nDESCRIPTION: Example showing how to create a spy with an alias and make assertions on its calls\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/spy.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = {\n  foo() {},\n}\nconst spy = cy.spy(obj, 'foo').as('foo')\n\nobj.foo('foo', 'bar')\nexpect(spy).to.be.called\n```\n\n----------------------------------------\n\nTITLE: Wrapping DOM Elements within a Form Context\nDESCRIPTION: Shows how to wrap a form element within a within() callback to continue executing commands on it.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/wrap.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('form').within(($form) => {\n  // ... more commands\n\n  cy.wrap($form).should('have.class', 'form-container')\n})\n```\n\n----------------------------------------\n\nTITLE: Clearing Cookies After Login Example in Cypress\nDESCRIPTION: Example demonstrating how to use clearCookies after logging in to test authorization flows. It clears the session cookie and verifies redirection to the login page.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clearcookies.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// assume we just logged in\ncy.contains('Login').click()\ncy.url().should('include', 'profile')\ncy.clearCookies()\ncy.visit('/dashboard') // we should be redirected back to login\ncy.url().should('include', 'login')\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress.sinon Syntax in JavaScript\nDESCRIPTION: Shows the basic syntax for using Cypress.sinon.match methods for flexible matching in assertions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/sinon.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.sinon.match(value)\nCypress.sinon.match.<matcher name>\n```\n\n----------------------------------------\n\nTITLE: Checking Element Descendency with isDescendent in JavaScript\nDESCRIPTION: Shows how to determine if one element is a descendant of another using Cypress.dom.isDescendent. Takes parent and child elements as parameters.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/dom.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('div').then(($el) => {\n  Cypress.dom.isDescendent($el.parent(), $el) // true\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for find Command Example in Cypress\nDESCRIPTION: Provides an HTML structure to demonstrate the usage of the find command in subsequent JavaScript code.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/find.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul id=\"parent\">\n  <li class=\"first\"></li>\n  <li class=\"second\"></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Selecting First List Item in HTML with Cypress\nDESCRIPTION: Demonstrates how to use .first() to select the first list item from an unordered list in HTML.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/first.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li class=\"one\">Knick knack on my thumb</li>\n  <li class=\"two\">Knick knack on my shoe</li>\n  <li class=\"three\">Knick knack on my knee</li>\n  <li class=\"four\">Knick knack on my door</li>\n</ul>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// yields <li class=\"one\">Knick knack on my thumb</li>\ncy.get('li').first()\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Cypress Origin Command\nDESCRIPTION: Demonstrates proper implementation of cy.origin() including passing serializable values and handling different origins.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/origin.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst hits = getHits() // Defined elsewhere\n// Run commands in secondary origin, passing in serializable values\ncy.origin('https://example.cypress.io', { args: { hits } }, ({ hits }) => {\n  // Inside callback baseUrl is https://example.cypress.io\n  cy.visit('/history/founder')\n  // Commands are executed in secondary origin\n  cy.get('h1').contains('About our Founder')\n  // Passed in values are accessed via callback args\n  cy.get('#hitcounter').contains(hits)\n})\n// Even though we're outside the secondary origin block,\n// we're still on cypress.io so return to baseUrl\ncy.visit('/')\n// Continue running commands on primary origin\ncy.get('h1').contains('My cool site under test')\n```\n\n----------------------------------------\n\nTITLE: Chaining Assertions with Changed Subject in Cypress\nDESCRIPTION: Example showing how some chainers can change the subject being yielded, affecting subsequent assertions in the chain.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/and.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('nav') // yields <nav>\n  .should('be.visible') // yields <nav>\n  .and('have.css', 'font-family') // yields 'sans-serif'\n  .and('match', /serif/) // yields 'sans-serif'\n```\n\n----------------------------------------\n\nTITLE: Overriding Device Pixel Ratio in Cypress for Chrome Headless\nDESCRIPTION: This code snippet shows how to force the screen to behave like a retina display when running Chrome in headless mode, setting the device scale factor to 2.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/browser-launch-api.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\non('before:browser:launch', (browser, launchOptions) => {\n  if (browser.name === 'chrome' && browser.isHeadless) {\n    // force screen to behave like retina\n    // when running Chrome headless browsers\n    // (2560x1440 in size by default)\n    launchOptions.args.push('--force-device-scale-factor=2')\n  }\n\n  return launchOptions\n})\n```\n\n----------------------------------------\n\nTITLE: Using clearLocalStorage with Assertions in Cypress\nDESCRIPTION: Example showing how to clear localStorage with a regular expression pattern and then make assertions about the state of localStorage after clearing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clearlocalstorage.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clearLocalStorage(/prop1|2/).then((ls) => {\n  expect(ls.getItem('prop1')).to.be.null\n  expect(ls.getItem('prop2')).to.be.null\n  expect(ls.getItem('prop3')).to.eq('magenta')\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Focus and Blur in Cypress\nDESCRIPTION: Example showing a complete sequence of focusing on a text area, typing content, and then blurring it.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/blur.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[name=\"comment\"]').focus().type('Nice Product!').blur()\n```\n\n----------------------------------------\n\nTITLE: File Existence Assertion in Cypress\nDESCRIPTION: Demonstrates the default file existence assertion behavior of selectFile command, showing how it fails when file doesn't exist.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/selectfile.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// will fail after the defaultCommandTimeout is reached\ncy.get('input[type=file]').selectFile('does-not-exist.yaml')\n```\n\n----------------------------------------\n\nTITLE: Handling Domain-Specific Uncaught Exceptions\nDESCRIPTION: Example demonstrating how to handle uncaught exceptions within a specific domain using cy.origin().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/catalog-of-events.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncy.origin('https://example.cypress.io', () => {\n  Cypress.on('uncaught:exception', (err, runnable) => {\n    // returning false here prevents Cypress\n    // inside the cy.origin() method from failing the test\n    return false\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Duration for scrollIntoView Animation\nDESCRIPTION: Example of setting a specific duration (in milliseconds) for the scrolling animation when bringing an element into view.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/scrollintoview.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('footer').scrollIntoView({ duration: 2000 })\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Browser Matchers in an Array\nDESCRIPTION: Example showing how to conditionally run test code when using either Electron or Chrome by passing an array of browser names to isBrowser.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/isbrowser.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nit('colors rainbow', () => {\n  // true when running in Electron or Chrome\n  if (Cypress.isBrowser(['electron', 'chrome'])) {\n    cy.get('.rainbox').should(\n      'have.css',\n      'conic-gradient(red, orange, yellow, green, blue)'\n    )\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Change Spies for Signal Updates in Angular/Cypress Testing\nDESCRIPTION: Demonstrates how to use change spies in Cypress to detect updates to writable signals like model() or signal(). It shows creating an output spy for a count property and verifying it's called after a user interaction.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/examples.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ncy.mount(TestComponent, {\n  componentProperties: {\n    title: 'Test Component',\n    count: 4,\n    // @ts-expect-error\n    countChange: createOutputSpy('countChange'),\n  },\n})\n\n// some action occurs that changes the count\ncy.get('[data-cy=\"test-component-count-incr\"]').click()\n\ncy.get('@countChange').should('have.been.called')\n```\n\n----------------------------------------\n\nTITLE: Specifying Return Values for Stubbed Methods in Cypress\nDESCRIPTION: Shows how to specify the return value of a stubbed method using the returns() function, which is useful for controlling test flow.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/stub.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// assume App.start calls util.addListeners, which returns a function\n// that removes the listeners\nconst removeStub = cy.stub()\n\ncy.stub(util, 'addListeners').returns(removeStub)\n\nApp.start()\nApp.stop()\nexpect(removeStub).to.be.called\n```\n\n----------------------------------------\n\nTITLE: Asserting on Location's href in Cypress Test\nDESCRIPTION: Shows how to use cy.location() to make assertions about the current page's URL, specifically checking if the href includes a specific string.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/location.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.location().should((loc) => {\n  expect(loc.href).to.include('commands/querying')\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Wait Command with Request/Response Types\nDESCRIPTION: Demonstrates how to use cy.wait() with TypeScript, including type specifications for request and response interceptors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/wait.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Specifying request and response types for aliased intercepts\ntype UserReq = {}\ntype UserRes = {}\ntype ActivityReq = {}\ntype ActivityRes = {}\n\ncy.intercept('/users/*').as('getUsers')\ncy.intercept('/activities/*').as('getActivities')\n\n// As templated types:\ncy.wait<UserReq, UserRes>('@getUsers').then(({ request, response }) => {\n  request.body // will be of type UserReq\n  response.body // will be of type UserRes\n})\n\n// As inferred types, with type `Interception` available in `cypress/types/net-stubbing`\ncy.wait('@getUsers').then(\n  ({ request, response }: Interception<UserReq, UserRes>) => {\n    request.body // will be of type UserReq\n    response.body // will be of type UserRes\n  }\n)\n\n// When passing an array of aliases, types must be inferred:\ncy.wait(['@getUsers', 'getActivities']).then(\n  (\n    interceptions: Array<\n      Interception<UserReq | ActivityReq, UserRes | ActivityRes>\n    >\n  ) => {\n    interceptions.forEach(({ request, response }) => {\n      request.body // will be of type UserReq | ActivityReq\n      response.body // will be of type UserRes | ActivityRes\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Yielding and Accessing the Window Object in Cypress\nDESCRIPTION: Example showing how to yield the remote window object and access it using a .then() callback. This can be used after either visiting a URL or mounting a component.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/window.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.window().then((win) => {\n  // win is the remote window\n})\n```\n\n----------------------------------------\n\nTITLE: Chaining Commands after Taking Screenshot in Cypress\nDESCRIPTION: Demonstrates how to chain additional commands after taking a screenshot in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/screenshot.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').first().screenshot().click()\n```\n\n----------------------------------------\n\nTITLE: Handling Known Issue with cy.click() in Shadow DOM\nDESCRIPTION: Shows a workaround for a known issue where cy.click() may not click the right element in Chrome when working with shadow DOM.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/shadow.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#element').shadow().find('[data-test-id=\"my-button\"]').click('top')\n```\n\n----------------------------------------\n\nTITLE: Asserting Selected Option in Cypress\nDESCRIPTION: Shows how to assert the currently selected option using jQuery's :selected selector.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/select.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('select#name option:selected').should('have.text', 'Peter')\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for Cypress selectFile Command\nDESCRIPTION: Shows the basic syntax patterns for using the selectFile command with different parameter combinations.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/selectfile.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.selectFile(file)\n.selectFile(file, options)\n.selectFile([file1, file2, ...])\n.selectFile([file1, file2, ...], options)\n```\n\n----------------------------------------\n\nTITLE: Clearing All localStorage in Cypress\nDESCRIPTION: Example showing how to clear all localStorage data for the current domain in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clearlocalstorage.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clearLocalStorage()\n```\n\n----------------------------------------\n\nTITLE: Adding Message to Assertions in Cypress\nDESCRIPTION: Shows how to add descriptive messages to assertions for better error reporting in the Command Log.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.connectors-list > li').should(($lis) => {\n  expect($lis, '3 items').to.have.length(3)\n  expect($lis.eq(0), 'first item').to.contain('Walk the dog')\n  expect($lis.eq(1), 'second item').to.contain('Feed the cat')\n  expect($lis.eq(2), 'third item').to.contain('Write JavaScript')\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Execution Based on Cypress Version in JavaScript\nDESCRIPTION: Shows how to use the semver library with Cypress.version to conditionally run tests based on the Cypress version. This example checks if the current version is greater than or equal to '1.1.3' before testing the Cypress.platform property.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/version.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst semver = require('semver')\n\nif (semver.gte(Cypress.version, '1.1.3')) {\n  it('has Cypress.platform', () => {\n    expect(Cypress.platform).to.be.a('string')\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting All Radio Buttons in Cypress\nDESCRIPTION: Example of selecting all radio button elements on a page.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/check.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[type=\"radio\"]').check()\n```\n\n----------------------------------------\n\nTITLE: Finding Previous Element of Active List Item in Cypress\nDESCRIPTION: Practical example showing how to find and chain commands to locate the previous element of an active list item in a navigation menu.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/prev.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.left-nav').find('li.active').prev()\n```\n\n----------------------------------------\n\nTITLE: Assigning Aliases in Cypress\nDESCRIPTION: Demonstrates correct usage of the 'as' command to assign aliases for DOM elements, intercepted routes, stubs, and spies.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/as.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.main-nav').find('li').first().as('firstNav') // Alias element as @firstNav\ncy.get('input.username').invoke('val').as('username', { type: 'static' }) // Alias that references the value at the time the alias was created\ncy.intercept('PUT', '/users').as('putUser') // Alias route as @putUser\ncy.stub(api, 'onUnauth').as('unauth') // Alias stub as @unauth\ncy.spy(win, 'fetch').as('winFetch') // Alias spy as @winFetch\n```\n\n----------------------------------------\n\nTITLE: Completing Todo Item in Cypress Test\nDESCRIPTION: This snippet demonstrates a Cypress test for completing a todo item. It shows how to visit the page or mount a component, add a new todo, mark it as completed, and assert its completion status.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/visual-testing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nit('completes todo', () => {\n  -{cy.visit('/') // opens TodoMVC running at \"baseUrl\"::cy.mount(<Todos />)}-\n  cy.get('.new-todo').type('write tests{enter}')\n  cy.contains('.todo-list li', 'write tests').find('.toggle').check()\n\n  cy.contains('.todo-list li', 'write tests').should('have.class', 'completed')\n})\n```\n\n----------------------------------------\n\nTITLE: Overwriting Screenshot Command in Cypress\nDESCRIPTION: Shows how to overwrite the screenshot command to add a visibility check before taking screenshots.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.overwrite(\n  'screenshot',\n  (originalFn, subject, fileName, options) => {\n    cy.get('.app')\n      .should('be.visible')\n      .then({ timeout: Cypress.config('responseTimeout') }, () => {\n        return originalFn(subject, fileName, options)\n      })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying Browser Preferences for Different Browser Families\nDESCRIPTION: Example showing how to modify browser-specific preferences for Chromium-based browsers, Firefox, and Electron. Each browser family has its own preference structure and available options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/browser-launch-api.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\non('before:browser:launch', (browser, launchOptions) => {\n  if (browser.family === 'chromium' && browser.name !== 'electron') {\n    // in Chromium, preferences can exist in Local State, Preferences, or Secure Preferences\n    // via launchOptions.preferences, these can be acccssed as `localState`, `default`, and `secureDefault`\n\n    // for example, to set `somePreference: true` in Preferences:\n    launchOptions.preferences.default['preference'] = true\n\n    return launchOptions\n  }\n\n  if (browser.family === 'firefox') {\n    // launchOptions.preferences is a map of preference names to values\n    launchOptions.preferences['some.preference'] = true\n\n    return launchOptions\n  }\n\n  if (browser.name === 'electron') {\n    // launchOptions.preferences is a `BrowserWindow` `options` object\n    launchOptions.preferences.darkTheme = true\n\n    return launchOptions\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing the Clock Object with then()\nDESCRIPTION: Demonstrates how to access the clock object yielded by cy.clock() using then() to move time programmatically.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clock.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clock().then((clock) => {\n  clock.tick(1000)\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Remote Page's Window Object in JavaScript\nDESCRIPTION: Shows how cy.visit() yields the remote page's window object when it resolves, which can be accessed in a then() callback.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('index.html').then((contentWindow) => {\n  // contentWindow is the remote page's window object\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of .first() in Cypress\nDESCRIPTION: Demonstrates the correct usage of .first() to yield the first link in a navigation element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/first.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('nav a').first() // Yield first link in nav\n```\n\n----------------------------------------\n\nTITLE: Force clicking a hidden element in Cypress\nDESCRIPTION: This snippet demonstrates how to force a click action on a hidden element, bypassing visibility checks.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/hover.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.hidden').click({ force: true })\n```\n\n----------------------------------------\n\nTITLE: Mounting Angular Standalone Components\nDESCRIPTION: Demonstrates testing Standalone Components, which are simpler to test because they provide all required metadata through the @Component decorator, often requiring no additional imports, decorators, or providers.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/examples.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncy.mount(MyStandaloneComponent)\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements by Class in Cypress\nDESCRIPTION: Example of filtering list items to find elements with a specific class. This demonstrates filtering the current subject to elements with the class 'active'.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/filter.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>Home</li>\n  <li class=\"active\">About</li>\n  <li>Services</li>\n  <li>Pricing</li>\n  <li>Contact</li>\n</ul>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// yields <li>About</li>\ncy.get('ul').find('>li').filter('.active')\n```\n\n----------------------------------------\n\nTITLE: Wrapping an Object with Function and Invoking It\nDESCRIPTION: Demonstrates wrapping an object with a function property, then invoking that function and asserting on the result.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/wrap.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst getName = () => {\n  return 'Jane Lane'\n}\n\ncy.wrap({ name: getName }).invoke('name').should('eq', 'Jane Lane') // true\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of .its()\nDESCRIPTION: Demonstrates correct ways to use the .its() command to access properties.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/its.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.wrap({ width: '50' }).its('width') // Get the 'width' property\ncy.window().its('sessionStorage') // Get the 'sessionStorage' property\n```\n\n----------------------------------------\n\nTITLE: Finding Buttons not of Type Submit in Cypress\nDESCRIPTION: Example showing how to chain commands to find buttons that are not of type 'submit' within a form.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/not.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('form').find('button').not('[type=\"submit\"]')\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Dev Server in Cypress\nDESCRIPTION: TypeScript implementation of a custom dev server configuration showing the required function signature and return type.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/component-framework-configuration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  component: {\n    async devServer({specs, cypressConfig, devServerEvents}: DevServerOptions) {\n      const {port, close} = await startDevServer(specs, cypressConfig, devServerEvents)\n\n      return {\n        port,\n        close\n      }\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Browser Family Filter for Chromium-based Browsers\nDESCRIPTION: Example demonstrating how to run test code only in Chromium-based browsers by using a filter object with the family property.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/isbrowser.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nit('has CSS reflections', () => {\n  // if in Chromium-based browser (Chrome, Electron, etc...)\n  // check css property was properly applied\n  if (Cypress.isBrowser({ family: 'chromium' })) {\n    cy.get('.header').should('have.css', '-webkit-box-reflect', 'left')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Going Back in Browser's History with String Parameter\nDESCRIPTION: Shows how to navigate back in the browser's history using the 'back' string parameter, equivalent to clicking the back button.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/go.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.go('back') // equivalent to clicking back button\n```\n\n----------------------------------------\n\nTITLE: Right-clicking with Explicit Coordinates in Cypress\nDESCRIPTION: Example of right-clicking at specific coordinates relative to the top left corner of an element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/rightclick.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#open-menu').rightclick(15, 40)\n```\n\n----------------------------------------\n\nTITLE: Efficient SSO Login Custom Command with Session Caching in Cypress\nDESCRIPTION: An improved custom command for SSO login that uses cy.session() for caching and validation, improving test performance.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/origin.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add('login', (username, password) => {\n  const args = { username, password }\n  cy.session(\n    // Username & password can be used as the cache key too\n    args,\n    () => {\n      cy.origin('cypress.io', { args }, ({ username, password }) => {\n        cy.visit('/login')\n        cy.contains('Username').find('input').type(username)\n        cy.contains('Password').find('input').type(password)\n        cy.get('button').contains('Login').click()\n      })\n      cy.url().should('contain', '/home')\n    },\n    {\n      validate() {\n        cy.request('/api/user').its('status').should('eq', 200)\n      },\n    }\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Iterating Over DOM Elements Example\nDESCRIPTION: Example of using .each() to iterate over DOM elements with conditional logic.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/each.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('ul>li').each(($el, index, $list) => {\n  // $el is a wrapped jQuery element\n  if ($el.someMethod() === 'something') {\n    // wrap this element so we can\n    // use cypress commands on it\n    cy.wrap($el).click()\n  } else {\n    // do something else\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Running Cypress with Mochawesome Reporter (Shell)\nDESCRIPTION: Executes Cypress tests using the Mochawesome reporter with custom options via command line.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/reporters.mdx#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnpx cypress run --reporter mochawesome \\\n  --reporter-options reportDir=\"cypress/results\",overwrite=false,html=false,json=true\n```\n\n----------------------------------------\n\nTITLE: Excluding Auto-Generated ID Values in UI Coverage\nDESCRIPTION: Configuration example that filters out auto-generated IDs matching a specific pattern (:r.*:). The example includes HTML showing the original elements and how they will appear in UI Coverage reports after filtering.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/attributefilters.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"attributeFilters\": [\n      {\n        \"attribute\": \"id\",\n        \"value\": \":r.*:\",\n        \"include\": false\n      }\n    ]\n  }\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<body>\n  <button id=\":r11:\" name=\"my-button\">Button 1</button>\n  <button id=\":r12:\" name=\"other-button\">Button 2</button>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Testing Element Non-existence with Cypress\nDESCRIPTION: Shows how to wait for elements to be removed from the DOM by adding explicit assertions that reverse the default existence expectation using 'not.exist'.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button.close').click()\n\n// now Cypress will wait until this\n// <button> is not in the DOM\ncy.get('button.close').should('not.exist')\n\n// and now make sure this #modal does not exist in the DOM\n// and automatically wait until it's gone!\ncy.get('#modal').should('not.exist')\n```\n\n----------------------------------------\n\nTITLE: Custom Error Throwing in Cypress 'should' Callback\nDESCRIPTION: Demonstrates how to throw custom errors from a 'should' callback function for clearer test failure messages.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.docs-header')\n  .find('div')\n  .should(($div) => {\n    if ($div.length !== 1) {\n      // you can throw your own errors\n      throw new Error('Did not find 1 element')\n    }\n\n    const className = $div[0].className\n\n    if (!className.match(/heading-/)) {\n      throw new Error(`No class \"heading-\" in ${className}`)\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Chai 4 Breaking Change: Non-existent Properties\nDESCRIPTION: This example demonstrates that Chai 4 will throw an error when a non-existent property is read, which helps catch typos in property assertions that would previously pass incorrectly.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_103\n\nLANGUAGE: javascript\nCODE:\n```\n// Would pass in Cypress 3 but will fail correctly in 4\nexpect(true).to.be.ture\n```\n\n----------------------------------------\n\nTITLE: Recording Cypress Tests with Key\nDESCRIPTION: Example of running Cypress tests with record flag and explicit record key specification.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/overview.mdx#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --record --key abc-key-123\n```\n\n----------------------------------------\n\nTITLE: Filtering by Browser Family and Channel\nDESCRIPTION: Example showing how to run test code only in stable releases of Chromium-based browsers by using a filter object with both family and channel properties.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/isbrowser.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nit('test', () => {\n  // true when in any stable release of a Chromium-based browser\n  if (Cypress.isBrowser({ family: 'chromium', channel: 'stable' })) {\n    // test some (hypothetical) scenario in chrome stable\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple Checkboxes by Value in Cypress\nDESCRIPTION: Example of checking multiple checkboxes using an array of values, includes HTML context.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/check.mdx#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <input type=\"checkbox\" id=\"subscribe\" value=\"subscribe\" />\n  <label for=\"subscribe\">Subscribe to newsletter?</label>\n  <input type=\"checkbox\" id=\"acceptTerms\" value=\"accept\" />\n  <label for=\"acceptTerms\">Accept terms and conditions.</label>\n</form>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('form input').check(['subscribe', 'accept'])\n```\n\n----------------------------------------\n\nTITLE: Cypress window:confirm Event Example\nDESCRIPTION: Demonstrates how to handle window confirmation dialogs in Cypress. The event yields the confirmation text and allows changing the default accept behavior.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/catalog-of-events.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.confirm()\n```\n\n----------------------------------------\n\nTITLE: Defining Cypress Accessibility Configuration in TypeScript\nDESCRIPTION: A complete configuration object with all available options for Cypress Accessibility. It includes elementFilters, views, and viewFilters properties which impact both UI Coverage and Accessibility.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/accessibility/configuration/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"elementFilters\": [\n    {\n      \"selector\": string,\n      \"include\": boolean\n    }\n  ],\n  \"views\": [\n    {\n      \"pattern\": string,\n      \"groupBy\": [\n        string\n      ]\n    }\n  ],\n  \"viewFilters\": [\n    {\n      \"pattern\": string,\n      \"include\": boolean\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Promise Example with Button\nDESCRIPTION: Example showing how to create a Promise when interacting with a button element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/promise.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').then(($button) => {\n  return new Cypress.Promise((resolve, reject) => {\n    // do something custom here\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Aliases for Efficient Command Chaining in Cypress\nDESCRIPTION: An example of using Cypress aliases to make the pattern of separating actions and assertions less intrusive and more readable.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/retry-ability.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.new-todo').as('new')\n\ncy.get('@new').type('todo A{enter}')\ncy.get('@new').type('todo B{enter}')\ncy.get('@new').should('have.class', 'active')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Environment Variables\nDESCRIPTION: Example showing how to access individual environment variables by name, including variables set via command line that get automatically converted to appropriate data types.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/env.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.env('HOST') // => \"laura.dev\"\nCypress.env('IS_CI') // => true\nCypress.env('MY_ID') // => 123\n```\n\n----------------------------------------\n\nTITLE: Reading Binary File with Cypress Buffer\nDESCRIPTION: Example showing how to read a binary file and verify it's a Buffer instance.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/buffer.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.readFile('images/logo.png', null).then((file) => {\n  expect(Cypress.Buffer.isBuffer(file)).to.be.true\n  // Do something with `file` Buffer here\n})\n```\n\n----------------------------------------\n\nTITLE: Cypress Type Command Usage Examples\nDESCRIPTION: Demonstrates correct usage of the type command by typing text into an input element, and incorrect usage examples showing errors when chained improperly.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/type.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input').type('Hello, World') // Type 'Hello, World' into the 'input'\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.type('Welcome') // Errors, cannot be chained off 'cy'\ncy.clock().type('www.cypress.io') // Errors, 'clock' does not yield DOM elements\n```\n\n----------------------------------------\n\nTITLE: ScrollTo with EnsureScrollable Option\nDESCRIPTION: Example showing how to handle scrolling when element scrollability is uncertain using the ensureScrollable option.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/scrollto.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// will move on to next command even if table is not scrollable\ncy.get('table').scrollTo('bottom', { ensureScrollable: false })\ncy.get('table').find('tr:last-child').should('be.visible')\n```\n\n----------------------------------------\n\nTITLE: Setting, Clearing, and Verifying a Cookie in Cypress\nDESCRIPTION: Demonstrates setting a cookie, clearing it, and then asserting that the cookie no longer exists using cy.getCookie().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clearcookie.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.setCookie('foo', 'bar')\ncy.clearCookie('foo')\ncy.getCookie('foo').should('be.null')\n```\n\n----------------------------------------\n\nTITLE: Selecting an Option by Value in Cypress\nDESCRIPTION: Demonstrates how to select an option from a <select> element using its value.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/select.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('select').select('user-1') // Select the 'user-1' option\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Cypress Command for Amazon Cognito Authentication\nDESCRIPTION: This snippet shows how to create a custom Cypress command for Amazon Cognito authentication. It uses cy.origin() to navigate to the Cognito origin, input user credentials, and sign in.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/amazon-cognito-authentication.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// Amazon Cognito\nconst loginToCognito = (username: string, password: string) => {\n  Cypress.log({\n    displayName: 'COGNITO LOGIN',\n    message: [`🔐 Authenticating | ${username}`],\n    autoEnd: false,\n  })\n\n  cy.visit('/')\n\n  cy.origin(\n    Cypress.env('cognito_domain'),\n    {\n      args: {\n        username,\n        password,\n      },\n    },\n    ({ username, password }) => {\n      cy.contains('Sign in with your email and password')\n      // Cognito log in page has some elements of the same id but are off screen.\n      // We only want the visible elements to log in\n      cy.get('input[name=\"username\"]:visible').type(username)\n      cy.get('input[name=\"password\"]:visible').type(password, {\n        // use log: false to prevent your password from showing in the Command Log\n        log: false,\n      })\n      cy.get('input[name=\"signInSubmitButton\"]:visible').click()\n    }\n  )\n\n  // give a few seconds for redirect to settle\n  cy.wait(2000)\n\n  // verify we have made it passed the login screen\n  cy.contains('Get Started').should('be.visible')\n}\n\n// right now our custom command is light. More on this later!\nCypress.Commands.add('loginByCognito', (username, password) => {\n  return loginToCognito(username, password)\n})\n```\n\n----------------------------------------\n\nTITLE: Cross-Origin Navigation in Cypress\nDESCRIPTION: Example demonstrating correct usage of cy.origin() for cross-origin navigation in Cypress v12.0.0+.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/error-messages.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nit('navigates to example.cypress.io and runs additional commands', () => {\n  cy.visit('http://localhost:3000')\n  cy.visit('https://example.cypress.io')\n  cy.origin('https://example.cypress.io', () => {\n    cy.get('h1').should('contain', 'Why Cypress?')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Navigating Pages in Cypress (JavaScript)\nDESCRIPTION: This Cypress snippet demonstrates page navigation using `cy.visit()` to go to a specific URL, and `cy.go('forward')` and `cy.go('back')` to navigate through the browser's history.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nit('visits a page', () => {\n  cy.visit('/about')\n  cy.go('forward')\n  cy.go('back')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress mount command for Vuetify in Vue\nDESCRIPTION: Custom Cypress mount command to wrap Vue components in a VApp component, necessary for testing Vuetify components. Includes setup for Vuetify plugin and options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/vue/examples.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vuetify from 'vuetify/lib'\nimport { VApp } from 'vuetify'\nimport { mount } from 'cypress/vue'\nimport { h } from 'vue'\n\n// We recommend that you pull this out\n// into a constants file that you share with\n// your main.js file.\nconst vuetifyOptions = {}\n\nCypress.Commands.add('mount', (component, ...args) => {\n  args.global = args.global || {}\n  args.global.plugins = args.global.plugins || []\n  args.global.plugins.push(new Vuetify(vuetifyOptions))\n\n  return mount(\n    () => {\n      return h(VApp, {}, component)\n    },\n    ...args\n  )\n})\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport Vuetify from 'vuetify/lib'\nimport { VApp } from 'vuetify'\nimport { mount } from 'cypress/vue'\n\n// We recommend that you pull this out\n// into a constants file that you share with\n// your main.js file.\nconst vuetifyOptions = {}\n\nCypress.Commands.add('mount', (component, ...args) => {\n  args.global = args.global || {}\n  args.global.plugins = args.global.plugins || []\n  args.global.plugins.push(new Vuetify(vuetifyOptions))\n\n  // <component> is a built-in component that comes with Vue\n  return mount(\n    () => (\n      <VApp>\n        <component is={component} />\n      </VApp>\n    ),\n    ...args\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of setCookie Command\nDESCRIPTION: Example of correctly using the setCookie command to set an authentication key cookie.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/setcookie.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.setCookie('auth_key', '123key') // Set the 'auth_key' cookie to '123key'\n```\n\n----------------------------------------\n\nTITLE: Configuring Support File for Code Coverage\nDESCRIPTION: Import statement needed in the Cypress support file to enable code coverage\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/code-coverage.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// cypress/support/e2e.js\nimport '@cypress/code-coverage/support'\n```\n\n----------------------------------------\n\nTITLE: Asserting Attribute Value in Cypress\nDESCRIPTION: Demonstrates checking that an attribute has a specific value using 'have.attr' with both attribute name and expected value arguments.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#header a').should('have.attr', 'href', '/users')\n```\n\n----------------------------------------\n\nTITLE: Replacing cy.server() and cy.route() with cy.intercept() in Cypress 12\nDESCRIPTION: Shows how to update network interception code to use cy.intercept() instead of the removed cy.server() and cy.route() commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_31\n\nLANGUAGE: diff\nCODE:\n```\n  it('can encode + decode headers', () => {\n-   Cypress.Server.defaults({\n-     delay: 500,\n-     method: 'GET',\n-   })\n-   cy.server()\n-   cy.route(/api/, () => {\n-      return {\n-        'test': 'We'll',\n-      }\n-    }).as('getApi')\n+   cy.intercept('GET', /api/, (req) => {\n+      req.on('response', (res) => {\n+        res.setDelay(500)\n+      })\n+      req.body.'test': 'We'll'\n+    }).as('getApi')\n    cy.visit('/index.html')\n    cy.window().then((win) => {\n      const xhr = new win.XMLHttpRequest\n      xhr.open('GET', '/api/v1/foo/bar?a=42')\n      xhr.send()\n    })\n\n    cy.wait('@getApi')\n-   .its('url').should('include', 'api/v1')\n+   .its('request.url').should('include', 'api/v1')\n  })\n```\n\n----------------------------------------\n\nTITLE: Submitting a Form Using POST Method in JavaScript\nDESCRIPTION: Demonstrates how to simulate form submission by using the POST method with a body containing form values.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit({\n  url: 'http://localhost:3000/cgi-bin/newsletterSignup',\n  method: 'POST',\n  body: {\n    name: 'George P. Burdell',\n    email: 'burdell@microsoft.com',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Untested Links in Cypress\nDESCRIPTION: This code demonstrates how to systematically visit untested pages identified in the UI Coverage report. It iterates through an array of untested links and visits each page, performing basic checks to ensure the page loads correctly.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/guides/address-coverage-gaps.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Cover Untested Links', () => {\n  it('Visits untested pages', () => {\n    const untestedLinks = ['/about-us', '/contact', '/pricing']\n\n    untestedLinks.forEach((link) => {\n      cy.visit(link)\n      // Perform basic checks to ensure the page loads correctly\n      cy.get('h1').should('exist')\n      // UI Coverage will now surface the coverage of these pages\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Cypress.require() in cy.origin() Callback\nDESCRIPTION: Demonstrates how to use Cypress.require() to include npm packages and other files within cy.origin() callback.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/origin.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncy.origin('cypress.io', () => {\n  const _ = Cypress.require('lodash')\n  const utils = Cypress.require('../support/utils')\n\n  // ... use lodash and utils ...\n})\n```\n\n----------------------------------------\n\nTITLE: Clearing a Specific Cookie in Cypress\nDESCRIPTION: Demonstrates the basic syntax for clearing a cookie named 'authId' using the cy.clearCookie() command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clearcookie.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clearCookie('authId') // clear the 'authId' cookie\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Example of Cypress wrap Command\nDESCRIPTION: Shows the proper way to use the wrap command with an object containing a name property.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/wrap.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.wrap({ name: 'Jane Lane' })\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of 'next' Command\nDESCRIPTION: Example of correct usage of the 'next' command to yield the next link in a navigation.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/next.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('nav a:first').next() // Yield next link in nav\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of .and() Command in Cypress\nDESCRIPTION: Demonstrates correct ways to use the .and() command for asserting various conditions like element visibility, properties, and DOM state.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/and.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.err').should('be.empty').and('be.hidden') // Assert '.err' is empty & hidden\n\ncy.contains('Login').and('be.visible') // Assert el is visible\n\ncy.wrap({ foo: 'bar' })\n  .should('have.property', 'foo') // Assert 'foo' property exists\n  .and('eq', 'bar') // Assert 'foo' property is 'bar'\n```\n\n----------------------------------------\n\nTITLE: Overwriting Type Command for Password Masking in Cypress\nDESCRIPTION: Demonstrates how to overwrite the 'type' command to mask sensitive data in the Cypress Command Log when typing passwords.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.overwrite('type', (originalFn, element, text, options) => {\n  if (options && options.sensitive) {\n    // turn off original log\n    options.log = false\n    // create our own log with masked message\n    Cypress.log({\n      $el: element,\n      name: 'type',\n      message: '*'.repeat(text.length),\n    })\n  }\n\n  return originalFn(element, text, options)\n})\n```\n\n----------------------------------------\n\nTITLE: Checking DOM Attachment Status with isAttached in JavaScript\nDESCRIPTION: Demonstrates how to check if an element is attached to the DOM using Cypress.dom.isAttached. Returns true if the element is in the DOM.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/dom.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').then(($el) => {\n  Cypress.dom.isAttached($el) // true\n})\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Chaining Commands in Cypress\nDESCRIPTION: An example of incorrectly chaining action commands and assertions, which may lead to unreliable tests due to asynchronous rendering or event handling.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/retry-ability.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.new-todo')\n  .type('todo A{enter}') // action\n  .type('todo B{enter}') // action after another action - bad\n  .should('have.class', 'active') // assertion after an action - bad\n```\n\n----------------------------------------\n\nTITLE: Double-clicking All Buttons on a Page in Cypress\nDESCRIPTION: Shows how to double-click all buttons found on a page with a single command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/dblclick.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').dblclick({ multiple: false })\n```\n\n----------------------------------------\n\nTITLE: Setting Selector Priority in Cypress.SelectorPlayground\nDESCRIPTION: Example of configuring the selector priority to favor IDs, then classes, then attributes, which determines the order of preference for which selector is chosen for the element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/selector-playground-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.SelectorPlayground.defaults({\n  selectorPriority: ['id', 'class', 'attributes'],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring cy.exec() Timeout Globally in Cypress\nDESCRIPTION: Demonstrates how to change the timeout for cy.exec() globally using Cypress.config().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/exec.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.config('execTimeout', 30000)\nCypress.config('execTimeout') // => 30000\n```\n\n----------------------------------------\n\nTITLE: Setting baseUrl Configuration for Local File Testing\nDESCRIPTION: Shows how to configure baseUrl and then override it for specific tests using per-test configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  e2e: {\n    baseUrl: 'https://example.cypress.io',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Screen Orientation in Cypress\nDESCRIPTION: Shows how to change the orientation from portrait (default) to landscape when using device presets.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/viewport.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// the viewport will now be changed to 736px x 414px\n// and simulates the user holding the iPhone in landscape\ncy.viewport('iphone-6', 'landscape')\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of clear Command in JavaScript\nDESCRIPTION: Demonstrates correct usage patterns for the clear() command, including clearing a text input, clearing a textarea after typing, and clearing the currently focused element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clear.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[type=\"text\"]').clear() // Clear text input\ncy.get('textarea').type('Hi!').clear() // Clear textarea\ncy.focused().clear() // Clear focused input/textarea\n```\n\n----------------------------------------\n\nTITLE: Testing Image Accessibility with Cypress\nDESCRIPTION: This code snippet demonstrates how to use Cypress to test the accessibility of an image by checking its alt text attribute. It visits a example website and asserts that the logo image has the correct alt text.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/get-started/why-cypress.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('adds todos', () => {\n  cy.visit('https://example.cypress.io/')\n  cy.get('img#logo')\n    // Assert that an image has the correct alt text\n    .should('have.attr', 'alt', 'Cypress Logo')\n})\n```\n\n----------------------------------------\n\nTITLE: Changing System Time with setSystemTime\nDESCRIPTION: Example of testing a timer by changing the system time without triggering all intermediate timers.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clock.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clock(0)\ncy.visit('http://localhost:3333')\ncy.clock().then((clock) => {\n  clock.setSystemTime(60 * 60 * 1000 - 60);\n  // setSystemTime doesn't trigger any timers, so we run the last frame\n  // with tick to trigger a callback to update the timer.\n  clock.tick(60);\n})\ncy.get('#timer').should(...) // assert that it fits within the screen etc.\n// more test code here\n```\n\n----------------------------------------\n\nTITLE: Finding Elements Following Active List Item with nextAll in Cypress\nDESCRIPTION: Demonstrates how to use nextAll to find all elements following an active list item in a left navigation menu.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/nextall.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.left-nav').find('li.active').nextAll()\n```\n\n----------------------------------------\n\nTITLE: Testing URL Patterns with Cypress.minimatch in JavaScript\nDESCRIPTION: Examples showing how to test glob patterns against URLs using Cypress.minimatch in the Developer Tools console, demonstrating both matching and non-matching scenarios.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/minimatch.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// test that the glob you're writing matches the request's url\n\n// returns true\nCypress.minimatch('/users/1/comments', '/users/*/comments', {\n  matchBase: true,\n})\n\n// returns false\nCypress.minimatch('/users/1/comments/2', '/users/*/comments', {\n  matchBase: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration for Coverage\nDESCRIPTION: Babel configuration required for instrumenting code coverage in both app and spec files\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/code-coverage.mdx#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-react\"],\n  \"plugins\": [\"transform-class-properties\", \"istanbul\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Setup File in Cypress Support\nDESCRIPTION: Example showing how to reuse the application's setup.js file in the Cypress component support file to ensure consistent styling and configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/styling-components.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/* And that's it! */\nimport '../../src/setup.js'\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Conditional Logic in Cypress Tests\nDESCRIPTION: Example showing how to use Cypress.platform for conditional execution based on the operating system. Demonstrates checking for Windows platform to determine which shell command to execute.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/platform.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('has JSON files', () => {\n  // if windows do one thing, else do another\n  const cmd = Cypress.platform === 'win32' ? 'dir *.json' : 'ls *.json'\n\n  cy.exec(cmd).its('stdout').should('include', 'package.json')\n})\n```\n\n----------------------------------------\n\nTITLE: Component Testing Configuration in CircleCI\nDESCRIPTION: Basic configuration for running Cypress component tests in CircleCI using the Cypress orb.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/circleci.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\norbs:\n  cypress: cypress-io/cypress@3\nworkflows:\n  test:\n    jobs:\n      - cypress/run:\n          cypress-command: 'npx cypress run --component'\n```\n\n----------------------------------------\n\nTITLE: Blackout Specific Elements in Cypress Screenshot\nDESCRIPTION: This snippet shows how to blackout specific elements for a single screenshot in a Cypress test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/account-management/data-storage-and-masking.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('admin page loads', () => {\n  cy.visit('/admin')\n  cy.screenshot({\n    blackout: ['.user-name'],\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Working with Image Fixtures as Base64\nDESCRIPTION: Shows how image fixtures are encoded as base64 by default when loaded with cy.fixture().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/fixture.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.fixture('images/logo.png').then((logo) => {\n  // logo will be encoded as base64\n  // and should look something like this:\n  // aIJKnwxydrB10NVWqhlmmC+ZiWs7otHotSAAAOw==...\n})\n```\n\n----------------------------------------\n\nTITLE: Visiting a Local Development Server\nDESCRIPTION: Shows how to visit a local server running on a specific port, demonstrating that cy.visit() resolves when the page load event fires.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('http://localhost:8000')\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of Spread Command in Cypress\nDESCRIPTION: Illustrates the correct way to use the spread command by chaining it off the getCookies command, which yields an array-like structure.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/spread.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.getCookies().spread(() => {}) // Yield all cookies\n```\n\n----------------------------------------\n\nTITLE: Modern Async/Await Syntax Usage\nDESCRIPTION: Demonstrates using modern async/await syntax with cypress.run() for better Promise handling.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/module-api.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst cypress = require('cypress')\n\n;(async () => {\n  const results = await cypress.run()\n  // use the results object\n})()\n```\n\n----------------------------------------\n\nTITLE: Setting a Session Cookie Example\nDESCRIPTION: Complete example showing how to set a session cookie and verify it was set correctly using assertions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/setcookie.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.getCookies().should('be.empty')\ncy.setCookie('session_id', '189jd09sufh33aaiidhf99d09')\ncy.getCookie('session_id').should(\n  'have.property',\n  'value',\n  '189jd09sufh33aaiidhf99d09'\n)\n```\n\n----------------------------------------\n\nTITLE: Asserting Redirects with cy.location()\nDESCRIPTION: Demonstrates how to grab only the pathname property and assert that a redirect works correctly by checking the pathname equals the expected value.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/location.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('http://localhost:3000/admin')\ncy.location('pathname').should('eq', '/login')\n```\n\n----------------------------------------\n\nTITLE: Comparing cy.url() and cy.location('href') in JavaScript\nDESCRIPTION: Demonstrates that cy.url() is an alias for cy.location('href'), showing they yield the same string result.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/url.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.url() // these yield the same string\ncy.location('href') // these yield the same string\n```\n\n----------------------------------------\n\nTITLE: Database Seeding Example\nDESCRIPTION: Shows how to use cy.request() for database seeding before tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/request.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  cy.request('http://localhost:8080/db/seed')\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Keyboard Modifiers in Cypress Type Command\nDESCRIPTION: Demonstrates how keyboard modifiers like SHIFT affect key events in Cypress type commands. The example shows setting shiftKey property to true during keydown events.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/type.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// app code\ndocument.querySelector('input:first').addEventListener('keydown', (e) => {\n  // e.shiftKey will be true\n})\n\n// in test\ncy.get('input:first').type('{shift}a')\n```\n\n----------------------------------------\n\nTITLE: Restoring Clock with invoke()\nDESCRIPTION: Shows how to restore the clock using the invoke() command for a more concise syntax.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clock.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clock().invoke('restore')\n```\n\n----------------------------------------\n\nTITLE: Stubbing Responses in Cypress Intercept\nDESCRIPTION: Illustrates different ways to stub responses using cy.intercept(), including using strings, fixtures, and StaticResponse objects to define response bodies, status codes, and headers.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// requests to '/update' will be fulfilled\n// with a body of \"success\"\ncy.intercept('/update', 'success')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// requests to '/users.json' will be fulfilled\n// with the contents of the \"users.json\" fixture\ncy.intercept('/users.json', { fixture: 'users.json' })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst staticResponse = {\n  /* some StaticResponse properties here... */\n}\n\ncy.intercept('/projects', staticResponse)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/projects', {\n  body: [{ projectId: '1' }, { projectId: '2' }],\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/not-found', {\n  statusCode: 404,\n  body: '404 Not Found!',\n  headers: {\n    'x-not-found': 'true',\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/not-found', {\n  fixture: 'media/gif.mp4,null',\n})\n```\n\n----------------------------------------\n\nTITLE: Conditionally Wrapping Elements for Command Execution\nDESCRIPTION: Demonstrates conditionally wrapping DOM elements based on their properties to execute Cypress commands on them.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/wrap.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').then(($button) => {\n  // $button is a wrapped jQuery element\n  if ($button.someMethod() === 'something') {\n    // wrap this element so we can\n    // use cypress commands on it\n    cy.wrap($button).click()\n  } else {\n    // do something else\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating cypress.env.json for Environment Variables\nDESCRIPTION: Demonstrates how to create a cypress.env.json file to set environment variables. This method allows for different values on each machine if the file is not checked into source control.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/environment-variables.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"host\": \"veronica.dev.local\",\n  \"api_server\": \"http://localhost:8888/api/v1/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Example\nDESCRIPTION: Demonstrates the correct way to use the getAllCookies command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/getallcookies.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.getAllCookies() // Get all cookies\n```\n\n----------------------------------------\n\nTITLE: Documentation Table - Cypress Node Events API Reference\nDESCRIPTION: Markdown table documenting the available Node Events in Cypress, including after:run, after:screenshot, after:spec, before:run, before:spec, browser launch, configuration, and preprocessor APIs. Each entry includes a link to detailed documentation and brief usage description.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/table-of-contents.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| API                                                             | Usage                                                                                                                                                                                                                                                    |\n| --------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| [After Run Event](/api/node-events/after-run-api)               | The `after:run` event fires after a run is finished. When running cypress via cypress open, the event will fire when closing a project.                                                                                                                                  |\n| [After Screenshot Event](/api/node-events/after-screenshot-api) | After a screenshot is taken, you can get details about it via the `after:screenshot` plugin event.                                                                                                                                                                       |\n| [After Spec Event](/api/node-events/after-spec-api)             | The `after:spec` event fires after a spec file is run. When running cypress via cypress open, the event will fire when the browser closes.                                                                                                                               |\n| [Before Run Event](/api/node-events/before-run-api)             | The `before:run` event fires before a run starts. When running cypress via cypress open, the event will fire when opening a project.                                                                                                                                     |\n| [Before Spec Event](/api/node-events/before-spec-api)           | The `before:spec` event fires before a spec file is run. When running cypress via cypress open, the event will fire when the browser launches.                                                                                                                           |\n| [Browser Launch API](/api/node-events/browser-launch-api)       | Before Cypress launches a browser, it gives you the opportunity to modify the browser preferences, install extensions, add and remove command-line arguments, and modify other options from the [`setupNodeEvents`](/app/plugins/plugins-guide#Using-a-plugin) function. |\n| [Configuration API](/api/node-events/configuration-api)         | Cypress enables you to dynamically modify configuration values and environment variables from your Cypress configuration.                                                                                                                                                |\n| [Preprocessors API](/api/node-events/preprocessors-api)         | A preprocessor is the plugin responsible for preparing a support file or a test file for the browser. A preprocessor also typically watches the source files for changes, processes them again, and then notifies Cypress to re-run the tests.                           |\n```\n\n----------------------------------------\n\nTITLE: Instrumenting JavaScript Code for Coverage\nDESCRIPTION: This snippet demonstrates how code is instrumented to track coverage. It adds counters to track function calls and statement executions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/code-coverage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst c = (window.__coverage__ = {\n  f: [0],\n  s: [0, 0, 0],\n})\n\nc.s[0]++\nfunction add(a, b) {\n  c.f[0]++\n  c.s[1]++\n\n  return a + b\n}\nc.s[2]++\nmodule.exports = { add }\n```\n\n----------------------------------------\n\nTITLE: Comparing Trigger vs Direct Commands in Cypress\nDESCRIPTION: Example showing the difference between using trigger() for events versus using direct Cypress commands for focus and click actions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/trigger.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').trigger('focus')\ncy.get('button').focus()\n\n// ... or ...\n\ncy.get('button').trigger('click')\ncy.get('button').click()\n```\n\n----------------------------------------\n\nTITLE: Browser-specific Test Configuration\nDESCRIPTION: Example showing how to use the browser option in test configuration to target a test to run only in Firefox, which is an alternative to using Cypress.isBrowser within the test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/isbrowser.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nit('Download extension in Firefox', { browser: 'firefox' }, () => {\n  cy.get('#dl-extension').should('contain', 'Download Firefox Extension')\n})\n```\n\n----------------------------------------\n\nTITLE: Response Convenience Functions in Cypress Interception API\nDESCRIPTION: TypeScript interface showing two convenience functions available on the response object for setting delay and throttling network responses during testing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  /**\n   * Wait for 'delay' milliseconds before sending the\n   * response to the client.\n   */\n  setDelay: (delay: number) => IncomingHttpResponse\n  /**\n   * Serve the response at 'throttleKbps' kilobytes per second.\n   */\n  setThrottle: (throttleKbps: number) => IncomingHttpResponse\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Cookie Properties in Cypress Command Log\nDESCRIPTION: Example of getting a browser cookie and making assertions about its properties, as it would appear in the Cypress Command Log.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/getcookie.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.getCookie('fakeCookie1').should('have.property', 'value', '123ABC')\n```\n\n----------------------------------------\n\nTITLE: Blur Command Syntax in Cypress\nDESCRIPTION: The syntax for the blur command in Cypress, showing both the basic form and with options parameter.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/blur.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n.blur()\n.blur(options)\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to jQuery Methods with 'invoke'\nDESCRIPTION: Shows how to pass arguments to jQuery methods like 'attr' when using the '.invoke()' command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/invoke.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('img').invoke('attr', 'src').should('include', 'myLogo')\n```\n\n----------------------------------------\n\nTITLE: Basic Request Interception in Cypress\nDESCRIPTION: Shows the basic syntax for intercepting an HTTP request with a function handler that can access and modify the request.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/api', (req) => {\n  // do something with the intercepted request\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Props to a React Component in Cypress\nDESCRIPTION: Shows how to pass props to a React component when mounting it in a Cypress test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/react/examples.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nit('mounts', () => {\n  cy.mount(<Stepper initial={100} />)\n  //Stepper should have initial count of 100\n  cy.get('[data-cy=counter]').should('have.text', '100')\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Cypress.$\nDESCRIPTION: Demonstrates the proper way to use Cypress.$ to query DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/$.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.$('p')\n```\n\n----------------------------------------\n\nTITLE: HTML and JavaScript for Delayed Random Number Generation\nDESCRIPTION: An example HTML and JavaScript snippet that generates a random number after a delay, used to demonstrate Cypress retry-ability concepts.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/retry-ability.mdx#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"random-number-example\">\n  Random number: <span id=\"random-number\">🎁</span>\n</div>\n<script>\n  const el = document.getElementById('random-number')\n  setTimeout(() => {\n    el.innerText = Math.floor(Math.random() * 10 + 1)\n  }, 1500)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Cypress Utility Objects\nDESCRIPTION: Built-in utility libraries available on the Cypress object for use in tests, including lodash, jQuery, minimatch, and Promise utilities.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/bundled-libraries.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCypress._     // lodash\nCypress.$     // jQuery\nCypress.minimatch  // minimatch.js\nCypress.Blob     // Blob utils\nCypress.Buffer   // Buffer utils\nCypress.Promise  // Bluebird\n```\n\n----------------------------------------\n\nTITLE: Scrolling and Asserting Visibility with Command Logging\nDESCRIPTION: Example that scrolls a horizontal button into view and asserts it's visible, as would be displayed in the Cypress Command Log.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/scrollintoview.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#scroll-horizontal button').scrollIntoView().should('be.visible')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Commands for cy.origin() in Cypress\nDESCRIPTION: Shows how to set up and use custom commands that can be shared between primary and secondary origins in Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/origin.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// cypress/support/commands.js\nCypress.Commands.add('clickLink', (label) => {\n  cy.get('a').contains(label).click()\n})\n\n// cypress/support/e2e.js\n// makes custom commands available to all Cypress tests in this spec,\n// outside of cy.origin() callbacks\nimport './commands'\n\n// code we only want run per test, so it shouldn't be run as part of\n// the execution of cy.origin() as well\nbeforeEach(() => {\n  // ... code to run before each test ...\n})\n\n// cypress/e2e/spec.cy.js\nbefore(() => {\n  // makes custom commands available to all subsequent cy.origin('cypress.io)\n  // calls in this spec. put it in your support file to make them available to\n  // all specs\n  cy.origin('cypress.io', () => {\n    Cypress.require('../support/commands')\n  })\n})\n\nit('tests cypress.io', () => {\n  cy.origin('cypress.io', () => {\n    cy.visit('/page')\n    cy.clickLink('Click Me')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Complex Browser Filtering with Multiple Conditions\nDESCRIPTION: Example showing how to run test code only in Chrome Canary or Firefox dev channel by using an array of filter objects.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/isbrowser.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nit('test', () => {\n  // true when running in Chrome Canary\n  // and dev releases of Firefox browser\n  if (\n    Cypress.isBrowser([\n      { family: 'chromium', channel: 'canary' },\n      { family: 'firefox', channel: 'dev' },\n    ])\n  ) {\n    // test some (hypothetical) scenario\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting on Root Element in Cypress\nDESCRIPTION: Shows how to make assertions on the root element, both at the document level and within a specific element context.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/root.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.root().should('match', 'html')\n\ncy.get('.query-ul').within(() => {\n  cy.root().should('have.class', 'query-ul')\n})\n```\n\n----------------------------------------\n\nTITLE: Syntax for Test-Specific Configuration Overrides (JavaScript)\nDESCRIPTION: Outlines the syntax for applying configuration overrides directly to test suites (`describe`, `context`) or individual tests (`it`, `specify`). A configuration object is passed as the second argument to these functions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/configuration.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(name, config, fn)\ncontext(name, config, fn)\nit(name, config, fn)\nspecify(name, config, fn)\n```\n\n----------------------------------------\n\nTITLE: Enabling Electron Stack Dumping\nDESCRIPTION: Command to enable Electron stack dumping for crash analysis.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nELECTRON_ENABLE_STACK_DUMPING=1 npx cypress verify\n```\n\n----------------------------------------\n\nTITLE: Using prevAll with Navigation Elements in Cypress\nDESCRIPTION: Example showing how to find all elements before the active list item in a left navigation component.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/prevall.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.left-nav').find('li.active').prevAll()\n```\n\n----------------------------------------\n\nTITLE: Filtering Siblings with nextAll and Selector in Cypress\nDESCRIPTION: Shows how to use nextAll with a selector to filter the following siblings and keep only those matching a specific class.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/nextall.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>apples</li>\n  <li>oranges</li>\n  <li>bananas</li>\n  <li class=\"selected\">pineapples</li>\n  <li>grapes</li>\n</ul>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// yields <li>pineapples</li>\ncy.get('li').nextAll('.selected')\n```\n\n----------------------------------------\n\nTITLE: Reading JSON Files in Cypress JavaScript\nDESCRIPTION: Demonstrates reading a JSON file, which is automatically parsed into a JavaScript object, and asserting on a specific property.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/readfile.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// data.json\n\n{\n  \"name\": \"Eliza\",\n  \"email\": \"eliza@example.com\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.readFile('path/to/data.json').its('name').should('eq', 'Eliza') // true\n```\n\n----------------------------------------\n\nTITLE: Setting Screen Size for Headless Browser Runs in Cypress\nDESCRIPTION: This snippet demonstrates how to override the default screen size when running browsers in headless mode. It adjusts the window size for Chrome, sets preferences for Electron, and modifies arguments for Firefox.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/browser-launch-api.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\non('before:browser:launch', (browser, launchOptions) => {\n  if (browser.name === 'chrome' && browser.isHeadless) {\n    // fullPage screenshot size is 1400x1200 on non-retina screens\n    // and 2800x2400 on retina screens\n    launchOptions.args.push('--window-size=1400,1200')\n\n    // force screen to be non-retina (1400x1200 size)\n    launchOptions.args.push('--force-device-scale-factor=1')\n\n    // force screen to be retina (2800x2400 size)\n    // launchOptions.args.push('--force-device-scale-factor=2')\n  }\n\n  if (browser.name === 'electron' && browser.isHeadless) {\n    // fullPage screenshot size is 1400x1200\n    launchOptions.preferences.width = 1400\n    launchOptions.preferences.height = 1200\n  }\n\n  if (browser.name === 'firefox' && browser.isHeadless) {\n    // menubars take up height on the screen\n    // so fullPage screenshot size is 1400x1126\n    launchOptions.args.push('--width=1400')\n    launchOptions.args.push('--height=1200')\n  }\n\n  return launchOptions\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth0 UI Login Command with cy.origin()\nDESCRIPTION: Custom Cypress command implementation for Auth0 UI-based authentication using cy.origin() to handle cross-origin login flow.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/auth0-authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction loginViaAuth0Ui(username: string, password: string) {\n  cy.visit('/')\n\n  cy.origin(\n    Cypress.env('auth0_domain'),\n    { args: { username, password } },\n    ({ username, password }) => {\n      cy.get('input#username').type(username)\n      cy.get('input#password').type(password, { log: false })\n      cy.contains('button[value=default]', 'Continue').click()\n    }\n  )\n\n  cy.url().should('equal', 'http://localhost:3000/')\n}\n\nCypress.Commands.add('loginToAuth0', (username: string, password: string) => {\n  const log = Cypress.log({\n    displayName: 'AUTH0 LOGIN',\n    message: [`🔐 Authenticating | ${username}`],\n    autoEnd: false,\n  })\n  log.snapshot('before')\n\n  loginViaAuth0Ui(username, password)\n\n  log.snapshot('after')\n  log.end()\n})\n```\n\n----------------------------------------\n\nTITLE: Properly Updating Response Data Without Fixtures\nDESCRIPTION: Shows the correct approach to dynamically update response data by using object references instead of relying on fixture file updates.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/fixture.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ RESPOND WITH OBJECT\ncy.fixture('todo.json').then((todo) => {\n  cy.intercept('GET', '/todos/1', { body: todo }).as('todo')\n  // application requests the /todos/1 resource\n  // the intercept replies with the initial object\n\n  cy.wait('@todo').then(() => {\n    // modify the response object\n    todo.title = 'New data'\n    // and override the intercept\n    cy.intercept('GET', '/todos/1', { body: todo })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Right-clicking a Menu Element in Cypress\nDESCRIPTION: Basic example of right-clicking a menu element using the .rightclick() command without arguments.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/rightclick.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#open-menu').rightclick()\n```\n\n----------------------------------------\n\nTITLE: Chai 4 Breaking Change: Include Strict Equality\nDESCRIPTION: This example shows that 'include' now uses strict equality by default in Chai 4, whereas it previously used deep equality. To maintain the previous behavior, you need to use 'deep.include'.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_104\n\nLANGUAGE: javascript\nCODE:\n```\n// Would pass in Cypress 3 but will fail correctly in 4\ncy.wrap([\n  {\n    first: 'Jane',\n    last: 'Lane',\n  },\n]).should('include', {\n  first: 'Jane',\n  last: 'Lane',\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Specifically check for deep.include to pass in Cypress 4\ncy.wrap([\n  {\n    first: 'Jane',\n    last: 'Lane',\n  },\n]).should('deep.include', {\n  first: 'Jane',\n  last: 'Lane',\n})\n```\n\n----------------------------------------\n\nTITLE: Button Element Preference Example in Cypress\nDESCRIPTION: Demonstrates how Cypress favors <button> elements over deeper elements like spans when using .contains()\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/contains.mdx#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <button>\n    <i class=\"fa fa-search\"></i>\n    <span>Search</span>\n  </button>\n</form>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// yields <button>\ncy.contains('Search').children('i').should('have.class', 'fa-search')\n```\n\n----------------------------------------\n\nTITLE: Multiple Alias Wait Example\nDESCRIPTION: Shows how to wait for multiple aliased requests using an array and handle their responses.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/wait.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/users/*').as('getUsers')\ncy.intercept('/activities/*').as('getActivities')\ncy.intercept('/comments/*').as('getComments')\n\ncy.wait(['@getUsers', '@getActivities', '@getComments']).then(\n  (interceptions) => {\n    // interceptions will now be an array of matching requests\n    // interceptions[0] <-- getUsers\n    // interceptions[1] <-- getActivities\n    // interceptions[2] <-- getComments\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Forcing Type Command in Cypress\nDESCRIPTION: Shows how to force the .type() command to execute regardless of the element's actionable state using the force option.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/type.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input[type=text]').type('Test all the things', { force: true })\n```\n\n----------------------------------------\n\nTITLE: Using end() to Reset Command Chain in Cypress\nDESCRIPTION: Example showing how to use end() to reset a command chain and start a new query from the document root.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/end.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.contains('User: Cheryl')\n  .click()\n  .end() // yield null\n  .contains('User: Charles')\n  .click() // contains looks for content in document now\n```\n\n----------------------------------------\n\nTITLE: Creating and Manually Replacing a Function with a Stub\nDESCRIPTION: Demonstrates how to create a stub and manually replace a function with it, then verify it was called during execution.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/stub.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// assume App.start calls util.addListeners\nutil.addListeners = cy.stub()\n\nApp.start()\nexpect(util.addListeners).to.be.called\n```\n\n----------------------------------------\n\nTITLE: Setting Different Viewport Sizes for Desktop and Mobile Tests\nDESCRIPTION: Shows how to organize tests by screen resolution using context blocks, with separate configurations for desktop and mobile viewports.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/viewport.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Nav Menus', () => {\n  context('720p resolution', () => {\n    beforeEach(() => {\n      // run these tests as if in a desktop\n      // browser with a 720p monitor\n      cy.viewport(1280, 720)\n    })\n\n    it('displays full header', () => {\n      cy.get('nav .desktop-menu').should('be.visible')\n      cy.get('nav .mobile-menu').should('not.be.visible')\n    })\n  })\n\n  context('iphone-5 resolution', () => {\n    beforeEach(() => {\n      // run these tests as if in a mobile browser\n      // and ensure our responsive UI is correct\n      cy.viewport('iphone-5')\n    })\n\n    it('displays mobile menu on click', () => {\n      cy.get('nav .desktop-menu').should('not.be.visible')\n      cy.get('nav .mobile-menu')\n        .should('be.visible')\n        .find('i.hamburger')\n        .click()\n\n      cy.get('ul.slideout-menu').should('be.visible')\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: ScrollTo Correct Usage Examples\nDESCRIPTION: Shows correct ways to use the scrollTo command with window and element scrolling.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/scrollto.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.scrollTo(0, 500) // Scroll the window 500px down\ncy.get('.sidebar').scrollTo('bottom') // Scroll 'sidebar' to its bottom\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of .focus() in Cypress\nDESCRIPTION: Demonstrates the proper way to use the focus command by chaining it off a command that yields DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/focus.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input').first().focus() // Focus on the first input\n```\n\n----------------------------------------\n\nTITLE: Checking Cookie Existence in Cypress\nDESCRIPTION: Example of checking if a cookie exists without comparing its properties.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/getcookie.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.getCookie('my-session-cookie').should('exist')\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Active Directory Credentials in Cypress Environment\nDESCRIPTION: JSON configuration for storing Azure Active Directory credentials in the cypress.env.json file. This setup allows tests to access user credentials securely.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/azure-active-directory-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aad_username\": \"AAD_USERNAME\",\n  \"aad_password\": \"AAD_PASSWORD\",\n  \"aad_name\": \"AAD_NAME\"\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving Subject with Undefined Return\nDESCRIPTION: Example showing how returning undefined from a .then() callback preserves the original subject for continued chaining.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/then.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('form')\n  .then(($form) => {\n    console.log('form is:', $form)\n    // undefined is returned here, but $form will be\n    // yielded to allow for continued chaining\n  })\n  .find('input')\n  .then(($input) => {\n    // we have our $input element here since\n    // our form element was yielded and we called\n    // .find('input') on it\n  })\n```\n\n----------------------------------------\n\nTITLE: Loading Fixture Files Without Extension\nDESCRIPTION: Shows how Cypress resolves fixtures when no file extension is provided, following a specific resolution order.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/fixture.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.fixture('admin').as('adminJSON')\n```\n\n----------------------------------------\n\nTITLE: Making Assertions About Location Properties\nDESCRIPTION: Demonstrates how to make assertions on all properties of the location object after visiting a URL, verifying values like hash, host, hostname, and more.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/location.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('http://localhost:8000/app/index.html?q=dan#/users/123/edit')\n\ncy.location().should((loc) => {\n  expect(loc.hash).to.eq('#/users/123/edit')\n  expect(loc.host).to.eq('localhost:8000')\n  expect(loc.hostname).to.eq('localhost')\n  expect(loc.href).to.eq(\n    'http://localhost:8000/app/index.html?q=dan#/users/123/edit'\n  )\n  expect(loc.origin).to.eq('http://localhost:8000')\n  expect(loc.pathname).to.eq('/app/index.html')\n  expect(loc.port).to.eq('8000')\n  expect(loc.protocol).to.eq('http:')\n  expect(loc.search).to.eq('?q=dan')\n  expect(loc.toString()).to.eq(\n    'http://localhost:8000/app/index.html?q=brian#/users/123/edit'\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding baseUrl with Full URL in JavaScript\nDESCRIPTION: Shows how to visit a different host by providing a fully qualified URL when baseUrl is configured.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('https://example.cypress.io')\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests with Specific Browser via CLI\nDESCRIPTION: Command line example showing how to run Cypress tests in Chrome browser using the --browser flag.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cross-browser-testing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --browser chrome\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cypress Configuration Using TypeScript\nDESCRIPTION: Example TypeScript configuration for Cypress with defaultCommandTimeout set to 10000ms.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/config.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  defaultCommandTimeout: 10000,\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Welcome Wizard Display with URL Parameters in Cypress\nDESCRIPTION: These snippets show how to control whether a welcome wizard is displayed by using URL query parameters.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/conditional-testing.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// dont show the wizard\ncy.visit('https://example.cypress.io?wizard=0')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// show the wizard\ncy.visit('https://example.cypress.io?wizard=1')\n```\n\n----------------------------------------\n\nTITLE: Request with Alias Example\nDESCRIPTION: Shows how to alias and later reference a request.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/request.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncy.request('https://jsonplaceholder.cypress.io/comments').as('comments')\n\ncy.get('@comments').should((response) => {\n  expect(response.body).to.have.length(500)\n  expect(response).to.have.property('headers')\n  expect(response).to.have.property('duration')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Reporter with Options in Cypress Config (JavaScript)\nDESCRIPTION: Sets up the JUnit reporter with custom options to output to both console and XML file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/reporters.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  reporter: 'junit',\n  reporterOptions: {\n    mochaFile: 'results/my-test-output.xml',\n    toConsole: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Chrome Browser in Cypress\nDESCRIPTION: Command to run Cypress tests using Chrome browser\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/launching-browsers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --browser chrome\n```\n\n----------------------------------------\n\nTITLE: Syntax for find Command in Cypress\nDESCRIPTION: Shows the basic syntax for using the find command in Cypress, including an option to pass additional options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/find.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.find(selector)\n.find(selector, options)\n```\n\n----------------------------------------\n\nTITLE: Submit Form with ID Selector in Cypress\nDESCRIPTION: Shows how to submit a form using an ID selector.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/submit.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#contact').submit()\n```\n\n----------------------------------------\n\nTITLE: Request with BaseUrl Example\nDESCRIPTION: Shows how Cypress uses baseUrl for requests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/request.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.request('seed/admin') // URL is http://localhost:1234/seed/admin\n```\n\n----------------------------------------\n\nTITLE: Waiting for App Readiness in Cypress Tests\nDESCRIPTION: Example of how Cypress can wait for the application to be ready before starting tests by checking for a property set on the window object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/window.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// spec.cy.js\nbeforeEach(() => {\n  cy.visit('/')\n  cy.window().should('have.property', 'appReady', true)\n})\n```\n\n----------------------------------------\n\nTITLE: Mounting an Angular Component with cy.mount()\nDESCRIPTION: Demonstrates the basic usage of cy.mount() to render an Angular component for testing. The example imports the StepperComponent and mounts it within a test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/examples.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StepperComponent } from './stepper.component'\n\nit('mounts', () => {\n  cy.mount(StepperComponent)\n})\n```\n\n----------------------------------------\n\nTITLE: AWS CodeBuild Configuration with Cypress Docker Image\nDESCRIPTION: A buildspec.yml configuration that uses the batch build-list strategy to specify a Cypress Docker image from Amazon ECR Public Gallery. This example uses the cypress/browsers image to run tests in Firefox browser with recording enabled.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/aws-codebuild.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 0.2\n\n## AWS CodeBuild Batch configuration\n## https://docs.aws.amazon.com/codebuild/latest/userguide/batch-build-buildspec.html\n\n## Define build to run using the\n## \"cypress/browsers:22.12.0\" image\n## from the Cypress Amazon ECR Public Gallery\nbatch:\n  fast-fail: false\n  build-list:\n    - identifier: cypress-e2e-tests\n      env:\n        image: public.ecr.aws/cypress-io/cypress/browsers:22.12.0\n\nphases:\n  install:\n    runtime-versions:\n      nodejs: latest\n    commands:\n      # Set COMMIT_INFO variables to send Git specifics to Cypress Cloud when recording\n      # https://docs.cypress.io/app/continuous-integration/overview#Git-information\n      - export COMMIT_INFO_BRANCH=\"$(git rev-parse HEAD | xargs git name-rev |\n        cut -d' ' -f2 | sed 's/remotes\\/origin\\///g')\"\n      - export COMMIT_INFO_MESSAGE=\"$(git log -1 --pretty=%B)\"\n      - export COMMIT_INFO_EMAIL=\"$(git log -1 --pretty=%ae)\"\n      - export COMMIT_INFO_AUTHOR=\"$(git log -1 --pretty=%an)\"\n      - export COMMIT_INFO_SHA=\"$(git log -1 --pretty=%H)\"\n      - export COMMIT_INFO_REMOTE=\"$(git config --get remote.origin.url)\"\n      - npm ci\n  pre_build:\n    commands:\n      - npm run cy:verify\n      - npm run cy:info\n  build:\n    commands:\n      - npm run start:ci &\n      - npx cypress run --record --browser firefox\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Browser (Brave) to Cypress Configuration\nDESCRIPTION: Shows how to add a custom browser (Brave) to the list of available browsers in Cypress. Includes browser detection and version parsing functionality.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/launching-browsers.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport execa from 'execa'\nconst findBrowser = () => {\n  // the path is hard-coded for simplicity\n  const browserPath =\n    '/Applications/Brave Browser.app/Contents/MacOS/Brave Browser'\n\n  return execa(browserPath, ['--version']).then((result) => {\n    // STDOUT will be like \"Brave Browser 77.0.69.135\"\n    const [, version] = /Brave Browser (\\d+\\.\\d+\\.\\d+\\.\\d+)/.exec(result.stdout)\n    const majorVersion = parseInt(version.split('.')[0])\n\n    return {\n      name: 'Brave',\n      channel: 'stable',\n      family: 'chromium',\n      displayName: 'Brave',\n      version,\n      path: browserPath,\n      majorVersion,\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Checking DOM Element Length\nDESCRIPTION: Example of getting the length property of DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/its.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('ul li') // this yields us a jquery object\n  .its('length') // calls 'length' property returning that value\n  .should('be.gt', 2) // ensure the length is greater than 2\n```\n\n----------------------------------------\n\nTITLE: Reloading a Page in Cypress Example\nDESCRIPTION: Example showing how to reload a page during a test, similar to a user clicking the refresh button.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/reload.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('http://localhost:3000/admin')\ncy.get('#undo-btn').click().should('not.be.visible')\ncy.reload()\ncy.get('#undo-btn').click().should('not.be.visible')\n```\n\n----------------------------------------\n\nTITLE: Clear Session Data with Disabled Test Isolation\nDESCRIPTION: Example demonstrating how to clear session data in a test suite where testIsolation is disabled, using a before() hook.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/session.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Dashboard', { testIsolation: false }, () => {\n  before(() => {\n    // ensure clean test slate for these tests\n    cy.then(Cypress.session.clearCurrentSessionData)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Callback Function with Subject Yielding in Cypress\nDESCRIPTION: Demonstrates how callback functions with .and() always yield the previous command's value regardless of the callback's return value.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/and.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button')\n  .should('be.active')\n  .and(($button) => {\n    expect({ foo: 'bar' }).to.deep.eq({ foo: 'bar' })\n\n    return { foo: 'bar' } // return is ignored, .and() yields <button>\n  })\n  .then(($button) => {\n    // do anything we want with <button>\n  })\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for cy.exec() in Cypress\nDESCRIPTION: Shows how to specify environment variables for the command being executed using the env option.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/exec.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncy.exec('echo $USERNAME', { env: { USERNAME: 'johndoe' } })\n  .its('stdout')\n  .should('contain', 'johndoe')\n```\n\n----------------------------------------\n\nTITLE: Forcing Click in Cypress Regardless of Element State\nDESCRIPTION: Demonstrates how to force a click on an element, bypassing actionability checks in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/click.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.close').as('closeBtn')\ncy.get('@closeBtn').click({ force: true })\n```\n\n----------------------------------------\n\nTITLE: Get Parents with Specific Selector\nDESCRIPTION: Example showing how to filter parents by a specific selector, returning only parent elements that match the given class.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/parents.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// yields [.main-nav]\ncy.get('li.active').parents('.main-nav')\n```\n\n----------------------------------------\n\nTITLE: Yielding Original Array Example\nDESCRIPTION: Demonstrates how .each() always yields the original array regardless of callback return value.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/each.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('li')\n  .should('have.length', 3)\n  .each(($li, index, $lis) => {\n    return 'something else'\n  })\n  .then(($lis) => {\n    expect($lis).to.have.length(3) // true\n  })\n```\n\n----------------------------------------\n\nTITLE: Expanding Cookies Array with Spread Command in Cypress\nDESCRIPTION: Demonstrates how to use the spread command to expand an array of cookies returned by getCookies into individual arguments in the callback function.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/spread.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.getCookies().spread((cookie1, cookie2, cookie3) => {\n  // each cookie is now an individual argument\n})\n```\n\n----------------------------------------\n\nTITLE: Test Run Grouping Configuration\nDESCRIPTION: Example demonstrating how to group multiple Cypress test runs under a single run in Cypress Cloud for better Branch Review functionality\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/features/branch-review.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{\\\"cypress run\\\": \\\"Multiple cypress run calls can be labeled and associated to a single run\\\"}\n```\n\n----------------------------------------\n\nTITLE: Programmatic Auth0 Authentication Test\nDESCRIPTION: Test case demonstrating the usage of programmatic Auth0 authentication API.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/auth0-authentication.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\ndescribe('Auth0', function () {\n  beforeEach(function () {\n    cy.task('db:seed')\n    cy.loginByAuth0Api(\n      Cypress.env('auth0_username'),\n      Cypress.env('auth0_password')\n    )\n  })\n\n  it('shows onboarding', function () {\n    cy.contains('Get Started').should('be.visible')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirects with req.redirect() in Cypress\nDESCRIPTION: Shows how to respond to a request with a redirect to a new location, including specifying a custom status code.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// respond to this request with a redirect to a new 'location'\ncy.intercept('GET', '/users', (req) => {\n  // statusCode defaults to `302`\n  req.redirect('/customers', 301)\n})\n```\n\n----------------------------------------\n\nTITLE: Ignoring Return Values from 'should' Callbacks in Cypress\nDESCRIPTION: Shows that any value returned from a 'should' callback is ignored, and the original subject is yielded to the next command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('p')\n  .should(($p) => {\n    expect($p).to.have.length(3)\n\n    return 'foo'\n  })\n  .then(($p) => {\n    // the argument $p will be the 3 elements, not \"foo\"\n  })\n```\n\n----------------------------------------\n\nTITLE: Migrating Selenium Assertion to Cypress\nDESCRIPTION: Illustrates how to convert a Selenium assertion for element visibility to Cypress syntax.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/selenium-to-cypress.mdx#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nassert driver.find_element(By.ID, \"myButton\").is_displayed()\n```\n\n----------------------------------------\n\nTITLE: Expanding Aliased Routes with Spread Command in Cypress\nDESCRIPTION: Shows how to use the spread command to expand an array of aliased routes into individual arguments in the callback function.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/spread.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/users/*').as('getUsers')\ncy.intercept('/activities/*').as('getActivities')\ncy.intercept('/comments/*').as('getComments')\ncy.wait(['@getUsers', '@getActivities', '@getComments']).spread(\n  (getUsers, getActivities, getComments) => {\n    // each interception is now an individual argument\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Changing Subject by Returning a Value\nDESCRIPTION: Example showing how to explicitly change the subject by returning a value from a nested .then() callback.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/then.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.wrap(1)\n  .then((num) => {\n    cy.wrap(num)\n      .should('equal', 1) // true\n      .then(() => {\n        return 2\n      })\n  })\n  .should('equal', 2) // true\n```\n\n----------------------------------------\n\nTITLE: Force Right-clicking with Relative Coordinates\nDESCRIPTION: Example of forcing a right-click at specific relative coordinates, combining coordinate arguments with force option.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/rightclick.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#open-menu').rightclick(5, 60, { force: true })\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Cypress\nDESCRIPTION: TSConfig setup to enable TypeScript support and intelligent code completion for Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/IDE-integration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"allowJs\": true,\n    \"types\": [\"cypress\"]\n  },\n  \"include\": [\"**/*.*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Execution Context Between cy.origin() Calls in Cypress\nDESCRIPTION: Illustrates how to share code and maintain execution context between successive cy.origin() calls for the same origin.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/origin.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nbefore(() => {\n  cy.origin('cypress.io', () => {\n    // makes commands defined in this file available to all callbacks\n    // for cypress.io\n    Cypress.require('../support/commands')\n  })\n})\n\nit('uses cy.origin() + custom command', () => {\n  cy.origin('cypress.io', () => {\n    cy.visit('/page')\n    cy.clickLink('Click Me')\n  })\n})\n\nit('also uses cy.origin() + custom command', () => {\n  cy.origin('cypress.io', () => {\n    cy.visit('/page')\n    cy.clickLink('Click Me')\n  })\n\n  cy.origin('cypress-dx.com', () => {\n    // WARNING: cy.clickLink() will not be available because it is a\n    // different origin\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Force Right-clicking Regardless of Actionability\nDESCRIPTION: Example of forcing a right-click to override the actionable checks that Cypress normally performs.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/rightclick.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#open-menu').rightclick({ force: true })\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Commands for Session Storage Manipulation\nDESCRIPTION: Defines commands to get and set sessionStorage values, providing a convenient way to interact with browser session storage during tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add('getSessionStorage', (key) => {\n  cy.window().then((window) => window.sessionStorage.getItem(key))\n})\n\nCypress.Commands.add('setSessionStorage', (key, value) => {\n  cy.window().then((window) => {\n    window.sessionStorage.setItem(key, value)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Logging Browser Information Example\nDESCRIPTION: Shows how to log browser information to console, demonstrating all available properties of the browser object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/browser.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('log browser info', () => {\n  console.log(Cypress.browser)\n  // {\n  //   channel: 'stable',\n  //   displayName: 'Chrome',\n  //   family: 'chromium',\n  //   isChosen: true,\n  //   majorVersion: 80,\n  //   name: 'chrome',\n  //   path: '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',\n  //   version: '80.0.3987.87',\n  //   isHeaded: true,\n  //   isHeadless: false\n  // }\n})\n```\n\n----------------------------------------\n\nTITLE: Reading Campaign Information from Cookies in Cypress\nDESCRIPTION: This snippet shows how to retrieve campaign information from a session cookie and use it to determine which tests to run.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/conditional-testing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('https://example.cypress.io')\ncy.getCookie('campaign').then((campaign) => {\n  return campaigns.test(campaign)\n})\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests Grouped by Customer Feature Context\nDESCRIPTION: Command to run Cypress tests for customer-facing features, using the record flag and a specific group label with path pattern, targeting only customer-specific test specs.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/features/smart-orchestration/parallelization.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --record --group package/customer --spec 'cypress/e2e/packages/customer/**/*'\n```\n\n----------------------------------------\n\nTITLE: Debug Cached Session Data\nDESCRIPTION: Example showing how to debug cached session data for a specific session ID using getSession().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/session.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nit('debug session', () => {\n    cy.session('id', () => {\n        ...\n    })\n    .then(async () => {\n        const sessionData = await Cypress.session.getSession('id')\n        cy.debug()\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Getting the Focused Element in Cypress\nDESCRIPTION: Example of getting the element that is currently focused and accessing it in a callback function.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/focused.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.focused().then(($el) => {\n  // do something with $el\n})\n```\n\n----------------------------------------\n\nTITLE: Selecting Radio Button by Value in Cypress\nDESCRIPTION: Example of selecting a radio button with a specific value, includes HTML context.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/check.mdx#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <input type=\"radio\" id=\"ca-country\" value=\"CA\" />\n  <label for=\"ca-country\">Canada</label>\n  <input type=\"radio\" id=\"us-country\" value=\"US\" />\n  <label for=\"us-country\">United States</label>\n</form>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[type=\"radio\"]').check('US')\n```\n\n----------------------------------------\n\nTITLE: Running Cypress via Command Line\nDESCRIPTION: Shows how to execute the Cypress test script from terminal.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/module-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnode e2e-run-tests.js\n```\n\n----------------------------------------\n\nTITLE: Customizing Page Load Timeout\nDESCRIPTION: Illustrates how to override the default pageLoadTimeout configuration for a specific visit call.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Wait 30 seconds for page 'load' event\ncy.visit('/index.html', { timeout: 30000 })\n```\n\n----------------------------------------\n\nTITLE: Modifying Screenshot Path with TypeScript in Cypress\nDESCRIPTION: Example demonstrating how to modify a screenshot's path after it's taken using the after:screenshot event. The code imports the fs module, renames the file to a new location, and returns updated path information to Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/after-screenshot-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs'\n```\n\nLANGUAGE: typescript\nCODE:\n```\non('after:screenshot', (details) => {\n  console.log(details) // print all details to terminal\n\n  const newPath = '/new/path/to/screenshot.png'\n\n  return new Promise((resolve, reject) => {\n    // fs.rename moves the file to the existing directory 'new/path/to'\n    // and renames the image to 'screenshot.png'\n    fs.rename(details.path, newPath, (err) => {\n      if (err) return reject(err)\n\n      // because we renamed and moved the image, resolve with the new path\n      // so it is accurate in the test results\n      resolve({ path: newPath })\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of cy.location() Command in Cypress\nDESCRIPTION: Demonstrates the syntax variations for using the cy.location() command, including retrieving the full location object or specific properties.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/location.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.location()\ncy.location(key)\ncy.location(options)\ncy.location(key, options)\n```\n\n----------------------------------------\n\nTITLE: Checking Focus State with isFocused in JavaScript\nDESCRIPTION: Shows how to determine if an element currently has focus using Cypress.dom.isFocused. Returns a boolean value.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/dom.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').then(($el) => {\n  Cypress.dom.isFocused($el)\n})\n```\n\n----------------------------------------\n\nTITLE: Subject Change with Certain Chainers in Cypress\nDESCRIPTION: Demonstrates how some chainers like 'have.css' can change the yielded subject for subsequent commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('nav') // yields <nav>\n  .should('be.visible') // yields <nav>\n  .should('have.css', 'font-family') // yields 'sans-serif'\n  .and('match', /serif/) // yields 'sans-serif'\n```\n\n----------------------------------------\n\nTITLE: Component Counter Display Implementation\nDESCRIPTION: Implementation of the counter display span element with data-cy attribute for testing purposes across different frameworks.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/get-started.mdx#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<span data-cy=\"counter\">{count}</span>\n```\n\nLANGUAGE: html\nCODE:\n```\n<span data-cy=\"counter\">{{ count }}</span>\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Component Mounting with TypeScript\nDESCRIPTION: Shows how to mount a basic Vue component using cy.mount() command with TypeScript.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/vue/examples.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Stepper } from './Stepper.vue'\n\nit('mounts', () => {\n  cy.mount(Stepper)\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying Element Count with .should() in Cypress (JavaScript)\nDESCRIPTION: This example shows how to assert that a nav element should have exactly 8 children using the .should() command with the 'have.length' assertion.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.left-nav>.nav').children().should('have.length', 8)\n```\n\n----------------------------------------\n\nTITLE: Double-clicking Specific Coordinates on an Element in Cypress\nDESCRIPTION: Shows how to double-click specific coordinates relative to the top-left corner of an element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/dblclick.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').dblclick(30, 10)\n```\n\n----------------------------------------\n\nTITLE: Testing Vue Default Slots\nDESCRIPTION: Shows how to test Vue components with default slots using both standard and JSX syntax.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/vue/examples.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport DefaultSlot from './DefaultSlot.vue'\n\ndescribe('<DefaultSlot />', () => {\n  it('renders', () => {\n    cy.mount(DefaultSlot, {\n      slots: {\n        default: 'Hello there!',\n      },\n    })\n    cy.get('div.content').should('have.text', 'Hello there!')\n  })\n})\n```\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <div class=\"content\">\n      <slot />\n    </div>\n  </div>\n</template>\n\n<script setup></script>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Cypress Commands\nDESCRIPTION: This snippet demonstrates the incorrect way of assigning Cypress command results to variables, which won't work as expected due to the asynchronous nature of Cypress commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/variables-and-aliases.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// this won't work the way you think it does\nconst button = cy.get('button')\nconst form = cy.get('form')\n\nbutton.click()\n```\n\n----------------------------------------\n\nTITLE: Launching Edge Browsers in Cypress\nDESCRIPTION: Commands to run Cypress tests using Microsoft Edge and its variants (Beta, Canary, Dev)\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/launching-browsers.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --browser edge\n```\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --browser edge:beta\n```\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --browser edge:canary\n```\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --browser edge:dev\n```\n\n----------------------------------------\n\nTITLE: Intercepting Exact URLs with cy.intercept in JavaScript\nDESCRIPTION: Demonstrates using `cy.intercept` in Cypress to intercept network requests that precisely match the specified URL string. This method is restrictive and won't match variations in host or protocol, as shown in the comments.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_40\n\nLANGUAGE: js\nCODE:\n```\n// match any request that exactly matches the URL\ncy.intercept('https://prod.cypress.io/users')\n// matches this: https://prod.cypress.io/users\n// ...but not this: https://staging.cypress.io/users\n// ...or this: http://localhost/users\n```\n\n----------------------------------------\n\nTITLE: Logging Cypress location Object to Console\nDESCRIPTION: Demonstrates how to log the special Cypress location object to the console for debugging purposes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/location.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.location().then((loc) => {\n  console.log(loc)\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress.minimatch Syntax in JavaScript\nDESCRIPTION: Defines the syntax for using Cypress.minimatch with a target string, pattern string, and optional minimatch options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/minimatch.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.minimatch(target: string, pattern: string, options?: MinimatchOptions);\n```\n\n----------------------------------------\n\nTITLE: Label Element Preference Example in Cypress\nDESCRIPTION: Illustrates how Cypress favors <label> elements over spans when using .contains() in form inputs\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/contains.mdx#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <label>\n    <span>Name:</span>\n    <input name=\"name\" />\n  </label>\n  <label>\n    <span>Age:</span>\n    <input name=\"age\" />\n  </label>\n</form>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// yields label\ncy.contains('Age').find('input').type('29')\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Subdomains Dynamically in Cypress (JavaScript)\nDESCRIPTION: This snippet illustrates how to run the same Cypress test suite against multiple URLs or subdomains. It defines an array of URLs and uses `forEach` to iterate through them, creating a separate test case (`it`) for each URL that visits the page and asserts the presence and source of a logo.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nconst urls = ['https://docs.cypress.io', 'https://www.cypress.io']\n\ndescribe('Logo', () => {\n  urls.forEach((url) => {\n    it(`Should display logo on ${url}`, () => {\n      cy.visit(url)\n      cy.get('#logo img').should('have.attr', 'src').and('include', 'logo')\n    })\n  })\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Authentication Headers\nDESCRIPTION: Demonstrates two methods to provide basic authentication credentials when visiting a site that requires authentication.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('https://example.cypress.io/', {\n  auth: {\n    username: 'wile',\n    password: 'coyote',\n  },\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// this is the same thing as providing the auth object\ncy.visit('https://wile:coyote@example.cypress.io')\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax of Cypress .parents() Command\nDESCRIPTION: Shows the different syntax options for the .parents() command, which can be called without arguments, with a selector, with options, or with both selector and options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/parents.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.parents()\n.parents(selector)\n.parents(options)\n.parents(selector, options)\n```\n\n----------------------------------------\n\nTITLE: Working with Functions and Properties\nDESCRIPTION: Examples of accessing function properties and using factory patterns.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/its.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst fn = () => {\n  return 42\n}\n\ncy.wrap({ getNum: fn }).its('getNum').should('be.a', 'function')\n```\n\n----------------------------------------\n\nTITLE: Listing Package.json Contents with cy.exec() in Cypress\nDESCRIPTION: Demonstrates how to use cy.exec() to list the contents of the package.json file, handling platform-specific commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/exec.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nif (Cypress.platform === 'win32') {\n  cy.exec('type package.json').its('stderr').should('be.empty')\n} else {\n  cy.exec('cat package.json').its('stderr').should('be.empty')\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Testing with Mount in Cypress 11\nDESCRIPTION: Example showing how to test a React counter component using Cypress mount command and assertions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useCounter } from './useCounter'\n\nit('increments the count', () => {\n  function Counter() {\n    const { count, increment } = useCounter()\n    return (\n      <>\n        <h1 name=\"count\">Count is {{ count }}</h1>\n        <button onClick={increment}>Increment</button>\n      </>\n    )\n  }\n\n  cy.mount(<Counter />).then(() => {\n    cy.get('[name=\"count\"]')\n      .should('contain', 0)\n      .get('button')\n      .click()\n      .get('[name=\"count\"]')\n      .should('contain', 1)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Google Authentication Test Example\nDESCRIPTION: Example test case demonstrating Google authentication flow using the custom command\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/google-authentication.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\ndescribe('Google', function () {\n  beforeEach(function () {\n    cy.task('db:seed')\n    cy.loginByGoogleApi()\n  })\n\n  it('shows onboarding', function () {\n    cy.contains('Get Started').should('be.visible')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: React Component Testing Example in JavaScript\nDESCRIPTION: A Cypress component test for a React LoginForm component that mounts the component and verifies a password input has the correct type. This demonstrates component testing structure using the mount command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/open-mode.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('should have password input of type password', () => {\n  mount(<LoginForm />)\n  cy.contains('Password').find('input').should('have.attr', 'type', 'password')\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Element has Attribute in Cypress\nDESCRIPTION: Shows how to use 'have.attr' to assert that an element has a specific attribute, utilizing chai-jquery assertions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// have.attr comes from chai-jquery\ncy.get('#header a').should('have.attr', 'href')\n```\n\n----------------------------------------\n\nTITLE: Command Log Example in Cypress\nDESCRIPTION: Shows how to use .contains() with get() command to find elements containing specific text\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/contains.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('h1').contains('New User')\n```\n\n----------------------------------------\n\nTITLE: Correctly Ending Chains After Actions in Cypress\nDESCRIPTION: A demonstration of the correct way to structure Cypress commands, separating actions and assertions to avoid issues with asynchronous rendering.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/retry-ability.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.new-todo').type('todo A{enter}')\ncy.get('.new-todo').type('todo B{enter}')\ncy.get('.new-todo').should('have.class', 'active')\n```\n\n----------------------------------------\n\nTITLE: Request with Redirect Control\nDESCRIPTION: Shows how to test redirection behavior by disabling auto-redirect.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/request.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncy.request({\n  url: '/dashboard',\n  followRedirect: false, // turn off following redirects\n}).then((resp) => {\n  // redirect status code is 302\n  expect(resp.status).to.eq(302)\n  expect(resp.redirectedToUrl).to.eq('http://localhost:8082/unauthorized')\n})\n```\n\n----------------------------------------\n\nTITLE: Selecting and Manipulating DOM Elements with Cypress.$\nDESCRIPTION: Shows how to select DOM elements with Cypress.$ and then manipulate them using cy commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/$.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst $li = Cypress.$('ul li:first')\n\ncy.wrap($li)\n  .should('not.have.class', 'active')\n  .click()\n  .should('have.class', 'active')\n```\n\n----------------------------------------\n\nTITLE: Using Variables with Mutable Objects in Cypress\nDESCRIPTION: This example shows how to use variables when dealing with mutable objects in Cypress tests, specifically for comparing previous and current states.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/variables-and-aliases.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button>increment</button>\n\nyou clicked button <span data-testid=\"num\">0</span> times\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// app code\nlet count = 0\n\n$('button').on('click', () => {\n  $('[data-testid=\"num\"]').text((count += 1))\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// cypress test code\ncy.get('[data-testid=\"num\"]').then(($span) => {\n  // capture what num is right now\n  const num1 = parseFloat($span.text())\n\n  cy.get('button')\n    .click()\n    .then(() => {\n      // now capture it again\n      const num2 = parseFloat($span.text())\n\n      // make sure it's what we expected\n      expect(num2).to.eq(num1 + 1)\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing Built-in Window Methods in Cypress Tests\nDESCRIPTION: Demonstrates how to replace built-in window methods like prompt in both end-to-end tests and component tests, with proper timing considerations.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/stub.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('http://localhost:3000', {\n  onBeforeLoad(win) {\n    // Stub your functions here\n    cy.stub(win, 'prompt').returns('my custom message')\n  },\n})\n\nApp.start()\n\ncy.window().its('prompt').should('be.called')\ncy.get('.name').should('have.value', 'my custom message')\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Cypress .rightclick() Command\nDESCRIPTION: Examples of correctly using the .rightclick() command by chaining it off commands that yield DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/rightclick.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.menu').rightclick() // Right click on .menu\ncy.focused().rightclick() // Right click on el with focus\ncy.contains('Today').rightclick() // Right click on first el containing 'Today'\n```\n\n----------------------------------------\n\nTITLE: Asserting Class Presence after Button Click in Cypress\nDESCRIPTION: Demonstrates how to make an assertion that verifies a button has a specific class after being clicked. This example showcases Cypress's automatic retry-ability that waits for the assertion to become true.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').click()\ncy.get('button').should('have.class', 'active')\n```\n\n----------------------------------------\n\nTITLE: Loading Image Fixtures as Buffer\nDESCRIPTION: Demonstrates how to change the encoding to load an image fixture as a buffer instead of base64.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/fixture.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.fixture('images/logo.png', null).then((logo) => {\n  // logo will be read as a buffer\n  // and should look something like this:\n  // Buffer([0, 0, ...])\n  expect(Cypress.Buffer.isBuffer(logo)).to.be.true\n})\n```\n\n----------------------------------------\n\nTITLE: Resetting Task Timeout Using Cypress.config()\nDESCRIPTION: Demonstrates how to change the global taskTimeout setting for all subsequent cy.task() calls using Cypress.config().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/task.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.config('taskTimeout', 30000)\nCypress.config('taskTimeout') // => 30000\n```\n\n----------------------------------------\n\nTITLE: Visiting Non-Angular Pages in Cypress (JavaScript)\nDESCRIPTION: This Cypress snippet shows that visiting a non-Angular page requires no special configuration. `cy.visit()` works directly regardless of the underlying framework of the target page.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nit('visit a non-Angular page', () => {\n  cy.visit('/about')\n})\n```\n\n----------------------------------------\n\nTITLE: Programmatic Okta API Login Implementation\nDESCRIPTION: Custom command for programmatic Okta authentication using the Okta Authentication API and Auth SDK.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/okta-authentication.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { OktaAuth } from '@okta/okta-auth-js'\n\nCypress.Commands.add('loginByOktaApi', (username, password) => {\n  cy.request({\n    method: 'POST',\n    url: `https://${Cypress.env('okta_domain')}/api/v1/authn`,\n    body: {\n      username,\n      password,\n    },\n  }).then(({ body }) => {\n    const user = body._embedded.user\n    const config = {\n      issuer: `https://${Cypress.env('okta_domain')}/oauth2/default`,\n      clientId: Cypress.env('okta_client_id'),\n      redirectUri: 'http://localhost:3000/implicit/callback',\n      scopes: ['openid', 'email', 'profile'],\n    }\n\n    const authClient = new OktaAuth(config)\n\n    return authClient.token\n      .getWithoutPrompt({ sessionToken: body.sessionToken })\n      .then(({ tokens }) => {\n        const userItem = {\n          token: tokens.accessToken.value,\n          user: {\n            sub: user.id,\n            email: user.profile.login,\n            given_name: user.profile.firstName,\n            family_name: user.profile.lastName,\n            preferred_username: user.profile.login,\n          },\n        }\n\n        window.localStorage.setItem('oktaCypress', JSON.stringify(userItem))\n\n        log.snapshot('after')\n        log.end()\n      })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Cypress.isCy Function in JavaScript\nDESCRIPTION: Examples demonstrating how to use Cypress.isCy() to check various types of objects, showing both true and false return values depending on whether the object is a cy instance or chainable.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/iscy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.isCy(cy) // true\n\nconst chainer = cy.wrap().then(() => {\n  Cypress.isCy(chainer) // true\n})\n\nCypress.isCy(undefined) // false\n\nCypress.isCy(() => {}) // false\n```\n\n----------------------------------------\n\nTITLE: Merging Query Parameters with Existing URL Parameters in JavaScript\nDESCRIPTION: Shows how to merge new query parameters with existing ones already present in the URL string.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// visits https://example.cypress.io/users?page=1&admin=true\ncy.visit('https://example.cypress.io/users?page=1', {\n  qs: { admin: true },\n})\n```\n\n----------------------------------------\n\nTITLE: Quick Page Content Test\nDESCRIPTION: Example of testing page content without full page load.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/request.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.request('/admin').its('body').should('include', '<h1>Admin</h1>')\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of find Command in Cypress\nDESCRIPTION: Demonstrates the correct way to use the find command, chaining it off a previous command that yields DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/find.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.article').find('footer') // Yield 'footer' within '.article'\n```\n\n----------------------------------------\n\nTITLE: Verifying Cookies After Login in Cypress\nDESCRIPTION: Example of getting and asserting cookies after a login action in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/getcookies.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// assume we just logged in\ncy.contains('Login').click()\ncy.url().should('include', 'profile')\ncy.getCookies()\n  .should('have.length', 1)\n  .then((cookies) => {\n    expect(cookies[0]).to.have.property('name', 'session_id')\n  })\n```\n\n----------------------------------------\n\nTITLE: Screenshot Command Syntax Options in Cypress\nDESCRIPTION: Shows different ways to call the screenshot command in Cypress, either as a chained command or directly from the cy object. The command can be called without parameters or with filename and options parameters.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/screenshot.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.screenshot()\n.screenshot(fileName)\n.screenshot(options)\n.screenshot(fileName, options)\n\n// ---or---\n\ncy.screenshot()\ncy.screenshot(fileName)\ncy.screenshot(options)\ncy.screenshot(fileName, options)\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples\nDESCRIPTION: Shows proper usage of the wait command for both time delays and aliased routes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/wait.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.wait(500)\ncy.wait('@getProfile')\n```\n\n----------------------------------------\n\nTITLE: Supporting Unique File Download MIME Types in Cypress for Firefox\nDESCRIPTION: This snippet shows how to add support for custom MIME types when testing file downloads in Firefox. It modifies the browser preferences to prevent download prompts for the specified MIME type.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/browser-launch-api.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\non('before:browser:launch', (browser, options) => {\n  // only Firefox requires all mime types to be listed\n  if (browser.family === 'firefox') {\n    const existingMimeTypes =\n      options.preferences['browser.helperApps.neverAsk.saveToDisk']\n    const myMimeType = 'my/mimetype'\n\n    // prevents the browser download prompt\n    options.preferences['browser.helperApps.neverAsk.saveToDisk'] =\n      `${existingMimeTypes},${myMimeType}`\n\n    return options\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Query Parameters with cy.visit() in JavaScript\nDESCRIPTION: Demonstrates how to add query parameters to a URL using the qs option in cy.visit(). The parameters are passed as an object and merged into the URL.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// visits http://localhost:3500/users?page=1&role=admin\ncy.visit('http://localhost:3500/users', {\n  qs: {\n    page: '1',\n    role: 'admin',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Running Cypress with Custom Binary Location on Mac\nDESCRIPTION: This snippet shows how to run Cypress using a custom binary location on macOS by setting the CYPRESS_RUN_BINARY environment variable.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/advanced-installation.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nCYPRESS_RUN_BINARY=~/Downloads/Cypress.app/Contents/MacOS/Cypress npx cypress run\n```\n\n----------------------------------------\n\nTITLE: Example Yield Format from getAllSessionStorage in Cypress\nDESCRIPTION: Illustrates the structure of the object returned by the getAllSessionStorage command, with origins as keys and their respective sessionStorage values.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/getallsessionstorage.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  'https://example.cypress.io': {\n    key1: 'value1',\n  },\n  'https://www.cypress-dx.com': {\n    key2: 'value2',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Request Continuation in Cypress Intercept\nDESCRIPTION: Example of modifying a POST request before sending it to the upstream server using req.continue().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('POST', '/submitStory', (req) => {\n  req.body.storyName = 'some name'\n  // send the modified request and skip any other\n  // matching request handlers\n  req.continue()\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Svelte Component Instance in Cypress\nDESCRIPTION: Shows how to access the mounted Svelte component instance directly in tests using .then() on the cy.mount() command result.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/svelte/examples.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.mount(Stepper).then(({ component }) => {\n  //component is the rendered instance of Stepper\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Props to Svelte Component in Cypress Test\nDESCRIPTION: Shows how to pass props to a Svelte component during testing using the props option in cy.mount(). In this example, a count prop is passed with value 100.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/svelte/examples.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nit('mounts', () => {\n  cy.mount(Stepper, { props: { count: 100 } })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring React Dev Server in Cypress 10+ (JavaScript)\nDESCRIPTION: Updated configuration for React dev server in Cypress 10+ using JavaScript. The configuration now uses defineConfig with simplified framework and bundler settings.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nconst { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  component: {\n    devServer: {\n      framework: 'react', // or vue\n      bundler: 'webpack',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Error Handling with cypress.run() in JavaScript\nDESCRIPTION: Example showing how to handle different types of errors that can occur when using cypress.run(), including test failures, startup failures, and execution errors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/module-api.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// e2e-run-tests.js\nconst cypress = require('cypress')\n\ncypress.run({...})\n.then(result => {\n  if (result.failures) {\n    console.error('Could not execute tests')\n    console.error(result.message)\n    process.exit(result.failures)\n  }\n\n  // exit with the number of failed tests as exit code\n  process.exit(result.totalFailed)\n})\n.catch(err => {\n  console.error(err.message)\n  process.exit(1)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Clock and Ticking for Command Log\nDESCRIPTION: Simple example showing the clock and tick commands that will appear in the Cypress command log.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clock.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clock()\ncy.tick(1000)\n```\n\n----------------------------------------\n\nTITLE: Logging window.location vs cy.location() in Console\nDESCRIPTION: Shows how to log the native window.location object and the Cypress location object to the console to demonstrate their differences.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/location.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.window().then((win) => {\n  console.log(win.location)\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Browser Extensions to Cypress Browser Instance\nDESCRIPTION: Example showing how to add unpacked browser extensions to the browser that Cypress launches. Note that extensions cannot be loaded in headless Chrome.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/browser-launch-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\non('before:browser:launch', (browser, launchOptions) => {\n  // supply the absolute path to an unpacked extension's folder\n  // NOTE: extensions cannot be loaded in headless Chrome\n  launchOptions.extensions.push('Users/jane/path/to/extension')\n\n  return launchOptions\n})\n```\n\n----------------------------------------\n\nTITLE: Basic readFile Syntax in Cypress JavaScript\nDESCRIPTION: Shows the different syntax patterns for the cy.readFile() command, including options for specifying encoding and additional options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/readfile.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.readFile(filePath)\ncy.readFile(filePath, encoding)\ncy.readFile(filePath, options)\ncy.readFile(filePath, encoding, options)\n```\n\n----------------------------------------\n\nTITLE: Double-clicking a Specific Position on an Element in Cypress\nDESCRIPTION: Demonstrates how to double-click a specific position (bottom center) of a button element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/dblclick.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').dblclick('bottom')\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Elements\nDESCRIPTION: Example of accessing array elements using .its()\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/its.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.wrap(['Wai Yan', 'Yu']).its(1).should('eq', 'Yu') // true\n```\n\n----------------------------------------\n\nTITLE: Conditional Execution Based on CPU Architecture in Cypress (JavaScript)\nDESCRIPTION: Demonstrates how to use Cypress.arch in a conditional statement to execute different commands based on the CPU architecture.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/arch.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('does something differently', () => {\n  if (Cypress.arch === 'x64') {\n    cy.exec('something')\n  } else {\n    cy.exec('something else')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Unit Test for Selector Coverage\nDESCRIPTION: Unit test example showing how to test edge cases not covered by E2E tests\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/code-coverage.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// cypress/e2e/selectors.cy.js\nimport { getVisibleTodos } from '../../src/selectors'\n\ndescribe('getVisibleTodos', () => {\n  it('throws an error for unknown visibility filter', () => {\n    expect(() => {\n      getVisibleTodos({\n        todos: [],\n        visibilityFilter: 'unknown-filter',\n      })\n    }).to.throw()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax of .and() Command in Cypress\nDESCRIPTION: Shows the different syntax options for using the .and() command in Cypress to create assertions that are automatically retried until they pass or time out.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/and.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.and(chainers)\n.and(chainers, value)\n.and(chainers, method, value)\n.and(callbackFn)\n```\n\n----------------------------------------\n\nTITLE: Checking DOM Object Type with isDom in JavaScript\nDESCRIPTION: Demonstrates how to check if an object is a DOM object using Cypress.dom.isDom. Returns true for DOM objects.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/dom.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('body').then(($el) => {\n  Cypress.dom.isDom($el) // true\n})\n```\n\n----------------------------------------\n\nTITLE: Setting the uncaught:exception Event Handler in Cypress\nDESCRIPTION: This code example shows how to disable the default behavior where Cypress fails tests on uncaught exceptions. Reference to the Catalog of Events documentation for more detailed examples.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/error-messages.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nuncaught:exception\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for .not() Command in Cypress\nDESCRIPTION: Shows the basic syntax for using the .not() command in Cypress to filter DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/not.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.not(selector)\n.not(selector, options)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Variables in cy.origin() Callback in Cypress\nDESCRIPTION: Demonstrates incorrect usage of variables inside cy.origin() callback, which will result in a ReferenceError.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/origin.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = 1\ncy.origin('cypress.io', () => {\n  cy.visit('/')\n  // This line will throw a ReferenceError because\n  // `foo` is not defined in the scope of the callback\n  cy.get('input').type(foo)\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Nested Fixtures in Cypress\nDESCRIPTION: Shows how to reference fixtures nested in subfolders within the fixtures directory.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/fixture.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.fixture('users/admin.json') // Get data from {fixturesFolder}/users/admin.json\n```\n\n----------------------------------------\n\nTITLE: Importing JSON Fixtures Using ES Modules\nDESCRIPTION: Demonstrates how to use the import statement to load JSON fixtures via the bundler instead of cy.fixture().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/fixture.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// cypress/e2e/spec.cy.js\nimport user from '../fixtures/user.json'\nit('loads the same object', () => {\n  cy.fixture('user').then((userFixture) => {\n    expect(user, 'the same data').to.deep.equal(userFixture)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Cookie Setting and Verification\nDESCRIPTION: Example demonstrating setting a test cookie and verifying its value with assertions for command log documentation.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/setcookie.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.getCookies().should('be.empty')\ncy.setCookie('fakeCookie1', '123ABC')\ncy.getCookie('fakeCookie1').should('have.property', 'value', '123ABC')\n```\n\n----------------------------------------\n\nTITLE: Reading Files with Specific Encoding in Cypress JavaScript\nDESCRIPTION: Demonstrates reading a PNG file with base64 encoding to work with binary data.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/readfile.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.readFile('path/to/logo.png', 'base64').then((logo) => {\n  // logo will be encoded as base64\n  // and should look something like this:\n  // aIJKnwxydrB10NVWqhlmmC+ZiWs7otHotSAAAOw==...\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Element by ID in Cypress\nDESCRIPTION: Example of checking a specific element using its ID.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/check.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#saveUserName').check()\n```\n\n----------------------------------------\n\nTITLE: Working with Numbers in .then() Callback\nDESCRIPTION: Example demonstrating how numeric values are passed through the .then() command with assertions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/then.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.wrap(1)\n  .then((num) => {\n    cy.wrap(num).should('equal', 1) // true\n  })\n  .should('equal', 1) // true\n```\n\n----------------------------------------\n\nTITLE: Filtering Siblings by Selector in Cypress\nDESCRIPTION: Example showing how to filter siblings to get only those matching a specific selector class.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/siblings.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// yields <li class=\"active\">Services</li>\ncy.get('li').siblings('.active')\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of parent Command in Cypress\nDESCRIPTION: Demonstrates the proper way to use the parent command by chaining it after a command that yields DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/parent.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('header').parent() // Yield parent el of `header`\n```\n\n----------------------------------------\n\nTITLE: Using baseUrl Prefix with cy.visit() in JavaScript\nDESCRIPTION: Demonstrates how cy.visit() automatically prefixes the URL with the baseUrl when it has been configured.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('dashboard') // Visits http://localhost:3000/#/dashboard\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Test Configuration\nDESCRIPTION: Shows how to set environment variables for specific suites or tests using the test configuration. This method allows for changing environment variables dynamically within the test suite.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/environment-variables.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe(\n  'test against Spanish content',\n  {\n    env: {\n      language: 'es',\n    },\n  },\n  () => {\n    it('displays Spanish', () => {\n      cy.visit(`https://docs.cypress.io/${Cypress.env('language')}/`)\n      cy.contains('¿Por qué Cypress?')\n    })\n  }\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nit(\n  'smoke test develop api',\n  {\n    env: {\n      api: 'https://dev.myapi.com',\n    },\n  },\n  () => {\n    cy.request(Cypress.env('api')).its('status').should('eq', 200)\n  }\n)\n\nit(\n  'smoke test staging api',\n  {\n    env: {\n      api: 'https://staging.myapi.com',\n    },\n  },\n  () => {\n    cy.request(Cypress.env('api')).its('status').should('eq', 200)\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Updating React Test Harness Import for Cypress 14.0\nDESCRIPTION: Demonstrates the required change in importing the React test harness in Cypress 14.0, which now uses cypress/react instead of cypress/react18.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mount } from `cypress/react`\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Credentials in Cypress Config\nDESCRIPTION: Configuration setup for Auth0 environment variables in Cypress, including dotenv integration and environment variable mapping.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/auth0-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Populate process.env with values from .env file\nrequire('dotenv').config()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  env: {\n    auth0_username: process.env.AUTH0_USERNAME,\n    auth0_password: process.env.AUTH0_PASSWORD,\n    auth0_domain: process.env.REACT_APP_AUTH0_DOMAIN,\n    auth0_audience: process.env.REACT_APP_AUTH0_AUDIENCE,\n    auth0_scope: process.env.REACT_APP_AUTH0_SCOPE,\n    auth0_client_id: process.env.REACT_APP_AUTH0_CLIENTID,\n    auth0_client_secret: process.env.AUTH0_CLIENT_SECRET,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: GitLab CI Install Job for Parallelization\nDESCRIPTION: Defines an install job that caches dependencies for use in parallel test execution jobs. This setup is crucial for efficient parallelization.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/gitlab-ci.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  - build\n\n## Set environment variables for folders in \"cache\" job settings\n## for npm modules and Cypress binary\nvariables:\n  npm_config_cache: '$CI_PROJECT_DIR/.npm'\n  CYPRESS_CACHE_FOLDER: '$CI_PROJECT_DIR/cache/Cypress'\n\ncache:\n  key: ${CI_COMMIT_REF_SLUG}\n  paths:\n    - cache/Cypress\n    - node_modules\n    - build\n\n## Install npm dependencies and Cypress\ninstall:\n  image: cypress/browsers:22.12.0\n  stage: build\n  script:\n    - npm ci\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom DevServer for Component Testing\nDESCRIPTION: Example of providing a custom devServer function for advanced component testing setups in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/configuration.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  component: {\n    devServer(cypressConfig) {\n      // return dev server instance or a promise that resolves to\n      // a dev server instance here\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Wait for Specific Request Example\nDESCRIPTION: Demonstrates waiting for a specific aliased request and accessing its interception details.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/wait.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/accounts/*').as('getAccount')\ncy.wait('@getAccount').then((interception) => {\n  // we can now access the low level interception\n  // that contains the request body,\n  // response body, status, etc\n})\n```\n\n----------------------------------------\n\nTITLE: Unchecking Checkboxes with Cypress\nDESCRIPTION: Demonstrates various ways to use the uncheck command in Cypress, including unchecking all checkboxes, specific checkboxes by ID or value, and multiple checkboxes at once.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/uncheck.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.uncheck()\n.uncheck(value)\n.uncheck(values)\n.uncheck(options)\n.uncheck(value, options)\n.uncheck(values, options)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[type=\"checkbox\"]').uncheck() // Unchecks checkbox element\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.uncheck('[type=\"checkbox\"]') // Errors, cannot be chained off 'cy'\ncy.get('p:first').uncheck() // Errors, '.get()' does not yield checkbox\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get(':checkbox').uncheck()\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#saveUserName').uncheck()\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input[type=\"checkbox\"]').uncheck(['ga'])\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[type=\"checkbox\"]').uncheck(['ga', 'ca'])\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[data-js=\"choose-all\"]')\n  .click()\n  .find('input[type=\"checkbox\"]')\n  .first()\n  .uncheck()\n```\n\n----------------------------------------\n\nTITLE: Handling cy.exec() Result in Cypress\nDESCRIPTION: Demonstrates how to work with the result object yielded by cy.exec(), which includes code, stdout, and stderr properties.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/exec.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.exec('npm run build').then((result) => {\n  // yields the 'result' object\n  // {\n  //   code: 0,\n  //   stdout: \"Files successfully built\",\n  //   stderr: \"\"\n  // }\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Specific Time Functions\nDESCRIPTION: Example of how to selectively override only specific time-related functions with cy.clock().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clock.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clock(null, ['setTimeout', 'clearTimeout'])\n```\n\n----------------------------------------\n\nTITLE: Correct Title Command Usage\nDESCRIPTION: Example showing the correct way to use the title command to yield the document's title as a string.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/title.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.title() // Yields the documents title as a string\n```\n\n----------------------------------------\n\nTITLE: Specifying Encoding as String Parameter\nDESCRIPTION: Example of writing a file with a specific encoding provided as a string parameter.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/writefile.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.writeFile('path/to/ascii.txt', 'Hello World', 'ascii'))\n```\n\n----------------------------------------\n\nTITLE: Syntax for Cypress .click() Command\nDESCRIPTION: Shows various ways to call the .click() command with different arguments and options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/click.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.click()\n.click(options)\n.click(position)\n.click(position, options)\n.click(x, y)\n.click(x, y, options)\n```\n\n----------------------------------------\n\nTITLE: Clearing localStorage Using RegExp Pattern in Cypress\nDESCRIPTION: Example showing how to clear localStorage keys that match a regular expression pattern in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clearlocalstorage.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clearLocalStorage(/app-/)\n```\n\n----------------------------------------\n\nTITLE: Passing Props to Vue Component\nDESCRIPTION: Demonstrates how to pass props to a Vue component during mounting.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/vue/examples.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.mount(Stepper, {\n  props: {\n    initial: 100,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress Plugins with setupNodeEvents\nDESCRIPTION: Example of using setupNodeEvents function to configure Cypress plugins. This function receives 'on' and 'config' arguments and can be used to register event listeners and modify configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// configure plugins here\n```\n\n----------------------------------------\n\nTITLE: Deleting Recorded Video When No Tests Retried\nDESCRIPTION: TypeScript example demonstrating how to delete the recorded video for specs that had no retry attempts, optimizing storage and reducing upload time to Cypress Cloud.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/after-spec-api.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\non(\n  'after:spec',\n  (spec: Cypress.Spec, results: CypressCommandLine.RunResult) => {\n    if (results && results.video) {\n      // Do we have failures for any retry attempts?\n      const failures = results.tests.some((test) =>\n        test.attempts.some((attempt) => attempt.state === 'failed')\n      )\n      if (!failures) {\n        // delete the video if the spec passed and no tests retried\n        fs.unlinkSync(results.video)\n      }\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Browser-Specific Test Execution\nDESCRIPTION: Examples of running specific tests in Chrome and Firefox browsers using programmatic control.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/module-api.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst cypress = require('cypress')\n\ncypress.run({\n  spec: './cypress/e2e/**/chrome-test*.js',\n  browser: 'chrome',\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst cypress = require('cypress')\n\ncypress.run({\n  spec: './cypress/e2e/**/firefox-test*.js',\n  browser: 'firefox',\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Example of cy.log\nDESCRIPTION: Demonstrates the correct way to use cy.log() with a simple string message.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/log.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.log('created new user')\n```\n\n----------------------------------------\n\nTITLE: Setting Task Timeout in Test Configuration\nDESCRIPTION: Shows how to set the cy.task() timeout for a specific suite of tests using the test configuration object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/task.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('has data available from database', { taskTimeout: 90000 }, () => {\n  before(() => {\n    cy.task('seedDatabase')\n  })\n\n  // tests\n\n  after(() => {\n    cy.task('resetDatabase')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Fake Video for Webcam Testing in Cypress\nDESCRIPTION: This code shows how to use a custom video file for testing webcam functionality in Chromium-based browsers. It provides examples for both Mac/Linux and Windows environments.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/browser-launch-api.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\non('before:browser:launch', (browser = {}, launchOptions) => {\n  if (browser.family === 'chromium' && browser.name !== 'electron') {\n    // Mac/Linux\n    launchOptions.args.push(\n      '--use-file-for-fake-video-capture=cypress/fixtures/my-video.y4m'\n    )\n\n    // Windows\n    // launchOptions.args.push('--use-file-for-fake-video-capture=c:\\\\path\\\\to\\\\video\\\\my-video.y4m')\n  }\n\n  return launchOptions\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Body Properties\nDESCRIPTION: Examples of accessing response body properties in requests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/its.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy\n  .request(...)\n  .its('body.user')\n  .then(user => ...)\n\ncy\n  .request(...)\n  .its('body')\n  .then(({user}) => ...)\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Scripts for Code Coverage in package.json\nDESCRIPTION: Defines NPM scripts to run a Node server with code coverage instrumentation using nyc. The normal start command runs the server directly while the coverage version runs it with nyc instrumentation.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/code-coverage.mdx#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"start\": \"node server\",\n    \"start:coverage\": \"nyc --silent node server\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstall Commands\nDESCRIPTION: Package manager commands for uninstalling Cypress using npm, Yarn, or pnpm.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/advanced-installation.mdx#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nnpm uninstall cypress\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn remove cypress\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm remove cypress\n```\n\n----------------------------------------\n\nTITLE: Writing a Cypress Test for Code Coverage\nDESCRIPTION: This snippet shows a Cypress test that imports the 'add' function and tests it, demonstrating how tests execute instrumented code.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/code-coverage.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { add } = require('./add')\n\nit('adds numbers', () => {\n  expect(add(2, 3)).to.equal(5)\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Variable Usage in Cypress Commands\nDESCRIPTION: Proper implementation showing how to handle variables within .then() blocks to ensure correct execution timing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nit('test', () => {\n  let username = undefined // evaluates immediately as undefined\n\n  cy.visit('https://example.cypress.io') // Nothing happens yet\n  cy.get('.user-name') // Still, nothing happens yet\n    .then(($el) => {\n      // Nothing happens yet\n      // this line evaluates after the .then() executes\n      username = $el.text()\n\n      // evaluates after the .then() executes\n      // it's the correct value gotten from the $el.text()\n      if (username) {\n        cy.contains(username).click()\n      } else {\n        cy.get('My Profile').click()\n      }\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Writing Binary Data to a File\nDESCRIPTION: Example of reading and writing binary data as a buffer without encoding it as a string.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/writefile.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst filename = '/path/to/file.png'\n\ncy.readFile(filename, null).then((obj) => {\n  // <Buffer ef 3a bf ... >\n  cy.writeFile(filename, obj, null)\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Object Property Existence with Cypress\nDESCRIPTION: Demonstrates how Cypress's .its() command implicitly waits for a property to exist on an object before proceeding, showcasing non-DOM related assertions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// create an empty object\nconst obj = {}\n\n// set the 'foo' property after 1 second\nsetTimeout(() => {\n  obj.foo = 'bar'\n}, 1000)\n\n// .its() will wait until the 'foo' property is on the object\ncy.wrap(obj).its('foo')\n```\n\n----------------------------------------\n\nTITLE: Changing Task Timeout in Cypress\nDESCRIPTION: Shows how to change the timeout for a cy.task() command. This is useful for tasks that may take longer to execute than the default timeout.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/task.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.task('seedDatabase', null, { timeout: 20000 })\n```\n\n----------------------------------------\n\nTITLE: Writing Text to a File in Cypress\nDESCRIPTION: Example of writing a simple text string to a file and then verifying its contents using readFile.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/writefile.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.writeFile('path/to/message.txt', 'Hello World')\ncy.readFile('path/to/message.txt').then((text) => {\n  expect(text).to.equal('Hello World') // true\n})\n```\n\n----------------------------------------\n\nTITLE: Running Cypress in Open Mode with Angular CLI\nDESCRIPTION: Commands to run Cypress in open mode using Angular CLI. These commands launch Cypress in an Electron browser for interactive testing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nng e2e\n```\n\nLANGUAGE: shell\nCODE:\n```\nng run {your-project-name}:cypress-open\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Objects in Protractor and Cypress\nDESCRIPTION: This code compares the implementation of Page Objects in Protractor and Cypress. It shows how to create reusable login methods and use them in test cases for both frameworks.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// Protractor with Page Objects\nconst page = {\n  login: () => {\n    element(by.css('.username')).sendKeys('my username')\n    element(by.css('.password')).sendKeys('my password')\n    element(by.css('button')).click()\n  },\n}\n\nit('should display the username of a logged in user', () => {\n  page.login()\n  expect(by.css('.username').getText()).toEqual('my username')\n})\n\n// Cypress with Page Objects\nconst page = {\n  login: () => {\n    cy.get('.username').type('my username')\n    cy.get('.password').type('my password')\n    cy.get('button').click()\n  },\n}\n\nit('should display the username of a logged in user', () => {\n  page.login()\n  cy.get('.username').contains('my username')\n})\n```\n\n----------------------------------------\n\nTITLE: Reading, Modifying and Writing JSON Data\nDESCRIPTION: Example of reading a JSON file, modifying its content, and writing it back to the file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/writefile.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst filename = '/path/to/file.json'\n\ncy.readFile(filename).then((obj) => {\n  obj.id = '1234'\n  // write the merged object\n  cy.writeFile(filename, obj)\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for parent Command in Cypress\nDESCRIPTION: Shows the different syntax options for using the parent command in Cypress to get parent DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/parent.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.parent()\n.parent(selector)\n.parent(options)\n.parent(selector, options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser-Specific Tests in Cypress\nDESCRIPTION: Example of how to target a test to run only in specific browsers using the browser configuration option within a test. This utilizes the same arguments as Cypress.isBrowser().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/configuration.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nit('Show warning outside Chrome', { browser: '!chrome' }, () => {\n  cy.get('.browser-warning').should(\n    'contain',\n    'For optimal viewing, use Chrome browser'\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of cy.window() in Cypress\nDESCRIPTION: Demonstrates the proper way to use the cy.window() command in Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/window.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.window()\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress Spy Syntax\nDESCRIPTION: Basic syntax for using cy.spy() to wrap a method\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/spy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.spy(object, method)\n```\n\n----------------------------------------\n\nTITLE: Getting All Siblings of an Element with Cypress\nDESCRIPTION: Example showing how to get all siblings of an element with a specific class using the .siblings() command without arguments.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/siblings.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// yields all other li's in list\ncy.get('.active').siblings()\n```\n\n----------------------------------------\n\nTITLE: Pausing After Assertions in Cypress Tests\nDESCRIPTION: Example showing how to pause execution after performing assertions in a test sequence.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/pause.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('a')\n  .should('have.attr', 'href')\n  .and('match', /dashboard/)\n  .pause()\ncy.get('button').should('not.be.disabled')\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Date with Cypress Clock\nDESCRIPTION: Example showing how to set a specific date using cy.clock() for component and e2e testing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clock.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst now = new Date(2021, 3, 14) // month is 0-indexed\n\ncy.clock(now)\n-{cy.visit('/index.html')::cy.mount(<DatePicker id=\"date\" />)}-\ncy.get('#date').should('have.value', '04/14/2021')\n```\n\n----------------------------------------\n\nTITLE: Embedding Data in DOM with Cypress Conditional Testing\nDESCRIPTION: Demonstrates how to conditionally check for DOM attributes and execute commands based on their presence. Uses the data-wizard attribute to conditionally dismiss a wizard dialog.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/conditional-testing.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('html')\n  .should('have.attr', 'data-wizard')\n  .then((wizard) => {\n    if (wizard) {\n      // dismiss the wizard conditionally by enqueuing these\n      // three additional commands\n      cy.get('#wizard').contains('Close').click()\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Applying Suite-Specific Retry Configuration (JavaScript)\nDESCRIPTION: Provides an example of using suite-level configuration overrides to define different test retry attempts for `runMode` and `openMode`. The configuration object is passed as the second argument to the `describe` function.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/configuration.mdx#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\ndescribe(\n  'login',\n  {\n    retries: {\n      runMode: 3,\n      openMode: 2,\n    },\n  },\n  () => {\n    it('should redirect unauthenticated user to sign-in page', () => {\n      // ...\n    })\n\n    it('allows user to login', () => {\n      // ...\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Native DOM Element Properties in Cypress\nDESCRIPTION: Demonstrates how to access native DOM element properties like innerText in Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('div').should(($div) => {\n  // access the native DOM element\n  expect($div.get(0).innerText).to.eq('foobarbaz')\n})\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests with Custom CI Build ID for Parallelization\nDESCRIPTION: Command to run Cypress tests with parallel execution and a custom CI build ID, useful when the default environment variables don't provide enough uniqueness for your CI setup.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/features/smart-orchestration/parallelization.mdx#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --record --parallel --ci-build-id $BUILD_TAG\n```\n\n----------------------------------------\n\nTITLE: Writing Array to a Log File\nDESCRIPTION: Example of writing an array to a log file in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/writefile.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncy.writeFile('info.log', ['foo', 'bar', 'baz'])\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of readFile in Cypress JavaScript\nDESCRIPTION: Demonstrates the proper way to use the cy.readFile() command to read a JSON file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/readfile.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.readFile('menu.json')\n```\n\n----------------------------------------\n\nTITLE: Blurring an Input After Typing in Cypress\nDESCRIPTION: Example of typing in a comment input and then blurring it, demonstrating a common pattern in form testing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/blur.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[name=\"comment\"]').type('Nice Product!').blur()\n```\n\n----------------------------------------\n\nTITLE: Importing mount function for React in Cypress component testing\nDESCRIPTION: The mount function for React components is exported from the cypress/react module. This function supports standard JSX syntax for mounting React components in the actual browser during component testing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_import-mount-functions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount } from 'cypress/react'\n```\n\n----------------------------------------\n\nTITLE: Chaining Assertions with Changing Yield in Cypress\nDESCRIPTION: Example showing how to chain assertions where the subject being yielded changes from an anchor element to its href attribute value.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/and.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('a')\n  .should('contain', 'Edit User') // yields <a>\n  .and('have.attr', 'href') // yields string value of href\n  .and('match', /users/) // yields string value of href\n  .and('not.include', '#') // yields string value of href\n```\n\n----------------------------------------\n\nTITLE: Implementing cy.mount() Command for Vue\nDESCRIPTION: Example of creating a custom cy.mount() command for Vue components with additional configuration options. It includes setup for global stubs, components, and plugins.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/mount.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount } from 'cypress/vue'\n\nCypress.Commands.add('mount', (component, options = {}) => {\n  // Setup options object\n  options.global = options.global || {}\n  options.global.stubs = options.global.stubs || {}\n  options.global.stubs['transition'] = false\n  options.global.components = options.global.components || {}\n  options.global.plugins = options.global.plugins || []\n\n  /* Add any global plugins */\n  // options.global.plugins.push({\n  //   install(app) {\n  //     app.use(MyPlugin);\n  //   },\n  // });\n\n  /* Add any global components */\n  // options.global.components['Button'] = Button;\n\n  return mount(component, options)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring elementFilters to Exclude Disabled Elements in Cypress UI Coverage\nDESCRIPTION: This configuration example shows how to use the elementFilters property to exclude disabled elements from UI Coverage reports. The selector targets all elements with the disabled attribute, and the include:false setting ensures they won't appear in coverage reporting.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/elementfilters.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"elementFilters\": [\n    {\n      \"selector\": \"[disabled]\",\n      \"include\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Cypress Clock Command\nDESCRIPTION: Basic example showing the correct way to call the cy.clock() command in Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clock.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clock()\n```\n\n----------------------------------------\n\nTITLE: Handling Native Promise Rejections\nDESCRIPTION: Example of handling unhandled rejections for native promises using window event listener.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/promise.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener('unhandledrejection', (event) => {\n  throw event.reason\n})\n```\n\n----------------------------------------\n\nTITLE: Double-clicking an Anchor Link in Cypress\nDESCRIPTION: Example of double-clicking an anchor link using the dblclick command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/dblclick.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('a#nav1').dblclick() // yields the <a>\n```\n\n----------------------------------------\n\nTITLE: Finding Checked Option in Cypress\nDESCRIPTION: Example of using jQuery's :checked selector to find the currently checked option, includes HTML context.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/check.mdx#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<form id=\"pick-fruit\">\n  <input type=\"radio\" name=\"fruit\" value=\"orange\" id=\"orange\" />\n  <input type=\"radio\" name=\"fruit\" value=\"apple\" id=\"apple\" checked=\"checked\" />\n  <input type=\"radio\" name=\"fruit\" value=\"banana\" id=\"banana\" />\n</form>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#pick-fruit :checked').should('be.checked').and('have.value', 'apple')\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Cypress Tests with Chrome Browser\nDESCRIPTION: A GitHub Actions workflow configuration that specifies Chrome as the browser for running Cypress tests. This uses the pre-installed Chrome browser on the GitHub-hosted runner.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/github-actions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Cypress run\n  uses: cypress-io/github-action@v6\n  with:\n    build: npm run build\n    start: npm start\n    browser: chrome\n```\n\n----------------------------------------\n\nTITLE: Combining find() and siblings() Commands in Cypress\nDESCRIPTION: Example showing how to chain multiple Cypress commands including find() and siblings() to locate specific elements in the DOM.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/siblings.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.left-nav').find('li.active').siblings()\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Index File in Cypress\nDESCRIPTION: Configuration example showing how to specify a custom index HTML file path for component testing using the indexHtmlFile option.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/component-framework-configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  component: {\n    devServer,\n    indexHtmlFile: '/custom/path/to/component-index.html'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling WebSocket Connections in Cypress Tests\nDESCRIPTION: This code snippet demonstrates how to control WebSocket connections in Cypress tests using HTTP requests to an external server. It shows how to connect, send messages, and disconnect without needing multiple browser instances.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/trade-offs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Cypress tests\n\n// tell the http server at 8081 to connect to 8080\ncy.request('http://localhost:8081/connect?url=http://localhost:8080')\n\n// tell the http server at 8081 to send a message\ncy.request('http://localhost:8081/message?m=hello')\n\n// tell the http server at 8081 to disconnect\ncy.request('http://localhost:8081/disconnect')\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Example of clearAllCookies in Cypress\nDESCRIPTION: Demonstrates the correct way to use the clearAllCookies command in Cypress to clear all browser cookies.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clearallcookies.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clearAllCookies() // Clear all cookies\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Environment Variables\nDESCRIPTION: Example showing how to set multiple environment variables at once by passing an object to Cypress.env(). Shows how existing variables are preserved unless explicitly overridden.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/env.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.env({\n  host: 'http://server.dev.local',\n  foo: 'foo',\n})\n\nCypress.env() // => {foo: 'foo', baz: 'quux', host: 'http://server.dev.local'}\n```\n\n----------------------------------------\n\nTITLE: Handling File Close Event in Preprocessor (JavaScript)\nDESCRIPTION: Demonstrates how to handle the 'close' event emitted by the file object in a preprocessor. This is used for cleanup operations when a spec, project, or browser is closed during test execution.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/preprocessors-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst watcher = fs.watch(filePath /* ... */)\n\nfile.on('close', () => {\n  watcher.close()\n})\n```\n\n----------------------------------------\n\nTITLE: Restoring the Clock in Cypress\nDESCRIPTION: Shows two methods to restore the clock functionality, allowing the application to resume normal time behavior after manipulating it with cy.clock(). This can be done using the clock object directly or with invoke.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/stubs-spies-and-clocks.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clock()\ncy.visit('http://localhost:3333')\ncy.get('#search').type('Acme Company')\ncy.tick(1000)\n// more test code here\n\n// restore the clock\ncy.clock().then((clock) => {\n  clock.restore()\n})\n// more test code here\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clock().invoke('restore')\n```\n\n----------------------------------------\n\nTITLE: Using debug() in Cypress Tests\nDESCRIPTION: Demonstrates the basic syntax for using the debug() command in Cypress, both as a standalone command and chained to other commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/debug.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.debug()\n.debug(options)\n\n// ---or---\n\ncy.debug()\ncy.debug(options)\n```\n\n----------------------------------------\n\nTITLE: Grouping Elements by Selector in Cypress UI Coverage\nDESCRIPTION: Example configuration showing how to group elements that match a specific data-cy attribute pattern into a single group. This helps consolidate multiple similar elements with dynamic IDs.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/elementgroups.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"elementGroups\": [\n      {\n        \"selector\": \"[data-cy^='item-']\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Targeted Tests for Uncovered Elements in Cypress\nDESCRIPTION: This code demonstrates how to create a test that interacts with previously untested elements on a request trial page. It fills in an email field and clicks a submission button, which will then reveal coverage information for the thank you page.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/guides/address-coverage-gaps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Dashboard', () => {\n  it('Submits form on landing page', () => {\n    cy.visit('/request-trial')\n\n    // Interact with previously untested elements\n    cy.get('[data-cy=\"email\"]').type('test@email.com')\n    cy.contain('Request Trial').click()\n    // UI Coverage will now surface the coverage of the thank you page\n    cy.url().should('include', '/thank-you')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Yarn Package Manager Configuration in CircleCI\nDESCRIPTION: CircleCI configuration using Yarn as the package manager instead of npm for running Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/circleci.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\norbs:\n  cypress: cypress-io/cypress@3\nworkflows:\n  test:\n    jobs:\n      - cypress/run:\n          package-manager: 'yarn'\n          start-command: 'yarn start'\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of .prev() Command in Cypress\nDESCRIPTION: Demonstrates the proper way to chain the .prev() command after a DOM element selection.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/prev.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('tr.highlight').prev() // Yield previous 'tr'\n```\n\n----------------------------------------\n\nTITLE: Cypress Task Plugin Configuration\nDESCRIPTION: Plugin configuration showing implementation of a db:seed task that makes an API request to reset test data\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/best-practices.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\non('task', {\n  async 'db:seed'() {\n    // Send request to backend API to re-seed database with test data\n    const { data } = await axios.post(`${testDataApiEndpoint}/seed`)\n    return data\n  },\n  //...\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Command Types\nDESCRIPTION: TypeScript interface declaration for custom Cypress commands including JSDoc documentation\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/typescript-support.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      /**\n       * Custom command to select DOM element by data-cy attribute.\n       * @example cy.dataCy('greeting')\n       */\n      dataCy(value: string): Chainable<JQuery<HTMLElement>>\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Text Files in Cypress JavaScript\nDESCRIPTION: Shows how to read a text file and assert its contents match an expected value.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/readfile.mdx#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n// path/to/message.txt\n\nHello World\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.readFile('path/to/message.txt').should('eq', 'Hello World') // true\n```\n\n----------------------------------------\n\nTITLE: Finding Element by Index in an Unordered List\nDESCRIPTION: Example showing how to find the second element in an unordered list using the .eq() command and make an assertion on it.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/eq.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>tabby</li>\n  <li>siamese</li>\n  <li>persian</li>\n  <li>sphynx</li>\n  <li>burmese</li>\n</ul>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('li').eq(1).should('contain', 'siamese') // true\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Domain Injection for Cross-Origin Testing\nDESCRIPTION: Example of enabling the injectDocumentDomain option to assist with cross-origin testing between subdomains.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/configuration.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  e2e: {\n    injectDocumentDomain: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cypress baseUrl Configuration Using Environment Variable\nDESCRIPTION: Demonstrates how to override the baseUrl configuration value using an environment variable with the CYPRESS_ prefix. This environment variable will modify the actual configuration rather than being available in Cypress.env().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/environment-variables.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nexport CYPRESS_BASE_URL=http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Focusing on an Input Element in Cypress\nDESCRIPTION: Example showing how to focus on an input element using a CSS selector.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/focus.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[type=\"input\"]').focus()\n```\n\n----------------------------------------\n\nTITLE: Enabling Scaling for Viewport and FullPage Screenshots in Cypress\nDESCRIPTION: Turns on scaling for the application under test during viewport capture screenshots. This makes the app appear as it would during normal Cypress usage, which can be helpful for certain testing scenarios.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/screenshot-api.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Screenshot.defaults({\n  scale: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Using 'next' with Selector\nDESCRIPTION: Example of using 'next' with a selector to find the next sibling with a specific class.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/next.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>apples</li>\n  <li>oranges</li>\n  <li>bananas</li>\n  <li class=\"selected\">pineapples</li>\n</ul>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// yields <li>pineapples</li>\ncy.get('li').next('.selected')\n```\n\n----------------------------------------\n\nTITLE: Get All Parents Without a Selector\nDESCRIPTION: Example showing how to get all parents of an active list item, which yields an array of parent elements traversing up the DOM tree.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/parents.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// yields [.sub-nav, li, .main-nav]\ncy.get('li.active').parents()\n```\n\n----------------------------------------\n\nTITLE: prevUntil Example with Selectors\nDESCRIPTION: Practical example showing how to use prevUntil to find elements between two specific selectors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/prevuntil.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// yields [<li>cucumbers</li>, <li>carrots</li>, <li>corn</li>]\ncy.get('#nuts').prevUntil('#veggies')\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress.dom Method Syntax in JavaScript\nDESCRIPTION: Shows the basic syntax for calling a Cypress.dom method, using isHidden as an example. This pattern applies to all Cypress.dom methods.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/dom.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.dom.isHidden(element)\n```\n\n----------------------------------------\n\nTITLE: Title Assertion Example\nDESCRIPTION: Example showing how to assert that a document's title matches an expected value.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/title.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.title().should('eq', 'My Awesome Application')\n```\n\n----------------------------------------\n\nTITLE: Automatic Retries with readFile in Cypress JavaScript\nDESCRIPTION: Demonstrates how cy.readFile() will automatically retry reading the file until assertions pass or the command times out.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/readfile.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// if this assertion fails cy.readFile will poll the file\n// until it eventually passes its assertions (or times out)\ncy.readFile('some/nested/path/story.txt').should('eq', 'Once upon a time...')\n```\n\n----------------------------------------\n\nTITLE: Using Cypress.$ Syntax\nDESCRIPTION: Shows the different ways to use Cypress.$, including direct selector queries and other proxied jQuery methods.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/$.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.$(selector)\n\n// other proxied jQuery methods\nCypress.$.Event\nCypress.$.Deferred\nCypress.$.ajax\nCypress.$.get\nCypress.$.getJSON\nCypress.$.getScript\nCypress.$.post\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of prevUntil Command\nDESCRIPTION: Shows the correct way to use the prevUntil command to yield siblings before an element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/prevuntil.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('p').prevUntil('.intro') // Yield siblings before 'p' until '.intro'\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Dev Server in Cypress 10+ (Verbose TypeScript)\nDESCRIPTION: Verbose TypeScript configuration for webpack dev server in Cypress 10+. This uses explicit imports and the functional devServer pattern for maximum customization.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'cypress'\nimport { devServer } from '@cypress/webpack-dev-server'\nimport webpackConfig from './webpack.config'\n\nexport default defineConfig({\n  component: {\n    devServer(cypressConfig) {\n      return devServer({\n        framework: 'react', // or vue\n        cypressConfig,\n        webpackConfig,\n      })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Reading and Playing MP3 Files in Cypress JavaScript\nDESCRIPTION: Demonstrates reading an MP3 file as base64, converting it to a data URI, and playing it using the Audio API.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/readfile.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.readFile('audio/sound.mp3', 'base64').then((mp3) => {\n  const uri = 'data:audio/mp3;base64,' + mp3\n  const audio = new Audio(uri)\n\n  audio.play()\n})\n```\n\n----------------------------------------\n\nTITLE: Invoking jQuery 'attr' Method and Asserting Results\nDESCRIPTION: Shows how to use '.invoke()' to call jQuery's 'attr' method and assert the element's attribute value, along with a more concise alternative using Chai-jQuery assertions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/invoke.mdx#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"code-snippet\">The code example</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.contains('The code example')\n  .invoke('attr', 'id')\n  .should('equal', 'code-snippet')\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.contains('The code example').should('have.attr', 'id', 'code-snippet')\n```\n\n----------------------------------------\n\nTITLE: QA Environment Configuration\nDESCRIPTION: JSON configuration file for QA environment with baseUrl and environment variables.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/configuration-api.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"baseUrl\": \"https://qa.acme.com\",\n  \"env\": {\n    \"something\": \"qa\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for Cypress.isBrowser API\nDESCRIPTION: Shows the different syntax options for using the Cypress.isBrowser method to check the current browser against a matcher, array of matchers, or a filter object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/isbrowser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.isBrowser(matcher)\nCypress.isBrowser(matchers)\nCypress.isBrowser(filter)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Text Checking in Cypress\nDESCRIPTION: Shows how to conditionally test based on text content in the DOM, with the caveat that this only works with synchronously rendered content.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/conditional-testing.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('body').then(($body) => {\n    // synchronously ask for the body's text\n    // and do something based on whether it includes\n    // another string\n    if ($body.text().includes('some string')) {\n      // yup found it\n      cy.get(...).should(...)\n    } else {\n      // nope not here\n      cy.get(...).should(...)\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Assert URL Hash Equals Example\nDESCRIPTION: Shows how to assert that the hash equals '#/users/1' when testing a page with URL 'http://localhost:8000/app/#/users/1'.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/hash.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// yields #/users/1\ncy.hash().should('eq', '#/users/1') // => true\n```\n\n----------------------------------------\n\nTITLE: Syntax for Check Command in Cypress\nDESCRIPTION: Shows various ways to use the check command, including with values and options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/check.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.check()\n.check(value)\n.check(values)\n.check(options)\n.check(value, options)\n.check(values, options)\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Class and Disability Assertions in Cypress\nDESCRIPTION: Shows how to chain multiple assertions on a button element to verify both its class and disability state.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/and.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').should('have.class', 'active').and('not.be.disabled')\n```\n\n----------------------------------------\n\nTITLE: Accessing Test Title Path in Cypress\nDESCRIPTION: Demonstrates how to access and verify the full title path of the current test using Cypress.currentTest.titlePath property.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/currenttest.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('app layout and responsiveness', () => {\n  it('toggles the nav', () => {\n    expect(Cypress.currentTest.titlePath).to.deep.eq([\n      'app layout and responsiveness',\n      'toggles the nav',\n    ])\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Cypress Configuration with Environment Variables (Shell)\nDESCRIPTION: Illustrates how to override Cypress configuration settings using environment variables. Environment variables must be prefixed with `CYPRESS_` and will take precedence over values in the configuration file. This example sets viewport dimensions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/configuration.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nexport CYPRESS_VIEWPORT_WIDTH=800\nexport CYPRESS_VIEWPORT_HEIGHT=600\n```\n\n----------------------------------------\n\nTITLE: Incorrect Order for Intercepting Requests in JavaScript\nDESCRIPTION: Shows a common mistake when trying to intercept requests that occur immediately after page load. This approach may not work because intercept happens after visit resolves.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// this code may not work depending on implementation\ncy.visit('http://localhost:8000/#/app')\ncy.intercept('/users/**', { fixture: 'users' })\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Log Serialization Depth in Cypress - Shell\nDESCRIPTION: This command sets both DEBUG and DEBUG_DEPTH environment variables to increase the level of detail when Cypress serializes logged objects, making deeply nested properties visible. This adjustment is helpful for debugging complex request/response objects during the test run. Requires a POSIX-compatible shell, node, npx, and the Cypress framework present in the runtime environment.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nDEBUG=cypress:server:socket-base DEBUG_DEPTH=3 npx cypress run\n\ncypress:server:socket-base backend:request { eventName: 'http:request', args:\n  [ { url: 'http://localhost:7065/echo', method: 'POST', body: { text: 'ping!' },\n  auth: { username: 'jane.lane', password: 'password123' }, json: true, encoding: 'utf8',\n  gzip: true, timeout: 30000, followRedirect: true, failOnStatusCode: true,\n  retryOnNetworkFailure: true, retryOnStatusCodeFailure: false } ] } +4ms\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of clearCookies Command in Cypress\nDESCRIPTION: Example showing the correct way to use the clearCookies command to clear cookies for the current domain.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clearcookies.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clearCookies() // Clear cookies for the currrent domain\n```\n\n----------------------------------------\n\nTITLE: Testing CPU Architecture in Cypress (JavaScript)\nDESCRIPTION: Shows how to write a test case that checks if the CPU architecture is one of the expected values (x64 or ia32) using Cypress.arch.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/arch.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('has expected CPU architecture', () => {\n  expect(Cypress.arch).to.be.oneOf(['x64', 'ia32'])\n})\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests\nDESCRIPTION: Commands to execute Cypress tests using npm or yarn.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cy:open\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn run cy:open\n```\n\n----------------------------------------\n\nTITLE: Handling and Comparing Text Values in Cypress\nDESCRIPTION: Shows how to work with text values, including converting text to numbers, holding references, and comparing values across different states.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('div').invoke('text').then(parseFloat).should('be.gt', 10)\n\ncy.get('div')\n  .invoke('text')\n  .then((text1) => {\n    // do more work here\n\n    // click the button which changes the div's text\n    cy.get('button').click()\n\n    // grab the div again and compare its previous text\n    // to the current text\n    cy.get('div')\n      .invoke('text')\n      .should((text2) => {\n        expect(text1).not.to.eq(text2)\n      })\n  })\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for cy.window() in Cypress\nDESCRIPTION: Shows the basic syntax options for using the cy.window() command to get the active window object, either without options or with an options object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/window.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.window()\ncy.window(options)\n```\n\n----------------------------------------\n\nTITLE: Disabling Cypress Command Log Rendering During Test Runs - Shell\nDESCRIPTION: Setting CYPRESS_NO_COMMAND_LOG=1 before running Cypress (in either open or run mode) disables the Command Log UI, omitting any associated DOM updates and test step displays. This is recommended in scenarios where the Command Log causes instability, slowdowns, or memory issues. Note that, with this variable, screenshots and video recordings will also omit the command log overlay. The command requires the environment to support Cypress, as well as shell access to set variables.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nCYPRESS_NO_COMMAND_LOG=1 cypress run\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Retries Per Test\nDESCRIPTION: Shows how to configure test retries for individual tests with different modes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\nit(\n  'allows user to login',\n  {\n    retries: {\n      runMode: 2,\n      openMode: 3,\n    },\n  },\n  () => {\n    // ...\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Cypress .parents() Command\nDESCRIPTION: Demonstrates the correct way to use the .parents() command by chaining it off a command that yields DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/parents.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('aside').parents() // Yield parents of aside\n```\n\n----------------------------------------\n\nTITLE: Finding Element at Fourth Position in Navigation\nDESCRIPTION: Example showing how to find the fourth list item in a navigation menu using chained commands with .eq().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/eq.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.left-nav.nav').find('>li').eq(3)\n```\n\n----------------------------------------\n\nTITLE: Syntax for Cypress.isCy Function in JavaScript\nDESCRIPTION: The basic syntax for the Cypress.isCy() function which takes an object as an argument and returns a boolean value indicating whether the object is a valid Cypress chainable.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/iscy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.isCy(obj)\n```\n\n----------------------------------------\n\nTITLE: Controlling Cypress Debug Log Output within Browser via localStorage - JavaScript\nDESCRIPTION: This JavaScript snippet, intended for execution in the browser's Developer Tools console during cypress open, sets or deletes the localStorage.debug property to enable or disable in-browser Cypress debug messages. When enabled, console logs appear from Cypress packages matching the debug string. No dependencies are required beyond Cypress running in open mode; the mechanism leverages browser localStorage and requires manual reloading for changes to take effect.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlocalStorage.debug = 'cypress*'\n\n// to disable debug messages\ndelete localStorage.debug\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of closest()\nDESCRIPTION: Demonstrates the correct way to use the closest() command to find elements with a specific class.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/closest.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('td').closest('.filled') // Yield closest el with class '.filled'\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Source Maps for Cypress\nDESCRIPTION: Configuration settings for the tsconfig.json file to enable source maps in TypeScript. The sourceMap option should be set to true, while inlineSourceMap is not recommended as it doesn't provide accurate code frames.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_source-maps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sourceMap\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Raw HTML Elements in .then()\nDESCRIPTION: Example showing how raw HTML elements are automatically wrapped with jQuery when returned from a .then() callback.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/then.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('div')\n  .then(($div) => {\n    return $div[0] // type => HTMLDivElement\n  })\n  .then(($div) => {\n    $div // type => JQuery<HTMLDivElement>\n  })\n```\n\n----------------------------------------\n\nTITLE: Using createOutputSpy for Angular Event Testing\nDESCRIPTION: Demonstrates the createOutputSpy utility function, which simplifies testing event emitters by automatically creating an EventEmitter and setting up a spy on its emit method.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/examples.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createOutputSpy } from 'cypress/angular'\n\nit('clicking + fires a change event with the incremented value', () => {\n  // Arrange\n  cy.mount('<app-stepper (change)=\"change.emit($event)\"></app-stepper>', {\n    declarations: [StepperComponent],\n    componentProperties: {\n      change: createOutputSpy<boolean>('changeSpy'),\n    },\n  })\n  cy.get(incrementSelector).click()\n  cy.get('@changeSpy').should('have.been.called')\n})\n```\n\n----------------------------------------\n\nTITLE: Reading Package.json in Cypress JavaScript\nDESCRIPTION: Simple example of reading a package.json file to inspect its contents during tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/readfile.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncy.readFile('package.json')\n```\n\n----------------------------------------\n\nTITLE: Asserting on Database Seeding in Cypress\nDESCRIPTION: Shows how to execute a database seeding command and assert that it was successful based on the exit code.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/exec.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.exec('rake db:seed').its('code').should('eq', 0)\n```\n\n----------------------------------------\n\nTITLE: Using Cypress.require in cy.origin Callback\nDESCRIPTION: Demonstrates correct usage of Cypress.require within a cy.origin callback to import lodash and a local utils file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/require.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.origin('cypress.io', () => {\n  const _ = Cypress.require('lodash')\n  const utils = Cypress.require('./utils')\n\n  // ... use lodash and utils ...\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Window Properties\nDESCRIPTION: Examples of testing for property existence on window object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/its.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.window()\n  .its('globalProp')\n  .then((globalProp) => {\n    // do something now that window.globalProp exists\n  })\n\ncy.window().its('evilProp').should('not.exist')\n```\n\n----------------------------------------\n\nTITLE: Yielding Values from Origin Command\nDESCRIPTION: Examples of correct and incorrect ways to yield values from cy.origin() callbacks.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/origin.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.origin('https://example.cypress.io', () => {\n  cy.visit('/')\n  cy.get('h1') // Yields an element, which can't be serialized...\n}).contains('Kitchen Sink') // ...so this will fail\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.origin('https://example.cypress.io', () => {\n  cy.visit('/')\n  cy.get('h1').invoke('text') // Yields a string...\n}).should('equal', 'Kitchen Sink') // 👍\n```\n\n----------------------------------------\n\nTITLE: Blurring the Focused Element in Cypress\nDESCRIPTION: Example of blurring (removing focus from) the currently focused element using the blur() command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/focused.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.focused().blur()\n```\n\n----------------------------------------\n\nTITLE: Checking Location for Query Parameters and Pathname\nDESCRIPTION: Shows how to verify URL changes after a form submission by yielding the location object within a should() command and asserting on search and pathname values.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/location.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#search').type('niklas{enter}')\ncy.location().should((loc) => {\n  expect(loc.search).to.eq('?search=niklas')\n  expect(loc.pathname).to.eq('/users')\n})\n```\n\n----------------------------------------\n\nTITLE: Cypress Event: command:start\nDESCRIPTION: Event triggered when Cypress begins executing a queued command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/catalog-of-events.mdx#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nEvent: command:start\\nYields: command instance (Object)\n```\n\n----------------------------------------\n\nTITLE: Using find Command to Get List Items in Cypress\nDESCRIPTION: Demonstrates how to use the find command to get all list items within a parent element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/find.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// yields [<li class=\"first\"></li>, <li class=\"second\"></li>]\ncy.get('#parent').find('li')\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of cy.get() in Cypress\nDESCRIPTION: Demonstrates the basic syntax for using the cy.get() command to retrieve DOM elements by selector or alias.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/get.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get(selector)\ncy.get(alias)\ncy.get(selector, options)\ncy.get(alias, options)\n```\n\n----------------------------------------\n\nTITLE: Triggering Change Event on Range Input in Cypress\nDESCRIPTION: Example demonstrating how to trigger a change event on an input range element after setting its value using invoke().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/trigger.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.trigger-input-range').invoke('val', 25).trigger('change')\n```\n\n----------------------------------------\n\nTITLE: Querying Next Siblings with nextAll in Cypress\nDESCRIPTION: Demonstrates the basic usage of the nextAll command to get all following siblings of a matched element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/nextall.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.active').nextAll() // Yield all links next to `.active`\n```\n\n----------------------------------------\n\nTITLE: Pressing Tab Key with Cypress.Keyboard.Keys in JavaScript\nDESCRIPTION: Demonstrates how to use the Cypress.Keyboard.Keys constant to press the Tab key in a test, followed by an assertion to verify that focus has moved to the expected element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/keyboard-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.press(Cypress.Keyboard.Keys.TAB)\ncy.get('input.second').should('have.focus')\n```\n\n----------------------------------------\n\nTITLE: Asserting CSS Properties in Cypress\nDESCRIPTION: This snippet shows how to assert specific CSS properties using Cypress. It checks for text decoration and color on completed todo items, demonstrating functional testing of visual properties.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/visual-testing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.completed').should('have.css', 'text-decoration', 'line-through')\ncy.get('.completed').should('have.css', 'color', 'rgb(217,217,217)')\n```\n\n----------------------------------------\n\nTITLE: Testing Props in Component\nDESCRIPTION: Tests demonstrating how to pass and verify props in components across different frameworks.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/get-started.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nit('supports a \"count\" prop to set the value', () => {\n  cy.mount(<Stepper count={100} />)\n  cy.get('[data-cy=counter]').should('have.text', '100')\n})\n```\n\n----------------------------------------\n\nTITLE: Triggering mouseover event for hover simulation in Cypress\nDESCRIPTION: This snippet demonstrates how to simulate a hover effect by triggering a mouseover event on a menu item to make a popover visible.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/hover.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.menu-item').trigger('mouseover')\ncy.get('.popover').should('be.visible')\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Certificates in Cypress Configuration\nDESCRIPTION: Example showing how to configure multiple client certificates in Cypress using the clientCertificates configuration option. Demonstrates setup for both PEM and PFX certificate formats with different URL patterns.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/client-certificates.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  clientCertificates: [\n    {\n      url: 'https://a.host.com',\n      ca: ['certs/ca.pem'],\n      certs: [\n        {\n          cert: 'certs/cert.pem',\n          key: 'certs/private.key',\n          passphrase: 'certs/pem-passphrase.txt',\n        },\n      ],\n    },\n    {\n      url: 'https://b.host.com/a_base_route/**',\n      ca: [],\n      certs: [\n        {\n          pfx: '/home/tester/certs/cert.pfx',\n          passphrase: '/home/tester/certs/pfx-passphrase.txt',\n        },\n      ],\n    },\n    {\n      url: 'https://a.host.*.com/',\n      ca: [],\n      certs: [\n        {\n          pfx: 'certs/cert.pfx',\n          passphrase: 'certs/pfx-passphrase.txt',\n        },\n      ],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cypress Plugin with pnpm\nDESCRIPTION: This command installs a Cypress plugin using pnpm and saves it as a dev dependency.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/plugins/plugins-guide.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev <plugin name>\n```\n\n----------------------------------------\n\nTITLE: Example of Going Back After Visiting a URL\nDESCRIPTION: Shows a practical example of visiting a URL first and then navigating back in the browser's history.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/go.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('http://localhost:8000/folders').go('back')\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Retries in Configuration File\nDESCRIPTION: Demonstrates how to set up test retries in the Cypress configuration file with different modes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_85\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"retries\": {\n    \"runMode\": 1,\n    \"openMode\": 3\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout with .should() Command in Cypress (JavaScript)\nDESCRIPTION: This example shows how timeout options are passed down to the .should() command. The assertion will retry for the specified timeout duration (10 seconds in this case).\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input', { timeout: 10000 }).should('have.value', '10')\n// timeout here will be passed down to the '.should()'\n// and it will retry for up to 10 secs\n```\n\n----------------------------------------\n\nTITLE: Using 'next' Command in Cypress\nDESCRIPTION: Basic syntax and usage of the 'next' command in Cypress for selecting the next sibling element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/next.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.next()\n.next(selector)\n.next(options)\n.next(selector, options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Testing DevServer with React\nDESCRIPTION: Example of configuring the devServer option for component testing using Create React App with webpack bundler.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/configuration.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  component: {\n    devServer: {\n      framework: 'create-react-app',\n      bundler: 'webpack',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing After Spec Event Handler in Cypress\nDESCRIPTION: Basic syntax for implementing the after:spec event handler in Cypress. The handler receives spec details and results as parameters.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/after-spec-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\non('after:spec', (spec, results) => {\n  /* ... */\n})\n```\n\n----------------------------------------\n\nTITLE: Increasing Debug Log Verbosity in Cypress via Environment Variables - Shell\nDESCRIPTION: This shell command sets the DEBUG environment variable to enable detailed logging for the cypress:server:socket-base subsystem, then runs Cypress tests with npx. The output showcases that deeply nested objects may appear as [Object], depending on the serialization depth. Setting this variable prior to running Cypress helps in troubleshooting by surfacing internal requests and operations. It requires Node.js, Cypress, and npx to be installed in the environment.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nDEBUG=cypress:server:socket-base npx cypress run\n\ncypress:server:socket-base backend:request { eventName: 'http:request', args:\n  [ { url: 'http://localhost:7065/echo', method: 'POST', body: [Object], auth: [Object],\n  json: true, encoding: 'utf8', gzip: true, timeout: 30000, followRedirect: true,\n  failOnStatusCode: true, retryOnNetworkFailure: true,\n  retryOnStatusCodeFailure: false } ] } +5ms\n```\n\n----------------------------------------\n\nTITLE: Using Cypress.SelectorPlayground API in JavaScript\nDESCRIPTION: Basic syntax for using the Cypress.SelectorPlayground API, showing the two main methods: defaults() for configuring options and getSelector() for retrieving selectors for elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/selector-playground-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.SelectorPlayground.defaults(options)\nCypress.SelectorPlayground.getSelector($el)\n```\n\n----------------------------------------\n\nTITLE: Conditional Screenshot Based on Browser Mode\nDESCRIPTION: Demonstrates how to override the screenshot command to only take screenshots in headless mode.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/browser.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.overwrite(\n  'screenshot',\n  (originalFn, subject, name, options) => {\n    // only take screenshots in headless browser\n    if (Cypress.browser.isHeadless) {\n      // return the original screenshot function\n      return originalFn(subject, name, options)\n    }\n\n    return cy.log('No screenshot taken when headed')\n  }\n)\n\n// only takes in headless browser\ncy.screenshot()\n```\n\n----------------------------------------\n\nTITLE: Navigating Pages in Protractor (JavaScript)\nDESCRIPTION: This Protractor snippet shows how to navigate to a specific page using `browser.get()`, and how to use the browser's history forward and back functions via `browser.navigate().forward()` and `browser.navigate().back()`.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nit('visits a page', () => {\n  browser.get('/about')\n  browser.navigate().forward()\n  browser.navigate().back()\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Native DOM References in Cypress\nDESCRIPTION: Shows how to get the native DOM reference of an element found using Cypress commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').then(($el) => {\n  $el.get(0)\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of cy.location() Command\nDESCRIPTION: Shows proper usage patterns for the cy.location() command, including getting the full location object or specific properties like host and port.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/location.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.location() // Get location object\ncy.location('host') // Get the host of the location object\ncy.location('port') // Get the port of the location object\n```\n\n----------------------------------------\n\nTITLE: Excluding URLs by Hostname in Cypress Reports\nDESCRIPTION: Example configuration that excludes URLs from a specific domain (app.okta.com) from appearing in the reports. This is useful for filtering out third-party authentication or service URLs that aren't part of your application.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_viewfilters.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"viewFilters\": [\n    {\n      \"pattern\": \"https://app.okta.com/*\",\n      \"include\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Retries via CLI\nDESCRIPTION: Shows how to configure test retries using environment variables in the CLI.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_84\n\nLANGUAGE: shell\nCODE:\n```\nCYPRESS_RETRIES=2 cypress run\n```\n\n----------------------------------------\n\nTITLE: Finding All Previous Siblings Without Selectors in Cypress\nDESCRIPTION: Example showing how to find all previous siblings of an element with class 'third' in an unordered list.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/prevall.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>apples</li>\n  <li>oranges</li>\n  <li class=\"third\">bananas</li>\n  <li>pineapples</li>\n  <li>grapes</li>\n</ul>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// yields [<li>apples</li>, <li>oranges</li>]\ncy.get('.third').prevAll()\n```\n\n----------------------------------------\n\nTITLE: Cypress parentsUntil HTML Example\nDESCRIPTION: Shows HTML structure and corresponding JavaScript code for finding ancestors until a specific selector.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/parentsuntil.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"nav\">\n  <li>\n    <a href=\"#\">Clothes</a>\n    <ul class=\"menu\">\n      <li>\n        <a href=\"/shirts\">Shirts</a>\n      </li>\n      <li class=\"active\">\n        <a href=\"/pants\">Pants</a>\n      </li>\n    </ul>\n  </li>\n</ul>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// yields [ul.menu, li]\ncy.get('.active').parentsUntil('.nav')\n```\n\n----------------------------------------\n\nTITLE: Debugging Cookie Operations in Cypress\nDESCRIPTION: Example showing how to enable cookie debugging and perform cookie operations that will be logged to console.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/cookies.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Cookies.debug(true) // now Cypress will log when it alters cookies\n\ncy.clearCookie('foo')\ncy.setCookie('foo', 'bar')\n```\n\n----------------------------------------\n\nTITLE: Enabling Cypress Studio in Configuration (JavaScript)\nDESCRIPTION: Add the experimentalStudio attribute to your Cypress configuration to enable Cypress Studio.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cypress-studio.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  e2e: {\n    experimentalStudio: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Example of Cypress Filter Command\nDESCRIPTION: Demonstrates the correct way to use the filter command by chaining it off a command that yields DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/filter.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('td').filter('.users') // Yield all el's with class '.users'\n```\n\n----------------------------------------\n\nTITLE: Running Specs with Wildcard Pattern\nDESCRIPTION: Shows how to run multiple spec files using a wildcard pattern matcher.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/module-api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst cypress = require('cypress')\n\ncypress.run({\n  // the wildcard path is relative to the current working directory\n  spec: './cypress/e2e/**/api*.js',\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress Test for Home Page\nDESCRIPTION: JavaScript code for a basic Cypress test that visits the home page of the application.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/end-to-end-testing/testing-your-app.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('The Home Page', () => {\n  it('successfully loads', () => {\n    cy.visit('http://localhost:8080') // change URL to match your dev URL\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Before Spec Event Handler in Cypress Configuration\nDESCRIPTION: This snippet shows how to register a handler for the 'before:spec' event in Cypress configuration. The event receives a spec object with details about the spec file being run.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/before-spec-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\non('before:spec', (spec) => {\n  /* ... */\n})\n```\n\n----------------------------------------\n\nTITLE: Force Right-clicking at a Specific Position\nDESCRIPTION: Example of forcing a right-click at a specific position, combining position arguments with force option.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/rightclick.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#open-menu').rightclick('bottomLeft', { force: true })\n```\n\n----------------------------------------\n\nTITLE: Disabling Spy Command Log\nDESCRIPTION: Example showing how to disable logging of spy calls to the Command Log using .log(false)\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/spy.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = {\n  foo() {},\n}\nconst spy = cy.spy(obj, 'foo').log(false)\n```\n\n----------------------------------------\n\nTITLE: Debugging Cypress Commands with Closures\nDESCRIPTION: This snippet demonstrates how to use the debugger statement within closures to inspect objects yielded by Cypress commands during test execution.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/variables-and-aliases.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').then(($btn) => {\n  // inspect $btn <object>\n  debugger\n\n  cy.get('[data-testid=\"countries\"]')\n    .select('USA')\n    .then(($select) => {\n      // inspect $select <object>\n      debugger\n\n      cy.clock().then(($clock) => {\n        // inspect $clock <object>\n        debugger\n\n        $btn // is still available\n        $select // is still available too\n      })\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of end() Command in Cypress\nDESCRIPTION: Demonstrates the correct way to use end() command, chained after a previous command to yield null instead of the element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/end.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.contains('ul').end() // Yield 'null' instead of 'ul' element\n```\n\n----------------------------------------\n\nTITLE: Using Per-Test Configuration for Local Files in JavaScript\nDESCRIPTION: Demonstrates how to visit a base URL in one test and a local file in another by disabling baseUrl in the second test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nit('visits base url', () => {\n  cy.visit('/')\n  cy.contains('h1', 'Kitchen Sink')\n})\nit('visits local file', { baseUrl: null }, () => {\n  cy.visit('index.html')\n  cy.contains('local file')\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Cypress Type Reference Directive\nDESCRIPTION: Triple-slash directive to enable Cypress IntelliSense in JavaScript or TypeScript test files.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/IDE-integration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/// <reference types=\"Cypress\" />\n```\n\n----------------------------------------\n\nTITLE: Submitting a Form Using root in Cypress\nDESCRIPTION: Demonstrates how to use the root command within a form context to submit the form after filling in input fields.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/root.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('form').within(($form) => {\n  cy.get('input[name=\"email\"]').type('john.doe@email.com')\n  cy.get('input[name=\"password\"]').type('password')\n  cy.root().submit() // submits the form yielded from 'within'\n})\n```\n\n----------------------------------------\n\nTITLE: Fixing Test Functions Using Both Done Callback and Promise - Example 2\nDESCRIPTION: This example demonstrates how to fix a test with event listeners that incorrectly returns a promise while also using a done callback. The solution is to not return the promise and rely solely on the done callback.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\nit('uses invokes done and returns promise', (done) => {\n  eventEmitter.on('change', () => {\n    // assertions\n    done()\n  })\n\n  return eventEmitter.doSomethingThatEmitsChange()\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nit('uses invokes done and returns promise', (done) => {\n  eventEmitter.on('change', () => {\n    // assertions\n    done()\n  })\n\n  eventEmitter.doSomethingThatEmitsChange()\n})\n```\n\n----------------------------------------\n\nTITLE: Excluding Multiple Browsers with Negation Array\nDESCRIPTION: Example showing how to run test code in all browsers except Electron and Chrome by using an array with negated browser names.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/isbrowser.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// true when running in browser other than chrome and electron\nit('does not run in Firefox and Chrome', () => {\n  if (Cypress.isBrowser(['!electron', '!chrome'])) {\n    cy.get('#h4').should('have.css', 'font-size-adjust', '0.5')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing File Non-existence in Cypress JavaScript\nDESCRIPTION: Shows how to verify that a file does not exist by using a should('not.exist') assertion.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/readfile.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// will pass if the file does not exist\ncy.readFile('does-not-exist.yaml').should('not.exist')\n```\n\n----------------------------------------\n\nTITLE: Testing Vue Event Handlers with Spies\nDESCRIPTION: Shows how to test event handlers using Cypress spies.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/vue/examples.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nit('clicking + fires a change event with the incremented value', () => {\n  const onChangeSpy = cy.spy().as('onChangeSpy')\n  cy.mount(Stepper, { props: { onChange: onChangeSpy } })\n  cy.get('[data-cy=increment]').click()\n  cy.get('@onChangeSpy').should('have.been.calledWith', 1)\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Parent of Active List Item in Cypress\nDESCRIPTION: Example of getting the parent element of an active list item without using a selector argument.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/parent.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"main-nav\">\n  <li>Overview</li>\n  <li>\n    Getting started\n    <ul class=\"sub-nav\">\n      <li>Install</li>\n      <li class=\"active\">Build</li>\n      <li>Test</li>\n    </ul>\n  </li>\n</ul>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// yields .sub-nav\ncy.get('li.active').parent()\n```\n\n----------------------------------------\n\nTITLE: Right-clicking at a Specific Position on an Element\nDESCRIPTION: Example of right-clicking at a specific position (top right corner) of a DOM element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/rightclick.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#open-menu').rightclick('topRight')\n```\n\n----------------------------------------\n\nTITLE: Asserting CSS Properties with Retry in Cypress (JavaScript)\nDESCRIPTION: These Cypress snippets show how to assert CSS properties with automatic retries. The first checks if an element with class '.completed' has the specified 'text-decoration'. The second checks if an element with ID 'accordion' does not have 'display: none'. It uses `should('have.css', ...)` and `should('not.have.css', ...)`. \nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// retry until .completed has matching css\ncy.get('.completed').should('have.css', 'text-decoration', 'line-through')\n\n// retry while .accordion css has the \"display: none\" property\ncy.get('#accordion').should('not.have.css', 'display', 'none')\n```\n\n----------------------------------------\n\nTITLE: Syntax for dblclick Command in Cypress\nDESCRIPTION: Shows various syntax options for using the dblclick command, including with options, position, and coordinates.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/dblclick.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.dblclick()\n.dblclick(options)\n.dblclick(position)\n.dblclick(position, options)\n.dblclick(x, y)\n.dblclick(x, y, options)\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Content in Cypress Tests\nDESCRIPTION: This code shows how to test elements that only appear after certain user actions or state changes. In this example, it clicks a login button to render elements that only display after a successful login.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/guides/address-coverage-gaps.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Login to render elements that only display after login\ncy.get('[data-cy=\"login-button\"]').click()\ncy.get('[data-cy=\"user-profile\"]')\n```\n\n----------------------------------------\n\nTITLE: ScrollTo Position Examples\nDESCRIPTION: Examples of scrolling to specific positions using the window and list elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/scrollto.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.scrollTo('bottom')\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#movies-list').scrollTo('center')\n```\n\n----------------------------------------\n\nTITLE: File Upload MIME Type Configuration in Cypress\nDESCRIPTION: Shows the transition from cypress-file-upload to the new .selectFile() method for handling file uploads with custom MIME types.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[data-cy=\"dropzone\"]').attachFile({\n  filePath: 'myfixture.json',\n  fileName: 'customFileName.json',\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[data-cy=\"dropzone\"]').selectFile({\n  contents: 'fixtures/myfixture.json',\n  mimeType: 'text/plain',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Stubs with Aliases in Cypress\nDESCRIPTION: Shows how to create a stub with an alias, call it with arguments, and make assertions against it using expect().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/stub.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = {\n  foo() {},\n}\nconst stub = cy.stub(obj, 'foo').as('foo')\n\nobj.foo('foo', 'bar')\nexpect(stub).to.be.called\n```\n\n----------------------------------------\n\nTITLE: Syntax for last() Command in Cypress\nDESCRIPTION: Shows the basic syntax for using the .last() command in Cypress, with optional configuration object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/last.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.last()\n.last(options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Test Spec Pattern\nDESCRIPTION: Example showing how to customize the spec pattern for component tests to limit file searching to specific directories and extensions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/component-framework-configuration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  component: {\n    specPattern: 'src/**/*.cy.{js,jsx,ts,tsx}'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding All Elements Within a Container in Cypress Config (JSON)\nDESCRIPTION: Demonstrates a Cypress configuration using `elementFilters` to exclude all descendant elements (`*`) within a specific container (`footer`). The `selector` `footer *` targets these elements, and `include: false` ensures their exclusion.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_elementfilters.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"elementFilters\": [\n    {\n      \"selector\": \"footer *\",\n      \"include\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing HTML Form Validation in Cypress\nDESCRIPTION: This snippet demonstrates how to check default HTML form validation using Cypress. It tests if the validation error is shown when an input field is invalid.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <input type=\"text\" id=\"name\" name=\"name\" required />\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[type=\"submit\"]').click()\ncy.get('input:invalid').should('have.length', 1)\ncy.get('#name').then(($input) => {\n  expect($input[0].validationMessage).to.eq('Please fill out this field.')\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Screenshot Properties in Cypress After-Screenshot Callback\nDESCRIPTION: Shows how to access detailed information about a screenshot through the props parameter in the onAfterScreenshot callback. Available properties include file path, size, dimensions, scaling status, blackout elements, and duration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/screenshot-api.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Screenshot.defaults({\n  onAfterScreenshot($el, props) {\n    // props has information about the screenshot,\n    // including but not limited to the following:\n    // {\n    //   path: '/Users/janelane/project/screenshots/my-screenshot.png',\n    //   size: '15 kb',\n    //   dimensions: {\n    //     width: 1000,\n    //     height: 660,\n    //   },\n    //   scaled: true,\n    //   blackout: ['.foo'],\n    //   duration: 2300,\n    // }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Uncaught Exceptions in Cypress\nDESCRIPTION: Example showing how to disable uncaught exception handling globally in Cypress tests using the uncaught:exception event.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/catalog-of-events.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.on('uncaught:exception', (err, runnable) => {\n  // returning false here prevents Cypress from\n  // failing the test\n  return false\n})\n```\n\n----------------------------------------\n\nTITLE: Comparing Protractor and Cypress Syntax for Element Interaction\nDESCRIPTION: This snippet demonstrates the difference between Protractor's WebDriverJS API and Cypress commands for clicking elements and typing text. It shows how Cypress simplifies asynchronous operations compared to Protractor's control flow.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// Protractor Control Flow\nelement(by.css('button')).click()\nelement(by.css('input')).sendKeys('my text')\n\n// Protractor without Control Flow\nawait element(by.css('button')).click()\nawait element(by.css('input')).sendKeys('my text')\n\n// Cypress\ncy.get('button').click()\ncy.get('input').type('my text')\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Cypress.minimatch in JavaScript\nDESCRIPTION: Demonstrates the correct way to use Cypress.minimatch to test a URL pattern against a string with matchBase option.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/minimatch.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.minimatch('/users/1/comments/2', '/users/*/comments', {\n  matchBase: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Test Demonstrating Insecure Content Failure\nDESCRIPTION: A Cypress test that will fail when clicking a link that navigates from HTTPS to HTTP, highlighting a security vulnerability.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cross-origin-testing.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('https://example.cypress.io')\ncy.get('a').click() // will fail\n```\n\n----------------------------------------\n\nTITLE: Assigning Human-Readable Names to Elements\nDESCRIPTION: Configuration example showing how to give elements descriptive names in UI Coverage reports using the name property.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/elements.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"elements\": [\n      {\n        \"selector\": \"#ui-popover-button\",\n        \"name\": \"Help Popover\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Dev Server in Cypress 10+ (Verbose)\nDESCRIPTION: Verbose configuration for React dev server in Cypress 10+. This example shows the functional form with explicit webpack configuration and more control over the setup.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nconst { defineConfig } = require('cypress')\nconst webpackConfig = require('./webpack.config.js')\n\nmodule.exports = defineConfig({\n  component: {\n    devServer(cypressConfig) {\n      return devServer({\n        framework: 'react', // or vue\n        cypressConfig,\n        webpackConfig,\n      })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Typings for cy.mount() in Vue\nDESCRIPTION: TypeScript declaration for the custom cy.mount() command in Vue. It includes parameter type extraction to support the Vue mount options pattern.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/mount.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mount } from 'cypress/vue'\n\ntype MountParams = Parameters<typeof mount>\ntype OptionsParam = MountParams[1]\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      mount: typeof mount\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative to end() Using Multiple Commands in Cypress\nDESCRIPTION: Shows an alternative approach to end() by starting new command chains with cy.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/end.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.contains('User: Cheryl').click()\ncy.contains('User: Charles').click() // contains looks for content in document now\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests Grouped by Guest Feature Context\nDESCRIPTION: Command to run Cypress tests for guest-facing features, using the record flag and a specific group label with path pattern, targeting only guest-specific test specs.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/features/smart-orchestration/parallelization.mdx#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --record --group package/guest --spec 'cypress/e2e/packages/guest/**/*'\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Reporters in Cypress Config (JavaScript)\nDESCRIPTION: Sets up multiple reporters using cypress-multi-reporters with a separate config file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/reporters.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  reporter: 'cypress-multi-reporters',\n  reporterOptions: {\n    configFile: 'reporter-config.json'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Specific localStorage Key in Cypress\nDESCRIPTION: Example showing how to clear a specific localStorage key called 'appName' in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clearlocalstorage.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clearLocalStorage('appName')\n```\n\n----------------------------------------\n\nTITLE: Using Cypress._ Syntax in JavaScript\nDESCRIPTION: Demonstrates the basic syntax for calling Lodash methods using Cypress._. This snippet shows the correct way to use Cypress._ and an incorrect usage example.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/lodash.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress._.method()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nCypress._.keys(obj)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy._.keys(obj) // Errors, cannot be chained off 'cy'\n```\n\n----------------------------------------\n\nTITLE: Configuring JUnit Reporter with Unique Filenames (JavaScript)\nDESCRIPTION: Sets up the JUnit reporter to generate unique XML files for each spec using a hash in the filename.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/reporters.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  reporter: 'junit',\n  reporterOptions: {\n    mochaFile: 'results/my-test-output-[hash].xml'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Spec Path Before Execution in Cypress\nDESCRIPTION: This example demonstrates how to use the 'before:spec' event to log the relative path of the spec file to stdout before it is run. It shows the structure of the spec object provided to the event handler.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/before-spec-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\non('before:spec', (spec) => {\n  // spec will look something like this:\n  // {\n  //   name: 'login.cy.js',\n  //   relative: 'cypress/e2e/login.cy.js',\n  //   absolute: '/Users/janelane/app/cypress/e2e/login.cy.js',\n  // }\n  console.log('Running', spec.relative)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting a Browser Cookie in Cypress\nDESCRIPTION: Basic syntax for the setCookie command in Cypress, showing both the simple form and the form with options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/setcookie.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.setCookie(name, value)\ncy.setCookie(name, value, options)\n```\n\n----------------------------------------\n\nTITLE: Disabling Command Log Entries for Stubs in Cypress\nDESCRIPTION: Shows how to disable logging of stub calls to the Command Log using the log(false) method, which is useful when stubs are called many times.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/stub.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = {\n  foo() {},\n}\nconst stub = cy.stub(obj, 'foo').log(false)\n```\n\n----------------------------------------\n\nTITLE: Subject Change with Attribute Assertion in Cypress\nDESCRIPTION: Shows how the 'have.attr' assertion changes the subject from the element to the attribute's value for chaining further assertions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#header a') // yields the element\n  .should('have.attr', 'href') // yields the \"href\" attribute\n  .and('equal', '/users') // checks the \"href\" value\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress Base URL\nDESCRIPTION: TypeScript configuration to set the baseUrl for Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/end-to-end-testing/testing-your-app.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  e2e: {\n    baseUrl: 'http://localhost:8080'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Network Request Logging in Cypress\nDESCRIPTION: Shows how to disable logging for network requests in Cypress using the log option in intercept commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/network-requests.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/users*', { body: ['user1', 'user2'], log: false }).as('getUsers')\n```\n\n----------------------------------------\n\nTITLE: Recording Cypress Tests with Environment Variable\nDESCRIPTION: Example of running Cypress tests with record flag using environment variable for the record key.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/overview.mdx#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --record\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of scrollIntoView in Cypress\nDESCRIPTION: Demonstrates the correct way to use the scrollIntoView command by chaining it off a command that yields a DOM element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/scrollintoview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('footer').scrollIntoView() // Scrolls 'footer' into view\n```\n\n----------------------------------------\n\nTITLE: Modifying GitLab CI Configuration for Cypress Accessibility Checks\nDESCRIPTION: This snippet demonstrates how to update a GitLab CI configuration to incorporate Cypress accessibility result verification. It adds steps to install the necessary module and execute a verification script.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/accessibility/results-api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n```diff title=\".git-ci.yml\"\nname: Run Cypress Tests\n\nimage: node:latest\n\nstages:\n  - test\n\nrun-cypress:\n  stage: test\n  secrets:\n    CYPRESS_RECORD_KEY:\n      vault: vault/cypressRecordKey\n  script:\n    - npm install\n    - npx cypress run --record\n+   - npm install --force https://cdn.cypress.io/extract-cloud-results/v1/extract-cloud-results.tgz\n+   - node ./scripts/verifyAccessibilityResults.js\n```\n```\n\n----------------------------------------\n\nTITLE: Hidden Input File Selection\nDESCRIPTION: Demonstrates how to handle file selection with hidden input elements using the force option.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/selectfile.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input[type=file]').selectFile('file.json', { force: true })\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of focused() Command in Cypress\nDESCRIPTION: Demonstrates the proper way to use the focused() command to yield the element currently in focus.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/focused.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.focused() // Yields the element currently in focus\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins for Vanilla Webpack in Cypress 7.0\nDESCRIPTION: Example of configuring the Cypress plugins file for a project with a manually defined webpack configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nconst { startDevServer } = require('@cypress/webpack-dev-server')\nconst webpackConfig = require('../webpack.config.js')\n\nmodule.exports = (on, config) => {\n  on('dev-server:start', (options) => {\n    return startDevServer({ options, webpackConfig })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping a JavaScript Promise with Timeout\nDESCRIPTION: Shows wrapping a promise that resolves after a timeout, demonstrating how Cypress waits for the promise to resolve.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/wrap.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst myPromise = new Promise((resolve, reject) => {\n  // we use setTimeout(...) to simulate async code.\n  setTimeout(() => {\n    resolve({\n      type: 'success',\n      message: 'It worked!',\n    })\n  }, 2500)\n})\n\nit('should wait for promises to resolve', () => {\n  cy.wrap(myPromise).its('message').should('eq', 'It worked!')\n})\n```\n\n----------------------------------------\n\nTITLE: Mouse Button Events\nDESCRIPTION: Examples of triggering mousedown events with different mouse buttons using the button property.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/trigger.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Main button pressed (usually the left button)\ncy.get('.target').trigger('mousedown', { button: 0 })\n// Auxiliary button pressed (usually the middle button)\ncy.get('.target').trigger('mousedown', { button: 1 })\n//Secondary button pressed (usually the right button)\ncy.get('.target').trigger('mousedown', { button: 2 })\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests Grouped by Admin Feature Context\nDESCRIPTION: Command to run Cypress tests for admin features, using the record flag and a specific group label with path pattern, targeting only admin-specific test specs.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/features/smart-orchestration/parallelization.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --record --group package/admin --spec 'cypress/e2e/packages/admin/**/*'\n```\n\n----------------------------------------\n\nTITLE: Using Cypress.sinon.match.string in a Test Example\nDESCRIPTION: Demonstrates spying on a style method and using Cypress.sinon.match.string to verify the method was called with a string argument without checking its exact value.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/sinon.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.document()\n  .its('documentElement.style')\n  .then((style) => {\n    cy.spy(style, 'setProperty').as('setColor')\n  })\n\ncy.get('input[type=color]').invoke('val', '#ff0000').trigger('change')\n\n// we don't care about '--background-color' exact\n// value but know it should be a string\ncy.get('@setColor').should(\n  'have.been.calledWith',\n  Cypress.sinon.match.string,\n  '#ff0000'\n)\n```\n\n----------------------------------------\n\nTITLE: Complete Right-click Example with Command Log\nDESCRIPTION: Example showing a right-click on a specific DOM element that will be displayed in the Cypress Command Log.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/rightclick.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.rightclick-action-div').rightclick()\n```\n\n----------------------------------------\n\nTITLE: Vue Component Testing with JSX\nDESCRIPTION: Demonstrates using JSX syntax for mounting and testing Vue components.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/vue/examples.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nit('clicking + fires a change event with the incremented value', () => {\n  const onChangeSpy = cy.spy().as('onChangeSpy')\n  cy.mount(<Stepper initial={100} onChange={onChangeSpy} />)\n  cy.get('[data-cy=increment]').click()\n  cy.get('@onChangeSpy').should('have.been.calledWith', 101)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Types\nDESCRIPTION: Example of type annotation for Cypress plugins file\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/typescript-support.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @type {Cypress.PluginConfig}\n */\nmodule.exports = (on, config) => {}\n```\n\n----------------------------------------\n\nTITLE: Typescript Interface for Typed Requests and Responses\nDESCRIPTION: Example of using TypeScript with cy.intercept to specify custom types for request and response bodies for better type safety.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Specifying request and response types\ntype CustomRequest = {\n  kind: 'custom_request'\n}\ntype CustomResponse = {\n  kind: 'custom_response'\n}\ncy.intercept<CustomRequest, CustomResponse>(url, (req) => {\n  req.body // .body of request will be of type CustomRequest\n  req.continue((res) => {\n    res.body // .body of request will be of type CustomResponse\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Changes to cookie objects including sameSite property\nDESCRIPTION: Examples showing how cookie objects returned by cy.getCookie() now include the sameSite property when specified.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_93\n\nLANGUAGE: js\nCODE:\n```\ncy.getCookie('token').then((cookie) => {\n  // cy.getCookie() yields a cookie object\n  // {\n  //   domain: \"localhost\",\n  //   expiry: 1593551644,\n  //   httpOnly: false,\n  //   name: \"token\",\n  //   path: \"/commands\",\n  //   secure: false,\n  //   value: \"123ABC\"\n  // }\n})\n```\n\nLANGUAGE: js\nCODE:\n```\ncy.getCookie('token').then((cookie) => {\n  // cy.getCookie() yields a cookie object\n  // {\n  //   domain: \"localhost\",\n  //   expiry: 1593551644,\n  //   httpOnly: false,\n  //   name: \"token\",\n  //   path: \"/commands\",\n  //   sameSite: \"strict\",\n  //   secure: false,\n  //   value: \"123ABC\"\n  // }\n})\n```\n\n----------------------------------------\n\nTITLE: Typing into a Textarea Element in Cypress\nDESCRIPTION: Shows how to type text into a textarea element, which yields the same textarea element for potential chaining.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/type.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('textarea').type('Hello world') // yields <textarea>\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of .not() Command in Cypress\nDESCRIPTION: Demonstrates the correct way to use the .not() command in Cypress by chaining it off a command that yields DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/not.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input').not('.required') // Yield all inputs without class '.required'\n```\n\n----------------------------------------\n\nTITLE: Cypress parentsUntil Usage Examples\nDESCRIPTION: Demonstrates correct and incorrect usage patterns of the parentsUntil command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/parentsuntil.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('p').parentsUntil('.article') // Yield parents of 'p' until '.article'\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.parentsUntil() // Errors, cannot be chained off 'cy'\ncy.clock().parentsUntil('href') // Errors, 'clock' does not yield DOM elements\n```\n\n----------------------------------------\n\nTITLE: Importing Component Styles in Cypress Support\nDESCRIPTION: Example of importing extracted component styles in the Cypress component support file to ensure consistent styling during testing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/styling-components.mdx#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n/* cypress/support/component.js */ import '../../src/app.css'\n```\n\n----------------------------------------\n\nTITLE: Detecting Cypress Environment in Application Code (JavaScript)\nDESCRIPTION: This code shows how application code running in the browser can detect if it's being executed within a Cypress test environment. It checks for the existence of the `window.Cypress` object, which Cypress injects, allowing for conditional logic (e.g., setting a specific environment variable) based on whether the app is under test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nif (window.Cypress) {\n  // we are running in Cypress\n  // so do something different here\n  window.env = 'test'\n} else {\n  // we are running in a regular ol' browser\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Working with Promises in .then() using Q\nDESCRIPTION: Example showing how Cypress waits for promises to resolve before continuing the chain, using Q promise library.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/then.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button')\n  .click()\n  .then(($button) => {\n    const p = Q.defer()\n\n    setTimeout(() => {\n      p.resolve()\n    }, 1000)\n\n    return p.promise\n  })\n```\n\n----------------------------------------\n\nTITLE: Unwrapping jQuery Objects with unwrap in JavaScript\nDESCRIPTION: Shows how to extract raw DOM elements from a jQuery object using Cypress.dom.unwrap. Returns an array of DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/dom.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('body').then(($el) => {\n  Cypress.dom.unwrap($el)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Auth0 Rate Limiting in Cypress Commands\nDESCRIPTION: This code adds functionality to the loginByAuth0Api Cypress command to handle Auth0 rate limiting. It sends a request to the Auth0 Management API to unblock the IP address before attempting login.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/auth0-authentication.mdx#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nCypress.Commands.add('loginByAuth0Api', (username, password) => {\n  // Useful when rate limited by Auth0\n  cy.exec('curl -4 icanhazip.com')\n    .its('stdout')\n    .then((ip) => {\n      cy.request({\n        method: 'DELETE',\n        url: `https://${Cypress.env(\n          'auth0_domain'\n        )}/api/v2/anomaly/blocks/ips/${ip}`,\n        auth: {\n          bearer: Cypress.env('auth0_mgmt_api_token'),\n        },\n      })\n    })\n\n  // ... remaining loginByAuth0Api command\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting Recorded Video for Passed Specs\nDESCRIPTION: TypeScript example showing how to delete the recorded video if a spec passed with no failures, which can save storage space and reduce upload time to Cypress Cloud.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/after-spec-api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\non(\n  'after:spec',\n  (spec: Cypress.Spec, results: CypressCommandLine.RunResult) => {\n    // Do we have failures?\n    if (results && results.video && results.stats.failures === 0) {\n      // delete the video if the spec passed\n      fs.unlinkSync(results.video)\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Console Child Command\nDESCRIPTION: Demonstrates how to use the custom console child command in a command chain to log elements to the console while preserving the subject for further commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button')\n  .console('info')\n  .then(($button) => {\n    // subject is still $button\n  })\n```\n\n----------------------------------------\n\nTITLE: Downloading a PDF file with binary encoding in Cypress\nDESCRIPTION: This snippet demonstrates how to download a binary file (PDF) using the cy.request() command with binary encoding and save it to the file system using cy.writeFile().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/request.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncy.request({\n  url: 'http://localhost:8080/some-document.pdf',\n  encoding: 'binary',\n}).then((response) => {\n  cy.writeFile('path/to/save/document.pdf', response.body, 'binary')\n})\n```\n\n----------------------------------------\n\nTITLE: Setting cy.exec() Timeout in Test Configuration\nDESCRIPTION: Shows how to configure the cy.exec() timeout within a specific test suite using test configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/exec.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('has data available from database', { execTimeout: 90000 }, () => {\n  before(() => {\n    cy.exec('rake db:seed')\n  })\n\n  // tests\n\n  after(() => {\n    cy.exec('rake db:reset')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of prevAll Command in Cypress\nDESCRIPTION: Demonstrates the proper way to use the prevAll command by chaining it off a DOM element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/prevall.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.active').prevAll() // Yield all links previous to `.active`\n```\n\n----------------------------------------\n\nTITLE: Forcing a Double-click with Relative Coordinates in Cypress\nDESCRIPTION: Demonstrates forcing a double-click at specific coordinates relative to an element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/dblclick.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').dblclick(60, 60, { force: true })\n```\n\n----------------------------------------\n\nTITLE: Testing Page Navigation Events\nDESCRIPTION: Example demonstrating how to test page navigation and redirection using window unload events.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/catalog-of-events.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n$('button').on('click', (e) => {\n  // change the page programmatically\n  window.location.href = '/some/new/link'\n})\n\nit('redirects to another page on click', (done) => {\n  // this event will automatically be unbound when this\n  // test ends because it's attached to 'cy'\n  cy.on('window:before:unload', (e) => {\n    // no return value on the event\n    expect(e.returnValue).to.be.undefined\n  })\n\n  cy.on('window:unload', (e) => {\n    // using mocha's async done callback to finish\n    // this test so we are guaranteed the application\n    // was unloaded while navigating to the new page\n    done()\n  })\n\n  // click the button causing the page redirect\n  cy.get('button').click()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Detect-Flake-but-Always-Fail Strategy in Cypress\nDESCRIPTION: This code snippet shows how to set up the 'detect-flake-but-always-fail' experimental retry strategy in Cypress. It configures the maximum number of retries and whether to stop retrying if any attempt passes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/experiments.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  retries: {\n    experimentalStrategy: 'detect-flake-but-always-fail',\n    experimentalOptions: {\n      maxRetries: 2,\n      stopIfAnyPassed: true\n    },\n\n    // you must also explicitly set openMode and runMode to\n    // either true or false when using experimental retries\n    openMode: true,\n    runMode: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of clearLocalStorage in Cypress\nDESCRIPTION: Demonstrates the correct way to use the clearLocalStorage command to clear all localStorage in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clearlocalstorage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clearLocalStorage() // clear all local storage\n```\n\n----------------------------------------\n\nTITLE: Factory Function Example\nDESCRIPTION: Example of working with factory functions and their properties.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/its.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Your app code\n// a basic Factory constructor\nconst Factory = (arg) => {\n  // ...\n}\n\nFactory.create = (arg) => {\n  return new Factory(arg)\n}\n\n// assign it to the window\nwindow.Factory = Factory\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Significant Attributes in Cypress UI Coverage\nDESCRIPTION: This configuration example demonstrates how to define custom significant attributes that UI Coverage will prioritize when identifying elements. The example adds 'data-custom-id' to the list of significant attributes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/core-concepts/element-identification.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"significantAttributes\": [\"data-custom-id\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Test Results in after:run Event Handler (TypeScript)\nDESCRIPTION: This example shows how to use the after:run event to log the number of passed tests after a Cypress run. It checks if results are available (which they are only in non-interactive mode) and then logs the count of passed tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/after-run-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\non('after:run', (results) => {\n  if (results) {\n    // results will be undefined in interactive mode\n    console.log(results.totalPassed, 'out of', results.totalTests, 'passed')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Forcing a Double-click with Position Argument in Cypress\nDESCRIPTION: Shows how to force a double-click at a specific position on an element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/dblclick.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').dblclick('topRight', { force: true })\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Cypress Configuration File\nDESCRIPTION: Shows how to set environment variables in the Cypress configuration file under the 'env' key. This method is useful for values that should be the same across all machines.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/environment-variables.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"projectId\": \"128076ed-9868-4e98-9cef-98dd8b705d75\",\n  \"env\": {\n    \"login_url\": \"/login\",\n    \"products_url\": \"/products\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Clock in Test Flow\nDESCRIPTION: Example showing how to restore the clock in the middle of a test to resume normal time behavior.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clock.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clock()\ncy.visit('http://localhost:3333')\ncy.get('#search').type('Acme Company')\ncy.tick(1000)\n// more test code here\n\n// restore the clock\ncy.clock().then((clock) => {\n  clock.restore()\n})\n// more test code here\n```\n\n----------------------------------------\n\nTITLE: Mocha Core Testing Functions\nDESCRIPTION: The fundamental BDD syntax functions provided by Mocha for structuring tests in Cypress, including test suite definitions and hooks.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/bundled-libraries.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe()\ncontext()\nit()\nbefore()\nbeforeEach()\nafterEach()\nafter()\n.only()\n.skip()\n```\n\n----------------------------------------\n\nTITLE: Example of Insecure Content Navigation Test\nDESCRIPTION: A test demonstrating how Cypress handles insecure content by visiting an HTTPS site.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cross-origin-testing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('https://example.cypress.io')\n```\n\n----------------------------------------\n\nTITLE: Correct Cypress.sinon Usage Example in JavaScript\nDESCRIPTION: Demonstrates the correct way to use Cypress.sinon.match with a matcher name.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/sinon.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.sinon.match.string\n```\n\n----------------------------------------\n\nTITLE: Date Object Handling in Cypress Task\nDESCRIPTION: Example of handling Date objects in cy.task() commands, showing how to handle serialization and deserialization of dates.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/task.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// in test\ncy.task('date', new Date()).then((s) => {\n  // the yielded result is a string\n  // we need to convert it to Date object\n  const result = new Date(s)\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Demonstration\nDESCRIPTION: Shows an HTML navigation structure with nested lists that will be used in the examples to demonstrate how .parents() retrieves parent elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/parents.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"main-nav\">\n  <li>Overview</li>\n  <li>\n    Getting started\n    <ul class=\"sub-nav\">\n      <li>Install</li>\n      <li class=\"active\">Build</li>\n      <li>Test</li>\n    </ul>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Okta-Protected React SPA Routes (React, TypeScript/JSX)\nDESCRIPTION: This component, AppOkta, manages Okta authentication state using the useOktaAuth hook and sends Okta user and token data to the authentication service on successful login. It sets up SecureRoute and LoginCallback React Router routes to handle Okta secure paths and authentication redirection. Dependencies include the '@okta/okta-react' library, and authService for SPA state management. Inputs are the Okta auth state; outputs are event dispatches for user/token and conditional rendering of routes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/okta-authentication.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// initial imports ...\nimport {\n  LoginCallback,\n  SecureRoute,\n  useOktaAuth,\n  withOktaAuth,\n} from '@okta/okta-react'\n\n// ...\n\nconst AppOkta: React.FC = () => {\n  const { authState, oktaAuth } = useOktaAuth()\n\n  // ...\n\n  useEffect(() => {\n    if (authState.isAuthenticated) {\n      oktaAuth.getUser().then((user) => {\n        authService.send('OKTA', { user, token: oktaAuthState.accessToken })\n      })\n    }\n  }, [authState, oktaAuth])\n\n  // ...\n\n  return (\n    <div className={classes.root}>\n      // ...\n      {authState.matches('unauthorized') && (\n        <>\n          <Route path=\"/implicit/callback\" component={LoginCallback} />\n          <SecureRoute exact path=\"/\" />\n        </>\n      )}\n      // ...\n    </div>\n  )\n}\n\nexport default withOktaAuth(AppOkta)\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for focused() Command in Cypress\nDESCRIPTION: Shows the basic syntax for using the focused() command in Cypress to retrieve the currently focused DOM element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/focused.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.focused()\ncy.focused(options)\n```\n\n----------------------------------------\n\nTITLE: Finding All Siblings Following a Specific Element with nextAll in Cypress\nDESCRIPTION: Demonstrates how to use nextAll to find all siblings following an element with a specific class.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/nextall.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>apples</li>\n  <li class=\"second\">oranges</li>\n  <li>bananas</li>\n  <li>pineapples</li>\n  <li>grapes</li>\n</ul>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// yields [<li>bananas</li>, <li>pineapples</li>, <li>grapes</li>]\ncy.get('.second').nextAll()\n```\n\n----------------------------------------\n\nTITLE: Handling after:run Event in Cypress Configuration (TypeScript)\nDESCRIPTION: This snippet demonstrates how to register a handler for the after:run event in Cypress. The handler receives a results object containing information about the completed run.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/after-run-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\non('after:run', (results) => {\n  /* ... */\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Response Body with Intercept\nDESCRIPTION: Example of using .its() with cy.intercept() to test response body.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/its.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('/comments', { fixture: 'comments.json' }).as('getComments')\ncy.get('#fetch-comments').click()\ncy.wait('@getComments')\n  .its('response.body')\n  .should(\n    'deep.eq',\n    JSON.stringify([\n      { id: 1, comment: 'hi' },\n      { id: 2, comment: 'there' },\n    ])\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing Cypress with Custom Binary Version\nDESCRIPTION: This snippet demonstrates how to install a specific version of Cypress using the CYPRESS_INSTALL_BINARY environment variable.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/advanced-installation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nCYPRESS_INSTALL_BINARY=13.7.0 npm install cypress@13.7.1\n```\n\n----------------------------------------\n\nTITLE: Using Offset with scrollIntoView in Cypress\nDESCRIPTION: Example of using the offset option to scroll to a position 150px below the target element, useful for positioning elements precisely in the viewport.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/scrollintoview.mdx#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\ncy.get('#nav').scrollIntoView({ offset: { top: 150, left: 0 } })\n```\n\n----------------------------------------\n\nTITLE: Using clearCookies Command in Cypress\nDESCRIPTION: Basic syntax for the clearCookies command to clear browser cookies in Cypress tests. Shows both basic usage and usage with options object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clearcookies.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clearCookies()\ncy.clearCookies(options)\n```\n\n----------------------------------------\n\nTITLE: Getting Children of an Element Without a Selector in Cypress\nDESCRIPTION: Example of getting all children of an element with class .secondary-nav without using a selector.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/children.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>About</li>\n  <li>\n    Services\n    <ul class=\"secondary-nav\">\n      <li class=\"services-1\">Web Design</li>\n      <li class=\"services-2\">Logo Design</li>\n      <li class=\"services-3\">\n        Print Design\n        <ul class=\"tertiary-nav\">\n          <li>Signage</li>\n          <li>T-Shirt</li>\n          <li>Business Cards</li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n  <li>Contact</li>\n</ul>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// yields [\n//  <li class=\"services-1\">Web Design</li>,\n//  <li class=\"services-2\">Logo Design</li>,\n//  <li class=\"services-3\">Print Design</li>\n// ]\ncy.get('ul.secondary-nav').children()\n```\n\n----------------------------------------\n\nTITLE: URL Resolution with Visit Example\nDESCRIPTION: Shows how Cypress resolves URLs when used after cy.visit().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/request.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('http://localhost:8080/app')\ncy.request('users/1.json') //  URL is  http://localhost:8080/users/1.json\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress Type Command Syntax\nDESCRIPTION: Shows the basic syntax for the Cypress type command, including the variant with options parameter.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/type.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.type(text)\n.type(text, options)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Way to Handle Multiple Async Functions\nDESCRIPTION: Demonstrates the incorrect approach to handling multiple async functions with wrap, where the second function may execute prematurely.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/wrap.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.wrap(foo())\n\ncy.get('some-button').click()\ncy.get('some-input').type(someValue)\ncy.get('some-submit-button').click()\n\n// this will execute `bar()` immediately without waiting\n// for other cy.get(...) functions to complete\ncy.wrap(bar()) // DON'T DO THIS\n```\n\n----------------------------------------\n\nTITLE: React Component Unmounting in Cypress 11\nDESCRIPTION: Updated example showing component unmounting using ReactDOM.unmountComponentAtNode with getContainerEl.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getContainerEl } from 'cypress/react'\nimport ReactDom from 'react-dom'\n\nit('calls the prop', () => {\n  cy.mount(<Comp onUnmount={cy.stub().as('onUnmount')} />)\n  cy.contains('My component')\n\n  cy.then(() => ReactDom.unmountComponentAtNode(getContainerEl()))\n\n  // the component is gone from the DOM\n  cy.contains('My component').should('not.exist')\n  cy.get('@onUnmount').should('have.been.calledOnce')\n})\n```\n\n----------------------------------------\n\nTITLE: Enhanced Okta Login with Session Caching\nDESCRIPTION: Improved login command implementation using cy.session() for caching authentication state.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/okta-authentication.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nCypress.Commands.add('loginByOkta', (username: string, password: string) => {\n  cy.session(\n    `okta-${username}`,\n    () => {\n      return loginToOkta(username, password)\n    },\n    {\n      validate() {\n        cy.visit('/')\n        cy.get('[data-test=\"sidenav-username\"]').should('contain', username)\n      },\n    }\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Restoring Clock with this.clock\nDESCRIPTION: Alternative way to restore native time functions using this.clock.restore() inside a then() callback.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clock.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clock()\ncy.get('.timer').then(($timer) => {\n  this.clock.restore()\n  // do something with $timer ...\n})\n```\n\n----------------------------------------\n\nTITLE: Importing createOutputSpy for Angular Component Event Testing\nDESCRIPTION: Shows how to import the createOutputSpy function which creates an event emitter spy for testing Angular component outputs.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createOutputSpy } from 'cypress/angular'\n```\n\n----------------------------------------\n\nTITLE: Testing Azure Active Directory Authentication in Cypress\nDESCRIPTION: JavaScript test file that uses the custom AAD login command to authenticate and verify user information. It confirms the logged-in user has the correct name and preferred username.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/azure-active-directory-authentication.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\ndescribe('Azure Active Directory Authentication', () => {\n  beforeEach(() => {\n    // log into Azure Active Directory through our sample SPA using our custom command\n    cy.loginToAAD(Cypress.env('aad_username'), Cypress.env('aad_password'))\n    cy.visit('http://localhost:3000')\n  })\n\n  it('verifies the user logged in has the correct name', () => {\n    cy.get('#table-body-div td:contains(\"name\") + td').should(\n      'contain',\n      `${Cypress.env('aad_name')}`\n    )\n  })\n\n  it('verifies the user logged in has the correct preferred name', () => {\n    cy.get('#table-body-div td:contains(\"preferred_username\") + td').should(\n      'contain',\n      `${Cypress.env('aad_username')}`\n    )\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Video Deletion After Test Runs\nDESCRIPTION: Implementation of after:spec event handler to delete videos for passed tests without retries, helping manage storage and upload efficiency.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/screenshots-and-videos.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs'\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\non(\n  'after:spec',\n  (spec: Cypress.Spec, results: CypressCommandLine.RunResult) => {\n    if (results && results.video) {\n      // Do we have failures for any retry attempts?\n      const failures = results.tests.some((test) =>\n        test.attempts.some((attempt) => attempt.state === 'failed')\n      )\n      if (!failures) {\n        // delete the video if the spec passed and no tests retried\n        fs.unlinkSync(results.video)\n      }\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Invoking Functions with Multiple Arguments\nDESCRIPTION: Shows how to pass multiple arguments to a function using the '.invoke()' command in Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/invoke.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst fn = (a, b, c) => {\n  return a + b + c\n}\n\ncy.wrap({ sum: fn })\n  .invoke('sum', 2, 4, 6)\n  .should('be.gt', 10) // true\n  .and('be.lt', 20) // true\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Stub Syntax in Cypress\nDESCRIPTION: Shows the basic syntax for creating stubs in Cypress. The syntax demonstrates creating a general stub or creating a stub for a specific object method.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/stub.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.stub()\ncy.stub(object, method)\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Istanbul Plugin\nDESCRIPTION: This JSON snippet shows how to configure Babel to use the Istanbul plugin for code coverage instrumentation during transpilation.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/code-coverage.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@babel/preset-react\"],\n  \"plugins\": [\"transform-class-properties\", \"istanbul\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Approach to Checking Window Properties in Cypress\nDESCRIPTION: Example demonstrating the incorrect way to check window properties due to Cypress's asynchronous nature, which results in test failure.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/window.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nit('equals bar', () => {\n  let foo\n\n  cy.window().then((win) => {\n    foo = win.tags.foo\n  })\n\n  // variable \"foo\" is still undefined\n  // because the above \"then\" callback\n  // has not been executed yet\n  expect(foo).to.equal('bar') // test fails\n})\n```\n\n----------------------------------------\n\nTITLE: Using Cypress.$ with jQuery Utility Methods\nDESCRIPTION: Demonstrates using jQuery's utility methods like $.each with Cypress.$.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/$.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.$.each([1, 2, 3], (index, value) => {\n  expect(index).to.eq(value)\n}) // works\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for getAllSessionStorage Command in Cypress\nDESCRIPTION: Demonstrates the basic syntax for the getAllSessionStorage command in Cypress, showing both the simple version and with options parameter.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/getallsessionstorage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.getAllSessionStorage()\ncy.getAllSessionStorage(options)\n```\n\n----------------------------------------\n\nTITLE: Removing Keystroke Delay with Cypress.Keyboard.defaults in JavaScript\nDESCRIPTION: Demonstrates how to remove the delay between keystrokes when typing by setting the keystrokeDelay option to 0, which causes typing to happen as fast as possible.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/keyboard-api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Keyboard.defaults({\n  keystrokeDelay: 0,\n})\n```\n\n----------------------------------------\n\nTITLE: Clearing Session Storage - Usage Example\nDESCRIPTION: Demonstrates the correct usage of the clearAllSessionStorage command in a Cypress test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clearallsessionstorage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clearAllSessionStorage()\n```\n\n----------------------------------------\n\nTITLE: Enabling Electron Verbose Logging\nDESCRIPTION: Command to run Cypress with verbose Electron logging enabled.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_20\n\nLANGUAGE: text\nCODE:\n```\nELECTRON_ENABLE_LOGGING=true ~/.cache/Cypress/13.15.0/Cypress/Cypress --smoke-test --ping=101\n\nDevTools listening on ws://127.0.0.1:33161/devtools/browser/1f8a2d15-ea42-403f-8eb4-757f1a9d0b25\n[3959:1005/201139.970068:WARNING:bluez_dbus_manager.cc(247)] Floss manager not present, cannot set Floss enable/disable.\nIt looks like you are running the Cypress binary directly.\n\nThis is not the recommended approach, and Cypress may not work correctly.\n\nPlease install the cypress NPM package and follow the instructions here:\n\nhttps://on.cypress.io/install-cypress\n101\n```\n\n----------------------------------------\n\nTITLE: Cropping Cypress Screenshot to Specific Dimensions\nDESCRIPTION: Shows how to crop a screenshot to a specific position and size using the clip option in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/screenshot.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// screenshot will be clipped 20px from the top and left\n// to the dimensions 400px x 300px\ncy.screenshot({ clip: { x: 20, y: 20, width: 400, height: 300 } })\n```\n\n----------------------------------------\n\nTITLE: File Count Task Example\nDESCRIPTION: Simple example of using cy.task() to count files in a directory.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/task.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ncy.task('countFiles', 'cypress/e2e')\n```\n\n----------------------------------------\n\nTITLE: jQuery-like Element Selection in Cypress\nDESCRIPTION: This snippet shows how Cypress uses jQuery-like syntax for selecting elements. It demonstrates chaining multiple selector methods to find specific elements in the DOM.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#main-content').find('.article').children('img[src^=\"/static\"]').first()\n```\n\n----------------------------------------\n\nTITLE: Checking Visibility with isVisible in JavaScript\nDESCRIPTION: Shows how to determine if an element is visible using Cypress.dom.isVisible. Returns true for visible elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/dom.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('img').then(($el) => {\n  Cypress.dom.isVisible($el) // true\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug and Third-party Request Logging in Cypress - Shell\nDESCRIPTION: This command exemplifies how to combine Cypress DEBUG variable with Node.js's NODE_DEBUG for the request module, allowing both Cypress's network intercept logs and low-level HTTP request debug logs to be printed during test runs. This is valuable for diagnosing problem areas related to network requests when using @cypress/request or similar modules. Prerequisites include a POSIX shell, node, npx, Cypress, and third-party request dependency installed.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nDEBUG=cypress:net-stubbing:server:intercept-request \\\n  NODE_DEBUG=request npx cypress run\n```\n\n----------------------------------------\n\nTITLE: Optimizing AAD Login with cy.session() in Cypress Commands\nDESCRIPTION: Enhanced TypeScript implementation of the AAD login command that uses cy.session() to cache authentication state. This avoids repeated login operations before each test, improving test efficiency and reducing API rate limit issues.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/azure-active-directory-authentication.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nCypress.Commands.add('loginToAAD', (username: string, password: string) => {\n  cy.session(\n    `aad-${username}`,\n    () => {\n      const log = Cypress.log({\n        displayName: 'Azure Active Directory Login',\n        message: [`🔐 Authenticating | ${username}`],\n        // @ts-ignore\n        autoEnd: false,\n      })\n\n      log.snapshot('before')\n\n      loginViaAAD(username, password)\n\n      log.snapshot('after')\n      log.end()\n    },\n    {\n      validate: () => {\n        // this is a very basic form of session validation for this demo.\n        // depending on your needs, something more verbose might be needed\n        cy.visit('http://localhost:3000')\n        cy.get('#welcome-div').should(\n          'contain',\n          `Welcome ${Cypress.env('aad_username')}!`\n        )\n      },\n    }\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cypress Test Suite Size Summary via Cypress Cloud API (URL)\nDESCRIPTION: Example API call to get a summary of the average test suite size across all projects since the `start_date`, excluding errored/timed-out runs. Uses `report_id=test-suite-size-summary`. The response includes `total_tests`, `total_e2e`, `total_ct`, and `week`.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_6\n\nLANGUAGE: url\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=test-suite-size-summary&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Using an Alternative Cypress Config File via Command Line (Shell)\nDESCRIPTION: Demonstrates how to specify a different Cypress configuration file than the default using the `--config-file` command-line flag. This is useful for managing multiple configuration setups.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/configuration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --config-file tests/cypress.config.js\n```\n\n----------------------------------------\n\nTITLE: Typing Literal Curly Braces in Cypress\nDESCRIPTION: Shows how to type literal { and } characters by disabling special character sequence parsing in the .type() command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/type.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#code-input')\n  .type('function (num) {return num * num;}', {\n    parseSpecialCharSequences: false,\n  })\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Proxy on Windows PowerShell\nDESCRIPTION: Command to set HTTP proxy environment variable in Windows PowerShell environment.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/proxy-configuration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$env:HTTP_PROXY = \"http://my-company-proxy.com\"\n```\n\n----------------------------------------\n\nTITLE: Basic Viewport Command Syntax in Cypress\nDESCRIPTION: Shows the various syntax options for the cy.viewport() command, which can accept width and height dimensions, preset device configurations, and additional options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/viewport.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.viewport(width, height)\ncy.viewport(preset, orientation)\ncy.viewport(width, height, options)\ncy.viewport(preset, orientation, options)\n```\n\n----------------------------------------\n\nTITLE: Updated Cypress Test with Base URL\nDESCRIPTION: JavaScript code for a Cypress test using the configured base URL.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/end-to-end-testing/testing-your-app.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('The Home Page', () => {\n  it('successfully loads', () => {\n    cy.visit('/')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Basic closest() Command Syntax\nDESCRIPTION: Shows the basic syntax for the closest() command with and without options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/closest.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.closest(selector)\n.closest(selector, options)\n```\n\n----------------------------------------\n\nTITLE: Production Environment Configuration\nDESCRIPTION: JSON configuration file for production environment with baseUrl and environment variables.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/configuration-api.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"baseUrl\": \"https://production.acme.com\",\n  \"env\": {\n    \"something\": \"production\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic nextUntil Syntax in Cypress\nDESCRIPTION: Shows the different syntax options for the nextUntil command in Cypress, including using selectors, elements, filters, and options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/nextuntil.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.nextUntil(selector)\n.nextUntil(selector, filter)\n.nextUntil(selector, filter, options)\n.nextUntil(element)\n.nextUntil(element, filter)\n.nextUntil(element, filter, options)\n```\n\n----------------------------------------\n\nTITLE: Installing Cypress from External URL\nDESCRIPTION: This snippet shows how to install Cypress from an external URL, which can be useful for bypassing corporate firewalls.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/advanced-installation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nCYPRESS_INSTALL_BINARY=https://company.domain.com/cypress.zip npm install cypress\n```\n\n----------------------------------------\n\nTITLE: Different Ways to Assert URL in JavaScript\nDESCRIPTION: Shows three equivalent ways to assert the URL contains '/index.html' using location('href'), location().its('href'), and url().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/url.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.location('href').should('include', '/index.html')\n\ncy.location().its('href').should('include', '/index.html')\n\ncy.url().should('include', '/index.html')\n```\n\n----------------------------------------\n\nTITLE: Basic getAllCookies Syntax\nDESCRIPTION: Shows the basic syntax for using the getAllCookies command in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/getallcookies.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.getAllCookies()\ncy.getAllCookies(options)\n```\n\n----------------------------------------\n\nTITLE: Right-clicking Multiple Elements in Cypress\nDESCRIPTION: Example of right-clicking multiple elements by passing the multiple option to apply the action iteratively to each matched element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/rightclick.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.open-menu').rightclick({ multiple: true })\n```\n\n----------------------------------------\n\nTITLE: Using Selectors with cy.contains() in Cypress\nDESCRIPTION: Demonstrates how to use selectors with cy.contains() to target specific elements and maintain subject management.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/contains.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// yields <ul>...</ul>\ncy.contains('ul', 'apples')\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('form') // yields <form>...</form>\n  .contains('form', 'Proceed') // yields <form>...</form>\n  .submit() // yields <form>...</form>\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax of Cypress .siblings() Command\nDESCRIPTION: Demonstrates the various syntax options for using the .siblings() command in Cypress to retrieve sibling DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/siblings.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.siblings()\n.siblings(selector)\n.siblings(options)\n.siblings(selector, options)\n```\n\n----------------------------------------\n\nTITLE: Cypress Event: fail\nDESCRIPTION: Event fired when a test fails, yielding the error object and Mocha runnable. Important for debugging but should not be used to prevent test failures.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/catalog-of-events.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nEvent: fail\\nYields: error (Object), Mocha runnable (Object)\n```\n\n----------------------------------------\n\nTITLE: Syntax Examples for clearLocalStorage in Cypress\nDESCRIPTION: Shows the different ways to call the clearLocalStorage command in Cypress, including with no arguments, with a specific key, or with options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clearlocalstorage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clearLocalStorage()\ncy.clearLocalStorage(key)\ncy.clearLocalStorage(options)\ncy.clearLocalStorage(keys, options)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Root DOM Element in Cypress\nDESCRIPTION: Demonstrates the basic syntax for using the root command in Cypress to get the root DOM element. It can be called with or without options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/root.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.root()\ncy.root(options)\n```\n\n----------------------------------------\n\nTITLE: HTML Structure Example for prevUntil\nDESCRIPTION: Sample HTML structure used to demonstrate prevUntil functionality with nested list items.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/prevuntil.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li id=\"fruits\" class=\"header\">Fruits</li>\n  <li>apples</li>\n  <li>oranges</li>\n  <li>bananas</li>\n  <li id=\"veggies\" class=\"header\">Vegetables</li>\n  <li>cucumbers</li>\n  <li>carrots</li>\n  <li>corn</li>\n  <li id=\"nuts\" class=\"header\">Nuts</li>\n  <li>walnuts</li>\n  <li>cashews</li>\n  <li>almonds</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Creating Tiny Tests with Single Assertions\nDESCRIPTION: An example showing the anti-pattern of creating many small tests with single assertions. This approach is inefficient in end-to-end testing as it requires resetting state between each test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/best-practices.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('my form', () => {\n  beforeEach(() => {\n    cy.visit('/users/new')\n    cy.get('[data-testid=\"first-name\"]').type('johnny')\n  })\n\n  it('has validation attr', () => {\n    cy.get('[data-testid=\"first-name\"]').should(\n      'have.attr',\n      'data-validation',\n      'required'\n    )\n  })\n\n  it('has active class', () => {\n    cy.get('[data-testid=\"first-name\"]').should('have.class', 'active')\n  })\n\n  it('has formatted first name', () => {\n    cy.get('[data-testid=\"first-name\"]')\n      // capitalized first letter\n      .should('have.value', 'Johnny')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Okta Credentials in Cypress Config\nDESCRIPTION: Setup to access Okta credentials from environment variables in Cypress configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/okta-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Populate process.env with values from .env file\nrequire('dotenv').config()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  env: {\n    auth_username: process.env.AUTH_USERNAME,\n    auth_password: process.env.AUTH_PASSWORD,\n    okta_domain: process.env.REACT_APP_OKTA_DOMAIN,\n    okta_client_id: process.env.REACT_APP_OKTA_CLIENTID,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress Component Testing with React and Webpack\nDESCRIPTION: Configuration example for setting up Cypress Component Testing with React applications using Webpack as the bundler. Shows how to provide custom Webpack configuration either directly or via a function.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/react/overview.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  component: {\n    devServer: {\n      framework: 'react',\n      bundler: 'webpack',\n      // optionally pass in webpack config\n      webpackConfig,\n      // or a function - the result is merged with any\n      // webpack.config that is found\n      webpackConfig: async () => {\n        // ... do things ...\n        const modifiedConfig = await injectCustomConfig(baseConfig)\n        return modifiedConfig\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Angular Configuration with Options API\nDESCRIPTION: Extended configuration for Cypress Angular component testing using the options API. This example shows how to provide project-specific settings for a custom Angular project structure.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress'\n\nexport default {\n  component: {\n    devServer: {\n      framework: 'angular',\n      bundler: 'webpack',\n      options: {\n        projectConfig: {\n          root: '',\n          sourceRoot: 'apps/my-app',\n          buildOptions: {\n            outputPath: 'dist/my-app',\n            index: 'apps/my-app/src/index.html',\n            main: 'apps/my-app/src/main.ts',\n            polyfills: 'apps/my-app/src/polyfills.ts',\n            tsConfig: 'apps/my-app/tsconfig.app.json',\n            inlineStyleLanguage: 'scss',\n            assets: ['apps/my-app/src/favicon.ico', 'apps/my-app/src/assets'],\n            styles: ['apps/my-app/src/styles.scss'],\n            scripts: [],\n            buildOptimizer: false,\n            optimization: false,\n            vendorChunk: true,\n            extractLicenses: false,\n            sourceMap: true,\n            namedChunks: true,\n          },\n        },\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Electron Browser Headed in Cypress\nDESCRIPTION: Command to run Cypress tests in Electron browser with headed mode instead of headless\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/launching-browsers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --headed\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress Plugin in setupNodeEvents\nDESCRIPTION: This TypeScript code snippet demonstrates how to add a plugin to the setupNodeEvents function in the Cypress configuration. It binds to a specific event and executes plugin-related code.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/plugins/plugins-guide.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// bind to the event we care about\non('<event>', (arg1, arg2) => {\n  // plugin stuff here\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting on a Table Row by Index\nDESCRIPTION: Example showing how to select the third row of a table and make an assertion on its content using the .eq() command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/eq.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr>\n    <th>Breed</th>\n    <th>Origin</th>\n  </tr>\n  <tr>\n    <td>Siamese</td>\n    <td>Thailand</td>\n  </tr>\n  <tr>\n    <td>Sphynx</td>\n    <td>Canada</td>\n  </tr>\n  <tr>\n    <td>Persian</td>\n    <td>Iran</td>\n  </tr>\n</table>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('tr').eq(2).should('contain', 'Canada') //true\n```\n\n----------------------------------------\n\nTITLE: Emitting Rerun Event in Preprocessor (JavaScript)\nDESCRIPTION: Shows how to emit a 'rerun' event after processing a file change in a preprocessor. This notifies Cypress to rerun the tests with the updated file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/preprocessors-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfs.watch(filePath, () => {\n  file.emit('rerun')\n})\n```\n\n----------------------------------------\n\nTITLE: Using NYC to Instrument Code via Command Line\nDESCRIPTION: This shell command uses the NYC tool to instrument JavaScript code in the 'src' folder and output it to an 'instrumented' folder.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/code-coverage.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx nyc instrument --compact=false src instrumented\n```\n\n----------------------------------------\n\nTITLE: Querying Status Per Test Summary API Endpoint\nDESCRIPTION: This API endpoint provides data about test success and failure rates at the individual test level, returning 'failed' and 'passed' metrics.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=status-per-test-summary&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of .shadow() Command in Cypress\nDESCRIPTION: Shows examples of incorrect usage of the .shadow() command, including chaining off 'cy' directly and using with non-DOM yielding commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/shadow.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.shadow() // Errors, cannot be chained off 'cy'\ncy.exec('npm start').shadow() // Errors, 'exec' does not yield DOM element\ncy.get('.not-a-shadow-host').shadow() // Errors, subject must host a shadow root\n```\n\n----------------------------------------\n\nTITLE: Allowing Timers and Animations in Cypress Screenshots\nDESCRIPTION: Disables the default behavior of pausing JavaScript timers and CSS animations during screenshot capture. This allows animations to continue running while taking screenshots.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/screenshot-api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Screenshot.defaults({\n  disableTimersAndAnimations: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Force Selecting a Hidden Option in Cypress\nDESCRIPTION: Demonstrates how to force select an option from a hidden <select> element using the force option.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/select.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('select')\n  .select('banana', { force: true })\n  .invoke('val')\n  .should('eq', 'banana')\n```\n\n----------------------------------------\n\nTITLE: Installing Extract Cloud Results Module in CI\nDESCRIPTION: Command to install the @cypress/extract-cloud-results module during the CI process. Uses --force flag to ensure the latest version is installed.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/results-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --force https://cdn.cypress.io/extract-cloud-results/v1/extract-cloud-results.tgz\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronicity with Explicit Waits in Protractor (JavaScript)\nDESCRIPTION: This Protractor snippet illustrates the need for explicit waiting. After clicking a button, `browser.waitForAngular()` is called to pause the test until Angular finishes processing before making an assertion on updated content.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// Clicking a button\nelement(by.css('button')).click()\n// Waiting for Angular to re-render the page\nbrowser.waitForAngular()\n// Make assertion after waiting for Angular to update\nexpect(by.css('.list-item').getText()).toEqual('my text')\n```\n\n----------------------------------------\n\nTITLE: Image Fixture Upload with jQuery Plugin\nDESCRIPTION: Example showing how to convert an image fixture to a blob and upload it using a jQuery file upload plugin.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/blob.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// programmatically upload the logo\ncy.fixture('images/logo.png').as('logo')\ncy.get('input[type=file]').then(function ($input) {\n  // convert the logo base64 string to a blob\n  const blob = Cypress.Blob.base64StringToBlob(this.logo, 'image/png')\n\n  // pass the blob to the fileupload jQuery plugin\n  // https://github.com/blueimp/jQuery-File-Upload\n  // used in your application's code\n  // which initiates a programmatic upload\n  $input.fileupload('add', { files: blob })\n})\n```\n\n----------------------------------------\n\nTITLE: Comparing Alias Access Methods in Cypress\nDESCRIPTION: This snippet compares two methods of accessing aliases: using 'this' and using cy.get(). It illustrates the difference in behavior when the aliased value changes after initial evaluation.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/variables-and-aliases.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst favorites = { color: 'blue' }\n\ncy.wrap(favorites).its('color').as('favoriteColor')\n\ncy.then(function () {\n  favorites.color = 'red'\n})\n\ncy.get('@favoriteColor').then(function (aliasValue) {\n  expect(aliasValue).to.eql('red')\n\n  expect(this.favoriteColor).to.eql('blue')\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for .children() Command in Cypress\nDESCRIPTION: Shows the various syntax options for the .children() command including without arguments, with a selector, with options, or with both selector and options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/children.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.children()\n.children(selector)\n.children(options)\n.children(selector, options)\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of last() Command in Cypress\nDESCRIPTION: Demonstrates the correct way to use the .last() command to yield the last link in a navigation menu.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/last.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('nav a').last() // Yield last link in nav\n```\n\n----------------------------------------\n\nTITLE: Implementing Cognito Login Command with Amplify v5\nDESCRIPTION: Cypress command implementation for programmatic login using AWS Amplify v5, which handles authentication with Amazon Cognito and sets required localStorage tokens.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/amazon-cognito-authentication.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport Amplify, { Auth } from 'aws-amplify'\n\nAmplify.configure(Cypress.env('awsConfig'))\n\n// Amazon Cognito\nCypress.Commands.add('loginByCognitoApi', (username, password) => {\n  const log = Cypress.log({\n    displayName: 'COGNITO LOGIN',\n    message: [`🔐 Authenticating | ${username}`],\n    // @ts-ignore\n    autoEnd: false,\n  })\n\n  log.snapshot('before')\n\n  const signIn = Auth.signIn({ username, password })\n\n  cy.wrap(signIn, { log: false }).then((cognitoResponse) => {\n    const keyPrefixWithUsername = `${cognitoResponse.keyPrefix}.${cognitoResponse.username}`\n\n    window.localStorage.setItem(\n      `${keyPrefixWithUsername}.idToken`,\n      cognitoResponse.signInUserSession.idToken.jwtToken\n    )\n\n    window.localStorage.setItem(\n      `${keyPrefixWithUsername}.accessToken`,\n      cognitoResponse.signInUserSession.accessToken.jwtToken\n    )\n\n    window.localStorage.setItem(\n      `${keyPrefixWithUsername}.refreshToken`,\n      cognitoResponse.signInUserSession.refreshToken.token\n    )\n\n    window.localStorage.setItem(\n      `${keyPrefixWithUsername}.clockDrift`,\n      cognitoResponse.signInUserSession.clockDrift\n    )\n\n    window.localStorage.setItem(\n      `${cognitoResponse.keyPrefix}.LastAuthUser`,\n      cognitoResponse.username\n    )\n\n    window.localStorage.setItem('amplify-authenticator-authState', 'signedIn')\n    log.snapshot('after')\n    log.end()\n  })\n\n  cy.visit('/')\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Average Passing Build Duration API Endpoint\nDESCRIPTION: This API endpoint retrieves the average, median, min, and max durations of passing runs over time, returning project data and various duration metrics.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_25\n\nLANGUAGE: http\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=average-passing-build-duration&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Webpack Dev Server Configuration\nDESCRIPTION: Package.json configuration for webpack-dev-server using GET method for server ping\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/overview.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"start-server-and-test start http-get://localhost:3030 cy:run\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Clock Example in Cypress\nDESCRIPTION: Examples showing how to restore the clock using both then() callback and invoke() methods.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/tick.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clock()\ncy.visit('http://localhost:3333')\ncy.get('#search').type('Acme Company')\ncy.tick(1000)\n// more test code here\n\n// restore the clock\ncy.clock().then((clock) => {\n  clock.restore()\n})\n// more test code here\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clock().invoke('restore')\n```\n\n----------------------------------------\n\nTITLE: Defining NPM Keywords for Cypress Preprocessor (JSON)\nDESCRIPTION: Specifies the recommended npm keywords to use when publishing a Cypress preprocessor. These keywords help in discovering the preprocessor in the npm registry.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/preprocessors-api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"keywords\": [\n  \"cypress\",\n  \"cypress-plugin\",\n  \"cypress-preprocessor\"\n]\n```\n\n----------------------------------------\n\nTITLE: Using Device Presets in Cypress Viewport Command\nDESCRIPTION: Demonstrates how to use a preset device configuration instead of specifying exact dimensions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/viewport.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.viewport('iphone-6') // viewport will change to 414px x 736px\n```\n\n----------------------------------------\n\nTITLE: Cypress.Keyboard API Syntax in JavaScript\nDESCRIPTION: Shows the basic syntax for accessing the Cypress.Keyboard API, including the Keys method for accessing key constants and the defaults method for setting typing behavior.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/keyboard-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Keyboard.Keys(key)\nCypress.Keyboard.defaults(options)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for cy.press() Command\nDESCRIPTION: Defines the TypeScript interface for the press command, showing the function signature with supported parameter types and return value.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/press.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PressCommand {\n  (\n    key: KeyPressSupportedKeys,\n    options?: Partial<Cypress.Loggable> & Partial<Cypress.Timeoutable>\n  ): void\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Firefox Flag in Cypress Browser Launch Options\nDESCRIPTION: This code demonstrates how to set a specific Firefox flag, in this case 'browser.send_pings', by modifying the browser preferences during the launch process.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/browser-launch-api.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\non('before:browser:launch', (browser = {}, launchOptions) => {\n  if (browser.family === 'firefox') {\n    launchOptions.preferences['browser.send_pings'] = true\n  }\n\n  return launchOptions\n})\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples for Cypress 'invoke' Command\nDESCRIPTION: Shows examples of improper usage of '.invoke()', including calling directly off 'cy', invoking a property that isn't a function, and multiple invocations from chaining.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/invoke.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.invoke('convert') // Errors, cannot be chained off 'cy'\ncy.wrap({ name: 'Jane' }).invoke('name') // Errors, 'name' is not a function\ncy.wrap({ animate: fn })\n  .invoke('animate')\n  .then(() => {}) // 'animate' will be called multiple times\n```\n\n----------------------------------------\n\nTITLE: ScrollTo Command Log Example\nDESCRIPTION: Example demonstrating how to scroll the window and an element in sequence.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/scrollto.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.scrollTo('bottom')\ncy.get('#scrollable-horizontal').scrollTo('right')\n```\n\n----------------------------------------\n\nTITLE: Cypress Directory TSConfig Include Configuration\nDESCRIPTION: Configuration for including TypeScript declaration files in the Cypress directory's tsconfig.json file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/typescript-support.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"include\": [\n  \"**/*.ts\",\n  \"../cypress.d.ts\"\n]\n```\n\n----------------------------------------\n\nTITLE: Double-clicking a Div Element in Cypress\nDESCRIPTION: Example of double-clicking a div element with a specific class.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/dblclick.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.action-div').dblclick()\n```\n\n----------------------------------------\n\nTITLE: Testing a Datalist with 'next' Command\nDESCRIPTION: Example of using 'next' to test the contents of a datalist element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/next.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<input list=\"fruit\" />\n<datalist id=\"fruit\">\n  <option>Apple</option>\n  <option>Banana</option>\n  <option>Cantaloupe</option>\n</datalist>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#fruit option')\n  .first()\n  .should('have.text', 'Apple')\n  .next()\n  .should('have.text', 'Banana')\n  .next()\n  .should('have.text', 'Cantaloupe')\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of parent Command in Cypress\nDESCRIPTION: Shows examples of incorrect usage of the parent command that would result in errors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/parent.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.parent() // Errors, cannot be chained off 'cy'\ncy.reload().parent() // Errors, 'reload' does not yield DOM element\n```\n\n----------------------------------------\n\nTITLE: GitLab CI Setup with Cypress Docker Image\nDESCRIPTION: Uses the official Cypress Docker image to run tests in Firefox browser. This setup allows for cross-browser testing in CI.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/gitlab-ci.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  - test\n\ntest:\n  image: cypress/browsers:22.12.0\n  stage: test\n  script:\n    # install dependencies\n    - npm ci\n    # start the server in the background\n    - npm start &\n    # run Cypress tests\n    - npx cypress run --browser firefox\n```\n\n----------------------------------------\n\nTITLE: Clearing Session Storage - Basic Syntax\nDESCRIPTION: Basic syntax examples for clearing session storage data using the clearAllSessionStorage command. Shows both with and without options parameter.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clearallsessionstorage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clearAllSessionStorage()\ncy.clearAllSessionStorage(options)\n```\n\n----------------------------------------\n\nTITLE: Using the Logout Custom Command\nDESCRIPTION: Shows how to use the logout custom command to sign out a user during a test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ncy.logout()\n```\n\n----------------------------------------\n\nTITLE: Getting Platform Information in Cypress\nDESCRIPTION: Basic usage of Cypress.platform to get the underlying OS name. Returns a string indicating the platform as provided by Node's os.platform().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/platform.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.platform // 'darwin'\n```\n\n----------------------------------------\n\nTITLE: Installing Cypress with yarn (Shell)\nDESCRIPTION: This command uses the Yarn package manager to add Cypress to the project. The `--dev` flag specifies that Cypress is a development dependency and should be added to the `devDependencies` in the `package.json` file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_cypress-install-commands.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add cypress --dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Google Auth\nDESCRIPTION: Example of environment variables setup for Google authentication credentials in a .env file\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/google-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nREACT_APP_GOOGLE_CLIENTID = 'your-client-id'\nREACT_APP_GOOGLE_CLIENT_SECRET = 'your-client-secret'\nGOOGLE_REFRESH_TOKEN = 'your-refresh-token'\n```\n\n----------------------------------------\n\nTITLE: Configuring cy.mount Command in Cypress Support File\nDESCRIPTION: This code snippet demonstrates how to configure the cy.mount command in the Cypress support file using the custom mount function from the Framework Definition.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/custom-frameworks.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount } from '@lmiller1990/cypress-ct-solid-js'\n\nCypress.Commands.add('mount', mount)\n```\n\n----------------------------------------\n\nTITLE: Testing Counter with Data Attribute Selector\nDESCRIPTION: Updated test using data-cy attribute selector for more robust element selection across different frameworks.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/get-started.mdx#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nit('stepper should default to 0', () => {\n  cy.mount(<Stepper />)\n  cy.get('[data-cy=counter]').should('have.text', '0')\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Test Isolation for Cypress Suite in JavaScript\nDESCRIPTION: This snippet demonstrates configuration of a Cypress test suite with testIsolation set to false. It wraps a test group in describe() using suite-level configuration, which disables the default state-reset between tests. Use with caution, as this can lead to shared state leakage and flakiness unless meticulously managed. Requires Cypress 12+ and appropriate project configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe('workflow', { testIsolation: false }, () => {\\n  ...\\n})\n```\n\n----------------------------------------\n\nTITLE: Updating .within() Usage for Multiple Elements in Cypress 12\nDESCRIPTION: Shows how to refactor .within() calls that previously accepted multiple elements to work with Cypress 12's stricter implementation.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_33\n\nLANGUAGE: diff\nCODE:\n```\ncy.get('tr')\n+  .each($tr => {\n+    cy.wrap($tr).within(() => {\n+      cy.contains('Edit').should('have.attr', 'disabled')\n+    })\n+  })\n```\n\n----------------------------------------\n\nTITLE: Performing Negative Assertions in Protractor (JavaScript)\nDESCRIPTION: These Protractor snippets demonstrate negative assertions. The first checks if an element with class '.todo' does *not* have the class 'completed' by manipulating the class string. The second checks if an element with ID 'loading' is *not* displayed.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(\n  element(by.css('.todo'))\n    .getAttribute('class')\n    .then((classes) => {\n      return classes.split(' ').indexOf('completed') !== -1\n    })\n).not.toBe(true)\n\nexpect(element(by.id('loading')).isDisplayed()).not.toBe(true)\n```\n\n----------------------------------------\n\nTITLE: Configuring View Filters in Cypress UI Coverage\nDESCRIPTION: This JSON configuration example demonstrates how to exclude specific URLs from being tracked as Views using the viewFilters property. The include property set to false prevents matching URLs from being included in coverage calculations.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/core-concepts/views.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"viewFilters\": [\n    {\n      \"pattern\": \"https://auth.example.com/*\",\n      \"include\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Caching Dependencies for Cypress Tests in GitHub Actions\nDESCRIPTION: This YAML configuration defines an install job that checks out the code, installs Cypress and npm dependencies, and caches the build directory for use in subsequent jobs.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/github-actions.mdx#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: Cypress Tests\n\non: push\n\njobs:\n  install:\n    runs-on: ubuntu-24.04\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Cypress install\n        uses: cypress-io/github-action@v6\n        with:\n          # Disable running of tests within install job\n          runTests: false\n          build: npm run build\n\n      - name: Save build folder\n        uses: actions/upload-artifact@v4\n        with:\n          name: build\n          if-no-files-found: error\n          path: dist\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic File Contents with Cypress Buffer\nDESCRIPTION: Demonstrates creating multiple Buffer instances with dynamic content for file upload testing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/buffer.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst files = []\n\nfor (var i = 1; i <= 10; i++) {\n  files.push(Cypress.Buffer.from(`Contents of file #${i}`))\n}\n\n// Attach 10 files, of the form \"Contents of file #1\", \"Contents of file #2\", etc.\ncy.get('input[type=file]').selectFile(files)\n```\n\n----------------------------------------\n\nTITLE: Checking Window Object Type with isWindow in JavaScript\nDESCRIPTION: Demonstrates how to check if an object is a window object using Cypress.dom.isWindow. Returns true for window objects.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/dom.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get(window).then(($el) => {\n  Cypress.dom.isWindow($el) // true\n})\n```\n\n----------------------------------------\n\nTITLE: Cypress Event: command:enqueued\nDESCRIPTION: Event fired when a Cypress command is initially queued for execution.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/catalog-of-events.mdx#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nEvent: command:enqueued\\nYields: command properties and arguments (Object)\n```\n\n----------------------------------------\n\nTITLE: Excluding Dynamic Elements by Attribute Pattern in Cypress Config (JSON)\nDESCRIPTION: Demonstrates a Cypress configuration using `elementFilters` to exclude elements whose class attribute value begins with a specific string ('auth'). The selector `[class^='auth']` uses a CSS attribute substring match, and `include: false` ensures exclusion.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_elementfilters.mdx#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"elementFilters\": [\n    {\n      \"selector\": \"[class^='auth']\",\n      \"include\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting on Parent Element Class in Cypress\nDESCRIPTION: Example showing how to get the parent of an active list item and assert that it has a specific class.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/parent.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('li.active').parent().should('have.class', 'nav')\n```\n\n----------------------------------------\n\nTITLE: Asserting CSS Properties in Protractor (JavaScript)\nDESCRIPTION: These Protractor snippets demonstrate asserting CSS properties of elements. The first checks if an element with class '.completed' has 'text-decoration: line-through'. The second checks if an element with ID 'accordion' does not have 'display: none'. It uses `getCssValue()`.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// assert .completed has css style \"line-through\" for \"text-decoration\" property\nexpect(element(by.css('.completed')).getCssValue('text-decoration')).toBe(\n  'line-through'\n)\n\n// assert the accordion does not have a \"display: none\"\nexpect(element(by.id('accordion')).getCssValue('display')).not.toBe('none')\n```\n\n----------------------------------------\n\nTITLE: Configuring pnpm to Disable Side Effects Cache for Cypress\nDESCRIPTION: Command to disable pnpm's side effects cache at the project level, which is necessary for Cypress to execute its postinstall script and install the Cypress binary properly.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/get-started/install-cypress.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm config set side-effects-cache false --location project\n```\n\n----------------------------------------\n\nTITLE: Updating Cookie Preservation in Cypress 12\nDESCRIPTION: Demonstrates how to update code that uses removed Cypress.Cookies APIs to use cy.session() for preserving cookies between tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_30\n\nLANGUAGE: diff\nCODE:\n```\ndescribe('Dashboard', () => {\n  beforeEach(() => {\n-    cy.login()\n-    Cypress.Cookies.preserveOnce('session_id', 'remember_token')\n+    cy.session('unique_identifier', cy.login, {\n+       validate () {\n+        cy.getCookies().should('have.length', 2)\n+       },\n+    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Angular Input Signals with Inferred Generic Type\nDESCRIPTION: Demonstrates how to test Angular input signals by passing a value of the signal's generic type. Cypress automatically wraps the value in a signal and merges it into the component properties.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/examples.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nlet titleProp = 'Test Component'\ncy.mount(TestComponent, {\n  componentProperties: {\n    title: titleProp,\n  },\n})\n\ncy.get('[data-cy=\"test-component-title-display\"]').should(\n  'have.text',\n  'Test Component'\n)\n```\n\n----------------------------------------\n\nTITLE: Development Environment Configuration\nDESCRIPTION: JSON configuration file for development environment with baseUrl and environment variables.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/configuration-api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"baseUrl\": \"http://localhost:1234\",\n  \"env\": {\n    \"something\": \"development\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Test Uncaught Exception Handler\nDESCRIPTION: Example showing how to catch a single uncaught exception within a specific test using cy.on().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/catalog-of-events.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nit('is doing something very important', (done) => {\n  // this event will automatically be unbound when this\n  // test ends because it's attached to 'cy'\n  cy.on('uncaught:exception', (err, runnable) => {\n    expect(err.message).to.include('something about the error')\n\n    // using mocha's async done callback to finish\n    // this test so we prove that an uncaught exception\n    // was thrown\n    done()\n\n    // return false to prevent the error from\n    // failing this test\n    return false\n  })\n\n  // assume this causes an error\n  cy.get('button').click()\n})\n```\n\n----------------------------------------\n\nTITLE: Wrapping React App with Okta Security Provider (React, TypeScript/JSX)\nDESCRIPTION: This snippet initializes OktaAuth with configuration variables and wraps the React application in the Security provider from '@okta/okta-react', conditionally rendering the Okta-protected app or the default app. The setup enables Okta authentication, redirect handling, and application-wide security, and uses react-router and theming providers. Inputs are configuration variables; outputs are a secured or unsecured SPA root render.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/okta-authentication.mdx#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n// initial imports ...\nimport { OktaAuth } from '@okta/okta-auth-js'\nimport { Security } from '@okta/okta-react'\nimport AppOkta from './containers/AppOkta'\n\n// ...\n\nconst oktaAuth = new OktaAuth({\n  issuer: `https://${process.env.REACT_APP_OKTA_DOMAIN}/oauth2/default`,\n  clientId: process.env.REACT_APP_OKTA_CLIENTID,\n  redirectUri: window.location.origin + '/implicit/callback',\n})\n\nReactDOM.render(\n  <Router history={history}>\n    <ThemeProvider theme={theme}>\n      {process.env.REACT_APP_OKTA ? (\n        <Security oktaAuth={oktaAuth}>\n          <AppOkta />\n        </Security>\n      ) : (\n        <App />\n      )}\n    </ThemeProvider>\n  </Router>,\n  document.getElementById('root')\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Browsers Tested API Endpoint\nDESCRIPTION: This API endpoint monitors which web browsers are being tested in an organization, returning spec count and browser data.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=browsers-tested&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Example of URL Formats for blockHosts Configuration\nDESCRIPTION: Sample URLs that demonstrate the format used when configuring the blockHosts option in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/configuration.mdx#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nhttps://www.google-analytics.com/ga.js\n\nhttp://localhost:1234/some/user.json\n```\n\n----------------------------------------\n\nTITLE: Command Log Example in Cypress\nDESCRIPTION: Example showing how to create a clock and tick it forward by 1 second for command logging purposes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/tick.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clock()\ncy.tick(1000)\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests via npx (Shell)\nDESCRIPTION: Executes all Cypress tests headlessly using npx, the Node Package Runner bundled with npm. This command locates and runs the Cypress binary installed within the project's node_modules.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_cypress-run-commands.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx cypress run\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listener in Cypress\nDESCRIPTION: Demonstrates how to register a listener for a Cypress event using the 'on' function. This pattern is used to hook into various stages of the Cypress lifecycle.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\non('<event>', (arg1, arg2) => {\n  // plugin stuff here\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Test Title in Cypress\nDESCRIPTION: Shows how to access and verify the current test title using Cypress.currentTest.title property within a test case.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/currenttest.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('app layout and responsiveness', () => {\n  it('toggles the nav', () => {\n    expect(Cypress.currentTest.title).to.eq('toggles the nav')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Working with Binary File Contents in Cypress 10\nDESCRIPTION: Demonstrates how to work with binary file contents in Cypress 10, showing the simpler approach compared to the cypress-file-upload plugin that required manual blob conversion.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nconst special = 'file.spss'\n\ncy.fixture(special, 'binary')\n  .then(Cypress.Blob.binaryStringToBlob)\n  .then((fileContent) => {\n    // ...process file contents\n    cy.get('[data-cy=\"file-input\"]').attachFile({\n      fileContent,\n      filePath: special,\n      encoding: 'utf-8',\n      lastModified: new Date().getTime(),\n    })\n  })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst special = 'file.spss'\n\ncy.fixture(special, { encoding: null }).then((contents) => {\n  // ...process file contents\n  cy.get('[data-cy=\"file-input\"]').selectFile({\n    contents,\n    fileName: special,\n    lastModified: new Date().getTime(),\n  })\n})\n\n// Or\n\ncy.fixture(special, { encoding: null })\n  .then((contents) => {\n    // ...process file contents\n  })\n  .as('special')\n\ncy.get('[data-cy=\"file-input\"]').selectFile('@special')\n```\n\n----------------------------------------\n\nTITLE: Force checking a hidden checkbox in Cypress\nDESCRIPTION: This code shows how to force a check action on a hidden checkbox element, ignoring visibility state.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/hover.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.checkbox').check({ force: true })\n```\n\n----------------------------------------\n\nTITLE: Checking Custom Window Properties in Cypress\nDESCRIPTION: Example of checking a custom property set on the window object using the .its() command and assertion chaining.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/window.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.tags = {\n  foo: 'bar',\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.window().its('tags.foo').should('equal', 'bar')\n```\n\n----------------------------------------\n\nTITLE: Using Linear Easing Animation with scrollIntoView\nDESCRIPTION: Example of using the easing option to specify a linear animation when scrolling an element into view.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/scrollintoview.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.next-page').scrollIntoView({ easing: 'linear' })\n```\n\n----------------------------------------\n\nTITLE: Migrating from cypress-file-upload to selectFile Command - Basic Example\nDESCRIPTION: Shows how to migrate from using the third-party cypress-file-upload plugin's attachFile method to Cypress 10's built-in selectFile command for uploading files.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[data-cy=\"file-input\"]').attachFile('myfixture.json')\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[data-cy=\"file-input\"]').selectFile('cypress/fixtures/myfixture.json')\n\n// Or\n\ncy.fixture('myfixture.json', { encoding: null }).as('myfixture')\ncy.get('[data-cy=\"file-input\"]').selectFile('@myfixture')\n```\n\n----------------------------------------\n\nTITLE: Checking Focusability with isFocusable in JavaScript\nDESCRIPTION: Demonstrates how to check if an element can receive focus using Cypress.dom.isFocusable. Used internally by Cypress for actionability.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/dom.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input').then(($el) => {\n  Cypress.dom.isFocusable($el) // true\n})\n```\n\n----------------------------------------\n\nTITLE: Finding List Items within Navigation in Cypress\nDESCRIPTION: Shows how to chain commands to find specific list items within a navigation structure.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/find.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.left-nav>.nav').find('>li')\n```\n\n----------------------------------------\n\nTITLE: DOM Element Interaction Example\nDESCRIPTION: Sample HTML and JavaScript demonstrating DOM element interaction that can cause detachment errors in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/error-messages.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <div data-testid=\"parent\">\n    <button>Delete</button>\n  </div>\n</body>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n$('button').click(function () {\n  // when the <button> is clicked\n  // we remove the button from the DOM,\n  // and add a new, identical one.\n  $(this).replaceWith(this.outerHTML)\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Chrome Web Security in Cypress Configuration (TypeScript)\nDESCRIPTION: This TypeScript-style configuration snippet demonstrates how to set the 'chromeWebSecurity' configuration option to false in the Cypress config file. This option allows Cypress to interact with cross-origin pages by disabling Chrome's same-origin policy, which may be needed for certain cross-origin testing scenarios. This setting applies only to Chrome-family browsers; enabling it for other browsers is not supported. Edit your 'cypress.config.ts' or equivalent file to apply.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/error-messages.mdx#2025-04-22_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  chromeWebSecurity: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Setup File in Main Application Entry Point\nDESCRIPTION: Example of how to use the setup.js file in the main.js application entry point to create and render the application.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/styling-components.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from './setup.js'\n\nReactDOM.render(createApp())\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Viewport Dimensions in Cypress\nDESCRIPTION: Shows how to set custom default viewport dimensions in the Cypress configuration file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/viewport.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  viewportWidth: 1000,\n  viewportHeight: 660,\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Commit Message for Cypress Cloud in GitHub Actions\nDESCRIPTION: This YAML configuration shows how to customize the commit message sent to Cypress Cloud and re-enable PR comment bot functionality by setting specific environment variables in the GitHub Action.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/github-actions.mdx#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nname: Cypress tests\non: push\njobs:\n  cypress-run:\n    name: Cypress run\n    runs-on: ubuntu-24.04\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Cypress run\n        uses: cypress-io/github-action@v6\n        with:\n          record: true\n        env:\n          # overwrite commit message sent to Cypress Cloud\n          COMMIT_INFO_MESSAGE: ${{github.event.pull_request.title}}\n          # re-enable PR comment bot\n          COMMIT_INFO_SHA: ${{github.event.pull_request.head.sha}}\n```\n\n----------------------------------------\n\nTITLE: Overwriting Existing Screenshots in Cypress\nDESCRIPTION: Configures Cypress to overwrite existing screenshot files with the same file name instead of creating unique files for each screenshot in the same test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/screenshot-api.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Screenshot.defaults({\n  overwrite: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Debugging Glob Patterns with Cypress.minimatch in JavaScript\nDESCRIPTION: Demonstrates passing the `debug: true` option as the third argument to `Cypress.minimatch`. This enables verbose logging to the console, which helps in understanding how the pattern matching is evaluated and diagnosing why a pattern might not be working as expected.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_43\n\nLANGUAGE: js\nCODE:\n```\nCypress.minimatch('http://localhost/users?_limit=3', '**/users?_limit=+(3|5)', {\n  debug: true,\n})\n// true (plus debug messages)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Cypress Command for Amazon Cognito Authentication in Tests\nDESCRIPTION: This snippet demonstrates how to use the custom loginByCognito command in a Cypress test. It shows logging in via Amazon Cognito, completing the onboarding process, and logging out.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/amazon-cognito-authentication.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\ndescribe('Cognito, cy.origin() login', function () {\n  beforeEach(function () {\n    // Seed database with test data\n    cy.task('db:seed')\n\n    // login via Amazon Cognito via cy.origin()\n    cy.loginByCognito(\n      Cypress.env('cognito_username'),\n      Cypress.env('cognito_password')\n    )\n  })\n\n  it('shows onboarding', function () {\n    cy.contains('Get Started').should('be.visible')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Cypress Component Testing Framework\nDESCRIPTION: Example package.json configuration for a Cypress Component Testing Framework Definition. Shows required fields including the package naming convention (cypress-ct-*), exports configuration for Definition and Mount Adapter files, and necessary dependencies.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/custom-frameworks.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@lmiller1990/cypress-ct-solid-js\",\n  \"version\": \"0.0.4\",\n  \"description\": \"Example Framework Definition for Cypress and Solid.js\",\n  \"exports\": {\n    \"node\": \"./definition.cjs\",\n    \"default\": \"./index.mjs\"\n  },\n  \"files\": [\n    \"package.json\",\n    \"definition.cjs\",\n    \"index.mjs\"\n  ],\n  \"dependencies\": {\n    \"@cypress/mount-utils\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"solid-js\": \"^1.6.0\"\n  },\n  \"peerDependencies\": {\n    \"solid-js\": \"^1.6.0\"\n    \"cypress\": \"^12.7.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parallel E2E Test Configuration\nDESCRIPTION: YAML anchor definition for running E2E tests in parallel with Cypress Cloud integration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/bitbucket-pipelines.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimage: cypress/base:22.12.0\n\n## job definition for running E2E tests in parallel\ne2e: &e2e\n  name: E2E tests\n  caches:\n    - node\n    - cypress\n  script:\n    - npm run start &\n    - npm run e2e:record -- --parallel --group UI-Chrome --ci-build-id $BITBUCKET_BUILD_NUMBER\n  artifacts:\n    # store any generates images and videos as artifacts\n    - cypress/screenshots/**\n    - cypress/videos/**\n```\n\n----------------------------------------\n\nTITLE: Chained Dependent Tests with Disabled Isolation in Cypress JavaScript\nDESCRIPTION: This code illustrates an anti-pattern: a Cypress test suite where multiple tests rely upon mutations in previous tests due to testIsolation: false. Each test (login, profile navigation, data updating) depends on successful previous steps. This increases the risk of cascading failures and unreliable results. Requires Cypress with testIsolation disabled; recommended only for legacy or highly controlled scenarios.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe('workflow', { testIsolation: false }, () => {\\n  it('logs in', () => {\\n    cy.visit('https://example.cypress.io/log-in')\\n    cy.get('username').type('User1')\\n    cy.get('password').type(Cypress.env('User1_password'))\\n    cy.get('button#login').click()\\n    cy.contains('User1')\\n  })\\n\\n  it('clicks user profile', () => {\\n    cy.get('User1').find('#profile_avatar').click()\\n    cy.contains('Email Preferences')\\n  })\\n\\n  it('updates profile', () => {\\n    cy.get('button#edit')\\n    cy.get('email').type('user1@email.com')\\n    cy.get('button#save').click()\\n  })\\n})\n```\n\n----------------------------------------\n\nTITLE: Running Cypress with Custom Binary Location on Windows\nDESCRIPTION: This snippet shows how to run Cypress using a custom binary location on Windows by setting the CYPRESS_RUN_BINARY environment variable.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/advanced-installation.mdx#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nCYPRESS_RUN_BINARY=~/Downloads/Cypress/Cypress.exe npx cypress run\n```\n\n----------------------------------------\n\nTITLE: Using nextUntil with Selectors in Cypress\nDESCRIPTION: Shows how to use nextUntil to find all sibling elements between the #veggies element and the #nuts element, returning a collection of list items.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/nextuntil.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n//returns [<li>cucumbers</li>, <li>carrots</li>, <li>corn</li>]\ncy.get('#veggies').nextUntil('#nuts')\n```\n\n----------------------------------------\n\nTITLE: Finding the Last Button in a Form with Cypress\nDESCRIPTION: Example showing how to chain commands to find the last button element within a form using the .last() command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/last.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('form').find('button').last()\n```\n\n----------------------------------------\n\nTITLE: Running Node Script for Cypress Tests\nDESCRIPTION: Shell command to execute the programmatic Cypress test script\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/overview.mdx#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nnode scripts/run-cypress-tests.js\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Typings for cy.mount() in Angular\nDESCRIPTION: TypeScript declaration for the custom cy.mount() command in Angular. This adds type support for the mount command in the Cypress namespace.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/mount.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mount } from 'cypress/angular'\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      mount: typeof mount\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Keystroke Delay in Test Configuration in JavaScript\nDESCRIPTION: Shows how to configure keystroke delay at the test or suite level using Cypress test configuration. This allows for setting different typing behaviors for specific tests or test suites.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/keyboard-api.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nit(\n  'removes keystroke delay for all typing in this test',\n  { keystrokeDelay: 0 },\n  () => {\n    cy.get('input').eq(0).type('fast typing')\n    cy.get('input').eq(1).type('more fast typing')\n  }\n)\n\ndescribe(\n  'removes keystroke delay in all tests in this suite',\n  { keystrokeDelay: 0 },\n  () => {\n    it('types fast in the first input', () => {\n      cy.get('input').eq(0).type('fast typing')\n    })\n\n    it('types fast in the second input', () => {\n      cy.get('input').eq(1).type('more fast typing')\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Correct Cypress.Blob Usage Example\nDESCRIPTION: Shows the correct way to call Cypress.Blob methods.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/blob.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Blob.method()\n```\n\n----------------------------------------\n\nTITLE: Configuring viewFilters Property in Cypress Reports\nDESCRIPTION: Basic syntax for configuring URL filters in Cypress reports. Each filter consists of a pattern using URL Pattern API syntax and an optional include flag that determines whether matching URLs should be included in the report.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_viewfilters.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"viewFilters\": [\n    {\n      \"pattern\": string,\n      \"include\": boolean\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of cy.go in Cypress\nDESCRIPTION: Demonstrates the correct way to use the cy.go command to navigate back in browser history.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/go.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.go('back')\n```\n\n----------------------------------------\n\nTITLE: Defining a Disabled Input Element (HTML)\nDESCRIPTION: This HTML snippet shows a standard text input element with the 'disabled' attribute set, making it non-interactive.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" id=\"example-input\" disabled />\n```\n\n----------------------------------------\n\nTITLE: Failed Usage of cy.$$ with jQuery Utility Methods\nDESCRIPTION: Shows why cy.$$ cannot be used with jQuery utility methods as it's only a wrapper for jQuery's DOM query functionality.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/$.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$$.each([1, 2, 3], (index, value) => {\n  expect(index).to.eq(value)\n}) // fails\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Dev Server in Cypress 10+ (TypeScript)\nDESCRIPTION: TypeScript version of webpack dev server configuration in Cypress 10+. This demonstrates how to import and configure the devServer with proper TypeScript syntax.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'cypress'\nimport webpackConfig from './webpack.config'\n\nexport default defineConfig({\n  component: {\n    devServer: {\n      framework: 'react', // or vue\n      bundler: 'webpack',\n      webpackConfig,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Form Example for Cypress Submit\nDESCRIPTION: Example HTML form structure that can be targeted with the submit command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/submit.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form id=\"contact\">\n  <input type=\"text\" name=\"message\" />\n  <button type=\"submit\">Send</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Command Log Example\nDESCRIPTION: Shows how to use the .parents() command in a test and what is displayed in the command log when executed.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/parents.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('li.active').parents()\n```\n\n----------------------------------------\n\nTITLE: Using a Cypress Wrapper Script from Shell\nDESCRIPTION: Shows how to execute a custom wrapper script that uses the cypress.cli API to parse command line arguments.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/module-api.mdx#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnode ./wrapper cypress run --browser chrome --config ...\n```\n\n----------------------------------------\n\nTITLE: Cypress Event: command:retry\nDESCRIPTION: Event fired when a command enters retry mode due to failed assertions or timeout conditions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/catalog-of-events.mdx#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nEvent: command:retry\\nYields: retry options (Object)\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Names to Element Groups in Cypress UI Coverage\nDESCRIPTION: Configuration example showing how to provide a custom name for groups of elements that share a common selector pattern. This improves readability in coverage reports.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/elementgroups.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"elementGroups\": [\n      {\n        \"selector\": \"[id^='listbox-button-']\",\n        \"name\": \"Add Button\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Script Configuration\nDESCRIPTION: Configuration for start-server-and-test module in package.json to handle server startup and test execution\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/overview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"start\": \"my-server -p 3030\",\n    \"cy:run\": \"cypress run\",\n    \"test\": \"start-server-and-test start http://localhost:3030 cy:run\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Element Yielding after Value Assertion in Cypress\nDESCRIPTION: Shows that the element is yielded to the callback function after a value assertion with 'should'.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button')\n  .should('have.id', 'new-user')\n  .then(($button) => {\n    // $button is yielded\n  })\n```\n\n----------------------------------------\n\nTITLE: Cypress Test without Cucumber\nDESCRIPTION: Demonstrates a basic Cypress test structure without using Cucumber syntax.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/selenium-to-cypress.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nit(\"I should see a search bar\", () => {\n  cy.visit(\"https://www.duckduckgo.com\");\n  cy.get(\"input\").should(\n    \"have.attr\",\n    \"placeholder\",\n    \"Search the web without being tracked\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Accessing Clock via this.clock in then()\nDESCRIPTION: An alternative way to access the clock object using this.clock inside a then() callback.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clock.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clock()\ncy.get('form').then(($form) => {\n  this.clock.tick(1000)\n  // do something with $form ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using Cypress.testingType Syntax\nDESCRIPTION: Basic syntax for retrieving the current testing type in Cypress. Returns either 'e2e' for E2E Testing or 'component' for Component Testing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/testing-type.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.testingType // returns 'e2e' or 'component'\n```\n\n----------------------------------------\n\nTITLE: Application Code for Timeout Example\nDESCRIPTION: JavaScript application code that uses setTimeout to add and remove classes, used in the following Cypress assertion example.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// Application Code\n$('button').click(function () {\n  $button = $(this)\n\n  setTimeout(() => {\n    $button.removeClass('inactive').addClass('active')\n  }, 1000)\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Scrollability with isScrollable in JavaScript\nDESCRIPTION: Demonstrates how to check if an element is scrollable using Cypress.dom.isScrollable. Used internally by Cypress for actionability.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/dom.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('body').then(($el) => {\n  Cypress.dom.isScrollable($el) // true\n})\n```\n\n----------------------------------------\n\nTITLE: Logging Cypress.spec Information Example in JavaScript\nDESCRIPTION: Demonstrates how to use Cypress.spec within a test to log information about the current spec file. The returned object contains name, relative path, and absolute path properties.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/spec.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nit('log spec info', () => {\n  console.log(Cypress.spec)\n  // {\n  //   name: 'filter.cy.js',\n  //   relative: 'cypress/e2e/filter.cy.js',\n  //   absolute: '/Users/janelane/Dev/web-app/cypress/e2e/filter.cy.js',\n  // }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Selector with .prev() Command in Cypress\nDESCRIPTION: Example of using .prev() with a selector to filter the previous elements that match a specific class.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/prev.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>Cockatiels</li>\n  <li>Lorikeets</li>\n  <li class=\"active\">Cockatoos</li>\n  <li>Conures</li>\n  <li>Eclectus</li>\n</ul>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// yields <li>Cockatoos</li>\ncy.get('li').prev('.active')\n```\n\n----------------------------------------\n\nTITLE: Stopping Tests When a Condition is Met in beforeEach\nDESCRIPTION: Example of using Cypress.stop() in a beforeEach hook to halt testing when an environment condition is not met, such as incorrect environment setup.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/stop.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => {\n  if (env !== 'expected-condition') {\n    cy.log('Stop tests - environment is not setup correctly')\n    Cypress.stop()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Global Shortcuts in Cypress\nDESCRIPTION: Shows how to use keyboard shortcuts that apply to the entire document or body, such as arrow keys and specific key combinations.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/type.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('body').type(\n  '{upArrow}{upArrow}{downArrow}{downArrow}{leftArrow}{rightArrow}{leftArrow}{rightArrow}ba'\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for Cypress wrap Command\nDESCRIPTION: Demonstrates the basic syntax patterns for the Cypress wrap command with and without options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/wrap.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.wrap(subject)\ncy.wrap(subject, options)\n```\n\n----------------------------------------\n\nTITLE: Disabling Animation Checks in Cypress Click Command\nDESCRIPTION: Example showing how to disable animation checks when clicking elements using the waitForAnimations option.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/error-messages.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[data-testid=\"modal-close\"]').click({ waitForAnimations: false })\n```\n\n----------------------------------------\n\nTITLE: Checking Invisible Checkbox in Cypress\nDESCRIPTION: Example of using the 'force' option to check an invisible checkbox.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/check.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.action-checkboxes')\n  .should('not.be.visible') // Passes\n  .check({ force: true })\n  .should('be.checked') // Passes\n```\n\n----------------------------------------\n\nTITLE: Conditional Uncaught Exception Handling\nDESCRIPTION: Example showing how to conditionally handle specific uncaught exceptions based on error message.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/catalog-of-events.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.on('uncaught:exception', (err, runnable) => {\n  // we expect a 3rd party library error with message 'list not defined'\n  // and don't want to fail the test so we return false\n  if (err.message.includes('list not defined')) {\n    return false\n  }\n  // we still want to ensure there are no other unexpected\n  // errors, so we let them fail the test\n})\n```\n\n----------------------------------------\n\nTITLE: Using Cypress Spy to Test Component Events in Svelte\nDESCRIPTION: This snippet demonstrates creating a spy for a Svelte component to validate that clicking the increment button fires an onChange event with the correct value. The approach is similar to Vue, passing the spy as a prop to the component.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/get-started.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nit('clicking + fires a change event with the incremented value', () => {\n  const onChangeSpy = cy.spy().as('onChangeSpy')\n  cy.mount(Stepper, { props: { onChange: onChangeSpy } })\n  cy.get('[data-cy=increment]').click()\n  cy.get('@onChangeSpy').should('have.been.calledWith', 1)\n})\n```\n\n----------------------------------------\n\nTITLE: Invoking show method to make hidden element visible in Cypress\nDESCRIPTION: This code shows how to make a hidden element visible by invoking the 'show' method, allowing it to be clicked.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/hover.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.hidden').invoke('show').click()\n```\n\n----------------------------------------\n\nTITLE: Checking Document Type with isDocument in JavaScript\nDESCRIPTION: Shows how to determine if a node is of document type using Cypress.dom.isDocument. Returns a boolean value.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/dom.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('p').then(($el) => {\n  Cypress.dom.isDocument($el) // false\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Amplify for Amazon Cognito Authentication (v5.x.x)\nDESCRIPTION: This snippet demonstrates how to configure AWS Amplify v5.x.x for Amazon Cognito authentication. It shows importing the necessary libraries, configuring the Auth category, and performing a sign-in operation.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/amazon-cognito-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Add 'aws-amplify' library into your application\nimport Amplify, { Auth } from 'aws-amplify'\n\n// Configure Auth category with your Amazon Cognito credentials\nAmplify.configure({\n  Auth: {\n    identityPoolId: 'XX-XXXX-X:XXXXXXXX-XXXX', // Amazon Cognito Identity Pool ID\n    region: 'XX-XXXX-X', // Amazon Cognito Region\n  },\n})\n\n// Call Auth.signIn with user credentials\nAuth.signIn(username, password)\n  .then((user) => console.log(user))\n  .catch((err) => console.log(err))\n```\n\n----------------------------------------\n\nTITLE: Configuring autoSpyOutputs in Custom cy.mount() for Angular/Cypress\nDESCRIPTION: Demonstrates how to create a custom cy.mount() command that defaults autoSpyOutputs to true for every mounted component in Angular/Cypress testing. This helps automatically create spies for output properties.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/examples.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      mount: typeof mount\n    }\n  }\n}\n\nCypress.Commands.add(\n  'mount',\n  (component: Type<unknown> | string, config: MountConfig<T>) => {\n    return mount(component, {\n      ...config,\n      autoSpyOutputs: true,\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Programmatic Cypress Test Execution with Module API\nDESCRIPTION: Node.js script demonstrating how to programmatically control server and test execution using Cypress Module API\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/overview.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// scripts/run-cypress-tests.js\n\nconst cypress = require('cypress')\nconst server = require('./lib/my-server')\n\n// start your server\nreturn server.start().then(() => {\n  // kick off a cypress run\n  return cypress.run().then((results) => {\n    // stop your server when it's complete\n    return server.stop()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Whitespace in Text Matching with Cypress 4.0\nDESCRIPTION: This snippet illustrates how Cypress 4.0 handles whitespace in text matching. It ignores invisible whitespaces, aligning with browser behavior.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_114\n\nLANGUAGE: html\nCODE:\n```\n<p>hello world</p>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('p').contains('hello world') // Fail in 3.x. Pass in 4.0.0.\ncy.get('p').contains('hello\\nworld') // Pass in 3.x. Fail in 4.0.0.\n```\n\n----------------------------------------\n\nTITLE: Custom Component Spec Pattern Configuration - JavaScript\nDESCRIPTION: Configures Cypress to look for component test spec files using a custom glob pattern for more precise control over test file locations and extensions. The example demonstrates setting the specPattern property to scan the src directory for files with .cy.js, .cy.jsx, .cy.ts, or .cy.tsx extensions. This pattern refines which files are detected as component tests when running Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_component-testing-config.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\\n  component: {\\n    specPattern: 'src/**/*.cy.{js,jsx,ts,tsx}'\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Structure - DOM Testing\nDESCRIPTION: A markdown table listing DOM-specific testing recipes in Cypress with links to examples and descriptions of functionality.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/recipes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Recipe | Description |\n| ------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------- |\n| [Tab Handling and Links](https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/testing-dom__tab-handling-links) | Links that open in a new tab |\n```\n\n----------------------------------------\n\nTITLE: Accessing Retry Attempt and Total Retries in Cypress Test\nDESCRIPTION: This snippet shows how to access the current retry attempt number and the total allowed retries within a Cypress test. It uses Cypress.currentRetry and cy.state('runnable') to retrieve this information.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/test-retries.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nit('does something differently on retry', { retries: 3 }, () => {\n  // Cypress.currentRetry returns the current test retry count\n  const attempt = Cypress.currentRetry\n  // cy.state('runnable') returns the current test object\n  // we can grab the total allowed attempts from its properties\n  const retries = cy.state('runnable')._retries\n  // use the \"attempt\" and \"retries\" values somehow\n})\n```\n\n----------------------------------------\n\nTITLE: Fixture File Selection Example\nDESCRIPTION: Shows how to select files from fixtures with null encoding to preserve file formatting.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/selectfile.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.fixture('file.json', null).as('myFixture')\ncy.get('input[type=file]').selectFile('@myFixture')\n```\n\n----------------------------------------\n\nTITLE: Importing mount function for Vue in Cypress component testing\nDESCRIPTION: The mount function for Vue components is exported from the cypress/vue library. It uses Vue Test Utils internally but mounts components in the actual browser instead of a virtual browser in node.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_import-mount-functions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount } from 'cypress/vue'\n```\n\n----------------------------------------\n\nTITLE: Blackout Elements in Cypress Screenshots\nDESCRIPTION: Example of configuring Cypress to black out specific elements in screenshots. This is useful for hiding sensitive information when capturing screenshots during test execution.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/screenshot-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Screenshot.defaults({\n  blackout: ['.secret-info', '[data-hide=true]'],\n})\n```\n\n----------------------------------------\n\nTITLE: Binding Preprocessor in setupNodeEvents Function (JavaScript)\nDESCRIPTION: Example of how to bind a preprocessor to the 'file:preprocessor' event in the setupNodeEvents function. This is the entry point for using custom preprocessors in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/preprocessors-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\non('file:preprocessor', (file) => {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples of selectFile\nDESCRIPTION: Shows incorrect ways to use the selectFile command that will result in errors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/selectfile.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Errors, cannot be chained off 'cy'\ncy.selectFile('file.json')\n\n// Will attempt to find a file called 'file contents'\n// on disk, probably not what you intended\ncy.get('input[type=file]').selectFile('file contents')\n```\n\n----------------------------------------\n\nTITLE: Reload Command Syntax Options in Cypress\nDESCRIPTION: Different syntax variations for using the cy.reload() command in Cypress, including with force reload option and configuration options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/reload.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.reload()\ncy.reload(forceReload)\ncy.reload(options)\ncy.reload(forceReload, options)\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Container Element Grouping Example\nDESCRIPTION: Sample HTML showing a calendar container with multiple button elements that will be grouped together by the corresponding elementGroups configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/elementgroups.mdx#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<body>\n  <div id=\"calendar\">\n    <button id=\"jan\"></button>\n    <button id=\"feb\"></button>\n    <button id=\"mar\"></button>\n  </div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Capturing Full Cypress Browser Window in Screenshots\nDESCRIPTION: Example of configuring Cypress to capture the entire browser window including the Cypress Command Log when taking screenshots, instead of just the application under test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/screenshot-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Screenshot.defaults({\n  capture: 'runner',\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating ignoreTestFiles to excludeSpecPattern\nDESCRIPTION: Example of migrating from the legacy ignoreTestFiles configuration to the new testing-type specific excludeSpecPattern option. This allows different exclusion patterns for e2e and component tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"ignoreTestFiles\": \"path/to/**/*.js\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  component: {\n    excludeSpecPattern: \"path/to/**/*.js\"\n  },\n  e2e: {\n    excludeSpecPattern: \"other/path/to/**/*.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Double Asterisk Pattern with Cypress.minimatch in JavaScript\nDESCRIPTION: Demonstrates the difference between single asterisk (*) and double asterisk (**) patterns in minimatch, where ** matches all downstream path segments while * matches only the next segment.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/minimatch.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// ** matches against all downstream path segments\n\n// returns true\nCypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/**', {\n  matchBase: true,\n})\n\n// whereas * matches only the next path segment\n\n// returns false\nCypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/*', {\n  matchBase: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Unhandled Promise Rejections in Cypress Tests\nDESCRIPTION: Examples of different approaches to handle unhandled promise rejections in Cypress tests. Shows how to register event listeners during visits, for specific tests, or globally for all tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// register listener during cy.visit\nit('fails on unhandled rejection', () => {\n  cy.visit('/', {\n    onBeforeLoad(win) {\n      win.addEventListener('unhandledrejection', (event) => {\n        const msg = `UNHANDLED PROMISE REJECTION: ${event.reason}`\n\n        // fail the test\n        throw new Error(msg)\n      })\n    },\n  })\n})\n\n// ALTERNATIVE: register listener for this test\nit('fails on unhandled rejection', () => {\n  cy.on('window:before:load', (win) => {\n    win.addEventListener('unhandledrejection', (event) => {\n      const msg = `UNHANDLED PROMISE REJECTION: ${event.reason}`\n\n      // fail the test\n      throw new Error(msg)\n    })\n  })\n\n  cy.visit('/')\n})\n\n// ALTERNATIVE: register listener in every test\nbefore(() => {\n  Cypress.on('window:before:load', (win) => {\n    win.addEventListener('unhandledrejection', (event) => {\n      const msg = `UNHANDLED PROMISE REJECTION: ${event.reason}`\n\n      // fail the test\n      throw new Error(msg)\n    })\n  })\n})\n\nit('fails on unhandled rejection', () => {\n  cy.visit('/')\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for Cypress Filter Command\nDESCRIPTION: Shows the basic syntax for using the filter command in Cypress. The filter command can be used with a selector and optional options object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/filter.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.filter(selector)\n.filter(selector, options)\n```\n\n----------------------------------------\n\nTITLE: Cypress Event: scrolled\nDESCRIPTION: Event emitted during Cypress scrolling operations, particularly during element actionability checks.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/catalog-of-events.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nEvent: scrolled\\nYields: element or window being scrolled (Object)\n```\n\n----------------------------------------\n\nTITLE: GitLab CI Configuration with UI Coverage Verification\nDESCRIPTION: Example GitLab CI pipeline configuration file showing how to add UI Coverage verification steps to an existing Cypress test job.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/results-api.mdx#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: Run Cypress Tests\n\nimage: node:latest\n\nstages:\n  - test\n\nrun-cypress:\n  stage: test\n  secrets:\n    CYPRESS_RECORD_KEY:\n      vault: vault/cypressRecordKey\n  script:\n    - npm install\n    - npx cypress run --record\n   - npm install --force https://cdn.cypress.io/extract-cloud-results/v1/extract-cloud-results.tgz\n   - node ./scripts/verifyUICoverageResults.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Dev Server in Cypress 10+ (JavaScript)\nDESCRIPTION: Updated configuration for webpack dev server in Cypress 10+ using JavaScript. The configuration now uses defineConfig and moves dev server setup to the component.devServer object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nconst { defineConfig } = require('cypress')\nconst webpackConfig = require('./webpack.config.js')\n\nmodule.exports = defineConfig({\n  component: {\n    devServer: {\n      framework: 'react', // or vue\n      bundler: 'webpack',\n      webpackConfig,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Only Date Object\nDESCRIPTION: Shows how to override only the Date object without affecting timer functions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clock.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clock(Date.UTC(2018, 10, 30), ['Date'])\n```\n\n----------------------------------------\n\nTITLE: Updating Electron Browser Detection in Cypress 4.0\nDESCRIPTION: This snippet demonstrates how to update the browser detection code for Electron in Cypress 4.0. It uses the 'browser.name' property instead of 'browser.family' to check for Electron.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_111\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (on, config) => {\n  on('before:browser:launch', (browser = {}, launchOptions) => {\n    if (browser.name === 'electron') {\n      // run code for Electron browser in 4.0.0\n      return launchOptions\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic clearAllCookies Syntax in Cypress\nDESCRIPTION: Shows the basic syntax for the clearAllCookies command in Cypress. The command can be called with or without options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clearallcookies.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clearAllCookies()\ncy.clearAllCookies(options)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Casting with Cypress.require\nDESCRIPTION: Demonstrates how to use TypeScript casting to infer types for dependencies required with Cypress.require.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/require.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncy.origin('cypress.io', async () => {\n  const _ = Cypress.require('lodash') as typeof import('lodash')\n\n  // lodash methods are properly typed\n  _.map([1, 2, 3], (num: number) => {\n    // ...\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Capturing Specific Viewport in Cypress Screenshot\nDESCRIPTION: This snippet demonstrates how to capture only the application under test for a specific screenshot in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/account-management/data-storage-and-masking.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nit('sign in page', () => {\n  cy.visit('/sign-in')\n  cy.screenshot({\n    capture: 'viewport', // or fullPage\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for Cypress hash Command\nDESCRIPTION: Shows the basic syntax patterns for the cy.hash() command. This command can be called with or without options to retrieve the current URL hash.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/hash.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.hash()\ncy.hash(options)\n```\n\n----------------------------------------\n\nTITLE: Launching Browser by Path in Cypress\nDESCRIPTION: Commands to launch a browser by specifying its binary path for both run and open modes\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/launching-browsers.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --browser /usr/bin/chromium\n```\n\nLANGUAGE: shell\nCODE:\n```\ncypress open --browser /usr/bin/chromium\n```\n\n----------------------------------------\n\nTITLE: Optional Request Properties in Cypress Intercept\nDESCRIPTION: TypeScript interface showing optional Cypress-specific properties that can be set on the request object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/intercept.mdx#2025-04-22_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  /**\n   * If provided, the number of milliseconds before an upstream\n   * response to this request will time out and cause an error.\n   * By default, `responseTimeout` from config is used.\n   */\n  responseTimeout?: number\n  /**\n   * Set if redirects should be followed when this request is made.\n   * By default, requests will not follow redirects before\n   * yielding the response (the 3xx redirect is yielded).\n   */\n  followRedirect?: boolean\n  /**\n   * If set, `cy.wait` can be used to await the request/response\n   * cycle to complete for this request via `cy.wait('@alias')`.\n   */\n  alias?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Anchor Element Preference Example in Cypress\nDESCRIPTION: Shows how Cypress prioritizes <a> elements over spans when using .contains() for navigation elements\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/contains.mdx#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<nav>\n  <a href=\"/users\">\n    <span>Users</span>\n  </a>\n  <a href=\"/signout\">\n    <span>Sign Out</span>\n  </a>\n</nav>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// yields <a>\ncy.get('nav').contains('Sign Out').should('have.attr', 'href', '/signout')\n```\n\n----------------------------------------\n\nTITLE: File Selection from Disk Example\nDESCRIPTION: Shows how to select files from the disk using relative paths.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/selectfile.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input[type=file]').selectFile('path/to/file.json')\ncy.get('input[type=file]').selectFile('path/to/file.png')\n```\n\n----------------------------------------\n\nTITLE: Defining Component Testing Options in TypeScript\nDESCRIPTION: Illustrates the basic structure within a Cypress configuration file (e.g., `cypress.config.ts`) for specifying options dedicated to component testing. These options are nested under the `component` key.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/configuration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n{\n  component: {\n    // component options here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Selector with Default Strategy\nDESCRIPTION: Example of getting a selector using the default selector strategy, which prioritizes ID selectors over classes, returning '#bingo' for the sample button.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/selector-playground-api.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst $el = Cypress.$('button')\nconst selector = Cypress.SelectorPlayground.getSelector($el) // '#bingo'\n```\n\n----------------------------------------\n\nTITLE: Cypress Event: viewport:changed\nDESCRIPTION: Event triggered on viewport changes, either through cy.viewport() command or default reset between tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/catalog-of-events.mdx#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nEvent: viewport:changed\\nYields: viewport (Object)\n```\n\n----------------------------------------\n\nTITLE: Using the loginViaUi Custom Command\nDESCRIPTION: Shows how to use the custom loginViaUi command with a user object containing credentials and name information.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ncy.loginViaUi({ email: 'fake@email.com', password: '$ecret1', name: 'johndoe' })\n```\n\n----------------------------------------\n\nTITLE: Configuring Viewport Dimensions in Cypress\nDESCRIPTION: TypeScript configuration for setting viewport width and height in Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/config.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  viewportWidth: 1280,\n  viewportHeight: 720,\n}\n```\n\n----------------------------------------\n\nTITLE: CSP Meta Tag Example\nDESCRIPTION: Example of CSP implementation using HTML meta tag, which is fully supported by Cypress without additional configuration. Cypress loads necessary script tags before meta tag parsing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/content-security-policy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self';\">\n```\n\n----------------------------------------\n\nTITLE: Checking jQuery Object Type with isJquery in JavaScript\nDESCRIPTION: Shows how to determine if an object is a jQuery object using Cypress.dom.isJquery. Returns true for jQuery objects.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/dom.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input').then(($el) => {\n  Cypress.dom.isJquery($el)\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Non-Existence in Protractor (JavaScript)\nDESCRIPTION: This Protractor snippet asserts that an element with the ID 'loading' is not present in the DOM using the `isPresent()` method.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// assert the spinner no longer exists\nexpect(element(by.id('loading')).isPresent()).toBe(false)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hapi Middleware with Coverage Exclusion\nDESCRIPTION: Demonstrates how to add code coverage middleware to a Hapi server while excluding the middleware code itself from coverage reports using istanbul ignore directive.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/code-coverage.mdx#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n/* istanbul ignore next */\nif (global.__coverage__) {\n  require('@cypress/code-coverage/middleware/hapi')(server)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Command Timeout via CLI in Cypress\nDESCRIPTION: A shell command showing how to set the default command timeout for all Cypress commands using the command line interface. This affects how long Cypress will retry commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/retry-ability.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --config defaultCommandTimeout=10000\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests with Record Key via CLI - Cypress Shell\nDESCRIPTION: Executes Cypress tests with the '--record' flag and provides the record key directly on the command line using the '--key' option. This approach is used in CI or local environments to associate the run with the configured Cypress Cloud project. It requires that Cypress CLI be installed and available in the runtime environment. The command expects the record key to be specified explicitly; outputs are test results recorded in Cypress Cloud under the designated project. Ensure you replace '<record key>' with your actual key.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/get-started/setup.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --record --key <record key>\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Shell Commands\nDESCRIPTION: Shell commands demonstrating how to run Cypress with different configuration files.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/configuration-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncypress run\n```\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --env configFile=qa\n```\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --env configFile=staging\n```\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --env configFile=production\n```\n\n----------------------------------------\n\nTITLE: Significant Attributes Configuration\nDESCRIPTION: JSON configuration to define which attributes should be prioritized when identifying elements in UI Coverage. This example prioritizes a custom data attribute.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/guides/reduce-noise.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"significantAttributes\": [\"data-custom-id\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Cypress Configuration Object in TypeScript\nDESCRIPTION: A simple TypeScript object that will be passed to defineConfig method in a Cypress configuration file. This example sets the baseUrl parameter to 'http://localhost:1234'.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/plugins/cypressRemarkPlugins/src/cypressConfigExample/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    baseUrl: 'http://localhost:1234',\n}\n```\n\n----------------------------------------\n\nTITLE: Registering an after:screenshot Event Handler in Cypress\nDESCRIPTION: Example of registering an event handler for the after:screenshot event in Cypress. This handler receives details about the screenshot that was taken and can be used to process or track screenshot information.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/after-screenshot-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\non('after:screenshot', (details) => {\n  /* ... */\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating Drag-and-Drop File Operations to selectFile in Cypress 10\nDESCRIPTION: Demonstrates how to update drag-and-drop file operations from cypress-file-upload to using the action: 'drag-drop' option with the built-in selectFile command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[data-cy=\"dropzone\"]').attachFile('myfixture.json', {\n  subjectType: 'drag-n-drop',\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[data-cy=\"dropzone\"]').selectFile('fixtures/myfixture.json', {\n  action: 'drag-drop',\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Cypress Plugin with yarn\nDESCRIPTION: This command installs a Cypress plugin using yarn and adds it as a dev dependency.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/plugins/plugins-guide.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add <plugin name> --dev\n```\n\n----------------------------------------\n\nTITLE: Cypress Intercept Handler Ordering\nDESCRIPTION: Examples showing the change in intercept handler execution order in Cypress 7.0.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept(url, (req) => {\n  /* This will be called first! */\n})\ncy.intercept(url, (req) => {\n  /* This will be called second! */\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept(url, (req) => {\n  /* This will be called second! */\n})\ncy.intercept(url, (req) => {\n  /* This will be called first! */\n})\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Cypress Origin Command\nDESCRIPTION: Shows common mistakes when using cy.origin() including origin matching issues and improper data passing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/origin.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst hits = getHits()\ncy.visit('https://example.cypress.io/history/founder')\n// To interact with cross-origin content, move this inside cy.origin() callback\ncy.get('h1').contains('Kitchen Sink')\n// Origin must be a precise match including scheme, subdomain and port, i.e. https://www.cypress.io\ncy.origin('https://www.cypress.io', () => {\n  cy.visit('/about-us')\n  cy.get('h1').contains('About us')\n  // Fails because downloads is not passed in via args\n  cy.contains(downloads)\n})\n// Won't work because still on www.cypress.io\ncy.get('h1').contains('Kitchen Sink')\n```\n\n----------------------------------------\n\nTITLE: Range Input Value Change\nDESCRIPTION: Example of interacting with a range slider by setting its value and triggering the change event.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/trigger.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input[type=range]').as('range').invoke('val', 25).trigger('change')\n\ncy.get('@range').siblings('p').should('have.text', '25')\n```\n\n----------------------------------------\n\nTITLE: Manually Specifying Browser Type in Windows\nDESCRIPTION: This command demonstrates how to manually specify the browser type when launching Cypress on Windows. It's useful when Cypress has issues detecting the browser type automatically.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncypress open --browser C:/User/Application/browser.exe:chrome\n```\n\n----------------------------------------\n\nTITLE: Syntax of Cypress.ensure Methods in JavaScript\nDESCRIPTION: Demonstrates the syntax for various Cypress.ensure methods, including type checks and DOM element state checks.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/ensure.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Type of argument\nCypress.ensure.isType(subject, type, commandName, cy)​\nCypress.ensure.isElement(subject, commandName, cy)​\nCypress.ensure.isWindow(subject, commandName, cy)\nCypress.ensure.isDocument(subject, commandName, cy)​\n\n// State of DOM element\nCypress.ensure.isAttached(subject, commandName, cy)​\nCypress.ensure.isNotDisabled(subject, commandName)​\nCypress.ensure.isNotHiddenByAncestors(subject, commandName)​\nCypress.ensure.isNotReadonly(subject, commandName)​\nCypress.ensure.isScrollable(subject, commandName)​\nCypress.ensure.isStrictlyVisible(subject, commandName)​\nCypress.ensure.isVisible(subject, commandName)​\n```\n\n----------------------------------------\n\nTITLE: Importing External Plugins File in Cypress 10+\nDESCRIPTION: Example of importing an external plugins file in the new Cypress configuration format. This shows how to continue using an external file while adapting to the new structure.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nimport setupNodeEvents from './cypress/plugins/index.js'\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  component: {\n    devServer(cypressConfig) {\n      // component testing dev server setup code\n    },\n    setupNodeEvents,\n  },\n  e2e: {\n    setupNodeEvents,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for cy.go Command in Cypress\nDESCRIPTION: Shows the basic syntax for the cy.go() command, which accepts a direction parameter and optional options object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/go.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.go(direction)\ncy.go(direction, options)\n```\n\n----------------------------------------\n\nTITLE: Aliasing DOM Elements in Cypress Tests\nDESCRIPTION: This snippet shows how to alias DOM elements and reuse them later in the test. It demonstrates aliasing table rows and accessing them using cy.get().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/variables-and-aliases.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// alias all of the tr's found in the table as 'rows'\ncy.get('table').find('tr').as('rows')\n\n// Cypress returns the reference to the <tr>'s\n// which allows us to continue to chain commands\n// finding the 1st row.\ncy.get('@rows').first().click()\n```\n\n----------------------------------------\n\nTITLE: Message Example with Click Action\nDESCRIPTION: Shows how to use cy.log() to log a message after a click action in a test sequence.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/log.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.click('Login')\ncy.log('Login successful')\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Environment Variables\nDESCRIPTION: Example of retrieving all environment variables from the Cypress configuration at once by calling Cypress.env() with no arguments.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/env.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.env() // => {foo: 'bar', baz: 'quux'}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Signup Test in Protractor\nDESCRIPTION: Example of a Protractor test for validating user signup functionality. The test navigates to the signup page, fills in form fields, submits the form, and checks the resulting URL.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Authorization tests', () => {\n  it('allows the user to signup for a new account', () => {\n    browser.get('/signup')\n    element(by.css('#email-field')).sendKeys('user@email.com')\n    element(by.css('#confirm-email-field')).sendKeys('user@email.com')\n    element(by.css('#password-field')).sendKeys('testPassword1234')\n    element(by.cssContainingText('button', 'Create new account')).click()\n\n    expect(browser.getCurrentUrl()).toEqual('/signup/success')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress Component Testing with Vue and Webpack\nDESCRIPTION: Configuration example for setting up Cypress component testing with Vue using Webpack. Shows how to import and customize webpack configuration, with options for both direct config passing and async configuration modification.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/vue/overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport webpackConfig from './webpack.config'\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  component: {\n    devServer: {\n      framework: 'vue',\n      bundler: 'webpack',\n      // optionally pass in webpack config\n      webpackConfig,\n      webpackConfig: async () => {\n        // ... do things ...\n        const modifiedConfig = await injectCustomConfig(baseConfig)\n        return modifiedConfig\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping DOM Elements with wrap in JavaScript\nDESCRIPTION: Demonstrates how to wrap DOM elements in a jQuery object using Cypress.dom.wrap. Returns a jQuery object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/dom.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('p').then(($el) => {\n  Cypress.dom.wrap($el)\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Accessible Name of Button using Cypress Contains\nDESCRIPTION: Demonstrates how to click a 'Submit' button using Cypress contains method, which locates the button by its text content.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/accessibility-testing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.contains('button', 'Submit').click()\n```\n\n----------------------------------------\n\nTITLE: Creating New Spec File in Shell\nDESCRIPTION: Shell command to create a new spec file named home_page.cy.js.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/end-to-end-testing/testing-your-app.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntouch cypress/e2e/home_page.cy.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress Angular Schematic for Custom Config File\nDESCRIPTION: This JSON configuration shows how to specify a custom Cypress configuration file when using the Cypress Angular Schematic. It allows for environment-specific configurations in Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n\"cypress-run\": {\n  \"builder\": \"@cypress/schematic:cypress\",\n  \"options\": {\n    \"devServerTarget\": \"{project-name}:serve\",\n    \"configFile\": \"cypress.production.config.js\"\n  },\n  \"configurations\": {\n    \"production\": {\n      \"devServerTarget\": \"{project-name}:production\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding File Names when Using selectFile in Cypress 10\nDESCRIPTION: Shows how to customize the file name when using Cypress 10's selectFile command, updating from the cypress-file-upload plugin approach.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[data-cy=\"dropzone\"]').attachFile({\n  filePath: 'myfixture.json',\n  fileName: 'customFileName.json',\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[data-cy=\"dropzone\"]').selectFile({\n  contents: 'fixtures/myfixture.json',\n  fileName: 'customFileName.json',\n})\n```\n\n----------------------------------------\n\nTITLE: Using Global jQuery with $ Shorthand\nDESCRIPTION: Shows how to use the global jQuery $ shorthand in Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/$.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n$.each([1, 2, 3], (index, value) => {\n  expect(index).to.eq(value)\n}) // also works\n```\n\n----------------------------------------\n\nTITLE: Launching Alternative Chrome Browsers in Cypress\nDESCRIPTION: Commands to run Cypress tests using Chromium, Chrome Beta, Chrome Canary, and Chrome for Testing\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/launching-browsers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --browser chromium\n```\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --browser chrome:beta\n```\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --browser chrome:canary\n```\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --browser chrome-for-testing\n```\n\n----------------------------------------\n\nTITLE: Importing Cypress Angular Mount Function (Before v14/Separate Package)\nDESCRIPTION: Demonstrates the original import statement used for the `mount` function from the built-in Cypress Angular harness. This applies before Cypress v14 or when using Angular v17.2.0+ where the harness is included.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { mount } from `cypress/angular`\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Smoke Test\nDESCRIPTION: Command to run a smoke test on Cypress binary to verify dependencies.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n$ ~/.cache/Cypress/13.15.0/Cypress/Cypress --smoke-test --ping=101\n\nDevTools listening on ws://127.0.0.1:39737/devtools/browser/162ad33c-294b-460b-812e-cc317907ac86\nIt looks like you are running the Cypress binary directly.\n\nThis is not the recommended approach, and Cypress may not work correctly.\n\nPlease install the cypress NPM package and follow the instructions here:\n\nhttps://on.cypress.io/install-cypress\n101\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tests Per Project Summary via Cypress Cloud API (URL)\nDESCRIPTION: Example API call to get a summary of test usage per project since the `start_date`. Uses `report_id=usage-per-project-summary`. The response includes `project_name` and `test_run_count`.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: url\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=usage-per-project-summary&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Cypress Installation with Debug Logging\nDESCRIPTION: This snippet demonstrates how to troubleshoot Cypress installation by enabling debug logging and running the installation separately.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/advanced-installation.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nCYPRESS_INSTALL_BINARY=0 npm install cypress --save-dev\nDEBUG=cypress:cli* npx cypress install\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Cypress writeFile Command\nDESCRIPTION: Example of correct usage of the writeFile command in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/writefile.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.writeFile('menu.json')\n```\n\n----------------------------------------\n\nTITLE: Creating Express Server for Cypress Dev Server\nDESCRIPTION: Example of creating an Express server to handle component testing requests and serve the index HTML file with injected scripts.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/component-framework-configuration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createServer(cypressConfig, bundleDir, port = 1234) {\n  const app = express()\n\n  // read kickstart script - see below for an example\n  const clientScript = readFileSync(\n    path.join(__dirname, './client-script.js'),\n    'utf8'\n  )\n\n  app.get(\n    cypressConfig.devServerPublicPathRoute + '/index.html',\n    async (_req, res) => {\n      // read custom index.html file\n      const html = await fs.readFile(\n        path.join(cypressConfig.repoRoot, cypressConfig.indexHtmlFile),\n        { encoding: 'utf8' }\n      )\n\n      // inject kickstart-script\n      const output = html.replace(\n        '</head>',\n        `<script type=\"module\">${clientScript}</script></head>`\n      )\n      res.send(output)\n    }\n  )\n\n  // you need to establish some url-to-path-mapping, if your bundler outputs\n  // the full directory structure you can map this one to one\n  app.use(cypressConfig.devServerPublicPathRoute, express.static(bundleDir))\n\n  app.listen(port)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSP Allow List in Cypress\nDESCRIPTION: Example configuration showing how to allow specific Content-Security-Policy directives to be sent to the browser. This configuration specifically allows default-src, script-src, and script-src-elem directives.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/experiments.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  experimentalCspAllowList: ['default-src', 'script-src', 'script-src-elem']\n}\n```\n\n----------------------------------------\n\nTITLE: CSS for Completed Todo Items\nDESCRIPTION: This CSS snippet shows the styling for completed todo items. It demonstrates how visual changes, like removing the line-through decoration, can be caught by visual testing tools.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/visual-testing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.todo-list li.completed label {\n  color: #d9d9d9;\n  /* removed the line-through */\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Visibility in Protractor (JavaScript)\nDESCRIPTION: This Protractor snippet demonstrates how to assert that a button element is currently visible on the page using the `isDisplayed()` method and Jasmine's `expect` assertion.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// assert button is visible\nexpect(element(by.tagName('button')).isDisplayed()).toBe(true)\n```\n\n----------------------------------------\n\nTITLE: HTML Button Element Structure Example\nDESCRIPTION: Example HTML structure showing a button with nested icon and text elements that Cypress can interact with. Demonstrates how Cypress handles event targeting on nested elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/interacting-with-elements.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button>\n  <i class=\"fa fa-check\">\n  <span>Submit</span>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Fixing Test Functions Using Both Done Callback and Promise - Example 1\nDESCRIPTION: This example shows how to fix a test that incorrectly uses both a done callback and returns a promise. The solution is to remove the done callback and rely solely on the returned promise to signal test completion.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_97\n\nLANGUAGE: javascript\nCODE:\n```\nit('uses invokes done and returns promise', (done) => {\n  return codeUnderTest.doSomethingThatReturnsPromise().then((result) => {\n    // assertions here\n    done()\n  })\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nit('uses invokes done and returns promise', () => {\n  return codeUnderTest.doSomethingThatReturnsPromise().then((result) => {\n    // assertions here\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests Using Predefined Environment Variable - Cypress Shell\nDESCRIPTION: Runs Cypress tests with the '--record' flag, expecting the 'CYPRESS_RECORD_KEY' environment variable to have already been declared. This method allows credentials to be kept out of direct command invocation, improving security and supporting integration with CI/CD environment variable configuration. The command assumes the environment variable is already set and does not accept the key as a CLI argument.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/get-started/setup.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --record\n```\n\n----------------------------------------\n\nTITLE: Basic Okta Authentication Test\nDESCRIPTION: Example test implementing the Okta login command and performing basic verification.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/okta-authentication.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Okta', function () {\n  beforeEach(function () {\n    cy.task('db:seed')\n    cy.loginByOkta(Cypress.env('okta_username'), Cypress.env('okta_password'))\n  })\n\n  it('verifies signed in user does not have a bank account', function () {\n    cy.get('[data-test=\"sidenav-bankaccounts\"]').click()\n    cy.get('[data-test=\"empty-list-header\"]').should('be.visible')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Excluding Error Pages in Cypress Reports\nDESCRIPTION: Configuration that filters out error pages (404 pages and other error paths) from reports. This helps reduce noise by excluding URLs that don't represent meaningful user flows or application functionality.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_viewfilters.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"viewFilters\": [\n    {\n      \"pattern\": \"http*://*/404\",\n      \"include\": false\n    },\n    {\n      \"pattern\": \"http*://*/error/*\",\n      \"include\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Title Include Assertion Example\nDESCRIPTION: Example demonstrating how to assert that a document's title includes a specific string.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/title.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.title().should('include', 'New User')\n```\n\n----------------------------------------\n\nTITLE: Cypress Animation Configuration\nDESCRIPTION: Configuration settings to globally disable animation checks or adjust animation distance threshold.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/error-messages.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  waitForAnimations: false,\n  animationDistanceThreshold: 50,\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Video Compression in Cypress Configuration (v13+)\nDESCRIPTION: Shows how to enable video compression in the Cypress configuration by setting `videoCompression` to `true` (or an integer quality level 0-51). This overrides the default behavior introduced in Cypress v13 where compression is off, reducing file size at the cost of quality and processing time.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  // value can be true/false -or- an integer between 0 and 51\n  videoCompression: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Tick Usage Example in Cypress\nDESCRIPTION: Simple example showing correct usage of the tick command to move time forward by 500 milliseconds.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/tick.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.tick(500)\n```\n\n----------------------------------------\n\nTITLE: Running Cypress in Headless Mode with Angular CLI\nDESCRIPTION: Command to run Cypress in headless mode using Angular CLI. This executes tests without opening a browser window, suitable for CI/CD environments.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nng run {your-project-name}:cypress-run\n```\n\n----------------------------------------\n\nTITLE: Basic Trigger Command Syntax\nDESCRIPTION: Different syntax variations for using the trigger command with various argument combinations.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/trigger.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.trigger(eventName)\n.trigger(eventName, position)\n.trigger(eventName, options)\n.trigger(eventName, x, y)\n.trigger(eventName, position, options)\n.trigger(eventName, x, y, options)\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Proxy on Windows Command Prompt\nDESCRIPTION: Commands for configuring HTTP proxy in Windows Command Prompt, including both temporary and permanent proxy settings using set and setx commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/proxy-configuration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nset HTTP_PROXY=http://my-company-proxy.com\n```\n\nLANGUAGE: shell\nCODE:\n```\nsetx HTTP_PROXY http://my-company-proxy.com\n```\n\n----------------------------------------\n\nTITLE: Using Named Path Parameters in Cypress Views\nDESCRIPTION: Configuration example for grouping URLs with named path parameters. This uses the ':name' syntax to group user-specific URLs into a single view.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_views.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"views\": [\n    {\n      \"pattern\": \"https://www.my-app.com/users/:name\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Using Cypress Docker Image\nDESCRIPTION: A workflow that uses a Cypress Docker image with a specific Chrome version to ensure consistent browser testing. It runs on Ubuntu and specifies a non-root user option for compatibility.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/github-actions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: Cypress Tests using Cypress Docker Image\n\non: push\n\njobs:\n  cypress-run:\n    runs-on: ubuntu-24.04\n    container:\n      image: cypress/browsers:22.12.0\n      options: --user 1001\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Cypress run\n        uses: cypress-io/github-action@v6\n        with:\n          build: npm run build\n          start: npm start\n          browser: chrome\n```\n\n----------------------------------------\n\nTITLE: Checking System Memory with Cypress Info\nDESCRIPTION: Command to display Cypress version, system platform and memory information using the cypress info command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/overview.mdx#2025-04-22_snippet_7\n\nLANGUAGE: css\nCODE:\n```\nnpx cypress info\n...\nCypress Version: 13.6.6 (stable)\nSystem Platform: linux (Debian - 11.6)\nSystem Memory: 73.6 GB free 48.6 GB\n```\n\n----------------------------------------\n\nTITLE: Complex Pause Implementation with Multiple Click Commands\nDESCRIPTION: Advanced example demonstrating pause usage in a sequence of click commands with specific coordinates.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/pause.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#action-canvas')\n  .click(80, 75)\n  .pause()\n  .click(170, 75)\n  .click(80, 165)\n  .click(100, 185)\n  .click(125, 190)\n  .click(150, 185)\n  .click(170, 165)\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for cy.document() in Cypress\nDESCRIPTION: Shows the basic syntax for using the cy.document() command in Cypress, including the option to pass a configuration object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/document.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.document()\ncy.document(options)\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Execution Based on Browser Type\nDESCRIPTION: Example showing how to run specific test code only when using Firefox or Chrome browsers by using the browser name as a matcher string.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/isbrowser.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('download extension link', () => {\n  // true when running in Firefox\n  if (Cypress.isBrowser('firefox')) {\n    cy.get('#dl-extension').should('contain', 'Download Firefox Extension')\n  }\n\n  // true when running in Chrome\n  if (Cypress.isBrowser('chrome')) {\n    cy.get('#dl-extension').should('contain', 'Download Chrome Extension')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json Scripts for Cypress\nDESCRIPTION: JSON configuration for package.json to set up concurrent execution of Angular server and Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"cy:open\": \"concurrently \\\"ng serve\\\" \\\"cypress open\\\"\",\n    \"cy:run\": \"concurrently \\\"ng serve\\\" \\\"cypress run\\\"\"\n  },\n  \"dependencies\": { ... },\n  \"devDependencies\": { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Unnecessary Wait with Get\nDESCRIPTION: Example showing unnecessary explicit wait when cy.get() already retries until assertion passes\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/best-practices.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ncy.intercept('GET', '/users', [{ name: 'Maggy' }, { name: 'Joan' }])\ncy.get('#fetch').click()\ncy.wait(4000) // <--- this is unnecessary\ncy.get('table tr').should('have.length', 2)\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress.spec Syntax in JavaScript\nDESCRIPTION: Shows the basic syntax for accessing spec properties using Cypress.spec. This returns an object with information about the current spec file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/spec.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.spec // returns spec object\n```\n\n----------------------------------------\n\nTITLE: Grouping Test Runs in Cypress Cloud using --group Flag (Bash)\nDESCRIPTION: The `--group` flag allows organizing multiple `cypress run` executions into logical groups within a single Cypress Cloud report ([link](https://on.cypress.io/cloud)). This example (`--group UI-Chrome`) labels a specific run (e.g., UI tests on Chrome) as 'UI-Chrome', consolidating results for better organization and analysis.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_ci_provider_cloud_steps.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--group UI-Chrome\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax of .its() Command\nDESCRIPTION: Shows the basic syntax patterns for using the .its() command in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/its.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.its(propertyName)\n.its(propertyName, options)\n```\n\n----------------------------------------\n\nTITLE: Optimizing Video Recording with Test Retries in Cypress\nDESCRIPTION: Plugin example showing how to delete recorded videos for specs that passed without any retries to save space and upload time to Cypress Cloud.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/test-retries.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// need to install these dependencies\n// npm install lodash del --save-dev\nimport _ from 'lodash'\nimport del from 'del'\n```\n\nLANGUAGE: typescript\nCODE:\n```\non('after:spec', (spec, results) => {\n  if (results && results.video) {\n    // Do we have failures for any retry attempts?\n    const failures = _.some(results.tests, (test) => {\n      return _.some(test.attempts, { state: 'failed' })\n    })\n    if (!failures) {\n      // delete the video if the spec passed and no tests retried\n      return del(results.video)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax of prevAll Command in Cypress\nDESCRIPTION: The various syntax options for using the prevAll command in Cypress, including with or without selectors and options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/prevall.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.prevAll()\n.prevAll(selector)\n.prevAll(options)\n.prevAll(selector, options)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples of .its()\nDESCRIPTION: Shows incorrect usage patterns that will result in errors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/its.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.its('window') // Errors, cannot be chained off 'cy'\ncy.clearCookies().its('length') // Errors, 'clearCookies' does not yield Object\n```\n\n----------------------------------------\n\nTITLE: Getting Selector with Custom Strategy\nDESCRIPTION: Example of getting a selector using a custom selector strategy that prioritizes classes over IDs, returning '.number3' for the sample button.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/selector-playground-api.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.SelectorPlayground.defaults({\n  selectorPriority: ['class', 'id'],\n})\n\nconst $el = Cypress.$('button')\nconst selector = Cypress.SelectorPlayground.getSelector($el) // '.number3'\n```\n\n----------------------------------------\n\nTITLE: Updating .invoke() Usage in Cypress 12\nDESCRIPTION: Demonstrates how to update .invoke() calls that return promises to use .then() instead in Cypress 12.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_32\n\nLANGUAGE: diff\nCODE:\n```\ncy.wrap(myAPI)\n-  .invoke('makeARequest', 'http://example.com')\n+  .then(api => api.makeARequest('http://example.com'))\n   .then(res => { ...handle response... })\n```\n\n----------------------------------------\n\nTITLE: Date Task Handler Implementation\nDESCRIPTION: Plugin implementation for handling date conversion in tasks, showing how to process and return date objects.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/task.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\non('task', {\n  date(s) {\n    // s is a string, so convert it to Date\n    const d = new Date(s)\n\n    // do something with the date\n    // and return it back\n    return d\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Patch Step to CI Configuration\nDESCRIPTION: YAML configuration to add a patch step in CI after installing npm packages.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n- run: npm ci\n- run: npx patch-package\n```\n\n----------------------------------------\n\nTITLE: Handling Redirects in cy.visit() in JavaScript\nDESCRIPTION: Shows how cy.visit() automatically follows redirects and demonstrates checking the resulting URL.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// we aren't logged in, so our web server\n// redirected us to /login\ncy.visit('http://localhost:3000/admin')\ncy.url().should('match', /login/)\n```\n\n----------------------------------------\n\nTITLE: Updating File Writing and Reading in Cypress 4.0\nDESCRIPTION: This snippet demonstrates how to update file writing and reading operations in Cypress 4.0. The 'cy.writeFile()' command now yields null, so content verification requires a separate 'cy.readFile()' command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_113\n\nLANGUAGE: javascript\nCODE:\n```\ncy.writeFile('path/to/message.txt', 'Hello World')\ncy.readFile('path/to/message.txt').then((text) => {\n  expect(text).to.equal('Hello World') // true\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Shadow DOM Example\nDESCRIPTION: Illustrates the HTML structure of a shadow host element containing a button within its shadow DOM.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/shadow.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"shadow-host\">\n  #shadow-root\n  <button class=\"my-button\">Click me</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Variable Usage in Cypress Commands\nDESCRIPTION: Example showing incorrect handling of variables that are evaluated before Cypress commands complete their execution.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nit('test', () => {\n  let username = undefined // evaluates immediately as undefined\n\n  cy.visit('https://example.cypress.io') // Nothing happens yet\n  cy.get('.user-name') // Still, nothing happens yet\n    .then(($el) => {\n      // Nothing happens yet\n      // this line evaluates after the .then executes\n      username = $el.text()\n    })\n\n  // this evaluates before the .then() above\n  // so the username is still undefined\n  if (username) {\n    // evaluates immediately as undefined\n    cy.contains(username).click()\n  } else {\n    // this will always run\n    // because username will always\n    // evaluate to undefined\n    cy.contains('My Profile').click()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Example for hash Command\nDESCRIPTION: Demonstrates the correct way to use the cy.hash() command to get the URL hash in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/hash.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.hash() // Get the url hash\n```\n\n----------------------------------------\n\nTITLE: Creating a Mount Adapter for Solid.js in Cypress\nDESCRIPTION: This code snippet shows how to implement a Mount Adapter for Solid.js. It defines a mount function that renders a Solid.js component within the Cypress test environment, handling cleanup and logging.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/custom-frameworks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getContainerEl, setupHooks } from '@cypress/mount-utils'\nimport { render } from 'solid-js/web'\n\nlet dispose\n\nfunction cleanup() {\n  dispose?.()\n}\n\nexport function mount(component, options = {}) {\n  const root = getContainerEl()\n\n  dispose = render(() => component, root)\n\n  return cy.wait(0, { log: false }).then(() => {\n    if (options.log !== false) {\n      Cypress.log({\n        name: 'mount',\n        message: 'Mounted component',\n      })\n    }\n  })\n}\n\nsetupHooks(cleanup)\n```\n\n----------------------------------------\n\nTITLE: Configuring Project ID in Cypress Configuration (TypeScript)\nDESCRIPTION: This snippet shows how to set the projectId in the Cypress configuration file. The projectId is a unique 6-character string that identifies your project in Cypress Cloud.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/account-management/projects.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  projectId: 'a7bq2k',\n}\n```\n\n----------------------------------------\n\nTITLE: Component HTML Side Effects Behavior After Cypress 7.0\nDESCRIPTION: Example showing how only component-mounted HTML is cleaned up between tests in Cypress 7.0+, while manually added HTML elements persist and need to be manually cleared.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_73\n\nLANGUAGE: jsx\nCODE:\n```\nconst { mount } = require('@cypress/react')\n\ndescribe('Component teardown behavior', () => {\n  it('modifies the document and mounts a component', () => {\n    // HTML unrelated to the component is mounted\n    Cypress.$('body').append('<div data-cy=\"some-html\"/>')\n\n    // A component is mounted\n    mount(<Button data-cy=\"my-button\"></Button>)\n\n    cy.get('[data-cy=\"some-html\"]').should('exist')\n    cy.get('[data-cy=\"my-button\"]').should('exist')\n  })\n\n  it('only cleans up *components* between tests', () => {\n    // The component is automatically unmounted by Cypress\n    cy.get('[data-cy=\"my-button\"]').should('not.exist')\n\n    // The HTML left over from the previous test should be manually cleared\n    cy.get('[data-cy=\"some-html\"]').should('not.exist')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Opening Cypress App\nDESCRIPTION: Command to launch the Cypress Test Runner after installation. This opens the Cypress application for interactive testing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/selenium-to-cypress.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx cypress open\n```\n\n----------------------------------------\n\nTITLE: Cypress CT Configuration for Vue (After Vue CLI Migration)\nDESCRIPTION: Demonstrates the updated Cypress component testing configuration after migrating away from `@vue/cli-service`. The `framework` is changed to `vue`, and the `bundler` is explicitly set to either `vite` or `webpack`.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  component: {\n    devServer: {\n      framework: 'vue',\n      bundler: 'vite', // or 'webpack'\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Dependencies for Cypress Component Testing\nDESCRIPTION: Command to install necessary dependencies for React component testing in Cypress 7.0, including @cypress/react and @cypress/webpack-dev-server.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_64\n\nLANGUAGE: shell\nCODE:\n```\nnpm install cypress @cypress/react @cypress/webpack-dev-server --save-dev\n```\n\n----------------------------------------\n\nTITLE: Retrieving Status by Run Summary via Cypress Cloud API (URL)\nDESCRIPTION: Example API call to get a summary of success/failure rates at the run level (a run fails if any part fails) since the `start_date`. Uses `report_id=status-per-build-summary`. The response includes `status` and `test_run_count`.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_9\n\nLANGUAGE: url\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=status-per-build-summary&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Recording Cypress Tests to Cloud with npm for Local Accessibility Feedback\nDESCRIPTION: Command to record a specific Cypress test to Cypress Cloud using npm. Requires a record key and specifies which test file to run, providing immediate accessibility feedback during development.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/accessibility/guides/local-development.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx cypress run --key <record_key> --record --spec \"cypress/e2e/my-spec.cy.js\"\n```\n\n----------------------------------------\n\nTITLE: Excluding a Specific Element by ID in Cypress Config (JSON)\nDESCRIPTION: Provides a Cypress configuration example using `elementFilters` to exclude a single HTML element identified by its ID (`#button-2`). The `include` property is explicitly set to `false` for this selector.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_elementfilters.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"elementFilters\": [\n    {\n      \"selector\": \"#button-2\",\n      \"include\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Next Element in Left Navigation\nDESCRIPTION: Example of using 'next' to find the element following the active list item in a left navigation.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/next.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.left-nav').find('li.active').next()\n```\n\n----------------------------------------\n\nTITLE: Chai-style Assertion Example in Cypress\nDESCRIPTION: Shows the similarity between Cypress's .and() syntax and Chai's fluent assertion syntax for explicit assertions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/and.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexpect({ foo: 'bar' }).to.have.property('foo').and.eq('bar')\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Environment Variables for Git Info in Cypress\nDESCRIPTION: Debug configuration to troubleshoot missing commit information in Cypress Cloud runs\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/overview.mdx#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nDEBUG=commit-info,cypress:server:record\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress Buffer Method Syntax\nDESCRIPTION: Demonstrates the correct syntax for calling Cypress.Buffer methods.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/buffer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Buffer.method()\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests in Parallel\nDESCRIPTION: This bash command demonstrates how to run Cypress tests in parallel using the Cypress Cloud service. It uses the --parallel and --record flags to enable parallelization and recording of test results.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\ncypress run --record --parallel\n```\n\n----------------------------------------\n\nTITLE: Taking a Basic Screenshot in Cypress Test\nDESCRIPTION: Demonstrates how to take a basic screenshot within a Cypress test. The screenshot will be saved in the default cypress/screenshots folder with an automatically generated filename.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/screenshot.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('my tests', () => {\n  it('takes a screenshot', () => {\n    // screenshot will be saved as\n    // cypress/screenshots/users.cy.js/my tests -- takes a screenshot.png\n    cy.screenshot()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Snapshots with Dynamic Element IDs\nDESCRIPTION: Sample HTML showing how element IDs can change between snapshots, demonstrating the need for dynamic selectors in UI Coverage configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/elements.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Snapshot 1 -->\n<body>\n  <form id=\"my-form\">\n    <input id=\"dropdown-142\"></input>\n  </form>\n</body>\n\n<!-- Snapshot 2 -->\n<body>\n  <form id=\"my-form\">\n    <input id=\"dropdown-980\"></input>\n  </form>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Proxy on Linux/macOS\nDESCRIPTION: Commands to set HTTP proxy and NO_PROXY environment variables on Linux or macOS systems. NO_PROXY allows bypassing the proxy for specific domains.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/proxy-configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport HTTP_PROXY=http://my-company-proxy.com\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport NO_PROXY=localhost,google.com,apple.com\n```\n\n----------------------------------------\n\nTITLE: Complete Parallel Test Pipeline Configuration\nDESCRIPTION: Complete Bitbucket Pipelines configuration with parallelization, caching, and Cypress Cloud integration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/bitbucket-pipelines.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nimage: cypress/base:22.12.0\n\n## job definition for running E2E tests in parallel\ne2e: &e2e\n  name: E2E tests\n  caches:\n    - node\n    - cypress\n  script:\n    - npm run start &\n    - npm run e2e:record -- --parallel --group UI-Chrome --ci-build-id $BITBUCKET_BUILD_NUMBER\n  artifacts:\n    # store any generates images and videos as artifacts\n    - cypress/screenshots/**\n    - cypress/videos/**\n\npipelines:\n  default:\n    - step:\n        name: Install dependencies\n        caches:\n          - npm\n          - cypress\n          - node\n        script:\n          - npm ci\n    - parallel:\n        # run N steps in parallel\n        - step:\n            <<: *e2e\n        - step:\n            <<: *e2e\n        - step:\n            <<: *e2e\ndefinitions:\n  caches:\n    npm: $HOME/.npm\n    cypress: $HOME/.cache/Cypress\n```\n\n----------------------------------------\n\nTITLE: Aliasing First Matched Element in Cypress JavaScript\nDESCRIPTION: This snippet shows the recommended pattern for aliasing a static, specific element: select the first matching button and alias it, thus avoiding dynamic re-query oddities. Especially necessary in Cypress 12+ where .get('@alias') is not inherently static. Should be paired with install of Cypress Testing Library for findAllByRole. Dependencies: Cypress Testing Library, Cypress 12+.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\ncy.findByTestId('popover').findAllByRole('button').first().as('button')\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Cypress .click() Command\nDESCRIPTION: Shows incorrect ways to use the .click() command that will result in errors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/click.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.click('.btn') // Errors, cannot be chained off 'cy'\ncy.window().click() // Errors, 'window' does not yield DOM element\n```\n\n----------------------------------------\n\nTITLE: HTML with stable and dynamic attributes for UI Coverage\nDESCRIPTION: Example HTML structure with both stable data-type attributes and dynamic row-id attributes. When configured correctly, UI Coverage will prioritize the stable attributes for identification.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/significantattributes.mdx#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<ul>\n  <li row-id=\"10829\" data-type=\"search\">Search</li>\n  <li row-id=\"38019\" data-type=\"filter\">Filter</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Stopping Tests on Failure Using afterEach Hook\nDESCRIPTION: A code snippet to add to support/index.js that stops test execution when any test fails. It uses the afterEach hook to check the current test's state.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/stop.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nafterEach(function () {\n  if (this.currentTest.state === 'failed') {\n    Cypress.stop()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Radio Button State in Protractor (JavaScript)\nDESCRIPTION: This Protractor snippet checks if a radio button input element is currently selected using the `isSelected()` method and expects the result to be truthy.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(element('input[type=\"radio\"]').isSelected()).toBeTruthy()\n```\n\n----------------------------------------\n\nTITLE: HTML structure with data-role attributes for UI Coverage grouping\nDESCRIPTION: Example HTML structure with form inputs using data-role attributes. When configured with significantAttributes, UI Coverage will group elements by their data-role values.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/significantattributes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<form>\n  <input id=\"in1\" data-role=\"email\"></input>\n  <input id=\"in2\" data-role=\"interests\"></input>\n  <input id=\"in3\" data-role=\"interests\"></input>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples of Each Command\nDESCRIPTION: Examples of incorrect usage that will result in errors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/each.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.each(() => {...})            // Errors, cannot be chained off 'cy'\ncy.clock().each(() => {...})    // Errors, 'clock' does not yield an array\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Cypress Documentation\nDESCRIPTION: This command installs all necessary dependencies for the Cypress documentation project using npm.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Cypress Configuration Options\nDESCRIPTION: JavaScript example showing how to get all configuration options using Cypress.config() with no arguments.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/config.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.config() // => {defaultCommandTimeout: 10000, pageLoadTimeout: 30000, ...}\n```\n\n----------------------------------------\n\nTITLE: Setting a Simple Retry Configuration for All Test Modes\nDESCRIPTION: Sets a single retry attempt for both 'cypress run' and 'cypress open' modes in Cypress configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/test-retries.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  retries: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Definitions for npm and Cypress\nDESCRIPTION: YAML configuration defining additional caches for npm and Cypress in Bitbucket Pipelines.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/bitbucket-pipelines.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  caches:\n    npm: $HOME/.npm\n    cypress: $HOME/.cache/Cypress\n```\n\n----------------------------------------\n\nTITLE: Basic cypress.open() Example in JavaScript\nDESCRIPTION: A simple example of opening Cypress with default options using the Node.js API.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/module-api.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// e2e-open-tests.js\nconst cypress = require('cypress')\n\ncypress.open({})\n```\n\n----------------------------------------\n\nTITLE: Logging Cypress and Subprocess Memory/CPU Usage via Process Profiler - Shell\nDESCRIPTION: Enabling the cypress:server:util:process_profiler DEBUG stream via this shell command triggers periodic (default every 10s) logging of memory and CPU usage for Cypress and its subprocesses. The summarized output helps diagnose resource consumption issues. It requires Cypress CLI set up, and may be further configured for verbosity or interval with additional environment variables. Useful for performance troubleshooting scenarios.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nDEBUG=cypress:server:util:process_profiler npx cypress run\n```\n\n----------------------------------------\n\nTITLE: Clearing Cypress Cache via CLI\nDESCRIPTION: Command to clear the Cypress cache, removing all installed versions. Requires running cypress install afterward.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncypress cache clear\n```\n\n----------------------------------------\n\nTITLE: CircleCI Configuration for Nightly Firefox Testing\nDESCRIPTION: CircleCI configuration for scheduling nightly Firefox browser tests on the master branch using cron.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cross-browser-testing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\norbs:\n  cypress: cypress-io/cypress@3\nworkflows:\n  nightly:\n    triggers:\n      - schedule:\n          cron: '0 0 * * *'\n          filters:\n            branches:\n              only:\n                - master\n    jobs:\n      - cypress/run:\n          install-browsers: true\n          cypress-command: 'npx cypress run --browser firefox'\n          start-command: 'npm start'\n```\n\n----------------------------------------\n\nTITLE: Test Requiring a Title in Cypress 4\nDESCRIPTION: This example shows that tests now require a title in Cypress 4 and will throw a type error when not provided one, whereas in Cypress 3 they would just show as pending.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_100\n\nLANGUAGE: javascript\nCODE:\n```\n// Would show as pending in Cypress 3\n// Will throw type error in Cypress 4:\nit() // Test argument \"title\" should be a string. Received type \"undefined\"\n```\n\n----------------------------------------\n\nTITLE: Going Forward in Browser's History with Numeric Parameter\nDESCRIPTION: Demonstrates using a positive number (1) to navigate forward in the browser's history, equivalent to clicking the forward button.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/go.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.go(1) // equivalent to clicking forward button\n```\n\n----------------------------------------\n\nTITLE: JSON Output Example\nDESCRIPTION: Shows the expected JSON file content after writing an object to a file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/writefile.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Eliza\",\n  \"email\": \"eliza@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Native Time Functions with Clock Object\nDESCRIPTION: How to manually restore native time functions that were overridden by cy.clock() using the clock.restore() method.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clock.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clock().then((clock) => {\n  clock.restore()\n})\n```\n\n----------------------------------------\n\nTITLE: Caching Dependencies in Bitbucket Pipelines\nDESCRIPTION: Configuration showing how to cache node_modules and artifacts in Bitbucket Pipelines for Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/bitbucket-pipelines.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimage: cypress/browsers:22.12.0\n\npipelines:\n  default:\n    - step:\n        caches:\n          - node\n        script:\n          # install dependencies\n          - npm ci\n          # start the server in the background\n          - npm run start &\n          # run Cypress tests in Firefox\n          - npx cypress run --browser firefox\n        artifacts:\n          # store any generates images and videos as artifacts\n          - cypress/screenshots/**\n          - cypress/videos/**\n```\n\n----------------------------------------\n\nTITLE: Implementing UI Coverage Verification Script in JavaScript\nDESCRIPTION: Script that fetches UI Coverage results and verifies coverage thresholds. It checks overall project coverage and ensures critical views meet higher thresholds, failing the build if requirements aren't met.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/results-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getUICoverageResults } = require('@cypress/extract-cloud-results')\n\ngetUICoverageResults({\n  projectId: process.env.CYPRESS_PROJECT_ID, // Optional if set from env\n  recordKey: process.env.CYPRESS_RECORD_KEY, // Optional if set from env\n  runTags: [process.env.RUN_TAGS], // Required if recording multiple runs\n}).then((results) => {\n  const { runNumber, uiCoverageReportUrl, summary, views } = results\n\n  console.log(\n    `Received ${summary.isPartialReport ? 'partial' : ''} results for run #${runNumber}.`\n  )\n  console.log(`See full report at ${uiCoverageReportUrl}.`)\n\n  // Verify overall coverage\n  if (summary.coverage < 80) {\n    throw new Error(\n      `Project coverage is ${summary.coverage}, below the minimum threshold of 80%.`\n    )\n  }\n\n  const criticalViews = [/login/, /checkout/]\n\n  // Verify critical view coverage\n  views.forEach((view) => {\n    const { displayName, coverage, uiCoverageReportUrl } = view\n\n    if (\n      criticalViews.some((pattern) => pattern.test(displayName)) &&\n      coverage < 95\n    ) {\n      throw new Error(\n        `Critical view \"${displayName}\" coverage is ${coverage}%, below the required 95%. See: ${uiCoverageReportUrl}`\n      )\n    }\n  })\n\n  console.log('UI Coverage is above minimum thresholds.')\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Automated Sitemap-Based Accessibility Testing with Cypress\nDESCRIPTION: This code snippet demonstrates how to use Cypress to perform automated accessibility testing based on a sitemap. It fetches the sitemap.xml, parses the URLs, visits each page, and scrolls to the footer to capture accessibility reports.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/accessibility/guides/production-monitoring.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Accessibility Scan', () => {\n  it('Checks accessibility with the sitemap.xml', () => {\n    cy.request('https://<YOUR_WEBSITE>/sitemap.xml').then((response) => {\n      const xmlString = response.body\n      const parser = new DOMParser()\n      const xmlDoc = parser.parseFromString(xmlString, 'application/xml')\n      const URLs = Array.from(xmlDoc.querySelectorAll('loc')).map(\n        (loc) => loc.textContent\n      )\n      Cypress._.each(URLs, (URL) => {\n        cy.visit(URL)\n        cy.contains('<YOUR_FOOTER_CONTENT>').scrollIntoView()\n      })\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Element Identification Result with Dynamic Selectors\nDESCRIPTION: Output showing how elements with dynamic IDs are displayed in UI Coverage reports when using the dynamic selector configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/elements.mdx#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n#my-form [id^=\"dropdown\"]\n```\n\n----------------------------------------\n\nTITLE: Importing Cypress Vue 2 Mount Function (Before v14/Separate Package)\nDESCRIPTION: Demonstrates the original import statement used for the `mount` function from the built-in Cypress Vue 2 harness prior to Cypress v14.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { mount } from `cypress/vue2`\n```\n\n----------------------------------------\n\nTITLE: Configuring significantAttributes in Cypress UI Coverage\nDESCRIPTION: JSON configuration syntax for the significantAttributes property in Cypress UI Coverage. This configuration accepts an array of string attribute names that will be prioritized during element identification and grouping.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/significantattributes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"significantAttributes\": [\n      string\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests via pnpm (Shell)\nDESCRIPTION: Executes all Cypress tests headlessly using the pnpm package manager. This command runs the Cypress binary installed within the project's node_modules via pnpm's script execution capability.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_cypress-run-commands.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm cypress run\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Cypress Commands in 'should' Callback\nDESCRIPTION: Shows incorrect usage where Cypress commands are invoked inside a 'should' callback function, which is not supported.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('p').should(($p) => {\n  cy.log($p)\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Detecting Cypress Run Mode in Test Code\nDESCRIPTION: Example of how to detect whether Cypress is running in interactive mode (cypress open) or run mode (cypress run) using the Cypress.config API.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/configuration.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nif (Cypress.config('isInteractive')) {\n  // interactive \"cypress open\" mode!\n} else {\n  // \"cypress run\" mode\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring stable attributes over dynamic ones\nDESCRIPTION: Configuration example showing how to prioritize stable 'data-type' attributes over dynamic 'row-id' attributes. This ensures consistent element identification across test runs.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/significantattributes.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"significantAttributes\": [\"data-type\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cypress.Cookies.defaults() from whitelist to preserve option\nDESCRIPTION: Example showing how to migrate from the deprecated 'whitelist' option to the new 'preserve' option in Cypress.Cookies.defaults() method.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_89\n\nLANGUAGE: js\nCODE:\n```\nCypress.Cookies.defaults({\n  whitelist: 'session_id',\n})\n```\n\nLANGUAGE: js\nCODE:\n```\nCypress.Cookies.defaults({\n  preserve: 'session_id',\n})\n```\n\n----------------------------------------\n\nTITLE: Debug Logging Commands for Windows\nDESCRIPTION: Commands to enable debug logging output for Cypress on Windows CMD and PowerShell environments.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nset DEBUG=cypress:*\nnpx cypress run\n```\n\n----------------------------------------\n\nTITLE: Multi-Step End-to-End Test with Cypress JavaScript (Pre-Test Isolation)\nDESCRIPTION: This snippet demonstrates an anti-pattern in Cypress JavaScript end-to-end testing pre-v12, where multiple test cases rely on the shared application and browser state. It assumes DOM, cookies, and storage persist across tests, enabling stepwise actions such as login, content editing, validation, and logout across separate tests. The pattern risks test interdependency and should be refactored to ensure each test is isolated. Requires Cypress and related browser automation dependencies.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nit('logs in', () => {\\n  cy.visit('https://example.cypress.io')\\n  cy.get('input#password').type('Password123!')\\n  cy.get('button#submit').click()\\n})\\n\\nit('updates the content', () => {\\n  // already on page redirect from clicking button#submit\\n  cy.get('#current-user').contains('logged in')\\n  cy.get('button#edit-1').click()\\n  cy.get('input#title').type('Updated title')\\n  cy.get('button#submit').click()\\n  cy.get('.toast').contains('Changes saved!')\\n})\\n\\nit('validates the change', () => {\\n  cy.visit('/items/1')\\n  cy.get('h1').contains('Updated title')\\n})\n```\n\n----------------------------------------\n\nTITLE: CircleCI Configuration for Production Branch Testing\nDESCRIPTION: CircleCI configuration for running Firefox tests specifically on the develop branch for production deployments.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cross-browser-testing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\norbs:\n  cypress: cypress-io/cypress@3\nworkflows:\n  test_develop:\n    jobs:\n      - filters:\n        branches:\n          only:\n            - develop\n      - cypress/run:\n          install-browsers: true\n          cypress-command: 'npx cypress run --browser firefox'\n          start-command: 'npm start'\n```\n\n----------------------------------------\n\nTITLE: Disabling Retry in Cypress\nDESCRIPTION: An example showing how to disable retry behavior by setting the timeout to 0. This is useful for synchronous checks where retry is not desired.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/retry-ability.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// check synchronously that the element does not exist (no retry)\n// for example just after a server-side render\ncy.get('[data-testid=\"ssr-error\"]', { timeout: 0 }).should('not.exist')\n```\n\n----------------------------------------\n\nTITLE: Creating Symlink for Chrome-for-Testing Browser on Linux\nDESCRIPTION: This shell command creates a symlink for the chrome-for-testing browser in Linux, allowing Cypress to detect it. It links the actual binary location to the expected location in /usr/local/bin.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nsudo ln -s /path/to/binary/chrome /usr/local/bin/chrome\n```\n\n----------------------------------------\n\nTITLE: Importing Node Modules in setupNodeEvents Function\nDESCRIPTION: Demonstrates how to require various types of modules within the setupNodeEvents function, including npm packages, core Node.js libraries, and local project files.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/overview.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst _ = require('lodash') // yup, dev dependencies\nconst path = require('path') // yup, core node library\nconst debug = require('debug') // yup, dependencies\nconst User = require('./lib/models/user') // yup, relative local modules\n\nconsole.log(__dirname) // /Users/janelane/Dev/my-project\nconsole.log(process.cwd()) // /Users/janelane/Dev/my-project\n```\n\n----------------------------------------\n\nTITLE: Running Cypress with Group Labeling for Single Machine Tests\nDESCRIPTION: Command to run Cypress tests with a specific group label (1x-electron) using the record flag for Cypress Cloud integration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/features/smart-orchestration/parallelization.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --record --group 1x-electron\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Using afterEach Hook for State Cleanup\nDESCRIPTION: An example of using afterEach hook to clean up state after tests, which is considered an anti-pattern in Cypress. This approach can lead to unreliable tests if the browser is refreshed during test execution.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/best-practices.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('logged in user', () => {\n  beforeEach(() => {\n    cy.login()\n  })\n\n  afterEach(() => {\n    cy.logout()\n  })\n\n  it('tests', ...)\n  it('more', ...)\n  it('things', ...)\n})\n```\n\n----------------------------------------\n\nTITLE: Chai 4 Breaking Change: Empty Assertions\nDESCRIPTION: This example shows that the .empty assertion in Chai 4 will now throw when it is passed non-string primitives and functions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_102\n\nLANGUAGE: javascript\nCODE:\n```\n// These will now throw TypeErrors\nexpect(Symbol()).to.be.empty\nexpect(() => {}).to.be.empty\n```\n\n----------------------------------------\n\nTITLE: Displaying Cypress Action Commands Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing Cypress action commands, their corresponding API links, and brief descriptions of their functionality. The table includes commands for interacting with various DOM elements and performing user-like actions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/table-of-contents.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Command                                             | Usage                                                                                    |\n| --------------------------------------------------- | ---------------------------------------------------------------------------------------- |\n| [`.check()`](/api/commands/check)                   | Check checkbox or radio elements.                                                        |\n| [`.clear()`](/api/commands/clear)                   | Clear the value of an input or textarea.                                                 |\n| [`.click()`](/api/commands/click)                   | Click a DOM element.                                                                     |\n| [`.dblclick()`](/api/commands/dblclick)             | Double-click a DOM element.                                                              |\n| [`.rightclick()`](/api/commands/rightclick)         | Right click a DOM element.                                                               |\n| [`.scrollIntoView()`](/api/commands/scrollintoview) | Scroll an element into view.                                                             |\n| [`.scrollTo()`](/api/commands/scrollto)             | Scroll to a specific position.                                                           |\n| [`.select()`](/api/commands/select)                 | Select an `<option>` within a `<select>`.                                                |\n| [`.selectFile()`](/api/commands/selectfile)         | Selects a file in an HTML5 input element, or simulates dragging a file into the browser. |\n| [`.trigger()`](/api/commands/trigger)               | Trigger an event on a DOM element.                                                       |\n| [`.type()`](/api/commands/type)                     | Type into a DOM element.                                                                 |\n| [`.uncheck()`](/api/commands/uncheck)               | Uncheck checkbox(es).                                                                    |\n```\n\n----------------------------------------\n\nTITLE: Changing System Time with invoke()\nDESCRIPTION: Shows how to change the system time using the invoke() command for a more concise syntax.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clock.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clock().invoke('setSystemTime', 60 * 60 * 1000)\n```\n\n----------------------------------------\n\nTITLE: Electron Options in before:browser:launch\nDESCRIPTION: This example demonstrates that BrowserWindow options for Electron must now be passed as launchOptions.preferences instead of directly on the launchOptions object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_108\n\nLANGUAGE: javascript\nCODE:\n```\non('before:browser:launch', (browser, args) => {\n  args.darkTheme = true\n\n  return args\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\non('before:browser:launch', (browser, launchOptions) => {\n  launchOptions.preferences.darkTheme = true\n\n  return launchOptions\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Cypress Cache Folder\nDESCRIPTION: This snippet shows how to set a custom cache folder for Cypress using the CYPRESS_CACHE_FOLDER environment variable.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/advanced-installation.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nCYPRESS_CACHE_FOLDER=~/Desktop/cypress_cache npm install\n```\n\n----------------------------------------\n\nTITLE: Finding Element by Negative Index (from End)\nDESCRIPTION: Example showing how to find the second-to-last element in a list using a negative index with the .eq() command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/eq.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>tabby</li>\n  <li>siamese</li>\n  <li>persian</li>\n  <li>sphynx</li>\n  <li>burmese</li>\n</ul>\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('li').eq(-2).should('contain', 'sphynx') // true\n```\n\n----------------------------------------\n\nTITLE: Updating Component Test Mounting in Cypress 11\nDESCRIPTION: Demonstrates how to update component test mounting options in Cypress 11 by moving styles to a separate CSS file instead of inline options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\n/** style.css */\n@import \"https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css\";\n.card { width: 100px }\n\n/** Card.cy.jsx */\nimport { mount } from 'cypress/react'\nimport { Card } from './Card'\nimport './styles.css' // contains CDN link and custom styling.\n\nit('renders some content', () => {\n  cy.mount(<Card title=\"title\" />)\n})\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Cypress.$\nDESCRIPTION: Shows incorrect usage where $.$ is incorrectly chained off the 'cy' command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/$.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.$('p') // Errors, cannot be chained off 'cy'\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Retries with Fixed Number in Cypress Configuration\nDESCRIPTION: Sets a fixed number of retry attempts for all test modes in Cypress configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/test-retries.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  retries: 2\n}\n```\n\n----------------------------------------\n\nTITLE: Sample HTML for Dynamic Element Pattern Exclusion Example (XML/HTML)\nDESCRIPTION: Provides the sample HTML structure for the dynamic pattern exclusion example. It includes one button with a standard class (`.cancel`) and another with a class name that starts with 'auth' (`.auth908283794`), the latter being targeted for exclusion.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_elementfilters.mdx#2025-04-22_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<body>\n  <button class=\"cancel\">Cancel</button>\n  <button class=\"auth908283794\">Login</button>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Running Single Spec File\nDESCRIPTION: Example of running a specific spec file with promise handling for results and errors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/module-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst cypress = require('cypress')\n\ncypress\n  .run({\n    // the path is relative to the current working directory\n    spec: './cypress/e2e/examples/actions.cy.js',\n  })\n  .then((results) => {\n    console.log(results)\n  })\n  .catch((err) => {\n    console.error(err)\n  })\n```\n\n----------------------------------------\n\nTITLE: Combined Debug Sources Example\nDESCRIPTION: Example showing how to combine multiple debug sources to troubleshoot specific issues like spec file location.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nDEBUG=cypress:cli,cypress:data-context:sources:FileDataSource,cypress:data-context:sources:ProjectDataSource npx cypress run --spec ...\n```\n\n----------------------------------------\n\nTITLE: Excluding Debug Sources Example\nDESCRIPTION: Example showing how to exclude specific debug sources using the negative pattern.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nDEBUG=cypress:server*,-cypress:server:browsers* npx cypress run\n```\n\n----------------------------------------\n\nTITLE: Using the clickLink Custom Command\nDESCRIPTION: Shows how to use the custom clickLink command in a test to click on links with specific text.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clickLink('Buy Now')\n```\n\n----------------------------------------\n\nTITLE: Querying Flaky Test Details API in Cypress\nDESCRIPTION: This API endpoint provides detailed information about flaky tests, including project name, creation date, run number, commit details, CI build ID, status, group name, run tags, error details, and test replay URL. It has a limit of 500,000 records per request.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=flaky-test-details&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Asserting Length of Children in Cypress\nDESCRIPTION: Example showing how to assert that an element has a specific number of children using the .should() command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/children.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.left-nav>.nav').children().should('have.length', 8)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of .children() Command in Cypress\nDESCRIPTION: Shows incorrect usage patterns for the .children() command that would result in errors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/children.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.children() // Errors, cannot be chained off 'cy'\ncy.clock().children() // Errors, 'clock' does not yield DOM elements\n```\n\n----------------------------------------\n\nTITLE: Debugging Test Failures\nDESCRIPTION: Example showing how to debug test failures by catching the 'fail' event in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/catalog-of-events.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.on('fail', (error, runnable) => {\n  debugger\n\n  // we now have access to the err instance\n  // and the mocha runnable this failed on\n\n  throw error // throw error to have test still fail\n})\n\nit('calls the \"fail\" callback when this test fails', () => {\n  // when this cy.get() fails the callback\n  // is invoked with the error\n  cy.get('element-that-does-not-exist')\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Jenkins Pipeline for Cypress Accessibility Result Verification\nDESCRIPTION: This snippet shows how to modify a Jenkins pipeline to include Cypress accessibility result verification. It adds a new stage to install the required module and run a verification script.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/accessibility/results-api.mdx#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n```diff\npipeline {\n  agent {\n    docker {\n      image 'cypress/base:22.12.0'\n    }\n  }\n\n  environment {\n    CYPRESS_PROJECT_ID: 'xxxx'\n    CYPRESS_RECORD_KEY = credentials('cypress-record-key')\n  }\n\n  stages {\n    stage('build and test') {\n      steps {\n        sh 'npm ci'\n        sh 'npx cypress run --record'\n      }\n    }\n\n+   stage('Verify Accessibility Results') {\n+     steps {\n+       sh 'npm install --force https://cdn.cypress.io/extract-cloud-results/v1/extract-cloud-results.tgz'\n+       sh 'node ./scripts/verifyAccessibilityResults.js'\n+     }\n+   }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Going Back in Browser's History with Numeric Parameter\nDESCRIPTION: Demonstrates using a negative number (-1) to navigate back in the browser's history, equivalent to clicking the back button.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/go.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.go(-1) // equivalent to clicking back button\n```\n\n----------------------------------------\n\nTITLE: Importing mount function from Cypress Vue\nDESCRIPTION: This snippet shows how to import the 'mount' function from the Cypress Vue module. This function is used for mounting Vue components in isolation within Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/vue/api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount } from 'cypress/vue'\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Existent Elements in Cypress 6.0+\nDESCRIPTION: Shows how to properly assert that elements do not exist in the DOM, replacing deprecated visibility checks with explicit existence checks.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\nit('test', () => {\n  cy.get('data-cy=\"modal\"').find('.close').click()\n  cy.get('data-cy=\"modal\"').should('not.exist')\n})\n```\n\n----------------------------------------\n\nTITLE: Turning Off Unhandled Promise Rejection Handling in Cypress 7.0\nDESCRIPTION: Shows how to prevent Cypress from failing tests when unhandled promise rejections occur in the application under test by checking the promise parameter.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.on('uncaught:exception', (err, runnable, promise) => {\n  // when the exception originated from an unhandled promise\n  // rejection, the promise is provided as a third argument\n  // you can turn off failing the test in this case\n  if (promise) {\n    // returning false here prevents Cypress from\n    // failing the test\n    return false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Page Load Timeout in Cypress Config\nDESCRIPTION: TypeScript configuration example setting the pageLoadTimeout to 60000ms (60 seconds).\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/config.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  pageLoadTimeout: 60000,\n}\n```\n\n----------------------------------------\n\nTITLE: Element Identification Result with Named Element\nDESCRIPTION: Output showing how elements with custom names appear in UI Coverage reports when using the name property.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/elements.mdx#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nHelp Popover\n```\n\n----------------------------------------\n\nTITLE: Migrating cy.wait() Response Object from cy.route() to cy.intercept()\nDESCRIPTION: Shows differences in the response object structure when using cy.wait() with cy.route() versus cy.intercept(), highlighting property name changes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\n// Wait for XHR from cy.route()\ncy.route('POST', '/users').as('createUser')\n// ...\ncy.wait('@createUser').then(({ requestBody, responseBody, status }) => {\n  expect(status).to.eq(200)\n  expect(requestBody.firstName).to.eq('Jane')\n  expect(responseBody.firstName).to.eq('Jane')\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Wait for intercepted HTTP request\ncy.intercept('POST', '/users').as('createUser')\n// ...\ncy.wait('@createUser').then(({ request, response }) => {\n  expect(response.statusCode).to.eq(200)\n  expect(request.body.name).to.eq('Jane')\n  expect(response.body.name).to.eq('Jane')\n})\n```\n\n----------------------------------------\n\nTITLE: Attribute Filters Configuration\nDESCRIPTION: JSON configuration to exclude auto-generated or irrelevant attributes from UI Coverage reports. This example filters out Sizzle-generated IDs and Angular-specific attributes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/guides/reduce-noise.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"attributeFilters\": [\n      {\n        \"attribute\": \"id\",\n        \"value\": \"sizzle.*\",\n        \"include\": false\n      },\n      {\n        \"attribute\": \"ng-.*\",\n        \"value\": \".*\",\n        \"include\": false\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cypress with pnpm (Shell)\nDESCRIPTION: This command uses the pnpm package manager to add Cypress. Similar to npm, the `--save-dev` flag ensures that Cypress is registered as a development dependency in the `package.json` file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_cypress-install-commands.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save-dev cypress\n```\n\n----------------------------------------\n\nTITLE: HTML Fragment for Selector Example\nDESCRIPTION: Sample HTML fragment used in the getSelector examples, featuring a button element with both ID and class attributes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/selector-playground-api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button id=\"bingo\" class=\"number3\">Cup of tea</button>\n```\n\n----------------------------------------\n\nTITLE: Sample Todo Test with Coverage\nDESCRIPTION: Example test that demonstrates adding and completing todos while collecting coverage data\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/code-coverage.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nit('adds and completes todos', () => {\n  cy.get('.new-todo')\n    .type('write code{enter}')\n    .type('write tests{enter}')\n    .type('deploy{enter}')\n\n  cy.get('.todo').should('have.length', 3)\n\n  cy.get('.todo').first().find('.toggle').check()\n\n  cy.get('.todo').first().should('have.class', 'completed')\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Project Test Count and Status via Cypress Cloud API (URL)\nDESCRIPTION: Example API call to extract consolidated run status data at the project level over time, based on individual test results since the `start_date`. Uses `report_id=status-per-test-daily`. The response includes `project_name`, `status`, `test_run_count`, `week`, and `day`.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_8\n\nLANGUAGE: url\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=status-per-test-daily&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Module API results structure after test retries in Cypress\nDESCRIPTION: Updated JSON structure of the `results.runs` array that includes the new `attempts` array for each test, reflecting the results of test retries.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_88\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"runs\": [{\n    // ...\n    \"hooks\": [{\n      \"hookName\": \"before each\",\n      \"title\": [ \"before each hook\" ],\n      \"body\": \"function () {\\n  expect(true).to.be[\\\"true\\\"];\\n}\"\n    }],\n    // ...\n    \"stats\": {\n      // ...\n      \"startedAt\": \"2020-08-05T08:38:37.589Z\",\n      \"endedAt\": \"2018-07-11T17:53:35.675Z\",\n      \"duration\": 1171\n    },\n    \"tests\": [{\n      \"title\": [ \"test\" ],\n      \"state\": \"failed\",\n      \"body\": \"function () {\\n  expect(true).to.be[\\\"false\\\"];\\n}\",\n      \"displayError\": \"AssertionError: expected true to be false\\n' +\n      '    at Context.eval (...cypress/integration/spec.js:5:21\",\n      \"attempts\": [{\n        \"state\": \"failed\",\n        \"error\": {\n          \"message\": \"expected true to be false\",\n          \"name\": \"AssertionError\",\n          \"stack\": \"AssertionError: expected true to be false\\n' +\n      '    at Context.eval (...cypress/integration/spec.js:5:21\"\n        },\n        \"screenshots\": [{\n          \"name\": null,\n          \"takenAt\": \"2020-08-05T08:52:20.432Z\",\n          \"path\": \"User/janelane/my-app/cypress/screenshots/spec.js/test (failed).png\",\n          \"height\": 720,\n          \"width\": 1280\n        }],\n        \"startedAt\": \"2020-08-05T08:38:37.589Z\",\n        \"duration\": 1171,\n        \"videoTimestamp\": 4486\n      }]\n    }],\n  }],\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Cypress Test with Cucumber Syntax\nDESCRIPTION: Shows how to structure the same Cypress test using Cucumber syntax for behavior-driven development.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/selenium-to-cypress.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { When, Then } from '@badeball/cypress-cucumber-preprocessor'\n\nWhen('I visit duckduckgo.com', () => {\n  cy.visit('https://www.duckduckgo.com')\n})\n\nThen('I should see a search bar', () => {\n  cy.get('input').should(\n    'have.attr',\n    'placeholder',\n    'Search the web without being tracked'\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress.stop() Syntax\nDESCRIPTION: The basic syntax for calling the Cypress.stop() method to halt test execution.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/stop.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.stop()\n```\n\n----------------------------------------\n\nTITLE: Excluding Browser with Test Configuration\nDESCRIPTION: Example showing how to exclude a test from running in Chrome by using the negated browser name in the test configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/isbrowser.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nit('Show warning outside Chrome', { browser: '!chrome' }, () => {\n  cy.get('.browser-warning').should(\n    'contain',\n    'For optimal viewing, use Chrome browser'\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Loading and Playing MP3 Files from Fixtures\nDESCRIPTION: Shows how to load an MP3 audio file as base64 and create an Audio element to play it.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/fixture.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncy.fixture('audio/sound.mp3', 'base64').then((mp3) => {\n  const uri = 'data:audio/mp3;base64,' + mp3\n  const audio = new Audio(uri)\n\n  audio.play()\n})\n```\n\n----------------------------------------\n\nTITLE: TSConfig Exclude Configuration for Jest Compatibility\nDESCRIPTION: Configuration to exclude Cypress files from the root tsconfig.json to prevent type clashes with Jest.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/typescript-support.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exclude\": [\"cypress.config.ts\", \"cypress\", \"node_modules\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cypress with Angular Schematic\nDESCRIPTION: Command to install Cypress using the official Cypress Angular schematic. This adds Cypress to the project, sets up necessary scripts, and optionally removes Protractor.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nng add @cypress/schematic\n```\n\n----------------------------------------\n\nTITLE: Example Cypress Cloud API Query Parameters (URL Fragments)\nDESCRIPTION: These snippets demonstrate how to format and use various query parameters for the Data Extract API. `start_date` (required) and `end_date` (optional) accept `yyyy-MM-dd` or `yyyy-MM-ddTHH:mm:ss` formats. `projects` and `branch` are optional, accept URL-encoded names, and can be repeated for multiple values. `export_format` specifies the desired output format (`csv`, `json`, `xlsx`).\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: url\nCODE:\n```\n?start_date=2025-01-01\n```\n\nLANGUAGE: url\nCODE:\n```\n?start_date=2025-01-01T12%3A30%3A00\n```\n\nLANGUAGE: url\nCODE:\n```\n?end_date=2025-03-01\n```\n\nLANGUAGE: url\nCODE:\n```\n?end_date=2025-03-01T12%3A30%3A00\n```\n\nLANGUAGE: url\nCODE:\n```\n&projects=Project%20e2e&projects=Phoenix\n```\n\nLANGUAGE: url\nCODE:\n```\n&branch=develop&branch=commitBranch1\n```\n\nLANGUAGE: url\nCODE:\n```\n&export_format=json\n```\n\n----------------------------------------\n\nTITLE: Specifying Encoding in Options Object\nDESCRIPTION: Example of writing a file with encoding and additional options specified in the options object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/writefile.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncy.writeFile('path/to/ascii.txt', 'Hello World', {\n  encoding: 'ascii',\n  flag: 'a+',\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress.browser Usage\nDESCRIPTION: Demonstrates the basic syntax for accessing the Cypress.browser object which returns browser properties.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/browser.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.browser // returns browser object\n```\n\n----------------------------------------\n\nTITLE: Incorrect Loop Usage in Cypress\nDESCRIPTION: Example showing incorrect use of while loops that can cause browser crashes due to infinite command queuing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlet found7 = false\n\nwhile (!found7) {\n  // this schedules an infinite number\n  // of \"cy.get...\" commands, eventually crashing\n  // before any of them have a chance to run\n  // and set found7 to true\n  cy.get('#result')\n    .should('not.be.empty')\n    .invoke('text')\n    .then(parseInt)\n    .then((number) => {\n      if (number === 7) {\n        found7 = true\n        cy.log('lucky **7**')\n      } else {\n        cy.reload()\n      }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Cypress Smart Command Queue Handling\nDESCRIPTION: Example demonstrating how Cypress handles command queues even with explicit returns.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/error-messages.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nit('Cypress is smart and this does not fail', () => {\n  cy.get('body').children().should('not.contain', 'foo')\n\n  return 'foobarbaz'\n})\n```\n\n----------------------------------------\n\nTITLE: Chai 4 Breaking Change: Assertions Expecting Numbers\nDESCRIPTION: This example demonstrates that in Chai 4, assertions like within, above, least, below, most, increase and decrease will throw an error if the target or arguments are not numbers.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_101\n\nLANGUAGE: javascript\nCODE:\n```\n// These will now throw errors:\nexpect(null).to.be.within(0, 1)\nexpect(null).to.be.above(10)\n// This will not throw errors:\nexpect('string').to.have.a.length.of.at.least(3)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Project Structure for Component Testing\nDESCRIPTION: An example directory structure showing how to organize files for component testing with Cypress, including support files and application source files.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/styling-components.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> /cypress\n>   /support\n>    /component.js\n> /src\n>  /main.js\n>  /main.css\n>  /setup.js\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Svelte Component Test with Cypress\nDESCRIPTION: A simple Svelte component test that demonstrates how to mount a Stepper component for testing. It uses the cy.mount() command to render the component in the test environment.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/get-started.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Stepper from './Stepper.svelte'\n\ndescribe('Stepper', () => {\n  it('mounts', () => {\n    // see: https://on.cypress.io/mounting-svelte\n    cy.mount(Stepper)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Plugin Event before:browser:launch Signature Change\nDESCRIPTION: This example shows the changed signature for the before:browser:launch event. The second argument is now a launchOptions object with an args property, instead of an array of browser arguments.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_107\n\nLANGUAGE: javascript\nCODE:\n```\non('before:browser:launch', (browser, args) => {\n  // will print a deprecation warning telling you\n  // to change your code to the new signature\n  args.push('--another-arg')\n\n  return args\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\non('before:browser:launch', (browser, launchOptions) => {\n  launchOptions.args.push('--another-arg')\n\n  return launchOptions\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cypress Version with Cypress.version in JavaScript\nDESCRIPTION: Demonstrates the basic syntax for retrieving the current version of Cypress using the Cypress.version property. Returns a string containing the semantic version number.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/version.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.version // '1.1.0'\n```\n\n----------------------------------------\n\nTITLE: Configuring Element Groups Syntax in JSON for Cypress UI Coverage\nDESCRIPTION: Basic syntax for configuring elementGroups in the Cypress UI Coverage configuration. The configuration supports defining selectors and optional custom names for element groups.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/elementgroups.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"elementGroups\": [\n      {\n        \"selector\": string,\n        \"name\": string\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Elements by Attribute in Cypress Config (JSON)\nDESCRIPTION: Shows a Cypress configuration using `elementFilters` to exclude elements based on a specific attribute value. The selector `[data-role='decorative']` targets elements with this attribute, and `include: false` marks them for exclusion.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_elementfilters.mdx#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"elementFilters\": [\n    {\n      \"selector\": \"[data-role='decorative']\",\n      \"include\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cypress with JUnit Reporter and Options (Shell)\nDESCRIPTION: Executes Cypress tests using the JUnit reporter with custom options specified via command line.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/reporters.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx cypress run --reporter junit \\\n  --reporter-options \"mochaFile=results/my-test-output.xml,toConsole=true\"\n```\n\n----------------------------------------\n\nTITLE: Alias Usage and Re-Querying in Cypress JavaScript\nDESCRIPTION: This snippet demonstrates how Cypress v12 handles aliases: all .get('@alias') calls re-query elements instead of referencing the originally matched set. It shows a typical failure mode when state (e.g., aria-expanded) changes, and illustrates how prior aliasing ('as') behavior mapped to current re-querying logic. Users must rewrite such cases to avoid flakiness. Requires Cypress 12+ and associated test runner.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\ncy.findByTestId('popover')\\n  .findByRole('button', { expanded: true })\\n  .as('button')\\n  .click()\\n\\ncy.get('@button').should('have.attr', 'aria-expanded', 'false')\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ncy.findByTestId('popover').findByRole('button', { expanded: true }).click()\\n\\ncy.findByTestId('popover')\\n  .findByRole('button', { expanded: true }) // A button which matches here (is expanded)...\\n  .should('have.attr', 'aria-expanded', 'false') // ...will never pass this assertion.\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto Cancellation via CLI\nDESCRIPTION: Command to run Cypress tests with recording enabled while explicitly disabling the auto cancellation feature.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/features/smart-orchestration/run-cancellation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx cypress run --record --key <<your_record_key>> --auto-cancel-after-failures false\n```\n\n----------------------------------------\n\nTITLE: Querying Spec Details API Endpoint\nDESCRIPTION: This API endpoint extracts all spec results regardless of status, with data available 30 minutes after run completion. It returns comprehensive test run data including project, commit, and browser information.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_22\n\nLANGUAGE: http\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=spec-details&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Adding Patch Step to package.json\nDESCRIPTION: JSON configuration to add a post-install patch step in package.json.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"postinstall\": \"patch-package\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking DOM Detachment Status with isDetached in JavaScript\nDESCRIPTION: Demonstrates how to check if an element is detached from the DOM using Cypress.dom.isDetached. Returns true if the element is not in the DOM.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/dom.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').then(($el) => {\n  Cypress.dom.isDetached($el) // false\n})\n```\n\n----------------------------------------\n\nTITLE: Interacting with Opacity Zero Elements\nDESCRIPTION: Shows how to perform various actions on elements with opacity:0 style in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\nit('test', () => {\n  cy.get('.hidden').click() // ✅ clicks on element\n  cy.get('.hidden').type('hi') // ✅ types into element\n  cy.get('.hidden').check() // ✅ checks element\n  cy.get('.hidden').select('yes') // ✅ selects element\n})\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests in AWS CodeBuild\nDESCRIPTION: This YAML snippet shows the build phase command for running Cypress tests with the configured environment variables.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/aws-codebuild.mdx#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nphases:\n  install:\n    # ...\n  build:\n    commands:\n      - npm start:ci &\n      - npx cypress run --record --parallel --browser $CY_BROWSER --ci-build-id\n        $CODEBUILD_INITIATOR --group \"$CY_GROUP\" --spec \"$CY_SPEC\" --config\n        \"$CY_CONFIG\"\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Blur Command in Cypress\nDESCRIPTION: Examples of correct usage patterns for the blur command, showing how to blur email inputs and elements with tabindex.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/blur.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[type=\"email\"]').blur() // Blur email input\ncy.get('[tabindex=\"1\"]').blur() // Blur el with tabindex\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress Component Testing with Svelte and Vite\nDESCRIPTION: Configuration example for setting up Cypress Component Testing with Svelte using Vite as the bundler. This configuration specifies the framework as 'svelte' and the bundler as 'vite'.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/svelte/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  component: {\n    devServer: {\n      framework: 'svelte',\n      bundler: 'vite',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Dynamic Elements in Cypress UI Coverage\nDESCRIPTION: Configuration example showing how to group dynamically generated elements with similar ID patterns. This helps consolidate product elements that may be dynamically rendered.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/elementgroups.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"elementGroups\": [\n      {\n        \"selector\": \"[id^='product']\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cypress.Blob method usage after return type change\nDESCRIPTION: Example showing how to handle the return type change in Cypress.Blob methods from Promise<Blob> to Blob in Cypress 5.0.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_91\n\nLANGUAGE: js\nCODE:\n```\nCypress.Blob.base64StringToBlob(this.logo, 'image/png').then((blob) => {\n  // work with the returned blob\n})\n```\n\nLANGUAGE: js\nCODE:\n```\nconst blob = Cypress.Blob.base64StringToBlob(this.logo, 'image/png')\n\n// work with the returned blob\n```\n\n----------------------------------------\n\nTITLE: Setting Electron Launch Arguments via Environment Variables\nDESCRIPTION: Examples showing how to set Electron-specific launch arguments using the ELECTRON_EXTRA_LAUNCH_ARGS environment variable on different operating systems.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/browser-launch-api.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport ELECTRON_EXTRA_LAUNCH_ARGS=--disable-http-cache --lang=es\n```\n\nLANGUAGE: shell\nCODE:\n```\nset ELECTRON_EXTRA_LAUNCH_ARGS=--disable-http-cache --lang=es\n```\n\n----------------------------------------\n\nTITLE: Configuring Element Filters for UI Coverage in Cypress\nDESCRIPTION: JSON configuration example showing how to exclude specific elements from UI Coverage reports using the elementFilters option. The example demonstrates filtering out external widgets, login iframes, and date picker components.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/guides/ignore-elements.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"elementFilters\": [\n    {\n      \"selector\": \"[data-external*]\",\n      \"include\": false\n    },\n    {\n      \"selector\": \"iframe[title='Login']\",\n      \"include\": false\n    },\n    {\n      \"selector\": \".rdrDateRangePicker, .rdrDateRangePicker *\",\n      \"include\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Opacity Zero Elements Visibility\nDESCRIPTION: Demonstrates how to test visibility of elements with opacity:0 style in Cypress 6.0+.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\nit('test', () => {\n  cy.get('.hidden').should('not.be.visible')\n})\n```\n\n----------------------------------------\n\nTITLE: Using Common Hosts Without Protocol in JavaScript\nDESCRIPTION: Demonstrates how Cypress automatically prepends the http:// protocol to common hosts like localhost, 0.0.0.0, and 127.0.0.1.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/visit.mdx#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('localhost:3000') // Visits http://localhost:3000\ncy.visit('0.0.0.0:3000') // Visits http://0.0.0.0:3000\ncy.visit('127.0.0.1:3000') // Visits http://127.0.0.1:3000\n```\n\n----------------------------------------\n\nTITLE: Querying UI Coverage Details API in Cypress\nDESCRIPTION: This API endpoint provides detailed UI Coverage data for each run. It returns data including project name, creation date, run number, status, UI coverage percentage, commit details, CI build ID, and run tags. It has a limit of 500,000 records per request.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_36\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=ui-coverage-details&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Querying UI Coverage per Project Over Time API in Cypress\nDESCRIPTION: This API endpoint provides UI Coverage percentage data for each project over time. It returns data including project name, UI coverage percentage, week, and day.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_35\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=ui-coverage-per-project-over-time&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Basic Log Command Syntax in Cypress\nDESCRIPTION: Basic syntax for using the cy.log() command in Cypress. Shows both single message and multiple arguments formats.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/log.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.log(message)\ncy.log(message, args...)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tests Per Project Over Time via Cypress Cloud API (URL)\nDESCRIPTION: Example API call to understand test usage per project over time since the `start_date`. Uses `report_id=usage-per-project-over-time`. The response includes `project_name`, `test_run_count`, `week`, and `day`.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_4\n\nLANGUAGE: url\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=usage-per-project-over-time&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Client Script for Cypress Test Loading\nDESCRIPTION: Implementation of a client-side script that loads test files and support files in the Cypress component testing environment.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/component-framework-configuration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst CypressInstance = (window.Cypress = parent.Cypress)\nconst devServerPublicPathRoute = CypressInstance.config(\n  'devServerPublicPathRoute'\n)\n\nlet importPromise = Promise.resolve()\n\n// If you do not bundle your support file along with the tests,\n// you need to add a separate import statement for the support file.\nconst supportFilePath = CypressInstance.config('supportFile')\nif (supportFilePath) {\n  const relative = supportFilePath.replace(\n    CypressInstance.config('projectRoot'),\n    ''\n  )\n  importPromise = importPromise.then(\n    () => import(`${devServerPublicPathRoute}${relative}`)\n  )\n}\n\n// load the spec - you can extend the load function to also load css\nconst { relative } = CypressInstance.spec\nimportPromise = importPromise.then(\n  () => import(`${devServerPublicPathRoute}/${relative}`)\n)\n\n// trigger loading the imports\nCypressInstance.onSpecWindow(window, importPromise)\n\n// then start the test process\nCypressInstance.action('app:window:before:load', window)\n```\n\n----------------------------------------\n\nTITLE: Conditional Wizard Dismissal Using Server Information in Cypress\nDESCRIPTION: This example shows checking server-side user information to determine if a welcome wizard should be shown, and dismissing it conditionally.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/conditional-testing.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('https://example.cypress.io')\ncy.request('https://example.cypress.io/me')\n  .its('body.showWizard')\n  .then((val) => {\n    if (val) {\n      // dismiss the wizard conditionally by enqueuing these\n      // three additional commands\n      cy.get('#wizard').contains('Close').click()\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Express Route Handler for Form Submission\nDESCRIPTION: Node.js/Express route handler showing redirect after form submission.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cross-origin-testing.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\napp.post('/submit', (req, res) => {\n  res.redirect('https://example.cypress.io')\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress.Promise Syntax\nDESCRIPTION: Shows the basic syntax for creating a new Cypress.Promise instance.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/promise.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew Cypress.Promise(fn)\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests in Electron with Higher Parallelization\nDESCRIPTION: Command to run Cypress tests in Electron browser with parallelization enabled, using a group label (4x-electron) to indicate higher parallelization level.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/features/smart-orchestration/parallelization.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --record --group 4x-electron --parallel\n```\n\n----------------------------------------\n\nTITLE: Replacing mountHook with mount in Cypress 11\nDESCRIPTION: Shows how to replace the removed mountHook function with mount and a component in Cypress 11 for testing React hooks.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useCallback } from 'react'\n\nfunction useCounter() {\n  const [count, setCount] = useState(0)\n  const increment = useCallback(() => setCount((x) => x + 1), [])\n\n  return { count, increment }\n}\n\nimport { mountHook } from 'cypress/react'\nimport { useCounter } from './useCounter'\n\nit('increments the count', () => {\n  mountHook(() => useCounter()).then((result) => {\n    expect(result.current.count).to.equal(0)\n    result.current.increment()\n    expect(result.current.count).to.equal(1)\n    result.current.increment()\n    expect(result.current.count).to.equal(2)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Browser Versions Over Time API Endpoint\nDESCRIPTION: This API endpoint tracks browser versions tested over time, returning spec count, browser, version, day, and week data.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=browser-versions-over-time&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Importing Node.js File System Module for Video Management\nDESCRIPTION: Import statement for the Node.js fs module used in the video deletion examples.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/after-spec-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs'\n```\n\n----------------------------------------\n\nTITLE: Debug Logging Commands for Unix Systems\nDESCRIPTION: Commands to enable debug logging output for Cypress using the DEBUG environment variable on macOS, Linux, or Git Bash.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nDEBUG=cypress:* npx cypress run\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessibility Violation Check with Cypress Results API\nDESCRIPTION: Example code showing how to fetch accessibility test results and enforce a 'no new failing rules' policy using the Cypress Results API. The script checks results against a predefined list of known violations and fails if new violations are detected.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/accessibility/guides/block-pull-requests.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getAccessibilityResults } = require('@cypress/extract-cloud-results')\n\n// List of known failing rules\nconst rulesWithExistingViolations = [\n  'button-name',\n  // Add more rules as needed\n]\n\n// Fetch accessibility results\ngetAccessibilityResults().then((results) => {\n  // Identify new rule violations\n  const newRuleViolations = results.rules.filter((rule) => {\n    return !rulesWithExistingViolations.includes(rule.name)\n  })\n\n  if (newRuleViolations.length > 0) {\n    // Trigger appropriate action if new violations are detected\n    throw new Error(\n      `${newRuleViolations.length} new rule violations detected. These must be resolved.`\n    )\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Browsers in Fullscreen Mode for Cypress Tests\nDESCRIPTION: This snippet demonstrates how to launch browsers in fullscreen mode. It handles both Chromium-based browsers and Electron separately, setting the appropriate launch options for each.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/browser-launch-api.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\non('before:browser:launch', (browser = {}, launchOptions) => {\n  if (browser.family === 'chromium' && browser.name !== 'electron') {\n    launchOptions.args.push('--start-fullscreen')\n\n    return launchOptions\n  }\n\n  if (browser.name === 'electron') {\n    launchOptions.preferences.fullscreen = true\n\n    return launchOptions\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Older Browserify Preprocessor for CJSX Support\nDESCRIPTION: This snippet shows how to install an older version of the Browserify preprocessor to maintain CJSX support, which is no longer included in Cypress 4.0.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_115\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @cypress/browserify-preprocessor@1.1.2\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// cypress/plugins/index.js\nconst browserify = require('@cypress/browserify-preprocessor')\n\nmodule.exports = (on) => {\n  on('file:preprocessor', browserify())\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Cypress via npx (Shell)\nDESCRIPTION: Executes the `cypress open` command using `npx`. This command launches the Cypress Test Runner UI, allowing interactive test execution and debugging. Requires Node.js, npm, and Cypress to be installed in the project.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_cypress-open-commands.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx cypress open\n```\n\n----------------------------------------\n\nTITLE: Importing External CSS in Vue Component\nDESCRIPTION: Example showing how to import an external CSS file in a Vue component after extracting styles to a separate file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/styling-components.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n/* App.vue */ <style src=\"./app.css\" />\n```\n\n----------------------------------------\n\nTITLE: Test Code Causing Detachment Error\nDESCRIPTION: Example of test code that causes detachment errors and its fixed version by breaking up the chain.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/error-messages.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').click().parent()\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').click()\ncy.get('button').parent()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cookies in Cypress\nDESCRIPTION: Basic syntax for getting cookies in Cypress, with and without options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/getcookies.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.getCookies()\ncy.getCookies(options)\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Dynamic Elements Grouping Example\nDESCRIPTION: Sample HTML showing product buttons with dynamic IDs that will be grouped together by the corresponding elementGroups configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/elementgroups.mdx#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<body>\n  <button id=\"product125\">Product 1</button>\n  <button id=\"product514\">Product 2</button>\n  <button id=\"product256\">Product 3</button>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Checking CPU Information\nDESCRIPTION: Node.js command to display detailed CPU information including model, speed and usage statistics.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/overview.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnode -p 'os.cpus()'\n[\n  {\n    model: 'Intel(R) Xeon(R) Platinum 8124M CPU @ 3.00GHz',\n    speed: 3399,\n    times: { user: 760580, nice: 1010, sys: 158130, idle: 1638340, irq: 0 }\n  }\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Running Cypress with JUnit Reporter and Unique Filenames (Shell)\nDESCRIPTION: Executes Cypress tests using the JUnit reporter with unique filenames specified via command line.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/reporters.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx cypress run --reporter junit \\\n  --reporter-options \"mochaFile=results/my-test-output-[hash].xml\"\n```\n\n----------------------------------------\n\nTITLE: Updating Chromium-based Browser Detection in Cypress 4.0\nDESCRIPTION: This snippet shows how to update the browser detection code for Chromium-based browsers in Cypress 4.0. It uses both 'browser.family' and 'browser.name' to select non-Electron Chromium-based browsers.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_112\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (on, config) => {\n  on('before:browser:launch', (browser = {}, launchOptions) => {\n    if (browser.family === 'chromium' && browser.name !== 'electron') {\n      // pass launchOptions to Chromium-based browsers in 4.0\n      return launchOptions\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Form Controls with Labels in Cypress UI Coverage\nDESCRIPTION: Configuration example showing how to group form inputs and their associated labels under a custom name. This creates more meaningful groups for form elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/elementgroups.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"elementGroups\": [\n      {\n        \"selector\": \"input[name='animal'], label:has(input[name='animal'])\",\n        \"name\": \"Animal Option\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests in Parallel\nDESCRIPTION: Command to execute Cypress tests in parallel mode with recording enabled using a specific key.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/features/smart-orchestration/parallelization.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --record --key=abc123 --parallel\n```\n\n----------------------------------------\n\nTITLE: Retrieving Project List via Cypress Cloud API (URL)\nDESCRIPTION: Example API call to retrieve a list of all projects in Cypress Cloud that have recorded tests since the specified `start_date`. Uses `report_id=project-list`. The response includes `project_name` and `id`, useful for generating direct links to project analytics.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: url\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=project-list&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Asserting on Window Alert Text in Cypress Tests\nDESCRIPTION: This snippet demonstrates how to assert on the text content of window alerts in Cypress tests. It uses a stub to capture alert calls and then makes assertions on the stub's calls.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/catalog-of-events.mdx#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nit('can assert on the alert text content', () => {\n  const stub = cy.stub()\n\n  cy.on('window:alert', stub)\n\n  cy.get('button')\n    .click()\n    .then(() => {\n      expect(stub.getCall(0)).to.be.calledWith('hi')\n      expect(stub.getCall(1)).to.be.calledWith('there')\n      expect(stub.getCall(2)).to.be.calledWith('friend')\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Using 'invoke' with Third-Party Plugins (Kendo DropDown)\nDESCRIPTION: Demonstrates how to use '.invoke()' with jQuery plugins like Kendo UI components, both with and without chaining.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/invoke.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input')\n  .invoke('getKendoDropDownList')\n  .then((dropDownList) => {\n    // yields the return of $input.getKendoDropDownList()\n    return dropDownList.select('apples')\n  })\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input')\n  .invoke('getKendoDropDownList')\n  .invoke('select', 'apples')\n  .invoke('val')\n  .should('match', /apples/)\n```\n\n----------------------------------------\n\nTITLE: Using Cypress.config Inside Asynchronous Command Chain\nDESCRIPTION: JavaScript example demonstrating the proper way to update configuration within a test by using cy.then() to handle asynchronous execution.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/config.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nit('using cy.then', () => {\n  cy.visit('/my-test_page')\n  cy.click('#download-html').then(() => {\n    Cypress.config('baseUrl', null)\n  })\n  cy.visit('/downloads/contents.html')\n})\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration in Cypress 11\nDESCRIPTION: Updated example showing manual Vite configuration merging with existing vite.config file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'cypress'\nimport viteConfig from './vite.config'\n\nexport default defineConfig({\n  component: {\n    devServer: {\n      framework: 'react',\n      bundler: 'vite',\n      viteConfig: {\n        ...viteConfig,\n        // ... other overrides ...\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Record Tests Command\nDESCRIPTION: Command to run and record Cypress tests with API key for Cypress Cloud\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/overview.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --record --key=abc123\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of .children() Command in Cypress\nDESCRIPTION: Demonstrates the correct way to use the .children() command by chaining it after a command that yields DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/children.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('nav').children() // Yield children of nav\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of .focus() in Cypress\nDESCRIPTION: Shows examples of incorrect usage of the focus command, including trying to chain it directly off cy or on elements that cannot receive focus.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/focus.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.focus('#search') // Errors, cannot be chained off 'cy'\ncy.window().focus() // Errors, 'window' does not yield DOM element\n```\n\n----------------------------------------\n\nTITLE: Element Grouping Configuration for Dynamic IDs\nDESCRIPTION: JSON configuration to group elements with dynamically generated IDs. This example targets navigation buttons with IDs starting with 'nav-button' to consolidate them in the UI Coverage report.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/guides/reduce-noise.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"elementGroups\": [\n      {\n        \"selector\": \"nav [id^=nav-button]\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples of Cypress .siblings() Command\nDESCRIPTION: Examples showing incorrect ways to use the .siblings() command in Cypress, highlighting that it requires DOM elements and cannot be chained directly off cy.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/siblings.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.siblings('.error') // Errors, cannot be chained off 'cy'\ncy.clock().siblings() // Errors, 'clock' does not yield DOM elements\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress Session Methods\nDESCRIPTION: Core session management methods including clearing saved sessions, clearing current session data, getting current session data, and retrieving specific session data.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/session.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Clear all sessions saved on the backend, including cached global sessions.\nCypress.session.clearAllSavedSessions()\n// Clear all storage and cookie date across all origins associated with the current session.\nCypress.session.clearCurrentSessionData()\n// Get all storage and cookie data across all origins associated with the current session.\nCypress.session.getCurrentSessionData()\n// Get all storage and cookie data saved on the backend associated with the provided session id.\nCypress.session.getSession(id)\n```\n\n----------------------------------------\n\nTITLE: Enabling Video Recording in Cypress Configuration (v13+)\nDESCRIPTION: Demonstrates how to explicitly enable video recording in the Cypress configuration file by setting the `video` property to `true`. This overrides the default behavior introduced in Cypress v13 where video recording is off by default.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  video: true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Patch for Cypress\nDESCRIPTION: Command to create a patch for Cypress using patch-package.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_25\n\nLANGUAGE: css\nCODE:\n```\nnpx patch-package cypress\npatch-package 8.0.0\n• Creating temporary folder\n• Installing cypress@13.15.0 with npm\n• Diffing your files with clean files\n✔ Created file patches/cypress+13.15.0.patch\n\n💡 cypress is on GitHub! To draft an issue based on your patch run\n\n    npx patch-package cypress --create-issue\n```\n\n----------------------------------------\n\nTITLE: Appending Content to a File\nDESCRIPTION: Example of appending content to an existing file using the a+ flag option.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/writefile.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncy.writeFile('path/to/message.txt', 'Hello World', { flag: 'a+' })\n```\n\n----------------------------------------\n\nTITLE: Importing Cypress Svelte Mount Function (Before v14/Separate Package)\nDESCRIPTION: Demonstrates the original import statement used for the `mount` function from the built-in Cypress Svelte harness (for Svelte 3/4) prior to Cypress v14.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport { mount } from `cypress/svelte`\n```\n\n----------------------------------------\n\nTITLE: Custom Download Path Template Examples\nDESCRIPTION: Examples showing how to configure custom download paths using environment variables for different server structures.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/advanced-installation.mdx#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nexport CYPRESS_DOWNLOAD_MIRROR=https://cypress-download.local\nexport CYPRESS_DOWNLOAD_PATH_TEMPLATE='${endpoint}/${platform}-${arch}/cypress.zip'\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport CYPRESS_DOWNLOAD_PATH_TEMPLATE='https://software.local/cypress/${platform}/${arch}/${version}/cypress.zip'\n```\n\n----------------------------------------\n\nTITLE: Querying Cypress Build Versions Summary API Endpoint\nDESCRIPTION: This API endpoint helps monitor which Cypress versions are being used in an organization, returning run count and Cypress version data.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=cypress-build-versions-summary&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Running Cypress with NPM-installed Reporter (Shell)\nDESCRIPTION: Executes Cypress tests using the 'mochawesome' reporter specified via command line.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/reporters.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx cypress run --reporter mochawesome\n```\n\n----------------------------------------\n\nTITLE: Elements Shown in UI After Filtering in Cypress UI Coverage\nDESCRIPTION: This snippet shows which elements would appear in the UI Coverage report after applying the elementFilters configuration. Only the Cancel button is shown because the disabled Submit button was excluded by the filter.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/elementfilters.mdx#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n[data-cy='cancel']\n```\n\n----------------------------------------\n\nTITLE: Reading Campaign Data from HTML Attributes in Cypress\nDESCRIPTION: This example demonstrates extracting campaign information embedded in the DOM through a data attribute on the HTML element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/conditional-testing.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('html')\n  .should('have.attr', 'data-campaign')\n  .then((campaign) => {\n    return campaigns.test(campaign)\n  })\n```\n\n----------------------------------------\n\nTITLE: Installing Cypress with npm (Shell)\nDESCRIPTION: This command uses the Node Package Manager (npm) to install Cypress. The `--save-dev` flag adds Cypress to the `devDependencies` section of your project's `package.json` file, indicating it's needed for development and testing but not for production.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_cypress-install-commands.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install cypress --save-dev\n```\n\n----------------------------------------\n\nTITLE: Chrome Web Security Configuration\nDESCRIPTION: Cypress configuration example showing how to disable Chrome web security.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cross-origin-testing.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  chromeWebSecurity: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Cypress Tests in AWS CodeBuild\nDESCRIPTION: This YAML snippet shows how to set environment variables in the install phase, including Git information and parsing the CY_GROUP_SPEC variable.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/aws-codebuild.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nphases:\n  install:\n    commands:\n      # Set COMMIT_INFO variables to send Git specifics to Cypress Cloud when recording\n      # https://docs.cypress.io//app/continuous-integration/overview#Git-information\n      - export COMMIT_INFO_BRANCH=\"$(git rev-parse HEAD | xargs git name-rev |\n        cut -d' ' -f2 | sed 's/remotes\\/origin\\///g')\"\n      - export COMMIT_INFO_MESSAGE=\"$(git log -1 --pretty=%B)\"\n      - export COMMIT_INFO_EMAIL=\"$(git log -1 --pretty=%ae)\"\n      - export COMMIT_INFO_AUTHOR=\"$(git log -1 --pretty=%an)\"\n      - export COMMIT_INFO_SHA=\"$(git log -1 --pretty=%H)\"\n      - export COMMIT_INFO_REMOTE=\"$(git config --get remote.origin.url)\"\n      - CY_GROUP=$(echo $CY_GROUP_SPEC | cut -d'|' -f1)\n      - CY_BROWSER=$(echo $CY_GROUP_SPEC | cut -d'|' -f2)\n      - CY_SPEC=$(echo $CY_GROUP_SPEC | cut -d'|' -f3)\n      - CY_CONFIG=$(echo $CY_GROUP_SPEC | cut -d'|' -f4)\n      - npm ci\n## ...\n```\n\n----------------------------------------\n\nTITLE: Azure DevOps Pipeline with UI Coverage Verification\nDESCRIPTION: Example Azure DevOps pipeline configuration showing how to add UI Coverage verification steps to an existing Cypress test job.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/results-api.mdx#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  - job: run_tests\n    pool:\n      vmImage: 'ubuntu-latest'\n    steps:\n      - task: NodeTool@0\n        inputs:\n          versionSpec: '20.x'\n          displayName: 'Install Node.js'\n\n      - script: npm i\n        displayName: 'Install npm dependencies'\n\n      - script: npx cypress run --record\n        displayName: 'Run Cypress tests'\n        env:\n          # avoid warnings about terminal\n          TERM: xterm\n          CYPRESS_RECORD_KEY: $(CYPRESS_RECORD_KEY)\n\n     - script: |\n           npm install --force https://cdn.cypress.io/extract-cloud-results/v1/extract-cloud-results.tgz\n           node ./scripts/verifyUICoverageResults.js\n       displayName: 'Verify UI Coverage Results'\n       env:\n         CYPRESS_PROJECT_ID: $(CYPRESS_PROJECT_ID)\n         CYPRESS_RECORD_KEY: $(CYPRESS_RECORD_KEY)\n```\n\n----------------------------------------\n\nTITLE: Matching Non-breaking Spaces with cy.contains()\nDESCRIPTION: Shows how cy.contains() can match text containing non-breaking space entities (&nbsp;) using regular space characters.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/contains.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// finds the span element\ncy.contains('Hello world')\n```\n\n----------------------------------------\n\nTITLE: Extracting Vue Global Styles to External CSS File\nDESCRIPTION: Example demonstrating how to decouple global styles from a Vue component (App.vue) into a separate CSS file for better reuse in testing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/styling-components.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  /* In certain scaffolds, the App.vue file does not have a separate styles file */\n\n  #app {\n    font-family: Sans-serif;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Inefficient SSO Login Custom Command in Cypress\nDESCRIPTION: An example of an inefficient custom command for SSO login that doesn't use session caching.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/origin.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.add('login', (username, password) => {\n  // Remember to pass in arguments via `args`\n  const args = { username, password }\n  cy.origin('cypress.io', { args }, ({ username, password }) => {\n    // Go to https://example.cypress.com/login\n    cy.visit('/login')\n    cy.contains('Username').find('input').type(username)\n    cy.contains('Password').find('input').type(password)\n    cy.get('button').contains('Login').click()\n  })\n  // Confirm we're back at the primary origin before continuing\n  cy.url().should('contain', '/home')\n})\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Without Runner UI With CLI Flag - Shell\nDESCRIPTION: This CLI command runs Cypress in fully headless mode by passing the --no-runner-ui flag, suppressing rendering of the entire Cypress Test Runner UI (including Command Log). This flag is used to isolate potential UI or rendering performance issues, or when only test results (artifacts/logs) are needed. The environment must support Cypress, npx, and command-line flag parsing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnpx cypress run --no-runner-ui\n```\n\n----------------------------------------\n\nTITLE: Disabling Logging of XHR/Fetch Requests in Cypress\nDESCRIPTION: This code shows how to disable logging of all XMLHttpRequests and fetch requests in Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/account-management/data-storage-and-masking.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbefore(() => {\n  // disable Cypress's default behavior of logging all XMLHttpRequests and fetches\n  cy.intercept({ resourceType: /xhr|fetch/ }, { log: false })\n})\n```\n\n----------------------------------------\n\nTITLE: Modifying Configuration in TypeScript\nDESCRIPTION: Example showing how to modify configuration values and environment variables in the setupNodeEvents function using TypeScript.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/configuration-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(config) // see everything in here!\n\n// modify config values\nconfig.defaultCommandTimeout = 10000\nconfig.baseUrl = 'https://staging.acme.com'\n\n// modify env var value\nconfig.env.ENVIRONMENT = 'staging'\n\n// IMPORTANT return the updated config object\nreturn config\n```\n\n----------------------------------------\n\nTITLE: Correct Configuration of baseUrl in Cypress\nDESCRIPTION: Example showing the proper way to configure baseUrl by placing it inside the e2e testing-type specific object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/configuration.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  // ✅ THE CORRECT WAY\n  env: {\n    FOO: 'bar',\n  },\n  e2e: {\n    baseUrl: 'http://localhost:3030',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Example package.json Structure for Cypress Project\nDESCRIPTION: Shows a sample package.json configuration that demonstrates the types of dependencies that can be used in Cypress plugins.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/overview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"My Project\",\n  \"dependencies\": {\n    \"debug\": \"x.x.x\"\n  },\n  \"devDependencies\": {\n    \"lodash\": \"x.x.x\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Workers for Parallelization in AWS CodeBuild\nDESCRIPTION: This YAML snippet shows how to define workers for parallelizing Cypress tests in AWS CodeBuild.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/aws-codebuild.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbatch:\n  fast-fail: false\n  build-matrix:\n    # ...\n    dynamic:\n      env:\n        # ...\n        variables:\n          CY_GROUP_SPEC:\n            # ...\n          WORKERS:\n            - 1\n            - 2\n            - 3\n            - 4\n            - 5\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Cypress .rightclick() Command\nDESCRIPTION: Examples of incorrect usage of the .rightclick() command that will result in errors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/rightclick.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.rightclick('button') // Errors, cannot be chained off 'cy'\ncy.window().rightclick() // Errors, 'window' does not yield DOM element\n```\n\n----------------------------------------\n\nTITLE: Basic .focus() Syntax in Cypress\nDESCRIPTION: Syntax options for the focus command in Cypress. The command can be used without arguments or with an options object to customize behavior.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/focus.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.focus()\n.focus(options)\n```\n\n----------------------------------------\n\nTITLE: Importing Cypress Vue 2 Mount Function (Using @cypress/vue2)\nDESCRIPTION: Shows the updated import statement required after installing the separate `@cypress/vue2` package for Vue 2 projects. The import path now references the installed package directly.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { mount } from `@cypress/vue2`\n```\n\n----------------------------------------\n\nTITLE: Incorrect Cypress.sinon Usage Example in JavaScript\nDESCRIPTION: Shows the incorrect way to use Sinon matchers by chaining them off the 'cy' object instead of 'Cypress'.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/sinon.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.sinon.match.string // Errors, cannot be chained off 'cy'\n```\n\n----------------------------------------\n\nTITLE: Enabling Video Recording in Cypress Configuration\nDESCRIPTION: Configuration snippet showing how to enable video recording in Cypress by setting the video property to true.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/screenshots-and-videos.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  video: true\n}\n```\n\n----------------------------------------\n\nTITLE: Aliasing a Static Value Using type: 'static' Option in Cypress JavaScript\nDESCRIPTION: Introduced in Cypress 12.3+, this pattern aliases a static value rather than a query, ensuring that future .get('@alias') operations retrieve the same reference without re-querying the DOM. It is essential for storing primitive or snapshot values. This code requires Cypress 12.3.0 or later.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\ncy.get('.username').invoke('val').as('username', { type: 'static' })\n```\n\n----------------------------------------\n\nTITLE: UI Coverage Results Data Structure\nDESCRIPTION: Detailed structure of the object returned by the getUICoverageResults function, showing all available fields including run information, summary statistics, and per-view coverage details.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/results-api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // The run number of the identified build.\n  runNumber: number\n  // The run url for the identified build.\n  runUrl: 'https://cloud.cypress.io/projects/:project_id/runs/:run_number'\n  // The status of the identified build.\n  runStatus: 'passed' | 'failed' | 'errored' | 'timedOut' | 'cancelled' | 'noTests'\n   // The url that links to UI Coverage report for the identified build.\n  uiCoverageReportUrl: 'https://cloud.cypress.io/[...]'\n  summary: {\n    // Indicates whether a complete UI Coverage report was generated.\n    // For example, if a run was cancelled and the report expected to run\n    // for 20 specs, but only 10 ran, this would result in a partial report.\n    isPartialReport: boolean\n    // The report coverage from 0-100 with 2 decimal precision (e.g 92.45).\n    coverage: number\n    // The number of views tested and analyzed.\n    viewCount: number\n    // The number of interactive elements that were tested.\n    testedElementsCount:number\n    // The number of interactive elements that were not tested.\n    untestedElementsCount: number\n  }\n  // The list of tested views and the coverage of each page.\n  views: [{\n    // The sanatized URL pattern shown in the report.\n    displayName: string\n    // The view coverage from 0-100 with 2 decimal precision (e.g 92.45).\n    coverage: number\n    // The number of interactive elements that were tested on this view.\n    testedElementsCount:number\n    // The number of interactive elements that were not tested on this view.\n    untestedElementsCount: number\n    // The url that links the report for this view.\n    uiCoverageReportUrl: 'https://cloud.cypress.io/[...]'\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Accessibility Score per Project Summary API in Cypress\nDESCRIPTION: This API endpoint provides a summary of Accessibility scores for each project in the organization. It returns simple data including project name and accessibility score.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_37\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=accessibility-per-project-summary&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Cypress Assertion for Element Visibility\nDESCRIPTION: Shows the Cypress equivalent of the Selenium assertion for checking element visibility.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/selenium-to-cypress.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#myButton').should('be.visible')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Configuration Value in Cypress\nDESCRIPTION: JavaScript example showing how to get a specific configuration option by passing its name to Cypress.config().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/config.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.config('pageLoadTimeout') // => 60000\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins for Vue CLI in Cypress 7.0\nDESCRIPTION: Example of configuring the Cypress plugins file for a Vue CLI project, using the resolved webpack configuration from @vue/cli-service.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nconst { startDevServer } = require('@cypress/webpack-dev-server')\n\n// The resolved configuration, which contains any `vue.config.js` setup\nconst webpackConfig = require('@vue/cli-service/webpack.config.js')\n\nmodule.exports = (on, config) => {\n  on('dev-server:start', (options) => {\n    return startDevServer({ options, webpackConfig })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Unnecessary Wait with Request\nDESCRIPTION: Example showing unnecessary wait after cy.request() which already resolves after receiving server response\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/best-practices.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncy.request('http://localhost:8080/db/seed')\ncy.wait(5000) // <--- this is unnecessary\n```\n\n----------------------------------------\n\nTITLE: Setting Default Configuration for Cypress Screenshot API\nDESCRIPTION: Basic syntax for configuring default screenshot behavior in Cypress using the Screenshot API. This method accepts an options object that controls various aspects of screenshot capture.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/screenshot-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Screenshot.defaults(options)\n```\n\n----------------------------------------\n\nTITLE: Cypress window:alert Event Example\nDESCRIPTION: Shows how Cypress handles window alert dialogs. The event yields the alert text but the auto-accept behavior cannot be modified.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/catalog-of-events.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.alert()\n```\n\n----------------------------------------\n\nTITLE: Using a custom attribute as significant in UI Coverage\nDESCRIPTION: Example showing how to configure UI Coverage to prioritize a 'data-role' attribute for element identification and grouping. This helps distinguish between form inputs with different roles.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/significantattributes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"significantAttributes\": [\"data-role\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Unnecessary Wait with Visit\nDESCRIPTION: Example showing unnecessary wait after cy.visit() which already resolves after page load event\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/best-practices.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('http://localhost/8080')\ncy.wait(5000) // <--- this is unnecessary\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Compression in Cypress\nDESCRIPTION: Configuration examples showing how to enable video compression and set custom compression values using videoCompression property.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/screenshots-and-videos.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  videoCompression: true\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  videoCompression: 15\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Commands Outside Test Block\nDESCRIPTION: Shows an incorrect implementation where Cypress commands are executed outside a test block, which causes errors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/error-messages.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('Some Tests', () => {\n  it('is true', () => {\n    expect(true).to.be.true // yup, fine\n  })\n\n  it('is false', () => {\n    expect(false).to.be.false // yup, also fine\n  })\n\n  context('some nested tests', () => {\n    // oops you forgot to write an it(...) here!\n    // these cypress commands below\n    // are running outside of a test and cypress\n    // throws an error\n    cy.get('h1').should('contain', 'todos')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Code Coverage Plugin\nDESCRIPTION: Command to install the @cypress/code-coverage plugin as a dev dependency\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/code-coverage.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @cypress/code-coverage --save-dev\n```\n\n----------------------------------------\n\nTITLE: Command Log Example for nextUntil in Cypress\nDESCRIPTION: Demonstrates how to find all siblings following #veggies until #nuts, showing the command that would appear in the Cypress command log.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/nextuntil.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#veggies').nextUntil('#nuts')\n```\n\n----------------------------------------\n\nTITLE: Installing Deprecated Cypress Vue 2 Harness\nDESCRIPTION: Installs the `@cypress/vue2` package using npm as a development dependency. This allows continued component testing for Vue 2 projects after Cypress v14 removed built-in support, serving as a temporary migration aid.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @cypress/vue2\n```\n\n----------------------------------------\n\nTITLE: Running Cypress with Multiple Reporters (Shell)\nDESCRIPTION: Executes Cypress tests using multiple reporters specified via command line.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/reporters.mdx#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpx cypress run --reporter cypress-multi-reporters \\\n  --reporter-options configFile=reporter-config.json\n```\n\n----------------------------------------\n\nTITLE: Right-clicking with Command Key Modifier\nDESCRIPTION: Example of right-clicking while simulating a command key press (CMD + right-click), useful for testing key combination interactions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/rightclick.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// execute a CMD + right click on the .menu-item\ncy.get('.menu-item').rightclick({\n  metaKey: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Reporters (JSON)\nDESCRIPTION: JSON configuration for multiple reporters, enabling spec and JUnit reporters with custom options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/reporters.mdx#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reporterEnabled\": \"spec, mocha-junit-reporter\",\n  \"mochaJunitReporterReporterOptions\": {\n    \"mochaFile\": \"cypress/results/results-[hash].xml\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Plugin Dev Server in Cypress 9 (Before)\nDESCRIPTION: Example of configuring a React-specific dev server in the legacy Cypress plugins file. This shows how React component testing was previously set up using the react-scripts plugin.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nconst devServer = require('@cypress/react/plugins/react-scripts')\n\nmodule.exports = (on, config) => {\n  if (config.testingType === 'component') {\n    injectDevServer(on, config, {})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Async/Await Test Functions with Done Callback - Example 3\nDESCRIPTION: This example shows how to fix an async/await test function that incorrectly uses a done callback. Since async functions automatically return a promise, the solution is to create a new Promise that resolves when the event is triggered.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_99\n\nLANGUAGE: javascript\nCODE:\n```\nit('uses async/await', async (done) => {\n  const eventEmitter = await getEventEmitter()\n  eventEmitter.on('change', () => done())\n  eventEmitter.doSomethingThatEmitsChange()\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nit('uses async/await', async () => {\n  const eventEmitter = await getEventEmitter()\n  return new Promise((resolve) => {\n    eventEmitter.on('change', () => resolve())\n    eventEmitter.doSomethingThatEmitsChange()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Example with Insecure Link\nDESCRIPTION: HTML example showing an insecure link that would cause security issues when clicked in a Cypress test running on an HTTPS site.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cross-origin-testing.mdx#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <a href=\"http://example.cypress.io/page2\">Page 2</a>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Cypress Event: command:end\nDESCRIPTION: Event emitted when Cypress completes executing a command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/catalog-of-events.mdx#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nEvent: command:end\\nYields: command instance (Object)\n```\n\n----------------------------------------\n\nTITLE: Querying Top Flaky Tests per Project API in Cypress\nDESCRIPTION: This API endpoint returns information about the tests with the highest flaky count for each project. It provides data including project name, flaky count, spec path and filename, and a test replay URL for troubleshooting.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=top-flaky-per-project&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Adding Cypress Type References in TypeScript\nDESCRIPTION: Triple slash directive to explicitly reference Cypress types in TypeScript files to resolve conflicts between Jest and Cypress type definitions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"cypress\" />\n```\n\n----------------------------------------\n\nTITLE: Loading External Fonts via CSS Import in HTML\nDESCRIPTION: Alternative approach to loading Google Fonts using CSS @import within a style tag in the HTML head. This method imports the same font families as the link method but uses a different syntax.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/styling-components.mdx#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <style>\n    @import url('https://fonts.googleapis.com/css2?family=Readex+Pro:wght@200;300;400;500;600;700&family=Roboto&display=swap');\n  </style>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Defining an Angular Component with Signals\nDESCRIPTION: Shows the implementation of a simple Angular component that uses both input and model signals. The component has a required title input signal and a model signal for count with bidirectional binding.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/examples.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// app/components/test-component.component.ts\nimport { Component, input, model } from '@angular/core'\n\n@Component({\n  selector: 'test-component',\n  templateUrl: './test-component.component.html',\n  standalone: true,\n})\nexport class TestComponent {\n  title = input.required<string>()\n  count = model<number>(1)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elements in UI Coverage\nDESCRIPTION: Basic JSON configuration syntax for the elements property in Cypress UI Coverage, allowing custom element identification through selectors and optional naming.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/elements.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"elements\": [\n      {\n        \"selector\": string,\n        \"name\": string\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML with Named Element\nDESCRIPTION: Sample HTML showing an element that will be identified with a human-readable name in UI Coverage reports.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/elements.mdx#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<body>\n  <button id=\"ui-popover-button\">Help</button>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Modifying Azure Pipelines for Cypress Accessibility Checks\nDESCRIPTION: This snippet demonstrates how to update an Azure Pipelines configuration to incorporate Cypress accessibility result verification. It adds steps to install the necessary module and execute a verification script.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/accessibility/results-api.mdx#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n```diff\njobs:\n  - job: run_tests\n    pool:\n      vmImage: 'ubuntu-latest'\n    steps:\n      - task: NodeTool@0\n        inputs:\n          versionSpec: '20.x'\n          displayName: 'Install Node.js'\n\n      - script: npm i\n        displayName: 'Install npm dependencies'\n\n      - script: npx cypress run --record\n        displayName: 'Run Cypress tests'\n        env:\n          # avoid warnings about terminal\n          TERM: xterm\n          CYPRESS_RECORD_KEY: $(CYPRESS_RECORD_KEY)\n\n+     - script: |\n+           npm install --force https://cdn.cypress.io/extract-cloud-results/v1/extract-cloud-results.tgz\n+           node ./scripts/verifyAccessibilityResults.js\n+       displayName: 'Verify Accessibility Results'\n+       env:\n+         CYPRESS_PROJECT_ID: $(CYPRESS_PROJECT_ID)\n+         CYPRESS_RECORD_KEY: $(CYPRESS_RECORD_KEY)\n```\n```\n\n----------------------------------------\n\nTITLE: BaseUrl Configuration in Cypress\nDESCRIPTION: Example of setting baseUrl in Cypress configuration file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/request.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  e2e: {\n    baseUrl: 'http://localhost:1234'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vue 3 Dependencies for Cypress Component Testing\nDESCRIPTION: Command to install necessary dependencies for Vue 3 component testing in Cypress 7.0, including @cypress/vue@next and @cypress/webpack-dev-server.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_65\n\nLANGUAGE: shell\nCODE:\n```\nnpm install cypress @cypress/vue@next @cypress/webpack-dev-server --save-dev\n```\n\n----------------------------------------\n\nTITLE: Defining Build Matrix for Cypress Tests in AWS CodeBuild\nDESCRIPTION: This YAML snippet defines the build matrix for running Cypress tests with different configurations, including browser types and viewport sizes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/aws-codebuild.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbatch:\n  fast-fail: false\n  build-matrix:\n    # ...\n    dynamic:\n      env:\n        # ...\n        variables:\n          CY_GROUP_SPEC:\n            - 'UI-Chrome|chrome|cypress/tests/ui/*'\n            - 'UI-Chrome-Mobile|chrome|cypress/tests/ui/*|viewportWidth=375,viewportHeight=667'\n            - 'API|chrome|cypress/tests/api/*'\n            - 'UI-Firefox|firefox|cypress/tests/ui/*'\n            - 'UI-Firefox-Mobile|firefox|cypress/tests/ui/*|viewportWidth=375,viewportHeight=667'\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress CT for Ejected Create React App (Webpack)\nDESCRIPTION: Example Cypress configuration (`cypress.config.js` or similar) for component testing in an ejected Create React App project. It sets the `framework` to `react`, `bundler` to `webpack`, and provides the necessary Webpack configuration imported from the ejected project's config file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nprocess.env.NODE_ENV = 'development'\nconst { defineConfig } = require('cypress')\nconst webpackConfig = require('./config/webpack.config.js')\n\nmodule.exports = defineConfig({\n  component: {\n    devServer: {\n      framework: 'react',\n      bundler: 'webpack',\n      webpackConfig: webpackConfig('development'),\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Commands Type Reference Example\nDESCRIPTION: Example showing how to reference both Cypress types and custom command definitions using triple-slash directives.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/IDE-integration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// type definitions for Cypress object \"cy\"\n/// <reference types=\"cypress\" />\n\n// type definitions for custom commands like \"createDefaultTodos\"\n/// <reference types=\"../support\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Cypress via npm\nDESCRIPTION: Basic npm command to install Cypress in your project. This is one of two commands needed for initial Cypress setup.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/selenium-to-cypress.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Browser Screen Size Configuration\nDESCRIPTION: Plugin configuration for setting browser screen size in headless mode, showing the before and after code for version 8.0.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (on, config) => {\n  on('before:browser:launch', (browser, launchOptions) => {\n    if (browser.name === 'chrome' && browser.isHeadless) {\n      launchOptions.args.push('--window-size=1280,720')\n    }\n\n    if (browser.name === 'electron' && browser.isHeadless) {\n      launchOptions.preferences.width = 1280\n      launchOptions.preferences.height = 720\n    }\n\n    if (browser.name === 'firefox' && browser.isHeadless) {\n      launchOptions.args.push('--width=1280')\n      launchOptions.args.push('--height=720')\n    }\n\n    return launchOptions\n  })\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (on, config) => {\n  // the default screen size is 1280x720 in all headless browsers\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cypress with Auto Cancellation Threshold\nDESCRIPTION: Command to run Cypress tests with recording enabled and setting a specific failure threshold for auto cancellation.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/features/smart-orchestration/run-cancellation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx cypress run --record --key <<your_record_key>> --auto-cancel-after-failures 1\n```\n\n----------------------------------------\n\nTITLE: Configuration Example - Branch Review Environment Variable\nDESCRIPTION: Example showing how to pass PR numbers to runs as environment variables for proper PR data mapping in Cypress Cloud\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/features/branch-review.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{\\\"PR numbers\\\": \\\"Pass PR numbers to runs as environment variables\\\"}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cypress Test Types via Cypress Cloud API (URL)\nDESCRIPTION: Example API call to analyze the adoption of end-to-end vs. component testing across the organization since the `start_date`. Uses `report_id=cypress-test-types`. The response includes `testing_type`, `total_tests`, `total_e2e`, `total_ct`, `week`, and `day`.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_5\n\nLANGUAGE: url\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=cypress-test-types&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Buffer-based File Selection in Cypress\nDESCRIPTION: Shows how to use selectFile with a Buffer containing string content instead of a file path.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/selectfile.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.file-input').selectFile(Cypress.Buffer.from('Hello world'))\n```\n\n----------------------------------------\n\nTITLE: Configuring CA Certificate\nDESCRIPTION: Shell command showing how to configure a custom certificate authority in .npmrc file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/advanced-installation.mdx#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncafile=/home/person/certs/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Fixture Data in Tests\nDESCRIPTION: Shows the incorrect way to try to dynamically update fixture data during tests, which doesn't work due to caching.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/fixture.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// 🚨 DOES NOT WORK\ncy.intercept('GET', '/todos/1', { fixture: 'todo' }).as('todo')\n// application requests the /todos/1 resource\n// the intercept replies with the object from todo.json file\n\ncy.wait('@todo').then(() => {\n  cy.writeFile('/cypress/fixtures/todo.json', { title: 'New data' })\n})\n// application requests the /todos/1 resource again\n// the intercept replies with the originally loaded object\n// from the todo.json file and NOT { \"title\": \"New data\" }\n```\n\n----------------------------------------\n\nTITLE: Form Submission HTML Example\nDESCRIPTION: HTML form markup demonstrating a basic POST form submission.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cross-origin-testing.mdx#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <form method=\"POST\" action=\"/submit\">\n    <input type=\"text\" name=\"email\" />\n    <input type=\"submit\" value=\"Submit\" />\n  </form>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Chrome-Specific CSS Styles\nDESCRIPTION: Example of Chrome-specific media query and corresponding test to verify CSS properties.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/browser.mdx#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@media and (-webkit-min-device-pixel-ratio: 0) {\n  .header {\n    margin-right: 0;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nit('has correct Chrome specific css property', () => {\n  // if in Chrome, check css property was properly applied\n  if (Cypress.browser.name === 'chrome') {\n    cy.get('.header').should('have.css', 'margin-right').and('eq', '0')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: ScrollTo Incorrect Usage Example\nDESCRIPTION: Demonstrates an incorrect usage that will result in an error due to invalid element targeting.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/scrollto.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.title().scrollTo('My App') // Errors, 'title' does not yield DOM element\n```\n\n----------------------------------------\n\nTITLE: Xvfb Configuration Commands for Linux\nDESCRIPTION: Commands for setting up X11 server with Xvfb for running Cypress on Linux environments\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/overview.mdx#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nXvfb :99 &\nexport DISPLAY=:99\npkill Xvfb\n```\n\n----------------------------------------\n\nTITLE: Data Processing and File Selection\nDESCRIPTION: Shows how to process data before using it in file selection.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/selectfile.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.readFile('users.json')\n  .then((users) => {\n    users[0].username = 'JohnCena'\n  })\n  .as('myFile')\n\ncy.get('input[type=file]').selectFile('@myFile')\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples of Cypress Filter Command\nDESCRIPTION: Shows incorrect usage of the filter command, including trying to chain it directly off 'cy' or after commands that don't yield DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/filter.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.filter('.animated') // Errors, cannot be chained off 'cy'\ncy.clock().filter() // Errors, 'clock' does not yield DOM elements\n```\n\n----------------------------------------\n\nTITLE: Querying Top Errors per Project API in Cypress\nDESCRIPTION: This API endpoint returns information about tests with the highest number of errors for each project. It provides data grouped by error type and message, including project name, test result UUID, error details, error count, and a test replay URL.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_33\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=top-errors-per-project&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Crash Reports Configuration\nDESCRIPTION: Commands for disabling crash reporting in different shell environments.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/advanced-installation.mdx#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nexport CYPRESS_CRASH_REPORTS=0\n```\n\nLANGUAGE: shell\nCODE:\n```\nset CYPRESS_CRASH_REPORTS=0\n```\n\nLANGUAGE: shell\nCODE:\n```\n$env:CYPRESS_CRASH_REPORTS = \"0\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nsetx CYPRESS_CRASH_REPORTS 0\n```\n\n----------------------------------------\n\nTITLE: Querying UI Coverage per Project Summary API in Cypress\nDESCRIPTION: This API endpoint provides a summary of UI Coverage percentage for each project in the organization. It returns simple data including project name and UI coverage percentage.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_34\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=ui-coverage-per-project-summary&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Setting Default Screenshot Capture Options in Cypress\nDESCRIPTION: This code sets the default capture options for all screenshots in Cypress, hiding the Cypress Command Log.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/account-management/data-storage-and-masking.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbefore(() => {\n  Cypress.Screenshot.defaults({\n    capture: 'viewport', // or fullPage\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Reporter in Cypress Config (JavaScript)\nDESCRIPTION: Specifies a custom reporter located at 'reporters/custom.js' in the Cypress configuration file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/reporters.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  reporter: 'reporters/custom.js'\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of 'next' Command\nDESCRIPTION: Examples of incorrect usage of the 'next' command, which cannot be chained off 'cy' or non-DOM yielding commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/next.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.next() // Errors, cannot be chained off 'cy'\ncy.getCookies().next() // Errors, 'getCookies' does not yield DOM element\n```\n\n----------------------------------------\n\nTITLE: Shell Output for Test Replay Artifact Upload\nDESCRIPTION: Example shell output showing the size and upload time of Test Replay artifacts to Cypress Cloud. Demonstrates that Test Replay data is relatively small (298 kB) and uploads quickly.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/features/test-replay.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n  (Uploading Cloud Artifacts)\n\n  - Video - Nothing to upload\n  - Screenshot - Nothing to upload\n  - Test Replay - 298 kB\n\n  Uploading Cloud Artifacts: .\n\n  (Uploaded Cloud Artifacts)\n\n  - Test Replay - Done Uploading 298 kB in 633.40ms 1/1\n```\n\n----------------------------------------\n\nTITLE: Example HTML for last() Command Demo\nDESCRIPTION: Sample HTML list structure used to demonstrate the last() command in Cypress to target the final list item.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/last.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li class=\"one\">Knick knack on my thumb</li>\n  <li class=\"two\">Knick knack on my shoe</li>\n  <li class=\"three\">Knick knack on my knee</li>\n  <li class=\"four\">Knick knack on my door</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Logging Spec Path After Test Completion\nDESCRIPTION: Example showing how to log the relative spec path to stdout after a spec is run. Includes comments showing the structure of the spec and results objects.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/after-spec-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\non('after:spec', (spec, results) => {\n  // spec will look something like this:\n  // {\n  //   name: 'login.cy.js',\n  //   relative: 'cypress/e2e/login.cy.js',\n  //   absolute: '/Users/janelane/my-app/cypress/e2e/login.cy.js',\n  // }\n  // results will look something like this:\n  // {\n  //   stats: {\n  //     suites: 0,\n  //     tests: 1,\n  //     passes: 1,\n  //     pending: 0,\n  //     skipped: 0,\n  //     failures: 0,\n  //     // ...more properties\n  //   }\n  //   reporter: 'spec',\n  //   tests: [\n  //     {\n  //       title: ['login', 'logs user in'],\n  //       state: 'passed',\n  //       // ...more properties...\n  //     }\n  //   ],\n  //   error: null,\n  //   video: '/Users/janelane/my-app/cypress/videos/login.cy.js.mp4',\n  //   screenshots: [],\n  //   // ...more properties...\n  // }\n  console.log('Finished running', spec.relative)\n})\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Aliases in Cypress\nDESCRIPTION: This example demonstrates the incorrect way of using aliases in Cypress, where the alias is accessed before the asynchronous command has completed.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/variables-and-aliases.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nit('is not using aliases correctly', function () {\n  cy.fixture('users.json').as('users')\n\n  // nope this won't work\n  //\n  // this.users is not defined\n  // because the 'as' command has only\n  // been enqueued - it has not run yet\n  const user = this.users[0]\n})\n```\n\n----------------------------------------\n\nTITLE: Download URL Example for Cypress\nDESCRIPTION: Example URL format for downloading a specific version of Cypress for Windows 64-bit platform.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/advanced-installation.mdx#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nhttps://download.cypress.io/desktop/12.17.4?platform=win32&arch=x64\n```\n\n----------------------------------------\n\nTITLE: Querying Browser Versions API Endpoint\nDESCRIPTION: This API endpoint tracks which browser versions are being tested, returning spec count, browser, and version data.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=browser-versions&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Grouping Container Elements in Cypress UI Coverage\nDESCRIPTION: Configuration example that groups all button elements within a specific container (#calendar) into a single group for better coverage analysis.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/elementgroups.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"elementGroups\": [\n      {\n        \"selector\": \"#calendar button\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Auth0-Authenticated React Component\nDESCRIPTION: This snippet creates an AppAuth0 component that uses the useAuth0 hook from auth0-react SDK. It handles authentication state and token retrieval, sending an AUTH0 event with user and token data.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/auth0-authentication.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// initial imports ...\n\nimport { withAuthenticationRequired, useAuth0 } from '@auth0/auth0-react'\n\n// ...\n\nconst AppAuth0 = () => {\n  const { isAuthenticated, user, getAccessTokenSilently } = useAuth0()\n\n  // ...\n\n  useEffect(() => {\n    ;(async function waitForToken() {\n      const token = await getAccessTokenSilently()\n      authService.send('AUTH0', { user, token })\n    })()\n  }, [user, getAccessTokenSilently])\n\n  // ...\n\n  const isLoggedIn =\n    isAuthenticated &&\n    (authState.matches('authorized') ||\n      authState.matches('refreshing') ||\n      authState.matches('updating'))\n\n  return <div className={classes.root}>// ...</div>\n}\n\nexport default withAuthenticationRequired(AppAuth0)\n```\n\n----------------------------------------\n\nTITLE: Updating Test File Locations Configuration in Cypress 10\nDESCRIPTION: Shows the change in configuration from using componentFolder, integrationFolder, and testFiles to using specPattern within component and e2e configuration objects.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"componentFolder\": \"src\",\n  \"integrationFolder\": \"cypress/integration\",\n  \"testFiles\": \"**/*.cy.js\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  component: {\n    specPattern: 'src/**/*.cy.js'\n  },\n  e2e: {\n    specPattern: 'cypress/integration/**/*.cy.js'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Failed Test Details API Endpoint\nDESCRIPTION: This API endpoint extracts all failed test result details, with data available 30 minutes after run completion. It returns comprehensive information about failed tests including error messages and replay URLs.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_23\n\nLANGUAGE: http\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=failed-test-details&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Asserting Input Value Negation in Cypress\nDESCRIPTION: Demonstrates using 'not.have.value' to assert that an input element does not have a specific value.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input').should('not.have.value', 'Jane')\n```\n\n----------------------------------------\n\nTITLE: Overriding Cypress Configuration via Command Line (Shell)\nDESCRIPTION: Shows how to override specific Cypress configuration options, such as `viewportWidth` and `viewportHeight`, directly from the command line using the `--config` flag when executing `cypress run`. Multiple overrides are separated by commas.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/configuration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --browser firefox --config viewportWidth=1280,viewportHeight=720\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of last() Command in Cypress\nDESCRIPTION: Shows incorrect implementations of the .last() command that will result in errors because it must be chained from commands that yield DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/last.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.last() // Errors, cannot be chained off 'cy'\ncy.getCookies().last() // Errors, 'getCookies' does not yield DOM element\n```\n\n----------------------------------------\n\nTITLE: Ignoring Dynamic Attributes for Element Grouping\nDESCRIPTION: Configuration to filter out data-cy attributes with dynamic numeric IDs to ensure similar elements are grouped together in the UI Coverage report rather than being reported individually.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/attributefilters.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"attributeFilters\": [\n      {\n        \"attribute\": \"data-cy\",\n        \"value\": \"user-\\\\d+\",\n        \"include\": false\n      }\n    ]\n  }\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<button data-cy=\"user-123\" class=\"user\">Harper</button>\n<button data-cy=\"user-456\" class=\"user\">Amara</button>\n```\n\n----------------------------------------\n\nTITLE: Recording Cypress Tests to Cloud with yarn for Local Accessibility Feedback\nDESCRIPTION: Command to record a specific Cypress test to Cypress Cloud using yarn. Requires a record key and specifies which test file to run, providing immediate accessibility feedback during development.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/accessibility/guides/local-development.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn cypress run --key <record_key> --record --spec \"cypress/e2e/my-spec.cy.js\"\n```\n\n----------------------------------------\n\nTITLE: Example Result Output from cypress.run() in JSON\nDESCRIPTION: A typical JSON object returned when the cypress.run() Promise resolves, showing test results including version information, browser details, test statistics, screenshots, and more.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/module-api.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cypressVersion\": \"3.0.2\",\n  \"endedTestsAt\": \"2018-07-11T17:53:35.675Z\",\n  \"browserName\": \"electron\",\n  \"browserPath\": \"path/to/browser\",\n  \"browserVersion\": \"59.0.3071.115\",\n  \"config\": {...},\n  \"osName\": \"darwin\",\n  \"osVersion\": \"14.5.0\",\n  \"runs\": [{\n    \"error\": null,\n    \"reporter\": \"spec\",\n    \"reporterStats\": {...},\n    \"spec\": {...},\n    \"stats\": {\n      \"suites\": 1,\n      \"tests\": 1,\n      \"passes\": 0,\n      \"pending\": 0,\n      \"skipped\": 0,\n      \"failures\": 1,\n      \"startedAt\": \"2020-08-05T08:38:37.589Z\",\n      \"endedAt\": \"2018-07-11T17:53:35.675Z\",\n      \"duration\": 1171\n    },\n    \"screenshots\": [{\n      \"name\": null,\n      \"takenAt\": \"2020-08-05T08:52:20.432Z\",\n      \"path\": \"User/janelane/my-app/cypress/screenshots/cy.js/test (failed).png\",\n      \"height\": 720,\n      \"width\": 1280\n    }],\n    \"tests\": [{\n      \"title\": [ \"test\" ],\n      \"state\": \"failed\",\n      \"displayError\": \"AssertionError: expected true to be false\\n' +\n      '    at Context.eval (...cypress/e2e/cy.js:5:21\",\n      \"attempts\": [{\n        \"state\": \"failed\",\n      }],\n    }],\n    \"video\": \"User/janelane/my-app/cypress/videos/abc123.mp4\"\n  }],\n  \"runUrl\": \"https://cloud.cypress.io/projects/def456/runs/12\",\n  \"startedTestsAt\": \"2018-07-11T17:53:35.463Z\",\n  \"totalDuration\": 212,\n  \"totalFailed\": 1,\n  \"totalPassed\": 0,\n  \"totalPending\": 0,\n  \"totalSkipped\": 0,\n  \"totalSuites\": 1,\n  \"totalTests\": 1,\n}\n```\n\n----------------------------------------\n\nTITLE: Using cypress.cli.parseRunArguments() in JavaScript\nDESCRIPTION: Demonstrates how to use the parseRunArguments helper function to process command line arguments in a wrapper script for cypress.run().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/module-api.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// wrapper.js\nconst cypress = require('cypress')\n\nconst runOptions = await cypress.cli.parseRunArguments(process.argv.slice(2))\nconst results = await cypress.run(runOptions)\n// process the \"cypress.run()\" results\n```\n\n----------------------------------------\n\nTITLE: Updating Angular Test Harness Import for Cypress 14.0\nDESCRIPTION: Shows the required change in importing the Angular test harness in Cypress 14.0, which now uses cypress/angular instead of cypress/angular-signals.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mount } from `cypress/angular`\n```\n\n----------------------------------------\n\nTITLE: Running Cypress with Custom Binary Location on Linux\nDESCRIPTION: This snippet demonstrates how to run Cypress using a custom binary location on Linux by setting the CYPRESS_RUN_BINARY environment variable.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/advanced-installation.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nCYPRESS_RUN_BINARY=~/Downloads/Cypress/Cypress npx cypress run\n```\n\n----------------------------------------\n\nTITLE: Declaring CYPRESS_RECORD_KEY Environment Variable - Cypress Shell\nDESCRIPTION: Sets the 'CYPRESS_RECORD_KEY' environment variable for the current shell session, enabling Cypress to pick up the record key automatically during subsequent command executions. This is a secure method for passing secrets in CI/CD or local environments, separating sensitive information from command history. Ensure the environment variable is set in the relevant environment before running Cypress to enable proper recording.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/get-started/setup.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport CYPRESS_RECORD_KEY=<record key>\n```\n\n----------------------------------------\n\nTITLE: Text File Output Example\nDESCRIPTION: Shows the expected output content after writing text to a file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/writefile.mdx#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow with UI Coverage Verification\nDESCRIPTION: Example workflow file for GitHub Actions showing how to add UI Coverage verification steps to an existing Cypress test job.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/results-api.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: My Workflow\non: push\n\nenv:\n  CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}\n\njobs:\n  run-cypress:\n    runs-on: ubuntu-24.04\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: install\n        run: npm install\n      - name: Run\n        run: npx cypress run --record\n     - name: Verify UI Coverage Results\n       run: |\n          npm install --force https://cdn.cypress.io/extract-cloud-results/v1/extract-cloud-results.tgz\n          node ./scripts/verifyUICoverageResults.js\n```\n\n----------------------------------------\n\nTITLE: Opening Cypress via pnpm (Shell)\nDESCRIPTION: Executes the `cypress open` command using `pnpm`. This command launches the Cypress Test Runner UI, enabling interactive test runs and development workflows. Requires Node.js, pnpm, and Cypress to be installed in the project.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_cypress-open-commands.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm cypress open\n```\n\n----------------------------------------\n\nTITLE: Retrieving Status by Run Over Time via Cypress Cloud API (URL)\nDESCRIPTION: Example API call to track success/failure rates at the run level over time since the `start_date`. Uses `report_id=status-per-build-over-time`. The response includes `status`, `test_run_count`, `week`, and `day`.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_10\n\nLANGUAGE: url\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=status-per-build-over-time&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Querying Status Per Test Over Time API Endpoint\nDESCRIPTION: This API endpoint provides test success and failure rates over time, returning data including project name, test run count, week, and status.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=status-per-test-over-time&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Querying Test Details API Endpoint\nDESCRIPTION: This API endpoint extracts all test result details regardless of status, with data available 30 minutes after run completion. It returns comprehensive test information including duration, errors, and test names.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_24\n\nLANGUAGE: http\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=test-details&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Installing Cypress from Local File\nDESCRIPTION: This snippet demonstrates how to install Cypress from a local file instead of downloading it from the internet.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/advanced-installation.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nCYPRESS_INSTALL_BINARY=/local/path/to/cypress.zip npm install cypress\n```\n\n----------------------------------------\n\nTITLE: HTML with aria-label attributes for UI Coverage\nDESCRIPTION: Example HTML showing buttons with both data-cy and aria-label attributes. When aria-label is configured as significant, UI Coverage will prioritize it for the first button while using data-cy for the second.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/significantattributes.mdx#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<button data-cy=\"close\" aria-label=\"Close\">X</button>\n<button data-cy=\"submit\">Save</button>\n```\n\n----------------------------------------\n\nTITLE: Accessing CPU Architecture in Cypress (JavaScript)\nDESCRIPTION: Demonstrates how to access the CPU architecture using Cypress.arch. This property returns the architecture name as a string, such as 'x64' or 'ia32'.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/arch.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.arch // 'x64'\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of find Command in Cypress\nDESCRIPTION: Shows incorrect ways to use the find command, which will result in errors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/find.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.find('.progress') // Errors, cannot be chained off 'cy'\ncy.exec('node start').find() // Errors, 'exec' does not yield DOM element\n```\n\n----------------------------------------\n\nTITLE: Disabling Verbose Cookie Debugging Output\nDESCRIPTION: Example demonstrating how to enable cookie debugging with reduced verbosity and how to disable debugging completely.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/cookies.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Cookies.debug(true, { verbose: false })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Cookies.debug(false) // now debugging is turned off\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Siblings Example\nDESCRIPTION: An HTML list structure used in examples to demonstrate how .siblings() works on a typical unordered list with multiple list items.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/siblings.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>Home</li>\n  <li>Contact</li>\n  <li class=\"active\">Services</li>\n  <li>Price</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript to Avoid Jest Type Conflicts in Cypress 10\nDESCRIPTION: JSON configuration for tsconfig.json to exclude Cypress files and prevent type conflicts with Jest in Cypress 10.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exclude\": [\"cypress.config.ts\", \"cypress\", \"node_modules\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Incorrect Usage of Spread Command in Cypress\nDESCRIPTION: Demonstrates incorrect ways to use the spread command, including chaining it directly off 'cy' and using it with commands that don't yield an array-like structure.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/spread.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.spread(() => {}) // Errors, cannot be chained off 'cy'\ncy.clock().spread() // Errors, 'clock' does not yield an array\n```\n\n----------------------------------------\n\nTITLE: Including Only Elements Within a Specific Container in Cypress Config (JSON)\nDESCRIPTION: Illustrates a Cypress configuration using multiple `elementFilters` rules to include only elements within a specific container (`#form`). The first rule includes all descendants of `#form`, while the second rule excludes all other elements (`*`). The order of rules is important.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_elementfilters.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"elementFilters\": [\n    {\n      \"selector\": \"#form *\",\n      \"include\": true\n    },\n    {\n      \"selector\": \"*\",\n      \"include\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Status by Spec Over Time via Cypress Cloud API (URL)\nDESCRIPTION: Example API call to track success/failure rates at the spec level over time since the `start_date`. Uses `report_id=status-per-spec-over-time`. The response includes `status`, `test_run_count`, `week`, and `day`.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_12\n\nLANGUAGE: url\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=status-per-spec-over-time&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM-installed Reporter in Cypress Config (JavaScript)\nDESCRIPTION: Specifies the 'mochawesome' reporter in the Cypress configuration file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/reporters.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  reporter: 'mochawesome'\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of dblclick Command in Cypress\nDESCRIPTION: Shows examples of incorrect usage of the dblclick command that will result in errors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/dblclick.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.dblclick('button') // Errors, cannot be chained off 'cy'\ncy.window().dblclick() // Errors, 'window' does not yield DOM element\n```\n\n----------------------------------------\n\nTITLE: API Response File Selection\nDESCRIPTION: Demonstrates how to use API response data as a file input.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/selectfile.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.request('http://localhost:8888/users/827').its('body').as('responseBody')\n\ncy.get('input[type=file]').selectFile('@responseBody')\n```\n\n----------------------------------------\n\nTITLE: Enabling Cypress Debug Logs\nDESCRIPTION: Command to run Cypress with debug logging enabled.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n$ DEBUG=cypress:* ~/.cache/Cypress/13.15.0/Cypress/Cypress --smoke-test --ping=101\n  cypress:snapshot:info Caching 3374, defining 4217 modules! Using cache +0ms\n  cypress:snapshot:debug initializing packherd require +0ms\n  cypress:server:performance-benchmark elapsed time at v8-snapshot-startup-time: 204.65ms +0ms\n  cypress:server:appdata path: /home/<username>/.config/Cypress/cy/production/browsers +0ms\n  cypress:server appending default switches for electron: [\n  cypress:server   { name: '--test-type' },\n  ...\n  cypress:server   { name: '--enable-precise-memory-info' }\n  cypress:server ] +0ms\n  cypress:server:cypress starting cypress with argv [ '/home/<username>/.cache/Cypress/13.15.0/Cypress/Cypress', '--smoke-test', '--ping=101' ] +0ms\n  ...\n  cypress:server:cypress running Electron currently +13ms\n101\n  cypress:server:cypress about to exit with code 0 +18ms\n  cypress:server:browsers browsers.kill called with no active instance +0ms\n```\n\n----------------------------------------\n\nTITLE: Resulting UI Elements After Dynamic Pattern Exclusion (Text)\nDESCRIPTION: Displays the CSS class selector (`.cancel`) representing the element(s) that remain visible or are included in reports after applying the `elementFilters` configuration to exclude elements whose class name starts with 'auth'. This shows the outcome of the pattern-based filter.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_elementfilters.mdx#2025-04-22_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n.cancel\n```\n\n----------------------------------------\n\nTITLE: Recording Cypress Tests to Cloud with pnpm for Local Accessibility Feedback\nDESCRIPTION: Command to record a specific Cypress test to Cypress Cloud using pnpm. Requires a record key and specifies which test file to run, providing immediate accessibility feedback during development.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/accessibility/guides/local-development.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm cypress run --key <record_key> --record --spec \"cypress/e2e/my-spec.cy.js\"\n```\n\n----------------------------------------\n\nTITLE: Updating Plugins File for Cypress 7.0 Component Testing\nDESCRIPTION: Example of updating the Cypress plugins file to use the dev-server:start event instead of file:preprocessor for component testing in version 7.0.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n// The @cypress/webpack-dev-server package replaces @cypress/webpack-preprocessor\nconst { startDevServer } = require('@cypress/webpack-dev-server')\nconst webpackConfig = require('../webpack.config.js')\n\nmodule.exports = (on, config) => {\n  // You must use the dev-server:start event instead of the file:preprocessor event\n\n  on('dev-server:start', (options) => {\n    return startDevServer({ options, webpackConfig })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Cypress Build Versions Over Time API Endpoint\nDESCRIPTION: This API endpoint tracks Cypress versions used over time, returning run count, Cypress version, and week data.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=cypress-build-versions-over-time&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Coverage attributeFilters in JSON\nDESCRIPTION: Basic syntax for configuring attributeFilters in the Cypress UI Coverage configuration. This structure defines which attributes should be included or excluded from element identification and grouping.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/attributefilters.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"attributeFilters\": [\n      {\n        \"attribute\": string,\n        \"value\": string,\n        \"include\": boolean\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0Provider in React Entry Point\nDESCRIPTION: This code wraps the React application with Auth0Provider, providing necessary Auth0 configuration props and a custom onRedirectCallback. It conditionally renders AppAuth0 component when REACT_APP_AUTH0 is set.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/auth0-authentication.mdx#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n// initial imports ...\n\nimport AppAuth0 from \"./containers/AppAuth0\";\n\n// ..\n\nconst onRedirectCallback = (appState: any) => {\n  history.replace((appState && appState.returnTo) || window.location.pathname);\n};\n\nif (process.env.REACT_APP_AUTH0) {\n  ReactDOM.render(\n    <Auth0Provider\n      domain={process.env.REACT_APP_AUTH0_DOMAIN!}\n      clientId={process.env.REACT_APP_AUTH0_CLIENTID!}\n      redirectUri={window.location.origin}\n      audience={process.env.REACT_APP_AUTH0_AUDIENCE}\n      scope={process.env.REACT_APP_AUTH0_SCOPE}\n      onRedirectCallback={onRedirectCallback}\n    >\n      <Router history={history}>\n        <ThemeProvider theme={theme}>\n          <AppAuth0 />\n        </ThemeProvider>\n      </Router>\n    </Auth0Provider>,\n    document.getElementById(\"root\")\n  );\n} else {\n  // render passport-local App.tsx\n}\n```\n\n----------------------------------------\n\nTITLE: Cypress Headless Browser Configuration\nDESCRIPTION: Examples of running Cypress in headless mode before and after version 8.0, showing the simplified command syntax.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_60\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --browser=chrome --headless\ncypress run --browser=firefox --headless\n```\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --browser=chrome\ncypress run --browser=firefox\n```\n\n----------------------------------------\n\nTITLE: Simulating Legacy Storage/Cookie Clearing in Cypress JavaScript\nDESCRIPTION: This snippet describes how to simulate pre-v12 partial test isolation by disabling testIsolation and using beforeEach to explicitly clear local storage and cookies in the current domain. It's useful for ensuring legacy compatibility during migration, but users should add further logic as required. Depends on Cypress and assumes suite-level configuration for testIsolation.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescribe('match pre-12 behavior', { testIsolation: false }, () => {\\n  beforeEach(() => {\\n    cy.clearLocalStorage()\\n    cy.clearCookies()\\n    // other beforeEach logic to restore the expected local storage or cookies needed on the client.\\n  })\\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring experimentalModifyObstructiveThirdPartyCode in Cypress\nDESCRIPTION: Configuration snippet demonstrating how to enable the experimentalModifyObstructiveThirdPartyCode flag in Cypress. This setting allows Cypress to modify third-party .js and .html files, adjust User Agent strings, handle SRI modifications, and update certain HTTP headers.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cross-origin-testing.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  experimentalModifyObstructiveThirdPartyCode: true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Cypress Environment Variable\nDESCRIPTION: Shows how to set a custom environment variable that will be available through Cypress.env(). Since 'foo' doesn't match any standard configuration key, it becomes accessible as an environment variable rather than overriding configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/environment-variables.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nexport CYPRESS_FOO=bar\n```\n\n----------------------------------------\n\nTITLE: Checking Cypress Binary Cache\nDESCRIPTION: Commands to diagnose Cypress binary installation issues by checking cache information\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/overview.mdx#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nnpx cypress cache path\nnpx cypress cache list\n```\n\n----------------------------------------\n\nTITLE: HTML Table with Grouped Delete Buttons Example\nDESCRIPTION: This HTML snippet shows a table with two rows, each containing a delete button. UI Coverage would automatically group these delete buttons together since they share the same position and function across different rows.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/core-concepts/element-grouping.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr>\n    <td>John Doe</td>\n    <td>\n      <button>Delete</button>\n    </td>\n  </tr>\n  <tr>\n    <td>Jane Smith</td>\n    <td>\n      <button>Delete</button>\n    </td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Generated JavaScript Cypress Configuration\nDESCRIPTION: The JavaScript version of a complete Cypress configuration file that uses the CommonJS module format with require() and module.exports. It includes the baseUrl parameter set to 'http://localhost:1234'.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/plugins/cypressRemarkPlugins/src/cypressConfigExample/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  e2e: {\n    baseUrl: 'http://localhost:1234',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Cypress Cache Folder in CI Configuration\nDESCRIPTION: This snippet demonstrates how to set the Cypress cache folder in a CI configuration file using YAML syntax.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/advanced-installation.mdx#2025-04-22_snippet_6\n\nLANGUAGE: yml\nCODE:\n```\nenvironment:\n  CYPRESS_CACHE_FOLDER: '~/.cache/Cypress'\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Retries for Individual Tests in Cypress\nDESCRIPTION: Demonstrates how to configure retry attempts for a specific test using the test's configuration object, while leaving other tests with default settings.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/test-retries.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// Customize retry attempts for an individual test\ndescribe('User sign-up and login', () => {\n  // `it` test block with no custom configuration\n  it('should redirect unauthenticated user to sign-in page', () => {\n    // ...\n  })\n\n  // `it` test block with custom configuration\n  it(\n    'allows user to login',\n    {\n      retries: {\n        runMode: 2,\n        openMode: 1,\n      },\n    },\n    () => {\n      // ...\n    }\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Browser Launch Event in Cypress Node Events\nDESCRIPTION: Basic syntax for intercepting the before:browser:launch event in Cypress, which provides browser information and launch options that can be modified.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/browser-launch-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\non('before:browser:launch', (browser = {}, launchOptions) => {\n  /* ... */\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Just-in-Time Compilation for Component Testing\nDESCRIPTION: Shows how to disable Just-in-Time compilation for component testing in Cypress 14.0 using the justInTimeCompile configuration option.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  component: {\n    justInTimeCompile: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cypress Plugin with npm\nDESCRIPTION: This command installs a Cypress plugin using npm and saves it as a dev dependency.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/plugins/plugins-guide.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install <plugin name> --save-dev\n```\n\n----------------------------------------\n\nTITLE: Filtering Related Dynamic Attributes in UI Coverage\nDESCRIPTION: Comprehensive example showing how to filter out multiple related dynamic attributes including IDs, for attributes, name attributes, and ARIA relationships to ensure consistent element identification.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/attributefilters.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"attributeFilters\": [\n      {\n        \"attribute\": \"id|for|name|aria-.*\",\n        \"value\": \"dynamic-.*\",\n        \"include\": false\n      }\n    ]\n  }\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<div>\n  <label for=\"dynamic-input-1\">First Name</label>\n  <input id=\"dynamic-input-1\" name=\"dynamic-input-1\" aria-describedby=\"dynamic-help-1\" />\n  <p id=\"dynamic-help-1\">Enter your first name</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Download Mirror\nDESCRIPTION: Command to set a custom download mirror URL for Cypress installation using environment variable.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/advanced-installation.mdx#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nCYPRESS_DOWNLOAD_MIRROR=\"https://www.example.com\" cypress install\n```\n\n----------------------------------------\n\nTITLE: Overwriting existing hover command in Cypress\nDESCRIPTION: This code shows how to overwrite an existing hover command using Cypress.Commands.overwrite(). This method is still supported but not recommended since Cypress 10.0.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/hover.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Commands.overwrite('hover', (originalFn, ...otherArgs) => {})\n```\n\n----------------------------------------\n\nTITLE: Querying Average Passing Spec Duration API Endpoint\nDESCRIPTION: This API endpoint retrieves the average, median, min, and max durations of specs over time, returning project and spec data with various duration metrics.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_26\n\nLANGUAGE: http\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=average-passing-spec-duration&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Markdown Version History Table\nDESCRIPTION: A markdown table documenting the evolution of experimental features in Cypress across multiple versions. Shows when features were added, removed, or made default behavior.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/experiments.mdx#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Version                                      | Changes                                                                                                                                       |\n| -------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------- |\n| [14.0.0](/app/references/changelog#14-0-0)   | Removed `experimentalJustInTimeCompile` and `experimentalSkipDomainInjection` and made it default behavior.                                   |\n| [13.14.0](/app/references/changelog#13-14-0) | Added support for configuring the Experimental Just-In-Time (JIT) Compiling for component testing via `experimentalJustInTimeCompile`.        |\n| [13.4.0](/app/references/changelog#13-4-0)   | Added support for configuring the Experimental Flake Detection strategy via `retries.experimentalStrategy` and `retries.experimentalOptions`. |\n```\n\n----------------------------------------\n\nTITLE: Reading Files as Buffer in Cypress JavaScript\nDESCRIPTION: Shows how to read a file as a raw buffer by specifying null as the encoding parameter.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/readfile.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.fixture('path/to/logo.png', null).then((logo) => {\n  // logo will be read as a buffer\n  // and should look something like this:\n  // Buffer([0, 0, ...])\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Dependencies for Ubuntu 24.04+\nDESCRIPTION: Command to install the required system dependencies for Cypress on Ubuntu 24.04 and above, with updated package names for 64-bit architecture libraries.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/get-started/install-cypress.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\napt-get install libgtk2.0-0t64 libgtk-3-0t64 libgbm-dev libnotify-dev libnss3 libxss1 libasound2t64 libxtst6 xauth xvfb\n```\n\n----------------------------------------\n\nTITLE: Chrome Browser Testing Configuration in CircleCI\nDESCRIPTION: Configuration for running Cypress tests in Chrome browser. Includes browser installation and specific command to run tests in Chrome.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/circleci.mdx#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\norbs:\n  cypress: cypress-io/cypress@3\nworkflows:\n  test:\n    jobs:\n      - cypress/run:\n          install-browsers: true\n          start-command: 'npm run start'\n          cypress-command: 'npx cypress run --browser chrome'\n```\n\n----------------------------------------\n\nTITLE: Converting TypeScript to JavaScript with copyTsToJs Plugin Example\nDESCRIPTION: Example showing how the copyTsToJs plugin works by converting a simple TypeScript module export to its JavaScript equivalent. The plugin generates a JavaScript version maintaining the same functionality but using CommonJS module exports syntax instead of ES modules.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/plugins/cypressRemarkPlugins/src/copyTsToJs/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst name: string = 'joe'\n\nexport default name\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst name = 'joe'\n\nmodule.exports = name\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress.currentTest Syntax\nDESCRIPTION: Demonstrates the basic syntax for accessing Cypress.currentTest object properties including the test title and titlePath.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/currenttest.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// an object with title and titlePath properties\nCypress.currentTest\n\n// the title of the current test\nCypress.currentTest.title\n\n// an array with the current test's title path\nCypress.currentTest.titlePath\n```\n\n----------------------------------------\n\nTITLE: Referencing Routing Alias Documentation in Markdown\nDESCRIPTION: Markdown link to the routing alias documentation, providing context for the cy.wait() command's behavior with intercepted routes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\n[routing alias](/app/core-concepts/variables-and-aliases#Intercepts)\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress.Cookies Debug Syntax\nDESCRIPTION: Basic syntax for enabling cookie debugging in Cypress with optional configuration parameters.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/cookies.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Cookies.debug(enable, options)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for Legacy Wait Behavior\nDESCRIPTION: TypeScript type declaration to restore pre-6.0 behavior for cy.wait() command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare global {\n  namespace Cypress {\n    interface Chainable<Subject = any> {\n      wait(alias: string): Chainable<Cypress.WaitXHR>\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing mount function from Cypress Svelte API\nDESCRIPTION: This snippet shows how to import the mount function from the Cypress Svelte API. The mount function is used to mount Svelte components inside the Cypress browser for testing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/svelte/api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount } from 'cypress/svelte'\n```\n\n----------------------------------------\n\nTITLE: Enabling Parallel Test Execution with Cypress Cloud using --parallel Flag (Bash)\nDESCRIPTION: The `--parallel` flag, typically used in conjunction with `--record`, enables running Cypress tests in parallel across multiple CI machines ([link](/cloud/features/smart-orchestration/parallelization)). Cypress Cloud coordinates this parallelization and uses load balancing strategies ([link](/cloud/features/smart-orchestration/load-balancing#Balance-strategy)) to optimize test distribution and execution time.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_ci_provider_cloud_steps.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--parallel\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Addition Function in JavaScript\nDESCRIPTION: This snippet shows a basic JavaScript function that adds two numbers. It's used as an example to demonstrate code instrumentation for coverage.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/code-coverage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction add(a, b) {\n  return a + b\n}\nmodule.exports = { add }\n```\n\n----------------------------------------\n\nTITLE: NPM Scripts for Report Management (JSON)\nDESCRIPTION: NPM scripts for deleting previous reports, running tests with multiple reporters, and combining XML reports.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/reporters.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"delete:reports\": \"rm cypress/results/* || true\",\n    \"combine:reports\": \"jrm cypress/results/combined-report.xml \\\"cypress/results/*.xml\\\"\",\n    \"prereport\": \"npm run delete:reports\",\n    \"report\": \"cypress run --reporter cypress-multi-reporters --reporter-options configFile=reporter-config.json\",\n    \"postreport\": \"npm run combine:reports\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Cypress.require\nDESCRIPTION: Shows incorrect usage of Cypress.require outside cy.origin callback and incorrect use of require/import inside the callback.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/require.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// `Cypress.require()` cannot be used outside the `cy.origin()` callback.\n// Use CommonJS `require()` instead\nconst _ = Cypress.require('lodash')\n\ncy.origin('cypress.io', async () => {\n  // `require()` and `import()` cannot be used inside the `cy.origin()` callback.\n  // Use `Cypress.require()` instead\n  const _ = require('lodash')\n  const utils = await import('./utils')\n})\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of .first() in Cypress\nDESCRIPTION: Shows examples of incorrect usage of .first(), including chaining directly off 'cy' and using with non-DOM yielding commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/first.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.first() // Errors, cannot be chained off 'cy'\ncy.getCookies().first() // Errors, 'getCookies' does not yield DOM element\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Blur Command in Cypress\nDESCRIPTION: Examples of incorrect usage patterns for the blur command, showing that it cannot be chained off 'cy' directly and requires DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/blur.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.blur('input') // Errors, cannot be chained off 'cy'\ncy.window().blur() // Errors, 'window' does not yield DOM element\n```\n\n----------------------------------------\n\nTITLE: Asserting CSS Properties with Cypress - JavaScript\nDESCRIPTION: These snippets assert the presence or absence of specific CSS properties (e.g., text-decoration, display) on elements using Cypress's should('have.css', ...) and should('not.have.css', ...) assertions. The checks may trigger retries, enabling robust testing of dynamic or animated styles. Both commands require Cypress and properly selected DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/assertions.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// retry until element has matching css\ncy.get('[data-testid=\"completed\"]').should(\n  'have.css',\n  'text-decoration',\n  'line-through'\n)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// retry while accordion css has the\n// \"display: none\" property\ncy.get('[data-testid=\"accordion\"]').should('not.have.css', 'display', 'none')\n```\n\n----------------------------------------\n\nTITLE: Using the Visit-Mount-Example Directive in Markdown\nDESCRIPTION: Demonstrates how to use the visit-mount-example directive in markdown files to create tabbed examples for both E2E and Component Testing. The special token syntax '-{cy.visit(...)::{cy.mount(...)}-' separates the code specific to each testing type.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/plugins/cypressRemarkPlugins/src/visitMountExample/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::visit-mount-example\n\n```js\ncy.clock(now)\n-{cy.visit('/index.html')::cy.mount(<DatePicker id=\"date\" />)}-\ncy.get('#date').should('have.value', '04/14/2021')\n```\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Installing Vue 2 Dependencies for Cypress Component Testing\nDESCRIPTION: Command to install necessary dependencies for Vue 2 component testing in Cypress 7.0, including @cypress/vue and @cypress/webpack-dev-server.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_66\n\nLANGUAGE: shell\nCODE:\n```\nnpm install cypress @cypress/vue @cypress/webpack-dev-server --save-dev\n```\n\n----------------------------------------\n\nTITLE: General Cypress Cloud Data Extract API Endpoint Structure (URL)\nDESCRIPTION: This shows the base URL structure for accessing the Cypress Cloud Data Extract API. Replace `YOUR-API-KEY` with your actual API key obtained from Cypress Cloud integrations, `REPORT-TYPE` with the specific report ID you want to retrieve, and optionally adjust the `export_format` (defaulting to csv if not specified).\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=REPORT-TYPE&export_format=csv\n```\n\n----------------------------------------\n\nTITLE: NPM Config Template Setting\nDESCRIPTION: Configuration for download path template in .npmrc file with escaped variables.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/advanced-installation.mdx#2025-04-22_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\nCYPRESS_DOWNLOAD_PATH_TEMPLATE=\\${endpoint}/\\${platform}-\\${arch}/cypress.zip\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Cognito Authentication Component in React Entry Point\nDESCRIPTION: This snippet shows how to update the main application entry point (`src/index.tsx`) to conditionally render the `AppCognito` component. It checks for the presence of the `REACT_APP_AWS_COGNITO` environment variable. If the variable is set, it renders the `AppCognito` component wrapped within the application's Router and ThemeProvider; otherwise, it likely renders a different main application component (not shown). This allows enabling Cognito authentication based on the build or deployment environment.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/amazon-cognito-authentication.mdx#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx title=\"src/index.tsx\"\n// ... initial imports\nimport AppCognito from './containers/AppCognito'\n\n// ...\n\nif (process.env.REACT_APP_AWS_COGNITO) {\n  ReactDOM.render(\n    <Router history={history}>\n      <ThemeProvider theme={theme}>\n        <AppCognito />\n      </ThemeProvider>\n    </Router>,\n    document.getElementById('root')\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Angular Model Signals with Numeric Values\nDESCRIPTION: Shows how to test model signals by providing a value of the signal's generic type. This example tests a model signal with a number type by setting an initial value of 3 and verifying the display.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/angular/examples.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ncy.mount(TestComponent, {\n  componentProperties: {\n    title: 'Test Component',\n    count: 3,\n  },\n})\n\ncy.get('[data-cy=\"test-component-count-display\"]').should('have.text', '3')\n```\n\n----------------------------------------\n\nTITLE: Grouping User Profile Views with URL Patterns in UI Coverage Configuration\nDESCRIPTION: A JSON configuration example showing how to group URLs with similar patterns. This example consolidates different user profile URLs under a single pattern using wildcards.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/guides/reduce-noise.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"views\": [\n    {\n      \"pattern\": \"https://cypress.io/users/*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Tick Command Syntax in Cypress\nDESCRIPTION: Basic syntax for using the tick command to move time forward by milliseconds with optional configuration options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/tick.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.tick(milliseconds, options)\n```\n\n----------------------------------------\n\nTITLE: Running Coverage Report Command\nDESCRIPTION: Shell command to generate and display a summary of code coverage results\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/code-coverage.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nnpx nyc report --reporter=text-summary\n```\n\n----------------------------------------\n\nTITLE: TypeScript Typings for Custom React Router Mount Command\nDESCRIPTION: Provides TypeScript type definitions for the custom mount command with React Router support.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/react/examples.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MountOptions, MountReturn } from 'cypress/react'\nimport { MemoryRouterProps } from 'react-router-dom'\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      /**\n       * Mounts a React node\n       * @param component React Node to mount\n       * @param options Additional options to pass into mount\n       */\n      mount(\n        component: React.ReactNode,\n        options?: MountOptions & { routerProps?: MemoryRouterProps }\n      ): Cypress.Chainable<MountReturn>\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure with Dynamic Button IDs\nDESCRIPTION: An HTML example showing navigation buttons with dynamically generated IDs that would benefit from element grouping in UI Coverage reports.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/guides/reduce-noise.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<nav>\n  <button id=\"nav-button819230\">Page 1</button>\n  <button id=\"nav-button819231\">Page 2</button>\n  <button id=\"nav-button819232\">Page 3</button>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Force Interaction with Element\nDESCRIPTION: Shows how to override Cypress's built-in error checking using the force option.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/error-messages.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('[disabled]').click({force: true})\n```\n\n----------------------------------------\n\nTITLE: Checking Shared Library Dependencies\nDESCRIPTION: Using ldd command to check for missing shared library dependencies on Linux.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nldd ~/.cache/Cypress/13.15.0/Cypress/Cypress\n\tlinux-vdso.so.1 (0x00007ffe0e7db000)\n\tlibffmpeg.so => /home/<username>/.cache/Cypress/13.15.0/Cypress/libffmpeg.so (0x0000774bc7a00000)\n\tlibdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x0000774bd26d0000)\n\tlibpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x0000774bd26cb000)\n\tlibgobject-2.0.so.0 => /lib/x86_64-linux-gnu/libgobject-2.0.so.0 (0x0000774bd2668000)\n\tlibglib-2.0.so.0 => /lib/x86_64-linux-gnu/libglib-2.0.so.0 (0x0000774bd251f000)\n\tlibgio-2.0.so.0 => /lib/x86_64-linux-gnu/libgio-2.0.so.0 (0x0000774bc7e30000)\n\tlibnss3.so => not found\n  ...\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress.log Syntax in JavaScript\nDESCRIPTION: Shows the basic syntax for calling the Cypress.log function with an options object.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/cypress-log.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.log(options)\n```\n\n----------------------------------------\n\nTITLE: Querying Flake Per Project Over Time API Endpoint\nDESCRIPTION: This API endpoint helps identify where flaky tests are occurring in an organization over time, returning project name, flaky test count, week, and day data.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_27\n\nLANGUAGE: http\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=flake-per-project-over-time&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Checking Stub Calls in Cypress React Component Test\nDESCRIPTION: An example of incorrectly structuring a test to check if a stub was called, which may fail due to asynchronous operations or re-rendering.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/retry-ability.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst Clicker = ({ click }) => (\n  <div>\n    <button onClick={click}>Click me</button>\n  </div>\n)\n\nit('calls the click prop twice', () => {\n  const onClick = cy.stub()\n  cy.mount(<Clicker click={onClick} />)\n  cy.get('button')\n    .click()\n    .click()\n    .then(() => {\n      // works in this case, but not recommended\n      // because .click() and .then() do not retry\n      expect(onClick).to.be.calledTwice\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Dependencies for Ubuntu/Debian\nDESCRIPTION: Command to install the required system dependencies for Cypress on Ubuntu/Debian Linux distributions, including GTK, GBM, and other necessary libraries.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/get-started/install-cypress.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\napt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 libasound2 libxtst6 xauth xvfb\n```\n\n----------------------------------------\n\nTITLE: Asserting Disabled State in Protractor (JavaScript)\nDESCRIPTION: This Protractor snippet asserts that an input element with the ID 'example-input' is disabled by checking if `isEnabled()` returns false.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// assert the input is disabled\nexpect(element(by.id('example-input')).isEnabled()).toBe(false)\n```\n\n----------------------------------------\n\nTITLE: Creating Symlink for Chrome-for-Testing Browser on Windows\nDESCRIPTION: This Windows command creates a symlink for the chrome-for-testing browser, allowing Cypress to detect it. It links the actual executable folder to the expected location in Program Files.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nmklink /d \"C:\\Program Files\\Google\\Chrome for Testing\" \"C:\\path\\to\\chrome\\executable\\folder\"\n```\n\n----------------------------------------\n\nTITLE: Merging Mochawesome JSON Reports (Shell)\nDESCRIPTION: Combines multiple Mochawesome JSON reports into a single file using mochawesome-merge.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/reporters.mdx#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnpx mochawesome-merge \"cypress/results/*.json\" > mochawesome.json\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cypress Test Suite Size Over Time via Cypress Cloud API (URL)\nDESCRIPTION: Example API call to track the growth of test suite size per project over time since the `start_date`, excluding errored/timed-out runs. Uses `report_id=test-suite-size-over-time`. The response includes `project_name`, `total_tests`, `total_e2e`, `total_ct`, and `week`.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_7\n\nLANGUAGE: url\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=test-suite-size-over-time&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Basic Cypress.Blob Method Syntax\nDESCRIPTION: Demonstrates the basic syntax for calling Cypress.Blob methods.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/blob.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Blob.method()\n```\n\n----------------------------------------\n\nTITLE: Installing Cypress Dependencies on Amazon Linux 2023\nDESCRIPTION: This shell command installs the necessary dependencies for running Cypress on Amazon Linux 2023. It includes X11 server, GTK3 development libraries, NSS, and ALSA library.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/get-started/install-cypress.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndnf install -y xorg-x11-server-Xvfb gtk3-devel nss alsa-lib\n```\n\n----------------------------------------\n\nTITLE: Plain TypeScript Code Block Example\nDESCRIPTION: Example of a standard TypeScript code block without the copyTsToJs plugin applied. This demonstrates how TypeScript code appears in documentation without automatic JavaScript conversion.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/plugins/cypressRemarkPlugins/src/copyTsToJs/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst name: string = 'joe'\n\nexport default name\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Typings for cy.mount() in React\nDESCRIPTION: TypeScript declaration for the custom cy.mount() command in React. This adds type support and code completion for the mount command in the Cypress namespace.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/mount.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mount } from 'cypress/react'\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      mount: typeof mount\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Dev Server in Cypress 10+ (Verbose JavaScript)\nDESCRIPTION: Verbose version of webpack dev server configuration in Cypress 10+ using JavaScript. This uses the functional form of the devServer configuration for more customization.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nconst { defineConfig } = require('cypress')\nconst webpackConfig = require('./webpack.config.js')\n\nmodule.exports = defineConfig({\n  component: {\n    devServer(cypressConfig) {\n      return devServer({\n        framework: 'react', // or vue\n        cypressConfig,\n        webpackConfig,\n      })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Coupling Tests Together in Cypress\nDESCRIPTION: An example of tightly coupled tests where each test depends on the previous one to run successfully. This is considered an anti-pattern because tests should be able to run independently.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/best-practices.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// an example of what NOT TO DO\ndescribe('my form', () => {\n  it('visits the form', () => {\n    -cy.visit('/users/new')::cy.mount(<UserForm />)-\n  })\n\n  it('requires first name', () => {\n    cy.get('[data-testid=\"first-name\"]').type('Johnny')\n  })\n\n  it('requires last name', () => {\n    cy.get('[data-testid=\"last-name\"]').type('Appleseed')\n  })\n\n  it('can submit a valid form', () => {\n    cy.get('form').submit()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Referencing cy.exec() Command in Markdown\nDESCRIPTION: Markdown link to the cy.exec() command documentation, noting its default timeout of 60000ms for running system commands like database seeding.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n[`cy.exec()`](/api/commands/exec)\n```\n\n----------------------------------------\n\nTITLE: Sample HTML for Including Only Container Elements Example (XML/HTML)\nDESCRIPTION: Provides the sample HTML structure for the include-only container example. It contains a `<form>` with an input (`#name`, intended to be included) and a `<footer>` with a link (intended to be excluded by the `elementFilters` configuration).\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_elementfilters.mdx#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<body>\n  <form id=\"form\">\n    <input id=\"name\" />\n  </form>\n  <footer>\n    <a href=\"#\">Excluded</a>\n  </footer>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Certificate Authority\nDESCRIPTION: Example configuration for setting up a custom certificate authority in .npmrc file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/proxy-configuration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncafile=/home/person/certs/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Renaming cy.server() whitelist option to ignore\nDESCRIPTION: Example showing the migration from using the 'whitelist' option to the 'ignore' option in cy.server() method.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_92\n\nLANGUAGE: js\nCODE:\n```\ncy.server({\n  whitelist: (xhr) => {\n    return xhr.method === 'GET' && /\\.(jsx?|html|css)(\\?.*)?$/.test(xhr.url)\n  },\n})\n```\n\nLANGUAGE: js\nCODE:\n```\ncy.server({\n  ignore: (xhr) => {\n    return xhr.method === 'GET' && /\\.(jsx?|html|css)(\\?.*)?$/.test(xhr.url)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript with Package Managers\nDESCRIPTION: Commands to install TypeScript as a development dependency using npm or yarn\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/typescript-support.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install typescript --save-dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add typescript --dev\n```\n\n----------------------------------------\n\nTITLE: Sample HTML for Specific Element Exclusion Example (XML/HTML)\nDESCRIPTION: Illustrates the sample HTML structure used in the specific element exclusion example. It contains two buttons: one intended to be included (`#button-1`) and another (`#button-2`) targeted for exclusion by the corresponding `elementFilters` configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_elementfilters.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<body>\n  <button id=\"button-1\">Included</button>\n  <button id=\"button-2\">Excluded</button>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Rendering GitHub Icon in Markdown\nDESCRIPTION: This snippet uses a custom Icon component to display a GitHub icon inline within the text. It specifies the icon name, inline property, and content type.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/get-started/why-cypress.mdx#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<Icon name=\"github\" inline=\"true\" contentType=\"rwa\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Sandbox Permissions\nDESCRIPTION: Commands to set correct ownership and permissions for the Chrome sandbox.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nsudo chown root:root ~/.cache/Cypress/13.15.0/Cypress/chrome-sandbox\nsudo chmod +4755 ~/.cache/Cypress/13.15.0/Cypress/chrome-sandbox\n```\n\n----------------------------------------\n\nTITLE: Launching Firefox Browsers in Cypress\nDESCRIPTION: Commands to run Cypress tests using Firefox and its variants (Developer Edition, Nightly)\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/launching-browsers.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --browser firefox\n```\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --browser firefox:dev\n```\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --browser firefox:nightly\n```\n\n----------------------------------------\n\nTITLE: TypeScript output from the cypress-config-plugin-example directive\nDESCRIPTION: The TypeScript configuration file generated by the directive, showing how the plugin code is integrated with TypeScript imports and export syntax for a standard Cypress configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/plugins/cypressRemarkPlugins/src/cypressConfigPluginExample/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress'\nimport fs from 'fs'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser = {}, launchOptions) => {\n        /* ... */\n      })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Component HTML Side Effects Behavior Before Cypress 7.0\nDESCRIPTION: Example showing how HTML content was automatically cleared between tests in versions prior to Cypress 7.0, where both component-related HTML and manually added HTML elements were cleaned up.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_72\n\nLANGUAGE: jsx\nCODE:\n```\nconst { mount } = require('@cypress/react')\n\ndescribe('Component teardown behavior', () => {\n  it('modifies the document and mounts a component', () => {\n    // HTML unrelated to the component is mounted\n    Cypress.$('body').append('<div data-cy=\"some-html\"/>')\n\n    // A component is mounted\n    mount(<Button data-cy=\"my-button\"></Button>)\n\n    cy.get('[data-cy=\"some-html\"]').should('exist')\n    cy.get('[data-cy=\"my-button\"]').should('exist')\n  })\n\n  it('cleans up any HTML', () => {\n    // The component is automatically unmounted by Cypress\n    cy.get('[data-cy=\"my-button\"]').should('not.exist')\n\n    // The HTML left over from the previous test has been cleaned up\n    // This was done automatically by Cypress\n    cy.get('[data-cy=\"some-html\"]').should('not.exist')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Structure with Disabled Element Example for UI Coverage\nDESCRIPTION: This HTML snippet demonstrates a structure with both normal and disabled buttons that would be processed by UI Coverage. The disabled button with data-cy='submit' would be excluded from coverage reporting when using the above filter configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/elementfilters.mdx#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<body>\n  <button data-cy='cancel'>Cancel</button>\n  <button disabled data-cy='submit'>Submit</button>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Embedding Integration Logos and Links in Documentation - JSX\nDESCRIPTION: This snippet embeds source control and integration provider logos alongside documentation links using the Logo JSX component combined with Markdown links. It is used to visually represent integration guides for services such as GitHub, GitLab, Bitbucket, Jira, Slack, and Microsoft Teams. The Logo component receives src and alt props to render the respective service logos. Usage assumes the presence of Logo and supporting image assets in the documentation framework. No special parameters beyond standard icon usage; the output is enhanced, iconified links within the generated docs.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/account-management/projects.mdx#2025-04-22_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n{/* prettier-ignore-start */}\\n\\n- <Logo src=\"/img/logo/github.svg\" alt=\"GitHub logo\"/> [GitHub integration guide](/cloud/integrations/source-control/github)\\n- <Logo src=\"/img/logo/gitlab.svg\" alt=\"GitLab logo\"/> [GitLab integration guide](/cloud/integrations/source-control/gitlab)\\n- <Logo src=\"/img/logo/bitbucket.svg\" alt=\"Bitbucket logo\"/> [Bitbucket integration guide](/cloud/integrations/source-control/bitbucket)\\n\\n### Issue Management\\n\\n- <Logo src=\"/img/logo/jira.svg\" alt=\"Jira logo\"/> [Jira integration guide](/cloud/integrations/jira)\\n\\n### Team Communication\\n\\n- <Logo src=\"/img/logo/slack.svg\" alt=\"Slack logo\"/> [Cypress integration for Slack guide](/cloud/integrations/slack)\\n- <Logo src=\"/img/logo/ms-teams.svg\" alt=\"Microsoft Teams logo\"/> [Cypress integration for Microsoft Teams guide](/cloud/integrations/teams)\\n\\n{/* prettier-ignore-end */}\n```\n\n----------------------------------------\n\nTITLE: Querying Top Failures per Project API in Cypress\nDESCRIPTION: This API endpoint provides information about tests with the highest number of failures for each project. It returns data including project name, pass/fail counts, fail rate, spec details, and a test replay URL for further investigation.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=top-failures-per-project&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests with Deprecated Command - Shell\nDESCRIPTION: This snippet shows the deprecated way to run Cypress CI with a project key using the 'cypress ci' command. The command was used prior to version 0.19.0 and is now replaced by more descriptive commands. Note that using 'cypress ci' is no longer supported and should be updated as per the guidance in the documentation.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/error-messages.mdx#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncypress ci abc-key-123\n```\n\n----------------------------------------\n\nTITLE: Querying Browser Versions Per Project Over Time API Endpoint\nDESCRIPTION: This API endpoint tracks browser versions tested per project over time, returning project name, spec count, browser, version, day, and week data.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=browser-versions-per-project-over-time&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Setting Command-Specific Timeout in Cypress\nDESCRIPTION: An example of setting a timeout for a specific command in Cypress. This allows for different retry durations for different operations in the same test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/retry-ability.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// we've modified the timeout which affects default + added assertions\ncy.get('[data-testid=\"mobile-nav\"]', { timeout: 10000 })\n  .should('be.visible')\n  .and('contain', 'Home')\n```\n\n----------------------------------------\n\nTITLE: Accessing Cypress Current Retry Property\nDESCRIPTION: Basic syntax for accessing the Cypress.currentRetry property which returns a number representing the current test retry count.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/currentretry.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.currentRetry\n```\n\n----------------------------------------\n\nTITLE: Including cypress.d.ts in tsconfig.json\nDESCRIPTION: Example of how to include the cypress.d.ts file in a TypeScript configuration to ensure the custom command types are recognized in tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/mount.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"include\": [\"./src\", \"cypress.d.ts\"]\n```\n\n----------------------------------------\n\nTITLE: Importing Cypress Svelte Mount Function (Using @cypress/svelte@2)\nDESCRIPTION: Shows the updated import statement required after installing the separate `@cypress/svelte@2` package for Svelte 3/4 projects. The import path now references the installed package directly.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport { mount } from `@cypress/svelte`\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress Angular Schematic for Browser Selection\nDESCRIPTION: This JSON configuration for the Cypress Angular Schematic shows how to specify options for running Cypress in open mode with a specific browser. It includes settings for watch mode, headless execution, and browser selection.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n\"cypress-open\": {\n  \"builder\": \"@cypress/schematic:cypress\",\n  \"options\": {\n    \"watch\": true,\n    \"headless\": false,\n    \"browser\": \"chrome\"\n  },\n  \"configurations\": {\n    \"production\": {\n      \"devServerTarget\": \"{project-name}:serve:production\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing All Session Data\nDESCRIPTION: Example showing how to clear all cached session data using clearAllSavedSessions().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/session.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.session.clearAllSavedSessions()\n```\n\n----------------------------------------\n\nTITLE: Querying Flaky Rate per Project Over Time API in Cypress\nDESCRIPTION: This API endpoint allows you to retrieve the flaky rate for projects over a specified time period. It returns data including project name, flaky test count, pass test count, flaky rate, day, and week.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=flake-rate-per-project-over-time&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Enabling Test Recording with Cypress Cloud using --record Flag (Bash)\nDESCRIPTION: This command-line flag (`--record`) is used with `cypress run` to send test results, along with associated artifacts like screenshots and videos, to Cypress Cloud. It requires setting up a project in Cypress Cloud beforehand ([link](/cloud/get-started/setup)). This enables features like detailed reports ([link](/cloud/features/recorded-runs#Latest-Runs)), Test Replay ([link](/cloud/features/test-replay)), PR integrations ([link](/cloud/integrations/source-control/github)), and flaky test detection ([link](/cloud/features/flaky-test-management)).\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_ci_provider_cloud_steps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--record\n```\n\n----------------------------------------\n\nTITLE: Installing extract-cloud-results Module\nDESCRIPTION: Command to install the @cypress/extract-cloud-results module in CI environment. Uses force flag to ensure latest version.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/accessibility/results-api.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --force https://cdn.cypress.io/extract-cloud-results/v1/extract-cloud-results.tgz\n```\n\n----------------------------------------\n\nTITLE: Sinon.JS Breaking Change: Stub Non-existent Properties\nDESCRIPTION: This example shows that in Sinon.JS 8, an error will throw when trying to stub a non-existent property, which was previously allowed in Sinon.JS 3.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\n// Would pass in Cypress 3 but will fail in 4\ncy.stub(obj, 'nonExistingProperty')\n```\n\n----------------------------------------\n\nTITLE: Configuring Okta JWT Verifier in Node.js Backend (TypeScript)\nDESCRIPTION: This snippet configures the OktaJwtVerifier instance with the required issuer and clientId using environment variables to enable JWT validation on incoming API requests. Dependencies include '@okta/jwt-verifier' and dotenv for loading environment configurations. Inputs are environment variables for Okta configuration; outputs are a configured OktaJwtVerifier instance for subsequent middleware use. This initialization is essential for securing backend endpoints using Okta authentication.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/okta-authentication.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport OktaJwtVerifier from '@okta/jwt-verifier'\n\ndotenv.config()\n\n// Okta Validate the JWT Signature\nconst oktaJwtVerifier = new OktaJwtVerifier({\n  issuer: `https://${process.env.REACT_APP_OKTA_DOMAIN}/oauth2/default`,\n  clientId: process.env.REACT_APP_OKTA_CLIENTID,\n  assertClaims: {\n    aud: 'api://default',\n    cid: process.env.REACT_APP_OKTA_CLIENTID,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Resulting UI Elements After Specific Exclusion (Text)\nDESCRIPTION: Displays the CSS selector (`#button-1`) representing the element(s) that remain visible or are included in reports after applying the `elementFilters` configuration to exclude the element with ID `#button-2`. This shows the outcome of the filter.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_elementfilters.mdx#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n#button-1\n```\n\n----------------------------------------\n\nTITLE: Querying Accessibility Score per Project Over Time API in Cypress\nDESCRIPTION: This API endpoint provides Accessibility score data for each project over time. It returns data including project name, accessibility score, week, and day.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_38\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=accessibility-per-project-over-time&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Converting Image to Data URL\nDESCRIPTION: Example demonstrating how to convert an image to a data URL and append it to the DOM.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/blob.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nreturn Cypress.Blob.imgSrcToDataURL('/assets/img/logo.png').then((dataUrl) => {\n  const img = Cypress.$('<img />', { src: dataUrl })\n\n  cy.get('.utility-blob').then(($div) => {\n    // append the image\n    $div.append(img)\n  })\n  cy.get('.utility-blob img').click().should('have.attr', 'src', dataUrl)\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Triple-slash Directives for Cypress IntelliSense\nDESCRIPTION: Triple slash directives are special comments added at the top of Cypress spec files to enable intelligent code completion while writing tests. These directives help IDEs recognize Cypress types and provide autocompletion features.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_intellisense-code-completion.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"cypress\" />\n```\n\n----------------------------------------\n\nTITLE: Running Cypress with Custom Reporter (Shell)\nDESCRIPTION: Executes Cypress tests using a custom reporter specified via command line.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/reporters.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx cypress run --reporter reporters/custom.js\n```\n\n----------------------------------------\n\nTITLE: Finding Closest Element with Class\nDESCRIPTION: Example showing how to find the closest ancestor element with a specific class.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/closest.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('p.error').closest('.banner')\n```\n\n----------------------------------------\n\nTITLE: Migrating Plugins File to setupNodeEvents\nDESCRIPTION: Example of migrating from the legacy plugins file to the new testing-type specific setupNodeEvents function. Shows how to separate component and e2e test configurations in the new format.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (on, config) => {\n  if (config.testingType === 'component') {\n    // component testing dev server setup code\n    // component testing node events setup code\n  } else {\n    // e2e testing node events setup code\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  component: {\n    devServer(cypressConfig) {\n      // component testing dev server setup code\n    },\n    setupNodeEvents(on, config) {\n      // component testing node events setup code\n    },\n  },\n  e2e: {\n    setupNodeEvents(on, config) {\n      // e2e testing node events setup code\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Table Comparison of Unit Tests vs E2E Tests in Markdown\nDESCRIPTION: Markdown table comparing key differences between unit tests and end-to-end tests, including focus areas, test length, examination aspects, and workflow importance\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Unit tests                             | End-to-end tests                                                             |\n| -------------------------------------- | ---------------------------------------------------------------------------- |\n| Focus on code                          | Focus on the features                                                        |\n| Should be kept short                   | Can be long                                                                  |\n| Examine the returned result of actions | Examine side effect of actions: DOM, storage, network, file system, database |\n| Important to developer workflow        | Important to end user's workflow                                             |\n```\n\n----------------------------------------\n\nTITLE: Incorrect Session ID Implementation in JavaScript\nDESCRIPTION: Example of an incorrect way to create a session ID that could lead to session collision and unexpected behavior. The ID needs to include all variables that might change between sessions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/session.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst login = (name, token, password) => {\n  cy.session(name, () => {\n    cy.visit('/login')\n    cy.get('[data-test=name]').type(name)\n    cy.get('[data-test=token]').type(token)\n    cy.get('[data-test=password]').type(password)\n    cy.get('#submit').click()\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Cypress Component Testing Configuration\nDESCRIPTION: JSON configuration updates for component testing in Cypress 7.0, removing experimental flags.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"experimentalComponentTesting\": true,\n  \"componentFolder\": \"src\",\n  \"testFiles\": \"**/*spec.{js,jsx,ts,tsx}\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"componentFolder\": \"src\",\n  \"testFiles\": \"**/*spec.{js,jsx,ts,tsx}\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for List Element Assertions\nDESCRIPTION: HTML list structure used in the following example to assert text content of multiple list items.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"connectors-list\">\n  <li>Walk the dog</li>\n  <li>Feed the cat</li>\n  <li>Write JavaScript</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Cypress Click Position Configuration\nDESCRIPTION: JavaScript example showing how to configure the click position when interacting with an element using Cypress commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/interacting-with-elements.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button').click({ position: 'topLeft' })\n```\n\n----------------------------------------\n\nTITLE: Command Log Example for hash Command\nDESCRIPTION: Shows the code used to assert that the hash equals '#users/new' which would appear in the Cypress command log.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/hash.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.hash().should('eq', '#users/new')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Status by Spec Summary via Cypress Cloud API (URL)\nDESCRIPTION: Example API call to get a summary of success/failure rates at the spec level (a spec fails if any part fails) since the `start_date`. Uses `report_id=status-per-spec-summary`. The response includes `status` and `test_run_count`.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_11\n\nLANGUAGE: url\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=status-per-spec-summary&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Clearing All Local Storage in Cypress\nDESCRIPTION: This snippet demonstrates the basic usage of the clearAllLocalStorage command in Cypress. It clears localStorage data for all origins the test has interacted with. The command can be called with or without options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clearalllocalstorage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clearAllLocalStorage()\ncy.clearAllLocalStorage(options)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Generic with Cypress.require\nDESCRIPTION: Shows how to use TypeScript generics to infer types for dependencies required with Cypress.require.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/require.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LoDashStatic } from 'lodash'\n\ncy.origin('cypress.io', async () => {\n  const _ = Cypress.require < LoDashStatic > 'lodash'\n\n  // lodash methods are properly typed\n  _.map([1, 2, 3], (num: number) => {\n    // ...\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Visual Testing Best Practices in Cypress\nDESCRIPTION: These snippets demonstrate best practices for visual testing in Cypress, including ensuring DOM stability before taking snapshots, controlling timestamps, and managing application state for consistent visual comparisons.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/visual-testing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Correct usage: Ensure DOM stability\ncy.get('.new-todo').type('write tests{enter}')\ncy.contains('.todo-list li', 'write tests')\n// great, the new item is displayed,\n// now we can take the snapshot\ncy.mySnapshotCommand()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Control timestamps\nconst now = new Date(2018, 1, 1)\n\ncy.clock(now)\n// ... test\ncy.mySnapshotCommand()\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Manage application state\ncy.intercept('/api/items', { fixture: 'items' }).as('getItems')\n// ... action\ncy.wait('@getItems')\ncy.mySnapshotCommand()\n```\n\n----------------------------------------\n\nTITLE: Resulting UI Elements After Container Exclusion (Text)\nDESCRIPTION: Displays the CSS selector (`#start`) representing the element(s) that remain visible or are included in reports after applying the `elementFilters` configuration to exclude all elements within the `footer` container. This shows the filter's effect.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_elementfilters.mdx#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n#start\n```\n\n----------------------------------------\n\nTITLE: Grouping URLs by Query Parameters in Cypress\nDESCRIPTION: Configuration for grouping URLs based on query parameters. This pattern matches URLs with 'status' parameter and groups them by the value of that parameter, regardless of other query parameters or hash fragments.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_views.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"views\": [\n    {\n      \"pattern\": \"https://www.my-app.com/home?*status=:status{&*}?#*\",\n      \"groupBy\": [\"status\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Screenshots with Test Retries in Cypress\nDESCRIPTION: Demonstrates how screenshots are handled during test retries, with example showing how screenshots are named for each attempt.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/test-retries.mdx#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\ndescribe('User Login', () => {\n  it('displays login errors', () => {\n    -{cy.visit('/')::cy.mount(<Login />)}-\n    cy.screenshot('user-login-errors')\n    // ...\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Cypress.minimatch in JavaScript\nDESCRIPTION: Shows the incorrect way of trying to chain minimatch off the cy object, which will result in an error.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/minimatch.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.minimatch() // Errors, cannot be chained off 'cy'\n```\n\n----------------------------------------\n\nTITLE: Rendering a Checkmark Icon using JSX/TSX Component\nDESCRIPTION: This snippet displays a checkmark icon using a reusable 'Icon' component, likely within a React or similar framework. It sets the icon type to 'check-circle' and its color to 'green' via props. This is typically used for visual confirmation or to highlight positive aspects, such as the listed benefits.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_auto-cancellation-benefits.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Icon name=\"check-circle\" color=\"green\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring aria attributes as significant\nDESCRIPTION: Configuration example for prioritizing ARIA attributes (specifically aria-label) in UI Coverage. This improves accessibility testing by focusing on attributes that describe element purpose.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/significantattributes.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"significantAttributes\": [\"aria-label\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cypress.require Usage Limitations\nDESCRIPTION: Illustrates correct and incorrect ways to use Cypress.require, emphasizing the requirement for it to be on a single line as a continuous string.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/require.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ GOOD\nCypress.require('lodash')\n\n// ❌ BAD\nconst { require } = Cypress\nrequire('lodash')\n\n// ❌ BAD\nCypress\n.require('lodash')\n\n// ❌ BAD\nCypress . require('lodash')\n\n// ❌ BAD\nCypress.require(\n  'lodash'\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Accessibility Score Details API in Cypress\nDESCRIPTION: This API endpoint provides detailed Accessibility score data for each run. It returns data including project name, creation date, run number, status, accessibility score, commit details, CI build ID, and run tags. It has a limit of 500,000 records per request.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_39\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=accessibility-details&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Grouping Dynamic Path Parameters in Cypress Views\nDESCRIPTION: Example configuration showing how to group dynamic URL paths using wildcard (*) pattern. This groups all URLs under '/users/' regardless of the specific user identifier.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_views.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"views\": [\n    {\n      \"pattern\": \"https://www.my-app.com/users/*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Spread Command Syntax in JavaScript\nDESCRIPTION: Shows the basic syntax for using the spread command in Cypress. It can be called with a callback function or with options and a callback function.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/spread.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.spread(callbackFn)\n.spread(options, callbackFn)\n```\n\n----------------------------------------\n\nTITLE: Resulting UI Elements After Attribute Exclusion (Text)\nDESCRIPTION: Displays the CSS attribute selector (`[data-role=\"primary\"]`) representing the element(s) that remain visible or are included in reports after applying the `elementFilters` configuration to exclude elements with the attribute `data-role='decorative'`. This demonstrates the filter's effect.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_elementfilters.mdx#2025-04-22_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n[data-role=\"primary\"]\n```\n\n----------------------------------------\n\nTITLE: Running Cypress with npm Script\nDESCRIPTION: This shell command demonstrates how to run Cypress using the npm script defined in package.json. After setting up the script, this command will open the Cypress app.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/get-started/open-the-app.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run cy:open\n```\n\n----------------------------------------\n\nTITLE: Force Firefox CDP Usage in Cypress\nDESCRIPTION: Command to force Chrome DevTools Protocol usage in Firefox using environment variable\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/launching-browsers.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nFORCE_FIREFOX_CDP=1 npx cypress run --browser firefox\n```\n\n----------------------------------------\n\nTITLE: Configuring View Grouping in Cypress UI Coverage\nDESCRIPTION: This JSON configuration example shows how to define rules for grouping URLs into Views based on patterns. The pattern property allows for wildcards to match multiple similar URLs under a single view.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/core-concepts/views.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"views\": [\n    {\n      \"pattern\": \"https://cypress.io/users/*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Views Configuration Syntax in Cypress\nDESCRIPTION: JSON schema for configuring URL views in Cypress. It shows the structure of the 'views' property which allows specifying URL patterns and optional 'groupBy' parameters.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_views.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"views\": [\n    {\n      \"pattern\": string,\n      \"groupBy\": [\n        string\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Xvfb Start Command for Linux\nDESCRIPTION: Alternative command for starting Xvfb with specific screen parameters to avoid color depth issues\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/overview.mdx#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nXvfb -screen 0 1024x768x24 :99 &\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Form Controls Grouping Example\nDESCRIPTION: Sample HTML showing form inputs with their labels that will be grouped together under a custom name by the corresponding elementGroups configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/elementgroups.mdx#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<body>\n  <label>\n    <input id=\"bear\" name=\"animal\"></input>\n  </label>\n  <label>\n    <input id=\"lion\" name=\"animal\"></input>\n  </label>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Root TSConfig Include Configuration\nDESCRIPTION: Configuration for including TypeScript declaration files in the root tsconfig.json file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/typescript-support.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"include\": [\n  \"src\",\n  \"./cypress.d.ts\"\n]\n```\n\n----------------------------------------\n\nTITLE: Sample HTML for Container Element Exclusion Example (XML/HTML)\nDESCRIPTION: Provides the sample HTML structure for the container exclusion example. It includes elements within a `<main>` tag (intended to be included) and elements within a `<footer>` tag (targeted for exclusion by the `elementFilters` configuration).\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_elementfilters.mdx#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<body>\n  <main>\n    <button id=\"start\">Included</button>\n  </main>\n  <footer>\n    <a href=\"#\">Excluded</a>\n  </footer>\n</body>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Text Comparison\nDESCRIPTION: HTML structure used in the following example to compare text values between different elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"company-details\">\n  <div class=\"title\">Acme Developers</div>\n  <div class=\"identifier\">ACMEDEVELOPERS</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Vite Configuration for React Component Testing\nDESCRIPTION: Example of importing a custom Vite configuration file to be used with Cypress Component Testing in React applications.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/react/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport customViteConfig from './customConfig'\n```\n\n----------------------------------------\n\nTITLE: Team Management Note - Markdown\nDESCRIPTION: Important note about public project visibility in Cypress Cloud organizations.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/account-management/teams.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n_Note: [public projects](https://on.cypress.io/what-is-project-access) are visible to all users in the organization in Cypress Cloud_\n```\n\n----------------------------------------\n\nTITLE: Working with Promises in .then() using Bluebird\nDESCRIPTION: Example showing how to use Bluebird promises with the .then() command to delay execution.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/then.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button')\n  .click()\n  .then(($button) => {\n    return Promise.delay(1000)\n  })\n```\n\n----------------------------------------\n\nTITLE: Rendering Cypress Real World App Image in Markdown\nDESCRIPTION: This snippet uses a custom DocsImage component to display an image of the Cypress Real World App. It specifies the source path and alt text for the image.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/get-started/why-cypress.mdx#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<DocsImage\n  src=\"/img/app/get-started/real-world-app.png\"\n  alt=\"Cypress Real World App\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Timeout with cy.window() in Cypress\nDESCRIPTION: Example showing how to pass a custom timeout option to the cy.window() command, which gets passed through to the subsequent .should() assertion.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/window.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncy.window({ timeout: 10000 }).should('have.property', 'foo')\n```\n\n----------------------------------------\n\nTITLE: Handling Special Characters in Selectors Using CSS.escape in Cypress\nDESCRIPTION: Shows how to target elements with special characters in their IDs using CSS.escape or Cypress.$.escapeSelector(). This technique properly escapes characters like slashes and periods that have special meaning in CSS selectors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <body>\n    <div id=\"Configuration/Setup/TextField.id\">Hello World</div>\n  </body>\n</html>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nit('test', () => {\n  cy.visit('index.html')\n  cy.get(`#${CSS.escape('Configuration/Setup/TextField.id')}`).contains(\n    'Hello World'\n  )\n\n  cy.get(\n    `#${Cypress.$.escapeSelector('Configuration/Setup/TextField.id')}`\n  ).contains('Hello World')\n})\n```\n\n----------------------------------------\n\nTITLE: Embedding Images in Cypress Documentation\nDESCRIPTION: Example of using the DocsImage component to embed images in documentation with proper accessibility attributes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocsImage\n  src=\"/img/app/tooling/coverage-object.png\"\n  alt=\"code coverage object\"\n/>\n```\n\n----------------------------------------\n\nTITLE: HTTPS Server Configuration\nDESCRIPTION: Package.json configuration for local HTTPS server with environment variable for certificate handling\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/overview.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"start\": \"my-server -p 3030 --https\",\n    \"cy:run\": \"cypress run\",\n    \"cy:ci\": \"START_SERVER_AND_TEST_INSECURE=1 start-server-and-test start https-get://localhost:3030 cy:run\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Anchor Element for Testing in Cypress\nDESCRIPTION: Sample HTML code containing an anchor element that will be used in subsequent Cypress test examples.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/and.mdx#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n{/* App Code */}\n<ul>\n  <li>\n    <a href=\"users/123/edit\">Edit User</a>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples of .and() Command in Cypress\nDESCRIPTION: Shows incorrect ways to use the .and() command that will not work properly, such as chaining off 'cy' directly or after action commands that may update the DOM.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/and.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.and('eq', '42') // Can not be chained off 'cy'\n\ncy.get('button').click().and('be.focused') // Should not be chained off\n// action commands that may update the DOM\n```\n\n----------------------------------------\n\nTITLE: Staging Environment Configuration\nDESCRIPTION: JSON configuration file for staging environment with baseUrl and environment variables.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/configuration-api.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"baseUrl\": \"https://staging.acme.com\",\n  \"env\": {\n    \"something\": \"staging\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Videos in Cypress Documentation\nDESCRIPTION: Example of using the DocsVideo component to embed local or external video content with accessibility support.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocsVideo\n  src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\"\n  title=\"Cypress Tips and Tricks\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of scrollIntoView in Cypress\nDESCRIPTION: Shows examples of incorrect usage where scrollIntoView is either chained off 'cy' directly or used on an element that doesn't yield a DOM element like window.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/scrollintoview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.scrollIntoView('footer') // Errors, cannot be chained off 'cy'\ncy.window().scrollIntoView() // Errors, 'window' does not yield DOM element\n```\n\n----------------------------------------\n\nTITLE: Incorrect Cypress Buffer Usage\nDESCRIPTION: Shows incorrect usage of Buffer methods that will result in errors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/buffer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.Buffer.method() // Errors, cannot be chained off 'cy'\n```\n\n----------------------------------------\n\nTITLE: Configuring View Filters to Exclude a Single URL in Cypress UI Coverage\nDESCRIPTION: JSON configuration example showing how to exclude a specific URL with a wildcard pattern from UI Coverage reports. This filter will exclude any URL that starts with 'https://auth.example.com/' from being tracked in coverage metrics.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/guides/ignore-views-and-links.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"viewFilters\": [\n    {\n      \"pattern\": \"https://auth.example.com/*\",\n      \"include\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Element Selector Grouping Example\nDESCRIPTION: Sample HTML showing three buttons with data-cy attributes that will be grouped together by the corresponding elementGroups configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/elementgroups.mdx#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<body>\n  <button data-cy=\"item-1\"></button> <!-- Group: [data-cy^='item-'] -->\n  <button data-cy=\"item-2\"></button> <!-- Group: [data-cy^='item-'] -->\n  <button data-cy=\"item-3\"></button> <!-- Group: [data-cy^='item-'] -->\n</body>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Screenshot Blackout Options in Cypress\nDESCRIPTION: This code snippet demonstrates how to set default blackout options for all screenshots in Cypress, masking elements with a specific attribute.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/account-management/data-storage-and-masking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbefore(() => {\n  Cypress.Screenshot.defaults({\n    // blackout all elements with 'mask-cy' attribute\n    blackout: ['mask-cy'],\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Updating CircleCI Configuration for Cypress Accessibility Result Verification\nDESCRIPTION: This snippet shows how to modify a CircleCI configuration to include Cypress accessibility result verification. It adds steps to install the required module and run a verification script.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/accessibility/results-api.mdx#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n```diff\nversion: 2.1\n\njobs:\n  linux-test:\n    docker:\n      - image: cypress/base:22.12.0\n\n    working_directory: ~/repo\n    steps:\n      - checkout\n      - run: npm install\n      - run: npx run cypress:run --record\n+     - run: npm install --force https://cdn.cypress.io/extract-cloud-results/v1/extract-cloud-results.tgz\n+     - run: node ./scripts/verifyAccessibilityResults.js\n\nworkflows:\n  version: 2\n  tests:\n    jobs:\n      - run-cypress\n```\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of nextUntil in Cypress\nDESCRIPTION: Shows incorrect ways to use the nextUntil command that would result in errors, such as chaining directly off cy or commands that don't yield DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/nextuntil.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.nextUntil() // Errors, cannot be chained off 'cy'\ncy.clock().nextUntil('path') // Errors, 'clock' does not yield DOM elements\n```\n\n----------------------------------------\n\nTITLE: Installing WebKit Dependencies for Cypress\nDESCRIPTION: Command to install required WebKit dependencies for Linux systems\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/launching-browsers.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx playwright install-deps webkit\n```\n\n----------------------------------------\n\nTITLE: Incorrect Configuration of baseUrl in Cypress\nDESCRIPTION: Example showing the incorrect way to configure baseUrl by placing it inside the env object, which will not work as expected.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/configuration.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  // ⛔️ DOES NOT WORK\n  env: {\n    baseUrl: 'http://localhost:3030',\n    FOO: 'bar',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Server for WebSocket Control in Node.js\nDESCRIPTION: This code creates an HTTP server using Express to control WebSocket connections. It provides endpoints for connecting, sending messages, and disconnecting, which can be used in conjunction with Cypress tests to simulate multiple client interactions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/trade-offs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = require('socket.io:client')\nconst express = require('express')\n\nconst app = express()\n\nlet socket\n\napp.get('/connect', (req, res) => {\n  const url = req.query.url\n\n  socket = client(url)\n\n  socket.on('connect', () => {\n    res.sendStatus(200)\n  })\n})\n\napp.get('/message', (req, res) => {\n  const msg = req.query.m\n\n  socket.send(msg, () => {\n    res.sendStatus(200)\n  })\n})\n\napp.get('/disconnect', (req, res) => {\n  socket.on('disconnect', () => {\n    res.sendStatus(200)\n  })\n\n  socket.disconnect()\n})\n\napp.listen(8081, () => {})\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Credentials in Cypress\nDESCRIPTION: JSON configuration file for storing social authentication credentials as Cypress environment variables for testing purposes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/social-authentication.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"GOOGLE_USERNAME\": \"\",\n  \"GOOGLE_PASSWORD\": \"\",\n  \"GOOGLE_NAME\": \"\",\n  \"MICROSOFT_USERNAME\": \"\",\n  \"MICROSOFT_PASSWORD\": \"\",\n  \"MICROSOFT_NAME\": \"\",\n  \"FACEBOOK_USERNAME\": \"\",\n  \"FACEBOOK_PASSWORD\": \"\",\n  \"FACEBOOK_NAME\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of prevUntil Command\nDESCRIPTION: Demonstrates incorrect usage patterns that will result in errors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/prevuntil.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.prevUntil() // Errors, cannot be chained off 'cy'\ncy.location().prevUntil('path') // Errors, 'location' does not yield DOM element\n```\n\n----------------------------------------\n\nTITLE: Filtering Framework-Specific Attributes in UI Coverage\nDESCRIPTION: Example showing how to selectively include one specific Angular attribute while excluding all other Angular attributes using regex patterns. Includes the HTML elements and how they appear in UI Coverage after filtering.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/attributefilters.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"attributeFilters\": [\n      {\n        \"attribute\": \"ng-include-me\",\n        \"value\": \".*\",\n        \"include\": true\n      },\n      {\n        \"attribute\": \"ng-.*\",\n        \"value\": \".*\",\n        \"include\": false\n      }\n    ]\n  }\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<body>\n  <button ng-include-me=\"my-button\">Button 1</button>\n  <button ng-but-not-me=\"other-button\">Button 2</button>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of .not() Command in Cypress\nDESCRIPTION: Shows incorrect ways to use the .not() command in Cypress that will result in errors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/not.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.not('.icon') // Errors, cannot be chained off 'cy'\ncy.clock().not() // Errors, 'clock' does not yield DOM elements\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for nextUntil Example in Cypress\nDESCRIPTION: Provides an HTML list structure used to demonstrate how the nextUntil command selects elements between specified points in the DOM.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/nextuntil.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li id=\"fruits\" class=\"header\">Fruits</li>\n  <li>apples</li>\n  <li>oranges</li>\n  <li>bananas</li>\n  <li id=\"veggies\" class=\"header\">Vegetables</li>\n  <li>cucumbers</li>\n  <li>carrots</li>\n  <li>corn</li>\n  <li id=\"nuts\" class=\"header\">Nuts</li>\n  <li>walnuts</li>\n  <li>cashews</li>\n  <li>almonds</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Checking Element by Name in Cypress\nDESCRIPTION: Example of checking an element with a specific name attribute.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/check.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('form').find('[name=\"emailUser\"]').check()\n```\n\n----------------------------------------\n\nTITLE: Referencing cy.visit() Command in Markdown\nDESCRIPTION: Markdown link to the cy.visit() command documentation, highlighting its default timeout of 60000ms for loading remote pages and external resources.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n[`cy.visit()`](/api/commands/visit)\n```\n\n----------------------------------------\n\nTITLE: Invalid Error Handling Example in Cypress\nDESCRIPTION: Demonstrates an invalid approach to error handling in Cypress that should not be implemented, showing why catch blocks cannot be used with Cypress commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/conditional-testing.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n//! You cannot add error handling to Cypress commands\n//! This code is just for demonstration purposes\ncy.get('button')\n  .contains('hello')\n  .catch((err) => {\n    // oh no the button wasn't found\n    // (or something else failed)\n    cy.get('somethingElse').click()\n  })\n```\n\n----------------------------------------\n\nTITLE: Performing Negative Assertions in Cypress (JavaScript)\nDESCRIPTION: These Cypress snippets show negative assertions using the built-in `not` chainer. The first asserts that an element with class '.todo' does not have the class 'completed' using `should('not.have.class', ...)`. The second asserts that an element with ID 'loading' is not visible using `should('not.be.visible')`.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.todo').should('not.have.class', 'completed')\ncy.get('#loading').should('not.be.visible')\n```\n\n----------------------------------------\n\nTITLE: Updating GitHub Actions Workflow for Cypress Accessibility Verification\nDESCRIPTION: This snippet shows how to modify a GitHub Actions workflow to include Cypress accessibility result verification. It adds steps to install the required module and run a verification script.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/accessibility/results-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n```diff title=\"test_cypress.yaml\"\nname: My Workflow\non: push\n\nenv:\n  CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}\n\njobs:\n  run-cypress:\n    runs-on: ubuntu-24.04\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: install\n        run: npm install\n      - name: Run\n        run: npx cypress run --record\n+     - name: Verify Accessibility Results\n+       run: |\n+          npm install --force https://cdn.cypress.io/extract-cloud-results/v1/extract-cloud-results.tgz\n+          node ./scripts/verifyAccessibilityResults.js\n```\n```\n\n----------------------------------------\n\nTITLE: Saving Cypress Screenshot in Custom Directory\nDESCRIPTION: Demonstrates how to save a Cypress screenshot in a specific directory structure within the screenshots folder.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/screenshot.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// screenshot will be saved as\n// cypress/screenshots/spec.cy.js/actions/login/clicking-login.png\ncy.screenshot('actions/login/clicking-login')\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Environment Variables\nDESCRIPTION: Example showing how to set custom environment variables for the browser launched by Cypress. This approach is not supported when targeting Electron.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/browser-launch-api.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\non('before:browser:launch', (browser, launchOptions) => {\n  launchOptions.env.CUSTOM_ENV_VALUE = '1'\n\n  return launchOptions\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Mochawesome Reporter in Cypress Config (JavaScript)\nDESCRIPTION: Sets up the Mochawesome reporter to generate JSON reports without HTML output.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/reporters.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  reporter: 'mochawesome',\n  reporterOptions: {\n    reportDir: 'cypress/results',\n    overwrite: false,\n    html: false,\n    json: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Cypress.testingType Value\nDESCRIPTION: Example test case that verifies the current testing type is set to 'component'. This is useful for confirming the test is running in the expected environment.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/testing-type.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('is running component testing mode', () => {\n  expect(Cypress.testingType).to.equal('component')\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Component Testing with MountCallback in Cypress 10\nDESCRIPTION: Legacy example showing Vue component testing using the deprecated mountCallback method.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mountCallback } from 'cypress/vue'\n\nbeforeEach(mountCallback(MessageList))\n\nit('shows no messages', () => {\n  getItems().should('not.exist')\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Class Name Assertion\nDESCRIPTION: HTML structure used in the following example to assert that a class name contains 'heading-'.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"docs-header\">\n  <div class=\"main-abc123 heading-xyz987\">Introduction</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Submit Command Syntax in Cypress\nDESCRIPTION: Shows the basic syntax for using the submit command in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/submit.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.submit()\n.submit(options)\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Headers\nDESCRIPTION: Frontmatter configuration for documentation page, setting title, description and sidebar position.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/features/recorded-runs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Recorded Runs\ndescription: View and analyze recorded test runs in Cypress Cloud.\nsidebar_position: 30\n---\n```\n\n----------------------------------------\n\nTITLE: Incorrect Trigger Usage Examples\nDESCRIPTION: Demonstrates invalid ways of using the trigger command that will result in errors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/trigger.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.trigger('touchstart') // Errors, cannot be chained off 'cy'\ncy.clock().trigger('mouseleave') // Errors, 'clock' does not yield DOM elements\n```\n\n----------------------------------------\n\nTITLE: Visiting Non-Angular Pages in Protractor (JavaScript)\nDESCRIPTION: This Protractor snippet shows the necessary step of disabling the automatic wait for Angular (`browser.waitForAngularEnabled(false)`) before navigating to a non-Angular page using `browser.get()`.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nit('visit a non-Angular page', () => {\n  browser.waitForAngularEnabled(false)\n  browser.get('/about')\n})\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration in Cypress 10\nDESCRIPTION: Legacy example showing Vite configuration with automatic merging of vite.config file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  component: {\n    devServer: {\n      framework: 'react',\n      bundler: 'vite',\n      viteConfig: {\n        // ... custom vite config ...\n        // result merged with `vite.config` file if present\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Resulting UI Elements After Include-Only Filter (Text)\nDESCRIPTION: Displays the CSS selector (`#name`) representing the element(s) that remain visible or are included in reports after applying the `elementFilters` configuration designed to include only elements within the `#form` container. This shows the filter's outcome.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_elementfilters.mdx#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n#name\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, defining title, description, and sidebar properties.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/accessibility/core-concepts/comparing-reports.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'Comparing Accessibility Reports | Cypress Documentation'\ndescription: 'Review the main areas to pay attention to when first reviewing an accessibility report for a Cypress run.'\nsidebar_position: 40\nsidebar_label: Compare reports\n---\n```\n\n----------------------------------------\n\nTITLE: JavaScript output from the cypress-config-plugin-example directive\nDESCRIPTION: The JavaScript configuration file generated by the directive, showing how the plugin code is integrated into a standard Cypress configuration with proper module imports and event handling setup.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/plugins/cypressRemarkPlugins/src/cypressConfigPluginExample/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { defineConfig } = require('cypress')\nconst fs = require('fs')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('before:browser:launch', (browser = {}, launchOptions) => {\n        /* ... */\n      })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Express Middleware for Code Coverage Collection\nDESCRIPTION: Demonstrates how to add the code coverage middleware to an Express server. This middleware creates an endpoint that Cypress can use to retrieve coverage data from the back-end.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/code-coverage.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express')\nconst app = express()\n\nrequire('@cypress/code-coverage/middleware/express')(app)\n```\n\n----------------------------------------\n\nTITLE: Chrome Extension ID for Cypress\nDESCRIPTION: The Chrome extension ID that needs to be allowed for Cypress to run properly in corporate environments.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/troubleshooting.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncaljajdfkjjjdehjdoimjkkakekklcck\n```\n\n----------------------------------------\n\nTITLE: Basic End Command Syntax in Cypress\nDESCRIPTION: Shows the basic syntax for using the end() command in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/end.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.end()\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Custom Named Groups Example\nDESCRIPTION: Sample HTML showing multiple add buttons with dynamic IDs that will be grouped together under a custom name by the corresponding elementGroups configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/configuration/elementgroups.mdx#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<body>\n  <button id='listbox-button-1'>+</button>\n  <button id='listbox-button-2'>+</button>\n  <button id='listbox-button-3'>+</button>\n  <button id='listbox-button-4'>+</button>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Referencing cy.wait() Command in Markdown\nDESCRIPTION: Markdown link to the cy.wait() command documentation, explaining its dual timeout structure for routing aliases: 5000ms for matching requests and 30000ms for server responses.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n[`cy.wait()`](/api/commands/wait)\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Cypress Configuration\nDESCRIPTION: The TypeScript version of a complete Cypress configuration file that uses ES modules with import and export. It includes the baseUrl parameter set to 'http://localhost:1234'.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/plugins/cypressRemarkPlugins/src/cypressConfigExample/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  e2e: {\n    baseUrl: 'http://localhost:1234',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Application Code Setting CSS Variable in JavaScript\nDESCRIPTION: Sample application code that adds an event listener to a color input to set a CSS variable when changed.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/sinon.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelector('input[type=color]').addEventListener('change', (e) => {\n  document.documentElement.style.setProperty(\n    '--background-color',\n    e.target.value\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Index File for Component Tests - JavaScript\nDESCRIPTION: Shows how to specify a custom HTML file as the entry point for component rendering during Cypress Component Testing. This example sets the indexHtmlFile property in the component configuration object to point to a custom path. No external dependencies are required beyond the standard Cypress setup.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_component-testing-config.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\\n  component: {\\n    devServer,\\n    indexHtmlFile: '/custom/path/to/component-index.html'\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unstable DOM State in JavaScript Application Code\nDESCRIPTION: This snippet shows how DOM state can be unstable by adding a class to a button element after a random amount of time, making conditional testing unreliable.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/conditional-testing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst random = Math.random() * 100 // random ms of time\nconst btn = document.createElement('button')\n\ndocument.body.appendChild(btn)\n\nsetTimeout(() => {\n  // add the class active after a random amount of time\n  btn.setAttribute('class', 'active')\n}, random)\n```\n\n----------------------------------------\n\nTITLE: Installing Concurrently Package for Cypress and Angular\nDESCRIPTION: Commands for installing the concurrently package using npm or yarn to run Cypress tests alongside Angular application.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install concurrently --save-dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add concurrently --dev\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Cross-Origin Error in Cypress\nDESCRIPTION: Example showing a test that will fail because it attempts to navigate between different origins without using cy.origin().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cross-origin-testing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// this will error because the origin https://docs.cypress.io doesn't match the origin https://www.cypress.io\nit('navigates', () => {\n  cy.visit('https://www.cypress.io')\n  cy.visit('https://docs.cypress.io')\n  cy.get('selector')\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for Cypress eq Command\nDESCRIPTION: Shows the various syntax patterns for using the .eq() command in Cypress to get DOM elements at specific indexes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/eq.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.eq(index)\n.eq(indexFromEnd)\n.eq(index, options)\n.eq(indexFromEnd, options)\n```\n\n----------------------------------------\n\nTITLE: React Component Unmounting in Cypress 10\nDESCRIPTION: Legacy example showing component unmounting using the deprecated unmount method from cypress/react.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nimport { unmount } from 'cypress/react'\n\nit('calls the prop', () => {\n  cy.mount(<Comp onUnmount={cy.stub().as('onUnmount')} />)\n  cy.contains('My component')\n\n  unmount()\n\n  // the component is gone from the DOM\n  cy.contains('My component').should('not.exist')\n  cy.get('@onUnmount').should('have.been.calledOnce')\n})\n```\n\n----------------------------------------\n\nTITLE: Skipping Cypress Binary Installation\nDESCRIPTION: This snippet shows how to skip the installation of the Cypress binary by setting CYPRESS_INSTALL_BINARY to 0.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/advanced-installation.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nCYPRESS_INSTALL_BINARY=0 npm install\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Cypress Submit Command\nDESCRIPTION: Shows incorrect usage patterns that will result in errors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/submit.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.submit() // Errors, cannot be chained off 'cy'\ncy.get('input').submit() // Errors, 'input' does not yield a form\n```\n\n----------------------------------------\n\nTITLE: Defining Element Filters Syntax in Cypress Configuration (JSON)\nDESCRIPTION: Shows the basic JSON structure for the `elementFilters` array within a Cypress configuration file. Each object in the array defines a filter rule using a CSS `selector` (string) and an optional `include` flag (boolean, defaults to true) to determine if matching elements are included or excluded from reports.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_elementfilters.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"elementFilters\": [\n    {\n      \"selector\": string,\n      \"include\": boolean\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Deprecated Cypress Angular Harness (v2)\nDESCRIPTION: Installs version 2.x.x of the `@cypress/angular` package using npm as a development dependency. This is intended as a temporary workaround for projects using Angular below v17.2.0 that need the older test harness after it was removed from the main Cypress binary.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @cypress/angular@2\n```\n\n----------------------------------------\n\nTITLE: Original React Code Before Instrumentation\nDESCRIPTION: This snippet shows a fragment of React code before instrumentation, creating a store and rendering the app.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/code-coverage.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = createStore(reducer)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Configuration for Cypress Types\nDESCRIPTION: JSConfig configuration to include Cypress type definitions and test files for IDE support.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/IDE-integration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\"./node_modules/cypress\", \"cypress/**/*.js\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Check Command in Cypress\nDESCRIPTION: Shows examples of incorrect usage that will result in errors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/check.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.check('[type=\"checkbox\"]') // Errors, cannot be chained off 'cy'\ncy.get('p:first').check() // Errors, '.get()' does not yield checkbox or radio\n```\n\n----------------------------------------\n\nTITLE: Querying Cypress Build Versions Per Project Over Time API Endpoint\nDESCRIPTION: This API endpoint tracks Cypress versions used per project over time, returning project name, run count, Cypress version, and week data.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=cypress-build-versions-per-project-over-time&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Using Callback Function with .should() in Cypress (JavaScript)\nDESCRIPTION: This example demonstrates that return values from callback functions in .should() are ignored. The command always yields the value from the previous command regardless of what is returned in the callback.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('button')\n  .should(($button) => {\n    expect({ foo: 'bar' }).to.deep.eq({ foo: 'bar' })\n\n    return { foo: 'bar' } // return is ignored, .should() yields <button>\n  })\n  .then(($button) => {\n    // do anything we want with <button>\n  })\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Cypress 'should' Command\nDESCRIPTION: Shows an incorrect way to use the 'should' command by chaining it directly off the 'cy' object instead of a yielded element.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.should('eq', '42') // Should not be chained off 'cy'\n```\n\n----------------------------------------\n\nTITLE: Defining getUICoverageResults Arguments Structure\nDESCRIPTION: Code example showing the structure of the getUICoverageResults function's arguments, including optional and required parameters for project identification and run tagging.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/results-api.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngetUICoverageResults({\n  // The Cypress project ID.\n  // Optional if the CYPRESS_PROJECT_ID env is set\n  projectId: string\n  // The project's record key.\n  // Optional if the CYPRESS_RECORD_KEY env is set\n  recordKey: string\n  // The run tags associated with the run.\n  // Required IF you are recording multiple Cypress runs from a single CI build.\n  // Pass the run tags you used when recording in each run\n  runTags: string[]\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Typings for Custom Redux Mount Command\nDESCRIPTION: Provides TypeScript type definitions for the custom mount command with Redux support.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/react/examples.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MountOptions, MountReturn } from 'cypress/react'\nimport { EnhancedStore } from '@reduxjs/toolkit'\nimport { RootState } from './src/StoreState'\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      /**\n       * Mounts a React node\n       * @param component React Node to mount\n       * @param options Additional options to pass into mount\n       */\n      mount(\n        component: React.ReactNode,\n        options?: MountOptions & { reduxStore?: EnhancedStore<RootState> }\n      ): Cypress.Chainable<MountReturn>\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend JWT Validation for Cognito\nDESCRIPTION: Backend configuration for validating Cognito JWTs using express-jwt and jwks-rsa, with examples for both Amplify versions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/amazon-cognito-authentication.mdx#2025-04-22_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst awsCognitoJwtConfig = {\n  secret: jwksRsa.expressJwtSecret({\n    jwksUri: `https://cognito-idp.${awsConfig.aws_cognito_region}.amazonaws.com/${awsConfig.aws_user_pools_id}/.well-known/jwks.json`,\n  }),\n\n  issuer: `https://cognito-idp.${awsConfig.aws_cognito_region}.amazonaws.com/${awsConfig.aws_user_pools_id}`,\n  algorithms: ['RS256'],\n}\n\nexport const checkCognitoJwt = jwt(awsCognitoJwtConfig).unless({\n  path: ['/testData/*'],\n})\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// initial imports ...\nimport { checkCognitoJwt } from './helpers'\n\n// ...\n\nif (process.env.REACT_APP_AWS_COGNITO) {\n  app.use(checkCognitoJwt)\n}\n\n// routes ...\n```\n\n----------------------------------------\n\nTITLE: Stubbing Network Request Errors in Cypress (JavaScript)\nDESCRIPTION: This Cypress snippet shows how to use `cy.intercept()` to stub a network request to a specific URL, forcing a 500 status code response. This allows testing the application's behavior during API failures, such as displaying a warning message.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nit('should display a warning when the third-party API is down', () => {\n  cy.intercept(\n    'GET',\n    'https://api.openweathermap.org/data/2.5/weather?q=Atlanta',\n    { statusCode: 500 }\n  )\n  cy.get('.weather-forecast').contains('Weather Forecast Unavailable')\n})\n```\n\n----------------------------------------\n\nTITLE: ScrollTo Coordinate Examples\nDESCRIPTION: Examples of scrolling using pixel and percentage coordinates.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/scrollto.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('#infinite-scroll-list').scrollTo(0, 500)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.scrollTo('500px')\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('.user-photo').scrollTo('0%', '25%')\n```\n\n----------------------------------------\n\nTITLE: External Navigation HTML Example\nDESCRIPTION: HTML markup showing a simple anchor tag linking to an external domain.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/cross-origin-testing.mdx#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <a href=\"https://example.cypress.io\">Cypress</a>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Detect-Flake-and-Pass-on-Threshold Strategy in Cypress\nDESCRIPTION: This snippet demonstrates how to configure the 'detect-flake-and-pass-on-threshold' experimental retry strategy in Cypress. It sets the maximum number of retries and the required number of passing attempts for a test to be considered passing.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/experiments.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  retries: {\n    experimentalStrategy: 'detect-flake-and-pass-on-threshold',\n    experimentalOptions: {\n      maxRetries: 2,\n      passesRequired: 2\n    },\n\n    // you must also explicitly set openMode and runMode to\n    // either true or false when using experimental retries\n    openMode: true,\n    runMode: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Previous Spec File in Shell\nDESCRIPTION: Shell command to remove the previously created spec.cy.js file.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/end-to-end-testing/testing-your-app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrm cypress/e2e/spec.cy.js\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples of clear Command in JavaScript\nDESCRIPTION: Shows improper uses of the clear() command that will result in errors, including calling directly on cy, using with non-input elements, and chaining after commands that don't yield DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clear.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clear() // Errors, cannot be chained off 'cy'\ncy.get('nav').clear() // Errors, 'get' doesn't yield input or textarea\ncy.clock().clear() // Errors, 'clock' does not yield DOM elements\n```\n\n----------------------------------------\n\nTITLE: Server Background Process Command (Not Recommended)\nDESCRIPTION: Example of an incorrect way to start a server process in background with Cypress. This approach is not recommended as it doesn't guarantee server availability.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/overview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm start & cypress run // Do not do this\n```\n\n----------------------------------------\n\nTITLE: Embedding Documentation Images with DocsImage Component - JSX\nDESCRIPTION: This snippet demonstrates how to embed an image in the documentation using the custom DocsImage JSX component. The component takes src, alt, and width as props to render media in documentation pages, allowing maintainers to visually reference UI features such as the badge configuration form. There are no external dependencies beyond the documentation site framework, and inputs are the standard image attributes passed as props. The output is a rendered image element in the final documentation page.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/account-management/projects.mdx#2025-04-22_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n{/* prettier-ignore */}\\n <DocsImage\\n src=\"/img/cloud/projects/cloud-badge-configuration.jpg\"\\n alt=\"README Badge configuration form\"\\n width=\"80%\"\\n />\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress Component Testing with Next.js\nDESCRIPTION: Configuration example for setting up Cypress Component Testing with Next.js applications, which uses Webpack as the bundler under the hood.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/react/overview.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  component: {\n    devServer: {\n      framework: 'next',\n      bundler: 'webpack',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Include Paths for Cypress\nDESCRIPTION: Configuration snippet showing how to include Cypress directory in tsconfig.json to resolve TypeScript recognition issues for Cypress objects and custom commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n\"include\": [\n  \"src\",\n  \"cypress\"\n]\n```\n\n----------------------------------------\n\nTITLE: Documentation Component - Video Embed\nDESCRIPTION: JSX component for embedding a YouTube video demonstration of accessibility branch review.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/accessibility/core-concepts/comparing-reports.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocsVideo\n  src=\"https://www.youtube.com/embed/k3vq57O4P4M\"\n  title=\"Accessibility branch review demo\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Handling of Window Object Classes in Cypress\nDESCRIPTION: Example demonstrating an incorrect approach to checking event types due to Cypress using different window contexts for the test and the application under test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/window.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nit('test', (done) => {\n  cy.get('#test-input').then((jQueryElement) => {\n    let elemHtml = jQueryElement.get(0)\n\n    elemHtml.addEventListener('keydown', (event) => {\n      expect(event instanceof KeyboardEvent).to.be.true\n      done()\n    })\n  })\n\n  cy.get('#test-input').type('A')\n})\n```\n\n----------------------------------------\n\nTITLE: Team Creation Note - Markdown\nDESCRIPTION: Note about team name uniqueness requirement.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/account-management/teams.mdx#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n_Note: team names must be unique_\n```\n\n----------------------------------------\n\nTITLE: Setting Project ID as Environment Variable (Shell)\nDESCRIPTION: This shell command demonstrates how to set the Cypress project ID as an environment variable. This method can be used to keep the projectId private and not visible in source code.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/account-management/projects.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport CYPRESS_PROJECT_ID={projectId}\n```\n\n----------------------------------------\n\nTITLE: Importing Cypress Angular Mount Function (Using @cypress/angular@2)\nDESCRIPTION: Shows the updated import statement required after installing the separate `@cypress/angular@2` package for older Angular versions (< v17.2.0). The import path now references the installed package directly.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { mount } from `@cypress/angular`\n```\n\n----------------------------------------\n\nTITLE: Configuring React Application Entry Point for Google Auth Integration\nDESCRIPTION: Updates the application entry point to conditionally render either the standard App component or the Google-authenticated AppGoogle component based on environment variables.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/google-authentication.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Router } from 'react-router-dom'\nimport { history } from './utils/historyUtils'\nimport App from './containers/App'\nimport AppGoogle from './containers/AppGoogle'\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core'\nconst theme = createMuiTheme({\n  palette: {\n    secondary: {\n      main: '#fff',\n    },\n  },\n})\nReactDOM.render(\n  <Router history={history}>\n    <ThemeProvider theme={theme}>\n      {process.env.REACT_APP_GOOGLE ? <AppGoogle /> : <App />}\n    </ThemeProvider>\n  </Router>,\n  document.getElementById('root')\n)\n```\n\n----------------------------------------\n\nTITLE: Obsolete WebDriver Code in Selenium\nDESCRIPTION: Shows Selenium WebDriver code that becomes obsolete when migrating to Cypress, as Cypress handles browser management automatically.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/selenium-to-cypress.mdx#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nWebDriver driver = new ChromeDriver();\n\nWebDriverWait wait = new WebDriverWait(driver, 10);\n\ndriver.quit();\n```\n\n----------------------------------------\n\nTITLE: Grouping Test Runs by Browser - Electron\nDESCRIPTION: Command to run and record Cypress tests in Electron browser as a grouped test run on Linux.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/features/smart-orchestration/parallelization.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --record --group Linux/Electron\n```\n\n----------------------------------------\n\nTITLE: Documentation Component - Image Embed\nDESCRIPTION: JSX component for embedding an image explaining branch review sections with accessibility details.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/accessibility/core-concepts/comparing-reports.mdx#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocsImage\n  src=\"/img/accessibility/core-concepts/branch-review-intro.png\"\n  alt=\"Cypress Accessibility Branch Review with arrows calling out the sections for new failed rules, resolved rules, and failed rules with changes. New failed rules are defined as rules that just started failing on the new branch. Resolved rules are defined as rules that got fully fixed in the new branch. Failed rules with changes are defined as rules that failed on both branches, but with different element counts or different related pages.\"\n  noBorder={true}\n/>\n```\n\n----------------------------------------\n\nTITLE: Changes to __dirname and __filename in Cypress 5.0\nDESCRIPTION: Example showing how __dirname and __filename no longer include a leading slash in Cypress 5.0 and later.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_94\n\nLANGUAGE: js\nCODE:\n```\n// cypress/integration/app_spec.js\nit('include leading slash < 5.0', () => {\n  expect(__dirname).to.equal('/cypress/integration')\n  expect(__filename).to.equal('/cypress/integration/app_spec.js')\n})\n```\n\nLANGUAGE: js\nCODE:\n```\n// cypress/integration/app_spec.js\nit('do not include leading slash >= 5.0', () => {\n  expect(__dirname).to.equal('cypress/integration')\n  expect(__filename).to.equal('cypress/integration/app_spec.js')\n})\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository for Cypress Documentation\nDESCRIPTION: Command to clone the forked Cypress documentation repository and navigate to the project directory.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/<your username>/cypress-documentation.git\ncd cypress-documentation\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Asynchronous Commands in Cypress\nDESCRIPTION: This snippet shows the correct way to handle asynchronous commands in Cypress using .then() to access the yielded data, avoiding the need for aliases in some cases.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/variables-and-aliases.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// yup all good\ncy.fixture('users.json').then((users) => {\n  // now we can avoid the alias altogether\n  // and use a callback function\n  const user = users[0]\n\n  // passes\n  cy.get('header').should('contain', user.name)\n})\n```\n\n----------------------------------------\n\nTITLE: Sinon.JS Breaking Change: Reset Method Replaced by ResetHistory\nDESCRIPTION: This example demonstrates that the reset() method for spies and stubs in Sinon.JS 3 has been replaced by resetHistory() in Sinon.JS 8.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_106\n\nLANGUAGE: javascript\nCODE:\n```\nconst spy = cy.spy()\nconst stub = cy.stub()\n\nspy.reset()\nstub.reset()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst spy = cy.spy()\nconst stub = cy.stub()\n\nspy.resetHistory()\nstub.resetHistory()\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Configuration for AAD Authentication\nDESCRIPTION: Cypress configuration that enables the experimentalModifyObstructiveThirdPartyCode option, which is required for Azure Active Directory authentication to prevent infinite redirect loops.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/azure-active-directory-authentication.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  e2e: {\n    experimentalModifyObstructiveThirdPartyCode: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DELETE Request Example\nDESCRIPTION: Demonstrates making a DELETE HTTP request.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/request.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncy.request('DELETE', 'http://localhost:8888/users/827')\n```\n\n----------------------------------------\n\nTITLE: Defining a Test Case for Visibility in Cypress (JavaScript)\nDESCRIPTION: This Cypress snippet shows the equivalent test case structure. It verifies that a link element with the class 'submit-link' is visible using `cy.get()` and the `should('be.visible')` assertion, which includes automatic retries.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('verify elements on a page', () => {\n  it('verifies that a link is visible', () => {\n    cy.get('a.submit-link').should('be.visible')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Waiting for Values in Cypress\nDESCRIPTION: An example of incorrectly structuring a test to wait for and assert on a value that changes asynchronously, which may fail due to the chain being broken.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/retry-ability.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// WRONG: this test will not work as intended\ncy.get('[data-testid=\"random-number\"]') // <div>🎁</div>\n  .invoke('text') // \"🎁\"\n  .then(parseFloat) // NaN\n  .should('be.gte', 1) // fails\n  .and('be.lte', 10) // never evaluates\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of closest()\nDESCRIPTION: Shows invalid ways of using the closest() command that will result in errors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/closest.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.closest('.active') // Errors, cannot be chained off 'cy'\ncy.clock().closest() // Errors, 'clock' does not yield DOM elements\n```\n\n----------------------------------------\n\nTITLE: Grouping Test Runs by Browser - Chrome 69\nDESCRIPTION: Command to run and record Cypress tests in Chrome 69 browser as a grouped test run on Windows.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/features/smart-orchestration/parallelization.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --record --group Windows/Chrome-69 --browser chrome\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Child Command for Console Logging\nDESCRIPTION: Creates a custom child command that logs the current subject to the console and demonstrates how to handle subject chaining in child commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/custom-commands.mdx#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// not a super useful custom command\n// but demonstrates how subject is passed\n// and how the arguments are shifted\nCypress.Commands.add(\n  'console',\n  {\n    prevSubject: true,\n  },\n  (subject, method) => {\n    // the previous subject is automatically received\n    // and the commands arguments are shifted\n\n    // allow us to change the console method used\n    method = method || 'log'\n\n    // log the subject to the console\n    console[method]('The subject is', subject)\n\n    // whatever we return becomes the new subject\n    //\n    // we don't want to change the subject so\n    // we return whatever was passed in\n    return subject\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Module API results structure before test retries in Cypress\nDESCRIPTION: JSON structure of the `results.runs` array returned from `cypress.run()` before the implementation of test retries, showing the old format of test results.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_87\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"runs\": [{\n    // ...\n    \"hooks\": [{\n      \"hookId\": \"h1\",\n      \"hookName\": \"before each\",\n      \"title\": [ \"before each hook\" ],\n      \"body\": \"function () {\\n  expect(true).to.be[\\\"true\\\"];\\n}\"\n    }],\n    // ...\n    \"screenshots\": [{\n      \"screenshotId\": \"8ddmk\",\n      \"name\": null,\n      \"testId\": \"r2\",\n      \"takenAt\": \"2020-08-05T08:52:20.432Z\",\n      \"path\": \"User/janelane/my-app/cypress/screenshots/spec.js/test (failed).png\",\n      \"height\": 720,\n      \"width\": 1280\n    }],\n    \"stats\": {\n      // ...\n      \"wallClockStartedAt\": \"2020-08-05T08:38:37.589Z\",\n      \"wallClockEndedAt\": \"2018-07-11T17:53:35.675Z\",\n      \"wallClockDuration\": 1171\n    },\n    \"tests\": [{\n      \"testId\": \"r2\",\n      \"title\": [ \"test\" ],\n      \"state\": \"failed\",\n      \"body\": \"function () {\\n  expect(true).to.be[\\\"false\\\"];\\n}\",\n      \"stack\": \"AssertionError: expected true to be false\\n' +\n        '    at Context.eval (...cypress/integration/spec.js:5:21\",\n      \"error\": \"expected true to be false\",\n      \"timings\": {\n        \"lifecycle\": 16,\n        \"test\": {...}\n      },\n      \"failedFromHookId\": null,\n      \"wallClockStartedAt\": \"2020-08-05T08:38:37.589Z\",\n      \"wallClockDuration\": 1171,\n      \"videoTimestamp\": 4486\n    }],\n  }],\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress Angular Schematic for Cloud Recording\nDESCRIPTION: This JSON configuration demonstrates how to set up the Cypress Angular Schematic for recording test results to Cypress Cloud. It includes options for specifying the dev server target and the recording key.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n\"cypress-run\": {\n  \"builder\": \"@cypress/schematic:cypress\",\n  \"options\": {\n    \"devServerTarget\": \"{project-name}:serve\",\n    \"record\": true,\n    \"key\": \"your-cypress-dashboard-recording-key\"\n  },\n  \"configurations\": {\n    \"production\": {\n      \"devServerTarget\": \"{project-name}:production\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Dependencies for Arch Linux\nDESCRIPTION: Command to install the required system dependencies for Cypress on Arch Linux distributions using the pacman package manager.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/get-started/install-cypress.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npacman -S gtk2 gtk3 alsa-lib xorg-server-xvfb libxss nss libnotify\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Non-Existence with Retry in Cypress (JavaScript)\nDESCRIPTION: This Cypress snippet demonstrates asserting that an element with the ID 'loading' does not exist in the DOM. Cypress retries the `should('not.exist')` assertion until the element is removed or the command times out.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// retry until loading spinner no longer exists\ncy.get('#loading').should('not.exist')\n```\n\n----------------------------------------\n\nTITLE: Configuration File Switching in JavaScript\nDESCRIPTION: Implementation of a system to switch between multiple configuration files using Node.js fs-extra module.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/node-events/configuration-api.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// promisified fs module\nconst fs = require('fs-extra')\nconst path = require('path')\n\nfunction getConfigurationByFile(file) {\n  const pathToConfigFile = path.resolve('..', 'config', `${file}.json`)\n\n  return fs.readJson(pathToConfigFile)\n}\n\n// plugins file\nmodule.exports = (on, config) => {\n  // accept a configFile value or use development by default\n  const file = config.env.configFile || 'development'\n\n  return getConfigurationByFile(file)\n}\n```\n\n----------------------------------------\n\nTITLE: Building Static Content for Cypress Documentation\nDESCRIPTION: This command generates static content into the 'dist' directory, which can be served using any static content hosting service.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Example of cy.press() Command\nDESCRIPTION: Demonstrates incorrect usage where the developer attempts to chain assertions directly after cy.press(), which fails because press() yields null.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/press.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input.first').focus()\ncy.press(Cypress.Keyboard.Keys.TAB)\n  // Errors because press yields null\n  .should('have.focus')\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of reload Command in Cypress\nDESCRIPTION: Demonstrates the correct way to use the reload command in Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/reload.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.reload()\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for Cypress .rightclick() Command\nDESCRIPTION: Shows various syntax options for the .rightclick() command, including with no arguments, with position options, with coordinates, and with additional options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/rightclick.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.rightclick()\n.rightclick(options)\n.rightclick(position)\n.rightclick(position, options)\n.rightclick(x, y)\n.rightclick(x, y, options)\n```\n\n----------------------------------------\n\nTITLE: Flaky Conditional Testing Based on Unstable DOM State in Cypress\nDESCRIPTION: This Cypress test demonstrates a non-deterministic test that will sometimes pass and sometimes fail because it relies on the unstable state of a button element's class.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/conditional-testing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit('does something different based on the class of the button', () => {\n  // RERUN THIS TEST OVER AND OVER AGAIN\n  // AND IT WILL SOMETIMES BE TRUE, AND\n  // SOMETIMES BE FALSE.\n\n  cy.get('button').then(($btn) => {\n    if ($btn.hasClass('active')) {\n      // do something if it's active\n    } else {\n      // do something else\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: ScrollTo Basic Syntax Examples\nDESCRIPTION: Demonstrates the basic syntax patterns for using the scrollTo command in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/scrollto.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.scrollTo(position)\ncy.scrollTo(x, y)\ncy.scrollTo(position, options)\ncy.scrollTo(x, y, options)\n\n  // ---or---\n\n  .scrollTo(position)\n  .scrollTo(x, y)\n  .scrollTo(position, options)\n  .scrollTo(x, y, options)\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Cypress Documentation\nDESCRIPTION: This command starts a local development server and opens a browser window. It allows for live updates without restarting the server.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run start\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of end() Command in Cypress\nDESCRIPTION: Shows incorrect usage of end() command without chaining from a previous command.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/end.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.end()\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of .prev() Command in Cypress\nDESCRIPTION: Shows incorrect ways to use the .prev() command that would result in errors, such as chaining directly off 'cy' or after commands that don't yield DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/prev.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.prev() // Errors, cannot be chained off 'cy'\ncy.getCookies().prev() // Errors, 'getCookies' does not yield DOM element\n```\n\n----------------------------------------\n\nTITLE: Cypress parentsUntil Basic Syntax\nDESCRIPTION: Shows the different syntax variations for using the parentsUntil command with selectors, elements, filters and options.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/parentsuntil.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.parentsUntil(selector)\n.parentsUntil(selector, filter)\n.parentsUntil(selector, filter, options)\n.parentsUntil(element)\n.parentsUntil(element, filter)\n.parentsUntil(element, filter, options)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Cypress .parents() Command\nDESCRIPTION: Shows incorrect ways to use the .parents() command, such as chaining it directly off 'cy' or after commands that don't yield DOM elements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/parents.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.parents() // Errors, cannot be chained off 'cy'\ncy.clock().parents() // Errors, 'clock' does not yield DOM elements\n```\n\n----------------------------------------\n\nTITLE: Complex Assertions Using Callback Function in Cypress\nDESCRIPTION: Advanced example using a callback function with .and() to perform multiple complex assertions on paragraph elements, including checking length, content, and extracting classes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/and.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('p')\n  .should('not.be.empty')\n  .and(($p) => {\n    // should have found 3 elements\n    expect($p).to.have.length(3)\n\n    // make sure the first contains some text content\n    expect($p.first()).to.contain('Hello World')\n\n    // use jquery's map to grab all of their classes\n    // jquery's map returns a new jquery object\n    const classes = $p.map((i, el) => {\n      return Cypress.$(el).attr('class')\n    })\n\n    // call classes.get() to make this a plain array\n    expect(classes.get()).to.deep.eq([\n      'text-primary',\n      'text-danger',\n      'text-default',\n    ])\n  })\n```\n\n----------------------------------------\n\nTITLE: Running Node Script for Cypress in Shell\nDESCRIPTION: Command line example showing how to execute a Node.js script that opens Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/module-api.mdx#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnode e2e-open-tests.js\n```\n\n----------------------------------------\n\nTITLE: Basic prevUntil Syntax Examples in JavaScript\nDESCRIPTION: Demonstrates the different syntax options available for the prevUntil command in Cypress.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/prevuntil.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.prevUntil(selector)\n.prevUntil(selector, filter)\n.prevUntil(selector, filter, options)\n.prevUntil(element)\n.prevUntil(element, filter)\n.prevUntil(element, filter, options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Attribute Filters in Cypress UI Coverage\nDESCRIPTION: This configuration example shows how to exclude dynamically generated id attributes using a regular expression pattern. The configuration uses the attributeFilters property to define which attributes should be excluded from element identification.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/core-concepts/element-identification.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uiCoverage\": {\n    \"attributeFilters\": [\n      {\n        \"attribute\": \"id\",\n        \"value\": \":r.*:\",\n        \"include\": false\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Window Before Load Event Handling\nDESCRIPTION: Example showing how to modify the window object before page load across all page transitions.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/catalog-of-events.mdx#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nit('can modify the window prior to page load on all pages', () => {\n  // create the stub here\n  const ga = cy.stub().as('ga')\n\n  // prevent google analytics from loading\n  // and replace it with a stub before every\n  // single page load including all new page\n  // navigations\n  cy.on('window:before:load', (win) => {\n    Object.defineProperty(win, 'ga', {\n      configurable: false,\n      get: () => ga, // always return the stub\n      set: () => {}, // don't allow actual google analytics to overwrite this property\n    })\n  })\n\n  cy\n    // window:before:load will be called here\n    .visit('/first/page')\n\n    .then((win) => {\n      // and here\n      win.location.href = '/second/page'\n    })\n\n    // and here\n    .get('a')\n    .click()\n})\n```\n\n----------------------------------------\n\nTITLE: Basic reload Command Example in Cypress\nDESCRIPTION: A simple example of using the reload command in Cypress tests to refresh the current page.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/reload.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.reload()\n```\n\n----------------------------------------\n\nTITLE: Accessing Clock Later in Command Chain\nDESCRIPTION: Shows how to access the clock object later in a Cypress command chain when needed.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clock.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clock()\ncy.get('input').type('Jane Lane')\ncy.clock().then((clock) => {\n  clock.tick(1000)\n})\n```\n\n----------------------------------------\n\nTITLE: Arguments Example in cy.log\nDESCRIPTION: Demonstrates how to log a message with additional arguments using cy.log().\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/log.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.log('events triggered', events)\n```\n\n----------------------------------------\n\nTITLE: Concatenating Custom Browser with Existing Browsers\nDESCRIPTION: Shows how to add the custom browser configuration to the existing list of browsers in Cypress configuration.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/launching-browsers.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nreturn findBrowser().then((browser) => {\n  return {\n    browsers: config.browsers.concat(browser),\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests with Recording and Key Flag - Shell\nDESCRIPTION: This snippet demonstrates the recommended way to run Cypress tests in record mode, specifying the record key directly using the '--record' and '--key' flags. The '--record' flag enables recording the test run to Cypress Cloud, and '--key' provides the project-specific record key. Ensure the correct key value is used and that Cypress Cloud is properly configured for your project.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/error-messages.mdx#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --record --key abc-key-123\n```\n\n----------------------------------------\n\nTITLE: Grouping URLs Across Subdomains in Cypress\nDESCRIPTION: Configuration to group URLs across different subdomains. This pattern matches any subdomain of 'my-app.com' and groups URLs by path, creating separate views for different paths regardless of the subdomain.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_views.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"views\": [\n    {\n      \"pattern\": \"https://*.my-app.com/:path*\",\n      \"groupBy\": [\"path\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Dev Server in Cypress 9 (Before)\nDESCRIPTION: Example of configuring a webpack dev server in the legacy Cypress plugins file. This shows how component testing dev servers were previously set up in cypress/plugins/index.js.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nconst { startDevServer } = require('@cypress/webpack-dev-server')\nconst webpackConfig = require('../../webpack.config.js')\n\nmodule.exports = (on, config) => {\n  if (config.testingType === 'component') {\n    on('dev-server:start', async (options) =>\n      startDevServer({ options, webpackConfig })\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating supportFile Configuration\nDESCRIPTION: Example of migrating from the legacy supportFile configuration to the new testing-type specific support file paths. This allows different support files for e2e and component tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"supportFile\": \"cypress/support/index.js\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  component: {\n    supportFile: 'cypress/support/component.js'\n  },\n  e2e: {\n    supportFile: 'cypress/support/e2e.js'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript esModuleInterop in tsconfig.json\nDESCRIPTION: Example showing how to set the esModuleInterop compiler option in tsconfig.json since Cypress 5.0 no longer forces it to be true.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_96\n\nLANGUAGE: json\nCODE:\n```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"esModuleInterop\": true\n    /* ... other compiler options ... */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Output of Visit-Mount-Example Directive\nDESCRIPTION: Shows the transformed output that the plugin generates. The original code is separated into two distinct code blocks within E2EOrCtTabs component, one showing the cy.visit example and the other showing the cy.mount example.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/plugins/cypressRemarkPlugins/src/visitMountExample/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<E2EOrCtTabs>\n\n```js\ncy.clock(now)\ncy.visit('/index.html')\ncy.get('#date').should('have.value', '04/14/2021')\n```\n\n```js\ncy.clock(now)\ncy.mount(<DatePicker id=\"date\" />)\ncy.get('#date').should('have.value', '04/14/2021')\n```\n\n</E2EOrCtTabs>\n```\n\n----------------------------------------\n\nTITLE: Using cy.readFile as a Query Command in Cypress v13+\nDESCRIPTION: Illustrates how `cy.readFile()` functions as a query command starting from Cypress v13. The command will re-read the file from disk during retries if subsequent chained commands or assertions fail, until the entire chain passes.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_19\n\nLANGUAGE: js\nCODE:\n```\ncy.readFile(`users.json`).its('users.123.fullName').should('eq', 'John Doe')\n```\n\n----------------------------------------\n\nTITLE: Wait-On Server Command\nDESCRIPTION: Command using wait-on module to ensure server is ready before running Cypress tests\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm start & wait-on http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Defining a Test Case for Visibility in Protractor (JavaScript)\nDESCRIPTION: This Protractor snippet shows a basic test suite structure using `describe` and `it`. The test verifies that a link element with the class 'submit-link' is displayed using `isDisplayed()`.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/migration/protractor-to-cypress.mdx#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe('verify elements on a page', () => {\n  it('verifies that a link is visible', () => {\n    expect($('a.submit-link').isDisplayed()).toBe(true)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Working with Input Values in Cypress\nDESCRIPTION: Shows various ways to assert on and work with input values in Cypress tests, including value assertions and comparisons.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/faq.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('input').should('have.value', 'abc')\n\ncy.get('input').should(($input) => {\n  const val = $input.val()\n\n  expect(val).to.match(/foo/)\n  expect(val).to.include('foo')\n  expect(val).not.to.include('bar')\n})\n\ncy.get('input')\n  .invoke('val')\n  .then((val1) => {\n    // do more work here\n\n    // click the button which changes the input's value\n    cy.get('button').click()\n\n    // grab the input again and compare its previous value\n    // to the current value\n    cy.get('input')\n      .invoke('val')\n      .should((val2) => {\n        expect(val1).not.to.eq(val2)\n      })\n  })\n```\n\n----------------------------------------\n\nTITLE: Including Only Specific URLs in Cypress Reports\nDESCRIPTION: Configuration that uses two filter rules to include only URLs that match a specific pattern and exclude everything else. This example only includes dashboard URLs while filtering out all other pages.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_viewfilters.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"viewFilters\": [\n    {\n      \"pattern\": \"https://cypress.io/dashboards*\",\n      \"include\": true\n    },\n    {\n      \"pattern\": \"*\",\n      \"include\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: CircleCI Configuration with UI Coverage Verification\nDESCRIPTION: Example CircleCI configuration file showing how to add UI Coverage verification steps to an existing Cypress test job.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/ui-coverage/results-api.mdx#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\n\njobs:\n  linux-test:\n    docker:\n      - image: cypress/base:22.12.0\n\n    working_directory: ~/repo\n    steps:\n      - checkout\n      - run: npm install\n      - run: npx run cypress:run --record\n     - run: npm install --force https://cdn.cypress.io/extract-cloud-results/beta/v1/extract-cloud-results.tgz\n     - run: node ./scripts/verifyUICoverageResults.js\n\nworkflows:\n  version: 2\n  tests:\n    jobs:\n      - run-cypress\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Environment Variables in Cypress\nDESCRIPTION: Example of setting custom environment variables for use in Cypress tests\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/overview.mdx#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nexport \"EXTERNAL_API_SERVER=https://corp.acme.co\"\n```\n\n----------------------------------------\n\nTITLE: Using cypress-config-plugin-example directive with two code blocks\nDESCRIPTION: Example showing how to use the directive with two code blocks. The first block gets placed in the imports section and the second block appears within the setupNodeEvents method.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/plugins/cypressRemarkPlugins/src/cypressConfigPluginExample/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::cypress-config-plugin-example\n\n```ts\nimport fs from 'fs'\n```\n\n```ts\non('before:browser:launch', (browser = {}, launchOptions) => {\n  /* ... */\n})\n```\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Loading External Fonts via Link Tags in HTML\nDESCRIPTION: Example of loading external fonts from Google Fonts using link tags in the HTML head. This approach establishes connections to font servers and loads the specified font families with various weights.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/styling-components.mdx#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n  <link\n    href=\"https://fonts.googleapis.com/css2?family=Readex+Pro:wght@200;300;400;500;600;700&family=Roboto&display=swap\"\n    rel=\"stylesheet\"\n  />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Disabling Colors in Cypress Output\nDESCRIPTION: Command to disable color output in Cypress using NO_COLOR environment variable\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/continuous-integration/overview.mdx#2025-04-22_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nNO_COLOR=1 cypress run\n```\n\n----------------------------------------\n\nTITLE: Grouping URLs by Named Parameters in Cypress\nDESCRIPTION: Configuration that groups URLs by specific named parameters using the 'groupBy' property. This creates separate views for different types of analytics while still grouping by dynamic IDs.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_views.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"views\": [\n    {\n      \"pattern\": \"https://www.my-app.com/analytics/:type/:id\",\n      \"groupBy\": [\"type\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JWT Middleware for Express Routes\nDESCRIPTION: This snippet defines an Express middleware function to verify the Auth0 JWT sent by frontend API requests as the Bearer token. It uses the previously defined auth0JwtConfig.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/auth0-authentication.mdx#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// ...\n\nexport const checkJwt = jwt(auth0JwtConfig).unless({ path: ['/testData/*'] })\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins for React Scripts in Cypress 7.0\nDESCRIPTION: Example of configuring the Cypress plugins file for a React Scripts project using the preset plugin from @cypress/react/plugins.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\n// The @cypress/react project exposes preset plugin configurations\n// These presets automatically register the events to bundle the project properly\nconst injectReactScriptsDevServer = require('@cypress/react/plugins/react-scripts')\n\nmodule.exports = (on, config) => {\n  // Internally, this method registers `dev-server:start` with the proper webpack configuration\n  // Previously, it registered the `file:preprocessor` event.\n  injectReactScriptsDevServer(on, config)\n\n  return config\n}\n```\n\n----------------------------------------\n\nTITLE: Turning Off All Uncaught Exception Handling in Cypress 7.0\nDESCRIPTION: Shows how to prevent Cypress from failing tests when uncaught exceptions occur in the application under test by using the uncaught:exception event.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.on('uncaught:exception', (err, runnable) => {\n  // returning false here prevents Cypress from\n  // failing the test\n  return false\n})\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests via Yarn (Shell)\nDESCRIPTION: Executes all Cypress tests headlessly using the Yarn package manager. This command invokes the Cypress binary installed within the project's node_modules via Yarn's command execution mechanism.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_cypress-run-commands.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn cypress run\n```\n\n----------------------------------------\n\nTITLE: Navigating to Secondary Origin with UI in Cypress\nDESCRIPTION: Demonstrates how to navigate to a secondary origin by clicking a button in the primary origin and then performing assertions on the new page.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/origin.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Button in primary origin goes to https://example.cypress.io\ncy.contains('button', 'Go').click()\n\ncy.origin('example.cypress.io', () => {\n  // No cy.visit is needed as the button brought us here\n  cy.get('h1').contains('CYPRESS')\n})\n```\n\n----------------------------------------\n\nTITLE: Complete getAllLocalStorage Test Example\nDESCRIPTION: Full example showing how to set localStorage during page load and verify its contents using getAllLocalStorage.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/getalllocalstorage.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncy.visit('https://example.cypress.io', {\n  onBeforeLoad(win) {\n    win.localStorage.setItem('key', 'value')\n  },\n})\n\ncy.getAllLocalStorage().then((result) => {\n  expect(result).to.deep.equal({\n    'https://example.cypress.io': {\n      key: 'value',\n    },\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Stylesheet Imports in Cypress 7.0 Component Tests\nDESCRIPTION: Example of updating stylesheet imports in Cypress 7.0 component tests to use direct imports instead of the mountingOptions.stylesheets option.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\n// In the majority of modern style-loaders,\n// these styles will be injected into document.head when they're imported below\nrequire('./index.scss')\nrequire('tailwindcss/dist/tailwind.min.css')\n\nconst { mount } = require('@cypress/react')\nconst Button = require('./Button')\n\nit('renders a Button', () => {\n  // This button will render with the Tailwind CSS styles\n  // as well as the application's index.scss styles\n  mount(<Button />)\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Deprecated Cypress Svelte Harness (v2 for Svelte 3/4)\nDESCRIPTION: Installs version 2.x.x of the `@cypress/svelte` package using npm as a development dependency. This provides continued component testing support for Svelte 3 and 4 projects after Cypress v14 removed the built-in harness.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @cypress/svelte@2\n```\n\n----------------------------------------\n\nTITLE: Backend JWT Configuration for Google Auth\nDESCRIPTION: Configuration setup for JWT validation of Google authentication tokens in Express backend\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/guides/authentication-testing/google-authentication.mdx#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport jwt from 'express-jwt'\nimport jwksRsa from 'jwks-rsa'\n\ndotenv.config()\nconst googleJwtConfig = {\n  secret: jwksRsa.expressJwtSecret({\n    cache: true,\n    rateLimit: true,\n    jwksRequestsPerMinute: 5,\n    jwksUri: 'https://www.googleapis.com/oauth2/v3/certs',\n  }),\n  audience: process.env.REACT_APP_GOOGLE_CLIENTID,\n  issuer: 'accounts.google.com',\n  algorithms: ['RS256'],\n}\n```\n\n----------------------------------------\n\nTITLE: Using cypress.open() in JavaScript\nDESCRIPTION: Shows how to programmatically open the Cypress Test Runner with custom configuration and environment variables.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/module-api.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// e2e-open-tests.js\nconst cypress = require('cypress')\n\ncypress.open({\n  config: {\n    baseUrl: 'http://localhost:8080',\n  },\n  env: {\n    login_url: '/login',\n    products_url: '/products',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Component Testing with Mount in Cypress 11\nDESCRIPTION: Updated example showing Vue component testing using the new mount method.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(() => cy.mount(MessageList))\n\nit('shows no messages', () => {\n  getItems().should('not.exist')\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Local Fonts with @font-face in CSS\nDESCRIPTION: Example CSS for loading local font files using the @font-face rule. This method defines a 'Fira Sans' font family and specifies multiple font file formats for cross-browser compatibility.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/styling-components.mdx#2025-04-22_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n/* main.css */\n@font-face {\n  font-family: 'Fira Sans';\n  src: url('fonts/fira/eot/FiraSans-Regular.eot');\n  src:\n    url('fonts/fira/eot/FiraSans-Regular.eot') format('embedded-opentype'),\n    url('fonts/fira/woff2/FiraSans-Regular.woff2') format('woff2'),\n    url('fonts/fira/woff/FiraSans-Regular.woff') format('woff'),\n    url('fonts/fira/woff2/FiraSans-Regular.ttf') format('truetype');\n  font-weight: normal;\n  font-style: normal;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Multiple Paragraph Elements\nDESCRIPTION: HTML structure with multiple paragraph elements having different classes used in the following Cypress assertion example.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/should.mdx#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <p class=\"text-primary\">Hello World</p>\n  <p class=\"text-danger\">You have an error</p>\n  <p class=\"text-default\">Try again later</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for Cypress 'invoke' Command\nDESCRIPTION: Shows the various syntax patterns for using the '.invoke()' command, which calls a function on the previously yielded subject in Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/invoke.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.invoke(functionName)\n.invoke(options, functionName)\n.invoke(functionName, args...)\n.invoke(options, functionName, args...)\n```\n\n----------------------------------------\n\nTITLE: Instrumented React Code for Coverage\nDESCRIPTION: This snippet demonstrates the same React code after instrumentation, with added coverage counters for statements.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/code-coverage.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = (cov_18hmhptych.s[0]++, createStore(reducer))\ncov_18hmhptych.s[1]++\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Linux dependencies for Cypress 5.0\nDESCRIPTION: Shell command for installing all required dependencies to run Cypress on Ubuntu/Debian Linux, including the new libgbm dependency.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/migration-guide.mdx#2025-04-22_snippet_95\n\nLANGUAGE: shell\nCODE:\n```\napt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 libasound2 libxtst6 xauth xvfb\n```\n\n----------------------------------------\n\nTITLE: Importing Main CSS in Application Entry Point\nDESCRIPTION: Example of importing a main CSS file in an application's entry point JavaScript file, which should also be imported in Cypress support files.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/styling-components.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport './main.css'\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of clearAllLocalStorage in Cypress\nDESCRIPTION: This example shows the correct way to use the clearAllLocalStorage command in a Cypress test. It is called directly on the cy object without any chaining.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/clearalllocalstorage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.clearAllLocalStorage()\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Structure - Cypress Fundamentals\nDESCRIPTION: A markdown table listing fundamental Cypress testing recipes with links to examples and descriptions of functionality.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/recipes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Recipe | Description |\n| ----------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- |\n| [Node Modules](https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/fundamentals__node-modules) | Import your own Node modules |\n```\n\n----------------------------------------\n\nTITLE: Basic scrollIntoView Syntax in Cypress\nDESCRIPTION: Shows the basic syntax for the scrollIntoView command in Cypress. The command can be called without options or with an options object to customize behavior.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/scrollintoview.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.scrollIntoView()\n.scrollIntoView(options)\n```\n\n----------------------------------------\n\nTITLE: Handling Unhandled Promise Rejections with Bluebird\nDESCRIPTION: Shows how to handle unhandled promise rejections using Bluebird's API.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/promise.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Promise.onPossiblyUnhandledRejection((error, promise) => {\n  throw error\n})\n```\n\n----------------------------------------\n\nTITLE: Sample HTML for Attribute-Based Exclusion Example (XML/HTML)\nDESCRIPTION: Provides the sample HTML structure for the attribute-based exclusion example. It contains two buttons differentiated by the `data-role` attribute; one (`decorative`) is targeted for exclusion, and the other (`primary`) is intended to remain.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_elementfilters.mdx#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<body>\n  <button data-role=\"decorative\">\n    <img src=\"icon.png\" />\n  </button>\n  <button data-role=\"primary\">\n    View\n  </button>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax of Cypress writeFile Command\nDESCRIPTION: Different syntax variations for the writeFile command, showing the various parameter combinations accepted.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/writefile.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.writeFile(filePath, contents)\ncy.writeFile(filePath, contents, encoding)\ncy.writeFile(filePath, contents, options)\ncy.writeFile(filePath, contents, encoding, options)\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Report from Mochawesome JSON (Shell)\nDESCRIPTION: Creates an HTML report from the merged Mochawesome JSON file using marge.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/tooling/reporters.mdx#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nnpx marge mochawesome.json\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of nextUntil in Cypress\nDESCRIPTION: Demonstrates the correct way to use the nextUntil command by chaining it off a DOM element selector.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/nextuntil.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.get('div').nextUntil('.warning') // Yield siblings after 'div' until '.warning'\n```\n\n----------------------------------------\n\nTITLE: Grouping Test Runs by Browser - Chrome 70\nDESCRIPTION: Command to run and record Cypress tests in Chrome 70 browser as a grouped test run on Mac.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/features/smart-orchestration/parallelization.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncypress run --record --group Mac/Chrome-70 --browser chrome\n```\n\n----------------------------------------\n\nTITLE: Adding Icons in Cypress Documentation\nDESCRIPTION: Example of using the Icon component to add Font Awesome icons in the documentation.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Icon name=\"question-circle\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Long Paths on Windows via PowerShell (PowerShell)\nDESCRIPTION: This PowerShell command enables long file paths in Windows by setting the 'LongPathsEnabled' property in the system registry to 1. This is required to resolve errors related to exceeding the maximum Windows path length when unzipping Cypress or other applications. To use, run as an administrator in PowerShell; a system restart is required for the change to take effect. No external dependencies except administrative rights are needed.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/error-messages.mdx#2025-04-22_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-ItemProperty -Path \"HKLM:\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\FileSystem\" `\n  -Name \"LongPathsEnabled\" -Value 1 -PropertyType DWORD -Force\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Dev Server in Cypress Config - TypeScript\nDESCRIPTION: Illustrates creating a Cypress configuration file in TypeScript with a custom dev server function within the component configuration. This version uses ES module syntax and types the cypressConfig parameter for TypeScript type safety. The returned devServer object must provide a port and close method, and importing 'cypress' as a dependency is required.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_component-testing-config.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from 'cypress'\\n\\nexport default defineConfig({\\n  component: {\\n    devServer(cypressConfig: CypressConfiguration) {\\n      // return devServer instance or a promise that resolves to\\n      // a dev server here\\n      return {\\n        port: 1234,\\n        close: () => {},\\n      }\\n    },\\n  },\\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Webpack Configuration for React Component Testing\nDESCRIPTION: Example of importing a Webpack configuration file to be used with Cypress Component Testing in React applications.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/react/overview.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport webpackConfig from './webpack.config'\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Example of getAllLocalStorage\nDESCRIPTION: Demonstrates the proper way to use the getAllLocalStorage command in a Cypress test.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/getalllocalstorage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.getAllLocalStorage()\n```\n\n----------------------------------------\n\nTITLE: Basic getAllLocalStorage Syntax in Cypress\nDESCRIPTION: Shows the basic syntax options for calling the getAllLocalStorage command in Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/getalllocalstorage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncy.getAllLocalStorage()\ncy.getAllLocalStorage(options)\n```\n\n----------------------------------------\n\nTITLE: Querying Flake Rate Per Project API Endpoint\nDESCRIPTION: This API endpoint provides the rate of flaky tests per project (as opposed to just count), returning project name, flaky test count, pass test count, and flaky rate data.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/cloud/integrations/data-extract-api.mdx#2025-04-22_snippet_28\n\nLANGUAGE: http\nCODE:\n```\nhttps://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=flake-rate-per-project&export_format=csv&start_date=2025-03-01\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Cypress.Promise\nDESCRIPTION: Shows incorrect usage attempting to chain Promise off 'cy' object which will result in an error.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/promise.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew cy.Promise(...)  // Errors, cannot be chained off 'cy'\n```\n\n----------------------------------------\n\nTITLE: Opening Cypress via Yarn (Shell)\nDESCRIPTION: Executes the `cypress open` command using `yarn`. This command launches the Cypress Test Runner UI for interactive testing. Requires Node.js, Yarn, and Cypress to be installed in the project.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/partials/_cypress-open-commands.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn cypress open\n```\n\n----------------------------------------\n\nTITLE: Incorrect Cypress.Blob Usage Example\nDESCRIPTION: Demonstrates incorrect usage that will result in an error.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/utilities/blob.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.Blob.method() // Errors, cannot be chained off 'cy'\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of prevAll Command in Cypress\nDESCRIPTION: Examples of how not to use the prevAll command, showing common mistakes that will result in errors.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/prevall.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncy.prevAll() // Errors, cannot be chained off 'cy'\ncy.getCookies().prevAll() // Errors, 'getCookies' does not yield DOM element\n```\n\n----------------------------------------\n\nTITLE: Cypress Forced Early Test Termination\nDESCRIPTION: Example showing how forcing early test completion can cause errors with remaining commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/references/error-messages.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nit('but you can forcibly end the test early which does fail', (done) => {\n  cy.get('body')\n    .then(() => {\n      done()\n    })\n    .children()\n    .should('not.contain', 'foo')\n})\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of nextAll Command in Cypress\nDESCRIPTION: Shows examples of incorrect usage of the nextAll command, which cannot be chained directly off 'cy' or non-DOM yielding commands.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/nextall.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncy.nextAll() // Errors, cannot be chained off 'cy'\ncy.getCookies().nextAll() // Errors, 'getCookies' does not yield DOM element\n```\n\n----------------------------------------\n\nTITLE: Handling Unhandled Promise Rejections\nDESCRIPTION: Example demonstrating how to handle unhandled promise rejections in Cypress tests.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/catalog-of-events.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.on('uncaught:exception', (err, runnable, promise) => {\n  // when the exception originated from an unhandled promise\n  // rejection, the promise is provided as a third argument\n  // you can turn off failing the test in this case\n  if (promise) {\n    return false\n  }\n  // we still want to ensure there are no other unexpected\n  // errors, so we let them fail the test\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Screenshots on Test Failures in Cypress\nDESCRIPTION: Turns off the default behavior of automatically capturing screenshots when tests fail during 'cypress run'. This prevents Cypress from generating failure screenshots.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/cypress-api/screenshot-api.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nCypress.Screenshot.defaults({\n  screenshotOnRunFailure: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Example Return Value Structure\nDESCRIPTION: Shows the structure of the object returned by getAllLocalStorage when accessing multiple origins.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/getalllocalstorage.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  'https://example.cypress.io': {\n    key1: 'value1',\n  },\n  'https://www.cypress-dx.com': {\n    key2: 'value2',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Mixing of Sync/Async Code in Cypress\nDESCRIPTION: Example showing incorrect usage where synchronous code evaluates immediately before Cypress commands complete, leading to unexpected behavior.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/core-concepts/introduction-to-cypress.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nit('does not work as we expect', () => {\n  cy.visit('/my/resource/path') // Nothing happens yet\n\n  cy.get('.awesome-selector') // Still nothing happening\n    .click() // Nope, nothing\n\n  // Cypress.$ is synchronous, so evaluates immediately\n  // there is no element to find yet because\n  // the cy.visit() was only queued to visit\n  // and did not actually visit the application\n  let el = Cypress.$('.new-el') // evaluates immediately as []\n\n  if (el.length) {\n    // evaluates immediately as 0\n    cy.get('.another-selector')\n  } else {\n    // this will always run\n    // because the 'el.length' is 0\n    // when the code executes\n    cy.get('.optional-selector')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress Component Testing with Svelte and Webpack\nDESCRIPTION: Configuration example for setting up Cypress Component Testing with Svelte using Webpack as the bundler. This includes importing a webpack configuration file and specifying the framework as 'svelte' and bundler as 'webpack'.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/app/component-testing/svelte/overview.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport webpackConfig from './webpack.config'\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  component: {\n    devServer: {\n      framework: 'svelte',\n      bundler: 'webpack',\n      // optionally pass in webpack config\n      webpackConfig,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Paragraph Elements for Testing in Cypress\nDESCRIPTION: Sample HTML code containing multiple paragraph elements with different classes that will be used in a complex assertion example.\nSOURCE: https://github.com/cypress-io/cypress-documentation/blob/main/docs/api/commands/and.mdx#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <p class=\"text-primary\">Hello World</p>\n  <p class=\"text-danger\">You have an error</p>\n  <p class=\"text-default\">Try again later</p>\n</div>\n```"
  }
]