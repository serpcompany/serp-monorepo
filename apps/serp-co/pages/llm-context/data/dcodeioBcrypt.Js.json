[
  {
    "owner": "dcodeio",
    "repo": "bcrypt.js",
    "content": "TITLE: Asynchronous Password Verification with Promises\nDESCRIPTION: Demonstrates how to verify a password against a stored hash using Promises with bcrypt.js.\nSOURCE: https://github.com/dcodeio/bcrypt.js/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Load hash from your password DB\nawait bcrypt.compare(\"B4c0/\\\\/\", hash); // true\nawait bcrypt.compare(\"not_bacon\", hash); // false\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Password Hashing with Promises\nDESCRIPTION: Demonstrates how to generate a salt and hash a password asynchronously using Promises with bcrypt.js.\nSOURCE: https://github.com/dcodeio/bcrypt.js/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst salt = await bcrypt.genSalt(10);\nconst hash = await bcrypt.hash(\"B4c0/\\\\/\", salt);\n// Store hash in your password DB\n```\n\n----------------------------------------\n\nTITLE: One-Step Asynchronous Password Hashing with Promises\nDESCRIPTION: Demonstrates how to generate a salt and hash a password in a single step using the Promise-based hash method with a rounds parameter.\nSOURCE: https://github.com/dcodeio/bcrypt.js/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait bcrypt.hash(\"B4c0/\\\\/\", 10);\n// Store hash in your password DB\n```\n\n----------------------------------------\n\nTITLE: Synchronous Password Verification with bcrypt.js\nDESCRIPTION: Demonstrates how to verify a password against a stored hash using the synchronous comparison method.\nSOURCE: https://github.com/dcodeio/bcrypt.js/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Load hash from your password DB\nbcrypt.compareSync(\"B4c0/\\\\/\", hash); // true\nbcrypt.compareSync(\"not_bacon\", hash); // false\n```\n\n----------------------------------------\n\nTITLE: One-Step Synchronous Password Hashing with bcrypt.js\nDESCRIPTION: Shows how to generate a salt and hash a password in a single step using the hashSync method with a rounds parameter instead of a pre-generated salt.\nSOURCE: https://github.com/dcodeio/bcrypt.js/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = bcrypt.hashSync(\"bacon\", 10);\n```\n\n----------------------------------------\n\nTITLE: Synchronous Password Hashing with bcrypt.js\nDESCRIPTION: Shows how to generate a salt and hash a password synchronously using bcrypt.js. The salt generation uses 10 rounds of hashing for security.\nSOURCE: https://github.com/dcodeio/bcrypt.js/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst salt = bcrypt.genSaltSync(10);\nconst hash = bcrypt.hashSync(\"B4c0/\\\\/\", salt);\n// Store hash in your password DB\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Password Hashing with Callbacks\nDESCRIPTION: Shows how to generate a salt and hash a password asynchronously using callback functions with bcrypt.js.\nSOURCE: https://github.com/dcodeio/bcrypt.js/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nbcrypt.genSalt(10, (err, salt) => {\n  bcrypt.hash(\"B4c0/\\\\/\", salt, function (err, hash) {\n    // Store hash in your password DB\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Password Verification with Callbacks\nDESCRIPTION: Shows how to verify a password against a stored hash using callback functions with bcrypt.js.\nSOURCE: https://github.com/dcodeio/bcrypt.js/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Load hash from your password DB\nbcrypt.compare(\"B4c0/\\\\/\", hash, (err, res) => {\n  // res === true\n});\nbcrypt.compare(\"not_bacon\", hash, (err, res) => {\n  // res === false\n});\n```\n\n----------------------------------------\n\nTITLE: One-Step Asynchronous Password Hashing with Callbacks\nDESCRIPTION: Shows how to generate a salt and hash a password in a single step using the callback-based hash method with a rounds parameter.\nSOURCE: https://github.com/dcodeio/bcrypt.js/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nbcrypt.hash(\"B4c0/\\\\/\", 10, (err, hash) => {\n  // Store hash in your password DB\n});\n```\n\n----------------------------------------\n\nTITLE: Installing bcrypt.js using npm\nDESCRIPTION: Command to install the bcrypt.js package using npm.\nSOURCE: https://github.com/dcodeio/bcrypt.js/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$> npm install bcryptjs\n```\n\n----------------------------------------\n\nTITLE: Importing bcrypt.js in TypeScript/JavaScript\nDESCRIPTION: Demonstrates how to import the bcrypt.js module using ES modules syntax.\nSOURCE: https://github.com/dcodeio/bcrypt.js/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport bcrypt from \"bcryptjs\";\n```\n\n----------------------------------------\n\nTITLE: Command Line Usage for bcrypt.js\nDESCRIPTION: Example of the command line interface syntax for bcrypt.js showing how to hash an input with optional rounds or salt parameters.\nSOURCE: https://github.com/dcodeio/bcrypt.js/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nUsage: bcrypt <input> [rounds|salt]\n```\n\n----------------------------------------\n\nTITLE: Running Tests for bcrypt.js\nDESCRIPTION: Command to run the test suite for bcrypt.js to ensure functionality is working correctly.\nSOURCE: https://github.com/dcodeio/bcrypt.js/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$> npm test\n```\n\n----------------------------------------\n\nTITLE: Building the UMD Fallback for bcrypt.js\nDESCRIPTION: Command to build the UMD (Universal Module Definition) fallback version of bcrypt.js for environments that don't support ES modules.\nSOURCE: https://github.com/dcodeio/bcrypt.js/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$> npm run build\n```"
  }
]