[
  {
    "owner": "vitalik",
    "repo": "django-ninja",
    "content": "TITLE: Defining a Schema Class for Complex Data Models in Django Ninja\nDESCRIPTION: Illustrates how to create a Schema class for defining complex data models in Django Ninja. This example defines an Item model with string and float attributes.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/index.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Item(Schema):\n    foo: str\n    bar: float\n\ndef operation(a: Item):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Session-based Authentication in Django Ninja\nDESCRIPTION: This snippet demonstrates how to use Django's session-based authentication in a Django Ninja API endpoint. It requires the user to be authenticated to access the 'pets' endpoint.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/authentication.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI\nfrom ninja.security import django_auth\n\napi = NinjaAPI()\n\n@api.get(\"/pets\", auth=django_auth)\ndef pets(request):\n    return {\"pets\": [\"Fluffy\", \"Fido\"]}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple API Endpoint with Django Ninja\nDESCRIPTION: Demonstrates how to set up a basic API endpoint using Django Ninja. It includes importing NinjaAPI, creating an API instance, defining a function for addition, and registering the URL patterns.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/index.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI\nfrom django.urls import path\n\napi = NinjaAPI()\n\n@api.get(\"/add\")\ndef add(request, a: int, b: int):\n    return {\"result\": a + b}\n\nurlpatterns = [\n    path(\"api/\", api.urls),  # 'api/' is added as a prefix to all API urls\n]\n```\n\n----------------------------------------\n\nTITLE: Using Schema for Query Parameters in Django Ninja\nDESCRIPTION: This example demonstrates how to use a Pydantic model (Schema) to encapsulate query parameters. The WeaponsFilter schema defines the structure and types of the query parameters, which are then used in the API endpoint.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/query-params.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass WeaponsFilter(Schema):\n    offset: int = 0\n    limit: int = 10\n    q: str = None\n\n@api.get(\"/weapons\")\ndef list_weapons(request, filters: WeaponsFilter = Query(...)):\n    return weapons.filter(**filters.dict())\n```\n\n----------------------------------------\n\nTITLE: Using Schema in a Django Ninja Endpoint\nDESCRIPTION: Shows how to use the Schema model as a parameter in a route function. Django Ninja will automatically parse and validate the JSON request body according to the Schema definition.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/body.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nfrom ninja import Schema, Router\n\n\nclass Item(Schema):\n    name: str\n    description: str = None\n    price: float\n    quantity: int\n\n\nrouter = Router()\n\n\n@router.post(\"/items\")\ndef create_item(request, item: Item):\n    return {\"item\": item.dict()}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Schema Class\nDESCRIPTION: Defines a basic schema class for the Person model with a name field.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/index.md#2025-04-08_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass PersonSchema(Schema):\n    name: str\n```\n\n----------------------------------------\n\nTITLE: Complete CRUD Implementation for Employee Model\nDESCRIPTION: Full implementation of CRUD operations for the Employee model using Django Ninja. It includes schema definitions, endpoints for creating, retrieving, updating, and deleting employees, with proper request validation and response formatting.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/other/crud.md#2025-04-08_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nfrom typing import List\nfrom ninja import NinjaAPI, Schema\nfrom django.shortcuts import get_object_or_404\nfrom employees.models import Employee\n\n\napi = NinjaAPI()\n\n\nclass EmployeeIn(Schema):\n    first_name: str\n    last_name: str\n    department_id: int = None\n    birthdate: date = None\n\n\nclass EmployeeOut(Schema):\n    id: int\n    first_name: str\n    last_name: str\n    department_id: int = None\n    birthdate: date = None\n\n\n@api.post(\"/employees\")\ndef create_employee(request, payload: EmployeeIn):\n    employee = Employee.objects.create(**payload.dict())\n    return {\"id\": employee.id}\n\n\n@api.get(\"/employees/{employee_id}\", response=EmployeeOut)\ndef get_employee(request, employee_id: int):\n    employee = get_object_or_404(Employee, id=employee_id)\n    return employee\n\n\n@api.get(\"/employees\", response=List[EmployeeOut])\ndef list_employees(request):\n    qs = Employee.objects.all()\n    return qs\n\n\n@api.put(\"/employees/{employee_id}\")\ndef update_employee(request, employee_id: int, payload: EmployeeIn):\n    employee = get_object_or_404(Employee, id=employee_id)\n    for attr, value in payload.dict().items():\n        setattr(employee, attr, value)\n    employee.save()\n    return {\"success\": True}\n\n\n@api.delete(\"/employees/{employee_id}\")\ndef delete_employee(request, employee_id: int):\n    employee = get_object_or_404(Employee, id=employee_id)\n    employee.delete()\n    return {\"success\": True}\n```\n\n----------------------------------------\n\nTITLE: ORM Integration with Django Ninja Schema\nDESCRIPTION: Demonstrates how Django Ninja integrates with the Django ORM to easily serialize querysets and ORM objects using Schema classes, simplifying API response handling.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/motivation.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/tasks\", response=List[TaskSchema])\ndef tasks(request):\n    return Task.objects.all()\n\n\n@api.get(\"/tasks\", response=TaskSchema)\ndef tasks_details(request):\n    task = Task.objects.first()\n    return task\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Method Operations in Django Ninja\nDESCRIPTION: This snippet demonstrates how to use Django Ninja decorators for different HTTP methods (GET, POST, PUT, DELETE, PATCH). Each decorator is applied to a function that handles the respective HTTP method for a specific path.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/operations.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/path\")\ndef get_operation(request):\n    ...\n\n@api.post(\"/path\")\ndef post_operation(request):\n    ...\n\n@api.put(\"/path\")\ndef put_operation(request):\n    ...\n\n@api.delete(\"/path\")\ndef delete_operation(request):\n    ...\n\n@api.patch(\"/path\")\ndef patch_operation(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining Basic FilterSchema Class in Django Ninja\nDESCRIPTION: Shows how to create a basic FilterSchema class with optional fields for filtering books by name, author and creation date.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/filtering.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import FilterSchema, Field\nfrom typing import Optional\n\n\nclass BookFilterSchema(FilterSchema):\n    name: Optional[str] = None\n    author: Optional[str] = None\n    created_after: Optional[datetime] = None\n```\n\n----------------------------------------\n\nTITLE: Advanced Filter Query with Q Expressions\nDESCRIPTION: Shows how to combine custom Q expressions with FilterSchema filtering for more complex queries.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/filtering.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/books\")\ndef list_books(request, filters: BookFilterSchema = Query(...)):\n\n    # Never serve books from inactive publishers and authors\n    q = Q(author__is_active=True) | Q(publisher__is_active=True)\n    \n    # But allow filtering the rest of the books\n    q &= filters.get_filter_expression()\n    return Book.objects.filter(q)\n```\n\n----------------------------------------\n\nTITLE: Mixing Synchronous and Asynchronous API Operations in Django Ninja\nDESCRIPTION: Example showing how to implement both synchronous and asynchronous API operations in the same Django Ninja application. Django Ninja automatically routes requests to the appropriate handler.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/async-support.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/say-sync\")\ndef say_after_sync(request, delay: int, word: str):\n    time.sleep(delay)\n    return {\"saying\": word}\n\n@api.get(\"/say-async\")\nasync def say_after_async(request, delay: int, word: str):\n    await asyncio.sleep(delay)\n    return {\"saying\": word}\n```\n\n----------------------------------------\n\nTITLE: Basic User Schema Definition in Django Ninja\nDESCRIPTION: Demonstrates creation of input and output schemas for user management using Django Ninja Schema class. Shows separation of input (username/password) and output (id/username) fields.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/index.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import Schema\n\nclass UserIn(Schema):\n    username: str\n    password: str\n\n\n@api.post(\"/users/\")\ndef create_user(request, data: UserIn):\n    user = User(username=data.username) # User is django auth.User\n    user.set_password(data.password)\n    user.save()\n    # ... return ?\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Exception Handler in Django Ninja\nDESCRIPTION: This snippet demonstrates how to create a custom exception handler for a ServiceUnavailableError in Django Ninja. It shows the process of defining an exception, creating a handler, and using it in an API endpoint.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/errors.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napi = NinjaAPI()\n\nclass ServiceUnavailableError(Exception):\n    pass\n\n\n# initializing handler\n\n@api.exception_handler(ServiceUnavailableError)\ndef service_unavailable(request, exc):\n    return api.create_response(\n        request,\n        {\"message\": \"Please retry later\"},\n        status=503,\n    )\n\n\n# some logic that throws exception\n\n@api.get(\"/service\")\ndef some_operation(request):\n    if random.choice([True, False]):\n        raise ServiceUnavailableError()\n    return {\"message\": \"Hello\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Key Authentication in Query Parameter for Django Ninja\nDESCRIPTION: This snippet demonstrates how to implement API key authentication using a query parameter in Django Ninja. It checks for a valid API key in the 'api_key' query parameter.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/authentication.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja.security import APIKeyQuery\n\nclass ApiKey(APIKeyQuery):\n    param_name = \"api_key\"\n\n    def authenticate(self, request, key):\n        if key == \"supersecret\":\n            return key\n\n\napi = NinjaAPI(auth=ApiKey())\n\n@api.get(\"/someop\")\ndef someop(request):\n    return {\"token\": request.auth}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default ValidationError Handler in Django Ninja\nDESCRIPTION: This snippet shows how to override the default exception handler for ValidationError in Django Ninja. It customizes the response for validation errors, returning a simple HTTP response instead of the default JSON format.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/errors.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja.errors import ValidationError\n...\n\n@api.exception_handler(ValidationError)\ndef validation_errors(request, exc):\n    return HttpResponse(\"Invalid input\", status=422)\n```\n\n----------------------------------------\n\nTITLE: Creating Separate APIs for Different Business Components\nDESCRIPTION: Demonstrates creating different API instances for public and private functionality with different authentication methods. This snippet shows how to configure multiple API instances with different authentication mechanisms and namespace configurations.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/versioning.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n...\n\n\napi = NinjaAPI(auth=token_auth, urls_namespace='public_api')\n...\n\napi_private = NinjaAPI(auth=session_auth, urls_namespace='private_api')\n...\n\n\nurlpatterns = [\n    ...\n    path('api/', api.urls),\n    path('internal-api/', api_private.urls),\n]\n\n```\n\n----------------------------------------\n\nTITLE: Handling Single File Upload in Django Ninja\nDESCRIPTION: This snippet demonstrates how to handle a single file upload using Django Ninja. It uses the File and UploadedFile classes to process the uploaded file and return its name and size.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/file-params.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI, File\nfrom ninja.files import UploadedFile\n\n@api.post(\"/upload\")\ndef upload(request, file: File[UploadedFile]):\n    data = file.read()\n    return {'name': file.name, 'len': len(data)}\n```\n\n----------------------------------------\n\nTITLE: Using Form for Parameter Type Annotation in Django Ninja\nDESCRIPTION: Illustrates how to use the Form class as a type annotation for parameters in a Django Ninja API endpoint, specifically for a username field.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/form-params.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nusername: Form[str]\n```\n\n----------------------------------------\n\nTITLE: Combining Routers in Main API Instance for Django Ninja\nDESCRIPTION: Demonstrates how to create the main NinjaAPI instance and include multiple routers from different apps. It shows different ways to add routers, including as objects and by Python path.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/routers.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI\nfrom events.api import router as events_router\n\napi = NinjaAPI()\n\napi.add_router(\"/events/\", events_router)    # You can add a router as an object\napi.add_router(\"/news/\", \"news.api.router\")  #   or by Python path\napi.add_router(\"/blogs/\", \"blogs.api.router\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Temporal Response Object in Django-Ninja\nDESCRIPTION: Demonstrates how to override the default temporal response object creation in Django-Ninja by extending the NinjaAPI.create_temporal_response method.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/temporal_response.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    def create_temporal_response(self, request: HttpRequest) -> HttpResponse:\n        response = super().create_temporal_response(request)\n        # Do your magic here...\n        return response\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Expression Filtering\nDESCRIPTION: Shows how to implement custom filtering logic using the custom_expression method in FilterSchema.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/filtering.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass BookFilterSchema(FilterSchema):\n    name: Optional[str] = None\n    popular: Optional[bool] = None\n\n    def custom_expression(self) -> Q:\n        q = Q()\n        if self.name:\n            q &= Q(name__icontains=self.name)\n        if self.popular:\n            q &= (\n                Q(view_count__gt=1000) |\n                Q(downloads__gt=100) |\n                Q(tag='popular')\n            )\n        return q\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Authenticators in Django Ninja\nDESCRIPTION: This snippet demonstrates how to use multiple authenticators in Django Ninja. It checks for either a valid API key in the query parameter or a valid key in the header.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/authentication.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI\nfrom ninja.security import APIKeyQuery, APIKeyHeader\n\nclass QueryAuth(APIKeyQuery):\n    def authenticate(self, request, key):\n        if key == \"foo\":\n            return key\n\nclass HeaderAuth(APIKeyHeader):\n    def authenticate(self, request, key):\n        if key == \"bar\":\n            return key\n\napi = NinjaAPI()\n\n@api.get(\"/multiple\", auth=[QueryAuth(), HeaderAuth()])\ndef multiple(request):\n    return {\"auth\": request.auth}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redoc for Django Ninja API Documentation\nDESCRIPTION: This snippet demonstrates how to switch the API documentation viewer to Redoc in Django Ninja. It imports the Redoc class and initializes the NinjaAPI with Redoc as the documentation viewer.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/api-docs.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import Redoc\n\napi = NinjaAPI(docs=Redoc())\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Pagination Parameters in View Functions\nDESCRIPTION: Demonstrates how to access the pagination input parameters within a view function using the pass_parameter argument, allowing access to pagination metadata like current page.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/pagination.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/someview\")\n@paginate(pass_parameter=\"pagination_info\")\ndef someview(request, **kwargs):\n    page = kwargs[\"pagination_info\"].page\n    return ...\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Headers in Test Requests\nDESCRIPTION: Example of setting custom headers for API testing, both during TestClient instantiation and for individual requests.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/testing.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n    client = TestClient(router, headers={\"A\": \"a\", \"B\": \"b\"})\n    # The request will be made with {\"A\": \"na\", \"B\": \"b\", \"C\": \"nc\"} headers\n    response = client.get(\"/test-headers\", headers={\"A\": \"na\", \"C\": \"nc\"})\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Routing for Multiple API Versions\nDESCRIPTION: Sets up URL routing for different API versions in Django's urls.py. This snippet shows how to import API instances from separate files and configure URL patterns to make each version accessible through a unique URL path.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/versioning.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n...\nfrom api_v1 import api as api_v1\nfrom api_v2 import api as api_v2\n\n\nurlpatterns = [\n    ...\n    path('api/v1/', api_v1.urls),\n    path('api/v2/', api_v2.urls),\n]\n\n```\n\n----------------------------------------\n\nTITLE: Combining Request Body with Path Parameters\nDESCRIPTION: Demonstrates how to combine path parameters with request body Schema in a single endpoint. Django Ninja automatically recognizes which parameters come from the path and which from the request body.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/body.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import Schema, Router\n\n\nclass Item(Schema):\n    name: str\n    description: str = None\n    price: float\n    quantity: int\n\n\nrouter = Router()\n\n\n@router.post(\"/items/{item_id}\")\ndef update_item(request, item_id: int, item: Item):\n    return {\"item_id\": item_id, \"item\": item.dict()}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of QuerySets with sync_to_async\nDESCRIPTION: Example showing the incorrect way to handle Django QuerySets with sync_to_async, which will throw an error due to lazy evaluation.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/async-support.md#2025-04-08_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nall_blogs = await sync_to_async(Blog.objects.all)()\n# it will throw an error later when you try to iterate over all_blogs\n...\n```\n\n----------------------------------------\n\nTITLE: Automatic CSRF Protection with Cookie Authentication\nDESCRIPTION: Demonstrates how Django Ninja automatically enables CSRF protection when using cookie-based authentication methods. This example shows a custom APIKeyCookie implementation.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/reference/csrf.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI\nfrom ninja.security import APIKeyCookie\n\nclass CookieAuth(APIKeyCookie):\n    def authenticate(self, request, key):\n        return key == \"test\"\n\napi = NinjaAPI(auth=CookieAuth())\n```\n\n----------------------------------------\n\nTITLE: Combining Request Body with Path and Query Parameters\nDESCRIPTION: Shows how to use all three parameter types (path, query, and body) in a single endpoint. Django Ninja determines the source of each parameter based on its type declaration.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/body.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import Schema, Router\n\n\nclass Item(Schema):\n    name: str\n    description: str = None\n    price: float\n    quantity: int\n\n\nrouter = Router()\n\n\n@router.post(\"/items/{item_id}\")\ndef update_item(request, item_id: int, item: Item, q: str = None):\n    result = {\"item_id\": item_id, \"item\": item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Pagination with Django Ninja\nDESCRIPTION: Demonstrates how to apply basic pagination to a view function using the paginate decorator. This enables limit and offset query parameters on the endpoint to control the number of results returned.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/pagination.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja.pagination import paginate\n\n@api.get('/users', response=List[UserSchema])\n@paginate\ndef list_users(request):\n    return User.objects.all()\n```\n\n----------------------------------------\n\nTITLE: Using PageNumberPagination in Django Ninja\nDESCRIPTION: Demonstrates the PageNumberPagination class which uses a page parameter instead of limit/offset. This pagination style returns a fixed number of results per page with page-based navigation.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/pagination.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja.pagination import paginate, PageNumberPagination\n\n@api.get('/users', response=List[UserSchema])\n@paginate(PageNumberPagination)\ndef list_users(request):\n    return User.objects.all()\n```\n\n----------------------------------------\n\nTITLE: Customizing Validation Error Handling in Django Ninja\nDESCRIPTION: This snippet demonstrates how to create a custom NinjaAPI subclass to provide more control over validation errors. It allows for detailed customization of error messages based on the schema and context of the validation failure.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/errors.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja.errors import ValidationError, ValidationErrorContext\nfrom typing import Any, Dict, List\n\nclass CustomNinjaAPI(NinjaAPI):\n    def validation_error_from_error_contexts(\n        self, error_contexts: List[ValidationErrorContext],\n    ) -> ValidationError:\n        custom_error_infos: List[Dict[str, Any]] = []\n        for context in error_contexts:\n            model = context.model\n            pydantic_schema = model.__pydantic_core_schema__\n            param_source = model.__ninja_param_source__\n            for e in context.pydantic_validation_error.errors(\n                include_url=False, include_context=False, include_input=False\n            ):\n                custom_error_info = {\n                # TODO: use `e`, `param_source`, and `pydantic_schema` as desired\n                }\n                custom_error_infos.append(custom_error_info)\n        return ValidationError(custom_error_infos)\n\napi = CustomNinjaAPI()\n```\n\n----------------------------------------\n\nTITLE: Creating API Version 2 in Django Ninja\nDESCRIPTION: Creates a version 2.0.0 API instance with a hello endpoint. Similar to the version 1 example, this snippet shows how to create a separate API instance with a different version number.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/versioning.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI\n\n\napi = NinjaAPI(version='2.0.0')\n\n@api.get('/hello')\ndef hello(request):\n    return {'message': 'Hello from V2'}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Routers in Django Ninja\nDESCRIPTION: Shows how to create and use nested routers in Django Ninja. It demonstrates adding routers to other routers and finally to the main API instance, creating a hierarchical structure of endpoints.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/routers.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.urls import path\nfrom ninja import NinjaAPI, Router\n\napi = NinjaAPI()\n\nfirst_router = Router()\nsecond_router = Router()\nthird_router = Router()\n\n\n@api.get(\"/add\")\ndef add(request, a: int, b: int):\n    return {\"result\": a + b}\n\n\n@first_router.get(\"/add\")\ndef add(request, a: int, b: int):\n    return {\"result\": a + b}\n\n\n@second_router.get(\"/add\")\ndef add(request, a: int, b: int):\n    return {\"result\": a + b}\n\n\n@third_router.get(\"/add\")\ndef add(request, a: int, b: int):\n    return {\"result\": a + b}\n\n\nsecond_router.add_router(\"l3\", third_router)\nfirst_router.add_router(\"l2\", second_router)\napi.add_router(\"l1\", first_router)\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"api/\", api.urls),\n]\n```\n\n----------------------------------------\n\nTITLE: Testing Django Ninja API with TestClient\nDESCRIPTION: Example of creating a Django test case that uses the TestClient to test an API endpoint, verifying the status code and JSON response content.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/testing.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.test import TestCase\nfrom ninja.testing import TestClient\n\nclass HelloTest(TestCase):\n    def test_hello(self):\n        # don't forget to import router from code above\n        client = TestClient(router)\n        response = client.get(\"/hello\")\n        \n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.json(), {\"msg\": \"Hello World\"})\n```\n\n----------------------------------------\n\nTITLE: Implementing API Key Authentication in Header for Django Ninja\nDESCRIPTION: This example shows how to implement API key authentication using a header in Django Ninja. It checks for a valid API key in the 'X-API-Key' header.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/authentication.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja.security import APIKeyHeader\n\napi = NinjaAPI(auth=APIKeyHeader())\n```\n\n----------------------------------------\n\nTITLE: Using Django 4.1+ Async ORM Interface\nDESCRIPTION: Example showing how to use Django 4.1's native async ORM interface with the 'aget' method, eliminating the need for sync_to_async in many cases.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/async-support.md#2025-04-08_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/blog/{post_id}\")\nasync def search(request, post_id: int):\n    blog = await Blog.objects.aget(pk=post_id)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Throttling in Django Ninja\nDESCRIPTION: Configures global throttling limits where unauthenticated users are limited to 10 requests per second and authenticated users to 100 requests per second using AnonRateThrottle and AuthRateThrottle.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/throttling.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja.throttling import AnonRateThrottle, AuthRateThrottle\n\napi = NinjaAPI(\n    throttle=[\n        AnonRateThrottle('10/s'),\n        AuthRateThrottle('100/s'),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting an Employee\nDESCRIPTION: DELETE endpoint that removes an employee from the database. It finds the employee by ID using get_object_or_404 and then calls the delete method on the retrieved object.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/other/crud.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@api.delete(\"/employees/{employee_id}\")\ndef delete_employee(request, employee_id: int):\n    employee = get_object_or_404(Employee, id=employee_id)\n    employee.delete()\n    return {\"success\": True}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Example for Addition API\nDESCRIPTION: Shows the expected JSON response format when calling the addition API endpoint.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/index.md#2025-04-08_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"result\": 3}\n```\n\n----------------------------------------\n\nTITLE: Using sync_to_async with Django ORM in Async Views - Method 1\nDESCRIPTION: Example showing how to safely use Django ORM in async views by wrapping ORM operations with sync_to_async. This approach creates a dedicated async function for database operations.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/async-support.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom asgiref.sync import sync_to_async\n\n@sync_to_async\ndef get_blog(post_id):\n    return Blog.objects.get(pk=post_id)\n\n@api.get(\"/blog/{post_id}\")\nasync def search(request, post_id: int):\n    blog = await get_blog(post_id)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom YAML Parser for Django Ninja\nDESCRIPTION: Implementation of a custom YAML parser by extending the ninja.parser.Parser class and overriding the parse_body method. The example includes a complete working implementation with a schema and endpoint.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/request-parsers.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport yaml\nfrom typing import List\nfrom ninja import NinjaAPI\nfrom ninja.parser import Parser\n\n\nclass MyYamlParser(Parser):\n    def parse_body(self, request):\n        return yaml.safe_load(request.body)\n\n\napi = NinjaAPI(parser=MyYamlParser())\n\n\nclass Payload(Schema):\n    ints: List[int]\n    string: str\n    f: float\n\n\n@api.post('/yaml')\ndef operation(request, payload: Payload):\n    return payload.dict()\n\n\n```\n\n----------------------------------------\n\nTITLE: Custom Throttle Implementation\nDESCRIPTION: Shows how to create a custom throttle by extending AnonRateThrottle to exclude GET requests from throttling restrictions.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/throttling.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja.throttling import AnonRateThrottle\n\nclass NoReadsThrottle(AnonRateThrottle):\n    \"\"\"Do not throttle GET requests\"\"\"\n    \n    def allow_request(self, request):\n        if request.method == \"GET\":\n            return True\n        return super().allow_request(request)\n```\n\n----------------------------------------\n\nTITLE: Task Model Definition with User Foreign Key\nDESCRIPTION: Defines a Django model for tasks with a foreign key relationship to User model.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/index.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\nclass Task(models.Model):\n    title = models.CharField(max_length=200)\n    is_completed = models.BooleanField(default=False)\n    owner = models.ForeignKey(\"auth.User\", null=True, blank=True)\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Files with Extra Info in Django Ninja\nDESCRIPTION: This snippet shows how to handle multiple file uploads along with additional form data in Django Ninja. It processes a list of UploadedFile objects alongside user details.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/file-params.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@api.post('/users')\ndef create_user(request, details: Form[UserDetails], files: File[list[UploadedFile]]):\n    return [details.dict(), [f.name for f in files]]\n```\n\n----------------------------------------\n\nTITLE: Protecting API Documentation with Authentication in Django Ninja\nDESCRIPTION: This code demonstrates how to protect the API documentation with authentication in Django Ninja. It uses the 'staff_member_required' decorator to restrict access to staff members only.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/api-docs.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.admin.views.decorators import staff_member_required\n\napi = NinjaAPI(docs_decorator=staff_member_required)\n\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Response Types in Django Ninja\nDESCRIPTION: This snippet demonstrates how to handle multiple response types in Django Ninja. It defines separate schemas for authenticated users and errors, and uses a dictionary to specify different response types based on HTTP status codes.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/step3.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass UserSchema(Schema):\n    username: str\n    email: str\n    first_name: str\n    last_name: str\n\nclass Error(Schema):\n    message: str\n\n@api.get(\"/me\", response={200: UserSchema, 403: Error})\ndef me(request):\n    if not request.user.is_authenticated:\n        return 403, {\"message\": \"Please sign in first\"}\n    return request.user\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies\nDESCRIPTION: Command to install all development and testing dependencies using Flit with symlink option.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/CONTRIBUTING.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflit install --deps develop --symlink\n```\n\n----------------------------------------\n\nTITLE: Router-Level Throttling Configuration\nDESCRIPTION: Demonstrates how to apply throttling at the router level by passing the throttle argument to add_router function, limiting anonymous users to 100 requests per minute.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/throttling.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napi = NinjaAPI()\n...\n\napi.add_router('/sensitive', 'myapp.api.router', throttle=AnonRateThrottle('100/m'))\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Function Authentication in Django Ninja\nDESCRIPTION: This example shows how to use a custom function for authentication in Django Ninja. The function checks if the request has a 'token' parameter with the value 'secret'.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/authentication.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef key_auth(request):\n    token = request.GET.get(\"token\") or request.headers.get(\"Authorization\")\n    if token == \"secret\":\n        return token\n\n@api.get(\"/protected\", auth=key_auth)\ndef protected(request):\n    return {\"hello\": \"world\"}\n```\n\n----------------------------------------\n\nTITLE: Testing with Authenticated Users\nDESCRIPTION: Example of setting a user for an authenticated request in API testing.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/testing.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n    user = User.objects.create(...)\n    client = TestClient(router)\n    # The request will be made with user logged in\n    response = client.get(\"/test-with-user\", user=user)\n```\n\n----------------------------------------\n\nTITLE: Handling Optional File Upload in Django Ninja\nDESCRIPTION: This snippet demonstrates how to handle an optional file upload in Django Ninja. It uses a default value of None for the file parameter to make it optional.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/file-params.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@api.post('/users')\ndef create_user(request, details: Form[UserDetails], avatar: File[UploadedFile] = None):\n    user = add_user_to_database(details)\n    if avatar is not None:\n        set_user_avatar(user)\n```\n\n----------------------------------------\n\nTITLE: Testing Async API Operations\nDESCRIPTION: Example of using the TestAsyncClient for testing asynchronous API endpoints in Django Ninja.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/testing.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja.testing import TestAsyncClient\n\nclient = TestAsyncClient(router)\nresponse = await client.post(\"/test/\")\n```\n\n----------------------------------------\n\nTITLE: Throwing HTTP Responses with Exceptions in Django Ninja\nDESCRIPTION: This snippet illustrates how to throw an HTTP exception that results in a specific HTTP response. It uses the HttpError class to raise a 503 Service Unavailable error with a custom message.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/errors.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja.errors import HttpError\n\n@api.get(\"/some/resource\")\ndef some_operation(request):\n    if True:\n        raise HttpError(503, \"Service Unavailable. Please retry later.\")\n```\n\n----------------------------------------\n\nTITLE: Starting a Django Project with Uvicorn ASGI Server\nDESCRIPTION: Command to start a Django project using Uvicorn ASGI server with the reload flag for development purposes.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/async-support.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuvicorn your_project.asgi:application --reload\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Employee\nDESCRIPTION: GET endpoint that retrieves a single employee by ID. It uses get_object_or_404 to find the employee and returns the ORM object directly, which Django Ninja automatically converts to JSON based on the response schema.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/other/crud.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/employees/{employee_id}\", response=EmployeeOut)\ndef get_employee(request, employee_id: int):\n    employee = get_object_or_404(Employee, id=employee_id)\n    return employee\n```\n\n----------------------------------------\n\nTITLE: Combining Form Data with Path and Query Parameters in Django Ninja\nDESCRIPTION: Shows how to use form data in combination with other parameter sources like path and query parameters in a Django Ninja API endpoint.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/form-params.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n{!./src/tutorial/form/code02.py!}\n```\n\n----------------------------------------\n\nTITLE: Defining create_schema Function Signature in Python\nDESCRIPTION: Function signature showing all available parameters for create_schema, including model, name, depth, fields, exclude, optional_fields, and custom_fields options.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/django-pydantic-create-schema.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef create_schema(\n    model, # django model\n    name = \"\", # name for the generated class, if empty model names is used\n    depth = 0, # if > 0 schema will also be created for the nested ForeignKeys and Many2Many (with the provided depth of lookup)\n    fields: list[str] = None, # if passed - ONLY these fields will added to schema\n    exclude: list[str] = None, # if passed - these fields will be excluded from schema\n    optional_fields: list[str] | str = None, # if passed - these fields will not be required on schema (use '__all__' to mark ALL fields required)\n    custom_fields: list[tuple(str, Any, Any)] = None, # if passed - this will override default field types (or add new fields)\n)\n```\n\n----------------------------------------\n\nTITLE: Multiple Response Schemas Implementation\nDESCRIPTION: Demonstrates handling multiple response schemas for different HTTP status codes in an API endpoint.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/index.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass Token(Schema):\n    token: str\n    expires: date\n\nclass Message(Schema):\n    message: str\n\n\n@api.post('/login', response={200: Token, 401: Message, 402: Message})\ndef login(request, payload: Auth):\n    if auth_not_valid:\n        return 401, {'message': 'Unauthorized'}\n    if negative_balance:\n        return 402, {'message': 'Insufficient balance amount. Please proceed to a payment page.'}\n    return 200, {'token': xxx, ...}\n```\n\n----------------------------------------\n\nTITLE: Mapping Empty Form Fields to Defaults in Django Ninja\nDESCRIPTION: Demonstrates how to handle empty form fields and map them to default values using Generic Classes as Types from Pydantic in Django Ninja.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/form-params.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n{!./src/tutorial/form/code03.py!}\n```\n\n----------------------------------------\n\nTITLE: Installing Django Ninja\nDESCRIPTION: Command to install the latest version of Django Ninja using pip.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/whatsnew_v1.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U django-ninja\n```\n\n----------------------------------------\n\nTITLE: Using Schema for Form Data in Django Ninja\nDESCRIPTION: Demonstrates how to use a Schema to organize form data parameters in a Django Ninja API endpoint. This approach is similar to using Body for request data.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/form-params.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{!./src/tutorial/form/code01.py!}\n```\n\n----------------------------------------\n\nTITLE: Converting a Synchronous API Operation to Asynchronous in Django Ninja\nDESCRIPTION: Example showing how to convert a synchronous operation to asynchronous by adding the 'async' keyword and using asyncio.sleep() instead of time.sleep().\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/async-support.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\n@api.get(\"/say-after\")\nasync def say_after(request, delay: int, word: str):\n    await asyncio.sleep(delay)\n    return {\"saying\": word}\n```\n\n----------------------------------------\n\nTITLE: Class Initialization Method with Async Limitation\nDESCRIPTION: The __init__ method from the class-based operation proposal, highlighting the issue that Python doesn't support async keyword for __init__, creating a limitation for asynchronous operations.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/proposals/cbv.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef __init__(self, request, project_id=int):\n```\n\n----------------------------------------\n\nTITLE: URL Name Configuration in Django Ninja\nDESCRIPTION: Shows how to set and use URL names for API endpoints for reverse URL resolution\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/reference/operations-parameters.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@api.post(\"/tasks\", url_name='tasks')\ndef some_operation(request):\n    pass\n\n# then you can get the url with\n\nreverse('api-1.0.0:tasks')\n```\n\n----------------------------------------\n\nTITLE: Nested Schema Implementation for Tasks and Users\nDESCRIPTION: Implements nested schema structure for tasks with associated user information using Django Ninja Schema classes.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/index.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nfrom ninja import Schema\n\nclass UserSchema(Schema):\n    id: int\n    first_name: str\n    last_name: str\n\nclass TaskSchema(Schema):\n    id: int\n    title: str\n    is_completed: bool\n    owner: UserSchema = None  # ! None - to mark it as optional\n\n\n@api.get(\"/tasks\", response=List[TaskSchema])\ndef tasks(request):\n    queryset = Task.objects.select_related(\"owner\")\n    return list(queryset)\n```\n\n----------------------------------------\n\nTITLE: Configuring Camel Case Output for Django Ninja API Response\nDESCRIPTION: This code snippet shows how to set up a Django Ninja API endpoint to return camel case field names in the response. It includes setting populate_by_name and by_alias options to ensure proper field name conversion.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/config-pydantic.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass UserSchema(ModelSchema):\n    class Config:\n        model = User\n        model_fields = [\"id\", \"email\", \"is_staff\"]\n        alias_generator = to_camel\n        populate_by_name = True  # !!!!!! <--------\n\n\n@api.get(\"/users\", response=list[UserSchema], by_alias=True) # !!!!!! <-------- by_alias\ndef get_users(request):\n    return User.objects.all()\n```\n\n----------------------------------------\n\nTITLE: Combining File Upload with Form Data in Django Ninja\nDESCRIPTION: This snippet demonstrates how to handle file uploads along with additional form data using Django Ninja. It uses the Form class to process additional user details alongside the file upload.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/file-params.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI, Schema, UploadedFile, Form, File\nfrom datetime import date\n\napi = NinjaAPI()\n\n\nclass UserDetails(Schema):\n    first_name: str\n    last_name: str\n    birthdate: date\n\n\n@api.post('/users')\ndef create_user(request, details: Form[UserDetails], file: File[UploadedFile]):\n    return [details.dict(), file.name]\n```\n\n----------------------------------------\n\nTITLE: Overriding Fields in ModelSchema with Django Ninja\nDESCRIPTION: Shows how to override default field annotations and add new fields in a ModelSchema.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/django-pydantic.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass GroupSchema(ModelSchema):\n    class Meta:\n        model = Group\n        fields = ['id', 'name']\n\n\nclass UserSchema(ModelSchema):\n    groups: List[GroupSchema] = []\n\n    class Meta:\n        model = User\n        fields = ['id', 'username', 'first_name', 'last_name']\n```\n\n----------------------------------------\n\nTITLE: Overriding Fields in ModelSchema with Django Ninja\nDESCRIPTION: Shows how to override default field annotations and add new fields in a ModelSchema.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/django-pydantic.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass GroupSchema(ModelSchema):\n    class Meta:\n        model = Group\n        fields = ['id', 'name']\n\n\nclass UserSchema(ModelSchema):\n    groups: List[GroupSchema] = []\n\n    class Meta:\n        model = User\n        fields = ['id', 'username', 'first_name', 'last_name']\n```\n\n----------------------------------------\n\nTITLE: Creating New Django Project\nDESCRIPTION: Command to initialize a new Django project using django-admin CLI tool.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/index.md#2025-04-08_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndjango-admin startproject myproject\n```\n\n----------------------------------------\n\nTITLE: Creating API Version 1 in Django Ninja\nDESCRIPTION: Creates a version 1.0.0 API instance with a simple hello endpoint. This snippet demonstrates how to initialize a versioned API and define a basic GET endpoint that returns a version-specific message.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/versioning.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI\n\n\napi = NinjaAPI(version='1.0.0')\n\n@api.get('/hello')\ndef hello(request):\n    return {'message': 'Hello from V1'}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Data as Parameters in Django Ninja\nDESCRIPTION: Demonstrates how to use the Form class to handle form data as parameters in a Django Ninja API endpoint. It shows how to import Form and use it for username and password fields.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/form-params.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI, Form\n\n@api.post(\"/login\")\ndef login(request, username: Form[str], password: Form[str]):\n    return {'username': username, 'password': '*****'}\n```\n\n----------------------------------------\n\nTITLE: Highlighted Class Initialization with Permission Checks\nDESCRIPTION: Highlighted section showing the centralized permission checking code in the class-based implementation's __init__ method, demonstrating how common initialization code is consolidated.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/proposals/cbv.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@router.path('/project/{project_id}/tasks')\nclass Tasks:\n    def __init__(self, request, project_id=int):\n        user_projects = request.user.project_set\n        self.project = get_object_or_404(user_projects, id=project_id))\n        self.tasks = self.project.task_set.all()\n```\n\n----------------------------------------\n\nTITLE: Running Basic Tests\nDESCRIPTION: Commands to run project tests using either pytest directly or via Makefile.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/CONTRIBUTING.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npytest .\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Adding Operation Descriptions in Django Ninja\nDESCRIPTION: Illustrates different ways to add detailed descriptions to API operations using both the description parameter and docstrings\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/reference/operations-parameters.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@api.post(\"/orders/\", description=\"Creates an order and updates stock\")\ndef create_order(request, order: Order):\n    return {\"success\": True}\n```\n\nLANGUAGE: python\nCODE:\n```\n@api.post(\"/orders/\")\ndef create_order(request, order: Order):\n    \"\"\"\n    To create an order please provide:\n     - **first_name**\n     - **last_name**\n     - and **list of Items** *(product + amount)*\n    \"\"\"\n    return {\"success\": True}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default URL Naming in Django Ninja\nDESCRIPTION: Demonstrates how to override the default URL naming convention by subclassing NinjaAPI and implementing a custom get_operation_url_name method.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/urls.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyAPI(NinjaAPI):\n    def get_operation_url_name(self, operation, router):\n        return operation.view_func.__name__ + '_my_extra_suffix'\n\napi = MyAPI()\n```\n\n----------------------------------------\n\nTITLE: Creating a Router for Events API in Django Ninja\nDESCRIPTION: Demonstrates how to create a router for handling event-related API endpoints using Django Ninja. It includes operations for listing events and retrieving event details.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/routers.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import Router\nfrom .models import Event\n\nrouter = Router()\n\n@router.get('/')\ndef list_events(request):\n    return [\n        {\"id\": e.id, \"title\": e.title}\n        for e in Event.objects.all()\n    ]\n\n@router.get('/{event_id}')\ndef event_details(request, event_id: int):\n    event = Event.objects.get(id=event_id)\n    return {\"title\": event.title, \"details\": event.details}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Basic Authentication in Django Ninja\nDESCRIPTION: This example shows how to implement HTTP Basic Authentication in Django Ninja. It checks for valid credentials using the 'username' and 'password' provided in the Authorization header.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/authentication.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja.security import HttpBasicAuth\n\nclass BasicAuth(HttpBasicAuth):\n    def authenticate(self, request, username, password):\n        if username == \"admin\" and password == \"secret\":\n            return username\n```\n\n----------------------------------------\n\nTITLE: Executing Docker-Compose for Django Ninja Test Environment\nDESCRIPTION: This command builds and starts the Docker containers defined in the docker-compose file, which sets up the test environment for Django Ninja. It runs tests across multiple Python (3.6, 3.7, 3.8) and Django (2.0 to 3.1) versions.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/tests/env-matrix/README.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up --build\n```\n\n----------------------------------------\n\nTITLE: Self-Referencing Schema Definition\nDESCRIPTION: Shows how to create self-referencing schemas for tree-like data structures.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/index.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass Organization(Schema):\n    title: str\n    part_of: 'Organization' = None     #!! note the type in quotes here !!\n\n\nOrganization.model_rebuild()  # !!! this is important\n\n\n@api.get('/organizations', response=List[Organization])\ndef list_organizations(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining ModelSchema with Specific Fields in Django Ninja\nDESCRIPTION: Demonstrates how to create a UserSchema using ModelSchema, specifying which fields from the User model to include in the schema.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/django-pydantic.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import User\nfrom ninja import ModelSchema\n\nclass UserSchema(ModelSchema):\n    class Meta:\n        model = User\n        fields = ['id', 'username', 'first_name', 'last_name']\n```\n\n----------------------------------------\n\nTITLE: Router Configuration\nDESCRIPTION: Example of adding multiple routers using string paths.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/whatsnew_v1.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\napi = NinjaAPI()\n\napi.add_router('/app1', 'myproject.app1.router')\napi.add_router('/app2', 'myproject.app2.router')\napi.add_router('/app3', 'myproject.app3.router')\napi.add_router('/app4', 'myproject.app4.router')\napi.add_router('/app5', 'myproject.app5.router')\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fast ORJSON Parser for Django Ninja\nDESCRIPTION: Example of implementing a high-performance JSON parser using the orjson library, which is faster and more accurate than the standard json library. Requires installing orjson via pip.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/request-parsers.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport orjson\nfrom ninja import NinjaAPI\nfrom ninja.parser import Parser\n\n\nclass ORJSONParser(Parser):\n    def parse_body(self, request):\n        return orjson.loads(request.body)\n\n\napi = NinjaAPI(parser=ORJSONParser())\n```\n\n----------------------------------------\n\nTITLE: Defining User Response Schema in Django Ninja\nDESCRIPTION: This snippet shows how to create a UserSchema using Django Ninja's Schema class. It defines the structure of the response for a user, including optional fields for unauthenticated users.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/step3.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import Schema\n\nclass UserSchema(Schema):\n    username: str\n    is_authenticated: bool\n    # Unauthenticated users don't have the following fields, so provide defaults.\n    email: str = None\n    first_name: str = None\n    last_name: str = None\n\n@api.get(\"/me\", response=UserSchema)\ndef me(request):\n    return request.user\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple File Uploads in Django Ninja\nDESCRIPTION: This snippet shows how to handle multiple file uploads simultaneously using Django Ninja. It uses a List of UploadedFile objects to process multiple files and return their names.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/file-params.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nfrom ninja import NinjaAPI, File\nfrom ninja.files import UploadedFile\n\n@api.post(\"/upload-many\")\ndef upload_many(request, files: File[List[UploadedFile]]):\n    return [f.name for f in files]\n```\n\n----------------------------------------\n\nTITLE: Creating XML Renderer in Django Ninja\nDESCRIPTION: Comprehensive XML renderer implementation that converts Python data structures into XML format. Handles nested dictionaries, lists, and primitive data types, using Django's XMLGenerator utilities.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/response-renderers.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom io import StringIO\nfrom django.utils.encoding import force_str\nfrom django.utils.xmlutils import SimplerXMLGenerator\nfrom ninja import NinjaAPI\nfrom ninja.renderers import BaseRenderer\n\n\nclass XMLRenderer(BaseRenderer):\n    media_type = \"text/xml\"\n\n    def render(self, request, data, *, response_status):\n        stream = StringIO()\n        xml = SimplerXMLGenerator(stream, \"utf-8\")\n        xml.startDocument()\n        xml.startElement(\"data\", {})\n        self._to_xml(xml, data)\n        xml.endElement(\"data\")\n        xml.endDocument()\n        return stream.getvalue()\n\n    def _to_xml(self, xml, data):\n        if isinstance(data, (list, tuple)):\n            for item in data:\n                xml.startElement(\"item\", {})\n                self._to_xml(xml, item)\n                xml.endElement(\"item\")\n\n        elif isinstance(data, dict):\n            for key, value in data.items():\n                xml.startElement(key, {})\n                self._to_xml(xml, value)\n                xml.endElement(key)\n\n        elif data is None:\n            # Don't output any value\n            pass\n\n        else:\n            xml.characters(force_str(data))\n\n\napi = NinjaAPI(renderer=XMLRenderer())\n```\n\n----------------------------------------\n\nTITLE: Accepting Query String Input in Django Ninja\nDESCRIPTION: Demonstrates how to create an API endpoint that accepts a name parameter from the query string. The function returns a greeting using the provided name.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/step2.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/hello\")\ndef hello(request, name):\n    return f\"Hello {name}\"\n```\n\n----------------------------------------\n\nTITLE: Annotated Type Usage\nDESCRIPTION: Example of using typing.Annotated with Form parameters.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/whatsnew_v1.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/annotated\")\ndef annotated(request, data: Annotated[SomeData, Form()]):\n    return {\"data\": data.dict()}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Page Size with PageNumberPagination\nDESCRIPTION: Shows how to customize the number of items returned per page by setting the page_size parameter in the paginate decorator with PageNumberPagination.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/pagination.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/users\")\n@paginate(PageNumberPagination, page_size=50)\ndef list_users(...\n```\n\n----------------------------------------\n\nTITLE: Basic Path Parameter Implementation in Django Ninja\nDESCRIPTION: Demonstrates the basic usage of path parameters in a Django Ninja API endpoint. Shows how to capture a path parameter and return it in the response.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/path-params.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/api/items/{item_id}\")\ndef read_item(request, item_id):\n    return {\"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bearer Token Authentication in Django Ninja\nDESCRIPTION: This example shows how to implement Bearer token authentication in a Django Ninja API. It requires the client to pass an 'Authorization: Bearer supersecret' header to access the protected endpoint.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/authentication.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI\nfrom ninja.security import HttpBearer\n\nclass AuthBearer(HttpBearer):\n    def authenticate(self, request, token):\n        if token == \"supersecret\":\n            return token\n\napi = NinjaAPI()\n\n@api.get(\"/bearer\", auth=AuthBearer())\ndef bearer(request):\n    return {\"token\": request.auth}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Django Ninja API\nDESCRIPTION: Example of defining a simple Django Ninja API with a router that includes a schema response and an endpoint that returns a hello message.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/testing.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI, Schema\n\napi = NinjaAPI()\nrouter = Router()\n\nclass HelloResponse(Schema):\n    msg: str\n    \n@router.get(\"/hello\", response=HelloResponse)\ndef hello(request):\n    return {\"msg\": \"Hello World\"}\n\napi.add_router(\"\", router)\n```\n\n----------------------------------------\n\nTITLE: New Form Parameters Syntax\nDESCRIPTION: Demonstrates the new shorter and cleaner syntax for form parameters in API endpoints.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/whatsnew_v1.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@api.post('/some')\ndef some_form(request, username: Form[str], password: Form[str]):\n    return True\n```\n\nLANGUAGE: python\nCODE:\n```\n@api.post('/some')\ndef some_form(request, username: str = Form(...), password: str = Form(...)):\n    return True\n```\n\nLANGUAGE: python\nCODE:\n```\n@api.post('/some')\ndef some_form(request, data: Form[AuthSchema]):\n    return True\n```\n\nLANGUAGE: python\nCODE:\n```\n@api.post('/some')\ndef some_form(request, data: AuthSchema = Form(...)):\n    return True\n```\n\n----------------------------------------\n\nTITLE: Django Path Converter Implementation\nDESCRIPTION: Demonstrates the use of Django path converters for parameter parsing and validation.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/path-params.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/items/{int:item_id}\")\ndef read_item(request, item_id):\n    return {\"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Query Parameters with Default Values in Django Ninja\nDESCRIPTION: This snippet shows how to set default values for query parameters. If not provided in the URL, 'limit' will default to 10 and 'offset' to 0. These parameters are optional due to the default values.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/query-params.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/weapons\")\ndef list_weapons(request, limit: int = 10, offset: int = 0):\n    return weapons[offset : offset + limit]\n```\n\n----------------------------------------\n\nTITLE: Defining Django Model for Schema Example\nDESCRIPTION: Defines a simple Person model with a name field to demonstrate schema serialization.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/index.md#2025-04-08_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass Person(models.Model):\n    name = models.CharField(max_length=50)\n```\n\n----------------------------------------\n\nTITLE: Required and Optional Query Parameters in Django Ninja\nDESCRIPTION: This example demonstrates how to declare both required and optional query parameters. The 'q' parameter is required (no default value), while 'offset' is optional with a default value of 0.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/query-params.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/search\")\ndef search_weapons(request, q: str, offset: int = 0):\n    return weapons.search(q)[offset:]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of create_schema with User Model\nDESCRIPTION: Example showing how to create a basic schema from Django's User model, generating a schema with all model fields.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/django-pydantic-create-schema.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import User\nfrom ninja.orm import create_schema\n\nUserSchema = create_schema(User)\n\n# Will create schema like this:\n# \n# class UserSchema(Schema):\n#     id: int\n#     username: str\n#     first_name: str\n#     last_name: str\n#     password: str\n#     last_login: datetime\n#     is_superuser: bool\n#     email: str\n#     ... and the rest\n```\n\n----------------------------------------\n\nTITLE: Excluding Fields in ModelSchema with Django Ninja\nDESCRIPTION: Demonstrates how to exclude specific fields from a Django model when creating a ModelSchema.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/django-pydantic.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass UserSchema(ModelSchema):\n    class Meta:\n        model = User\n        exclude = ['password', 'last_login', 'user_permissions']\n```\n\n----------------------------------------\n\nTITLE: Using create_schema with depth Parameter\nDESCRIPTION: Examples showing how to create schemas with nested relationships using the depth parameter to introspect related fields.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/django-pydantic-create-schema.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nUserSchema = create_schema(User, depth=1, fields=['username', 'groups'])\n\n# Will create the following schema:\n#\n# class UserSchema(Schema):\n#    username: str\n#    groups: List[Group]\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Group(Schema):\n    id: int\n    name: str\n    permissions: List[int]\n```\n\n----------------------------------------\n\nTITLE: Creating a CSRF Token Endpoint with Django Ninja\nDESCRIPTION: Demonstrates how to create an API endpoint that delivers a CSRF token using Django's ensure_csrf_cookie decorator. This endpoint can be used by frontend code to obtain CSRF tokens for authenticated requests.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/reference/csrf.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\nfrom django.views.decorators.csrf import csrf_exempt, ensure_csrf_cookie\n\n@api.post(\"/csrf\")\n@ensure_csrf_cookie\n@csrf_exempt\ndef get_csrf_token(request):\n    return HttpResponse()\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Ninja Settings Display Options\nDESCRIPTION: Configuration block that specifies rendering options for ninja.conf.Settings documentation. Disables source code display and root table of contents entry.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/reference/settings.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n::: ninja.conf.Settings\n    rendering:\n      show_source: False\n      show_root_toc_entry: False\n```\n\n----------------------------------------\n\nTITLE: Applying Tags to Router in Django Ninja\nDESCRIPTION: Demonstrates how to apply tags to all operations declared by a router, either when adding the router to the API or in the router constructor.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/routers.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napi.add_router(\"/events/\", events_router, tags=[\"events\"])\n```\n\nLANGUAGE: python\nCODE:\n```\nrouter = Router(tags=[\"events\"])\n```\n\n----------------------------------------\n\nTITLE: Handling Basic File Upload\nDESCRIPTION: Endpoint that demonstrates how to handle a standalone file upload using Django's FileSystemStorage. This approach is useful when you need to process file uploads separately from model creation.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/other/crud.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.files.storage import FileSystemStorage\nfrom ninja import UploadedFile, File\n\nSTORAGE = FileSystemStorage()\n\n@api.post(\"/upload\")\ndef create_upload(request, cv: File[UploadedFile]):\n    filename = STORAGE.save(cv.name, cv)\n    # Handle things further\n```\n\n----------------------------------------\n\nTITLE: Using All Fields in ModelSchema with Django Ninja\nDESCRIPTION: Shows how to include all fields from a Django model in a ModelSchema using the '__all__' option.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/django-pydantic.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass UserSchema(ModelSchema):\n    class Meta:\n        model = User\n        fields = \"__all__\"\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies and Headers in Django-Ninja Response\nDESCRIPTION: Example of modifying an HTTP response by setting cookies and headers using Django-Ninja decorators. Shows how to inject an HttpResponse parameter to manipulate response attributes before returning.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/temporal_response.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpRequest, HttpResponse\n\n@api.get(\"/cookie/\")\ndef feed_cookiemonster(request: HttpRequest, response: HttpResponse):\n    # Set a cookie.\n    response.set_cookie(\"cookie\", \"delicious\")\n    # Set a header.\n    response[\"X-Cookiemonster\"] = \"blue\"\n    return {\"cookiemonster_happy\": True}\n```\n\n----------------------------------------\n\nTITLE: Customizing Namespace in Django Ninja\nDESCRIPTION: Shows how to customize the URL namespace for different API instances. One uses the default versioned namespace, while the other uses a custom namespace.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/urls.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napi = NinjaAPI(auth=token_auth, version='2')\napi_private = NinjaAPI(auth=session_auth, urls_namespace='private_api')\n\napi_users_url = reverse_lazy(\"api-2:users\")\nprivate_api_admins_url = reverse_lazy(\"private_api:admins\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving a List of Employees\nDESCRIPTION: GET endpoint that returns a list of all employees. It uses the List type from the typing module to specify that the response will be a list of EmployeeOut objects. The endpoint returns a queryset that Django Ninja automatically evaluates and converts.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/other/crud.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\n@api.get(\"/employees\", response=List[EmployeeOut])\ndef list_employees(request):\n    qs = Employee.objects.all()\n    return qs\n```\n\n----------------------------------------\n\nTITLE: Installing Django Ninja via pip\nDESCRIPTION: Installation command for the Django Ninja package using pip package manager.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/index.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install django-ninja\n```\n\n----------------------------------------\n\nTITLE: Using Request Body with Schemas in Django Ninja\nDESCRIPTION: Shows how to handle input from the request body by defining a Schema class. The schema validates the input data and provides default values if needed.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/step2.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI, Schema\n\napi = NinjaAPI()\n\nclass HelloSchema(Schema):\n    name: str = \"world\"\n\n@api.post(\"/hello\")\ndef hello(request, data: HelloSchema):\n    return f\"Hello {data.name}\"\n```\n\n----------------------------------------\n\nTITLE: Using Request Body with Schemas in Django Ninja\nDESCRIPTION: Shows how to handle input from the request body by defining a Schema class. The schema validates the input data and provides default values if needed.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/step2.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI, Schema\n\napi = NinjaAPI()\n\nclass HelloSchema(Schema):\n    name: str = \"world\"\n\n@api.post(\"/hello\")\ndef hello(request, data: HelloSchema):\n    return f\"Hello {data.name}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Exceptions in Django Ninja Authentication\nDESCRIPTION: This example shows how to implement custom exceptions in Django Ninja authentication. It raises a custom exception when the authentication token is invalid.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/authentication.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja.errors import HttpError\n\nclass InvalidToken(HttpError):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Schema with Field Aliases\nDESCRIPTION: Shows how to use field aliases in Django Ninja schemas to customize field names and access nested attributes.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/index.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import Field, Schema\n\n\nclass TaskSchema(Schema):\n    id: int\n    title: str\n    completed: bool = Field(..., alias=\"is_completed\")\n    owner_first_name: str = Field(None, alias=\"owner.first_name\")\n```\n\n----------------------------------------\n\nTITLE: Making Fields Optional in ModelSchema with Django Ninja\nDESCRIPTION: Demonstrates how to make all or specific fields optional in a ModelSchema, useful for PATCH operations.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/django-pydantic.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass PatchGroupSchema(ModelSchema):\n    class Meta:\n        model = Group\n        fields = ['id', 'name', 'description'] # Note: all these fields are required on model level\n        fields_optional = '__all__'\n```\n\n----------------------------------------\n\nTITLE: Enabling CSRF Protection in Django Ninja API\nDESCRIPTION: Shows how to initialize a Django Ninja API with CSRF protection enabled using the csrf parameter. This is essential when using cookie-based authentication to prevent CSRF attacks.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/reference/csrf.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI\n\napi = NinjaAPI(csrf=True)\n```\n\n----------------------------------------\n\nTITLE: Adding Django Ninja to INSTALLED_APPS for Management Commands\nDESCRIPTION: This snippet shows how to add Django Ninja to Django's INSTALLED_APPS setting. This configuration is required for Django Ninja management commands to be recognized by the project.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/reference/management-commands.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...,\n    'ninja',\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Attributes to Test Request\nDESCRIPTION: Example of passing custom attributes to the request object by using keyword arguments in the client request methods.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/testing.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass HelloTest(TestCase):\n    def test_hello(self):\n        client = TestClient(router)\n        # request.company_id will now be set within the view\n        response = client.get(\"/hello\", company_id=1)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Filter Query in API Handler\nDESCRIPTION: Demonstrates how to use FilterSchema in an API endpoint to filter book querysets.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/filtering.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/books\")\ndef list_books(request, filters: BookFilterSchema = Query(...)):\n    books = Book.objects.all()\n    books = filters.filter(books)\n    return books\n```\n\n----------------------------------------\n\nTITLE: Configuring Django URLs for Ninja API in Python\nDESCRIPTION: This snippet shows how to include the Django Ninja API in the project's URL configuration. It adds the API routes to the urlpatterns list in the Django urls.py file.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/README.md#2025-04-08_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n...\nfrom .api import api\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"api/\", api.urls),  # <---------- !\n]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Django ORM in Async Views\nDESCRIPTION: Example showing the incorrect way to use Django ORM in an async view, which will throw an error because the ORM is async-unsafe.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/async-support.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/blog/{post_id}\")\nasync def search(request, post_id: int):\n    blog = Blog.objects.get(pk=post_id)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Processing Optional Fields in PATCH Request with Django Ninja\nDESCRIPTION: Shows how to handle a PATCH request with optional fields, avoiding setting undefined fields to None.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/django-pydantic.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@api.patch(\"/patch/{pk}\")\ndef patch(request, pk: int, payload: PatchGroupSchema):\n\n    # Notice that we set exclude_unset=True\n    updated_fields = payload.dict(exclude_unset=True)\n\n    obj = MyModel.objects.get(pk=pk)\n\n    for attr, value in updated_fields.items():\n        setattr(obj, attr, value)\n\n    obj.save()\n```\n\n----------------------------------------\n\nTITLE: Unannotated Query Parameters in Django Ninja\nDESCRIPTION: This example shows that when query parameters are not annotated with types, they are treated as strings by default. Both 'limit' and 'offset' will be of type str in this case.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/query-params.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/weapons\")\ndef list_weapons(request, limit, offset):\n    # type(limit) == str\n    # type(offset) == str\n```\n\n----------------------------------------\n\nTITLE: Applying Authentication to Router in Django Ninja\nDESCRIPTION: Shows how to apply authentication to all operations declared by a router, either when adding the router to the API or in the router constructor.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/routers.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napi.add_router(\"/events/\", events_router, auth=BasicAuth())\n```\n\nLANGUAGE: python\nCODE:\n```\nrouter = Router(auth=BasicAuth())\n```\n\n----------------------------------------\n\nTITLE: Implementing Function-Based API Operations in Django Ninja\nDESCRIPTION: Function-based API implementation for task operations with repeated permission checks. Shows three endpoints: task listing, task details, and task completion - each containing duplicated code to verify the user owns the project.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/proposals/cbv.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrouter = Router()\n\n@router.get('/project/{project_id}/tasks/', response=List[TaskOut])\ndef task_list(request):\n    user_projects = request.user.project_set\n    project = get_object_or_404(user_projects, id=project_id))\n    return project.task_set.all()\n\n@router.get('/project/{project_id}/tasks/{task_id}/', response=TaskOut)\ndef details(request, task_id: int):\n    user_projects = request.user.project_set\n    project = get_object_or_404(user_projects, id=project_id))\n    user_tasks = project.task_set.all()\n    return get_object_or_404(user_tasks, id=task_id)\n\n\n@router.post('/project/{project_id}/tasks/{task_id}/complete', response=TaskOut)\ndef complete(request, task_id: int):\n    user_projects = request.user.project_set\n    project = get_object_or_404(user_projects, id=project_id))\n    user_tasks = project.task_set.all()\n    task = get_object_or_404(user_tasks, id=task_id)\n    task.completed = True\n    task.save()\n    return task\n```\n\n----------------------------------------\n\nTITLE: Creating Input Schema for Employee Creation\nDESCRIPTION: Defines an input schema using Django Ninja's Schema class to validate and structure the data required for creating a new Employee. This schema includes fields for first_name, last_name, department_id, and birthdate.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/other/crud.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nfrom ninja import Schema\n\nclass EmployeeIn(Schema):\n    first_name: str\n    last_name: str\n    department_id: int = None\n    birthdate: date = None\n```\n\n----------------------------------------\n\nTITLE: Using create_schema with exclude Parameter\nDESCRIPTION: Example showing how to create a schema while excluding specific fields from the User model using the exclude parameter.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/django-pydantic-create-schema.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nUserSchema = create_schema(User, exclude=[\n    'password', 'last_login', 'is_superuser', 'is_staff', 'groups', 'user_permissions']\n)\n\n# Will create schema without excluded fields:\n# \n# class UserSchema(Schema):\n#    id: int\n#    username: str\n#    first_name: str\n#    last_name: str\n#    email: str\n#    is_active: bool\n#    date_joined: datetime\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Pagination Class in Django Ninja\nDESCRIPTION: Demonstrates how to implement a custom pagination class by subclassing PaginationBase and overriding the Input schema, Output schema, and paginate_queryset method. This example creates a pagination with a 'skip' parameter.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/pagination.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja.pagination import paginate, PaginationBase\nfrom ninja import Schema\n\n\nclass CustomPagination(PaginationBase):\n    # only `skip` param, defaults to 5 per page\n    class Input(Schema):\n        skip: int\n        \n\n    class Output(Schema):\n        items: List[Any] # `items` is a default attribute\n        total: int\n        per_page: int\n\n    def paginate_queryset(self, queryset, pagination: Input, **params):\n        skip = pagination.skip\n        return {\n            'items': queryset[skip : skip + 5],\n            'total': queryset.count(),\n            'per_page': 5,\n        }\n\n\n@api.get('/users', response=List[UserSchema])\n@paginate(CustomPagination)\ndef list_users(request):\n    return User.objects.all()\n```\n\n----------------------------------------\n\nTITLE: Using AsyncElasticsearch in a Django Ninja API\nDESCRIPTION: Example of implementing an async API endpoint that uses AsyncElasticsearch to perform search operations. The search results are awaited and returned as JSON.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/async-support.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI\nfrom elasticsearch import AsyncElasticsearch\n\n\napi = NinjaAPI()\n\nes = AsyncElasticsearch()\n\n\n@api.get(\"/search\")\nasync def search(request, q: str):\n    resp = await es.search(\n        index=\"documents\", \n        body={\"query\": {\"query_string\": {\"query\": q}}},\n        size=20,\n    )\n    return resp[\"hits\"]\n```\n\n----------------------------------------\n\nTITLE: Customizing OpenAPI Schema with Extra Options\nDESCRIPTION: Demonstrates how to add custom OpenAPI schema configurations including request body and response definitions\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/reference/operations-parameters.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\n    \"/tasks\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"required\": [\"email\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\"type\": \"string\"},\n                            \"phone\": {\"type\": \"number\"},\n                            \"email\": {\"type\": \"string\"},\n                        },\n                    }\n                }\n            },\n            \"required\": True,\n        }\n    },\n)\ndef some_operation(request):\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@api.post(\n    \"/tasks\",\n    openapi_extra={\n        \"responses\": {\n            400: {\n                \"description\": \"Error Response\",\n            },\n            404: {\n                \"description\": \"Not Found Response\",\n            },\n        },\n    },\n)\ndef some_operation_2(request):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing API Key Authentication in Cookie for Django Ninja\nDESCRIPTION: This snippet demonstrates how to implement API key authentication using a cookie in Django Ninja. It checks for a valid API key in the 'X-API-KEY' cookie.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/authentication.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja.security import APIKeyCookie\n\napi = NinjaAPI(auth=APIKeyCookie())\n```\n\n----------------------------------------\n\nTITLE: Creating a Router for News API in Django Ninja\nDESCRIPTION: Shows the structure for creating a router to handle news-related API endpoints. The implementation details are omitted but follow the same pattern as the events router.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/routers.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import Router\nfrom .models import News\n\nrouter = Router()\n\n@router.get('/')\ndef list_news(request):\n    ...\n\n@router.get('/{news_id}')\ndef news_details(request, news_id: int):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Camel Case Schema in Django Ninja with Pydantic Config\nDESCRIPTION: This snippet demonstrates how to create a Django Ninja Schema with camel case field names using Pydantic's Config class and alias_generator. It includes a helper function to convert snake_case to camelCase.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/config-pydantic.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import Schema\n\n\ndef to_camel(string: str) -> str:\n    words = string.split('_')\n    return words[0].lower() + ''.join(word.capitalize() for word in words[1:])\n\nclass CamelModelSchema(Schema):\n    str_field_name: str\n    float_field_name: float\n\n    class Config(Schema.Config):\n        alias_generator = to_camel\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Authentication in Django Ninja\nDESCRIPTION: This snippet demonstrates how to set up global authentication for all API endpoints in Django Ninja, with the ability to override it for specific endpoints.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/authentication.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI, Form\nfrom ninja.security import HttpBearer\n\n\nclass GlobalAuth(HttpBearer):\n    def authenticate(self, request, token):\n        if token == \"supersecret\":\n            return token\n\n\napi = NinjaAPI(auth=GlobalAuth())\n\n# @api.get(...)\n# def ...\n\n# @api.post(...)\n# def ...\n\n@api.post(\"/token\", auth=None)\ndef get_token(request, username: str = Form(...), password: str = Form(...)):\n    if username == \"admin\" and password == \"secret\":\n        return {\"token\": \"supersecret\"}\n    return {\"token\": None}\n```\n\n----------------------------------------\n\nTITLE: Defining Django Models for CRUD Operations\nDESCRIPTION: Sample Django models for Department and Employee that will be used for demonstrating CRUD operations. The Employee model includes fields for personal information and a foreign key relationship to Department.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/other/crud.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Department(models.Model):\n    title = models.CharField(max_length=100)\n\nclass Employee(models.Model):\n    first_name = models.CharField(max_length=100)\n    last_name = models.CharField(max_length=100)\n    department = models.ForeignKey(Department, on_delete=models.CASCADE)\n    birthdate = models.DateField(null=True, blank=True)\n    cv = models.FileField(null=True, blank=True)\n```\n\n----------------------------------------\n\nTITLE: Proposed Class-Based Operation Implementation in Django Ninja\nDESCRIPTION: Proposed solution using class-based operations with a central __init__ method for permission checks. The class is decorated with a path, and individual HTTP methods are defined as class methods with their own decorators.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/proposals/cbv.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import Router\n\n\nrouter = Router()\n\n\n@router.path('/project/{project_id}/tasks')\nclass Tasks:\n    def __init__(self, request, project_id=int):\n        user_projects = request.user.project_set\n        self.project = get_object_or_404(user_projects, id=project_id))\n        self.tasks = self.project.task_set.all()\n    \n    @router.get('/', response=List[TaskOut])\n    def task_list(self, request):\n        return self.tasks\n\n    @router.get('/{task_id}/', response=TaskOut)\n    def details(self, request, task_id: int):\n        return get_object_or_404(self.tasks, id=task_id)\n\n    @router.post('/{task_id}/complete', response=TaskOut)\n    def complete(self, request, task_id: int):\n        task = get_object_or_404(self.tasks, id=task_id)\n        task.completed = True\n        task.save()\n        return task\n```\n\n----------------------------------------\n\nTITLE: Schema with Resolvers\nDESCRIPTION: Demonstrates the use of resolver methods in schemas to compute dynamic fields based on object attributes.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/index.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass TaskSchema(Schema):\n    id: int\n    title: str\n    is_completed: bool\n    owner: Optional[str] = None\n    lower_title: str\n\n    @staticmethod\n    def resolve_owner(obj):\n        if not obj.owner:\n            return\n        return f\"{obj.owner.first_name} {obj.owner.last_name}\"\n\n    def resolve_lower_title(self, obj):\n        return self.title.lower()\n```\n\n----------------------------------------\n\nTITLE: Using Path Parameters in Django Ninja\nDESCRIPTION: Demonstrates how to declare path parameters using Python format-string syntax. Parameters in the URL path are passed to the function as arguments.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/step2.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/math/{a}and{b}\")\ndef math(request, a: int, b: int):\n    return {\"add\": a + b, \"multiply\": a * b}\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads with Django Models\nDESCRIPTION: Endpoint that handles both structured data and file uploads. It creates an Employee instance with the payload data and then saves the uploaded CV file to the model's FileField.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/other/crud.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import UploadedFile, File\n\n@api.post(\"/employees\")\ndef create_employee(request, payload: EmployeeIn, cv: File[UploadedFile]):\n    payload_dict = payload.dict()\n    employee = Employee(**payload_dict)\n    employee.cv.save(cv.name, cv) # will save model instance as well\n    return {\"id\": employee.id}\n```\n\n----------------------------------------\n\nTITLE: Declaring Query Parameters in Django Ninja\nDESCRIPTION: This snippet demonstrates how to declare query parameters in a Django Ninja API endpoint. The function takes 'offset' and 'limit' as query parameters, which are automatically interpreted as such when not part of the path parameters.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/query-params.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/weapons\")\ndef list_weapons(request, offset: int, limit: int):\n    return weapons[offset : offset + limit]\n```\n\n----------------------------------------\n\nTITLE: Disabling API Documentation in Django Ninja\nDESCRIPTION: This snippet shows how to hide the interactive API documentation in Django Ninja by setting the 'docs_url' parameter to None when initializing the NinjaAPI.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/api-docs.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napi = NinjaAPI(docs_url=None)\n\n```\n\n----------------------------------------\n\nTITLE: Reversing Default URL in Django Ninja\nDESCRIPTION: Demonstrates how to use reverse_lazy to get the URL for a default API endpoint. The default namespace 'api-1.0.0' is used, and the function name becomes the URL name.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/urls.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napi = NinjaAPI()\n\n@api.get(\"/\")\ndef index(request):\n    ...\n\nindex_url = reverse_lazy(\"api-1.0.0:index\")\n```\n\n----------------------------------------\n\nTITLE: Error Response for Missing Required Parameter\nDESCRIPTION: Shows the HTTP 422 error response when a required parameter is not provided in the request.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/step2.md#2025-04-08_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": [\n    {\n      \"loc\": [\"query\", \"name\"],\n      \"msg\": \"field required\",\n      \"type\": \"value_error.missing\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple HTTP Methods in Django Ninja\nDESCRIPTION: This snippet shows how to use the api_operation decorator to handle multiple HTTP methods (POST and PATCH) with a single function for a given path in Django Ninja.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/operations.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@api.api_operation([\"POST\", \"PATCH\"], \"/path\")\ndef mixed_operation(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: JSON Response Example for Camel Case API Output in Django Ninja\nDESCRIPTION: This JSON snippet illustrates the expected output format when using camel case field names in a Django Ninja API response. It shows how snake_case field names are converted to camelCase in the output.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/config-pydantic.md#2025-04-08_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 1,\n    \"email\": \"tim@apple.com\",\n    \"isStaff\": true\n  },\n  {\n    \"id\": 2,\n    \"email\": \"sarah@smith.com\",\n    \"isStaff\": false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Updating an Employee\nDESCRIPTION: PUT endpoint for updating an existing employee. It retrieves the employee by ID, updates its attributes based on the payload schema, and saves the changes to the database.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/other/crud.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@api.put(\"/employees/{employee_id}\")\ndef update_employee(request, employee_id: int, payload: EmployeeIn):\n    employee = get_object_or_404(Employee, id=employee_id)\n    for attr, value in payload.dict().items():\n        setattr(employee, attr, value)\n    employee.save()\n    return {\"success\": True}\n```\n\n----------------------------------------\n\nTITLE: Multiple Type Query Parameters in Django Ninja\nDESCRIPTION: This snippet shows how to use multiple types for query parameters. It includes string, integer, boolean, and date types, demonstrating Django Ninja's type conversion capabilities for query parameters.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/query-params.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/example\")\ndef example(request, s: str, i: int, b: bool, d: date):\n    return {\"s\": s, \"i\": i, \"b\": b, \"d\": d}\n```\n\n----------------------------------------\n\nTITLE: Complete User Schema Implementation\nDESCRIPTION: Shows full implementation of user creation with both input and output schemas defined, demonstrating proper response handling.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/index.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import Schema\n\nclass UserIn(Schema):\n    username: str\n    password: str\n\n\nclass UserOut(Schema):\n    id: int\n    username: str\n\n\n@api.post(\"/users/\", response=UserOut)\ndef create_user(request, data: UserIn):\n    user = User(username=data.username)\n    user.set_password(data.password)\n    user.save()\n    return user\n```\n\n----------------------------------------\n\nTITLE: Complete User Schema Implementation\nDESCRIPTION: Shows full implementation of user creation with both input and output schemas defined, demonstrating proper response handling.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/index.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import Schema\n\nclass UserIn(Schema):\n    username: str\n    password: str\n\n\nclass UserOut(Schema):\n    id: int\n    username: str\n\n\n@api.post(\"/users/\", response=UserOut)\ndef create_user(request, data: UserIn):\n    user = User(username=data.username)\n    user.set_password(data.password)\n    user.save()\n    return user\n```\n\n----------------------------------------\n\nTITLE: Applying RouterPaginated to the Main API Instance\nDESCRIPTION: Shows how to set up pagination at the API level by using the default_router parameter with RouterPaginated when initializing the NinjaAPI instance.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/pagination.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\napi = NinjaAPI(default_router=RouterPaginated())\n\n@api.get(...\n```\n\n----------------------------------------\n\nTITLE: Applying RouterPaginated to the Main API Instance\nDESCRIPTION: Shows how to set up pagination at the API level by using the default_router parameter with RouterPaginated when initializing the NinjaAPI instance.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/pagination.md#2025-04-08_snippet_8\n\nLANGUAGE: python\nCODE:\n```\napi = NinjaAPI(default_router=RouterPaginated())\n\n@api.get(...\n```\n\n----------------------------------------\n\nTITLE: Highlighting Repeated Permission Check Code\nDESCRIPTION: Highlighted section showing the repetitive permission checking code in the function-based implementation that needs to be refactored for better maintainability.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/proposals/cbv.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nuser_projects = request.user.project_set\nproject = get_object_or_404(user_projects, id=project_id))\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Field Types in Django Ninja\nDESCRIPTION: Demonstrates how to register a custom Django field type for use with ModelSchema in Django Ninja.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/django-pydantic.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# models.py\n\nclass MyModel(models.Modle):\n    embedding = pgvector.VectorField()\n\n# schemas.py\nfrom ninja.orm import register_field\n\nregister_field('VectorField', list[float])\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Math Endpoint\nDESCRIPTION: Shows the JSON response returned when parameters are provided to the math endpoint.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/step2.md#2025-04-08_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"add\": 5,\n  \"multiply\": 6\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flit Package Manager\nDESCRIPTION: Command to install Flit package manager which is required for building and packaging Django Ninja.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/CONTRIBUTING.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flit\n```\n\n----------------------------------------\n\nTITLE: Installing Django Ninja with pip\nDESCRIPTION: Command to install Django Ninja using pip package manager.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install django-ninja\n```\n\n----------------------------------------\n\nTITLE: Customizing Field Lookups in FilterSchema\nDESCRIPTION: Examples of customizing field lookups using the Field class with various Q expression configurations.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/filtering.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass BookFilterSchema(FilterSchema):\n    search: Optional[str] = Field(None, q=['name__icontains',\n                                     'author__name__icontains',\n                                     'publisher__name__icontains'])\n```\n\n----------------------------------------\n\nTITLE: Using Async For with Django 4.1+ QuerySets\nDESCRIPTION: Example showing how to iterate over Django 4.1+ QuerySets in an async context using 'async for' with list comprehension.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/async-support.md#2025-04-08_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nall_blogs = [blog async for blog in Blog.objects.all()]\n...\n```\n\n----------------------------------------\n\nTITLE: Schema-based Path Parameters\nDESCRIPTION: Shows how to use Pydantic schemas for complex path parameter validation and grouping.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/path-params.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nfrom ninja import Schema, Path\n\nclass DateSchema(Schema):\n    year: int\n    month: int\n    day: int\n\n    def value(self):\n        return date(self.year, self.month, self.day)\n\n\n@api.get(\"/events/{year}/{month}/{day}\")\ndef events(request, item: DateSchema = Path(...)):\n    return {\"date\": item.value()}\n```\n\n----------------------------------------\n\nTITLE: Router Class Throttling Initialization\nDESCRIPTION: Shows how to initialize a Router class with throttling configuration, limiting requests to 1000 per hour.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/throttling.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrouter = Router(..., throttle=[AnonRateThrottle('1000/h')])\n```\n\n----------------------------------------\n\nTITLE: Sharing Django Ninja Website URL\nDESCRIPTION: The official website URL for Django Ninja that can be shared on social media platforms to spread awareness about the project.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/help.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://django-ninja.dev\n```\n\n----------------------------------------\n\nTITLE: Operation-Level Throttling Implementation\nDESCRIPTION: Demonstrates operation-level throttling configuration that overrides global and router throttles, limiting users to 10000 requests per day.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/throttling.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja.throttling import UserRateThrottle\n\n@api.get('/some', throttle=[UserRateThrottle('10000/d')])\ndef some(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring NinjaAPI Documentation Rendering\nDESCRIPTION: Configuration block that specifies documentation rendering parameters for the NinjaAPI class, disabling signature display and category grouping.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/reference/api.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n::: ninja.main.NinjaAPI\n    rendering:\n      show_signature: False\n      group_by_category: False\n```\n\n----------------------------------------\n\nTITLE: Configuring Tags in Django Ninja Operations\nDESCRIPTION: Demonstrates how to use tags to group API operations in Django Ninja, both at the operation level and router level\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/reference/operations-parameters.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/hello/\")\ndef hello(request, name: str):\n    return {\"hello\": name}\n\n\n@api.post(\"/orders/\", tags=[\"orders\"])\ndef create_order(request, order: Order):\n    return {\"success\": True}\n```\n\nLANGUAGE: python\nCODE:\n```\napi.add_router(\"/events/\", events_router, tags=[\"events\"])\n\n# or using constructor: \n\nrouter = Router(tags=[\"events\"])\n```\n\n----------------------------------------\n\nTITLE: Implementing Employee Creation Endpoint\nDESCRIPTION: POST endpoint that creates a new Employee object using the input schema. It uses the schema's dict() method to convert the payload to kwargs for the Django model's create method.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/other/crud.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@api.post(\"/employees\")\ndef create_employee(request, payload: EmployeeIn):\n    employee = Employee.objects.create(**payload.dict())\n    return {\"id\": employee.id}\n```\n\n----------------------------------------\n\nTITLE: Code Style Checking\nDESCRIPTION: Commands to check code style using ruff and mypy, either directly or via Makefile.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/CONTRIBUTING.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nruff format --check ninja tests\nruff check ninja tests\nmypy ninja\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Configuring API Servers in Django Ninja\nDESCRIPTION: Demonstrates how to specify multiple server environments in the OpenAPI specification\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/reference/operations-parameters.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI\n\napi = NinjaAPI(\n        servers=[\n            {\"url\": \"https://stag.example.com\", \"description\": \"Staging env\"},\n            {\"url\": \"https://prod.example.com\", \"description\": \"Production env\"},\n        ]\n)\n```\n\n----------------------------------------\n\nTITLE: Code Reformatting\nDESCRIPTION: Commands to automatically format code using ruff, either directly or via Makefile.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/CONTRIBUTING.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nruff format ninja tests\nruff check ninja tests --fix\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake fmt\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Referencing Schema with create_schema()\nDESCRIPTION: Shows how to create a self-referencing schema using create_schema() with the name parameter for model_rebuild() functionality. The schema references itself through a manager field.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/index.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nUserSchema = create_schema(\n    User,\n    name='UserSchema',  # !!! this is important for model_rebuild()\n    fields=['id', 'username']\n    custom_fields=[\n        ('manager', 'UserSchema', None),\n    ]\n)\nUserSchema.model_rebuild()\n```\n\n----------------------------------------\n\nTITLE: Setting Operation Summary in Django Ninja\nDESCRIPTION: Shows how to customize the operation summary displayed in the API documentation using both default and custom values\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/reference/operations-parameters.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/hello/\")\ndef hello(request, name: str):\n    return {\"hello\": name}\n```\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/hello/\", summary=\"Say Hello\")\ndef hello(request, name: str):\n    return {\"hello\": name}\n```\n\n----------------------------------------\n\nTITLE: Typed Path Parameters in Django Ninja\nDESCRIPTION: Shows how to use type annotations with path parameters for automatic type validation and conversion.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/path-params.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/api/items/{item_id}\")\ndef read_item(request, item_id: int):\n    return {\"item_id\": item_id}\n```\n\n----------------------------------------\n\nTITLE: Using LimitOffsetPagination in Django Ninja\nDESCRIPTION: Shows how to explicitly use the LimitOffsetPagination class which is the default pagination implementation. This pagination style uses limit and offset parameters to control result windowing.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/pagination.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja.pagination import paginate, LimitOffsetPagination\n\n@api.get('/users', response=List[UserSchema])\n@paginate(LimitOffsetPagination)\ndef list_users(request):\n    return User.objects.all()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Documentation Viewer in Django Ninja\nDESCRIPTION: This code shows how to create a custom documentation viewer in Django Ninja. It defines a custom class 'MyDocsViewer' that inherits from 'DocsBase' and overrides the 'render_page' method.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/api-docs.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nform ninja.openapi.docs import DocsBase\n\nclass MyDocsViewer(DocsBase)\n    def render_page(self, request, api):\n        ... # return http response\n\n...\n\napi = NinjaAPI(docs=MyDocsViewer())\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Model with Schema\nDESCRIPTION: Demonstrates how to create a data model by inheriting from Schema. The model defines fields with their types, and optional fields are marked with default=None.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/body.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nfrom ninja import Schema\n\n\nclass Item(Schema):\n    name: str\n    description: str = None\n    price: float\n    quantity: int\n```\n\n----------------------------------------\n\nTITLE: Using RouterPaginated for Multiple Paginated Operations\nDESCRIPTION: Demonstrates how to automatically apply pagination to multiple API endpoints using the RouterPaginated class, which adds pagination to all operations that define a List response schema.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/pagination.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja.pagination import RouterPaginated\n\nrouter = RouterPaginated()\n\n\n@router.get(\"/items\", response=List[MySchema])\ndef items(request):\n    return MyModel.objects.all()\n\n@router.get(\"/other-items\", response=List[OtherSchema])\ndef other_items(request):\n    return OtherModel.objects.all()\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Parser for Django Ninja API\nDESCRIPTION: Basic example of initializing a Django Ninja API with a custom parser. This demonstrates how to specify an alternative parser when creating a new API instance.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/request-parsers.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napi = NinjaAPI(parser=MyYamlParser())\n```\n\n----------------------------------------\n\nTITLE: Schema with Context Access\nDESCRIPTION: Shows how to access request context in schema resolvers using Pydantic v2 features.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/index.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Data(Schema):\n    a: int\n    path: str = \"\"\n\n    @staticmethod\n    def resolve_path(obj, context):\n        request = context[\"request\"]\n        return request.path\n```\n\n----------------------------------------\n\nTITLE: Correctly Using QuerySets with sync_to_async\nDESCRIPTION: Proper way to handle Django QuerySets in async views by forcing evaluation with list() before returning from the sync_to_async wrapper.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/async-support.md#2025-04-08_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nall_blogs = await sync_to_async(list)(Blog.objects.all())\n...\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Schema Serialization Methods\nDESCRIPTION: Shows how to use from_orm(), dict(), and json() methods to serialize a single model instance.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/index.md#2025-04-08_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> person = Person.objects.get(id=1)\n>>> data = PersonSchema.from_orm(person)\n>>> data\nPersonSchema(id=1, name='Mr. Smith')\n>>> data.dict()\n{'id':1, 'name':'Mr. Smith'}\n>>> data.json()\n'{\"id\":1, \"name\":\"Mr. Smith\"}'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Synchronous API Operation in Django Ninja\nDESCRIPTION: Example of a synchronous API operation that sleeps for a specified delay and returns a word. Uses time.sleep() which blocks the thread during execution.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/async-support.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\n@api.get(\"/say-after\")\ndef say_after(request, delay: int, word: str):\n    time.sleep(delay)\n    return {\"saying\": word}\n```\n\n----------------------------------------\n\nTITLE: Example YAML Request Body Format\nDESCRIPTION: Sample YAML request body that can be processed by the custom YAML parser. This shows the structure of data that would be sent to the API endpoint.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/request-parsers.md#2025-04-08_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nints:\n - 0\n - 1\nstring: hello\nf: 3.14\n```\n\n----------------------------------------\n\nTITLE: JSON Request Body Example\nDESCRIPTION: Shows the JSON structure that matches the Item Schema. Includes both a complete example and one with an optional field omitted to demonstrate optionality.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/body.md#2025-04-08_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Katana\",\n    \"description\": \"An optional description\",\n    \"price\": 299.00,\n    \"quantity\": 10\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Katana\",\n    \"price\": 299.00,\n    \"quantity\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Extending OpenAPI Spec with Custom Attributes in Django Ninja\nDESCRIPTION: This snippet shows how to extend the OpenAPI specification with custom attributes in Django Ninja. It adds a 'termsOfService' URL to the info section of the OpenAPI spec.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/api-docs.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napi = NinjaAPI(\n   openapi_extra={\n       \"info\": {\n           \"termsOfService\": \"https://example.com/terms/\",\n       }\n   },\n   title=\"Demo API\",\n   description=\"This is a demo API with dynamic OpenAPI info section\"\n)\n\n```\n\n----------------------------------------\n\nTITLE: Path Parameters with Slashes\nDESCRIPTION: Shows how to handle path-like parameters that contain forward slashes using Django's path converter.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/path-params.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@api.get('/dir/{path:value}')\ndef someview(request, value: str):\n    return value\n```\n\n----------------------------------------\n\nTITLE: Implementing ORJSON Renderer in Django Ninja\nDESCRIPTION: Implementation of a high-performance JSON renderer using the ORJSON library. This renderer provides faster JSON serialization and supports additional data types like dataclass, datetime, numpy, and UUID instances.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/response-renderers.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport orjson\nfrom ninja import NinjaAPI\nfrom ninja.renderers import BaseRenderer\n\n\nclass ORJSONRenderer(BaseRenderer):\n    media_type = \"application/json\"\n\n    def render(self, request, data, *, response_status):\n        return orjson.dumps(data)\n\napi = NinjaAPI(renderer=ORJSONRenderer())\n```\n\n----------------------------------------\n\nTITLE: Multiple Path Parameters Implementation\nDESCRIPTION: Demonstrates how to handle multiple path parameters in a single endpoint.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/path-params.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/events/{year}/{month}/{day}\")\ndef events(request, year: int, month: int, day: int):\n    return {\"date\": [year, month, day]}\n```\n\n----------------------------------------\n\nTITLE: Using PatchDict for Optional Fields in Django Ninja\nDESCRIPTION: Shows how to use PatchDict to handle PATCH requests with optional fields, automatically converting all fields to optional.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/django-pydantic.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import PatchDict\n\nclass GroupSchema(Schema):\n    # You do not have to make fields optional it will be converted by PatchDict\n    name: str\n    description: str\n    due_date: date\n\n\n@api.patch(\"/patch/{pk}\")\ndef modify_data(request, pk: int, payload: PatchDict[GroupSchema]):\n    obj = MyModel.objects.get(pk=pk)\n\n    for attr, value in payload.items():\n        setattr(obj, attr, value)\n    \n    obj.save()\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response from YAML Parser\nDESCRIPTION: The JSON output that would be produced after the YAML request is processed by the API endpoint, showing how the parser correctly translates YAML to Python objects that are then returned as JSON.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/request-parsers.md#2025-04-08_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ints\": [\n    0,\n    1\n  ],\n  \"string\": \"hello\",\n  \"f\": 3.14\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing URL Name in Django Ninja\nDESCRIPTION: Shows how to specify a custom URL name using the url_name parameter in the API decorator. This overrides the default naming convention.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/urls.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/users\", url_name=\"user_list\")\ndef users(request):\n    ...\n\nusers_url = reverse_lazy(\"api-1.0.0:user_list\")\n```\n\n----------------------------------------\n\nTITLE: Serializing Multiple Model Instances\nDESCRIPTION: Demonstrates how to serialize multiple model instances or a queryset using list comprehension.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/index.md#2025-04-08_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> persons = Person.objects.all()\n>>> data = [PersonSchema.from_orm(i).dict() for i in persons]\n[{'id':1, 'name':'Mr. Smith'},{'id': 2, 'name': 'Mrs. Smith'}...]\n```\n\n----------------------------------------\n\nTITLE: Resolving API Documentation URL in Python\nDESCRIPTION: This code demonstrates how to resolve the URL for the API documentation view in Python using Django's reverse function. It shows how to get the URL for the 'openapi-view'.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/api-docs.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import reverse\n\nreverse('api-1.0.0:openapi-view')\n\n>>> '/api/docs'\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Deserialized Response Data\nDESCRIPTION: Example of accessing the deserialized response data using the data property instead of using json().\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/testing.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n    self.assertEqual(response.data, {\"msg\": \"Hello World\"})\n```\n\n----------------------------------------\n\nTITLE: Using Django HTTP Responses with Ninja API\nDESCRIPTION: Shows how to return regular Django HTTP responses and redirects from Ninja API endpoints.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/index.md#2025-04-08_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import HttpResponse\nfrom django.shortcuts import redirect\n\n\n@api.get(\"/http\")\ndef result_django(request):\n    return HttpResponse('some data')   # !!!!\n\n\n@api.get(\"/something\")\ndef some_redirect(request):\n    return redirect(\"/some-path\")  # !!!!\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in Test Requests\nDESCRIPTION: Example of setting cookies for API testing, both during TestClient instantiation and for individual requests.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/testing.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n    client = TestClient(router, COOKIES={\"A\": \"a\", \"B\": \"b\"})\n    # The request will be made with {\"A\": \"na\", \"B\": \"b\", \"C\": \"nc\"} cookies\n    response = client.get(\"/test-cookies\", COOKIES={\"A\": \"na\", \"C\": \"nc\"})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom HTTP Methods in Django Ninja\nDESCRIPTION: This snippet demonstrates how to use the api_operation decorator to implement other HTTP methods that don't have corresponding Django Ninja methods, such as HEAD and OPTIONS.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/operations.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@api.api_operation([\"HEAD\", \"OPTIONS\"], \"/path\")\ndef mixed_operation(request):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Linking to API Documentation in Django Template\nDESCRIPTION: This HTML snippet shows how to create a link to the API documentation in a Django template. It demonstrates using both the URL template tag and a hardcoded URL.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/api-docs.md#2025-04-08_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{% url 'api-1.0.0:openapi-view' %}\">API Docs</a>\n\n<a href=\"/api/docs\">API Docs</a>\n\n```\n\n----------------------------------------\n\nTITLE: Importing Schema from Django Ninja\nDESCRIPTION: Shows how to import the Schema class from Django Ninja, which is used to define request body structures. Schema is an alias for Pydantic models to avoid confusion with Django models.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/input/body.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nfrom ninja import Schema\n```\n\n----------------------------------------\n\nTITLE: Customizing Output Attribute in Custom Pagination\nDESCRIPTION: Shows how to change the default output attribute name from 'items' to a custom name like 'results' in a custom pagination class by setting the items_attribute property.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/pagination.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass CustomPagination(PaginationBase):\n    ...\n    class Output(Schema):\n        results: List[Any]\n        total: int\n        per_page: int\n    \n    items_attribute: str = \"results\"\n```\n\n----------------------------------------\n\nTITLE: Using URL Parameters in Nested Routers with Django Ninja\nDESCRIPTION: Demonstrates how to use URL parameters in nested routers by adding Path(...) to the function parameters. This allows for creating more complex and dynamic URL structures.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/routers.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.urls import path\nfrom ninja import NinjaAPI, Path, Router\n\napi = NinjaAPI()\nrouter = Router()\n\n@api.get(\"/add/{a}/{b}\")\ndef add(request, a: int, b: int):\n    return {\"result\": a + b}\n\n@router.get(\"/multiply/{c}\")\ndef multiply(request, c: int, a: int = Path(...), b: int = Path(...)):\n    return {\"result\": (a + b) * c}\n\napi.add_router(\"add/{a}/{b}\", router)\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"api/\", api.urls),\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Config from Django Model in Django Ninja\nDESCRIPTION: This code demonstrates how to create a custom schema with a modified Config class based on a Django model using the create_schema function from ninja.orm. It allows for further customization of the generated schema.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/response/config-pydantic.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import User\nfrom ninja.orm import create_schema\n\n\nBaseUserSchema = create_schema(User)\n\n\nclass UserSchema(BaseUserSchema):\n\n    class Config(BaseUserSchema.Config):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Defining Output Schema for Employee Retrieval\nDESCRIPTION: Output schema that extends the input schema by adding an id field. This schema will be used to structure the response data when retrieving employee information.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/other/crud.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass EmployeeOut(Schema):\n    id: int\n    first_name: str\n    last_name: str\n    department_id: int = None\n    birthdate: date = None\n```\n\n----------------------------------------\n\nTITLE: Customizing Swagger and Redoc Settings in Django Ninja\nDESCRIPTION: This code shows how to set custom settings for Swagger and Redoc documentation viewers in Django Ninja. It demonstrates setting 'persistAuthorization' for Swagger and 'disableSearch' for Redoc.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/api-docs.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import Redoc, Swagger\n\napi = NinjaAPI(docs=Swagger(settings={\"persistAuthorization\": True}))\n...\napi = NinjaAPI(docs=Redoc(settings={\"disableSearch\": True}))\n\n```\n\n----------------------------------------\n\nTITLE: Setting Default Parameter Values in Django Ninja\nDESCRIPTION: Shows how to set a default value for the name parameter, which will be used when the parameter is not provided in the request.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/step2.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/hello\")\ndef hello(request, name=\"world\"):\n    return f\"Hello {name}\"\n```\n\n----------------------------------------\n\nTITLE: Schema Meta Configuration\nDESCRIPTION: Example of using the new Meta class for ModelSchema configuration, replacing the deprecated Config class.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/whatsnew_v1.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass TxItem(ModelSchema):\n    class Meta:\n        model = Transaction\n        fields = [\"id\", \"account\", \"amount\", \"timestamp\"]\n```\n\n----------------------------------------\n\nTITLE: Pydantic Context Implementation\nDESCRIPTION: Example showing how to use Pydantic context with request object access during validation and serialization.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/whatsnew_v1.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Payload(Schema):\n    id: int\n    name: str\n    request_path: str\n\n    @staticmethod\n    def resolve_request_path(data, context):\n        request = context[\"request\"]\n        return request.get_full_path()\n```\n\n----------------------------------------\n\nTITLE: Documentation Viewer Configuration\nDESCRIPTION: Examples of configuring different documentation viewers (Swagger and Redoc).\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/whatsnew_v1.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI, Redoc, Swagger\n\n# use redoc\napi = NinjaAPI(docs=Redoc()))\n\n# use swagger:\napi = NinjaAPI(docs=Swagger())\n\n# set configuration for swagger:\napi = NinjaAPI(docs=Swagger({\"persistAuthorization\": True}))\n```\n\n----------------------------------------\n\nTITLE: View Decoration Examples\nDESCRIPTION: Examples showing incorrect and correct ways to decorate API views with cache_page.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/whatsnew_v1.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.views.decorators.cache import cache_page\n\n@api.get(\"/test\")\n@cache_page(5) # <----- will not work\ndef test_view(request):\n    return {\"some\": \"Complex data\"}\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja.decorators import decorate_view\n\n@api.get(\"/test\")\n@decorate_view(cache_page(5))\ndef test_view(request):\n    return str(datetime.now())\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Query String Input\nDESCRIPTION: Shows the JSON response returned when a name is provided to the hello endpoint via query string.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/step2.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"Hello you\"\n```\n\n----------------------------------------\n\nTITLE: Using Type Hints for Input Validation\nDESCRIPTION: Demonstrates how to use Python type hints to specify expected input types. Includes a math endpoint that performs operations on two integers.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/step2.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@api.get(\"/hello\")\ndef hello(request, name: str = \"world\"):\n    return f\"Hello {name}\"\n\n@api.get(\"/math\")\ndef math(request, a: int, b: int):\n    return {\"add\": a + b, \"multiply\": a * b}\n```\n\n----------------------------------------\n\nTITLE: Example API Response\nDESCRIPTION: Sample JSON response from the hello endpoint showing the expected output format.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/index.md#2025-04-08_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"Hello world\"\n```\n\n----------------------------------------\n\nTITLE: Creating First API Endpoint\nDESCRIPTION: Implementation of a simple GET endpoint that returns 'Hello world' using Django Ninja decorator syntax.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/index.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI\n\napi = NinjaAPI()\n\n@api.get(\"/hello\")\ndef hello(request):\n    return \"Hello world\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Django URL Patterns\nDESCRIPTION: URL configuration to include Django admin and Ninja API endpoints in the project's URL patterns.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/index.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.urls import path\nfrom .api import api\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"api/\", api.urls),\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Django Ninja API\nDESCRIPTION: Basic setup code to create a new NinjaAPI instance.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/index.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI\n\napi = NinjaAPI()\n```\n\n----------------------------------------\n\nTITLE: Configuring Operation IDs in Django Ninja\nDESCRIPTION: Shows how to set custom operation IDs and override the default operation ID generation behavior\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/reference/operations-parameters.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@api.post(\"/tasks\", operation_id=\"create_task\")\ndef new_task(request):\n    ...\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom ninja import NinjaAPI\n\nclass MySuperApi(NinjaAPI):\n\n    def get_openapi_operation_id(self, operation):\n        # here you can access operation ( .path , .view_func, etc) \n        return ...\n\napi = MySuperApi()\n\n@api.get(...)\n...\n```\n\n----------------------------------------\n\nTITLE: Multiple API Instances for Versioning in Django Ninja\nDESCRIPTION: Shows how to create multiple API instances with different versions and authentication methods in Django Ninja, demonstrating the versioning capability within a single Django project.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/motivation.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napi_v1 = NinjaAPI(version='1.0', auth=token_auth)\n...\napi_v2 = NinjaAPI(version='2.0', auth=token_auth)\n...\napi_private = NinjaAPI(auth=session_auth, urls_namespace='private_api')\n...\n\n\nurlpatterns = [\n    ...\n    path('api/v1/', api_v1.urls),\n    path('api/v2/', api_v2.urls),\n    path('internal-api/', api_private.urls),\n]\n```\n\n----------------------------------------\n\nTITLE: FastAPI Dependency Injection Example with Highlighted Lines\nDESCRIPTION: Demonstrates a FastAPI code example showing dependency injection for database session and user authentication, with highlighted lines showing verbose argument dependencies.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/motivation.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n...\n\napp = FastAPI()\n\n\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = decode(token)\n    if not user:\n        raise HTTPException(...)\n    return user\n\n\n@app.get(\"/task/{task_id}\", response_model=Task)\ndef read_user(\n        task_id: int,\n        db: Session = Depends(get_db), \n        current_user: User = Depends(get_current_user),\n    ):\n        ... use db with current_user ....\n```\n\n----------------------------------------\n\nTITLE: Installing Elasticsearch with Async Support\nDESCRIPTION: Command to install Elasticsearch 7.8.0 or higher which includes support for async operations.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/async-support.md#2025-04-08_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install elasticsearch>=7.8.0\n```\n\n----------------------------------------\n\nTITLE: Running Apache Benchmark Test on an Async API Endpoint\nDESCRIPTION: Command to test the performance of an async API endpoint by flooding it with 100 parallel requests using Apache Benchmark (ab).\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/async-support.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nab -c 100 -n 100 \"http://127.0.0.1:8000/api/say-after?delay=3&word=hello\"\n```\n\n----------------------------------------\n\nTITLE: Installing Uvicorn ASGI Server\nDESCRIPTION: Command to install Uvicorn, an ASGI server required to run Django applications with async views.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/async-support.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install uvicorn\n```\n\n----------------------------------------\n\nTITLE: Installing Django Ninja with Django 3.1+\nDESCRIPTION: Installation command for Django 3.1 or higher with django-ninja to enable async views support.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/guides/async-support.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install Django>=3.1 django-ninja\n```\n\n----------------------------------------\n\nTITLE: Async Authentication Implementation\nDESCRIPTION: Example of implementing async authentication using HttpBearer.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/whatsnew_v1.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Auth(HttpBearer):\n    async def authenticate(self, request, token):\n        await asyncio.sleep(1)\n        if token == \"secret\":\n            return token\n```\n\n----------------------------------------\n\nTITLE: CSRF Authentication Configuration\nDESCRIPTION: Example of configuring mixed authentication methods with CSRF protection.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/whatsnew_v1.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\napi = NinjaAPI(auth=[django_auth, Auth()])\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema for Strict Field Validation\nDESCRIPTION: Modification to the Employee input schema that enforces strict field validation. With the 'extra = \"forbid\"' configuration, any fields not defined in the schema will cause an error rather than being silently ignored.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/docs/tutorial/other/crud.md#2025-04-08_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass EmployeeIn(Schema):\n    # your fields here...\n\n    class Config:\n        extra = \"forbid\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Django Ninja API in Python\nDESCRIPTION: This snippet demonstrates how to create a basic API endpoint using Django Ninja. It defines a simple 'add' function that takes two integer parameters and returns their sum.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/README.md#2025-04-08_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom ninja import NinjaAPI\n\napi = NinjaAPI()\n\n\n@api.get(\"/add\")\ndef add(request, a: int, b: int):\n    return {\"result\": a + b}\n```\n\n----------------------------------------\n\nTITLE: Specifying Documentation Dependencies for Django Ninja\nDESCRIPTION: Defines exact versions of Python packages required for documentation generation: mkdocs-material for theme and styling, markdown-include for including markdown files, and mkdocstrings for Python API documentation generation.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/docs/requirements.txt#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmkdocs-material==9.5.4\nmarkdown-include==0.8.1\nmkdocstrings[python]==0.24.0\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Server\nDESCRIPTION: Commands to serve documentation locally using mkdocs for real-time preview of changes.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/CONTRIBUTING.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd docs/\nmkdocs serve\n```\n\n----------------------------------------\n\nTITLE: Running Coverage Tests\nDESCRIPTION: Commands to run test coverage analysis using pytest with coverage reporting or via Makefile.\nSOURCE: https://github.com/vitalik/django-ninja/blob/master/CONTRIBUTING.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest --cov=ninja --cov-report term-missing tests\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake test-cov\n```"
  }
]