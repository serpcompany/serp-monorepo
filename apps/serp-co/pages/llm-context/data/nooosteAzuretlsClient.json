[
  {
    "owner": "noooste",
    "repo": "azuretls-client",
    "content": "TITLE: Basic HTTP GET Request Example\nDESCRIPTION: Simple example demonstrating how to create a session and make a GET request using AzureTLS client.\nSOURCE: https://github.com/noooste/azuretls-client/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/Noooste/azuretls-client\"\n)\n\nfunc main() {\n    session := azuretls.NewSession()\n    defer session.Close()\n\n    // Make a request\n    response, err := session.Get(\"https://tls.peet.ws/api/all\")\n    if err != nil {\n        panic(err)\n    }\n    \n    fmt.Printf(\"Status: %d\\n\", response.StatusCode)\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Methods Implementation\nDESCRIPTION: Examples of implementing various HTTP methods including GET, POST, PUT, PATCH, DELETE, OPTIONS, HEAD, and CONNECT.\nSOURCE: https://github.com/noooste/azuretls-client/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nsession := azuretls.NewSession()\ndefer session.Close()\n\n// POST request\nresponse, err := session.Post(\"https://tls.peet.ws/api/all\", `{\"test\": \"test\"}`)\n\n// PUT request\nresponse, err := session.Put(\"https://tls.peet.ws/api/all\", `{\"test\": \"test\"}`)\n\n// Other methods follow similar patterns\n```\n\n----------------------------------------\n\nTITLE: Session Creation with Context\nDESCRIPTION: Examples showing how to create AzureTLS sessions with and without context.\nSOURCE: https://github.com/noooste/azuretls-client/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// without context\nsession := azuretls.NewSession()\n// don't forget to close the session when you no longer need it, to free up resources\ndefer session.Close() \n\n// or with context\nsession := azuretls.NewSessionWithContext(context.Background())\ndefer session.Close()\n```\n\n----------------------------------------\n\nTITLE: Installing AzureTLS Client with Go\nDESCRIPTION: Command to install the AzureTLS client library using Go modules.\nSOURCE: https://github.com/noooste/azuretls-client/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Noooste/azuretls-client\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling JSON Response in AzureTLS Go Client\nDESCRIPTION: Demonstrates how to unmarshal a JSON response body into a Go struct using the response.JSON method in AzureTLS.\nSOURCE: https://github.com/noooste/azuretls-client/blob/main/README.md#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nsession := azuretls.NewSession()\ndefer session.Close()\n\nresponse, err := session.Get(\"https://tls.peet.ws/api/all\")\n\nif err != nil {\n    panic(err)\n}\n\nvar data map[string]any\n\nif err := response.JSON(&data); err != nil {\n    panic(err)\n}\n\nfmt.Println(data)\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy in AzureTLS Go Client\nDESCRIPTION: Demonstrates how to set a proxy for an AzureTLS session, make a request, and handle the response. The example uses an HTTP proxy with authentication.\nSOURCE: https://github.com/noooste/azuretls-client/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nsession := azuretls.NewSession()\ndefer session.Close()\n\nif err := session.SetProxy(\"http://username:password@ip:port\"); err != nil {\n    panic(err)\n}\n\nresponse, err := session.Get(\"https://api.ipify.org\")\n\nif err != nil {\n    panic(err)\n}\n\nfmt.Println(response.StatusCode, string(response.Body))\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies in AzureTLS Go Client\nDESCRIPTION: Demonstrates how to manage cookies in an AzureTLS session. The example sets a custom cookie before making a request, although AzureTLS automatically manages cookies for subsequent requests.\nSOURCE: https://github.com/noooste/azuretls-client/blob/main/README.md#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nsession := azuretls.NewSession()\ndefer session.Close()\n\nparsed, err := url.Parse(\"https://tls.peet.ws/api/all\")\n\nsession.CookieJar.SetCookies(parsed, []*http.Cookie{\n    {\n        Name:  \"test\",\n        Value: \"test\",\n    },\n})\n\nresponse, err := session.Get(\"https://tls.peet.ws/api/all\")\n\nif err != nil {\n    panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Using WebSocket in AzureTLS Go Client\nDESCRIPTION: Shows how to create and use a WebSocket connection with AzureTLS. The example establishes a connection and sends a JSON message.\nSOURCE: https://github.com/noooste/azuretls-client/blob/main/README.md#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nsession := azuretls.NewSession()\ndefer session.Close()\n\nws, err := session.NewWebsocket(\"wss://demo.piesocket.com/v3/channel_123?api_key=VCXCEuvhGcBDP7XhiJJUDvR1e1D3eiVjgZ9VRiaV&notify_self\", 1024, 1024,\n\t\tazuretls.OrderedHeaders{\n\t\t\t{\"User-Agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36\"},\n\t\t},\n)\nif err = ws.WriteJSON(map[string]string{\n  \"event\": \"new_message\",\n}); err != nil {\n  panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Secure SSL Pinning in AzureTLS Go Client\nDESCRIPTION: Shows how to make a secure request with SSL pinning enabled (default behavior) in AzureTLS. This ensures connecting to the intended server and mitigates man-in-the-middle attacks.\nSOURCE: https://github.com/noooste/azuretls-client/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nsession := azuretls.NewSession()\ndefer session.Close()\n\n// secured request\nresponse, err := session.Get(\"https://tls.peet.ws/api/all\")\n\nif err != nil {\n    panic(err)\n}\n\nfmt.Println(response.StatusCode, string(response.Body))\n```\n\n----------------------------------------\n\nTITLE: URL Encoding in AzureTLS Go Client\nDESCRIPTION: Shows how to use the azuretls.UrlEncode function to convert a struct into a URL-encoded string, useful for URLs or application/x-www-form-urlencoded content types.\nSOURCE: https://github.com/noooste/azuretls-client/blob/main/README.md#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nsession := azuretls.NewSession()\ndefer session.Close()\n\ntype Foo struct {\n\tBar string `url:\"bar\"`\n\tBaz string `url:\"baz\"`\n}\n\nbody := azuretls.UrlEncode(Foo{\n\tBar: \"bar\",\n\tBaz: \"baz baz baz\",\n})\n\nresponse, err := session.Post(\"https://tls.peet.ws/api/all\", body)\n\nif err != nil {\n    panic(err)\n}\n\nfmt.Println(response.StatusCode, string(response.Body))\n```\n\n----------------------------------------\n\nTITLE: Browser Preset Configuration\nDESCRIPTION: Example showing how to use predefined browser configurations in AzureTLS.\nSOURCE: https://github.com/noooste/azuretls-client/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// without context\nsession := azuretls.NewSession()\n// don't forget to close the session when you no longer need it, to free up resources\ndefer session.Close() \n\nsession.Browser = azuretls.Firefox // JA3 and HTTP2 specifications will be automatically set\n```\n\n----------------------------------------\n\nTITLE: Using PreHook and Callback in AzureTLS Go Client\nDESCRIPTION: Shows how to use PreHook to modify outgoing requests and CallBack to handle responses in AzureTLS. The example sets a custom user-agent and prints response details.\nSOURCE: https://github.com/noooste/azuretls-client/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nsession := azuretls.NewSession()\ndefer session.Close()\n\nsession.PreHook = func(request *azuretls.Request) error {\n    request.Header.Set(\"user-agent\", \"test\")\n    return nil\n}\n\nsession.CallBack = func(request *azuretls.Request, response *azuretls.Response, err error) error {\n    fmt.Println(response.StatusCode, string(response.Body))\n    return nil\n}\n\nresponse, err := session.Get(\"https://tls.peet.ws/api/all\")\n\nif err != nil {\n    panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout in AzureTLS Go Client\nDESCRIPTION: Demonstrates how to set a timeout for requests in an AzureTLS session. This example sets a 5-second timeout before making a GET request.\nSOURCE: https://github.com/noooste/azuretls-client/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nsession := azuretls.NewSession()\ndefer session.Close()\n\nsession.SetTimeout(5 * time.Second)\n\nresponse, err := session.Get(\"https://tls.peet.ws/api/all\")\n\nif err != nil {\n    panic(err)\n}\n\nfmt.Println(response.StatusCode, string(response.Body))\n```\n\n----------------------------------------\n\nTITLE: Logging Requests and Responses in AzureTLS Go Client\nDESCRIPTION: Shows how to use the session.Log method to display request and response information in the console, with options to ignore specific paths or domains.\nSOURCE: https://github.com/noooste/azuretls-client/blob/main/README.md#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nsession := azuretls.NewSession()\n\nsession.Log( \n    \"/any/path/to/ignore\", \n    \"can.ignore.this\", \n    \"*.all.subdomains\",\n)\n\nsession.Get(\"https://www.google.com\")\n```\n\n----------------------------------------\n\nTITLE: Dumping Requests and Responses in AzureTLS Go Client\nDESCRIPTION: Demonstrates how to use the session.Dump method to save request and response data to a specified directory, with options to ignore certain paths or domains.\nSOURCE: https://github.com/noooste/azuretls-client/blob/main/README.md#2025-04-23_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nsession := azuretls.NewSession()\n\nsession.Dump(\"./my_dump_dir\", \n    \"/any/path/to/ignore\", \n    \"can.ignore.this\", \n    \"*.all.subdomains\",\n)\n\nsession.Get(\"https://www.google.com\")\n// the request and response dump will be in the \"my_dump_dir\" directory.\n```\n\n----------------------------------------\n\nTITLE: Header Order Configuration\nDESCRIPTION: Example showing how to maintain header order in HTTP requests using OrderedHeaders.\nSOURCE: https://github.com/noooste/azuretls-client/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nsession := azuretls.NewSession()\ndefer session.Close()\n\n// it will keep the order\nsession.OrderedHeaders = azuretls.OrderedHeaders{\n    {\"user-agent\", \"test\"},\n    {\"content-type\", \"application/json\"},\n    {\"accept\", \"application/json\"},\n}\n```\n\n----------------------------------------\n\nTITLE: Manual SSL Pin Setting in AzureTLS Go Client\nDESCRIPTION: Demonstrates how to manually set SSL pins for improved security. The example adds pins for a specific URL before making a request, enhancing protection against potential threats.\nSOURCE: https://github.com/noooste/azuretls-client/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nsession := azuretls.NewSession()\ndefer session.Close()\n\nsession.AddPins(&url.URL{\n        Scheme: \"https\",\n        Host:   \"httpbin.org\",\n    }, []string{\n        \"j5bzD/UjYVE+0feXsngcrVs3i1vSaoOOtPgpLBb9Db8=\",\n        \"18tkPyr2nckv4fgo0dhAkaUtJ2hu2831xlO2SKhq8dg=\",\n        \"++MBgDH5WGvL9Bcn5Be30cRcL0f5O+NyoXuWtQdX1aI=\",\n        \"KwccWaCgrnaw6tsrrSO61FgLacNgG2MMLq8GE6+oP5I=\",\n})\n\n_, err := session.Get(\"https://httpbin.org/get\")\n\nif err != nil {\n    panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: TLS ClientHello Modification\nDESCRIPTION: Example demonstrating how to modify TLS ClientHello settings using JA3 fingerprints.\nSOURCE: https://github.com/noooste/azuretls-client/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nsession := azuretls.NewSession()\ndefer session.Close()\n\n// First method\nif err := session.ApplyJa3(\"771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,45-13-43-0-16-65281-51-18-11-27-35-23-10-5-17613-21,29-23-24-25-26,0\", azuretls.Chrome); err != nil {\n    panic(err)\n}\n\n// Second method\nsession.GetClientHelloSpec = azuretls.GetLastChromeVersion\n```\n\n----------------------------------------\n\nTITLE: Disabling SSL Pinning in AzureTLS Go Client\nDESCRIPTION: Shows how to disable SSL pinning in AzureTLS by setting InsecureSkipVerify to true. This is not recommended for production use as it reduces security.\nSOURCE: https://github.com/noooste/azuretls-client/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nsession := azuretls.NewSession()\ndefer session.Close()\n\nsession.InsecureSkipVerify = true\n\n// do it at your own risk\nresponse, err := session.Get(\"https://tls.peet.ws/api/all\")\n\nif err != nil {\n    panic(err)\n}\n\nfmt.Println(response.StatusCode, string(response.Body))\n```"
  }
]