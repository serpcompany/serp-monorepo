[
  {
    "owner": "awslabs",
    "repo": "aws-lambda-rust-runtime",
    "content": "TITLE: Deploying Lambda Functions with Cargo Lambda\nDESCRIPTION: Shell commands to deploy Rust Lambda functions to AWS using Cargo Lambda and invoke them remotely.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda deploy\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda deploy my-first-lambda-function\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda invoke --remote \\\n  --data-ascii '{\"command\": \"hi\"}' \\\n  --output-format json \\\n  my-first-lambda-function\n```\n\n----------------------------------------\n\nTITLE: Basic Lambda Function Implementation in Rust\nDESCRIPTION: A simple Rust function that receives an event with a firstName field and returns a greeting message. It uses the lambda_runtime crate to handle the Lambda function execution.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse lambda_runtime::{service_fn, LambdaEvent, Error};\nuse serde_json::{json, Value};\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    let func = service_fn(func);\n    lambda_runtime::run(func).await?;\n    Ok(())\n}\n\nasync fn func(event: LambdaEvent<Value>) -> Result<Value, Error> {\n    let (event, _context) = event.into_parts();\n    let first_name = event[\"firstName\"].as_str().unwrap_or(\"world\");\n\n    Ok(json!({ \"message\": format!(\"Hello, {}!\", first_name) }))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Lambda Function with Cargo Lambda\nDESCRIPTION: Command for creating a new Rust Lambda function using Cargo Lambda's new subcommand, which generates an initial package with source code.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/README.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda new YOUR_FUNCTION_NAME\n```\n\n----------------------------------------\n\nTITLE: Running Local Lambda Development Server\nDESCRIPTION: Command to start the Cargo Lambda local development server, which watches for changes and compiles the function automatically.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/README.md#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda watch\n```\n\n----------------------------------------\n\nTITLE: Lambda Function with External Service Initialization (Rust)\nDESCRIPTION: Example of a Lambda function that initializes AWS SDK clients outside the handler function to improve performance through execution environment reuse. This approach follows AWS Lambda best practices by reusing connections across invocations.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/lambda-http/README.md#2025-04-17_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_dynamodb::model::AttributeValue;\nuse chrono::Utc;\nuse lambda_http::{run, http::{StatusCode, Response}, service_fn, Error, RequestExt, IntoResponse, Request};\nuse serde_json::json;\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .without_time()\n        .with_max_level(tracing::Level::INFO)\n        .init();\n\n    let config = aws_config::from_env()\n        .load()\n        .await;\n\n    let dynamodb_client = aws_sdk_dynamodb::Client::new(&config);\n\n    run(service_fn(|event: Request| function_handler(&dynamodb_client, event))).await\n}\n\npub async fn function_handler(dynamodb_client: &aws_sdk_dynamodb::Client, event: Request) -> Result<impl IntoResponse, Error> {\n    let table = std::env::var(\"TABLE_NAME\").expect(\"TABLE_NAME must be set\");\n\n    let name = event.query_string_parameters_ref()\n        .and_then(|params| params.first(\"name\"))\n        .unwrap_or_else(|| \"stranger\")\n        .to_string();\n\n    dynamodb_client\n        .put_item()\n        .table_name(table)\n        .item(\"ID\", AttributeValue::S(Utc::now().timestamp().to_string()))\n        .item(\"name\", AttributeValue::S(name.to_owned()))\n        .send()\n        .await?;\n\n    // Represents an HTTP response\n    let response = Response::builder()\n        .status(StatusCode::OK)\n        .header(\"Content-Type\", \"application/json\")\n        .body(json!({\n            \"message\": format!(\"Hello, {}!\", name),\n          }).to_string())\n        .map_err(Box::new)?;\n\n    Ok(response)\n}\n```\n\n----------------------------------------\n\nTITLE: Processing JSON Payload in Lambda HTTP Handler (Rust)\nDESCRIPTION: Example of a Lambda function that accepts a JSON payload in the request body, deserializes it into a Rust structure, and returns a JSON response. Uses lambda_http's RequestPayloadExt trait to extract and parse the request body.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/lambda-http/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse lambda_http::{run, http::{StatusCode, Response}, service_fn, Error, IntoResponse, Request, RequestPayloadExt};\nuse serde::{Deserialize, Serialize};\nuse serde_json::json;\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .without_time()\n        .with_max_level(tracing::Level::INFO)\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n\npub async fn function_handler(event: Request) -> Result<impl IntoResponse, Error> {\n    let body = event.payload::<MyPayload>()?;\n\n    let response = Response::builder()\n        .status(StatusCode::OK)\n        .header(\"Content-Type\", \"application/json\")\n        .body(json!({\n            \"message\": \"Hello World\",\n            \"payload\": body,\n          }).to_string())\n        .map_err(Box::new)?;\n\n    Ok(response)\n}\n\n#[derive(Deserialize, Serialize, Debug, Clone)]\npub struct MyPayload {\n    pub prop1: String,\n    pub prop2: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Query String Parameters in Lambda HTTP Handler (Rust)\nDESCRIPTION: Example of a Lambda function that extracts query string parameters from the request. Uses the RequestExt trait to access parsed query parameters and returns a personalized greeting as a JSON response.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/lambda-http/README.md#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse lambda_http::{run, http::{StatusCode, Response}, service_fn, Error, RequestExt, IntoResponse, Request};\nuse serde_json::json;\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .without_time()\n        .with_max_level(tracing::Level::INFO)\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n\npub async fn function_handler(event: Request) -> Result<impl IntoResponse, Error> {\n    let name = event.query_string_parameters_ref()\n        .and_then(|params| params.first(\"name\"))\n        .unwrap_or_else(|| \"stranger\")\n        .to_string();\n\n    // Represents an HTTP response\n    let response = Response::builder()\n        .status(StatusCode::OK)\n        .header(\"Content-Type\", \"application/json\")\n        .body(json!({\n            \"message\": format!(\"Hello, {}!\", name),\n          }).to_string())\n        .map_err(Box::new)?;\n\n    Ok(response)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring lambda_http Dependency with Feature Flags in Cargo.toml\nDESCRIPTION: This snippet demonstrates how to configure the lambda_http dependency in Cargo.toml to enable specific feature flags. It disables default features and enables only the desired service integration, in this case, API Gateway REST API support.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/lambda-http/README.md#2025-04-17_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies.lambda_http]\nversion = \"0.5.3\"\ndefault-features = false\nfeatures = [\"apigw_rest\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Lambda Extension in Rust\nDESCRIPTION: Creates a simple Lambda extension that handles INVOKE and SHUTDOWN events. Includes logging configuration using tracing_subscriber and implements the main extension service function.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/lambda-extension/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse lambda_extension::{service_fn, Error, LambdaEvent, NextEvent};\n\nasync fn my_extension(event: LambdaEvent) -> Result<(), Error> {\n    match event.next {\n        NextEvent::Shutdown(_e) => {\n            // do something with the shutdown event\n        }\n        NextEvent::Invoke(_e) => {\n            // do something with the invoke event\n        }\n    }\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        // disable printing the name of the module in every log line.\n        .with_target(false)\n        // disabling time is handy because CloudWatch will add the ingestion time.\n        .without_time()\n        .init();\n\n    let func = service_fn(my_extension);\n    lambda_extension::run(func).await\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Lambda Events with Cargo Feature Selection\nDESCRIPTION: Command to add aws_lambda_events as a dependency with specific feature flags enabled. This example shows how to enable only API Gateway and Application Load Balancer event support while disabling default features for faster compilation.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/lambda-events/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo add aws_lambda_events --no-default-features --features apigw,alb\n```\n\n----------------------------------------\n\nTITLE: Setting up RDS IAM Authentication with Rust Lambda Function\nDESCRIPTION: Instructions for building and deploying a Rust Lambda function with an RDS instance using AWS CDK. The setup includes installing dependencies, deploying with CDK, creating database users with IAM permissions, and testing the function.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/lambda-rds-iam-auth/cdk/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\nnpx cdk deploy\n```\n\n----------------------------------------\n\nTITLE: Implementing Log Processor Extension in Rust\nDESCRIPTION: Implements a Lambda extension that processes function and extension log records. Uses SharedService to handle log processing functionality.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/lambda-extension/README.md#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse lambda_extension::{service_fn, Error, Extension, LambdaLog, LambdaLogRecord, SharedService};\nuse tracing::info;\n\nasync fn handler(logs: Vec<LambdaLog>) -> Result<(), Error> {\n    for log in logs {\n        match log.record {\n            LambdaLogRecord::Function(_record) => {\n                // do something with the function log record\n            },\n            LambdaLogRecord::Extension(_record) => {\n                // do something with the extension log record\n            },\n            _ => (),\n        }\n    }\n\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    let logs_processor = SharedService::new(service_fn(handler));\n\n    Extension::new().with_logs_processor(logs_processor).run().await?\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Lambda Event Objects with Serde\nDESCRIPTION: Rust code example demonstrating how to create custom event structures for Lambda functions using Serde for serialization and deserialization.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/README.md#2025-04-17_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Serialize, Deserialize};\nuse serde_json::json;\nuse std::error::Error;\n\n#[derive(Serialize, Deserialize)]\npub struct NewIceCreamEvent {\n  pub flavors: Vec<String>,\n}\n\n#[derive(Serialize, Deserialize)]\npub struct NewIceCreamResponse {\n  pub flavors_added_count: usize,\n}\n\nfn main() -> Result<(), Box<Error>> {\n    let flavors = json!({\n      \"flavors\": [\n        \"Nocciola\",\n        \"抹茶\",\n        \"आम\"\n      ]\n    });\n\n    let event: NewIceCreamEvent = serde_json::from_value(flavors)?;\n    let response = NewIceCreamResponse {\n        flavors_added_count: event.flavors.len(),\n    };\n    serde_json::to_string(&response)?;\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Telemetry Processor Extension in Rust\nDESCRIPTION: Implements a Lambda extension that processes telemetry events, including function records and platform initialization events. Uses SharedService for telemetry processing.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/lambda-extension/README.md#2025-04-17_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse lambda_extension::{service_fn, Error, Extension, LambdaTelemetry, LambdaTelemetryRecord, SharedService};\nuse tracing::info;\n\nasync fn handler(events: Vec<LambdaTelemetry>) -> Result<(), Error> {\n    for event in events {\n        match event.record {\n            LambdaTelemetryRecord::Function(record) => {\n                // do something with the function log record\n            },\n            LambdaTelemetryRecord::PlatformInitStart {\n                initialization_type: _,\n                phase: _,\n                runtime_version: _,\n                runtime_version_arn: _,\n            } => {\n                // do something with the PlatformInitStart event\n            },\n            // more types of telemetry events are available\n            _ => (),\n        }\n    }\n\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    let telemetry_processor = SharedService::new(service_fn(handler));\n\n    Extension::new().with_telemetry_processor(telemetry_processor).run().await?\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Lambda Functions\nDESCRIPTION: Rust code example for testing Lambda functions that handle HTTP events by creating a request object from a fixture file and calling the handler.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/README.md#2025-04-17_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\n#[test]\nfn test_my_lambda_handler() {\n  let input = include_str!(\"apigw_proxy_request.json\");\n\n  let request = lambda_http::request::from_str(input)\n    .expect(\"failed to create request\");\n\n  let response = my_lambda_handler(request).await.expect(\"failed to handle request\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lambda Request Authorizer (Rust)\nDESCRIPTION: Example of a Lambda request authorizer that validates requests using authorization headers. This example uses the lower-level lambda_runtime crate rather than lambda_http since custom authorizers require direct access to API Gateway-specific event types.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/lambda-http/README.md#2025-04-17_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_lambda_events::apigw:{\n    ApiGatewayCustomAuthorizerRequestTypeRequest, ApiGatewayCustomAuthorizerResponse, ApiGatewayCustomAuthorizerPolicy, IamPolicyStatement,\n};\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\nuse serde_json::json;\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .without_time()\n        .with_max_level(tracing::Level::INFO)\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n\npub async fn function_handler(event: LambdaEvent<ApiGatewayCustomAuthorizerRequestTypeRequest>) -> Result<ApiGatewayCustomAuthorizerResponse, Error> {\n    // do something with the event payload\n    let method_arn = event.payload.method_arn.unwrap();\n    // for example we could use the authorization header\n    if let Some(token) = event.payload.headers.get(\"authorization\") {\n        // do something\n\n        return Ok(custom_authorizer_response(\n            \"ALLOW\",\n            \"some_principal\",\n            &method_arn,\n        ));\n    }\n\n    Ok(custom_authorizer_response(\n      &\"DENY\".to_string(),\n      \"\",\n      &method_arn))\n}\n\npub fn custom_authorizer_response(effect: &str, principal: &str, method_arn: &str) -> ApiGatewayCustomAuthorizerResponse {\n    let stmt = IamPolicyStatement {\n        action: vec![\"execute-api:Invoke\".to_string()],\n        resource: vec![method_arn.to_owned()],\n        effect: Some(effect.to_owned()),\n    };\n    let policy = ApiGatewayCustomAuthorizerPolicy {\n        version: Some(\"2012-10-17\".to_string()),\n        statement: vec![stmt],\n    };\n    ApiGatewayCustomAuthorizerResponse {\n        principal_id: Some(principal.to_owned()),\n        policy_document: policy,\n        context: json!({ \"email\": principal }), // https://github.com/awslabs/aws-lambda-rust-runtime/discussions/548\n        usage_identifier_key: None,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Lambda Extensions with cargo-lambda\nDESCRIPTION: Commands for building Lambda extensions using cargo-lambda tool, including options for both x86 and ARM architectures.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/lambda-extension/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release --extension\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release --extension --arm64\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling with Diagnostic in Rust Lambda\nDESCRIPTION: A custom implementation of error handling for Lambda functions using the Diagnostic struct. This provides more control over the error_type field in error responses.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse lambda_runtime::{Diagnostic, Error, LambdaEvent};\n\n#[derive(Debug)]\nstruct ErrorResponse(&'static str);\n\nimpl From<ErrorResponse> for Diagnostic {\n    fn from(error: ErrorResponse) -> Diagnostic {\n        Diagnostic {\n            error_type: \"MyErrorType\".into(),\n            error_message: error.0.to_string(),\n        }\n    }\n}\n\nasync fn handler(_event: LambdaEvent<()>) -> Result<(), ErrorResponse> {\n  Err(ErrorResponse(\"this is an error response\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Lambda Extension Registration with AWS Lambda Runtime API Client in Rust\nDESCRIPTION: This example demonstrates how to create and register a Lambda extension using the lambda-runtime-api-client library. It shows how to build a registration request with extension name and event subscriptions, then send it to the Lambda Runtime API using an asynchronous client.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/lambda-runtime-api-client/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse http::{Method, Request};\nuse hyper::Body;\nuse lambda_runtime_api_client::{build_request, Client, Error};\n\nfn register_request(extension_name: &str, events: &[&str]) -> Result<Request<Body>, Error> {\n    let events = serde_json::json!({ \"events\": events });\n\n    let req = build_request()\n        .method(Method::POST)\n        .uri(\"/2020-01-01/extension/register\")\n        .header(\"Lambda-Extension-Name\", extension_name)\n        .body(Body::from(serde_json::to_string(&events)?))?;\n\n    Ok(req)\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    let client = Client::builder().build()?;\n    let request = register_request(\"my_extension\", &[\"INVOKE\"])?;\n\n    client.call(request).await\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Lambda Function with AWS CLI\nDESCRIPTION: AWS CLI command to invoke a Lambda function with a JSON payload and output the result to a file. Uses raw-in-base64-out format which is required for AWS CLI version 2.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/README.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\naws lambda invoke\n  --cli-binary-format raw-in-base64-out \\\n  --function-name rustTest \\\n  --payload '{\"command\": \"Say Hi!\"}' \\\n  output.json\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Anyhow in Rust Lambda\nDESCRIPTION: Using the anyhow crate for error handling in Lambda functions. This example uses the anyhow feature flag in lambda_runtime to transform anyhow::Error into a Diagnostic.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse lambda_runtime::{Diagnostic, LambdaEvent};\n\nasync fn handler(_event: LambdaEvent<Request>) -> Result<(), Diagnostic> {\n  Err(anyhow::anyhow!(\"this is an error\").into())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Tracing for Lambda Functions\nDESCRIPTION: Rust code example for setting up tracing in a Lambda function using the built-in tracing support in the lambda_runtime crate.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/README.md#2025-04-17_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\nuse lambda_runtime::{run, service_fn, tracing, Error};\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing::init_default_subscriber();\n    run(service_fn(|event| tracing::info!(?event))).await\n}\n```\n\n----------------------------------------\n\nTITLE: Running NPM and CDK Commands for TypeScript Project\nDESCRIPTION: A list of useful commands for managing a CDK TypeScript project, including compiling TypeScript to JavaScript, running tests, deploying stacks, and generating CloudFormation templates.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/advanced-appconfig-feature-flags/cdk/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `npm run build`   compile typescript to js\n* `npm run watch`   watch for changes and compile\n* `npm run test`    perform the jest unit tests\n* `npx cdk deploy`  deploy this stack to your default AWS account/region\n* `npx cdk diff`    compare deployed stack with current state\n* `npx cdk synth`   emits the synthesized CloudFormation template\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Rust Lambda Handler\nDESCRIPTION: Rust code example for unit testing a Lambda function handler by deserializing test JSON into the expected input structure and calling the handler directly.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/README.md#2025-04-17_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n#[test]\nfn test_my_lambda_handler() {\n  let input = serde_json::from_str(\"{\\\"command\\\": \\\"Say Hi!\\\"}\").expect(\"failed to parse event\");\n  let context = lambda_runtime::Context::default();\n\n  let event = lambda_runtime::LambdaEvent::new(input, context);\n\n  my_lambda_handler(event).await.expect(\"failed to handle event\");\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Lambda Function URL with Streaming Response\nDESCRIPTION: Command to verify a deployed Lambda function with streaming enabled. Uses curl with verbose output and prevents buffering to observe the streaming behavior.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-streaming-response/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v -N <function-url>\n```\n\n----------------------------------------\n\nTITLE: Creating SQS Event Source Mapping for AWS Lambda Function\nDESCRIPTION: AWS CLI command to create an event source mapping between an SQS queue and Lambda function. Configures the consumer function to process messages from the specified SQS queue with a batch size of 1.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/advanced-sqs-multiple-functions-shared-data/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws lambda create-event-source-mapping \\\n--function-name consumer \\\n--region <region> \\\n--event-source-arn <your-SQS-queue-ARN> \\\n--batch-size 1\n```\n\n----------------------------------------\n\nTITLE: AWS SAM Template for Rust Lambda Function\nDESCRIPTION: YAML template for deploying a Rust Lambda function using AWS SAM. Configures a function with ARM64 architecture, provided.al2023 runtime, and exports the function name as an output.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/README.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\n\nResources:\n  HelloWorldFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      MemorySize: 128\n      Architectures: [\"arm64\"]\n      Handler: bootstrap\n      Runtime: provided.al2023\n      Timeout: 5\n      CodeUri: target/lambda/basic/\n\nOutputs:\n  FunctionName:\n    Value: !Ref HelloWorldFunction\n    Description: Name of the Lambda function\n```\n\n----------------------------------------\n\nTITLE: Building Lambda Functions with Cargo Lambda\nDESCRIPTION: Shell commands to build Rust Lambda functions using Cargo Lambda for both x86_64 and ARM64 architectures.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Creating Database User with IAM Authentication Permissions\nDESCRIPTION: SQL commands to create a user named 'lambda' and grant it the 'rds_iam' role, which is required for IAM authentication to work with the RDS instance.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/lambda-rds-iam-auth/cdk/README.md#2025-04-17_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE USER lambda; GRANT rds_iam TO lambda;\n```\n\n----------------------------------------\n\nTITLE: Installing Cargo Lambda with Package Managers\nDESCRIPTION: Different methods for installing Cargo Lambda, a Cargo plugin for managing Rust Lambda functions, using various package managers.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap cargo-lambda/cargo-lambda\nbrew install cargo-lambda\n```\n\nLANGUAGE: bash\nCODE:\n```\nscoop bucket add cargo-lambda https://github.com/cargo-lambda/scoop-cargo-lambda\nscoop install cargo-lambda/cargo-lambda\n```\n\nLANGUAGE: bash\nCODE:\n```\npip3 install cargo-lambda\n```\n\n----------------------------------------\n\nTITLE: Deploying Lambda Extensions\nDESCRIPTION: Commands for configuring AWS credentials and deploying Lambda extensions as layers.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/lambda-extension/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naws configure\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda deploy --extension\n```\n\n----------------------------------------\n\nTITLE: Creating Lambda Function with AWS CLI\nDESCRIPTION: AWS CLI command to create a new Lambda function using a compiled Rust function. It specifies the runtime as Amazon Linux 2023 with environment variables for debugging and active tracing.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/README.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\naws lambda create-function --function-name rustTest \\\n  --handler bootstrap \\\n  --zip-file fileb://./target/lambda/basic/bootstrap.zip \\\n  --runtime provided.al2023 \\ # Change this to provided.al2 if you would like to use Amazon Linux 2\n  --role arn:aws:iam::XXXXXXXXXXXXX:role/your_lambda_execution_role \\\n  --environment Variables={RUST_BACKTRACE=1} \\\n  --tracing-config Mode=Active\n```\n\n----------------------------------------\n\nTITLE: Building Rust Lambda Functions with ZIP Output\nDESCRIPTION: Command to build a Rust Lambda function and generate a ZIP archive suitable for deployment with the AWS CLI. The command targets ARM64 architecture and builds in release mode.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/README.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release --arm64 --output-format zip\n```\n\n----------------------------------------\n\nTITLE: Deploying the AWS CDK Stack\nDESCRIPTION: Command to deploy the AWS CDK stack to AWS, creating all the necessary resources including AppConfig, Lambda function, and CloudWatch alarms.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/advanced-appconfig-feature-flags/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncdk deploy\n```\n\n----------------------------------------\n\nTITLE: Invoking Lambda Function Locally\nDESCRIPTION: Command to invoke a Lambda function running in the local Cargo Lambda development server with a JSON payload.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/README.md#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda invoke <lambda-function-name> --data-ascii '{ \"command\": \"hi\" }'\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Function with cargo-lambda\nDESCRIPTION: Commands for building a Rust Lambda function using cargo-lambda. Produces a release build that can be deployed to AWS Lambda.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-s3-thumbnail/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release\n```\n\n----------------------------------------\n\nTITLE: Invoking AWS Lambda Function with Test Data\nDESCRIPTION: Command to invoke the Lambda function with a JSON payload specifying the target S3 bucket\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-sdk/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda invoke --data-ascii '{\"bucket\":\"my-bucket\"}'\n```\n\n----------------------------------------\n\nTITLE: Testing Lambda Function with cURL\nDESCRIPTION: cURL command to send a POST request to a locally running Lambda function with a JSON payload, simulating a Lambda URL invocation.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/README.md#2025-04-17_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -X POST \\\n  'http://127.0.0.1:9000/lambda-url/<lambda-function-name>/' \\\n  -H 'content-type: application/json' \\\n  -d '{ \"command\": \"hi\" }'\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS Lambda Telemetry Extension as a Layer\nDESCRIPTION: This command deploys the built AWS Lambda Telemetry extension as a layer using cargo-lambda. It will provide an ARN for the extension layer that can be used in Lambda functions.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-telemetry-basic/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncargo lambda deploy --extension\n```\n\n----------------------------------------\n\nTITLE: Deploying Rust Lambda Function to AWS\nDESCRIPTION: Command to deploy a built Rust function to AWS Lambda using cargo-lambda. Requires specifying an IAM role with appropriate permissions for the Lambda function.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-shared-resource/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda deploy --iam-role YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Function with cargo-lambda\nDESCRIPTION: Command to build a Rust Lambda function using cargo-lambda for deployment to AWS Lambda. This compiles the function in release mode for better performance.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-axum-diesel/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release\n```\n\n----------------------------------------\n\nTITLE: Installing cargo-lambda for AWS Lambda Rust Extensions\nDESCRIPTION: Command to install cargo-lambda, a tool for building and deploying Rust-based AWS Lambda functions and extensions.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-logs-custom-service/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release --extension\n```\n\n----------------------------------------\n\nTITLE: Deploying Rust Lambda with SAM CLI\nDESCRIPTION: Command to deploy a Rust Lambda function using the AWS SAM CLI with guided setup for parameters and confirmation.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/README.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsam deploy --guided\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS Lambda Function to AWS\nDESCRIPTION: Command to deploy the Rust Lambda function to AWS Lambda using cargo-lambda. Requires specifying an IAM role that grants necessary permissions for the function to execute.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-axum-diesel/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda deploy --iam-role YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS Lambda Function for SQS in Rust\nDESCRIPTION: Command to deploy the built Rust function to AWS Lambda using cargo-lambda. Requires specifying an IAM role for execution permissions.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-sqs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncargo lambda deploy --iam-role YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Invoking SAM-deployed Lambda Function\nDESCRIPTION: AWS CLI command to invoke a Lambda function deployed with SAM, passing a JSON payload and capturing the output to a file.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/README.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\naws lambda invoke\n  --cli-binary-format raw-in-base64-out \\\n  --function-name HelloWorldFunction-XXXXXXXX \\ # Replace with the actual function name\n  --payload '{\"command\": \"Say Hi!\"}' \\\n  output.json\n```\n\n----------------------------------------\n\nTITLE: Building Rust Lambda Function with cargo-lambda\nDESCRIPTION: Command to build a Rust Lambda function using cargo-lambda, targeting the release profile for production-ready binaries.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-axum/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release\n```\n\n----------------------------------------\n\nTITLE: Running AWS Lambda Function Locally with Credentials\nDESCRIPTION: Command to run the Lambda function locally using cargo lambda watch with AWS profile credentials\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-sdk/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_PROFILE=my-profile cargo lambda watch\n```\n\n----------------------------------------\n\nTITLE: Deploying Rust AWS Lambda Function with cargo-lambda\nDESCRIPTION: Command to deploy a Rust-based AWS Lambda function to AWS using cargo-lambda. Requires specifying an IAM role.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-shared-resource/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncargo lambda deploy --iam-role YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Deploying Rust Lambda Function to AWS\nDESCRIPTION: Command to deploy a built Rust Lambda function to AWS using cargo-lambda. Requires specifying an IAM role for Lambda execution permissions.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-axum/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda deploy --iam-role YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS Lambda Rust Extension as Layer\nDESCRIPTION: Command to deploy the built AWS Lambda Logs extension as a Lambda layer. This step makes the extension available for use in Lambda functions.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-basic/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda deploy --extension\n```\n\n----------------------------------------\n\nTITLE: Installing cargo-lambda for AWS Lambda Rust Extensions\nDESCRIPTION: Command to install cargo-lambda, a tool for building and deploying Rust-based AWS Lambda functions and extensions.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-logs-kinesis-firehose/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release --extension\n```\n\n----------------------------------------\n\nTITLE: Building Lambda Function with cargo-lambda\nDESCRIPTION: Command to build the Rust Lambda function for deployment using cargo-lambda tool\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-axum-diesel-ssl/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release\n```\n\n----------------------------------------\n\nTITLE: Deploying Lambda Extension Layer\nDESCRIPTION: Command to deploy the built extension as an AWS Lambda layer using cargo-lambda.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-custom-service/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda deploy --extension\n```\n\n----------------------------------------\n\nTITLE: Deploying Lambda Extension Layer\nDESCRIPTION: Command to deploy the built extension as an AWS Lambda layer using cargo-lambda.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-combined/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda deploy --extension\n```\n\n----------------------------------------\n\nTITLE: Deploying Lambda Function to AWS\nDESCRIPTION: Command to deploy the built Rust function to AWS Lambda with specified IAM role\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-axum-diesel-ssl/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda deploy --iam-role YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Rust Extension for ARM64 Architecture\nDESCRIPTION: Command to build the Rust extension specifically for ARM64 architecture, which is useful for AWS Lambda functions running on ARM-based processors.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-logs-custom-service/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release --extension --arm64\n```\n\n----------------------------------------\n\nTITLE: Building Rust Lambda Function\nDESCRIPTION: Command to build a Rust Lambda function for release using cargo-lambda.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-lambda/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release\n```\n\n----------------------------------------\n\nTITLE: Building Rust Lambda Function\nDESCRIPTION: Command to build an AWS Lambda function using cargo-lambda tool with release optimization.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-basic-lambda/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Rust Function for ARM64 Architecture\nDESCRIPTION: Command to build a Rust Lambda function specifically for ARM64 architecture (AWS Graviton). This provides better price-performance compared to x86 for many workloads.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-error-handling/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS Lambda Rust Extension as a Layer\nDESCRIPTION: Command to deploy the built Rust extension as an AWS Lambda layer. This command will return an ARN that can be used in Lambda functions.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-logs-basic/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda deploy --extension\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS Lambda Function with cargo-lambda\nDESCRIPTION: This command deploys the built AWS Lambda function to AWS using cargo-lambda. It requires specifying an IAM role for execution permissions.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-axum-middleware/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncargo lambda deploy --iam-role YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Building Lambda Function for ARM64\nDESCRIPTION: Command to build a Rust Lambda function specifically for ARM64 architecture.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-dynamodb/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS Lambda Function to AWS\nDESCRIPTION: Command for deploying the built Rust Lambda function to AWS using cargo-lambda, requiring an IAM role to be specified.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-s3-thumbnail/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda deploy --iam-role YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Deploying a Rust Lambda function to AWS\nDESCRIPTION: Command to deploy the built Rust Lambda function to AWS using cargo-lambda. Requires specifying an IAM role with appropriate permissions for Lambda execution.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-axum-apigw-authorizer/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda deploy --iam-role YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Function for ARM64 Architecture\nDESCRIPTION: Command to build the AWS Lambda function specifically for ARM64 architecture using cargo-lambda. This is useful for deploying to AWS Graviton2 processors.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-query-parameters/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Deploying a Rust Lambda Function to AWS\nDESCRIPTION: Command to deploy the built Rust Lambda function to AWS, specifying the required IAM role for execution permissions.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-raw-path/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda deploy --iam-role YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Function with Rust\nDESCRIPTION: Command to build the AWS Lambda function using cargo-lambda. This compiles the Rust code for deployment to AWS Lambda.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-query-parameters/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncargo lambda build --release\n```\n\n----------------------------------------\n\nTITLE: Building Rust Lambda Function for ARM64 Architecture\nDESCRIPTION: Command to build a Rust Lambda function specifically for ARM64 architecture (AWS Graviton processors), which can provide better performance and cost-effectiveness.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-axum/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Deploying a Rust Lambda Extension as a Layer\nDESCRIPTION: Command to deploy the built Rust Lambda extension as a layer, which will provide an ARN that can be used with Lambda functions.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-logs-kinesis-firehose/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda deploy --extension\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS Lambda Function with Rust\nDESCRIPTION: Command to deploy the built AWS Lambda function to AWS using cargo-lambda. Requires specifying an IAM role for execution permissions.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-query-parameters/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncargo lambda deploy --iam-role YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Building Rust Lambda Function for ARM64\nDESCRIPTION: Command to build an AWS Lambda function for ARM64 architecture using cargo-lambda tool with release optimization.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-basic-lambda/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Rust Extension\nDESCRIPTION: Command to build the AWS Lambda Logs extension using cargo-lambda. This compiles the Rust code and prepares it for deployment as a Lambda extension.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-basic/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release --extension\n```\n\n----------------------------------------\n\nTITLE: Building Rust Lambda Function for ARM64\nDESCRIPTION: Command to build a Rust Lambda function specifically for ARM64 architecture.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-lambda/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Building Lambda Function for ARM64 Architecture\nDESCRIPTION: Command to build the Rust Lambda function for ARM64 architecture with release optimization using cargo-lambda.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-cognito-post-confirmation/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Telemetry Extension with cargo-lambda\nDESCRIPTION: This command builds the AWS Lambda Telemetry extension using cargo-lambda. It creates a release build and specifies that it's an extension.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-telemetry-basic/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncargo lambda build --release --extension\n```\n\n----------------------------------------\n\nTITLE: Deploying Rust Lambda Function\nDESCRIPTION: Command to deploy a built Rust Lambda function to AWS, requiring an IAM role specification.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-lambda/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda deploy --iam-role YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Building Lambda Extension with Cargo Lambda\nDESCRIPTION: Command to build an AWS Lambda extension using cargo-lambda for x86_64 architecture.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-combined/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release --extension\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Lambda Logs Extension with cargo-lambda\nDESCRIPTION: Commands for installing cargo-lambda, building a Rust-based Lambda extension, and deploying it as a layer. The extension can then be attached to Lambda functions using the returned ARN.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-custom-events/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release --extension\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda deploy --extension\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Rust Function with cargo-lambda\nDESCRIPTION: Command to build the Rust-based AWS Lambda function using cargo-lambda in release mode.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-cors/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncargo lambda build --release\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Rust Extension using cargo-lambda\nDESCRIPTION: Command to build a Rust-based AWS Lambda extension using cargo-lambda. This builds the extension in release mode.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-logs-basic/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release --extension\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Rust Function with cargo-lambda\nDESCRIPTION: Commands for building a Rust Lambda function using cargo-lambda. This includes steps for both x86 and ARM64 architectures.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-error-thiserror/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release\n```\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS Lambda Rust Function with cargo-lambda\nDESCRIPTION: Command to deploy the built Rust-based AWS Lambda function to AWS using cargo-lambda, specifying an IAM role.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-cors/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncargo lambda deploy --iam-role YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Building Lambda Internal Extension with cargo-lambda\nDESCRIPTION: Command to build a Rust Lambda internal extension using cargo-lambda. This targets the default x86_64 architecture.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-internal-flush/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Rust Function with cargo-lambda\nDESCRIPTION: Command to build a Rust Lambda function for deployment using cargo-lambda. This builds the function in release mode for optimal performance.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-error-handling/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Rust Function for ARM64 Architecture\nDESCRIPTION: Command to build the Rust-based AWS Lambda function for ARM64 architecture using cargo-lambda in release mode.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-cors/README.md#2025-04-17_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Building an AWS Lambda Rust function with cargo-lambda\nDESCRIPTION: Command to build a Rust Lambda function using cargo-lambda for x86 architecture. This builds the function in release mode for production deployment.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-axum-apigw-authorizer/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Function for SQS in Rust\nDESCRIPTION: Command to build the Rust-based AWS Lambda function using cargo-lambda. This compiles the function for release deployment.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-sqs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncargo lambda build --release\n```\n\n----------------------------------------\n\nTITLE: Building a Rust Lambda Function for ARM64 Architecture\nDESCRIPTION: Command to build a Rust AWS Lambda function specifically for ARM64 architecture, which can provide better performance and cost benefits for certain workloads.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-raw-path/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Deploying Rust Lambda Function\nDESCRIPTION: Command to deploy a built Rust Lambda function to AWS using cargo-lambda tool with IAM role specification.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-basic-lambda/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda deploy --iam-role YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Function with cargo-lambda\nDESCRIPTION: This command builds the AWS Lambda function using cargo-lambda for release. It compiles the Rust code and prepares it for deployment.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-axum-middleware/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncargo lambda build --release\n```\n\n----------------------------------------\n\nTITLE: Building Lambda Function with Cargo Lambda\nDESCRIPTION: Command to build a Rust Lambda function for x86_64 architecture using cargo-lambda tool.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-dynamodb/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS Lambda Rust Function with cargo-lambda\nDESCRIPTION: Command for deploying a Rust Lambda function to AWS using cargo-lambda. Requires specifying an IAM role for execution permissions.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-error-thiserror/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda deploy --iam-role YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Installing cargo-lambda for AWS Lambda Rust Function\nDESCRIPTION: Command to install cargo-lambda, a tool for building and deploying Rust-based AWS Lambda functions.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-cors/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncargo-lambda/cargo-lambda#installation\n```\n\n----------------------------------------\n\nTITLE: Deploying Lambda Function\nDESCRIPTION: Command to deploy the built Rust Lambda function to AWS, requiring an IAM role parameter.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-dynamodb/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda deploy --iam-role YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Deploying Lambda Function to AWS\nDESCRIPTION: Command to deploy a built Rust Lambda function to AWS using cargo-lambda. Requires specifying an IAM role for execution permissions.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-error-error-crates-integration/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda deploy --iam-role YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Installing cargo-lambda for Rust AWS Lambda Function Development\nDESCRIPTION: Command to install cargo-lambda, a tool for building and deploying Rust-based AWS Lambda functions.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-shared-resource/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncargo-lambda/cargo-lambda#installation\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS Lambda Rust Function\nDESCRIPTION: Command to deploy the built Rust Lambda function to AWS using cargo-lambda. Requires specifying an IAM role with appropriate Lambda execution permissions.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-error-handling/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda deploy --iam-role YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS Lambda Function with Cargo Lambda\nDESCRIPTION: Command to deploy the built AWS Lambda function to AWS using cargo-lambda, requiring specification of an IAM role.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/advanced-sqs-partial-batch-failures/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda deploy --iam-role YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Building a Rust Lambda function for ARM64 architecture\nDESCRIPTION: Command to build a Rust Lambda function specifically for ARM64 architecture (AWS Graviton) using cargo-lambda. Building for ARM64 can provide cost savings and performance benefits.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-axum-apigw-authorizer/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Building Rust Lambda Function for ARM64 Architecture\nDESCRIPTION: Command to build a Rust AWS Lambda function specifically for ARM64 architecture (AWS Graviton processors). This can provide better performance and cost benefits for certain workloads.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-shared-resource/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Building Rust AWS Lambda Function with cargo-lambda\nDESCRIPTION: Command to build a Rust-based AWS Lambda function using cargo-lambda in release mode.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-shared-resource/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncargo lambda build --release\n```\n\n----------------------------------------\n\nTITLE: Building Lambda Function with cargo-lambda\nDESCRIPTION: Command to build a Rust Lambda function for deployment using cargo-lambda. This builds the function in release mode for standard x86_64 architecture.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-error-error-crates-integration/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Function for ARM64 Architecture in Rust\nDESCRIPTION: Command to build the Rust-based AWS Lambda function for ARM64 architecture using cargo-lambda. This is useful for deploying to ARM-based Lambda environments.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-sqs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Building Rust AWS Lambda Function\nDESCRIPTION: Command to build the Rust AWS Lambda function using cargo-lambda in release mode.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-lambda-external-runtime/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncargo lambda build --release\n```\n\n----------------------------------------\n\nTITLE: Building Lambda Function for ARM64 Architecture\nDESCRIPTION: Command to build a Rust Lambda function specifically for ARM64 architecture using cargo-lambda, which can result in better performance and lower costs on AWS Graviton processors.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-error-error-crates-integration/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Function for ARM64 Architecture\nDESCRIPTION: Command to build the AWS Lambda function specifically for ARM64 architecture using cargo-lambda.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/advanced-sqs-partial-batch-failures/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Building a Rust Lambda Function with cargo-lambda\nDESCRIPTION: Command to build a Rust AWS Lambda function for deployment using cargo-lambda. This compiles the function in release mode for optimal performance.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-raw-path/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Rust Extension for ARM64 Architecture\nDESCRIPTION: Command to build a Rust-based AWS Lambda extension specifically for the ARM64 architecture in release mode.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-logs-basic/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release --extension --arm64\n```\n\n----------------------------------------\n\nTITLE: Deploying Lambda Function to AWS\nDESCRIPTION: Command to deploy the built Rust Lambda function to AWS Lambda using cargo-lambda.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-cognito-post-confirmation/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncargo lambda deploy\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Rust Function with cargo-lambda\nDESCRIPTION: Command to build a Rust Lambda function using cargo-lambda for deployment to AWS Lambda. This creates an optimized release build of the function.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-streaming-response/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Function for ARM64 Architecture\nDESCRIPTION: Command to build a Rust Lambda function for AWS Graviton2 processors (ARM64 architecture) using cargo-lambda, which can provide better performance and cost-efficiency for certain workloads.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-axum-diesel/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Deploying Rust Lambda Function with Function URL\nDESCRIPTION: Command to deploy a built Rust function to AWS Lambda with a function URL endpoint enabled. Requires specifying an IAM role with permissions for Lambda execution.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-streaming-response/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda deploy --enable-function-url --iam-role YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Building Rust Lambda Function with cargo-lambda\nDESCRIPTION: Command to build a Rust AWS Lambda function using cargo-lambda in release mode. This creates a deployment package that can be used with AWS Lambda.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-shared-resource/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Telemetry Extension for ARM64 Architecture\nDESCRIPTION: This command builds the AWS Lambda Telemetry extension specifically for ARM64 architecture using cargo-lambda. It creates a release build, specifies that it's an extension, and targets ARM64.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-telemetry-basic/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncargo lambda build --release --extension --arm64\n```\n\n----------------------------------------\n\nTITLE: Installing cargo-lambda for Rust AWS Lambda Development\nDESCRIPTION: Command to install cargo-lambda, a tool for building and deploying Rust-based AWS Lambda functions.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-lambda-external-runtime/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncargo-lambda/cargo-lambda#installation\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Function with Cargo Lambda\nDESCRIPTION: Command to build the AWS Lambda function using cargo-lambda for release deployment.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/advanced-sqs-partial-batch-failures/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release\n```\n\n----------------------------------------\n\nTITLE: Building a Rust Lambda Extension for ARM64 Architecture\nDESCRIPTION: Command to build the Rust Lambda extension specifically for ARM64 architecture, which is required for AWS Graviton-based Lambda functions.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-logs-kinesis-firehose/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release --extension --arm64\n```\n\n----------------------------------------\n\nTITLE: Deploying Rust AWS Lambda Function\nDESCRIPTION: Command to deploy the built Rust AWS Lambda function to AWS using cargo-lambda. Requires specifying an IAM role.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-lambda-external-runtime/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncargo lambda deploy --iam-role YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Deploying Lambda Internal Extension to AWS\nDESCRIPTION: Command to deploy the built Rust Lambda internal extension to AWS Lambda service. Requires an IAM role to be specified.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-internal-flush/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda deploy --iam-role YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Building Rust AWS Lambda Function for ARM64 Architecture\nDESCRIPTION: Command to build a Rust-based AWS Lambda function for ARM64 architecture using cargo-lambda in release mode.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-shared-resource/README.md#2025-04-17_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Installing cargo-lambda for AWS Lambda Rust Extension\nDESCRIPTION: Command to install cargo-lambda, a tool for building and deploying Rust-based AWS Lambda functions and extensions.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-basic/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release --extension\n```\n\n----------------------------------------\n\nTITLE: Building Lambda Function with cargo-lambda (x86)\nDESCRIPTION: Command to build the Rust Lambda function for deployment using cargo-lambda with release optimization.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-cognito-post-confirmation/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncargo lambda build --release\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Rust Extension for ARM64\nDESCRIPTION: Command to build the AWS Lambda Logs extension specifically for ARM64 architecture. This is useful for deploying to Lambda functions running on ARM-based processors.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-basic/README.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release --extension --arm64\n```\n\n----------------------------------------\n\nTITLE: Building Lambda Extension for ARM64\nDESCRIPTION: Command to build the AWS Lambda extension using cargo-lambda specifically for ARM64 architecture.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-custom-service/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release --extension --arm64\n```\n\n----------------------------------------\n\nTITLE: Building Lambda Extension for ARM64\nDESCRIPTION: Command to build an AWS Lambda extension using cargo-lambda specifically for ARM64 architecture.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-combined/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release --extension --arm64\n```\n\n----------------------------------------\n\nTITLE: Building Lambda Internal Extension for ARM64 Architecture\nDESCRIPTION: Command to build a Rust Lambda internal extension specifically for ARM64 architecture using cargo-lambda.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-internal-flush/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Building Lambda Extension with cargo-lambda\nDESCRIPTION: Command to build the AWS Lambda extension using cargo-lambda for x86_64 architecture.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-custom-service/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release --extension\n```\n\n----------------------------------------\n\nTITLE: Building Rust AWS Lambda Function for ARM64\nDESCRIPTION: Command to build the Rust AWS Lambda function specifically for ARM64 architecture using cargo-lambda in release mode.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-lambda-external-runtime/README.md#2025-04-17_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS Lambda Rust Extension as a Layer\nDESCRIPTION: Command to deploy the built Rust extension as an AWS Lambda layer, which will provide an ARN that can be used with Lambda functions.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-logs-custom-service/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda deploy --extension\n```\n\n----------------------------------------\n\nTITLE: Building Lambda Logs Extension for ARM64 Architecture\nDESCRIPTION: Command for building a Rust-based Lambda extension specifically for ARM64 architecture using cargo-lambda.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/extension-custom-events/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release --extension --arm64\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Function for ARM64 Architecture\nDESCRIPTION: Command for building a Rust Lambda function targeting ARM64 architecture using cargo-lambda, which is useful for AWS Graviton2 processors.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-s3-thumbnail/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Building AWS Lambda Function for ARM 64 Architecture\nDESCRIPTION: This command builds the AWS Lambda function specifically for ARM 64 architecture using cargo-lambda. It's useful for deploying to ARM-based Lambda environments.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-axum-middleware/README.md#2025-04-17_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Building Rust Lambda Function for ARM64 Architecture\nDESCRIPTION: Command to build a Rust Lambda function specifically for ARM64 architecture (AWS Graviton processors). This creates a release build optimized for ARM64.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/basic-streaming-response/README.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: Building Lambda Function for ARM64\nDESCRIPTION: Command to build the Rust Lambda function specifically for ARM64 architecture\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-axum-diesel-ssl/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo lambda build --release --arm64\n```\n\n----------------------------------------\n\nTITLE: JSON Lambda Error Structure\nDESCRIPTION: The expected JSON structure when a Lambda function invocation fails. AWS Lambda expects errors to be returned in this format.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error_type\": \"the type of error raised\",\n  \"error_message\": \"a string description of the error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Lambda Function URL in Bash\nDESCRIPTION: Demonstrates the output format for the Lambda Function URL when enabled. This URL provides direct access to the Lambda function without API Gateway, and is created when the ENABLE_LAMBDA_RUST_AXUM_FUNCTION_URL environment variable is set to true.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-axum/cdk/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nCdkStack.AxumFunctionUrl = https://7st53uq3rpk4jweki2ek765gty0icvuf.lambda-url.us-east-1.on.aws/\n```\n\n----------------------------------------\n\nTITLE: Displaying API Gateway Endpoint URL in Bash\nDESCRIPTION: Shows the output format for the API Gateway endpoint URL after stack deployment. This URL is used to access the Axum app deployed in AWS Lambda.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/http-axum/cdk/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCdkStack.axumEndpointC1B330D3 = https://sr0e4dqg1b.execute-api.us-east-1.amazonaws.com/prod/\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm for CDK Deployment\nDESCRIPTION: Command to install the necessary npm dependencies in the CDK directory before building and deploying the AWS CDK stack.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/advanced-appconfig-feature-flags/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Building the CDK Stack for Deployment\nDESCRIPTION: Command to build the AWS CDK stack defined in TypeScript before deployment.\nSOURCE: https://github.com/awslabs/aws-lambda-rust-runtime/blob/main/examples/advanced-appconfig-feature-flags/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```"
  }
]