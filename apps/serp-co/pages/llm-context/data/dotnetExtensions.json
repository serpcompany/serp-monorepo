[
  {
    "owner": "dotnet",
    "repo": "extensions",
    "content": "TITLE: Combined Features Implementation\nDESCRIPTION: Demonstrates implementation combining telemetry, caching, and tool calling features.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.OpenAI/README.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel;\nusing Microsoft.Extensions.AI;\nusing Microsoft.Extensions.Caching.Distributed;\nusing Microsoft.Extensions.Caching.Memory;\nusing Microsoft.Extensions.Options;\nusing OpenTelemetry.Trace;\n\n// Configure telemetry\nvar sourceName = Guid.NewGuid().ToString();\nvar tracerProvider = OpenTelemetry.Sdk.CreateTracerProviderBuilder()\n    .AddSource(sourceName)\n    .AddConsoleExporter()\n    .Build();\n\n// Configure caching\nIDistributedCache cache = new MemoryDistributedCache(Options.Create(new MemoryDistributedCacheOptions()));\n\n// Configure tool calling\nvar chatOptions = new ChatOptions\n{\n    Tools = [AIFunctionFactory.Create(GetPersonAge)]\n};\n\nIChatClient openaiClient =\n    new OpenAI.Chat.ChatClient(\"gpt-4o-mini\", Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\"))\n    .AsIChatClient();\n\nIChatClient client = new ChatClientBuilder(openaiClient)\n    .UseDistributedCache(cache)\n    .UseFunctionInvocation()\n    .UseOpenTelemetry(sourceName: sourceName, configure: c => c.EnableSensitiveData = true)\n    .Build();\n\nfor (int i = 0; i < 3; i++)\n{\n    Console.WriteLine(await client.GetResponseAsync(\"How much older is Alice than Bob?\", chatOptions));\n}\n\n[Description(\"Gets the age of a person specified by name.\")]\nstatic int GetPersonAge(string personName) =>\n    personName switch\n    {\n        \"Alice\" => 42,\n        \"Bob\" => 35,\n        _ => 26,\n    };\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Layered EmbeddingGenerator in C#\nDESCRIPTION: This snippet demonstrates how to configure an EmbeddingGenerator with distributed caching and OpenTelemetry tracing. It uses a SampleEmbeddingGenerator as the base and adds layers of functionality through the builder pattern.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\nusing Microsoft.Extensions.Caching.Distributed;\nusing Microsoft.Extensions.Caching.Memory;\nusing Microsoft.Extensions.Options;\nusing OpenTelemetry.Trace;\n\n// Configure OpenTelemetry exporter\nvar sourceName = Guid.NewGuid().ToString();\nvar tracerProvider = OpenTelemetry.Sdk.CreateTracerProviderBuilder()\n    .AddSource(sourceName)\n    .AddConsoleExporter()\n    .Build();\n\n// Explore changing the order of the intermediate \"Use\" calls to see that impact\n// that has on what gets cached, traced, etc.\nvar generator = new EmbeddingGeneratorBuilder<string, Embedding<float>>(\n        new SampleEmbeddingGenerator(new Uri(\"http://coolsite.ai\"), \"my-custom-model\"))\n    .UseDistributedCache(new MemoryDistributedCache(Options.Create(new MemoryDistributedCacheOptions())))\n    .UseOpenTelemetry(sourceName: sourceName)\n    .Build();\n\nvar embeddings = await generator.GenerateAsync(\n[\n    \"What is AI?\",\n    \"What is .NET?\",\n    \"What is AI?\"\n]);\n\nforeach (var embedding in embeddings)\n{\n    Console.WriteLine(string.Join(\", \", embedding.Vector.ToArray()));\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Web API Integration with Azure AI Inference\nDESCRIPTION: Demonstrates integration with ASP.NET Core Minimal API to create a simple chat endpoint. This example shows how to expose AI capabilities through a web API.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.AzureAIInference/README.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nusing Azure;\nusing Azure.AI.Inference;\nusing Microsoft.Extensions.AI;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddSingleton(new ChatCompletionsClient(\n        new(\"https://models.inference.ai.azure.com\"),\n        new AzureKeyCredential(builder.Configuration[\"GH_TOKEN\"]!)));\n\nbuilder.Services.AddChatClient(services =>\n    services.GetRequiredService<ChatCompletionsClient>().AsIChatClient(\"gpt-4o-mini\"));\n\nvar app = builder.Build();\n\napp.MapPost(\"/chat\", async (IChatClient client, string message) =>\n{\n    var response = await client.GetResponseAsync(message);\n    return response.Message;\n});\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Basic Chat Implementation\nDESCRIPTION: Demonstrates basic chat implementation using OpenAI ChatClient.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.OpenAI/README.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\n\nIChatClient client =\n    new OpenAI.Chat.ChatClient(\"gpt-4o-mini\", Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\"))\n    .AsIChatClient();\n\nConsole.WriteLine(await client.GetResponseAsync(\"What is AI?\"));\n```\n\n----------------------------------------\n\nTITLE: Interactive Chat Loop with History\nDESCRIPTION: Shows how to maintain chat history in an interactive conversation loop\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nList<ChatMessage> history = [];\nwhile (true)\n{\n    Console.Write(\"Q: \");\n    history.Add(new(ChatRole.User, Console.ReadLine()));\n\n    var response = await client.GetResponseAsync(history);\n    Console.WriteLine(response);\n\n    history.AddMessages(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Telemetry, Caching, and Tool Calling in Ollama\nDESCRIPTION: Shows an advanced implementation that combines telemetry, caching, and tool calling features with Ollama. This comprehensive example demonstrates how to integrate multiple features to create a robust AI chat solution with monitoring, performance optimization, and function invocation.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Ollama/README.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel;\nusing Microsoft.Extensions.AI;\nusing Microsoft.Extensions.Caching.Distributed;\nusing Microsoft.Extensions.Caching.Memory;\nusing Microsoft.Extensions.Options;\nusing OpenTelemetry.Trace;\n\n// Configure telemetry\nvar sourceName = Guid.NewGuid().ToString();\nvar tracerProvider = OpenTelemetry.Sdk.CreateTracerProviderBuilder()\n    .AddSource(sourceName)\n    .AddConsoleExporter()\n    .Build();\n\n// Configure caching\nIDistributedCache cache = new MemoryDistributedCache(Options.Create(new MemoryDistributedCacheOptions()));\n\n// Configure tool calling\nvar chatOptions = new ChatOptions\n{\n    Tools = [AIFunctionFactory.Create(GetPersonAge)]\n};\n\nIChatClient ollamaClient = new OllamaChatClient(new Uri(\"http://localhost:11434/\"), \"llama3.1\");\n\nIChatClient client = new ChatClientBuilder(ollamaClient)\n    .UseDistributedCache(cache)\n    .UseFunctionInvocation()\n    .UseOpenTelemetry(sourceName: sourceName, configure: c => c.EnableSensitiveData = true)\n    .Build();\n\nfor (int i = 0; i < 3; i++)\n{\n    Console.WriteLine(await client.GetResponseAsync(\"How much older is Alice than Bob?\", chatOptions));\n}\n\n[Description(\"Gets the age of a person specified by name.\")]\nstatic int GetPersonAge(string personName) =>\n    personName switch\n    {\n        \"Alice\" => 42,\n        \"Bob\" => 35,\n        _ => 26,\n    };\n```\n\n----------------------------------------\n\nTITLE: Using Rate Limiting Chat Client\nDESCRIPTION: Example of using the custom rate limiting chat client implementation.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\nusing System.Threading.RateLimiting;\n\nvar client = new RateLimitingChatClient(\n    new OllamaChatClient(new Uri(\"http://localhost:11434\"), \"llama3.1\"),\n    new ConcurrencyLimiter(new() { PermitLimit = 1, QueueLimit = int.MaxValue }));\n\nConsole.WriteLine(await client.GetResponseAsync(\"What color is the sky?\"));\n```\n\n----------------------------------------\n\nTITLE: Handling Stateless Chat Client Interactions in .NET\nDESCRIPTION: This code snippet illustrates how to interact with a stateless chat service by maintaining a history of all messages. Each message is sent along with the history to the chat service, requiring manual history management.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nList<ChatMessage> history = [];\nwhile (true)\n{\n    Console.Write(\"Q: \");\n    history.Add(new(ChatRole.User, Console.ReadLine()));\n\n    var response = await client.GetResponseAsync(history);\n    Console.WriteLine(response);\n\n    history.AddMessages(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection with Ollama Chat Client\nDESCRIPTION: Demonstrates how to configure Ollama chat client using dependency injection in a .NET application. This example shows how to register the chat client with services, add caching and logging middleware, and then retrieve the client from the service provider.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Ollama/README.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\n\n// App Setup\nvar builder = Host.CreateApplicationBuilder();\nbuilder.Services.AddDistributedMemoryCache();\nbuilder.Services.AddLogging(b => b.AddConsole().SetMinimumLevel(LogLevel.Trace));\n\nbuilder.Services.AddChatClient(new OllamaChatClient(new Uri(\"http://localhost:11434/\"), \"llama3.1\"))\n    .UseDistributedCache()\n    .UseLogging();\n\nvar app = builder.Build();\n\n// Elsewhere in the app\nvar chatClient = app.Services.GetRequiredService<IChatClient>();\nConsole.WriteLine(await chatClient.GetResponseAsync(\"What is AI?\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Extended HTTP Client Logging with JSON Console Output\nDESCRIPTION: C# code snippet showing how to configure extended HTTP client logging with JSON console output. This setup enables logging of all HttpClient request and response bodies and prints the full structured logs to the console.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Http.Diagnostics/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\n\nvar services = new ServiceCollection();\n\nservices.AddLogging(o => o.SetMinimumLevel(LogLevel.Trace).AddJsonConsole()); // <-- Enable structured logging to the console\n\n// Adding default redactor provider to the DI container. This is required when using the AddExtendedHttpClientLogging() method.\nservices.AddRedaction();\n\nservices.AddHttpClient(\"foo\")\n    .AddExtendedHttpClientLogging(o =>\n    {\n        // Enable logging of request and response bodies:\n        o.LogBody = true;\n\n        // We also need to specify the content types that we want to log:\n        o.ResponseBodyContentTypes.Add(\"application/json\");\n    });\n\nvar sp = services.BuildServiceProvider();\n\nvar client = sp.GetRequiredService<IHttpClientFactory>().CreateClient(\"foo\");\n\nvar response = await client.GetAsync(new Uri(\"https://httpbin.org/json\")).ConfigureAwait(false);\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Latency Telemetry\nDESCRIPTION: C# code snippet demonstrating how to configure HTTP client latency telemetry. This setup includes registering necessary services for latency tracking, logging enrichment, and redaction.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Http.Diagnostics/README.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = Host.CreateApplicationBuilder(args);\n\n// Register IHttpClientFactory:\nbuilder.Services.AddHttpClient();\n\n// Register redaction services:\nbuilder.Services.AddRedaction();\n\n// Register latency context services:\nbuilder.Services.AddLatencyContext();\n\n// Register HttpClient logging enrichment & redaction services:\nbuilder.Services.AddExtendedHttpClientLogging();\n\n// Register HttpClient latency telemetry services:\nbuilder.Services.AddHttpClientLatencyTelemetry();\n\nvar host = builder.Build();\n```\n\n----------------------------------------\n\nTITLE: Basic Chat Implementation with Ollama\nDESCRIPTION: Shows how to create a basic chat interaction with Ollama using the OllamaChatClient class. This example demonstrates sending a simple query to an Ollama model and displaying the response.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Ollama/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\n\nIChatClient client = new OllamaChatClient(new Uri(\"http://localhost:11434/\"), \"llama3.1\");\n\nConsole.WriteLine(await client.GetResponseAsync(\"What is AI?\"));\n```\n\n----------------------------------------\n\nTITLE: Minimal Web API with Ollama Integration\nDESCRIPTION: Shows how to create a minimal web API that exposes Ollama chat and embedding functionality. This example demonstrates configuring both chat and embedding services and mapping them to HTTP endpoints for easy integration with web applications.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Ollama/README.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddChatClient(\n    new OllamaChatClient(new Uri(\"http://localhost:11434/\"), \"llama3.1\"));\n\nbuilder.Services.AddEmbeddingGenerator(new OllamaEmbeddingGenerator(endpoint, \"all-minilm\"));\n\nvar app = builder.Build();\n\napp.MapPost(\"/chat\", async (IChatClient client, string message) =>\n{\n    var response = await client.GetResponseAsync(message, cancellationToken: default);\n    return response.Message;\n});\n\napp.MapPost(\"/embedding\", async (IEmbeddingGenerator<string,Embedding<float>> client, string message) =>\n{\n    var response = await client.GenerateAsync(message);\n    return response[0].Vector;\n});\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Chat with Conversation History\nDESCRIPTION: Shows how to implement chat with conversation history using system and user messages.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.OpenAI/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\n\nIChatClient client =\n    new OpenAI.Chat.ChatClient(\"gpt-4o-mini\", Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\"))\n    .AsIChatClient();\n\nConsole.WriteLine(await client.GetResponseAsync(\n[\n    new ChatMessage(ChatRole.System, \"You are a helpful AI assistant\"),\n    new ChatMessage(ChatRole.User, \"What is AI?\"),\n]));\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard Hedging Handler with HttpClient\nDESCRIPTION: Code example showing how to add and configure a standard hedging handler for an HttpClient. The sample demonstrates setting up hedging with a total request timeout to handle failures by sending requests to multiple endpoints.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Http.Resilience/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar clientBuilder = services.AddHttpClient(\"MyClient\");\n\nclientBuilder.AddStandardHedgingHandler().Configure(o =>\n{\n    o.TotalRequestTimeout.Timeout = TimeSpan.FromSeconds(10);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Logging Enhancements\nDESCRIPTION: Demonstrates how to enable and configure advanced logging features including stack trace capture, exception handling, and log redaction.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Telemetry/README.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// Enable log enrichment.\nbuilder.Logging.EnableEnrichment(options =>\n{\n    options.CaptureStackTraces = true;\n    options.IncludeExceptionMessage = true;\n    options.MaxStackTraceLength = 500;\n    options.UseFileInfoForStackTraces = true;\n});\n\nbuilder.Services.AddServiceLogEnricher(); // <- This call is required in order for the enricher to be added into the service collection.\n\n// Enable log redaction\nbuilder.Logging.EnableRedaction(options =>\n{\n    options.ApplyDiscriminator = true;\n});\n\nbuilder.Services.AddRedaction(); // <- This call is required in order for the redactor provider to be added into the service collection.\n```\n\n----------------------------------------\n\nTITLE: Basic Chat Implementation with Azure AI Inference\nDESCRIPTION: Demonstrates how to create an IChatClient instance using the Azure.AI.Inference.ChatCompletionsClient and send a basic chat request. This example shows the minimal setup needed to interact with Azure AI models.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.AzureAIInference/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Azure;\nusing Microsoft.Extensions.AI;\n\nIChatClient client =\n    new Azure.AI.Inference.ChatCompletionsClient(\n        new(\"https://models.inference.ai.azure.com\"),\n        new AzureKeyCredential(Environment.GetEnvironmentVariable(\"GH_TOKEN\")!))\n    .AsIChatClient(\"gpt-4o-mini\");\n\nConsole.WriteLine(await client.GetResponseAsync(\"What is AI?\"));\n```\n\n----------------------------------------\n\nTITLE: Combined Telemetry, Caching, and Tool Calling with Azure AI Inference\nDESCRIPTION: Demonstrates combining multiple features including telemetry, caching, and tool calling in a single chat client implementation. This example shows a more complex integration scenario.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.AzureAIInference/README.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel;\nusing Azure;\nusing Microsoft.Extensions.AI;\nusing Microsoft.Extensions.Caching.Distributed;\nusing Microsoft.Extensions.Caching.Memory;\nusing Microsoft.Extensions.Options;\nusing OpenTelemetry.Trace;\n\n// Configure telemetry\nvar sourceName = Guid.NewGuid().ToString();\nvar tracerProvider = OpenTelemetry.Sdk.CreateTracerProviderBuilder()\n    .AddSource(sourceName)\n    .AddConsoleExporter()\n    .Build();\n\n// Configure caching\nIDistributedCache cache = new MemoryDistributedCache(Options.Create(new MemoryDistributedCacheOptions()));\n\n// Configure tool calling\nvar chatOptions = new ChatOptions\n{\n    Tools = [AIFunctionFactory.Create(GetPersonAge)]\n};\n\nIChatClient azureClient =\n    new Azure.AI.Inference.ChatCompletionsClient(\n        new(\"https://models.inference.ai.azure.com\"),\n        new AzureKeyCredential(Environment.GetEnvironmentVariable(\"GH_TOKEN\")!))\n    .AsIChatClient(\"gpt-4o-mini\");\n\nIChatClient client = new ChatClientBuilder(azureClient)\n    .UseDistributedCache(cache)\n    .UseFunctionInvocation()\n    .UseOpenTelemetry(sourceName: sourceName, configure: c => c.EnableSensitiveData = true)\n    .Build();\n\nfor (int i = 0; i < 3; i++)\n{\n    Console.WriteLine(await client.GetResponseAsync(\"How much older is Alice than Bob?\", chatOptions));\n}\n\n[Description(\"Gets the age of a person specified by name.\")]\nstatic int GetPersonAge(string personName) =>\n    personName switch\n    {\n        \"Alice\" => 42,\n        \"Bob\" => 35,\n        _ => 26,\n    };\n```\n\n----------------------------------------\n\nTITLE: Tool Calling Implementation\nDESCRIPTION: Shows how to implement tool calling functionality with AIFunction and FunctionInvokingChatClient\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\n\nstring GetCurrentWeather() => Random.Shared.NextDouble() > 0.5 ? \"It's sunny\" : \"It's raining\";\n\nIChatClient client = new OllamaChatClient(new Uri(\"http://localhost:11434\"), \"llama3.1\")\n    .AsBuilder()\n    .UseFunctionInvocation()\n    .Build();\n\nChatOptions options = new() { Tools = [AIFunctionFactory.Create(GetCurrentWeather)] };\n\nvar response = client.GetStreamingResponseAsync(\"Should I wear a rain coat?\", options);\nawait foreach (var update in response)\n{\n    Console.Write(update);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Chat Response Example with IChatClient\nDESCRIPTION: Shows the simplest way to get a chat response using IChatClient's GetResponseAsync method\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nIChatClient client = ...;\n\nConsole.WriteLine(await client.GetResponseAsync(\"What is AI?\"));\n```\n\n----------------------------------------\n\nTITLE: Streaming Chat Implementation with Azure AI Inference\nDESCRIPTION: Demonstrates how to use streaming responses from the chat model, which allows displaying partial responses as they are generated rather than waiting for the complete response.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.AzureAIInference/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Azure;\nusing Microsoft.Extensions.AI;\n\nIChatClient client =\n    new Azure.AI.Inference.ChatCompletionsClient(\n        new(\"https://models.inference.ai.azure.com\"),\n        new AzureKeyCredential(Environment.GetEnvironmentVariable(\"GH_TOKEN\")!))\n    .AsIChatClient(\"gpt-4o-mini\");\n\nawait foreach (var update in client.GetStreamingResponseAsync(\"What is AI?\"))\n{\n    Console.Write(update);\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Stateful Chat Client in .NET\nDESCRIPTION: This snippet shows how to use a stateful chat client by setting a predefined ChatThreadId. This allows users to send messages without needing to maintain conversation history manually.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nChatOptions options = new() { ChatThreadId = \"my-conversation-id\" };\nwhile (true)\n{\n    Console.Write(\"Q: \");\n    ChatMessage message = new(ChatRole.User, Console.ReadLine());\n\n    Console.WriteLine(await client.GetResponseAsync(message, options));\n}\n```\n\n----------------------------------------\n\nTITLE: Caching Chat Responses with Azure AI Inference\nDESCRIPTION: Demonstrates how to implement caching for chat responses using IDistributedCache, which can reduce costs and improve response times for repeated queries.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.AzureAIInference/README.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing Azure;\nusing Microsoft.Extensions.AI;\nusing Microsoft.Extensions.Caching.Distributed;\nusing Microsoft.Extensions.Caching.Memory;\nusing Microsoft.Extensions.Options;\n\nIDistributedCache cache = new MemoryDistributedCache(Options.Create(new MemoryDistributedCacheOptions()));\n\nIChatClient azureClient =\n    new Azure.AI.Inference.ChatCompletionsClient(\n        new(\"https://models.inference.ai.azure.com\"),\n        new AzureKeyCredential(Environment.GetEnvironmentVariable(\"GH_TOKEN\")!))\n    .AsIChatClient(\"gpt-4o-mini\");\n\nIChatClient client = new ChatClientBuilder(azureClient)\n    .UseDistributedCache(cache)\n    .Build();\n\nfor (int i = 0; i < 3; i++)\n{\n    await foreach (var message in client.GetStreamingResponseAsync(\"In less than 100 words, what is AI?\"))\n    {\n        Console.Write(message);\n    }\n\n    Console.WriteLine();\n    Console.WriteLine();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dependency Injection for Chat Client in .NET\nDESCRIPTION: This snippet demonstrates how to set up a dependency injection container for an IChatClient using Microsoft's DI framework. It includes adding a distributed memory cache and a chat client configured with a specific URI and model name.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\n// App Setup\nvar builder = Host.CreateApplicationBuilder();\nbuilder.Services.AddDistributedMemoryCache();\nbuilder.Services.AddChatClient(new OllamaChatClient(new Uri(\"http://localhost:11434\"), \"llama3.1\"))\n    .UseDistributedCache();\nvar host = builder.Build();\n\n// Elsewhere in the app\nvar chatClient = host.Services.GetRequiredService<IChatClient>();\nConsole.WriteLine(await chatClient.GetResponseAsync(\"What is AI?\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete Request Latency Telemetry\nDESCRIPTION: Comprehensive setup for request latency telemetry including context, checkpoints, measures, tags, and middleware configuration.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Telemetry/README.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// Add Latency Context\nbuilder.Services.AddLatencyContext();\n\n// Add Checkpoints, Measures, Tags\nbuilder.Services.RegisterCheckpointNames(\"databaseQuery\", \"externalApiCall\");\nbuilder.Services.RegisterMeasureNames(\"responseTime\", \"processingTime\");\nbuilder.Services.RegisterTagNames(\"userId\", \"transactionId\");\n\n// Add Console Latency exporter.\nbuilder.Services.AddConsoleLatencyDataExporter();\n// Optionally add custom exporters.\nbuilder.Services.AddSingleton<ILatencyDataExporter, MyCustomExporter>();\n\n// Add Request latency telemetry.\nbuilder.Services.AddRequestLatencyTelemetry();\n\n// ...\n\n// Add Request Latency Middleware which will automatically call ExportAsync on all registered latency exporters.\napp.UseRequestLatencyTelemetry();\n```\n\n----------------------------------------\n\nTITLE: Configuring redactors using default and custom providers\nDESCRIPTION: Example showing how to configure redactors using the default redactor provider and an alternative custom provider. Demonstrates setting specific redactors for data classifications and configuring a fallback redactor.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Compliance.Redaction/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Using the default redactor provider:\nbuilder.Services.AddRedaction(redactionBuilder =>\n{\n    // Assigns a redactor to use for a set of data classifications.\n    redactionBuilder.SetRedactor<MyRedactor>(MySensitiveDataClassification);\n    // Assigns a fallback redactor to use when processing classified data for which no specific redactor has been registered. \n    // The `ErasingRedactor` is the default fallback redactor. If no redactor is configured for a data classification then the data will be erased.\n    redactionBuilder.SetFallbackRedactor<MyFallbackRedactor>();\n});\n\n// Using a custom redactor provider:\nbuilder.Services.AddSingleton<IRedactorProvider, MyRedactorProvider>();\nbuilder.Services.AddRedaction(redactionBuilder => { });\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Client Pipeline with OpenTelemetry and Caching\nDESCRIPTION: Shows how to create a complex chat client pipeline with distributed caching, function invocation, and OpenTelemetry tracing.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\nusing Microsoft.Extensions.Caching.Distributed;\nusing Microsoft.Extensions.Caching.Memory;\nusing Microsoft.Extensions.Options;\nusing OpenTelemetry.Trace;\n\n// Configure OpenTelemetry exporter\nvar sourceName = Guid.NewGuid().ToString();\nvar tracerProvider = OpenTelemetry.Sdk.CreateTracerProviderBuilder()\n    .AddSource(sourceName)\n    .AddConsoleExporter()\n    .Build();\n\n// Explore changing the order of the intermediate \"Use\" calls to see the impact\n// that has on what gets cached, traced, etc.\nIChatClient client = new ChatClientBuilder(new OllamaChatClient(new Uri(\"http://localhost:11434\"), \"llama3.1\"))\n    .UseDistributedCache(new MemoryDistributedCache(Options.Create(new MemoryDistributedCacheOptions())))\n    .UseFunctionInvocation()\n    .UseOpenTelemetry(sourceName: sourceName, configure: c => c.EnableSensitiveData = true)\n    .Build();\n\nChatOptions options = new()\n{\n    Tools = [AIFunctionFactory.Create(\n        () => Random.Shared.NextDouble() > 0.5 ? \"It's sunny\" : \"It's raining\",\n        name: \"GetCurrentWeather\", \n        description: \"Gets the current weather\")]\n};\n\nfor (int i = 0; i < 3; i++)\n{\n    List<ChatMessage> history =\n    [\n        new ChatMessage(ChatRole.System, \"You are a helpful AI assistant\"),\n        new ChatMessage(ChatRole.User, \"Do I need an umbrella?\")\n    ];\n\n    Console.WriteLine(await client.GetResponseAsync(history, options));\n}\n```\n\n----------------------------------------\n\nTITLE: Text Embedding Generation with Caching in Ollama\nDESCRIPTION: Shows how to implement caching for text embedding generation with Ollama. This example demonstrates configuring a distributed cache to store embedding results, which can improve performance for repeated embedding requests of the same text.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Ollama/README.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\nusing Microsoft.Extensions.Caching.Distributed;\nusing Microsoft.Extensions.Caching.Memory;\nusing Microsoft.Extensions.Options;\n\nIDistributedCache cache = new MemoryDistributedCache(Options.Create(new MemoryDistributedCacheOptions()));\n\nIEmbeddingGenerator<string, Embedding<float>> ollamaGenerator =\n    new OllamaEmbeddingGenerator(new Uri(\"http://localhost:11434/\"), \"all-minilm\");\n\nIEmbeddingGenerator<string, Embedding<float>> generator = new EmbeddingGeneratorBuilder<string, Embedding<float>>(ollamaGenerator)\n    .UseDistributedCache(cache)\n    .Build();\n\nforeach (var prompt in new[] { \"What is AI?\", \"What is .NET?\", \"What is AI?\" })\n{\n    var embeddings = await generator.GenerateAsync(prompt);\n\n    Console.WriteLine(string.Join(\", \", embeddings[0].Vector.ToArray()));\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection Setup\nDESCRIPTION: Shows how to configure dependency injection for chat client with distributed cache and logging.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.OpenAI/README.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\n\n// App Setup\nvar builder = Host.CreateApplicationBuilder();\nbuilder.Services.AddDistributedMemoryCache();\nbuilder.Services.AddLogging(b => b.AddConsole().SetMinimumLevel(LogLevel.Trace));\n\nbuilder.Services.AddChatClient(services =>\n    new OpenAI.Chat.ChatClient(\"gpt-4o-mini\", Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")).AsIChatClient())\n    .UseDistributedCache()\n    .UseLogging();\n\nvar app = builder.Build();\n\n// Elsewhere in the app\nvar chatClient = app.Services.GetRequiredService<IChatClient>();\nConsole.WriteLine(await chatClient.GetResponseAsync(\"What is AI?\"));\n```\n\n----------------------------------------\n\nTITLE: Text Embedding Generation\nDESCRIPTION: Shows basic implementation of text embedding generation using OpenAI.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.OpenAI/README.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\n\nIEmbeddingGenerator<string, Embedding<float>> generator =\n    new OpenAI.Embeddings.EmbeddingClient(\"text-embedding-3-small\", Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\"))\n    .AsIEmbeddingGenerator();\n\nvar embeddings = await generator.GenerateAsync(\"What is AI?\");\n\nConsole.WriteLine(string.Join(\", \", embeddings[0].Vector.ToArray()));\n```\n\n----------------------------------------\n\nTITLE: Tool Calling Implementation with Azure AI Inference\nDESCRIPTION: Shows how to implement tool calling functionality, allowing the AI model to call functions defined in your code. This example uses a weather function to demonstrate the capability.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.AzureAIInference/README.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel;\nusing Azure;\nusing Microsoft.Extensions.AI;\n\nIChatClient azureClient =\n    new Azure.AI.Inference.ChatCompletionsClient(\n        new(\"https://models.inference.ai.azure.com\"),\n        new AzureKeyCredential(Environment.GetEnvironmentVariable(\"GH_TOKEN\")!))\n    .AsIChatClient(\"gpt-4o-mini\");\n\nIChatClient client = new ChatClientBuilder(azureClient)\n    .UseFunctionInvocation()\n    .Build();\n\nChatOptions chatOptions = new()\n{\n    Tools = [AIFunctionFactory.Create(GetWeather)]\n};\n\nawait foreach (var message in client.GetStreamingResponseAsync(\"Do I need an umbrella?\", chatOptions))\n{\n    Console.Write(message);\n}\n\n[Description(\"Gets the weather\")]\nstatic string GetWeather() => Random.Shared.NextDouble() > 0.5 ? \"It's sunny\" : \"It's raining\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Health Check\nDESCRIPTION: Complete example showing how to register and use the Manual Health Check in a web application, including a service that reports health status.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.HealthChecks.Common/README.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddHealthChecks()\n    .AddManualHealthCheck();\n\nvar app = builder.Build();\n\napp.MapHealthChecks(\"/healthz\");\n\napp.Run();\n\npublic class MyService\n{\n    private readonly IManualHealthCheck<MyService> healthCheck;\n\n    // inject IManualHealthCheck<> into your service\n    public MyService(IManualHealthCheck<MyService> healthCheck)\n    {\n        this.healthCheck = healthCheck;\n    }\n\n    public void DoSomething()\n    {\n        // ... do something ...\n\n        if (somethingBadHappened)\n        {\n            this.healthCheck.ReportUnhealthy(\"reason\");\n        }\n\n        this.healthCheck.ReportHealthy();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings Asynchronously in .NET\nDESCRIPTION: This snippet demonstrates how to invoke the GenerateAsync method of an IEmbeddingGenerator to create embeddings for a list of input phrases. It showcases basic asynchronous handling and output display.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\n\nIEmbeddingGenerator<string, Embedding<float>> generator =\n    new SampleEmbeddingGenerator(new Uri(\"http://coolsite.ai\"), \"my-custom-model\");\n\nforeach (var embedding in await generator.GenerateAsync([\"What is AI?\", \"What is .NET?\"]))\n{\n    Console.WriteLine(string.Join(\", \", embedding.Vector.ToArray()));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extended HTTP Client Logging in C#\nDESCRIPTION: C# code snippet demonstrating how to configure extended HTTP client logging, including registering IHttpClientFactory, redaction services, and custom log enrichers. This setup enables enriched and redacted logging for HttpClient requests.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Http.Diagnostics/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = Host.CreateApplicationBuilder(args);\n\n// Register IHttpClientFactory:\nbuilder.Services.AddHttpClient();\n\n// Register redaction services:\nbuilder.Services.AddRedaction();\n\n// Register HttpClient logging enrichment & redaction services:\nbuilder.Services.AddExtendedHttpClientLogging();\n\n// Register a logging enricher (the type should implement IHttpClientLogEnricher):\nbuilder.Services.AddHttpClientLogEnricher<MyHttpClientLogEnricher>();\n\nvar host = builder.Build();\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection with Azure AI Inference\nDESCRIPTION: Shows how to integrate the chat client with dependency injection in a host application. This enables better testability and configuration management in larger applications.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.AzureAIInference/README.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing Azure;\nusing Azure.AI.Inference;\nusing Microsoft.Extensions.AI;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\n\n// App Setup\nvar builder = Host.CreateApplicationBuilder();\nbuilder.Services.AddSingleton(\n    new ChatCompletionsClient(\n        new(\"https://models.inference.ai.azure.com\"),\n        new AzureKeyCredential(Environment.GetEnvironmentVariable(\"GH_TOKEN\")!)));\nbuilder.Services.AddDistributedMemoryCache();\nbuilder.Services.AddLogging(b => b.AddConsole().SetMinimumLevel(LogLevel.Trace));\n\nbuilder.Services.AddChatClient(services => services.GetRequiredService<ChatCompletionsClient>().AsIChatClient(\"gpt-4o-mini\"))\n    .UseDistributedCache()\n    .UseLogging();\n\nvar app = builder.Build();\n\n// Elsewhere in the app\nvar chatClient = app.Services.GetRequiredService<IChatClient>();\nConsole.WriteLine(await chatClient.GetResponseAsync(\"What is AI?\"));\n```\n\n----------------------------------------\n\nTITLE: Chat with Conversation History Using Azure AI Inference\nDESCRIPTION: Shows how to send multiple chat messages to maintain conversation context, including system and user messages. This example demonstrates handling a conversation with multiple turns.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.AzureAIInference/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Azure;\nusing Microsoft.Extensions.AI;\n\nIChatClient client =\n    new Azure.AI.Inference.ChatCompletionsClient(\n        new(\"https://models.inference.ai.azure.com\"),\n        new AzureKeyCredential(Environment.GetEnvironmentVariable(\"GH_TOKEN\")!))\n    .AsIChatClient(\"gpt-4o-mini\");\n\nConsole.WriteLine(await client.GetResponseAsync(\n[\n    new ChatMessage(ChatRole.System, \"You are a helpful AI assistant\"),\n    new ChatMessage(ChatRole.User, \"What is AI?\"),\n]));\n```\n\n----------------------------------------\n\nTITLE: Implementing Caching with Ollama Chat Client\nDESCRIPTION: Shows how to add distributed caching to an Ollama chat client. This example demonstrates configuring a memory-based distributed cache to store and retrieve chat responses, which can improve performance and reduce API calls.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Ollama/README.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\nusing Microsoft.Extensions.Caching.Distributed;\nusing Microsoft.Extensions.Caching.Memory;\nusing Microsoft.Extensions.Options;\n\nIDistributedCache cache = new MemoryDistributedCache(Options.Create(new MemoryDistributedCacheOptions()));\n\nIChatClient ollamaClient = new OllamaChatClient(new Uri(\"http://localhost:11434/\"), \"llama3.1\");\n\nIChatClient client = new ChatClientBuilder(ollamaClient)\n    .UseDistributedCache(cache)\n    .Build();\n\nfor (int i = 0; i < 3; i++)\n{\n    await foreach (var message in client.GetStreamingResponseAsync(\"In less than 100 words, what is AI?\"))\n    {\n        Console.Write(message);\n    }\n\n    Console.WriteLine();\n    Console.WriteLine();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Chat Client Options with Default Model\nDESCRIPTION: Demonstrates how to configure an OllamaChatClient with default model options and override them per request.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\n\nIChatClient client = new OllamaChatClient(new Uri(\"http://localhost:11434\"))\n    .AsBuilder()\n    .ConfigureOptions(options => options.ModelId ??= \"phi3\")\n    .Build();\n\nConsole.WriteLine(await client.GetResponseAsync(\"What is AI?\")); // will request \"phi3\"\nConsole.WriteLine(await client.GetResponseAsync(\"What is AI?\", new() { ModelId = \"llama3.1\" })); // will request \"llama3.1\"\n```\n\n----------------------------------------\n\nTITLE: Telemetry Integration with Azure AI Inference\nDESCRIPTION: Shows how to implement OpenTelemetry tracing for chat operations, which provides visibility into performance and behavior of AI operations in your application.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.AzureAIInference/README.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing Azure;\nusing Microsoft.Extensions.AI;\nusing OpenTelemetry.Trace;\n\n// Configure OpenTelemetry exporter\nvar sourceName = Guid.NewGuid().ToString();\nvar tracerProvider = OpenTelemetry.Sdk.CreateTracerProviderBuilder()\n    .AddSource(sourceName)\n    .AddConsoleExporter()\n    .Build();\n\nIChatClient azureClient =\n    new Azure.AI.Inference.ChatCompletionsClient(\n        new(\"https://models.inference.ai.azure.com\"),\n        new AzureKeyCredential(Environment.GetEnvironmentVariable(\"GH_TOKEN\")!))\n    .AsIChatClient(\"gpt-4o-mini\");\n\nIChatClient client = new ChatClientBuilder(azureClient)\n    .UseOpenTelemetry(sourceName: sourceName, configure: c => c.EnableSensitiveData = true)\n    .Build();\n\nConsole.WriteLine(await client.GetResponseAsync(\"What is AI?\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing Caching with DistributedCachingChatClient\nDESCRIPTION: Demonstrates how to implement distributed caching for chat responses\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\nusing Microsoft.Extensions.Caching.Distributed;\nusing Microsoft.Extensions.Caching.Memory;\nusing Microsoft.Extensions.Options;\n\nIChatClient client = new ChatClientBuilder(new OllamaChatClient(new Uri(\"http://localhost:11434\"), \"llama3.1\"))\n    .UseDistributedCache(new MemoryDistributedCache(Options.Create(new MemoryDistributedCacheOptions())))\n    .Build();\n\nstring[] prompts = [\"What is AI?\", \"What is .NET?\", \"What is AI?\"];\n\nforeach (var prompt in prompts)\n{\n    await foreach (var update in client.GetStreamingResponseAsync(prompt))\n    {\n        Console.Write(update);\n    }\n    Console.WriteLine();\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Registration Order with Application Insights\nDESCRIPTION: Example showing the correct order of service registration to avoid issues with Application Insights. This sample demonstrates registering Application Insights before resilience functionality to ensure telemetry works correctly.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Http.Resilience/README.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// We register Application Insights first, and now it will be working correctly.\nservices.AddApplicationInsightsTelemetry();\nservices.AddHttpClient().AddStandardResilienceHandler();\n```\n\n----------------------------------------\n\nTITLE: Streaming Chat Responses from Ollama\nDESCRIPTION: Shows how to implement streaming responses from Ollama. This approach allows for displaying responses incrementally as they are generated rather than waiting for the complete response.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Ollama/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\n\nIChatClient client = new OllamaChatClient(new Uri(\"http://localhost:11434/\"), \"llama3.1\");\n\nawait foreach (var update in client.GetStreamingResponseAsync(\"What is AI?\"))\n{\n    Console.Write(update);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Chat Thread ID in Stateless/Stateful Client\nDESCRIPTION: This code demonstrates an approach to handle both stateless and stateful chat clients by checking the ChatThreadId in the response. Depending on its presence, it either clears the message history or adds the new message to it.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nList<ChatMessage> history = [];\nChatOptions options = new();\nwhile (true)\n{\n    Console.Write(\"Q: \");\n    history.Add(new(ChatRole.User, Console.ReadLine()));\n\n    ChatResponse response = await client.GetResponseAsync(history);\n    Console.WriteLine(response);\n\n    options.ChatThreadId = response.ChatThreadId;\n    if (response.ChatThreadId is not null)\n    {\n        history.Clear();\n    }\n    else\n    {\n        history.AddMessages(response);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Chat Client Pipeline with Extensions\nDESCRIPTION: Example of building a chat client pipeline using extension methods.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = new OllamaChatClient(new Uri(\"http://localhost:11434\"), \"llama3.1\")\n    .AsBuilder()\n    .UseDistributedCache()\n    .UseRateLimiting()\n    .UseOpenTelemetry()\n    .Build(services);\n```\n\n----------------------------------------\n\nTITLE: Chat with Conversation History in Ollama\nDESCRIPTION: Demonstrates how to implement a chat with conversation history using Ollama. This example shows how to pass multiple chat messages including system and user roles to maintain context in the conversation.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Ollama/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\n\nIChatClient client = new OllamaChatClient(new Uri(\"http://localhost:11434/\"), \"llama3.1\");\n\nConsole.WriteLine(await client.GetResponseAsync(\n[\n    new ChatMessage(ChatRole.System, \"You are a helpful AI assistant\"),\n    new ChatMessage(ChatRole.User, \"What is AI?\"),\n]));\n```\n\n----------------------------------------\n\nTITLE: Minimal Web API Implementation\nDESCRIPTION: Demonstrates setup of a minimal web API with chat and embedding endpoints using OpenAI integration.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.OpenAI/README.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddChatClient(services =>\n    new OpenAI.Chat.ChatClient(\"gpt-4o-mini\", builder.Configuration[\"OPENAI_API_KEY\"]).AsIChatClient());\n\nbuilder.Services.AddEmbeddingGenerator(services =>\n    new OpenAI.Embeddings.EmbeddingClient(\"text-embedding-3-small\", builder.Configuration[\"OPENAI_API_KEY\"]).AsIEmbeddingGenerator());\n\nvar app = builder.Build();\n\napp.MapPost(\"/chat\", async (IChatClient client, string message) =>\n{\n    var response = await client.GetResponseAsync(message);\n    return response.Message;\n});\n\napp.MapPost(\"/embedding\", async (IEmbeddingGenerator<string, Embedding<float>> client, string message) =>\n{\n    var response = await client.GenerateAsync(message);\n    return response[0].Vector;\n});\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: FakeHost Usage Example\nDESCRIPTION: Example demonstrating how to create and configure a FakeHost instance for testing, including service configuration and async startup.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Hosting.Testing/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing var host = await FakeHost.CreateBuilder(options => { })\n    .ConfigureServices(x =>\n    {\n        // ...\n    })\n    .StartAsync();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Rate-Limiting EmbeddingGenerator in C#\nDESCRIPTION: This snippet shows how to create a custom DelegatingEmbeddingGenerator that adds rate limiting functionality to any IEmbeddingGenerator implementation. It uses a RateLimiter to control the flow of embedding generation requests.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\nusing System.Threading.RateLimiting;\n\npublic class RateLimitingEmbeddingGenerator(IEmbeddingGenerator<string, Embedding<float>> innerGenerator, RateLimiter rateLimiter) :\n    DelegatingEmbeddingGenerator<string, Embedding<float>>(innerGenerator)\n{\n    public override async Task<GeneratedEmbeddings<Embedding<float>>> GenerateAsync(\n        IEnumerable<string> values, EmbeddingGenerationOptions? options = null, CancellationToken cancellationToken = default)\n    {\n        using var lease = await rateLimiter.AcquireAsync(permitCount: 1, cancellationToken).ConfigureAwait(false);\n        if (!lease.IsAcquired)\n            throw new InvalidOperationException(\"Unable to acquire lease.\");\n\n        return await base.GenerateAsync(values, options, cancellationToken);\n    }\n\n    protected override void Dispose(bool disposing)\n    {\n        if (disposing)\n            rateLimiter.Dispose();\n\n        base.Dispose(disposing);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Data Classifications in C#\nDESCRIPTION: Example of defining custom data classifications using static members in C#. This demonstrates how to create a consistent way to label and handle sensitive data across an application.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Compliance.Abstractions/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.Compliance.Classification;\n\npublic static class MyTaxonomyClassifications\n{\n    public static string Name => \"MyTaxonomy\";\n\n    public static DataClassification PrivateInformation => new DataClassification(Name, nameof(PrivateInformation));\n    public static DataClassification CreditCardNumber => new DataClassification(Name, nameof(CreditCardNumber));\n    public static DataClassification SocialSecurityNumber => new DataClassification(Name, nameof(SocialSecurityNumber));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Random Probabilistic Sampling in .NET\nDESCRIPTION: Demonstrates various ways to configure random probabilistic sampling for logs, including simple probability, options-based configuration, and configuration section binding.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Telemetry/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Simple configuration with probability\nbuilder.Logging.AddRandomProbabilisticSampler(0.1); // Sample 10% of all logs, meaning - 90% of logs will be dropped\nbuilder.Logging.AddRandomProbabilisticSampler(0.1, LogLevel.Warning); // Sample 10% of Warning and lower level logs\n\n// Configuration using options\nbuilder.Logging.AddRandomProbabilisticSampler(options =>\n{\n    options.Rules.Add(new RandomProbabilisticSamplerFilterRule(0.1, logLevel: LogLevel.Information)); // Sample 10% of Information and lower level logs\n    options.Rules.Add(new RandomProbabilisticSamplerFilterRule(1.0, logLevel: LogLevel.Error)); // Sample all Error logs\n});\n\n// Configuration using IConfiguration\nbuilder.Logging.AddRandomProbabilisticSampler(configuration.GetSection(\"Logging:Sampling\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis as Distributed Cache Backend\nDESCRIPTION: Example of configuring Redis as the distributed cache backend for HybridCache using StackExchange.Redis.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Caching.Hybrid/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddStackExchangeRedisCache(options =>\n{\n    options.Configuration = builder.Configuration.GetConnectionString(\"MyRedisConStr\");\n});\n```\n\n----------------------------------------\n\nTITLE: Telemetry Implementation\nDESCRIPTION: Shows how to implement OpenTelemetry with the chat client for monitoring and tracing.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.OpenAI/README.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\nusing OpenTelemetry.Trace;\n\n// Configure OpenTelemetry exporter\nvar sourceName = Guid.NewGuid().ToString();\nvar tracerProvider = OpenTelemetry.Sdk.CreateTracerProviderBuilder()\n    .AddSource(sourceName)\n    .AddConsoleExporter()\n    .Build();\n\nIChatClient openaiClient =\n    new OpenAI.Chat.ChatClient(\"gpt-4o-mini\", Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\"))\n    .AsIChatClient();\n\nIChatClient client = new ChatClientBuilder(openaiClient)\n    .UseOpenTelemetry(sourceName: sourceName, configure: c => c.EnableSensitiveData = true)\n    .Build();\n\nConsole.WriteLine(await client.GetResponseAsync(\"What is AI?\"));\n```\n\n----------------------------------------\n\nTITLE: Text Embedding with Caching\nDESCRIPTION: Demonstrates text embedding generation with distributed caching implementation.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.OpenAI/README.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\nusing Microsoft.Extensions.Caching.Distributed;\nusing Microsoft.Extensions.Caching.Memory;\nusing Microsoft.Extensions.Options;\n\nIDistributedCache cache = new MemoryDistributedCache(Options.Create(new MemoryDistributedCacheOptions()));\n\nIEmbeddingGenerator<string, Embedding<float>> openAIGenerator =\n    new OpenAI.Embeddings.EmbeddingClient(\"text-embedding-3-small\", Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\"))\n    .AsIEmbeddingGenerator();\n\nIEmbeddingGenerator<string, Embedding<float>> generator = new EmbeddingGeneratorBuilder<string, Embedding<float>>(openAIGenerator)\n    .UseDistributedCache(cache)\n    .Build();\n\nforeach (var prompt in new[] { \"What is AI?\", \"What is .NET?\", \"What is AI?\" })\n{\n    var embeddings = await generator.GenerateAsync(prompt);\n\n    Console.WriteLine(string.Join(\", \", embeddings[0].Vector.ToArray()));\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Rate-Limited EmbeddingGenerator in C#\nDESCRIPTION: This snippet demonstrates how to use the custom RateLimitingEmbeddingGenerator to wrap a SampleEmbeddingGenerator, effectively adding rate limiting to all embedding generation operations. It uses a ConcurrencyLimiter to control concurrent requests.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\nusing System.Threading.RateLimiting;\n\nIEmbeddingGenerator<string, Embedding<float>> generator =\n    new RateLimitingEmbeddingGenerator(\n        new SampleEmbeddingGenerator(new Uri(\"http://coolsite.ai\"), \"my-custom-model\"),\n        new ConcurrencyLimiter(new() { PermitLimit = 1, QueueLimit = int.MaxValue }));\n\nforeach (var embedding in await generator.GenerateAsync([\"What is AI?\", \"What is .NET?\"]))\n{\n    Console.WriteLine(string.Join(\", \", embedding.Vector.ToArray()));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Latency Monitoring with Console Exporter\nDESCRIPTION: Shows how to configure latency monitoring with the built-in console exporter and custom options.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Telemetry/README.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Add latency console data exporter with configuration\nbuilder.Services.AddConsoleLatencyDataExporter(options =>\n{\n    options.OutputCheckpoints = true;\n    options.OutputMeasures = true;\n    options.OutputTags = true;\n});\n```\n\n----------------------------------------\n\nTITLE: Chat Response with Message History\nDESCRIPTION: Demonstrates using IChatClient with multiple messages including system and user roles\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nIChatClient client = ...;\n\nConsole.WriteLine(await client.GetResponseAsync(\n[\n    new(ChatRole.System, \"You are a helpful AI assistant\"),\n    new(ChatRole.User, \"What is AI?\"),\n]));\n```\n\n----------------------------------------\n\nTITLE: Configuring ResourceUtilization Health Check in ASP.NET Core\nDESCRIPTION: Example of adding and configuring resource utilization health checks in an ASP.NET Core application. Sets CPU and memory thresholds for degraded and unhealthy states and configures the sampling window.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.HealthChecks.ResourceUtilization/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddHealthChecks()\n    .AddResourceUtilizationHealthCheck(o =>\n    {\n        o.CpuThresholds = new ResourceUsageThresholds\n        {\n            DegradedUtilizationPercentage = 80,\n            UnhealthyUtilizationPercentage = 90,\n        };\n        o.MemoryThresholds = new ResourceUsageThresholds\n        {\n            DegradedUtilizationPercentage = 80,\n            UnhealthyUtilizationPercentage = 90,\n        };\n        o.SamplingWindow = TimeSpan.FromSeconds(5);\n    });\n\nvar app = builder.Build();\n\napp.MapHealthChecks(\"/healthz\");\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Consuming Object Pools from DI Container\nDESCRIPTION: Example of resolving and using a pooled object from the dependency injection container. Demonstrates the complete lifecycle of getting an object from the pool, using it, and returning it to the pool.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.ObjectPool.DependencyInjection/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar pool = context.RequestServices.GetRequiredService<ObjectPool<MyPooledClass>>();\n\nvar obj = pool.Get();\n\n// Use the pooled object ...\n\npool.Return(obj);\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limiting Chat Client Middleware\nDESCRIPTION: Custom implementation of a rate limiting middleware using DelegatingChatClient base class.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\nusing System.Threading.RateLimiting;\n\npublic sealed class RateLimitingChatClient(IChatClient innerClient, RateLimiter rateLimiter) : DelegatingChatClient(innerClient)\n{\n    public override async Task<ChatResponse> GetResponseAsync(\n        IEnumerable<ChatMessage> messages, ChatOptions? options = null, CancellationToken cancellationToken = default)\n    {\n        using var lease = await rateLimiter.AcquireAsync(permitCount: 1, cancellationToken).ConfigureAwait(false);\n        if (!lease.IsAcquired)\n            throw new InvalidOperationException(\"Unable to acquire lease.\");\n\n        return await base.GetResponseAsync(messages, options, cancellationToken).ConfigureAwait(false);\n    }\n\n    public override async IAsyncEnumerable<ChatResponseUpdate> GetStreamingResponseAsync(\n        IEnumerable<ChatMessage> messages, ChatOptions? options = null, [EnumeratorCancellation] CancellationToken cancellationToken = default)\n    {\n        using var lease = await rateLimiter.AcquireAsync(permitCount: 1, cancellationToken).ConfigureAwait(false);\n        if (!lease.IsAcquired)\n            throw new InvalidOperationException(\"Unable to acquire lease.\");\n\n        await foreach (var update in base.GetStreamingResponseAsync(messages, options, cancellationToken).ConfigureAwait(false))\n            yield return update;\n    }\n\n    protected override void Dispose(bool disposing)\n    {\n        if (disposing)\n            rateLimiter.Dispose();\n\n        base.Dispose(disposing);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Rate Limiting with Use Delegate\nDESCRIPTION: Shows how to implement rate limiting using the Use delegate pattern without creating a custom class.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nRateLimiter rateLimiter = ...;\nvar client = new OllamaChatClient(new Uri(\"http://localhost:11434\"), \"llama3.1\")\n    .AsBuilder()\n    .UseDistributedCache()\n    .Use(async (messages, options, nextAsync, cancellationToken) =>\n    {\n        using var lease = await rateLimiter.AcquireAsync(permitCount: 1, cancellationToken).ConfigureAwait(false);\n        if (!lease.IsAcquired)\n            throw new InvalidOperationException(\"Unable to acquire lease.\");\n\n        await nextAsync(messages, options, cancellationToken);\n    })\n    .UseOpenTelemetry()\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Integration Example\nDESCRIPTION: Shows how to implement OpenTelemetry for monitoring chat interactions\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\nusing OpenTelemetry.Trace;\n\n// Configure OpenTelemetry exporter\nvar sourceName = Guid.NewGuid().ToString();\nvar tracerProvider = OpenTelemetry.Sdk.CreateTracerProviderBuilder()\n    .AddSource(sourceName)\n    .AddConsoleExporter()\n    .Build();\n\nIChatClient client = new ChatClientBuilder(new OllamaChatClient(new Uri(\"http://localhost:11434\"), \"llama3.1\"))\n    .UseOpenTelemetry(sourceName: sourceName, configure: c => c.EnableSensitiveData = true)\n    .Build();\n\nConsole.WriteLine(await client.GetResponseAsync(\"What is AI?\"));\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Extensions AI Evaluation Console Tool\nDESCRIPTION: Command to install the Microsoft.Extensions.AI.Evaluation.Console command line tool using the dotnet CLI, with automatic manifest creation if needed.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndotnet tool install Microsoft.Extensions.AI.Evaluation.Console --create-manifest-if-needed\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Pool Capacity\nDESCRIPTION: Example of configuring the capacity of an object pool during registration. Shows how to use the options delegate to set a custom capacity value for the pool.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.ObjectPool.DependencyInjection/README.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddPooled<MyPooledClass>(options => options.Capacity = 64);\n```\n\n----------------------------------------\n\nTITLE: Text Embedding Generation with Ollama\nDESCRIPTION: Demonstrates how to generate text embeddings using Ollama. This example shows how to use the OllamaEmbeddingGenerator to convert text into vector embeddings that can be used for semantic search, similarity comparisons, and other NLP tasks.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Ollama/README.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\n\nIEmbeddingGenerator<string, Embedding<float>> generator =\n    new OllamaEmbeddingGenerator(new Uri(\"http://localhost:11434/\"), \"all-minilm\");\n\nvar embeddings = await generator.GenerateAsync(\"What is AI?\");\n\nConsole.WriteLine(string.Join(\", \", embeddings[0].Vector.ToArray()));\n```\n\n----------------------------------------\n\nTITLE: Release Notes - Version 9.4.0-preview.1.25207.5\nDESCRIPTION: Documents additions of new content types, message IDs, function arguments, speech-to-text support and Native AOT fixes.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 9.4.0-preview.1.25207.5\n\n- Added `ErrorContent` and `TextReasoningContent`.\n- Added `MessageId` to `ChatMessage` and `ChatResponseUpdate`.\n- Added `AIFunctionArguments`, changing `AIFunction.InvokeAsync` to accept one and to return a `ValueTask`.\n- Updated `AIJsonUtilities`'s schema generation to not use `default` when `RequireAllProperties` is set to `true`.\n- Added `ISpeechToTextClient` and supporting types.\n- Fixed several issues related to Native AOT support.\n```\n\n----------------------------------------\n\nTITLE: Streaming Chat Implementation\nDESCRIPTION: Demonstrates how to implement streaming responses from the chat client.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.OpenAI/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\n\nIChatClient client =\n    new OpenAI.Chat.ChatClient(\"gpt-4o-mini\", Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\"))\n    .AsIChatClient();\n\nawait foreach (var update in client.GetStreamingResponseAsync(\"What is AI?\"))\n{\n    Console.Write(update);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IResettable for Pooled Objects\nDESCRIPTION: Example of implementing the IResettable interface in a pooled class to properly clean up and reset the object when it's returned to the pool. Shows how to inject and store dependencies.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.ObjectPool.DependencyInjection/README.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyPooledClass : IResettable\n{\n    private MyService _myService;\n\n    public MyPooledClass(MyService myService)\n    {\n        _myService = myService;\n    }\n\n    public bool TryReset()\n    {\n        // Clean instance here\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Probe Details in C#\nDESCRIPTION: C# code snippet demonstrating how to configure specific details for each type of Kubernetes probe (liveness, startup, and readiness) using the AddKubernetesProbes method with a configuration action.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.Probes/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddKubernetesProbes(options =>\n{\n    options.LivenessProbe.TcpPort = 2305;\n    options.StartupProbe.TcpPort = 2306;\n    options.ReadinessProbe.TcpPort = 2307;\n})\n```\n\n----------------------------------------\n\nTITLE: Sample Implementation of IEmbeddingGenerator in .NET\nDESCRIPTION: This code provides a sample implementation of the IEmbeddingGenerator interface that generates random embedding vectors. It includes methods for generating embeddings asynchronously and retrieving service metadata.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\n\npublic class SampleEmbeddingGenerator(Uri endpoint, string modelId) : IEmbeddingGenerator<string, Embedding<float>>\n{\n    private readonly EmbeddingGeneratorMetadata _metadata = new(\"SampleEmbeddingGenerator\", endpoint, modelId);\n\n    public async Task<GeneratedEmbeddings<Embedding<float>>> GenerateAsync(\n        IEnumerable<string> values,\n        EmbeddingGenerationOptions? options = null,\n        CancellationToken cancellationToken = default)\n    {\n        // Simulate some async operation\n        await Task.Delay(100, cancellationToken);\n\n        // Create random embeddings\n        return new GeneratedEmbeddings<Embedding<float>>(\n            from value in values\n            select new Embedding<float>(\n                Enumerable.Range(0, 384).Select(_ => Random.Shared.NextSingle()).ToArray()));\n    }\n\n    object? IChatClient.GetService(Type serviceType, object? serviceKey = null) =>\n        serviceKey is not null ? null :\n        serviceType == typeof(EmbeddingGeneratorMetadata) ? _metadata :\n        serviceType?.IsInstanceOfType(this) is true ? this :\n        null;\n\n    void IDisposable.Dispose() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Telemetry to Ollama Chat Client\nDESCRIPTION: Demonstrates how to implement OpenTelemetry with an Ollama chat client. This example configures telemetry to track chat interactions, including setting up a console exporter and enabling sensitive data collection for comprehensive monitoring.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Ollama/README.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\nusing OpenTelemetry.Trace;\n\n// Configure OpenTelemetry exporter\nvar sourceName = Guid.NewGuid().ToString();\nvar tracerProvider = OpenTelemetry.Sdk.CreateTracerProviderBuilder()\n    .AddSource(sourceName)\n    .AddConsoleExporter()\n    .Build();\n\nIChatClient ollamaClient = new OllamaChatClient(new Uri(\"http://localhost:11434/\"), \"llama3.1\");\n\nIChatClient client = new ChatClientBuilder(ollamaClient)\n    .UseOpenTelemetry(sourceName: sourceName, configure: c => c.EnableSensitiveData = true)\n    .Build();\n\nConsole.WriteLine(await client.GetResponseAsync(\"What is AI?\"));\n```\n\n----------------------------------------\n\nTITLE: Using MetricCollector in Tests\nDESCRIPTION: Example of using MetricCollector to test a component that produces metrics, showing meter creation, collector initialization, and accessing collected measurements.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.Testing/README.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Diagnostics.Metrics;\nusing Microsoft.Extensions.Diagnostics.Testing;\n\nusing var meter = new Meter(\"TestMeter\");\nusing var collector = new MetricCollector<int>(meter, \"TestInstrument\");\n\nvar myComponentUnderTest = new MyComponent(meter);\nmyComponentUnderTest.DoWork(); // We assume that the component will produce some integer metrics\n\nCollectedMeasurement<int>? measurement = collector.LastMeasurement();\n// ... assert that the measurement is correct\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.AI.Evaluation Packages via Console\nDESCRIPTION: Command-line instructions for installing the core Microsoft.Extensions.AI.Evaluation packages using the dotnet CLI. This includes the main library, quality evaluators, and reporting tools.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation.Quality/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.AI.Evaluation\ndotnet add package Microsoft.Extensions.AI.Evaluation.Quality\ndotnet add package Microsoft.Extensions.AI.Evaluation.Reporting\n```\n\n----------------------------------------\n\nTITLE: Tool Calling Implementation\nDESCRIPTION: Shows how to implement tool calling functionality with a custom weather function.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.OpenAI/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel;\nusing Microsoft.Extensions.AI;\n\nIChatClient openaiClient =\n    new OpenAI.Chat.ChatClient(\"gpt-4o-mini\", Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\"))\n    .AsIChatClient();\n\nIChatClient client = new ChatClientBuilder(openaiClient)\n    .UseFunctionInvocation()\n    .Build();\n\nChatOptions chatOptions = new()\n{\n    Tools = [AIFunctionFactory.Create(GetWeather)]\n};\n\nawait foreach (var message in client.GetStreamingResponseAsync(\"Do I need an umbrella?\", chatOptions))\n{\n    Console.Write(message);\n}\n\n[Description(\"Gets the weather\")]\nstatic string GetWeather() => Random.Shared.NextDouble() > 0.5 ? \"It's sunny\" : \"It's raining\";\n```\n\n----------------------------------------\n\nTITLE: Problematic Registration Order with Application Insights\nDESCRIPTION: Example of service registration that causes Application Insights telemetry to be missing. This sample shows the problematic order of registering resilience functionality before Application Insights with older versions.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Http.Resilience/README.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// At first, we register resilience functionality.\nservices.AddHttpClient().AddStandardResilienceHandler();\n\n// And then we register Application Insights. As a result, Application Insights doesn't work.\nservices.AddApplicationInsightsTelemetry();\n```\n\n----------------------------------------\n\nTITLE: Using AsyncState in a C# Class\nDESCRIPTION: Example showing how to inject and use IAsyncContext<T> in a C# class, including getting and setting state values.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AsyncState/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyClass\n{\n  public MyClass(IAsyncContext<MyState> asyncContext) { Context = asyncContext }\n\n  private IAsyncContext<MyState> Context { get; }\n\n  public async Task DoWork()\n  {\n    var state = Context.Get();\n    // or\n    Context.Set(new MyState());\n    // or\n    if (Context.TryGet(out var state)) { ... }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-Activating Previously Registered Singleton in C#\nDESCRIPTION: This snippet shows how to use the ActivateSingleton method to auto-activate a service that has already been registered as a singleton.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.DependencyInjection.AutoActivation/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddSingleton<OtherService>();\n// ...\nbuilder.Services.ActivateSingleton<OtherService>();\n```\n\n----------------------------------------\n\nTITLE: Implementing Application Lifecycle Health Check\nDESCRIPTION: Complete example showing how to register and use the Application Lifecycle Health Check in a web application.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.HealthChecks.Common/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddHealthChecks()\n    .AddApplicationLifecycleHealthCheck();\n\nvar app = builder.Build();\n\napp.MapHealthChecks(\"/healthz\");\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AI Search Endpoint with .NET User Secrets\nDESCRIPTION: This snippet shows how to configure the Azure AI Search endpoint using .NET User Secrets. This avoids hardcoding the endpoint in the application. Replace `YOUR-AZURE-AI-SEARCH-ENDPOINT` with the actual endpoint URL for the Azure AI Search service.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/ProjectTemplates/Microsoft.Extensions.AI.Templates.IntegrationTests/Snapshots/aichatweb.OpenAI_AzureAISearch.verified/aichatweb/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd <<your-project-directory>>\ndotnet user-secrets set AzureAISearch:Endpoint YOUR-AZURE-AI-SEARCH-ENDPOINT\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Client Extension Methods\nDESCRIPTION: Examples of creating extension methods for chat client middleware registration.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class RateLimitingChatClientExtensions\n{\n    public static ChatClientBuilder UseRateLimiting(this ChatClientBuilder builder, RateLimiter rateLimiter) =>\n        builder.Use(innerClient => new RateLimitingChatClient(innerClient, rateLimiter));\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class RateLimitingChatClientExtensions\n{\n    public static ChatClientBuilder UseRateLimiting(this ChatClientBuilder builder, RateLimiter? rateLimiter = null) =>\n        builder.Use((innerClient, services) => new RateLimitingChatClient(innerClient, services.GetRequiredService<RateLimiter>()));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard Resilience Handler with HttpClient\nDESCRIPTION: Code example showing how to add and configure a standard resilience handler for an HttpClient. This sample demonstrates setting up resilience with circuit breaker configuration to ensure HTTP requests can be sent reliably.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Http.Resilience/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar clientBuilder = services.AddHttpClient(\"MyClient\");\n\nclientBuilder.AddStandardResilienceHandler().Configure(o =>\n{\n    o.CircuitBreaker.MinimumThroughput = 10;\n});\n```\n\n----------------------------------------\n\nTITLE: Consuming AmbientMetadata in Application Code\nDESCRIPTION: C# example demonstrating how to inject and use ApplicationMetadata in a class to access version, deployment ring, environment, and name information.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AmbientMetadata.Application/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyClass\n{\n  public MyClass(IOptions<ApplicationMetadata> options) { Application = options.Value; }\n\n  private ApplicationMetadata Application { get; }\n\n  public void DoWork()\n  {\n    Log.LogEnvironment(Application.Version, Application.DeploymentRing, Application.Environment, Application.Name);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AI Evaluation Packages via Console Command\nDESCRIPTION: Commands for installing the Microsoft.Extensions.AI.Evaluation packages using the dotnet CLI. This allows developers to add core evaluation functionality, quality evaluators, and reporting capabilities to their projects.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation.Reporting/TypeScript/azure-devops-report/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.AI.Evaluation\ndotnet add package Microsoft.Extensions.AI.Evaluation.Quality\ndotnet add package Microsoft.Extensions.AI.Evaluation.Reporting\n```\n\n----------------------------------------\n\nTITLE: Caching Implementation\nDESCRIPTION: Demonstrates how to implement distributed caching with the chat client.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.OpenAI/README.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\nusing Microsoft.Extensions.Caching.Distributed;\nusing Microsoft.Extensions.Caching.Memory;\nusing Microsoft.Extensions.Options;\n\nIDistributedCache cache = new MemoryDistributedCache(Options.Create(new MemoryDistributedCacheOptions()));\n\nIChatClient openaiClient =\n    new OpenAI.Chat.ChatClient(\"gpt-4o-mini\", Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\"))\n    .AsIChatClient();\n\nIChatClient client = new ChatClientBuilder(openaiClient)\n    .UseDistributedCache(cache)\n    .Build();\n\nfor (int i = 0; i < 3; i++)\n{\n    await foreach (var message in client.GetStreamingResponseAsync(\"In less than 100 words, what is AI?\"))\n    {\n        Console.Write(message);\n    }\n\n    Console.WriteLine();\n    Console.WriteLine();\n}\n```\n\n----------------------------------------\n\nTITLE: Using IExceptionSummarizer to Summarize Exceptions in C#\nDESCRIPTION: This snippet demonstrates how to use the IExceptionSummarizer service to summarize exceptions. It shows resolving the service from the service provider, catching an exception, and using the summarizer to get a summary of the exception.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.ExceptionSummarization/README.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.Diagnostics.ExceptionSummarization;\n\nvar summarizer = services.BuildServiceProvider().GetRequiredService<IExceptionSummarizer>();\n\ntry\n{\n    throw new SocketException((int)SocketError.NetworkDown);\n}\ncatch (Exception e)\n{\n    ExceptionSummary summary = summarizer.Summarize(e);\n\n    Console.WriteLine(summary.Description); // writes NetworkDown\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an ExpiryCache with TimeProvider in C#\nDESCRIPTION: Example implementation of a generic expiry cache that uses TimeProvider for time-based expiration. This shows a practical application for the TimeProvider abstraction in production code.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.TimeProvider.Testing/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ExpiryCache<TKey, TValue>\n{\n    private readonly TimeProvider _timeProvider;\n    private readonly ConcurrentDictionary<TKey, CacheItem> _cache = new();\n    private readonly TimeSpan _expirationDuration;\n\n    public ExpiryCache(TimeProvider timeProvider, TimeSpan expirationDuration)\n    {\n        _timeProvider = timeProvider ?? throw new ArgumentNullException(nameof(timeProvider));\n        _expirationDuration = expirationDuration;\n    }\n\n    public void Add(TKey key, TValue value)\n    {\n        var expirationTime = _timeProvider.GetUtcNow() + _expirationDuration;\n        var cacheItem = new CacheItem(value, expirationTime);\n\n        _cache[key] = cacheItem;\n    }\n\n    public bool TryGetValue(TKey key, out TValue value)\n    {\n        value = default;\n        if (_cache.TryGetValue(key, out TValue cacheItem))\n        {\n            if (cacheItem.ExpirationTime > _timeProvider.GetUtcNow())\n            {\n                value = cacheItem.Value;\n                return true;\n            }\n\n            // Remove expired item\n            _cache.TryRemove(key, out _);\n        }\n        return false;\n    }\n\n    private class CacheItem\n    {\n        public TValue Value { get; }\n        public DateTimeOffset ExpirationTime { get; }\n\n        public CacheItem(TValue value, DateTimeOffset expirationTime)\n        {\n            Value = value;\n            ExpirationTime = expirationTime;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Log Enricher\nDESCRIPTION: Example of implementing a custom log enricher by implementing the ILogEnricher interface.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Telemetry.Abstractions/README.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CustomLogEnricher : ILogEnricher\n{\n    public void Enrich(IEnrichmentTagCollector collector)\n    {\n        // Add custom logic to enrich log data\n        collector.Add(\"CustomTag\", \"CustomValue\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tool Calling with Ollama\nDESCRIPTION: Demonstrates how to implement tool calling (function invocation) with Ollama. This example configures a function that can be called by the AI during the conversation, with limitations noted for streaming and model compatibility.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Ollama/README.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ComponentModel;\nusing Microsoft.Extensions.AI;\n\nIChatClient ollamaClient = new OllamaChatClient(new Uri(\"http://localhost:11434/\"), \"llama3.1\");\n\nIChatClient client = new ChatClientBuilder(ollamaClient)\n    .UseFunctionInvocation()\n    .Build();\n\nChatOptions chatOptions = new()\n{\n    Tools = [AIFunctionFactory.Create(GetWeather)]\n};\n\nConsole.WriteLine(await client.GetResponseAsync(\"Do I need an umbrella?\", chatOptions));\n\n[Description(\"Gets the weather\")]\nstatic string GetWeather() => Random.Shared.NextDouble() > 0.5 ? \"It's sunny\" : \"It's raining\";\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Retry Logic with FakeTimeProvider and Polly\nDESCRIPTION: Comprehensive example showing how to test asynchronous retry logic using FakeTimeProvider with Polly. Demonstrates clearing the SynchronizationContext and advancing time to control asynchronous behavior.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.TimeProvider.Testing/README.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing Polly;\nusing Polly.Retry;\n\npublic class SomeService(TimeProvider timeProvider)\n{\n    // Don't do this in real life, not thread safe\n    public int Tries { get; private set; }\n\n    private readonly ResiliencePipeline _retryPipeline = new ResiliencePipelineBuilder { TimeProvider = timeProvider }\n        .AddRetry(\n            new RetryStrategyOptions\n            {\n                ShouldHandle = new PredicateBuilder().Handle<InvalidOperationException>(),\n                Delay = TimeSpan.FromSeconds(1),\n                MaxRetryAttempts = 2,\n                BackoffType = DelayBackoffType.Linear,\n            })\n        .Build();\n\n    public async Task<int> PollyRetry(double taskDelay, double cancellationSeconds)\n    {\n        Tries = 0;\n        return await _retryPipeline.ExecuteAsync(\n            async _ =>\n            {\n                Tries++;\n                // Simulate a task that takes some time to complete\n                // With xUnit Context this would fail.\n                await timeProvider.Delay(TimeSpan.FromSeconds(taskDelay)).ConfigureAwait(false);\n                if (Tries < 2)\n                {\n                    throw new InvalidOperationException();\n                }\n                return Tries;\n            },\n            CancellationToken.None);\n    }\n}\n\nusing Microsoft.Extensions.Time.Testing;\n\npublic class SomeServiceTests\n{\n    [Fact]\n    public void PollyRetry_ShouldHave2Tries()\n    {\n        // Arrange\n        // Remove xUnit Context for this test\n        SynchronizationContext.SetSynchronizationContext(null);\n        var timeProvider = new FakeTimeProvider();\n        var someService = new SomeService(timeProvider);\n\n        // Act\n        var result = someService.PollyRetry(taskDelay: 1, cancellationSeconds: 6);\n\n        // Advancing the time more than one second should resolves the first execution delay.\n        timeProvider.Advance(TimeSpan.FromMilliseconds(1001));\n\n        // Advancing the time more than the retry delay time of 1s,\n        // and less then the task execution delay should start the second try\n        timeProvider.Advance(TimeSpan.FromMilliseconds(1050));\n        \n        // Assert\n        result.IsCompleted.Should().BeFalse();\n        someService.Tries.Should().Be(2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Telemetry Publisher\nDESCRIPTION: Complete example showing how to register and use the Telemetry Publisher in a web application.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.HealthChecks.Common/README.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\n// register health check services as needed\nbuilder.Services.AddHealthChecks()\n    .AddCheck<SampleHealthCheck>(\"Sample\");\n\n// register telemetry publisher\nbuilder.Services.AddTelemetryHealthCheckPublisher();\n\nvar app = builder.Build();\n\napp.MapHealthChecks(\"/healthz\");\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI Test Settings in JSON\nDESCRIPTION: JSON configuration template for setting up Azure OpenAI test parameters including deployment name, model name, endpoint URL, and local storage path. This configuration is required for running evaluation tests locally.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.AI.Evaluation.Integration.Tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Configured\": true,\n  \"DeploymentName\": \"<the Azure Open AI model deployment that the tests should use>\",\n  \"ModelName\": \"<the Azure Open AI model (such as gpt-4o) that the tests should use>\",\n  \"Endpoint\": \"<the Azure Open AI endpoint url that the tests should use>\",\n  \"StorageRootPath\": \"<the full path to a folder on your machine under which cached LLM responses and evaluation resuts for the tests should be stored>\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Registering ExceptionSummarizer with HTTP Provider in C#\nDESCRIPTION: This snippet shows how to register the ExceptionSummarizer services with the predefined HTTP provider. It uses the overload that takes a configuration action to add the HTTP provider.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.ExceptionSummarization/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.Diagnostics.ExceptionSummarization;\n\nservices.AddExceptionSummarizer(b => b.AddHttpProvider());\n```\n\n----------------------------------------\n\nTITLE: Using LogProperties Attribute for Object Logging\nDESCRIPTION: Demonstration of the LogProperties attribute for automatic property logging of objects.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Telemetry.Abstractions/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[LoggerMessage(1, LogLevel.Information, \"Detected a new temperature: {temperature}\")]\ninternal static partial void LogNewTemperature(ILogger<Program> logger, [LogProperties] Temperature temperature);\n\ninternal record Temperature(double value, TemperatureUnit unit);\n```\n\n----------------------------------------\n\nTITLE: Registering Telemetry Publisher Methods\nDESCRIPTION: C# extension methods for registering the Telemetry Publisher in the service collection with different configuration options.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.HealthChecks.Common/README.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IServiceCollection AddTelemetryHealthCheckPublisher(this IServiceCollection services)\npublic static IServiceCollection AddTelemetryHealthCheckPublisher(this IServiceCollection services, IConfigurationSection section)\npublic static IServiceCollection AddTelemetryHealthCheckPublisher(this IServiceCollection services, Action<TelemetryHealthCheckPublisherOptions> configure)\n```\n\n----------------------------------------\n\nTITLE: Testing ExpiryCache with FakeTimeProvider in C#\nDESCRIPTION: Unit test demonstrating how to use FakeTimeProvider to test time-based expiration in the ExpiryCache class. Shows how to manipulate time to verify expiration behavior.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.TimeProvider.Testing/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.Time.Testing;\n\npublic class ExpiryCacheTests\n{\n    [Fact]\n    public void ExpiryCache_ShouldRemoveExpiredItems()\n    {\n        var timeProvider = new FakeTimeProvider();\n        var cache = new ExpiryCache<string, string>(timeProvider, TimeSpan.FromSeconds(3));\n\n        cache.Add(\"key1\", \"value1\");\n\n        // Simulate time passing\n        timeProvider.SetUtcNow(timeProvider.GetUtcNow() + TimeSpan.FromSeconds(2));\n\n        // The item should still be in the cache\n        bool found = cache.TryGetValue(\"key1\", out string value);\n        Assert.True(found);\n        Assert.Equal(\"value1\", value);\n\n        // Simulate further time passing to be after expiration time\n        timeProvider.SetUtcNow(timeProvider.GetUtcNow() + TimeSpan.FromSeconds(2));\n\n        // The item should now be expired\n        found = cache.TryGetValue(\"key1\", out value);\n        Assert.False(found);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Data Classification Settings in C#\nDESCRIPTION: C# code demonstrating how to bind data classification settings from configuration using the options pattern. It includes setting up a configuration builder, DI container, and accessing the bound options.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Compliance.Abstractions/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Compliance.Classification;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Options;\n\npublic class TestOptions\n{\n    public DataClassification? PhoneNumber { get; set; }\n    public IDictionary<string, DataClassification> ExampleDictionary { get; set; } = new Dictionary<string, DataClassification>();\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // Build configuration from an external json file.\n        IConfiguration configuration = new ConfigurationBuilder()\n            .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)\n            .Build();\n\n        // Setup DI container and bind the configuration section \"Key\" to TestOptions.\n        IServiceCollection services = new ServiceCollection();\n        services.Configure<TestOptions>(configuration.GetSection(\"Key\"));\n\n        // Build the service provider.\n        IServiceProvider serviceProvider = services.BuildServiceProvider();\n\n        // Get the bound options.\n        TestOptions options = serviceProvider.GetRequiredService<IOptions<TestOptions>>().Value;\n\n        // Simple output demonstrating binding results.\n        Console.WriteLine(\"Configuration bound to TestOptions:\");\n        Console.WriteLine($\"PhoneNumber: {options.PhoneNumber}\");\n        foreach (var item in options.ExampleDictionary)\n        {\n            Console.WriteLine($\"{item.Key}: {item.Value}\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering HybridCache Service\nDESCRIPTION: Code example showing how to register the HybridCache service in the dependency injection container.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Caching.Hybrid/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddHybridCache(/* optional configuration /*);\n```\n\n----------------------------------------\n\nTITLE: Building Custom Resilience Pipeline for HttpClient\nDESCRIPTION: Example of creating a custom resilience pipeline with granular control over resilience strategies. This sample shows how to combine multiple resilience patterns including fallback, concurrency limiting, retry, circuit breaker, and timeout.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Http.Resilience/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar clientBuilder = services.AddHttpClient(\"MyClient\");\n\nclientBuilder.AddResilienceHandler(\"myHandler\", b =>\n{\n    b.AddFallback(new FallbackStrategyOptions<HttpResponseMessage>()\n    {\n        FallbackAction = _ => Outcome.FromResultAsValueTask(new HttpResponseMessage(HttpStatusCode.ServiceUnavailable))\n    })\n    .AddConcurrencyLimiter(100)\n    .AddRetry(new HttpRetryStrategyOptions())\n    .AddCircuitBreaker(new HttpCircuitBreakerStrategyOptions())\n    .AddTimeout(new HttpTimeoutStrategyOptions());\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.AI Package via Command-Line\nDESCRIPTION: This snippet shows how to install the Microsoft.Extensions.AI package using the dotnet CLI command-line interface. It adds the package to the current project.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.AI\n```\n\n----------------------------------------\n\nTITLE: Suppressing gRPC Compatibility Check in Project File\nDESCRIPTION: XML configuration to suppress the build-time warning about gRPC compatibility issues. This property can be added to the project file to disable the check when using older versions of Grpc.Net.ClientFactory.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Http.Resilience/README.md#2025-04-21_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <SuppressCheckGrpcNetClientFactoryVersion>true</SuppressCheckGrpcNetClientFactoryVersion>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AI Search Endpoint in secrets.json (Visual Studio)\nDESCRIPTION: JSON configuration for storing the Azure AI Search endpoint in the user secrets file within Visual Studio. This approach keeps sensitive configuration data out of source control.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/ChatWithCustomData-CSharp.Web/README.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AzureAISearch:Endpoint\": \"YOUR-AZURE-AI-SEARCH-ENDPOINT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Header Parser in C# ASP.NET Core Endpoint\nDESCRIPTION: C# code snippet demonstrating how to use a registered header parser to parse the Accept-Encoding header in an ASP.NET Core endpoint.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.AspNetCore.HeaderParsing/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\napp.MapGet(\"/\", string (HttpContext context) =>\n{\n    if (context.Request.TryGetHeaderValue(encodingKey, out var encoding))\n    {\n        return string.Join(\", \", encoding);\n    }\n\n    return \"\";\n});\n```\n\n----------------------------------------\n\nTITLE: Simplifying Embedding Generation for Single Input in .NET\nDESCRIPTION: This snippet presents a simplified method for generating an embedding vector from a single input using the accelerator extension methods provided by the embedding generator.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.AI;\n\nIEmbeddingGenerator<string, Embedding<float>> generator =\n    new SampleEmbeddingGenerator(new Uri(\"http://coolsite.ai\"), \"my-custom-model\");\n\nReadOnlyMemory<float> vector = generator.GenerateVectorAsync(\"What is AI?\");\n```\n\n----------------------------------------\n\nTITLE: Manual Health Check Control Methods\nDESCRIPTION: C# extension methods for controlling the health status in a Manual Health Check.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.HealthChecks.Common/README.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void ReportHealthy(this IManualHealthCheck manualHealthCheck)\npublic static void ReportUnhealthy(this IManualHealthCheck manualHealthCheck, string reason)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Redactor in C#\nDESCRIPTION: Example of implementing a custom redactor by inheriting from the Redactor class. This StarRedactor replaces sensitive data with asterisks.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Compliance.Abstractions/README.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.Compliance.Redaction;\n\npublic class StarRedactor : Redactor\n{\n    private const string Stars = \"****\";\n\n    public override int GetRedactedLength(ReadOnlySpan<char> input) => Stars.Length;\n\n    public override int Redact(ReadOnlySpan<char> source, Span<char> destination)\n    {\n        Stars.CopyTo(destination);\n        return Stars.Length;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Chat Response Example\nDESCRIPTION: Demonstrates using GetStreamingResponseAsync for real-time response updates\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nIChatClient client = ...;\n\nawait foreach (var update in client.GetStreamingResponseAsync(\"What is AI?\"))\n{\n    Console.Write(update);\n}\n```\n\n----------------------------------------\n\nTITLE: FakeTimeProvider API Definition in C#\nDESCRIPTION: The API surface of the FakeTimeProvider class which derives from TimeProvider and adds methods to manipulate time for testing purposes.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.TimeProvider.Testing/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic FakeTimeProvider(DateTimeOffset startDateTime)\npublic DateTimeOffset Start { get; }\npublic TimeSpan AutoAdvanceAmount { get; set; }\npublic void SetUtcNow(DateTimeOffset value)\npublic void Advance(TimeSpan delta)\npublic void SetLocalTimeZone(TimeZoneInfo localTimeZone)\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.AI.OpenAI Package\nDESCRIPTION: Shows how to install the package using either command line or by adding package reference to project file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.OpenAI/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.AI.OpenAI\n```\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.AI.OpenAI\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Tests with OpenAI API\nDESCRIPTION: Commands to set up user secrets for OpenAI integration tests using the OpenAI API directly. These configurations include the mode, API key, and optional model specifications for chat and embedding.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.AI.Integration.Tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd test/Libraries/Microsoft.Extensions.AI.Integration.Tests\ndotnet user-secrets set OpenAI:Mode OpenAI\ndotnet user-secrets set OpenAI:Key abcdefghijkl\n```\n\nLANGUAGE: bash\nCODE:\n```\ndotnet user-secrets set OpenAI:ChatModel gpt-4o-mini\ndotnet user-secrets set OpenAI:EmbeddingModel text-embedding-3-small\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Logging with Redaction in ASP.NET Core\nDESCRIPTION: Complete example showing how to set up HTTP logging with redaction in an ASP.NET Core application, including both general logging and redaction options.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.AspNetCore.Diagnostics.Middleware/README.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\n// General logging options\nbuilder.Services.AddHttpLogging(options => { });\n// Redaction options\nbuilder.Services.AddHttpLoggingRedaction(options => { });\n\nvar app = builder.Build();\n\napp.UseHttpLogging();\n```\n\n----------------------------------------\n\nTITLE: Using FakeLogger in Tests\nDESCRIPTION: Example of using FakeLogger to test a component that produces logs, showing how to create the logger, optionally configure log levels, and access captured logs.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.Testing/README.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar fakeLogger = new FakeLogger<MyComponent>();\n\n// Optionally, you can set the log level\n// fakeLogger.ControlLevel(LogLevel.Debug, enabled: true);\n\nvar myComponentUnderTest = new MyComponent(fakeLogger);\nmyComponentUnderTest.DoWork(); // We assume that the component will produce some logs\n\nFakeLogCollector collector = fakeLogger.Collector; // Collector allows you to access the captured logs\nIReadOnlyList<FakeLogRecord> logs = collector.GetSnapshot();\n// ... assert that the logs are correct\n```\n\n----------------------------------------\n\nTITLE: Implementing a Redactor Provider in C#\nDESCRIPTION: Example of implementing a redactor provider by implementing the IRedactorProvider interface. This provider returns a StarRedactor instance for any given data classification set.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Compliance.Abstractions/README.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.Compliance.Classification;\nusing Microsoft.Extensions.Compliance.Redaction;\n\npublic sealed class StarRedactorProvider : IRedactorProvider\n{\n    private static readonly StarRedactor _starRedactor = new();\n\n    public static StarRedactorProvider Instance { get; } = new();\n\n    public Redactor GetRedactor(DataClassificationSet classifications) => _starRedactor;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AI Search API Key and Endpoint - Shell\nDESCRIPTION: Shell command for setting up the Azure AI Search API key and endpoint using .NET User Secrets. This command adds both the endpoint URL and API key to the project's secret storage.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/README.Aspire.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncd ChatWithCustomData-CSharp.AppHost\ndotnet user-secrets set ConnectionStrings:azureAISearch \"Endpoint=https://YOUR-DEPLOYMENT-NAME.search.windows.net;Key=YOUR-API-KEY\"\n```\n\n----------------------------------------\n\nTITLE: Using Latency Context for Performance Tracking\nDESCRIPTION: Demonstration of using latency context to track performance metrics in an application.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Telemetry.Abstractions/README.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic void YourMethod(ILatencyContextProvider contextProvider)\n{\n    var context = contextProvider.CreateContext();\n    var checkpointToken = context.GetCheckpointToken(\"databaseQuery\");\n\n    // Start measuring\n    context.AddCheckpoint(checkpointToken);\n\n    // Perform operations...\n\n    // End measuring\n    context.AddCheckpoint(checkpointToken);\n\n    // Optionally, record measures and tags\n    context.RecordMeasure(context.GetMeasureToken(\"responseTime\"), measureValue);\n    context.SetTag(context.GetTagToken(\"userId\"), \"User123\");\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.AI.AzureAIInference via Console\nDESCRIPTION: Command-line instructions for adding the Microsoft.Extensions.AI.AzureAIInference package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.AzureAIInference/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.AI.AzureAIInference\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Models API Key - JSON\nDESCRIPTION: JSON configuration for setting up the GitHub Models API key using .NET User Secrets. This snippet shows how to store the API endpoint and key securely.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/README.Aspire.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings:openai\": \"Endpoint=https://models.inference.ai.azure.com;Key=YOUR-API-KEY\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Latency Tracking in ASP.NET Core\nDESCRIPTION: Complete example showing how to set up request latency tracking in an ASP.NET Core application, including both service and middleware registration.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.AspNetCore.Diagnostics.Middleware/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddRequestLatencyTelemetry();\nbuilder.Services.AddRequestCheckpoint(options => { });\n\nvar app = builder.Build();\n\napp.UseRequestCheckpoint();\napp.UseRequestLatencyTelemetry();\n```\n\n----------------------------------------\n\nTITLE: AddRedaction service registration method signatures\nDESCRIPTION: C# extension method signatures for registering redaction services in the dependency injection container. Two overloads are provided for basic registration and registration with configuration.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Compliance.Redaction/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IServiceCollection AddRedaction(this IServiceCollection services)\npublic static IServiceCollection AddRedaction(this IServiceCollection services, Action<IRedactionBuilder> configure)\n```\n\n----------------------------------------\n\nTITLE: Using AsyncState in a Service Class\nDESCRIPTION: Example C# class demonstrating how to inject and use IAsyncContext<T> for managing state across async operations\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.AspNetCore.AsyncState/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyClass\n{\n  public MyClass(IAsyncContext<MyState> asyncContext) { Context = asyncContext }\n\n  private IAsyncContext<MyState> Context { get; }\n\n  public async Task DoWork()\n  {\n    var state = Context.Get();\n    // or\n    Context.Set(new MyState());\n    // or\n    if (Context.TryGet(out var state)) { ... }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Request Metadata in C# with ResilienceContext\nDESCRIPTION: Demonstrates extension methods for setting and retrieving RequestMetadata from a ResilienceContext object in C#.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Resilience/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void SetRequestMetadata(this ResilienceContext context, RequestMetadata requestMetadata)\npublic static RequestMetadata? GetRequestMetadata(this ResilienceContext context)\n```\n\n----------------------------------------\n\nTITLE: Registering Latency Tracking Names\nDESCRIPTION: Example of registering checkpoint, measure, and tag names for latency tracking.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Telemetry.Abstractions/README.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.RegisterCheckpointNames(\"databaseQuery\", \"externalApiCall\");\nbuilder.Services.RegisterMeasureNames(\"responseTime\", \"processingTime\");\nbuilder.Services.RegisterTagNames(\"userId\", \"transactionId\");\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI API Key with .NET User Secrets\nDESCRIPTION: This snippet demonstrates how to securely store the OpenAI API key using .NET User Secrets.  It ensures the API key is not stored directly in the code and is accessible only to the current user.  The user needs to replace `YOUR-API-KEY` with their actual OpenAI API Key.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/ProjectTemplates/Microsoft.Extensions.AI.Templates.IntegrationTests/Snapshots/aichatweb.OpenAI_AzureAISearch.verified/aichatweb/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd <<your-project-directory>>\ndotnet user-secrets set OpenAI:Key YOUR-API-KEY\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Extensions AI Evaluation Packages via .NET CLI\nDESCRIPTION: Commands to install the core Microsoft.Extensions.AI.Evaluation packages using the dotnet CLI command line interface.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.AI.Evaluation\ndotnet add package Microsoft.Extensions.AI.Evaluation.Quality\ndotnet add package Microsoft.Extensions.AI.Evaluation.Reporting\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Logging with Custom Redaction Mode\nDESCRIPTION: C# code snippet demonstrating how to configure HTTP client logging with a custom redaction mode for request path parameters. This example disables redaction of request/response routes.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Http.Diagnostics/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n  .AddExtendedHttpClientLogging(o =>\n{\n    //.. Other options\n\n    o.RequestPathParameterRedactionMode = HttpRouteParameterRedactionMode.None; // <-- Disable redaction of request/response routes\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Weather Forecast Options Class\nDESCRIPTION: C# class defining the configuration options for weather forecast including temperature scale and forecast days\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Options.Contextual/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ninternal class WeatherForecastOptions\n{\n    public string TemperatureScale { get; set; } = \"Celsius\"; // Celsius or Fahrenheit\n    public int ForecastDays { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Running an AI Chat Web Project from Template\nDESCRIPTION: PowerShell commands to create a new project using the AI Chat Web template with various configuration options, and run the generated application. Demonstrates template usage with different provider and vector store options.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/README.md#2025-04-21_snippet_5\n\nLANGUAGE: pwsh\nCODE:\n```\ndotnet new aichatweb `\n    [--provider <azureopenai | githubmodels | ollama | openai>] `\n    [--vector-store <azureaisearch | local | qdrant>] `\n    [--aspire] `\n    [--managed-identity]\n\n# If using `--aspire`, cd into the *AppHost directory\n# Follow the instructions in the generated README for setting the necessary user-secrets\n\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Registering Kubernetes Probes in C#\nDESCRIPTION: C# method signatures for registering and configuring Kubernetes probe endpoints. These methods extend IServiceCollection to add Kubernetes probes with various configuration options.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.Probes/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IServiceCollection AddKubernetesProbes(this IServiceCollection services)\npublic static IServiceCollection AddKubernetesProbes(this IServiceCollection services, IConfigurationSection section)\npublic static IServiceCollection AddKubernetesProbes(this IServiceCollection services, Action<KubernetesProbesOptions> configure)\n```\n\n----------------------------------------\n\nTITLE: Accessing a Test Web App with IHost Extensions\nDESCRIPTION: C# code example demonstrating how to access the test host created with FakeHost. It creates an HTTP client from the host and makes a GET request to the root endpoint.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.AspNetCore.Testing/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing var client = host.CreateClient();\n\nvar response = await client.GetAsync(\"/\");\n```\n\n----------------------------------------\n\nTITLE: Adding Log Enrichers\nDESCRIPTION: Code examples showing how to add log enrichers using both specific implementations and generic types.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Telemetry.Abstractions/README.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Using a specific implementation\nbuilder.Services.AddLogEnricher(new CustomLogEnricher());\n\n// Using a generic type\nbuilder.Services.AddLogEnricher<AnotherLogEnricher>();\n```\n\n----------------------------------------\n\nTITLE: Implementing Memoized Async Function\nDESCRIPTION: Example demonstrating how to implement and compare regular vs memoized async function calls. Shows performance difference between cached and uncached execution.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Shared/Memoization/README.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task<int> Delay(int seconds)\n{\n    // Simulate a long-running/expensive function.\n    await Task.Delay(TimeSpan.FromSeconds(seconds));\n    return seconds;\n}\n\nConsole.WriteLine($\"t1 = {DateTimeOffset.UtcNow:o}\");\nawait Delay(1);\nawait Delay(1);\nConsole.WriteLine($\"t2 = {DateTimeOffset.UtcNow:o}\");\n\nvar memoizedDelay = Memoize.Function<int, Task<int>>(Delay);\n\nConsole.WriteLine($\"t3 = {DateTimeOffset.UtcNow:o}\");\nawait memoizedDelay(1);\nawait memoizedDelay(1);\nConsole.WriteLine($\"t4 = {DateTimeOffset.UtcNow:o}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AI Search API Key and Endpoint - JSON\nDESCRIPTION: JSON configuration for setting up the Azure AI Search API key and endpoint using .NET User Secrets. This snippet shows how to store both the endpoint URL and API key securely.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/README.Aspire.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings:azureAISearch\": \"Endpoint=https://YOUR-DEPLOYMENT-NAME.search.windows.net;Key=YOUR-API-KEY\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Extensions AI Evaluation Packages via CLI\nDESCRIPTION: Commands to install the core Microsoft.Extensions.AI.Evaluation packages using the dotnet CLI\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation.Safety/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.AI.Evaluation\ndotnet add package Microsoft.Extensions.AI.Evaluation.Quality\ndotnet add package Microsoft.Extensions.AI.Evaluation.Reporting\n```\n\n----------------------------------------\n\nTITLE: Implementing HybridCache in a Service\nDESCRIPTION: Complete example showing how to implement HybridCache in a service class, including dependency injection and the GetOrCreateAsync pattern.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Caching.Hybrid/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SomeService(HybridCache cache)\n{\n    private HybridCache _cache = cache;\n\n    public async Task<SomeDataType> GetSomeInfoAsync(string name, int id, CancellationToken token = default)\n    {\n        return await _cache.GetOrCreateAsync(\n            $\"{name}-{id}\", // Unique key to the cache entry\n            async cancel => await GetDataFromTheSourceAsync(name, id, cancel),\n            cancellationToken: token\n        );\n    }\n\n    private async Task<SomeDataType> GetDataFromTheSourceAsync(string name, int id, CancellationToken token)\n    {\n        // talk to the underlying data store here - could be SQL, gRPC, HTTP, etc\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating FakeLogger Instances\nDESCRIPTION: Constructors for creating FakeLogger instances directly, either with a collector or an output sink action.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.Testing/README.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic FakeLogger(FakeLogCollector? collector = null, string? category = null)\npublic FakeLogger(Action<string> outputSink, string? category = null)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI with Managed Identity\nDESCRIPTION: JSON configuration for setting up Azure OpenAI endpoint with managed identity authentication.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/ChatWithCustomData-CSharp.Web/README.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AzureOpenAI:Endpoint\": \"YOUR-AZURE-OPENAI-ENDPOINT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ExceptionSummarizer Service Registration in C#\nDESCRIPTION: This snippet demonstrates how to register the ExceptionSummarizer services using the basic overload of the AddExceptionSummarizer method.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.ExceptionSummarization/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddExceptionSummarizer();\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AI Search Key and Endpoint in secrets.json (Visual Studio)\nDESCRIPTION: JSON configuration for storing both the Azure AI Search API key and endpoint in the user secrets file within Visual Studio. This keeps sensitive credentials secure and out of source control.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/ChatWithCustomData-CSharp.Web/README.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AzureAISearch:Key\": \"YOUR-AZURE-AI-SEARCH-KEY\",\n  \"AzureAISearch:Endpoint\": \"YOUR-AZURE-AI-SEARCH-ENDPOINT\"\n}\n```\n\n----------------------------------------\n\nTITLE: HMAC redactor configuration extensions\nDESCRIPTION: Extension methods for configuring the HMAC redactor through the IRedactionBuilder. Allows configuration via an action delegate or from a configuration section. The HMAC redactor is marked as experimental.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Compliance.Redaction/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IRedactionBuilder SetHmacRedactor(this IRedactionBuilder builder, Action<HmacRedactorOptions> configure, params DataClassificationSet[] classifications)\npublic static IRedactionBuilder SetHmacRedactor(this IRedactionBuilder builder, IConfigurationSection section, params DataClassificationSet[] classifications)\n```\n\n----------------------------------------\n\nTITLE: Registering Fake Logging with ILoggingBuilder\nDESCRIPTION: Extension methods to register fake logging services with an ILoggingBuilder instance, with various overloads for different initialization options.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.Testing/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static ILoggingBuilder AddFakeLogging(this ILoggingBuilder builder)\npublic static ILoggingBuilder AddFakeLogging(this ILoggingBuilder builder, IConfigurationSection section)\npublic static ILoggingBuilder AddFakeLogging(this ILoggingBuilder builder, Action<FakeLogCollectorOptions> configure)\n```\n\n----------------------------------------\n\nTITLE: Registering HTTP Logging Services in ASP.NET Core 8+\nDESCRIPTION: Extension methods for registering HTTP logging enrichment and redaction services in ASP.NET Core 8 and above. These services help customize and secure log output.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.AspNetCore.Diagnostics.Middleware/README.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IServiceCollection AddHttpLoggingRedaction(this IServiceCollection services, Action<HeaderParsingOptions>? configure = null)\npublic static IServiceCollection AddHttpLoggingRedaction(this IServiceCollection services, IConfigurationSection section)\npublic static IServiceCollection AddHttpLogEnricher<T>(this IServiceCollection services)\n```\n\n----------------------------------------\n\nTITLE: Configuring Named HTTP Client with Extended Logging\nDESCRIPTION: C# code snippet showing how to configure a named HTTP client with extended logging. This setup includes registering redaction services and applying logging enrichment to a specific named HttpClient.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Http.Diagnostics/README.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = Host.CreateApplicationBuilder(args);\n\n// Register redaction services:\nbuilder.Services.AddRedaction();\n\n// Register named HttpClient:\nvar httpClientBuilder = builder.Services.AddHttpClient(\"MyNamedClient\");\n\n// Configure named HttpClient to use logging enrichment & redaction:\nhttpClientBuilder.AddExtendedHttpClientLogging();\n\nvar host = builder.Build();\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.AI.Evaluation.Console Tool\nDESCRIPTION: This console command demonstrates how to install the Microsoft.Extensions.AI.Evaluation.Console tool, which is a command-line utility for generating reports and managing evaluation data.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation.Console/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndotnet tool install Microsoft.Extensions.AI.Evaluation.Console --create-manifest-if-needed\n```\n\n----------------------------------------\n\nTITLE: Using AddActivatedSingleton in C# for Auto-Activation\nDESCRIPTION: This example demonstrates how to use the AddActivatedSingleton method to register a service for auto-activation. It includes a simple MyService class that writes to the console when created.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.DependencyInjection.AutoActivation/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddActivatedSingleton<MyService>();\n\nvar app = builder.Build();\n\napp.Run();\n\npublic class MyService\n{\n    public MyService()\n    {\n        Console.WriteLine(\"MyService is created\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Application Lifecycle Health Check Methods\nDESCRIPTION: C# extension methods for registering the Application Lifecycle Health Check in the service collection.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.HealthChecks.Common/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IHealthChecksBuilder AddApplicationLifecycleHealthCheck(this IHealthChecksBuilder builder, params string[] tags)\npublic static IHealthChecksBuilder AddApplicationLifecycleHealthCheck(this IHealthChecksBuilder builder, IEnumerable<string> tags)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI API Key and Endpoint - Shell\nDESCRIPTION: Shell command for setting up the Azure OpenAI API key and endpoint using .NET User Secrets. This command adds both the endpoint URL and API key to the project's secret storage.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/README.Aspire.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncd ChatWithCustomData-CSharp.AppHost\ndotnet user-secrets set ConnectionStrings:openai \"Endpoint=https://YOUR-DEPLOYMENT-NAME.openai.azure.com;Key=YOUR-API-KEY\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Context and Context Receiver\nDESCRIPTION: Definition of the context class and receiver implementation for handling contextual options\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Options.Contextual/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[OptionsContext]\ninternal partial class WeatherForecastContext // Note class must be partial\n{\n    public Guid UserId { get; set; }\n    public string? Country { get; set; }\n}\n\ninternal class CountryContextReceiver : IOptionsContextReceiver\n{\n    public string? Country { get; private set; }\n\n    public void Receive<T>(string key, T value)\n    {\n        if (key == nameof(Country))\n        {\n            Country = value?.ToString();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Models Token via CLI\nDESCRIPTION: Command line instructions for configuring GitHub Models token using .NET user secrets.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/ChatWithCustomData-CSharp.Web/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd <<your-project-directory>>\ndotnet user-secrets set GitHubModels:Token YOUR-TOKEN\n```\n\n----------------------------------------\n\nTITLE: Using FakeTaxonomy Redactor Example\nDESCRIPTION: Example demonstrating how to use FakeTaxonomy with a redactor to perform redaction operations.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Compliance.Testing/README.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar redactionProvider = serviceProvider.GetFakeRedactionCollector();\nvar redactor = redactionProvider.GetRedactor(FakeTaxonomy.PublicData);\nConsole.WriteLine(redactor.Redact(\"Hello\")); // \"Redacted: Hello\"\n```\n\n----------------------------------------\n\nTITLE: Registering Fake Logging with IServiceCollection\nDESCRIPTION: Extension methods to register fake logging services with an IServiceCollection instance, with various overloads for different initialization options.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.Testing/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IServiceCollection AddFakeLogging(this IServiceCollection services)\npublic static IServiceCollection AddFakeLogging(this IServiceCollection services, IConfigurationSection section)\npublic static IServiceCollection AddFakeLogging(this IServiceCollection services, Action<FakeLogCollectorOptions> configure)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI with API Key\nDESCRIPTION: JSON configuration for setting up Azure OpenAI with both endpoint and API key authentication.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/ChatWithCustomData-CSharp.Web/README.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AzureOpenAI:Key\": \"YOUR-AZURE-OPENAI-KEY\",\n  \"AzureOpenAI:Endpoint\": \"YOUR-AZURE-OPENAI-ENDPOINT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Weather Forecast Service\nDESCRIPTION: Service implementation that uses contextual options to generate weather forecasts\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Options.Contextual/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\ninternal class WeatherForecast\n{\n    public DateTime Date { get; set; }\n    public int Temperature { get; set; }\n    public string TemperatureScale { get; set; } = string.Empty;\n}\n\ninternal class WeatherForecastService\n{\n    private readonly IContextualOptions<WeatherForecastOptions> _contextualOptions;\n    private readonly Random _rng = new(0);\n\n    public WeatherForecastService(IContextualOptions<WeatherForecastOptions> contextualOptions)\n    {\n        _contextualOptions = contextualOptions;\n    }\n\n    public async Task<IEnumerable<WeatherForecast>> GetForecast(WeatherForecastContext context, CancellationToken cancellationToken)\n    {\n        WeatherForecastOptions options = await _contextualOptions.GetAsync(context, cancellationToken).ConfigureAwait(false);\n        return Enumerable.Range(1, options.ForecastDays).Select(index => new WeatherForecast\n        {\n            Date = new DateTime(2000, 1, 1).AddDays(index),\n            Temperature = _rng.Next(-20, 55),\n            TemperatureScale = options.TemperatureScale,\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.AI.Abstractions via Console\nDESCRIPTION: Shows how to install the package using the dotnet CLI command\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.AI.Abstractions\n```\n\n----------------------------------------\n\nTITLE: Registering Pooled Objects in DI Container\nDESCRIPTION: Example of registering a pooled class in the dependency injection container when building a web application. Shows how to register both a singleton service and a pooled class.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.ObjectPool.DependencyInjection/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddSingleton<MyService>();\nbuilder.Services.AddPooled<MyPooledClass>();\n\nvar app = builder.Build();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Latency Data Exporter\nDESCRIPTION: Example of implementing a custom latency data exporter by implementing the ILatencyDataExporter interface.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Telemetry.Abstractions/README.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CustomLatencyDataExporter : ILatencyDataExporter\n{\n    public async Task ExportAsync(LatencyData data, CancellationToken cancellationToken)\n    {\n        // Export logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving FakeLogCollector from ServiceProvider\nDESCRIPTION: Extension method to retrieve the registered FakeLogCollector instance from an IServiceProvider, allowing access to collected logs in tests.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.Testing/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic static FakeLogCollector GetFakeLogCollector(this IServiceProvider services)\n```\n\n----------------------------------------\n\nTITLE: ResourceUtilization Health Check API Overloads\nDESCRIPTION: The various extension methods available for adding resource utilization health checks to an IHealthChecksBuilder.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.HealthChecks.ResourceUtilization/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IHealthChecksBuilder AddResourceUtilizationHealthCheck(this IHealthChecksBuilder builder, params string[] tags)\npublic static IHealthChecksBuilder AddResourceUtilizationHealthCheck(this IHealthChecksBuilder builder, IEnumerable<string> tags)\npublic static IHealthChecksBuilder AddResourceUtilizationHealthCheck(this IHealthChecksBuilder builder, IConfigurationSection section)\npublic static IHealthChecksBuilder AddResourceUtilizationHealthCheck(this IHealthChecksBuilder builder, IConfigurationSection section, params string[] tags)\npublic static IHealthChecksBuilder AddResourceUtilizationHealthCheck(this IHealthChecksBuilder builder, IConfigurationSection section, IEnumerable<string> tags)\npublic static IHealthChecksBuilder AddResourceUtilizationHealthCheck(this IHealthChecksBuilder builder, Action<ResourceUtilizationHealthCheckOptions> configure)\npublic static IHealthChecksBuilder AddResourceUtilizationHealthCheck(this IHealthChecksBuilder builder, Action<ResourceUtilizationHealthCheckOptions> configure, params string[] tags)\npublic static IHealthChecksBuilder AddResourceUtilizationHealthCheck(this IHealthChecksBuilder builder, Action<ResourceUtilizationHealthCheckOptions> configure, IEnumerable<string> tags)\n```\n\n----------------------------------------\n\nTITLE: Registering HeaderParsing Services in C#\nDESCRIPTION: C# code snippet demonstrating how to register HeaderParsing services in an ASP.NET Core application using the AddHeaderParsing extension method.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.AspNetCore.HeaderParsing/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddHeaderParsing();\n\nvar app = builder.Build();\n```\n\n----------------------------------------\n\nTITLE: Setting Azure AI Search Endpoint via Command Line\nDESCRIPTION: Shell commands to configure the Azure AI Search endpoint using .NET User Secrets from the command line. This is an alternative to the Visual Studio approach.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/ChatWithCustomData-CSharp.Web/README.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncd <<your-project-directory>>\ndotnet user-secrets set AzureAISearch:Endpoint YOUR-AZURE-AI-SEARCH-ENDPOINT\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Extensions.AI.Evaluation Package References to C# Project\nDESCRIPTION: XML snippet for adding package references to a C# project file. This includes the main library, quality evaluators, and reporting tools. The [CURRENTVERSION] placeholder should be replaced with the actual version number.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation.Quality/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.AI.Evaluation\" Version=\"[CURRENTVERSION]\" />\n  <PackageReference Include=\"Microsoft.Extensions.AI.Evaluation.Quality\" Version=\"[CURRENTVERSION]\" />\n  <PackageReference Include=\"Microsoft.Extensions.AI.Evaluation.Reporting\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Extensions.AI Package Reference to C# Project File\nDESCRIPTION: This XML snippet demonstrates how to add a reference to the Microsoft.Extensions.AI package directly in a C# project file. It includes the package in the project's dependencies with a placeholder for the current version.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.AI\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Registering Services for Auto-Activation in C#\nDESCRIPTION: This code snippet lists the available methods for registering services for auto-activation using the Microsoft.Extensions.DependencyInjection.AutoActivation package. It includes methods for both regular and keyed services.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.DependencyInjection.AutoActivation/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IServiceCollection ActivateSingleton<TService>(this IServiceCollection services)\npublic static IServiceCollection ActivateSingleton(this IServiceCollection services, Type serviceType)\npublic static IServiceCollection AddActivatedSingleton<TService, TImplementation>(this IServiceCollection services, Func<IServiceProvider, TImplementation> implementationFactory)\npublic static IServiceCollection AddActivatedSingleton<TService, TImplementation>(this IServiceCollection services)\npublic static IServiceCollection AddActivatedSingleton<TService>(this IServiceCollection services, Func<IServiceProvider, TService> implementationFactory)\npublic static IServiceCollection AddActivatedSingleton<TService>(this IServiceCollection services)\npublic static IServiceCollection AddActivatedSingleton(this IServiceCollection services, Type serviceType)\npublic static IServiceCollection AddActivatedSingleton(this IServiceCollection services, Type serviceType, Func<IServiceProvider, object> implementationFactory)\npublic static IServiceCollection AddActivatedSingleton(this IServiceCollection services, Type serviceType, Type implementationType)\npublic static void TryAddActivatedSingleton(this IServiceCollection services, Type serviceType)\npublic static void TryAddActivatedSingleton(this IServiceCollection services, Type serviceType, Type implementationType)\npublic static void TryAddActivatedSingleton(this IServiceCollection services, Type serviceType, Func<IServiceProvider, object> implementationFactory)\npublic static void TryAddActivatedSingleton<TService>(this IServiceCollection services)\npublic static void TryAddActivatedSingleton<TService, TImplementation>(this IServiceCollection services)\npublic static void TryAddActivatedSingleton<TService>(this IServiceCollection services, Func<IServiceProvider, TService> implementationFactory)\n \npublic static IServiceCollection ActivateKeyedSingleton<TService>(this IServiceCollection services, object? serviceKey)\npublic static IServiceCollection ActivateKeyedSingleton(this IServiceCollection services, Type serviceType, object? serviceKey)\npublic static IServiceCollection AddActivatedKeyedSingleton<TService, TImplementation>(this IServiceCollection services, object? serviceKey, Func<IServiceProvider, object?, TImplementation> implementationFactory)\npublic static IServiceCollection AddActivatedKeyedSingleton<TService, TImplementation>(this IServiceCollection services, object? serviceKey)\npublic static IServiceCollection AddActivatedKeyedSingleton<TService>(this IServiceCollection services, object? serviceKey, Func<IServiceProvider, object?, TService> implementationFactory)\npublic static IServiceCollection AddActivatedKeyedSingleton<TService>(this IServiceCollection services, object? serviceKey)\npublic static IServiceCollection AddActivatedKeyedSingleton(this IServiceCollection services, Type serviceType, object? serviceKey)\npublic static IServiceCollection AddActivatedKeyedSingleton(this IServiceCollection services, Type serviceType, object? serviceKey, Func<IServiceProvider, object?, object> implementationFactory)\npublic static IServiceCollection AddActivatedKeyedSingleton(this IServiceCollection services, Type serviceType, object? serviceKey, Type implementationType)\npublic static void TryAddActivatedKeyedSingleton(this IServiceCollection services, Type serviceType, object? serviceKey)\npublic static void TryAddActivatedKeyedSingleton(this IServiceCollection services, Type serviceType, object? serviceKey, Type implementationType)\npublic static void TryAddActivatedKeyedSingleton(this IServiceCollection services, Type serviceType, object? serviceKey, Func<IServiceProvider, object?, object> implementationFactory)\npublic static void TryAddActivatedKeyedSingleton<TService>(this IServiceCollection services, object? serviceKey)\npublic static void TryAddActivatedKeyedSingleton<TService, TImplementation>(this IServiceCollection services, object? serviceKey)\npublic static void TryAddActivatedKeyedSingleton<TService>(this IServiceCollection services, object? serviceKey, Func<IServiceProvider, object?, TService> implementationFactory)\n```\n\n----------------------------------------\n\nTITLE: Registering Object Pools Extension Methods\nDESCRIPTION: C# extension methods signatures for registering pooled objects with the dependency injection container. These methods allow for registering services to be pooled with optional configuration.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.ObjectPool.DependencyInjection/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IServiceCollection AddPooled<TService>(this IServiceCollection services, Action<DependencyInjectionPoolOptions>? configure = null)\npublic static IServiceCollection AddPooled<TService, TImplementation>(this IServiceCollection services, Action<DependencyInjectionPoolOptions>? configure = null)\n```\n\n----------------------------------------\n\nTITLE: Clearing SynchronizationContext in Tests with FakeTimeProvider\nDESCRIPTION: Sample code showing how to clear xUnit's SynchronizationContext to prevent issues when testing asynchronous code that uses ConfigureAwait(false) with FakeTimeProvider.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.TimeProvider.Testing/README.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nSynchronizationContext.SetSynchronizationContext(null)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI API Key\nDESCRIPTION: JSON configuration for setting up OpenAI API key in user secrets.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/ChatWithCustomData-CSharp.Web/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"OpenAI:Key\": \"YOUR-API-KEY\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Manual Health Check Methods\nDESCRIPTION: C# extension methods for registering the Manual Health Check in the service collection.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.HealthChecks.Common/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IHealthChecksBuilder AddManualHealthCheck(this IHealthChecksBuilder builder, params string[] tags)\npublic static IHealthChecksBuilder AddManualHealthCheck(this IHealthChecksBuilder builder, IEnumerable<string> tags)\n```\n\n----------------------------------------\n\nTITLE: Accessing FakeRedactionCollector Example\nDESCRIPTION: Example showing how to retrieve and use the FakeRedactionCollector from the service provider to inspect redaction requests.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Compliance.Testing/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar serviceProvider = services.BuildServiceProvider();\nvar collector = serviceProvider.GetRequiredService<FakeRedactionCollector>();\nConsole.WriteLine(collector.AllRedactorRequests.Count);\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Models API Key - Shell\nDESCRIPTION: Shell command for setting up the GitHub Models API key using .NET User Secrets. This command adds the API endpoint and key to the project's secret storage.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/README.Aspire.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd ChatWithCustomData-CSharp.AppHost\ndotnet user-secrets set ConnectionStrings:openai \"Endpoint=https://models.inference.ai.azure.com;Key=YOUR-API-KEY\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Options and Services\nDESCRIPTION: Configuration of options with both global and context-dependent settings\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Options.Contextual/README.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing var host = FakeHost.CreateBuilder()\n    .ConfigureServices(services => services\n        .Configure<WeatherForecastOptions>(options => options.ForecastDays = 7)\n        .Configure<WeatherForecastOptions>(ConfigureTemperatureScaleBasedOnCountry)\n        .AddSingleton<WeatherForecastService>())\n        .Build();\n\nstatic void ConfigureTemperatureScaleBasedOnCountry(IOptionsContext context, WeatherForecastOptions options)\n{\n    CountryContextReceiver receiver = new();\n    context.PopulateReceiver(receiver);\n    if (receiver.Country == \"US\")\n    {\n        options.TemperatureScale = \"Fahrenheit\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.AI.AzureAIInference via Project File\nDESCRIPTION: XML markup for adding the Microsoft.Extensions.AI.AzureAIInference package reference directly in a C# project file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.AzureAIInference/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.AI.AzureAIInference\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Log Enrichment in .NET\nDESCRIPTION: Demonstrates how to add and configure service log enrichment with ApplicationMetadata information.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Telemetry/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Add service log enricher with default settings\nbuilder.Services.AddServiceLogEnricher();\n\n// Or configure with options\nbuilder.Services.AddServiceLogEnricher(options =>\n{\n    options.ApplicationName = true;\n    options.BuildVersion = true;\n    options.DeploymentRing = true;\n    options.EnvironmentName = true;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring FakeRedaction Services Example\nDESCRIPTION: Example of registering fake redaction services with custom redaction format configuration.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Compliance.Testing/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nIServiceCollection services = new ServiceCollection();\nservices = services.AddFakeRedaction(options => options.RedactionFormat = \"Redacted: {0}\");\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key via CLI\nDESCRIPTION: Command line instructions for configuring OpenAI API key using .NET user secrets.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/ChatWithCustomData-CSharp.Web/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd <<your-project-directory>>\ndotnet user-secrets set OpenAI:Key YOUR-API-KEY\n```\n\n----------------------------------------\n\nTITLE: Registering ExceptionSummarizer Services in C#\nDESCRIPTION: This snippet shows the method signatures for registering ExceptionSummarizer services. It includes two overloads of the AddExceptionSummarizer extension method for IServiceCollection.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.ExceptionSummarization/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IServiceCollection AddExceptionSummarizer(this IServiceCollection services)\npublic static IServiceCollection AddExceptionSummarizer(this IServiceCollection services, Action<IExceptionSummarizationBuilder> configure)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Storage Tests with Local Settings\nDESCRIPTION: JSON configuration template for Azure Storage-dependent tests. Users need to create an appsettings.local.json file with these properties filled in to enable the tests. The configuration requires an Azure Storage account endpoint URL and a container name within that account.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.AI.Evaluation.Reporting.Tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Configured\": true,\n  \"StorageAccountEndpoint\": \"<end point url for an Azure Storage account that the tests can write to>\",\n  \"StorageContainerName\": \"<name of a storage container within the above account that the tests can write to>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.AI.Evaluation Packages via Console\nDESCRIPTION: Commands to install the core Microsoft.Extensions.AI.Evaluation packages using the dotnet CLI. This includes the main library, quality evaluators, and reporting tools.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation.Reporting.Azure/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.AI.Evaluation\ndotnet add package Microsoft.Extensions.AI.Evaluation.Quality\ndotnet add package Microsoft.Extensions.AI.Evaluation.Reporting\n```\n\n----------------------------------------\n\nTITLE: Implementing Trace-Based Sampling in .NET\nDESCRIPTION: Shows how to add trace-based sampling that aligns with distributed tracing sampling decisions.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Telemetry/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Add trace-based sampler\nbuilder.Logging.AddTraceBasedSampler();\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.Resilience via .NET CLI\nDESCRIPTION: Shows how to install the Microsoft.Extensions.Resilience package using the dotnet CLI command.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Resilience/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.Resilience\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Web App with FakeHost\nDESCRIPTION: C# code example showing how to set up a test host using the IWebHostBuilder extensions. It configures a web host with fake startup and listens on any available HTTP port.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.AspNetCore.Testing/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing var host = await FakeHost.CreateBuilder()\n    .ConfigureWebHost(webHost => webHost.UseFakeStartup().ListenHttpOnAnyPort())\n    .StartAsync();\n```\n\n----------------------------------------\n\nTITLE: Registering Resilience Enricher Services in C#\nDESCRIPTION: Shows the method signature for registering the resilience enricher services in the dependency injection container.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Resilience/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IServiceCollection AddResilienceEnricher(this IServiceCollection services)\n```\n\n----------------------------------------\n\nTITLE: Implementing 1ES Pipeline Templates with Multiple Outputs in YAML\nDESCRIPTION: Example of how to implement a pipeline using 1ES templates with multiple outputs to reduce security scan overhead. The example shows how to extend MicroBuild templates, configure template context for outputs, and use CopyFiles to ensure artifacts are collected in the right staging directory.\nSOURCE: https://github.com/dotnet/extensions/blob/main/eng/common/template-guidance.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# azure-pipelines.yml\nextends:\n  template: azure-pipelines/MicroBuild.1ES.Official.yml@MicroBuildTemplate\n  parameters:\n    stages:\n    - stage: build\n      jobs:\n      - template: /eng/common/templates-official/jobs/jobs.yml@self\n        parameters:\n          # 1ES makes use of outputs to reduce security task injection overhead\n          templateContext:\n            outputs:\n            - output: pipelineArtifact\n              displayName: 'Publish logs from source'\n              continueOnError: true\n              condition: always()\n              targetPath: $(Build.ArtifactStagingDirectory)/artifacts/log\n              artifactName: Logs\n          jobs:\n          - job: Windows\n            steps:\n            - script: echo \"friendly neighborhood\" > artifacts/marvel/spiderman.txt\n          # copy build outputs to artifact staging directory for publishing\n          - task: CopyFiles@2\n              displayName: Gather build output\n              inputs:\n                SourceFolder: '$(Build.SourcesDirectory)/artifacts/marvel'\n                Contents: '**'\n                TargetFolder: '$(Build.ArtifactStagingDirectory)/artifacts/marvel'\n```\n\n----------------------------------------\n\nTITLE: Setting Azure OpenAI Endpoint via CLI\nDESCRIPTION: Command line instructions for configuring Azure OpenAI endpoint using .NET user secrets.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/ChatWithCustomData-CSharp.Web/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncd <<your-project-directory>>\ndotnet user-secrets set AzureOpenAI:Endpoint YOUR-AZURE-OPENAI-ENDPOINT\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI API Key and Endpoint - JSON\nDESCRIPTION: JSON configuration for setting up the Azure OpenAI API key and endpoint using .NET User Secrets. This snippet shows how to store both the endpoint URL and API key securely.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/README.Aspire.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings:openai\": \"Endpoint=https://YOUR-DEPLOYMENT-NAME.openai.azure.com;Key=YOUR-API-KEY\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Weather Forecast Service\nDESCRIPTION: Example of using the service with different contexts\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Options.Contextual/README.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar forecastService = host.Services.GetRequiredService<WeatherForecastService>();\n\nvar usForcast = await forecastService.GetForecast(new WeatherForecastContext { Country = \"US\" }, CancellationToken.None);\nvar caForcast = await forecastService.GetForecast(new WeatherForecastContext { Country = \"CA\" }, CancellationToken.None);\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.AI.Evaluation Console Tool\nDESCRIPTION: Command to install the Microsoft.Extensions.AI.Evaluation.Console tool globally using the dotnet CLI. This tool is used for generating reports and managing evaluation data.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation.Reporting.Azure/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndotnet tool install Microsoft.Extensions.AI.Evaluation.Console --create-manifest-if-needed\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft Extensions AI Evaluation Package References to Project\nDESCRIPTION: XML configuration to add Microsoft.Extensions.AI.Evaluation package references directly in a C# project file\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation.Safety/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.AI.Evaluation\" Version=\"[CURRENTVERSION]\" />\n  <PackageReference Include=\"Microsoft.Extensions.AI.Evaluation.Quality\" Version=\"[CURRENTVERSION]\" />\n  <PackageReference Include=\"Microsoft.Extensions.AI.Evaluation.Reporting\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.Diagnostics.Probes via .NET CLI\nDESCRIPTION: Command to add the Microsoft.Extensions.Diagnostics.Probes package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.Probes/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.Diagnostics.Probes\n```\n\n----------------------------------------\n\nTITLE: Initializing MetricCollector\nDESCRIPTION: Constructors for creating MetricCollector instances with different types of metric instruments or meters, allowing flexibility in test setup.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.Testing/README.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic MetricCollector(Instrument<T> instrument, TimeProvider? timeProvider = null)\npublic MetricCollector(ObservableInstrument<T> instrument, TimeProvider? timeProvider = null)\npublic MetricCollector(object? meterScope, string meterName, string instrumentName, TimeProvider? timeProvider = null)\npublic MetricCollector(Meter meter, string instrumentName, TimeProvider? timeProvider = null)\n```\n\n----------------------------------------\n\nTITLE: Registering AsyncState Services\nDESCRIPTION: C# extension method signature for registering AsyncState services in the dependency injection container.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AsyncState/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IServiceCollection AddAsyncState(this IServiceCollection services)\n```\n\n----------------------------------------\n\nTITLE: Adding StringBuilder Extensions Support to .NET Project\nDESCRIPTION: Configuration snippet that enables StringBuilder extensions support for legacy systems by adding a property to the project file. This setting injects StringBuilder extension methods when targeting legacy .NET frameworks.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/LegacySupport/StringBuilderExtensions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectStringBuilderExtensionsOnLegacy>true</InjectStringBuilderExtensionsOnLegacy>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing AI Evaluation Console Tool\nDESCRIPTION: Command for installing the Microsoft.Extensions.AI.Evaluation.Console dotnet tool, which provides command-line functionality for generating reports and managing evaluation data.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation.Reporting/TypeScript/azure-devops-report/overview.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ndotnet tool install Microsoft.Extensions.AI.Evaluation.Console --create-manifest-if-needed\n```\n\n----------------------------------------\n\nTITLE: Enabling String Hash Injection for Legacy Systems in .NET Project Configuration\nDESCRIPTION: This XML configuration enables string hash injection for legacy systems by adding the InjectStringHashOnLegacy property to a .csproj file. When set to true, this property allows the dotnet/extensions library to use string hashing functionality on legacy .NET platforms.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/LegacySupport/StringHash/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectStringHashOnLegacy>true</InjectStringHashOnLegacy>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Setting Azure AI Search Key and Endpoint via Command Line\nDESCRIPTION: Shell commands to configure both the Azure AI Search API key and endpoint using .NET User Secrets from the command line. This approach is for developers not using Visual Studio.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/ChatWithCustomData-CSharp.Web/README.md#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncd <<your-project-directory>>\ndotnet user-secrets set AzureAISearch:Key YOUR-AZURE-AI-SEARCH-KEY\ndotnet user-secrets set AzureAISearch:Endpoint YOUR-AZURE-AI-SEARCH-ENDPOINT\n```\n\n----------------------------------------\n\nTITLE: FakeHost Creation API Signatures\nDESCRIPTION: Available static methods for creating a FakeHost instance in a test environment.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Hosting.Testing/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IHostBuilder CreateBuilder()\npublic static IHostBuilder CreateBuilder(Action<FakeHostOptions> configure)\npublic static IHostBuilder CreateBuilder(FakeHostOptions options)\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.AuditReports via command line\nDESCRIPTION: Command to install the Microsoft.Extensions.AuditReports package using the dotnet CLI. This adds the package to your .NET project.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Packages/Microsoft.Extensions.AuditReports/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.AuditReports\n```\n\n----------------------------------------\n\nTITLE: Setting Azure OpenAI Configuration via CLI\nDESCRIPTION: Command line instructions for configuring Azure OpenAI key and endpoint using .NET user secrets.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/ChatWithCustomData-CSharp.Web/README.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncd <<your-project-directory>>\ndotnet user-secrets set AzureOpenAI:Key YOUR-AZURE-OPENAI-KEY\ndotnet user-secrets set AzureOpenAI:Endpoint YOUR-AZURE-OPENAI-ENDPOINT\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.Telemetry.Abstractions via Project File\nDESCRIPTION: XML configuration to add the Microsoft.Extensions.Telemetry.Abstractions package reference directly in the project file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Telemetry.Abstractions/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.Telemetry.Abstractions\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Registering AmbientMetadata Services\nDESCRIPTION: C# method signatures showing two ways to register the AmbientMetadata services: using IHostBuilder or IServiceCollection.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AmbientMetadata.Application/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IHostBuilder UseApplicationMetadata(this IHostBuilder builder, string sectionName = DefaultSectionName)\npublic static IServiceCollection AddApplicationMetadata(this IServiceCollection services, Action<ApplicationMetadata> configure)\n```\n\n----------------------------------------\n\nTITLE: Configuring Debugger Support in .NET Project File\nDESCRIPTION: XML configuration to enable shared debugger support by adding the InjectSharedDebugger property to the project file. This setting facilitates testing by enabling debugger control.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Shared/Debugger/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectSharedDebugger>true</InjectSharedDebugger>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Extensions.AI.Evaluation Package References to C# Project\nDESCRIPTION: This XML snippet shows how to add package references for Microsoft.Extensions.AI.Evaluation libraries directly in a C# project file. It includes references for the core evaluation, quality, and reporting packages.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation.Reporting/CSharp/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.AI.Evaluation\" Version=\"[CURRENTVERSION]\" />\n  <PackageReference Include=\"Microsoft.Extensions.AI.Evaluation.Quality\" Version=\"[CURRENTVERSION]\" />\n  <PackageReference Include=\"Microsoft.Extensions.AI.Evaluation.Reporting\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Enhanced Logging with Dictionary\nDESCRIPTION: Example of using LoggerMessage attribute to log dictionary contents with enhanced logging capabilities.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Telemetry.Abstractions/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[LoggerMessage(1, LogLevel.Information, \"These are the contents of my dictionary: {temperature}\")]\ninternal static partial void LogMyDictionary(ILogger<Program> logger, Dictionary<int, string> temperature);\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.Telemetry.Abstractions via CLI\nDESCRIPTION: Command line instruction to add the Microsoft.Extensions.Telemetry.Abstractions package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Telemetry.Abstractions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.Telemetry.Abstractions\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.AI.Evaluation.Console Tool via .NET CLI\nDESCRIPTION: This console command demonstrates how to install the Microsoft.Extensions.AI.Evaluation.Console command-line tool using the dotnet CLI. The tool is used for generating reports and managing evaluation data.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation.Reporting/CSharp/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndotnet tool install Microsoft.Extensions.AI.Evaluation.Console --create-manifest-if-needed\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Extensions.Compliance.Abstractions Reference to C# Project File\nDESCRIPTION: XML snippet to include the Microsoft.Extensions.Compliance.Abstractions package reference directly in a C# project file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Compliance.Abstractions/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.Compliance.Abstractions\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring AmbientMetadata in JSON\nDESCRIPTION: JSON configuration example showing how to specify the build version and deployment ring in the application settings.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AmbientMetadata.Application/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AmbientMetadata\" {\n    \"Application\" {\n      \"BuildVersion\": \"1.0-alpha1.2346\",\n      \"DeploymentRing\": \"InnerRing\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Trim Attributes Injection for Legacy .NET Projects\nDESCRIPTION: This XML snippet demonstrates how to configure a .csproj file to enable the injection of trim attributes on legacy .NET projects. The 'InjectTrimAttributesOnLegacy' property is set to true, which allows the build process to add trim attributes to assemblies, potentially improving the application's performance and reducing its size.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/LegacySupport/TrimAttributes/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectTrimAttributesOnLegacy>true</InjectTrimAttributesOnLegacy>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.Compliance.Redaction via command-line\nDESCRIPTION: Command to add the Microsoft.Extensions.Compliance.Redaction package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Compliance.Redaction/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.Compliance.Redaction\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AI Inference Tests\nDESCRIPTION: Commands to set up user secrets for Azure AI Inference integration tests. These configurations include the endpoint URL, API key, and optional model specifications for chat and embedding.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.AI.Integration.Tests/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd test/Libraries/Microsoft.Extensions.AI.Integration.Tests\ndotnet user-secrets set AzureAIInference:Endpoint https://YOUR_DEPLOYMENT.azure.com/\ndotnet user-secrets set AzureAIInference:Key abcdefghijkl\n```\n\nLANGUAGE: bash\nCODE:\n```\ndotnet user-secrets set AzureAIInference:ChatModel gpt-4o-mini\ndotnet user-secrets set AzureAIInference:EmbeddingModel text-embedding-3-small\n```\n\n----------------------------------------\n\nTITLE: Configuring System.Net.ServerSentEvents Polyfill in Project File\nDESCRIPTION: Add these property settings to your .csproj file to inject the System.Net.ServerSentEvents polyfill into your project. This enables the SseFormatter component functionality before .NET 10.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Shared/ServerSentEvents/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectSharedServerSentEvents>true</InjectSharedServerSentEvents>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Example of Incompatible gRPC Client Configuration\nDESCRIPTION: Code example showing a configuration that causes compatibility issues with Grpc.Net.ClientFactory versions 2.63.0 or earlier. This snippet illustrates the pattern that leads to a runtime exception when using resilience with gRPC clients.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Http.Resilience/README.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddGrpcClient<Greeter.GreeterClient>()\n    .AddStandardResilienceHandler();\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.AI.Abstractions via Project File\nDESCRIPTION: Demonstrates how to add the package reference directly in the project file\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.AI.Abstractions\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.AsyncState via .NET CLI\nDESCRIPTION: Command line instruction for installing the Microsoft.Extensions.AsyncState package using the dotnet CLI.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AsyncState/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.AsyncState\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.Compliance.Abstractions via Console\nDESCRIPTION: Command to add the Microsoft.Extensions.Compliance.Abstractions package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Compliance.Abstractions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.Compliance.Abstractions\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Classification Settings in JSON\nDESCRIPTION: JSON configuration example for binding data classification settings. This shows how to define classification labels for different types of sensitive data in an appsettings.json file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Compliance.Abstractions/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Key\": {\n        \"PhoneNumber\": \"MyTaxonomy:PrivateInformation\",\n        \"ExampleDictionary\": {\n            \"CreditCard\": \"MyTaxonomy:CreditCardNumber\",\n            \"SSN\": \"MyTaxonomy:SocialSecurityNumber\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building AI Templates with Local Library Packages\nDESCRIPTION: PowerShell commands to generate Visual Studio solution, build projects, and create NuGet packages for Microsoft.Extensions.AI projects. This enables the templates to use just-built versions of library packages.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/README.md#2025-04-21_snippet_1\n\nLANGUAGE: pwsh\nCODE:\n```\n.\\build.cmd -vs AI -noLaunch # Generate an SDK.sln for Microsoft.Extensions.AI* projects\n.\\build.cmd -build -pack     # Build a NuGet package for each project\n```\n\n----------------------------------------\n\nTITLE: Opening Solution in VS Code on Ubuntu\nDESCRIPTION: Command to set up environment variables and open the repository in Visual Studio Code on Ubuntu.\nSOURCE: https://github.com/dotnet/extensions/blob/main/docs/building.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./start-code.sh\n```\n\n----------------------------------------\n\nTITLE: Publishing AI Evaluation Data with YAML Pipeline Task\nDESCRIPTION: Demonstrates how to use the PublishAIEvaluationReport task in an Azure DevOps pipeline to publish AI evaluation data. This task uploads the report file and triggers the report tab to appear in the build results.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation.Reporting/TypeScript/azure-devops-report/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  - task: PublishAIEvaluationReport@0\n    displayName: 'Publish AI Evaluation Data'\n    inputs:\n      reportFile: '$(build-artifacts)\\report.json'     \n```\n\n----------------------------------------\n\nTITLE: Installing Ollama Models\nDESCRIPTION: Commands for installing required Ollama AI models locally.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/ChatWithCustomData-CSharp.Web/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nollama pull llama3.2\nollama pull all-minilm\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Extensions.Http.Resilience Reference to Project File\nDESCRIPTION: XML snippet for adding the Microsoft.Extensions.Http.Resilience package reference directly in a C# project file. This approach adds the package dependency to the project's ItemGroup.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Http.Resilience/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.Http.Resilience\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.ObjectPool.DependencyInjection via Console\nDESCRIPTION: Command line instruction to add the Microsoft.Extensions.ObjectPool.DependencyInjection package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.ObjectPool.DependencyInjection/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.ObjectPool.DependencyInjection\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Extensions.Diagnostics.ResourceMonitoring to C# Project File\nDESCRIPTION: This XML snippet demonstrates how to add the Microsoft.Extensions.Diagnostics.ResourceMonitoring package reference directly to a C# project file. It includes the package in the ItemGroup section with a placeholder for the current version.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.Diagnostics.ResourceMonitoring\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Structured Logging Method for Nullable Properties in C#\nDESCRIPTION: Auto-generated logging method that logs both nullable and non-nullable DateTime properties from a class at the Information level. The method handles null checking, uses thread-local state for performance, and incorporates structured logging with tagged parameters.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Generators/Microsoft.Gen.Logging/Verified/ParserTests.ClassWithNullableProperty.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// Logs \"Testing nullable property within class here...\" at \"Information\" level.\n/// </summary>\n[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Gen.Logging\", \"VERSION\")]\npublic static partial void LogMethodNullablePropertyInClassMatchesNonNullable(global::Microsoft.Extensions.Logging.ILogger logger, global::Test.LoggerUtils.MyClassWithNullableProperty classWithNullablePropertyParam)\n{\n    if (!logger.IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Information))\n    {\n        return;\n    }\n\n    var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;\n\n    _ = state.ReserveTagSpace(3);\n    state.TagArray[2] = new(\"{OriginalFormat}\", \"Testing nullable property within class here...\");\n    state.TagArray[1] = new(\"classWithNullablePropertyParam.NullableDateTime\", classWithNullablePropertyParam?.NullableDateTime);\n    state.TagArray[0] = new(\"classWithNullablePropertyParam.NonNullableDateTime\", classWithNullablePropertyParam?.NonNullableDateTime);\n\n    logger.Log(\n        global::Microsoft.Extensions.Logging.LogLevel.Information,\n        new(0, nameof(LogMethodNullablePropertyInClassMatchesNonNullable)),\n        state,\n        null,\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Gen.Logging\", \"VERSION\")] static string (s, _) =>\n        {\n            return \"Testing nullable property within class here...\";\n        });\n\n    state.Clear();\n}\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results Table for .NET Extensions Logging Performance\nDESCRIPTION: Detailed benchmark results showing execution time (ns), memory allocation (B), and other metrics for different logging implementations. Testing environment uses BenchmarkDotNet v0.13.5 on Windows 11 with Intel Core i9-10900K CPU and .NET 8.0 SDK.\nSOURCE: https://github.com/dotnet/extensions/blob/main/bench/Libraries/Microsoft.Extensions.Telemetry.PerformanceTests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nBenchmarkDotNet=v0.13.5, OS=Windows 11 (10.0.22621.1848/22H2/2022Update/SunValley2)\nIntel Core i9-10900K CPU 3.70GHz, 1 CPU, 20 logical and 10 physical cores\n.NET SDK=8.0.100-preview.7.23328.2\n  [Host] : .NET 8.0.0 (8.0.23.32605), X64 RyuJIT AVX2\n\nJob=MediumRun  Toolchain=InProcessEmitToolchain  IterationCount=15\nLaunchCount=2  WarmupCount=10\n\n|               Classic_RefTypes |         Original |  86.70 ns | 2.114 ns | 3.098 ns |  87.53 ns | 0.0106 |     112 B |\n|             Classic_ValueTypes |         Original |  95.07 ns | 1.104 ns | 1.547 ns |  96.09 ns | 0.0283 |     296 B |\n|   LoggerMessageDefine_RefTypes |         Original |  80.07 ns | 1.320 ns | 1.851 ns |  80.20 ns | 0.0068 |      72 B |\n| LoggerMessageDefine_ValueTypes |         Original |  84.22 ns | 2.054 ns | 3.011 ns |  83.69 ns | 0.0252 |     264 B |\n|        ClassicCodeGen_RefTypes |         Original |  80.36 ns | 0.517 ns | 0.690 ns |  80.39 ns | 0.0068 |      72 B |\n|      ClassicCodeGen_ValueTypes |         Original |  82.33 ns | 1.197 ns | 1.678 ns |  81.97 ns | 0.0252 |     264 B |\n|         ModernCodeGen_RefTypes |         Original |  59.31 ns | 0.379 ns | 0.556 ns |  59.09 ns |      - |         - |\n|       ModernCodeGen_ValueTypes |         Original |  78.59 ns | 1.769 ns | 2.594 ns |  78.45 ns | 0.0160 |     168 B |\n|               Classic_RefTypes |              New | 138.53 ns | 0.826 ns | 1.184 ns | 138.32 ns | 0.0143 |     152 B |\n|             Classic_ValueTypes |              New | 141.50 ns | 0.658 ns | 0.984 ns | 141.33 ns | 0.0319 |     336 B |\n|   LoggerMessageDefine_RefTypes |              New | 149.70 ns | 0.953 ns | 1.398 ns | 149.51 ns | 0.0136 |     144 B |\n| LoggerMessageDefine_ValueTypes |              New | 131.45 ns | 0.656 ns | 0.920 ns | 131.74 ns | 0.0312 |     328 B |\n|        ClassicCodeGen_RefTypes |              New | 146.57 ns | 3.755 ns | 5.139 ns | 148.38 ns | 0.0136 |     144 B |\n|      ClassicCodeGen_ValueTypes |              New | 129.45 ns | 0.772 ns | 1.108 ns | 129.99 ns | 0.0312 |     328 B |\n|         ModernCodeGen_RefTypes |              New |  60.68 ns | 0.633 ns | 0.887 ns |  60.51 ns |      - |         - |\n|       ModernCodeGen_ValueTypes |              New |  80.78 ns | 0.373 ns | 0.536 ns |  80.61 ns | 0.0160 |     168 B |\n|               Classic_RefTypes | NewWithEnrichers | 144.45 ns | 0.556 ns | 0.798 ns | 144.60 ns | 0.0143 |     152 B |\n|             Classic_ValueTypes | NewWithEnrichers | 148.00 ns | 0.766 ns | 1.049 ns | 147.48 ns | 0.0319 |     336 B |\n|   LoggerMessageDefine_RefTypes | NewWithEnrichers | 148.39 ns | 1.016 ns | 1.457 ns | 147.84 ns | 0.0136 |     144 B |\n| LoggerMessageDefine_ValueTypes | NewWithEnrichers | 137.76 ns | 0.582 ns | 0.835 ns | 137.66 ns | 0.0312 |     328 B |\n|        ClassicCodeGen_RefTypes | NewWithEnrichers | 147.13 ns | 2.168 ns | 3.178 ns | 148.46 ns | 0.0136 |     144 B |\n|      ClassicCodeGen_ValueTypes | NewWithEnrichers | 135.49 ns | 0.965 ns | 1.414 ns | 134.96 ns | 0.0312 |     328 B |\n|         ModernCodeGen_RefTypes | NewWithEnrichers |  67.11 ns | 0.379 ns | 0.556 ns |  66.95 ns |      - |         - |\n|       ModernCodeGen_ValueTypes | NewWithEnrichers |  85.60 ns | 0.710 ns | 0.972 ns |  86.24 ns | 0.0160 |     168 B |\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.AI.Ollama Package via Console\nDESCRIPTION: Shows how to add the Microsoft.Extensions.AI.Ollama package to a .NET project using the dotnet CLI command.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Ollama/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.AI.Ollama\n```\n\n----------------------------------------\n\nTITLE: Creating API Baseline Fingerprint with ApiChief\nDESCRIPTION: Command to generate a YAML file representing a fingerprint of the public API of a .NET assembly. Use the -o option to specify where the baseline should be stored.\nSOURCE: https://github.com/dotnet/extensions/blob/main/eng/Tools/ApiChief/README.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nApiChief MyAssembly.dll emit baseline\n```\n\n----------------------------------------\n\nTITLE: Installing the package via .NET CLI\nDESCRIPTION: Command to install the Microsoft.Extensions.Diagnostics.HealthChecks.ResourceUtilization package using the dotnet CLI.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.HealthChecks.ResourceUtilization/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.Diagnostics.HealthChecks.ResourceUtilization\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.Http.Resilience via dotnet CLI\nDESCRIPTION: Command for installing the Microsoft.Extensions.Http.Resilience package using the dotnet CLI. This is the command-line approach to adding the package to a .NET project.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Http.Resilience/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.Http.Resilience\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.Telemetry Package via Project File\nDESCRIPTION: XML configuration to add the Microsoft.Extensions.Telemetry package reference directly in the project file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Telemetry/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.Telemetry\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.Diagnostics.ExceptionSummarization via Console\nDESCRIPTION: This snippet shows how to install the Microsoft.Extensions.Diagnostics.ExceptionSummarization package using the dotnet CLI command.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.ExceptionSummarization/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.Diagnostics.ExceptionSummarization\n```\n\n----------------------------------------\n\nTITLE: Generating Visual Studio Solution\nDESCRIPTION: Command to generate a filtered solution and open it in Visual Studio with specific project keywords.\nSOURCE: https://github.com/dotnet/extensions/blob/main/docs/building.md#2025-04-21_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n> build.cmd -vs <keywords>\n```\n\n----------------------------------------\n\nTITLE: Detecting Breaking API Changes with ApiChief\nDESCRIPTION: Command that returns a failure code when an assembly's API contains breaking changes compared to a previous API baseline fingerprint. Useful in CI/CD scripts for API validation.\nSOURCE: https://github.com/dotnet/extensions/blob/main/eng/Tools/ApiChief/README.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nApiChief MyAssembly.dll breaking MyPreviousBaseline.yml\n```\n\n----------------------------------------\n\nTITLE: Installing and Copying JavaScript Dependencies in Project Templates\nDESCRIPTION: Commands for installing npm packages and copying dependencies to template locations. Used to update project templates with new JavaScript libraries.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\nnpm run copy-dependencies\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Models for .NET\nDESCRIPTION: The snippet demonstrates how to set up a GitHub personal access token for a .NET project using User Secrets. It is necessary for accessing models hosted by GitHub without requiring any specific scopes or permissions. The snippet shows how to navigate to the project directory and set the token via the command line.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/ProjectTemplates/Microsoft.Extensions.AI.Templates.IntegrationTests/Snapshots/aichatweb.Basic.verified/aichatweb/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd <<your-project-directory>>\ndotnet user-secrets set GitHubModels:Token YOUR-TOKEN\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.TimeProvider.Testing via Project File\nDESCRIPTION: XML snippet showing how to reference the Microsoft.Extensions.TimeProvider.Testing package directly in a C# project file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.TimeProvider.Testing/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.TimeProvider.Testing\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.DependencyInjection.AutoActivation via Console\nDESCRIPTION: This snippet shows how to install the Microsoft.Extensions.DependencyInjection.AutoActivation package using the dotnet CLI.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.DependencyInjection.AutoActivation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.DependencyInjection.AutoActivation\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Extensions.AsyncState Package Reference\nDESCRIPTION: XML snippet showing how to add the package reference directly in a .NET project file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AsyncState/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.AsyncState\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Release Notes - Version 9.3.0-preview.1.25161.3\nDESCRIPTION: Documents changes to chat client interfaces, embedding generators, JSON utilities and content handling.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Abstractions/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 9.3.0-preview.1.25161.3\n\n- Changed `IChatClient.GetResponseAsync` and `IChatClient.GetStreamingResponseAsync` to accept an `IEnumerable<ChatMessage>` rather than an `IList<ChatMessage>`.\n- Removed `ChatResponse.Choice` and `ChatResponseUpdate.ChoiceIndex`.\n- Replaced `ChatResponse.Message` with `ChatResponse.Messages`.\n- Added `GetRequiredService` extension method for `IChatClient`/`IEmbeddingGenerator`.\n- Added non-generic `IEmbeddingGenerator` interface.\n- `AIJsonUtilities.CreateFunctionJsonSchema` now special-cases `CancellationToken`.\n- Improved the debugger displays for `ChatMessage` and the `AIContent` types.\n- Added a static `AIJsonUtilities.HashDataToString` method.\n- Split `DataContent` into `DataContent` and `UriContent`.\n- Renamed `DataContent.MediaTypeStartsWith` to `DataContent.HasTopLevelMediaType`.\n```\n\n----------------------------------------\n\nTITLE: Generating Editor Config File Command\nDESCRIPTION: Command to generate an .editorconfig file from the configuration directory. It allows specifying which severity attributes to include in the output file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/eng/Tools/DiagConfig/README.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n> DiagConfig <config-directory> editorconfig save <editor-config-file> [<editor-config-attributes>...]\n```\n\n----------------------------------------\n\nTITLE: Enabling JsonSchemaExporter Polyfill in Project Configuration (XML)\nDESCRIPTION: This snippet shows how to configure a .NET project file to inject the JsonSchemaExporter polyfill for legacy versions of System.Text.Json. By adding this PropertyGroup to the project file, developers can use .NET 9's JsonSchemaExporter functionality with System.Text.Json version 8.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Shared/JsonSchemaExporter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectJsonSchemaExporterOnLegacy>true</InjectJsonSchemaExporterOnLegacy>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Custom Tag Name Implementation\nDESCRIPTION: Example of using TagName attribute to specify custom tag names in logs.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Telemetry.Abstractions/README.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[LoggerMessage(1, LogLevel.Information, \"My custom tag name: {my.custom.tagname}\")]\npublic static partial void LogMyCustomTagName(\n    this ILogger logger,\n    [TagName(\"my.custom.tagname\")] string name);\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.AI.Evaluation Console Tool\nDESCRIPTION: Command-line instruction for installing the Microsoft.Extensions.AI.Evaluation.Console tool globally using the dotnet CLI. This tool provides command-line functionality for generating reports and managing evaluation data.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation.Quality/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndotnet tool install Microsoft.Extensions.AI.Evaluation.Console --create-manifest-if-needed\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Models Token\nDESCRIPTION: JSON configuration for setting up GitHub Models authentication token in user secrets.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/ChatWithCustomData-CSharp.Web/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"GitHubModels:Token\": \"YOUR-TOKEN\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Extensions AI Evaluation Console Tool\nDESCRIPTION: Command to install the Microsoft.Extensions.AI.Evaluation.Console command line tool\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation.Safety/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndotnet tool install Microsoft.Extensions.AI.Evaluation.Console --create-manifest-if-needed\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.Diagnostics.Testing via Console\nDESCRIPTION: Command to add the Microsoft.Extensions.Diagnostics.Testing package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.Testing/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.Diagnostics.Testing\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Extensions.AI.Ollama Package Reference to Project File\nDESCRIPTION: Demonstrates how to add the Microsoft.Extensions.AI.Ollama package reference directly in a C# project file using XML.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Ollama/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.AI.Ollama\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Adding AsyncState Package Reference to Project File\nDESCRIPTION: XML configuration to add the Microsoft.AspNetCore.AsyncState package reference directly in the project file\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.AspNetCore.AsyncState/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.AspNetCore.AsyncState\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing AI Templates Locally for Testing\nDESCRIPTION: PowerShell commands to uninstall existing templates, clear NuGet cache, and install the locally built template package. This allows testing of templates before publishing.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/README.md#2025-04-21_snippet_4\n\nLANGUAGE: pwsh\nCODE:\n```\n# Uninstall any existing version of the templates\ndotnet new uninstall Microsoft.Extensions.AI.Templates\n\n# Clear the Microsoft.Extensions.AI packages from the NuGet cache since the local package version does not change\nRemove-Item ~\\.nuget\\packages\\Microsoft.Extensions.AI* -Recurse -Force\n\n# Install the template from the generated .nupkg file (in the artifacts/packages folder)\ndotnet new install .\\artifacts\\packages\\Debug\\Shipping\\Microsoft.Extensions.AI.Templates*.nupkg\n```\n\n----------------------------------------\n\nTITLE: Generating API Delta Report with ApiChief\nDESCRIPTION: Command to create a YAML file that captures the differences between a previously-captured API fingerprint and the current assembly. Use the -o option to specify the output file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/eng/Tools/ApiChief/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nApiChief MyAssembly.dll delta MyPreviousBaseline.yml\n```\n\n----------------------------------------\n\nTITLE: Adding Rented Span Support to Project Configuration\nDESCRIPTION: XML configuration to enable the Rented Span utility in a .NET project. This property group setting instructs the build system to inject the shared RentedSpan functionality into the project.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Shared/RentedSpan/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectSharedRentedSpan>true</InjectSharedRentedSpan>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Publishing AI Evaluation Data with Manual Attachment Upload\nDESCRIPTION: Shows how to publish AI evaluation data when pipeline restrictions prevent direct attachment uploads. This approach disables the automatic upload feature but still displays the reporting tab, while using a script task to manually add the attachment.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation.Reporting/TypeScript/azure-devops-report/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- task: PublishAIEvaluationReport@0\n  displayName: 'Display AI Evaluation Data'\n  inputs:\n    reportFile: '$(build-artifacts)\\report.json'\n    disableAttachmentUpload: true\n\n- script: |\n    echo \"##vso[task.addattachment type=ai-eval-report-json;name=ai-eval-report;]$(build-artifacts)\\report.json\"\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.AI.Evaluation Packages via .NET CLI\nDESCRIPTION: This snippet demonstrates how to install the core Microsoft.Extensions.AI.Evaluation packages using the dotnet CLI. It includes commands for adding the main evaluation, quality, and reporting packages.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation.Reporting/CSharp/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.AI.Evaluation\ndotnet add package Microsoft.Extensions.AI.Evaluation.Quality\ndotnet add package Microsoft.Extensions.AI.Evaluation.Reporting\n```\n\n----------------------------------------\n\nTITLE: Configuring Ollama Tests\nDESCRIPTION: Commands to set up user secrets for Ollama integration tests. The configuration specifies the endpoint URL for the local Ollama server.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.AI.Integration.Tests/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd test/Libraries/Microsoft.Extensions.AI.Integration.Tests\ndotnet user-secrets set Ollama:Endpoint http://localhost:11434/\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft Extensions AI Evaluation Package References to Project File\nDESCRIPTION: XML configuration to add Microsoft.Extensions.AI.Evaluation package references directly in a C# project file. Requires replacing [CURRENTVERSION] with the desired package version.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.AI.Evaluation\" Version=\"[CURRENTVERSION]\" />\n  <PackageReference Include=\"Microsoft.Extensions.AI.Evaluation.Quality\" Version=\"[CURRENTVERSION]\" />\n  <PackageReference Include=\"Microsoft.Extensions.AI.Evaluation.Reporting\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Adding Package Reference in Project File\nDESCRIPTION: XML configuration to add the package reference directly in the project file\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Options.Contextual/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.Options.Contextual\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Extensions.Diagnostics.Probes Reference to Project File\nDESCRIPTION: XML snippet to add a reference to the Microsoft.Extensions.Diagnostics.Probes package directly in the C# project file. The version should be replaced with the current version number.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.Probes/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.Diagnostics.Probes\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Adding HybridCache Package Reference in Project File\nDESCRIPTION: XML configuration to add the Microsoft.Extensions.Caching.Hybrid package reference to a .NET project file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Caching.Hybrid/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.Caching.Hybrid\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Copying Code from azure/dotnet-extensions-experimental to dotnet/extensions (Batch)\nDESCRIPTION: Sets the DOTNETEXTENSIONS_REPO environment variable to the dotnet repo root and runs the CopyToDotnet.cmd script to copy code from azure/dotnet-extensions-experimental to dotnet/extensions.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Shared/AzureSync/ReadMe.SharedCode.md#2025-04-21_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nset DOTNETEXTENSIONS_REPO=<dotnet repo root>\nCopyToDotnet.cmd\n```\n\n----------------------------------------\n\nTITLE: Configuring Memoization in Project File\nDESCRIPTION: XML configuration required in .csproj file to enable shared memoization functionality.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Shared/Memoization/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectSharedMemoization>true</InjectSharedMemoization>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: FakeRedaction Service Registration Method Signatures\nDESCRIPTION: C# method signatures for registering fake redaction services in the dependency injection container.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Compliance.Testing/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IServiceCollection AddFakeRedaction(this IServiceCollection services)\npublic static IServiceCollection AddFakeRedaction(this IServiceCollection services, Action<FakeRedactorOptions> configure)\n```\n\n----------------------------------------\n\nTITLE: Installing HybridCache via .NET CLI\nDESCRIPTION: Command to install the Microsoft.Extensions.Caching.Hybrid package using the dotnet CLI.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Caching.Hybrid/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.Caching.Hybrid\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Extensions.Diagnostics.ExceptionSummarization Reference to C# Project\nDESCRIPTION: This XML snippet demonstrates how to add a reference to the Microsoft.Extensions.Diagnostics.ExceptionSummarization package directly in a C# project file. The version should be replaced with the current version of the package.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.ExceptionSummarization/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.Diagnostics.ExceptionSummarization\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Adding Package Reference in Project File\nDESCRIPTION: XML snippet showing how to add the package reference directly in the project file with a version placeholder.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Compliance.Testing/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.Compliance.Testing\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Building AI Templates with Pinned Library Versions\nDESCRIPTION: PowerShell command to build the templates package using pinned versions of library packages. This approach is used for off-cycle template updates.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/README.md#2025-04-21_snippet_3\n\nLANGUAGE: pwsh\nCODE:\n```\n.\\build.cmd -pack -projects .\\src\\ProjectTemplates\\Microsoft.Extensions.AI.Templates\\Microsoft.Extensions.AI.Templates.csproj /p:TemplateUsePinnedPackageVersions=true\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Extensions.Compliance.Redaction reference to project file\nDESCRIPTION: XML snippet showing how to add a reference to the Microsoft.Extensions.Compliance.Redaction package directly in a C# project file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Compliance.Redaction/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.Compliance.Redaction\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Commit Message Format Example in Markdown\nDESCRIPTION: Demonstrates the recommended format for git commit messages, including summary line, issue reference, and detailed description with proper line wrapping.\nSOURCE: https://github.com/dotnet/extensions/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nSummarize change in 50 characters or less\n\nFixes #42\n\nProvide more detail after the first line. Leave one blank line below the\nsummary and wrap all lines at 72 characters or less.\n\nIf the change fixes an issue, leave another blank line after the final\nparagraph and indicate which issue is fixed in the specific format\nbelow.\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.StaticAnalysis via Project File\nDESCRIPTION: XML configuration to add the Microsoft.Extensions.StaticAnalysis package reference to a C# project file, including asset configurations for analyzers.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Packages/Microsoft.Extensions.StaticAnalysis/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.StaticAnalysis\" Version=\"[CURRENTVERSION]\" >\n    <PrivateAssets>all</PrivateAssets>\n    <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n  </PackageReference>\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.AspNetCore.Diagnostics.Middleware Package Reference in Project File\nDESCRIPTION: XML snippet showing how to add a reference to the Microsoft.AspNetCore.Diagnostics.Middleware package directly in a C# project file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.AspNetCore.Diagnostics.Middleware/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.AspNetCore.Diagnostics.Middleware\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Project File References\nDESCRIPTION: Key file references used in the project setup process\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/README.Aspire.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n.sln\nProgram.cs\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Extensions.Hosting.Testing Package Reference\nDESCRIPTION: XML configuration to add the Microsoft.Extensions.Hosting.Testing package reference directly in a C# project file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Hosting.Testing/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.Hosting.Testing\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Opening Solution in VS Code on Windows\nDESCRIPTION: Command to set up environment variables and open the repository in Visual Studio Code on Windows.\nSOURCE: https://github.com/dotnet/extensions/blob/main/docs/building.md#2025-04-21_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n> start-code.cmd\n```\n\n----------------------------------------\n\nTITLE: Configuring InjectTaskWaitOnLegacy Property in .csproj File\nDESCRIPTION: This XML snippet shows how to add the InjectTaskWaitOnLegacy property to a .csproj file. When set to true, this property enables proper task waiting behavior for legacy code in .NET projects.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/LegacySupport/TaskWaitAsync/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectTaskWaitOnLegacy>true</InjectTaskWaitOnLegacy>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.Diagnostics.ResourceMonitoring via CLI\nDESCRIPTION: This snippet shows how to install the Microsoft.Extensions.Diagnostics.ResourceMonitoring package using the dotnet CLI. It uses the 'dotnet add package' command to add the package to a project.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.Diagnostics.ResourceMonitoring\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Extensions.Http.Diagnostics Reference to Project File\nDESCRIPTION: XML snippet to add a reference to the Microsoft.Extensions.Http.Diagnostics package in a C# project file. The version placeholder [CURRENTVERSION] should be replaced with the actual version number.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Http.Diagnostics/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.Http.Diagnostics\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Generating All-Off Diagnostics Config Command\nDESCRIPTION: Command to create an .editorconfig file that turns off all analyzers. This allows for gradual adoption of static analysis in large codebases by enabling analyzers only in specific directories.\nSOURCE: https://github.com/dotnet/extensions/blob/main/eng/Tools/DiagConfig/README.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n> DiagConfig <config-directory> editorconfig save --all-off <editor-config-file> [<editor-config-attributes>...]\n```\n\n----------------------------------------\n\nTITLE: Installing AmbientMetadata Package via Console\nDESCRIPTION: Command line instruction for installing the Microsoft.Extensions.AmbientMetadata.Application package using the dotnet CLI.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AmbientMetadata.Application/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.AmbientMetadata.Application\n```\n\n----------------------------------------\n\nTITLE: Configuring Numeric Extensions in .NET Project\nDESCRIPTION: XML configuration to enable shared numeric extensions in a .NET project by adding a property group setting to the project file\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Shared/NumericExtensions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectSharedNumericExtensions>true</InjectSharedNumericExtensions>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Setting InjectObsoleteAttributeOnLegacy in .NET Project File\nDESCRIPTION: Configuration setting in csproj file to enable automatic injection of Obsolete attributes on legacy code elements. This property enables marking of deprecated or legacy code components with obsolescence warnings.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/LegacySupport/ObsoleteAttribute/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectObsoleteAttributeOnLegacy>true</InjectObsoleteAttributeOnLegacy>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.AspNetCore.Diagnostics.Middleware via Console\nDESCRIPTION: Command to add the Microsoft.AspNetCore.Diagnostics.Middleware package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.AspNetCore.Diagnostics.Middleware/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.AspNetCore.Diagnostics.Middleware\n```\n\n----------------------------------------\n\nTITLE: Generating API Review Files with ApiChief\nDESCRIPTION: Command to output a folder of files capturing the public API surface of an assembly in a format suitable for API reviews.\nSOURCE: https://github.com/dotnet/extensions/blob/main/eng/Tools/ApiChief/README.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nApiChief MyAssembly.dll emit review\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.Http.Diagnostics via Console\nDESCRIPTION: Command to add the Microsoft.Extensions.Http.Diagnostics package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Http.Diagnostics/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.Http.Diagnostics\n```\n\n----------------------------------------\n\nTITLE: Copying Code from dotnet/extensions to azure/dotnet-extensions-experimental (Batch)\nDESCRIPTION: Sets the AZUREEXTENSIONS_REPO environment variable to the Azure repo root and runs the CopyToAzure.cmd script to copy code from dotnet/extensions to azure/dotnet-extensions-experimental.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Shared/AzureSync/ReadMe.SharedCode.md#2025-04-21_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nset AZUREEXTENSIONS_REPO=<azure repo root>\nCopyToAzure.cmd\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Extensions.Resilience Package Reference in C# Project File\nDESCRIPTION: Demonstrates how to add a reference to the Microsoft.Extensions.Resilience package directly in a C# project file using XML.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Resilience/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.Resilience\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Instruments in .NET Project File\nDESCRIPTION: XML configuration block that enables shared telemetry instruments injection in a .NET project. This setting is added to the project's .csproj file to enable common telemetry instrument names across projects.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Shared/Instruments/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectSharedInstruments>true</InjectSharedInstruments>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Members Support for Legacy .NET Frameworks in Project File\nDESCRIPTION: Adds the InjectRequiredMemberOnLegacy property to a .csproj file to enable C# required members feature on older .NET frameworks that don't natively support it. This configuration option injects the necessary compatibility code.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/LegacySupport/RequiredMemberAttribute/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectRequiredMemberOnLegacy>true</InjectRequiredMemberOnLegacy>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.Compliance.Testing Package via Console\nDESCRIPTION: Command line instruction to add the testing package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Compliance.Testing/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.Compliance.Testing\n```\n\n----------------------------------------\n\nTITLE: Generating API Summary with ApiChief\nDESCRIPTION: Command to output a human-friendly summary of the public API of a .NET assembly. Use the -o option to specify the output file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/eng/Tools/ApiChief/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nApiChief MyAssembly.dll emit summary\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Extensions.ObjectPool.DependencyInjection as Project Reference\nDESCRIPTION: XML snippet showing how to add the Microsoft.Extensions.ObjectPool.DependencyInjection package directly in a C# project file as a package reference.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.ObjectPool.DependencyInjection/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.ObjectPool.DependencyInjection\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Throwing InvalidOperationException in .NET\nDESCRIPTION: This C# snippet demonstrates throwing an InvalidOperationException with a custom message related to memory usage parsing on Linux systems. It uses a method from Microsoft.Shared.Diagnostics for throwing the exception and is applied in resource monitoring scenarios.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_TotalInactiveFile_Is_Invalid_content=1024 KB.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.AI.Evaluation Packages via Console\nDESCRIPTION: This snippet demonstrates how to install the core Microsoft.Extensions.AI.Evaluation packages using the dotnet CLI. It includes commands for adding the main evaluation, quality, and reporting packages.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation.Console/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.AI.Evaluation\ndotnet add package Microsoft.Extensions.AI.Evaluation.Quality\ndotnet add package Microsoft.Extensions.AI.Evaluation.Reporting\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Throw in .NET Project\nDESCRIPTION: XML configuration that enables shared throw functionality by adding a property group to the project file. This setting injects shared throw utilities into the project for efficient exception handling.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Shared/Throw/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectSharedThrow>true</InjectSharedThrow>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Example Output of Memoized Function\nDESCRIPTION: Sample output showing the execution timestamps of regular vs memoized function calls, demonstrating the performance benefits of caching.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Shared/Memoization/README.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nt1 = 2021-10-22T21:57:12.3753431+00:00\nt2 = 2021-10-22T21:57:14.3973958+00:00\nt3 = 2021-10-22T21:57:14.4034649+00:00\nt4 = 2021-10-22T21:57:15.4163199+00:00\n```\n\n----------------------------------------\n\nTITLE: Configuring Project File for C# Required Members on Legacy Frameworks\nDESCRIPTION: This XML snippet shows how to modify the .csproj file to enable the use of C# required members on older .NET frameworks. It sets the InjectCompilerFeatureRequiredOnLegacy property to true.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/LegacySupport/CompilerFeatureRequiredAttribute/README.md#2025-04-21_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<PropertyGroup>\n  <InjectCompilerFeatureRequiredOnLegacy>true</InjectCompilerFeatureRequiredOnLegacy>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing AsyncState Package via .NET CLI\nDESCRIPTION: Command line instruction for installing the Microsoft.AspNetCore.AsyncState package using the dotnet CLI\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.AspNetCore.AsyncState/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.AspNetCore.AsyncState\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Extensions.AI.Evaluation Package References to C# Project\nDESCRIPTION: This XML snippet shows how to add package references for Microsoft.Extensions.AI.Evaluation libraries directly in a C# project file. It includes references for the core evaluation, quality, and reporting packages.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation.Console/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.AI.Evaluation\" Version=\"[CURRENTVERSION]\" />\n  <PackageReference Include=\"Microsoft.Extensions.AI.Evaluation.Quality\" Version=\"[CURRENTVERSION]\" />\n  <PackageReference Include=\"Microsoft.Extensions.AI.Evaluation.Reporting\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Adding AmbientMetadata Package Reference in Project File\nDESCRIPTION: XML configuration to add the package reference directly in the project file with a version placeholder.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AmbientMetadata.Application/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.AmbientMetadata.Application\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Parsing Error Stack Trace\nDESCRIPTION: Stack trace showing an InvalidOperationException occurring when trying to parse an invalid CPU limit value 'dd1d 18' from /sys/fs/cgroup/cpu.max. The error propagates through the Linux utilization parser components.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_Cgroup_Cpu_Files_Contain_Invalid_Data_quota=dd1d_period=18.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpu.max'. Expected an integer but got: 'dd1d 18'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryParseCpuQuotaAndPeriodFromFile(IFileSystem fileSystem, FileInfo cpuLimitsFile, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryGetCpuUnitsFromCgroups(IFileSystem fileSystem, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetCgroupLimitedCpus()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass19_0.<Throws_When_Cgroup_Cpu_Files_Contain_Invalid_Data>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.AspNetCore.HeaderParsing Package Reference in XML\nDESCRIPTION: XML snippet to add a package reference to Microsoft.AspNetCore.HeaderParsing in a C# project file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.AspNetCore.HeaderParsing/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.AspNetCore.HeaderParsing\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Setting Caller Attributes Injection in .NET Project File\nDESCRIPTION: XML configuration snippet that enables caller attributes injection for legacy code by adding a property group to the project file. This setting allows the project to use caller information attributes in legacy code contexts.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/LegacySupport/CallerAttributes/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectCallerAttributesOnLegacy>true</InjectCallerAttributesOnLegacy>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Example of a Compliance Report output\nDESCRIPTION: JSON output example of a compliance report generated for the User class with private data. The report identifies the assembly, type, member with private data classification, and its location in the source code.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Packages/Microsoft.Extensions.AuditReports/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Name\": \"MyAssembly\",\n    \"Types\": [\n        {\n            \"Name\": \"ComplianceTesting.User\",\n            \"Members\": [\n                {\n                    \"Name\": \"Name\",\n                    \"Type\": \"string\",\n                    \"File\": \"C:\\\\source\\\\samples\\\\src\\\\MyAssembly\\\\User.cs\",\n                    \"Line\": \"12\",\n                    \"Classifications\": [\n                        {\n                            \"Name\": \"PrivateData\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Pooling in .NET Project\nDESCRIPTION: Adds the shared pools functionality to a .NET project by setting the InjectSharedPools property to true in the project file. This enables efficient object pooling capabilities.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Shared/Pools/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectSharedPools>true</InjectSharedPools>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.Hosting.Testing via CLI\nDESCRIPTION: Command line instruction for installing the Microsoft.Extensions.Hosting.Testing NuGet package using the dotnet CLI.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Hosting.Testing/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.Hosting.Testing\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Extensions.AI.Evaluation Package References to C# Project\nDESCRIPTION: XML snippet for adding package references to a C# project file. It includes the main Microsoft.Extensions.AI.Evaluation libraries with placeholders for version numbers.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation.Reporting.Azure/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.AI.Evaluation\" Version=\"[CURRENTVERSION]\" />\n  <PackageReference Include=\"Microsoft.Extensions.AI.Evaluation.Quality\" Version=\"[CURRENTVERSION]\" />\n  <PackageReference Include=\"Microsoft.Extensions.AI.Evaluation.Reporting\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.Diagnostics.HealthChecks.Common Package via Console\nDESCRIPTION: Command to install the Microsoft.Extensions.Diagnostics.HealthChecks.Common package using the dotnet CLI.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.HealthChecks.Common/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.Diagnostics.HealthChecks.Common\n```\n\n----------------------------------------\n\nTITLE: InvalidOperationException Stack Trace in Linux Network Utilization Parser\nDESCRIPTION: Exception details showing an error in the LinuxNetworkUtilizationParser when parsing /proc/net/tcp. The parser expected the first line to start with 'sl' but found an empty string, resulting in an InvalidOperationException being thrown in the GetTcpStateInfo method.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxNetworkUtilizationParserTests.ipv4_line=.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/proc/net/tcp'. We expected first line of the file to start with 'sl' but it was '' instead.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpStateInfo(FileInfo file)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpIPv4StateInfo()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Package Reference in Project File\nDESCRIPTION: XML snippet showing how to reference the Microsoft.Extensions.Diagnostics.HealthChecks.Common package directly in a C# project file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.HealthChecks.Common/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.Diagnostics.HealthChecks.Common\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring BitOperations Support on Legacy .NET Projects with ProjectFile Property\nDESCRIPTION: This XML snippet shows the property setting that enables BitOperations functionality on legacy .NET frameworks. Adding this PropertyGroup to a .csproj file injects the BitOperations source into the project during compilation.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/LegacySupport/BitOperations/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectBitOperationsOnLegacy>true</InjectBitOperationsOnLegacy>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Enabling Buffer Writer Pool in .NET Project Configuration\nDESCRIPTION: This XML snippet shows how to configure a .NET project file (.csproj) to enable the shared buffer writer pool feature. It sets the InjectSharedBufferWriterPool property to true.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Shared/BufferWriterPool/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectSharedBufferWriterPool>true</InjectSharedBufferWriterPool>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Displaying Diagnostic IDs for ContextualOptions in Markdown\nDESCRIPTION: A markdown table showing diagnostic IDs and descriptions for ContextualOptions in .NET Extensions.\nSOURCE: https://github.com/dotnet/extensions/blob/main/docs/list-of-diagnostics.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Diagnostic ID     | Description |\n| :---------------- | :---------- |\n| `CTXOPTGEN000` | Options context classes can't be static |\n| `CTXOPTGEN001` | Options context types must be partial |\n| `CTXOPTGEN002` | The options context type does not have usable properties |\n| `CTXOPTGEN003` | The options context cannot be a ref-like type |\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Extensions.Diagnostics.Testing Package Reference in Project File\nDESCRIPTION: XML snippet showing how to add a reference to the Microsoft.Extensions.Diagnostics.Testing package directly in a C# project file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.Testing/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.Diagnostics.Testing\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Adding package reference to project file\nDESCRIPTION: XML snippet showing how to add the Microsoft.Extensions.Diagnostics.HealthChecks.ResourceUtilization package reference directly to a C# project file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Diagnostics.HealthChecks.ResourceUtilization/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.Diagnostics.HealthChecks.ResourceUtilization\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: ArgumentOutOfRangeException Stack Trace in LinuxNetworkUtilizationParser\nDESCRIPTION: An exception stack trace showing an ArgumentOutOfRangeException thrown when the LinuxNetworkUtilizationParser attempts to process an invalid TCP state value (0). The exception originates in the UpdateTcpStateInfo method and propagates through the call stack.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxNetworkUtilizationParserTests.3.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: ArgumentOutOfRangeException,\n  Message: 0 is an invalid value for enum type Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxTcpState (Parameter 'state'),\n  ParamName: state,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.ArgumentOutOfRangeException(String paramName, String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.UpdateTcpStateInfo(ReadOnlySpan`1 buffer, TcpStateInfo tcpStateInfo)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpStateInfo(FileInfo file)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpIPv4StateInfo()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Building the AI Templates Package with Local Library Versions\nDESCRIPTION: PowerShell command to build the Microsoft.Extensions.AI.Templates package referencing local package versions. This is the default approach for template building.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/README.md#2025-04-21_snippet_2\n\nLANGUAGE: pwsh\nCODE:\n```\n.\\build.cmd -pack -projects .\\src\\ProjectTemplates\\Microsoft.Extensions.AI.Templates\\Microsoft.Extensions.AI.Templates.csproj\n```\n\n----------------------------------------\n\nTITLE: Referencing HybridCache Components\nDESCRIPTION: Code references showing the key components and types used in HybridCache implementation, including DefaultHybridCache, StampedeState, and BufferChunk.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Caching.Hybrid/Internal/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nHybridCache\nDefaultHybridCache\nStampedeState\nStampedeKey\nCacheItem<T>\nBufferChunk\n```\n\n----------------------------------------\n\nTITLE: Handling InvalidOperationException in Memory Usage\nDESCRIPTION: This snippet captures the InvalidOperationException when the system is unable to read the 'inactive_file' metric from the Linux cgroup memory statistics. It highlights the importance of exception handling in resource monitoring, especially in Linux environments. The method GetMemoryUsageInBytes is called to retrieve memory usage, and if the data cannot be accessed, an exception is thrown and logged.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_TotalInactiveFile_Is_Invalid_content=Total_Inactive_File 2.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n {\n  Type: InvalidOperationException,\n  Message: Unable to find inactive_file from '/sys/fs/cgroup/memory.stat'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetMemoryUsageInBytes()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass4_0.<Throws_When_TotalInactiveFile_Is_Invalid>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Diagnostic IDs for AuditReports in Markdown\nDESCRIPTION: A markdown table listing diagnostic IDs and descriptions for AuditReports in .NET Extensions.\nSOURCE: https://github.com/dotnet/extensions/blob/main/docs/list-of-diagnostics.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Diagnostic ID     | Description |\n| :---------------- | :---------- |\n| `AUDREPGEN000` | MetricsReports generator couldn't resolve output path for the report |\n| `AUDREPGEN001` | ComplianceReports generator couldn't resolve output path for the report |\n```\n\n----------------------------------------\n\nTITLE: Displaying Diagnostic IDs for Obsoletions in Markdown\nDESCRIPTION: A markdown table showing diagnostic IDs and descriptions for obsolete APIs in .NET Extensions.\nSOURCE: https://github.com/dotnet/extensions/blob/main/docs/list-of-diagnostics.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Diagnostic ID     | Description |\n| :---------------- | :---------- |\n| `EXTOBS0001` | This API is obsolete and will be removed in a future version. Consider using [Resource Monitoring observable instruments](https://learn.microsoft.com/dotnet/core/diagnostics/built-in-metrics-diagnostics#microsoftextensionsdiagnosticsresourcemonitoring). |\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Extensions.AuditReports in project file\nDESCRIPTION: XML snippet for adding the Microsoft.Extensions.AuditReports package reference directly in a C# project file. The version should be replaced with the current version number.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Packages/Microsoft.Extensions.AuditReports/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.AuditReports\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Handling InvalidOperationException in .NET\nDESCRIPTION: This code snippet provides a detailed stack trace for an InvalidOperationException that occurs when the total memory usage reported is less than the inactive memory in a Linux environment. It helps developers identify the source of the exception and aids in debugging resource monitoring logic within .NET applications. The exceptions and methods mentioned are part of the Microsoft.Extensions.Diagnostics namespace, which requires .NET runtime dependencies.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_Inactive_Memory_Is_Bigger_Than_Total_Memory_inactive=23423_total=22.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n﻿{\n  Type: InvalidOperationException,\n  Message: The total memory usage read from '/sys/fs/cgroup/memory.current' is lesser than inactive memory read from '/sys/fs/cgroup/memory.stat'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetMemoryUsageInBytes()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass10_0.<Throws_When_Inactive_Memory_Is_Bigger_Than_Total_Memory>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Debug-Level Logging Method in C# using Microsoft.Extensions.Logging\nDESCRIPTION: An auto-generated method that logs the message \"M1\" at Debug level using Microsoft.Extensions.Logging. The implementation includes performance optimizations like early returns for disabled log levels and efficient tag handling through ThreadLocalState.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Generators/Microsoft.Gen.Logging/Verified/ParserTests.MultipleTypeDefinitions.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// Logs \"M1\" at \"Debug\" level.\n/// </summary>\n[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Gen.Logging\", \"VERSION\")]\nstatic partial void M1(global::Microsoft.Extensions.Logging.ILogger logger)\n{\n    if (!logger.IsEnabled(global::Microsoft.Extensions.Logging.LogLevel.Debug))\n    {\n        return;\n    }\n\n    var state = global::Microsoft.Extensions.Logging.LoggerMessageHelper.ThreadLocalState;\n\n    _ = state.ReserveTagSpace(1);\n    state.TagArray[0] = new(\"{OriginalFormat}\", \"M1\");\n\n    logger.Log(\n        global::Microsoft.Extensions.Logging.LogLevel.Debug,\n        new(1, nameof(M1)),\n        state,\n        null,\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.Gen.Logging\", \"VERSION\")] static string (s, _) =>\n        {\n            return \"M1\";\n        });\n\n    state.Clear();\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Settings from Editor Config Command\nDESCRIPTION: Command to import existing analyzer settings from an .editorconfig file into the configuration directory. This helps in migrating existing settings.\nSOURCE: https://github.com/dotnet/extensions/blob/main/eng/Tools/DiagConfig/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n> DiagConfig <config-directory> editorconfig merge <editor-config-file> <editor-config-family>\n```\n\n----------------------------------------\n\nTITLE: InvalidOperationException Stack Trace for Linux Network Parser\nDESCRIPTION: Exception details showing an InvalidOperationException occurring when the LinuxNetworkUtilizationParser attempts to parse '/proc/net/tcp'. The error is triggered because the first line of the file doesn't start with 'sl' as expected, instead containing invalid characters.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxNetworkUtilizationParserTests.ipv4_line=!@#!$%!@.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/proc/net/tcp'. We expected first line of the file to start with 'sl' but it was '!@#!$%!@' instead.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpStateInfo(FileInfo file)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpIPv4StateInfo()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Monitoring Snapshot Data Structure\nDESCRIPTION: This JSON snippet represents a resource monitoring snapshot, capturing details about memory usage, user time, kernel time, and total time since start. It includes both flat key-value pairs and nested structures representing the state of the monitored resource, alongside a formatted log message.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Verified/ResourceMonitoringServiceTests.ResourceUtilizationTracker_LogsSnapshotInformation.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Level\": \"Debug\",\n  \"Id\": {\n    \"Id\": 3,\n    \"Name\": \"SnapshotReceived\"\n  },\n  \"State\": [\n    {\n      \"memoryUsageInBytes\": 500\n    },\n    {\n      \"userTimeSinceStart\": \"00:00:01\"\n    },\n    {\n      \"kernelTimeSinceStart\": \"00:00:01\"\n    },\n    {\n      \"totalTimeSinceStart\": \"730119.00:00:00\"\n    },\n    {\n      \"{OriginalFormat}\": \"Snapshot received: TotalTimeSinceStart={totalTimeSinceStart}, KernelTimeSinceStart={kernelTimeSinceStart}, UserTimeSinceStart={userTimeSinceStart}, MemoryUsageInBytes={memoryUsageInBytes}.\"\n    }\n  ],\n  \"StructuredState\": [\n    {\n      \"memoryUsageInBytes\": 500\n    },\n    {\n      \"userTimeSinceStart\": \"00:00:01\"\n    },\n    {\n      \"kernelTimeSinceStart\": \"00:00:01\"\n    },\n    {\n      \"totalTimeSinceStart\": \"730119.00:00:00\"\n    },\n    {\n      \"{OriginalFormat}\": \"Snapshot received: TotalTimeSinceStart={totalTimeSinceStart}, KernelTimeSinceStart={kernelTimeSinceStart}, UserTimeSinceStart={userTimeSinceStart}, MemoryUsageInBytes={memoryUsageInBytes}.\"\n    }\n  ],\n  \"Message\": \"Snapshot received: TotalTimeSinceStart=730119.00:00:00, KernelTimeSinceStart=00:00:01, UserTimeSinceStart=00:00:01, MemoryUsageInBytes=500.\",\n  \"Category\": \"Microsoft.Extensions.Diagnostics.ResourceMonitoring.ResourceMonitorService\",\n  \"LevelEnabled\": true,\n  \"Timestamp\": \"DateTimeOffset_1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.TimeProvider.Testing via Console\nDESCRIPTION: Command to add the Microsoft.Extensions.TimeProvider.Testing package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.TimeProvider.Testing/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.TimeProvider.Testing\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Operation Exception in Memory Parsing - C#\nDESCRIPTION: This code snippet captures the InvalidOperationException that occurs when the inactive file cannot be found during memory usage parsing. It details the stack trace leading to the error and provides context for exceptions raised in the LinuxUtilizationParserCgroupV2 class.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_TotalInactiveFile_Is_Invalid_content=.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Unable to find inactive_file from '/sys/fs/cgroup/memory.stat'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetMemoryUsageInBytes()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass4_0.<Throws_When_TotalInactiveFile_Is_Invalid>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling GetOrAdd Extensions on Legacy Dictionary Types in .NET Project\nDESCRIPTION: This XML snippet shows how to configure a .NET project to inject GetOrAdd extension methods on legacy dictionary types by adding a property group to the project file. This is useful for maintaining backward compatibility with older code that relies on these extension methods.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/LegacySupport/GetOrAdd/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectGetOrAddOnLegacy>true</InjectGetOrAddOnLegacy>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Displaying Diagnostic IDs for Metrics in Markdown\nDESCRIPTION: A markdown table showing diagnostic IDs and descriptions for Metrics in .NET Extensions.\nSOURCE: https://github.com/dotnet/extensions/blob/main/docs/list-of-diagnostics.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Diagnostic ID     | Description |\n| :---------------- | :---------- |\n| `METGEN000` | Metric method names can't start with an underscore |\n| `METGEN001` | Metric method parameter names can't start with an underscore |\n| `METGEN002` | Metric names must start with an uppercase alphabetic character |\n| `METGEN003` | Multiple metric methods can't use the same metric name |\n| `METGEN004` | Metric methods mustn't use any existing type as the return type |\n| `METGEN005` | The first parameter should be of type `System.Diagnostics.Metrics.Meter` |\n| `METGEN006` | Metric methods must be partial |\n| `METGEN007` | Metric methods can't be generic |\n| `METGEN008` | Metric methods can't have a body |\n| `METGEN009` | Tag names should contain alphanumeric characters and only allowed symbols |\n| `METGEN010` | Metric methods must be static |\n| `METGEN011` | A strong type object contains duplicate tag names |\n| `METGEN012` | A metric class contains an invalid tag name type |\n| `METGEN013` | A metric class contains too many tag names |\n| `METGEN014` | A metering attribute type argument is invalid |\n| `METGEN015` | Metric methods mustn't use any external type as the return type |\n| `METGEN016` | Metric methods mustn't use any generic type as the return type |\n| `METGEN017` | Gauge is not supported yet |\n| `METGEN018` | Xml comment was not parsed correctly |\n| `METGEN019` | A metric class has cycles in its type hierarchy |\n```\n\n----------------------------------------\n\nTITLE: Throwing InvalidOperationException in .NET\nDESCRIPTION: This snippet demonstrates how to capture and handle an InvalidOperationException in a .NET application related to invalid system memory data. It handles errors when the memory usage value is non-positive.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_TotalInactiveFile_Is_Invalid_content=total_inactive_file-_ 21391.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetMemoryUsageInBytes()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass4_0.<Throws_When_TotalInactiveFile_Is_Invalid>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Partial Class with OptionsContext in C#\nDESCRIPTION: Demonstrates the creation of a non-partial class decorated with OptionsContext attribute, containing a read-only string property 'Foo' with a default value. Uses Microsoft.Extensions.Options.Contextual namespace.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Generators/Microsoft.Gen.ContextualOptions/TestClasses/NonPartialClass.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\nusing Microsoft.Extensions.Options.Contextual;\n\nnamespace TestClasses\n{\n    [OptionsContext]\n    public class NonPartialClass\n    {\n        public string Foo { get; } = \"FooValue\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.Options.Contextual Package via Console\nDESCRIPTION: Command to install the NuGet package using the dotnet CLI\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Options.Contextual/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.Options.Contextual\n```\n\n----------------------------------------\n\nTITLE: Arcade Template Folder Structure Overview\nDESCRIPTION: Example showing the folder and file structure of Arcade's templates system. It illustrates the organization of template files across various categories (job, jobs, post-build, steps, variables) and indicates whether each file serves as a shim, contains actual logic, or redirects to other templates.\nSOURCE: https://github.com/dotnet/extensions/blob/main/eng/common/template-guidance.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\neng\\common\\\n    [templates || templates-official]\\\n        job\\\n            job.yml                          (shim + artifact publishing logic)\n            onelocbuild.yml                  (shim)\n            publish-build-assets.yml         (shim)\n            source-build.yml                 (shim)\n            source-index-stage1.yml          (shim)\n        jobs\\\n            codeql-build.yml                 (shim)\n            jobs.yml                         (shim)\n            source-build.yml                 (shim)\n        post-build\\\n            post-build.yml                   (shim)\n            common-variabls.yml              (shim)\n            setup-maestro-vars.yml           (shim)\n        steps\\\n            publish-build-artifacts.yml      (logic)\n            publish-pipeline-artifacts.yml   (logic)\n            component-governance.yml         (shim)\n            generate-sbom.yml                (shim)\n            publish-logs.yml                 (shim)\n            retain-build.yml                 (shim)\n            send-to-helix.yml                (shim)\n            source-build.yml                 (shim)\n        variables\\\n            pool-providers.yml               (logic + redirect) # templates/variables/pool-providers.yml will redirect to templates-official/variables/pool-providers.yml if you are running in the internal project\n            sdl-variables.yml                (logic)\n    core-templates\\\n        job\\\n            job.yml                          (logic)\n            onelocbuild.yml                  (logic)\n            publish-build-assets.yml         (logic)\n            source-build.yml                 (logic)\n            source-index-stage1.yml          (logic)\n        jobs\\\n            codeql-build.yml                 (logic)\n            jobs.yml                         (logic)\n            source-build.yml                 (logic)\n        post-build\\\n            common-variabls.yml              (logic)\n            post-build.yml                   (logic)\n            setup-maestro-vars.yml           (logic)\n        steps\\\n            component-governance.yml         (logic)\n            generate-sbom.yml                (logic)\n            publish-build-artifacts.yml      (redirect)\n            publish-logs.yml                 (logic)\n            publish-pipeline-artifacts.yml   (redirect)\n            retain-build.yml                 (logic)\n            send-to-helix.yml                (logic)\n            source-build.yml                 (logic)\n        variables\\\n            pool-providers.yml               (redirect)\n```\n\n----------------------------------------\n\nTITLE: InvalidOperationException in LinuxNetworkUtilizationParser\nDESCRIPTION: Stack trace of an InvalidOperationException that occurred when the LinuxNetworkUtilizationParser failed to split contents of a file. The error indicates that the parser expected each line to have more than 4 elements, but encountered a line with only 2 elements.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxNetworkUtilizationParserTests.1.DotNet8_0.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not split contents. We expected every line to contain more than 4 elements, but it has only 2 elements.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.UpdateTcpStateInfo(ReadOnlySpan`1 buffer, TcpStateInfo tcpStateInfo)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpStateInfo(FileInfo file)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpIPv4StateInfo()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Record Type Support in Legacy .NET Project\nDESCRIPTION: Project configuration XML that enables record type support for older .NET frameworks by setting the InjectIsExternalInitOnLegacy property to true in the project file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/LegacySupport/IsExternalInit/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectIsExternalInitOnLegacy>true</InjectIsExternalInitOnLegacy>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Example of a Metrics Report output\nDESCRIPTION: JSON output example of a metrics report generated for the Metric class with counter metric definition. The report includes information about the metric name, description, instrument type, and dimensions.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Packages/Microsoft.Extensions.AuditReports/README.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n {\n  \"MyAssembly\":\n  [\n    {\n     \"MetricName\": \"FailedRequestCounter\",\n     \"MetricDescription\": \"The counter metric for the number of failed requests.\",\n     \"InstrumentName\": \"Counter\",\n     \"Dimensions\": {\n      \"Target\": \"The target of the metric, e.g. the name of the service or the name of the method.\",\n      \"FailureReason\": \"The reason for the failure, e.g. the exception message or the HTTP status code.\"\n      }\n    }\n  ]\n }\n]\n```\n\n----------------------------------------\n\nTITLE: ArgumentOutOfRangeException Stack Trace for LinuxNetworkUtilizationParser\nDESCRIPTION: This exception occurs when the LinuxNetworkUtilizationParser attempts to parse an invalid TCP state value (12) that doesn't match the defined values in the LinuxTcpState enum. The error propagates through the TCP state information retrieval chain.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxNetworkUtilizationParserTests.4.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{\n  Type: ArgumentOutOfRangeException,\n  Message: 12 is an invalid value for enum type Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxTcpState (Parameter 'state'),\n  ParamName: state,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.ArgumentOutOfRangeException(String paramName, String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.UpdateTcpStateInfo(ReadOnlySpan`1 buffer, TcpStateInfo tcpStateInfo)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpStateInfo(FileInfo file)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpIPv6StateInfo()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Error Stack Trace for Memory Parse Failure\nDESCRIPTION: Stack trace showing an InvalidOperationException thrown when the parser encounters an invalid memory value format ('string@') while attempting to read '/sys/fs/cgroup/memory.max'.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_AvailableMemoryInBytes_Doesnt_Contain_Just_A_Number_content=string@.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/memory.max' content. Expected to find available memory in bytes but got 'string@' instead.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetAvailableMemoryInBytes()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass7_0.<Throws_When_AvailableMemoryInBytes_Doesnt_Contain_Just_A_Number>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.Telemetry Package via Console\nDESCRIPTION: Command line instruction for adding the Microsoft.Extensions.Telemetry package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.Telemetry/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.Telemetry\n```\n\n----------------------------------------\n\nTITLE: Error Stack Trace for Invalid CGroup CPU Weight\nDESCRIPTION: Exception details showing a failure to parse CPU weight from '/sys/fs/cgroup/cpu.weight' file. The parser expected a valid CPU weight value but received '-1' which is invalid.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_Cgroup_Cpu_Weight_Files_Contain_Invalid_Data_content=-1.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpu.weight' content. Expected to find CPU weight but got '-1' instead.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryParseCpuWeightFromFile(IFileSystem fileSystem, FileInfo cpuWeightFile, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryGetCgroupRequestCpu(IFileSystem fileSystem, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetCgroupRequestCpu()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass26_0.<Throws_When_Cgroup_Cpu_Weight_Files_Contain_Invalid_Data>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Directory Extensions for Legacy .NET Systems\nDESCRIPTION: This XML snippet enables directory extensions functionality on legacy .NET systems by adding a PropertyGroup element to the project file. The InjectDirectoryExtensionsOnLegacy property is set to true to ensure compatibility with older systems.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/LegacySupport/DictionaryExtensions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectDirectoryExtensionsOnLegacy>true</InjectDirectoryExtensionsOnLegacy>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Example of a Metadata Report output\nDESCRIPTION: JSON output example of a metadata report which combines both compliance and metrics reports. It includes information about privacy-sensitive data and metrics from the same assembly in a unified format.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Packages/Microsoft.Extensions.AuditReports/README.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{ \"Name\": \"MyAssembly\", \"ComplianceReport\":\n{\n    \"Types\": [\n        {\n            \"Name\": \"ComplianceTesting.User\",\n            \"Members\": [\n                {\n                    \"Name\": \"Name\",\n                    \"Type\": \"string\",\n                    \"File\": \"C:\\\\source\\\\samples\\\\src\\\\MyAssembly\\\\User.cs\",\n                    \"Line\": \"12\",\n                    \"Classifications\": [\n                        {\n                            \"Name\": \"PrivateData\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n} , \"MetricReport\":  [\n    {\n     \"MetricName\": \"FailedRequestCounter\",\n     \"MetricDescription\": \"The counter metric for the number of failed requests.\",\n     \"InstrumentName\": \"Counter\",\n     \"Dimensions\": {\n      \"Target\": \"The target of the metric, e.g. the name of the service or the name of the method.\",\n      \"FailureReason\": \"The reason for the failure, e.g. the exception message or the HTTP status code.\"\n      }\n    }\n  ] }\n```\n\n----------------------------------------\n\nTITLE: Building on Windows Command Line\nDESCRIPTION: Basic command to build the .NET Extensions solution on Windows using the build script.\nSOURCE: https://github.com/dotnet/extensions/blob/main/docs/building.md#2025-04-21_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n> build.cmd\n```\n\n----------------------------------------\n\nTITLE: Network Parser Exception Stack Trace\nDESCRIPTION: Error stack trace showing an InvalidOperationException thrown when the parser encounters an unexpected format in the /proc/net/tcp file. The error occurs because the first line doesn't start with 'sl' as expected.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxNetworkUtilizationParserTests.ipv4_line=DFIJEUWGHFWGBWEFWOMDOWKSLA.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/proc/net/tcp'. We expected first line of the file to start with 'sl' but it was 'DFIJEUWGHFWGBWEFWOMDOWKSLA' instead.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpStateInfo(FileInfo file)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpIPv4StateInfo()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing InvalidOperationException in C#\nDESCRIPTION: This snippet captures an InvalidOperationException that occurs when the memory usage parsing fails due to an unexpected string format. It highlights the error message detailing the failure when attempting to read memory usage data from a specified path, alongside the stack trace for debugging purposes.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_UsageInBytes_Doesnt_Contain_A_Number.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: We tried to read '/sys/fs/cgroup/system.slice/memory.current', and we expected to get a non-negative number but instead it was: 'dasda'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetMemoryUsageInBytesFromSlices(String pattern)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass8_0.<Throws_When_UsageInBytes_Doesnt_Contain_A_Number>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI API Key - JSON\nDESCRIPTION: JSON configuration for setting up the OpenAI API key using .NET User Secrets. This snippet shows how to store the API key securely.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/README.Aspire.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings:openai\": \"Key=YOUR-API-KEY\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SkipLocalsInit Property to .NET Project File\nDESCRIPTION: This XML snippet demonstrates how to add the InjectSkipLocalsInitOnLegacy property to a .csproj file. This property, when set to true, enables skipping locals initialization on legacy runtimes.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/LegacySupport/SkipLocalsInitAttribute/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectSkipLocalsInitOnLegacy>true</InjectSkipLocalsInitOnLegacy>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Parsing Linux CGroup V2 CPU Limits Exception\nDESCRIPTION: Exception details showing a failure to parse integer values from '/sys/fs/cgroup/cpu.max' file, where the parser encountered an invalid value 'd d3' instead of the expected integer format.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_Cgroup_Cpu_Files_Contain_Invalid_Data_quota=3d_period=d3.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpu.max'. Expected to get an integer but got: 'd d3'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryParseCpuQuotaAndPeriodFromFile(IFileSystem fileSystem, FileInfo cpuLimitsFile, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryGetCpuUnitsFromCgroups(IFileSystem fileSystem, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetCgroupLimitedCpus()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass19_0.<Throws_When_Cgroup_Cpu_Files_Contain_Invalid_Data>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Models Access Token\nDESCRIPTION: This snippet demonstrates how to configure a personal access token for accessing AI models hosted on GitHub. The command uses .NET User Secrets for secure storage of API keys. The command sets the connection string with the specified endpoint and API key under the user secrets for the project.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/ProjectTemplates/Microsoft.Extensions.AI.Templates.IntegrationTests/Snapshots/aichatweb.BasicAspire.verified/aichatweb/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd aichatweb.AppHost\n dotnet user-secrets set ConnectionStrings:openai \"Endpoint=https://models.inference.ai.azure.com;Key=YOUR-API-KEY\"\n```\n\n----------------------------------------\n\nTITLE: Invalid CPU Stat Parse Exception Stack Trace\nDESCRIPTION: Stack trace of an InvalidOperationException thrown when attempting to parse malformed CPU statistics from the Linux cgroup v2 filesystem. The error occurs when the expected 'usage_usec' field is not found in the cpu.stat file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_CpuAcctUsage_Has_Invalid_Content_Both_Parts_content=dasd_value=-1.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpu.stat'. We expected first line of the file to start with 'usage_usec' but it was 'dasd -1' instead.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.ParseCpuUsageFromFile(IFileSystem fileSystem, FileInfo cpuUsageFile)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetCgroupCpuUsageInNanoseconds()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass24_0.<Throws_When_CpuAcctUsage_Has_Invalid_Content_Both_Parts>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Error Details with Stack Trace\nDESCRIPTION: Error log showing an InvalidOperationException when attempting to parse memory.max content from Linux cgroup filesystem. The parser expected a numeric value but received an invalid string 'Suspicious12312312'.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_AvailableMemoryInBytes_Doesnt_Contain_Just_A_Number_content=Suspicious12312312.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/memory.max' content. Expected to find available memory in bytes but got 'Suspicious12312312' instead.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetAvailableMemoryInBytes()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass7_0.<Throws_When_AvailableMemoryInBytes_Doesnt_Contain_Just_A_Number>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid CPU Set Parse Error Stack Trace\nDESCRIPTION: Stack trace from an InvalidOperationException thrown when attempting to parse malformed CPU set configuration '/sys/fs/cgroup/cpuset.cpus.effective' containing invalid range format '1-18-22'.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_CpuSet_Has_Invalid_Content_content=1-18-22.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpuset.cpus.effective'. Expected comma-separated list of integers, with dashes (\"-\") based ranges (\"0\", \"2-6,12\") but got '1-18-22'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.<GetHostCpuCount>g__ThrowException|32_0(ReadOnlySpan`1 content)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetHostCpuCount()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass17_0.<Throws_When_CpuSet_Has_Invalid_Content>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI API Key - Shell\nDESCRIPTION: Shell command for setting up the OpenAI API key using .NET User Secrets. This command adds the API key to the project's secret storage.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/README.Aspire.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd ChatWithCustomData-CSharp.AppHost\ndotnet user-secrets set ConnectionStrings:openai \"Key=YOUR-API-KEY\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Diagnostic Attribute Injection in .NET Legacy Projects\nDESCRIPTION: This XML snippet shows how to configure a .csproj file to enable the injection of diagnostic attributes for legacy projects. It sets the 'InjectDiagnosticAttributesOnLegacy' property to true, which allows the .NET Extensions framework to add diagnostic capabilities to older project structures.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/LegacySupport/DiagnosticAttributes/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectDiagnosticAttributesOnLegacy>true</InjectDiagnosticAttributesOnLegacy>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Extracting Analyzer Metadata Command\nDESCRIPTION: Command to extract diagnostic metadata from Roslyn analyzer assemblies and merge it into the configuration directory. This is used to create or update metadata for analyzers.\nSOURCE: https://github.com/dotnet/extensions/blob/main/eng/Tools/DiagConfig/README.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n> DiagConfig <config-directory> analyzer merge <analyzers>...\n```\n\n----------------------------------------\n\nTITLE: Stack Trace of InvalidOperationException in Linux Network Utilization Parser\nDESCRIPTION: An exception thrown when attempting to read TCP6 network statistics from an empty /proc/net/tcp6 file in Linux. The error originates in the LinuxNetworkUtilizationParser's GetTcpStateInfo method and is captured during test execution.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxNetworkUtilizationParserTests.6.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/proc/net/tcp6'. File was empty.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpStateInfo(FileInfo file)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpIPv6StateInfo()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StaticAnalysisCodeType Property\nDESCRIPTION: XML configuration to set the StaticAnalysisCodeType property in a project file, which determines which set of diagnostics to enable.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Packages/Microsoft.Extensions.StaticAnalysis/README.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n  <PropertyGroup>\n    <StaticAnalysisCodeType>General</StaticAnalysisCodeType>\n  </PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Parsing Error Exception Output\nDESCRIPTION: Stack trace and error details from an InvalidOperationException thrown when attempting to parse Linux TCP network data. The error occurred because the first line of /proc/net/tcp did not begin with the expected 'sl' header.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxNetworkUtilizationParserTests.ipv6_line=________________________Asdasdasdas          dd.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/proc/net/tcp'. We expected first line of the file to start with 'sl' but it was '________________________Asdasdasdas          dd' instead.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpStateInfo(FileInfo file)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpIPv4StateInfo()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: InvalidOperationException Stack Trace for TCP File Parsing\nDESCRIPTION: Exception details showing a parsing failure when attempting to read the /proc/net/tcp file on Linux systems. The error occurs when the expected 'sl' header is missing from the first line.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxNetworkUtilizationParserTests.ipv6_line=.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/proc/net/tcp'. We expected first line of the file to start with 'sl' but it was '' instead.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpStateInfo(FileInfo file)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpIPv4StateInfo()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StringSplit Extensions in .NET Project\nDESCRIPTION: XML configuration snippet that enables StringSplit extensions in a .NET project file. This setting must be added to the project's .csproj file to enable allocation-free string splitting functionality.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Shared/StringSplit/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectStringSplitExtensions>true</InjectStringSplitExtensions>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring StringSyntaxAttribute Injection in .NET Project\nDESCRIPTION: This XML snippet shows the PropertyGroup configuration required in a .csproj file to enable StringSyntaxAttribute injection on legacy code. When set to true, this property allows the compiler to apply string syntax attributes to legacy code.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/LegacySupport/StringSyntaxAttribute/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectStringSyntaxAttributeOnLegacy>true</InjectStringSyntaxAttributeOnLegacy>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Error Message for Workload Manifest Installation Issue in .NET\nDESCRIPTION: This error message indicates a failure in resolving the Microsoft.DotNet.Arcade.Sdk due to a missing Aspire SDK workload manifest. It suggests running 'dotnet workload repair' as a potential fix.\nSOURCE: https://github.com/dotnet/extensions/blob/main/docs/building.md#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nerror MSB4242: SDK Resolver Failure: \"The SDK resolver \\\"Microsoft.DotNet.MSBuildWorkloadSdkResolver\\\" failed while attempting to resolve the SDK \\\"Microsoft.DotNet.Arcade.Sdk\\\".\nException: \\\"System.IO.FileNotFoundException: Workload manifest microsoft.net.sdk.aspire: 8.0.1/8.0.100 from workload version <x.y.z> was not installed. Running \\\"dotnet workload repair\\\" may resolve this.\n```\n\n----------------------------------------\n\nTITLE: Exception Data: InvalidOperationException\nDESCRIPTION: This JSON object represents an `InvalidOperationException` that occurred when attempting to read memory usage from `/sys/fs/cgroup/memory.current`. The message indicates that the parser expected a positive number, but instead received a string ('eee 1024 KB'). The stack trace points to the `LinuxUtilizationParserCgroupV2` class, part of the `Microsoft.Extensions.Diagnostics` library.  This suggests that the code responsible for parsing the cgroup v2 memory usage data encountered an unexpected format.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_UsageInBytes_Is_Invalid_content=eee 1024 KB.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"{ \n  Type: InvalidOperationException,\n  Message: We tried to read '/sys/fs/cgroup/memory.current', and we expected to get a positive number but instead it was: 'eee 1024 KB'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetMemoryUsageInBytesPod()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetMemoryUsageInBytes()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass5_0.<Throws_When_UsageInBytes_Is_Invalid>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\"\n```\n\n----------------------------------------\n\nTITLE: Error Stack Trace JSON Structure\nDESCRIPTION: JSON representation of an InvalidOperationException showing the error when parsing Linux network information. The error occurs when attempting to read TCP connection states from an empty /proc/net/tcp file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxNetworkUtilizationParserTests.5.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/proc/net/tcp'. File was empty.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpStateInfo(FileInfo file)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpIPv4StateInfo()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Network Parser Exception Details\nDESCRIPTION: Error message and stack trace showing an InvalidOperationException thrown when attempting to parse /proc/net/tcp file. The error occurs because the file header does not match the expected 'sl' format, instead containing invalid characters.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxNetworkUtilizationParserTests.ipv6_line=!@#!$%!@.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/proc/net/tcp'. We expected first line of the file to start with 'sl' but it was '!@#!$%!@' instead.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpStateInfo(FileInfo file)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpIPv4StateInfo()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Building on Ubuntu Command Line\nDESCRIPTION: Basic command to build the .NET Extensions solution on Ubuntu using the build script.\nSOURCE: https://github.com/dotnet/extensions/blob/main/docs/building.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./build.sh\n```\n\n----------------------------------------\n\nTITLE: Visual Studio Commands\nDESCRIPTION: Basic keyboard shortcuts and commands for running a project in Visual Studio\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/ProjectTemplates/Microsoft.Extensions.AI.Templates/src/ChatWithCustomData/README.Aspire.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nCtrl+F5\n```\n\n----------------------------------------\n\nTITLE: Invalid CPU Set Parse Error Stack Trace\nDESCRIPTION: Error stack trace showing an InvalidOperationException when attempting to parse an invalid cpuset.cpus.effective file content in Linux cgroup v2. The parser expects a comma-separated list of integers with dash-based ranges but received malformed input.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_CpuSet_Has_Invalid_Content_content=    d  182-1923.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpuset.cpus.effective'. Expected comma-separated list of integers, with dashes (\"-\") based ranges (\"0\", \"2-6,12\") but got '    d  182-1923'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.<GetHostCpuCount>g__ThrowException|32_0(ReadOnlySpan`1 content)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetHostCpuCount()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass17_0.<Throws_When_CpuSet_Has_Invalid_Content>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Validation Attributes in .csproj\nDESCRIPTION: Configuration needed in the .csproj file to enable shared data validation attributes. This setting injects the shared data validation functionality into the project.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Shared/Data.Validation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectSharedDataValidation>true</InjectSharedDataValidation>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: CPU Set Parse Error Exception Stack Trace\nDESCRIPTION: Stack trace detailing an InvalidOperationException thrown when attempting to parse an empty or invalid CPU set configuration from '/sys/fs/cgroup/cpuset.cpus.effective'. The parser expects a comma-separated list of integers with optional range syntax using dashes.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_CpuSet_Has_Invalid_Content_content=.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpuset.cpus.effective'. Expected comma-separated list of integers, with dashes (\"-\") based ranges (\"0\", \"2-6,12\") but got ''.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.<GetHostCpuCount>g__ThrowException|32_0(ReadOnlySpan`1 content)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetHostCpuCount()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass17_0.<Throws_When_CpuSet_Has_Invalid_Content>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: InvalidOperationException Stack Trace for Linux Network Parser\nDESCRIPTION: Exception details showing the error path when the Linux network utilization parser encounters an invalid format in the /proc/net/tcp file. The error occurs because the file's first line doesn't start with the expected 'sl' prefix.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxNetworkUtilizationParserTests.Parser_Throws_When_Data_Is_Invalid_line=DFIJEUWGHFWGBWEFWOMDOWKSLA.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/proc/net/tcp'. We expected first line of the file to start with 'sl' but it was 'DFIJEUWGHFWGBWEFWOMDOWKSLA' instead.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpStateInfo(FileInfo file)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpIPv4StateInfo()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Release History Documentation\nDESCRIPTION: Detailed changelog entries documenting version updates from 9.0.0-preview.9.24507.7 through 9.4.0-preview.1.25207.5, including feature additions, bug fixes, and compatibility updates.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Ollama/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Release History\n\n## 9.4.0-preview.1.25207.5\n\n- Updated to accomodate the changes in `Microsoft.Extensions.AI.Abstractions`.\n\n## 9.3.0-preview.1.25161.3\n\n- Updated to accomodate the changes in `Microsoft.Extensions.AI.Abstractions`.\n\n## 9.3.0-preview.1.25114.11\n\n- Ensures that all yielded `ChatResponseUpdates` include a `ResponseId`.\n- Ensures that error HTTP status codes are correctly propagated as exceptions.\n\n## 9.1.0-preview.1.25064.3\n\n- Added support for function calling when doing streaming operations.\n- Added support for native structured output.\n\n## 9.0.1-preview.1.24570.5\n\n- Made the `ToolCallJsonSerializerOptions` property non-nullable.\n\n## 9.0.0-preview.9.24525.1\n\n- Lowered the required version of System.Text.Json to 8.0.5 when targeting net8.0 or older.\n- Added additional constructors to `OllamaChatClient` and `OllamaEmbeddingGenerator` that accept `string` endpoints, in addition to the existing ones accepting `Uri` endpoints.\n\n## 9.0.0-preview.9.24507.7\n\nInitial Preview\n```\n\n----------------------------------------\n\nTITLE: Defining OptionsContext Reference Struct in C#\nDESCRIPTION: Defines a reference struct marked with OptionsContext attribute containing a read-only string property 'Foo'. The struct is partial and uses the ref keyword for improved performance characteristics.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Generators/Microsoft.Gen.ContextualOptions/TestClasses/RefStruct.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\nusing Microsoft.Extensions.Options.Contextual;\n\nnamespace TestClasses\n{\n    [OptionsContext]\n    public ref partial struct RefStruct\n    {\n        public string Foo => \"FooValue\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Operation Exception Stack Trace in .NET Network Parser\nDESCRIPTION: Stack trace showing an error in LinuxNetworkUtilizationParser where line parsing failed due to insufficient elements. The error originates from the UpdateTcpStateInfo method and propagates through multiple layers of the network monitoring system.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxNetworkUtilizationParserTests.1.DotNet6_0.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not split contents. We expected every line to contain more than 3 elements, but it has only 2 elements.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.UpdateTcpStateInfo(ReadOnlySpan`1 buffer, TcpStateInfo tcpStateInfo)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpStateInfo(FileInfo file)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpIPv4StateInfo()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Stack Trace for Invalid CPU Set Parsing\nDESCRIPTION: Stack trace showing the exception path when failing to parse a Linux CPU set configuration. The error occurs when attempting to parse '-11' as a valid CPU range specification, which should be in the format of comma-separated integers with optional ranges (e.g. \"0\", \"2-6,12\").\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_CpuSet_Has_Invalid_Content_content=-11.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpuset.cpus.effective'. Expected comma-separated list of integers, with dashes (\"-\") based ranges (\"0\", \"2-6,12\") but got '-11'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.<GetHostCpuCount>g__ThrowException|32_0(ReadOnlySpan`1 content)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetHostCpuCount()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass17_0.<Throws_When_CpuSet_Has_Invalid_Content>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Static Class with OptionsContext Attribute in C#\nDESCRIPTION: Creates a partial static class decorated with the OptionsContext attribute. The class contains a read-only string property named Foo with a fixed value of \"FooValue\". Being partial, this class can be extended in other files.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Generators/Microsoft.Gen.ContextualOptions/TestClasses/StaticClass.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\n\nusing Microsoft.Extensions.Options.Contextual;\n\nnamespace TestClasses\n{\n    [OptionsContext]\n    public static partial class StaticClass\n    {\n        public static string Foo { get; } = \"FooValue\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Report for Linux Network Utilization Parser Exception in JSON Format\nDESCRIPTION: This error report shows an InvalidOperationException that occurred when the LinuxNetworkUtilizationParser attempted to parse the '/proc/net/tcp' file but couldn't find the expected 'sl' header. The stack trace indicates this happened during a unit test execution.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxNetworkUtilizationParserTests.ipv4_line= .verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/proc/net/tcp'. We expected first line of the file to start with 'sl' but it was '' instead.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpStateInfo(FileInfo file)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpIPv4StateInfo()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Error Stack Trace for Invalid CGroup CPU Weight Parse\nDESCRIPTION: Stack trace of an InvalidOperationException thrown when attempting to parse a non-integer value 'dasrz3424' from the cpu.weight file in the Linux CGroup V2 filesystem. Shows the call chain through the LinuxUtilizationParserCgroupV2 class methods.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_Cgroup_Cpu_Weight_Files_Contain_Invalid_Data_content=dasrz3424.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpu.weight' content. Expected to get an integer but got: 'dasrz3424'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryParseCpuWeightFromFile(IFileSystem fileSystem, FileInfo cpuWeightFile, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryGetCgroupRequestCpu(IFileSystem fileSystem, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetCgroupRequestCpu()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass26_0.<Throws_When_Cgroup_Cpu_Weight_Files_Contain_Invalid_Data>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: InvalidOperationException Stack Trace in C#\nDESCRIPTION: Exception details showing an error in the Linux Network Utilization Parser when attempting to split contents. The error occurs when line elements are fewer than expected (2 vs 4+ required).\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxNetworkUtilizationParserTests.2.DotNet9_0.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not split contents. We expected every line to contain more than 4 elements, but it has only 2 elements.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.UpdateTcpStateInfo(ReadOnlySpan`1 buffer, TcpStateInfo tcpStateInfo)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpStateInfo(FileInfo file)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpIPv4StateInfo()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: InvalidOperationException Stack Trace for CPU Usage Parsing\nDESCRIPTION: Exception details showing the error path when parsing CPU usage statistics from /sys/fs/cgroup/cpu.stat file. The error occurs when the file content doesn't match the expected format starting with 'usage_usec'.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_CpuAcctUsage_Has_Invalid_Content_Both_Parts_content=usage__value=12222.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpu.stat'. We expected first line of the file to start with 'usage_usec' but it was 'usage_ 12222' instead.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.ParseCpuUsageFromFile(IFileSystem fileSystem, FileInfo cpuUsageFile)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetCgroupCpuUsageInNanoseconds()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass24_0.<Throws_When_CpuAcctUsage_Has_Invalid_Content_Both_Parts>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Example Diagnostic Configuration Structure in YAML\nDESCRIPTION: An example YAML structure showing how diagnostic information is organized, including metadata, tier value, and attributes with severity levels.\nSOURCE: https://github.com/dotnet/extensions/blob/main/eng/Tools/DiagConfig/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nDiagnostics:\n  CA1001:\n    Metadata:\n      Category: Design\n      Title: Types that own disposable fields should be disposable\n      Description: A class declares and implements an instance field that is a System.IDisposable type, and the class does not implement IDisposable. A class that declares an IDisposable field indirectly owns an unmanaged resource and should implement the IDisposable interface.\n      HelpLinkUri: https://learn.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1001\n      CustomTags:\n      - PortedFromFxCop\n      - Telemetry\n      - EnabledRuleInAggressiveMode\n      DefaultSeverity: None\n    Tier: 2\n    Attributes:\n      general:\n        Severity: Warning\n```\n\n----------------------------------------\n\nTITLE: Invalid Memory Parse Exception Details\nDESCRIPTION: Error output showing an InvalidOperationException that occurs when the system fails to parse memory.max content from the Linux cgroup filesystem. The error indicates an unexpected string value was found instead of a numeric byte count.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_AvailableMemoryInBytes_Doesnt_Contain_Just_A_Number_content=string12312.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/memory.max' content. Expected to find available memory in bytes but got 'string12312' instead.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetAvailableMemoryInBytes()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass7_0.<Throws_When_AvailableMemoryInBytes_Doesnt_Contain_Just_A_Number>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: InvalidOperationException Stack Trace from Linux Network Utilization Parser\nDESCRIPTION: A stack trace showing an InvalidOperationException that occurred while trying to parse network utilization data on Linux. The error indicates that the parser expected each line to contain more than 4 elements but found a line with only 2 elements.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxNetworkUtilizationParserTests.1.DotNet9_0.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not split contents. We expected every line to contain more than 4 elements, but it has only 2 elements.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.UpdateTcpStateInfo(ReadOnlySpan`1 buffer, TcpStateInfo tcpStateInfo)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpStateInfo(FileInfo file)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpIPv4StateInfo()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Diagnostic IDs for LoggerMessage in Markdown\nDESCRIPTION: A markdown table listing diagnostic IDs and descriptions for LoggerMessage in .NET Extensions.\nSOURCE: https://github.com/dotnet/extensions/blob/main/docs/list-of-diagnostics.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Diagnostic ID     | Description |\n| :---------------- | :---------- |\n| `LOGGEN000` | Don't include log level parameters as templates |\n| `LOGGEN001` | Couldn't find a required type definition |\n| `LOGGEN002` | Each logging method should use a unique event id |\n| `LOGGEN003` | Logging methods must return void |\n| `LOGGEN004` | A static logging method must have a parameter that implements the \"Microsoft.Extensions.Logging.ILogger\" interface |\n| `LOGGEN005` | Logging methods must be static |\n| `LOGGEN006` | Logging methods must be partial |\n| `LOGGEN007` | Logging methods can't be generic |\n| `LOGGEN008` | Redundant qualifier in the logging message |\n| `LOGGEN009` | Don't include exception parameters as templates in the logging message |\n| `LOGGEN010` | The logging template has no corresponding method parameter |\n| `LOGGEN011` | A parameter isn't referenced from the logging message |\n| `LOGGEN012` | Logging methods can't have a body |\n| `LOGGEN013` | A \"LogLevel\" value must be supplied |\n| `LOGGEN014` | Don't include logger parameters as templates |\n| `LOGGEN015` | Couldn't find a field of type \"Microsoft.Extensions.Logging.ILogger\" |\n| `LOGGEN016` | Multiple fields of type \"Microsoft.Extensions.Logging.ILogger\" were found |\n| `LOGGEN017` | Can't combine the [LogProperties] or [TagProvider] attributes with data classification attributes |\n| `LOGGEN018` | Can't log properties of a parameter or property |\n| `LOGGEN019` | Method parameter can't be used to log properties |\n| `LOGGEN020` | Logging method parameter type has no public properties to log |\n| `LOGGEN021` | Logging method parameter type has cycles in its type hierarchy |\n| `LOGGEN022` | Tag provider method not found |\n| `LOGGEN023` | Tag provider method is inaccessible |\n| `LOGGEN024` | Property provider method has an invalid signature |\n| `LOGGEN025` | Logging method parameters can't have \"ref\" or \"out\" modifiers |\n| `LOGGEN026` | Parameters with a custom tag provider are not subject to redaction |\n| `LOGGEN027` | Multiple logging methods shouldn't use the same event name |\n| `LOGGEN028` | Logging method parameter's type has a hidden property |\n| `LOGGEN029` | A logging method parameter causes name conflicts |\n| `LOGGEN030` | Logging method doesn't log anything |\n| `LOGGEN031` | A logging message template starts with \"@\" |\n| `LOGGEN032` | Can only have one of [LogProperties], [TagProvider], and [LogPropertyIgnore] |\n| `LOGGEN033` | Method parameter can't be used with a tag provider |\n| `LOGGEN034` | Attribute can't be used in this context |\n| `LOGGEN035` | The logging method parameter leaks sensitive data |\n| `LOGGEN036` | A value being logged doesn't have an effective way to be converted into a string |\n| `LOGGEN037` | Logging method contains malformed format strings |\n| `LOGGEN038` | Primary constructor parameter of type Microsoft.Extensions.Logging.ILogger is hidden by a field |\n```\n\n----------------------------------------\n\nTITLE: Exception Details JSON for CGroup V2 CPU Parsing Error\nDESCRIPTION: JSON formatted error log showing an InvalidOperationException that occurred when trying to parse CPU quota values from a cgroup v2 configuration file. The error indicates an unexpected format in the cpu.max file where an integer was expected but received '-18 18'.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_Cgroup_Cpu_Files_Contain_Invalid_Data_quota=-18_period=18.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpu.max'. Expected an integer but got: '-18 18'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryParseCpuQuotaAndPeriodFromFile(IFileSystem fileSystem, FileInfo cpuLimitsFile, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryGetCpuUnitsFromCgroups(IFileSystem fileSystem, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetCgroupLimitedCpus()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass19_0.<Throws_When_Cgroup_Cpu_Files_Contain_Invalid_Data>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Class with Special Property Types in C#\nDESCRIPTION: A C# class demonstrating various property implementations including private, static, set-only, ref-only, pointer, and function pointer properties. The class implements IEnumerator interface and is marked with OptionsContext attribute.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Generators/Microsoft.Gen.ContextualOptions/TestClasses/ClassWithUnusableProperties.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.Collections;\nusing Microsoft.Extensions.Options.Contextual;\n\nnamespace TestClasses\n{\n    [OptionsContext]\n    public partial class ClassWithUnusableProperties : IEnumerator\n    {\n        private static string PrivateProperty { get; set; }\n        public static string StaticProperty { get; set; }\n        public string SetOnlyProperty { set => throw new NotImplementedException(); }\n        public ReadOnlySpan<string> RefOnlyProperty => throw new NotImplementedException();\n        public string PrivateGetterProperty { private get; set; }\n        public string this[string x] => throw new NotImplementedException();\n        public unsafe int* PointerProperty { get; set; }\n        public unsafe delegate*<void> FunctionPointerProperty { get; set; }\n        object IEnumerator.Current => throw new NotImplementedException();\n        bool IEnumerator.MoveNext() => throw new NotImplementedException();\n        void IEnumerator.Reset() => throw new NotImplementedException();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: InvalidOperationException Stack Trace in Linux Network Utilization Parser\nDESCRIPTION: A stack trace showing the error path when the LinuxNetworkUtilizationParser fails to split contents due to unexpected line format. The error originates in the UpdateTcpStateInfo method and propagates up through GetTcpStateInfo and GetTcpIPv4StateInfo methods.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxNetworkUtilizationParserTests.2.DotNet6_0.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not split contents. We expected every line to contain more than 3 elements, but it has only 2 elements.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.UpdateTcpStateInfo(ReadOnlySpan`1 buffer, TcpStateInfo tcpStateInfo)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpStateInfo(FileInfo file)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpIPv4StateInfo()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: InvalidOperationException Stack Trace for Linux CGroup CPU Parse Error\nDESCRIPTION: Displays a detailed error trace for failing to parse the cpuset.cpus.effective file in Linux cgroup v2 filesystem. The error occurs when the file content doesn't match the expected format of comma-separated integers with optional range notation.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_CpuSet_Has_Invalid_Content_content=--.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message:\nCould not parse '/sys/fs/cgroup/cpuset.cpus.effective'. Expected comma-separated list of integers, with dashes (\"-\") based ranges (\"0\", \"2-6,12\") but got '\n'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.<GetHostCpuCount>g__ThrowException|32_0(ReadOnlySpan`1 content)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetHostCpuCount()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass17_0.<Throws_When_CpuSet_Has_Invalid_Content>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Diagnostic IDs in .csproj\nDESCRIPTION: This XML snippet shows how to enable shared diagnostic IDs in a project by adding a property to the .csproj file. When the InjectSharedDiagnosticIds property is set to true, the project will use the diagnostic IDs defined in the /dotnet/extensions repository.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Shared/DiagnosticIds/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectSharedDiagnosticIds>true</InjectSharedDiagnosticIds>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Logging System Resources Configuration in .NET\nDESCRIPTION: Structured log entry capturing system resource metrics including memory and CPU allocations for monitoring and diagnostics\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationProviderTests.Provider_EmitsLogRecord.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Level: Debug,\n  Id: {\n    Id: 3,\n    Name: SystemResourcesInfo\n  },\n  State: [\n    {\n      memoryRequest: 1048576\n    },\n    {\n      memoryLimit: 1048576\n    },\n    {\n      cpuRequest: 0.078125\n    },\n    {\n      cpuLimit: 20\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing InvalidOperationException for Invalid CPU Set Parsing in C#\nDESCRIPTION: This snippet details the process of throwing an InvalidOperationException in response to an improperly formatted CPU set string. It primarily focuses on the handling within the LinuxUtilizationParserCgroupV2 class under the Microsoft.Extensions.Diagnostics namespace. The context involves an exception being thrown when the expected format is not met, providing useful diagnostic information on the error.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_CpuSet_Has_Invalid_Content_content=22-d.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpuset.cpus.effective'. Expected comma-separated list of integers, with dashes (\"-\") based ranges (\"0\", \"2-6,12\") but got '22-d'.,\n  StackTrace:\n  at Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\n  at Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.<GetHostCpuCount>g__ThrowException|32_0(ReadOnlySpan`1 content)\n  at Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetHostCpuCount()\n  at Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass17_0.<Throws_When_CpuSet_Has_Invalid_Content>b__0()\n  at Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Memory Information Parsing Exception\nDESCRIPTION: Handles scenario where memory total information lacks expected unit measurement in Linux system memory parsing\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_MemInfo_Does_Not_Contain_TotalMemory_totalMemory=MemTotal- 120.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse \\'/proc/meminfo\\'. We expected to get memory usage followed by the unit (kB, MB, GB) but found no unit: \\'MemTotal: 120\\'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetHostAvailableMemory()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass11_0.<Throws_When_MemInfo_Does_Not_Contain_TotalMemory>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nthrow InvalidOperationException(\"Could not parse '/proc/meminfo'. We expected to get memory usage followed by the unit (kB, MB, GB) but found no unit: 'MemTotal: 120'.\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Diagnostic IDs for Experiments in Markdown\nDESCRIPTION: A markdown table listing diagnostic IDs and descriptions for experimental features in .NET Extensions.\nSOURCE: https://github.com/dotnet/extensions/blob/main/docs/list-of-diagnostics.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Diagnostic ID     | Description |\n| :---------------- | :---------- |\n| `EXTEXP0001` | Resilience experiments |\n| `EXTEXP0002` | Compliance experiments  |\n| `EXTEXP0003` | Telemetry experiments |\n| `EXTEXP0004` | TimeProvider experiments |\n| `EXTEXP0006` | AsyncState experiments |\n| `EXTEXP0007` | Health check experiments |\n| `EXTEXP0008` | Resource monitoring experiments |\n| `EXTEXP0009` | Hosting experiments |\n| `EXTEXP0010` | Object pool experiments |\n| `EXTEXP0011` | Document database experiments |\n| `EXTEXP0012` | Auto-activation experiments |\n| `EXTEXP0013` | HttpLogging middleware experiments |\n| `EXTEXP0014` | ASP.NET Core integration testing experiments |\n| `EXTEXP0015` | Environmental probes experiments |\n| `EXTEXP0016` | Hosting integration testing experiments |\n| `EXTEXP0017` | Contextual options experiments |\n| `EXTEXP0018` | HybridCache experiments |\n```\n\n----------------------------------------\n\nTITLE: Handling InvalidOperationException in .NET\nDESCRIPTION: This code demonstrates how to handle an InvalidOperationException when trying to read memory statistics from the Linux cgroup filesystem. It is part of a test case to verify the behavior of resource monitoring functionalities. The exception is expected when the file '/sys/fs/cgroup/memory.stat' is inaccessible or malformed. The core dependency here is the Microsoft.Extensions.Diagnostics library.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_TotalInactiveFile_Is_Invalid_content=string12312.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetMemoryUsageInBytes()\\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass4_0.<Throws_When_TotalInactiveFile_Is_Invalid>b__0()\\nat Xunit.Record.Exception(Func`1 testCode)\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Empty Collections in .NET Project\nDESCRIPTION: PropertyGroup configuration in .csproj file to enable shared empty collections functionality. Setting InjectSharedEmptyCollections to true allows the project to use efficient read-only empty collections.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Shared/EmptyCollections/README.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <InjectSharedEmptyCollections>true</InjectSharedEmptyCollections>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Linux CPU Weight Validation Error Message\nDESCRIPTION: JSON-formatted error details showing an ArgumentOutOfRangeException thrown when attempting to read a CPU weight value of '0' from /sys/fs/cgroup/cpu.weight, which is outside the valid range of 1-10000.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_Cgroup_Cpu_Weight_Files_Contain_Invalid_Data_content=0.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: ArgumentOutOfRangeException,\n  Message: Expected to find CPU weight in range [1-10000] in '/sys/fs/cgroup/cpu.weight', but got '0' instead. (Parameter 'CPU weight'),\n  ParamName: CPU weight,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.ArgumentOutOfRangeException(String paramName, String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryParseCpuWeightFromFile(IFileSystem fileSystem, FileInfo cpuWeightFile, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryGetCgroupRequestCpu(IFileSystem fileSystem, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetCgroupRequestCpu()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass26_0.<Throws_When_Cgroup_Cpu_Weight_Files_Contain_Invalid_Data>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Error Stack Trace in JSON Format\nDESCRIPTION: JSON formatted error details showing an InvalidOperationException that occurred while attempting to parse CPU limits from a cgroup v2 configuration file. The error occurred because the parser expected an integer value but received 'd2d2d e3' instead.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_Cgroup_Cpu_Files_Contain_Invalid_Data_quota=2d2d2d_period=e3.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpu.max'. Expected to get an integer but got: 'd2d2d e3'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryParseCpuQuotaAndPeriodFromFile(IFileSystem fileSystem, FileInfo cpuLimitsFile, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryGetCpuUnitsFromCgroups(IFileSystem fileSystem, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetCgroupLimitedCpus()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass19_0.<Throws_When_Cgroup_Cpu_Files_Contain_Invalid_Data>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Handling InvalidOperationException for Memory Usage in .NET\nDESCRIPTION: This .NET code snippet is designed to handle an InvalidOperationException when attempting to read memory usage from a system file in a Linux environment. The method attempts to read '/sys/fs/cgroup/memory.current' expecting a positive number and throws an exception if the data is not in the expected format. Dependencies include the Microsoft.Shared.Diagnostics and Xunit for testing. The primary input is the path to the system file, and the output is a thrown exception if the input is invalid.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_UsageInBytes_Is_Invalid_content=@ @#dddada.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetMemoryUsageInBytesPod()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetMemoryUsageInBytes()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass5_0.<Throws_When_UsageInBytes_Is_Invalid>b__0()\nat Xunit.Record.Exception(Func\\u00601 testCode)\n```\n\n----------------------------------------\n\nTITLE: Throwing InvalidOperationException in C#\nDESCRIPTION: This snippet illustrates the throwing of an InvalidOperationException when a required file for memory statistics cannot be located. It involves diagnostic utilities within the Microsoft.Extensions.Diagnostics namespace that are used to assess system resource metrics. The primary parameters include the message detailing the problem, aiding developers in identifying issues during the execution of resource monitoring operations.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_TotalInactiveFile_Is_Invalid_content=----------------------.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Unable to find inactive_file from '/sys/fs/cgroup/memory.stat'.,\n  StackTrace:\n  at Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\n  at Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetMemoryUsageInBytes()\n  at Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass4_0.<Throws_When_TotalInactiveFile_Is_Invalid>b__0()\n  at Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Information\nDESCRIPTION: This JSON snippet describes an `InvalidOperationException` encountered during resource monitoring in a Linux environment.  The exception occurs because the `inactive_file` entry is missing or invalid within the `/sys/fs/cgroup/memory.stat` file. The stack trace indicates that the issue arises during memory usage retrieval by the `LinuxUtilizationParserCgroupV2` class, specifically in the `GetMemoryUsageInBytes()` method.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_TotalInactiveFile_Is_Invalid_content=1024 KB  d -- 1024.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"{  \\n  Type: InvalidOperationException,\\n  Message: Unable to find inactive_file from '/sys/fs/cgroup/memory.stat'.,\\n  StackTrace:\\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetMemoryUsageInBytes()\\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass4_0.<Throws_When_TotalInactiveFile_Is_Invalid>b__0()\\nat Xunit.Record.Exception(Func`1 testCode)\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Throwing InvalidOperationException in .NET\nDESCRIPTION: This code snippet demonstrates the creation of an InvalidOperationException when the system cannot locate the inactive file in the specified path. It illustrates the context in which this exception is thrown during resource monitoring operations in .NET, particularly for Linux environments. The snippet captures the stack trace detailing the sequence of method calls leading to the exception, enabling better troubleshooting.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_TotalInactiveFile_Is_Invalid_content=1231234124124.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Unable to find inactive_file from '/sys/fs/cgroup/memory.stat'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetMemoryUsageInBytes()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass4_0.<Throws_When_TotalInactiveFile_Is_Invalid>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Invalid Operation Exception for Memory Usage\nDESCRIPTION: This code snippet demonstrates the structure of an InvalidOperationException thrown when the system cannot locate 'inactive_file' in the specified memory statistics path. This is part of a resource monitoring diagnostic implementation that helps identify issues in memory usage retrieval.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_TotalInactiveFile_Is_Invalid_content=string@ -1.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Unable to find inactive_file from '/sys/fs/cgroup/memory.stat'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetMemoryUsageInBytes()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass4_0.<Throws_When_TotalInactiveFile_Is_Invalid>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing InvalidOperationException for Memory Parsing Error\nDESCRIPTION: This code snippet captures the InvalidOperationException thrown when the memory information from '/proc/meminfo' cannot be parsed correctly, specifically when the first line does not start with the expected 'MemTotal:' format. The snippet outlines the stack trace for debugging purposes.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_MemInfo_Does_Not_Contain_TotalMemory_totalMemory=MemoryTotal- 1024 MB .verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nType: InvalidOperationException,\n  Message: Could not parse '/proc/meminfo'. We expected first line of the file to start with 'MemTotal:' but it was 'MemoryTotal: 1024 MB ' instead.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetHostAvailableMemory()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass11_0.<Throws_When_MemInfo_Does_Not_Contain_TotalMemory>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n```\n\n----------------------------------------\n\nTITLE: Error Stack Trace for Linux CGroup V2 CPU Quota Parsing\nDESCRIPTION: Detailed error trace showing an InvalidOperationException when attempting to parse empty or invalid data from '/sys/fs/cgroup/cpu.max'. The error occurs in the Linux resource monitoring component when reading CGroup V2 CPU quota values.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_Cgroup_Cpu_Files_Contain_Invalid_Data_quota=12       _period=.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpu.max'. Expected to get an integer but got: '        '.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryParseCpuQuotaAndPeriodFromFile(IFileSystem fileSystem, FileInfo cpuLimitsFile, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryGetCpuUnitsFromCgroups(IFileSystem fileSystem, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetCgroupLimitedCpus()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass19_0.<Throws_When_Cgroup_Cpu_Files_Contain_Invalid_Data>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing InvalidOperationException Log\nDESCRIPTION: This snippet represents an error log indicating an `InvalidOperationException` thrown during memory usage retrieval in a Linux environment. The error occurs when attempting to parse the contents of `/sys/fs/cgroup/memory.current`. The log includes the exception type, message, and stack trace.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_UsageInBytes_Is_Invalid_content=Suspicious12312312.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"{  Type: InvalidOperationException,\\n  Message: We tried to read '/sys/fs/cgroup/memory.current', and we expected to get a positive number but instead it was: 'Suspicious12312312'.,\\n  StackTrace:\\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetMemoryUsageInBytesPod()\\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetMemoryUsageInBytes()\\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass5_0.<Throws_When_UsageInBytes_Is_Invalid>b__0()\\nat Xunit.Record.Exception(Func`1 testCode)\\n}\"\n```\n\n----------------------------------------\n\nTITLE: CGroup V2 CPU Usage Parsing Exception Stack Trace\nDESCRIPTION: Stack trace showing an InvalidOperationException thrown when attempting to parse malformed CPU usage statistics from the Linux CGroup V2 filesystem. The error occurs because the file content doesn't match the expected format starting with 'usage_usec'.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_CpuAcctUsage_Has_Invalid_Content_Both_Parts_content=@#dddada_value=342322.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpu.stat'. We expected first line of the file to start with 'usage_usec' but it was '@#dddada 342322' instead.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.ParseCpuUsageFromFile(IFileSystem fileSystem, FileInfo cpuUsageFile)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetCgroupCpuUsageInNanoseconds()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass24_0.<Throws_When_CpuAcctUsage_Has_Invalid_Content_Both_Parts>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: InvalidOperationException Analysis\nDESCRIPTION: This snippet shows the details of an `InvalidOperationException` that occurred when the application attempted to parse the `/proc/meminfo` file. The message indicates that the expected format of the file was not found, specifically the 'MemTotal:' line. The stack trace provides the exact location in the code where the exception was thrown.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_MemInfo_Does_Not_Contain_TotalMemory_totalMemory=MemoryTotal- 123123123123123123.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"{  Type: InvalidOperationException,\\n  Message: Could not parse '/proc/meminfo'. We expected first line of the file to start with 'MemTotal:' but it was 'MemoryTotal: 123123123123123123' instead.,\\n  StackTrace:\\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetHostAvailableMemory()\\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass11_0.<Throws_When_MemInfo_Does_Not_Contain_TotalMemory>b__0()\\nat Xunit.Record.Exception(Func`1 testCode)\\n}\"\n```\n\n----------------------------------------\n\nTITLE: InvalidOperationException details\nDESCRIPTION: Details of an InvalidOperationException thrown during parsing of '/proc/meminfo'.  The exception message indicates that the expected total memory usage line was not found in the expected format, causing the parsing to fail. The stack trace points to the location of the error within the Microsoft.Extensions.Diagnostics.ResourceMonitoring namespace.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_MemInfo_Does_Not_Contain_TotalMemory_totalMemory=MemTotal- PB.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Type\": \"InvalidOperationException\",\n  \"Message\": \"Could not parse '/proc/meminfo'. We expected to get total memory usage on first line but we've got: 'MemTotal: PB'.,\",\n  \"StackTrace\": \"at Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetHostAvailableMemory()\\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass11_0.<Throws_When_MemInfo_Does_Not_Contain_TotalMemory>b__0()\\nat Xunit.Record.Exception(Func`1 testCode)\"\n}\n```\n\n----------------------------------------\n\nTITLE: InvalidOperationException Stack Trace with CPU Set Parsing Error\nDESCRIPTION: Stack trace of an exception thrown when attempting to parse invalid content from '/sys/fs/cgroup/cpuset.cpus.effective'. The parser expects a comma-separated list of integers with optional dash-based ranges but received malformed input with extra whitespace.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_CpuSet_Has_Invalid_Content_content=1-18                   --.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message:\nCould not parse '/sys/fs/cgroup/cpuset.cpus.effective'. Expected comma-separated list of integers, with dashes (\"-\") based ranges (\"0\", \"2-6,12\") but got '1-18                   \n'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.<GetHostCpuCount>g__ThrowException|32_0(ReadOnlySpan`1 content)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetHostCpuCount()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass17_0.<Throws_When_CpuSet_Has_Invalid_Content>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: InvalidOperationException Stack Trace for CGroup CPU Parsing\nDESCRIPTION: Detailed error trace showing failure to parse CPU quota information from cgroup v2 filesystem due to unexpected empty or invalid content in the cpu.max file. The error originates from the LinuxUtilizationParserCgroupV2 class attempting to read CPU units configuration.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_Cgroup_Cpu_Files_Contain_Invalid_Data_quota=123_period=-----.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Type\": \"InvalidOperationException\",\n  \"Message\": \"Could not parse '/sys/fs/cgroup/cpu.max'. Expected to get an integer but got: ' '\",\n  \"StackTrace\": \"at Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryParseCpuQuotaAndPeriodFromFile(IFileSystem fileSystem, FileInfo cpuLimitsFile, Single& cpuUnits)\\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryGetCpuUnitsFromCgroups(IFileSystem fileSystem, Single& cpuUnits)\\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetCgroupLimitedCpus()\\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass19_0.<Throws_When_Cgroup_Cpu_Files_Contain_Invalid_Data>b__0()\\nat Xunit.Record.Exception(Func`1 testCode)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a class with metrics for metrics reporting\nDESCRIPTION: C# example showing a class with source-generated metric definitions. This class defines a counter metric with tags for tracking failed requests, which will be included in metrics reports.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Packages/Microsoft.Extensions.AuditReports/README.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\ninternal sealed partial class Metric\n{\n    internal static class Tags\n    {\n        /// <summary>\n        /// The target of the metric, e.g. the name of the service or the name of the method.\n        /// </summary>\n        public const string Target = nameof(Target);\n\n        /// <summary>\n        /// The reason for the failure, e.g. the exception message or the HTTP status code.\n        /// </summary>\n        public const string FailureReason = nameof(FailureReason);\n    }\n\n    /// <summary>\n    /// The counter metric for the number of failed requests.\n    /// </summary>\n    [Counter(Tags.Target, Tags.FailureReason)]\n    public static partial FailedRequestCounter CreateFailedRequestCounter(Meter meter);\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Linux CPU Set Configuration Error JSON\nDESCRIPTION: JSON-formatted error output showing stack trace and details when the system encounters an invalid CPU set configuration format in the Linux cgroup filesystem. The error occurs when trying to parse '/sys/fs/cgroup/cpuset.cpus.effective' with an invalid format '0-'.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_CpuSet_Has_Invalid_Content_content=0-.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpuset.cpus.effective'. Expected comma-separated list of integers, with dashes (\"-\") based ranges (\"0\", \"2-6,12\") but got '0-'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.<GetHostCpuCount>g__ThrowException|32_0(ReadOnlySpan`1 content)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetHostCpuCount()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass17_0.<Throws_When_CpuSet_Has_Invalid_Content>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Tests with Azure OpenAI Service\nDESCRIPTION: Commands to set up user secrets for OpenAI integration tests using Azure OpenAI Service. These configurations include the mode, endpoint URL, API key, and optional model specifications.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.AI.Integration.Tests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd test/Libraries/Microsoft.Extensions.AI.Integration.Tests\ndotnet user-secrets set OpenAI:Mode AzureOpenAI\ndotnet user-secrets set OpenAI:Endpoint https://YOUR_DEPLOYMENT.openai.azure.com/\ndotnet user-secrets set OpenAI:Key abcdefghijkl\n```\n\nLANGUAGE: bash\nCODE:\n```\ndotnet user-secrets set OpenAI:ChatModel gpt-4o-mini\ndotnet user-secrets set OpenAI:EmbeddingModel text-embedding-3-small\n```\n\n----------------------------------------\n\nTITLE: Analyzing InvalidOperationException\nDESCRIPTION: This snippet represents an InvalidOperationException that occurred while parsing the 'cpuset.cpus.effective' file in a Linux cgroup v2 environment. The error message indicates that the parser expected a comma-separated list of integers with optional dash-separated ranges, but encountered an invalid range format ('22-18'). This can be used for debugging resource monitoring issues and identifying the root cause of parsing failures.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_CpuSet_Has_Invalid_Content_content=22-18.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"{ Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpuset.cpus.effective'. Expected comma-separated list of integers, with dashes (\\\"-\\\") based ranges (\\\"0\\\", \\\"2-6,12\\\") but got '22-18'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.<GetHostCpuCount>g__ThrowException|32_0(ReadOnlySpan`1 content)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetHostCpuCount()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass17_0.<Throws_When_CpuSet_Has_Invalid_Content>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\"\n```\n\n----------------------------------------\n\nTITLE: Describing Exception in .NET Resource Monitoring\nDESCRIPTION: This JSON snippet represents an InvalidOperationException thrown by the .NET Extensions resource monitoring library when parsing CPU usage data on a Linux system.  The message indicates that the format of `/proc/stat` file, specifically the line starting with `cpu `, did not match the expected format.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_CpuUsage_Invalid_content=2569530367000.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"{ Type: InvalidOperationException,\n  Message: Expected proc/stat to start with 'cpu ' but it was '2569530367000'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetHostCpuUsageInNanoseconds()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass23_0.<Throws_When_CpuUsage_Invalid>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\"\n```\n\n----------------------------------------\n\nTITLE: Exception Record\nDESCRIPTION: This snippet shows an InvalidOperationException that occurred while trying to parse CPU usage information from /proc/stat on a Linux system using cgroup v2. The LinuxUtilizationParserCgroupV2 class expected the /proc/stat file to start with 'cpu ', but it received a different format. This could indicate a problem with the system's /proc/stat file format or an incompatibility with the parser.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_CpuUsage_Invalid_content=  2569530 36700 245693.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"{  Type: InvalidOperationException,\n  Message: Expected proc/stat to start with 'cpu ' but it was '  2569530 36700 245693'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetHostCpuUsageInNanoseconds()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass23_0.<Throws_When_CpuUsage_Invalid>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\"\n```\n\n----------------------------------------\n\nTITLE: Installing AI Evaluation Packages via Project File\nDESCRIPTION: XML snippet showing how to add references to Microsoft.Extensions.AI.Evaluation packages directly in a C# project file. This approach can be used as an alternative to command-line installation.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.AI.Evaluation.Reporting/TypeScript/azure-devops-report/overview.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.AI.Evaluation\" Version=\"[CURRENTVERSION]\" />\n  <PackageReference Include=\"Microsoft.Extensions.AI.Evaluation.Quality\" Version=\"[CURRENTVERSION]\" />\n  <PackageReference Include=\"Microsoft.Extensions.AI.Evaluation.Reporting\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Defining a class with privacy-sensitive data for compliance reporting\nDESCRIPTION: C# example showing a class with privacy-sensitive data marked with the [PrivateData] attribute. This class demonstrates how to identify data that should be included in compliance reports.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Packages/Microsoft.Extensions.AuditReports/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace ComplianceTesting\n{\n    internal sealed class User\n    {\n        internal User(string name, DateTimeOffset registeredAt)\n        {\n            Name = name;\n            RegisteredAt = registeredAt;\n        }\n\n        [PrivateData]\n        public string Name { get; }\n\n        public DateTimeOffset RegisteredAt { get; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Request Latency Services in ASP.NET Core\nDESCRIPTION: Service registration methods for HTTP request latency tracking and reporting. These extension methods register the necessary services in the dependency injection container.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.AspNetCore.Diagnostics.Middleware/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IServiceCollection AddRequestCheckpoint(this IServiceCollection services)\npublic static IServiceCollection AddRequestLatencyTelemetry(this IServiceCollection services)\npublic static IServiceCollection AddRequestLatencyTelemetry(this IServiceCollection services, Action<RequestLatencyTelemetryOptions> configure)\npublic static IServiceCollection AddRequestLatencyTelemetry(this IServiceCollection services, IConfigurationSection section)\n```\n\n----------------------------------------\n\nTITLE: Invalid CPU Quota Parsing Exception Stack Trace\nDESCRIPTION: Stack trace showing the exception chain when attempting to parse CPU quota values from CGroup V2 files. The error occurs when trying to parse an expected integer value but receiving invalid input '- d'.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_Cgroup_Cpu_Files_Contain_Invalid_Data_quota=-_period=d'.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpu.max'. Expected an integer but got: '- d'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryParseCpuQuotaAndPeriodFromFile(IFileSystem fileSystem, FileInfo cpuLimitsFile, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryGetCpuUnitsFromCgroups(IFileSystem fileSystem, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetCgroupLimitedCpus()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass19_0.<Throws_When_Cgroup_Cpu_Files_Contain_Invalid_Data>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: InvalidOperationException Stack Trace for Linux CPU Quota Parsing\nDESCRIPTION: Exception details showing a parsing error in the Linux utilization parser for cgroup v2. The error occurs when attempting to parse CPU quota data from '/sys/fs/cgroup/cpu.max' file, where the expected integer value was instead ' eeeee 12'.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_Cgroup_Cpu_Files_Contain_Invalid_Data_quota=           12_period=eeeee 12.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpu.max'. Expected to get an integer but got: ' eeeee 12'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryParseCpuQuotaAndPeriodFromFile(IFileSystem fileSystem, FileInfo cpuLimitsFile, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryGetCpuUnitsFromCgroups(IFileSystem fileSystem, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetCgroupLimitedCpus()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass19_0.<Throws_When_Cgroup_Cpu_Files_Contain_Invalid_Data>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: CPU Weight Validation Exception Details\nDESCRIPTION: JSON-formatted exception details showing an ArgumentOutOfRangeException when validating CPU weight from /sys/fs/cgroup/cpu.weight. The error indicates that the value 10001 is outside the acceptable range of 1-10000.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_Cgroup_Cpu_Weight_Files_Contain_Invalid_Data_content=10001.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: ArgumentOutOfRangeException,\n  Message: Expected to find CPU weight in range [1-10000] in '/sys/fs/cgroup/cpu.weight', but got '10001' instead. (Parameter 'CPU weight'),\n  ParamName: CPU weight,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.ArgumentOutOfRangeException(String paramName, String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryParseCpuWeightFromFile(IFileSystem fileSystem, FileInfo cpuWeightFile, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryGetCgroupRequestCpu(IFileSystem fileSystem, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetCgroupRequestCpu()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass26_0.<Throws_When_Cgroup_Cpu_Weight_Files_Contain_Invalid_Data>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Linux Memory Usage with Cgroup V2\nDESCRIPTION: Handles invalid memory usage reading from Linux cgroup filesystem, throwing an InvalidOperationException when expected numeric value is not found\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_UsageInBytes_Is_Invalid_content=.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetMemoryUsageInBytesPod()\n```\n\n----------------------------------------\n\nTITLE: Configuring Compliance Report in project file\nDESCRIPTION: XML configuration for enabling compliance report generation in the project file. Sets the generation flag to true and specifies a custom output directory for the report.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Packages/Microsoft.Extensions.AuditReports/README.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n  <GenerateComplianceReport>true</GenerateComplianceReport>\n  <ComplianceReportOutputPath>C:\\AuditReports</ComplianceReportOutputPath>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Exception Details: Linux Memory Parsing\nDESCRIPTION: This code snippet provides details about an `InvalidOperationException` that occurred during the parsing of memory information on a Linux system. The error message indicates that the unit found in `/proc/meminfo` for total memory usage was not recognized, leading to a failure in the conversion to bytes. The stack trace points to the specific method `GetHostAvailableMemory()` in the `LinuxUtilizationParserCgroupV2` class within the Microsoft.Extensions.Diagnostics.ResourceMonitoring namespace as the source of the error.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_MemInfo_Does_Not_Contain_TotalMemory_totalMemory=MemTotal- 1024 @@  .verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"{ \n  Type: InvalidOperationException,\n  Message: We tried to convert total memory usage value from '/proc/meminfo' to bytes, but we've got a unit that we don't recognize: '  '.,\n  StackTrace:\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetHostAvailableMemory()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass11_0.<Throws_When_MemInfo_Does_Not_Contain_TotalMemory>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\"\n```\n\n----------------------------------------\n\nTITLE: InvalidOperationException Stack Trace for TCP File Parsing\nDESCRIPTION: Error message and stack trace indicating failure to parse /proc/net/tcp file due to unexpected format in the first line. The parser expected the line to start with 'sl' but received unexpected content.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxNetworkUtilizationParserTests.ipv4_line=________________________Asdasdasdas          dd.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/proc/net/tcp'. We expected first line of the file to start with 'sl' but it was '________________________Asdasdasdas          dd' instead.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpStateInfo(FileInfo file)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpIPv4StateInfo()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.AspNetCore.Testing Package Reference in Project File\nDESCRIPTION: XML snippet showing how to directly reference the Microsoft.AspNetCore.Testing package in a C# project file. The placeholder [CURRENTVERSION] should be replaced with the actual version number.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.AspNetCore.Testing/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.AspNetCore.Testing\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Handling Memory Current Reading Exception in Linux Cgroup V2\nDESCRIPTION: Captures an exception when attempting to read memory usage from Linux cgroup v2 filesystem, with an invalid numeric value encountered during parsing.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_UsageInBytes_Is_Invalid_content=_1231234124124.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetMemoryUsageInBytesPod()\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.AspNetCore.Testing Package via Console\nDESCRIPTION: Command to install the Microsoft.AspNetCore.Testing package using the dotnet CLI. This adds the test fakes package to your project for ASP.NET Core integration testing.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.AspNetCore.Testing/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.AspNetCore.Testing\n```\n\n----------------------------------------\n\nTITLE: Stack Trace of CPU Set Parsing Error\nDESCRIPTION: Details of an InvalidOperationException thrown when attempting to parse Linux cgroup CPU set information. The error indicates an invalid format in the cpuset.cpus.effective file where an '@' character was encountered instead of the expected comma-separated list of integers with dash-based ranges.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Fallsback_To_Cpuset_When_Quota_And_Period_Are_Minus_One_.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpuset.cpus.effective'. Expected comma-separated list of integers, with dashes (\"-\") based ranges (\"0\", \"2-6,12\") but got '@'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.<GetHostCpuCount>g__ThrowException|32_0(ReadOnlySpan`1 content)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetHostCpuCount()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetCgroupLimitedCpus()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass18_0.<Fallsback_To_Cpuset_When_Quota_And_Period_Are_Minus_One_>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: InvalidOperationException Stack Trace in JSON Format\nDESCRIPTION: Error details showing an InvalidOperationException thrown while attempting to parse CPU limits from '/sys/fs/cgroup/cpu.max' file in Linux cgroup v2 filesystem. The parser expected an integer value but received invalid data.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_Cgroup_Cpu_Files_Contain_Invalid_Data_quota=2_period=d--.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpu.max'. Expected to get an integer but got: ' d/:'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryParseCpuQuotaAndPeriodFromFile(IFileSystem fileSystem, FileInfo cpuLimitsFile, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryGetCpuUnitsFromCgroups(IFileSystem fileSystem, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetCgroupLimitedCpus()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass19_0.<Throws_When_Cgroup_Cpu_Files_Contain_Invalid_Data>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Header Parser in C#\nDESCRIPTION: C# code snippet showing how to register a header parser for the Accept-Encoding header using the IHeaderRegistry interface.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.AspNetCore.HeaderParsing/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar headerRegistry = app.Services.GetRequiredService<IHeaderRegistry>();\n\nvar encodingKey = headerRegistry.Register(CommonHeaders.AcceptEncoding);\n```\n\n----------------------------------------\n\nTITLE: Handling InvalidOperationException for CPU Set Parsing in C#\nDESCRIPTION: This snippet handles an InvalidOperationException which is thrown when the CPU set configuration parsing fails due to unexpected format. It requires the Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux library and expects the input as a string representing CPU sets. The input should be a comma-separated list of integers with optional range dashes. The expected output is to throw a properly formatted exception.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_CpuSet_Has_Invalid_Content_content=d-22.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpuset.cpus.effective'. Expected comma-separated list of integers, with dashes (\"-\") based ranges (\"0\", \"2-6,12\") but got 'd-22'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.<GetHostCpuCount>g__ThrowException|32_0(ReadOnlySpan`1 content)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetHostCpuCount()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass17_0.<Throws_When_CpuSet_Has_Invalid_Content>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Error Stack Trace in JSON Format\nDESCRIPTION: JSON-formatted error log showing an InvalidOperationException that occurred while attempting to parse CPU quota values from the Linux CGroup V2 filesystem. The error indicates an empty string was encountered when an integer value was expected.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_Cgroup_Cpu_Files_Contain_Invalid_Data_quota=-----_period=18.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpu.max'. Expected to get an integer but got: ''.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryParseCpuQuotaAndPeriodFromFile(IFileSystem fileSystem, FileInfo cpuLimitsFile, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryGetCpuUnitsFromCgroups(IFileSystem fileSystem, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetCgroupLimitedCpus()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass19_0.<Throws_When_Cgroup_Cpu_Files_Contain_Invalid_Data>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Extensions.DependencyInjection.AutoActivation Package Reference in C# Project File\nDESCRIPTION: This XML snippet demonstrates how to add a reference to the Microsoft.Extensions.DependencyInjection.AutoActivation package directly in a C# project file.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.Extensions.DependencyInjection.AutoActivation/README.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.Extensions.DependencyInjection.AutoActivation\" Version=\"[CURRENTVERSION]\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Registering Request Latency Middleware in ASP.NET Core\nDESCRIPTION: Extension methods for adding request latency tracking middleware to the ASP.NET Core request pipeline.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.AspNetCore.Diagnostics.Middleware/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IApplicationBuilder UseRequestCheckpoint(this IApplicationBuilder builder)\npublic static IApplicationBuilder UseRequestLatencyTelemetry(this IApplicationBuilder builder)\n```\n\n----------------------------------------\n\nTITLE: Parsing Linux Network TCP State Error\nDESCRIPTION: Error details showing an InvalidOperationException thrown when attempting to parse /proc/net/tcp file where the expected 'sl' header line was missing or empty.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxNetworkUtilizationParserTests.ipv6_line= .verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/proc/net/tcp'. We expected first line of the file to start with 'sl' but it was '' instead.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpStateInfo(FileInfo file)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpIPv4StateInfo()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Linux CGroup CPU Parser Error JSON\nDESCRIPTION: JSON representation of an InvalidOperationException thrown when attempting to parse invalid CPU limit data from /sys/fs/cgroup/cpu.max. The error occurs when expecting an integer value but receiving an invalid format.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxUtilizationParserCgroupV2Tests.Throws_When_Cgroup_Cpu_Files_Contain_Invalid_Data_quota=-_period=d--.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not parse '/sys/fs/cgroup/cpu.max'. Expected an integer but got: '- d/:'.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryParseCpuQuotaAndPeriodFromFile(IFileSystem fileSystem, FileInfo cpuLimitsFile, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.TryGetCpuUnitsFromCgroups(IFileSystem fileSystem, Single& cpuUnits)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.LinuxUtilizationParserCgroupV2.GetCgroupLimitedCpus()\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Test.LinuxUtilizationParserCgroupV2Tests.<>c__DisplayClass19_0.<Throws_When_Cgroup_Cpu_Files_Contain_Invalid_Data>b__0()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Registering HTTP Logging Middleware in ASP.NET Core\nDESCRIPTION: Extension method for adding HTTP logging middleware to the ASP.NET Core request pipeline.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.AspNetCore.Diagnostics.Middleware/README.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IApplicationBuilder UseHttpLogging(this IApplicationBuilder builder)\n```\n\n----------------------------------------\n\nTITLE: Registering AsyncState Services Extension Method\nDESCRIPTION: C# extension method signature for registering AsyncState services in the dependency injection container\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.AspNetCore.AsyncState/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IServiceCollection AddAsyncStateHttpContext(this IServiceCollection services)\n```\n\n----------------------------------------\n\nTITLE: InvalidOperationException Stack Trace in JSON Format from .NET Extensions\nDESCRIPTION: A JSON representation of an InvalidOperationException thrown when parsing network utilization data on Linux. The error occurs because the parser expected each line to have more than 4 elements, but found a line with only 2 elements.\nSOURCE: https://github.com/dotnet/extensions/blob/main/test/Libraries/Microsoft.Extensions.Diagnostics.ResourceMonitoring.Tests/Linux/Verified/LinuxNetworkUtilizationParserTests.2.DotNet8_0.verified.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  Type: InvalidOperationException,\n  Message: Could not split contents. We expected every line to contain more than 4 elements, but it has only 2 elements.,\n  StackTrace:\nat Microsoft.Shared.Diagnostics.Throw.InvalidOperationException(String message)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.UpdateTcpStateInfo(ReadOnlySpan`1 buffer, TcpStateInfo tcpStateInfo)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpStateInfo(FileInfo file)\nat Microsoft.Extensions.Diagnostics.ResourceMonitoring.Linux.Network.LinuxNetworkUtilizationParser.GetTcpIPv4StateInfo()\nat Xunit.Record.Exception(Func`1 testCode)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Extensions.StaticAnalysis via .NET CLI\nDESCRIPTION: Command to install the Microsoft.Extensions.StaticAnalysis package using the dotnet CLI.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Packages/Microsoft.Extensions.StaticAnalysis/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.Extensions.StaticAnalysis\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.AspNetCore.HeaderParsing via Console\nDESCRIPTION: Command to install the Microsoft.AspNetCore.HeaderParsing package using the dotnet CLI.\nSOURCE: https://github.com/dotnet/extensions/blob/main/src/Libraries/Microsoft.AspNetCore.HeaderParsing/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package Microsoft.AspNetCore.HeaderParsing\n```"
  }
]