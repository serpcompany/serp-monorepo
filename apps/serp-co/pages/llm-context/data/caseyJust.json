[
  {
    "owner": "casey",
    "repo": "just",
    "content": "TITLE: Creating Basic Commands in a Justfile\nDESCRIPTION: This example shows how to define build and test commands in a justfile. It demonstrates simple commands, commands with dependencies, and commands with parameters.\nSOURCE: https://github.com/casey/just/blob/master/crates-io-readme.md#2025-04-18_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nbuild:\n    cc *.c -o main\n\n# test everything\ntest-all: build\n    ./test --all\n\n# run a specific test\ntest TEST: build\n    ./test --test {{TEST}}\n```\n\n----------------------------------------\n\nTITLE: Basic Just recipe example\nDESCRIPTION: A simple justfile example showing how to define recipes that can be executed by the just command.\nSOURCE: https://github.com/casey/just/blob/master/README.中文.md#2025-04-18_snippet_7\n\nLANGUAGE: just\nCODE:\n```\nrecipe-name:\n  echo 'This is a recipe!'\n\n# 这是一行注释\nanother-recipe:\n  @echo 'This is another recipe.'\n```\n\n----------------------------------------\n\nTITLE: Just recipe with dependencies\nDESCRIPTION: A justfile example showing how to define recipes with dependencies on other recipes, which will be executed before the main recipe.\nSOURCE: https://github.com/casey/just/blob/master/README.中文.md#2025-04-18_snippet_8\n\nLANGUAGE: just\nCODE:\n```\nbuild:\n  cc main.c foo.c bar.c -o main\n\ntest: build\n  ./test\n\nsloc:\n  @echo \"`wc -l *.c` lines of code\"\n```\n\n----------------------------------------\n\nTITLE: Complete Justfile Grammar Rules Definition\nDESCRIPTION: The full grammar specification for justfiles in BNF-style notation. It defines the syntax for all justfile elements including recipes, assignments, dependencies, interpolation, and control structures like conditionals.\nSOURCE: https://github.com/casey/just/blob/master/GRAMMAR.md#2025-04-18_snippet_2\n\nLANGUAGE: bnf\nCODE:\n```\njustfile      : item* EOF\n\nitem          : alias\n              | assignment\n              | eol\n              | export\n              | import\n              | module\n              | recipe\n              | set\n\neol           : NEWLINE\n              | COMMENT NEWLINE\n\nalias         : 'alias' NAME ':=' NAME eol\n\nassignment    : NAME ':=' expression eol\n\nexport        : 'export' assignment\n\nset           : 'set' setting eol\n\nsetting       : 'allow-duplicate-recipes' boolean?\n              | 'allow-duplicate-variables' boolean?\n              | 'dotenv-filename' ':=' string\n              | 'dotenv-load' boolean?\n              | 'dotenv-path' ':=' string\n              | 'dotenv-required' boolean?\n              | 'export' boolean?\n              | 'fallback' boolean?\n              | 'ignore-comments' boolean?\n              | 'positional-arguments' boolean?\n              | 'script-interpreter' ':=' string_list\n              | 'quiet' boolean?\n              | 'shell' ':=' string_list\n              | 'tempdir' ':=' string\n              | 'unstable' boolean?\n              | 'windows-powershell' boolean?\n              | 'windows-shell' ':=' string_list\n              | 'working-directory' ':=' string\n\nboolean       : ':=' ('true' | 'false')\n\nstring_list   : '[' string (',' string)* ','? ']'\n\nimport        : 'import' '?'? string? eol\n\nmodule        : 'mod' '?'? NAME string? eol\n\nexpression    : disjunct || expression\n              | disjunct\n\ndisjunct      : conjunct && disjunct\n              | conjunct\n\nconjunct      : 'if' condition '{' expression '}' 'else' '{' expression '}'\n              | 'assert' '(' condition ',' expression ')'\n              | '/' expression\n              | value '/' expression\n              | value '+' expression\n              | value\n\ncondition     : expression '==' expression\n              | expression '!=' expression\n              | expression '=~' expression\n\nvalue         : NAME '(' sequence? ')'\n              | BACKTICK\n              | INDENTED_BACKTICK\n              | NAME\n              | string\n              | '(' expression ')'\n\nstring        : 'x'? STRING\n              | 'x'? INDENTED_STRING\n              | 'x'? RAW_STRING\n              | 'x'? INDENTED_RAW_STRING\n\nsequence      : expression ',' sequence\n              | expression ','?\n\nrecipe        : attributes* '@'? NAME parameter* variadic? ':' dependencies eol body?\n\nattributes    : '[' attribute* ']' eol\n\nattribute     : NAME ( '(' string ')' )?\n\nparameter     : '$'? NAME\n              | '$'? NAME '=' value\n\nvariadic      : '*' parameter\n              | '+' parameter\n\ndependencies  : dependency* ('&&' dependency+)?\n\ndependency    : NAME\n              | '(' NAME expression* ')'\n\nbody          : INDENT line+ DEDENT\n\nline          : LINE LINE_PREFIX? (TEXT | interpolation)+ NEWLINE\n              | NEWLINE\n\ninterpolation : '{{' expression '}}'\n```\n\n----------------------------------------\n\nTITLE: Just default recipe to list available recipes\nDESCRIPTION: Example showing how to create a default recipe that lists all available recipes when just is called without arguments.\nSOURCE: https://github.com/casey/just/blob/master/README.中文.md#2025-04-18_snippet_11\n\nLANGUAGE: just\nCODE:\n```\ndefault:\n  just --list\n```\n\n----------------------------------------\n\nTITLE: Just default recipe example\nDESCRIPTION: Example showing how to set up a default recipe that runs when just is called without arguments, and how to create a default that depends on multiple recipes.\nSOURCE: https://github.com/casey/just/blob/master/README.中文.md#2025-04-18_snippet_9\n\nLANGUAGE: just\nCODE:\n```\ntest:\n  cargo test\n```\n\n----------------------------------------\n\nTITLE: Just default recipe with multiple dependencies\nDESCRIPTION: Example showing how to create a default recipe that runs multiple other recipes when just is called without arguments.\nSOURCE: https://github.com/casey/just/blob/master/README.中文.md#2025-04-18_snippet_10\n\nLANGUAGE: just\nCODE:\n```\ndefault: lint build test\n\nbuild:\n  echo Building…\n\ntest:\n  echo Testing…\n\nlint:\n  echo Linting…\n```\n\n----------------------------------------\n\nTITLE: Just shell setting example\nDESCRIPTION: Example showing how to set a custom shell for executing recipes and backticks in a justfile.\nSOURCE: https://github.com/casey/just/blob/master/README.中文.md#2025-04-18_snippet_13\n\nLANGUAGE: just\nCODE:\n```\nset shell := [\"zsh\", \"-cu\"]\n\nfoo:\n  # this line will be run as `zsh -cu 'ls **/*.txt'`\n  ls **/*.txt\n```\n\n----------------------------------------\n\nTITLE: Recipe Groups Implementation\nDESCRIPTION: Added support for grouping related recipes together for better organization\nSOURCE: https://github.com/casey/just/blob/master/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n#1842 - Add recipe groups\n- Enables logical grouping of related recipes\n- Improves organization and discoverability of recipes\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: Feature allowing command-line options to be set via environment variables\nSOURCE: https://github.com/casey/just/blob/master/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#2044 - Allow setting some command-line options with environment variables\n- Provides ability to configure Just behavior through environment variables\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Shell in Just Files\nDESCRIPTION: The 'set shell' syntax allows specifying which shell to use for executing commands in a justfile. This feature was added in version 0.5.0.\nSOURCE: https://github.com/casey/just/blob/master/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nset shell := [...]\n```\n\n----------------------------------------\n\nTITLE: Just recipe aliases example\nDESCRIPTION: Example showing how to create aliases for recipes to allow calling them with shorter or alternative names.\nSOURCE: https://github.com/casey/just/blob/master/README.中文.md#2025-04-18_snippet_12\n\nLANGUAGE: just\nCODE:\n```\nalias b := build\n\nbuild:\n  echo 'Building!'\n```\n\n----------------------------------------\n\nTITLE: Just allow-duplicate-recipes setting example\nDESCRIPTION: Example showing how to enable the allow-duplicate-recipes setting to allow later recipes to override earlier ones with the same name.\nSOURCE: https://github.com/casey/just/blob/master/README.中文.md#2025-04-18_snippet_14\n\nLANGUAGE: just\nCODE:\n```\nset allow-duplicate-recipes\n\n@foo:\n  echo foo\n\n@foo:\n  echo bar\n```\n\n----------------------------------------\n\nTITLE: Just allow-duplicate-variables setting example\nDESCRIPTION: Example showing how to enable the allow-duplicate-variables setting to allow later variables to override earlier ones with the same name.\nSOURCE: https://github.com/casey/just/blob/master/README.中文.md#2025-04-18_snippet_15\n\nLANGUAGE: just\nCODE:\n```\nset allow-duplicate-variables\n\na := \"foo\"\na := \"bar\"\n\n@foo:\n  echo $a\n```\n\n----------------------------------------\n\nTITLE: Shell-Expanded String Example\nDESCRIPTION: Example showing shell expanded string feature added in 1.27.0\nSOURCE: https://github.com/casey/just/blob/master/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#2055 - Add shell-expanded strings\n- Allows executing shell commands and using their output within strings\n```\n\n----------------------------------------\n\nTITLE: Defining Tokens for Justfile Grammar\nDESCRIPTION: Specifies the token types recognized by the justfile tokenizer, including literals, comments, indentation markers, and various string formats. These tokens form the basic building blocks that the parser will assemble according to the grammar rules.\nSOURCE: https://github.com/casey/just/blob/master/GRAMMAR.md#2025-04-18_snippet_0\n\nLANGUAGE: bnf\nCODE:\n```\nBACKTICK            = `[^`]*`\nINDENTED_BACKTICK   = ```[^(```)]*```\nCOMMENT             = #([^!].*)?$\nDEDENT              = emitted when indentation decreases\nEOF                 = emitted at the end of the file\nINDENT              = emitted when indentation increases\nLINE                = emitted before a recipe line\nNAME                = [a-zA-Z_][a-zA-Z0-9_-]*\nNEWLINE             = \\n|\\r\\n\nRAW_STRING          = '[^']*'\nINDENTED_RAW_STRING = '''[^(''')]*'''\nSTRING              = \"[^\"]*\" # also processes \\n \\r \\t \\\" \\\\ escapes\nINDENTED_STRING     = \"\"\"[^(\"\"\"*)]*\"\"\" # also processes \\n \\r \\t \\\" \\\\ escapes\nLINE_PREFIX         = @-|-@|@|-\nTEXT                = recipe text, only matches in a recipe body\n```\n\n----------------------------------------\n\nTITLE: Grammar Notation Explanation for Justfile Syntax\nDESCRIPTION: Defines the notation used in the grammar specification, including alternation, grouping, and repetition operators. This provides the key for interpreting the formal grammar rules that follow.\nSOURCE: https://github.com/casey/just/blob/master/GRAMMAR.md#2025-04-18_snippet_1\n\nLANGUAGE: bnf\nCODE:\n```\n|   alternation\n()  grouping\n_?  option (0 or 1 times)\n_*  repetition (0 or more times)\n_+  repetition (1 or more times)\n```\n\n----------------------------------------\n\nTITLE: Installing Just with GitHub Actions using extractions/setup-just\nDESCRIPTION: GitHub Actions workflow snippet showing how to install the 'just' command runner using the extractions/setup-just action with optional version specification.\nSOURCE: https://github.com/casey/just/blob/master/README.中文.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: extractions/setup-just@v1\n  with:\n    just-version: 0.8 # optional semver specification, otherwise latest\n```\n\n----------------------------------------\n\nTITLE: Installing Just with GitHub Actions using taiki-e/install-action\nDESCRIPTION: GitHub Actions workflow snippet showing how to install the 'just' command runner using the taiki-e/install-action.\nSOURCE: https://github.com/casey/just/blob/master/README.中文.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- uses: taiki-e/install-action@just\n```\n\n----------------------------------------\n\nTITLE: Checking if Just is installed correctly\nDESCRIPTION: Command to verify that just has been installed correctly by displaying the help information.\nSOURCE: https://github.com/casey/just/blob/master/README.中文.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\njust --help\n```\n\n----------------------------------------\n\nTITLE: Release Changelog for Just Command Runner\nDESCRIPTION: Structured markdown changelog entries documenting changes across multiple Just releases, including version numbers, dates and categorized changes\nSOURCE: https://github.com/casey/just/blob/master/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[1.22.1] - 2024-01-08\n### Fixed\n- Don't conflate recipes with the same name in different modules\n\n[1.22.0] - 2023-12-31\n### Added\n- Recipes can be invoked with path syntax\n- Add `--format` and `--initialize` as aliases for `--fmt` and `--init`\n\n[1.21.0] - 2023-12-29\n### Added\n- Optional modules and imports\n- Print submodule recipes in --summary\n```\n\n----------------------------------------\n\nTITLE: Installing Just extension in Visual Studio Code\nDESCRIPTION: Command to install the Just extension in Visual Studio Code for syntax highlighting and other features.\nSOURCE: https://github.com/casey/just/blob/master/README.中文.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncode --install-extension skellock.just\n```\n\n----------------------------------------\n\nTITLE: Setting Vim filetype for Just files\nDESCRIPTION: Vim configuration snippet to set the filetype for justfiles to 'make' for syntax highlighting, to be placed in ~/.vim/filetype.vim.\nSOURCE: https://github.com/casey/just/blob/master/README.中文.md#2025-04-18_snippet_3\n\nLANGUAGE: vimscript\nCODE:\n```\nif exists(\"did_load_filetypes\")\n  finish\nendif\n\naugroup filetypedetect\n  au BufNewFile,BufRead justfile setf make\naugroup END\n```\n\n----------------------------------------\n\nTITLE: Setting file-specific Vim mode for Just files\nDESCRIPTION: Comment to add at the end of a justfile to enable make mode syntax highlighting in Vim for that specific file.\nSOURCE: https://github.com/casey/just/blob/master/README.中文.md#2025-04-18_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n# vim: set ft=make :\n```\n\n----------------------------------------\n\nTITLE: Setting file-specific Emacs mode for Just files\nDESCRIPTION: Local variables block to add at the end of a justfile to enable makefile mode in Emacs for that specific file.\nSOURCE: https://github.com/casey/just/blob/master/README.中文.md#2025-04-18_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n# Local Variables:\n# mode: makefile\n# End:\n```\n\n----------------------------------------\n\nTITLE: Displaying Release Version and Date in Markdown\nDESCRIPTION: This snippet shows how release versions and dates are formatted in the changelog using Markdown headers.\nSOURCE: https://github.com/casey/just/blob/master/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[1.14.0](https://github.com/casey/just/releases/tag/1.14.0) - 2023-06-02\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Sections in Markdown\nDESCRIPTION: This snippet demonstrates how different sections of the changelog (Changed, Added, Fixed, Misc) are formatted using Markdown headers and lists.\nSOURCE: https://github.com/casey/just/blob/master/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Changed\n- Use `just --show` in default chooser ([#1539](https://github.com/casey/just/pull/1539) by [fzdwx](https://github.com/fzdwx))\n\n### Misc\n- Fix justfile search link ([#1607](https://github.com/casey/just/pull/1607) by [jbaber](https://github.com/jbaber))\n- Ignore clippy::let_underscore_untyped ([#1609](https://github.com/casey/just/pull/1609) by [casey](https://github.com/casey))\n```"
  }
]