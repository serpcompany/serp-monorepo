[
  {
    "owner": "authelia",
    "repo": "authelia",
    "content": "TITLE: Authelia Core Configuration YAML\nDESCRIPTION: This YAML snippet shows the core configuration of Authelia, including server address, logging level, identity validation, TOTP settings, password policy, authentication backend, access control rules, session configuration, regulation settings, storage configuration, and notifier settings. This configuration uses file based authentication backend and SQLite storage.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/blog/authelia-traefik-setup-guide/index.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"server:\\n  address: 'tcp4://:{{< sitevar name=\\\"port\\\" nojs=\\\"9091\\\" >}}'\\n\\nlog:\\n  level: debug\\n  file_path: '/var/log/authelia/authelia.log'\\n  keep_stdout: true\\n\\nidentity_validation:\\n  elevated_session:\\n    require_second_factor: true\\n  reset_password:\\n    jwt_lifespan: '5 minutes'\\n    jwt_secret: {{ secret \\\"/secrets/jwt_secret.txt\\\" | mindent 0 \\\"|\\\" | msquote }}\\n\\ntotp:\\n  disable: false\\n  issuer: '{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}'\\n  period: 30\\n  skew: 1\\n\\npassword_policy:\\n  zxcvbn:\\n    enabled: true\\n    min_score: 4\\n\\nauthentication_backend:\\n  file:\\n    path: '/config/users.yml'\\n    password:\\n      algorithm: 'argon2'\\n      argon2:\\n        variant: 'argon2id'\\n        iterations: 3\\n        memory: 65535\\n        parallelism: 4\\n        key_length: 32\\n        salt_length: 16\\n\\naccess_control:\\n  default_policy: 'deny'\\n  rules:\\n    - domain: 'traefik.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}'\\n      policy: 'one_factor'\\n    - domain: 'whoami-secure.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}'\\n      policy: 'two_factor'\\n\\nsession:\\n  name: 'authelia_session'\\n  secret: {{ secret \\\"/secrets/session_secret.txt\\\" | mindent 0 \\\"|\\\" | msquote }}\\n  cookies:\\n    - domain: '{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}'\\n      authelia_url: 'https://{{< sitevar name=\\\"subdomain-authelia\\\" nojs=\\\"auth\\\" >}}.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}'\\n\\nregulation:\\n  max_retries: 4\\n  find_time: 120\\n  ban_time: 300\\n\\nstorage:\\n  encryption_key: {{ secret \\\"/secrets/storage_encryption_key.txt\\\" | mindent 0 \\\"|\\\" | msquote }}\\n  local:\\n    path: '/config/db.sqlite3'\\n\\nnotifier:\\n  disable_startup_check: false\\n  filesystem:\\n    filename: '/config/notification.txt'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring File-Based Authentication Backend in YAML\nDESCRIPTION: Complete configuration example for Authelia's file-based authentication backend, including path settings, search options, extra attributes, and password hashing configurations for multiple algorithms including Argon2, Scrypt, PBKDF2, SHA2Crypt, and Bcrypt.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/first-factor/file.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthentication_backend:\n  file:\n    path: '/config/users.yml'\n    watch: false\n    search:\n      email: false\n      case_insensitive: false\n    extra_attributes:\n      extra_example:\n        multi_valued: false\n        value_type: 'string'\n    password:\n      algorithm: 'argon2'\n      argon2:\n        variant: 'argon2id'\n        iterations: 3\n        memory: 65536\n        parallelism: 4\n        key_length: 32\n        salt_length: 16\n      scrypt:\n        variant: 'scrypt'\n        iterations: 16\n        block_size: 8\n        parallelism: 1\n        key_length: 32\n        salt_length: 16\n      pbkdf2:\n        variant: 'sha512'\n        iterations: 310000\n        salt_length: 16\n      sha2crypt:\n        variant: 'sha512'\n        iterations: 50000\n        salt_length: 16\n      bcrypt:\n        variant: 'standard'\n        cost: 12\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Authelia and Traefik Integration\nDESCRIPTION: This Docker Compose file sets up Traefik, Authelia, and other services like Nextcloud, Heimdall, and Whoami. It configures the network, volumes, and labels for Traefik integration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/traefik.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnetworks:\n  net:\n    driver: 'bridge'\nservices:\n  traefik:\n    container_name: 'traefik'\n    image: 'traefik:v3.1'\n    restart: 'unless-stopped'\n    command:\n      - '--api=true'\n      - '--api.dashboard=true'\n      - '--api.insecure=false'\n      - '--pilot.dashboard=false'\n      - '--global.sendAnonymousUsage=false'\n      - '--global.checkNewVersion=false'\n      - '--log=true'\n      - '--log.level=DEBUG'\n      - '--log.filepath=/config/traefik.log'\n      - '--providers.docker=true'\n      - '--providers.docker.exposedByDefault=false'\n      - '--providers.file=true'\n      - '--providers.file.watch=true'\n      - '--providers.file.directory=/config/dynamic'\n      - '--entryPoints.http=true'\n      - '--entryPoints.http.address=:8080/tcp'\n      - '--entryPoints.http.http.redirections.entryPoint.to=https'\n      - '--entryPoints.http.http.redirections.entryPoint.scheme=https'\n      - '--entryPoints.https=true'\n      - '--entryPoints.https.address=:8443/tcp'\n    networks:\n      net: {}\n    ports:\n      - '80:8080'\n      - '443:8443'\n    volumes:\n      - '/var/run/docker.sock:/var/run/docker.sock'\n      - '${PWD}/data/traefik/config:/config'\n      - '${PWD}/data/traefik/certificates:/certificates'\n    labels:\n      traefik.enable: 'true'\n  authelia:\n    container_name: '{{< sitevar name=\"host\" nojs=\"authelia\" >}}'\n    image: 'authelia/authelia'\n    restart: 'unless-stopped'\n    networks:\n      net: {}\n    volumes:\n      - '${PWD}/data/authelia/config:/config'\n      - '${PWD}/data/authelia/certificates:/certificates'\n    environment:\n      TZ: 'Australia/Melbourne'\n    labels:\n      traefik.enable: 'true'\n  nextcloud:\n    container_name: 'nextcloud'\n    image: 'linuxserver/nextcloud'\n    restart: 'unless-stopped'\n    networks:\n      net: {}\n    volumes:\n      - '${PWD}/data/nextcloud/config:/config'\n      - '${PWD}/data/nextcloud/data:/data'\n    environment:\n      PUID: '1000'\n      PGID: '1000'\n      TZ: 'Australia/Melbourne'\n    labels:\n      traefik.enable: 'true'\n  heimdall:\n    container_name: 'heimdall'\n    image: 'linuxserver/heimdall'\n    restart: 'unless-stopped'\n    networks:\n      net: {}\n    volumes:\n      - '${PWD}/data/heimdall/config:/config'\n    environment:\n      PUID: '1000'\n      PGID: '1000'\n      TZ: 'Australia/Melbourne'\n    labels:\n      traefik.enable: 'true'\n  whoami:\n    container_name: 'whoami'\n    image: 'traefik/whoami:latest'\n    restart: 'unless-stopped'\n    networks:\n      net: {}\n    environment:\n      TZ: 'Australia/Melbourne'\n    labels:\n      traefik.enable: 'true'\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Notifications in Authelia YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to set up SMTP notifications in Authelia, including server address, authentication, sender information, and various security options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/notifications/smtp.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnotifier:\n  disable_startup_check: false\n  smtp:\n    address: 'smtp://127.0.0.1:25'\n    timeout: '5s'\n    username: 'test'\n    password: 'password'\n    sender: \"Authelia <admin@example.com>\"\n    identifier: 'localhost'\n    subject: \"[Authelia] {title}\"\n    startup_check_address: 'test@example.com'\n    disable_require_tls: false\n    disable_starttls: false\n    disable_html_emails: false\n    tls:\n      server_name: 'smtp.example.com'\n      skip_verify: false\n      minimum_version: 'TLS1.2'\n      maximum_version: 'TLS1.3'\n      certificate_chain: |\n        -----BEGIN CERTIFICATE-----\n        ...\n        -----END CERTIFICATE-----\n        -----BEGIN CERTIFICATE-----\n        ...\n        -----END CERTIFICATE-----\n      private_key: |\n        -----BEGIN PRIVATE KEY-----\n        ...\n        -----END PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Configuring AuthRequest in Authelia with YAML\nDESCRIPTION: This YAML snippet demonstrates configuring Authelia's AuthRequest module, which is essential for NGINX integration. Ensure that the 'auth-request' implementation is specified to enable authorization requests through NGINX.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nserver:\n  endpoints:\n    authz:\n      auth-request:\n        implementation: 'AuthRequest'\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OIDC Client for Writefreely\nDESCRIPTION: Defines the OpenID Connect client configuration in Authelia for Writefreely integration, specifying client ID, secret, redirect URIs, and authentication policies\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/writefreely/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    clients:\n      - client_id: 'writefreely'\n        client_name: 'Writefreely'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://writefreely.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/oauth/callback/generic'\n        scopes:\n          - 'openid'\n          - 'email'\n          - 'profile'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_post'\n```\n\n----------------------------------------\n\nTITLE: Configuring Policy Rules with YAML for Authelia\nDESCRIPTION: This YAML snippet example demonstrates how to apply multiple rules in Authelia, utilizing a sequential order of domain matching to establish resource access policies, including both bypass and two-factor authentication rules.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/security/access-control.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- domain:\n    - '{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n    - '*.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n  policy: 'bypass'\n  resources:\n    - '^/api$'\n    - '^/api/'\n- domain:\n    - 'app.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n  policy: 'two_factor'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia WebAuthn for Passkeys (YAML)\nDESCRIPTION: This YAML configuration snippet demonstrates the recommended settings for enabling passkey login in Authelia, compliant with NIST recommendations. It includes enabling passkey login, setting attestation conveyance preference to 'direct', prohibiting backup eligibility, and enabling metadata validation with specific validation rules.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/webauthn.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# yaml-language-server: $schema=https://www.authelia.com/schemas/latest/json-schema/configuration.json\nwebauthn:\n  enable_passkey_login: true\n  attestation_conveyance_preference: 'direct'\n  filtering:\n    prohibit_backup_eligibility: true\n  metadata:\n    enabled: true\n    validate_trust_anchor: true\n    validate_entry: true\n    validate_status: true\n    validate_entry_permit_zero_aaguid: false\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Authelia with Docker Secrets\nDESCRIPTION: This Docker Compose configuration sets up Authelia using Docker secrets for sensitive information. It includes secret definitions, service configuration, and network settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/deployment/docker.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsecrets:\n  JWT_SECRET:\n    file: '${PWD}/data/authelia/secrets/JWT_SECRET'\n  SESSION_SECRET:\n    file: '${PWD}/data/authelia/secrets/SESSION_SECRET'\n  STORAGE_PASSWORD:\n    file: '${PWD}/data/authelia/secrets/STORAGE_PASSWORD'\n  STORAGE_ENCRYPTION_KEY:\n    file: '${PWD}/data/authelia/secrets/STORAGE_ENCRYPTION_KEY'\nservices:\n  authelia:\n    container_name: '{{< sitevar name=\"host\" nojs=\"authelia\" >}}'\n    image: 'docker.io/authelia/authelia:latest'\n    restart: 'unless-stopped'\n    networks:\n      net:\n        aliases: []\n    secrets: ['JWT_SECRET', 'SESSION_SECRET', 'STORAGE_PASSWORD', 'STORAGE_ENCRYPTION_KEY']\n    environment:\n      AUTHELIA_IDENTITY_VALIDATION_RESET_PASSWORD_JWT_SECRET_FILE: '/run/secrets/JWT_SECRET'\n      AUTHELIA_SESSION_SECRET_FILE: '/run/secrets/SESSION_SECRET'\n      AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE: '/run/secrets/STORAGE_PASSWORD'\n      AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE: '/run/secrets/STORAGE_ENCRYPTION_KEY'\n    volumes:\n      - '${PWD}/data/authelia/config:/config'\nnetworks:\n  net:\n    external: true\n    name: 'net'\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring WebAuthn in Authelia YAML Configuration\nDESCRIPTION: Complete YAML configuration example for WebAuthn in Authelia, including basic settings, passkey options, attestation preferences, timeouts, filtering criteria, selection criteria, and metadata service settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/second-factor/webauthn.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwebauthn:\n  disable: false\n  enable_passkey_login: false\n  display_name: 'Authelia'\n  attestation_conveyance_preference: 'indirect'\n  timeout: '60 seconds'\n  filtering:\n    permitted_aaguids: []\n    prohibited_aaguids: []\n    prohibit_backup_eligibility: false\n  selection_criteria:\n    attachment: ''\n    discoverability: 'preferred'\n    user_verification: 'preferred'\n  metadata:\n    enabled: false\n    validate_trust_anchor: true\n    validate_entry: true\n    validate_entry_permit_zero_aaguid: false\n    validate_status: true\n    validate_status_permitted: []\n    validate_status_prohibited:\n      - 'REVOKED'\n      - 'USER_KEY_PHYSICAL_COMPROMISE'\n      - 'USER_KEY_REMOTE_COMPROMISE'\n      - 'USER_VERIFICATION_BYPASS'\n      - 'ATTESTATION_KEY_COMPROMISE'\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Control Rules in Authelia YAML Configuration\nDESCRIPTION: This code snippet demonstrates a complete access control configuration example in Authelia. It includes setting the default policy to 'deny' and creating rules with various matching criteria including domain, domain regex, policy, networks, subjects, HTTP methods, resources, and query parameters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/security/access-control.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\naccess_control:\n  default_policy: 'deny'\n  rules:\n  - domain: 'private.example.com'\n    domain_regex: '^(\\d+\\-)?priv-img\\.example\\.com$'\n    policy: 'one_factor'\n    networks:\n    - 'internal'\n    - '1.1.1.1'\n    subject:\n    - ['user:adam']\n    - ['user:fred']\n    - ['group:admins']\n    methods:\n    - 'GET'\n    - 'HEAD'\n    resources:\n    - '^/api.*'\n    query:\n    - - operator: 'present'\n        key: 'secure'\n      - operator: 'absent'\n        key: 'insecure'\n    - - operator: 'pattern'\n        key: 'token'\n        value: '^(abc123|zyx789)$'\n      - operator: 'not pattern'\n        key: 'random'\n        value: '^(1|2)$'\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Compose Configuration for NGINX Proxy Manager and Authelia\nDESCRIPTION: This Docker Compose configuration sets up NGINX Proxy Manager and Authelia services, defining the necessary networks, volumes, and environment variables for seamless operation. Each service is given specific settings for management and integration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx-proxy-manager/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.7'\nnetworks:\n  net:\n    driver: 'bridge'\n\nservices:\n  nginx:\n    container_name: 'nginx'\n    image: 'jc21/nginx-proxy-manager'\n    restart: 'unless-stopped'\n    networks:\n      net:\n        aliases: []\n    ports:\n      - '80:80'\n      - '81:81'\n      - '443:443'\n    volumes:\n      - '${PWD}/data/nginx-proxy-manager/data:/data'\n      - '${PWD}/data/nginx-proxy-manager/letsencrypt:/etc/letsencrypt'\n      - '${PWD}/data/nginx/snippets:/snippets'\n    environment:\n      TZ: 'Australia/Melbourne'\n  authelia:\n    container_name: '{{< sitevar name=\"host\" nojs=\"authelia\" >}}'\n    image: 'authelia/authelia'\n    restart: 'unless-stopped'\n    networks:\n      net:\n        aliases: []\n    volumes:\n      - '${PWD}/data/authelia/config:/config'\n    environment:\n      TZ: 'Australia/Melbourne'\n  nextcloud:\n    container_name: 'nextcloud'\n    image: 'lscr.io/linuxserver/nextcloud'\n    restart: 'unless-stopped'\n    networks:\n      net:\n        aliases: []\n    volumes:\n      - '${PWD}/data/nextcloud/config:/config'\n      - '${PWD}/data/nextcloud/data:/data'\n    environment:\n      PUID: '1000'\n      PGID: '1000'\n      TZ: 'Australia/Melbourne'\n  whoami:\n    container_name: 'whoami'\n    image: 'docker.io/traefik/whoami'\n    restart: 'unless-stopped'\n    networks:\n      net:\n        aliases: []\n    environment:\n      TZ: 'Australia/Melbourne'\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Self-Signed Certificate with Authelia CLI (Docker)\nDESCRIPTION: Uses the Authelia Docker container to generate a self-signed RSA certificate for 'example.com'.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/generating-secure-values.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -u \"$(id -u):$(id -g)\" -v \"$(pwd)\":/keys authelia/authelia:latest authelia crypto certificate rsa generate --common-name example.com --directory /keys\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Connect Provider in Authelia\nDESCRIPTION: A comprehensive YAML configuration example for setting up Authelia as an OpenID Connect 1.0 Provider. This includes HMAC secrets, JWT signing keys, authorization policies, token lifespans, claims policies, scopes, and CORS settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/openid-connect/provider.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    hmac_secret: 'this_is_a_secret_abc123abc123abc'\n    jwks:\n      - key_id: 'example'\n        algorithm: 'RS256'\n        use: 'sig'\n        key: |\n          -----BEGIN PRIVATE KEY-----\n          ...\n          -----END PRIVATE KEY-----\n        certificate_chain: |\n          -----BEGIN CERTIFICATE-----\n          ...\n          -----END CERTIFICATE-----\n          -----BEGIN CERTIFICATE-----\n          ...\n          -----END CERTIFICATE-----\n    enable_client_debug_messages: false\n    minimum_parameter_entropy: 8\n    enforce_pkce: 'public_clients_only'\n    enable_pkce_plain_challenge: false\n    enable_jwt_access_token_stateless_introspection: false\n    discovery_signed_response_alg: 'none'\n    discovery_signed_response_key_id: ''\n    require_pushed_authorization_requests: false\n    authorization_policies:\n      policy_name:\n        default_policy: 'two_factor'\n        rules:\n          - policy: 'deny'\n            subject: 'group:services'\n            networks:\n              - '192.168.1.0/24'\n              - '192.168.2.51'\n    lifespans:\n      access_token: '1h'\n      authorize_code: '1m'\n      id_token: '1h'\n      refresh_token: '90m'\n    claims_policies:\n      policy_name:\n        id_token: []\n        access_token: []\n        id_token_audience_mode: 'specification'\n        custom_claims:\n          claim_name:\n            attribute: 'attribute_name'\n    scopes:\n      scope_name:\n        claims: []\n    cors:\n      endpoints:\n        - 'authorization'\n        - 'token'\n        - 'revocation'\n        - 'introspection'\n      allowed_origins:\n        - 'https://example.com'\n      allowed_origins_from_client_redirect_uris: false\n```\n\n----------------------------------------\n\nTITLE: Using File Templates for OIDC Key Configuration in Authelia\nDESCRIPTION: Recommended approach for securely loading RSA private keys in Authelia's OpenID Connect configuration using file templates. This allows externalization of sensitive key material.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/openid-connect/provider.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    jwks:\n      - key: {{ secret \"/config/secrets/oidc/jwks/rsa.2048.key\" | mindent 10 \"|\" | msquote }}\n```\n\n----------------------------------------\n\nTITLE: Generating Argon2 Hash (Interactive) with Docker\nDESCRIPTION: This bash command demonstrates how to generate an Argon2 password hash interactively using the Authelia Docker image. It runs the `authelia crypto hash generate argon2` command within a container, prompting the user for the password. This requires Docker to be installed and configured.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/passwords.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"docker run --rm -it authelia/authelia:latest authelia crypto hash generate argon2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorization Response Signing\nDESCRIPTION: Advanced configuration for signing and encrypting authorization responses using JSON Web Keys, implementing the JARM specification with complex JWT signing and encryption options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/openid-connect/clients.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nauthorization_signed_response_key_id: example-key\nauthorization_signed_response_alg: RS256\n```\n\n----------------------------------------\n\nTITLE: Configuring Fail2Ban Filter for Authelia\nDESCRIPTION: This INI snippet defines a Fail2Ban filter for Authelia. It sets up regex patterns to detect failed authentication attempts, incorrect usernames, and potential spam attempts.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/overview/security/measures.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[Definition]\nfailregex = ^.*Unsuccessful (1FA|TOTP|Duo|U2F) authentication attempt by user .*remote_ip\"?(:|=\"?<HOST>\"?.*$\n            ^.*user not found.*path=/api/reset-password/identity/start remote_ip\"?(:|=\"?<HOST>\"?.*$\n            ^.*Sending an email to user.*path=/api/.*/start remote_ip\"?(:|=\"?<HOST>\"?.*$\n\nignoreregex = ^.*level\"?(:|=\"?info.*\n              ^.*level\"?(:|=\"?warning.*\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL/MariaDB Storage Provider in Authelia\nDESCRIPTION: A complete example configuration for MySQL/MariaDB storage provider in Authelia, showing how to set up the connection, authentication, timeout, and TLS security options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/storage/mysql.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  encryption_key: 'a_very_important_secret'\n  mysql:\n    address: 'tcp://127.0.0.1:3306'\n    database: 'authelia'\n    username: 'authelia'\n    password: 'mypassword'\n    timeout: '5s'\n    tls:\n      server_name: 'mysql.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      skip_verify: false\n      minimum_version: 'TLS1.2'\n      maximum_version: 'TLS1.3'\n      certificate_chain: |\n        -----BEGIN CERTIFICATE-----\n        ...\n        -----END CERTIFICATE-----\n        -----BEGIN CERTIFICATE-----\n        ...\n        -----END CERTIFICATE-----\n      private_key: |\n        -----BEGIN PRIVATE KEY-----\n        ...\n        -----END PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Generating Argon2 Hash Bare-Metal\nDESCRIPTION: This bash command shows how to generate an Argon2 password hash non-interactively using the Authelia binary directly. It uses the `--password` flag to provide the password directly to the command. This requires the Authelia binary to be installed and in the system's PATH.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/passwords.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"authelia crypto hash generate argon2 --password 'password'\"\n```\n\n----------------------------------------\n\nTITLE: Generate Secrets Docker Shell\nDESCRIPTION: This shell command utilizes Docker to generate the required secrets for Authelia. It runs an Authelia container, changes the working directory to `/secrets`, and then uses the `authelia crypto rand` command to generate three random secrets (session_secret.txt, storage_encryption_key.txt, jwt_secret.txt) of length 64 each. The secrets are stored in the `./authelia/secrets` directory, which is mounted as a volume to the container.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/blog/authelia-traefik-setup-guide/index.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n\"docker run --rm -u 8000:8000 -v ./authelia/secrets:/secrets docker.io/authelia/authelia sh -c \\\"cd /secrets && authelia crypto rand --length 64 session_secret.txt storage_encryption_key.txt jwt_secret.txt\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Envoy Proxy with Authelia External Authorization\nDESCRIPTION: Detailed Envoy configuration that sets up HTTP to HTTPS redirection and implements the external authorization filter to authenticate requests through Authelia. It includes configurations for listeners, routes, filters, and clusters with specific header handling for the authorization process.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/envoy.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n    - name: 'listener_http'\n      address:\n        socket_address:\n          address: '0.0.0.0'\n          port_value: 8080\n      filter_chains:\n        - filters:\n            - name: 'envoy.filters.network.http_connection_manager'\n              typed_config:\n                \"@type\": 'type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager'\n                codec_type: 'auto'\n                stat_prefix: 'ingress_http'\n                route_config:\n                  name: 'local_route'\n                  virtual_hosts:\n                    - name: 'backend'\n                      domains: ['*']\n                      routes:\n                        - match:\n                            prefix: '/'\n                          redirect:\n                            https_redirect: true\n                  http_filters:\n                    - name: 'envoy.filters.http.router'\n                      typed_config:\n                        \"@type\": 'type.googleapis.com/envoy.extensions.filters.http.router.v3.Router'\n    - name: 'listener_https'\n      address:\n        socket_address:\n          address: '0.0.0.0'\n          port_value: 8443\n      filter_chains:\n        - filters:\n            - name: 'envoy.filters.network.http_connection_manager'\n              typed_config:\n                \"@type\": 'type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager'\n                stat_prefix: 'ingress_http'\n                use_remote_address: true\n                skip_xff_append: false\n                route_config:\n                  name: 'local_route'\n                  virtual_hosts:\n                    - name: 'whoami_service'\n                      domains: [\"nextcloud.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}']\n                      routes:\n                        - match:\n                            prefix: '/'\n                          route:\n                            cluster: 'nextcloud'\n                    - name: 'authelia_service'\n                      domains: ['{{< sitevar name=\\\"subdomain-authelia\\\" nojs=\\\"auth\\\" >}}.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}']\n                      typed_per_filter_config:\n                        envoy.filters.http.ext_authz:\n                          \"@type\": 'type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute'\n                          disabled: true\n                      routes:\n                        - match:\n                            prefix: '/'\n                          route:\n                            cluster: 'authelia'\n                http_filters:\n                  - name: 'envoy.filters.http.ext_authz'\n                    typed_config:\n                      \"@type\": 'type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz'\n                      transport_api_version: 'v3'\n                      allowed_headers:\n                        patterns:\n                          - exact: 'Authorization'\n                          - exact: 'Proxy-Authorization'\n                          - exact: 'Accept'\n                          - exact: 'Cookie'\n                      http_service:\n                        path_prefix: '/api/authz/ext-authz/'\n                        server_uri:\n                          uri: '{{< sitevar name=\\\"host\\\" nojs=\\\"authelia\\\" >}}:{{< sitevar name=\\\"port\\\" nojs=\\\"9091\\\" >}}'\n                          cluster: 'authelia'\n                          timeout: '0.25s'\n                        authorization_request:\n                          allowed_headers:\n                            patterns:\n                              - exact: 'Authorization'\n                              - exact: 'Proxy-Authorization'\n                              - exact: 'Accept'\n                              - exact: 'Cookie'\n                          headers_to_add:\n                            - key: 'X-Forwarded-Proto'\n                              value: '%REQ(:SCHEME)%'\n                            ## The following commented lines are for configuring the Authelia URL in the proxy. We\n                            ## strongly suggest this is configured in the Session Cookies section of the Authelia configuration.\n                            # - key: X-Authelia-URL\n                            #   value: https://{{< sitevar name=\\\"subdomain-authelia\\\" nojs=\\\"auth\\\" >}}.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}\n                        authorization_response:\n                          allowed_upstream_headers:\n                            patterns:\n                              - prefix: 'remote-'\n                              - prefix: 'authelia-'\n                          allowed_client_headers:\n                            patterns:\n                              - exact: 'set-cookie'\n                          allowed_client_headers_on_success:\n                            patterns:\n                              - exact: 'set-cookie'\n                      failure_mode_allow: false\n                  - name: 'envoy.filters.http.router'\n                    typed_config:\n                      \"@type\": 'type.googleapis.com/envoy.extensions.filters.http.router.v3.Router'\n  clusters:\n    - name: 'nextcloud'\n      connect_timeout: '0.25s'\n      type: 'logical_dns'\n      dns_lookup_family: 'v4_only'\n      lb_policy: 'round_robin'\n      load_assignment:\n        cluster_name: 'nextcloud'\n        endpoints:\n          - lb_endpoints:\n              - endpoint:\n                  address:\n                    socket_address:\n                      address: 'nextcloud'\n                      port_value: 80\n    - name: 'authelia'\n      connect_timeout: '0.25s'\n      type: 'logical_dns'\n      dns_lookup_family: 'v4_only'\n      lb_policy: 'round_robin'\n      load_assignment:\n        cluster_name: 'authelia'\n        endpoints:\n          - lb_endpoints:\n              - endpoint:\n                  address:\n                    socket_address:\n                      address: 'authelia'\n                      port_value: 9091\nlayered_runtime:\n  layers:\n    - name: 'static_layer_0'\n      static_layer:\n        envoy:\n          resource_limits:\n            listener:\n              example_listener_name:\n                connection_limit: 10000\n        overload:\n          global_downstream_max_connections: 50000\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Control Rules in Authelia YAML Configuration\nDESCRIPTION: This example demonstrates how to configure a fine-grained access control rule in Authelia. The rule applies a two-factor authentication policy for specific domain, path, user group, HTTP methods, and network subnet conditions.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/overview/authorization/access-control.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\naccess_control:\n  rules:\n    - domain: 'dev.example.com'\n      resources:\n        - '^/groups/dev/.*$'\n      subject: 'group:dev'\n      policy: 'two_factor'\n      methods:\n        - 'GET'\n        - 'POST'\n      networks:\n        - '192.168.1.0/24'\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Authentication Backend in YAML\nDESCRIPTION: This snippet shows a comprehensive YAML configuration for the LDAP authentication backend in Authelia. It includes settings for the LDAP server connection, TLS, connection pooling, user and group filters, and attribute mappings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/first-factor/ldap.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthentication_backend:\n  ldap:\n    address: 'ldap://127.0.0.1'\n    implementation: 'custom'\n    timeout: '5s'\n    start_tls: false\n    tls:\n      server_name: 'ldap.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      skip_verify: false\n      minimum_version: 'TLS1.2'\n      maximum_version: 'TLS1.3'\n      certificate_chain: |\n        -----BEGIN CERTIFICATE-----\n        ...\n        -----END CERTIFICATE-----\n        -----BEGIN CERTIFICATE-----\n        ...\n        -----END CERTIFICATE-----\n      private_key: |\n        -----BEGIN PRIVATE KEY-----\n        ...\n        -----END PRIVATE KEY-----\n    pooling:\n      enable: false\n      count: 5\n      retries: 2\n      timeout: '10 seconds'\n    base_dn: '{{< sitevar name=\"domain\" format=\"dn\" nojs=\"DC=example,DC=com\" >}}'\n    additional_users_dn: 'OU=users'\n    users_filter: '(&({username_attribute}={input})(objectClass=person))'\n    additional_groups_dn: 'OU=groups'\n    groups_filter: '(&(member={dn})(objectClass=groupOfNames))'\n    group_search_mode: 'filter'\n    permit_referrals: false\n    permit_unauthenticated_bind: false\n    permit_feature_detection_failure: false\n    user: 'CN=admin,{{< sitevar name=\"domain\" format=\"dn\" nojs=\"DC=example,DC=com\" >}}'\n    password: 'password'\n    attributes:\n      distinguished_name: 'distinguishedName'\n      username: 'uid'\n      display_name: 'displayName'\n      family_name: 'sn'\n      given_name: 'givenName'\n      middle_name: 'middleName'\n      nickname: ''\n      gender: ''\n      birthdate: ''\n      website: 'wWWHomePage'\n      profile: ''\n      picture: ''\n      zoneinfo: ''\n      locale: ''\n      phone_number: 'telephoneNumber'\n      phone_extension: ''\n      street_address: 'streetAddress'\n      locality: 'l'\n      region: 'st'\n      postal_code: 'postalCode'\n      country: 'c'\n      mail: 'mail'\n      member_of: 'memberOf'\n      group_name: 'cn'\n      extra:\n        extra_example:\n          name: ''\n          multi_valued: false\n          value_type: 'string'\n```\n\n----------------------------------------\n\nTITLE: Authelia Auth Request Configuration for NGINX\nDESCRIPTION: NGINX configuration snippet to integrate with Authelia's authentication system. Sets up authentication requests and handles user metadata from Authelia responses for forwarding to backend applications.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx.md#2025-04-21_snippet_13\n\nLANGUAGE: nginx\nCODE:\n```\n## Send a subrequest to Authelia to verify if the user is authenticated and has permission to access the resource.\nauth_request /internal/authelia/authz;\n\n## Save the upstream metadata response headers from Authelia to variables.\nauth_request_set $user $upstream_http_remote_user;\nauth_request_set $groups $upstream_http_remote_groups;\nauth_request_set $name $upstream_http_remote_name;\nauth_request_set $email $upstream_http_remote_email;\n\n## Inject the metadata response headers from the variables into the request made to the backend.\nproxy_set_header Remote-User $user;\nproxy_set_header Remote-Groups $groups;\nproxy_set_header Remote-Email $email;\nproxy_set_header Remote-Name $name;\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limits for Authelia Authorization Endpoints in YAML\nDESCRIPTION: This configuration example demonstrates how to set up rate limits for various authorization endpoints in Authelia. It includes settings for password reset, second factor authentication, and session elevation with customizable time periods and request limits for each endpoint.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/miscellaneous/server-endpoint-rate-limits.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  endpoints:\n    rate_limits:\n      reset_password_start:\n        enable: true\n        buckets:\n          - period: '10 minutes'\n            requests: 5\n          - period: '15 minutes'\n            requests: 10\n          - period: '30 minutes'\n            requests: 15\n      reset_password_finish:\n        enable: true\n        buckets:\n          - period: '1 minute'\n            requests: 10\n          - period: '2 minutes'\n            requests: 15\n      second_factor_totp:\n        enable: true\n        buckets:\n          - period: '1 minute'\n            requests: 30\n          - period: '2 minutes'\n            requests: 40\n          - period: '10 minutes'\n            requests: 50\n      second_factor_duo:\n        enable: true\n        buckets:\n          - period: '1 minute'\n            requests: 10\n          - period: '2 minutes'\n            requests: 15\n      session_elevation_start:\n        enable: true\n        buckets:\n          - period: '5 minutes'\n            requests: 3\n          - period: '10 minutes'\n            requests: 5\n          - period: '1 hour'\n            requests: 15\n      session_elevation_finish:\n        enable: true\n        buckets:\n          - period: '10 minutes'\n            requests: 3\n          - period: '20 minutes'\n            requests: 5\n          - period: '1 hour'\n            requests: 15\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret Manifest with String Data for Authelia\nDESCRIPTION: This YAML manifest creates a Kubernetes Secret with string data for various Authelia configuration secrets. It includes secrets for JWT, session, Redis, LDAP, storage, SMTP, Duo, and OIDC.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/kubernetes/secrets.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Secret\napiVersion: v1\nmetadata:\n  name: authelia\nstringData:\n  JWT_SECRET: >\n    NwsVsXv4YCAF9suxWZmT7N6PSzmouCDHqVpzbS5niBKo49b7rTREmwFe6roKswf4\n  SESSION_SECRET: >\n    DkezH5zcMQsvaU38YVu673i6JDH4VPiik9xPmYsTN3KPNkxSiiyZ8ASFTdcBcu8q\n  REDIS_PASSWORD: >\n    VfhdNhgFG5mLU9s3cjQn9im6dkiWNu3FEUPJRi9bqGm3UV6xzGBZgvdCJhoy26d9\n  REDIS_SENTINEL_PASSWORD: >\n    sSJMfX9A6Q6vTpD6rHXcLn2j5kN557RwuohAeyZuGqH9P9LGfuSMnzi9woYZuNqU\n  LDAP_PASSWORD: >\n    zafcAShEBfgc48DihdRnnb6UJEGKqzg3FdeZXZ3rhrg6tu2oDoYSBA88w9NPvDhZ\n  STORAGE_PASSWORD: >\n    NMHf9Z7C5UQYuKKgh9BJTKeccoZt6c647FQqsEHhkapkkndPkPw3d8bnvkqLgiZ5\n  STORAGE_ENCRYPTION_KEY: >\n    rH87rjVMQBvzVgj8vVGSxhop2PPwddrJ7B6oSkGcmoganMf4wqANp9AJwaMHt8RA\n  SMTP_PASSWORD: >\n    oi4Yag5HX8Bhc5JTr49nRkdPEr4JcPMfLAPvXxNpHtHqiHXfx3isdWXuTg7yCtjk\n  DUO_SECRET_KEY: >\n    d4ypk2UQXxuo86s7vJ2rYWPa5KoxDfU9JQWgEqtANiBaJVQSG8PJbD9U24eiVuPC\n  OIDC_HMAC_SECRET: >\n    eSopMjbiuCMhEbXGFsm5B8KWKszxV3CJWSLYrWnBJja4rFNvDxti388WyBjdrsHb\n  OIDC_ISSUER_PRIVATE_KEY: |\n    -----BEGIN PRIVATE KEY-----\n    ...\n    -----END PRIVATE KEY-----\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Regulation in Authelia YAML Configuration\nDESCRIPTION: Example configuration for Authelia's regulation system. This snippet demonstrates how to set up regulation modes, maximum retry attempts, find time window, and ban duration to protect against brute-force attacks.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/security/regulation.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nregulation:\n  modes:\n    - 'user'\n    - 'ip'\n  max_retries: 3\n  find_time: '2m'\n  ban_time: '5m'\n```\n\n----------------------------------------\n\nTITLE: Generating Password Hash with Config (Interactive) via Docker\nDESCRIPTION: This bash command demonstrates generating a password hash using an existing Authelia configuration file, interactively, using the Docker image. It mounts the `configuration.yml` file into the container and uses the `--config` flag to specify its location.  Docker must be installed and the configuration file must be present.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/passwords.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"docker run --rm -it -v ./configuration.yml:/configuration.yml authelia/authelia:latest authelia crypto hash generate --config /configuration.yml\"\n```\n\n----------------------------------------\n\nTITLE: Generating Password Hash with Config (Interactive) Bare Metal\nDESCRIPTION: This bash command demonstrates generating a password hash using an existing Authelia configuration file, interactively, directly using the Authelia binary. It uses the `--config` flag to specify the location of the `configuration.yml` file. The Authelia binary must be installed and in the system's PATH.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/passwords.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"authelia crypto hash generate --config /configuration.yml\"\n```\n\n----------------------------------------\n\nTITLE: NGINX Configuration Snippet for Protected Applications\nDESCRIPTION: This NGINX configuration snippet is tailored for securing protected applications like Nextcloud. It includes multiple configurations for proxy settings and ensures authentication through Authelia by including relevant snippets.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx-proxy-manager/index.md#2025-04-21_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\ninclude /snippets/authelia-location.conf;\n\nlocation / {\n    include /snippets/proxy.conf;\n    include /snippets/authelia-authrequest.conf;\n    proxy_pass $forward_scheme://$server:$port;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorization Failure Redirection in NGINX\nDESCRIPTION: Configuration for handling authorization failure redirects using either modern or legacy methods. The modern method utilizes session cookies while the legacy method uses URL parameters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx.md#2025-04-21_snippet_14\n\nLANGUAGE: nginx\nCODE:\n```\nauth_request_set $redirection_url $upstream_http_location;\n\nerror_page 401 =302 $redirection_url;\n\n## Legacy Method: Set $target_url to the original requested URL.\n# set_escape_uri $target_url $scheme://$http_host$request_uri;\n\n# error_page 401 =302 https://auth.example.com/?rd=$target_url;\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD for Authelia OIDC\nDESCRIPTION: This YAML snippet configures Argo CD to use Authelia as an OpenID Connect provider. It specifies the issuer URL, client ID, client secret, CLI client ID, and requested scopes.  The issuer URL points to the Authelia instance.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/argocd/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nname: 'Authelia'\nissuer: 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\nclientID: 'argocd'\nclientSecret: 'insecure_secret'\ncliClientID: 'argocd-cli'\nrequestedScopes:\n  - 'openid'\n  - 'profile'\n  - 'email'\n  - 'groups'\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Client Settings in YAML\nDESCRIPTION: This YAML configuration snippet specifies the client settings for integrating audiobookshelf with Authelia as an OpenID Connect provider. It includes necessary parameters like client ID, client secret, redirect URIs, and scopes for authentication. Ensure to update the client ID and secret to match your audiobookshelf setup.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/audiobookshelf/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"identity_providers:\\n  oidc:\\n    clients:\\n      - client_id: 'audiobookshelf-client-id'\\n        client_name: 'audiobookshelf'\\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\\n        public: false\\n        authorization_policy: 'two_factor'\\n        require_pkce: true\\n        pkce_challenge_method: 'S256'\\n        redirect_uris:\\n          - 'https://audiobookshelf.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/auth/openid/callback'\\n          - 'https://audiobookshelf.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/auth/openid/mobile-redirect'\\n        scopes:\\n          - 'openid'\\n          - 'profile'\\n          - 'groups'\\n          - 'email'\"\n```\n\n----------------------------------------\n\nTITLE: Authelia Users Database YAML\nDESCRIPTION: This YAML snippet defines the user database for Authelia. It includes a sample user 'authelia' with a display name, a pre-generated password hash (for testing purposes only), email address, and group memberships.  It's critical to replace the default password with a securely generated hash before deploying to production.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/blog/authelia-traefik-setup-guide/index.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n\"users:\\n  authelia: ## Username\\n    displayname: 'Authelia User'\\n    ## WARNING: This is a default password for testing only!\\n    ## IMPORTANT: Change this password before deploying to production!\\n    ## Generate a new hash using the instructions at:\\n    ## https://www.authelia.com/reference/guides/passwords/#passwords\\n    ## Password is 'authelia'\\n    password: '$6$rounds=50000$BpLnfgDsc2WD8F2q$Zis.ixdg9s/UOJYrs56b5QEZFiZECu0qZVNsIYxBaNJ7ucIL.nlxVCT5tqh8KHG8X4tlwCFm5r6NTOZZ5qRFN/'\\n    email: 'authelia@authelia.com'\\n    groups:\\n      - 'admin'\\n      - 'dev'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Connect Clients in YAML\nDESCRIPTION: This YAML configuration snippet shows how to set up OpenID Connect clients in Authelia. It includes settings for client ID, secret, redirect URIs, scopes, grant types, and various security options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/openid-connect/clients.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    clients:\n      - client_id: 'unique-client-identifier'\n        client_name: 'My Application'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        sector_identifier_uri: 'https://{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/sector.json'\n        public: false\n        redirect_uris:\n          - 'https://oidc.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}:8080/oauth2/callback'\n        request_uris:\n          - 'https://oidc.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}:8080/oidc/request-object.jwk'\n        audience:\n          - 'https://app.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n        scopes:\n          - 'openid'\n          - 'groups'\n          - 'email'\n          - 'profile'\n        grant_types:\n          - 'refresh_token'\n          - 'authorization_code'\n        response_types:\n          - 'code'\n        response_modes:\n          - 'form_post'\n          - 'query'\n          - 'fragment'\n        authorization_policy: 'two_factor'\n        lifespan: ''\n        claims_policy: ''\n        requested_audience_mode: 'explicit'\n        consent_mode: 'explicit'\n        pre_configured_consent_duration: '1 week'\n        require_pushed_authorization_requests: false\n        require_pkce: false\n        pkce_challenge_method: 'S256'\n        authorization_signed_response_key_id: ''\n        authorization_signed_response_alg: 'none'\n        authorization_encrypted_response_key_id: ''\n        authorization_encrypted_response_alg: 'none'\n        authorization_encrypted_response_enc: 'A128CBC-HS256'\n        id_token_signed_response_key_id: ''\n        id_token_signed_response_alg: 'RS256'\n        id_token_encrypted_response_key_id: ''\n        id_token_encrypted_response_alg: 'none'\n        id_token_encrypted_response_enc: 'A128CBC-HS256'\n        access_token_signed_response_key_id: ''\n        access_token_signed_response_alg: 'none'\n        access_token_encrypted_response_key_id: ''\n        access_token_encrypted_response_alg: 'none'\n        access_token_encrypted_response_enc: 'A128CBC-HS256'\n        userinfo_signed_response_key_id: ''\n        userinfo_signed_response_alg: 'none'\n        userinfo_encrypted_response_key_id: ''\n        userinfo_encrypted_response_alg: 'none'\n        userinfo_encrypted_response_enc: 'A128CBC-HS256'\n        introspection_signed_response_key_id: ''\n        introspection_signed_response_alg: 'none'\n        introspection_encrypted_response_key_id: ''\n        introspection_encrypted_response_alg: 'none'\n        introspection_encrypted_response_enc: 'A128CBC-HS256'\n        request_object_signing_alg: 'RS256'\n        request_object_encryption_alg: ''\n        request_object_encryption_enc: ''\n        token_endpoint_auth_method: 'client_secret_basic'\n        token_endpoint_auth_signing_alg: 'RS256'\n        revocation_endpoint_auth_method: 'client_secret_basic'\n        revocation_endpoint_auth_signing_alg: 'RS256'\n        introspection_endpoint_auth_method: 'client_secret_basic'\n        introspection_endpoint_auth_signing_alg: 'RS256'\n        pushed_authorization_request_endpoint_auth_method: 'client_secret_basic'\n        pushed_authorization_request_endpoint_auth_signing_alg: 'RS256'\n        jwks_uri: ''\n        jwks:\n          - key_id: 'example'\n            algorithm: 'RS256'\n            use: 'sig'\n            key: |\n              -----BEGIN RSA PUBLIC KEY-----\n              ...\n              -----END RSA PUBLIC KEY-----\n            certificate_chain: |\n              -----BEGIN CERTIFICATE-----\n              ...\n              -----END CERTIFICATE-----\n              -----BEGIN CERTIFICATE-----\n              ...\n              -----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose with Traefik and Authelia Integration\nDESCRIPTION: Complete Docker Compose configuration that sets up Traefik v3.1 as reverse proxy with Authelia authentication, including example services Nextcloud and Heimdall. The configuration includes secure networking, volume mounts, environment variables, and Traefik labels for routing and authentication middleware.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/traefik.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnetworks:\n  net:\n    driver: bridge\nservices:\n  traefik:\n    container_name: 'traefik'\n    image: 'traefik:v3.1'\n    restart: 'unless-stopped'\n    command:\n      - '--api=true'\n      - '--api.dashboard=true'\n      - '--api.insecure=false'\n      - '--pilot.dashboard=false'\n      - '--global.sendAnonymousUsage=false'\n      - '--global.checkNewVersion=false'\n      - '--log=true'\n      - '--log.level=DEBUG'\n      - '--log.filepath=/config/traefik.log'\n      - '--providers.docker=true'\n      - '--providers.docker.exposedByDefault=false'\n      - '--entryPoints.http=true'\n      - '--entryPoints.http.address=:8080/tcp'\n      - '--entryPoints.http.http.redirections.entryPoint.to=https'\n      - '--entryPoints.http.http.redirections.entryPoint.scheme=https'\n      - '--entryPoints.http.forwardedHeaders.insecure=false'\n      - '--entryPoints.http.proxyProtocol.insecure=false'\n      - '--entryPoints.https=true'\n      - '--entryPoints.https.address=:8443/tcp'\n      - '--entryPoints.https.forwardedHeaders.insecure=false'\n      - '--entryPoints.https.proxyProtocol.insecure=false'\n    networks:\n      net: {}\n    ports:\n      - '80:8080'\n      - '443:8443'\n    volumes:\n      - '/var/run/docker.sock:/var/run/docker.sock'\n      - '${PWD}/data/traefik:/config'\n    labels:\n      traefik.enable: 'true'\n      traefik.http.routers.api.rule: 'Host(`traefik.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}`)'\n      traefik.http.routers.api.entryPoints: 'https'\n      traefik.http.routers.api.tls: 'true'\n      traefik.http.routers.api.service: 'api@internal'\n      traefik.http.routers.api.middlewares: 'authelia@docker'\n  authelia:\n    container_name: '{{< sitevar name=\"host\" nojs=\"authelia\" >}}'\n    image: 'authelia/authelia'\n    restart: 'unless-stopped'\n    networks:\n      net: {}\n    volumes:\n      - '${PWD}/data/authelia/config:/config'\n    environment:\n      TZ: \"Australia/Melbourne\"\n    labels:\n      traefik.enable: 'true'\n      traefik.http.routers.authelia.rule: 'Host(`{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}`)'\n      traefik.http.routers.authelia.entryPoints: 'https'\n      traefik.http.routers.authelia.tls: 'true'\n      traefik.http.middlewares.authelia.forwardAuth.address: '{{< sitevar name=\"tls\" nojs=\"http\" >}}://{{< sitevar name=\"host\" nojs=\"authelia\" >}}:{{< sitevar name=\"port\" nojs=\"9091\" >}}/api/authz/forward-auth'\n      traefik.http.middlewares.authelia.forwardAuth.trustForwardHeader: 'true'\n      traefik.http.middlewares.authelia.forwardAuth.authResponseHeaders: 'Remote-User,Remote-Groups,Remote-Email,Remote-Name'\n  nextcloud:\n    container_name: 'nextcloud'\n    image: 'linuxserver/nextcloud'\n    restart: 'unless-stopped'\n    networks:\n      net: {}\n    volumes:\n      - '${PWD}/data/nextcloud/config:/config'\n      - '${PWD}/data/nextcloud/data:/data'\n    environment:\n      PUID: '1000'\n      PGID: '1000'\n      TZ: 'Australia/Melbourne'\n    labels:\n      traefik.enable: 'true'\n      traefik.http.routers.nextcloud.rule: 'Host(`nextcloud.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}`)',\n      traefik.http.routers.nextcloud.entryPoints: 'https'\n      traefik.http.routers.nextcloud.tls: 'true'\n      traefik.http.routers.nextcloud.middlewares: 'authelia@docker'\n  heimdall:\n    container_name: 'heimdall'\n    image: 'linuxserver/heimdall'\n    restart: 'unless-stopped'\n    networks:\n      net: {}\n    volumes:\n      - '${PWD}/data/heimdall/config:/config'\n    environment:\n      PUID: '1000'\n      PGID: '1000'\n      TZ: 'Australia/Melbourne'\n    labels:\n      traefik.enable: 'true'\n      traefik.http.routers.heimdall.rule: 'Host(`heimdall.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}`)',\n      traefik.http.routers.heimdall.entryPoints: 'https'\n      traefik.http.routers.heimdall.tls: 'true'\n      traefik.http.routers.heimdall.middlewares: 'authelia-basic@docker'\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Backends in Authelia YAML Configuration\nDESCRIPTION: An example configuration showing the structure for setting up storage backends in Authelia. It includes the required encryption_key and placeholders for the three available storage backends: local (SQLite), MySQL, and PostgreSQL.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/storage/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  encryption_key: 'a_very_important_secret'\n  local: {}\n  mysql: {}\n  postgres: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Deployment to Use Authelia Secrets\nDESCRIPTION: This YAML snippet shows how to configure a Kubernetes Deployment to use the Authelia secrets. It sets environment variables to point to the mounted secret files and configures volume mounts for the secrets.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/kubernetes/secrets.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\nspec:\n  containers:\n    - name: 'authelia'\n      env:\n        - name: 'AUTHELIA_DUO_API_SECRET_KEY_FILE'\n          value: '/app/secrets/DUO_SECRET_KEY'\n        - name: 'AUTHELIA_JWT_SECRET_FILE'\n          value: '/app/secrets/JWT_SECRET'\n        - name: 'AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD_FILE'\n          value: '/app/secrets/LDAP_PASSWORD'\n        - name: 'AUTHELIA_IDENTITY_PROVIDERS_OIDC_HMAC_SECRET_FILE'\n          value: '/app/secrets/OIDC_HMAC_SECRET'\n        - name: 'AUTHELIA_IDENTITY_PROVIDERS_OIDC_ISSUER_PRIVATE_KEY_FILE'\n          value: '/app/secrets/OIDC_ISSUER_PRIVATE_KEY'\n        - name: 'AUTHELIA_SESSION_REDIS_PASSWORD_FILE'\n          value: '/app/secrets/REDIS_PASSWORD'\n        - name: 'AUTHELIA_REDIS_HIGH_AVAILABILITY_SENTINEL_PASSWORD_FILE'\n          value: '/app/secrets/REDIS_SENTINEL_PASSWORD'\n        - name: 'AUTHELIA_SESSION_SECRET_FILE'\n          value: '/app/secrets/SESSION_SECRET'\n        - name: 'AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE'\n          value: '/app/secrets/SMTP_PASSWORD'\n        - name: 'AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE'\n          value: '/app/secrets/STORAGE_ENCRYPTION_KEY'\n        - name: 'AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE'\n          value: '/app/secrets/STORAGE_ENCRYPTION_KEY'\n      volumeMounts:\n        - mountPath: '/app/secrets'\n          name: 'secrets'\n          readOnly: true\n  volumes:\n    - name: 'secrets'\n      secret:\n        secretName: 'authelia'\n        items:\n          - key: 'DUO_SECRET_KEY'\n            path: 'DUO_SECRET_KEY'\n          - key: 'JWT_SECRET'\n            path: 'JWT_SECRET'\n          - key: 'OIDC_HMAC_SECRET'\n            path: 'OIDC_HMAC_SECRET'\n          - key: 'OIDC_ISSUER_PRIVATE_KEY'\n            path: 'OIDC_ISSUER_PRIVATE_KEY'\n          - key: 'REDIS_PASSWORD'\n            path: 'REDIS_PASSWORD'\n          - key: 'REDIS_SENTINEL_PASSWORD'\n            path: 'REDIS_SENTINEL_PASSWORD'\n          - key: 'SESSION_SECRET'\n            path: 'SESSION_SECRET'\n          - key: 'SMTP_PASSWORD'\n            path: 'SMTP_PASSWORD'\n          - key: 'STORAGE_ENCRYPTION_KEY'\n            path: 'STORAGE_ENCRYPTION_KEY'\n          - key: 'STORAGE_PASSWORD'\n            path: 'STORAGE_PASSWORD'\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Authelia, Traefik, NextCloud, and Heimdall\nDESCRIPTION: This YAML configuration sets up a Docker network and four services: Traefik as a reverse proxy, Authelia for authentication, NextCloud for file hosting, and Heimdall as an application dashboard. It includes detailed configurations for each service, including volume mappings, network settings, labels for Traefik routing, and environment variables.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/traefikv1.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nnetworks:\n  net:\n    driver: 'bridge'\nservices:\n  traefik:\n    image: 'traefik:v1.7.34-alpine'\n    container_name: 'traefik'\n    volumes:\n      - '/var/run/docker.sock:/var/run/docker.sock'\n    networks:\n      net: {}\n    labels:\n      traefik.frontend.rule: 'Host:traefik.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      traefik.port: '8081'\n    ports:\n      - '80:80'\n      - '443:443'\n      - '8081:8081'\n    restart: 'unless-stopped'\n    command:\n      - '--api'\n      - '--api.entrypoint=api'\n      - '--docker'\n      - '--defaultEntryPoints=https'\n      - '--logLevel=DEBUG'\n      - '--traefikLog=true'\n      - '--traefikLog.filepath=/var/log/traefik.log'\n      - '--entryPoints=Name:http Address::80'\n      - '--entryPoints=Name:https Address::443 TLS'\n      ## See the Forwarded Header Trust section. Comment the above two lines, then uncomment and customize the next two lines to configure the TrustedIPs.\n      # - '--entryPoints=Name:http Address::80 ForwardedHeaders.TrustedIPs:10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,fc00::/7 ProxyProtocol.TrustedIPs:10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,fc00::/7'\n      # - '--entryPoints=Name:https Address::443 TLS ForwardedHeaders.TrustedIPs:10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,fc00::/7 ProxyProtocol.TrustedIPs:10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,fc00::/7'\n      - '--entryPoints=Name:api Address::8081'\n  authelia:\n    image: 'authelia/authelia'\n    container_name: '{{< sitevar name=\"host\" nojs=\"authelia\" >}}'\n    volumes:\n      - '/path/to/authelia:/config'\n    networks:\n      net: {}\n    labels:\n      traefik.frontend.rule: 'Host:{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n    restart: 'unless-stopped'\n    environment:\n      TZ: 'Australia/Melbourne'\n  nextcloud:\n    image: 'linuxserver/nextcloud'\n    container_name: 'nextcloud'\n    volumes:\n      - '/path/to/nextcloud/config:/config'\n      - '/path/to/nextcloud/data:/data'\n    networks:\n      net: {}\n    labels:\n      traefik.frontend.rule: 'Host:nextcloud.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      traefik.frontend.auth.forward.address: '{{< sitevar name=\"tls\" nojs=\"http\" >}}://{{< sitevar name=\"host\" nojs=\"authelia\" >}}:{{< sitevar name=\"port\" nojs=\"9091\" >}}/api/authz/forward-auth'\n      ## The following commented line is for configuring the Authelia URL in the proxy. We strongly suggest this is\n      ## configured in the Session Cookies section of the Authelia configuration.\n      # traefik.frontend.auth.forward.address: '{{< sitevar name=\"tls\" nojs=\"http\" >}}://{{< sitevar name=\"host\" nojs=\"authelia\" >}}:{{< sitevar name=\"port\" nojs=\"9091\" >}}/api/authz/forward-auth?authelia_url=https%3A%2F%2F{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}%2F'\n      traefik.frontend.auth.forward.trustForwardHeader: 'true'\n      traefik.frontend.auth.forward.authResponseHeaders: 'Remote-User,Remote-Groups,Remote-Email,Remote-Name'\n    restart: 'unless-stopped'\n    environment:\n      PUID: '1000'\n      PGID: '1000'\n      TZ: 'Australia/Melbourne'\n  heimdall:\n    image: 'linuxserver/heimdall'\n    container_name: 'heimdall'\n    volumes:\n      - '/path/to/heimdall/config:/config'\n    networks:\n      net: {}\n    labels:\n      traefik.frontend.rule: 'Host:heimdall.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      traefik.frontend.auth.forward.address: '{{< sitevar name=\"tls\" nojs=\"http\" >}}://{{< sitevar name=\"host\" nojs=\"authelia\" >}}:{{< sitevar name=\"port\" nojs=\"9091\" >}}/api/authz/forward-auth/basic'\n      traefik.frontend.auth.forward.trustForwardHeader: 'true'\n      traefik.frontend.auth.forward.authResponseHeaders: 'Remote-User,Remote-Groups,Remote-Email,Remote-Name'\n    restart: 'unless-stopped'\n    environment:\n      PUID: '1000'\n      PGID: '1000'\n      TZ: 'Australia/Melbourne'\n```\n\n----------------------------------------\n\nTITLE: Generating Random Alphanumeric String with OpenSSL\nDESCRIPTION: Uses the openssl command to generate a random hexadecimal string of 64 bytes (128 characters).\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/generating-secure-values.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -hex 64\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Client for BookStack - YAML\nDESCRIPTION: This YAML snippet demonstrates the configuration of the Authelia identity provider for BookStack, defining the client credentials and required parameters for OpenID Connect integration. It includes parameters like client_id, client_name, and redirect_uris necessary for proper functionality.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/bookstack/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"identity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'bookstack'\n        client_name: 'BookStack'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://bookstack.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/oidc/callback'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Client in YAML\nDESCRIPTION: This YAML code snippet is an example of the Authelia client configuration specifically designed for Jenkins. It includes necessary details such as client ID, client secret, authorization policies, and redirect URIs required for proper OpenID Connect integration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/jenkins/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'jenkins'\n        client_name: 'Jenkins'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        require_pkce: true\n        pkce_challenge_method: 'S256'\n        redirect_uris:\n          - 'https://jenkins.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/accounts/authelia/login/callback'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n          - 'groups'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_basic'\n```\n\n----------------------------------------\n\nTITLE: Grafana Generic OAuth Configuration File\nDESCRIPTION: This INI snippet configures Grafana to use Authelia as an OpenID Connect provider. It specifies the client ID, secret, scopes, auth URLs, token URLs, and other settings required for the OIDC integration. It also sets up attribute mappings for user information.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/grafana/index.md#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n\"[server]\\nroot_url = https://grafana.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}\\n[auth.generic_oauth]\\nenabled = true\\nname = Authelia\\nicon = signin\\nclient_id = grafana\\nclient_secret = insecure_secret\\nscopes = openid profile email groups\\nempty_scopes = false\\nauth_url = https://{{< sitevar name=\\\"subdomain-authelia\\\" nojs=\\\"auth\\\" >}}.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}/api/oidc/authorization\\ntoken_url = https://{{< sitevar name=\\\"subdomain-authelia\\\" nojs=\\\"auth\\\" >}}.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}/api/oidc/token\\napi_url = https://{{< sitevar name=\\\"subdomain-authelia\\\" nojs=\\\"auth\\\" >}}.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}/api/oidc/userinfo\\nlogin_attribute_path = preferred_username\\ngroups_attribute_path = groups\\nname_attribute_path = name\\nuse_pkce = true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Authelia with Envoy Proxy\nDESCRIPTION: A Docker Compose configuration for setting up Envoy proxy with Authelia authentication and a Nextcloud application. The configuration establishes a bridge network connecting the services and mounts necessary configuration volumes.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/envoy.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnetworks:\n  net:\n    driver: 'bridge'\nservices:\n  envoy:\n    container_name: 'envoy'\n    image: 'envoyproxy/envoy:v1.24'\n    restart: 'unless-stopped'\n    networks:\n      net: {}\n    ports:\n      - '80:8080'\n      - '443:8443'\n    volumes:\n      - '${PWD}/data/envoy/envoy.yaml:/etc/envoy/envoy.yaml'\n      - '${PWD}/data/certificates:/certificates'\n  authelia:\n    container_name: '{{< sitevar name=\"host\" nojs=\"authelia\" >}}'\n    image: 'authelia/authelia'\n    restart: 'unless-stopped'\n    networks:\n      net: {}\n    volumes:\n      - '${PWD}/data/authelia/config:/config'\n    environment:\n      TZ: 'Australia/Melbourne'\n  nextcloud:\n    container_name: 'nextcloud'\n    image: 'linuxserver/nextcloud'\n    restart: 'unless-stopped'\n    networks:\n      net: {}\n    volumes:\n      - '${PWD}/data/nextcloud/config:/config'\n      - '${PWD}/data/nextcloud/data:/data'\n    environment:\n      PUID: '1000'\n      PGID: '1000'\n      TZ: 'Australia/Melbourne'\n```\n\n----------------------------------------\n\nTITLE: Applying Network-Based Policies - YAML\nDESCRIPTION: This snippet demonstrates how to configure rules for access control based on the origin networks of requests. It showcases how internal and external networks may require different authentication tolerances.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/security/access-control.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  network:\n    internal:\n      - '10.0.0.0/8'\n      - '172.16.0.0/12'\n      - '192.168.0.0/18'\naccess_control:\n  default_policy: 'two_factor'\n  rules:\n  - domain: 'secure.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n    policy: 'one_factor'\n    networks:\n    - '10.0.0.0/8'\n    - '172.16.0.0/12'\n    - '192.168.0.0/18'\n    - '112.134.145.167/32'\n  - domain: 'secure.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n    policy: 'one_factor'\n    networks:\n    - 'internal'\n    - '112.134.145.167/32'\n  - domain: 'secure.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n    policy: 'two_factor'\n```\n\n----------------------------------------\n\nTITLE: Generating Random Password Hash with Authelia CLI (Docker)\nDESCRIPTION: Uses the Authelia Docker container to generate a random alphanumeric password and its hash using the argon2 algorithm.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/generating-secure-values.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm authelia/authelia:latest authelia crypto hash generate argon2 --random --random.length 64 --random.charset alphanumeric\n```\n\n----------------------------------------\n\nTITLE: Express.js Application Code\nDESCRIPTION: This JavaScript code creates an Express.js application that integrates with Authelia as an OpenID Connect Provider.  It uses the `express-openid-connect` middleware to handle authentication and authorization, and fetches user information to display it in the response. The code assumes that TLS termination is handled by a reverse proxy.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/expressjs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js {title=\"server.js\"}\n\"use strict\";\n\nconst express = require('express');\nconst { auth, requiresAuth } = require('express-openid-connect');\nconst { randomBytes } = require('crypto');\n\nconst app = express();\n\napp.use(\n  auth({\n    authRequired: false,\n    baseURL: `${process.env.APP_BASE_URL || 'https://express.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'}`,\n    secret: process.env.SESSION_ENCRYPTION_SECRET || randomBytes(64).toString('hex'),\n    clientID: process.env.OIDC_CLIENT_ID || 'Express.js',\n    clientSecret: process.env.OIDC_CLIENT_SECRET || 'insecure_secret',\n    clientAuthMethod: 'client_secret_basic',\n    issuerBaseURL: process.env.OIDC_ISSUER || 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}',\n    pushedAuthorizationRequests: true,\n    authorizationParams: {\n      response_type: 'code',\n      scope: 'openid profile email groups',\n    },\n  })\n);\n\napp.get('/', requiresAuth(), (req, res) => {\n  req.oidc.fetchUserInfo().then((userInfo) => {\n    const data = JSON.stringify(\n      {\n        accessToken: req.oidc.accessToken,\n        refreshToken: req.oidc.refreshToken,\n        idToken: req.oidc.idToken,\n        claims: {\n          id_token: req.oidc.idToken,\n          userinfo: userInfo,\n        },\n        scopes: req.oidc.scope,\n      }, null, 2);\n\n    res.send(`<html lang='en'><body><pre><code>${data}</code></pre></body></html>`);\n  });\n});\n\napp.listen(3000, function () {\n  console.log(\"Listening on port 3000\")\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia with OpenLDAP in YAML\nDESCRIPTION: Example YAML configuration for integrating Authelia with OpenLDAP. This configuration includes authentication backend settings, connection parameters, filters for users and groups, and attribute mappings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/ldap/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthentication_backend:\n  ldap:\n    address: 'ldap://openldap:1389'\n    implementation: 'custom'\n    timeout: '5s'\n    start_tls: false\n    tls:\n      server_name: 'ldap01.example.com'\n      skip_verify: true\n      minimum_version: 'TLS1.2'\n    base_dn: 'DC=example,DC=com'\n    additional_users_dn: 'OU=users'\n    users_filter: '(&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))'\n    additional_groups_dn: 'OU=groups'\n    groups_filter: '(&(member=UID={input},OU=users,DC=example,DC=com)(objectClass=groupOfNames))'\n    user: 'UID=authelia,OU=service accounts,DC=example,DC=com'\n    password: 'SUPER_COMPLEX_PASSWORD'\n    attributes:\n      distinguished_name: 'distinguishedName'\n      username: 'uid'\n      mail: 'mail'\n      member_of: 'memberOf'\n      group_name: 'cn'\n```\n\n----------------------------------------\n\nTITLE: OIDC Lifespan Customization Example\nDESCRIPTION: This YAML configuration snippet demonstrates the customization of token lifespans for the Authelia OIDC identity provider. It showcases both global defaults and custom lifespans that can be applied to specific clients, including granular settings by token type and grant type.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/openid-connect/provider.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"identity_providers:\\n  oidc:\\n    lifespans:\\n      access_token: '1h'\\n      authorize_code: '1m'\\n      id_token: '1h'\\n      refresh_token: '90m'\\n      custom:\\n        lifespan_name:\\n          access_token: '1h'\\n          authorize_code: '1m'\\n          id_token: '1h'\\n          refresh_token: '90m'\\n          grants:\\n            authorize_code:\\n              access_token: '1h'\\n              authorize_code: '1m'\\n              id_token: '1h'\\n              refresh_token: '90m'\\n            implicit:\\n              access_token: '1h'\\n              authorize_code: '1m'\\n              id_token: '1h'\\n              refresh_token: '90m'\\n            client_credentials:\\n              access_token: '1h'\\n              authorize_code: '1m'\\n              id_token: '1h'\\n              refresh_token: '90m'\\n            refresh_token:\\n              access_token: '1h'\\n              authorize_code: '1m'\\n              id_token: '1h'\\n              refresh_token: '90m'\\n            jwt_bearer:\\n              access_token: '1h'\\n              authorize_code: '1m'\\n              id_token: '1h'\\n              refresh_token: '90m'\\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ForwardAuth in Traefik Configuration\nDESCRIPTION: The snippet configures the forward authentication implementation in a Traefik configuration file, specifying the use of the 'ForwardAuth' implementation under the authz endpoints. No external dependencies are required beyond basic YAML parsing capabilities.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/traefik.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  endpoints:\n    authz:\n      forward-auth:\n        implementation: 'ForwardAuth'\n```\n\n----------------------------------------\n\nTITLE: Defining Network and Access Control Policies in YAML\nDESCRIPTION: This YAML snippet describes network definitions and various access control rules for different domains and conditions in Authelia's configuration. It establishes policies based on domains, methods, and subject groups, indicating required factors for access.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/security/access-control.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  network:\n    internal:\n      - '10.10.0.0/16'\n      - '192.168.2.0/24'\n    vpn: '10.9.0.0/16'\n\naccess_control:\n  default_policy: 'deny'\n  rules:\n    - domain: 'public.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      policy: 'bypass'\n\n    - domain: '*.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      policy: 'bypass'\n      methods:\n        - 'OPTIONS'\n\n    - domain: 'secure.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      policy: 'one_factor'\n      networks:\n        - 'internal'\n        - 'vpn'\n        - '192.168.1.0/24'\n        - '10.0.0.1'\n\n    - domain:\n      - 'secure.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      - 'private.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      policy: 'two_factor'\n\n    - domain: 'singlefactor.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      policy: 'one_factor'\n\n    - domain: 'mx2.mail.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      subject: 'group:admins'\n      policy: 'deny'\n\n    - domain: '*.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      subject:\n        - 'group:admins'\n        - 'group:moderators'\n      policy: 'two_factor'\n\n    - domain: 'dev.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      resources:\n      - '^/groups/dev/.*$'\n      subject: 'group:dev'\n      policy: 'two_factor'\n\n    - domain: 'dev.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      resources:\n      - '^/users/john/.*$'\n      subject:\n      - ['group:dev', 'user:john']\n      - 'group:admins'\n      policy: 'two_factor'\n```\n\n----------------------------------------\n\nTITLE: Node-RED settings.js Configuration for Authelia OIDC\nDESCRIPTION: This JavaScript configuration snippet shows how to configure Node-RED to use Authelia as an OpenID Connect provider. It sets up the authentication strategy using the `passport-openidconnect` package, specifying the issuer, authorization, token, user info URLs, client credentials, callback URL, scope, and proxy settings.  The `verify` function is used to handle the user profile after successful authentication.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/node-red/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nadminAuth: {\n    type: 'strategy',\n    strategy: {\n        name: 'openidconnect',\n        label: 'Sign in with Authelia',\n        icon: 'fa-openid',\n        strategy: require('passport-openidconnect').Strategy,\n        options: {\n            issuer: 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}',\n            authorizationURL: 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc/authorization',\n            tokenURL: 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc/token',\n            userInfoURL: 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc/userinfo',\n            clientID: 'node-red',\n            clientSecret: 'insecure_secret',\n            callbackURL: 'https://node-red.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/auth/strategy/callback/',\n            scope: ['openid', 'email', 'profile', 'groups'],\n            proxy: true,\n            verify: function(issuer, profile, done) {\n                done(null, profile)\n            }\n        }\n    },\n    users: function(user) {\n        return Promise.resolve({ username: user, permissions: \"*\" });\n    }\n},\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring WeKan with Authelia - Environment Variables\nDESCRIPTION: This environment variable configuration is needed for setting up WeKan to authenticate users via Authelia's OpenID Connect provider. It includes settings such as enabling OAuth2, client ID, client secret, and endpoint configurations. These environment variables are crucial for ensuring that WeKan can communicate effectively with Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/wekan/index.md#2025-04-21_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nOAUTH2_ENABLED=true\nOAUTH2_LOGIN_STYLE=redirect\nOAUTH2_CLIENT_ID=wekan\nOAUTH2_SECRET=insecure_secret\nOAUTH2_SERVER_URL=https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\nOAUTH2_AUTH_ENDPOINT=/api/oidc/authorization\nOAUTH2_TOKEN_ENDPOINT=/api/oidc/token\nOAUTH2_USERINFO_ENDPOINT=/api/oidc/userinfo\nOAUTH2_ID_MAP=sub\nOAUTH2_USERNAME_MAP=email\nOAUTH2_FULLNAME_MAP=name\nOAUTH2_EMAIL_MAP=email\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration with Template Filters in Authelia\nDESCRIPTION: Example showing how to use template filters in Authelia configuration to inject file content and environment variables. Demonstrates using fileContent function to read a private key file and the nindent function for proper indentation.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/methods/secrets.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthentication_backend:\n  ldap:\n    address: 'ldap://{{ env \"SERVICES_SERVER\" }}'\n    tls:\n      private_key: |\n        {{- fileContent \"./test_resources/example_filter_rsa_private_key\" | nindent 8 }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OIDC Provider in YAML\nDESCRIPTION: This YAML snippet provides an example configuration for Authelia's OIDC client setup, tailoring for ownCloud Infinite Scale integration. It adjusts token lifespans to optimize re-authentication intervals and outlines client configurations including IDs, secrets, scopes, and redirect URIs.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/ocis/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    access_token_lifespan: '2d'\n    refresh_token_lifespan: '3d'\n\n    cors:\n      endpoints:\n        - 'authorization'\n        - 'token'\n        - 'revocation'\n        - 'introspection'\n        - 'userinfo'\n    clients:\n      - client_id: 'ownCloud'\n        client_name: 'ownCloud Infinite Scale'\n        public: true\n        redirect_uris:\n          - 'https://owncloud.home.yourdomain.com/'\n          - 'https://owncloud.home.yourdomain.com/oidc-callback.html'\n          - 'https://owncloud.home.yourdomain.com/oidc-silent-redirect.html'\n      - client_id: 'xdXOt13JKxym1B1QcEncf2XDkLAexMBFwiT9j6EfhhHFJhs2KM9jbjTmf8JBXE69'\n        client_name: 'ownCloud desktop client'\n        client_secret: 'UBntmLjC2yYCeHwsyj73Uwo9TAaecAetRwMw0xYcvNL9yRdLSUi0hUAHfvCHFeFh'\n        scopes:\n          - 'openid'\n          - 'groups'\n          - 'profile'\n          - 'email'\n          - 'offline_access'\n        redirect_uris:\n          - 'http://127.0.0.1'\n          - 'http://localhost'\n      - client_id: 'e4rAsNUSIUs0lF4nbv9FmCeUkTlV9GdgTLDH1b5uie7syb90SzEVrbN7HIpmWJeD'\n        client_name: 'ownCloud Android app'\n        client_secret: 'dInFYGV33xKzhbRmpqQltYNdfLdJIfJ9L5ISoKhNoT9qZftpdWSP71VrpGR9pmoD'\n        scopes:\n          - 'openid'\n          - 'groups'\n          - 'profile'\n          - 'email'\n          - 'offline_access'\n        redirect_uris:\n          - 'oc://android.owncloud.com'\n      - client_id: 'mxd5OQDk6es5LzOzRvidJNfXLUZS2oN3oUFeXPP8LpPrhx3UroJFduGEYIBOxkY1'\n        client_name: 'ownCloud iOS app'\n        client_secret: 'KFeFWWEZO9TkisIQzR3fo7hfiMXlOpaqP8CFuTbSHzV1TUuGECglPxpiVKJfOXIx'\n        scopes:\n          - 'openid'\n          - 'groups'\n          - 'profile'\n          - 'email'\n          - 'offline_access'\n        redirect_uris:\n          - 'oc://ios.owncloud.com'\n          - 'oc.ios://ios.owncloud.com'\n```\n\n----------------------------------------\n\nTITLE: Configuring HAProxy with Authelia (Standard Example)\nDESCRIPTION: This snippet demonstrates a standard HAProxy configuration for integrating with Authelia. It includes global settings, frontend configuration with SSL termination, backend definitions, and Authelia integration using the auth-request Lua script.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/haproxy.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nglobal\n    # Path to haproxy-lua-http, below example assumes /usr/local/etc/haproxy/haproxy-lua-http/http.lua\n    lua-prepend-path /usr/local/etc/haproxy/?/http.lua\n    # Path to haproxy-auth-request\n    lua-load /usr/local/etc/haproxy/auth-request.lua\n    log stdout format raw local0 debug\n\ndefaults\n    mode http\n    log global\n    option httplog\n\nfrontend fe_http\n    bind *:443 ssl crt {{< sitevar name=\"domain\" nojs=\"example.com\" >}}.pem\n\n    ## Trusted Proxies.\n    http-request del-header X-Forwarded-For\n\n    ## Comment the above directive and the two directives below to enable the trusted proxies ACL.\n    # acl src-trusted_proxies src -f trusted_proxies.src.acl\n    # http-request del-header X-Forwarded-For if !src-trusted_proxies\n\n    ## Ensure X-Forwarded-For is set for the auth request.\n    acl hdr-xff_exists req.hdr(X-Forwarded-For) -m found\n    http-request set-header X-Forwarded-For %[src] if !hdr-xff_exists\n    option forwardfor\n\n    # Host ACLs\n    acl protected-frontends hdr(Host) -m reg -i ^(?i)(nextcloud|heimdall)\\.example\\.com\n    acl host-authelia hdr(Host) -i {{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\n    acl host-nextcloud hdr(Host) -i nextcloud.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\n    acl host-heimdall hdr(Host) -i heimdall.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\n\n    http-request set-var(req.scheme) str(https) if { ssl_fc }\n    http-request set-var(req.scheme) str(http) if !{ ssl_fc }\n    http-request set-var(req.questionmark) str(?) if { query -m found }\n\n    # Required Headers\n    http-request set-header X-Forwarded-Method %[method]\n    http-request set-header X-Forwarded-Proto  %[var(req.scheme)]\n    http-request set-header X-Forwarded-Host   %[req.hdr(Host)]\n    http-request set-header X-Forwarded-URI    %[path]%[var(req.questionmark)]%[query]\n\n    # Protect endpoints with haproxy-auth-request and Authelia\n    http-request lua.auth-intercept be_authelia /api/authz/forward-auth HEAD * remote-user,remote-groups,remote-name,remote-email - if protected-frontends\n    http-request deny if protected-frontends !{ var(txn.auth_response_successful) -m bool } { var(txn.auth_response_code) -m int 403 }\n    http-request redirect location %[var(txn.auth_response_location)] if protected-frontends !{ var(txn.auth_response_successful) -m bool }\n\n    # Authelia backend route\n    use_backend be_authelia if host-authelia\n\n    # Service backend route(s)\n    use_backend be_nextcloud if host-nextcloud\n    use_backend be_heimdall if host-heimdall\n\nbackend be_authelia\n    server authelia {{< sitevar name=\"host\" nojs=\"authelia\" >}}:{{< sitevar name=\"port\" nojs=\"9091\" >}}\n\nbackend be_nextcloud\n    ## Pass the Set-Cookie response headers to the user.\n    acl set_cookie_exist var(req.auth_response_header.set_cookie) -m found\n    http-response set-header Set-Cookie %[var(req.auth_response_header.set_cookie)] if set_cookie_exist\n\n    server nextcloud nextcloud:443 ssl verify none\n\nbackend be_heimdall\n    ## Pass the Set-Cookie response headers to the user.\n    acl set_cookie_exist var(req.auth_response_header.set_cookie) -m found\n    http-response set-header Set-Cookie %[var(req.auth_response_header.set_cookie)] if set_cookie_exist\n\n    server heimdall heimdall:443 ssl verify none\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Authelia with NGINX\nDESCRIPTION: This Docker Compose YAML configuration defines a setup of services including NGINX, Authelia, Nextcloud, and Whoami. Ensure each service is correctly configured with appropriate ports, volumes, and environment variables.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx.md#2025-04-21_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n---\nnetworks:\n  net:\n    driver: 'bridge'\n\nservices:\n  nginx:\n    container_name: 'nginx'\n    image: 'lscr.io/linuxserver/nginx'\n    restart: 'unless-stopped'\n    networks:\n      net:\n        aliases:\n          - '{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n    ports:\n      - '80:80/tcp'\n      - '443:443/tcp'\n      - '443:443/udp'\n    volumes:\n      - '${PWD}/data/nginx/snippets:/config/nginx/snippets'\n      - '${PWD}/data/nginx/site-confs:/config/nginx/site-confs'\n    environment:\n      TZ: 'Australia/Melbourne'\n      DOCKER_MODS: 'linuxserver/mods:nginx-proxy-confs'\n  authelia:\n    container_name: '{{< sitevar name=\"host\" nojs=\"authelia\" >}}'\n    image: 'authelia/authelia'\n    restart: 'unless-stopped'\n    networks:\n      net: {}\n    volumes:\n      - '${PWD}/data/authelia/config:/config'\n    environment:\n      TZ: 'Australia/Melbourne'\n  nextcloud:\n    container_name: 'nextcloud'\n    image: 'lscr.io/linuxserver/nextcloud'\n    restart: 'unless-stopped'\n    networks:\n      net: {}\n    volumes:\n      - '${PWD}/data/nextcloud/config:/config'\n      - '${PWD}/data/nextcloud/data:/data'\n    environment:\n      PUID: '1000'\n      PGID: '1000'\n      TZ: 'Australia/Melbourne'\n  whoami:\n    container_name: 'whoami'\n    image: 'docker.io/traefik/whoami'\n    restart: 'unless-stopped'\n    networks:\n      net: {}\n    environment:\n      TZ: 'Australia/Melbourne'\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OpenID Connect OIDC Client\nDESCRIPTION: This YAML snippet provides a configuration example for an Authelia client integrating with Kasm Workspaces using OpenID Connect. It requires Authelia and Kasm Workspaces as dependencies. Key parameters include the client ID, client secret, and redirect URIs to ensure proper OpenID Connect authentication flows. The code specifies scopes such as openid, profile, groups, and email.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/kasm-workspaces/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'kasm'\n        client_name: 'Kasm Workspaces'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://kasm.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc_callback'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'groups'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia for GitLab Integration\nDESCRIPTION: This YAML configuration sets up Authelia to function as an OpenID Connect 1.0 provider for GitLab. Dependencies include a properly set up Authelia environment and GitLab configured to use OpenID Connect authentication. The configuration specifies the client ID, client secret, redirect URIs, and scopes required for the integration. Inputs include the Authelia and GitLab instance URLs, and the expected output is a successful authentication flow for users accessing GitLab.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/gitlab/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'gitlab'\n        client_name: 'GitLab'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://gitlab.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/users/auth/openid_connect/callback'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'groups'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_basic'\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Settings in Authelia YAML Configuration\nDESCRIPTION: Example YAML configuration for Authelia sessions that defines the session secret, cookie name, expiration times, and domain configuration. It shows how to set up the cookie behavior including SameSite attributes and remember me functionality.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/session/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsession:\n  secret: 'insecure_session_secret'\n  name: 'authelia_session'\n  same_site: 'lax'\n  inactivity: '5m'\n  expiration: '1h'\n  remember_me: '1M'\n  cookies:\n    - domain: '{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      authelia_url: 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      default_redirection_url: 'https://www.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      name: 'authelia_session'\n      same_site: 'lax'\n      inactivity: '5m'\n      expiration: '1h'\n      remember_me: '1d'\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Storage in Authelia\nDESCRIPTION: Main configuration example showing all available PostgreSQL storage provider options including encryption, connection details, TLS configuration and certificate chain settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/storage/postgres.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  encryption_key: 'a_very_important_secret'\n  postgres:\n    address: 'tcp://127.0.0.1:5432'\n    servers: []\n    database: 'authelia'\n    schema: 'public'\n    username: 'authelia'\n    password: 'mypassword'\n    timeout: '5s'\n    tls:\n      server_name: 'postgres.example.com'\n      skip_verify: false\n      minimum_version: 'TLS1.2'\n      maximum_version: 'TLS1.3'\n      certificate_chain: |\n        -----BEGIN CERTIFICATE-----\n        ...\n        -----END CERTIFICATE-----\n        -----BEGIN CERTIFICATE-----\n        ...\n        -----END CERTIFICATE-----\n      private_key: |\n        -----BEGIN PRIVATE KEY-----\n        ...\n        -----END PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Protecting Nextcloud with Authelia in NGINX\nDESCRIPTION: NGINX configuration for securing Nextcloud with Authelia authentication. Includes HTTP to HTTPS redirection and integration with Authelia's authentication request mechanism.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx.md#2025-04-21_snippet_5\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80;\n    server_name nextcloud.*;\n\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name nextcloud.*;\n\n    include /config/nginx/snippets/ssl.conf;\n    include /config/nginx/snippets/authelia-location.conf;\n\n    set $upstream http://nextcloud;\n\n    location / {\n        include /config/nginx/snippets/proxy.conf;\n        include /config/nginx/snippets/authelia-authrequest.conf;\n        proxy_pass $upstream;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Forward Auth Configuration in Caddy for Authelia\nDESCRIPTION: This advanced Caddyfile configuration demonstrates explicit forward authentication with Authelia. It includes settings for the Authelia portal and a protected endpoint (Nextcloud in this example). The configuration handles authentication requests and forwards appropriate headers to the backend.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/caddy.md#2025-04-21_snippet_5\n\nLANGUAGE: caddyfile\nCODE:\n```\n## Uncomment & adjust the following line to configure specific ranges which should be considered as trustworthy.\n## It is important to read the following document before enabling this section:\n##     https://www.authelia.com/integration/proxies/caddy/#trusted-proxies\n# trusted_proxies 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16 fc00::/7\n\n# Authelia Portal.\n{{</* sitevar name=\"subdomain-authelia\" nojs=\"auth\" */>}}.{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}} {\n        reverse_proxy {{</* sitevar name=\"host\" nojs=\"authelia\" */>}}:{{</* sitevar name=\"port\" nojs=\"9091\" */>}}\n}\n\n# Protected Endpoint.\nnextcloud.{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}} {\n        reverse_proxy {{</* sitevar name=\"host\" nojs=\"authelia\" */>}}:{{</* sitevar name=\"port\" nojs=\"9091\" */>}} {\n                method GET\n                rewrite \"/api/authz/forward-auth?authelia_url=https://{{</* sitevar name=\"subdomain-authelia\" nojs=\"auth\" */>}}.{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}/\"\n\n                header_up X-Forwarded-Method {method}\n                header_up X-Forwarded-URI {uri}\n\n                ## If the auth request:\n                ##   1. Responds with a status code IN the 200-299 range.\n                ## Then:\n                ##   1. Proxy the request to the backend.\n                ##   2. Copy the relevant headers from the auth request and provide them to the backend.\n                @good status 2xx\n                handle_response @good {\n                        request_header Remote-User {http.reverse_proxy.header.Remote-User}\n                        request_header Remote-Groups {http.reverse_proxy.header.Remote-Groups}\n                        request_header Remote-Email {http.reverse_proxy.header.Remote-Email}\n                        request_header Remote-Name {http.reverse_proxy.header.Remote-Name}\n                }\n        }\n\n        reverse_proxy nextcloud:80\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Access Control with Static and Regex Domain - YAML\nDESCRIPTION: This snippet illustrates membership rule definitions using both static and regex domains. It specifies the resources that required one-factor policy based on defined domain criteria.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/security/access-control.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\naccess_control:\n  rules:\n  - domain: 'protected.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n  - domain_regex: '^(img|data)-private\\.{{< sitevar name=\"domain\" format=\"regex\" nojs=\"example\\.com\" >}}'\n    policy: 'one_factor'\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia ForwardAuth in YAML\nDESCRIPTION: These YAML configurations define the ForwardAuth implementation for Authelia's Authz endpoints, used in proxy environments like HAProxy. Key parameters include defining the ForwardAuth implementation and session cookies for domain management. Ensure HAProxy is set to the correct version and that necessary Lua dependencies are installed.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/haproxy.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  endpoints:\n    authz:\n      forward-auth:\n        implementation: 'ForwardAuth'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsession:\n  cookies:\n    - domain: '{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\n      authelia_url: 'https://{{</* sitevar name=\"subdomain-authelia\" nojs=\"auth\" */>}}.{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\n      default_redirection_url: 'https://www.{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_redirection_url: 'https://www.{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\nsession:\n  domain: '{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Dynamic Configuration for Authelia Integration\nDESCRIPTION: This YAML file configures Traefik's dynamic settings, including TLS options, middlewares for Authelia integration, routers for various services, and server transports for mutual TLS. It sets up authentication and routing rules for different services.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/traefik.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\nentryPoints:\n  web:\n    proxyProtocol:\n      insecure: false\n      trustedIPs: []\n    forwardedHeaders:\n      insecure: false\n      trustedIPs: []\n  websecure:\n    proxyProtocol:\n      insecure: false\n      trustedIPs: []\n    forwardedHeaders:\n      insecure: false\n      trustedIPs: []\ntls:\n  options:\n    modern:\n      minVersion: 'VersionTLS13'\n    intermediate:\n      minVersion: 'VersionTLS12'\n      cipherSuites:\n        - 'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256'\n        - 'TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256'\n        - 'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384'\n        - 'TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384'\n        - 'TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305'\n        - 'TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305'\nhttp:\n  middlewares:\n    authelia:\n      forwardAuth:\n        address: '{{< sitevar name=\"tls\" nojs=\"http\" >}}://{{< sitevar name=\"host\" nojs=\"authelia\" >}}:{{< sitevar name=\"port\" nojs=\"9091\" >}}/api/authz/forward-auth'\n        trustForwardHeader: true\n        authResponseHeaders:\n          - 'Remote-User'\n          - 'Remote-Groups'\n          - 'Remote-Email'\n          - 'Remote-Name'\n        tls:\n          ca: '/certificates/ca.public.crt'\n          cert: '/certificates/traefik.public.crt'\n          key: '/certificates/traefik.private.pem'\n    authelia-basic:\n      forwardAuth:\n        address: '{{< sitevar name=\"tls\" nojs=\"http\" >}}://{{< sitevar name=\"host\" nojs=\"authelia\" >}}:{{< sitevar name=\"port\" nojs=\"9091\" >}}/api/verify?auth=basic'\n        trustForwardHeader: true\n        authResponseHeaders:\n          - 'Remote-User'\n          - 'Remote-Groups'\n          - 'Remote-Email'\n          - 'Remote-Name'\n        tls:\n          ca: '/certificates/ca.public.crt'\n          cert: '/certificates/traefik.public.crt'\n          key: '/certificates/traefik.private.pem'\n  routers:\n    traefik:\n      rule: 'Host(`traefik.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}`)'\n      entryPoints: 'websecure'\n      service: 'api@internal'\n      middlewares:\n        - 'authelia@file'\n      tls:\n        options: 'modern@file'\n        certResolver: 'default'\n        domains:\n          - main: '{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n            sans:\n              - '*.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n    whoami:\n      rule: 'Host(`whoami.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}`)'\n      entryPoints: 'websecure'\n      service: 'whoami-net@docker'\n      middlewares:\n        - 'authelia@file'\n      tls:\n        options: 'modern@file'\n        certResolver: 'default'\n        domains:\n          - main: '{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n            sans:\n              - '*.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n    nextcloud:\n      rule: 'Host(`nextcloud.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}`)'\n      entryPoints: 'websecure'\n      service: 'nextcloud-net@docker'\n      middlewares:\n        - 'authelia@file'\n      tls:\n        options: 'modern@file'\n        certResolver: 'default'\n        domains:\n          - main: '{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n            sans:\n              - '*.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n    heimdall:\n      rule: 'Host(`heimdall.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}`)'\n      entryPoints: 'websecure'\n      service: 'heimdall-net@docker'\n      middlewares:\n        - 'authelia-basic@file'\n      tls:\n        options: 'modern@file'\n        certResolver: 'default'\n        domains:\n          - main: '{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n            sans:\n              - '*.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n    authelia:\n      rule: 'Host(`{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}`)'\n      entryPoints: 'websecure'\n      service: 'authelia@file'\n      tls:\n        options: 'modern@file'\n        certResolver: 'default'\n        domains:\n          - main: '{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n            sans:\n              - '*.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n  services:\n    authelia:\n      loadBalancer:\n        servers:\n          - url: '{{< sitevar name=\"tls\" nojs=\"http\" >}}://{{< sitevar name=\"host\" nojs=\"authelia\" >}}:{{< sitevar name=\"port\" nojs=\"9091\" >}}/'\n        serversTransport: 'autheliaMutualTLS'\n  serversTransports:\n    autheliaMutualTLS:\n      certificates:\n        - certFile: '/certificates/traefik.public.crt'\n          keyFile: '/certificates/traefik.private.pem'\n      rootCAs:\n        - '/certificates/ca.public.crt'\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Protected Ingress Resources with Authelia Middleware\nDESCRIPTION: This Kubernetes Ingress resource example demonstrates how to protect an application with Authelia authentication. It uses annotations to reference the ForwardAuth middleware defined earlier, configuring TLS and path-based routing.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/kubernetes/traefik-ingress.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: 'networking.k8s.io/v1'\nkind: 'Ingress'\nmetadata:\n  name: 'app'\n  namespace: 'default'\n  annotations:\n    traefik.ingress.kubernetes.io/router.entryPoints: 'websecure' # name of your https entry point (default is 'websecure')\n    traefik.ingress.kubernetes.io/router.middlewares: 'default-forwardauth-authelia@kubernetescrd' # name of your middleware, as defined in your middleware.yml\n    traefik.ingress.kubernetes.io/router.tls: 'true'\nspec:\n  rules:\n    - host: 'app.example.com'\n      http:\n        paths:\n          - path: '/bar'\n            pathType: 'Prefix'\n            backend:\n              service:\n                name:  'app'\n                port:\n                  number: 80\n...\n```\n\n----------------------------------------\n\nTITLE: Authelia Location Block Configuration for NGINX\nDESCRIPTION: NGINX configuration snippet that defines the internal authorization endpoint used by Authelia. This block handles the authentication requests and forwards them to the Authelia service.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx.md#2025-04-21_snippet_12\n\nLANGUAGE: nginx\nCODE:\n```\nset $upstream_authelia {{< sitevar name=\"tls\" nojs=\"http\" >}}://{{< sitevar name=\"host\" nojs=\"authelia\" >}}:{{< sitevar name=\"port\" nojs=\"9091\" >}}/api/authz/auth-request;\n\n## Virtual endpoint created by nginx to forward auth requests.\nlocation /internal/authelia/authz {\n    ## Essential Proxy Configuration\n    internal;\n    proxy_pass $upstream_authelia;\n\n    ## Headers\n    ## The headers starting with X-* are required.\n    proxy_set_header X-Original-Method $request_method;\n    proxy_set_header X-Original-URL $scheme://$http_host$request_uri;\n    proxy_set_header X-Forwarded-For $remote_addr;\n    proxy_set_header Content-Length \"\";\n    proxy_set_header Connection \"\";\n\n    ## Basic Proxy Configuration\n    proxy_pass_request_body off;\n    proxy_next_upstream error timeout invalid_header http_500 http_502 http_503; # Timeout if the real server is dead\n    proxy_redirect http:// $scheme://;\n    proxy_http_version 1.1;\n    proxy_cache_bypass $cookie_session;\n    proxy_no_cache $cookie_session;\n    proxy_buffers 4 32k;\n    client_body_buffer_size 128k;\n\n    ## Advanced Proxy Configuration\n    send_timeout 5m;\n    proxy_read_timeout 240;\n    proxy_send_timeout 240;\n    proxy_connect_timeout 240;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Middleware for Traefik in Docker Compose YAML\nDESCRIPTION: This YAML snippet demonstrates how to define the Authelia middleware on a Traefik container in a Docker Compose file. It includes settings for forward authentication, trusted headers, and response headers. The configuration uses placeholders for TLS, host, port, and domain values.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/traefik.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik.http.middlewares.authelia.forwardAuth.address: '{{< sitevar name=\"tls\" nojs=\"http\" >}}://{{< sitevar name=\"host\" nojs=\"authelia\" >}}:{{< sitevar name=\"port\" nojs=\"9091\" >}}/api/authz/forward-auth'\n## The following commented line is for configuring the Authelia URL in the proxy. We strongly suggest this is\n## configured in the Session Cookies section of the Authelia configuration.\n# traefik.http.middlewares.authelia.forwardAuth.address: '{{< sitevar name=\"tls\" nojs=\"http\" >}}://{{< sitevar name=\"host\" nojs=\"authelia\" >}}:{{< sitevar name=\"port\" nojs=\"9091\" >}}/api/authz/forward-auth?authelia_url=https%3A%2F%2F{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}%2F'\ntraefik.http.middlewares.authelia.forwardAuth.trustForwardHeader: 'true'\ntraefik.http.middlewares.authelia.forwardAuth.authResponseHeaders: 'Remote-User,Remote-Groups,Remote-Email,Remote-Name'\n```\n\n----------------------------------------\n\nTITLE: Bypassing Authentication for Specific HTTP Methods - YAML\nDESCRIPTION: This snippet specifies access control rules for certain HTTP methods. It primarily is aimed at allowing OPTIONS requests to bypass authentication under the specified domain domain.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/security/access-control.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\naccess_control:\n  rules:\n  - domain: '{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n    policy: 'bypass'\n    methods:\n    - 'OPTIONS'\n```\n\n----------------------------------------\n\nTITLE: WebSocket Configuration for NGINX with Authelia\nDESCRIPTION: NGINX configuration snippet for enabling WebSocket support with Authelia. Required for applications that use WebSockets like Portainer's web interface.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx.md#2025-04-21_snippet_11\n\nLANGUAGE: nginx\nCODE:\n```\n## WebSocket Example\nproxy_set_header Upgrade $http_upgrade;\nproxy_set_header Connection \"upgrade\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OIDC Client for Proxmox\nDESCRIPTION: YAML configuration for setting up an OpenID Connect client in Authelia specifically for Proxmox authentication. Includes client ID, secret, redirect URIs, and authentication policies.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/proxmox/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    clients:\n      - client_id: 'proxmox'\n        client_name: 'Proxmox'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'\n        public: false\n        authorization_policy: 'two_factor'\n        require_pkce: true\n        pkce_challenge_method: 'S256'\n        redirect_uris:\n          - 'https://proxmox.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n```\n\n----------------------------------------\n\nTITLE: Generating Argon2 Hash (Interactive) Bare-Metal\nDESCRIPTION: This bash command demonstrates how to generate an Argon2 password hash interactively using the Authelia binary directly. It runs the `authelia crypto hash generate argon2` command, prompting the user for the password. This requires the Authelia binary to be installed and in the system's PATH.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/passwords.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"authelia crypto hash generate argon2\"\n```\n\n----------------------------------------\n\nTITLE: Authelia Client Configuration for Grafana\nDESCRIPTION: This YAML snippet configures Authelia as an OpenID Connect provider for Grafana. It defines the client ID, secret, redirect URIs, scopes, and other necessary settings for the OIDC integration. The client secret is a PBKDF2-SHA512 hash.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/grafana/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"identity_providers:\\n  oidc:\\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\\n    ## See: https://www.authelia.com/c/oidc\\n    clients:\\n      - client_id: 'grafana'\\n        client_name: 'Grafana'\\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\\n        public: false\\n        authorization_policy: 'two_factor'\\n        require_pkce: true\\n        pkce_challenge_method: 'S256'\\n        redirect_uris:\\n          - 'https://grafana.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}/login/generic_oauth'\\n        scopes:\\n          - 'openid'\\n          - 'profile'\\n          - 'groups'\\n          - 'email'\\n        userinfo_signed_response_alg: 'none'\\n        token_endpoint_auth_method: 'client_secret_basic'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Token Content Encryption\nDESCRIPTION: Sets the content encryption algorithm for authorization responses, with a default of A128CBC-HS256 and considerations about token encoding\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/openid-connect/clients.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\naccess_token_encrypted_response_enc\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Client with JWKS in Authelia\nDESCRIPTION: Example YAML configuration for an OpenID Connect client in Authelia, demonstrating the use of jwks_uri and jwks options. It shows how to specify the JWKS URI and manually configure JSON Web Keys with key ID, algorithm, usage, and certificate chain.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/openid-connect/clients.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    clients:\n      - client_id: 'example'\n        jwks_uri: 'https://oidc.example.com:8080/oauth2/jwks.json'\n        jwks:\n          - key_id: 'example'\n            algorithm: 'RS256'\n            use: 'sig'\n            key: |\n              -----BEGIN RSA PUBLIC KEY-----\n              ...\n              -----END RSA PUBLIC KEY-----\n            certificate_chain: |\n              -----BEGIN CERTIFICATE-----\n              ...\n              -----END CERTIFICATE-----\n              -----BEGIN CERTIFICATE-----\n              ...\n              -----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Token Encryption Key ID\nDESCRIPTION: Sets the key ID for encrypting Access Tokens, enabling JWT encoding with specific validation requirements\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/openid-connect/clients.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\naccess_token_encrypted_response_key_id\n```\n\n----------------------------------------\n\nTITLE: NGINX Configuration Snippet for Advanced Proxy Hosts\nDESCRIPTION: This NGINX configuration snippet illustrates how to set up a location block for proxying requests to Authelia, enabling it to authenticate incoming connections. This incorporates essential include statements for configuration snippets and establishes a proxy pass directive.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx-proxy-manager/index.md#2025-04-21_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nlocation / {\n    include /snippets/proxy.conf;\n    proxy_pass $forward_scheme://$server:$port;\n}\n```\n\n----------------------------------------\n\nTITLE: Access Control for Group-based Policies - YAML\nDESCRIPTION: This snippet outlines access control rules specifically for users in the 'super-admin' group. It highlights different representations leading to the same logical rules in the context of one-factor authentication.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/security/access-control.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\naccess_control:\n  rules:\n  - domain: '{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n    policy: 'one_factor'\n    subject: 'group:super-admin'\n  - domain: '{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n    policy: 'one_factor'\n    subject:\n    - 'group:super-admin'\n  - domain: '{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n    policy: 'one_factor'\n    subject:\n    - ['group:super-admin']\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra LDAP Attributes in Authelia\nDESCRIPTION: Example YAML configuration showing how to load custom attributes from a directory server into Authelia. This example demonstrates loading a server attribute named 'exampleServerAttribute' as 'example_authelia_attribute' with integer type and single value specification.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/first-factor/ldap.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nauthentication_backend:\n  ldap:\n    attributes:\n      extra:\n        exampleServerAttribute:\n          name: 'example_authelia_attribute'\n          multi_valued: false\n          value_type: 'integer'\n```\n\n----------------------------------------\n\nTITLE: Memory Usage Estimation Command\nDESCRIPTION: This bash command estimates the amount of memory to be utilized by Argon2 or Scrypt algorithms by using stress-ng to simulate memory allocation. It calculates 90% of free memory and uses that value with the stress-ng command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/passwords.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"stress-ng --vm-bytes $(awk '/MemFree/{printf \\\"%d\\\\n\\\", $2 * 0.9;}' < /proc/meminfo)k --vm-keep -m 1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Guacamole for Authelia - YAML\nDESCRIPTION: This YAML configuration sets up Apache Guacamole to use Authelia as an OpenID Connect 1.0 Provider. It specifies the OpenID client ID, scopes, issuer URI, JWKS endpoint, authorization endpoint, redirect URI, and claim types for username and groups.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/apache-guacamole/index.md#2025-04-21_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n\"openid-client-id: guacamole\\nopenid-scope: openid profile groups email\\nopenid-issuer: https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\\nopenid-jwks-endpoint: https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/jwks.json\\nopenid-authorization-endpoint: https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc/authorization?state=1234abcedfdhf\\nopenid-redirect-uri: https://guacamole.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\\nopenid-username-claim-type: preferred_username\\nopenid-groups-claim-type: groups\"\n```\n\n----------------------------------------\n\nTITLE: Authelia OIDC Client Configuration for Mastodon\nDESCRIPTION: YAML configuration defining Authelia's OpenID Connect client settings for Mastodon, including client ID, secret, authorization policy, and redirect URIs\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/mastodon/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    clients:\n      - client_id: 'mastodon'\n        client_name: 'Mastodon'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://mastodon.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/auth/auth/openid_connect/callback'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n```\n\n----------------------------------------\n\nTITLE: Rendering Account Event Notification Template in Go\nDESCRIPTION: Go template for generating dynamic email notifications with personalized event details, recipient information, and security guidance\nSOURCE: https://github.com/authelia/authelia/blob/master/internal/templates/embed/notification/Event.txt#2025-04-21_snippet_0\n\nLANGUAGE: go/template\nCODE:\n```\n{{ .Title }}\n\nHi {{ .DisplayName }},\n\nThis notification has been sent to you in order to notify you that {{ .BodyPrefix }} {{ .BodyEvent }} {{ .BodySuffix }}\n\n--------------------------------------------------------------------------------\n\nEvent Details:\n\n{{- $keys := sortAlpha (keys .Details) }}{{- range $key := $keys }}\n\n{{ $key }}: {{ index $.Details $key }}\n\n{{ end }}\n\n--------------------------------------------------------------------------------\n\nThis notification was intended for {{ .DisplayName }}. This event notification was generated due to an action from {{ .RemoteIP }}. If you do not believe that your actions could have triggered this event or if you are concerned about your account's safety, please change your password and reach out to an administrator.\n\nPowered by Authelia https://www.authelia.com\n```\n\n----------------------------------------\n\nTITLE: Running Docker with Configuration Filters by Environment\nDESCRIPTION: Example showing how to run Authelia in Docker with a template filter applied to the configuration file using environment variables.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/methods/files.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -e X_AUTHELIA_CONFIG_FILTERS=template -e X_AUTHELIA_CONFIG=/config/configuration.yml authelia/authelia:latest authelia\n```\n\n----------------------------------------\n\nTITLE: HTTP Basic Authentication with Authelia in NGINX\nDESCRIPTION: NGINX configuration for implementing HTTP basic authentication with Authelia for Nextcloud. Uses special endpoints for basic authentication instead of the portal redirection flow.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx.md#2025-04-21_snippet_8\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80;\n    server_name nextcloud.*;\n\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name nextcloud.*;\n\n    include /config/nginx/snippets/ssl.conf;\n    include /config/nginx/snippets/authelia-location-basic.conf; # Use the \"basic\" endpoint\n\n    set $upstream https://nextcloud;\n\n    location / {\n        include /config/nginx/snippets/proxy.conf;\n        include /config/nginx/snippets/authelia-authrequest-basic.conf;\n        proxy_pass $upstream;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Terrakube Dex Connector Configuration\nDESCRIPTION: This YAML snippet configures a connector in Terrakube's Dex configuration. It specifies the OpenID Connect settings, including the issuer URL (Authelia), client ID, client secret, and redirect URI.  This configuration enables Terrakube to utilize Authelia for user authentication.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/terrakube/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nconnectors:\n  - type: oidc\n    id: TerrakubeClient\n    name: TerrakubeClient\n    config:\n      issuer: \"https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\"\n      clientID: \"terrakube\"\n      clientSecret: \"insecure_secret\"\n      redirectURI: \"https://terrakube.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/dex/callback\"\n      insecureEnableGroups: true\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorization Policies for OpenID Connect in Authelia YAML Configuration\nDESCRIPTION: Example YAML configuration showing how to define and apply an authorization policy for OpenID Connect clients. The policy denies access to users in the 'services' group from specific network ranges, with a default two-factor policy for everyone else.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/openid-connect/provider.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    authorization_policies:\n      policy_name:\n        default_policy: 'two_factor'\n        rules:\n          - policy: 'deny'\n            subject: 'group:services'\n            networks:\n              - '192.168.1.0/24'\n              - '192.168.2.51'\n    clients:\n      - client_id: 'client_with_policy_name'\n        authorization_policy: 'policy_name'\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Client with PKCE and Authorization Code\nDESCRIPTION: This YAML snippet configures a public OIDC client requiring PKCE with 'S256' and specifying necessary scopes and audiences. It sets response mode to 'form_post' and ensures explicit consent mode.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/oauth-2.0-bearer-token-usage.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    clients:\n      - client_id: 'example-one'\n        public: true\n        require_pkce: true\n        pkce_challenge_method: 'S256'\n        redirect_uris:\n          - 'http://localhost/callback'\n        scopes:\n          - 'offline_access'\n          - 'authelia.bearer.authz'\n        audience:\n          - 'https://app1.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n          - 'https://app2.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n        grant_types:\n          - 'authorization_code'\n          - 'refresh_token'\n        response_types:\n          - 'code'\n        response_modes:\n          - 'form_post'\n        consent_mode: 'explicit'\n        require_pushed_authorization_requests: true\n        token_endpoint_auth_method: 'none'\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite3 Storage Provider in Authelia\nDESCRIPTION: Basic YAML configuration for setting up SQLite3 as the storage provider in Authelia. Includes the required encryption key for secure storage and the local path where the SQLite3 database file will be stored or created.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/storage/sqlite.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  encryption_key: 'a_very_important_secret'\n  local:\n    path: '/config/db.sqlite3'\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OIDC Client\nDESCRIPTION: This YAML snippet configures an Authelia OIDC client for Argo CD. It defines the client ID, secret (digest), authorization policy, redirect URIs, and scopes. The `argocd-cli` configuration is specifically for the Argo CD CLI client, enabling offline access.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/argocd/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'argocd'\n        client_name: 'Argo CD'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://argocd.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/auth/callback'\n        scopes:\n          - 'openid'\n          - 'groups'\n          - 'email'\n          - 'profile'\n        userinfo_signed_response_alg: 'none'\n      - client_id: 'argocd-cli'\n        client_name: 'Argo CD (CLI)'\n        public: true\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'http://localhost:8085/auth/callback'\n        scopes:\n          - 'openid'\n          - 'groups'\n          - 'email'\n          - 'profile'\n          - 'offline_access'\n        userinfo_signed_response_alg: 'none'\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Fail2Ban Jail for Authelia\nDESCRIPTION: This INI snippet sets up a Fail2Ban jail specifically for Authelia. It defines parameters such as the filter to use, log path, retry limits, ban time, and actions to take.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/overview/security/measures.md#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[authelia]\nenabled = true\nport = http,https,9091\nfilter = authelia\nlogpath = /path-to-your-authelia.log\nmaxretry = 3\nbantime = 1d\nfindtime = 1d\nchain = DOCKER-USER\naction = iptables-allports[name=authelia]\n```\n\n----------------------------------------\n\nTITLE: Defining User and Group Subjects for Policies - YAML\nDESCRIPTION: This snippet demonstrates how to configure access control rules based on user and group memberships. It uses different representations to match subjects for applying two-factor authentication.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/security/access-control.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\naccess_control:\n  rules:\n  - domain: '{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n    policy: 'two_factor'\n    subject:\n    - 'user:john'\n    - ['group:admin', 'group:app-name']\n    - 'group:super-admin'\n  - domain: '{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n    policy: 'two_factor'\n    subject:\n    - ['user:john']\n    - ['group:admin', 'group:app-name']\n    - ['group:super-admin']\n```\n\n----------------------------------------\n\nTITLE: Creating Protected IngressRoute Resources with Authelia Middleware\nDESCRIPTION: This Traefik IngressRoute resource example shows how to protect an application using the Traefik CRD approach with Authelia authentication. It references the ForwardAuth middleware and configures the necessary routing rules.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/kubernetes/traefik-ingress.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: 'traefik.containo.us/v1alpha1'\nkind: 'IngressRoute'\nmetadata:\n  name: 'app'\n  namespace: 'default'\nspec:\n  entryPoints:\n    - 'websecure'  # name of your https entry point (default is 'websecure')\n  routes:\n    - kind: 'Rule'\n      match: 'Host(`app.example.com`)'\n      middlewares:\n        - name: 'forwardauth-authelia' # name of your middleware, as defined in your middleware.yml\n          namespace: 'default'\n      services:\n        - kind: 'Service'\n          name: 'app'\n          namespace: 'default'\n          port: 80\n          scheme: 'http'\n          strategy: 'RoundRobin'\n          weight: 10\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring ExtAuthz in Envoy with YAML\nDESCRIPTION: This snippet provides an example configuration for Envoy using the ExtAuthz implementation for proxy authorization. It requires the server and endpoints configuration solely focused on ExtAuthz. This minimal configuration assumes default settings for Authz endpoints.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/envoy.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  endpoints:\n    authz:\n      ext-authz:\n        implementation: 'ExtAuthz'\n```\n\n----------------------------------------\n\nTITLE: Interacting with Authelia Container (Bash)\nDESCRIPTION: These bash commands demonstrate how to interact with a running Authelia container. The first command opens an interactive shell session within the container, and the second command executes the Authelia binary, allowing for direct debugging and troubleshooting.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/deployment/docker.md#2025-04-21_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker exec -it authelia sh\n$ authelia\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Gateway API SecurityPolicy for Routes with Authelia\nDESCRIPTION: A Kubernetes Gateway API SecurityPolicy configuration that secures HTTPRoutes using Authelia's external authorization. It defines the headers to pass to the auth service and references the Authelia service for authentication.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/envoy.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 'gateway.envoyproxy.io/v1alpha1'\nkind: 'SecurityPolicy'\nmetadata:\n  name: 'authelia-example'\n  namespace: 'example'\nspec:\n  extAuth:\n    failOpen: false\n    headersToExtAuth:\n      - 'X-Forwarded-Proto'\n      - 'Authorization'\n      - 'Proxy-Authorization'\n      - 'Accept'\n      - 'Cookie'\n    http:\n      path: '/api/authz/ext-authz/'\n      backendRefs:\n        - group: ''\n          kind: 'Service'\n          name: 'authelia'\n          namespace: 'authelia'\n          port: 80\n  targetRefs:\n    - group: 'gateway.networking.k8s.io'\n      kind: 'HTTPRoute'\n      name: 'example'\n```\n\n----------------------------------------\n\nTITLE: Configuring Gmail SMTP in Authelia YAML\nDESCRIPTION: This YAML configuration snippet shows how to set up Authelia to use Gmail's SMTP servers for sending notifications. It includes the necessary address, username, and password settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/notifications/smtp.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nnotifier:\n  smtp:\n    address: 'submission://smtp.gmail.com:587'\n    username: 'myaccount@gmail.com'\n    # Password can also be set using a secret: https://www.authelia.com/configuration/methods/secrets/\n    password: 'yourapppassword'\n    sender: 'admin@example.com'\n```\n\n----------------------------------------\n\nTITLE: Caddy Subdomain Configuration with Forward Authentication\nDESCRIPTION: Configures Caddy for Authelia portal and protected Nextcloud endpoint using subdomain approach with forward authentication\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/caddy.md#2025-04-21_snippet_2\n\nLANGUAGE: caddyfile\nCODE:\n```\n# Uncomment & configure trusted proxies\n# trusted_proxies 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16 fc00::/7\n\n# Authelia Portal\nauth.example.com {\n    reverse_proxy authelia:9091\n}\n\n# Protected Endpoint\nnextcloud.example.com {\n    forward_auth authelia:9091 {\n        uri /api/authz/forward-auth\n        copy_headers Remote-User Remote-Groups Remote-Email Remote-Name\n    }\n    reverse_proxy nextcloud:80\n}\n```\n\n----------------------------------------\n\nTITLE: Authelia Client Configuration for Portainer\nDESCRIPTION: This YAML configuration defines an Authelia client specifically for Portainer. It includes the client ID, secret (a hashed version), redirect URI, scopes, and other necessary OpenID Connect settings.  The `authorization_policy` is set to 'two_factor', enforcing two-factor authentication for Portainer users.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/portainer/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'portainer'\n        client_name: 'Portainer'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://portainer.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'groups'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: client_secret_post\n```\n```\n\n----------------------------------------\n\nTITLE: Modern Session Configuration in YAML\nDESCRIPTION: This example demonstrates the modern method of configuring session cookies in Authelia, including key parameters like domain, authelia_url, and default_redirection_url under the session.cookies key. Requires knowledge of the Envoy reverse proxy settings and Authelia configuration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/envoy.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsession:\n  cookies:\n    - domain: '{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\n      authelia_url: 'https://{{</* sitevar name=\"subdomain-authelia\" nojs=\"auth\" */>}}.{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\n      default_redirection_url: 'https://www.{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Session Storage in Authelia\nDESCRIPTION: Complete example of Redis session configuration for Authelia, including authentication, TLS, and high availability with Redis Sentinel. This setup allows Authelia to store session data in Redis rather than using the default in-memory provider.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/session/redis.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsession:\n  redis:\n    host: '127.0.0.1'\n    port: 6379\n    timeout: '5s'\n    max_retries: 0\n    username: 'authelia'\n    password: 'authelia'\n    database_index: 0\n    maximum_active_connections: 8\n    minimum_idle_connections: 0\n    tls:\n      server_name: 'myredis.example.com'\n      skip_verify: false\n      minimum_version: 'TLS1.2'\n      maximum_version: 'TLS1.3'\n      certificate_chain: |\n        -----BEGIN CERTIFICATE-----\n        ...\n        -----END CERTIFICATE-----\n        -----BEGIN CERTIFICATE-----\n        ...\n        -----END CERTIFICATE-----\n      private_key: |\n        -----BEGIN PRIVATE KEY-----\n        ...\n        -----END PRIVATE KEY-----\n    high_availability:\n      sentinel_name: 'mysentinel'\n      # If `sentinel_username` is supplied, Authelia will connect using ACL-based\n      # authentication. Otherwise, it will use traditional `requirepass` auth.\n      sentinel_username: 'sentinel_user'\n      sentinel_password: 'sentinel_specific_pass'\n      nodes:\n        - host: 'sentinel-node1'\n          port: 26379\n        - host: 'sentinel-node2'\n          port: 26379\n      route_by_latency: false\n      route_randomly: false\n```\n\n----------------------------------------\n\nTITLE: Configuring File Backend Extra Attributes in Authelia\nDESCRIPTION: Example configuration for defining extra attributes in Authelia's file authentication backend. The configuration specifies attribute properties including multi-value support and value type.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/attributes.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nauthentication_backend:\n  file:\n    extra_attributes:\n      autheliaAttributeName:\n        multi_valued: false\n        value_type: 'string'\n```\n\n----------------------------------------\n\nTITLE: Synapse homeserver.yaml Configuration for Authelia OIDC\nDESCRIPTION: This YAML snippet configures Synapse to use Authelia as an OpenID Connect provider. It defines the IDP ID, name, issuer, client ID, client secret, scopes, user mapping, and attribute requirements. The attribute requirements ensure that only users in the `synapse-users` group can access Synapse.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/synapse/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noidc_providers:\n  - idp_id: authelia\n    idp_name: 'Authelia'\n    idp_icon: 'mxc://authelia.com/cKlrTPsGvlpKxAYeHWJsdVHI'\n    discover: true\n    issuer: 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n    client_id: 'synapse'\n    client_secret: 'insecure_secret'\n    scopes:\n     - 'openid'\n     - 'profile'\n     - 'email'\n     - 'groups'\n    allow_existing_users: true\n    user_mapping_provider:\n      config:\n        subject_claim: 'sub'\n        localpart_template: '{{ user.preferred_username }}'\n        display_name_template: '{{ user.name }}'\n        email_template: '{{ user.email }}'\n    attribute_requirements:\n     - attribute: 'groups'\n       value: 'synapse-users'\n```\n\n----------------------------------------\n\nTITLE: Configuring BookStack Environment Variables for OpenID Connect\nDESCRIPTION: This section details the environment variable settings required for BookStack to connect to Authelia. It outlines the necessary parameters including AUTH_METHOD, OIDC_CLIENT_ID, and OIDC_ISSUER, which must be set in the .env file to enable OpenID Connect authentication.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/bookstack/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n\"1. Edit your .env file\\n2. Set the following values:\\n   1. AUTH_METHOD: 'oidc'\\n   2. OIDC_NAME: 'Authelia'\\n   3. OIDC_DISPLAY_NAME_CLAIMS: 'name'\\n   4. OIDC_CLIENT_ID: 'bookstack'\\n   5. OIDC_CLIENT_SECRET: 'insecure_secret'\\n   6. OIDC_ISSUER: 'https://{{< sitevar name=\\\"subdomain-authelia\\\" nojs=\\\"auth\\\" >}}.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}'\\n   7. OIDC_ISSUER_DISCOVER: 'true'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Portal Server Block in NGINX\nDESCRIPTION: NGINX server block configuration for the Authelia authentication portal. Sets up both HTTP (with redirect to HTTPS) and HTTPS endpoints, including necessary API endpoints for authentication verification.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx.md#2025-04-21_snippet_4\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80;\n    server_name auth.*;\n\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name auth.*;\n\n    include /config/nginx/snippets/ssl.conf;\n\n    set $upstream {{< sitevar name=\"tls\" nojs=\"http\" >}}://{{< sitevar name=\"host\" nojs=\"authelia\" >}}:{{< sitevar name=\"port\" nojs=\"9091\" >}};\n\n    location / {\n        include /config/nginx/snippets/proxy.conf;\n        proxy_pass $upstream;\n    }\n\n    location = /api/verify {\n        proxy_pass $upstream;\n    }\n\n    location /api/authz/ {\n        proxy_pass $upstream;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress Annotations for Authelia Authentication in NGINX Ingress Controller\nDESCRIPTION: This YAML snippet demonstrates the required annotations to add to a Kubernetes Ingress resource to protect it with Authelia. The annotations configure authentication through Authelia's auth-request endpoint and specify the sign-in URL and user information headers to be forwarded.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/kubernetes/nginx-ingress.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  nginx.ingress.kubernetes.io/auth-method: 'GET'\n  nginx.ingress.kubernetes.io/auth-url: 'http://authelia.default.svc.cluster.local/api/authz/auth-request'\n  nginx.ingress.kubernetes.io/auth-signin: 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}?rm=$request_method'\n  nginx.ingress.kubernetes.io/auth-response-headers: 'Remote-User,Remote-Name,Remote-Groups,Remote-Email'\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Server Authorization Endpoints in YAML\nDESCRIPTION: This YAML configuration demonstrates how to set up various authorization endpoints in Authelia, including forward-auth, ext-authz, auth-request, and legacy implementations. Each endpoint can be configured with specific authentication strategies such as HeaderAuthorization and CookieSession.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/miscellaneous/server-endpoints-authz.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  endpoints:\n    authz:\n      forward-auth:\n        implementation: 'ForwardAuth'\n        authn_strategies:\n          - name: 'HeaderAuthorization'\n            schemes:\n              - 'Basic'\n            scheme_basic_cache_lifespan: 0\n          - name: 'CookieSession'\n      ext-authz:\n        implementation: 'ExtAuthz'\n        authn_strategies:\n          - name: 'HeaderAuthorization'\n            schemes:\n              - 'Basic'\n            scheme_basic_cache_lifespan: 0\n          - name: 'CookieSession'\n      auth-request:\n        implementation: 'AuthRequest'\n        authn_strategies:\n          - name: 'HeaderAuthorization'\n            schemes:\n              - 'Basic'\n            scheme_basic_cache_lifespan: 0\n          - name: 'CookieSession'\n      legacy:\n        implementation: 'Legacy'\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia for Nextcloud OpenID Connect User Backend in YAML\nDESCRIPTION: This YAML snippet provides a sample configuration for Authelia to set up the OpenID Connect user backend integration, detailing necessary client information for communication.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/nextcloud/index.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'nextcloud'\n        client_name: 'NextCloud'\n        client_secret: 'insecure_secret'\n        public: false\n        authorization_policy: 'two_factor'\n        require_pkce: true\n        pkce_challenge_method: 'S256'\n        redirect_uris:\n          - 'https://nextcloud.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/apps/user_oidc/code'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n          - 'groups'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_post'\n\n```\n\n----------------------------------------\n\nTITLE: Setting Access Control Rules in YAML\nDESCRIPTION: This YAML configuration example demonstrates how to define access control rules for both users and clients using OAuth 2.0. It ensures specific domains can be accessed under specified policies, taking into account user and client credentials.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/oauth-2.0-bearer-token-usage.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\naccess_control:\n  rules:\n    ## The 'app1.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}' domain for the user 'john' regardless if they're using OAuth 2.0 or session based flows.\n    - domain: 'app1.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      policy: 'one_factor'\n      subject: 'user:john'\n\n    ## The 'app2.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}' domain for the 'example-three' client when using the 'client_credentials' grant.\n    - domain: 'app2.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      policy: 'one_factor'\n      subject: 'oauth2:client:example-three'\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Multi-Server Failover Configuration\nDESCRIPTION: Example configuration for multiple PostgreSQL instances with failover support, including TLS settings for each server.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/storage/postgres.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  postgres:\n    address: 'tcp://postgres1:5432'\n    tls:\n      server_name: 'postgres1.local'\n    servers:\n      - address: 'tcp://postgres2:5432'\n        tls:\n          server_name: 'postgres2.local'\n      - address: 'tcp://postgres3:5432'\n        tls:\n          server_name: 'postgres3.local'\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Client for DokuWiki - YAML\nDESCRIPTION: This YAML configuration specifies the client settings for DokuWiki to utilize Authelia as an OpenID Connect provider. Key elements include client ID, secret, authorization policy, redirect URIs, and permissions scopes. It is necessary for establishing the connection between DokuWiki and Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/dokuwiki/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'dokuwiki'\n        client_name: 'DokuWiki'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://dokuwiki.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/doku.php'\n        scopes:\n          - 'openid'\n          - 'email'\n          - 'profile'\n          - 'groups'\n          - 'offline_access'\n        grant_types:\n          - 'authorization_code'\n          - 'refresh_token'\n        response_types:\n          - 'code'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_post'\n```\n\n----------------------------------------\n\nTITLE: Walking Directory Trees in Go\nDESCRIPTION: The `walk` function traverses a directory tree and collects file information, using a specified path. If a regex pattern is provided, it filters the results based on matching filenames. The `skipDir` boolean allows directories to be excluded from results. This functionality is intended for file discovery and metadata collection. Dependencies include Go's standard library, specifically for file system operations and regular expressions.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/templating.md#2025-04-21_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype WalkInfo struct {\n  // Path is the relative path of the file or directory.\n  Path string\n\n  // AbsolutePath is the absolute file system path of the file or directory.\n  AbsolutePath string\n\n  // Name is the file or directory name.\n  Name string\n\n  // Size is the size in bytes of the file or directory.\n  Size int64\n\n  // Mode is the os.FileMode of the file or directory.\n  Mode os.FileMode\n\n  // Modified is time.Time that the file or directory was last modified.\n  Modified time.Time\n\n  // IsDir is truthy if this is a directory otherwise it is not.\n  IsDir bool\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TOTP Settings in Authelia YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to set up TOTP options in Authelia, including issuer, algorithm, digits, period, and other security-related settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/second-factor/time-based-one-time-password.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntotp:\n  disable: false\n  issuer: 'authelia.com'\n  algorithm: 'sha1'\n  digits: 6\n  period: 30\n  skew: 1\n  secret_size: 32\n  allowed_algorithms:\n    - 'SHA1'\n  allowed_digits:\n    - 6\n  allowed_periods:\n    - 30\n  disable_reuse_security_policy: false\n```\n\n----------------------------------------\n\nTITLE: Modern Session Configuration for Authelia\nDESCRIPTION: This YAML snippet demonstrates how to configure modern session settings in Authelia, including domain, authelia_url, and default_redirection_url as part of the session.cookies configuration. It is designed to be adaptable to specific domain setups.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/traefik.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsession:\n  cookies:\n    - domain: '{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\n      authelia_url: 'https://{{</* sitevar name=\"subdomain-authelia\" nojs=\"auth\" */>}}.{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\n      default_redirection_url: 'https://www.{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for MinIO in Docker Compose\nDESCRIPTION: This YAML snippet defines the necessary environment variables for configuring MinIO to utilize Authelia as an OpenID Connect provider within a Docker Compose setup. Key environment variables include the OpenID configuration URL, client ID, and client secret.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/minio/index.md#2025-04-21_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  minio:\n    environment:\n      MINIO_IDENTITY_OPENID_CONFIG_URL: 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/.well-known/openid-configuration'\n      MINIO_IDENTITY_OPENID_CLIENT_ID: 'minio'\n      MINIO_IDENTITY_OPENID_CLIENT_SECRET: 'insecure_secret'\n      MINIO_IDENTITY_OPENID_DISPLAY_NAME: 'Authelia'\n      MINIO_IDENTITY_OPENID_CLAIM_USERINFO: 'on'\n      MINIO_IDENTITY_OPENID_CLAIM_NAME: 'groups'\n      MINIO_IDENTITY_OPENID_SCOPES: 'openid,profile,email,groups'\n      MINIO_IDENTITY_OPENID_REDIRECT_URI: 'https://minio.{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/oauth_callback'\n      MINIO_IDENTITY_OPENID_REDIRECT_URI_DYNAMIC: 'off'\n```\n\n----------------------------------------\n\nTITLE: Configuring Duo API Settings in YAML\nDESCRIPTION: YAML configuration for setting up Duo mobile push notifications in Authelia. Includes essential API connection parameters like hostname, integration key, and secret key. Also provides option to enable self-enrollment and disable the integration entirely.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/second-factor/duo.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nduo_api:\n  disable: false\n  hostname: 'api-123456789.example.com'\n  integration_key: 'ABCDEF'\n  secret_key: '1234567890abcdefghifjkl'\n  enable_self_enrollment: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Paperless SSO\nDESCRIPTION: This snippet sets the required environment variables to enable Paperless to trust the 'Remote-User' header for SSO, redirecting logout to Authelia. Ensure the Paperless and Authelia URLs are correctly set as per the example configuration. No additional dependencies are required.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/trusted-header-sso/paperless/index.md#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nPAPERLESS_ENABLE_HTTP_REMOTE_USER=true\nPAPERLESS_HTTP_REMOTE_USER_HEADER_NAME=HTTP_REMOTE_USER\nPAPERLESS_LOGOUT_REDIRECT_URL=https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/logout\n```\n\n----------------------------------------\n\nTITLE: Authelia Client Configuration for Rocket.Chat (YAML)\nDESCRIPTION: This YAML configuration defines an Authelia client for Rocket.Chat, specifying the client ID, secret, redirect URIs, scopes, and other OIDC settings. It is essential for Authelia to recognize and authorize Rocket.Chat's authentication requests. The `client_secret` is a hashed value and should be securely generated.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/rocket-chat/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'rocket-chat'\n        client_name: 'Rocket.Chat'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://rocket-chat.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/_oauth/authelia'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n          - 'groups'\n        grant_types:\n          - 'authorization_code'\n        token_endpoint_auth_method: 'client_secret_post'\n        userinfo_signed_response_alg: 'none'\n```\n\n----------------------------------------\n\nTITLE: Configuring HAProxy ACLs and Backends - Text Format\nDESCRIPTION: This snippet provides instructions on setting up HAProxy ACLs to route requests and protect endpoints using Authelia. The configuration involves defining ACLs based on host headers and backends to forward requests. Ensure to replace placeholder domain names per deployment specifics. Dependencies include Authelia and compatible HAProxy setup.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/haproxy.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nacl protected-frontends hdr(host) -m reg -i ^(?i)(jenkins|nextcloud|phpmyadmin)\\.example\\.com\n```\n\nLANGUAGE: text\nCODE:\n```\nacl host-jenkins hdr(host) -i jenkins.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\nacl host-nextcloud hdr(host) -i nextcloud.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\nacl host-phpmyadmin hdr(host) -i phpmyadmin.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\nacl host-heimdall hdr(host) -i heimdall.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\n```\n\nLANGUAGE: text\nCODE:\n```\nuse_backend be_jenkins if host-jenkins\nuse_backend be_nextcloud if host-nextcloud\nuse_backend be_phpmyadmin if host-phpmyadmin\nuse_backend be_heimdall if host-heimdall\n```\n\nLANGUAGE: text\nCODE:\n```\nbackend be_jenkins\n    server jenkins jenkins:8080\nbackend be_nextcloud\n    server nextcloud nextcloud:443 ssl verify none\nbackend be_phpmyadmin\n    server phpmyadmin phpmyadmin:80\nbackend be_heimdall\n    server heimdall heimdall:443 ssl verify none\n```\n\n----------------------------------------\n\nTITLE: Caddy Subpath Configuration with Forward Authentication\nDESCRIPTION: Configures Caddy for Authelia and protected services using subpath approach with forward authentication\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/caddy.md#2025-04-21_snippet_3\n\nLANGUAGE: caddyfile\nCODE:\n```\n# Uncomment & configure trusted proxies\n# trusted_proxies 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16 fc00::/7\n\nexample.com {\n    # Authelia Portal\n    @authelia path /authelia /authelia/*\n    handle @authelia {\n        reverse_proxy authelia:9091\n    }\n\n    # Protected Endpoint\n    @nextcloud path /nextcloud /nextcloud/*\n    handle @nextcloud {\n        forward_auth authelia:9091 {\n            uri /api/authz/forward-auth?authelia_url=https://example.com/authelia/\n            copy_headers Remote-User Remote-Groups Remote-Email Remote-Name\n        }\n        reverse_proxy nextcloud:80\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Client for pgAdmin - YAML\nDESCRIPTION: This YAML snippet configures an OpenID Connect 1.0 client in Authelia specifically for pgAdmin. It includes client ID, client name, client secret, and the relevant authorization policies. Note that the client secret is hashed for security purposes.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/pgadmin/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'pgadmin'\n        client_name: 'pgAdmin'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://pgadmin.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/oauth2/authorize'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_basic'\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia for OpenID Connect - YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to set up Authelia as an OpenID Connect Provider for Gitea. The setup includes settings for identity providers, clients, and authentication policies. Key parameters include client ID, client secret, and redirect URIs. Ensure you have the correct OpenID Connect portion in the configuration elsewhere.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/gitea/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'gitea'\n        client_name: 'Gitea'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://gitea.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/user/oauth2/authelia/callback'\n        scopes:\n          - 'openid'\n          - 'email'\n          - 'profile'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_basic'\n```\n\n----------------------------------------\n\nTITLE: Configuring Elevated Session Identity Validation in Authelia YAML\nDESCRIPTION: This YAML configuration example shows how to set up Elevated Session Identity Validation in Authelia. It includes settings for code lifespan, elevation lifespan, one-time code character length, and second factor authentication requirements.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-validation/elevated-session.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_validation:\n  elevated_session:\n    code_lifespan: '5 minutes'\n    elevation_lifespan: '10 minutes'\n    characters: 8\n    require_second_factor: false\n    skip_second_factor: false\n```\n\n----------------------------------------\n\nTITLE: Standard Proxy Configuration for NGINX with Authelia\nDESCRIPTION: Comprehensive proxy configuration with headers setup for proper operation with Authelia. Includes real IP configuration, timeout settings, and other recommended proxy parameters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx.md#2025-04-21_snippet_9\n\nLANGUAGE: nginx\nCODE:\n```\n## Headers\nproxy_set_header Host $host;\nproxy_set_header X-Original-URL $scheme://$http_host$request_uri;\nproxy_set_header X-Forwarded-Proto $scheme;\nproxy_set_header X-Forwarded-Host $http_host;\nproxy_set_header X-Forwarded-URI $request_uri;\nproxy_set_header X-Forwarded-Ssl on;\nproxy_set_header X-Forwarded-For $remote_addr;\nproxy_set_header X-Real-IP $remote_addr;\n\n## Basic Proxy Configuration\nclient_body_buffer_size 128k;\nproxy_next_upstream error timeout invalid_header http_500 http_502 http_503; ## Timeout if the real server is dead.\nproxy_redirect  http://  $scheme://;\nproxy_http_version 1.1;\nproxy_cache_bypass $cookie_session;\nproxy_no_cache $cookie_session;\nproxy_buffers 64 256k;\n\n## Trusted Proxies Configuration\n## Please read the following documentation before configuring this:\n##     https://www.authelia.com/integration/proxies/nginx/#trusted-proxies\n# set_real_ip_from 10.0.0.0/8;\n# set_real_ip_from 172.16.0.0/12;\n# set_real_ip_from 192.168.0.0/16;\n# set_real_ip_from fc00::/7;\nreal_ip_header X-Forwarded-For;\nreal_ip_recursive on;\n\n## Advanced Proxy Configuration\nsend_timeout 5m;\nproxy_read_timeout 360;\nproxy_send_timeout 360;\nproxy_connect_timeout 360;\n```\n\n----------------------------------------\n\nTITLE: Warpgate SSO Configuration with Authelia\nDESCRIPTION: This TOML configuration snippet shows how to configure Warpgate to use Authelia as an OpenID Connect provider for SSO. It defines the client ID, client secret, issuer URL, and scopes necessary for Warpgate to interact with Authelia.  It assumes Authelia is running and accessible at the specified URL.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/warpgate/index.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n```toml\nexternal_host: warpgate.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\nsso_providers:\n- name: authelia\n  label: Authelia\n  provider:\n    type: custom\n    client_id: warpgate\n    client_secret: insecure_secret\n    issuer_url: https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\n    scopes: [\"openid\", \"email\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia with FreeIPA in YAML\nDESCRIPTION: Example YAML configuration for integrating Authelia with FreeIPA. This configuration includes LDAPS connection settings, custom filters for FreeIPA's directory structure, and appropriate attribute mappings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/ldap/introduction.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nauthentication_backend:\n ldap:\n    address: 'ldaps://ldap.example.com'\n    implementation: 'custom'\n    timeout: '5s'\n    start_tls: false\n    tls:\n      server_name: 'ldap.example.com'\n      skip_verify: true\n      minimum_version: 'TLS1.2'\n    base_dn: 'dc=example,DC=com'\n    additional_users_dn: 'CN=users,CN=accounts'\n    users_filter: '(&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))'\n    additional_groups_dn: cn=groups,cn=accounts\n    groups_filter: '(&(member=UID={input},CN=users,CN=accounts,DC=example,DC=com)(objectClass=groupOfNames))'\n    user: 'UID=authelia,CN=users,CN=accounts,DC=example,DC=com'\n    password: 'SUPER_COMPLEX_PASSWORD'\n    attributes:\n      distinguished_name: 'distinguishedName'\n      username: 'uid'\n      mail: 'mail'\n      member_of: 'memberOf'\n      group_name: 'cn'\n```\n\n----------------------------------------\n\nTITLE: Authelia Client Configuration for Node-RED\nDESCRIPTION: This YAML configuration defines an Authelia client for Node-RED, specifying the client ID, secret, redirect URIs, scopes, and other OpenID Connect settings.  It is essential for establishing trust between Authelia and Node-RED for authentication and authorization purposes.  The client secret should be securely generated and stored.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/node-red/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'node-red'\n        client_name: 'Node-RED'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://node-red.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/auth/strategy/callback/'\n        scopes:\n          - 'openid'\n          - 'email'\n          - 'profile'\n          - 'groups'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_post'\n```\n```\n\n----------------------------------------\n\nTITLE: Configuration for Jenkins to use Authelia\nDESCRIPTION: This YAML snippet illustrates the required configuration settings for Jenkins to utilize Authelia as an OpenID Connect 1.0 Provider. It specifies security realm settings and communication details with the Authelia service.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/jenkins/index.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njenkins:\n  systemMessage: \"This Jenkins instance was configured using the Authelia example Configuration as Code, thanks Authelia!\"\n  securityRealm:\n    oic:\n      automanualconfigure: auto\n      wellKnownOpenIDConfigurationUrl: https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/.well-known/openid-configuration\n      clientId: jenkins\n      clientSecret: insecure_secret\n      tokenAuthMethod: client_secret_basic\n      scopes: openid profile email groups\n      userNameField: preferred_username\n      groupsFieldName: groups\n      fullNameFieldName: name\n      emailFieldName: email\n      pkceEnabled: true\n      # escapeHatchEnabled: <boolean>\n      # escapeHatchUsername: escapeHatchUsername\n      # escapeHatchSecret: <string:secret>\n      # escapeHatchGroup: <string>\n```\n\n----------------------------------------\n\nTITLE: Modern Session Configuration with Cookies\nDESCRIPTION: Defines session configuration with domain, Authelia URL, and default redirection URL using modern configuration approach\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/caddy.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsession:\n  cookies:\n    - domain: 'example.com'\n      authelia_url: 'https://auth.example.com'\n      default_redirection_url: 'https://www.example.com'\n```\n\n----------------------------------------\n\nTITLE: Active Directory User Filter\nDESCRIPTION: This LDAP filter is used to search for users in Active Directory. It combines username or email matching with checks for account type (normal user account), disabled status, password expiration, and account expiration. The filter ensures that only active and valid user accounts are returned.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/ldap.md#2025-04-21_snippet_1\n\nLANGUAGE: LDAP\nCODE:\n```\n\"(&(&#124;({username_attribute}={input})({mail_attribute}={input}))(sAMAccountType=805306368)(!(userAccountControl:1.2.840.113556.1.4.803:=2))(!(pwdLastSet=0))(&#124;(!(accountExpires=*))(accountExpires=0)(accountExpires>={date-time:microsoft-nt})))\"\n```\n\n----------------------------------------\n\nTITLE: Permit Zero AAGUID Authentication in Authelia (Markdown)\nDESCRIPTION: This configuration allows authenticators to pass even if they have an empty Authenticator Attestation GUID. This option is useful for authenticators without FIDO compliance. Default is set to `false`.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/second-factor/webauthn.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n#### validate_entry_permit_zero_aaguid\n\n{{< confkey type=\"boolean\" default=\"false\" required=\"no\" >}}\n```\n\n----------------------------------------\n\nTITLE: Homarr OpenID Connect Environment Variables\nDESCRIPTION: Environment variable configuration for enabling Homarr authentication with Authelia's OpenID Connect provider, specifying issuer, client credentials, and scope settings\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/homarr/index.md#2025-04-21_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nAUTH_PROVIDERS=oidc\nAUTH_OIDC_ISSUER=https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\nAUTH_OIDC_CLIENT_SECRET=insecure_secret\nAUTH_OIDC_CLIENT_ID=homarr\nAUTH_OIDC_CLIENT_NAME=Authelia\nAUTH_OIDC_SCOPE_OVERWRITE=openid email profile groups\nAUTH_OIDC_GROUPS_ATTRIBUTE=groups\nAUTH_LOGOUT_REDIRECT_URL=https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/logout\n```\n\n----------------------------------------\n\nTITLE: Authelia Client Configuration for Terrakube\nDESCRIPTION: This YAML configuration snippet shows an example Authelia client configuration for Terrakube.  It defines the client ID, secret, redirect URIs, scopes, and other necessary settings to allow Terrakube to authenticate against Authelia's OpenID Connect provider.  The client secret is a PBKDF2-SHA512 hash of 'insecure_secret'.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/terrakube/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'terrakube'\n        client_name: 'Terrakube'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://terrakube.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/dex/callback'\n        scopes:\n          - 'openid'\n          - 'email'\n          - 'profile'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_post'\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Client for Apache Guacamole - YAML\nDESCRIPTION: This YAML configuration defines the client settings for Authelia to work with Apache Guacamole under OpenID Connect 1.0. It includes client ID, authorization policy, redirect URIs, scopes, response types, grant types, and the algorithm for the signed response to the user info endpoint.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/apache-guacamole/index.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n\"identity_providers:\\n  oidc:\\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\\n    ## See: https://www.authelia.com/c/oidc\\n    clients:\\n      - client_id: 'guacamole'\\n        client_name: 'Apache Guacamole'\\n        public: true\\n        authorization_policy: 'two_factor'\\n        redirect_uris:\\n          - 'https://guacamole.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\\n        scopes:\\n          - 'openid'\\n          - 'profile'\\n          - 'groups'\\n          - 'email'\\n        response_types:\\n          - 'id_token'\\n        grant_types:\\n          - 'implicit'\\n        userinfo_signed_response_alg: 'none'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OIDC Client for LibreChat\nDESCRIPTION: YAML configuration for setting up an Authelia OpenID Connect client for LibreChat, including client details, secret, and authorization policies\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/librechat/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    clients:\n      - client_id: 'librechat'\n        client_name: 'LibreChat'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://librechat.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/oauth/openid/callback'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Configuration in YAML\nDESCRIPTION: Example of correct regular expression configuration in YAML using single quotes to properly handle backslashes in the regex pattern.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/prologue/common.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndomain_regex: '^(admin|secure)\\.example\\.com$'\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Connect Client in Authelia - YAML\nDESCRIPTION: This YAML snippet provides an example configuration for setting up an OpenID Connect client in Authelia to work with Windmill. Dependencies include Authelia and Windmill, with tested versions v4.38.0 and 1.224.0, respectively. Key parameters include 'client_id', 'client_secret', and 'redirect_uris'. It configures OAuth 2.0 authorization with two-factor authentication and defines necessary OpenID scopes.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/windmill/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'windmill'\n        client_name: 'Windmill'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://windmill.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/user/login_callback/authelia'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n          - 'groups'\n        userinfo_signed_response_alg: 'none'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Extra Attributes in Authelia\nDESCRIPTION: Configuration example for defining extra attributes from LDAP. This snippet shows how to load an LDAP property into Authelia with specific type constraints and naming.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/attributes.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nauthentication_backend:\n  ldap:\n    attributes:\n      extra:\n        ldapAttributeName:\n          name: 'autheliaAttributeName'\n          multi_valued: false\n          value_type: 'string'\n```\n\n----------------------------------------\n\nTITLE: Authelia OIDC Client Configuration for Komga\nDESCRIPTION: This YAML snippet configures an Authelia OIDC client for Komga. It defines the client ID, secret (hashed), authorization policy, redirect URIs, scopes, and grant types.  The `client_secret` is a securely hashed value of the actual secret.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/komga/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'komga'\n        client_name: 'Komga'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://komga.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/login/oauth2/code/authelia'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n        grant_types:\n          - 'authorization_code'\n        userinfo_signed_response_alg: 'none'\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring PhotoPrism Environment for Authelia\nDESCRIPTION: This YAML snippet outlines the necessary environment variables for the PhotoPrism application to successfully connect with the Authelia OpenID Connect 1.0 Provider. The variables include the OIDC URI, client credentials, and registration options, enabling seamless authentication processes.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/photoprism/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  PHOTOPRISM_OIDC_URI: https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\n  PHOTOPRISM_OIDC_CLIENT: photoprism\n  PHOTOPRISM_OIDC_SECRET: insecure_secret\n  PHOTOPRISM_OIDC_PROVIDER: authelia\n  PHOTOPRISM_OIDC_REGISTER: true\n```\n\n----------------------------------------\n\nTITLE: Protecting Portainer with Authelia in NGINX\nDESCRIPTION: NGINX configuration for securing Portainer with Authelia authentication. Includes special configuration for websocket support required by Portainer's web interface.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx.md#2025-04-21_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80;\n    server_name portainer.*;\n\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name portainer.*;\n\n    include /config/nginx/snippets/ssl.conf;\n    include /config/nginx/snippets/authelia-location.conf;\n\n    set $upstream http://portainer:9000;\n\n    location / {\n        include /config/nginx/snippets/proxy.conf;\n        include /config/nginx/snippets/authelia-authrequest.conf;\n        proxy_pass $upstream;\n    }\n\n    location /api/websocket/ {\n        include /config/nginx/snippets/proxy.conf;\n        include /config/nginx/snippets/websocket.conf;\n        include /config/nginx/snippets/authelia-authrequest.conf;\n        proxy_pass $upstream;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Client Settings in YAML\nDESCRIPTION: This YAML configuration defines client settings for integrating Misago with Authelia's OpenID Connect provider. It includes required fields such as client_id, client_name, client_secret, scopes, and redirect_uris, delineating how the Misago application should interact with the Authelia service.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/misago/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'misago'\n        client_name: 'Misago'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n        redirect_uris:\n          - 'https://misago.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/oauth2/complete/'\n        grant_types:\n          - 'authorization_code'\n        response_types:\n          - 'code'\n        response_modes:\n          - 'query'\n        userinfo_signed_response_alg: 'none'\n```\n\n----------------------------------------\n\nTITLE: NGINX Configuration for Authelia Protected Applications\nDESCRIPTION: This snippet demonstrates the NGINX server block configuration required to protect an application using Authelia. It shows how to include necessary configuration snippets for authentication and proxying.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/swag.md#2025-04-21_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 443 ssl;\n    listen [::]:443 ssl;\n\n    server_name whoami.*;\n\n    include /config/nginx/ssl.conf;\n\n    client_max_body_size 0;\n\n    # Authelia: Step 1.\n    #include /config/nginx/authelia-server.conf;\n    include /config/nginx/snippets/authelia/location.conf;\n\n    location / {\n        # Authelia: Step 2.\n        #include /config/nginx/authelia-location.conf;\n        include /config/nginx/snippets/authelia/authrequest.conf;\n\n        include /config/nginx/proxy.conf;\n        resolver 127.0.0.11 valid=30s;\n        set $upstream_app whoami;\n        set $upstream_port 80;\n        set $upstream_proto http;\n        proxy_pass $upstream_proto://$upstream_app:$upstream_port;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OIDC Client in YAML\nDESCRIPTION: The YAML snippet configures an Authelia client for Paperless integration. It specifies OpenID Connect settings like client_id, client_secret, redirect URIs, and required scopes. This configuration is essential for enabling secure OIDC interactions between Authelia and Paperless.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/paperless/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'paperless'\n        client_name: 'Paperless'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        require_pkce: true\n        pkce_challenge_method: 'S256'\n        redirect_uris:\n          - 'https://paperless.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/accounts/oidc/authelia/login/callback/'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n          - 'groups'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_basic'\n```\n\n----------------------------------------\n\nTITLE: Configuring ForwardAuth Middleware for Authelia in Traefik Kubernetes\nDESCRIPTION: This YAML snippet creates a Traefik Middleware resource for Authelia forward authentication. It configures the ForwardAuth middleware to communicate with the Authelia service and specifies which authentication response headers to accept.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/kubernetes/traefik-ingress.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: 'traefik.containo.us/v1alpha1'\nkind: 'Middleware'\nmetadata:\n  name: 'forwardauth-authelia' # name of middleware as it appears in Traefik, and how you reference in ingress rules\n  namespace: 'default' # name of namespace that Traefik is in\n  labels:\n    app.kubernetes.io/instance: 'authelia'\n    app.kubernetes.io/name: 'authelia'\nspec:\n  forwardAuth:\n    address: 'http://authelia.default.svc.cluster.local/api/authz/forward-auth'\n    authResponseHeaders:\n      - 'Remote-User'\n      - 'Remote-Groups'\n      - 'Remote-Email'\n      - 'Remote-Name'\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Notifications in Authelia YAML\nDESCRIPTION: This YAML configuration snippet shows the basic structure for configuring notifications in Authelia. It includes options for disabling startup checks, specifying a custom template path, and placeholders for filesystem and SMTP configurations.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/notifications/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnotifier:\n  disable_startup_check: false\n  template_path: ''\n  filesystem: {}\n  smtp: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia for Nextcloud OpenID Connect Login App in YAML\nDESCRIPTION: This snippet provides a sample YAML configuration for Authelia to set up the OpenID Connect integration, including client details such as client_id, client_secret, and redirect URIs.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/nextcloud/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'nextcloud'\n        client_name: 'NextCloud'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        require_pkce: true\n        pkce_challenge_method: 'S256'\n        redirect_uris:\n          - 'https://nextcloud.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/apps/oidc_login/oidc'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n          - 'groups'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_basic'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Job for Authelia\nDESCRIPTION: This YAML snippet configures a Prometheus job to scrape metrics from Authelia at a specified interval. It includes the job name, scheme, and target configuration. The target needs to be replaced with the actual host of the Authelia instance.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/metrics.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Authelia\n  - job_name: 'authelia'\n    scrape_interval: '15s'\n    scheme: 'http'\n    static_configs:\n    - targets: ['{{< sitevar name=\"host\" nojs=\"authelia\" >}}:9959']\n```\n\n----------------------------------------\n\nTITLE: Validating Authelia Configuration Using Docker\nDESCRIPTION: Command to validate an Authelia configuration file using Docker. This validates the syntax of your configuration without testing integrations, useful before upgrading to prevent downtime.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/prologue/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run authelia/authelia:latest authelia config validate --config /config/configuration.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia for PowerDNS Admin OpenID Connect\nDESCRIPTION: This YAML snippet shows the client configuration for Authelia to act as an OpenID Connect provider for PowerDNS Admin. The configuration specifies client details, including client_id, client_secret, and authorization policies. This setup assumes several prerequisites, such as the availability of Authelia and required URL configurations.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/powerdns/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'powerdns'\n        client_name: 'PowerDNS Admin'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://powerdns.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/oidc/authorized'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'groups'\n          - 'email'\n        response_types:\n          - 'code'\n        grant_types:\n          - 'authorization_code'\n        userinfo_signed_response_alg: 'none'\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Authelia with Secrets Volume\nDESCRIPTION: This Docker Compose configuration sets up Authelia using a standard Docker volume or bind mount for secrets. It includes service configuration, environment variables, and volume mappings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/deployment/docker.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nservices:\n  authelia:\n    container_name: '{{< sitevar name=\"host\" nojs=\"authelia\" >}}'\n    image: 'docker.io/authelia/authelia:latest'\n    restart: 'unless-stopped'\n    networks:\n      net:\n        aliases: []\n    environment:\n      AUTHELIA_IDENTITY_VALIDATION_RESET_PASSWORD_JWT_SECRET_FILE: '/secrets/JWT_SECRET'\n      AUTHELIA_SESSION_SECRET_FILE: '/secrets/SESSION_SECRET'\n      AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE: '/secrets/STORAGE_PASSWORD'\n      AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE: '/secrets/STORAGE_ENCRYPTION_KEY'\n    volumes:\n      - '${PWD}/data/authelia/config:/config'\n      - '${PWD}/data/authelia/secrets:/secrets'\nnetworks:\n  net:\n    external: true\n    name: 'net'\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Linkwarden Environment Variables (YAML)\nDESCRIPTION: This YAML configuration demonstrates how to configure Linkwarden's environment variables to utilize Authelia as an OpenID Connect provider. The configuration includes variables for enabling Authelia, specifying the well-known configuration URL, the client ID, and the client secret. These variables ensure that Linkwarden knows how to connect and authenticate with Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/linkwarden/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nservices:\n  linkwarden:\n    image: 'ghcr.io/linkwarden/linkwarden:latest'\n    environment:\n      NEXT_PUBLIC_AUTHELIA_ENABLED: 'true'\n      AUTHELIA_WELLKNOWN_URL: 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/.well-known/openid-configuration'\n      AUTHELIA_CLIENT_ID: 'linkwarden'\n      AUTHELIA_CLIENT_SECRET: 'insecure_secret'\n```\n```\n\n----------------------------------------\n\nTITLE: Mealie Environment Variables for OIDC (ENV)\nDESCRIPTION: These environment variables configure Mealie to use Authelia as an OpenID Connect provider. The variables include the configuration URL, client ID, client secret, and group assignments for admins and users. The OIDC_CLIENT_SECRET must match the one defined in Authelia's configuration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/mealie/index.md#2025-04-21_snippet_1\n\nLANGUAGE: env\nCODE:\n```\n```env\nOIDC_AUTH_ENABLED=true\nOIDC_SIGNUP_ENABLED=true\nOIDC_CONFIGURATION_URL=https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/.well-known/openid-configuration\nOIDC_CLIENT_ID=mealie\nOIDC_CLIENT_SECRET=insecure_secret\nOIDC_AUTO_REDIRECT=false\nOIDC_ADMIN_GROUP=mealie-admins\nOIDC_USER_GROUP=mealie-users\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Postfix SASL Authentication\nDESCRIPTION: Sets up Postfix SASL authentication configuration to enable secure authentication mechanisms for SMTP services\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/roundcube/index.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsmtpd_sasl_auth_enable = yes\nsmtpd_sasl_path = private/auth\nsmtpd_sasl_security_options = noanonymous, noplaintext\nsmtpd_sasl_tls_security_options = noanonymous\nsmtpd_sasl_type = dovecot\n```\n\n----------------------------------------\n\nTITLE: Authelia Client Configuration for Synapse\nDESCRIPTION: This YAML snippet configures an Authelia OIDC client for Synapse. It defines the client ID, secret, redirect URIs, scopes, and authorization policy. The client secret is a PBKDF2-SHA512 hash of 'insecure_secret'.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/synapse/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'synapse'\n        client_name: 'Synapse'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://synapse.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/_synapse/client/oidc/callback'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n          - 'groups'\n        userinfo_signed_response_alg: 'none'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker Compose for SWAG and Authelia\nDESCRIPTION: This snippet outlines a Docker Compose configuration for deploying SWAG and Authelia in separate containers. It includes relevant environment variables and network settings for communication between the containers.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/swag.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnetworks:\n  net:\n    driver: 'bridge'\n\nservices:\n  swag:\n    container_name: 'swag'\n    image: 'lscr.io/linuxserver/swag'\n    restart: 'unless-stopped'\n    networks:\n      net:\n        aliases:\n          - '{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n    ports:\n      - '80:80'\n      - '443:443'\n    volumes:\n      - '${PWD}/data/swag:/config'\n      ## Uncomment the line below if you want to use the Authelia configuration snippets.\n      #- '${PWD}/data/nginx/snippets:/snippets'\n    environment:\n      PUID: '1000'\n      PGID: '1000'\n      TZ: 'Australia/Melbourne'\n      URL: '{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      SUBDOMAINS: 'www,whoami,auth,organizr'\n      VALIDATION: 'http'\n      STAGING: 'true'\n    cap_add:\n      - 'NET_ADMIN'\n  authelia:\n    container_name: '{{< sitevar name=\"host\" nojs=\"authelia\" >}}'\n    image: 'authelia/authelia'\n    restart: 'unless-stopped'\n    networks:\n      net: {}\n    volumes:\n      - '${PWD}/data/authelia/config:/config'\n    environment:\n      TZ: 'Australia/Melbourne'\n  organizr:\n    container_name: 'organizr'\n    image: 'organizr/organizr'\n    restart: 'unless-stopped'\n    networks:\n      net: {}\n    volumes:\n      - '${PWD}/data/organizr/config:/config'\n    environment:\n      PUID: '1000'\n      PGID: '1000'\n      TZ: 'Australia/Melbourne'\n  whoami:\n    container_name: 'whoami'\n    image: 'docker.io/traefik/whoami'\n    restart: 'unless-stopped'\n    networks:\n      net: {}\n    environment:\n      TZ: 'Australia/Melbourne'\n...\n```\n\n----------------------------------------\n\nTITLE: Authelia OIDC Client Configuration\nDESCRIPTION: This YAML snippet configures an Authelia OpenID Connect client specifically for use with opkssh. It defines the client ID, name, public access, authorization policy, PKCE requirements, redirect URIs, scopes, and the userinfo signed response algorithm. This configuration allows opkssh to authenticate users through Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/opkssh/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'opkssh'\n        client_name: 'opkssh'\n        public: true\n        authorization_policy: 'two_factor'\n        require_pkce: true\n        pkce_challenge_method: 'S256'\n        redirect_uris:\n          - 'http://localhost:3000/login-callback'\n          - 'http://localhost:10001/login-callback'\n          - 'http://localhost:11110/login-callback'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Paperless Environment Variables for OIDC\nDESCRIPTION: The environment variable setup for Paperless to utilize Authelia as an OIDC provider is shown. It defines configuration like the OIDC scopes, PKCE support, and provider details critical for authentication through Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/paperless/index.md#2025-04-21_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nPAPERLESS_APPS=allauth.socialaccount.providers.openid_connect\nPAPERLESS_SOCIALACCOUNT_PROVIDERS={\"openid_connect\":{\"SCOPE\":[\"openid\",\"profile\",\"email\"],\"OAUTH_PKCE_ENABLED\":true,\"APPS\":[{\"provider_id\":\"authelia\",\"name\":\"Authelia\",\"client_id\":\"paperless\",\"secret\":\"insecure_secret\",\"settings\":{\"server_url\":\"https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\",\"token_auth_method\":\"client_secret_basic\"}}]}}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Attributes with Expression Language in Authelia\nDESCRIPTION: Configuration example for creating custom attributes using Common Expression Language. This snippet demonstrates creating a boolean attribute that checks if a user belongs to the 'admin' group.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/attributes.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  user_attributes:\n    is_admin:\n      expression: '\"admin\" in groups'\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Rules with YAML for Authelia\nDESCRIPTION: This YAML snippet demonstrates how to configure access control rules within Authelia, applying a bypass policy for specific domains and resource paths. The resource rules utilize regular expressions to match the incoming requests.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/security/access-control.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\naccess_control:\n  rules:\n  - domain: 'app.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n    policy: 'bypass'\n    resources:\n    - '^/api([/?].*)?$'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OpenID Connect Client\nDESCRIPTION: This YAML configuration snippet defines the client integration for Seafile with the Authelia OpenID Connect provider. It specifies important client details like client ID and secret, and redirects URI for successful interactions. This configuration requires Authelia version v4.38.0 or later.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/seafile/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'seafile'\n        client_name: 'Seafile'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://seafile.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/oauth/callback/'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_basic'\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab for OpenID Connect\nDESCRIPTION: This Ruby code snippet is part of the GitLab configuration to utilize Authelia as an OpenID Connect provider. It is added to the `gitlab.rb` file under Omnibus GitLab configuration. Dependencies include a configured Omniauth setup and Authelia instance. Key parameters include the strategy class, issuer URL, scope, client authentication method, response type, and client options, including the redirect URI. This configuration enables GitLab to authenticate users via the Authelia OpenID Connect provider.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/gitlab/index.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngitlab_rails['omniauth_providers'] = [\n  {\n    name: \"openid_connect\",\n    label: \"Authelia\",\n    icon: \"https://www.authelia.com/images/branding/logo-cropped.png\",\n    args: {\n      name: \"openid_connect\",\n      strategy_class: \"OmniAuth::Strategies::OpenIDConnect\",\n      issuer: \"https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\",\n      discovery: true,\n      scope: [\"openid\",\"profile\",\"email\",\"groups\"],\n      client_auth_method: \"basic\",\n      response_type: \"code\",\n      response_mode: \"query\",\n      uid_field: \"preferred_username\",\n      send_scope_to_token_endpoint: true,\n      pkce: true,\n      client_options: {\n        identifier: \"gitlab\",\n        secret: \"insecure_secret\",\n        redirect_uri: \"https://gitlab.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/users/auth/openid_connect/callback\"\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: FreeIPA User Filter\nDESCRIPTION: This LDAP filter searches for users in FreeIPA. It combines username or email matching with checks for the person object class, account lock status, password expiration, and principal expiration. This filter ensures that only active, non-locked, and non-expired user accounts are returned.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/ldap.md#2025-04-21_snippet_5\n\nLANGUAGE: LDAP\nCODE:\n```\n\"(&(&#124;({username_attribute}={input})({mail_attribute}={input}))(objectClass=person)(!(nsAccountLock=TRUE))(krbPasswordExpiration>={date-time:generalized})(&#124;(!(krbPrincipalExpiration=*))(krbPrincipalExpiration>={date-time:generalized})))\"\n```\n\n----------------------------------------\n\nTITLE: Basic Privacy Policy Configuration Example in YAML\nDESCRIPTION: Example YAML configuration for the privacy policy section showing default values. This snippet demonstrates how to structure the privacy_policy section in the configuration.yml file.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/miscellaneous/privacy-policy.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nprivacy_policy:\n  enabled: false\n  require_user_acceptance: false\n  policy_url: ''\n```\n\n----------------------------------------\n\nTITLE: WebFinger Response for Tailscale Integration\nDESCRIPTION: This JSON snippet represents the WebFinger response that needs to be served from the domain root to enable Tailscale to discover the Authelia OpenID Connect provider.  It specifies the subject account and a link to the OpenID Connect issuer endpoint, which is Authelia in this case. This configuration enables Tailscale to utilize Authelia as its OpenID Connect provider.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/tailscale/index.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n \"{\\n  \\\"subject\\\": \\\"acct:user@{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}\\\",\\n  \\\"links\\\": [{\\n    \\\"rel\\\": \\\"http://openid.net/specs/connect/1.0/issuer\\\",\\n    \\\"href\\\": \\\"https://{{< sitevar name=\\\"subdomain-authelia\\\" nojs=\\\"auth\\\" >}}.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}\\\"\\n  }]\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OIDC Client for Flower (YAML)\nDESCRIPTION: This YAML snippet configures an OpenID Connect client in Authelia for Flower. It defines the client ID, secret, redirect URIs, scopes, and other necessary parameters for the OIDC flow. The client secret is a PBKDF2-SHA512 hash of 'insecure_secret'.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/flower/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'flower'\n        client_name: 'Flower'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://flower.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/login'\n        scopes:\n          - 'openid'\n          - 'email'\n          - 'profile'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_post'\n```\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Self-Signed Certificate with Authelia CLI (Bare-Metal)\nDESCRIPTION: Uses the Authelia CLI binary to generate a self-signed RSA certificate for 'example.com'.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/generating-secure-values.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto certificate rsa generate --common-name example.com\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Keypair with OpenSSL\nDESCRIPTION: Uses the openssl command to generate an RSA private key and extract the public key.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/generating-secure-values.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out private.pem 2048\nopenssl rsa -in private.pem -outform PEM -pubout -out public.pem\n```\n\n----------------------------------------\n\nTITLE: Using the authelia storage encryption change-key Command\nDESCRIPTION: The basic syntax for the authelia storage encryption change-key command which is used to change the encryption key of an Authelia SQL database.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_encryption_change-key.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage encryption change-key [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Policy in Authelia YAML Configuration\nDESCRIPTION: This YAML configuration snippet demonstrates how to set up both standard and zxcvbn password policies in Authelia. The standard policy controls password length and character requirements, while zxcvbn rates password strength on a scale from 0-4.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/security/password-policy.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npassword_policy:\n  standard:\n    enabled: false\n    min_length: 8\n    max_length: 0\n    require_uppercase: false\n    require_lowercase: false\n    require_number: false\n    require_special: false\n  zxcvbn:\n    enabled: false\n    min_score: 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Ports in Docker Compose (YAML)\nDESCRIPTION: This YAML snippet configures the Authelia service in a Docker Compose file, specifically exposing a port on the host machine to allow communication with Authelia. It's intended for scenarios where Authelia is accessed from daemons running directly on the host.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/deployment/docker.md#2025-04-21_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n---\nservices:\n  authelia:\n    container_name: '{{< sitevar name=\"host\" nojs=\"authelia\" >}}'\n    image: 'docker.io/authelia/authelia:latest'\n    restart: 'unless-stopped'\n    networks:\n      net:\n        aliases: []\n    ports:\n      - '127.0.0.1:{{< sitevar name=\"port\" nojs=\"9091\" >}}:{{< sitevar name=\"port\" nojs=\"9091\" >}}'\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Client for Cloudflare Zero Trust - YAML\nDESCRIPTION: This snippet provides an example YAML configuration for Authelia as an OpenID Connect client. It defines the client settings such as client_id, client_name, client_secret, authorization policies, redirect URIs, and required scopes. These values are crucial for Authelia to authenticate requests from Cloudflare Zero Trust.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/cloudflare-zerotrust/index.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'cloudflare'\n        client_name: 'Cloudflare ZeroTrust'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://example-team.cloudflareaccess.com/cdn-cgi/access/callback'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication Backend in YAML\nDESCRIPTION: Example configuration for Authelia's authentication backend showing the basic settings for password reset and password change functionality. The configuration includes refresh interval settings and options to disable or customize password management features.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/first-factor/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthentication_backend:\n  refresh_interval: '5m'\n  password_reset:\n    disable: false\n    custom_url: ''\n  password_change:\n    disable: false\n```\n\n----------------------------------------\n\nTITLE: Basic Authelia Server Configuration in YAML\nDESCRIPTION: Main configuration structure for Authelia server including address, health checks, TLS, headers, buffers, timeouts and endpoints settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/miscellaneous/server.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  address: 'tcp://:9091/'\n  disable_healthcheck: false\n  tls:\n    key: ''\n    certificate: ''\n    client_certificates: []\n  headers:\n    csp_template: ''\n  buffers:\n    read: 4096\n    write: 4096\n  timeouts:\n    read: '6s'\n    write: '6s'\n    idle: '30s'\n  endpoints:\n    enable_pprof: false\n    enable_expvars: false\n    authz: {}\n    rate_limits: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Base Configuration\nDESCRIPTION: Base Traefik configuration file that sets up entrypoints, TLS settings, API access, logging, and certificate resolvers. This configuration enables HTTPS with automatic redirects from HTTP.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/blog/authelia-traefik-setup-guide/index.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n## Base Traefik configuration\napi:\n  dashboard: true\n  debug: false\n  insecure: false\n\nlog:\n  level: 'INFO'\naccessLog:\n  filePath: '/logs/access.log'\n\nentryPoints:\n  http:\n    address: ':80'\n    http:\n      redirections:\n       entryPoint:\n         to: 'https'\n         scheme: 'https'\n         permanent: true\n  https:\n    address: ':443'\n    http:\n      tls:\n        certResolver: 'myresolver'\n\nproviders:\n  docker:\n    endpoint: 'unix:///var/run/docker.sock'\n    exposedByDefault: false\n  file:\n    filename: '/dynamic.yml'\n\ncertificatesResolvers:\n  myresolver:\n    acme:\n      storage: '/data/acme.json'\n      httpChallenge:\n        entryPoint: 'http'\n\ntls:\n  options:\n    default:\n      minVersion: 'VersionTLS12'\n      cipherSuites:\n        - 'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256'\n        - 'TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256'\n        - 'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384'\n        - 'TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384'\n        - 'TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305'\n        - 'TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305'\n```\n\n----------------------------------------\n\nTITLE: Configuring HumHub OIDC Connector in PHP\nDESCRIPTION: This PHP configuration snippet configures the HumHub OIDC Connector to use Authelia as the OpenID Connect provider. It defines the OIDC client settings such as domain, client ID, client secret, authentication URLs, API base URL, user info URL, and scopes. It assumes that the Worteks HumHub Auth OIDC extension is installed.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/humhub/index.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"return [\\n    'components' => [\\n        'urlManager' => [\\n            'enablePrettyUrl' => true,\\n        ],\\n        'authClientCollection' => [\\n          'clients' => [\\n            'oidc' => [\\n              'class' => 'worteks\\\\humhub\\\\authclient\\\\OIDC',\\n              'domain' => 'https://{{< sitevar name=\\\"subdomain-authelia\\\" nojs=\\\"auth\\\" >}}.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}',\\n              'clientId' => 'humhub',\\n              'clientSecret' => 'insecure_secret',\\n              'defaultTitle' => 'login with SSO',\\n              'cssIcon' => 'fa fa-sign-in',\\n              'authUrl' => '/api/oidc/authorization',\\n              'tokenUrl' => '/api/oidc/token',\\n              'apiBaseUrl' => '/api/oidc',\\n              'userInfoUrl' => 'userinfo',\\n              'scope' => 'openid profile email'\\n            ],\\n         ],\\n       ],\\n    ],\\n];\\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Rules with YAML for Authelia\nDESCRIPTION: This YAML snippet illustrates how to define advanced query criteria within Authelia access control rules, allowing for both `OR` and `AND` logic to evaluate multiple query parameters effectively.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/security/access-control.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\naccess_control:\n  rules:\n    - domain: 'app.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      policy: 'bypass'\n      query:\n      - - operator: 'present'\n          key: 'secure'\n        - operator: 'absent'\n          key: 'insecure'\n      - - operator: 'pattern'\n          key: 'token'\n          value: '^(abc123|zyx789)$'\n        - operator: 'not pattern'\n          key: 'random'\n          value: '^(1|2)$'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio Authorization Policy for Authelia\nDESCRIPTION: This YAML snippet defines an Istio Authorization Policy that applies the Authelia authentication filter to a specific domain. It demonstrates how to set up custom authorization using Authelia in Istio.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/kubernetes/istio.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 'security.istio.io/v1beta1'\nkind: 'AuthorizationPolicy'\nmetadata:\n  name: 'nextcloud'\n  namespace: 'apps'\nspec:\n  action: 'CUSTOM'\n  provider:\n    name:  'authelia'\n  rules:\n    - to:\n        - operation:\n            hosts:\n              - 'nextcloud.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Attributes Mapping in Authelia\nDESCRIPTION: Example configuration for mapping LDAP properties to Authelia attributes. This snippet demonstrates how to map the LDAP property 'l' to the Authelia attribute 'locality'.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/attributes.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthentication_backend:\n  ldap:\n    attributes:\n      locality: 'l'\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Client for Firezone in YAML\nDESCRIPTION: This YAML snippet provides a sample configuration for setting up Authelia with Firezone as an OpenID Connect client. It includes important parameters like client_id, client_secret, redirect_uris, and scopes necessary for the OIDC flow.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/firezone/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'firezone'\n        client_name: 'Firezone'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        require_pkce: true\n        pkce_challenge_method: 'S256'\n        redirect_uris:\n          - 'https://firezone.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/auth/oidc/authelia/callback'\n        scopes:\n          - 'openid'\n          - 'email'\n          - 'profile'\n        userinfo_signed_response_alg: 'none'\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-Configured Consent Duration\nDESCRIPTION: Sets the duration for which a user's pre-configured consent remains valid. Only valid when subject, client ID, and requested scopes match exactly.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/openid-connect/clients.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npre_configured_consent_duration: 1 week\n```\n\n----------------------------------------\n\nTITLE: Access Control Rule: Fully Expressed YAML List of Lists\nDESCRIPTION: This YAML snippet demonstrates a fully expressed configuration for a list of lists in an access control rule. The rule matches if 'c' is true OR ('a' AND 'b' are true). This format should not be used for the configuration item type `list(list(object))`, see [List of List Objects](#list-of-list-objects) instead.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/rule-operators.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nrule:\n  - - 'a'\n    - 'b'\n  - - 'c'\n```\n```\n\n----------------------------------------\n\nTITLE: Active Directory Group Filter\nDESCRIPTION: This LDAP filter searches for groups in Active Directory. It verifies group membership based on the distinguished name and checks for specific account types (Global/Universal or Domain Local Security Group Objects). It ensures that only valid security groups are returned.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/ldap.md#2025-04-21_snippet_2\n\nLANGUAGE: LDAP\nCODE:\n```\n\"(&(member={dn})(&#124;(sAMAccountType=268435456)(sAMAccountType=536870912)))\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Token Signed Response Key ID\nDESCRIPTION: Defines the key ID for signing Access Tokens, enabling JWT encoding per RFC9068 with specific validation and use case recommendations\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/openid-connect/clients.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\naccess_token_signed_response_key_id\n```\n\n----------------------------------------\n\nTITLE: Configuring Identity Validation in YAML\nDESCRIPTION: Basic YAML configuration structure for setting up identity validation in Authelia. Includes empty configurations for elevated session and reset password validation methods.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-validation/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_validation:\n  elevated_session: {}\n  reset_password: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Client Settings in YAML\nDESCRIPTION: This YAML configuration snippet defines the client settings for integrating EspoCRM with Authelia as an OpenID Connect provider. It specifies the client ID, secret, authorization policy, redirect URIs, and scopes required for successful authentication. Make sure to replace sensitive values like the client secret with secure equivalents in production.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/espocrm/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'espocrm'\n        client_name: 'EspoCRM'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://espocrm.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/oauth-callback.php'\n        scopes:\n          - 'openid'\n          - 'email'\n          - 'profile'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_basic'\n```\n\n----------------------------------------\n\nTITLE: Running Docker with Multiple Configuration Files\nDESCRIPTION: Examples showing how to run Authelia in Docker with multiple configuration files that will be merged in the specified order.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/methods/files.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d authelia/authelia:latest authelia --config configuration.yml --config config-acl.yml --config config-other.yml\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d authelia/authelia:latest authelia --config configuration.yml,config-acl.yml,config-other.yml\n```\n\n----------------------------------------\n\nTITLE: RFC2307bis User Filter\nDESCRIPTION: This LDAP filter is for RFC2307bis implementations, used to search for users. It combines username or email matching with object class checks (inetOrgPerson or organizationalPerson) and a password reset check. It ensures to return valid user accounts that have not requested a password reset.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/ldap.md#2025-04-21_snippet_3\n\nLANGUAGE: LDAP\nCODE:\n```\n\"(&(&#124;({username_attribute}={input})({mail_attribute}={input}))(&#124;(objectClass=inetOrgPerson)(objectClass=organizationalPerson))(!(pwdReset=TRUE)))\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HAProxy with Authelia (TLS Example)\nDESCRIPTION: This snippet shows an HAProxy configuration with TLS support for Authelia integration. It includes additional backend configurations for TLS communication and a separate proxy for Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/haproxy.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nglobal\n    # Path to haproxy-lua-http, below example assumes /usr/local/etc/haproxy/haproxy-lua-http/http.lua\n    lua-prepend-path /usr/local/etc/haproxy/?/http.lua\n    # Path to haproxy-auth-request\n    lua-load /usr/local/etc/haproxy/auth-request.lua\n    log stdout format raw local0 debug\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option forwardfor\n\nfrontend fe_http\n    bind *:443 ssl crt /usr/local/etc/haproxy/haproxy.pem\n\n    ## Trusted Proxies.\n    http-request del-header X-Forwarded-For\n\n    ## Comment the above directive and the two directives below to enable the trusted proxies ACL.\n    # acl src-trusted_proxies src -f trusted_proxies.src.acl\n    # http-request del-header X-Forwarded-For if !src-trusted_proxies\n\n    ## Ensure X-Forwarded-For is set for the auth request.\n    acl hdr-xff_exists req.hdr(X-Forwarded-For) -m found\n    http-request set-header X-Forwarded-For %[src] if !hdr-xff_exists\n    option forwardfor\n\n    # Host ACLs\n    acl protected-frontends hdr(Host) -m reg -i ^(?i)(nextcloud|heimdall)\\.example\\.com\n    acl host-authelia hdr(Host) -i auth.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\n    acl host-nextcloud hdr(Host) -i nextcloud.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\n    acl host-heimdall hdr(Host) -i heimdall.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\n\n    http-request set-var(req.scheme) str(https) if { ssl_fc }\n    http-request set-var(req.scheme) str(http) if !{ ssl_fc }\n    http-request set-var(req.questionmark) str(?) if { query -m found }\n\n    # Required Headers\n    http-request set-header X-Forwarded-Method %[method]\n    http-request set-header X-Forwarded-Proto  %[var(req.scheme)]\n    http-request set-header X-Forwarded-Host   %[req.hdr(Host)]\n    http-request set-header X-Forwarded-URI    %[path]%[var(req.questionmark)]%[query]\n\n    # Protect endpoints with haproxy-auth-request and Authelia\n    http-request lua.auth-intercept be_authelia_proxy /api/authz/forward-auth HEAD * remote-user,remote-groups,remote-name,remote-email - if protected-frontends\n    http-request deny if protected-frontends !{ var(txn.auth_response_successful) -m bool } { var(txn.auth_response_code) -m int 403 }\n    http-request redirect location %[var(txn.auth_response_location)] if protected-frontends !{ var(txn.auth_response_successful) -m bool }\n\n    # Authelia backend route\n    use_backend be_authelia if host-authelia\n\n    # Service backend route(s)\n    use_backend be_nextcloud if host-nextcloud\n    use_backend be_heimdall if host-heimdall\n\nbackend be_authelia\n    server authelia {{< sitevar name=\"host\" nojs=\"authelia\" >}}:{{< sitevar name=\"port\" nojs=\"9091\" >}}\n\nbackend be_authelia_proxy\n    mode http\n    server proxy 127.0.0.1:9092\n\nlisten authelia_proxy\n    mode http\n    bind 127.0.0.1:9092\n    server authelia {{< sitevar name=\"host\" nojs=\"authelia\" >}}:{{< sitevar name=\"port\" nojs=\"9091\" >}} ssl verify none\n\nbackend be_nextcloud\n    ## Pass the Set-Cookie response headers to the user.\n    acl set_cookie_exist var(req.auth_response_header.set_cookie) -m found\n    http-response set-header Set-Cookie %[var(req.auth_response_header.set_cookie)] if set_cookie_exist\n\n    server nextcloud nextcloud:443 ssl verify none\n\nbackend be_heimdall\n    ## Pass the Set-Cookie response headers to the user.\n    acl set_cookie_exist var(req.auth_response_header.set_cookie) -m found\n    http-response set-header Set-Cookie %[var(req.auth_response_header.set_cookie)] if set_cookie_exist\n\n    server heimdall heimdall:443 ssl verify none\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia with lldap in YAML\nDESCRIPTION: Example YAML configuration for integrating Authelia with lldap. This configuration specifies the connection parameters, custom filters tailored for lldap's implementation, and appropriate attribute mappings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/ldap/introduction.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nauthentication_backend:\n  ldap:\n    address: 'ldap://lldap:3890'\n    implementation: 'custom'\n    timeout: '5s'\n    start_tls: false\n    base_dn: 'dc=example,DC=com'\n    additional_users_dn: 'OU=people'\n    # To allow sign in both with username and email, one can use a filter like\n    # (&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))\n    users_filter: '(&({username_attribute}={input})(objectClass=person))'\n    additional_groups_dn: 'OU=groups'\n    groups_filter: '(member={dn})'\n    # The username and password of the admin or service user.\n    user: 'UID=authelia,OU=people,DC=example,DC=com'\n    password: 'SUPER_COMPLEX_PASSWORD'\n    attributes:\n      distinguished_name: 'distinguishedName'\n      username: 'uid'\n      mail: 'mail'\n      member_of: 'memberOf'\n      group_name: 'cn'\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Sentinel Nodes for Authelia High Availability\nDESCRIPTION: Example configuration for Redis Sentinel nodes in Authelia. This configuration is part of a high availability setup that allows Authelia to connect to multiple Redis Sentinel instances.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/session/redis.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- host: redis-sentinel-0\n  port: 26379\n```\n\n----------------------------------------\n\nTITLE: Authelia Debug Configuration in Docker Compose (YAML)\nDESCRIPTION: This YAML snippet provides a debug configuration for the Authelia service in a Docker Compose file. It disables the healthcheck, sets the log level to trace, and adds a sleep command to keep the container running indefinitely, enabling interactive debugging.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/deployment/docker.md#2025-04-21_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\n---\nservices:\n  authelia:\n    healthcheck:\n      disable: true\n    environment:\n      AUTHELIA_LOG_LEVEL: 'trace'\n    command: 'sleep 3300'\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OIDC Client for Incus\nDESCRIPTION: YAML configuration defining the OpenID Connect client settings for Incus in Authelia, specifying client ID, redirect URIs, scopes, and token signing algorithms\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/incus/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    clients:\n      - client_id: 'incus'\n        client_name: 'Incus'\n        public: true\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://incus.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/iodc/callback'\n        audience:\n          - 'https://incus.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n        scopes:\n          - 'openid'\n          - 'offline_access'\n        grant_types:\n          - 'refresh_token'\n          - 'authorization_code'\n        access_token_signed_response_alg: 'RS256'\n        userinfo_signed_response_alg: 'none'\n```\n\n----------------------------------------\n\nTITLE: Authentication Detection Request Configuration in NGINX\nDESCRIPTION: NGINX configuration for handling authentication detection requests with support for both basic and portal authentication.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx.md#2025-04-21_snippet_18\n\nLANGUAGE: nginx\nCODE:\n```\nauth_request /internal/authelia/authz;\n\nset_escape_uri $target_url $scheme://$http_host$request_uri;\n\nauth_request_set $user $upstream_http_remote_user;\nauth_request_set $groups $upstream_http_remote_groups;\nauth_request_set $name $upstream_http_remote_name;\nauth_request_set $email $upstream_http_remote_email;\n\nproxy_set_header Remote-User $user;\nproxy_set_header Remote-Groups $groups;\nproxy_set_header Remote-Name $name;\nproxy_set_header Remote-Email $email;\n\nerror_page 401 =302 /internal/authelia/authz/detect?rd=$target_url;\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Metrics in Authelia (YAML)\nDESCRIPTION: Example YAML configuration for setting up Prometheus metrics in Authelia. This snippet shows how to enable/disable metrics, configure the listener address, buffer sizes for read/write operations, and various timeout settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/telemetry/metrics.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntelemetry:\n  metrics:\n    enabled: false\n    address: 'tcp://:9959/metrics'\n    buffers:\n      read: 4096\n      write: 4096\n    timeouts:\n      read: '6s'\n      write: '6s'\n      idle: '30s'\n```\n\n----------------------------------------\n\nTITLE: Removing Authelia Session Header in Caddy Reverse Proxy\nDESCRIPTION: This snippet demonstrates how to remove the Authelia session cookie from the Cookie header before forwarding requests to the backend. It uses the header_up directive to replace the authelia_session value with an underscore.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/caddy.md#2025-04-21_snippet_4\n\nLANGUAGE: caddyfile\nCODE:\n```\nnextcloud.{{< sitevar name=\"domain\" nojs=\"example.com\" >}} {\n        forward_auth {{< sitevar name=\"host\" nojs=\"authelia\" >}}:{{< sitevar name=\"port\" nojs=\"9091\" >}} {\n                uri /api/authz/forward-auth\n                copy_headers Remote-User Remote-Groups Remote-Email Remote-Name\n        }\n\n        reverse_proxy nextcloud:80 {\n                header_up Cookie \"authelia_session=[^;]+\" \"authelia_session=_\"\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment with Multiple Configuration Files\nDESCRIPTION: An excerpt from a Kubernetes deployment manifest that configures Authelia to use multiple configuration files by specifying command arguments.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/methods/files.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Deployment\napiVersion: apps/v1\nmetadata:\n  name: authelia\n  namespace: authelia\n  labels:\n    app.kubernetes.io/instance: authelia\n    app.kubernetes.io/name: authelia\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/instance: authelia\n      app.kubernetes.io/name: authelia\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/instance: authelia\n        app.kubernetes.io/name: authelia\n    spec:\n      enableServiceLinks: false\n      containers:\n        - name: authelia\n          image: docker.io/authelia/authelia:latest\n          command:\n            - authelia\n          args:\n            - '--config=/configuration.yml'\n            - '--config=/configuration.acl.yml'\n```\n\n----------------------------------------\n\nTITLE: Configuring File System Notifier in Authelia with YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to set up the filesystem notifier in Authelia. It defines the filename where notification emails will be saved as plain text. This method uses the plain text email template for readability purposes.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/notifications/file.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnotifier:\n  disable_startup_check: false\n  filesystem:\n    filename: '/config/notification.txt'\n```\n\n----------------------------------------\n\nTITLE: Authelia Client Configuration for Warpgate\nDESCRIPTION: This YAML configuration defines an Authelia client for Warpgate, specifying the client ID, secret, authorization policy, redirect URIs, and scopes.  It requires the `identity_providers.oidc` section to be configured in Authelia. It enables Warpgate to authenticate users through Authelia's OpenID Connect provider.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/warpgate/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'warpgate'\n        client_name: 'Warpgate'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://warpgate.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/@warpgate/api/sso/return'\n        scopes:\n          - 'openid'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n```\n```\n\n----------------------------------------\n\nTITLE: Secret Template Function Example\nDESCRIPTION: Shows usage of the secret template function to include file contents without trailing newlines\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/templating.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nexample: '{{ secret \"/absolute/path/to/file\" }}'\n```\n\n----------------------------------------\n\nTITLE: Configuring NetBird with OIDC in Python\nDESCRIPTION: This python snippet provides the authentication setup in the `netbirdconfig.py` file required for integration with Authelia via OpenID Connect. Ensure the redirect URI aligns with your deployment.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/netbird/index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nauth = '.*@{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\nauth_provider = 'netbird.views.auth.AutheliaLoginHandler'\noauth2_key = 'netbird'\noauth2_secret = 'insecure_secret'\noauth2_redirect_uri = 'https://netbird.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/login'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Client in YAML\nDESCRIPTION: This YAML snippet shows the client configuration required for Authelia to work with Actual Budget, including client ID, secret, redirect URIs, and scopes.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/actual-budget/index.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'actual-budget'\n        client_name: 'Actual Budget'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://actual-budget.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/openid/callback'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'groups'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_basic'\n```\n\n----------------------------------------\n\nTITLE: Generating ECDSA Key Pair using authelia CLI\nDESCRIPTION: This command generates a cryptographic ECDSA key pair. It allows customization of the elliptic curve, output directory, file names, and legacy format options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_ecdsa_generate.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto pair ecdsa generate [flags]\n```\n\n----------------------------------------\n\nTITLE: User Database YAML Configuration\nDESCRIPTION: This YAML snippet represents the structure of a user database file for Authelia. It defines user accounts with properties like disabled status, display name, password (hashed), email, and group memberships. This configuration is used to authenticate users.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/passwords.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# yaml-language-server: $schema=https://www.authelia.com/schemas/latest/json-schema/user-database.json\nusers:\n  john:\n    disabled: false\n    displayname: 'John Doe'\n    password: '$argon2id$v=19$m=65536,t=3,p=2$BpLnfgDsc2WD8F2q$o/vzA4myCqZZ36bUGsDY//8mKUYNZZaR0t4MFFSs+iM'\n    email: 'john.doe@authelia.com'\n    groups:\n      - 'admins'\n      - 'dev'\n  harry:\n    disabled: false\n    displayname: 'Harry Potter'\n    password: '$argon2id$v=19$m=65536,t=3,p=2$BpLnfgDsc2WD8F2q$o/vzA4myCqZZ36bUGsDY//8mKUYNZZaR0t4MFFSs+iM'\n    email: 'harry.potter@authelia.com'\n    groups: []\n  james:\n    disabled: false\n    displayname: 'James Dean'\n    password: '$argon2id$v=19$m=65536,t=3,p=2$BpLnfgDsc2WD8F2q$o/vzA4myCqZZ36bUGsDY//8mKUYNZZaR0t4MFFSs+iM'\n    email: 'james.dean@authelia.com'\n    groups: []\n  bob:\n    disabled: false\n    displayname: 'Bob Dylan'\n    password: '$argon2id$v=19$m=65536,t=3,p=2$BpLnfgDsc2WD8F2q$o/vzA4myCqZZ36bUGsDY//8mKUYNZZaR0t4MFFSs+iM'\n    email: 'bob.dylan@authelia.com'\n    groups:\n      - 'dev'\n    given_name: 'Robert'\n    family_name: 'Zimmerman'\n    middle_name: 'Allen'\n    nickname: 'Bob'\n    profile: 'https://en.wikipedia.org/wiki/Bob_Dylan'\n    picture: 'https://kelvinokaforart.com/wp-content/uploads/2023/01/Bob-Dylan.jpg'\n    website: 'https://www.bobdylan.com/'\n    gender: 'male'\n    birthdate: '1941-05-24'\n    zoneinfo: 'America/Chicago'\n    locale: 'en-US'\n    phone_number: '+1 (425) 555-1212'\n    phone_extension: '1000'\n    address:\n      street_address: '2-3 Kitanomarukoen'\n      locality: 'Chiyoda City'\n      region: 'Tokyo'\n      postal_code: '102-8321'\n      country: 'Japan'\n    extra:\n      example: 'value'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service Links for Authelia\nDESCRIPTION: This code comment provides important information for Kubernetes users not using the provided Helm chart. It instructs them to configure the enableServiceLinks option, which is necessary for Authelia to function correctly in a Kubernetes environment.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/prologue/migration.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{{< callout context=\"note\" title=\"Note\" icon=\"outline/info-circle\" >}}\nIf you're using Authelia with Kubernetes and are not using the provided\n[helm chart](https://charts.authelia.com) you will be required to\n[configure the enableServiceLinks](../../integration/kubernetes/introduction.md#enable-service-links) option.\n{{< /callout >}}\n```\n\n----------------------------------------\n\nTITLE: Minimal Headers-Only Proxy Configuration for NGINX with Authelia\nDESCRIPTION: Simplified proxy configuration with only the essential headers required for Authelia to operate properly. Suitable for environments where the standard configuration may be too extensive.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx.md#2025-04-21_snippet_10\n\nLANGUAGE: nginx\nCODE:\n```\n## Headers\nproxy_set_header Host $host;\nproxy_set_header X-Original-URL $scheme://$http_host$request_uri;\nproxy_set_header X-Forwarded-Proto $scheme;\nproxy_set_header X-Forwarded-Host $http_host;\nproxy_set_header X-Forwarded-URI $request_uri;\nproxy_set_header X-Forwarded-Ssl on;\nproxy_set_header X-Forwarded-For $remote_addr;\n```\n\n----------------------------------------\n\nTITLE: Configuring JWKS for OpenID Connect in Authelia\nDESCRIPTION: Example configuration for JSON Web Key Set (JWKS) in Authelia's OpenID Connect Provider. This shows how to set up key identifiers, algorithms, usage flags, and certificate chains for signing tokens.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/openid-connect/provider.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    jwks:\n      - key_id: 'example'\n        algorithm: 'RS256'\n        use: 'sig'\n        key: |\n          -----BEGIN PRIVATE KEY-----\n          ...\n          -----END PRIVATE KEY-----\n        certificate_chain: |\n          -----BEGIN CERTIFICATE-----\n          ...\n          -----END CERTIFICATE-----\n          -----BEGIN CERTIFICATE-----\n          ...\n          -----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Installing Authelia APT Repository on Debian\nDESCRIPTION: This snippet shows how to add the Authelia APT repository to a Debian-based system. It installs necessary certificates, adds the repository's signing key, and configures the repository source.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/deployment/bare-metal.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install ca-certificates curl\nsudo curl -fsSL https://apt.authelia.com/organization/signing.asc -o /usr/share/keyrings/authelia.asc\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/authelia.asc] https://apt.authelia.com/stable/debian/debian all main\" | \\\n  sudo tee /etc/apt/sources.list.d/authelia.list > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Assistant OIDC Authentication\nDESCRIPTION: YAML configuration for Home Assistant's OIDC authentication settings, specifying client credentials, discovery URL, and role mappings\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/home-assistant/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nauth_oidc:\n  client_id: 'home-assistant'\n  client_secret: 'insecure_secret'\n  discovery_url: 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/.well-known/openid-configuration'\n  display_name: 'Authelia'\n  roles:\n    admin: 'admins'\n```\n\n----------------------------------------\n\nTITLE: Komga OIDC Configuration\nDESCRIPTION: This YAML snippet configures Komga to use Authelia as an OpenID Connect provider.  It sets the client ID, client secret, scopes, authorization grant type, redirect URI, issuer URI, and the attribute used for the username. The redirect URI uses placeholders that are replaced during runtime.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/komga/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nkomga:\n  ## Comment if you don't want automatic account creation.\n  oauth2-account-creation: true\nspring:\n  security:\n    oauth2:\n      client:\n        registration:\n          authelia:\n            client-id: 'komga'\n            client-secret: 'insecure_secret'\n            client-name: 'Authelia'\n            scope: 'openid,profile,email'\n            authorization-grant-type: 'authorization_code'\n            redirect-uri: \"{baseScheme}://{baseHost}{basePort}{basePath}/login/oauth2/code/authelia\"\n        provider:\n          authelia:\n            issuer-uri: 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n            user-name-attribute: 'preferred_username'\n````\n```\n\n----------------------------------------\n\nTITLE: Protecting Whoami Service with Authelia in NGINX\nDESCRIPTION: NGINX configuration for securing a Whoami service with Authelia authentication. Demonstrates a simple protected endpoint configuration pattern that can be applied to various services.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx.md#2025-04-21_snippet_7\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80;\n    server_name whoami.*;\n\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name whoami.*;\n\n    include /config/nginx/snippets/ssl.conf;\n    include /config/nginx/snippets/authelia-location.conf;\n\n    set $upstream http://whoami;\n\n    location / {\n        include /config/nginx/snippets/proxy.conf;\n        include /config/nginx/snippets/authelia-authrequest.conf;\n        proxy_pass $upstream;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Schema for Configuration in YAML\nDESCRIPTION: This code snippet shows how to define a JSON Schema for Authelia's configuration file in YAML format. The schema is linked using a specific URL format that includes version and name placeholders. Key parameters include '<version>' and '<name>', which must be replaced accordingly.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/schemas.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# yaml-language-server: $schema=https://www.authelia.com/schemas/<version>/json-schema/<name>.json\\n\\nexample: 'this is just an example'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Connect JWKS in YAML\nDESCRIPTION: Example YAML configuration for setting up JSON Web Key Sets (JWKS) in Authelia's OpenID Connect provider. This shows both the old and new configuration styles, including an option using a template filter for secret management.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/blog/release-notes-4.38/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    issuer_private_key: |\n      -----BEGIN PRIVATE KEY-----\n      ...\n      -----END PRIVATE KEY-----\n    issuer_certificate_chain: |\n      -----BEGIN CERTIFICATE-----\n      ...\n      -----END CERTIFICATE-----\n```\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    jwks:\n      - key: |\n          -----BEGIN PRIVATE KEY-----\n          ...\n          -----END PRIVATE KEY-----\n        certificate_chain: |\n          -----BEGIN CERTIFICATE-----\n          ...\n          -----END CERTIFICATE-----\n```\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    jwks:\n      - key: {{ secret \"/config/jwks/rsa.2048.pem\" | mindent 10 \"|\" | msquote }}\n        certificate_chain: {{ secret \"/config/jwks/rsa.2048.cert\" | mindent 10 \"|\" | msquote }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Client for MinIO in YAML\nDESCRIPTION: This YAML snippet describes the client configuration needed for Authelia to interact with MinIO through OpenID Connect. It includes necessary parameters such as client ID, client secret, and scopes that define the access permissions of the application.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/minio/index.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'minio'\n        client_name: 'MinIO'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://minio.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/oauth_callback'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n          - 'groups'\n        userinfo_signed_response_alg: 'none'\n```\n\n----------------------------------------\n\nTITLE: Authentication Method Reference Values Table\nDESCRIPTION: A table documenting various authentication method reference values supported by Authelia, including their factors, channels, and support status\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/authentication-method-references.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Value  |                            Description                            |   Factor   | Channel  |\n|:------:|:-----------------------------------------------------------------:|:----------:|:--------:|\n|  mfa   |      User used multiple factors to login (see factor column)      |    N/A     |   N/A    |\n|  mca   |     User used multiple channels to login (see channel column)     |    N/A     |   N/A    |\n|  user  |  User confirmed they were present when using their hardware key   |    N/A     |   N/A    |\n|  pin   | User confirmed they are the owner of the hardware key with a pin  |    N/A     |   N/A    |\n|  kba   |         User used a knowledge based authentication factor         | Knowledge  |   N/A    |\n|  pwd   |            User used a username and password to login             | Knowledge  | Browser  |\n|  otp   |                      User used TOTP to login                      | Possession | Browser  |\n|  pop   | User used a software or hardware proof-of-possession key to login | Possession | Browser  |\n|  hwk   |       User used a hardware proof-of-possession key to login       | Possession | Browser  |\n|  swk   |       User used a software proof-of-possession key to login       | Possession | Browser  |\n|  sms   |                      User used Duo to login                       | Possession | External |\n```\n\n----------------------------------------\n\nTITLE: Stirling-PDF OIDC Environment Variables (Post-Configuration)\nDESCRIPTION: These environment variables further refine the Stirling-PDF configuration after enabling SSO.  They allow disabling form login, preventing automatic user creation, and blocking registration, enhancing security and control over user access.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/stirling-pdf/index.md#2025-04-21_snippet_2\n\nLANGUAGE: env\nCODE:\n```\n```env\nSECURITY_LOGINMETHOD=oauth2 # Change this to all if you need to login with the web user which might be your Stirling-PDF administrator.\nSECURITY_OAUTH2_AUTOCREATEUSER=false\nSECURITY_OAUTH2_BLOCKREGISTRATION=true\n```\n```\n\n----------------------------------------\n\nTITLE: Setting File Permissions for Authelia (Read Access)\nDESCRIPTION: This shell script sets the ownership and permissions for Authelia files, granting read access to a specific user and group.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/overview/security/measures.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nchown -r 8000:9000 .data/authelia\nfind .data/authelia/ -type d -exec chmod 750 {} \\;\nfind .data/authelia/ -type f -exec chmod 640 {} \\;\n```\n\n----------------------------------------\n\nTITLE: Extracting Authelia Registration Link from Notification File\nDESCRIPTION: This Bash command uses grep to extract the registration link from the Authelia notification file, which is useful for completing the second-factor authentication setup in the demo environment.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/deployment/docker.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngrep -Eo '\"https://.*\" ' ./authelia/notification.txt.\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OIDC Client for Odoo\nDESCRIPTION: YAML configuration for setting up an OpenID Connect client in Authelia for Odoo authentication with two-factor authorization and specific scopes\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/odoo/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    clients:\n      - client_id: 'odoo'\n        client_name: 'Odoo'\n        public: true\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://odoo.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/auth_oauth/signin'\n        scopes:\n          - 'openid'\n          - 'email'\n          - 'profile'\n        response_types:\n          - 'token'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'none'\n```\n\n----------------------------------------\n\nTITLE: Default Authorization Endpoints Configuration\nDESCRIPTION: Overview of default authorization endpoints in Authelia, specifying paths, implementations, and authentication strategies\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/proxy-authorization.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|     Name     |          Path           | [Implementation] |           [Authn Strategies]           |\n|:------------:|:-----------------------:|:----------------:|:--------------------------------------:|\n| forward-auth | /api/authz/forward-auth |  [ForwardAuth]   | [HeaderAuthorization], [CookieSession] |\n|  ext-authz   |  /api/authz/ext-authz   |    [ExtAuthz]    | [HeaderAuthorization], [CookieSession] |\n| auth-request | /api/authz/auth-request |  [AuthRequest]   | [HeaderAuthorization], [CookieSession] |\n|    legacy    |       /api/verify       |     [Legacy]     |    [HeaderLegacy], [CookieSession]     |\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Keypair with Authelia CLI (Bare-Metal)\nDESCRIPTION: Uses the Authelia CLI binary to generate an RSA keypair in the current directory.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/generating-secure-values.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto pair rsa generate\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio Operator for Authelia Integration\nDESCRIPTION: This YAML snippet configures the Istio Operator to use Authelia as an external authorization provider. It specifies the Authelia service details and header configurations for the authentication process.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/kubernetes/istio.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 'install.istio.io/v1alpha1'\nkind: 'IstioOperator'\nspec:\n  meshConfig:\n    extensionProviders:\n      - name: 'authelia'\n        envoyExtAuthzHttp:\n          service: 'authelia.default.svc.cluster.local'\n          port: 80\n          pathPrefix: '/api/authz/ext-authz/'\n          includeRequestHeadersInCheck:\n            - 'accept'\n            - 'cookie'\n            - 'authorization'\n            - 'proxy-authorization'\n          headersToUpstreamOnAllow:\n            - 'remote-*'\n            - 'authelia-*'\n          includeAdditionalHeadersInCheck:\n            X-Forwarded-Proto: '%REQ(:SCHEME)%'\n          headersToDownstreamOnDeny:\n            - 'set-cookie'\n          headersToDownstreamOnAllow:\n            - 'set-cookie'\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Client for Wiki.js - YAML Setup\nDESCRIPTION: This YAML configuration sets up a client in Authelia for integration with Wiki.js. It specifies details such as client ID, client name, client secret, and necessary endpoints for OpenID Connect operations.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/wikijs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    clients:\n      - client_id: 'wikijs'\n        client_name: 'Wiki'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://wikijs.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/login/<UUID>/callback'  # Note this must be copied during step 7 of the Application configuration.\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_post'\n```\n\n----------------------------------------\n\nTITLE: Configuring Roundcube OAuth2 Authentication\nDESCRIPTION: Sets up Roundcube configuration for OAuth2 authentication with Authelia as the OpenID Connect provider, including client credentials and endpoints\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/roundcube/index.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$config['use_https'] = true;\n\n$config['oauth_provider'] = 'generic';\n$config['oauth_provider_name'] = 'Authelia OIDC';\n$config['oauth_client_id'] = 'roundcube';\n$config['oauth_client_secret'] = 'insecure_secret';\n$config['oauth_auth_uri'] = 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc/authorization';\n$config['oauth_token_uri'] = 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc/token';\n$config['oauth_identity_uri'] = 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc/userinfo';\n$config['oauth_identity_fields'] = ['email'];\n$config['oauth_scope'] = 'email openid profile';\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Pod for Authelia\nDESCRIPTION: Example of a Kubernetes Pod configuration for Authelia with enableServiceLinks set to false, which is necessary to prevent conflicts with Authelia's configuration management system.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/kubernetes/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: authelia\nspec:\n  enableServiceLinks: false\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Jellyfin SSO Plugin in XML\nDESCRIPTION: This XML configuration sets up the Jellyfin SSO Plugin to use Authelia as an OpenID Connect provider. Key elements include OidEndpoint, OidClientId, and Roles. This setup requires Jellyfin and the SSO Plugin configured to accept connections from an OpenID Connect provider.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/jellyfin/index.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<PluginConfiguration xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n  <SamlConfigs />\n  <OidConfigs>\n    <item>\n      <key>\n        <string>authelia</string>\n      </key>\n      <value>\n        <PluginConfiguration>\n          <OidEndpoint>https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}</OidEndpoint>\n          <OidClientId>jellyfin</OidClientId>\n          <OidSecret>insecure_secret</OidSecret>\n          <Enabled>true</Enabled>\n          <EnableAuthorization>true</EnableAuthorization>\n          <EnableAllFolders>true</EnableAllFolders>\n          <EnabledFolders />\n          <AdminRoles>\n            <string>admins</string>\n          </AdminRoles>\n          <Roles>\n            <string>users</string>\n          </Roles>\n          <EnableFolderRoles>false</EnableFolderRoles>\n          <EnableLiveTvRoles>false</EnableLiveTvRoles>\n          <EnableLiveTv>false</EnableLiveTv>\n          <EnableLiveTvManagement>false</EnableLiveTvManagement>\n          <LiveTvRoles />\n          <LiveTvManagementRoles />\n          <FolderRoleMappings />\n          <RoleClaim>groups</RoleClaim>\n          <OidScopes>\n            <string>groups</string>\n          </OidScopes>\n          <CanonicalLinks></CanonicalLinks>\n          <DisableHttps>false</DisableHttps>\n          <DoNotValidateEndpoints>false</DoNotValidateEndpoints>\n          <DoNotValidateIssuerName>false</DoNotValidateIssuerName>\n        </PluginConfiguration>\n      </value>\n    </item>\n  </OidConfigs>\n</PluginConfiguration>\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Self-Signed Certificate with OpenSSL\nDESCRIPTION: Uses the openssl command to generate a self-signed RSA certificate for 'example.com' valid for 365 days.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/generating-secure-values.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -x509 -nodes -newkey rsa:2048 -keyout private.pem -out public.crt -sha256 -days 365 -subj '/CN=example.com'\n```\n\n----------------------------------------\n\nTITLE: Defining Access Control with Domain Regex - YAML\nDESCRIPTION: This snippet demonstrates how to define access control rules based on domain regex patterns. It matches users and groups through specific user/group naming formatting to enforce one-factor policies.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/security/access-control.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\naccess_control:\n  rules:\n  - domain_regex:\n    - '^user-(?P<User>\\w+)\\.{{< sitevar name=\"domain\" format=\"regex\" nojs=\"example\\.com\" >}}$'\n    - '^group-(?P<Group>\\w+)\\.{{< sitevar name=\"domain\" format=\"regex\" nojs=\"example\\.com\" >}}$'\n    policy: 'one_factor'\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OIDC Client for Home Assistant\nDESCRIPTION: YAML configuration for Authelia's OpenID Connect client settings specific to Home Assistant integration, including client ID, secret, redirect URIs, and authorization policies\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/home-assistant/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    clients:\n      - client_id: 'home-assistant'\n        client_name: 'Home Assistant'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'\n        public: false\n        require_pkce: true\n        pkce_challenge_method: 'S256'\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://home-assistant.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/auth/oidc/callback'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'groups'\n        userinfo_signed_response_alg: 'none'\n```\n\n----------------------------------------\n\nTITLE: Access Control Rule: Compact YAML List of Lists\nDESCRIPTION: This YAML snippet demonstrates a compact configuration for a list of lists in an access control rule. The rule matches if 'c' is true OR ('a' AND 'b' are true).  This format should not be used for the configuration item type `list(list(object))`, see [List of List Objects](#list-of-list-objects) instead.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/rule-operators.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nrule:\n  - ['a', 'b']\n  - ['c']\n```\n```\n\n----------------------------------------\n\nTITLE: Examples of Using the Storage User Identifiers Add Command\nDESCRIPTION: Example commands showing how to add a user identifier with different configuration options, including using a specific UUID, specifying a config file, or providing database connection parameters directly.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_identifiers_add.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user identifiers add john --identifier f0919359-9d15-4e15-bcba-83b41620a073\nauthelia storage user identifiers add john --identifier f0919359-9d15-4e15-bcba-83b41620a073 --config config.yml\nauthelia storage user identifiers add john --identifier f0919359-9d15-4e15-bcba-83b41620a073 --encryption-key b3453fde-ecc2-4a1f-9422-2707ddbed495 --postgres.address tcp://postgres:5432 --postgres.password autheliapw\n```\n\n----------------------------------------\n\nTITLE: Authelia Client Configuration for Tailscale\nDESCRIPTION: This YAML configuration snippet provides an example of the Authelia client configuration required for integration with Tailscale. It defines a client with a specific client ID, secret, and redirect URI that Tailscale will use to authenticate users via Authelia's OpenID Connect provider. The client secret is a PBKDF2-SHA512 hash of the actual secret.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/tailscale/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"identity_providers:\\n  oidc:\\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\\n    ## See: https://www.authelia.com/c/oidc\\n    clients:\\n      - client_id: 'tailscale'\\n        client_name: 'Tailscale'\\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\\n        redirect_uris:\\n          - 'https://login.tailscale.com/a/oauth_response'\\n        scopes:\\n          - 'openid'\\n          - 'email'\\n          - 'profile'\\n\"\n```\n\n----------------------------------------\n\nTITLE: RFC2307bis Group Filter\nDESCRIPTION: This LDAP filter searches for groups in RFC2307bis implementations. It checks for group membership based on the distinguished name and uses object class checks for various group types (groupOfNames, groupOfUniqueNames, or groupOfMembers). It is a standard filter to find groups containing the user.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/ldap.md#2025-04-21_snippet_4\n\nLANGUAGE: LDAP\nCODE:\n```\n\"(&(&#124;(member={dn})(uniqueMember={dn}))(&#124;(objectClass=groupOfNames)(objectClass=groupOfUniqueNames)(objectClass=groupOfMembers)))\"\n```\n\n----------------------------------------\n\nTITLE: Listing Options for authelia crypto certificate rsa generate Command\nDESCRIPTION: This code block lists all available options for the 'authelia crypto certificate rsa generate' command, including flags for customizing certificate properties, output files, and generation behavior.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_rsa_generate.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -b, --bits int                        number of RSA bits for the certificate (default 2048)\n      --bundles strings                 enables generating bundles options are 'chain' and 'privkey-chain'\n      --ca                              create the certificate as a certificate authority certificate\n  -n, --common-name string              certificate common name\n      --country strings                 certificate country\n  -d, --directory string                directory where the generated keys, certificates, etc will be stored\n      --duration string                 duration of time the certificate is valid for (default \"1y\")\n      --extended-usage strings          specify the extended usage types of the certificate\n      --file.bundle.chain string        name of the file to export the certificate chain PEM bundle to when the --bundles flag includes 'chain' (default \"public.chain.pem\")\n      --file.bundle.priv-chain string   name of the file to export the certificate chain and private key PEM bundle to when the --bundles flag includes 'priv-chain' (default \"private.chain.pem\")\n      --file.ca-certificate string      certificate authority certificate to use when signing this certificate (default \"ca.public.crt\")\n      --file.ca-private-key string      certificate authority private key to use to signing this certificate (default \"ca.private.pem\")\n      --file.certificate string         name of the file to export the certificate data to (default \"public.crt\")\n      --file.extension.legacy string    string to include before the actual extension as a sub-extension on the PKCS#1 and SECG1 legacy formats (default \"legacy\")\n      --file.private-key string         name of the file to export the private key data to (default \"private.pem\")\n  -h, --help                            help for generate\n      --legacy                          enables the output of the legacy PKCS#1 and SECG1 formats when enabled\n  -l, --locality strings                certificate locality\n      --not-after string                latest date and time the certificate is considered valid in various formats\n      --not-before string               earliest date and time the certificate is considered valid in various formats (default is now)\n  -o, --organization strings            certificate organization (default [Authelia])\n      --organizational-unit strings     certificate organizational unit\n      --path.ca string                  source directory of the certificate authority files, if not provided the certificate will be self-signed\n  -p, --postcode strings                certificate postcode\n      --province strings                certificate province\n      --sans strings                    subject alternative names\n      --signature string                signature algorithm for the certificate (default \"SHA256\")\n  -s, --street-address strings          certificate street address\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextcloud for Authelia OpenID Connect Login in PHP\nDESCRIPTION: This PHP snippet illustrates how to configure Nextcloud to use Authelia as an OpenID Connect provider by adding specific parameters to its configuration array, including the client ID and secret.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/nextcloud/index.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$CONFIG = array (\n    'allow_user_to_change_display_name' => false,\n    'lost_password_link' => 'disabled',\n    'oidc_login_provider_url' => 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}',\n    'oidc_login_client_id' => 'nextcloud',\n    'oidc_login_client_secret' => 'insecure_secret',\n    'oidc_login_auto_redirect' => false,\n    'oidc_login_end_session_redirect' => false,\n    'oidc_login_button_text' => 'Log in with Authelia',\n    'oidc_login_hide_password_form' => false,\n    'oidc_login_use_id_token' => false,\n    'oidc_login_attributes' => array (\n        'id' => 'preferred_username',\n        'name' => 'name',\n        'mail' => 'email',\n        'groups' => 'groups',\n    ),\n    'oidc_login_default_group' => 'oidc',\n    'oidc_login_use_external_storage' => false,\n    'oidc_login_scope' => 'openid profile email groups',\n    'oidc_login_proxy_ldap' => false,\n    'oidc_login_disable_registration' => true,\n    'oidc_login_redir_fallback' => false,\n    'oidc_login_tls_verify' => true,\n    'oidc_create_groups' => false,\n    'oidc_login_webdav_enabled' => false,\n    'oidc_login_password_authentication' => false,\n    'oidc_login_public_key_caching_time' => 86400,\n    'oidc_login_min_time_between_jwks_requests' => 10,\n    'oidc_login_well_known_caching_time' => 86400,\n    'oidc_login_update_avatar' => false,\n    'oidc_login_code_challenge_method' => 'S256'\n);\n\n```\n\n----------------------------------------\n\nTITLE: Generating Random Alphanumeric String with Authelia CLI (Bare-Metal)\nDESCRIPTION: Uses the Authelia CLI binary to generate a random alphanumeric string of 64 characters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/generating-secure-values.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto rand --length 64 --charset alphanumeric\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Header SSO for Seafile in Python\nDESCRIPTION: This code snippet provides configuration settings for enabling trusted header SSO in Seafile by modifying the `seahub_settings.py` file. The configuration includes enabling remote user authentication, setting headers for user identification, and options for user creation and activation. It assumes Seafile is hosted on a domain specified by documentation variables.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/trusted-header-sso/seafile/index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nENABLE_REMOTE_USER_AUTHENTICATION = True\n\n# Optional, HTTP header, which is configured in your web server conf file,\n# used for Seafile to get user's unique id, default value is 'HTTP_REMOTE_USER'.\nREMOTE_USER_HEADER = 'HTTP_REMOTE_USER'\n\n# Optional, when the value of HTTP_REMOTE_USER is not a valid email address，\n# Seafile will build a email-like unique id from the value of 'REMOTE_USER_HEADER'\n# and this domain, e.g. user1@{{< sitevar name=\"domain\" nojs=\"example.com\" >}}.\nREMOTE_USER_DOMAIN = '{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n\n# Optional, whether to create new user in Seafile system, default value is True.\n# If this setting is disabled, users doesn't preexist in the Seafile DB cannot login.\n# The admin has to first import the users from external systems like LDAP.\nREMOTE_USER_CREATE_UNKNOWN_USER = True\n\n# Optional, whether to activate new user in Seafile system, default value is True.\n# If this setting is disabled, user will be unable to login by default.\n# the administrator needs to manually activate this user.\nREMOTE_USER_ACTIVATE_USER_AFTER_CREATION = True\n\n# Optional, map user attribute in HTTP header and Seafile's user attribute.\nREMOTE_USER_ATTRIBUTE_MAP = {\n    'HTTP_REMOTE_NAME': 'name',\n    'HTTP_REMOTE_EMAIL': 'contact_email',\n}\n```\n\n----------------------------------------\n\nTITLE: Authelia Client Configuration for WordPress (YAML)\nDESCRIPTION: This YAML snippet provides the client configuration for Authelia to enable WordPress as an OpenID Connect client. It defines the client ID, secret, redirect URIs, scopes, and other settings necessary for the OpenID Connect flow. This configuration is essential for allowing WordPress to authenticate users through Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/wordpress/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"identity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'wordpress'\n        client_name: 'WordPress'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://wordpress.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}/wp-admin/admin-ajax.php?action=openid-connect-authorize'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n          - 'offline_access'\n        grant_types:\n          - 'authorization_code'\n          - 'refresh_token'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_post'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring WUD Environment Variables for OIDC with Authelia\nDESCRIPTION: This YAML snippet configures the environment variables for the WUD service to connect to Authelia's OIDC provider. It sets the client ID, client secret, and the discovery endpoint URL.  The snippet is intended to be used within a Docker Compose file, and relies on the correct values for client ID and secret to match the Authelia configuration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/wud/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nservices:\n  wud:\n    image: 'getwud/wud'\n    environment:\n      WUD_AUTH_OIDC_AUTHELIA_CLIENTID: 'wud'\n      WUD_AUTH_OIDC_AUTHELIA_CLIENTSECRET: 'insecure_secret'\n      WUD_AUTH_OIDC_AUTHELIA_DISCOVERY: 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/.well-known/openid-configuration'\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring User Attributes in Authelia YAML\nDESCRIPTION: Example configuration showing how to define custom user attributes using Common Expression Language (CEL). Demonstrates boolean, string, and number attribute definitions that can be used to enhance OpenID Connect claims.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/definitions/user-attributes.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  user_attributes:\n    # Boolean attribute example\n    is_admin:\n      expression: '\"admin\" in groups'\n\n    # String attribute example\n    department:\n      expression: 'groups[0]'\n\n    # Number attribute example\n    access_level:\n      expression: '\"admin\" in groups ? 10 : 5'\n```\n\n----------------------------------------\n\nTITLE: Configuring Open WebUI OAuth Environment Variables\nDESCRIPTION: Environment variable configuration for Open WebUI to enable OAuth authentication with Authelia, including client credentials, scopes, and role management\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/open-webui/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  - 'ENABLE_OAUTH_SIGNUP=true'\n  - 'OAUTH_MERGE_ACCOUNTS_BY_EMAIL=true'\n  - 'OAUTH_CLIENT_ID=open-webui'\n  - 'OAUTH_CLIENT_SECRET=insecure_secret'\n  - 'OPENID_PROVIDER_URL=https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/.well-known/openid-configuration'\n  - 'OAUTH_PROVIDER_NAME=Authelia'\n  - 'OAUTH_SCOPES=openid email profile groups'\n  - 'ENABLE_OAUTH_ROLE_MANAGEMENT=true'\n  - 'OAUTH_ALLOWED_ROLES=openwebui,openwebui-admin'\n  - 'OAUTH_ADMIN_ROLES=openwebui-admin'\n  - 'OAUTH_ROLES_CLAIM=groups'\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia in Docker Compose with Specific User\nDESCRIPTION: This YAML snippet shows how to configure the Authelia service in a Docker Compose file, specifying a user ID and group ID.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/overview/security/measures.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  authelia:\n    image: authelia/authelia\n    container_name: 'authelia'\n    user: 8000:9000\n    volumes:\n      - ./authelia:/config\n```\n\n----------------------------------------\n\nTITLE: Modern Session Configuration in Authelia using YAML\nDESCRIPTION: This code snippet showcases the modern session configuration for Authelia where cookie settings, authorization URL, and default redirection URL are specified. Updating these values with proper domain variables is crucial for the setup.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx.md#2025-04-21_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nsession:\n  cookies:\n    - domain: '{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\n      authelia_url: 'https://{{</* sitevar name=\"subdomain-authelia\" nojs=\"auth\" */>}}.{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\n      default_redirection_url: 'https://www.{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\n```\n\n----------------------------------------\n\nTITLE: lldap Group Filter\nDESCRIPTION: This LDAP filter searches for groups in lldap. It checks for group membership based on the distinguished name and verifies that the object class is groupOfNames. It is a standard group membership filter.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/ldap.md#2025-04-21_snippet_8\n\nLANGUAGE: LDAP\nCODE:\n```\n\"(&(member={dn})(objectClass=groupOfNames))\"\n```\n\n----------------------------------------\n\nTITLE: Enforcing Pushed Authorization Requests\nDESCRIPTION: Configuration option to require pushed authorization requests for enhanced security. Note that most clients may not support this advanced flow.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/openid-connect/clients.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrequire_pushed_authorization_requests: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OpenID Connect Client for FreshRSS\nDESCRIPTION: YAML configuration for registering FreshRSS as an OpenID Connect client in Authelia, defining client details, redirect URIs, and authentication policies\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/freshrss/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    clients:\n      - client_id: 'freshrss'\n        client_name: 'FreshRSS'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://freshrss.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}:443/i/oidc/'\n        scopes:\n          - 'openid'\n          - 'groups'\n          - 'email'\n          - 'profile'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_basic'\n```\n\n----------------------------------------\n\nTITLE: File Content Template Function Example\nDESCRIPTION: Demonstrates how to use the fileContent template function to include file contents in a YAML configuration with indentation\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/templating.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexample: |\n  {{- fileContent \"/absolute/path/to/file\" | nindent 2 }}\n```\n\n----------------------------------------\n\nTITLE: Ed25519 Certificate Generation Command Options\nDESCRIPTION: Complete list of available flags and options for customizing the Ed25519 certificate generation, including bundle options, certificate attributes, file paths, and validity periods.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_ed25519_generate.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --bundles strings                 enables generating bundles options are 'chain' and 'privkey-chain'\n      --ca                              create the certificate as a certificate authority certificate\n  -n, --common-name string              certificate common name\n      --country strings                 certificate country\n  -d, --directory string                directory where the generated keys, certificates, etc will be stored\n      --duration string                 duration of time the certificate is valid for (default \"1y\")\n      --extended-usage strings          specify the extended usage types of the certificate\n      --file.bundle.chain string        name of the file to export the certificate chain PEM bundle to when the --bundles flag includes 'chain' (default \"public.chain.pem\")\n      --file.bundle.priv-chain string   name of the file to export the certificate chain and private key PEM bundle to when the --bundles flag includes 'priv-chain' (default \"private.chain.pem\")\n      --file.ca-certificate string      certificate authority certificate to use when signing this certificate (default \"ca.public.crt\")\n      --file.ca-private-key string      certificate authority private key to use to signing this certificate (default \"ca.private.pem\")\n      --file.certificate string         name of the file to export the certificate data to (default \"public.crt\")\n      --file.extension.legacy string    string to include before the actual extension as a sub-extension on the PKCS#1 and SECG1 legacy formats (default \"legacy\")\n      --file.private-key string         name of the file to export the private key data to (default \"private.pem\")\n  -h, --help                            help for generate\n      --legacy                          enables the output of the legacy PKCS#1 and SECG1 formats when enabled\n  -l, --locality strings                certificate locality\n      --not-after string                latest date and time the certificate is considered valid in various formats\n      --not-before string               earliest date and time the certificate is considered valid in various formats (default is now)\n  -o, --organization strings            certificate organization (default [Authelia])\n      --organizational-unit strings     certificate organizational unit\n      --path.ca string                  source directory of the certificate authority files, if not provided the certificate will be self-signed\n  -p, --postcode strings                certificate postcode\n      --province strings                certificate province\n      --sans strings                    subject alternative names\n      --signature string                signature algorithm for the certificate (default \"SHA256\")\n  -s, --street-address strings          certificate street address\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Import Command Examples\nDESCRIPTION: Examples showing different ways to use the WebAuthn import command, including basic usage and configuration with different database backends.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_webauthn_import.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user webauthn export\nauthelia storage user webauthn import --file authelia.export.webauthn.yml\nauthelia storage user webauthn import --file authelia.export.webauthn.yml --config config.yml\nauthelia storage user webauthn import --file authelia.export.webauthn.yml --encryption-key b3453fde-ecc2-4a1f-9422-2707ddbed495 --postgres.address tcp://postgres:5432 --postgres.password autheliapw\n```\n\n----------------------------------------\n\nTITLE: Configuring NTP Server Address in Authelia YAML\nDESCRIPTION: This YAML snippet shows how to configure the NTP server address in Authelia. It demonstrates using a local IPv4 address for the NTP server.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/miscellaneous/ntp.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nntp:\n  address: 'udp://127.0.0.1:123'\n```\n\n----------------------------------------\n\nTITLE: Authelia OIDC Client Configuration for Homarr\nDESCRIPTION: YAML configuration defining Authelia OpenID Connect client settings for Homarr, including client ID, secret, redirect URIs, and authorization policies\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/homarr/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    clients:\n      - client_id: 'homarr'\n        client_name: 'Homarr'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://homarr.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/auth/callback/oidc'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'groups'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_basic'\n```\n\n----------------------------------------\n\nTITLE: Configuring ID Token Signing and Encryption\nDESCRIPTION: Options for signing and optionally encrypting ID Tokens using specific JSON Web Keys and algorithms, with default signing algorithm set to RS256.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/openid-connect/clients.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nid_token_signed_response_key_id: token-signing-key\nid_token_signed_response_alg: RS256\n```\n\n----------------------------------------\n\nTITLE: Generating Argon2 Hash with Docker\nDESCRIPTION: This bash command shows how to generate an Argon2 password hash non-interactively using the Authelia Docker image. It uses the `--password` flag to provide the password directly to the command. This requires Docker to be installed and configured.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/passwords.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"docker run --rm authelia/authelia:latest authelia crypto hash generate argon2 --password 'password'\"\n```\n\n----------------------------------------\n\nTITLE: Creating Kustomize Configuration for Authelia Secrets\nDESCRIPTION: This YAML file configures Kustomize to generate a Kubernetes Secret for Authelia. It specifies the secret name and the files containing secret values to be included in the generated secret.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/kubernetes/secrets.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\ngeneratorOptions:\n  disableNameSuffixHash: true\n  labels:\n    type: 'generated'\n    app: 'authelia'\nsecretGenerator:\n  - name: 'authelia'\n    files:\n      - 'DUO_SECRET_KEY'\n      - 'JWT_SECRET'\n      - 'LDAP_PASSWORD'\n      - 'OIDC_HMAC_SECRET'\n      - 'OIDC_ISSUER_PRIVATE_KEY'\n      - 'REDIS_PASSWORD'\n      - 'REDIS_SENTINEL_PASSWORD'\n      - 'SESSION_SECRET'\n      - 'SMTP_PASSWORD'\n      - 'STORAGE_ENCRYPTION_KEY'\n      - 'STORAGE_PASSWORD'\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OpenID Client with Budibase - YAML\nDESCRIPTION: This YAML snippet provides a configuration for setting up Authelia as an OpenID Connect client for Budibase. It sets the client ID, secret, authorization policy, redirect URIs, and other required parameters for integration. Authelia should be properly set up to handle the OpenID Connect flows, and this snippet is crucial for aligning the client settings in Authelia with those expected by Budibase.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/budibase/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'budibase'\n        client_name: 'Budibase'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://budibase.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/global/auth/oidc/callback'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n          - 'offline_access'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_basic'\n```\n\n----------------------------------------\n\nTITLE: Configuring Confidential Client: Client Credentials Flow\nDESCRIPTION: This YAML snippet demonstrates how to configure a confidential OIDC client for the client credentials flow. It specifies scopes, audiences, and the token endpoint authentication method as 'client_secret_basic'.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/oauth-2.0-bearer-token-usage.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    clients:\n      - client_id: 'example-three'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        scopes:\n          - 'authelia.bearer.authz'\n        audience:\n          - 'https://app1.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n          - 'https://app2.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n        grant_types:\n          - 'client_credentials'\n        token_endpoint_auth_method: 'client_secret_basic'\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorization Endpoints in YAML\nDESCRIPTION: This YAML configuration sets up the authorization endpoints for OAuth 2.0 Bearer Token usage, allowing for various authentication strategies. It must be explicitly configured to support the 'Bearer' scheme along with basic and cookie session strategies.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/oauth-2.0-bearer-token-usage.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  endpoints:\n    authz:\n      forward-auth:\n        implementation: 'ForwardAuth'\n        authn_strategies:\n          - name: 'HeaderAuthorization'\n            schemes:\n              - 'Basic'\n              - 'Bearer'\n          - name: 'CookieSession'\n      ext-authz:\n        implementation: 'ExtAuthz'\n        authn_strategies:\n          - name: 'HeaderAuthorization'\n            schemes:\n              - 'Basic'\n              - 'Bearer'\n          - name: 'CookieSession'\n      auth-request:\n        implementation: 'AuthRequest'\n        authn_strategies:\n          - name: 'HeaderAuthRequestProxyAuthorization'\n            schemes:\n              - 'Basic'\n              - 'Bearer'\n          - name: 'CookieSession'\n      legacy:\n        implementation: 'Legacy'\n        authn_strategies:\n          - name: 'HeaderLegacy'\n          - name: 'CookieSession'\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OIDC Client for Linkwarden (YAML)\nDESCRIPTION: This YAML configuration defines an Authelia client for Linkwarden, specifying the client ID, secret, redirect URIs, scopes, and other necessary OpenID Connect settings. It's crucial for establishing a secure connection between Authelia and Linkwarden, enabling Authelia to authenticate users before they access Linkwarden.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/linkwarden/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'linkwarden'\n        client_name: 'Linkwarden'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://linkwarden.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/v1/auth/callback/authelia'\n        scopes:\n          - 'openid'\n          - 'groups'\n          - 'email'\n          - 'profile'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_basic'\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring pgAdmin for Authelia - Python\nDESCRIPTION: This Python snippet sets up pgAdmin to authenticate using Authelia. It specifies various OAuth2 parameters such as client ID, client secret, and endpoints for token retrieval and user info.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/pgadmin/index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nAUTHENTICATION_SOURCES = ['oauth2', 'internal']\nOAUTH2_AUTO_CREATE_USER = True\nOAUTH2_CONFIG = [{\n\t'OAUTH2_NAME': 'Authelia',\n\t'OAUTH2_DISPLAY_NAME': 'Authelia',\n\t'OAUTH2_CLIENT_ID': 'pgadmin',\n\t'OAUTH2_CLIENT_SECRET': 'insecure_secret',\n\t'OAUTH2_API_BASE_URL': 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}',\n\t'OAUTH2_AUTHORIZATION_URL': 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc/authorization',\n\t'OAUTH2_TOKEN_URL': 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc/token',\n\t'OAUTH2_USERINFO_ENDPOINT': 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc/userinfo',\n\t'OAUTH2_SERVER_METADATA_URL': 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/.well-known/openid-configuration',\n\t'OAUTH2_SCOPE': 'openid email profile',\n\t'OAUTH2_USERNAME_CLAIM': 'email',\n\t'OAUTH2_ICON': 'fa-key',\n\t'OAUTH2_BUTTON_COLOR': '<button-color>'\n}]\n```\n\n----------------------------------------\n\nTITLE: GLAuth Group Filter\nDESCRIPTION: This LDAP filter searches for groups in GLAuth. It checks for group membership based on the distinguished name (uniqueMember) and verifies that the object class is posixGroup. It is tailored for finding groups in GLAuth.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/ldap.md#2025-04-21_snippet_10\n\nLANGUAGE: LDAP\nCODE:\n```\n\"(&(uniqueMember={dn})(objectClass=posixGroup))\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Log File Path with Custom Date Format in YAML for Authelia\nDESCRIPTION: This configuration demonstrates how to use a custom date format in the log file name using the {datetime} placeholder with a specific Go time layout.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/miscellaneous/logging.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  file_path: '/config/authelia.{datetime:Mon Jan 2 15:04:05 MST 2006}.log'\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Client for Harbor Using YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to set up the Authelia OpenID Connect client for use with Harbor. It includes mandatory configuration options such as client ID, client secret, redirect URIs, and scopes needed for authorization.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/harbor/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'harbor'\n        client_name: 'Harbor'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://harbor.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/c/oidc/callback'\n        grant_types:\n          - 'refresh_token'\n          - 'authorization_code'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'groups'\n          - 'email'\n          - 'offline_access'\n        userinfo_signed_response_alg: 'none'\n```\n\n----------------------------------------\n\nTITLE: Access Control Rule: Super Compact YAML List of List Objects\nDESCRIPTION: This YAML snippet demonstrates a super compact configuration for a list of list objects in an access control rule. This mirrors the previous rules with the key named `value`.  This format should only be used for the configuration item type `list(list(object))`, see [List of Lists](#list-of-lists) if you're not looking for a `list(list(object))`\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/rule-operators.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nrule: [['a', 'b'], ['c']]\n```\n```\n\n----------------------------------------\n\nTITLE: Authelia Access Control Check Policy Command Options\nDESCRIPTION: This snippet lists the available options for the 'authelia access-control check-policy' command, including flags for specifying groups, IP, HTTP method, URL, username, and verbose output.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_access-control_check-policy.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n      --groups strings    the groups of the subject\n  -h, --help              help for check-policy\n      --ip string         the ip of the subject\n      --method string     the HTTP method of the object (default \"GET\")\n      --url string        the url of the object\n      --username string   the username of the subject\n      --verbose           enables verbose output\n```\n\n----------------------------------------\n\nTITLE: Options for Authelia User Ban Command\nDESCRIPTION: Available flags for the 'storage bans user add' command, including options to set duration, make the ban permanent, and provide a reason for the ban.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_user_add.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -d, --duration string   the duration for the ban (default \"1 day\")\n  -h, --help              help for add\n  -p, --permanent         makes the ban effectively permanent\n  -r, --reason string     includes a reason for the ban\n```\n\n----------------------------------------\n\nTITLE: Adding Authelia Helm Repository in Bash\nDESCRIPTION: These commands add the Authelia Helm Chart repository to your local Helm installation and update the repository list. This is necessary to access and use the Authelia Helm Chart.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/kubernetes/chart.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add authelia https://charts.authelia.com\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Token Encryption Algorithm\nDESCRIPTION: Defines the key algorithm for encrypting Access Tokens, with requirements for key configuration and signed response options\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/openid-connect/clients.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\naccess_token_encrypted_response_alg\n```\n\n----------------------------------------\n\nTITLE: Authelia Storage Bans User List Command Options\nDESCRIPTION: This snippet shows the available options specific to the 'list' subcommand of 'authelia storage bans user'.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_user_list.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for list\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC HMAC Secret with Template and Layout Functions - YAML\nDESCRIPTION: Example using the mindent and msquote functions to automatically adjust the layout and quoting depending on whether the secret file contains a single-line or multi-line value. Indentation is set to 10 spaces.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/prologue/security-sensitive-values.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    hmac_secret: {{ secret \"/config/secrets/absolute/path/to/hmac_secret\" | mindent 10 \"|\" | msquote }}\n```\n\n----------------------------------------\n\nTITLE: lldap User Filter\nDESCRIPTION: This LDAP filter searches for users in lldap. It combines username or email matching with a check for the person object class. It is a basic filter for user lookup in lldap implementations.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/ldap.md#2025-04-21_snippet_7\n\nLANGUAGE: LDAP\nCODE:\n```\n\"(&(&#124;({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Client for OIDC in YAML\nDESCRIPTION: This snippet demonstrates a sample configuration for a client in Authelia to work with NetBird via OpenID Connect. Ensure the client's secret hash is generated securely. Adjust redirect URIs based on your domain setup.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/netbird/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    cors:\n      allowed_origins_from_client_redirect_uris: true\n      endpoints:\n        - 'userinfo'\n        - 'authorization'\n        - 'token'\n        - 'revocation'\n        - 'introspection'\n    clients:\n      - client_id: 'netbird'\n        client_name: 'NetBird'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://netbird.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/peers'\n          - 'https://netbird.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/add-peers'\n          - 'http://localhost'\n        scopes:\n          - 'openid'\n          - 'email'\n          - 'profile'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_post'\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for Authelia Config Template\nDESCRIPTION: The basic syntax for the authelia config template command which allows templating configuration files with enabled filters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_config_template.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia config template [flags]\n```\n\n----------------------------------------\n\nTITLE: Authelia Server Endpoints Authorization Configuration\nDESCRIPTION: Configures the authorization endpoints for Authelia using forward authentication implementation\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/caddy.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  endpoints:\n    authz:\n      forward-auth:\n        implementation: 'ForwardAuth'\n```\n\n----------------------------------------\n\nTITLE: Configuring Incus OIDC Settings\nDESCRIPTION: Example Incus configuration showing how to set OpenID Connect issuer, client ID, and audience using command-line configuration commands\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/incus/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n  oidc.issuer: https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\n  oidc.client.id: incus\n  oidc.audience: https://incus.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Traefik Dynamic Configuration\nDESCRIPTION: Placeholder for Traefik's dynamic configuration file which can be used to define dynamic routers, services, and middlewares.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/blog/authelia-traefik-setup-guide/index.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n## This file can be used to define dynamic routers/services/middlewares.\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes ReferenceGrant for Cross-Namespace Authelia Service Access\nDESCRIPTION: A Kubernetes ReferenceGrant configuration that allows a SecurityPolicy in one namespace to reference and use the Authelia service in another namespace. This is necessary when the route namespace differs from the Authelia service namespace.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/envoy.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 'gateway.networking.k8s.io/v1beta1'\nkind: 'ReferenceGrant'\nmetadata:\n  name: 'example-ref-authelia-svc'\n  namespace: 'authelia'\nspec:\n  from:\n    - group: 'gateway.envoyproxy.io'\n      kind: 'SecurityPolicy'\n      namespace: 'example'\n      name: 'authelia-example'\n  to:\n    - group: ''\n      kind: 'Service'\n      name: 'authelia'\n```\n\n----------------------------------------\n\nTITLE: Authelia Client Configuration for HedgeDoc\nDESCRIPTION: This YAML snippet configures Authelia to recognize HedgeDoc as an OpenID Connect client. It specifies the client ID, secret, redirect URIs, scopes, and other necessary parameters for secure communication. The client is configured with two-factor authentication and utilizes the `client_secret_post` authentication method.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/hedge-doc/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'hedgedoc'\n        client_name: 'HedgeDoc'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://hedgedoc.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/auth/oauth2/callback'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n          - 'groups'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_post'\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik and Whoami with Docker Compose\nDESCRIPTION: Docker Compose configuration for setting up Traefik as a reverse proxy and a basic Whoami service. This includes network setup, port mapping, volume mounts, and label-based routing configuration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/blog/authelia-traefik-setup-guide/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  traefik:\n    image: 'traefik:latest'\n    container_name: 'traefik'\n    restart: 'unless-stopped'\n    security_opt:\n      - 'no-new-privileges=true'\n    networks:\n      proxy:\n        aliases:\n          - '{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      authelia: {}\n    ports:\n      - '80:80'\n      - '443:443'\n    environment:\n      TZ: 'America/Los_Angeles' ## see below\n    volumes:\n      - '/var/run/docker.sock:/var/run/docker.sock:ro'\n      - './traefik/config/traefik.yml:/traefik.yml:ro'\n      - './traefik/config/dynamic.yml:/dynamic.yml:ro'\n      - './traefik/data/:/data'\n      - './traefik/logs:/logs'\n    labels:\n      traefik.enable: 'true'\n      traefik.http.routers.dashboard.rule: 'Host(`traefik.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}`)'\n      traefik.http.routers.dashboard.entrypoints: 'https'\n      traefik.http.routers.dashboard.middlewares: 'authelia@docker'\n      traefik.http.routers.dashboard.service: 'api@internal'\n\n  whoami:\n    image: 'traefik/whoami'\n    restart: 'unless-stopped'\n    container_name: 'whoami'\n    labels:\n      traefik.enable: 'true'\n      traefik.http.routers.whoami.rule: 'Host(`whoami.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}`)'\n      traefik.http.routers.whoami.entrypoints: 'https'\n    networks:\n      proxy: {}\n\n  ## Other Services Go Here\n\nnetworks:\n  proxy:\n    external: true\n    name: 'proxy'\n  authelia:\n    name: 'authelia'\n```\n\n----------------------------------------\n\nTITLE: Access Control Rule: Omitted Level YAML List of Lists\nDESCRIPTION: This YAML snippet demonstrates an omitted level configuration for a list of lists in an access control rule. The rule matches if 'c' is true OR ('a' AND 'b' are true).  This format should not be used for the configuration item type `list(list(object))`, see [List of List Objects](#list-of-list-objects) instead.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/rule-operators.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nrule:\n  - - 'a'\n    - 'b'\n  - 'c'\n```\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Delete Command Examples\nDESCRIPTION: Demonstrates various examples of using the delete command with different options including deleting all credentials, using specific configurations, and targeting by description or key ID.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_webauthn_delete.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user webauthn delete john --all\nauthelia storage user webauthn delete john --all --config config.yml\nauthelia storage user webauthn delete john --all --encryption-key b3453fde-ecc2-4a1f-9422-2707ddbed495 --postgres.address tcp://postgres:5432 --postgres.password autheliapw\nauthelia storage user webauthn delete john --description Primary\nauthelia storage user webauthn delete john --description Primary --config config.yml\nauthelia storage user webauthn delete john --description Primary --encryption-key b3453fde-ecc2-4a1f-9422-2707ddbed495 --postgres.address tcp://postgres:5432 --postgres.password autheliapw\nauthelia storage user webauthn delete --kid abc123\nauthelia storage user webauthn delete --kid abc123 --config config.yml\nauthelia storage user webauthn delete --kid abc123 --encryption-key b3453fde-ecc2-4a1f-9422-2707ddbed495 --postgres.address tcp://postgres:5432 --postgres.password autheliapw\n```\n\n----------------------------------------\n\nTITLE: Installing Jenkins OpenID Connect Plugin via Jenkins Configuration as Code\nDESCRIPTION: This Bash command installs the 'oic-auth' plugin necessary for Jenkins to work with OpenID Connect. The installation must be done before configuring Jenkins via the Jenkins Configuration as Code.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/jenkins/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njenkins-plugin-cli --plugins oic-auth\n```\n\n----------------------------------------\n\nTITLE: Executing Authelia Crypto Rand Command in Bash\nDESCRIPTION: This snippet demonstrates the basic syntax for running the 'authelia crypto rand' command. It generates a cryptographically secure random string with default settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_rand.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto rand [flags]\n```\n\n----------------------------------------\n\nTITLE: Available Command Options for mds3 status\nDESCRIPTION: The specific command-line options available for the mds3 status command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_cache_mds3_status.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for status\n```\n\n----------------------------------------\n\nTITLE: Basic ECDSA Certificate Generation Command\nDESCRIPTION: The base command for generating an ECDSA private key and certificate using Authelia's crypto tools.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_ecdsa_generate.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto certificate ecdsa generate [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the Ed25519 Key Pair Generation Command in Authelia\nDESCRIPTION: The base command for generating an Ed25519 key pair in Authelia. This generates both private and public keys and saves them to the specified directory.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_ed25519_generate.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto pair ed25519 generate [flags]\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration Example\nDESCRIPTION: Sample YAML configuration showing how to set log level and server buffer settings in Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/methods/environment.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  level: 'info'\nserver:\n  buffers:\n    read: 4096\n```\n\n----------------------------------------\n\nTITLE: TCP Connection to MySQL/MariaDB with IPv4\nDESCRIPTION: Example showing how to configure a TCP connection to a MySQL/MariaDB server using an IPv4 address.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/storage/mysql.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  mysql:\n    address: 'tcp://127.0.0.1:3306'\n```\n\n----------------------------------------\n\nTITLE: Mastodon OpenID Connect Environment Configuration\nDESCRIPTION: Environment variables for configuring Mastodon to use Authelia as an OpenID Connect identity provider, including client credentials, scopes, and authentication settings\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/mastodon/index.md#2025-04-21_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nOIDC_ENABLED=true\nOIDC_DISPLAY_NAME=Authelia\nOIDC_DISCOVERY=true\nOIDC_ISSUER=https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\nOIDC_SCOPE=openid,profile,email\nOIDC_UID_FIELD=preferred_username\nOIDC_CLIENT_ID=mastodon\nOIDC_CLIENT_SECRET=insecure_secret\nOIDC_REDIRECT_URI=https://mastodon.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/auth/auth/openid_connect/callback\nOIDC_SECURITY_ASSUME_EMAIL_IS_VERIFIED=true\n```\n\n----------------------------------------\n\nTITLE: Setting Up Seafile OAuth Configuration\nDESCRIPTION: This Python code snippet demonstrates how to configure Seafile to authenticate with Authelia as an OpenID Connect provider. It specifies OAuth related configurations in the 'seahub_settings.py' file and includes parameters like client ID, secret, and redirect URLs. Dependencies such as `requests_oauthlib` might be needed.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/seafile/index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nENABLE_OAUTH = True\nOAUTH_ENABLE_INSECURE_TRANSPORT = False\nOAUTH_CLIENT_ID = \"seafile\"\nOAUTH_CLIENT_SECRET = \"insecure_secret\"\nOAUTH_REDIRECT_URL = 'https://seafile.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/oauth/callback/'\nOAUTH_PROVIDER_DOMAIN = '{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\nOAUTH_AUTHORIZATION_URL = 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc/authorization'\nOAUTH_TOKEN_URL = 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc/token'\nOAUTH_USER_INFO_URL = 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc/userinfo'\nOAUTH_SCOPE = [\n    \"openid\",\n    \"profile\",\n    \"email\",\n]\nOAUTH_ATTRIBUTE_MAP = {\n    \"email\": (True, \"email\"),\n    \"name\": (False, \"name\"),\n    \"id\": (False, \"not used\"),\n}\n\n# Optional\n#ENABLE_WEBDAV_SECRET = True\n```\n\n----------------------------------------\n\nTITLE: NGINX Configuration Snippet for Custom Locations in Protected Applications\nDESCRIPTION: This NGINX configuration snippet demonstrates how to define a custom location for proxying requests while still leveraging Authelia for authentication. This method ensures that authorization policies apply to the custom location defined within an advanced configuration block.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx-proxy-manager/index.md#2025-04-21_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\nlocation /custom {\n    include /snippets/proxy.conf;\n    include /snippets/authelia-authrequest.conf;\n    proxy_pass http://192.168.1.20:8080;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Allowed Origins in OpenID Connect YAML\nDESCRIPTION: This code snippet illustrates the YAML configuration for setting multiple allowed origins using Authelia's OpenID Connect integration. The use of a list enables specifying multiple origins for CORS. Properly configuring this depends on the Authelia environment being correctly set up and adhering to any broader security policies.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/openid-connect/provider.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    cors:\n      allowed_origins:\n        - \"*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OIDC Client in YAML\nDESCRIPTION: This YAML snippet is a configuration example for setting up Authelia with HashiCorp Vault using OpenID Connect 1.0. It includes client ID and secret settings, necessary URIs, and required scopes. The configuration assumes the presence of some documentation variables for the domain and subdomain.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/hashicorp-vault/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'vault'\n        client_name: 'HashiCorp Vault'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://vault.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/oidc/callback'\n          - 'https://vault.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/ui/vault/auth/oidc/oidc/callback'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'groups'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n```\n\n----------------------------------------\n\nTITLE: ForwardAuth Metadata Configuration\nDESCRIPTION: Detailed metadata source configuration for ForwardAuth implementation, specifying header keys and sources for various request metadata\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/proxy-authorization.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|     Metadata      |            Source            |            Key            |\n|:-----------------:|:----------------------------:|:-------------------------:|\n|    Method [^1]    |           [Header]           | `X-Forwarded-Method` [^2] |\n|    Scheme [^1]    |           [Header]           | [X-Forwarded-Proto] [^2]  |\n|   Hostname [^1]   |           [Header]           |  [X-Forwarded-Host] [^2]  |\n|     Path [^1]     |           [Header]           |  `X-Forwarded-URI` [^2]   |\n|      IP [^1]      |           [Header]           |  [X-Forwarded-For] [^3]   |\n| Authelia URL [^1] | Session Cookie Configuration |      `authelia_url`       |\n```\n\n----------------------------------------\n\nTITLE: Using the authelia crypto pair rsa generate Command\nDESCRIPTION: This is the basic syntax for the RSA key pair generation command in Authelia. It allows users to generate cryptographic RSA key pairs with customizable parameters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_rsa_generate.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto pair rsa generate [flags]\n```\n\n----------------------------------------\n\nTITLE: TOTP CSV Export Command Examples in Authelia\nDESCRIPTION: Usage examples for the TOTP export command, including basic exports to a specified file, with a config file, and with explicit database connection parameters and encryption key.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_totp_export_csv.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user totp export csv --file users.csv\nauthelia storage user totp export csv --config config.yml\nauthelia storage user totp export csv --encryption-key b3453fde-ecc2-4a1f-9422-2707ddbed495 --postgres.address tcp://postgres:5432 --postgres.password autheliapw\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Client using YAML\nDESCRIPTION: This YAML snippet outlines the configuration for Authelia's OpenID Connect client specifically tailored for Karakeep. It details the necessary fields such as client_id, client_secret, redirect URIs, and associated scopes needed for successful integration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/karakeep/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"identity_providers:\\n  oidc:\\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\\n    ## See: https://www.authelia.com/c/oidc\\n    clients:\\n      - client_id: 'karakeep'\\n        client_name: 'Karakeep'\\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng' # The digest of 'insecure_secret'.\\n        public: false\\n        authorization_policy: 'two_factor'\\n        redirect_uris:\\n          - 'https://karakeep.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/auth/callback/custom'\\n        scopes:\\n          - 'openid'\\n          - 'profile'\\n          - 'email'\\n        userinfo_signed_response_alg: 'none'\"\n```\n\n----------------------------------------\n\nTITLE: Basic WebAuthn Delete Command Syntax\nDESCRIPTION: Shows the basic command syntax for deleting WebAuthn credentials from storage.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_webauthn_delete.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user webauthn delete [username] [flags]\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Additional command-line options inherited from parent commands that can be used with the mds3 status command. These include configuration, database connection, and encryption settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_cache_mds3_status.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Basic SHA2Crypt Command Usage\nDESCRIPTION: The basic command syntax for generating SHA2 Crypt hash digests with Authelia\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate_sha2crypt.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto hash generate sha2crypt [flags]\n```\n\n----------------------------------------\n\nTITLE: Running Docker with Configuration Filters by Argument\nDESCRIPTION: Example showing how to run Authelia in Docker with a template filter applied to the configuration file using CLI arguments.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/methods/files.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d authelia/authelia:latest authelia --config /config/configuration.yml --config.experimental.filters template\n```\n\n----------------------------------------\n\nTITLE: Legacy Session Configuration for Authelia in YAML\nDESCRIPTION: This YAML snippet illustrates the legacy session configuration for Authelia. It shows an earlier method for configuring session management, emphasizing the domain and redirection URL settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/traefikv1.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_redirection_url: 'https://www.{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\nsession:\n  domain: '{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Authelia Storage Bans Command\nDESCRIPTION: This snippet lists the options inherited from parent commands, including configuration file settings, encryption key, and database connection parameters for MySQL, PostgreSQL, and SQLite.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OIDC Client for Open WebUI\nDESCRIPTION: Authelia OpenID Connect client configuration for Open WebUI, defining client credentials, redirect URIs, and authentication policies\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/open-webui/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    clients:\n      - client_id: 'open-webui'\n        client_name: 'Open WebUI'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://ai.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/oauth/oidc/callback'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'groups'\n          - 'email'\n        userinfo_signed_response_alg: 'RS256'\n```\n\n----------------------------------------\n\nTITLE: Asset Directory Structure\nDESCRIPTION: This snippet shows the expected directory structure for overriding Authelia's server assets.  It includes locations for the favicon, logo and translation locales.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/server-asset-overrides.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n\"/config/assets/\n├── favicon.ico\n├── logo.png\n└── locales/<lang>[-[variant]]/<namespace>.json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OpenID Connect Client for Mobilizon (YAML)\nDESCRIPTION: This YAML snippet configures an OpenID Connect client in Authelia for Mobilizon. It specifies the client ID, secret (hashed), redirect URIs, scopes, and other settings required for the integration.  The `client_secret` should be a secure hash of the actual secret.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/mobilizon/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"identity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'mobilizon'\n        client_name: 'Mobilizon'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://mobilizon.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}/auth/keycloak/callback'\n        scopes:\n          - 'openid'\n          - 'email'\n          - 'profile'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_post'\"\n```\n\n----------------------------------------\n\nTITLE: Using the authelia crypto pair help command\nDESCRIPTION: Shows how to access help information for the authelia crypto pair command, which displays available options and subcommands.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto pair --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Authz Endpoints for Traefik v1 in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to set up the Authz endpoints for Traefik v1 using the ForwardAuth implementation. It requires Traefik to have its endpoints configured for authentication.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/traefikv1.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  endpoints:\n    authz:\n      forward-auth:\n        implementation: 'ForwardAuth'\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia for Uptime Kuma Monitoring\nDESCRIPTION: This YAML snippet demonstrates how to configure Authelia as a client for Uptime Kuma. It includes settings for server endpoints, authentication strategies, access control rules, and identity providers using OpenID Connect 1.0. The snippet assumes familiarity with YAML format and Authelia setup.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/uptime-kuma/index.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nserver:\n  endpoints:\n    authz:\n      endpoint_name:\n        implementation: ''\n        authn_strategies:\n          - name: 'HeaderAuthorization'\n            schemes:\n              - 'Basic'\n              - 'Bearer'\n          - name: 'CookieSession'\naccess_control:\n  rules:\n    - domain:\n      - 'application.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      subject: 'oauth2:client:uptime-kuma'\n      policy: 'one_factor'\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'uptime-kuma'\n        client_name: 'Uptime Kuma'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        scopes:\n          - 'authelia.bearer.authz'\n        audience:\n          - 'https://application.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/'\n        grant_types:\n          - 'client_credentials'\n        requested_audience_mode: 'implicit'\n        token_endpoint_auth_method: 'client_secret_basic'\n```\n\n----------------------------------------\n\nTITLE: Authelia Client Configuration for Stirling-PDF (YAML)\nDESCRIPTION: This YAML snippet configures an Authelia client for Stirling-PDF. It defines the client ID, secret, redirect URIs, scopes, and other OpenID Connect settings necessary for Authelia to authenticate Stirling-PDF users.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/stirling-pdf/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'stirlingpdf'\n        client_name: 'Stirling-PDF'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://stirlingpdf.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/login/oauth2/code/oidc'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'groups'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_basic'\n```\n```\n\n----------------------------------------\n\nTITLE: Authelia Client Configuration in YAML\nDESCRIPTION: This YAML configuration defines an Authelia client for use with the Express.js application.  It specifies the client ID, secret, redirect URIs, scopes, and other OpenID Connect settings.  The `client_secret` is a pre-hashed version of `insecure_secret`.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/expressjs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'Express.js'\n        client_name: 'Express.js App'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        require_pkce: true\n        require_pushed_authorization_requests: true\n        redirect_uris:\n          - 'https://express.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/callback'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n          - 'groups'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_basic'\n```\n```\n\n----------------------------------------\n\nTITLE: GLAuth User Filter\nDESCRIPTION: This LDAP filter searches for users in GLAuth. It combines username or email matching with a check for the posixAccount object class and an inactive account status check. This filter retrieves active user accounts from GLAuth.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/ldap.md#2025-04-21_snippet_9\n\nLANGUAGE: LDAP\nCODE:\n```\n\"(&(&#124;({username_attribute}={input})({mail_attribute}={input}))(objectClass=posixAccount)(!(accountStatus=inactive)))\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OIDC Client for Outline\nDESCRIPTION: YAML configuration for setting up an OpenID Connect client in Authelia for the Outline application, defining client credentials, authorization policy, and required scopes.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/outline/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    clients:\n      - client_id: 'outline'\n        client_name: 'Outline'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://outline.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/auth/oidc.callback'\n        scopes:\n          - 'openid'\n          - 'offline_access'\n          - 'profile'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_post'\n```\n\n----------------------------------------\n\nTITLE: Using the authelia debug tls Command\nDESCRIPTION: Basic syntax for the authelia debug tls command which allows checking a remote server's TLS configuration and validating certificates.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_debug_tls.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia debug tls [address] [flags]\n```\n\n----------------------------------------\n\nTITLE: Usage Examples for the WebAuthn List Command\nDESCRIPTION: Provides various examples of how to use the 'authelia storage user webauthn list' command, including different configuration methods and database connection options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_webauthn_list.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user webauthn list\nauthelia storage user webauthn list john\nauthelia storage user webauthn list --config config.yml\nauthelia storage user webauthn list john --config config.yml\nauthelia storage user webauthn list --encryption-key b3453fde-ecc2-4a1f-9422-2707ddbed495 --postgres.address tcp://postgres:5432 --postgres.password autheliapw\nauthelia storage user webauthn list john --encryption-key b3453fde-ecc2-4a1f-9422-2707ddbed495 --postgres.address tcp://postgres:5432 --postgres.password autheliapw\n```\n\n----------------------------------------\n\nTITLE: Authelia Client Configuration for Mealie (YAML)\nDESCRIPTION: This YAML snippet configures an Authelia client for Mealie. It defines the client ID, secret, redirect URIs, scopes, and authorization policy. The `client_secret` should be securely generated and stored.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/mealie/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'mealie'\n        client_name: 'Mealie'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng' # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        require_pkce: true\n        pkce_challenge_method: 'S256'\n        redirect_uris:\n          - 'https://mealie.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/login'\n        scopes:\n          - 'openid'\n          - 'email'\n          - 'profile'\n          - 'groups'\n        userinfo_signed_response_alg: 'none'\n```\n```\n\n----------------------------------------\n\nTITLE: LDAP Memberof RDN Replacement Example\nDESCRIPTION: Demonstrates the memberof:rdn replacement pattern for group filtering, showing how relative distinguished names are processed for LDAP searches\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/ldap.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n(<RDN>)\n```\n\nLANGUAGE: text\nCODE:\n```\n(|(CN=abc)(CN=xyz))\n```\n\n----------------------------------------\n\nTITLE: Inherited Storage Configuration Options\nDESCRIPTION: Command-line options inherited from parent commands for configuring storage backends including MySQL, PostgreSQL, and SQLite settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_totp.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Example Usage of authelia crypto pair ed25519\nDESCRIPTION: Shows how to access help documentation for the Ed25519 key pair operations, demonstrating the recommended way to learn more about the command's capabilities.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_ed25519.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto pair ed25519 --help\n```\n\n----------------------------------------\n\nTITLE: Using the authelia crypto pair ed25519 Command\nDESCRIPTION: Basic syntax for the Ed25519 key pair cryptographic operations command. This command is used as a base for Ed25519-specific cryptographic tasks in Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_ed25519.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto pair ed25519 [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring NTP Settings in Authelia YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to set up NTP settings in Authelia. It includes options for specifying the NTP server address, protocol version, maximum allowed time desynchronization, and startup check behaviors.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/miscellaneous/ntp.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nntp:\n  address: 'udp://time.cloudflare.com:123'\n  version: 3\n  max_desync: '3s'\n  disable_startup_check: false\n  disable_failure: false\n```\n\n----------------------------------------\n\nTITLE: Authelia Generator Command Options\nDESCRIPTION: Complete list of available command line options for configuring the generator's behavior, including directory paths, file locations, and version control settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n  -h, --help                                                       help for authelia-gen\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Configure Flower with Authelia OIDC settings (Python)\nDESCRIPTION: This Python snippet shows how to configure Flower to use Authelia as an OpenID Connect provider. It sets the authentication provider, OAuth2 key, OAuth2 secret, and OAuth2 redirect URI in Flower's `flowerconfig.py` file.  The `auth` setting defines the user's email domain.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/flower/index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\nauth = '.*@{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\nauth_provider = 'flower.views.auth.AutheliaLoginHandler'\noauth2_key = 'flower'\noauth2_secret = 'insecure_secret'\noauth2_redirect_uri = 'https://flower.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/login'\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Client for Matomo with YAML\nDESCRIPTION: This YAML snippet demonstrates the client configuration required by Authelia to facilitate OpenID Connect authentication for the Matomo application. It specifies the client ID, secret, redirect URIs, and the required scopes for authorization.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/matomo/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"identity_providers:\\n  oidc:\\n    clients:\\n      - client_id: 'matomo'\\n        client_name: 'Matomo'\\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\\n        public: false\\n        authorization_policy: 'two_factor'\\n        redirect_uris:\\n          - 'https://matomo.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/index.php?module=LoginOIDC&action=callback&provider=oidc'\\n        scopes:\\n          - 'openid'\\n          - 'groups'\\n          - 'email'\\n        userinfo_signed_response_alg: 'none'\\n        token_endpoint_auth_method: 'client_secret_post'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vikunja for Authelia OpenID\nDESCRIPTION: This snippet sets up Vikunja to use Authelia as its OpenID Connect provider. It includes enabling OpenID authentication and providing the necessary URLs, client ID, and client secret. This configuration also operates within a YAML file and is mandatory for integrating Vikunja with Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/vikunja/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nauth:\n  openid:\n    enabled: true\n    redirecturl: 'https://vikunja.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/auth/openid/'\n    providers:\n      - name: 'Authelia'\n        authurl: 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n        clientid: 'vikunja'\n        clientsecret: 'insecure_secret'\n        scope: 'openid profile email'\n```\n\n----------------------------------------\n\nTITLE: Configuring Reset Password Identity Validation in Authelia (YAML)\nDESCRIPTION: Example YAML configuration for the reset_password section within identity_validation. Defines the JWT secret, lifespan, and algorithm used to validate user identity during password reset flows.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-validation/reset-password.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_validation:\n  reset_password:\n    jwt_secret: ''\n    jwt_lifespan: '5 minutes'\n    jwt_algorithm: 'HS256'\n```\n\n----------------------------------------\n\nTITLE: Docker Command with Volume for Multiple Configuration Files\nDESCRIPTION: Example showing how to override the configuration files loaded in Docker by mounting a volume and specifying multiple configuration files.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/methods/files.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --volume /path/to/config:/config authelia:authelia:latest authelia --config=/config/configuration.yml --config=/config/configuration.acl.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia for OpenID Connect in YAML\nDESCRIPTION: This YAML configuration sets up Authelia as an OpenID Connect provider. It includes necessary fields such as client_id, client_name, client_secret, and redirect_uris. Dependencies include a functional Authelia setup and knowledge of OpenID Connect configuration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/jellyfin/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'jellyfin'\n        client_name: 'Jellyfin'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        require_pkce: true\n        pkce_challenge_method: 'S256'\n        redirect_uris:\n          - 'https://jellyfin.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/sso/OID/redirect/authelia'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'groups'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_post'\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Administration Settings\nDESCRIPTION: YAML configuration demonstrating optional administration interface settings with granular control over admin UI enable/disable options, address configurations, and access restrictions\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/roadmap/active/dashboard-control-panel-and-cli-for-admins.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  address: 'tcp://:{{< sitevar name=\"port\" nojs=\"9091\" >}}'\n\nadministration:\n  ## Explicitly enable Dynamic Configuration, either via CLI only or CLI and UI via enable_ui.\n  enable: false\n\n  ## Explicitly enable the Admin UI on this Authelia instance. If 'enable' is configured another process could also be\n  ## separately configured with this enabled.\n  enable_ui: false\n\n  ## Configure the listener address for the UI. If it's exactly the same host and port component as above with a\n  ## different path, listen on the same listener as above. If it's exactly the same, error.\n  address: 'tcp://:9092'\n\n  ## URL enabling the button/link in the portal for the UI.\n  url: 'https://auth-admin.example.com'\n\n  ## List of users who are allowed to view the admin UI. In addition to the groups.\n  users:\n    - 'john'\n\n  ## List of groups who are allowed to view the admin UI. In addition to the users.\n  groups:\n    - 'admins'\n```\n\n----------------------------------------\n\nTITLE: Executing TOTP CSV Export Command in Authelia\nDESCRIPTION: The base command for exporting TOTP configurations to a CSV file in Authelia. This command exports all user TOTP configurations in the storage to a CSV file.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_totp_export_csv.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user totp export csv [flags]\n```\n\n----------------------------------------\n\nTITLE: Examples of Authelia Storage User Identifiers Import Command\nDESCRIPTION: Demonstrates various ways to use the import command, including basic usage, specifying config files, and providing database connection parameters directly via command-line options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_identifiers_import.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user identifiers import\nauthelia storage user identifiers import authelia.export.opaque-identifiers.yml\nauthelia storage user identifiers import --config config.yml export.yml\nauthelia storage user identifiers import --encryption-key b3453fde-ecc2-4a1f-9422-2707ddbed495 --postgres.address tcp://postgres:5432 --postgres.password autheliapw export.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Client for PhotoPrism\nDESCRIPTION: This YAML snippet demonstrates the configuration necessary for the Authelia client to support PhotoPrism within an OpenID Connect framework. It specifies client credentials and necessary redirect URIs that PhotoPrism will utilize during authentication. Ensure the security of the client secret by using proper hashing, as showcased in the example.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/photoprism/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'photoprism'\n        client_name: 'photoprism'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://photoprism.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/v1/oidc/redirect'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n          - 'address'\n        userinfo_signed_response_alg: 'none'\n```\n\n----------------------------------------\n\nTITLE: Options inherited from parent commands\nDESCRIPTION: Shows all options inherited from parent commands, including configuration file paths, database connection parameters, and encryption settings. These options can be used with the 'authelia storage bans ip list' command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_ip_list.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Lists all options inherited from parent commands that can be used with the schema-info command, including configuration and database connection parameters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_schema-info.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Output Retention in YAML for Authelia\nDESCRIPTION: This configuration enables keeping stdout output even when a log file path is specified. This allows logs to be written to both the file and standard output.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/miscellaneous/logging.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  keep_stdout: true\n```\n\n----------------------------------------\n\nTITLE: Available Options for the RSA Generation Command\nDESCRIPTION: Lists the available command-line options specific to the 'crypto pair rsa generate' command, including key bit-size, output directory and file naming options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_rsa_generate.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -b, --bits int                       number of RSA bits for the certificate (default 2048)\n  -d, --directory string               directory where the generated keys, certificates, etc will be stored\n      --file.extension.legacy string   string to include before the actual extension as a sub-extension on the PKCS#1 and SECG1 legacy formats (default \"legacy\")\n      --file.private-key string        name of the file to export the private key data to (default \"private.pem\")\n      --file.public-key string         name of the file to export the public key data to (default \"public.pem\")\n  -h, --help                           help for generate\n      --legacy                         enables the output of the legacy PKCS#1 and SECG1 formats when enabled\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Authelia Storage Commands\nDESCRIPTION: Shows all options inherited from parent commands, including configuration file paths, database connection parameters for MySQL, PostgreSQL, and SQLite.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_identifiers_export.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Karakeep\nDESCRIPTION: This snippet explains the necessary environment variables to configure Karakeep to work with Authelia as an OpenID Connect Provider. The variables include the OAuth well-known URL, client ID, client secret, and provider name.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/karakeep/index.md#2025-04-21_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\n\"OAUTH_WELLKNOWN_URL=https://auth.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}/.well-known/openid-configuration\\nOAUTH_CLIENT_ID=karakeep\\nOAUTH_CLIENT_SECRET=insecure_secret\\nOAUTH_PROVIDER_NAME=Authelia\"\n```\n\n----------------------------------------\n\nTITLE: Using the Authelia Storage User Identifiers Export Command\nDESCRIPTION: This command allows exporting opaque identifiers for users to a YAML file for backup purposes. Syntax shows the basic command structure with flags.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_identifiers_export.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user identifiers export [flags]\n```\n\n----------------------------------------\n\nTITLE: HedgeDoc Environment Variables for Authelia OIDC\nDESCRIPTION: This set of environment variables configures HedgeDoc to use Authelia as its OpenID Connect provider. It defines the URLs for authorization, token, and user profile endpoints, as well as the client ID, secret, scopes, and attributes for mapping user information.  The `CMD_OAUTH2_ACCESS_ROLE` specifies that users should be part of the `hedgedoc-users` group, this can be adjusted as needed.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/hedge-doc/index.md#2025-04-21_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nCMD_OAUTH2_PROVIDERNAME=Authelia\nCMD_OAUTH2_AUTHORIZATION_URL=https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc/authorization\nCMD_OAUTH2_TOKEN_URL=https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc/token\nCMD_OAUTH2_USER_PROFILE_URL=https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc/userinfo\nCMD_OAUTH2_CLIENT_ID=hedgedoc\nCMD_OAUTH2_CLIENT_SECRET=insecure_secret\nCMD_OAUTH2_SCOPE=openid email profile groups\nCMD_OAUTH2_USER_PROFILE_USERNAME_ATTR=preferred_username\nCMD_OAUTH2_USER_PROFILE_DISPLAY_NAME_ATTR=name\nCMD_OAUTH2_USER_PROFILE_EMAIL_ATTR=email\nCMD_OAUTH2_ROLES_CLAIM=groups\nCMD_OAUTH2_ACCESS_ROLE=hedgedoc-users\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Authelia Storage User Identifiers Import Command\nDESCRIPTION: Lists all options inherited from parent commands, including configuration settings and database connection parameters for MySQL, PostgreSQL, and SQLite.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_identifiers_import.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Configuring Writefreely OAuth Settings\nDESCRIPTION: Configures Writefreely to use Authelia as an OpenID Connect provider, specifying client credentials, endpoints, and user mapping\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/writefreely/index.md#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[app]\ndisable_password_auth = true\n\n[oauth.generic]\nclient_id          = <Client ID>\nclient_secret      = <Client Secret>\nhost               = https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\ndisplay_name       = Authelia\ntoken_endpoint     = /api/oidc/token\ninspect_endpoint   = /api/oidc/userinfo\nauth_endpoint      = /api/oidc/authorization\nscope              = openid email profile\nallow_disconnect   = false\nmap_user_id        = sub\nmap_username       = preferred_username\nmap_display_name   = name\nmap_email          = email\n```\n\n----------------------------------------\n\nTITLE: opkssh Server Provider Configuration\nDESCRIPTION: This text snippet shows how to configure Authelia as an OpenID Provider within the `/etc/opk/providers` file for opkssh. This configuration associates the Authelia instance URL with the opkssh client ID and sets a validity duration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/opkssh/index.md#2025-04-21_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n```txt\nhttps://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/ opkssh 24h\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret Manifest with Base64 Encoded Data for Authelia\nDESCRIPTION: This YAML manifest creates a Kubernetes Secret with base64 encoded data for various Authelia configuration secrets. It includes the same secrets as the string data example, but encoded in base64.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/kubernetes/secrets.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Secret\napiVersion: v1\ntype: Opaque\nmetadata:\n  name: authelia\ndata:\n  DUO_SECRET_KEY: ZDR5cGsyVVFYeHVvODZzN3ZKMnJZV1BhNUtveERmVTlKUVdnRXF0QU5pQmFKVlFTRzhQSmJEOVUyNGVpVnVQQw==\n  JWT_SECRET: TndzVnNYdjRZQ0FGOXN1eFdabVQ3TjZQU3ptb3VDREhxVnB6YlM1bmlCS280OWI3clRSRW13RmU2cm9Lc3dmNA==\n  LDAP_PASSWORD: emFmY0FTaEVCZmdjNDhEaWhkUm5uYjZVSkVHS3F6ZzNGZGVaWFozcmhyZzZ0dTJvRG9ZU0JBODh3OU5QdkRoWg==\n  OIDC_HMAC_SECRET: ZVNvcE1qYml1Q01oRWJYR0ZzbTVCOEtXS3N6eFYzQ0pXU0xZclduQkpqYTRyRk52RHh0aTM4OFd5QmpkcnNIYg==\n  OIDC_ISSUER_PRIVATE_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLSBNWElFb2dJQiRBS0NBUUVBeFpWSlAzV0YvL1BHMmZMUW9FQzlEdGRpRkcvKzAwdnFsYlZ6ejQ3bnl4S09OSVBJIGxtTDNVZG1xcEdUS01lLzVCcnFzZTRaQUtsUUhpRGJ3eks5eXBuZmlndEh1dmgvSk8wUzdDaFA3MFJDNjdlZDEgSFYxbnlmejVlVzNsbGJ0R0pQcmxZTHFJVE5nY3RIcDZ6bVJVRnRTelBqOXFGdm96STkzTEppNDkyeUwxK3Z1OCBVbjNEbTgrUXE2WE0ydFBkRWNsZEIvZHRCd09Xb0YrOGVPT1ZzdTBURHVCNWJ3bGhCVkdKdVNBdXpCUFJTMmJGIEdhNHVrMEpEZGtET01DRVF4QzV1V0RGeGdmRVJTTUZ5ZkxWV0Q0N3dvRGJ1V0VCcTEwYzB6K2RwV1BNcDdBaW4gWW5ua3FpY3dDTjg4WjB6aWQ2TW1NUTY1RjQrOUhjK3FDL3A2eHdJREFRQUJBb0lCQUdsaGFBSEtvcitTdTNvLyBBWHFYVEw1L3JiWU16YkxRaUx0MFhlSlQ2OWpwZXFNVHJvWlhIbVd2WEUzMTI4bXFuZjB5encvSzJLbzZ5eEdoIGkrai9vbnlhOEZxcHNWWUNDZ2ZzYm4yL2pzMUF5UkplSXA2WTFPUnNZbnFiWEpueG1rWGE4MEFWL09CUFcyLysgNjBUdFNkUXJlYlkzaUZQYytpMmsrOWJQVHZweXlETEtsejhVd2RaRytrNXV5WU5JeVFUY2N6K1Bqd3NJdkRpaiA3dEtZYW1oaExOM1FYdDMvYVpURnBqVGdlelA0V3lyaVp4aldyZGRIb3djNDdxMnJ3TlM5NU5EMzlKY3lzSkFjIDBQY2J1OEE1bFZhN0Z4MzN1T3R6RGZLV0lXN3hWRU4rT3RQZ04rRmJUalhjWGs1SVplZGwrcFc1bFU1UCsrRy8gWlB2eitXRUNnWUVBOWc2SHdkT0RXM2U2OGJPcXNGb0tnMzUrdmZVRk16bHlNRjhIRnlsTlZmbkxwVEVEcjYzNyBvd3pNRnZjVXhWZDcxYitnVjVubm5iSStyaVVGSWd5Ujh2aENqaHk0bW9vcERQYWhDNC9Ld040Tkc2dXoraTFoIEFCNkQ1K3puMkJqbk8vNXhNTUZHbEFwV3RSTm1KVkdZbE5EajNiWEtoMlZYenp5MDNWTmVEOGtDZ1lFQXpaRkwgT2x6b1JCMUhLcFRXSUVDY3V2eG9mTXhMT0xiM3pzMGsydC9GWU5ZSXBvdm1HV0NDQVVMejEzeTUzZTUrLys1bSA3STlWVVpKRmFJaGFaMzZxVkJBcENLZHJ1NjlwWk1rV0NjUU85akVMRmN4NTFFejdPZ0pXenU3R1MxUUpDUEtDIGZFRHhJMHJaSzIxajkzL1NsL25VbkVpcjdDWXBRK3d2Q2FHdUhnOENnWUFYZ2JuY2ZZMStEb2t3a0I2TmJIeTIgcFQ0TWZiejZjTkdFNTM4dzZrUTJJNEFlRHZtd0xlbnRZTXFhb3c0NzhDaW5lZ0FpZmxTUFR6a0h3QWVtZ2hiciBaR1pQVjFVWGhuMTNmSlJVRzIrZVQxaG5QVmNiWG54MjIzTjBrOEJ1ZDZxWG82NUNueVJUL2t6Y1RiY2pkNUVoIEhuZTJkYWljbU1UenluUG85UTcyYVFLQmdCbW9iTzlYOFZXdklkYmF4Tzg1b1ZabGN0VkEycEsxbzdDWVFtVmYgVU0rSlo0TUNLekkzcllKaXpQUzBpSzUrdWpOUG1tRWtjczIvcUJJb0VzQ2dPcnBMV2hQT2NjLzNVUHhYYlB6RCBEK3NDckJPSWRoeGRqMjNxSk5PblVmRE5DR09wZ1VmcEF6QVlnNHE4R0tJbnZpMWg3WHVrUm5FdlFpOU1KNExZIFAxZFpBb0dBU0djR25UTWttZVNYUDh1eCtkdlFKQWlKc2tuL3NKSWdCWjV1cTVHUkNlTEJVb3NSU1Z4TTc1VUsgdkFoL2MvUkJqK3BZWFZLdVB1SEdaQ1FKeHNkY1JYelhOR291VXRnYmFZTUw1TWUvSGFndDIwUXpEUkJmdUdCZyBxZVpCSmFYaGpFbHZ3NlBVV3RnNHgrTFlSQ0JwcS9iUzNMSzNvelpyU1R1a1ZrS0RlZ3c9IC0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t\n  REDIS_PASSWORD: VmZoZE5oZ0ZHNW1MVTlzM2NqUW45aW02ZGtpV051M0ZFVVBKUmk5YnFHbTNVVjZ4ekdCWmd2ZENKaG95MjZkOQ==\n  REDIS_SENTINEL_PASSWORD: c1NKTWZYOUE2UTZ2VHBENnJIWGNMbjJqNWtONTU3Und1b2hBZXladUdxSDlQOUxHZnVTTW56aTl3b1ladU5xVQ==\n  SESSION_SECRET: RGtlekg1emNNUXN2YVUzOFlWdTY3M2k2SkRINFZQaWlrOXhQbVlzVE4zS1BOa3hTaWl5WjhBU0ZUZGNCY3U4cQ==\n  SMTP_PASSWORD: b2k0WWFnNUhYOEJoYzVKVHI0OW5Sa2RQRXI0SmNQTWZMQVB2WHhOcEh0SHFpSFhmeDNpc2RXWHVUZzd5Q3Rqaw==\n  STORAGE_ENCRYPTION_KEY: ckg4N3JqVk1RQnZ6VmdqOHZWR1N4aG9wMlBQd2Rkcko3QjZvU2tHY21vZ2FuTWY0d3FBTnA5QUp3YU1IdDhSQQ==\n  STORAGE_PASSWORD: Tk1IZjlaN0M1VVFZdUtLZ2g5QkpUS2VjY29adDZjNjQ3RlFxc0VIaGthcGtrbmRQa1B3M2Q4Ym52a3FMZ2laNQ==\n...\n```\n\n----------------------------------------\n\nTITLE: Validating Bare-Metal Configuration with Custom YAML\nDESCRIPTION: Example of how to run Authelia on bare-metal with a custom configuration file for validation.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/methods/files.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia --config config.custom.yml\n```\n\n----------------------------------------\n\nTITLE: Available Options for authelia crypto certificate ecdsa request Command\nDESCRIPTION: Complete list of command-line options and flags for customizing the generation of ECDSA private keys and certificate signing requests, including naming conventions, certificate properties, and format settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_ecdsa_request.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -n, --common-name string             certificate common name\n      --country strings                certificate country\n  -b, --curve string                   Sets the elliptic curve which can be P224, P256, P384, or P521 (default \"P256\")\n  -d, --directory string               directory where the generated keys, certificates, etc will be stored\n      --duration string                duration of time the certificate is valid for (default \"1y\")\n      --file.csr string                name of the file to export the certificate request data to (default \"request.csr\")\n      --file.extension.legacy string   string to include before the actual extension as a sub-extension on the PKCS#1 and SECG1 legacy formats (default \"legacy\")\n      --file.private-key string        name of the file to export the private key data to (default \"private.pem\")\n  -h, --help                           help for request\n      --legacy                         enables the output of the legacy PKCS#1 and SECG1 formats when enabled\n  -l, --locality strings               certificate locality\n      --not-after string               latest date and time the certificate is considered valid in various formats\n      --not-before string              earliest date and time the certificate is considered valid in various formats (default is now)\n  -o, --organization strings           certificate organization (default [Authelia])\n      --organizational-unit strings    certificate organizational unit\n  -p, --postcode strings               certificate postcode\n      --province strings               certificate province\n      --sans strings                   subject alternative names\n      --signature string               signature algorithm for the certificate (default \"SHA256\")\n  -s, --street-address strings         certificate street address\n```\n\n----------------------------------------\n\nTITLE: Generating Random Alphanumeric String with Authelia CLI (Docker)\nDESCRIPTION: Uses the Authelia Docker container to generate a random alphanumeric string of 64 characters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/generating-secure-values.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm authelia/authelia:latest authelia crypto rand --length 64 --charset alphanumeric\n```\n\n----------------------------------------\n\nTITLE: Authelia Client Configuration for Synology DSM\nDESCRIPTION: This YAML snippet configures an Authelia client for Synology DSM. It defines the client ID, secret, redirect URIs, scopes, and other settings required for OpenID Connect integration. The client secret is a PBKDF2-SHA512 hash of 'insecure_secret'.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/synology-dsm/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'synology-dsm'\n        client_name: 'Synology DSM'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://dsm.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'groups'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_post'\n```\n```\n\n----------------------------------------\n\nTITLE: Running the WebAuthn Verify Command in Authelia\nDESCRIPTION: The basic syntax for running the WebAuthn credential verification command in Authelia. This command allows administrators to verify registered WebAuthn credentials in the Authelia system.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_webauthn_verify.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user webauthn verify [flags]\n```\n\n----------------------------------------\n\nTITLE: Executing Authelia Crypto Hash Generate Command\nDESCRIPTION: This command is used to generate cryptographic hash digests. It provides various options for customizing the hash generation process, including password input methods and random generation parameters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto hash generate [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OIDC Client for PocketBase\nDESCRIPTION: YAML configuration defining the OpenID Connect client settings in Authelia for PocketBase integration, including client ID, secret, redirect URIs, and authentication policies\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/pocketbase/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    clients:\n      - client_id: 'pocketbase'\n        client_name: 'PocketBase'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://pocketbase.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oauth2-redirect'\n        scopes:\n          - 'email'\n          - 'groups'\n          - 'openid'\n          - 'profile'\n        userinfo_signed_response_alg: 'none'\n```\n\n----------------------------------------\n\nTITLE: Mindent Template Function Example\nDESCRIPTION: Demonstrates the mindent function for conditional YAML multiline formatting\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/templating.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nexample: {{ secret \"/absolute/path/to/file\" | mindent 2 \"|\" | msquote }}\n```\n\n----------------------------------------\n\nTITLE: Options inherited from parent commands\nDESCRIPTION: Global options that can be used with the totp delete command, including configuration file options and database connection parameters for MySQL, PostgreSQL, and SQLite.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_totp_delete.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Options inherited from parent commands including configuration settings and database connection parameters for MySQL, PostgreSQL, and SQLite.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_encryption_change-key.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Generating GitHub Feature Request Template with Authelia-Gen CLI\nDESCRIPTION: The purpose of this snippet is to generate a GitHub feature request issue template using the authelia-gen command-line tool. There are multiple options available to customize the generation process, including paths for various directories and files, and flags for specific functionalities. Dependencies include having authelia-gen installed and proper access to the specified directories and files. This command outputs a configured GitHub feature request template file.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_github_issue-templates_feature-request.md#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nauthelia-gen github issue-templates feature-request [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting Default 2FA Method in Authelia (YAML)\nDESCRIPTION: Configuration example showing how to set the default second factor authentication method for Authelia users. The supported options are totp, webauthn, and mobile_push.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/miscellaneous/introduction.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_2fa_method: totp\n```\n\n----------------------------------------\n\nTITLE: Examples of authelia storage encryption change-key Usage\nDESCRIPTION: Practical examples showing how to use the authelia storage encryption change-key command with different parameter configurations.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_encryption_change-key.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage encryption change-key --config config.yml --new-encryption-key 0e95cb49-5804-4ad9-be82-bb04a9ddecd8\nauthelia storage encryption change-key --encryption-key b3453fde-ecc2-4a1f-9422-2707ddbed495 --new-encryption-key 0e95cb49-5804-4ad9-be82-bb04a9ddecd8 --postgres.address tcp://postgres:5432 --postgres.password autheliapw\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC JWKS with Template for Multi-Line Values - YAML\nDESCRIPTION: Example showing how to use a template to load a multi-line JWKS key from an external file. Uses the mindent function with 10 spaces indentation and the pipe character as multiline prefix, appropriate for RSA keys.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/prologue/security-sensitive-values.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    jwks:\n      - key: {{ secret \"/config/secrets/absolute/path/to/jwks/rsa.2048.pem\" | mindent 10 \"|\" | msquote }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia as an OpenID Connect Provider - YAML\nDESCRIPTION: This YAML configuration snippet specifies the client settings for WeKan in Authelia. It includes the client ID, name, secret, authorization policy, redirect URIs, scopes, and methods for token endpoint authentication. This setup is necessary for WeKan to interact with Authelia using OpenID Connect 1.0.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/wekan/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'wekan'\n        client_name: 'WeKan'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://wekan.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/_oauth/oidc'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_post'\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Location Configuration in NGINX\nDESCRIPTION: NGINX location block configuration for HTTP Basic Authentication with Authelia. Sets up proxy configuration and headers for the authentication endpoint.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx.md#2025-04-21_snippet_15\n\nLANGUAGE: nginx\nCODE:\n```\nset $upstream_authelia http://authelia:9091/api/authz/auth-request/basic;\n\nlocation /internal/authelia/authz/basic {\n    internal;\n    proxy_pass $upstream_authelia;\n\n    proxy_set_header X-Original-Method $request_method;\n    proxy_set_header X-Original-URL $scheme://$http_host$request_uri;\n    proxy_set_header X-Original-Method $request_method;\n    proxy_set_header X-Forwarded-Method $request_method;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header X-Forwarded-Host $http_host;\n    proxy_set_header X-Forwarded-URI $request_uri;\n    proxy_set_header X-Forwarded-For $remote_addr;\n    proxy_set_header Content-Length \"\";\n    proxy_set_header Connection \"\";\n\n    proxy_pass_request_body off;\n    proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;\n    proxy_redirect http:// $scheme://;\n    proxy_http_version 1.1;\n    proxy_cache_bypass $cookie_session;\n    proxy_no_cache $cookie_session;\n    proxy_buffers 4 32k;\n    client_body_buffer_size 128k;\n\n    send_timeout 5m;\n    proxy_read_timeout 240;\n    proxy_send_timeout 240;\n    proxy_connect_timeout 240;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mobilizon OAuth with Authelia (Exs)\nDESCRIPTION: This Exs snippet configures Mobilizon to use Authelia as an OAuth provider using the Ueberauth library. It specifies the client ID, client secret, site URL, authorization URL, token URL, userinfo URL, and token method. Ensure that Ueberauth and its Keycloak strategy are installed and configured in your Mobilizon project.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/mobilizon/index.md#2025-04-21_snippet_1\n\nLANGUAGE: exs\nCODE:\n```\n\"config :ueberauth,\n       Ueberauth,\n       providers: [\n         keycloak: {Ueberauth.Strategy.Keycloak, [default_scope: \\\"openid email profile\\\"]}\n       ]\n\nconfig :mobilizon, :auth,\n  oauth_consumer_strategies: [\n    {:keycloak, \\\"Authelia\\\"}\n  ]\n\nconfig :ueberauth, Ueberauth.Strategy.Keycloak.OAuth,\n  client_id: \\\"mobilizon\\\",\n  client_secret: \\\"insecure_secret\\\",\n  site: \\\"https://{{< sitevar name=\\\"subdomain-authelia\\\" nojs=\\\"auth\\\" >}}.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}\\\",\n  authorize_url: \\\"https://{{< sitevar name=\\\"subdomain-authelia\\\" nojs=\\\"auth\\\" >}}.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}/api/oidc/authorization\\\",\n  token_url: \\\"https://{{< sitevar name=\\\"subdomain-authelia\\\" nojs=\\\"auth\\\" >}}.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}/api/oidc/token\\\",\n  userinfo_url: \\\"https://{{< sitevar name=\\\"subdomain-authelia\\\" nojs=\\\"auth\\\" >}}.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}/api/oidc/userinfo\\\",\n  token_method: :post\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Origins in OpenID Connect YAML\nDESCRIPTION: This snippet demonstrates how to configure the 'allowed_origins' setting in a YAML configuration file for Authelia's OpenID Connect 1.0. The wildcard origin is exemplified, indicating all origins are accepted, which simplifies configuration but could pose security risks. Required dependencies include a correct setup of the Authelia environment.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/openid-connect/provider.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    cors:\n      allowed_origins: \"*\"\n```\n\n----------------------------------------\n\nTITLE: Authelia Crypto Rand Command Usage Examples in Bash\nDESCRIPTION: These examples showcase various ways to use the 'authelia crypto rand' command, including specifying length, charset, and output files. Each example demonstrates a different use case or configuration option.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_rand.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto rand --help\nauthelia crypto rand --length 80\nauthelia crypto rand -n 80\nauthelia crypto rand --charset alphanumeric\nauthelia crypto rand --charset alphabetic\nauthelia crypto rand --charset ascii\nauthelia crypto rand --charset numeric\nauthelia crypto rand --charset numeric-hex\nauthelia crypto rand --characters 0123456789ABCDEF\nauthelia crypto rand directory/file1 directory/file2\nauthelia crypto rand --file directory/file3,directory/file4\n```\n\n----------------------------------------\n\nTITLE: Access Control Rule: Super Compact YAML List of Lists\nDESCRIPTION: This YAML snippet demonstrates a super compact configuration for a list of lists in an access control rule. The rule matches if 'c' is true OR ('a' AND 'b' are true).  This format should not be used for the configuration item type `list(list(object))`, see [List of List Objects](#list-of-list-objects) instead.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/rule-operators.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nrule: [['a', 'b'], ['c']]\n```\n```\n\n----------------------------------------\n\nTITLE: Scrypt Command Options\nDESCRIPTION: Available flags and their default values for configuring the scrypt hash generation including block size, iterations, key size, parallelism, salt size, and variant selection.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate_scrypt.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -r, --block-size int    block size (default 8)\n  -h, --help              help for scrypt\n  -i, --iterations int    number of iterations (default 16)\n  -k, --key-size int      key size in bytes (default 32)\n  -p, --parallelism int   parallelism or threads (default 1)\n  -s, --salt-size int     salt size in bytes (default 16)\n  -v, --variant string    variant, options are 'scrypt', and 'yescrypt' (default \"scrypt\")\n```\n\n----------------------------------------\n\nTITLE: Ed25519 Certificate Request Command Options\nDESCRIPTION: Available command line options for customizing Ed25519 certificate generation, including certificate attributes, file naming, and validity period settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_ed25519_request.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -n, --common-name string             certificate common name\n      --country strings                certificate country\n  -d, --directory string               directory where the generated keys, certificates, etc will be stored\n      --duration string                duration of time the certificate is valid for (default \"1y\")\n      --file.csr string                name of the file to export the certificate request data to (default \"request.csr\")\n      --file.extension.legacy string   string to include before the actual extension as a sub-extension on the PKCS#1 and SECG1 legacy formats (default \"legacy\")\n      --file.private-key string        name of the file to export the private key data to (default \"private.pem\")\n  -h, --help                           help for request\n      --legacy                         enables the output of the legacy PKCS#1 and SECG1 formats when enabled\n  -l, --locality strings               certificate locality\n      --not-after string               latest date and time the certificate is considered valid in various formats\n      --not-before string              earliest date and time the certificate is considered valid in various formats (default is now)\n  -o, --organization strings           certificate organization (default [Authelia])\n      --organizational-unit strings    certificate organizational unit\n  -p, --postcode strings               certificate postcode\n      --province strings               certificate province\n      --sans strings                   subject alternative names\n      --signature string               signature algorithm for the certificate (default \"SHA256\")\n  -s, --street-address strings         certificate street address\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia for Vikunja Integration\nDESCRIPTION: This snippet configures Authelia as an OpenID Connect 1.0 provider for Vikunja. It requires setting Authelia's client ID, client secret, redirect URIs, and other security policies relevant for OpenID authentication. The configuration is done through a YAML file where the client secret is hashed using PBKDF2.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/vikunja/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'vikunja'\n        client_name: 'Vikunja'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://vikunja.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/auth/openid/authelia'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_basic'\n```\n\n----------------------------------------\n\nTITLE: Access Control Rule: Compact with Omitted Level YAML List of Lists\nDESCRIPTION: This YAML snippet demonstrates a compact configuration with an omitted level for a list of lists in an access control rule. The rule matches if 'c' is true OR ('a' AND 'b' are true).  This format should not be used for the configuration item type `list(list(object))`, see [List of List Objects](#list-of-list-objects) instead.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/rule-operators.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nrule:\n  - ['a', 'b']\n  - 'c'\n```\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Lists the options inherited from parent commands, particularly related to configuration file loading and filtering.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_config.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Configuration options that are inherited from parent commands, including database connection parameters for MySQL, PostgreSQL, and SQLite, as well as encryption and configuration file options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_cache_mds3_delete.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Enabling Authenticator Status Validation in Authelia (Markdown)\nDESCRIPTION: This snippet enables the validation of the attestation entry statuses. It is advised to keep this validation active to prevent compromised authenticators from being used.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/second-factor/webauthn.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n#### validate_status\n\n{{< confkey type=\"boolean\" default=\"true\" required=\"no\" >}}\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Export Command Options\nDESCRIPTION: Lists the specific options available for the export command including file name configuration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_webauthn_export.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -f, --file string   The file name for the YAML export (default \"authelia.export.webauthn.yml\")\n  -h, --help          help for export\n```\n\n----------------------------------------\n\nTITLE: Inherited Docker Build Options\nDESCRIPTION: Global options inherited from parent commands that can be used with the docker build command\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_docker_build.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --buildkite          Set CI flag for Buildkite\n      --log-level string   Set the log level for the command (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Log File Path with Date in YAML for Authelia\nDESCRIPTION: This snippet shows how to include a date in the log file name using the %d placeholder, which uses the RFC3339 date format.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/miscellaneous/logging.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  file_path: '/config/authelia.%d.log'\n```\n\n----------------------------------------\n\nTITLE: Basic Argon2 Command Usage\nDESCRIPTION: The basic command syntax for generating Argon2 hash digests with Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate_argon2.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto hash generate argon2 [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Client for HumHub in YAML\nDESCRIPTION: This YAML configuration defines an Authelia client for HumHub. It specifies the client ID, secret (hashed), redirect URIs, scopes, grant types, and other OIDC settings. The configuration requires the pbkdf2-sha512 hashing algorithm to be used for the client secret.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/humhub/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"identity_providers:\\n  oidc:\\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\\n    ## See: https://www.authelia.com/c/oidc\\n    clients:\\n      - client_id: 'humhub'\\n        client_name: 'HumHub'\\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\\n        public: false\\n        authorization_policy: 'two_factor'\\n        redirect_uris:\\n          - 'https://humhub.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}/user/auth/external?authclient=oidc'\\n        scopes:\\n          - 'openid'\\n          - 'profile'\\n          - 'email'\\n        grant_types:\\n          - 'authorization_code'\\n        userinfo_signed_response_alg: 'none'\\n        token_endpoint_auth_method: 'client_secret_post'\"\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Import Inherited Options\nDESCRIPTION: Additional options inherited from parent commands, including database configuration parameters for MySQL, PostgreSQL, and SQLite.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_webauthn_import.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Modern Session Configuration for Authelia in YAML\nDESCRIPTION: This YAML snippet showcases the modern session configuration for Authelia, specifying domain, Authelia URL and default redirection URL options. It provides an example structure useful for session management in Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/traefikv1.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsession:\n  cookies:\n    - domain: '{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\n      authelia_url: 'https://{{</* sitevar name=\"subdomain-authelia\" nojs=\"auth\" */>}}.{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\n      default_redirection_url: 'https://www.{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\n```\n\n----------------------------------------\n\nTITLE: Generating Random Client Secret in Docker\nDESCRIPTION: Command to generate a 72-character client secret with PBKDF2 SHA512 hashing in a Docker environment. Includes both plain text secret and hashed version for configuration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/frequently-asked-questions.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm authelia/authelia:latest authelia crypto hash generate pbkdf2 --variant sha512 --random --random.length 72 --random.charset rfc3986\n```\n\n----------------------------------------\n\nTITLE: Basic Logging Configuration in YAML for Authelia\nDESCRIPTION: This snippet shows a basic YAML configuration for Authelia's logging settings. It sets the log level to 'info', format to 'text', doesn't specify a file path (meaning logs go to stdout), and disables keeping stdout when a file path is specified.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/miscellaneous/logging.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  level: 'info'\n  format: 'text'\n  file_path: ''\n  keep_stdout: false\n```\n\n----------------------------------------\n\nTITLE: Configuring ID Token Encryption Algorithm\nDESCRIPTION: Specifies the key algorithm used for encrypting ID Tokens, with important considerations about client support and key configuration requirements\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/openid-connect/clients.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nid_token_encrypted_response_alg\n```\n\n----------------------------------------\n\nTITLE: Generating Random Client Secret on Bare-Metal\nDESCRIPTION: Command to generate a 72-character client secret with PBKDF2 SHA512 hashing in a bare-metal environment. Includes both plain text secret and hashed version for configuration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/frequently-asked-questions.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto hash generate pbkdf2 --variant sha512 --random --random.length 72 --random.charset rfc3986\n```\n\n----------------------------------------\n\nTITLE: Running All Authelia Integration Test Suites\nDESCRIPTION: This command runs all available integration test suites for Authelia, which takes approximately 30 minutes to complete.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/build-and-test.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts suites test\n```\n\n----------------------------------------\n\nTITLE: Stirling-PDF OIDC Environment Variables (Initial)\nDESCRIPTION: These environment variables configure Stirling-PDF to use Authelia as an OpenID Connect provider.  They define settings like enabling security and login, specifying the OIDC issuer, client ID, client secret, scopes, and username mapping.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/stirling-pdf/index.md#2025-04-21_snippet_1\n\nLANGUAGE: env\nCODE:\n```\n```env\nDOCKER_ENABLE_SECURITY=true\nSECURITY_ENABLE_LOGIN=true\nSECURITY_OAUTH2_ENABLED=true\nSECURITY_OAUTH2_AUTOCREATEUSER=true\nSECURITY_OAUTH2_ISSUER=https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\nSECURITY_OAUTH2_CLIENTID=stirlingpdf\nSECURITY_OAUTH2_CLIENTSECRET=insecure_secret\nSECURITY_OAUTH2_BLOCKREGISTRATION=false\nSECURITY_OAUTH2_SCOPES=\"openid, profile, email\"\nSECURITY_OAUTH2_USEASUSERNAME=preferred_username\nSECURITY_OAUTH2_PROVIDER=Authelia\n```\n```\n\n----------------------------------------\n\nTITLE: Available Options for ECDSA Certificate Command\nDESCRIPTION: Lists the specific options available for the 'authelia crypto certificate ecdsa' command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_ecdsa.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for ecdsa\n```\n\n----------------------------------------\n\nTITLE: Setting up Nextcloud OpenID Client in PHP\nDESCRIPTION: This PHP snippet demonstrates how to configure Nextcloud's `config.php` to recognize and utilize Authelia as its OpenID Connect Provider, by setting the `WEB_OIDC_CLIENT_ID` to 'ownCloud'.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/ocis/index.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nWEB_OIDC_CLIENT_ID=ownCloud\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OIDC Client\nDESCRIPTION: This YAML snippet configures an Authelia OIDC client for WUD. It defines the client ID, client secret (hashed), redirect URI, scopes, and authorization policy.  It assumes the existence of other OIDC configurations in the `identity_providers` section and requires the 'insecure_secret' to be hashed using Authelia's password hashing utility.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/wud/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'wud'\n        client_name: 'WUD'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://wud.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/auth/oidc/authelia/cb'\n        scopes:\n          - 'openid'\n          - 'email'\n          - 'profile'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_basic'\n```\n```\n\n----------------------------------------\n\nTITLE: Listening Line Examples\nDESCRIPTION: Examples of log lines indicating Authelia's network listening configuration\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/troubleshooting.md#2025-04-21_snippet_2\n\nLANGUAGE: log\nCODE:\n```\nListening for non-TLS connections on '0.0.0.0:9091' path '/'\n```\n\nLANGUAGE: log\nCODE:\n```\nListening for TLS connections on '0.0.0.0:9091' path '/'\n```\n\nLANGUAGE: log\nCODE:\n```\nListening for non-TLS connections on ':9091' path '/'\n```\n\nLANGUAGE: log\nCODE:\n```\nListening for non-TLS connections on ':9091' path '/' and '/authelia'\n```\n\n----------------------------------------\n\nTITLE: Schema-Info Command Usage Examples\nDESCRIPTION: Demonstrates different ways to use the schema-info command, including with default configuration, with a specific config file, and with explicit database connection parameters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_schema-info.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage schema-info\nauthelia storage schema-info --config config.yml\nauthelia storage schema-info --encryption-key b3453fde-ecc2-4a1f-9422-2707ddbed495 --postgres.address tcp://postgres:5432 --postgres.password autheliapw\n```\n\n----------------------------------------\n\nTITLE: Authelia Storage Bans IP Inherited Options\nDESCRIPTION: This code block lists the options inherited from parent commands, including configuration file settings, database connection parameters, and encryption key options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_ip.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: PBKDF2-Specific Command Options\nDESCRIPTION: Lists the flags specific to the PBKDF2 command, including options to customize iterations, salt size, and hash variant.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate_pbkdf2.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help             help for pbkdf2\n  -i, --iterations int   number of iterations (default 310000)\n  -s, --salt-size int    salt size in bytes (default 16)\n  -v, --variant string   variant, options are 'sha1', 'sha224', 'sha256', 'sha384', and 'sha512' (default \"sha512\")\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Connection Address Examples\nDESCRIPTION: Examples of different connection address formats including IPv4, IPv6 and Unix socket configurations.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/storage/postgres.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  postgres:\n    address: 'tcp://127.0.0.1:5432'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  postgres:\n    address: 'tcp://[fd00:1111:2222:3333::1]:5432'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  postgres:\n    address: 'unix:///var/run/postgres.sock'\n```\n\n----------------------------------------\n\nTITLE: Building Authelia Binary with Debug Symbols\nDESCRIPTION: This command builds the Authelia binary with debug symbols enabled, using specific compiler and linker flags for security and optimization.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/build-and-test.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nCGO_ENABLED=1 CGO_CPPFLAGS=\"-D_FORTIFY_SOURCE=2 -fstack-protector-strong\" CGO_LDFLAGS=\"-Wl,-z,relro,-z,now\" \\\ngo build -ldflags \"-linkmode=external\" -trimpath -buildmode=pie -o authelia ./cmd/authelia\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Log Format in YAML for Authelia\nDESCRIPTION: This snippet shows how to configure Authelia to output logs in JSON format. JSON format is useful for structured logging and easier parsing by log analysis tools.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/miscellaneous/logging.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  format: 'json'\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Connect with Authelia using YAML\nDESCRIPTION: This YAML snippet provides a client configuration for Authelia's OpenID Connect setup to work with Memos. It specifies settings like client ID, client secret, and redirect URIs, among others. Requires the Authelia identity_providers.oidc setup.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/memos/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'memos'\n        client_name: 'Memos'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://memos.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/auth/callback'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n        grant_types:\n          - 'authorization_code'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_post'\n```\n\n----------------------------------------\n\nTITLE: Generating Random Password Hash with Authelia CLI (Bare-Metal)\nDESCRIPTION: Uses the Authelia CLI binary to generate a random alphanumeric password and its hash using the argon2 algorithm.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/generating-secure-values.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto hash generate argon2 --random --random.length 64 --random.charset alphanumeric\n```\n\n----------------------------------------\n\nTITLE: Authelia Server Address Configuration Examples\nDESCRIPTION: Examples of different server address configurations including TCP, unix socket and file descriptor configurations.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/miscellaneous/server.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  address: 'tcp://127.0.0.1:9091/'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  address: 'tcp://127.0.0.1:9091/subpath'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  address: 'unix:///var/run/authelia.sock'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  address: fd://:3\n```\n\n----------------------------------------\n\nTITLE: Storage Command Options\nDESCRIPTION: Lists all available options for the authelia storage command, including database connection parameters for MySQL, PostgreSQL, and SQLite, as well as encryption configuration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --encryption-key string      the storage encryption key to use\n  -h, --help                       help for storage\n      --mysql.address string       the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string      the MySQL database name (default \"authelia\")\n      --mysql.password string      the MySQL password\n      --mysql.username string      the MySQL username (default \"authelia\")\n      --postgres.address string    the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string   the PostgreSQL database name (default \"authelia\")\n      --postgres.password string   the PostgreSQL password\n      --postgres.schema string     the PostgreSQL schema name (default \"public\")\n      --postgres.username string   the PostgreSQL username (default \"authelia\")\n      --sqlite.path string         the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Building Authelia Docker Image\nDESCRIPTION: Creates the official Docker image for Authelia, packaging the application for containerized deployment.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/reference-authelia-scripts.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts docker build\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for Authelia Storage User Identifiers Generate\nDESCRIPTION: The specific options available for the 'generate' command, including help, sectors, services, and users parameters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_identifiers_generate.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help               help for generate\n      --sectors strings    The list of sectors to generate identifiers for\n      --services strings   The list of services to generate the opaque identifiers for, valid values are: openid (default [openid])\n      --users strings      The list of users to generate the opaque identifiers for\n```\n\n----------------------------------------\n\nTITLE: opkssh Client Login Command\nDESCRIPTION: This bash command demonstrates how to initiate a login to Authelia using opkssh. It specifies the Authelia instance URL and the client ID, allowing opkssh to authenticate against the configured Authelia OpenID Connect provider.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/opkssh/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nopkssh login --provider=https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/,opkssh\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OIDC Client for Zipline\nDESCRIPTION: Defines the OpenID Connect client configuration in Authelia for Zipline, specifying client ID, secret, redirect URIs, and authentication scopes\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/zipline/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    clients:\n      - client_id: 'zipline'\n        client_name: 'Zipline'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'\n        public: false\n        redirect_uris:\n          - 'https://zipline.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/auth/oauth/oidc'\n        scopes:\n          - 'openid'\n          - 'email'\n          - 'profile'\n          - offline_access\n        response_types: 'code'\n        token_endpoint_auth_method: 'client_secret_post'\n```\n\n----------------------------------------\n\nTITLE: Starting Line Examples\nDESCRIPTION: Examples of Authelia startup log lines showing version and build information\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/troubleshooting.md#2025-04-21_snippet_1\n\nLANGUAGE: log\nCODE:\n```\nAuthelia v4.37.5 is starting\n```\n\nLANGUAGE: log\nCODE:\n```\nAuthelia v4.38.0 is starting\n```\n\nLANGUAGE: log\nCODE:\n```\nAuthelia untagged-v4.38.0 (master, 50d8b4a) is starting\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for Authelia User Ban Revocation\nDESCRIPTION: Lists the specific options available for the authelia storage bans user revoke command, including help and ID-based revocation.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_user_revoke.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help     help for revoke\n  -i, --id int   revokes the ban with the given id instead of the user value\n```\n\n----------------------------------------\n\nTITLE: Command Options for Identifiers Management\nDESCRIPTION: Available command-line options specific to the identifiers subcommand.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_identifiers.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for identifiers\n```\n\n----------------------------------------\n\nTITLE: Tearing Down Authelia Integration Test Environment\nDESCRIPTION: This command tears down the environment of the currently running integration test suite, cleaning up after test execution.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/build-and-test.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts suites teardown Standalone\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Delete Command Options\nDESCRIPTION: Lists the specific options available for the delete command including flags for deleting all credentials, targeting by description, or by key ID.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_webauthn_delete.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --all                  delete all of the users WebAuthn credentials\n      --description string   delete a users WebAuthn credential by description\n  -h, --help                 help for delete\n      --kid string           delete a users WebAuthn credential by key id\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for storage cache mds3 delete\nDESCRIPTION: Available options specific to the delete command, which currently only includes the help flag for displaying command usage information.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_cache_mds3_delete.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for delete\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Buffers in YAML\nDESCRIPTION: This snippet configures HTTP server buffers for read and write operations. Both are set to a default of 4096 bytes, which is generally sufficient for most use cases. The parameters are read and write, representing the maximum request and response sizes, respectively.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/prologue/common.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbuffers:\n  read: 4096\n  write: 4096\n```\n\n----------------------------------------\n\nTITLE: Example of authelia debug tls Command with SMTP Server\nDESCRIPTION: Example showing how to use the debug tls command to check an SMTP server's TLS configuration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_debug_tls.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia debug tls tcp://smtp.example.com:465\n```\n\n----------------------------------------\n\nTITLE: Running Bare-Metal with Configuration Filters by Environment\nDESCRIPTION: Example showing how to run Authelia on bare-metal with a template filter applied to the configuration file using environment variables.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/methods/files.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nX_AUTHELIA_CONFIG_FILTERS=template X_AUTHELIA_CONFIG=/config/configuration.yml authelia\n```\n\n----------------------------------------\n\nTITLE: Example of authelia crypto certificate ecdsa request Help Command\nDESCRIPTION: Example showing how to access the help information for the 'authelia crypto certificate ecdsa request' command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_ecdsa_request.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto certificate ecdsa request --help\n```\n\n----------------------------------------\n\nTITLE: Examples of using the list-down command in Authelia\nDESCRIPTION: Shows various examples of using the list-down command with different configuration options including using a config file or specifying database connection parameters directly.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_migrate_list-down.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage migrate list-down\nauthelia storage migrate list-down --config config.yml\nauthelia storage migrate list-down --encryption-key b3453fde-ecc2-4a1f-9422-2707ddbed495 --postgres.address tcp://postgres:5432 --postgres.password autheliapw\n```\n\n----------------------------------------\n\nTITLE: Rendering Email Template with Placeholders in HTML\nDESCRIPTION: This HTML snippet demonstrates how to render an email template with placeholders for dynamic content in Authelia. Required placeholders like {{ .Title }} and {{ .DisplayName }} need to be present. The snippet generates an email body with a personalized greeting and a link for identity validation. The input should be preprocessed to replace placeholders with real data, and the output is an HTML email format.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/notification-templates.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <h1>{{ .Title }}</h1>\n  Hi {{ .DisplayName }}<br/>\n  This email has been sent to you in order to validate your identity.\n  Click <a href=\"{{ .LinkURL }}\">here</a> to change your password.\n</body>\n```\n\n----------------------------------------\n\nTITLE: Rocket.Chat Group Mapping (JSON)\nDESCRIPTION: This JSON configuration maps Authelia groups to Rocket.Chat room names, enabling role-based access control. The keys represent Authelia group names, and the values are arrays of Rocket.Chat room names.  This configuration requires enabling the 'Map Roles/Groups to channels' option in Rocket.Chat's OAuth settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/rocket-chat/index.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"admins\": [\"administration\", \"moderators\"],\n  \"users\": [\"community\"]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Log Level in YAML for Authelia\nDESCRIPTION: This configuration snippet demonstrates how to set the log level to 'debug' in Authelia. Debug level provides more detailed logging information, useful for troubleshooting.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/miscellaneous/logging.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  level: 'debug'\n```\n\n----------------------------------------\n\nTITLE: Command Options Configuration\nDESCRIPTION: Available command line options for configuring the RSA certificate request generation, including bits, common name, country, and other certificate attributes.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_rsa_request.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -b, --bits int                       number of RSA bits for the certificate (default 2048)\n  -n, --common-name string             certificate common name\n      --country strings                certificate country\n  -d, --directory string               directory where the generated keys, certificates, etc will be stored\n      --duration string                duration of time the certificate is valid for (default \"1y\")\n      --file.csr string                name of the file to export the certificate request data to (default \"request.csr\")\n      --file.extension.legacy string   string to include before the actual extension as a sub-extension on the PKCS#1 and SECG1 legacy formats (default \"legacy\")\n      --file.private-key string        name of the file to export the private key data to (default \"private.pem\")\n  -h, --help                           help for request\n      --legacy                         enables the output of the legacy PKCS#1 and SECG1 formats when enabled\n  -l, --locality strings               certificate locality\n      --not-after string               latest date and time the certificate is considered valid in various formats\n      --not-before string              earliest date and time the certificate is considered valid in various formats (default is now)\n  -o, --organization strings           certificate organization (default [Authelia])\n      --organizational-unit strings    certificate organizational unit\n  -p, --postcode strings               certificate postcode\n      --province strings               certificate province\n      --sans strings                   subject alternative names\n      --signature string               signature algorithm for the certificate (default \"SHA256\")\n  -s, --street-address strings         certificate street address\n```\n\n----------------------------------------\n\nTITLE: Authelia Storage User Identifiers Export Examples\nDESCRIPTION: Demonstrates various usage examples of the export command, including basic usage and more complex examples with file specification and different configuration options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_identifiers_export.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user identifiers export\nauthelia storage user identifiers export --file export.yml\nauthelia storage user identifiers export --file export.yml --config config.yml\nauthelia storage user identifiers export --file export.yml --encryption-key b3453fde-ecc2-4a1f-9422-2707ddbed495 --postgres.address tcp://postgres:5432 --postgres.password autheliapw\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia OIDC Client for Roundcube\nDESCRIPTION: Defines the Authelia OpenID Connect client configuration for Roundcube with specific authorization policies and scopes\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/roundcube/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    clients:\n      - client_id: 'roundcube'\n        client_name: 'Roundcube'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://roundcube.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/oauth/callback/'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_post'\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Additional options inherited from parent commands that can be used with the 'generate' command, including configuration, encryption, and database connection parameters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_identifiers_generate.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Cloning Authelia Repository and Checking Out Latest Release\nDESCRIPTION: These Bash commands clone the Authelia repository and checkout the latest release tag. This is a prerequisite for using the bundled Docker Compose examples.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/deployment/docker.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/authelia/authelia.git\ncd authelia\ngit checkout $(git describe --tags `git rev-list --tags --max-count=1`)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Gateway API SecurityPolicy for Gateway-Level Authentication\nDESCRIPTION: A Kubernetes Gateway API SecurityPolicy configuration that secures an entire Gateway using Authelia's external authorization. This applies authentication at the Gateway level rather than individual routes.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/envoy.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 'gateway.envoyproxy.io/v1alpha1'\nkind: 'SecurityPolicy'\nmetadata:\n  name: 'authelia-example'\n  namespace: 'example'\nspec:\n  extAuth:\n    failOpen: false\n    headersToExtAuth:\n      - 'X-Forwarded-Proto'\n      - 'Authorization'\n      - 'Proxy-Authorization'\n      - 'Accept'\n      - 'Cookie'\n    http:\n      path: '/api/authz/ext-authz/'\n      backendRefs:\n        - group: ''\n          kind: 'Service'\n          name: 'authelia'\n          namespace: 'authelia'\n          port: 80\n  targetRefs:\n    - group: 'gateway.networking.k8s.io'\n      kind: 'Gateway'\n      name: 'example'\n```\n\n----------------------------------------\n\nTITLE: Authelia Crypto Rand Command Options in Bash\nDESCRIPTION: This snippet lists all available options for the 'authelia crypto rand' command. It includes options for specifying characters, charset, output files, string length, and file/directory permissions.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_rand.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --characters string   sets the explicit characters for the random string\n  -x, --charset string      sets the charset for the random password, options are 'ascii', 'alphanumeric', 'alphabetic', 'numeric', 'numeric-hex', and 'rfc3986' (default \"alphanumeric\")\n      --file strings        files to export the unique random values to instead of printing them\n  -h, --help                help for rand\n  -n, --length int          sets the character length for the random string (default 72)\n      --mode-dirs string    mode for the created directories (default \"0700\")\n      --mode-files string   mode for the created files (default \"0600\")\n```\n\n----------------------------------------\n\nTITLE: IP Ban Help Command Example\nDESCRIPTION: Example showing how to access the help documentation for the IP ban command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_ip_add.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage bans ip add --help\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for Authelia-Gen Docs JSON-Schema Configuration\nDESCRIPTION: This snippet shows the available options specific to the 'configuration' subcommand. Currently, it only includes a help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_json-schema_configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for configuration\n```\n\n----------------------------------------\n\nTITLE: Using Authelia Scripts Suite Setup Command\nDESCRIPTION: Basic command syntax for setting up an Authelia test suite environment. This command requires specifying a suite name as an argument.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_suites_setup.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts suites setup [suite] [flags]\n```\n\n----------------------------------------\n\nTITLE: Starting an Authelia Integration Suite\nDESCRIPTION: Command to deploy the environment for a specific integration suite named 'Standalone'. This sets up all necessary components for testing Authelia in this environment.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/integration-suites.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts suites setup Standalone\n```\n\n----------------------------------------\n\nTITLE: Running Authelia Docker Container with Specific User\nDESCRIPTION: This shell command demonstrates how to run the Authelia Docker container with a specific user ID and group ID.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/overview/security/measures.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --user 8000:9000 -v /authelia:/config authelia/authelia:latest\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Network Configuration for Authelia\nDESCRIPTION: Demonstrates how to configure Docker networks to ensure proper DNS resolution and network connectivity for Authelia and related services\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/frequently-asked-questions.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  application:\n    networks:\n      proxy: {}\n  proxy:\n    networks:\n      proxy:\n        aliases:\n          - '{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n  authelia:\n    networks:\n      proxy: {}\nnetworks:\n  proxy:\n    external: true\n    name: 'proxy-net'\n```\n\n----------------------------------------\n\nTITLE: LibreChat Environment Configuration for Authelia OpenID Connect\nDESCRIPTION: Environment variables to configure LibreChat for OpenID Connect authentication with Authelia, including issuer, client credentials, and authentication settings\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/librechat/index.md#2025-04-21_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nALLOW_SOCIAL_LOGIN=true\nOPENID_BUTTON_LABEL=Log in with Authelia\nOPENID_ISSUER=https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/.well-known/openid-configuration\nOPENID_CLIENT_ID=librechat\nOPENID_CLIENT_SECRET=insecure_secret\nOPENID_SESSION_SECRET=insecure_session_secret\nOPENID_CALLBACK_URL=/oauth/openid/callback\nOPENID_SCOPE=openid profile email\nOPENID_IMAGE_URL=https://www.authelia.com/images/branding/logo-cropped.png\n```\n\n----------------------------------------\n\nTITLE: Access Control Rule: Omitted Level YAML List of List Objects\nDESCRIPTION: This YAML snippet demonstrates an omitted level configuration for a list of list objects in an access control rule.  This format should only be used for the configuration item type `list(list(object))`, see [List of Lists](#list-of-lists) if you're not looking for a `list(list(object))`\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/rule-operators.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nrule:\n  - - 'a'\n    - 'b'\n  - value: 'c'\n```\n```\n\n----------------------------------------\n\nTITLE: Setting the Authelia Base URL Environment Variable (Bash)\nDESCRIPTION: This bash snippet shows how to set the `FLOWER_OAUTH2_AUTHELIA_BASE_URL` environment variable, which is required for Flower to communicate with Authelia. The variable should be set to the root URL of the Authelia instance.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/flower/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nexport FLOWER_OAUTH2_AUTHELIA_BASE_URL=https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Log File Path in YAML for Authelia\nDESCRIPTION: This configuration sets the file path for Authelia's log output. When a file path is provided, logs are written to the specified file instead of standard output.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/miscellaneous/logging.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  file_path: '/config/authelia.log'\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Control in YAML for Authelia\nDESCRIPTION: This YAML snippet provides a configuration example for setting up access control policies in Authelia. It defines a default policy and a rule allowing access to a specific domain with a one-factor authentication requirement.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/prologue/get-started.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\naccess_control:\n  default_policy: deny\n  rules:\n    - domain: '*.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      policy: one_factor\n```\n\n----------------------------------------\n\nTITLE: Setting Up Integration Test Environment for Authelia\nDESCRIPTION: This command sets up the environment for the Standalone integration test suite, preparing it for test execution.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/build-and-test.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts suites setup Standalone\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for Revoking User Bans in Authelia\nDESCRIPTION: Shows the basic syntax for the authelia storage bans user revoke command, which allows revoking user bans in the regulation system.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_user_revoke.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage bans user revoke [user] [flags]\n```\n\n----------------------------------------\n\nTITLE: Authelia Command Options\nDESCRIPTION: Available command-line options for the authelia command, including configuration file specification and experimental filters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n  -h, --help                                  help for authelia\n```\n\n----------------------------------------\n\nTITLE: Configuring FreshRSS Environment Variables for OIDC Authentication\nDESCRIPTION: Environment variable configuration for enabling OpenID Connect authentication in FreshRSS, specifying Authelia as the identity provider\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/freshrss/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  OIDC_ENABLED: 1\n  OIDC_PROVIDER_METADATA_URL: https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/.well-known/openid-configuration\n  OIDC_CLIENT_ID: freshrss\n  OIDC_CLIENT_SECRET: insecure_secret\n  OIDC_CLIENT_CRYPTO_KEY: XXXXXXXXXX\n  OIDC_REMOTE_USER_CLAIM: preferred_username\n  OIDC_SCOPES: openid groups email profile\n  OIDC_X_FORWARDED_HEADERS: X-Forwarded-Host X-Forwarded-Port X-Forwarded-Proto\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Ed25519 Generation Command with Help Flag\nDESCRIPTION: Example showing how to display the help information for the Ed25519 generation command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_ed25519_generate.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto pair ed25519 generate --help\n```\n\n----------------------------------------\n\nTITLE: Basic ADR Add Command Usage\nDESCRIPTION: Shows the basic command syntax for adding a new Architecture Decision Record.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_manage_adr_add.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-gen docs manage adr add [flags]\n```\n\n----------------------------------------\n\nTITLE: Document Front Matter Example in YAML for Hugo\nDESCRIPTION: Example of the YAML front matter used in Authelia documentation pages. The front matter controls page appearance, metadata, and behavior including title, description, summary, date, draft status, weight, and table of contents settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/prologue/documentation-contributions.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"A Page Title\"\ndescription: \"This is a description of the page.\"\nsummary: \"This is a page lead.\"\ndate: 2022-03-19T04:53:05+00:00\ndraft: false\nweight: 100\ntoc: true\n---\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for WebAuthn List Command\nDESCRIPTION: Lists the options specific to the 'list' subcommand of the WebAuthn credentials management tool.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_webauthn_list.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for list\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for Listing WebAuthn Credentials in Authelia\nDESCRIPTION: Shows the basic command syntax for listing WebAuthn credentials, allowing optional specification of a username to filter results.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_webauthn_list.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user webauthn list [username] [flags]\n```\n\n----------------------------------------\n\nTITLE: Running Authelia Integration Tests\nDESCRIPTION: This command executes the integration tests for the currently running suite, which test Authelia's functionality in a complete ecosystem.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/build-and-test.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts suites test\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Authelia Storage Migrate Command\nDESCRIPTION: Shows how to get help for the storage migrate command by running it with the --help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_migrate.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nauthelia storage migrate --help\n```\n\n----------------------------------------\n\nTITLE: Example Environment Variables\nDESCRIPTION: These environment variables configure the Express.js application to connect to Authelia.  It sets the application base URL, session encryption secret, OpenID Connect issuer URL, client ID, and client secret. The `SESSION_ENCRYPTION_SECRET` should be a strong, randomly generated string.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/expressjs/index.md#2025-04-21_snippet_3\n\nLANGUAGE: env\nCODE:\n```\n```env\nAPP_BASE_URL=https://express.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\nSESSION_ENCRYPTION_SECRET=\nOIDC_ISSUER=https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\nOIDC_CLIENT_ID=Express.js\nOIDC_CLIENT_SECRET=insecure_secret\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Command Usage - Authelia Gen Docs Data Keys\nDESCRIPTION: Basic command syntax for generating docs data files for configuration keys in Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_data_keys.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nauthelia-gen docs data keys [flags]\n```\n\n----------------------------------------\n\nTITLE: Generating OpenID Connect 1.0 Conformance Configurations\nDESCRIPTION: This shell command is used to generate configurations for OpenID Connect 1.0 conformance testing using the authelia-gen tool. It includes several flags for setting URLs, consent modes, policies, token values, and version numbers. Required dependencies include authelia-gen installed and properly configured.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_misc_oidc_conformance.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nauthelia-gen misc oidc conformance [flags]\n```\n\n----------------------------------------\n\nTITLE: Displaying File Structure for Authelia with Traefik Project\nDESCRIPTION: Shows the recommended file structure for setting up an Authelia project with Traefik, including configuration files, secrets, and directory organization.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/blog/authelia-traefik-setup-guide/index.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n📁 project\n ┣ 📁 authelia\n ┃  ┣ 📁 config\n ┃  ┃ ┣ 📄 configuration.yml\n ┃  ┃ ┗ 📄 users.yml\n ┃  ┗ 📁 secrets\n ┣ 📄 compose.yml\n ┗ 📁 traefik\n    ┣ 📁 config\n    ┃ ┣ 📄 dynamic.yml\n    ┃ ┗ 📄 traefik.yml\n    ┣ 📁 data\n    ┃ ┗ 📄 acme.json\n    ┣ 📁 logs\n    ┗ 📁 secrets\n```\n\n----------------------------------------\n\nTITLE: Enabling Trust Anchor Validation in Authelia (Markdown)\nDESCRIPTION: This snippet outlines the configuration key for enabling the validation of the attestation certificate against the Certificate Authority certificate. It is recommended to keep this setting as `true` for optimal security compliance.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/second-factor/webauthn.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#### validate_trust_anchor\n\n{{< confkey type=\"boolean\" default=\"true\" required=\"no\" >}}\n```\n\n----------------------------------------\n\nTITLE: Host File Configuration for Authelia Development\nDESCRIPTION: This code snippet shows the host file entries needed to configure local domain resolution for testing Authelia without owning the actual domains. Adding these entries to /etc/hosts allows accessing test subdomains that will be served by the Docker reverse proxy.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/environment.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n192.168.240.100 home.example.com\n192.168.240.100 login.example.com\n192.168.240.100 singlefactor.example.com\n192.168.240.100 public.example.com\n192.168.240.100 secure.example.com\n192.168.240.100 mail.example.com\n192.168.240.100 mx1.mail.example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Timeouts in YAML\nDESCRIPTION: This snippet specifies the HTTP server timeout settings, including read, write, and idle timeouts. The defaults are 6 seconds for read and write timeouts, and 30 seconds for idle timeout. These parameters regulate how long the server waits for operations before timing out.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/prologue/common.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntimeouts:\n  read: '6s'\n  write: '6s'\n  idle: '30s'\n```\n\n----------------------------------------\n\nTITLE: Running All Integration Tests Across All Suites\nDESCRIPTION: Command to execute all tests from all available integration suites. This comprehensive testing requires that no suite is currently running.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/integration-suites.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts suites test\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Claims in YAML for Authelia\nDESCRIPTION: This YAML configuration allows the definition of custom claims utilizing the authentication backend attributes. Custom claims are configured to be available through specific scopes assigned to clients, promoting a flexible claims management approach.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/openid-connect-1.0-claims.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthentication_backend:\n  ldap:\n    attributes:\n      extra:\n        ## Gives Authelia access to a user attribute named 'extra_example'.\n        extra_example:\n          multi_valued: false\n          value_type: 'string'\ndefinitions:\n  user_attributes:\n    ## Gives Authelia access to a user attribute named 'attribute_name'.\n    attribute_name:\n      expression: '\"attibute_name_users\" in groups'\nidentity_providers:\n  oidc:\n    claims_policies:\n      custom_claims_policy:\n        custom_claims:\n          ## Gives the 'custom_claims_policy' claim policy access to the 'claim_name' and 'extra_claim_name' claims.\n          claim_name:\n            attribute: 'attribute_name'\n          extra_claim_name:\n            attribute: 'extra_example'\n    scopes:\n      ## Gives the arbitrary scope 'scope_name` access to the 'claim_name' and 'extra_claim_name' claims.\n      scope_name:\n        claims:\n          - 'claim_name'\n          - 'extra_claim_name'\n    clients:\n      - client_id: 'client_example_id'\n        ## Assigns the 'custom_claims_policy' claims policy to this client.\n        claims_policy: 'custom_claims_policy'\n        ## Allows this client to request the scope with the extra claims or the individual claims themselves.\n        scopes:\n          - 'scope_name'\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands for Authelia Ban Management\nDESCRIPTION: Lists all the options inherited from parent commands, including configuration, database connection settings for MySQL, PostgreSQL, and SQLite.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_user_revoke.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Adding User Bans Command Syntax in Authelia\nDESCRIPTION: The basic syntax for adding user bans to the Authelia regulation system. The command requires a username as an argument and supports various optional flags.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_user_add.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage bans user add <user> [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Dovecot OAuth2 Authentication Mechanisms\nDESCRIPTION: Sets up Dovecot configuration for OAuth2 authentication mechanisms, including enabling XOAUTH2 and configuring authentication listeners\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/roundcube/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nauth_mechanisms = $auth_mechanisms oauthbearer xoauth2\n\npassdb {\n  args = /etc/dovecot/dovecot-oauth2.conf.ext\n  driver = oauth2\n  mechanisms = xoauth2 oauthbearer\n}\n\nservice auth {\n  unix_listener /var/spool/postfix/private/auth {\n    group = postfix\n    mode = 0666\n    user = postfix\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Authelia Crypto Certificate ECDSA Command Help\nDESCRIPTION: Example of how to access help information for the ECDSA certificate command in Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_ecdsa.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto certificate ecdsa --help\n```\n\n----------------------------------------\n\nTITLE: Basic Command Usage - Authelia Docs Date Generation\nDESCRIPTION: The basic command syntax for generating doc dates with authelia-gen.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_date.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-gen docs date [flags]\n```\n\n----------------------------------------\n\nTITLE: Example Usage of mds3 status Command\nDESCRIPTION: A simple example showing how to execute the storage cache mds3 status command without additional options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_cache_mds3_status.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage cache mds3 status\n```\n\n----------------------------------------\n\nTITLE: Gitea OpenID Configuration - INI\nDESCRIPTION: This INI snippet configures Gitea to manage user registration and OpenID authentication. It specifies settings for enabling OpenID sign-in and sign-up processes and configuring service permissions. Ensure to edit the 'app.ini' file of Gitea with correct domain values.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/gitea/index.md#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[openid]\nENABLE_OPENID_SIGNIN = false\nENABLE_OPENID_SIGNUP = true\nWHITELISTED_URIS     = {{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\n\n[service]\nDISABLE_REGISTRATION                          = false\nALLOW_ONLY_EXTERNAL_REGISTRATION              = true\nSHOW_REGISTRATION_BUTTON                      = false\n```\n\n----------------------------------------\n\nTITLE: Inherited Configuration Options\nDESCRIPTION: Additional configuration options inherited from parent commands, including database connection settings and encryption options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_ip_add.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Running Tests for a Specific Non-Running Suite\nDESCRIPTION: Command to run tests for a specific suite (in this example, 'HighAvailability') without having to start the suite first. This automatically handles setup and teardown.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/integration-suites.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts suites test HighAvailability\n```\n\n----------------------------------------\n\nTITLE: Configuring Confidential Client: Authorization Code Flow\nDESCRIPTION: This YAML snippet illustrates a configuration for a confidential OIDC client using the authorization code grant type. Requires PKCE 'S256', includes redirect URIs, scopes, and token endpoint authentication method set to 'client_secret_basic'.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/oauth-2.0-bearer-token-usage.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    clients:\n      - client_id: 'example-two'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        require_pkce: true\n        pkce_challenge_method: 'S256'\n        redirect_uris:\n          - 'http://localhost/callback'\n        scopes:\n          - 'offline_access'\n          - 'authelia.bearer.authz'\n        audience:\n          - 'https://app1.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n          - 'https://app2.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n        grant_types:\n          - 'authorization_code'\n          - 'refresh_token'\n        response_types:\n          - 'code'\n        response_modes:\n          - 'form_post'\n        consent_mode: 'explicit'\n        require_pushed_authorization_requests: true\n        token_endpoint_auth_method: 'client_secret_basic'\n```\n\n----------------------------------------\n\nTITLE: Using the Ed25519 Certificate Generation Command\nDESCRIPTION: The basic command syntax for generating an Ed25519 private key and certificate.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_ed25519_generate.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto certificate ed25519 generate [flags]\n```\n\n----------------------------------------\n\nTITLE: TCP Connection to MySQL/MariaDB with IPv6\nDESCRIPTION: Example showing how to configure a TCP connection to a MySQL/MariaDB server using an IPv6 address.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/storage/mysql.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  mysql:\n    address: 'tcp://[fd00:1111:2222:3333::1]:3306'\n```\n\n----------------------------------------\n\nTITLE: Secrets Directory Permissions Shell\nDESCRIPTION: This shell command ensures that the `authelia/secrets` directory has the correct ownership and permissions. It changes the ownership to user and group ID 8000 and sets the permissions to 0700, granting read, write, and execute access to the owner only.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/blog/authelia-traefik-setup-guide/index.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n\"chown 8000:8000 ./authelia/secrets && chmod 0700 ./authelia/secrets\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Token Signing Algorithm\nDESCRIPTION: Specifies the algorithm for signing Access Tokens, with careful considerations about token validation and identity semantics\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/openid-connect/clients.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\naccess_token_signed_response_alg\n```\n\n----------------------------------------\n\nTITLE: Executing Authelia Access Control Check Policy Command\nDESCRIPTION: This snippet shows the basic syntax for running the 'authelia access-control check-policy' command. It checks a request against access control rules to determine the policy that would be applied.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_access-control_check-policy.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nauthelia access-control check-policy [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the authelia storage bans ip list command\nDESCRIPTION: The primary command syntax for listing IP bans in Authelia's regulation system. This command shows all currently banned IP addresses.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_ip_list.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage bans ip list [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for Authelia TOTP Import\nDESCRIPTION: The basic syntax for the authelia storage user totp import command, which takes a filename parameter and optional flags to import TOTP configurations.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_totp_import.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user totp import <filename> [flags]\n```\n\n----------------------------------------\n\nTITLE: Validating Docker Configuration with Custom YAML\nDESCRIPTION: Example of how to run Authelia in Docker with a custom configuration file for validation.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/methods/files.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run authelia/authelia:latest authelia --config config.custom.yml\n```\n\n----------------------------------------\n\nTITLE: Authelia Crypto Command Options in Bash\nDESCRIPTION: This snippet shows the available options for the 'authelia crypto' command, including the help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for crypto\n```\n\n----------------------------------------\n\nTITLE: Inherited Options from Parent Commands\nDESCRIPTION: Command-line options inherited from parent commands that can be used with the docs data command, including directory configurations, file paths, and version controls.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_data.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Configuring Outline Environment Variables for OIDC Authentication\nDESCRIPTION: Environment configuration for Outline to connect with Authelia's OpenID Connect provider, specifying client credentials, authentication endpoints, and required scopes.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/outline/index.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nURL=https://outline.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\nFORCE_HTTPS=true\n\nOIDC_CLIENT_ID=outline\nOIDC_CLIENT_SECRET=insecure_secret\nOIDC_AUTH_URI=https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc/authorization\nOIDC_TOKEN_URI=https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc/token\nOIDC_USERINFO_URI=https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc/userinfo\nOIDC_USERNAME_CLAIM=preferred_username\nOIDC_DISPLAY_NAME=Authelia\nOIDC_SCOPES=openid offline_access profile email\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Storage User Commands\nDESCRIPTION: Options inherited from parent commands, including configuration file settings and database connection parameters for MySQL, PostgreSQL, and SQLite.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_identifiers_add.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Displaying Options for authelia-gen misc Command\nDESCRIPTION: This snippet shows the available options for the 'authelia-gen misc' command. It includes a help option for displaying command usage information.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_misc.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for misc\n```\n\n----------------------------------------\n\nTITLE: Argon2 Command Options\nDESCRIPTION: Available flags and options for configuring the Argon2 hash generation, including iterations, memory usage, parallelism, and variant selection.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate_argon2.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help              help for argon2\n  -i, --iterations int    number of iterations (default 3)\n  -k, --key-size int      key size in bytes (default 32)\n  -m, --memory int        memory in kibibytes (default 65536)\n  -p, --parallelism int   parallelism or threads (default 4)\n      --profile string    profile to use, options are low-memory and recommended\n  -s, --salt-size int     salt size in bytes (default 16)\n  -v, --variant string    variant, options are 'argon2id', 'argon2i', and 'argon2d' (default \"argon2id\")\n```\n\n----------------------------------------\n\nTITLE: Executing Scrypt Hash Generation Command\nDESCRIPTION: Basic command syntax for generating cryptographic scrypt hash digests using the Authelia CLI.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate_scrypt.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto hash generate scrypt [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for NetBird\nDESCRIPTION: This snippet provides the environment variables needed for configuring NetBird's dashboard with Authelia as an OIDC provider. Ensure that these variables are set according to your deployment's domain specifics.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/netbird/index.md#2025-04-21_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nNETBIRD_MGMT_API_ENDPOINT: \"https://netbird.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\"\nNETBIRD_MGMT_GRPC_API: \"https://netbird.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\"\nAUTH_AUDIENCE: \"none\"\nAUTH_CLIENT_ID: \"netbird\"\nAUTH_CLIENT_SECRET: \"insecure_secret\"\nAUTH_AUTHORITY: \"https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\"\nUSE_AUTH0: \"false\"\nAUTH_SUPPORTED_SCOPES: \"openid email profile\"\nAUTH_REDIRECT_URI: \"/peers\"\nAUTH_SILENT_REDIRECT_URI: \"/add-peers\"\nNETBIRD_TOKEN_SOURCE: \"idToken\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for authelia-gen docs Command in Bash\nDESCRIPTION: This snippet shows the available options specific to the 'docs' subcommand. It includes a help flag for displaying usage information.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for docs\n```\n\n----------------------------------------\n\nTITLE: ECDSA Certificate Generation Help Command\nDESCRIPTION: Example showing how to access the help documentation for the ECDSA certificate generation command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_ecdsa_generate.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto certificate ecdsa generate --help\n```\n\n----------------------------------------\n\nTITLE: Authentication Detection Location Configuration in NGINX\nDESCRIPTION: NGINX location configuration for conditional basic authentication detection and handling.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx.md#2025-04-21_snippet_17\n\nLANGUAGE: nginx\nCODE:\n```\ninclude /config/nginx/snippets/authelia-location.conf;\n\nset $is_basic_auth \"\";\n\nif ($request_uri = \"/force-basic\") {\n    set $is_basic_auth \"true\";\n    set $upstream_authelia \"$upstream_authelia?auth=basic\";\n}\n\nlocation  /internal/authelia/authz/detect {\n    internal;\n\n    if ($is_basic_auth) {\n        return 401;\n    }\n\n    return 302 https://auth.example.com/$is_args$args;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC HMAC Secret with Template - Single-Line Value in YAML\nDESCRIPTION: Example showing how to use a template to load a single-line HMAC secret value from an external file into the Authelia OIDC configuration. The secret function reads the file contents from the specified absolute path.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/prologue/security-sensitive-values.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    hmac_secret: '{{ secret \"/config/secrets/absolute/path/to/hmac_secret\" }}'\n```\n\n----------------------------------------\n\nTITLE: Running Specific Authelia Integration Test Suite\nDESCRIPTION: This command runs the Standalone integration test suite, automatically setting up the environment, running tests, and tearing down afterwards.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/build-and-test.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts suites test Standalone\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration with Multiple Files\nDESCRIPTION: An excerpt from a Docker Compose file that configures Authelia to use multiple configuration files.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/methods/files.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  authelia:\n    container_name: 'authelia'\n    image: 'authelia/authelia:latest'\n    command:\n      - 'authelia'\n      - '--config=/config/configuration.yml'\n      - '--config=/config/configuration.acl.yml'\n\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands for Storage Operations\nDESCRIPTION: Shows all the options inherited from parent commands, including configuration file parameters and database connection settings for MySQL, PostgreSQL, and SQLite.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_webauthn_list.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Definitions in Authelia YAML Configuration\nDESCRIPTION: This snippet demonstrates how to define named network lists in Authelia's configuration file. The example creates a network definition named 'network_name' that includes both IPv4 and IPv6 addresses in CIDR notation.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/definitions/network.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  network:\n    network_name:\n      - '192.168.1.0/24'\n      - '192.168.2.20'\n      - '2001:db8::/32'\n      - '2001:db8:1234:5678::1'\n```\n\n----------------------------------------\n\nTITLE: Example usage for authelia storage bans ip\nDESCRIPTION: An example showing how to access help for the IP bans command. This displays additional information about the command options and usage.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_ip_list.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage bans ip --help\n```\n\n----------------------------------------\n\nTITLE: Example Usage of RSA Key Pair Generation Command\nDESCRIPTION: Example demonstrating how to access help documentation for the RSA key pair generation command in Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_rsa_generate.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto pair rsa generate --help\n```\n\n----------------------------------------\n\nTITLE: Authelia Config Validate Command Options\nDESCRIPTION: Available command line options for the validate command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_config_validate.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for validate\n```\n\n----------------------------------------\n\nTITLE: Authelia-Gen Code Server Command Options in Bash\nDESCRIPTION: Displays the available options specific to the 'server' subcommand. Currently, it only includes a help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_code_server.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for server\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for authelia-gen GitHub Issue Templates Command in Bash\nDESCRIPTION: This option displays the help information for the issue-templates command, showing available flags and usage instructions.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_github_issue-templates.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for issue-templates\n```\n\n----------------------------------------\n\nTITLE: Tearing down test suite environment\nDESCRIPTION: This snippet shows the basic usage of the `authelia-scripts suites teardown` command to tear down a test suite environment. The suite to teardown is specified as a command-line argument.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_suites_teardown.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"authelia-scripts suites teardown [suite] [flags]\"\n```\n\n----------------------------------------\n\nTITLE: Paperless JSON Configuration for OIDC\nDESCRIPTION: The JSON configuration details the Paperless settings required to connect with Authelia. It includes parameters for scopes, PKCE, and app-specific configuration. This is crucial for establishing OIDC-based authentication with Paperless.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/paperless/index.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"openid_connect\": {\n    \"SCOPE\": [\"openid\", \"profile\", \"email\"],\n    \"OAUTH_PKCE_ENABLED\": true,\n    \"APPS\": [\n      {\n        \"provider_id\": \"authelia\",\n        \"name\": \"Authelia\",\n        \"client_id\": \"paperless\",\n        \"secret\": \"insecure_secret\",\n        \"settings\": {\n          \"server_url\": \"https://{{< sitevar name=\\\"subdomain-authelia\\\" nojs=\\\"auth\\\" >}}.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}\",\n          \"token_auth_method\": \"client_secret_basic\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for authelia crypto certificate ecdsa request Command\nDESCRIPTION: Options inherited from parent commands that can also be used with the request command, including configuration file settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_ecdsa_request.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: bcrypt Command Options\nDESCRIPTION: Available options specific to the bcrypt hash generation command. These flags allow customizing the hash generation process, including setting the cost parameter and selecting the bcrypt variant.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate_bcrypt.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -i, --cost int         hashing cost (default 12)\n  -h, --help             help for bcrypt\n  -v, --variant string   variant, options are 'standard' and 'sha256' (default \"standard\")\n```\n\n----------------------------------------\n\nTITLE: Legacy Session Configuration in Authelia using YAML\nDESCRIPTION: This snippet provides an example of legacy session configuration for Authelia. It specifies the default redirection URL and domain directly under the session key which might be used in older deployment setups.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx.md#2025-04-21_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\ndefault_redirection_url: 'https://www.{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\nsession:\n  domain: '{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\n```\n\n----------------------------------------\n\nTITLE: Basic RSA Certificate Request Command\nDESCRIPTION: The basic command syntax for generating an RSA private key and certificate signing request in Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_rsa_request.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto certificate rsa request [flags]\n```\n\n----------------------------------------\n\nTITLE: Prohibited Authenticator Statuses in Authelia (Markdown)\nDESCRIPTION: This snippet outlines the configuration for listing authenticator statuses that are prohibited from being registered. The default value is recommended to remain unchanged to ensure security.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/second-factor/webauthn.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n#### validate_status_prohibited\n\n{{< confkey type=\"list(string)\" required=\"no\" >}}\n```\n\n----------------------------------------\n\nTITLE: Building Authelia (Go Binary and React Frontend)\nDESCRIPTION: Builds the Authelia application, compiling both the Go backend binary and the React frontend components.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/reference-authelia-scripts.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts build\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for Authelia PBKDF2 Hash Generation\nDESCRIPTION: The basic syntax for the 'authelia crypto hash generate pbkdf2' command, which is used to generate PBKDF2 hash digests.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate_pbkdf2.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nauthelia crypto hash generate pbkdf2 [flags]\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands in Authelia CLI\nDESCRIPTION: Options inherited from parent commands that can be used with the 'storage encryption check' command to specify configuration and database connection details.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_encryption_check.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Using the Authelia Storage Schema-Info Command\nDESCRIPTION: Shows the basic command syntax for the authelia storage schema-info command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_schema-info.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage schema-info [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Authelia Commands\nDESCRIPTION: Options inherited from parent commands that can be used with the 'storage bans user add' command, including configuration options and database connection settings for MySQL, PostgreSQL, and SQLite.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_user_add.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Authelia Config Validate Examples\nDESCRIPTION: Example usage of the validate command showing default configuration validation and validation with a specific config file.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_config_validate.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia config validate\nauthelia config validate --config config.yml\n```\n\n----------------------------------------\n\nTITLE: Executing authelia-gen GitHub Issue Templates Command in Bash\nDESCRIPTION: This command generates GitHub issue templates for the Authelia project. It can be run with various flags to customize the output.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_github_issue-templates.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-gen github issue-templates [flags]\n```\n\n----------------------------------------\n\nTITLE: Authelia Locales Command Help Options\nDESCRIPTION: Available help flags specific to the locales command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_locales.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for locales\n```\n\n----------------------------------------\n\nTITLE: Configuring Dovecot OAuth2 Backend\nDESCRIPTION: Defines the Dovecot OAuth2 backend configuration with introspection URL and username attribute mapping\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/roundcube/index.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nintrospection_mode = post\nintrospection_url = https://roundcube:insecure_secret@{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc/introspection\nusername_attribute = username\n```\n\n----------------------------------------\n\nTITLE: Printing Container IP in Docker\nDESCRIPTION: This snippet retrieves the IP address of a Docker container named 'traefik' within the 'authelia' network. It requires Docker to be installed and running. The command outputs the container's IP address for network configuration purposes.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/trusted-header-sso/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker inspect -f '{{.NetworkSettings.Networks.authelia.IPAddress}}' traefik\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options - Authelia Gen Docs Data Keys\nDESCRIPTION: Available command-specific options for the keys command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_data_keys.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  -h, --help   help for keys\n```\n\n----------------------------------------\n\nTITLE: Access Control Rule: Compact YAML List of List Objects\nDESCRIPTION: This YAML snippet demonstrates a compact configuration for a list of list objects in an access control rule. This mirrors the previous rules with the key named `value`.  This format should only be used for the configuration item type `list(list(object))`, see [List of Lists](#list-of-lists) if you're not looking for a `list(list(object))`\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/rule-operators.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nrule:\n  - ['a', 'b']\n  - ['c']\n```\n```\n\n----------------------------------------\n\nTITLE: Serving with authelia-scripts command\nDESCRIPTION: This command is used to serve a compiled version of Authelia using a specified configuration file and optional flags. The command accepts a configuration file in YAML format and flags such as the log level. It requires the Authelia project environment set up with the necessary dependencies.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_serve.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"authelia-scripts serve [config] [flags]\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n\"authelia-scripts serve test.yml\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n\"  -h, --help   help for serve\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n\"      --buildkite          Set CI flag for Buildkite\\n      --log-level string   Set the log level for the command (default \\\"info\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Running Authelia Docker Container with PUID and PGID\nDESCRIPTION: This shell command demonstrates how to run the Authelia Docker container with specific PUID and PGID environment variables.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/overview/security/measures.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -e PUID=8000 -e PGID=9000 -v /authelia:/config authelia/authelia:latest\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Identity Providers Documentation\nDESCRIPTION: YAML frontmatter that defines metadata for the Identity Providers documentation page. It includes title, description, date, draft status, images array, and weight for ordering in the documentation structure.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Identity Providers\"\ndescription: \"Identity Providers Configuration\"\nsummary: \"\"\ndate: 2022-06-15T17:51:47+10:00\ndraft: false\nimages: []\nweight: 110000\n---\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Authelia TOTP Import Command\nDESCRIPTION: Examples demonstrating various ways to use the authelia TOTP import command, including basic usage, usage with a config file, and usage with specific database connection parameters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_totp_import.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user totp import authelia.export.totp.yml\nauthelia storage user totp import --config config.yml authelia.export.totp.yml\nauthelia storage user totp import --encryption-key b3453fde-ecc2-4a1f-9422-2707ddbed495 --postgres.address tcp://postgres:5432 --postgres.password autheliapw authelia.export.totp.yml\n```\n\n----------------------------------------\n\nTITLE: Basic IP Ban Command Syntax\nDESCRIPTION: The basic command syntax for adding IP bans to the Authelia system. Requires specifying the IP address and supports optional flags for customization.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_ip_add.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage bans ip add <ip> [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring PKCE Challenge Method\nDESCRIPTION: Specifies the PKCE challenge method for a client, with recommended values being an empty string, 'plain', or 'S256'. Strongly recommends 'S256' if supported.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/openid-connect/clients.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npkce_challenge_method: S256\n```\n\n----------------------------------------\n\nTITLE: Log Severity Line Examples\nDESCRIPTION: Examples of log severity lines indicating the configured log level in Authelia\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: log\nCODE:\n```\nLog severity set to debug\n```\n\nLANGUAGE: log\nCODE:\n```\nLog severity set to trace\n```\n\n----------------------------------------\n\nTITLE: Authelia Crypto Hash Validate Command Options in Bash\nDESCRIPTION: This snippet lists the specific options available for the 'authelia crypto hash validate' command. It includes options for getting help and manually supplying a password.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_validate.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help              help for validate\n      --password string   manually supply the password rather than using the terminal prompt\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Command-line options inherited from parent commands including database configuration options for MySQL, PostgreSQL, and SQLite.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Keypair with Authelia CLI (Docker)\nDESCRIPTION: Uses the Authelia Docker container to generate an RSA keypair and save it to the current directory.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/generating-secure-values.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -u \"$(id -u):$(id -g)\" -v \"$(pwd)\":/keys authelia/authelia:latest authelia crypto pair rsa generate --directory /keys\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Import Command Options\nDESCRIPTION: Available command flags and options for the import command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_webauthn_import.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for import\n```\n\n----------------------------------------\n\nTITLE: Configuring Users for Audiobookshelf in YAML\nDESCRIPTION: This YAML configuration snippet defines user accounts for audiobookshelf along with their display names and associated groups for access control. Proper configuration of users is essential to manage permissions and roles within the audiobookshelf application, ensure that users are assigned to correct groups according to your access policies.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/audiobookshelf/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"---\\nusers:\\n  administrator:\\n    displayname: 'administrator'\\n    groups:\\n      # for audiobookshelf group claim\\n      - admin\\n  non_administrator:\\n    displayname: 'non_administrator'\\n    groups:\\n      # for audiobookshelf group claim\\n      - user\"\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Export Inherited Options\nDESCRIPTION: Shows all inherited command options including configuration file settings and database connection parameters for MySQL, PostgreSQL, and SQLite.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_webauthn_export.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: TOTP Command Options\nDESCRIPTION: Available command-specific options for the TOTP export schema generation.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_json-schema_exports_totp.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for totp\n```\n\n----------------------------------------\n\nTITLE: Profile Frontmatter in YAML for James Elliott\nDESCRIPTION: YAML frontmatter that defines metadata for James Elliott's profile page. It includes title, description, summary, dates, and SEO information.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributors/james-elliott/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"James Elliott\"\ndescription: \"Maintainer of Authelia.\"\nsummary: \"Maintainer of Authelia.\"\ndate: 2024-03-14T06:00:14+11:00\nlastmod: 2023-09-12T20:21:47+02:00\ndraft: false\navatar: \"\"\nseo:\n  title: \"\" # custom title (optional)\n  description: \"\" # custom description (recommended)\n  canonical: \"\" # custom canonical URL (optional)\n  noindex: false # false (default) or true\n---\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options for Config Commands\nDESCRIPTION: Shows the options inherited from parent commands including configuration file specification and experimental filters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_config_template.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Authelia OpenID Connect Client Configuration for YouTrack\nDESCRIPTION: YAML configuration defining the OpenID Connect client settings for YouTrack in Authelia, including client ID, secret, redirect URIs, and authorization policies\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/youtrack/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    clients:\n      - client_id: 'youtrack'\n        client_name: 'YouTrack'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://youtrack.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/hub/api/rest/oauth2/auth'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Authelia Scripts Docker Command in Bash\nDESCRIPTION: An example of how to use the authelia-scripts docker command without any additional flags or arguments.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_docker.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts docker\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Export Command Examples\nDESCRIPTION: Demonstrates various usage examples of the export command, including basic usage, custom file output, config file specification, and database connection configuration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_webauthn_export.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user webauthn export\nauthelia storage user webauthn export --file authelia.export.webauthn.yml\nauthelia storage user webauthn export --config config.yml\nauthelia storage user webauthn export--encryption-key b3453fde-ecc2-4a1f-9422-2707ddbed495 --postgres.address tcp://postgres:5432 --postgres.password autheliapw\n```\n\n----------------------------------------\n\nTITLE: Defining Trusted Proxies in HAProxy - Text File\nDESCRIPTION: This text file snippet provides an example of IP ranges used to define trusted proxies in HAProxy. Key parameters include IP ranges and subnets trusted by HAProxy, which need editing to match the given network architecture. It’s crucial to correctly define these to avoid security issues. Ensure HAProxy configuration is set up to read from these files.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/haproxy.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n10.0.0.0/8\n172.16.0.0/12\n192.168.0.0/16\nfc00::/7\n```\n\n----------------------------------------\n\nTITLE: Enabling Authenticator Entry Validation in Authelia (Markdown)\nDESCRIPTION: This snippet describes the configuration for validating the existence of an entry for the authenticator in the MDS3 blob. It is suggested to set this to `true`, as failure to validate an authenticator may exclude non-compliant devices.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/second-factor/webauthn.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n#### validate_entry\n\n{{< confkey type=\"boolean\" default=\"true\" required=\"no\" >}}\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for Authelia IP Ban Revocation\nDESCRIPTION: Lists the specific options available for the 'authelia storage bans ip revoke' command, including the option to revoke by ID instead of IP address.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_ip_revoke.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help     help for revoke\n  -i, --id int   revokes the ban with the given id instead of the ip value\n```\n\n----------------------------------------\n\nTITLE: Required Authenticator Statuses in Authelia (Markdown)\nDESCRIPTION: This configuration option allows specifying a mandatory list of statuses for an authenticator to pass validation. It relies on details outlined in a reference guide for valid values.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/second-factor/webauthn.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n#### validate_status_permitted\n\n{{< confkey type=\"list(string)\" required=\"no\" >}}\n```\n\n----------------------------------------\n\nTITLE: GitHub Generator Command Options\nDESCRIPTION: Available command-specific options for the github generator\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_github.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for github\n```\n\n----------------------------------------\n\nTITLE: Options inherited from parent commands for authelia storage bans\nDESCRIPTION: Configuration options that are inherited from parent commands, including database connection settings for MySQL, PostgreSQL, and SQLite along with general configuration options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_user.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of authelia storage migrate list-up command\nDESCRIPTION: Shows the basic command syntax for listing available up migrations in Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_migrate_list-up.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage migrate list-up [flags]\n```\n\n----------------------------------------\n\nTITLE: JSON Log Output Example in Authelia\nDESCRIPTION: This snippet provides an example of what JSON-formatted logs look like in Authelia. It includes timestamp, log level, and message in a structured JSON format.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/miscellaneous/logging.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"level\":\"info\",\"msg\":\"Logging severity set to info\",\"time\":\"2020-01-01T00:00:00+11:00\"}\n{\"level\":\"info\",\"msg\":\"Authelia is listening for non-TLS connections on 0.0.0.0:{{< sitevar name=\\\"port\\\" nojs=\\\"9091\\\" >}}\",\"time\":\"2020-01-01T00:00:00+11:00\"}\n```\n\n----------------------------------------\n\nTITLE: Privacy Policy Configuration with Custom URL in YAML\nDESCRIPTION: Example YAML configuration showing how to enable the privacy policy with a custom URL. This demonstrates setting up a functional privacy policy link that users can access.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/miscellaneous/privacy-policy.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprivacy_policy:\n  enabled: true\n  policy_url: 'https://www.example.com/privacy-policy'\n```\n\n----------------------------------------\n\nTITLE: Executing Authelia JSON Schema Generator Command\nDESCRIPTION: Base command for generating JSON schema documentation in Authelia. Used without additional flags to generate basic schema documentation.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_json-schema.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-gen docs json-schema [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring ReferenceGrant for Gateway-Level Authentication with Authelia\nDESCRIPTION: A Kubernetes ReferenceGrant configuration for gateway-level authentication that allows a SecurityPolicy targeting a Gateway to reference the Authelia service in another namespace. Required when the gateway namespace is different from the Authelia service namespace.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/envoy.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: ReferenceGrant\nmetadata:\n  name: 'example-ref-authelia-svc'\n  namespace: 'authelia'\nspec:\n  from:\n    - group: 'gateway.envoyproxy.io'\n      kind: 'SecurityPolicy'\n      namespace: 'example'\n      name: 'authelia-example'\n  to:\n    - group: ''\n      kind: 'Service'\n      name: 'authelia'\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Identity Provider for PeerTube - YAML\nDESCRIPTION: This YAML configuration snippet provides an example of the required OpenID Connect 1.0 settings for establishing an identity provider relationship between PeerTube and Authelia. It includes necessary details such as client ID, client secret, supported scopes, and authorization policies, ensuring secure communication and authentication.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/peertube/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'peertube'\n        client_name: 'PeerTube'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        require_pkce: true\n        pkce_challenge_method: 'S256'\n        redirect_uris:\n          - 'https://peertube.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/plugins/auth-openid-connect/router/code-cb'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n          - 'groups'\n        userinfo_signed_response_alg: 'none'\n        token_endpoint_auth_method: 'client_secret_basic'\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Shows all inherited options from parent commands, including directory configurations, file paths, and version control settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_manage_adr_add.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Incorrect Regular Expression Configuration in YAML\nDESCRIPTION: Example of incorrect regular expression configuration in YAML using double quotes which can cause issues with backslash interpretation.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/prologue/common.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndomain_regex: \"^(admin|secure)\\.example\\.com$\"\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Delete Command Inherited Options\nDESCRIPTION: Shows the inherited configuration options including database connection settings for MySQL, PostgreSQL, and SQLite, as well as general configuration options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_webauthn_delete.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Running a Test Suite with authelia-scripts\nDESCRIPTION: This snippet shows the basic syntax for running a test suite using the authelia-scripts suites test command. The [suite] argument specifies the name of the test suite to execute.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_suites_test.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"authelia-scripts suites test [suite] [flags]\"\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Directory Files YAML Examples\nDESCRIPTION: This set of examples demonstrates using the `walk` function within YAML templates to print file names and contents in a specific directory. The first example iterates over all files in '/opt/data', printing their absolute paths. The second example prints file contents if they are not directories. The last two examples apply the same logic but filter for files with a '.yml' extension. These snippets are meant for templating systems where YAML is used to control output logic.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/templating.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n{{ range (walk \\\"/opt/data\\\" \\\"\\\" false) }}\n{{ .AbsolutePath }}\n{{ end }}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n{{ range (walk \\\"/opt/data\\\" \\\"\\\" false) }}\n  {{ if not .IsDir }}\n{{ fileContent .AbsolutePath }}\n  {{- end }}\n{{ end }}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n{{ range (walk \\\"/opt/data\\\" \\\"^.*\\\\.yml\\\" false) }}\n{{ .AbsolutePath }}\n{{ end }}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n{{ range (walk \\\"/opt/data\\\" \\\"^.*\\\\.yml\\\" false) }}\n  {{ if not .IsDir }}\n{{ fileContent .AbsolutePath }}\n  {{- end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Contributor HTML Snippet\nDESCRIPTION: This HTML snippet displays a contributor's avatar, name, and links to their contributions on GitHub. It uses a table structure to organize the contributor information.\nSOURCE: https://github.com/authelia/authelia/blob/master/README.md#2025-04-21_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n\"<td align=\\\"center\\\" valign=\\\"top\\\" width=\\\"14.28%\\\"><a href=\\\"http://auston.dev\\\"><img src=\\\"https://avatars.githubusercontent.com/u/5049050?v=4?s=100\\\" width=\\\"100px;\\\" alt=\\\"Auston Pramodh Barboza\\\"/><br /><sub><b>Auston Pramodh Barboza</b></sub></a><br /><a href=\\\"https://github.com/authelia/authelia/commits?author=austonpramodh\\\" title=\\\"Documentation\\\">📖</a></td>\"\n```\n\n----------------------------------------\n\nTITLE: Available CLI Options for Authelia-Gen\nDESCRIPTION: This code provides a list of command-line options available for the authelia-gen tool, which are used to set various configurations such as directories, paths, exclusions, and version counts. These options adjust the behavior of the tool when creating issue templates. Knowledge of command-line operations and configuration management within a GitHub repository is required.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_github_issue-templates_feature-request.md#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n-h, --help   help for feature-request\n```\n\nLANGUAGE: Bash\nCODE:\n```\n-C, --cwd string                                                 Sets the CWD for git commands\n--dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n--dir.docs string                                            The directory with the docs (default \"docs\")\n--dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n--dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n--dir.docs.content string                                    The directory with the docs content (default \"content\")\n--dir.docs.data string                                       The directory with the docs data (default \"data\")\n--dir.docs.static string                                     The directory with the docs static files (default \"static\")\n--dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n--dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n-d, --dir.root string                                            The repository root (default \"./\")\n--dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n--dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n-X, --exclude strings                                            Sets the names of excluded generators\n--file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n--file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n--file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n--file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n--file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n--file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n--file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n--file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n--file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n--file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n--file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n--file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n--file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n--file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n--file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n--file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n--file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n--latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n--next                                                       Enables next functionality with several generators like the JSON Schema generator\n--package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n--package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n--version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n--versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Authelia Bundle\nDESCRIPTION: These Bash commands navigate to the local bundle directory and run the setup script. This process modifies the /etc/hosts file and sets up a local Authelia environment.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/deployment/docker.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/compose/local\n./setup.sh\n```\n\n----------------------------------------\n\nTITLE: After: Multi-Domain Session Configuration in Authelia\nDESCRIPTION: Updated session configuration supporting multiple domains with a cookies array structure, where each entry can specify a domain, Authelia URL, and default redirection URL.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/blog/release-notes-4.38/index.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsession:\n  secret: 'insecure_session_secret'\n  name: 'authelia_session'\n  same_site: 'lax'\n  inactivity: '5m'\n  expiration: '1h'\n  remember_me: '1M'\n  cookies:\n    - domain: 'example.com'\n      authelia_url: 'https://auth.example.com'\n      default_redirection_url: 'https://www.example.com'\n```\n\n----------------------------------------\n\nTITLE: Example usage of authelia crypto pair ecdsa command\nDESCRIPTION: An example showing how to get help with the authelia crypto pair ecdsa command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_ecdsa.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto pair ecdsa --help\n```\n\n----------------------------------------\n\nTITLE: Available Options for the Encryption Command\nDESCRIPTION: Lists the specific options available for the 'authelia storage encryption' command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_encryption.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for encryption\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia in Docker Compose with PUID and PGID\nDESCRIPTION: This YAML snippet shows how to configure the Authelia service in a Docker Compose file, setting PUID and PGID environment variables.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/overview/security/measures.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  authelia:\n    image: authelia/authelia\n    container_name: 'authelia'\n    environment:\n      PUID: 8000\n      PGID: 9000\n    volumes:\n      - ./authelia:/config\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for authelia storage encryption change-key\nDESCRIPTION: The options specific to the change-key command, including help functionality and setting the new encryption key.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_encryption_change-key.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help                        help for change-key\n      --new-encryption-key string   the new key to encrypt the data with\n```\n\n----------------------------------------\n\nTITLE: Building Authelia Binary without Debug Symbols\nDESCRIPTION: This command builds the Authelia binary without debug symbols, using specific compiler and linker flags for security, optimization, and reduced binary size.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/build-and-test.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nCGO_ENABLED=1 CGO_CPPFLAGS=\"-D_FORTIFY_SOURCE=2 -fstack-protector-strong\" CGO_LDFLAGS=\"-Wl,-z,relro,-z,now\" \\\ngo build -ldflags \"-linkmode=external -s -w\" -trimpath -buildmode=pie -o authelia ./cmd/authelia\n```\n\n----------------------------------------\n\nTITLE: opkssh Add User Command\nDESCRIPTION: This bash command demonstrates how to add a user mapping for SSH access using opkssh. It maps a specific email address to a local user account (e.g., root) and associates it with the Authelia OpenID Connect provider. This allows users authenticated via Authelia to log in to the specified account.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/opkssh/index.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nopkssh add root john@example.com https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Page Frontmatter in YAML for Authelia\nDESCRIPTION: This YAML frontmatter configures the blog page of the Authelia project, including metadata like title, description, dates, and SEO settings. It defines the page as non-draft, with a specific weight in the navigation, and various display settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/blog/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Blog\"\ndescription: \"The Authelia Blog.\"\nsummary: \"\"\ndate: 2024-03-14T06:00:14+11:00\nlastmod: 2023-09-07T16:21:44+02:00\ndraft: false\nweight: 50\ncategories: []\ntags: []\ncontributors: []\npinned: false\nhomepage: false\nseo:\n  title: \"\" # custom title (optional)\n  description: \"\" # custom description (recommended)\n  canonical: \"\" # custom canonical URL (optional)\n  noindex: false # false (default) or true\n---\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Authelia Debug Command in Bash\nDESCRIPTION: These options are inherited from parent commands and can be used with the 'authelia debug' command, including configuration file loading and experimental filters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_debug.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Options in YAML\nDESCRIPTION: This YAML configuration specifies parameters for session management including the insecure session secret and cookie settings necessary for the OAuth 2.0 Bearer Token flow to function correctly.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/oauth-2.0-bearer-token-usage.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsession:\n  secret: 'insecure_session_secret'\n  cookies:\n    - domain: '{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      authelia_url: 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n      default_redirection_url: 'https://www.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}'\n```\n\n----------------------------------------\n\nTITLE: Basic Authelia Config Validate Command\nDESCRIPTION: Main command syntax for validating Authelia configuration files against internal validation mechanisms.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_config_validate.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia config validate [flags]\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for TOTP CSV Export in Authelia\nDESCRIPTION: The specific flags available for the 'csv' subcommand, including the file option for specifying the output CSV file name with its default value.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_totp_export_csv.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -f, --file string   The file name for the CSV export (default \"authelia.export.totp.csv\")\n  -h, --help          help for csv\n```\n\n----------------------------------------\n\nTITLE: Extra Attributes Configuration Example in YAML\nDESCRIPTION: Example configuration for defining extra attributes in the file-based authentication backend, showing how to configure a single-valued integer attribute.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/first-factor/file.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nauthentication_backend:\n  file:\n    extra_attributes:\n      example_file_attribute:\n        multi_valued: false\n        value_type: 'integer'\n```\n\n----------------------------------------\n\nTITLE: Inherited CLI Options Configuration\nDESCRIPTION: Comprehensive list of configuration options inherited from parent commands, including directory paths, file locations, package names, version settings and generator exclusions.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_json-schema.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for TOTP CSV Export in Authelia\nDESCRIPTION: Options inherited from parent commands which can be used with the export CSV command, including configuration and database connection parameters for MySQL, PostgreSQL, and SQLite.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_totp_export_csv.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Listing Available Authelia Integration Suites\nDESCRIPTION: This command displays a list of available integration test suites for Authelia, which are used to test the application in different environments.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/build-and-test.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts suites list\n```\n\n----------------------------------------\n\nTITLE: Examples of authelia storage migrate list-up command\nDESCRIPTION: Demonstrates various usage examples of the list-up command, including the basic command and options for custom configuration files and database connection parameters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_migrate_list-up.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage migrate list-up\nauthelia storage migrate list-up --config config.yml\nauthelia storage migrate list-up --encryption-key b3453fde-ecc2-4a1f-9422-2707ddbed495 --postgres.address tcp://postgres:5432 --postgres.password autheliapw\n```\n\n----------------------------------------\n\nTITLE: Executing Authelia Crypto Hash Validate Command in Bash\nDESCRIPTION: This snippet shows the basic syntax for running the 'authelia crypto hash validate' command. It allows performing cryptographic hash validations by checking hash digests against a password.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_validate.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto hash validate [flags] -- <digest>\n```\n\n----------------------------------------\n\nTITLE: Using the authelia storage cache mds3 delete Command\nDESCRIPTION: The basic syntax for the authelia storage cache mds3 delete command. This command is used to delete WebAuthn MDS3 cache storage.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_cache_mds3_delete.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage cache mds3 delete [flags]\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Shows all options inherited from parent commands that can be used with the storage encryption command, including configuration and database connection options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_encryption.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Docker Build Command\nDESCRIPTION: Basic syntax for building a Docker image using authelia-scripts\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_docker_build.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts docker build [flags]\n```\n\n----------------------------------------\n\nTITLE: Restoring Default Claims Policy in YAML for Services\nDESCRIPTION: This snippet demonstrates how to define a default claims policy that includes a predefined set of claims to be included in the ID Token for a particular client. This is intended for scenarios where the removal of claims from the ID Token is not feasible for certain relying parties.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/openid-connect-1.0-claims.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    claims_policies:\n      ## Creates the 'default' claims policy.\n      default:\n        id_token: ['rat', 'groups', 'email', 'email_verified', 'alt_emails', 'preferred_username', 'name']\n    clients:\n      - client_id: 'client_example_id'\n        ## Assigns the 'default' claims policy to this client.\n        claims_policy: 'default'\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for Authelia Storage Migration Down\nDESCRIPTION: The basic syntax for performing a migration down in Authelia, which reverts the database schema to an earlier version.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_migrate_down.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage migrate down [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the authelia storage user totp delete command\nDESCRIPTION: The basic syntax for the command that deletes a TOTP configuration for a specified user from the database. This command requires at least the username as an argument.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_totp_delete.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user totp delete <username> [flags]\n```\n\n----------------------------------------\n\nTITLE: Listing Available Suites - Bash\nDESCRIPTION: This snippet provides the command to list available suites for the authelia-scripts command. It allows users to see the available suites that can be tested using subsequent commands. The command has options for help and inherited options for CI integration and log level settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_suites_list.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts suites list [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts suites list\n```\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for list\n```\n\nLANGUAGE: bash\nCODE:\n```\n      --buildkite          Set CI flag for Buildkite\n```\n\nLANGUAGE: bash\nCODE:\n```\n      --log-level string   Set the log level for the command (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Enabling InnoDB Large Prefixes in MySQL Configuration\nDESCRIPTION: This configuration snippet shows how to enable large prefixes for the InnoDB storage engine in a MySQL configuration file. This setting is important for supporting larger index sizes, especially in older MySQL versions.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/integrations/database-integrations.md#2025-04-21_snippet_0\n\nLANGUAGE: cnf\nCODE:\n```\n\"[mysqld]\\ninnodb_large_prefix = ON\"\n```\n\n----------------------------------------\n\nTITLE: Inherited Database Configuration Options\nDESCRIPTION: Additional configuration options inherited from parent commands, including database connection parameters and encryption settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_cache_mds3_dump.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Configuring IPv6 NTP Server Address in Authelia YAML\nDESCRIPTION: This YAML configuration example illustrates how to set up an IPv6 address for the NTP server in Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/miscellaneous/ntp.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nntp:\n  address: 'udp6://[fd00:1111:2222:3333::1]:123'\n```\n\n----------------------------------------\n\nTITLE: Running Tests for a Currently Running Suite\nDESCRIPTION: Command to execute tests for the integration suite that is currently running. This allows testing Authelia's functionality in the active environment.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/integration-suites.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts suites test\n```\n\n----------------------------------------\n\nTITLE: Command-specific options for list-down in Authelia\nDESCRIPTION: Lists the command-specific options available for the list-down command, which only includes the help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_migrate_list-down.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for list-down\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Authelia Storage Command\nDESCRIPTION: Example of how to access help for the storage command. This shows the basic invocation pattern for the authelia storage command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage --help\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration Example\nDESCRIPTION: Equivalent environment variable configuration demonstrating how YAML paths are converted to environment variable names using underscores.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/methods/environment.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTHELIA_LOG_LEVEL=info\nAUTHELIA_SERVER_BUFFERS_READ=4096\n```\n\n----------------------------------------\n\nTITLE: TOTP Export URI Examples\nDESCRIPTION: Examples demonstrating different ways to use the command, including with default configuration, with a specific config file, and with direct database connection parameters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_totp_export_uri.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user totp export uri\nauthelia storage user totp export uri --config config.yml\nauthelia storage user totp export uri --encryption-key b3453fde-ecc2-4a1f-9422-2707ddbed495 --postgres.address tcp://postgres:5432 --postgres.password autheliapw\n```\n\n----------------------------------------\n\nTITLE: Running Bare-Metal with Multiple Configuration Files\nDESCRIPTION: Examples showing how to run Authelia on bare-metal with multiple configuration files that will be merged in the specified order.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/methods/files.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nauthelia --config configuration.yml --config config-acl.yml --config config-other.yml\n```\n\nLANGUAGE: bash\nCODE:\n```\nauthelia --config configuration.yml,config-acl.yml,config-other.yml\n```\n\n----------------------------------------\n\nTITLE: After with Templates: Session Configuration Using Environment Variables\nDESCRIPTION: Enhanced session configuration using template filters to dynamically set domain values from environment variables, enabling more flexible deployment configurations.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/blog/release-notes-4.38/index.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsession:\n  secret: 'insecure_session_secret'\n  name: 'authelia_session'\n  same_site: 'lax'\n  inactivity: '5m'\n  expiration: '1h'\n  remember_me: '1M'\n  cookies:\n    - domain: '{{ env \"DOMAIN_A\" }}'\n      authelia_url: 'https://auth.{{ env \"DOMAIN_A\" }}'\n      default_redirection_url: 'https://www.{{ env \"DOMAIN_A\" }}'\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands for Authelia Storage Migrate\nDESCRIPTION: Shows the configuration options inherited from parent commands, including configuration file options, database connection parameters for MySQL, PostgreSQL, and SQLite.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_migrate.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands in Authelia\nDESCRIPTION: Command-line options that are inherited from parent commands, including configuration file specification and experimental filters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_ed25519_generate.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Legacy Session Configuration in YAML\nDESCRIPTION: This snippet provides an example of the legacy session configuration format, specifying the domain and default redirection URL as top-level keys. It is less organized compared to the modern configuration and requires manual updates if domain settings change.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/envoy.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_redirection_url: 'https://www.{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\nsession:\n  domain: '{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\n```\n\n----------------------------------------\n\nTITLE: Basic WebAuthn Export Command Syntax\nDESCRIPTION: Shows the basic command syntax for exporting WebAuthn credentials.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_webauthn_export.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user webauthn export [flags]\n```\n\n----------------------------------------\n\nTITLE: Running the Basic Authelia Storage User Identifiers Generate Command\nDESCRIPTION: The basic syntax for the 'authelia storage user identifiers generate' command, which is used to generate opaque identifiers in bulk for users.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_identifiers_generate.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user identifiers generate [flags]\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Authelia Config Template\nDESCRIPTION: Example showing how to use the config template command with the template filter and a specific configuration file.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_config_template.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia config template --config.experimental.filters=template --config=config.yml\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Authelia-Gen Docs Data Misc Command\nDESCRIPTION: This snippet lists the options inherited from parent commands, including various directory and file path configurations, version controls, and other settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_data_misc.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for Authelia Storage Encryption Check\nDESCRIPTION: The options specific to the 'check' subcommand that can be used to customize the encryption key validation process.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_encryption_check.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help      help for check\n      --verbose   enables verbose checking of every row of encrypted data\n```\n\n----------------------------------------\n\nTITLE: Running Authelia Documentation Site Locally with Node.js and pnpm\nDESCRIPTION: Commands to clone the Authelia repository, install dependencies, and start a local development server to preview documentation changes. Requires git, Node.js, and pnpm as prerequisites.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/prologue/documentation-contributions.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/authelia/authelia.git\ncd authelia/docs\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for authelia debug tls\nDESCRIPTION: Available options specific to the debug tls command, including help and hostname override functionality.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_debug_tls.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help              help for tls\n      --hostname string   overrides the hostname to use for the TLS connection which is usually extracted from the address\n```\n\n----------------------------------------\n\nTITLE: Authelia Storage Bans IP Command Options\nDESCRIPTION: This snippet shows the available options specific to the 'authelia storage bans ip' command. It includes the help option for displaying command information.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_ip.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for ip\n```\n\n----------------------------------------\n\nTITLE: Viewing Authelia Storage User Help\nDESCRIPTION: Command example showing how to display help information for the authelia storage user command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user --help\n```\n\n----------------------------------------\n\nTITLE: Running Bare-Metal with Configuration Filters by Argument\nDESCRIPTION: Example showing how to run Authelia on bare-metal with a template filter applied to the configuration file using CLI arguments.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/methods/files.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nauthelia --config /config/configuration.yml --config.experimental.filters template\n```\n\n----------------------------------------\n\nTITLE: Generating Random Client ID in Docker\nDESCRIPTION: Command to generate a 72-character client identifier using RFC3986 unreserved characters in a Docker environment. Ensures unique and URL-safe client identifiers.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/frequently-asked-questions.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm authelia/authelia:latest authelia crypto rand --length 72 --charset rfc3986\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Options inherited from parent commands that can be used with the TOTP export URI command, including configuration file paths, database connection settings, and encryption key options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_totp_export_uri.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Markdown Links for Envoy Documentation\nDESCRIPTION: A set of markdown reference links and bullet points providing documentation resources for Envoy external authorization and forwarded headers.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/envoy.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n## See Also\n\n* [Envoy External Authorization Documentation](https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/http/ext_authz/v3/ext_authz.proto.html#extensions-filters-http-ext-authz-v3-extauthz)\n* [Forwarded Headers]\n\n[Envoy]: https://www.envoyproxy.io/\n[Forwarded Headers]: forwarded-headers\n```\n\n----------------------------------------\n\nTITLE: Example of Using the MDS3 Update Command\nDESCRIPTION: A basic example showing how to run the update command for WebAuthn MDS3 cache storage without any flags.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_cache_mds3_update.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage cache mds3 update\n```\n\n----------------------------------------\n\nTITLE: Migration Command Options\nDESCRIPTION: Available command-specific flags for the migration command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_migrate_up.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help         help for up\n  -t, --target int   sets the version to migrate to, by default this is the latest version\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Authelia Storage User Identifiers Generate Command\nDESCRIPTION: Various examples showing how to use the command with different combinations of parameters like users, services, sectors, and configuration options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_identifiers_generate.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user identifiers generate --users john,mary\nauthelia storage user identifiers generate --users john,mary --services openid\nauthelia storage user identifiers generate --users john,mary --services openid --sectors=\",example.com,test.com\"\nauthelia storage user identifiers generate --users john,mary --services openid --sectors=\",example.com,test.com\" --config config.yml\nauthelia storage user identifiers generate --users john,mary --services openid --sectors=\",example.com,test.com\" --encryption-key b3453fde-ecc2-4a1f-9422-2707ddbed495 --postgres.address tcp://postgres:5432 --postgres.password autheliapw\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Options that are inherited from parent commands when using the ECDSA certificate operations.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_ecdsa.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Access Control Rule: Fully Expressed YAML List of List Objects\nDESCRIPTION: This YAML snippet demonstrates a fully expressed configuration for a list of list objects in an access control rule.  This format should only be used for the configuration item type `list(list(object))`, see [List of Lists](#list-of-lists) if you're not looking for a `list(list(object))`\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/rule-operators.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nrule:\n  - - value: 'a'\n    - value: 'b'\n  - - value: 'c'\n```\n```\n\n----------------------------------------\n\nTITLE: Example Usage of authelia build-info\nDESCRIPTION: A simple example showing how to run the build-info command without any flags to display the build information of Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_build-info.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia build-info\n```\n\n----------------------------------------\n\nTITLE: Using the Storage User Identifiers Add Command in Authelia\nDESCRIPTION: The command syntax for adding an opaque identifier for a user to the Authelia database. The command requires a username and supports various flags for specifying the identifier and configuration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_identifiers_add.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user identifiers add <username> [flags]\n```\n\n----------------------------------------\n\nTITLE: Dictionary Reference Pattern in YAML Configuration for Authelia\nDESCRIPTION: This example demonstrates the dictionary reference syntax in Authelia where a key (arbitrary_name) is defined in one section and referenced elsewhere. This pattern allows configurations to be defined once and referenced by name in other parts of the configuration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/prologue/common.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npolicies:\n  arbitrary_name:\n    enable: true\n\nusage_example:\n  - name: 'example'\n    policy: 'arbitrary_name'\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for Storage Migration Down\nDESCRIPTION: Options specific to the 'migrate down' command, including the target version flag and the destroy-data confirmation flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_migrate_down.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --destroy-data   confirms you want to destroy data with this migration\n  -h, --help           help for down\n  -t, --target int     sets the version to migrate to\n```\n\n----------------------------------------\n\nTITLE: Running Authelia Unit Tests\nDESCRIPTION: This command executes the unit tests for Authelia, which are essential for verifying individual components of the application.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/build-and-test.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts unittest\n```\n\n----------------------------------------\n\nTITLE: Using the basic list-down command in Authelia\nDESCRIPTION: Shows the basic syntax for the Authelia storage migrate list-down command which lists schema migrations available that are less than the current schema version.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_migrate_list-down.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage migrate list-down [flags]\n```\n\n----------------------------------------\n\nTITLE: Options for Authelia Storage User Identifiers Import Command\nDESCRIPTION: Lists the specific options available for the import subcommand, which currently only includes help.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_identifiers_import.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for import\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Request Configuration in NGINX\nDESCRIPTION: NGINX configuration for handling basic authentication requests and setting authentication-related headers.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/nginx.md#2025-04-21_snippet_16\n\nLANGUAGE: nginx\nCODE:\n```\nauth_request /internal/authelia/authz/basic;\n\nauth_request_set $user $upstream_http_remote_user;\nauth_request_set $groups $upstream_http_remote_groups;\nauth_request_set $name $upstream_http_remote_name;\nauth_request_set $email $upstream_http_remote_email;\n\nproxy_set_header Remote-User $user;\nproxy_set_header Remote-Groups $groups;\nproxy_set_header Remote-Name $name;\nproxy_set_header Remote-Email $email;\n```\n\n----------------------------------------\n\nTITLE: Using the TOTP Export URI Command\nDESCRIPTION: Basic command syntax for exporting TOTP configurations to URIs.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_totp_export_uri.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user totp export uri [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for the MDS3 Update Command\nDESCRIPTION: Options inherited from parent commands, including configuration settings for various database backends and encryption settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_cache_mds3_update.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: ECDSA Certificate Generation Command Options\nDESCRIPTION: Available command line options for configuring ECDSA certificate generation, including key parameters, file paths, and certificate attributes.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_ecdsa_generate.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --bundles strings                 enables generating bundles options are 'chain' and 'privkey-chain'\n      --ca                              create the certificate as a certificate authority certificate\n  -n, --common-name string              certificate common name\n      --country strings                 certificate country\n  -b, --curve string                    Sets the elliptic curve which can be P224, P256, P384, or P521 (default \"P256\")\n  -d, --directory string                directory where the generated keys, certificates, etc will be stored\n      --duration string                 duration of time the certificate is valid for (default \"1y\")\n      --extended-usage strings          specify the extended usage types of the certificate\n      --file.bundle.chain string        name of the file to export the certificate chain PEM bundle to when the --bundles flag includes 'chain' (default \"public.chain.pem\")\n      --file.bundle.priv-chain string   name of the file to export the certificate chain and private key PEM bundle to when the --bundles flag includes 'priv-chain' (default \"private.chain.pem\")\n      --file.ca-certificate string      certificate authority certificate to use when signing this certificate (default \"ca.public.crt\")\n      --file.ca-private-key string      certificate authority private key to use to signing this certificate (default \"ca.private.pem\")\n      --file.certificate string         name of the file to export the certificate data to (default \"public.crt\")\n      --file.extension.legacy string    string to include before the actual extension as a sub-extension on the PKCS#1 and SECG1 legacy formats (default \"legacy\")\n      --file.private-key string         name of the file to export the private key data to (default \"private.pem\")\n  -h, --help                            help for generate\n      --legacy                          enables the output of the legacy PKCS#1 and SECG1 formats when enabled\n  -l, --locality strings                certificate locality\n      --not-after string               latest date and time the certificate is considered valid in various formats\n      --not-before string              earliest date and time the certificate is considered valid in various formats (default is now)\n  -o, --organization strings            certificate organization (default [Authelia])\n      --organizational-unit strings     certificate organizational unit\n      --path.ca string                  source directory of the certificate authority files, if not provided the certificate will be self-signed\n  -p, --postcode strings                certificate postcode\n      --province strings                certificate province\n      --sans strings                    subject alternative names\n      --signature string                signature algorithm for the certificate (default \"SHA256\")\n  -s, --street-address strings          certificate street address\n```\n\n----------------------------------------\n\nTITLE: Argon2 Help Command Example\nDESCRIPTION: Example showing how to access the help information for the Argon2 hash generation command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate_argon2.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto hash generate argon2 --help\n```\n\n----------------------------------------\n\nTITLE: Building Authelia Web Frontend\nDESCRIPTION: These commands build the React frontend for Authelia, copy the API files to the appropriate directory in the backend, and return to the root directory.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/build-and-test.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncd web && pnpm build\ncd ..\ncp -r api internal/server/public_html/api\n```\n\n----------------------------------------\n\nTITLE: Using authelia storage bans user help command\nDESCRIPTION: Example showing how to access the help documentation for the user bans management command in Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_user.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage bans user --help\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Authelia Commands in Bash\nDESCRIPTION: These options are inherited from parent commands and can be used with 'authelia crypto'. They include configuration file specification and experimental filters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Inherited Storage Configuration Options\nDESCRIPTION: Common configuration options inherited from parent commands, including database connection settings for MySQL, PostgreSQL, and SQLite.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_identifiers.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Example Usage of authelia storage cache mds3 delete\nDESCRIPTION: A practical example of how to use the authelia storage cache mds3 delete command without any additional flags.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_cache_mds3_delete.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage cache mds3 delete\n```\n\n----------------------------------------\n\nTITLE: Downloading Authelia Dependencies\nDESCRIPTION: These commands navigate to the Authelia directory, download Go dependencies, install frontend dependencies, and return to the root directory.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/build-and-test.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd authelia && go mod download\ncd web && pnpm install\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Authelia CI Script in Bash\nDESCRIPTION: A simple example demonstrating how to run the Authelia CI script without any additional flags.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_ci.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts ci\n```\n\n----------------------------------------\n\nTITLE: Running Authelia with Configuration Files\nDESCRIPTION: Examples of how to run the authelia command with different configuration file setups. Demonstrates specifying multiple config files and directories.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia --config /etc/authelia/config.yml --config /etc/authelia/access-control.yml\nauthelia --config /etc/authelia/config.yml,/etc/authelia/access-control.yml\nauthelia --config /etc/authelia/config/\n```\n\n----------------------------------------\n\nTITLE: MDS3 Cache Dump Example\nDESCRIPTION: Example usage of the dump command without any additional flags.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_cache_mds3_dump.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage cache mds3 dump\n```\n\n----------------------------------------\n\nTITLE: Options for the MDS3 Update Command\nDESCRIPTION: Available flags specific to the MDS3 update command, including force update and custom path options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_cache_mds3_update.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -f, --force         forces the update even if it's not expired\n  -h, --help          help for update\n      --path string   updates from a file rather than from a web request\n```\n\n----------------------------------------\n\nTITLE: Basic RSA Command Usage\nDESCRIPTION: The base command for performing RSA key pair operations in Authelia CLI.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_rsa.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto pair rsa [flags]\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Authelia Crypto Hash Generate Command\nDESCRIPTION: This example shows how to display the help information for the 'authelia crypto hash generate' command, which provides detailed usage instructions and available options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto hash generate --help\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Additional options inherited from parent commands, including configuration settings for MySQL, PostgreSQL, and SQLite databases.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_migrate_up.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Text Log Output Example in Authelia\nDESCRIPTION: This snippet demonstrates the format of text-based logs in Authelia. It shows how timestamps, log levels, and messages are formatted in a human-readable text format.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/miscellaneous/logging.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ntime=\"2020-01-01T00:00:00+11:00\" level=info msg=\"Logging severity set to info\"\ntime=\"2020-01-01T00:00:00+11:00\" level=info msg=\"Authelia is listening for non-TLS connections on 0.0.0.0:{{< sitevar name=\\\"port\\\" nojs=\\\"9091\\\" >}}\"\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Authelia Access Control Command\nDESCRIPTION: A basic example showing how to access the help information for the access-control command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_access-control.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia access-control --help\n```\n\n----------------------------------------\n\nTITLE: Inherited Configuration Options\nDESCRIPTION: Options inherited from parent commands for configuring Authelia's certificate operations.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_ed25519.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: RSA Command Help Example\nDESCRIPTION: Example showing how to access the help documentation for RSA commands.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_rsa.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto pair rsa --help\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Headless Mode\nDESCRIPTION: Command to run integration tests without opening a visible Chrome browser window. This prevents interference with other activities during test execution.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/integration-suites.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts suites test --headless\n```\n\n----------------------------------------\n\nTITLE: Authelia Crypto Certificate Command Options\nDESCRIPTION: This snippet shows the available options for the 'authelia crypto certificate' command. It includes the help option for displaying command information.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for certificate\n```\n\n----------------------------------------\n\nTITLE: Basic Command Options\nDESCRIPTION: Shows the help flag option available for the exports command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_json-schema_exports.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for exports\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Additional options inherited from parent commands including configuration file specification and experimental filters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_config_validate.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Available Options for authelia-gen docs cli\nDESCRIPTION: This snippet shows the available options specific to the 'authelia-gen docs cli' command. Currently, it only includes a help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_cli.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for cli\n```\n\n----------------------------------------\n\nTITLE: Executing Authelia Debug Help Command in Bash\nDESCRIPTION: This command displays the help information for the 'authelia debug' command, showing available options and subcommands.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_debug.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia debug --help\n```\n\n----------------------------------------\n\nTITLE: Validating Authelia Configuration on Bare-Metal\nDESCRIPTION: Command to validate an Authelia configuration file on a bare-metal installation. This validates the syntax of your configuration without testing integrations.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/prologue/introduction.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia config validate --config configuration.yml\n```\n\n----------------------------------------\n\nTITLE: Example Usage of authelia config\nDESCRIPTION: Shows how to access help for the authelia config command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_config.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia config --help\n```\n\n----------------------------------------\n\nTITLE: Options inherited from parent commands in authelia storage migrate\nDESCRIPTION: Lists all the options inherited from parent commands, including configuration settings and database connection parameters for MySQL, PostgreSQL, and SQLite.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_migrate_list-up.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Global Options for Authelia Commands\nDESCRIPTION: Shows the global options inherited from parent commands that can be used with the access-control command, including configuration file specification.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_access-control.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Available Command Options\nDESCRIPTION: Shows the help flag option available specifically for the unittest command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_unittest.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for unittest\n```\n\n----------------------------------------\n\nTITLE: RSA Command Options\nDESCRIPTION: Available flags and options for the RSA command including the help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_rsa.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for rsa\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Lists the command-line options that are inherited from parent commands in the Authelia command hierarchy, including configuration file options and filters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_rsa_generate.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Listing Inherited Options for authelia crypto certificate rsa generate Command\nDESCRIPTION: This code block shows the options inherited from parent commands for the 'authelia crypto certificate rsa generate' command, including configuration file and filter options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_rsa_generate.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Installing Authelia using Nix Package Manager\nDESCRIPTION: This code demonstrates how to install Authelia using the Nix package manager. It adds the unstable channel, updates it, and then installs Authelia from the nixpkgs repository.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/deployment/bare-metal.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-channel --add https://nixos.org/channels/nixpkgs-unstable\n$ nix-channel --update\n$ nix-env -iA nixpkgs.authelia\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for ECDSA Key Pair Generation\nDESCRIPTION: This code block shows the options inherited from parent commands, including configuration file loading and experimental filters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_ecdsa_generate.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Importing WebAuthn Credentials Basic Command\nDESCRIPTION: The basic command syntax for importing WebAuthn credentials from a YAML file.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_webauthn_import.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user webauthn import <filename> [flags]\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options - Authelia Docs Date\nDESCRIPTION: Specific flags available for the docs date command, including commit range options for log checking.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_date.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --commit-since string   The commit to check the logs since\n      --commit-until string   The commit to check the logs until (default \"HEAD\")\n  -h, --help                  help for date\n```\n\n----------------------------------------\n\nTITLE: Options inherited from parent commands\nDESCRIPTION: Shows the options that are inherited from parent commands, including configuration file options and experimental filters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Running Authelia CI Script in Bash\nDESCRIPTION: This command runs the continuous integration script for Authelia. It can be executed with optional flags to modify its behavior.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_ci.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts ci [flags]\n```\n\n----------------------------------------\n\nTITLE: Command options for authelia crypto pair ecdsa\nDESCRIPTION: The command-specific options available for the authelia crypto pair ecdsa command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_ecdsa.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help   help for ecdsa\n```\n\n----------------------------------------\n\nTITLE: Options for the authelia storage bans user command\nDESCRIPTION: Available command-line options specific to the 'authelia storage bans user' command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_user.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for user\n```\n\n----------------------------------------\n\nTITLE: Using authelia crypto certificate ecdsa request Command\nDESCRIPTION: The basic syntax for using the 'authelia crypto certificate ecdsa request' command to generate an ECDSA private key and certificate signing request.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_ecdsa_request.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto certificate ecdsa request [flags]\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Command Options\nDESCRIPTION: Available command-line options specific to the bootstrap command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_bootstrap.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for bootstrap\n```\n\n----------------------------------------\n\nTITLE: Options for the authelia crypto pair command\nDESCRIPTION: Lists the available options for the authelia crypto pair command, specifically the help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for pair\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for Authelia Storage User Identifiers Import\nDESCRIPTION: Shows the basic syntax for the import command used to import user identifiers from a YAML file. The command requires a filename argument and supports various flags.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_identifiers_import.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user identifiers import <filename> [flags]\n```\n\n----------------------------------------\n\nTITLE: SHA2Crypt Help Command Example\nDESCRIPTION: Example showing how to access the help documentation for the SHA2Crypt command\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate_sha2crypt.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto hash generate sha2crypt --help\n```\n\n----------------------------------------\n\nTITLE: Available Options for authelia build-info\nDESCRIPTION: The command-specific flags that can be used with the build-info command, including help and verbose output options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_build-info.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help      help for build-info\n  -v, --verbose   Enable verbose output\n```\n\n----------------------------------------\n\nTITLE: Using Authelia Ed25519 Help Command\nDESCRIPTION: Example showing how to access the help documentation for the Ed25519 certificate operations.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_ed25519.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto certificate ed25519 --help\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Clément Michaud Profile Page\nDESCRIPTION: YAML frontmatter defining metadata for a profile page about Clément Michaud, a maintainer of Authelia. It includes title, description, summary, dates, draft status, and SEO settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributors/clement-michaud/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Clément Michaud\"\ndescription: \"Maintainer of Authelia.\"\nsummary: \"Maintainer of Authelia.\"\ndate: 2024-03-14T06:00:14+11:00\nlastmod: 2023-09-12T20:21:47+02:00\ndraft: false\navatar: \"\"\nseo:\n  title: \"\" # custom title (optional)\n  description: \"\" # custom description (recommended)\n  canonical: \"\" # custom canonical URL (optional)\n  noindex: false # false (default) or true\n---\n```\n\n----------------------------------------\n\nTITLE: Testing Work Factor for Client Secret Hashing\nDESCRIPTION: Command to measure the time taken for hashing a password with a specific number of iterations, helping to tune the work factor for client secret hashing.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/frequently-asked-questions.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntime authelia crypto hash generate pbkdf2 --variant sha512 --iterations 310000 --password insecure_password\n```\n\n----------------------------------------\n\nTITLE: Basic Ed25519 Certificate Request Command Syntax\nDESCRIPTION: The basic command syntax for generating an Ed25519 private key and certificate signing request using the Authelia CLI tool.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_ed25519_request.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto certificate ed25519 request [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Authelia Crypto Hash Generate Command\nDESCRIPTION: This code block shows the options inherited from parent commands, which include configuration file loading and experimental filters for configuration files.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Authelia Crypto Hash Validate Command Examples in Bash\nDESCRIPTION: These examples demonstrate how to use the 'authelia crypto hash validate' command. The first example shows how to access the help information, while the second example validates a specific password hash.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_validate.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto hash validate --help\nauthelia crypto hash validate --password 'p@ssw0rd' -- '$5$rounds=500000$WFjMpdCQxIkbNl0k$M0qZaZoK8Gwdh8Cw5diHgGfe5pE0iJvxcVG3.CVnQe.'\n```\n\n----------------------------------------\n\nTITLE: View TOTP Command Help\nDESCRIPTION: Command to display help information for the TOTP management functionality.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_totp.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user totp --help\n```\n\n----------------------------------------\n\nTITLE: Using the authelia crypto hash generate bcrypt Command\nDESCRIPTION: The base command for generating bcrypt hash digests with Authelia. This command allows users to create cryptographic hashes using the bcrypt algorithm.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate_bcrypt.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto hash generate bcrypt [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the authelia config Command\nDESCRIPTION: Basic syntax for the 'authelia config' command which performs configuration-related actions.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_config.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia config [flags]\n```\n\n----------------------------------------\n\nTITLE: Building Authelia with authelia-scripts CLI\nDESCRIPTION: This snippet demonstrates the command-line usage to build the Authelia binary and static assets. It includes flags for help and inherited options for logging and CI integration. Ensure authelia-scripts is installed and accessible in your PATH.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_build.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts build [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts build\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for ECDSA Key Pair Generation\nDESCRIPTION: This example shows how to display the help information for the ECDSA key pair generation command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_ecdsa_generate.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto pair ecdsa generate --help\n```\n\n----------------------------------------\n\nTITLE: SHA2Crypt Command Options\nDESCRIPTION: Available flags and options specific to the SHA2Crypt command including iteration count, salt size, and variant selection\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate_sha2crypt.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help             help for sha2crypt\n  -i, --iterations int   number of iterations (default 50000)\n  -s, --salt-size int    salt size in bytes (default 16)\n  -v, --variant string   variant, options are sha256 and sha512 (default \"sha512\")\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Command-line options inherited from parent commands that can be used with the 'keys' subcommand. These include various directory specifications, file paths, and other configuration options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_code_keys.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Legacy Session Configuration for Authelia\nDESCRIPTION: This snippet shows the legacy configuration setup for Authelia, emphasizing the default redirection URL and session domain settings. This configuration might require adaptation to fit specific deployment scenarios.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/proxies/traefik.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_redirection_url: 'https://www.{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\nsession:\n  domain: '{{</* sitevar name=\"domain\" nojs=\"example.com\" */>}}'\n```\n\n----------------------------------------\n\nTITLE: Updating Server Listener Configuration - YAML\nDESCRIPTION: These snippets show how to update server listener configuration in a YAML file from an old format using path to a new format with address. The change is necessary to avoid potential authorization issues when using specific endpoint paths. No external dependencies are required.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/blog/release-notes-4.38/index.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  host: '0.0.0.0'\n  port: {{</* sitevar name=\"port\" nojs=\"9091\" */>}}\n  path: 'authelia'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  address: 'tcp://0.0.0.0:{{</* sitevar name=\"port\" nojs=\"9091\" */>}}/authelia'\n```\n\n----------------------------------------\n\nTITLE: Authelia Storage User Command Options\nDESCRIPTION: Available command-line options specific to the authelia storage user command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for user\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for authelia crypto certificate rsa generate Command\nDESCRIPTION: This example shows how to display the help information for the 'authelia crypto certificate rsa generate' command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_rsa_generate.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto certificate rsa generate --help\n```\n\n----------------------------------------\n\nTITLE: Executing authelia-gen docs Command in Bash\nDESCRIPTION: This command is used to generate documentation for Authelia. It can be run with optional flags to customize its behavior.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-gen docs [flags]\n```\n\n----------------------------------------\n\nTITLE: TOTP Command Options\nDESCRIPTION: Available command-line options specific to the TOTP command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_totp.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for totp\n```\n\n----------------------------------------\n\nTITLE: Configuring User Info Signed Response Key ID\nDESCRIPTION: Specifies the key ID for signing User Information responses, with a caution about limited client support for signed JWT responses\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/openid-connect/clients.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nuserinfo_signed_response_key_id\n```\n\n----------------------------------------\n\nTITLE: Executing authelia crypto certificate rsa generate Command\nDESCRIPTION: This command generates an RSA private key and certificate. It allows customization of various certificate properties and output options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_rsa_generate.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto certificate rsa generate [flags]\n```\n\n----------------------------------------\n\nTITLE: Help Options for JSON Schema Generator\nDESCRIPTION: Available help options specific to the json-schema command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_json-schema.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for json-schema\n```\n\n----------------------------------------\n\nTITLE: Authelia Scripts Clean Example\nDESCRIPTION: This snippet presents a simple example of how to use the authelia-scripts clean command.  It demonstrates the command being invoked without any additional flags or arguments.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_clean.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"authelia-scripts clean\"\n```\n\n----------------------------------------\n\nTITLE: Authelia Storage User Identifiers Export Command Options\nDESCRIPTION: Lists the specific options available for the export command, including file specification and help documentation.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_identifiers_export.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -f, --file string   The file name for the YAML export (default \"authelia.export.opaque-identifiers.yml\")\n  -h, --help          help for export\n```\n\n----------------------------------------\n\nTITLE: Options inherited from parent commands\nDESCRIPTION: Options that are inherited from parent commands and can be used with the authelia crypto pair ecdsa command, including configuration file options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_ecdsa.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n-c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Standalone Test Suite\nDESCRIPTION: Initializes and configures the Standalone test suite for Authelia testing.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/reference-authelia-scripts.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts suites setup Standalone\n```\n\n----------------------------------------\n\nTITLE: Available Options for Authelia Storage Migrate Command\nDESCRIPTION: Lists the specific options available for the 'storage migrate' command, which includes only the help option.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_migrate.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia and Protected Service with Docker Compose\nDESCRIPTION: Docker Compose configuration for Authelia and a protected whoami service. This setup includes the necessary Traefik labels for forward authentication and defines the networks for secure communication.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/blog/authelia-traefik-setup-guide/index.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n  authelia:\n    image: 'authelia/authelia:4.38'\n    container_name: '{{< sitevar name=\"host\" nojs=\"authelia\" >}}'\n    volumes:\n      - './authelia/secrets:/secrets:ro'\n      - './authelia/config:/config'\n      - './authelia/logs:/var/log/authelia/'\n    networks:\n      authelia: {}\n    labels:\n      ## Expose Authelia through Traefik\n      traefik.enable: 'true'\n      traefik.docker.network: 'authelia'\n      traefik.http.routers.authelia.rule: 'Host(`{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}`)'\n      traefik.http.routers.authelia.entrypoints: 'https'\n      ## Setup Authelia ForwardAuth Middlewares\n      traefik.http.middlewares.authelia.forwardAuth.address: '{{< sitevar name=\"tls\" nojs=\"http\" >}}://{{< sitevar name=\"host\" nojs=\"authelia\" >}}:{{< sitevar name=\"port\" nojs=\"9091\" >}}/api/authz/forward-auth'\n      traefik.http.middlewares.authelia.forwardAuth.trustForwardHeader: 'true'\n      traefik.http.middlewares.authelia.forwardAuth.authResponseHeaders: 'Remote-User,Remote-Groups,Remote-Name,Remote-Email'\n    environment:\n      TZ: 'America/Los_Angeles'\n      X_AUTHELIA_CONFIG_FILTERS: 'template'\n\n  whoami-secure:\n    image: 'traefik/whoami'\n    restart: 'unless-stopped'\n    container_name: 'whoami-secure'\n    labels:\n      traefik.enable: 'true'\n      traefik.http.routers.whoami-secure.rule: 'Host(`whoami-secure.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}`)'\n      traefik.http.routers.whoami-secure.entrypoints: 'https'\n      traefik.http.routers.whoami-secure.middlewares: 'authelia@docker'\n    networks:\n      proxy: {}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Authelia PBKDF2 Hash Generation Command\nDESCRIPTION: Shows how to get help information for the PBKDF2 hash generation command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate_pbkdf2.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nauthelia crypto hash generate pbkdf2 --help\n```\n\n----------------------------------------\n\nTITLE: Available Options for authelia config\nDESCRIPTION: Lists the available options specific to the 'config' subcommand.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_config.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for config\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Authelia Storage Commands\nDESCRIPTION: Options inherited from parent commands, including configuration paths, encryption key settings, and database connection parameters for MySQL, PostgreSQL, and SQLite.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_migrate_down.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Verify Command Options\nDESCRIPTION: Available options specific to the verify command, showing only the help flag in this case.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_webauthn_verify.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for verify\n```\n\n----------------------------------------\n\nTITLE: Configuring ID Token Content Encryption\nDESCRIPTION: Sets the content encryption algorithm for authorization responses, with a default of A128CBC-HS256 and a caution about limited client support\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/identity-providers/openid-connect/clients.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nid_token_encrypted_response_enc\n```\n\n----------------------------------------\n\nTITLE: Using the authelia build-info Command\nDESCRIPTION: The basic syntax for the authelia build-info command. This command shows detailed version information embedded into Authelia by continuous integration, which is useful for debugging issues.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_build-info.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia build-info [flags]\n```\n\n----------------------------------------\n\nTITLE: Options for the keys Subcommand\nDESCRIPTION: Available command-line options specific to the 'keys' subcommand.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_code_keys.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for keys\n```\n\n----------------------------------------\n\nTITLE: Tearing down Standalone suite environment\nDESCRIPTION: This snippet shows an example of using the `authelia-scripts suites teardown` command to tear down a test suite environment named 'Standalone'.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_suites_teardown.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"authelia-scripts suites setup Standalone\"\n```\n\n----------------------------------------\n\nTITLE: Example Usage of bcrypt Hash Generation Command\nDESCRIPTION: An example showing how to view help information for the bcrypt hash generation command. This provides users with a reference point for understanding command usage.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate_bcrypt.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto hash generate bcrypt --help\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Authelia Crypto Hash Validate Command in Bash\nDESCRIPTION: These options are inherited from parent commands and can be used with the 'authelia crypto hash validate' command. They allow specifying configuration files and applying filters to all configuration files.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_validate.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Cloning Authelia Repository\nDESCRIPTION: This command clones the Authelia repository from GitHub, which is the first step in manually building the application from source.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/build-and-test.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/authelia/authelia.git\n```\n\n----------------------------------------\n\nTITLE: Show Help for Identifiers Command\nDESCRIPTION: Basic command to display help information for the user identifiers management functionality.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_identifiers.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user identifiers --help\n```\n\n----------------------------------------\n\nTITLE: Contributor HTML Snippet\nDESCRIPTION: This HTML snippet displays a contributor's avatar, name, and links to their contributions on GitHub. It uses a table structure to organize the contributor information.\nSOURCE: https://github.com/authelia/authelia/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n\"<td align=\\\"center\\\" valign=\\\"top\\\" width=\\\"14.28%\\\"><a href=\\\"https://github.com/samos667\\\"><img src=\\\"https://avatars.githubusercontent.com/u/50653464?v=4?s=100\\\" width=\\\"100px;\\\" alt=\\\"samos667\\\"/><br /><sub><b>samos667</b></sub></a><br /><a href=\\\"https://github.com/authelia/authelia/commits?author=samos667\\\" title=\\\"Documentation\\\">📖</a></td>\"\n```\n\n----------------------------------------\n\nTITLE: Basic OIDC Command Options\nDESCRIPTION: Shows the basic help options available for the authelia-gen misc oidc command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_misc_oidc.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for oidc\n```\n\n----------------------------------------\n\nTITLE: Running the Standalone Test Suite\nDESCRIPTION: This snippet provides an example of how to run the 'Standalone' test suite using the authelia-scripts suites test command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_suites_test.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"authelia-scripts suites test Standalone\"\n```\n\n----------------------------------------\n\nTITLE: Running Authelia Generator Base Command\nDESCRIPTION: The base command for running the Authelia generator tool with optional flags.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-gen [flags]\n```\n\n----------------------------------------\n\nTITLE: Executing Authelia-Gen Code Server Command in Bash\nDESCRIPTION: This command generates Authelia server files. It can be run with optional flags to customize behavior.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_code_server.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-gen code server [flags]\n```\n\n----------------------------------------\n\nTITLE: Authelia Crypto Hash Generate Command Options\nDESCRIPTION: This code block lists the available options for the 'authelia crypto hash generate' command, including flags for password input, random generation, and character set customization.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help                       help for generate\n      --no-confirm                 skip the password confirmation prompt\n      --password string            manually supply the password rather than using the terminal prompt\n      --random                     uses a randomly generated password\n      --random.characters string   sets the explicit characters for the random string\n      --random.charset string      sets the charset for the random password, options are 'ascii', 'alphanumeric', 'alphabetic', 'numeric', 'numeric-hex', and 'rfc3986' (default \"alphanumeric\")\n      --random.length int          sets the character length for the random string (default 72)\n```\n\n----------------------------------------\n\nTITLE: Glob Function File Listing Example\nDESCRIPTION: Shows how to use the glob function to list files with a specific extension\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/templating.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{{ range (glob \"/opt/data/*.yml\") }}\n{{ . }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Sourcing the Bootstrap Script for Authelia\nDESCRIPTION: Initializes the authelia-scripts command by sourcing the bootstrap.sh file, which makes the scripts available in the current shell session.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/reference-authelia-scripts.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsource bootstrap.sh\n```\n\n----------------------------------------\n\nTITLE: Using the Authelia Storage Encryption Help Command\nDESCRIPTION: Example showing how to access help documentation for the storage encryption command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_encryption.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage encryption --help\n```\n\n----------------------------------------\n\nTITLE: Example RSA Certificate Request Help Command\nDESCRIPTION: Example showing how to access the help documentation for the RSA certificate request command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_rsa_request.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto certificate rsa request --help\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML configuration block defining metadata for the blog post including title, description, date, categories, and SEO settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/blog/pre-release-notes-4.37/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"4.37: Pre-Release Notes\"\ndescription: \"Authelia 4.37 is just around the corner. This version has several additional features and improvements to existing features. In this blog post we'll discuss the new features and roughly what it means for users.\"\nsummary: \"Authelia 4.37 is just around the corner. This version has several additional features and improvements to existing features. In this blog post we'll discuss the new features and roughly what it means for users.\"\ndate: 2022-09-26T06:55:09+10:00\ndraft: false\nweight: 50\ncategories: [\"News\", \"Release Notes\"]\ntags: [\"releases\", \"pre-release-notes\"]\ncontributors: [\"James Elliott\"]\npinned: false\nhomepage: false\nseo:\n  title: \"\"\n  description: \"\"\n  canonical: \"\"\n  noindex: false\n---\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command Example\nDESCRIPTION: Example showing the basic usage of the docker build command without any flags\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_docker_build.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts docker build\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia Client with YAML\nDESCRIPTION: This YAML configuration defines the OpenID Connect settings for the 'immich' client in Authelia, specifying client ID, secret, redirect URIs, scopes, and authorization policy required for integration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/immich/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nidentity_providers:\n  oidc:\n    ## The other portions of the mandatory OpenID Connect 1.0 configuration go here.\n    ## See: https://www.authelia.com/c/oidc\n    clients:\n      - client_id: 'immich'\n        client_name: 'immich'\n        client_secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.\n        public: false\n        authorization_policy: 'two_factor'\n        redirect_uris:\n          - 'https://immich.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/auth/login'\n          - 'https://immich.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/user-settings'\n          - 'app.immich:///oauth-callback'\n        scopes:\n          - 'openid'\n          - 'profile'\n          - 'email'\n        userinfo_signed_response_alg: 'none'\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Authelia User Ban Command\nDESCRIPTION: An example showing how to access help information for the user ban add command. This example demonstrates the basic usage pattern for getting command help.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_user_add.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage bans user add --help\n```\n\n----------------------------------------\n\nTITLE: Suites Command Options\nDESCRIPTION: Available flags specific to the suites command, showing the help flag option.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_suites.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for suites\n```\n\n----------------------------------------\n\nTITLE: Inherited options for migration commands in Authelia\nDESCRIPTION: Lists all the options inherited from parent commands, including configuration file options and database connection parameters for MySQL, PostgreSQL, and SQLite.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_migrate_list-down.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Basic Bootstrap Command Usage\nDESCRIPTION: The basic syntax for running the authelia-scripts bootstrap command to prepare the development environment.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_bootstrap.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts bootstrap [flags]\n```\n\n----------------------------------------\n\nTITLE: Authelia Ed25519 Command Options\nDESCRIPTION: Available command line options for the ed25519 subcommand.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_ed25519.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for ed25519\n```\n\n----------------------------------------\n\nTITLE: Inherited Configuration Options\nDESCRIPTION: Global configuration options that apply to all Authelia crypto commands including config file specification and experimental filters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_rsa.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Walk Function File Content Example\nDESCRIPTION: Demonstrates using the walk function to retrieve contents of files in a directory\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/templating.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n{{ range (walk \"/opt/data/*\" \"\" false) }}\n{{ fileContent . }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Additional options inherited from parent commands, including configuration file loading and experimental filters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_rsa_request.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Global Options for authelia Commands\nDESCRIPTION: Options inherited from parent commands that apply to all authelia commands, including configuration file loading and experimental filters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_debug_tls.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Contributor HTML Snippet\nDESCRIPTION: This HTML snippet displays a contributor's avatar, name, and links to their contributions on GitHub. It uses a table structure to organize the contributor information.\nSOURCE: https://github.com/authelia/authelia/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n\"<td align=\\\"center\\\" valign=\\\"top\\\" width=\\\"14.28%\\\"><a href=\\\"https://github.com/0xSysR3ll\\\"><img src=\\\"https://avatars.githubusercontent.com/u/31414959?v=4?s=100\\\" width=\\\"100px;\\\" alt=\\\"0xsysr3ll\\\"/><br /><sub><b>0xsysr3ll</b></sub></a><br /><a href=\\\"https://github.com/authelia/authelia/commits?author=0xSysR3ll\\\" title=\\\"Documentation\\\">📖</a></td>\"\n```\n\n----------------------------------------\n\nTITLE: Using the Bug Report Issue Template Generator Command\nDESCRIPTION: The basic command syntax for generating GitHub bug report issue templates using authelia-gen. This command creates standardized bug report templates for the Authelia project.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_github_issue-templates_bug-report.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-gen github issue-templates bug-report [flags]\n```\n\n----------------------------------------\n\nTITLE: Authelia Scripts Suite Setup Options\nDESCRIPTION: Available command-line options for the setup command, showing the help flag option.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_suites_setup.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for setup\n```\n\n----------------------------------------\n\nTITLE: Basic Suites Command Usage\nDESCRIPTION: The main suites command that provides access to suite management functionality. This command serves as the parent for various subcommands related to test suite operations.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_suites.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts suites [flags]\n```\n\n----------------------------------------\n\nTITLE: Executing Authelia-Gen Docs Data Misc Command\nDESCRIPTION: This command generates the docs data file misc.json. It can be run with optional flags.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_data_misc.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-gen docs data misc [flags]\n```\n\n----------------------------------------\n\nTITLE: Authelia CI Script Options in Bash\nDESCRIPTION: This snippet shows the available options for the 'authelia-scripts ci' command, including the help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_ci.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for ci\n```\n\n----------------------------------------\n\nTITLE: Basic Migration Command Syntax\nDESCRIPTION: The basic command syntax for performing database migrations in Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_migrate_up.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage migrate up [flags]\n```\n\n----------------------------------------\n\nTITLE: Representing YAML Configuration Structure for Authelia\nDESCRIPTION: This snippet demonstrates how a configuration key 'server.host' with a value of '0.0.0.0' is represented in YAML format. It shows the proper indentation and structure for nested configuration options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/prologue/migration.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  host: '0.0.0.0'\n```\n\n----------------------------------------\n\nTITLE: Listing Inherited Options from Parent Commands - Shell\nDESCRIPTION: This snippet provides an extensive list of options inherited from the parent commands for the use of authelia-gen. These include options to configure directories, exclude certain generators, and specify file paths related to the documentation and JSON schema generation process. Understanding these options is crucial for effective use of authelia-gen when generating or managing JSON schema documentation.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_json-schema_exports_identifiers.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n-C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Global Options for Authelia Storage Commands\nDESCRIPTION: Displays the inherited parent command options that can be used with all storage cache commands, including configuration paths, database connection settings for MySQL, PostgreSQL, and SQLite, and encryption key specification.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_cache_mds3.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Listing Inherited Options for Authelia Crypto Certificate RSA Command\nDESCRIPTION: This code block displays the options inherited from parent commands, including configuration file loading and experimental filters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_rsa.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Contributor HTML Snippet\nDESCRIPTION: This HTML snippet displays a contributor's avatar, name, and links to their contributions on GitHub. It uses a table structure to organize the contributor information. This entry includes links to Bug reports, Code and Tests.\nSOURCE: https://github.com/authelia/authelia/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n\"<td align=\\\"center\\\" valign=\\\"top\\\" width=\\\"14.28%\\\"><a href=\\\"https://github.com/wangweixuan\\\"><img src=\\\"https://avatars.githubusercontent.com/u/24620923?v=4?s=100\\\" width=\\\"100px;\\\" alt=\\\"Wang Weixuan\\\"/><br /><sub><b>Wang Weixuan</b></sub></a><br /><a href=\\\"https://github.com/authelia/authelia/issues?q=author%3Awangweixuan\\\" title=\\\"Bug reports\\\">🐛</a> <a href=\\\"https://github.com/authelia/authelia/commits?author=wangweixuan\\\" title=\\\"Code\\\">💻</a> <a href=\\\"https://github.com/authelia/authelia/commits?author=wangweixuan\\\" title=\\\"Tests\\\">⚠️</a></td>\"\n```\n\n----------------------------------------\n\nTITLE: Suites Command Example\nDESCRIPTION: Example showing the basic usage of the suites command without any subcommands or flags.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_suites.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts suites\n```\n\n----------------------------------------\n\nTITLE: Commit Message Header Format in Text\nDESCRIPTION: Demonstrates the format for the commit message header, including type, scope, and summary components with detailed descriptions of each part.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/guidelines/commit-message.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<type>(<scope>): <summary>\n  │       │             │\n  │       │             └─⫸ Summary in present tense. Not capitalized. No period at the end.\n  │       │\n  │       └─⫸ Commit Scope: api|autheliabot|authentication|authorization|buildkite|bundler|clock|\n  │                          cmd|codecov|commands|configuration|deps|docker|duo|expression|go|\n  │                          golangci-lint|handlers|husky|logging|metrics|middlewares|mocks|model|\n  │                          notification|npm|ntp|oidc|random|regulation|renovate|reviewdog|server|\n  │                          service|session|storage|suites|templates|totp|utils|web|webauthn\n  │\n  └─⫸ Commit Type: build|ci|docs|feat|fix|i18n|perf|refactor|release|revert|test\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Authelia Scripts Docker Push-Manifest\nDESCRIPTION: A simple example demonstrating how to use the push-manifest command without any additional flags.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_docker_push-manifest.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts docker push-manifest\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands in Authelia\nDESCRIPTION: Shows options that are inherited from parent commands including configuration file options and experimental filters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Executing WebAuthn JSON Schema Generation Command\nDESCRIPTION: Basic command syntax for generating WebAuthn export JSON schema documentation with authelia-gen tool.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_json-schema_exports_webauthn.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-gen docs json-schema exports webauthn [flags]\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Authelia Crypto Hash Command\nDESCRIPTION: Shows how to get help information for the crypto hash command by using the --help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto hash --help\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Global options that apply to all authelia commands, including configuration file loading and experimental filters options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_build-info.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Security Documentation\nDESCRIPTION: YAML front matter that configures metadata for the security documentation page in Authelia. It includes the title, description, date, draft status, and weight for page ordering.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/overview/security/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Security\"\ndescription: \"Overview Prologue\"\nsummary: \"\"\ndate: 2022-06-15T17:51:47+10:00\ndraft: false\nimages: []\nweight: 400\n---\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Comprehensive list of options inherited from parent commands, including directory configurations, file paths, and version control settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_json-schema_exports_webauthn.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Additional options inherited from parent commands including directory configurations, file paths, and version controls.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_json-schema_exports_totp.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Inherited Configuration Options\nDESCRIPTION: Additional configuration options inherited from parent commands for the ECDSA certificate generation tool.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_ecdsa_generate.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Hugo Shortcode for Profile Details\nDESCRIPTION: Hugo shortcode that displays profile details for Amir Zarrinkafsh. The shortcode takes a name parameter referencing the profile identifier.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributors/amir-zarrinkafsh/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{< profile-details name=\"amir-zarrinkafsh\" >}}\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Command Help Options\nDESCRIPTION: Available help flags specific to the webauthn command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_json-schema_exports_webauthn.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for webauthn\n```\n\n----------------------------------------\n\nTITLE: Contributor HTML Snippet\nDESCRIPTION: This HTML snippet displays a contributor's avatar, name, and links to their contributions on GitHub. It uses a table structure to organize the contributor information.\nSOURCE: https://github.com/authelia/authelia/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n\"<td align=\\\"center\\\" valign=\\\"top\\\" width=\\\"14.28%\\\"><a href=\\\"https://github.com/cromelex\\\"><img src=\\\"https://avatars.githubusercontent.com/u/96779452?v=4?s=100\\\" width=\\\"100px;\\\" alt=\\\"Dan\\\"/><br /><sub><b>Dan</b></sub></a><br /><a href=\\\"https://github.com/authelia/authelia/commits?author=cromelex\\\" title=\\\"Documentation\\\">📖</a></td>\"\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Authelia-Gen Docs JSON-Schema Configuration\nDESCRIPTION: This extensive list of options is inherited from parent commands and provides various customization possibilities for directory paths, file locations, and version control.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_json-schema_configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Basic Command Usage for authelia-gen code scripts\nDESCRIPTION: The basic syntax for using the authelia-gen code scripts command, which generates the generated portion of the authelia-scripts command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_code_scripts.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-gen code scripts [flags]\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Schema with authelia-gen Command - Shell\nDESCRIPTION: This snippet demonstrates the usage of the authelia-gen command to generate JSON schema documentation for identifier exports. It includes command options such as --help for displaying help information. Dependencies include having authelia-gen installed and set in the system's PATH. The primary parameter is 'identifiers', which directs the tool to generate schema for identifiers specifically, and the output will be written to specified directories.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_json-schema_exports_identifiers.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nauthelia-gen docs json-schema exports identifiers [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for Authelia Storage Encryption Check\nDESCRIPTION: The basic syntax for running the storage encryption check command to validate encryption keys against database data.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_encryption_check.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage encryption check [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting up Standalone Suite for Authelia Development\nDESCRIPTION: This command starts the Standalone suite, which creates a virtual environment for running Authelia from source code with hot-reloading enabled.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/build-and-test.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts suites setup Standalone\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for authelia-gen GitHub Issue Templates Command in Bash\nDESCRIPTION: These are the options inherited from parent commands, providing various configuration settings for the command execution, such as directory paths, file locations, and version control.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_github_issue-templates.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                         The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Authelia WebAuthn MDS3 Cache Command\nDESCRIPTION: Shows how to display help information for the 'authelia storage cache mds3' command. This command provides guidance on usage and available options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_cache_mds3.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage cache mds3 --help\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Identifiers with authelia-gen Command - Shell\nDESCRIPTION: This snippet shows the help option for the \"authelia-gen docs json-schema exports identifiers\" command, which displays usage information specific to identifiers. The --help flag is used, and it is a common feature in CLI tools to provide user guidance.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_json-schema_exports_identifiers.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n-h, --help   help for identifiers\n```\n\n----------------------------------------\n\nTITLE: TOTP Export URI Command Options\nDESCRIPTION: Command-specific options for the TOTP export URI command, showing only the help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_totp_export_uri.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for uri\n```\n\n----------------------------------------\n\nTITLE: Contributor HTML Snippet\nDESCRIPTION: This HTML snippet displays a contributor's avatar, name, and links to their contributions on GitHub. It uses a table structure to organize the contributor information.\nSOURCE: https://github.com/authelia/authelia/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n\"<td align=\\\"center\\\" valign=\\\"top\\\" width=\\\"14.28%\\\"><a href=\\\"http://shaamallow.com\\\"><img src=\\\"https://avatars.githubusercontent.com/u/39766320?v=4?s=100\\\" width=\\\"100px;\\\" alt=\\\"Eyal Benaroche\\\"/><br /><sub><b>Eyal Benaroche</b></sub></a><br /><a href=\\\"https://github.com/authelia/authelia/commits?author=Shaamallow\\\" title=\\\"Documentation\\\">📖</a></td>\"\n```\n\n----------------------------------------\n\nTITLE: Executing authelia-gen docs cli Command\nDESCRIPTION: This command is used to generate CLI documentation for Authelia. It can be run with optional flags to customize the output.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_cli.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-gen docs cli [flags]\n```\n\n----------------------------------------\n\nTITLE: Access Control Command Options\nDESCRIPTION: Lists the available flags specific to the access-control command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_access-control.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  -h, --help   help for access-control\n```\n\n----------------------------------------\n\nTITLE: Email Template with Dynamic Placeholders\nDESCRIPTION: This snippet defines the structure and content of the email template. It includes placeholders (using the {{ .FieldName }} syntax) for dynamic information such as the user's display name, domain, validation links, and revocation links. These placeholders will be replaced with actual values when the email is generated and sent.\nSOURCE: https://github.com/authelia/authelia/blob/master/internal/templates/embed/notification/IdentityVerificationJWT.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\n{{ .Title }}\n ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌\n‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌\n‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌\n‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌\n‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌\n‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌\n‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌\n‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌\n‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌\n‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌\n‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌\n‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌\n‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿ ‌ ‍‎‏﻿\n\nA ONE-TIME LINK HAS BEEN GENERATED TO COMPLETE A REQUESTED ACTION\n\nHi {{ .DisplayName }},\n\nWe would like to confirm a requested action related to the security of your\naccount at {{ .Domain }}\n\nDo not share this notification or the content of this notification with anyone.\n\n--------------------------------------------------------------------------------\n\nIf you made this request, click the validation link below.\n\n{{ .LinkText }} {{ .LinkURL }}\n\nAlternatively, copy and paste this URL into your browser:\n\n{{ .LinkURL }} {{ .LinkURL }}\n\n--------------------------------------------------------------------------------\n\nIf you did NOT initiate this request, your credentials may have been compromised\nand you should:\n\n 1. Revoke the validation link using the provided links below\n 2. Reset your password or other login credentials\n 3. Contact an Administrator\n\n{{ .RevocationLinkText }} {{ .RevocationLinkURL }}\n\nTo revoke the code click the above button or alternatively copy and paste this\nURL into your browser:\n\n{{ .RevocationLinkURL }} {{ .RevocationLinkURL }}\n\n--------------------------------------------------------------------------------\n\nThis email was intended for {{ .DisplayName }}. This event was generated due to\nan action from {{ .RemoteIP }}. If you do not believe that your actions could\nhave triggered this event or if you are concerned about your account's safety,\nplease follow the explicit directions in this notification.\n\nPowered by Authelia https://www.authelia.com\n```\n\n----------------------------------------\n\nTITLE: Available Options for Authelia Crypto Hash Command\nDESCRIPTION: Lists the basic options available for the 'authelia crypto hash' command, showing only the help flag (-h, --help).\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for hash\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Rules\nDESCRIPTION: Defines a global user agent rule that permits all web crawlers to crawl the entire website without any specific access limitations\nSOURCE: https://github.com/authelia/authelia/blob/master/web/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nUser-agent: *\\n\n```\n\n----------------------------------------\n\nTITLE: Authelia ADR Command Options\nDESCRIPTION: Command line options specific to the ADR command including the help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_manage_adr.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n  -h, --help   help for adr\n```\n\n----------------------------------------\n\nTITLE: Using authelia-gen to Generate User Database JSON Schema\nDESCRIPTION: Command syntax for generating JSON schema documentation for the user database in Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_json-schema_user-database.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-gen docs json-schema user-database [flags]\n```\n\n----------------------------------------\n\nTITLE: Monitoring Docker Logs for Authelia Backend\nDESCRIPTION: This command allows you to view the logs of the Authelia backend container in real-time, useful for debugging and monitoring during development.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/build-and-test.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs authelia_authelia-backend_1 -f\n```\n\n----------------------------------------\n\nTITLE: Authelia-Gen Docs Data Command Options\nDESCRIPTION: Available command-line options specific to the docs data command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_data.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for data\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for authelia-gen code scripts\nDESCRIPTION: Options inherited from parent commands, including directory configurations, file paths, package names, and version settings that affect the code generation process.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_code_scripts.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Authelia IP Ban Revocation Command\nDESCRIPTION: Demonstrates how to get help information for the IP ban revocation command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_ip_revoke.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nauthelia storage bans ip revoke --help\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network for Traefik Proxy\nDESCRIPTION: Shell command to create a Docker network named 'proxy' with a specific bridge name, which will be used for connecting containers to the Traefik proxy.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/blog/authelia-traefik-setup-guide/index.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker network create proxy \\\n  --opt \"com.docker.network.bridge.name\"=\"br-docker-proxy\"\n```\n\n----------------------------------------\n\nTITLE: Options for the Storage User Identifiers Add Command\nDESCRIPTION: Available flags specific to the 'add' command, including options to specify the identifier UUID, sector identifier, and service type.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_identifiers_add.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help                help for add\n      --identifier string   The optional version 4 UUID to use, if not set a random one will be used\n      --sector string       The sector identifier to use (should usually be blank)\n      --service string      The service to add the identifier for, valid values are: openid (default \"openid\")\n```\n\n----------------------------------------\n\nTITLE: Enabling ANSI Standard Time Behaviors in MySQL Configuration\nDESCRIPTION: This configuration snippet shows how to enable ANSI standard time behaviors in a MySQL configuration file.  This setting ensures consistent handling of timestamps, especially in older MariaDB versions where it's not the default.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/integrations/database-integrations.md#2025-04-21_snippet_1\n\nLANGUAGE: cnf\nCODE:\n```\n\"[mysqld]\\nexplicit_defaults_for_timestamp = ON\"\n```\n\n----------------------------------------\n\nTITLE: Defining ADR Key Sections in Markdown\nDESCRIPTION: This snippet presents a markdown table that defines the key sections of an Architecture Decision Record (ADR) for the Authelia project. It includes the section names and their descriptions.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/architecture-decision-log/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|      Name       |                             Description                              |\n|:---------------:|:--------------------------------------------------------------------:|\n|     Status      |                    The current status of the ADR                     |\n|     Context     | The context surrounding why the ADR is necessary and what it's about |\n| Proposed Design |           The proposed design or designs for consideration           |\n|    Decision     |               The decision made as a result of the ADR               |\n|  Consequences   |        The potential undesirable outcomes related to the ADR         |\n|  Related ADRs   |          The other ADRs that are related to a specific ADR           |\n```\n\n----------------------------------------\n\nTITLE: Executing Authelia Storage Bans User List Command\nDESCRIPTION: This command lists user bans from the regulation system in Authelia. It provides options for configuration and database connections.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_user_list.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage bans user list [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for authelia-gen docs manage Command\nDESCRIPTION: This code snippet lists the options inherited from parent commands. These options include various directory and file path configurations, exclusion settings, version controls, and package naming options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_manage.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Using the authelia-gen commit-lint Command in Bash\nDESCRIPTION: Command syntax for the authelia-gen commit-lint command, which generates commit lint files for Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_commit-lint.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-gen commit-lint [flags]\n```\n\n----------------------------------------\n\nTITLE: Using authelia-gen code keys Command\nDESCRIPTION: The command syntax for generating a list of valid configuration keys in Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_code_keys.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-gen code keys [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the authelia storage cache mds3 status Command\nDESCRIPTION: The basic command syntax for viewing WebAuthn MDS3 cache storage status in Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_cache_mds3_status.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage cache mds3 status [flags]\n```\n\n----------------------------------------\n\nTITLE: Executing Authelia Crypto Certificate Help Command\nDESCRIPTION: This snippet demonstrates how to run the help command for the 'authelia crypto certificate' command. It displays information about the command's usage and available options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto certificate --help\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Authelia Documentation\nDESCRIPTION: This YAML snippet defines the front matter for a documentation page about the Authelia project. It includes metadata such as title, date, draft status, sidebar settings, and SEO configurations.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"authelia\"\ndescription: \"\"\nlead: \"\"\ndate: 2022-06-15T17:51:47+10:00\ndraft: false\nimages: []\nsidebar:\n  collapsed: true\nweight: 900\ntoc: true\nseo:\n  title: \"\" # custom title (optional)\n  description: \"\" # custom description (recommended)\n  canonical: \"\" # custom canonical URL (optional)\n  noindex: false # false (default) or true\n---\n```\n\n----------------------------------------\n\nTITLE: Commit Message Basic Structure in Bash\nDESCRIPTION: Shows the basic structure of a commit message with header, body, and footer components separated by blank lines.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/guidelines/commit-message.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n<header>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<footer>\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: This lengthy list shows all options inherited from parent commands, including directory configurations, file paths, and version settings that can be used with the bug-report command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_github_issue-templates_bug-report.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for authelia-gen docs Command in Bash\nDESCRIPTION: This snippet lists the options inherited from parent commands. These options control various aspects of the documentation generation process, including directory paths, file locations, and version settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for authelia-gen code scripts\nDESCRIPTION: The available options specific to the authelia-gen code scripts command, which only includes the help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_code_scripts.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for scripts\n```\n\n----------------------------------------\n\nTITLE: Listing Network Names and IPs of a Docker Container\nDESCRIPTION: This snippet lists all networks and their associated IP addresses for the Docker container named 'traefik'. It requires Docker. The output helps to identify network configurations and relationships between containers.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/trusted-header-sso/introduction.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker inspect -f '{{range $network, $config := .NetworkSettings.Networks}}{{ $network }}: {{ $config.IPAddress }} {{end}}' traefik\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Authelia Storage Bans User Command\nDESCRIPTION: This example shows how to display the help information for the 'authelia storage bans user' command, which includes details about the 'list' subcommand.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_user_list.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage bans user --help\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options for TOTP Operations\nDESCRIPTION: Lists all the options inherited from parent commands, including configuration file options, database connection parameters for MySQL, PostgreSQL, and SQLite, and encryption key settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_totp_import.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Security Documentation\nDESCRIPTION: Front matter metadata block that defines the documentation page properties including title, description, summary, date, and SEO settings for an Authelia security configuration guide.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/security/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Security\"\ndescription: \"Security Related Configuration\"\nsummary: \"An introduction into configuring the security settings.\"\ndate: 2022-06-15T17:51:47+10:00\ndraft: false\nimages: []\nweight: 104100\ntoc: true\nseo:\n  title: \"\" # custom title (optional)\n  description: \"\" # custom description (recommended)\n  canonical: \"\" # custom canonical URL (optional)\n  noindex: false # false (default) or true\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options for Authelia Storage Commands\nDESCRIPTION: Shows the options inherited from parent commands, including configuration settings and database connection parameters for MySQL, PostgreSQL, and SQLite.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_ip_revoke.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Executing Authelia Locales Generation Command\nDESCRIPTION: Basic command syntax for generating locales files using authelia-gen.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_locales.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-gen locales [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for authelia-gen docs cli\nDESCRIPTION: This snippet lists all the options inherited from parent commands. These options control various aspects of the documentation generation process, including directory paths, file locations, and version settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_cli.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Hugo Shortcode for Profile Details\nDESCRIPTION: A Hugo shortcode that renders profile details for Clément Michaud using the name parameter 'clement-michaud'.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributors/clement-michaud/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{< profile-details name=\"clement-michaud\" >}}\n```\n\n----------------------------------------\n\nTITLE: Using the authelia storage cache mds3 update Command\nDESCRIPTION: This command updates the WebAuthn MDS3 cache storage used by Authelia. It can be executed with optional flags to force an update or specify a file path as the data source.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_cache_mds3_update.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage cache mds3 update [flags]\n```\n\n----------------------------------------\n\nTITLE: Using Authelia Storage Cache Help Command\nDESCRIPTION: Example of how to access help for the storage cache command in Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_cache.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage cache --help\n```\n\n----------------------------------------\n\nTITLE: Ed25519 Certificate Command Example\nDESCRIPTION: Example showing how to access help for the related request command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_ed25519_generate.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto certificate ed25519 request --help\n```\n\n----------------------------------------\n\nTITLE: authelia-gen code Command Options\nDESCRIPTION: Available flags and options specific to the code command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_code.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for code\n```\n\n----------------------------------------\n\nTITLE: Accessing Authelia Scripts Help Documentation\nDESCRIPTION: Displays the help documentation for authelia-scripts, showing available commands and options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/reference-authelia-scripts.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts --help\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Lists all configuration options inherited from parent commands, including directory paths, file locations, and version control settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_json-schema_exports.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Hugo Frontmatter Configuration for Amir Zarrinkafsh Profile\nDESCRIPTION: YAML frontmatter configuration for a Hugo profile page. This configuration defines metadata such as title, description, date information, and SEO settings for Amir Zarrinkafsh's profile page.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributors/amir-zarrinkafsh/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Amir Zarrinkafsh\"\ndescription: \"Maintainer of Authelia.\"\nsummary: \"Maintainer of Authelia.\"\ndate: 2024-03-14T06:00:14+11:00\nlastmod: 2023-09-12T20:21:47+02:00\ndraft: false\navatar: \"\"\nseo:\n  title: \"\" # custom title (optional)\n  description: \"\" # custom description (recommended)\n  canonical: \"\" # custom canonical URL (optional)\n  noindex: false # false (default) or true\n---\n```\n\n----------------------------------------\n\nTITLE: Authelia Storage Bans Command Options\nDESCRIPTION: This snippet shows the available options for the 'authelia storage bans' command, including the help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for bans\n```\n\n----------------------------------------\n\nTITLE: Authelia Access Control Check Policy Usage Examples\nDESCRIPTION: These examples demonstrate various ways to use the 'authelia access-control check-policy' command with different parameters such as config file, URL, username, groups, HTTP method, and verbose output.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_access-control_check-policy.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nauthelia access-control check-policy --config config.yml --url https://example.com\nauthelia access-control check-policy --config config.yml --url https://example.com --username john\nauthelia access-control check-policy --config config.yml --url https://example.com --groups admin,public\nauthelia access-control check-policy --config config.yml --url https://example.com --username john --method GET\nauthelia access-control check-policy --config config.yml --url https://example.com --username john --method GET --verbose\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for Revoking IP Bans in Authelia\nDESCRIPTION: Shows the basic syntax for using the 'authelia storage bans ip revoke' command, which allows revoking IP bans in the regulation system.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_ip_revoke.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nauthelia storage bans ip revoke [ip] [flags]\n```\n\n----------------------------------------\n\nTITLE: Authelia: Generating X LDFlags\nDESCRIPTION: This code snippet illustrates the usage of the `authelia-scripts xflags` command. This command is used to generate the necessary X LDFlags required during the build process of Authelia. It showcases a basic example without any additional flags.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_xflags.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"authelia-scripts xflags\"\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Complete list of options inherited from parent commands that can be used with the user-database command, including directory configurations and various generator settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_json-schema_user-database.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Commit Message Footer Format in Text\nDESCRIPTION: Illustrates the format for the commit message footer, including how to document breaking changes, reference issues, and sign-off the commit.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/guidelines/commit-message.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nBREAKING CHANGE: <breaking change summary>\n<BLANK LINE>\n<breaking change description + migration instructions>\n<BLANK LINE>\n<BLANK LINE>\nFixes #<issue number>\n\nSigned-off-by: <AUTHOR>\n```\n\n----------------------------------------\n\nTITLE: Basic MDS3 Cache Dump Command\nDESCRIPTION: The basic command syntax for dumping WebAuthn MDS3 cache storage to a file.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_cache_mds3_dump.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage cache mds3 dump [flags]\n```\n\n----------------------------------------\n\nTITLE: Displaying Options for authelia-gen docs manage Command\nDESCRIPTION: This code snippet shows the available options for the 'authelia-gen docs manage' command. It includes the help option for displaying command usage information.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_manage.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for manage\n```\n\n----------------------------------------\n\nTITLE: Authelia Scripts Suite Setup Example\nDESCRIPTION: Example showing how to set up the Standalone test suite using the setup command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_suites_setup.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts suites setup Standalone\n```\n\n----------------------------------------\n\nTITLE: Displaying Authelia Crypto Certificate RSA Command Options\nDESCRIPTION: This snippet shows the available options for the 'authelia crypto certificate rsa' command, including the help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_rsa.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for rsa\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Shows additional options inherited from parent commands, including CI flag for Buildkite and log level configuration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_unittest.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --buildkite          Set CI flag for Buildkite\n      --log-level string   Set the log level for the command (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Executing Authelia Storage Bans Help Command\nDESCRIPTION: This command displays the help information for the 'authelia storage bans' command, showing its usage and available options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage bans --help\n```\n\n----------------------------------------\n\nTITLE: Command-specific options for authelia storage user totp delete\nDESCRIPTION: Options specific to the totp delete command. Currently only includes the help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_totp_delete.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for delete\n```\n\n----------------------------------------\n\nTITLE: Available Options for Ed25519 Key Pair Generation\nDESCRIPTION: Command-line options specific to the Ed25519 generation command, including directory specification, file naming options, and legacy format support.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_ed25519_generate.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -d, --directory string               directory where the generated keys, certificates, etc will be stored\n      --file.extension.legacy string   string to include before the actual extension as a sub-extension on the PKCS#1 and SECG1 legacy formats (default \"legacy\")\n      --file.private-key string        name of the file to export the private key data to (default \"private.pem\")\n      --file.public-key string         name of the file to export the public key data to (default \"public.pem\")\n  -h, --help                           help for generate\n      --legacy                         enables the output of the legacy PKCS#1 and SECG1 formats when enabled\n```\n\n----------------------------------------\n\nTITLE: Displaying Options for Authelia Scripts Docker Command in Bash\nDESCRIPTION: This snippet shows the available options for the authelia-scripts docker command, including the help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_docker.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for docker\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Authelia CI Script in Bash\nDESCRIPTION: These options are inherited from parent commands and can be used with the 'authelia-scripts ci' command to set CI flags and log levels.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_ci.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --buildkite          Set CI flag for Buildkite\n      --log-level string   Set the log level for the command (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Command Options for Authelia MDS3 Cache Management\nDESCRIPTION: Lists the specific options available for the 'mds3' subcommand. Currently only includes the help flag for displaying command usage information.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_cache_mds3.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for mds3\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Configuration options inherited from parent commands including directory paths, file locations, and version controls\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_github.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Available Options for Ed25519 Key Pair Operations\nDESCRIPTION: Lists the specific command-line options available for the Ed25519 key pair operations command, currently only showing the help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_ed25519.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for ed25519\n```\n\n----------------------------------------\n\nTITLE: Running authelia-scripts Help Command in Bash\nDESCRIPTION: This command displays the help information for the authelia-scripts utility, providing an overview of available options and subcommands.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts help\n```\n\n----------------------------------------\n\nTITLE: Authelia Debug Command Options in Bash\nDESCRIPTION: This snippet shows the available options for the 'authelia debug' command, including the help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_debug.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for debug\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Global flags inherited from parent commands, including buildkite CI flag and log level configuration options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_suites.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --buildkite          Set CI flag for Buildkite\n      --log-level string   Set the log level for the command (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Scrypt Hash Generation Help Command\nDESCRIPTION: Example showing how to access the help documentation for the scrypt hash generation command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate_scrypt.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto hash generate scrypt --help\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for TOTP Import\nDESCRIPTION: Shows the options specific to the import subcommand, which currently only includes the help flag for displaying command help.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_totp_import.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for import\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Shows configuration options inherited from parent commands that can be used with the Ed25519 key pair operations, including specifying configuration files and experimental filters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_ed25519.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Displaying authelia-scripts Options in Bash\nDESCRIPTION: This snippet shows the available options for the authelia-scripts command, including flags for Buildkite CI integration and log level configuration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --buildkite          Set CI flag for Buildkite\n  -h, --help               help for authelia-scripts\n      --log-level string   Set the log level for the command (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Authelia Scripts Docker Command in Bash\nDESCRIPTION: These options are inherited from parent commands and can be used with the docker command. They include setting CI flags for Buildkite and specifying log levels.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_docker.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --buildkite          Set CI flag for Buildkite\n      --log-level string   Set the log level for the command (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Example Usage of WebAuthn Verify Command\nDESCRIPTION: A simple example showing how to run the WebAuthn verification command without additional parameters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_webauthn_verify.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user webauthn verify\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Comprehensive list of command line options inherited from parent commands, including directory configurations, file paths, and version controls.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_manage_adr.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: User Database Command Options\nDESCRIPTION: Available options specific to the user-database command, showing only the help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_json-schema_user-database.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for user-database\n```\n\n----------------------------------------\n\nTITLE: Authelia Scripts Clean Help Option\nDESCRIPTION: This snippet displays the help option for the authelia-scripts clean command. The -h or --help flag provides information on how to use the command and its available options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_clean.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"  -h, --help   help for clean\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Authelia-Gen Docs Data Misc Command\nDESCRIPTION: This snippet shows the available options specific to the 'misc' subcommand.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_data_misc.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for misc\n```\n\n----------------------------------------\n\nTITLE: Ed25519 Certificate Request Command Example\nDESCRIPTION: An example showing how to access help information for the Ed25519 certificate request command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_ed25519_request.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto certificate ed25519 request --help\n```\n\n----------------------------------------\n\nTITLE: Using the authelia crypto pair ecdsa command\nDESCRIPTION: The basic syntax for the authelia crypto pair ecdsa command. This command allows performing ECDSA key pair cryptographic tasks in Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_ecdsa.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto pair ecdsa [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options - Authelia CLI\nDESCRIPTION: Comprehensive list of options inherited from parent commands, including directory configurations, file paths, and version controls.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_date.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Options for authelia storage migrate list-up command\nDESCRIPTION: Lists the specific options available for the list-up subcommand, which only includes the help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_migrate_list-up.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for list-up\n```\n\n----------------------------------------\n\nTITLE: Authelia Locales Inherited Command Options\nDESCRIPTION: Comprehensive list of options inherited from parent commands, including directory configurations, file paths, and version control settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_locales.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Options for authelia-gen commit-lint in Bash\nDESCRIPTION: Available command-specific options for the authelia-gen commit-lint command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_commit-lint.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for commit-lint\n```\n\n----------------------------------------\n\nTITLE: Command-specific options for the list subcommand\nDESCRIPTION: Lists the options specific to the 'list' subcommand. Currently, only the help flag is available.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_ip_list.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for list\n```\n\n----------------------------------------\n\nTITLE: Available Command Options for Template Command\nDESCRIPTION: Shows the help flag option available specifically for the template command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_config_template.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for template\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Additional options inherited from parent commands, including configuration file handling and password generation settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate_argon2.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --no-confirm                            skip the password confirmation prompt\n      --password string                       manually supply the password rather than using the terminal prompt\n      --random                                uses a randomly generated password\n      --random.characters string              sets the explicit characters for the random string\n      --random.charset string                 sets the charset for the random password, options are 'ascii', 'alphanumeric', 'alphabetic', 'numeric', 'numeric-hex', and 'rfc3986' (default \"alphanumeric\")\n      --random.length int                     sets the character length for the random string (default 72)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of the Authelia User Ban Revocation Command\nDESCRIPTION: Demonstrates how to get help for the authelia storage bans user revoke command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_user_revoke.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage bans user revoke --help\n```\n\n----------------------------------------\n\nTITLE: Database Migration Filename Format\nDESCRIPTION: Text format specification for database migration filenames including version number, name, engine type and direction.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/guidelines/style.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nV<version>.<name>.<engine>.<direction>.sql\n```\n\n----------------------------------------\n\nTITLE: Schema-Info Command Options\nDESCRIPTION: Lists the help option available specifically for the schema-info command.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_schema-info.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for schema-info\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Authelia Crypto Certificate Command\nDESCRIPTION: This snippet lists the options inherited from parent commands for the 'authelia crypto certificate' command. It includes options for specifying configuration files and applying filters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Executing Authelia Crypto Certificate RSA Help Command\nDESCRIPTION: This command displays the help information for the 'authelia crypto certificate rsa' subcommand, showing available options and usage instructions.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_rsa.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto certificate rsa --help\n```\n\n----------------------------------------\n\nTITLE: Executing Unit Tests with Authelia Scripts\nDESCRIPTION: Base command syntax for running unit tests with authelia-scripts. This command initiates the test suite execution.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_unittest.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts unittest [flags]\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command Options\nDESCRIPTION: Available command-specific flags for the docker build command, including container targeting options\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_docker_build.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --container string   target container among: dev, coverage (default \"dev\")\n  -h, --help               help for build\n```\n\n----------------------------------------\n\nTITLE: Using Hugo Shortcode for Profile Details\nDESCRIPTION: A Hugo shortcode that displays profile details for the user 'brynn-crowley'. The shortcode is used to render a profile component with specific user information.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributors/brynn-crowley/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{< profile-details name=\"brynn-crowley\" >}}\n```\n\n----------------------------------------\n\nTITLE: Complete Commit Message Example in Bash\nDESCRIPTION: Provides a full example of a properly formatted commit message that fixes a logging issue, including header, body, issue reference, and sign-off.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/guidelines/commit-message.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfix(logging): disable colored logging outputs when file is specified\n\nIn some scenarios if a user has a log_file_path specified and a TTY seems to be detected this causes terminal coloring outputs to be written to the file.\nThis in turn will cause issues when attempting to utilise the log with the provided fail2ban regexes.\n\nWe now override any TTY detection/logging treatments and disable coloring/removal of the timestamp when a user is utilising the text based logger to a file.\n\nFixes #1480.\n\nSigned-off-by: John Smith <jsmith@org.com>\n```\n\n----------------------------------------\n\nTITLE: ECDSA Key Pair Generation Options\nDESCRIPTION: This code block lists all available options for the ECDSA key pair generation command, including curve selection, output directory, file naming, and legacy format options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_pair_ecdsa_generate.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -b, --curve string                   Sets the elliptic curve which can be P224, P256, P384, or P521 (default \"P256\")\n  -d, --directory string               directory where the generated keys, certificates, etc will be stored\n      --file.extension.legacy string   string to include before the actual extension as a sub-extension on the PKCS#1 and SECG1 legacy formats (default \"legacy\")\n      --file.private-key string        name of the file to export the private key data to (default \"private.pem\")\n      --file.public-key string         name of the file to export the public key data to (default \"public.pem\")\n  -h, --help                           help for generate\n      --legacy                         enables the output of the legacy PKCS#1 and SECG1 formats when enabled\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Authelia Crypto Rand Command in Bash\nDESCRIPTION: This snippet shows the options inherited from parent commands. These options allow specifying configuration files and applying filters to all configuration files.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_rand.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Authelia Access Control Check Policy Inherited Options\nDESCRIPTION: This snippet shows options inherited from parent commands, including flags for specifying configuration files and experimental filters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_access-control_check-policy.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Authelia Scripts Clean Synopsis\nDESCRIPTION: This snippet shows the synopsis of the authelia-scripts clean command. It illustrates the basic structure and how to invoke the command with optional flags.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_clean.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"authelia-scripts clean [flags]\"\n```\n\n----------------------------------------\n\nTITLE: Usage Examples for Authelia Storage Migration Down\nDESCRIPTION: Examples showing how to use the storage migrate down command with different options, including targeting a specific version, using a config file, or providing database connection details directly.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_migrate_down.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage migrate down --target 20\nauthelia storage migrate down --target 20 --config config.yml\nauthelia storage migrate down --target 20 --encryption-key b3453fde-ecc2-4a1f-9422-2707ddbed495 --postgres.address tcp://postgres:5432 --postgres.password autheliapw\n```\n\n----------------------------------------\n\nTITLE: Authelia Scripts Suite Inherited Options\nDESCRIPTION: Additional options inherited from parent commands, including buildkite CI flag and log level configuration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_suites_setup.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --buildkite          Set CI flag for Buildkite\n      --log-level string   Set the log level for the command (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Access Control Rule: Compact with Omitted Level YAML List of List Objects\nDESCRIPTION: This YAML snippet demonstrates a compact configuration with an omitted level for a list of list objects in an access control rule. This mirrors the previous rules with the key named `value`.  This format should only be used for the configuration item type `list(list(object))`, see [List of Lists](#list-of-lists) if you're not looking for a `list(list(object))`\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/rule-operators.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml {title=\"configuration.yml\"}\nrule:\n  - ['a', 'b']\n  - 'c'\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Authelia Crypto Help Command in Bash\nDESCRIPTION: This command displays the help information for the 'authelia crypto' command, showing available options and usage instructions.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto --help\n```\n\n----------------------------------------\n\nTITLE: Basic Unit Test Example\nDESCRIPTION: Simple example showing how to run unit tests without any additional flags or options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_unittest.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts unittest\n```\n\n----------------------------------------\n\nTITLE: Examples of authelia storage user totp delete usage\nDESCRIPTION: Examples showing different ways to use the authelia storage user totp delete command, including basic usage, specifying a config file, and passing database connection parameters directly.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_totp_delete.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage user totp delete john\nauthelia storage user totp delete john --config config.yml\nauthelia storage user totp delete john --encryption-key b3453fde-ecc2-4a1f-9422-2707ddbed495 --postgres.address tcp://postgres:5432 --postgres.password autheliapw\n```\n\n----------------------------------------\n\nTITLE: Executing Docker Push-Manifest Command in Authelia Scripts\nDESCRIPTION: This command pushes Authelia docker manifests to Docker registries. It doesn't require any additional flags but inherits options from parent commands.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_docker_push-manifest.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts docker push-manifest [flags]\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Specific Authelia Scripts Commands\nDESCRIPTION: Displays help documentation for the main authelia-scripts command and for specific subcommands.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/development/reference-authelia-scripts.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts --help\n```\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts build --help\n```\n\n----------------------------------------\n\nTITLE: Migration Command Examples\nDESCRIPTION: Examples showing different ways to use the migration command, including basic usage, config file specification, target version specification, and using encryption keys with PostgreSQL.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_migrate_up.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage migrate up\nauthelia storage migrate up --config config.yml\nauthelia storage migrate up --target 20 --config config.yml\nauthelia storage migrate up --encryption-key b3453fde-ecc2-4a1f-9422-2707ddbed495 --postgres.address tcp://postgres:5432 --postgres.password autheliapw\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Authelia Storage Cache Command\nDESCRIPTION: Lists all options inherited from parent commands that can be used with the 'storage cache' command, including configuration, encryption, and database connection options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_cache.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Basic GitHub Generation Command\nDESCRIPTION: The basic command syntax for generating GitHub files using authelia-gen\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_github.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-gen github [flags]\n```\n\n----------------------------------------\n\nTITLE: Available Options for Authelia Scripts Docker Push-Manifest\nDESCRIPTION: This snippet shows the available options specific to the push-manifest command, which only includes a help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_docker_push-manifest.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for push-manifest\n```\n\n----------------------------------------\n\nTITLE: FreeIPA Group Filter\nDESCRIPTION: This LDAP filter searches for groups in FreeIPA. It checks for group membership based on the distinguished name and verifies that the object class is groupOfNames. It is designed to find standard groups the user is a member of.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/ldap.md#2025-04-21_snippet_6\n\nLANGUAGE: LDAP\nCODE:\n```\n\"(&(member={dn})(objectClass=groupOfNames))\"\n```\n\n----------------------------------------\n\nTITLE: Inherited Global Options\nDESCRIPTION: Command-line options inherited from parent commands that can be used with bootstrap.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_bootstrap.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --buildkite          Set CI flag for Buildkite\n      --log-level string   Set the log level for the command (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Authelia Storage Bans User List Command\nDESCRIPTION: This code block lists the options inherited from parent commands, including configuration file settings and database connection parameters for MySQL, PostgreSQL, and SQLite.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_user_list.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Using authelia-gen code Command\nDESCRIPTION: Basic usage of the authelia-gen code command with syntax and flags.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_code.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-gen code [flags]\n```\n\n----------------------------------------\n\nTITLE: Executing Authelia Scripts Docker Command in Bash\nDESCRIPTION: This command is used to run docker-related operations for Authelia. It provides options for building and publishing docker images. The command can be run with additional flags for help or to set log levels.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_docker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts docker [flags]\n```\n\n----------------------------------------\n\nTITLE: TLS Configuration Structure\nDESCRIPTION: Complete example of TLS configuration structure including server name, verification settings, TLS versions, and certificate settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/prologue/common.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntls:\n  server_name: 'example.com'\n  skip_verify: false\n  minimum_version: 'TLS1.2'\n  maximum_version: 'TLS1.3'\n  certificate_chain: |\n    -----BEGIN CERTIFICATE-----\n    ...\n    -----END CERTIFICATE-----\n    -----BEGIN CERTIFICATE-----\n    ...\n    -----END CERTIFICATE-----\n  private_key: |\n    -----BEGIN PRIVATE KEY-----\n    ...\n    -----END PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Authelia Scripts Docker Commands\nDESCRIPTION: These options are inherited from parent commands and can be used with the push-manifest command, including CI flag setting and log level configuration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_docker_push-manifest.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --buildkite          Set CI flag for Buildkite\n      --log-level string   Set the log level for the command (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Lists the options that are inherited from parent commands, including configuration file specification and experimental filters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Executing Authelia-Gen Docs JSON-Schema Configuration Command\nDESCRIPTION: This command generates a JSON schema for Authelia's configuration. It can be run with optional flags for customization.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_json-schema_configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-gen docs json-schema configuration [flags]\n```\n\n----------------------------------------\n\nTITLE: ADR Add Command Options\nDESCRIPTION: Lists the available flags for configuring ADR attributes like title, status, context, decision, and consequences.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_manage_adr_add.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n      --consequences string      sets the consequences of the record\n      --context string           sets the context of the record\n      --decision string          sets the decision of the record\n  -h, --help                     help for add\n      --proposed-design string   sets the proposed design of the record\n      --related-adrs ints        sets the related adrs of the record\n      --status string            sets the status of the record\n      --title string             sets the title of the record\n```\n\n----------------------------------------\n\nTITLE: Setting File Permissions for Authelia (Write Access)\nDESCRIPTION: This shell script sets the ownership and permissions for Authelia files, granting write access to a specific user and group.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/overview/security/measures.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nchown -r 8000:9000 .data/authelia\nfind .data/authelia/ -type d -exec chmod 770 {} \\;\nfind .data/authelia/ -type f -exec chmod 660 {} \\;\n```\n\n----------------------------------------\n\nTITLE: Generating Random Client ID on Bare-Metal\nDESCRIPTION: Command to generate a 72-character client identifier using RFC3986 unreserved characters in a bare-metal environment. Ensures unique and URL-safe client identifiers.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/frequently-asked-questions.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia crypto rand --length 72 --charset rfc3986\n```\n\n----------------------------------------\n\nTITLE: Inherited WebAuthn Command Options in Authelia\nDESCRIPTION: Options inherited from parent commands that can be used with the WebAuthn verify command, including configuration file options, encryption key settings, and database connection parameters for MySQL, PostgreSQL, and SQLite.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_user_webauthn_verify.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --encryption-key string                 the storage encryption key to use\n      --mysql.address string                  the MySQL server address (default \"tcp://127.0.0.1:3306\")\n      --mysql.database string                 the MySQL database name (default \"authelia\")\n      --mysql.password string                 the MySQL password\n      --mysql.username string                 the MySQL username (default \"authelia\")\n      --postgres.address string               the PostgreSQL server address (default \"tcp://127.0.0.1:5432\")\n      --postgres.database string              the PostgreSQL database name (default \"authelia\")\n      --postgres.password string              the PostgreSQL password\n      --postgres.schema string                the PostgreSQL schema name (default \"public\")\n      --postgres.username string              the PostgreSQL username (default \"authelia\")\n      --sqlite.path string                    the SQLite database path\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options - Authelia Gen Docs Data Keys\nDESCRIPTION: Options inherited from parent commands including directory configurations, file paths, and version controls.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_data_keys.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Executing TOTP JSON Schema Export Command\nDESCRIPTION: The basic command syntax for generating TOTP export JSON schema documentation.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_json-schema_exports_totp.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-gen docs json-schema exports totp [flags]\n```\n\n----------------------------------------\n\nTITLE: IP Ban Command Options\nDESCRIPTION: Available options for customizing IP bans including duration, permanence, and reason flags.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_ip_add.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -d, --duration string   the duration for the ban (default \"1 day\")\n  -h, --help              help for add\n  -p, --permanent         makes the ban effectively permanent\n  -r, --reason string     includes a reason for the ban\n```\n\n----------------------------------------\n\nTITLE: Executing Authelia Storage Bans IP Command Help\nDESCRIPTION: This command displays the help information for the 'authelia storage bans ip' command, showing its usage and available options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_bans_ip.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage bans ip --help\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Lists all options inherited from parent commands including directory configurations, file paths, and version controls for the OpenID Connect generator.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_misc_oidc.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Bug Report Command Options\nDESCRIPTION: Available options specific to the bug-report command, currently only including the help flag.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_github_issue-templates_bug-report.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for bug-report\n```\n\n----------------------------------------\n\nTITLE: Using the Authelia-Gen Docs Data Command\nDESCRIPTION: Basic syntax for running the authelia-gen docs data command to generate documentation data files.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_data.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-gen docs data [flags]\n```\n\n----------------------------------------\n\nTITLE: Running Authelia JSON Schema Export Generation Command\nDESCRIPTION: The base command for generating JSON schema documentation for various Authelia exports. Takes optional flags for configuration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_docs_json-schema_exports.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-gen docs json-schema exports [flags]\n```\n\n----------------------------------------\n\nTITLE: Available Options for Authelia Storage Cache Command\nDESCRIPTION: Lists the options specific to the 'storage cache' command. Currently only shows the help option.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_cache.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for cache\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for authelia-gen misc Command\nDESCRIPTION: This snippet lists the options inherited from parent commands. These options include various directory and file path configurations, exclusion settings, version controls, and package naming options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_misc.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Command Example\nDESCRIPTION: Example showing how to run the bootstrap command without any flags.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_bootstrap.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia-scripts bootstrap\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Authelia-Gen Code Server Command in Bash\nDESCRIPTION: Lists the options inherited from parent commands. These include various directory and file path configurations, exclusion settings, and version control options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_code_server.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Parent Command Options for Authelia Crypto Hash Generate\nDESCRIPTION: Lists options inherited from parent commands, including configuration file settings and password input methods.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate_pbkdf2.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --no-confirm                            skip the password confirmation prompt\n      --password string                       manually supply the password rather than using the terminal prompt\n      --random                                uses a randomly generated password\n      --random.characters string              sets the explicit characters for the random string\n      --random.charset string                 sets the charset for the random password, options are 'ascii', 'alphanumeric', 'alphabetic', 'numeric', 'numeric-hex', and 'rfc3986' (default \"alphanumeric\")\n      --random.length int                     sets the character length for the random string (default 72)\n```\n\n----------------------------------------\n\nTITLE: MDS3 Cache Dump Command Options\nDESCRIPTION: Available command-specific options for the dump operation, including help flag and output path configuration.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_cache_mds3_dump.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help          help for dump\n      --path string   the path to save the dumped mds3 data blob (default \"data.mds3\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextcloud for Authelia OpenID Connect User Backend in PHP\nDESCRIPTION: This PHP snippet illustrates how to configure Nextcloud to utilize Authelia as an OpenID Connect provider by editing configuration details specific to the user backend application, such as the discovery endpoint.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/nextcloud/index.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// To configure [Nextcloud] to utilize Authelia as an [OpenID Connect 1.0] Provider:\n1. Install the [Nextcloud OpenID Connect user backend app]\n2. Edit the 'OpenID Connect' configuration:\n// Identifier: 'Authelia'\n// Client ID: 'nextcloud'\n// Client secret: 'insecure_secret'\n// Discovery endpoint: 'https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/.well-known/openid-configuration'\n// Scope: openid email profile\n\n```\n\n----------------------------------------\n\nTITLE: Unix Socket Connection to MySQL/MariaDB\nDESCRIPTION: Example showing how to configure a Unix socket connection to a MySQL/MariaDB server.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/storage/mysql.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  mysql:\n    address: 'unix:///var/run/mysqld.sock'\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Additional configuration options inherited from parent commands including config file paths, experimental filters, password handling, and random password generation settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate_scrypt.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --no-confirm                            skip the password confirmation prompt\n      --password string                       manually supply the password rather than using the terminal prompt\n      --random                                uses a randomly generated password\n      --random.characters string              sets the explicit characters for the random string\n      --random.charset string                 sets the charset for the random password, options are 'ascii', 'alphanumeric', 'alphabetic', 'numeric', 'numeric-hex', and 'rfc3986' (default \"alphanumeric\")\n      --random.length int                     sets the character length for the random string (default 72)\n```\n\n----------------------------------------\n\nTITLE: Setting Flow Environment Variable in Bash\nDESCRIPTION: This bash command sets the FLOWER_OAUTH2_AUTHELIA_BASE_URL environment variable to the Authelia Root URL. Ensure this variable is exported on all relevant server instances.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/netbird/index.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport FLOWER_OAUTH2_AUTHELIA_BASE_URL=https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\n\n```\n\n----------------------------------------\n\nTITLE: NetBird Management JSON Configuration\nDESCRIPTION: This JSON snippet contains necessary NetBird management configuration for properly integrating with Authelia via OpenID Connect, including authorization and token endpoints.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/netbird/index.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"HttpConfig\": {\n    \"AuthIssuer\": \"https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}\",\n    \"AuthAudience\": \"netbird\",\n    \"AuthKeysLocation\": \"https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/jwks.json\",\n    \"AuthUserIDClaim\": \"\",\n    \"CertFile\": \"\",\n    \"CertKey\": \"\",\n    \"IdpSignKeyRefreshEnabled\": true,\n    \"OIDCConfigEndpoint\": \"https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/.well-known/openid-configuration\"\n  },\n  \"IdpManagerConfig\": {},\n  \"DeviceAuthorizationFlow\": {},\n  \"PKCEAuthorizationFlow\": {\n    \"ProviderConfig\": {\n      \"Audience\": \"netbird\",\n      \"ClientID\": \"netbird\",\n      \"ClientSecret\": \"insecure_secret\",\n      \"Domain\": \"\",\n      \"AuthorizationEndpoint\": \"https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc/authorization\",\n      \"TokenEndpoint\": \"https://{{< sitevar name=\"subdomain-authelia\" nojs=\"auth\" >}}.{{< sitevar name=\"domain\" nojs=\"example.com\" >}}/api/oidc/token\",\n      \"Scope\": \"openid email profile\",\n      \"RedirectURLs\": [\n        \"http://localhost:53000\"\n      ],\n      \"UseIDToken\": true\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Additional options inherited from parent commands including configuration settings and password generation options\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate_sha2crypt.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --no-confirm                            skip the password confirmation prompt\n      --password string                       manually supply the password rather than using the terminal prompt\n      --random                                uses a randomly generated password\n      --random.characters string              sets the explicit characters for the random string\n      --random.charset string                 sets the charset for the random password, options are 'ascii', 'alphanumeric', 'alphabetic', 'numeric', 'numeric-hex', and 'rfc3986' (default \"alphanumeric\")\n      --random.length int                     sets the character length for the random string (default 72)\n```\n\n----------------------------------------\n\nTITLE: Actual Budget Configuration in JSON\nDESCRIPTION: This JSON snippet illustrates the configuration needed in Actual Budget to utilize OpenID Connect with Authelia. It includes fields for issuer, client ID, client secret, and authentication method.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/actual-budget/index.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"openId\": {\n    \"issuer\": \"https://{{< sitevar name=\\\"subdomain-authelia\\\" nojs=\\\"auth\\\" >}}.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}\",\n    \"client_id\": \"actual-budget\",\n    \"client_secret\": \"insecure_secret\",\n    \"server_hostname\": \"https://actual-budget.{{< sitevar name=\\\"domain\\\" nojs=\\\"example.com\\\" >}}\",\n    \"authMethod\": \"oauth2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Express.js Project Initialization\nDESCRIPTION: These commands initialize a new Node.js project and install the necessary dependencies, including Express.js and the express-openid-connect library. This prepares the environment for building the Express.js application.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/openid-connect/expressjs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nmkdir authelia-example && cd authelia-example && npm init -y && npm install express express-openid-connect\n```\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Additional options inherited from parent commands that can be used with the bcrypt command. These include configuration file specification, password input methods, and random password generation parameters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_hash_generate_bcrypt.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n      --no-confirm                            skip the password confirmation prompt\n      --password string                       manually supply the password rather than using the terminal prompt\n      --random                                uses a randomly generated password\n      --random.characters string              sets the explicit characters for the random string\n      --random.charset string                 sets the charset for the random password, options are 'ascii', 'alphanumeric', 'alphabetic', 'numeric', 'numeric-hex', and 'rfc3986' (default \"alphanumeric\")\n      --random.length int                     sets the character length for the random string (default 72)\n```\n\n----------------------------------------\n\nTITLE: Configuration Documentation Icon Template in HTML\nDESCRIPTION: HTML template for displaying configuration key documentation with type, default value and required status information.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributing/guidelines/style.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{< print \"{{< confkey type=\\\"string\\\" default=\\\"none\\\" required=\\\"no\\\" >}}\" >}}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Debug Configuration (Bash)\nDESCRIPTION: This bash command allows you to run your existing compose file with an additional debug configuration. It uses the `-f` flag to specify multiple compose files, enabling debugging features defined in `compose.debug.yml` while still using the main configuration in `compose.yml`.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/integration/deployment/docker.md#2025-04-21_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\ndocker compose up -f compose.yml -f compose.debug.yml -d\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Ed25519 Certificate Command\nDESCRIPTION: Options inherited from parent commands that can be used with the Ed25519 certificate request command, including configuration file specification and experimental filters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_ed25519_request.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Profiles in HTML Table\nDESCRIPTION: HTML markup for displaying individual contributor information including avatar, name, and contribution badges\nSOURCE: https://github.com/authelia/authelia/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mardom1\"><img src=\"https://avatars.githubusercontent.com/u/32371724?v=4?s=100\" width=\"100px;\" alt=\"Marcel Marquardt\"/><br /><sub><b>Marcel Marquardt</b></sub></a><br /><a href=\"https://github.com/authelia/authelia/issues?q=author%3Amardom1\" title=\"Bug reports\">🐛</a></td>\n```\n\n----------------------------------------\n\nTITLE: Profile Details Shortcode in Markdown\nDESCRIPTION: A Hugo shortcode that renders profile details for James Elliott. It uses the 'profile-details' shortcode with the name parameter set to 'james-elliott'.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributors/james-elliott/_index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{< profile-details name=\"james-elliott\" >}}\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Options inherited from parent commands, including configuration file specifications and experimental filters.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_crypto_certificate_ed25519_generate.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  -c, --config strings                        configuration files or directories to load, for more information run 'authelia -h authelia config' (default [configuration.yml])\n      --config.experimental.filters strings   list of filters to apply to all configuration files, for more information run 'authelia -h authelia filters'\n```\n\n----------------------------------------\n\nTITLE: Contributor HTML Snippet\nDESCRIPTION: This HTML snippet displays a contributor's avatar, name, and links to their contributions on GitHub. It uses a table structure to organize the contributor information.\nSOURCE: https://github.com/authelia/authelia/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n\"<td align=\\\"center\\\" valign=\\\"top\\\" width=\\\"14.28%\\\"><a href=\\\"https://t.me/daniw1337\\\"><img src=\\\"https://avatars.githubusercontent.com/u/21097466?v=4?s=100\\\" width=\\\"100px;\\\" alt=\\\"Dani\\\"/><br /><sub><b>Dani</b></sub></a><br /><a href=\\\"https://github.com/authelia/authelia/commits?author=DaniW42\\\" title=\\\"Documentation\\\">📖</a></td>\"\n```\n\n----------------------------------------\n\nTITLE: Before: Basic Session Configuration in Authelia\nDESCRIPTION: The original session configuration with a single domain setup using basic parameters like session name, domain, timeout settings, and a default redirection URL.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/blog/release-notes-4.38/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_redirection_url: 'https://www.example.com'\nsession:\n  name: 'authelia_session'\n  domain: 'example.com'\n  same_site: 'lax'\n  secret: 'insecure_session_secret'\n  expiration: '1h'\n  inactivity: '5m'\n  remember_me_duration: '1M'\n```\n\n----------------------------------------\n\nTITLE: Authelia Scripts Options Inherited\nDESCRIPTION: This snippet shows the options inherited from parent commands for the authelia-scripts clean command. These options configure CI buildkite and the log level.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-scripts/authelia-scripts_clean.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"      --buildkite          Set CI flag for Buildkite\n      --log-level string   Set the log level for the command (default \\\"info\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Profile Page Frontmatter Configuration in YAML for Hugo\nDESCRIPTION: YAML frontmatter configuration for a Hugo profile page. It includes metadata such as title, description, summary, dates, draft status, and SEO settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/contributors/brynn-crowley/_index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Brynn Crowley\"\ndescription: \"Maintainer of Authelia.\"\nsummary: \"Maintainer of Authelia.\"\ndate: 2024-03-14T06:00:14+11:00\nlastmod: 2024-11-09T06:00:14+11:00\ndraft: false\navatar: \"\"\nseo:\n  title: \"\" # custom title (optional)\n  description: \"\" # custom description (recommended)\n  canonical: \"\" # custom canonical URL (optional)\n  noindex: false # false (default) or true\n---\n```\n\n----------------------------------------\n\nTITLE: Contributor HTML Snippet\nDESCRIPTION: This HTML snippet displays a contributor's avatar, name, and links to their contributions on GitHub. It uses a table structure to organize the contributor information. This entry includes links to Code, Bug reports, and Tests.\nSOURCE: https://github.com/authelia/authelia/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n\"<td align=\\\"center\\\" valign=\\\"top\\\" width=\\\"14.28%\\\"><a href=\\\"https://lhns.de\\\"><img src=\\\"https://avatars.githubusercontent.com/u/1524059?v=4?s=100\\\" width=\\\"100px;\\\" alt=\\\"Pierre Kisters\\\"/><br /><sub><b>Pierre Kisters</b></sub></a><br /><a href=\\\"https://github.com/authelia/authelia/commits?author=lhns\\\" title=\\\"Code\\\">💻</a> <a href=\\\"https://github.com/authelia/authelia/issues?q=author%3Alhns\\\" title=\\\"Bug reports\\\">🐛</a> <a href=\\\"https://github.com/authelia/authelia/commits?author=lhns\\\" title=\\\"Tests\\\">⚠️</a></td>\"\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for authelia-gen commands in Bash\nDESCRIPTION: Options inherited from parent commands that can be used with the commit-lint subcommand, including directory configurations, file paths, and version settings.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_commit-lint.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Miscellaneous Options in Authelia (YAML)\nDESCRIPTION: Basic configuration example showing certificates directory, default redirection URL, and theme settings for Authelia.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/configuration/miscellaneous/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncertificates_directory: '/config/certs/'\ndefault_redirection_url: 'https://home.example.com:8080/'\ntheme: 'light'\n```\n\n----------------------------------------\n\nTITLE: Generating Random Alphanumeric String with Linux Commands\nDESCRIPTION: Uses basic Linux commands to generate a random alphanumeric string of specified length.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/guides/generating-secure-values.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nLENGTH=64\ntr -cd '[:alnum:]' < /dev/urandom | fold -w \"${LENGTH}\" | head -n 1 | tr -d '\\n' ; echo\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Global options that apply to all authelia-gen commands, including directory configurations, file paths, and behavior modifiers.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia-gen/authelia-gen_code.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  -C, --cwd string                                                 Sets the CWD for git commands\n      --dir.authentication string                                  The authentication directory in relation to the root (default \"internal/authentication\")\n      --dir.docs string                                            The directory with the docs (default \"docs\")\n      --dir.docs.adr string                                        The directory with the ADR data (default \"reference/architecture-decision-log\")\n      --dir.docs.cli-reference string                              The directory to store the markdown in (default \"reference/cli\")\n      --dir.docs.content string                                    The directory with the docs content (default \"content\")\n      --dir.docs.data string                                       The directory with the docs data (default \"data\")\n      --dir.docs.static string                                     The directory with the docs static files (default \"static\")\n      --dir.docs.static.json-schemas string                        The directory with the docs static JSONSchema files (default \"schemas\")\n      --dir.locales string                                         The locales directory in relation to the root (default \"internal/server/locales\")\n  -d, --dir.root string                                            The repository root (default \"./\")\n      --dir.schema string                                          The schema directory in relation to the root (default \"internal/configuration/schema\")\n      --dir.web string                                             The repository web directory in relation to the root directory (default \"web\")\n  -X, --exclude strings                                            Sets the names of excluded generators\n      --file.bug-report string                                     Sets the path of the bug report issue template file (default \".github/ISSUE_TEMPLATE/bug-report.yml\")\n      --file.commit-lint-config string                             The commit lint javascript configuration file in relation to the root (default \".commitlintrc.cjs\")\n      --file.configuration-keys string                             Sets the path of the keys file (default \"internal/configuration/schema/keys.go\")\n      --file.docs-commit-msg-guidelines string                     The commit message guidelines documentation file in relation to the root (default \"docs/content/contributing/guidelines/commit-message.md\")\n      --file.docs.data.keys string                                 Sets the path of the docs keys file (default \"configkeys.json\")\n      --file.docs.data.languages string                            The languages docs data file in relation to the docs data folder (default \"languages.json\")\n      --file.docs.data.misc string                                 The misc docs data file in relation to the docs data folder (default \"misc.json\")\n      --file.docs.static.json-schemas.configuration string         Sets the path of the configuration JSONSchema (default \"configuration\")\n      --file.docs.static.json-schemas.exports.identifiers string   Sets the path of the identifiers export JSONSchema (default \"exports.identifiers\")\n      --file.docs.static.json-schemas.exports.totp string          Sets the path of the TOTP export JSONSchema (default \"exports.totp\")\n      --file.docs.static.json-schemas.exports.webauthn string      Sets the path of the WebAuthn export JSONSchema (default \"exports.webauthn\")\n      --file.docs.static.json-schemas.user-database string         Sets the path of the user database JSONSchema (default \"user-database\")\n      --file.feature-request string                                Sets the path of the feature request issue template file (default \".github/ISSUE_TEMPLATE/feature-request.yml\")\n      --file.scripts.gen string                                    Sets the path of the authelia-scripts gen file (default \"cmd/authelia-scripts/cmd/gen.go\")\n      --file.server.generated string                               Sets the path of the server generated file (default \"internal/server/gen.go\")\n      --file.web.i18n string                                       The i18n typescript configuration file in relation to the web directory (default \"src/i18n/index.ts\")\n      --file.web.package string                                    The node package configuration file in relation to the web directory (default \"package.json\")\n      --latest                                                     Enables latest functionality with several generators like the JSON Schema generator\n      --next                                                       Enables next functionality with several generators like the JSON Schema generator\n      --package.configuration.keys string                          Sets the package name of the keys file (default \"schema\")\n      --package.scripts.gen string                                 Sets the package name of the authelia-scripts gen file (default \"cmd\")\n      --version-count int                                          the maximum number of minor versions to list in output templates (default 5)\n      --versions strings                                           The versions to run the generator for, the special versions current and next are mutually exclusive\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Authelia Storage Encryption Check Command\nDESCRIPTION: Various examples of using the authelia storage encryption check command with different flags and configuration options.\nSOURCE: https://github.com/authelia/authelia/blob/master/docs/content/reference/cli/authelia/authelia_storage_encryption_check.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nauthelia storage encryption check\nauthelia storage encryption check --verbose\nauthelia storage encryption check --verbose --config config.yml\nauthelia storage encryption check --verbose --encryption-key b3453fde-ecc2-4a1f-9422-2707ddbed495 --postgres.address tcp://postgres:5432 --postgres.password autheliapw\n```"
  }
]