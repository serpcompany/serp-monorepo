[
  {
    "owner": "reduxjs",
    "repo": "react-redux",
    "content": "TITLE: Setting Up Redux Provider with React\nDESCRIPTION: Demonstrates how to wrap an entire application with the Redux Provider component to make the store available throughout the component tree.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/hooks.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining useSelector Hook Signature\nDESCRIPTION: Shows the function signature of the useSelector hook, which extracts data from the Redux store state using a selector function.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/hooks.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst result: any = useSelector(selector: Function, equalityFn?: Function)\n```\n\n----------------------------------------\n\nTITLE: Setting up Provider Component in React\nDESCRIPTION: Example of wrapping a React application with the Provider component from React Redux. This makes the Redux store available to all components in the app hierarchy.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/introduction/quick-start.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport App from './App'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing React Redux Provider Setup\nDESCRIPTION: Shows how to set up the Redux Provider component to make the store available throughout a React application. The code wraps the main TodoApp component with Provider and passes the Redux store as a prop.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/introduction/basic-tutorial.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// index.js\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport TodoApp from './TodoApp'\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <TodoApp />\n  </Provider>,\n  rootElement,\n)\n```\n\n----------------------------------------\n\nTITLE: Using Redux State and Actions in React Components\nDESCRIPTION: Creates a Counter component that uses useSelector to read data from the Redux store and useDispatch to dispatch actions. This component renders buttons to increment and decrement the counter value.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/quick-start.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { decrement, increment } from './counterSlice'\nimport styles from './Counter.module.css'\n\nexport function Counter() {\n  const count = useSelector((state) => state.counter.value)\n  const dispatch = useDispatch()\n\n  return (\n    <div>\n      <div>\n        <button\n          aria-label=\"Increment value\"\n          onClick={() => dispatch(increment())}\n        >\n          Increment\n        </button>\n        <span>{count}</span>\n        <button\n          aria-label=\"Decrement value\"\n          onClick={() => dispatch(decrement())}\n        >\n          Decrement\n        </button>\n      </div>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Complete AddTodo Component with Redux Connection\nDESCRIPTION: Full implementation of the AddTodo component with React Redux integration, including state management, event handlers for input updates and todo addition, and proper connection to the Redux store.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/introduction/basic-tutorial.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// components/AddTodo.js\n\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../redux/actions'\n\nclass AddTodo extends React.Component {\n  // ...\n\n  handleAddTodo = () => {\n    // dispatches actions to add todo\n    this.props.addTodo(this.state.input)\n\n    // sets state back to empty string\n    this.setState({ input: '' })\n  }\n\n  render() {\n    return (\n      <div>\n        <input\n          onChange={(e) => this.updateInput(e.target.value)}\n          value={this.state.input}\n        />\n        <button className=\"add-todo\" onClick={this.handleAddTodo}>\n          Add Todo\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default connect(null, { addTodo })(AddTodo)\n```\n\n----------------------------------------\n\nTITLE: Basic useSelector Usage Pattern\nDESCRIPTION: A simple example of using the useSelector hook to extract a counter value from the Redux store state within a functional component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/hooks.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useSelector } from 'react-redux'\n\nexport const CounterComponent = () => {\n  const counter = useSelector((state) => state.counter)\n  return <div>{counter}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Hooks in a Counter Component\nDESCRIPTION: Example of using useSelector and useDispatch hooks to interact with Redux store in a Counter component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/introduction/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  decrement,\n  increment,\n  incrementByAmount,\n  incrementAsync,\n  selectCount,\n} from './counterSlice'\nimport styles from './Counter.module.css'\n\nexport function Counter() {\n  const count = useSelector(selectCount)\n  const dispatch = useDispatch()\n\n  return (\n    <div>\n      <div className={styles.row}>\n        <button\n          className={styles.button}\n          aria-label=\"Increment value\"\n          onClick={() => dispatch(increment())}\n        >\n          +\n        </button>\n        <span className={styles.value}>{count}</span>\n        <button\n          className={styles.button}\n          aria-label=\"Decrement value\"\n          onClick={() => dispatch(decrement())}\n        >\n          -\n        </button>\n      </div>\n      {/* omit additional rendering output here */}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useSelector Hook Usage\nDESCRIPTION: Demonstrates basic usage of the useSelector hook to extract and display the counter value from Redux state.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/hooks.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useSelector } from 'react-redux'\n\nexport const CounterComponent = () => {\n  const counter = useSelector((state) => state.counter)\n  return <div>{counter}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Redux with UI - Core Steps\nDESCRIPTION: The fundamental steps required to integrate Redux with any UI layer, which React Redux handles automatically. These steps include store creation, subscription management, state updates, and action dispatching.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/introduction/why-use-react-redux.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n1. Create a Redux store\n2. Subscribe to updates\n3. Inside the subscription callback:\n   1. Get the current store state\n   2. Extract the data needed by this piece of UI\n   3. Update the UI with the data\n4. If necessary, render the UI with initial state\n5. Respond to UI inputs by dispatching Redux actions\n```\n\n----------------------------------------\n\nTITLE: Setting up Redux Provider\nDESCRIPTION: Example showing how to wrap a React application with Redux Provider component to make the store available throughout the app. Demonstrates basic Redux store integration with React.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/introduction/quick-start.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport App from './App'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Provider for React Redux Hooks in JSX\nDESCRIPTION: Configures the Redux store and wraps the application in a Provider component to make the store accessible throughout the component tree. This is a required setup before using any React Redux hooks.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/hooks.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n```\n\n----------------------------------------\n\nTITLE: Providing Redux Store to React Application using Provider Component\nDESCRIPTION: This code shows how to make a Redux store available to a React application by wrapping the root component with the Provider component from react-redux. The Provider component takes the store as a prop and makes it accessible to all connected components.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/introduction/basic-tutorial.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// index.js\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport TodoApp from './TodoApp'\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <TodoApp />\n  </Provider>,\n  rootElement,\n)\n```\n\n----------------------------------------\n\nTITLE: Basic useDispatch Hook Usage with React-Redux\nDESCRIPTION: Demonstrates basic usage of useDispatch hook in a counter component to dispatch actions to Redux store. Shows simple component structure with direct dispatch call.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/hooks.md#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useDispatch } from 'react-redux'\n\nexport const CounterComponent = ({ value }) => {\n  const dispatch = useDispatch()\n\n  return (\n    <div>\n      <span>{value}</span>\n      <button onClick={() => dispatch({ type: 'increment-counter' })}>\n        Increment counter\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Memoized Selectors with Props\nDESCRIPTION: Demonstrates how to use memoized selectors with useSelector when the selector also depends on component props, showing proper patterns for maintaining selector memoization.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/hooks.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useSelector } from 'react-redux'\nimport { createSelector } from 'reselect'\n\nconst selectCompletedTodosCount = createSelector(\n  (state) => state.todos,\n  (_, completed) => completed,\n  (todos, completed) =>\n    todos.filter((todo) => todo.completed === completed).length,\n)\n\nexport const CompletedTodosCount = ({ completed }) => {\n  const matchingCount = useSelector((state) =>\n    selectCompletedTodosCount(state, completed),\n  )\n\n  return <div>{matchingCount}</div>\n}\n\nexport const App = () => {\n  return (\n    <>\n      <span>Number of done todos:</span>\n      <CompletedTodosCount completed={true} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Redux Provider in React application\nDESCRIPTION: Example of wrapping a React application with the Provider component from React Redux. The Provider makes the Redux store available throughout the component tree.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/introduction/quick-start.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport App from './App'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Provider Component\nDESCRIPTION: Example of wrapping a React application with the Redux Provider component to make the store available throughout the app.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/introduction/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\n\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport App from './App'\n\n// As of React 18\nconst root = ReactDOM.createRoot(document.getElementById('root'))\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Provider Setup with React-Redux\nDESCRIPTION: Shows the basic setup of Redux Provider component wrapping a root-level App component, including store creation and initialization.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/Provider.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport { App } from './App'\nimport createStore from './createReduxStore'\n\nconst store = createStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n```\n\n----------------------------------------\n\nTITLE: Providing Redux Store to React Components\nDESCRIPTION: Wraps the React application with a Provider component from react-redux, making the Redux store available to all components.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/quick-start.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport './index.css'\nimport App from './App'\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\nconst root = ReactDOM.createRoot(document.getElementById('root'))\n\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with TypeScript\nDESCRIPTION: Sets up a Redux store using configureStore and exports typed versions of RootState and AppDispatch for use throughout the application.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\n// ...\n\nconst store = configureStore({\n  reducer: {\n    posts: postsReducer,\n    comments: commentsReducer,\n    users: usersReducer,\n  },\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch\n```\n\n----------------------------------------\n\nTITLE: Connecting AddTodo Component to Redux\nDESCRIPTION: Example of connecting a React component to Redux store using connect and mapping dispatch actions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/introduction/basic-tutorial.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// components/AddTodo.js\n\n// ... other imports\nimport { connect } from 'react-redux'\nimport { addTodo } from '../redux/actions'\n\nclass AddTodo extends React.Component {\n  // ... component implementation\n}\n\nexport default connect(null, { addTodo })(AddTodo)\n```\n\n----------------------------------------\n\nTITLE: Basic Redux Connect Pattern Implementation\nDESCRIPTION: Demonstrates the basic pattern of using connect() to wrap a React component, showing both mapStateToProps and mapDispatchToProps implementations.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/connect.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (state, ownProps) => ({\n  // ... computed data from state and optionally ownProps\n})\n\nconst mapDispatchToProps = {\n  // ... normally is an object full of action creators\n}\n\n// `connect` returns a new function that accepts the component to wrap:\nconst connectToStore = connect(mapStateToProps, mapDispatchToProps)\n// and that function returns the connected, wrapper component:\nconst ConnectedComponent = connectToStore(Component)\n\n// We normally do both in one step, like this:\nconnect(mapStateToProps, mapDispatchToProps)(Component)\n```\n\n----------------------------------------\n\nTITLE: Basic connect() Function Signature in React Redux\nDESCRIPTION: The function signature for connect(), showing its four optional parameters: mapStateToProps, mapDispatchToProps, mergeProps, and options. These parameters configure how the component connects to the Redux store.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/connect.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction connect(mapStateToProps?, mapDispatchToProps?, mergeProps?, options?)\n```\n\n----------------------------------------\n\nTITLE: Creating a Redux Store with configureStore\nDESCRIPTION: Sets up an empty Redux store using configureStore from Redux Toolkit. This automatically configures the Redux DevTools extension.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/quick-start.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\n\nexport default configureStore({\n  reducer: {},\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing useShallowEqualSelector Custom Hook\nDESCRIPTION: Custom hook that combines useSelector with shallowEqual comparison function for more efficient state selection.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/hooks.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSelector, shallowEqual } from 'react-redux'\n\nexport function useShallowEqualSelector(selector) {\n  return useSelector(selector, shallowEqual)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic connect() Function Signature\nDESCRIPTION: Defines the basic function signature for the connect() function in React-Redux, showing all possible parameters.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction connect(mapStateToProps?, mapDispatchToProps?, mergeProps?, options?)\n```\n\n----------------------------------------\n\nTITLE: Implementing Provider with Vanilla React\nDESCRIPTION: This snippet demonstrates how to use the Provider component to make the Redux store available to the component hierarchy in a basic React application. It wraps the root component with Provider and passes the store as a prop.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/api.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nReactDOM.render(\n  <Provider store={store}>\n    <MyRootComponent />\n  </Provider>,\n  rootEl,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing useShallowEqualSelector Hook with React Redux\nDESCRIPTION: Custom hook that combines useSelector with shallowEqual comparison function for optimized component re-rendering. Provides a convenient wrapper around useSelector with shallow equality checks.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/hooks.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSelector, shallowEqual } from 'react-redux'\n\nexport function useShallowEqualSelector(selector) {\n  return useSelector(selector, shallowEqual)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Memoized Selectors with useSelector\nDESCRIPTION: Shows how to use memoized selectors created with Reselect's createSelector in combination with the useSelector hook to efficiently compute derived data from the Redux store.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/hooks.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useSelector } from 'react-redux'\nimport { createSelector } from 'reselect'\n\nconst selectNumCompletedTodos = createSelector(\n  (state) => state.todos,\n  (todos) => todos.filter((todo) => todo.completed).length,\n)\n\nexport const CompletedTodosCounter = () => {\n  const numCompletedTodos = useSelector(selectNumCompletedTodos)\n  return <div>{numCompletedTodos}</div>\n}\n\nexport const App = () => {\n  return (\n    <>\n      <span>Number of completed todos:</span>\n      <CompletedTodosCounter />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Redux Toolkit and React Redux\nDESCRIPTION: Command to install Redux Toolkit and React Redux packages using npm.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/quick-start.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @reduxjs/toolkit react-redux\n```\n\n----------------------------------------\n\nTITLE: Using useDispatch Hook\nDESCRIPTION: Shows the function signature and basic usage of the useDispatch hook which returns a reference to the dispatch function from the Redux store.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/hooks.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst dispatch = useDispatch()\n```\n\n----------------------------------------\n\nTITLE: Using Memoizing Selectors with useSelector\nDESCRIPTION: Demonstrates how to use a memoized selector created with Reselect's createSelector that depends only on state. The selector is declared outside the component to ensure the same instance is used for every render.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/hooks.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useSelector } from 'react-redux'\nimport { createSelector } from 'reselect'\n\nconst selectNumCompletedTodos = createSelector(\n  (state) => state.todos,\n  (todos) => todos.filter((todo) => todo.completed).length,\n)\n\nexport const CompletedTodosCounter = () => {\n  const numCompletedTodos = useSelector(selectNumCompletedTodos)\n  return <div>{numCompletedTodos}</div>\n}\n\nexport const App = () => {\n  return (\n    <>\n      <span>Number of completed todos:</span>\n      <CompletedTodosCounter />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting AddTodo Component to Redux Store\nDESCRIPTION: Illustrates how to connect the AddTodo component to the Redux store, enabling it to dispatch the addTodo action.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/introduction/basic-tutorial.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// components/AddTodo.js\n\n// ... other imports\nimport { connect } from 'react-redux'\nimport { addTodo } from '../redux/actions'\n\nclass AddTodo extends React.Component {\n  // ... component implementation\n}\n\nexport default connect(null, { addTodo })(AddTodo)\n```\n\n----------------------------------------\n\nTITLE: Connecting a Component to Redux Store with connect()\nDESCRIPTION: Example of using the connect function to link a React component to the Redux store. It shows how to map state and actions to component props using mapStateToProps and mapDispatchToProps.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/introduction/quick-start.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { connect } from 'react-redux'\nimport { increment, decrement, reset } from './actionCreators'\n\n// const Counter = ...\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n  return {\n    counter: state.counter,\n  }\n}\n\nconst mapDispatchToProps = { increment, decrement, reset }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter)\n```\n\n----------------------------------------\n\nTITLE: Memoized Dispatch with useCallback\nDESCRIPTION: Advanced example showing how to memoize dispatch callbacks using useCallback for optimized child component rendering\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/hooks.md#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\n\nexport const CounterComponent = ({ value }) => {\n  const dispatch = useDispatch()\n  const incrementCounter = useCallback(\n    () => dispatch({ type: 'increment-counter' }),\n    [dispatch],\n  )\n\n  return (\n    <div>\n      <span>{value}</span>\n      <MyIncrementButton onIncrement={incrementCounter} />\n    </div>\n  )\n}\n\nexport const MyIncrementButton = React.memo(({ onIncrement }) => (\n  <button onClick={onIncrement}>Increment counter</button>\n))\n```\n\n----------------------------------------\n\nTITLE: Providing the Redux Store to React Components with Provider\nDESCRIPTION: This code demonstrates how to make a Redux store available to a React application by wrapping the root component with the Provider component from React-Redux. The Provider component takes the store as a prop and makes it accessible to all connected components.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/introduction/basic-tutorial.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// index.js\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport TodoApp from './TodoApp'\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <TodoApp />\n  </Provider>,\n  rootElement,\n)\n```\n\n----------------------------------------\n\nTITLE: Using Memoizing Selectors with Multiple Component Instances\nDESCRIPTION: Demonstrates how to create memoized selectors with useMemo when the selector depends on props and is used in multiple component instances.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/hooks.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { createSelector } from 'reselect'\n\nconst makeSelectCompletedTodosCount = () =>\n  createSelector(\n    (state) => state.todos,\n    (_, completed) => completed,\n    (todos, completed) =>\n      todos.filter((todo) => todo.completed === completed).length,\n  )\n\nexport const CompletedTodosCount = ({ completed }) => {\n  const selectCompletedTodosCount = useMemo(makeSelectCompletedTodosCount, [])\n\n  const matchingCount = useSelector((state) =>\n    selectCompletedTodosCount(state, completed),\n  )\n\n  return <div>{matchingCount}</div>\n}\n\nexport const App = () => {\n  return (\n    <>\n      <span>Number of done todos:</span>\n      <CompletedTodosCount completed={true} />\n      <span>Number of unfinished todos:</span>\n      <CompletedTodosCount completed={false} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Provider in Basic React Application\nDESCRIPTION: Shows how to set up the Provider component at the root of a vanilla React application, making the Redux store available throughout the component tree.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/Provider.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport { App } from './App'\nimport createStore from './createReduxStore'\n\nconst store = createStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n```\n\n----------------------------------------\n\nTITLE: Using Memoizing Selectors with useSelector\nDESCRIPTION: Demonstrates how to use createSelector from Reselect with useSelector when the selector only depends on state, ensuring the selector is declared outside the component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/hooks.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useSelector } from 'react-redux'\nimport { createSelector } from 'reselect'\n\nconst selectNumCompletedTodos = createSelector(\n  (state) => state.todos,\n  (todos) => todos.filter((todo) => todo.completed).length,\n)\n\nexport const CompletedTodosCounter = () => {\n  const numCompletedTodos = useSelector(selectNumCompletedTodos)\n  return <div>{numCompletedTodos}</div>\n}\n\nexport const App = () => {\n  return (\n    <>\n      <span>Number of completed todos:</span>\n      <CompletedTodosCounter />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: useDispatch Hook Signature in JavaScript\nDESCRIPTION: Shows the function signature and usage of the useDispatch hook, which returns a reference to the dispatch function from the Redux store. This hook is used to dispatch actions from components.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/hooks.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst dispatch = useDispatch()\n```\n\n----------------------------------------\n\nTITLE: Connecting Component to Redux Store\nDESCRIPTION: Example demonstrating how to connect a React component to Redux store using connect HOC. Shows implementation of mapStateToProps and mapDispatchToProps to access state and dispatch actions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/introduction/quick-start.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { connect } from 'react-redux'\nimport { increment, decrement, reset } from './actionCreators'\n\n// const Counter = ...\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n  return {\n    counter: state.counter,\n  }\n}\n\nconst mapDispatchToProps = { increment, decrement, reset }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter)\n```\n\n----------------------------------------\n\nTITLE: Creating Pre-typed Redux Hooks with Traditional Method\nDESCRIPTION: The traditional approach for creating pre-typed versions of useDispatch, useSelector, and useStore hooks to use throughout your application, which provides proper type inference for Redux state and actions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/usage-with-typescript.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TypedUseSelectorHook } from 'react-redux'\nimport { useDispatch, useSelector, useStore } from 'react-redux'\nimport type { AppDispatch, AppStore, RootState } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch: () => AppDispatch = useDispatch\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\nexport const useAppStore: () => AppStore = useStore\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of React-Redux Connect Function with JavaScript\nDESCRIPTION: Demonstrates the basic pattern for using React-Redux's connect function to link components to the Redux store. Shows how to create mapStateToProps and mapDispatchToProps functions and connect them to a component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/introduction/basic-tutorial.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (state, ownProps) => ({\n  // ... computed data from state and optionally ownProps\n})\n\nconst mapDispatchToProps = {\n  // ... normally is an object full of action creators\n}\n\n// `connect` returns a new function that accepts the component to wrap:\nconst connectToStore = connect(mapStateToProps, mapDispatchToProps)\n// and that function returns the connected, wrapper component:\nconst ConnectedComponent = connectToStore(Component)\n\n// We normally do both in one step, like this:\nconnect(mapStateToProps, mapDispatchToProps)(Component)\n```\n\n----------------------------------------\n\nTITLE: Defining Basic mapStateToProps Function in JavaScript\nDESCRIPTION: Basic syntax for defining a mapStateToProps function that receives the state and optionally ownProps, and returns an object with data needed by the component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state, ownProps?)\n```\n\n----------------------------------------\n\nTITLE: Using Selectors in TodoList Component\nDESCRIPTION: Demonstrates how to use a selector function in the TodoList component's mapStateToProps to efficiently retrieve todos from the Redux store.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/introduction/basic-tutorial.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// components/TodoList.js\n\n// ...other imports\nimport { connect } from \"react-redux\";\nimport { getTodos } from \"../redux/selectors\";\n\nconst TodoList = // ... UI component implementation\n\nexport default connect(state => ({ todos: getTodos(state) }))(TodoList);\n```\n\n----------------------------------------\n\nTITLE: Using Memoizing Selectors with Props in a Single Component\nDESCRIPTION: Shows how to use createSelector with component props when the selector will only be used in a single instance of a component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/hooks.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useSelector } from 'react-redux'\nimport { createSelector } from 'reselect'\n\nconst selectCompletedTodosCount = createSelector(\n  (state) => state.todos,\n  (_, completed) => completed,\n  (todos, completed) =>\n    todos.filter((todo) => todo.completed === completed).length,\n)\n\nexport const CompletedTodosCount = ({ completed }) => {\n  const matchingCount = useSelector((state) =>\n    selectCompletedTodosCount(state, completed),\n  )\n\n  return <div>{matchingCount}</div>\n}\n\nexport const App = () => {\n  return (\n    <>\n      <span>Number of done todos:</span>\n      <CompletedTodosCount completed={true} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining mapStateToProps Function in JavaScript\nDESCRIPTION: This snippet shows the basic structure of a mapStateToProps function, which takes state and optionally ownProps as arguments and returns an object of data for the component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state, ownProps?)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Provider Component in React Redux\nDESCRIPTION: This example demonstrates how to use the Provider component to wrap the root-level App component, making the Redux store available to all nested components.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/Provider.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport { App } from './App'\nimport createStore from './createReduxStore'\n\nconst store = createStore()\n\n// As of React 18\nconst root = ReactDOM.createRoot(document.getElementById('root'))\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting Component to Redux Store using connect\nDESCRIPTION: Demonstrates the basic usage of the connect function to map state and dispatch to props, and wrap a React component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/introduction/basic-tutorial.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (state, ownProps) => ({\n  // ... computed data from state and optionally ownProps\n})\n\nconst mapDispatchToProps = {\n  // ... normally is an object full of action creators\n}\n\n// `connect` returns a new function that accepts the component to wrap:\nconst connectToStore = connect(mapStateToProps, mapDispatchToProps)\n// and that function returns the connected, wrapper component:\nconst ConnectedComponent = connectToStore(Component)\n\n// We normally do both in one step, like this:\nconnect(mapStateToProps, mapDispatchToProps)(Component)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useSelector\nDESCRIPTION: The TypeScript type definitions for the useSelector hook, showing the function signature, parameter types, and return type. Includes options for equality functions and development mode checks.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/hooks.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype RootState = ReturnType<typeof store.getState>\ntype SelectorFn = <Selected>(state: RootState) => Selected\ntype EqualityFn = (a: any, b: any) => boolean\nexport type DevModeCheckFrequency = 'never' | 'once' | 'always'\n\ninterface UseSelectorOptions {\n  equalityFn?: EqualityFn\n  devModeChecks?: {\n    stabilityCheck?: DevModeCheckFrequency\n    identityFunctionCheck?: DevModeCheckFrequency\n  }\n}\n\nconst result: Selected = useSelector(\n  selector: SelectorFn,\n  options?: EqualityFn | UseSelectorOptions\n)\n```\n\n----------------------------------------\n\nTITLE: Using Props with useSelector via Closure\nDESCRIPTION: Shows how to use component props with useSelector through closure to determine what to extract from the state.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/hooks.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useSelector } from 'react-redux'\n\nexport const TodoListItem = (props) => {\n  const todo = useSelector((state) => state.todos[props.id])\n  return <div>{todo.text}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic mapStateToProps Implementation with State Parameter\nDESCRIPTION: A simple implementation of mapStateToProps that takes the Redux state as a parameter and returns an object with todos from the state.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (state) => ({ todos: state.todos })\n```\n\n----------------------------------------\n\nTITLE: Implementing batch() with Redux Thunk\nDESCRIPTION: Demonstrates a practical example of using the batch() function within a Redux thunk to combine multiple dispatch calls into a single render update. This example shows how to prevent multiple re-renders when dispatching several actions in sequence.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/batch.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { batch } from 'react-redux'\n\nfunction myThunk() {\n  return (dispatch, getState) => {\n    // should only result in one combined re-render, not two\n    batch(() => {\n      dispatch(increment())\n      dispatch(increment())\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Redux Store to React App\nDESCRIPTION: This snippet shows how to make the Redux store available to a React application using the Provider component from react-redux. It wraps the main TodoApp component with Provider, passing the store as a prop.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/introduction/basic-tutorial.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// index.js\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport TodoApp from './TodoApp'\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <TodoApp />\n  </Provider>,\n  rootElement\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Basic mapStateToProps Function Signature in JavaScript\nDESCRIPTION: Basic signature for the mapStateToProps function that takes the state and optional ownProps arguments. This function is used to select data from the Redux store.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state, ownProps?)\n```\n\n----------------------------------------\n\nTITLE: Memoizing React Component with useSelector Hook\nDESCRIPTION: Demonstrates how to optimize performance of a component using useSelector and React.memo() together. This pattern helps prevent unnecessary re-renders by memoizing the component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/hooks.md#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nconst CounterComponent = ({ name }) => {\n  const counter = useSelector((state) => state.counter)\n  return (\n    <div>\n      {name}: {counter}\n    </div>\n  )\n}\n\nexport const MemoizedCounterComponent = React.memo(CounterComponent)\n```\n\n----------------------------------------\n\nTITLE: Setting up Redux Provider Component\nDESCRIPTION: Example showing how to wrap a React application with the Redux Provider component to make the store available throughout the app\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/introduction/quick-start.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport App from './App'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement,\n)\n```\n\n----------------------------------------\n\nTITLE: Manual TypeScript Implementation of React-Redux Connect\nDESCRIPTION: Demonstrates full manual typing of a React component with connect HOC, including explicit interface definitions for state, dispatch, and own props. Shows how to properly type mapState and mapDispatch functions with TypeScript.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/usage-with-typescript.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { connect } from 'react-redux'\n\ninterface StateProps {\n  isOn: boolean\n}\n\ninterface DispatchProps {\n  toggleOn: () => void\n}\n\ninterface OwnProps {\n  backgroundColor: string\n}\n\ntype Props = StateProps & DispatchProps & OwnProps\n\nconst mapState = (state: RootState) => ({\n  isOn: state.isOn,\n})\n\nconst mapDispatch = {\n  toggleOn: () => ({ type: 'TOGGLE_IS_ON' }),\n}\n\nconst MyComponent = (props: Props) => (\n  <div style={{ backgroundColor: props.backgroundColor }}>\n    <button onClick={props.toggleOn}>\n      Toggle is {props.isOn ? 'ON' : 'OFF'}\n    </button>\n  </div>\n)\n\n// Typical usage: `connect` is called after the component is defined\nexport default connect<StateProps, DispatchProps, OwnProps>(\n  mapState,\n  mapDispatch,\n)(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Setting up Redux Provider with React 18\nDESCRIPTION: Shows how to wrap a React application with the Redux Provider component to make the store available throughout the component tree, using React 18's createRoot API.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/hooks.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst store = createStore(rootReducer)\n\n// As of React 18\nconst root = ReactDOM.createRoot(document.getElementById('root'))\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Connect Function Usage in React Redux\nDESCRIPTION: Demonstrates the standard pattern for connecting React components to Redux store using the connect function with mapStateToProps and mapDispatchToProps arguments.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/introduction/basic-tutorial.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (state, ownProps) => ({\n  // ... computed data from state and optionally ownProps\n})\n\nconst mapDispatchToProps = {\n  // ... normally is an object full of action creators\n}\n\n// `connect` returns a new function that accepts the component to wrap:\nconst connectToStore = connect(mapStateToProps, mapDispatchToProps)\n// and that function returns the connected, wrapper component:\nconst ConnectedComponent = connectToStore(Component)\n\n// We normally do both in one step, like this:\nconnect(mapStateToProps, mapDispatchToProps)(Component)\n```\n\n----------------------------------------\n\nTITLE: Setting up Redux Provider in React application\nDESCRIPTION: Example of wrapping a React application with the Provider component from react-redux. The Provider makes the Redux store available to all components in the application hierarchy.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/introduction/quick-start.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport App from './App'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement,\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating Provider with React Router\nDESCRIPTION: Demonstrates how to combine React Redux Provider with React Router, enabling both routing and global state management in a React application.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/Provider.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { Router, Route } from 'react-router-dom'\n\nimport { App } from './App'\nimport { Foo } from './Foo'\nimport { Bar } from './Bar'\nimport createStore from './createReduxStore'\n\nconst store = createStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <Route exact path=\"/\" component={App} />\n      <Route path=\"/foo\" component={Foo} />\n      <Route path=\"/bar\" component={Bar} />\n    </Router>\n  </Provider>,\n  document.getElementById('root'),\n)\n```\n\n----------------------------------------\n\nTITLE: Optimized useDispatch with useCallback\nDESCRIPTION: Shows how to optimize dispatch callback using useCallback hook to prevent unnecessary re-renders in child components using React.memo().\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/hooks.md#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\n\nexport const CounterComponent = ({ value }) => {\n  const dispatch = useDispatch()\n  const incrementCounter = useCallback(\n    () => dispatch({ type: 'increment-counter' }),\n    [dispatch],\n  )\n\n  return (\n    <div>\n      <span>{value}</span>\n      <MyIncrementButton onIncrement={incrementCounter} />\n    </div>\n  )\n}\n\nexport const MyIncrementButton = React.memo(({ onIncrement }) => (\n  <button onClick={onIncrement}>Increment counter</button>\n))\n```\n\n----------------------------------------\n\nTITLE: Creating mapStateToProps with ownProps Parameter in JavaScript\nDESCRIPTION: Shows how to use the ownProps parameter to combine component props with state data, useful when a component needs its own props to retrieve specific data.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Todo.js\n\nfunction mapStateToProps(state, ownProps) {\n  const { visibilityFilter } = state\n  const { id } = ownProps\n  const todo = getTodoById(state, id)\n\n  // component receives additionally:\n  return { todo, visibilityFilter }\n}\n\n// Later, in your application, a parent component renders:\n;<ConnectedTodo id={123} />\n// and your component receives props.id, props.todo, and props.visibilityFilter\n```\n\n----------------------------------------\n\nTITLE: Using shallowEqual with useSelector\nDESCRIPTION: Demonstrates how to use the shallowEqual function from React-Redux as an equality function for useSelector, allowing for shallow comparison of selector results instead of the default strict equality.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/hooks.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { shallowEqual, useSelector } from 'react-redux'\n\n// Pass it as the second argument directly\nconst selectedData = useSelector(selectorReturningObject, shallowEqual)\n\n// or pass it as the `equalityFn` field in the options argument\nconst selectedData = useSelector(selectorReturningObject, {\n  equalityFn: shallowEqual,\n})\n```\n\n----------------------------------------\n\nTITLE: Basic useDispatch Hook Counter Component Example\nDESCRIPTION: Demonstrates basic usage of useDispatch hook in a counter component to dispatch increment actions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/hooks.md#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useDispatch } from 'react-redux'\n\nexport const CounterComponent = ({ value }) => {\n  const dispatch = useDispatch()\n\n  return (\n    <div>\n      <span>{value}</span>\n      <button onClick={() => dispatch({ type: 'increment-counter' })}>\n        Increment counter\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Redux UI Integration Steps\nDESCRIPTION: Core steps required for integrating Redux with any UI layer. These steps demonstrate the basic pattern that UI binding libraries like React Redux handle automatically.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/introduction/why-use-react-redux.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1. Create a Redux store\n2. Subscribe to updates\n3. Inside the subscription callback:\n   1. Get the current store state\n   2. Extract the data needed by this piece of UI\n   3. Update the UI with the data\n4. If necessary, render the UI with initial state\n5. Respond to UI inputs by dispatching Redux actions\n```\n\n----------------------------------------\n\nTITLE: Connecting React Component to Redux Store\nDESCRIPTION: Example demonstrating how to connect a React component to the Redux store using connect() with mapStateToProps and mapDispatchToProps\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/introduction/quick-start.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { connect } from 'react-redux'\nimport { increment, decrement, reset } from './actionCreators'\n\n// const Counter = ...\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n  return {\n    counter: state.counter,\n  }\n}\n\nconst mapDispatchToProps = { increment, decrement, reset }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter)\n```\n\n----------------------------------------\n\nTITLE: Object Shorthand Form of mapDispatchToProps\nDESCRIPTION: Shows the simplified object shorthand syntax for mapDispatchToProps and different ways to use it with connect.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = {\n  increment,\n  decrement,\n  reset,\n}\n\nimport { increment, decrement, reset } from './counterActions'\n\nconst actionCreators = {\n  increment,\n  decrement,\n  reset,\n}\n\nexport default connect(mapState, actionCreators)(Counter)\n\n// or\nexport default connect(mapState, { increment, decrement, reset })(Counter)\n```\n\n----------------------------------------\n\nTITLE: Basic useSelector Usage in a React Component\nDESCRIPTION: Demonstrates the basic usage of useSelector hook to extract a counter value from the Redux store state and display it in a component. This is the simplest implementation pattern.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/hooks.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useSelector } from 'react-redux'\n\nexport const CounterComponent = () => {\n  const counter = useSelector((state) => state.counter)\n  return <div>{counter}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Redux using npm\nDESCRIPTION: Command to install React Redux package using npm package manager\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/introduction/quick-start.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-redux\n```\n\n----------------------------------------\n\nTITLE: Basic Redux Connection with mapStateToProps and Action Creators\nDESCRIPTION: Shows how to connect a component to Redux store using both mapStateToProps for state subscription and action creators for dispatching actions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/introduction/basic-tutorial.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n// ... Component\nconst mapStateToProps = (state) => state.partOfState\nexport default connect(mapStateToProps, actionCreators)(Component)\n```\n\n----------------------------------------\n\nTITLE: Connecting AddTodo Component to Redux Store\nDESCRIPTION: Shows how to connect the AddTodo component to the Redux store using the connect function with mapDispatchToProps in object shorthand form. This enables the component to dispatch addTodo actions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/introduction/basic-tutorial.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// components/AddTodo.js\n\n// ... other imports\nimport { connect } from 'react-redux'\nimport { addTodo } from '../redux/actions'\n\nclass AddTodo extends React.Component {\n  // ... component implementation\n}\n\nexport default connect(null, { addTodo })(AddTodo)\n```\n\n----------------------------------------\n\nTITLE: Basic Connect Usage Examples\nDESCRIPTION: Collection of basic connect() usage patterns including dispatch-only and action creator injection\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/connect.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default connect()(TodoApp)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n\nexport default connect(null, actionCreators)(TodoApp)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// don't do this!\nexport default connect((state) => state)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Initializing React Redux Provider Setup\nDESCRIPTION: Shows how to wrap a React application with Redux Provider component to make the store available throughout the app. Uses ReactDOM.createRoot for React 18 compatibility.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/connect.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// index.js\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport TodoApp from './TodoApp'\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\n// As of React 18\nconst root = ReactDOM.createRoot(document.getElementById('root'))\nroot.render(\n  <Provider store={store}>\n    <TodoApp />\n  </Provider>,\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Redux Store Connection with mapStateToProps and Action Creators\nDESCRIPTION: Demonstrates the basic pattern of connecting a component to Redux store using both mapStateToProps and action creators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/connect.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n// ... Component\nconst mapStateToProps = (state) => state.partOfState\nexport default connect(mapStateToProps, actionCreators)(Component)\n```\n\n----------------------------------------\n\nTITLE: Using Props with useSelector via Closure\nDESCRIPTION: Demonstrates how to access component props inside a useSelector hook to extract specific data from the Redux store based on those props.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/hooks.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useSelector } from 'react-redux'\n\nexport const TodoListItem = (props) => {\n  const todo = useSelector((state) => state.todos[props.id])\n  return <div>{todo.text}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Connect Function Signature\nDESCRIPTION: The main connect function signature showing its optional parameters for mapping state and dispatch to props.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/connect.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction connect(mapStateToProps?, mapDispatchToProps?, mergeProps?, options?)\n```\n\n----------------------------------------\n\nTITLE: Creating Typed useSelector Hook\nDESCRIPTION: Shows how to create a typed useSelector hook using TypedUseSelectorHook helper type.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/static-types.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSelector, TypedUseSelectorHook } from 'react-redux'\n\ninterface RootState {\n  isOn: boolean\n}\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector\n\n// my-component.tsx\nimport { useTypedSelector } from './reducer.ts'\n\nconst isOn = useTypedSelector((state) => state.isOn)\n```\n\n----------------------------------------\n\nTITLE: Using Provider Component with Vanilla React\nDESCRIPTION: Example of wrapping a root React component with the Provider component to make the Redux store available to all connected components in the application.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nReactDOM.render(\n  <Provider store={store}>\n    <MyRootComponent />\n  </Provider>,\n  rootEl,\n)\n```\n\n----------------------------------------\n\nTITLE: Object Shorthand mapDispatchToProps\nDESCRIPTION: Demonstrates the recommended object shorthand form of mapDispatchToProps.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = {\n  increment,\n  decrement,\n  reset,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Redux in an Existing React Application\nDESCRIPTION: Command line instructions for adding React Redux to an existing React application using either npm or Yarn package managers. This allows integration of Redux state management into an already established React project.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# If you use npm:\nnpm install react-redux\n\n# Or if you use Yarn:\nyarn add react-redux\n```\n\n----------------------------------------\n\nTITLE: Advanced mapDispatchToProps with Multiple Dispatch Methods\nDESCRIPTION: A comprehensive example of mapDispatchToProps that demonstrates different ways to dispatch actions, including plain objects, action creators, and using bindActionCreators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst createMyAction = () => ({ type: 'MY_ACTION' })\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const boundActions = bindActionCreators({ createMyAction }, dispatch)\n  return {\n    dispatchPlainObject: () => dispatch({ type: 'MY_ACTION' }),\n    dispatchActionCreatedByActionCreator: () => dispatch(createMyAction()),\n    ...boundActions,\n    // you may return dispatch here\n    dispatch,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Typing Connect HOC with TypeScript\nDESCRIPTION: Comprehensive example of manually typing the connect higher-order component with TypeScript, including state, dispatch, and own props definitions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/static-types.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { connect } from 'react-redux'\n\ninterface StateProps {\n  isOn: boolean\n}\n\ninterface DispatchProps {\n  toggleOn: () => void\n}\n\ninterface OwnProps {\n  backgroundColor: string\n}\n\ntype Props = StateProps & DispatchProps & OwnProps\n\nconst mapState = (state: RootState) => ({\n  isOn: state.isOn,\n})\n\nconst mapDispatch = {\n  toggleOn: () => ({ type: 'TOGGLE_IS_ON' }),\n}\n\nconst MyComponent = (props: Props) => (\n  <div style={{ backgroundColor: props.backgroundColor }}>\n    <button onClick={props.toggleOn}>\n      Toggle is {props.isOn ? 'ON' : 'OFF'}\n    </button>\n  </div>\n)\n\n// Typical usage: `connect` is called after the component is defined\nexport default connect<StateProps, DispatchProps, OwnProps>(\n  mapState,\n  mapDispatch,\n)(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Connecting VisibilityFilters Component with State and Actions\nDESCRIPTION: Shows how to connect VisibilityFilters component with both state mapping and filter action\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/introduction/basic-tutorial.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// components/VisibilityFilters.js\n\n// ... other imports\nimport { connect } from \"react-redux\";\nimport { setFilter } from \"../redux/actions\";\n\nconst VisibilityFilters = // ... component implementation\n\nconst mapStateToProps = state => {\n  return { activeFilter: state.visibilityFilter };\n};\nexport default connect(\n  mapStateToProps,\n  { setFilter }\n)(VisibilityFilters);\n```\n\n----------------------------------------\n\nTITLE: Advanced mapDispatchToProps Implementation in React Redux\nDESCRIPTION: Example showing various ways to handle actions in mapDispatchToProps, including using plain objects, action creators, bindActionCreators, and directly passing dispatch.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/connect.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst createMyAction = () => ({ type: 'MY_ACTION' })\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const boundActions = bindActionCreators({ createMyAction }, dispatch)\n  return {\n    dispatchPlainObject: () => dispatch({ type: 'MY_ACTION' }),\n    dispatchActionCreatedByActionCreator: () => dispatch(createMyAction()),\n    ...boundActions,\n    // you may return dispatch here\n    dispatch,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Provider with Vanilla React\nDESCRIPTION: Shows how to use the Provider component in a basic React application. The Provider wraps the root App component, making the Redux store available throughout the component tree.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/Provider.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport { App } from './App'\nimport createStore from './createReduxStore'\n\nconst store = createStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n```\n\n----------------------------------------\n\nTITLE: Using bindActionCreators with Action Creators\nDESCRIPTION: Demonstrates using Redux's bindActionCreators utility to wrap action creators with dispatch calls, allowing them to be invoked directly while automatically forwarding arguments.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bindActionCreators } from 'redux'\n\nconst increment = () => ({ type: 'INCREMENT' })\nconst decrement = () => ({ type: 'DECREMENT' })\nconst reset = () => ({ type: 'RESET' })\n\n// binding an action creator\n// returns (...args) => dispatch(increment(...args))\nconst boundIncrement = bindActionCreators(increment, dispatch)\n\n// binding an object full of action creators\nconst boundActionCreators = bindActionCreators(\n  { increment, decrement, reset },\n  dispatch,\n)\n// returns\n// {\n//   increment: (...args) => dispatch(increment(...args)),\n//   decrement: (...args) => dispatch(decrement(...args)),\n//   reset: (...args) => dispatch(reset(...args)),\n// }\n```\n\n----------------------------------------\n\nTITLE: Basic Redux Connection with mapStateToProps and Action Creators\nDESCRIPTION: Shows how to connect a component to Redux store using connect() with both state mapping and action creators\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/introduction/basic-tutorial.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n// ... Component\nconst mapStateToProps = (state) => state.partOfState\nexport default connect(mapStateToProps, actionCreators)(Component)\n```\n\n----------------------------------------\n\nTITLE: Implementing custom areStatesEqual for performance optimization in React-Redux\nDESCRIPTION: Example of overriding the areStatesEqual function to only compare a specific slice of state, which can improve performance when mapStateToProps is computationally expensive.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst areStatesEqual = (next, prev) =>\n  prev.entities.todos === next.entities.todos\n```\n\n----------------------------------------\n\nTITLE: Configuring Redux Store with TypeScript Types in Redux Toolkit\nDESCRIPTION: Setup for a Redux store using configureStore from Redux Toolkit, with exported type definitions for RootState and AppDispatch to be used throughout the application.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/usage-with-typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\n// ...\n\nconst store = configureStore({\n  reducer: {\n    posts: postsReducer,\n    comments: commentsReducer,\n    users: usersReducer,\n  },\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch\n```\n\n----------------------------------------\n\nTITLE: Initializing Provider with Redux Store in Vanilla React\nDESCRIPTION: Example showing how to wrap the root App component with Provider to make the Redux store available throughout the application. This is the standard setup for a React-Redux application.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/Provider.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport { App } from './App'\nimport createStore from './createReduxStore'\n\nconst store = createStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting Components with Default Dispatch in React Redux\nDESCRIPTION: Examples of connecting a component to receive dispatch as a prop when no mapDispatchToProps is provided. This is the simplest approach where components can dispatch actions directly.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconnect()(MyComponent)\n// which is equivalent with\nconnect(null, null)(MyComponent)\n\n// or\nconnect(mapStateToProps /** no second argument */)(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Using ownProps in mapStateToProps for Todo Component\nDESCRIPTION: This snippet shows how to use ownProps in mapStateToProps to extract specific data based on component props, such as a todo item by ID.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Todo.js\n\nfunction mapStateToProps(state, ownProps) {\n  const { visibilityFilter } = state\n  const { id } = ownProps\n  const todo = getTodoById(state, id)\n\n  // component receives additionally:\n  return { todo, visibilityFilter }\n}\n\n// Later, in your application, a parent component renders:\n<ConnectedTodo id={123} />\n// and your component receives props.id, props.todo, and props.visibilityFilter\n```\n\n----------------------------------------\n\nTITLE: Using ownProps in Event Handlers and mapDispatchToProps in React Redux\nDESCRIPTION: Examples showing how to handle component props in mapDispatchToProps. The first example shows binding in the component, while the second shows using ownProps directly in the function.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/connect.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// binds on component re-rendering\n<button onClick={() => this.props.toggleTodo(this.props.todoId)} />\n\n// binds on `props` change\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  toggleTodo: () => dispatch(toggleTodo(ownProps.todoId))\n}\n```\n\n----------------------------------------\n\nTITLE: Forwarding Arguments to Action Creators in mapDispatchToProps\nDESCRIPTION: Shows how to forward arguments to action creators when defining mapDispatchToProps as a function, both explicitly and implicitly.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // explicitly forwarding arguments\n    onClick: (event) => dispatch(trackClick(event)),\n\n    // implicitly forwarding arguments\n    onReceiveImpressions: (...impressions) =>\n      dispatch(trackImpressions(impressions)),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React 18 SSR Hydration with Provider Component\nDESCRIPTION: This example shows how to use the Provider component in a React 18 SSR hydration scenario, using a serialized Redux state for both store initialization and the serverState prop.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/Provider.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { hydrateRoot } from 'react-dom/client'\nimport { configureStore } from '@reduxjs/toolkit'\nimport { Provider } from 'react-redux'\n\nconst preloadedState = window.__PRELOADED_STATE__\n\nconst clientStore = configureStore({\n  reducer: rootReducer,\n  preloadedState,\n})\n\nhydrateRoot(\n  document.getElementById('root'),\n  <Provider store={clientStore} serverState={preloadedState}>\n    <App />\n  </Provider>,\n)\n```\n\n----------------------------------------\n\nTITLE: Factory Function Pattern with Memoized Selector in React-Redux\nDESCRIPTION: Demonstrates a factory function pattern that creates unique selector instances per component using createSelector, commonly used for memoization and component-specific state selection.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/connect.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst makeUniqueSelectorInstance = () =>\n  createSelector([selectItems, selectItemId], (items, itemId) => items[itemId])\nconst makeMapState = (state) => {\n  const selectItemForThisComponent = makeUniqueSelectorInstance()\n  return function realMapState(state, ownProps) {\n    const item = selectItemForThisComponent(state, ownProps.itemId)\n    return { item }\n  }\n}\nexport default connect(makeMapState)(SomeComponent)\n```\n\n----------------------------------------\n\nTITLE: Using Selectors with Props in a Single Component Instance\nDESCRIPTION: Shows how to use a memoized selector that depends on both state and props, when the selector will only be used in a single component instance. The selector is still declared outside the component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/hooks.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useSelector } from 'react-redux'\nimport { createSelector } from 'reselect'\n\nconst selectCompletedTodosCount = createSelector(\n  (state) => state.todos,\n  (_, completed) => completed,\n  (todos, completed) =>\n    todos.filter((todo) => todo.completed === completed).length,\n)\n\nexport const CompletedTodosCount = ({ completed }) => {\n  const matchingCount = useSelector((state) =>\n    selectCompletedTodosCount(state, completed),\n  )\n\n  return <div>{matchingCount}</div>\n}\n\nexport const App = () => {\n  return (\n    <>\n      <span>Number of done todos:</span>\n      <CompletedTodosCount completed={true} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Redux Selectors for Todo State\nDESCRIPTION: Implements selector functions to abstract away the structure of the Redux store. These selectors provide a clean API for accessing todos data and enable better performance optimization.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/introduction/basic-tutorial.md#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// redux/selectors.js\n\nexport const getTodosState = (store) => store.todos\n\nexport const getTodoList = (store) =>\n  getTodosState(store) ? getTodosState(store).allIds : []\n\nexport const getTodoById = (store, id) =>\n  getTodosState(store) ? { ...getTodosState(store).byIds[id], id } : {}\n\nexport const getTodos = (store) =>\n  getTodoList(store).map((id) => getTodoById(store, id))\n```\n\n----------------------------------------\n\nTITLE: Provider Integration with React Router\nDESCRIPTION: Demonstrates how to combine Redux Provider with React Router, showing route configuration and component rendering.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/Provider.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { Router, Route } from 'react-router-dom'\n\nimport { App } from './App'\nimport { Foo } from './Foo'\nimport { Bar } from './Bar'\nimport createStore from './createReduxStore'\n\nconst store = createStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <Route exact path=\"/\" component={App} />\n      <Route path=\"/foo\" component={Foo} />\n      <Route path=\"/bar\" component={Bar} />\n    </Router>\n  </Provider>,\n  document.getElementById('root'),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing mapStateToProps with State and ownProps Arguments in React Redux\nDESCRIPTION: Example of a mapStateToProps function that uses both state and component's own props to extract and transform data for a Todo component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Todo.js\n\nfunction mapStateToProps(state, ownProps) {\n  const { visibilityFilter } = state\n  const { id } = ownProps\n  const todo = getTodoById(state, id)\n\n  // component receives additionally:\n  return { todo, visibilityFilter }\n}\n\n// Later, in your application, a parent component renders:\n;<ConnectedTodo id={123} />\n// and your component receives props.id, props.todo, and props.visibilityFilter\n```\n\n----------------------------------------\n\nTITLE: Using ConnectedProps with connect HOC for Type Inference\nDESCRIPTION: Demonstrates how to use the ConnectedProps helper type to extract and infer prop types from Redux's connect higher-order component, eliminating the need to manually type Redux-connected props.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/usage-with-typescript.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect, ConnectedProps } from 'react-redux'\n\ninterface RootState {\n  isOn: boolean\n}\n\nconst mapState = (state: RootState) => ({\n  isOn: state.isOn,\n})\n\nconst mapDispatch = {\n  toggleOn: () => ({ type: 'TOGGLE_IS_ON' }),\n}\n\nconst connector = connect(mapState, mapDispatch)\n\n// The inferred type will look like:\n// {isOn: boolean, toggleOn: () => void}\ntype PropsFromRedux = ConnectedProps<typeof connector>\n```\n\n----------------------------------------\n\nTITLE: Manual Dispatch Injection with bindActionCreators in React Redux\nDESCRIPTION: Example showing how to manually inject dispatch along with bound action creators using mapDispatchToProps function.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bindActionCreators } from 'redux'\n// ...\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    dispatch,\n    ...bindActionCreators({ increment, decrement, reset }, dispatch),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Object Shorthand Form for mapDispatchToProps\nDESCRIPTION: A simplified approach to mapDispatchToProps using the object shorthand form, where each field is an action creator that React-Redux will automatically bind to dispatch.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addTodo, deleteTodo, toggleTodo } from './actionCreators'\n\nconst mapDispatchToProps = {\n  addTodo,\n  deleteTodo,\n  toggleTodo,\n}\n\nexport default connect(null, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Connecting Component without mapStateToProps\nDESCRIPTION: Shows how to connect a component using only mapDispatchToProps by passing null as the first argument to connect.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconnect(null, mapDispatchToProps)(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom areStatesEqual for Performance Optimization in React-Redux\nDESCRIPTION: Example of overriding the areStatesEqual function to optimize performance by checking only a specific slice of state. This is useful when mapStateToProps is computationally expensive but only concerned with a portion of the state.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst areStatesEqual = (next, prev) =>\n  prev.entities.todos === next.entities.todos\n```\n\n----------------------------------------\n\nTITLE: Factory Function Pattern with Memoized Selectors in React Redux\nDESCRIPTION: Demonstrates implementing a factory function pattern using memoized selectors to create component-instance-specific selectors within closures.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst makeUniqueSelectorInstance = () =>\n  createSelector([selectItems, selectItemId], (items, itemId) => items[itemId])\nconst makeMapState = (state) => {\n  const selectItemForThisComponent = makeUniqueSelectorInstance()\n  return function realMapState(state, ownProps) {\n    const item = selectItemForThisComponent(state, ownProps.itemId)\n    return { item }\n  }\n}\nexport default connect(makeMapState)(SomeComponent)\n```\n\n----------------------------------------\n\nTITLE: Using Factory Functions for Performance Optimization in React-Redux\nDESCRIPTION: Demonstrates using factory functions to create mapStateToProps and mapDispatchToProps functions with closure-captured values. This approach can improve performance by computing values only once and enabling memoization with libraries like reselect.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/connect.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addTodo } from './actionCreators'\n\nfunction mapStateToPropsFactory(initialState, initialProps) {\n  const getSomeProperty= createSelector(...);\n  const anotherProperty = 200 + initialState[initialProps.another];\n  return function(state){\n    return {\n      anotherProperty,\n      someProperty: getSomeProperty(state),\n      todos: state.todos\n    }\n  }\n}\n\nfunction mapDispatchToPropsFactory(initialState, initialProps) {\n  function goToSomeLink(){\n    initialProps.history.push('some/link');\n  }\n  return function(dispatch){\n    return {\n      addTodo\n    }\n  }\n}\n\n\nexport default connect(mapStateToPropsFactory, mapDispatchToPropsFactory)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Implementing useActions Custom Hook\nDESCRIPTION: Custom hook implementation that provides action binding functionality similar to bindActionCreators. Supports passing actions as a single function, array, or object.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/hooks.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bindActionCreators } from 'redux'\nimport { useDispatch } from 'react-redux'\nimport { useMemo } from 'react'\n\nexport function useActions(actions, deps) {\n  const dispatch = useDispatch()\n  return useMemo(\n    () => {\n      if (Array.isArray(actions)) {\n        return actions.map((a) => bindActionCreators(a, dispatch))\n      }\n      return bindActionCreators(actions, dispatch)\n    },\n    deps ? [dispatch, ...deps] : [dispatch],\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Factory Function Implementation with Memoized Selectors in React-Redux\nDESCRIPTION: Example of a factory function implementation that creates component-instance-specific selectors using closure, commonly used with memoized selectors for performance optimization.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/connect.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst makeUniqueSelectorInstance = () =>\n  createSelector([selectItems, selectItemId], (items, itemId) => items[itemId])\nconst makeMapState = (state) => {\n  const selectItemForThisComponent = makeUniqueSelectorInstance()\n  return function realMapState(state, ownProps) {\n    const item = selectItemForThisComponent(state, ownProps.itemId)\n    return { item }\n  }\n}\nexport default connect(makeMapState)(SomeComponent)\n```\n\n----------------------------------------\n\nTITLE: Typing useSelector Hook with TypeScript\nDESCRIPTION: Demonstrates how to properly type the useSelector hook, showing both direct usage and creation of a typed selector using TypedUseSelectorHook.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/static-types.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RootState {\n  isOn: boolean\n}\n\n// TS infers type: (state: RootState) => boolean\nconst selectIsOn = (state: RootState) => state.isOn\n\n// TS infers `isOn` is boolean\nconst isOn = useSelector(selectIsOn)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// reducer.ts\nimport { useSelector, TypedUseSelectorHook } from 'react-redux'\n\ninterface RootState {\n  isOn: boolean\n}\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector\n\n// my-component.tsx\nimport { useTypedSelector } from './reducer.ts'\n\nconst isOn = useTypedSelector((state) => state.isOn)\n```\n\n----------------------------------------\n\nTITLE: Implementing useActions Hook with Redux\nDESCRIPTION: Custom hook implementation that binds Redux action creators to dispatch. Supports passing actions as a single function, array, or object. Uses Redux bindActionCreators and react-redux useDispatch internally.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/hooks.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bindActionCreators } from 'redux'\nimport { useDispatch } from 'react-redux'\nimport { useMemo } from 'react'\n\nexport function useActions(actions, deps) {\n  const dispatch = useDispatch()\n  return useMemo(\n    () => {\n      if (Array.isArray(actions)) {\n        return actions.map(a => bindActionCreators(a, dispatch))\n      }\n      return bindActionCreators(actions, dispatch)\n    },\n    deps ? [dispatch, ...deps] : [dispatch]\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting TodoList Component with Selectors\nDESCRIPTION: Shows how to use selector functions with connect to efficiently extract and transform data from the Redux store. This approach promotes reusability and helps with performance optimization.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/introduction/basic-tutorial.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// components/TodoList.js\n\n// ...other imports\nimport { connect } from \"react-redux\";\nimport { getTodos } from \"../redux/selectors\";\n\nconst TodoList = // ... UI component implementation\n\nexport default connect(state => ({ todos: getTodos(state) }))(TodoList);\n```\n\n----------------------------------------\n\nTITLE: mapDispatchToProps Object Shorthand Form\nDESCRIPTION: Demonstrates the object shorthand form of mapDispatchToProps where action creators are directly passed as an object and automatically bound to dispatch.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addTodo, deleteTodo, toggleTodo } from './actionCreators'\n\nconst mapDispatchToProps = {\n  addTodo,\n  deleteTodo,\n  toggleTodo,\n}\n\nexport default connect(null, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Extending ConnectedProps in a React Component\nDESCRIPTION: Shows how to extend the automatically inferred Redux prop types with component-specific props using TypeScript interfaces and the ConnectedProps helper.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/usage-with-typescript.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Props extends PropsFromRedux {\n  backgroundColor: string\n}\n\nconst MyComponent = (props: Props) => (\n  <div style={{ backgroundColor: props.backgroundColor }}>\n    <button onClick={props.toggleOn}>\n      Toggle is {props.isOn ? 'ON' : 'OFF'}\n    </button>\n  </div>\n)\n\nexport default connector(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Automatic bindActionCreators in React Redux\nDESCRIPTION: Shows how React Redux internally converts object shorthand to bindActionCreators call.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// React Redux does this for you automatically:\n;(dispatch) => bindActionCreators(mapDispatchToProps, dispatch)\n```\n\n----------------------------------------\n\nTITLE: Using Props with useSelector via Closure\nDESCRIPTION: Shows how to use component props within a useSelector hook via closure to extract specific data. This pattern allows selectors to access component props without requiring an ownProps parameter.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/hooks.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useSelector } from 'react-redux'\n\nexport const TodoListItem = (props) => {\n  const todo = useSelector((state) => state.todos[props.id])\n  return <div>{todo.text}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Connect without mapStateToProps\nDESCRIPTION: Example showing how to use mapDispatchToProps without mapStateToProps by passing null as first argument\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconnect(null, mapDispatchToProps)(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Connecting TodoList Component with mapStateToProps\nDESCRIPTION: Shows how to connect a TodoList component to read state from the Redux store using mapStateToProps. This example manually transforms the todos data structure from the store.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/introduction/basic-tutorial.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// components/TodoList.js\n\n// ...other imports\nimport { connect } from \"react-redux\";\n\nconst TodoList = // ... UI component implementation\n\nconst mapStateToProps = state => {\n  const { byIds, allIds } = state.todos || {};\n  const todos =\n    allIds && allIds.length\n      ? allIds.map(id => (byIds ? { ...byIds[id], id } : null))\n      : null;\n  return { todos };\n};\n\nexport default connect(mapStateToProps)(TodoList);\n```\n\n----------------------------------------\n\nTITLE: Injecting Specific State Slice and Dispatch in React-Redux\nDESCRIPTION: Shows how to inject a specific slice of state (todos) and the dispatch function into a component. This is a common pattern that allows components to access only the state they need.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nexport default connect(mapStateToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Reusable Connected Component in React-Redux\nDESCRIPTION: Demonstrates how to create a reusable connected component by storing the result of the first connect call in a variable, then applying it to multiple components. This approach enables different components to share the same Redux connection behavior.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { login, logout } from './actionCreators'\n\nconst mapState = (state) => state.user\nconst mapDispatch = { login, logout }\n\n// first call: returns a hoc that you can use to wrap any component\nconst connectUser = connect(mapState, mapDispatch)\n\n// second call: returns the wrapper component with mergedProps\n// you may use the hoc to enable different components to get the same behavior\nconst ConnectedUserLogin = connectUser(Login)\nconst ConnectedUserProfile = connectUser(Profile)\n```\n\n----------------------------------------\n\nTITLE: MapStateToProps with Two Parameters\nDESCRIPTION: Example of a mapStateToProps function that explicitly defines two parameters to receive both state and ownProps.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst mapStateToProps = (state, ownProps) => {\n  console.log(state) // state\n  console.log(ownProps) // ownProps\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting state and grouped action creators in React-Redux\nDESCRIPTION: Example showing how to inject todos from state and multiple sets of action creators grouped under different property names.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as todoActionCreators from './todoActionCreators'\nimport * as counterActionCreators from './counterActionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    todoActions: bindActionCreators(todoActionCreators, dispatch),\n    counterActions: bindActionCreators(counterActionCreators, dispatch),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Using Default Dispatch Prop in a Counter Component with React Redux\nDESCRIPTION: Example of a Counter component using props.dispatch directly to dispatch actions to the Redux store when buttons are clicked.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Counter({ count, dispatch }) {\n  return (\n    <div>\n      <button onClick={() => dispatch({ type: 'DECREMENT' })}>-</button>\n      <span>{count}</span>\n      <button onClick={() => dispatch({ type: 'INCREMENT' })}>+</button>\n      <button onClick={() => dispatch({ type: 'RESET' })}>reset</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Redux State Slice with createSlice\nDESCRIPTION: Defines a Redux slice for a counter, including initial state and reducer functions. Uses createSlice from Redux Toolkit, which allows for \"mutating\" logic that becomes correct immutable updates.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/quick-start.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSlice } from '@reduxjs/toolkit'\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: 0,\n  },\n  reducers: {\n    increment: (state) => {\n      state.value += 1\n    },\n    decrement: (state) => {\n      state.value -= 1\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload\n    },\n  },\n})\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\n\nexport default counterSlice.reducer\n```\n\n----------------------------------------\n\nTITLE: Multi-Parameter mapStateToProps Examples in React-Redux\nDESCRIPTION: Shows various implementations of mapStateToProps that receive both state and ownProps parameters, including standard functions, arrow functions, and rest parameters.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/connect.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (state, ownProps) => {\n  console.log(state) // state\n  console.log(ownProps) // ownProps\n}\n\nfunction mapStateToProps() {\n  console.log(arguments[0]) // state\n  console.log(arguments[1]) // ownProps\n}\n\nconst mapStateToProps = (...args) => {\n  console.log(args[0]) // state\n  console.log(args[1]) // ownProps\n}\n```\n\n----------------------------------------\n\nTITLE: Object Shorthand mapDispatchToProps in React Redux\nDESCRIPTION: Demonstrates the simplified object shorthand syntax for mapDispatchToProps that automatically binds action creators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = {\n  increment,\n  decrement,\n  reset,\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating mapStateToProps With ownProps Parameter in React Redux\nDESCRIPTION: This code snippet illustrates how mapStateToProps functions receive both state and ownProps when defined with zero or two mandatory parameters, including variations with rest parameters and the arguments object.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state, ownProps) {\n  console.log(state) // state\n  console.log(ownProps) // ownProps\n}\n\nfunction mapStateToProps() {\n  console.log(arguments[0]) // state\n  console.log(arguments[1]) // ownProps\n}\n\nfunction mapStateToProps(...args) {\n  console.log(args[0]) // state\n  console.log(args[1]) // ownProps\n}\n```\n\n----------------------------------------\n\nTITLE: Default connect() Usage Examples\nDESCRIPTION: Shows different ways to use connect() without providing mapDispatchToProps, where the component receives dispatch by default.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// do not pass `mapDispatchToProps`\nconnect()(MyComponent)\nconnect(mapState)(MyComponent)\nconnect(mapState, null, mergeProps, options)(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Forwarding Arguments to Action Creators in mapDispatchToProps\nDESCRIPTION: Example of forwarding arguments to action creators in a mapDispatchToProps function, showing both explicit and implicit argument forwarding.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // explicitly forwarding arguments\n    onClick: (event) => dispatch(trackClick(event)),\n\n    // implicitly forwarding arguments\n    onReceiveImpressions: (...impressions) =>\n      dispatch(trackImpressions(impressions)),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default Dispatch Prop in a Counter Component with React Redux\nDESCRIPTION: Shows how to use the dispatch prop in a functional component to dispatch various actions directly from event handlers.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Counter({ count, dispatch }) {\n  return (\n    <div>\n      <button onClick={() => dispatch({ type: 'DECREMENT' })}>-</button>\n      <span>{count}</span>\n      <button onClick={() => dispatch({ type: 'INCREMENT' })}>+</button>\n      <button onClick={() => dispatch({ type: 'RESET' })}>reset</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom useShallowEqualSelector Hook Implementation\nDESCRIPTION: Custom hook implementation that combines useSelector with shallowEqual comparison.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/hooks.md#2025-04-21_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nimport { useSelector, shallowEqual } from 'react-redux'\n\nexport function useShallowEqualSelector(selector) {\n  return useSelector(selector, shallowEqual)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default Dispatch Props in a Counter Component\nDESCRIPTION: Example of a Counter component that uses the dispatch prop to trigger state changes. This approach requires components to know about the dispatch function and action structure.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Counter({ count, dispatch }) {\n  return (\n    <div>\n      <button onClick={() => dispatch({ type: 'DECREMENT' })}>-</button>\n      <span>{count}</span>\n      <button onClick={() => dispatch({ type: 'INCREMENT' })}>+</button>\n      <button onClick={() => dispatch({ type: 'RESET' })}>reset</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining mapDispatchToProps as a Function with Plain Actions in React Redux\nDESCRIPTION: Shows how to define mapDispatchToProps as a function that returns an object with methods that dispatch plain action objects.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // dispatching plain actions\n    increment: () => dispatch({ type: 'INCREMENT' }),\n    decrement: () => dispatch({ type: 'DECREMENT' }),\n    reset: () => dispatch({ type: 'RESET' }),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inference with React-Redux Connect\nDESCRIPTION: Shows a shortened approach to typing connect using TypeScript's type inference capabilities. Uses ReturnType and typeof to automatically infer StateProps and DispatchProps from mapState and mapDispatch implementations.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/usage-with-typescript.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst mapState = (state: RootState) => ({\n  isOn: state.isOn,\n})\n\nconst mapDispatch = {\n  toggleOn: () => ({ type: 'TOGGLE_IS_ON' }),\n}\n\ntype StateProps = ReturnType<typeof mapState>\ntype DispatchProps = typeof mapDispatch\n\ntype Props = StateProps & DispatchProps & OwnProps\n```\n\n----------------------------------------\n\nTITLE: Forwarding Arguments to Action Creators in mapDispatchToProps\nDESCRIPTION: Shows how to forward arguments to action creators when defining a mapDispatchToProps function, both explicitly and implicitly passing arguments through.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // explicitly forwarding arguments\n    onClick: (event) => dispatch(trackClick(event)),\n\n    // implicitly forwarding arguments\n    onReceiveImpressions: (...impressions) =>\n      dispatch(trackImpressions(impressions)),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Components with Default Dispatch Prop in React Redux\nDESCRIPTION: Demonstrates how to connect a component without specifying mapDispatchToProps, which provides the component with a dispatch prop by default.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconnect()(MyComponent)\n// which is equivalent with\nconnect(null, null)(MyComponent)\n\n// or\nconnect(mapStateToProps /** no second argument */)(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Passing Action Dispatching Functions to Child Components in React Redux\nDESCRIPTION: Demonstrates how to pass action dispatching functions to unconnected child components, allowing them to dispatch Redux actions without being aware of Redux.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// pass down toggleTodo to child component\n// making Todo able to dispatch the toggleTodo action\nconst TodoList = ({ todos, toggleTodo }) => (\n  <div>\n    {todos.map((todo) => (\n      <Todo todo={todo} onClick={toggleTodo} />\n    ))}\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting a React component to Redux store using connect()\nDESCRIPTION: Example of connecting a React component to Redux store using the connect() function. This shows how to map state and action creators to component props.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/introduction/quick-start.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { connect } from 'react-redux'\nimport { increment, decrement, reset } from './actionCreators'\n\n// const Counter = ...\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n  return {\n    counter: state.counter,\n  }\n}\n\nconst mapDispatchToProps = { increment, decrement, reset }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom State Comparison in Connect\nDESCRIPTION: Example of custom areStatesEqual implementation for optimizing state comparison in mapStateToProps\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst areStatesEqual = (next, prev) =>\n  prev.entities.todos === next.entities.todos\n```\n\n----------------------------------------\n\nTITLE: Object Shorthand Form for mapDispatchToProps in React Redux\nDESCRIPTION: Example of using the object shorthand form for mapDispatchToProps, where each field is an action creator that will be automatically bound to dispatch by React Redux.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/connect.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addTodo, deleteTodo, toggleTodo } from './actionCreators'\n\nconst mapDispatchToProps = {\n  addTodo,\n  deleteTodo,\n  toggleTodo,\n}\n\nexport default connect(null, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Implementing mapStateToProps with State Argument in React Redux\nDESCRIPTION: Example of implementing a mapStateToProps function that extracts todos data from the Redux store state. This function is connected to a TodoList component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// TodoList.js\n\nfunction mapStateToProps(state) {\n  const { todos } = state\n  return { todoList: todos.allIds }\n}\n\nexport default connect(mapStateToProps)(TodoList)\n```\n\n----------------------------------------\n\nTITLE: Passing Action Dispatching Logic to Child Components in React Redux\nDESCRIPTION: Shows how to pass down action dispatching functions to child components, allowing them to dispatch actions without being aware of Redux.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// pass down toggleTodo to child component\n// making Todo able to dispatch the toggleTodo action\nconst TodoList = ({ todos, toggleTodo }) => (\n  <div>\n    {todos.map((todo) => (\n      <Todo todo={todo} onClick={toggleTodo} />\n    ))}\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing handleAddTodo in AddTodo Component\nDESCRIPTION: Shows the implementation of the handleAddTodo function in the AddTodo component, which dispatches the addTodo action and resets the input.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/introduction/basic-tutorial.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// components/AddTodo.js\n\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../redux/actions'\n\nclass AddTodo extends React.Component {\n  // ...\n\n  handleAddTodo = () => {\n    // dispatches actions to add todo\n    this.props.addTodo(this.state.input)\n\n    // sets state back to empty string\n    this.setState({ input: '' })\n  }\n\n  render() {\n    return (\n      <div>\n        <input\n          onChange={(e) => this.updateInput(e.target.value)}\n          value={this.state.input}\n        />\n        <button className=\"add-todo\" onClick={this.handleAddTodo}>\n          Add Todo\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default connect(null, { addTodo })(AddTodo)\n```\n\n----------------------------------------\n\nTITLE: Forwarding Arguments to Action Creators in mapDispatchToProps\nDESCRIPTION: Demonstrates how to forward arguments to action creators when defining mapDispatchToProps, both explicitly and implicitly.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // explicitly forwarding arguments\n    onClick: (event) => dispatch(trackClick(event)),\n\n    // implicitly forwarding arguments\n    onReceiveImpressions: (...impressions) =>\n      dispatch(trackImpressions(impressions)),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Todo Filtering Selector Implementation\nDESCRIPTION: Implements a selector function to filter todos based on visibility filter state.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/connect.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// redux/selectors.js\n\n// ... other selectors\nexport const getTodosByVisibilityFilter = (store, visibilityFilter) => {\n  const allTodos = getTodos(store)\n  switch (visibilityFilter) {\n    case VISIBILITY_FILTERS.COMPLETED:\n      return allTodos.filter((todo) => todo.completed)\n    case VISIBILITY_FILTERS.INCOMPLETE:\n      return allTodos.filter((todo) => !todo.completed)\n    case VISIBILITY_FILTERS.ALL:\n    default:\n      return allTodos\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Components with Default Dispatch in React Redux\nDESCRIPTION: Example of connecting a component without specifying mapDispatchToProps, which provides the component with props.dispatch by default.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconnect()(MyComponent)\n// which is equivalent with\nconnect(null, null)(MyComponent)\n\n// or\nconnect(mapStateToProps /** no second argument */)(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Using mapStateToProps with ownProps Parameter in React Redux\nDESCRIPTION: Demonstrates how to use both state and ownProps in mapStateToProps to retrieve and combine data from the store and component properties.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Todo.js\n\nfunction mapStateToProps(state, ownProps) {\n  const { visibilityFilter } = state\n  const { id } = ownProps\n  const todo = getTodoById(state, id)\n\n  // component receives additionally:\n  return { todo, visibilityFilter }\n}\n\n// Later, in your application, a parent component renders:\n;<ConnectedTodo id={123} />\n// and your component receives props.id, props.todo, and props.visibilityFilter\n```\n\n----------------------------------------\n\nTITLE: Injecting state and action creators as named property in React-Redux\nDESCRIPTION: Example showing how to inject todos from state and all action creators grouped under an 'actions' property using bindActionCreators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return { actions: bindActionCreators(actionCreators, dispatch) }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Connect with Action Creators\nDESCRIPTION: Shows different ways to use action creators with connect, including named object and inline definition.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport {increment, decrement, reset} from \"./counterActions\";\n\nconst actionCreators = {\n  increment,\n  decrement,\n  reset\n}\n\nexport default connect(mapState, actionCreators)(Counter);\n\n// or\nexport default connect(\n  mapState,\n  { increment, decrement, reset }\n)(Counter);\n```\n\n----------------------------------------\n\nTITLE: Manual Dispatch Injection with bindActionCreators\nDESCRIPTION: Example showing how to manually inject dispatch while using bindActionCreators for action creators\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bindActionCreators } from 'redux'\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    dispatch,\n    ...bindActionCreators({ increment, decrement, reset }, dispatch),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining mapStateToProps Function in JavaScript\nDESCRIPTION: Shows the basic structure of a mapStateToProps function, which takes state and optionally ownProps as arguments and returns an object of data for the component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state, ownProps?)\n```\n\n----------------------------------------\n\nTITLE: Using mergeProps to Customize Props in React-Redux\nDESCRIPTION: Demonstrates using the mergeProps parameter to customize how state, dispatch, and own props are combined. This example injects user-specific todos and creates a custom addTodo function that includes the userId.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mergeProps(stateProps, dispatchProps, ownProps) {\n  return Object.assign({}, ownProps, {\n    todos: stateProps.todos[ownProps.userId],\n    addTodo: (text) => dispatchProps.addTodo(ownProps.userId, text),\n  })\n}\n\nexport default connect(mapStateToProps, actionCreators, mergeProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Connecting Todo Component with toggleTodo Action\nDESCRIPTION: Shows how to connect a Todo component to dispatch toggleTodo action using connect()\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/introduction/basic-tutorial.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// components/Todo.js\n\n// ... other imports\nimport { connect } from \"react-redux\";\nimport { toggleTodo } from \"../redux/actions\";\n\nconst Todo = // ... component implementation\n\nexport default connect(\n  null,\n  { toggleTodo }\n)(Todo);\n```\n\n----------------------------------------\n\nTITLE: Using bindActionCreators in mapDispatchToProps with React Redux\nDESCRIPTION: Shows how to use bindActionCreators to simplify the mapDispatchToProps function by automatically wrapping action creators with dispatch calls.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bindActionCreators } from 'redux'\n// ...\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ increment, decrement, reset }, dispatch)\n}\n\n// component receives props.increment, props.decrement, props.reset\nconnect(null, mapDispatchToProps)(Counter)\n```\n\n----------------------------------------\n\nTITLE: Using ownProps Parameter in mapDispatchToProps\nDESCRIPTION: Demonstrates using the ownProps parameter in mapDispatchToProps to access component props and use them when dispatching actions, making the bindings reactive to prop changes.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// binds on component re-rendering\n<button onClick={() => this.props.toggleTodo(this.props.todoId)} />\n\n// binds on `props` change\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  toggleTodo: () => dispatch(toggleTodo(ownProps.todoId))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing mapStateToProps with State and ownProps Parameters in React Redux\nDESCRIPTION: Example of a mapStateToProps function that takes both state and ownProps parameters. This allows the function to use component props to determine which state data to extract.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/connect.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (state, ownProps) => ({\n  todo: state.todos[ownProps.id],\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating mapStateToProps With ownProps in React-Redux\nDESCRIPTION: This snippet illustrates mapStateToProps functions that receive ownProps as the second argument due to their function definition with no or two parameters.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (state, ownProps) => {\n  console.log(state) // state\n  console.log(ownProps) // ownProps\n}\n\nfunction mapStateToProps() {\n  console.log(arguments[0]) // state\n  console.log(arguments[1]) // ownProps\n}\n\nconst mapStateToProps = (...args) => {\n  console.log(args[0]) // state\n  console.log(args[1]) // ownProps\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Redux Connect Pattern with mapStateToProps and Action Creators\nDESCRIPTION: Demonstrates the basic pattern of connecting a component to Redux store using connect() with both mapStateToProps and action creators\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/introduction/basic-tutorial.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n// ... Component\nconst mapStateToProps = (state) => state.partOfState\nexport default connect(mapStateToProps, actionCreators)(Component)\n```\n\n----------------------------------------\n\nTITLE: Basic Connect Function Usage in React Redux\nDESCRIPTION: Demonstrates the typical pattern for using the connect function to map state and dispatch to component props. Shows the standard two-step process where connect returns a function that wraps the component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/introduction/basic-tutorial.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst mapStateToProps = (state, ownProps) => ({\n  // ... computed data from state and optionally ownProps\n})\n\nconst mapDispatchToProps = {\n  // ... normally is an object full of action creators\n}\n\n// `connect` returns a new function that accepts the component to wrap:\nconst connectToStore = connect(mapStateToProps, mapDispatchToProps)\n// and that function returns the connected, wrapper component:\nconst ConnectedComponent = connectToStore(Component)\n\n// We normally do both in one step, like this:\nconnect(mapStateToProps, mapDispatchToProps)(Component)\n```\n\n----------------------------------------\n\nTITLE: Using Action Creators in mapDispatchToProps with React Redux\nDESCRIPTION: Example showing how to use action creators inside mapDispatchToProps, following the convention of naming the field keys the same as the action creators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst increment = () => ({ type: 'INCREMENT' })\nconst decrement = () => ({ type: 'DECREMENT' })\nconst reset = () => ({ type: 'RESET' })\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // dispatching actions returned by action creators\n    increment: () => dispatch(increment()),\n    decrement: () => dispatch(decrement()),\n    reset: () => dispatch(reset()),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redux Action Creator Implementation\nDESCRIPTION: Defines an addTodo action creator that generates action objects with unique IDs for new todo items. The action follows a type and payload structure pattern.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/introduction/basic-tutorial.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// redux/actions.js\nimport { ADD_TODO } from './actionTypes'\n\nlet nextTodoId = 0\nexport const addTodo = (content) => ({\n  type: ADD_TODO,\n  payload: {\n    id: ++nextTodoId,\n    content,\n  },\n})\n\n// ... other actions\n```\n\n----------------------------------------\n\nTITLE: Complete AddTodo Component Implementation\nDESCRIPTION: Full implementation of AddTodo component with Redux connection and event handlers.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/introduction/basic-tutorial.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// components/AddTodo.js\n\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../redux/actions'\n\nclass AddTodo extends React.Component {\n  // ...\n\n  handleAddTodo = () => {\n    // dispatches actions to add todo\n    this.props.addTodo(this.state.input)\n\n    // sets state back to empty string\n    this.setState({ input: '' })\n  }\n\n  render() {\n    return (\n      <div>\n        <input\n          onChange={(e) => this.updateInput(e.target.value)}\n          value={this.state.input}\n        />\n        <button className=\"add-todo\" onClick={this.handleAddTodo}>\n          Add Todo\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default connect(null, { addTodo })(AddTodo)\n```\n\n----------------------------------------\n\nTITLE: Implementing mapStateToProps in TodoList Component\nDESCRIPTION: This example demonstrates how to implement mapStateToProps for a TodoList component, extracting the todo list IDs from the state.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// TodoList.js\n\nfunction mapStateToProps(state) {\n  const { todos } = state\n  return { todoList: todos.allIds }\n}\n\nexport default connect(mapStateToProps)(TodoList)\n```\n\n----------------------------------------\n\nTITLE: Automatic bindActionCreators in React Redux\nDESCRIPTION: Shows how React Redux internally handles bindActionCreators when using object shorthand form\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n(dispatch) => bindActionCreators(mapDispatchToProps, dispatch)\n```\n\n----------------------------------------\n\nTITLE: Implementing Factory Functions with Memoized Selectors in React-Redux\nDESCRIPTION: This snippet demonstrates how to use factory functions with memoized selectors in React-Redux to create component-instance-specific selectors.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst makeUniqueSelectorInstance = () =>\n  createSelector([selectItems, selectItemId], (items, itemId) => items[itemId])\nconst makeMapState = (state) => {\n  const selectItemForThisComponent = makeUniqueSelectorInstance()\n  return function realMapState(state, ownProps) {\n    const item = selectItemForThisComponent(state, ownProps.itemId)\n    return { item }\n  }\n}\nexport default connect(makeMapState)(SomeComponent)\n```\n\n----------------------------------------\n\nTITLE: Using Typed Redux Hooks in React Components\nDESCRIPTION: Demonstrates how to use the pre-typed Redux hooks in a React component to access state and dispatch actions with proper TypeScript support.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/typescript.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react'\n\nimport { useAppSelector, useAppDispatch } from 'app/hooks'\n\nimport { decrement, increment } from './counterSlice'\n\nexport function Counter() {\n  // The `state` arg is correctly typed as `RootState` already\n  const count = useAppSelector((state) => state.counter.value)\n  const dispatch = useAppDispatch()\n\n  // omit rendering logic\n}\n```\n\n----------------------------------------\n\nTITLE: Default connect Usage without mapDispatchToProps\nDESCRIPTION: Example showing how to use connect without providing mapDispatchToProps to receive dispatch as a prop.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// component receives `dispatch`\nconnect(mapStateToProps /** no second argument*/)(Component)\n```\n\n----------------------------------------\n\nTITLE: Using bindActionCreators in mapDispatchToProps\nDESCRIPTION: This example demonstrates how to use Redux's bindActionCreators function to simplify the process of wrapping action creators with dispatch calls in mapDispatchToProps.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { bindActionCreators } from 'redux'\n// ...\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ increment, decrement, reset }, dispatch)\n}\n\n// component receives props.increment, props.decrement, props.reset\nconnect(null, mapDispatchToProps)(Counter)\n```\n\n----------------------------------------\n\nTITLE: Connecting TodoList with Filtered Todos\nDESCRIPTION: Shows how to connect TodoList component using mapStateToProps with a selector to get filtered todos based on current visibility filter.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/introduction/basic-tutorial.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// components/TodoList.js\n\n// ...\n\nconst mapStateToProps = (state) => {\n  const { visibilityFilter } = state\n  const todos = getTodosByVisibilityFilter(state, visibilityFilter)\n  return { todos }\n}\n\nexport default connect(mapStateToProps)(TodoList)\n```\n\n----------------------------------------\n\nTITLE: Using Action Creators in mapDispatchToProps with React Redux\nDESCRIPTION: Shows how to use action creators instead of plain object actions in mapDispatchToProps, following the convention of naming fields the same as action creators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst increment = () => ({ type: 'INCREMENT' })\nconst decrement = () => ({ type: 'DECREMENT' })\nconst reset = () => ({ type: 'RESET' })\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // dispatching actions returned by action creators\n    increment: () => dispatch(increment()),\n    decrement: () => dispatch(decrement()),\n    reset: () => dispatch(reset()),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redux Action Creator Implementation\nDESCRIPTION: Shows how to implement a Redux action creator for adding todos with unique IDs.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/introduction/basic-tutorial.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// redux/actions.js\nimport { ADD_TODO } from './actionTypes'\n\nlet nextTodoId = 0\nexport const addTodo = (content) => ({\n  type: ADD_TODO,\n  payload: {\n    id: ++nextTodoId,\n    content,\n  },\n})\n\n// ... other actions\n```\n\n----------------------------------------\n\nTITLE: Redux Selectors Implementation\nDESCRIPTION: Implementation of Redux selector functions for accessing and computing derived state from the store.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/connect.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// redux/selectors.js\n\nexport const getTodosState = (store) => store.todos\n\nexport const getTodoList = (store) =>\n  getTodosState(store) ? getTodosState(store).allIds : []\n\nexport const getTodoById = (store, id) =>\n  getTodosState(store) ? { ...getTodosState(store).byIds[id], id } : {}\n\nexport const getTodos = (store) =>\n  getTodoList(store).map((id) => getTodoById(store, id))\n```\n\n----------------------------------------\n\nTITLE: Comparing Dispatch Awareness in Button Components with React Redux\nDESCRIPTION: Compares two approaches for handling button clicks: one where the button is aware of dispatch, and another where the dispatch logic is encapsulated in a function.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// button needs to be aware of \"dispatch\"\n<button onClick={() => dispatch({ type: \"SOMETHING\" })} />\n\n// button unaware of \"dispatch\",\n<button onClick={doSomething} />\n```\n\n----------------------------------------\n\nTITLE: Directly Accessing ReactReduxContext in React Components\nDESCRIPTION: This snippet shows how to directly access the Redux store in a React component by using the ReactReduxContext consumer. This is considered an advanced technique and not part of the public API.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/accessing-store.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactReduxContext } from 'react-redux'\n\n// in your connected component\nfunction MyConnectedComponent() {\n  return (\n    <ReactReduxContext.Consumer>\n      {({ store }) => {\n        // do something useful with the store, like passing it to a child\n        // component where it can be used in lifecycle methods\n      }}\n    </ReactReduxContext.Consumer>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Connect Function Signature\nDESCRIPTION: The connect function signature showing all possible parameters for connecting a React component to a Redux store.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconnect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo Filtering Selector\nDESCRIPTION: Defines a selector function to filter todos based on visibility filter state.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/introduction/basic-tutorial.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// redux/selectors.js\n\n// ... other selectors\nexport const getTodosByVisibilityFilter = (store, visibilityFilter) => {\n  const allTodos = getTodos(store)\n  switch (visibilityFilter) {\n    case VISIBILITY_FILTERS.COMPLETED:\n      return allTodos.filter((todo) => todo.completed)\n    case VISIBILITY_FILTERS.INCOMPLETE:\n      return allTodos.filter((todo) => !todo.completed)\n    case VISIBILITY_FILTERS.ALL:\n    default:\n      return allTodos\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Redux Selectors for Todos\nDESCRIPTION: Shows the implementation of selector functions to retrieve todo data from the Redux store, enabling reusable and optimized state lookups.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/introduction/basic-tutorial.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// redux/selectors.js\n\nexport const getTodosState = (store) => store.todos\n\nexport const getTodoList = (store) =>\n  getTodosState(store) ? getTodosState(store).allIds : []\n\nexport const getTodoById = (store, id) =>\n  getTodosState(store) ? { ...getTodosState(store).byIds[id], id } : {}\n\nexport const getTodos = (store) =>\n  getTodoList(store).map((id) => getTodoById(store, id))\n```\n\n----------------------------------------\n\nTITLE: Multi-Parameter mapStateToProps Implementation in React Redux\nDESCRIPTION: Shows different ways to implement mapStateToProps functions that will receive ownProps, including regular functions, arrow functions, and rest parameters.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (state, ownProps) => {\n  console.log(state) // state\n  console.log(ownProps) // ownProps\n}\n\nfunction mapStateToProps() {\n  console.log(arguments[0]) // state\n  console.log(arguments[1]) // ownProps\n}\n\nconst mapStateToProps = (...args) => {\n  console.log(args[0]) // state\n  console.log(args[1]) // ownProps\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting TodoList with Filtered Todos\nDESCRIPTION: Shows how to connect TodoList component with filtered todos using a selector\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/introduction/basic-tutorial.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// components/TodoList.js\n\n// ...\n\nconst mapStateToProps = (state) => {\n  const { visibilityFilter } = state\n  const todos = getTodosByVisibilityFilter(state, visibilityFilter)\n  return { todos }\n}\n\nexport default connect(mapStateToProps)(TodoList)\n```\n\n----------------------------------------\n\nTITLE: MapDispatchToProps Function Implementation\nDESCRIPTION: Example of mapDispatchToProps function implementation showing different action dispatching patterns.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/connect.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // dispatching plain actions\n    increment: () => dispatch({ type: 'INCREMENT' }),\n    decrement: () => dispatch({ type: 'DECREMENT' }),\n    reset: () => dispatch({ type: 'RESET' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo Filtering Selector\nDESCRIPTION: Creates a selector function to filter todos based on visibility filter state\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/introduction/basic-tutorial.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// redux/selectors.js\n\n// ... other selectors\nexport const getTodosByVisibilityFilter = (store, visibilityFilter) => {\n  const allTodos = getTodos(store)\n  switch (visibilityFilter) {\n    case VISIBILITY_FILTERS.COMPLETED:\n      return allTodos.filter((todo) => todo.completed)\n    case VISIBILITY_FILTERS.INCOMPLETE:\n      return allTodos.filter((todo) => !todo.completed)\n    case VISIBILITY_FILTERS.ALL:\n    default:\n      return allTodos\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying mapDispatchToProps with bindActionCreators\nDESCRIPTION: Shows how to use bindActionCreators in a mapDispatchToProps function to simplify the creation of action dispatching props, providing a cleaner implementation.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bindActionCreators } from 'redux'\n// ...\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ increment, decrement, reset }, dispatch)\n}\n\n// component receives props.increment, props.decrement, props.reset\nconnect(null, mapDispatchToProps)(Counter)\n```\n\n----------------------------------------\n\nTITLE: Using Action Creators with mapDispatchToProps\nDESCRIPTION: Example of using action creator functions with mapDispatchToProps, following the convention of naming the field keys the same as the action creators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst increment = () => ({ type: 'INCREMENT' })\nconst decrement = () => ({ type: 'DECREMENT' })\nconst reset = () => ({ type: 'RESET' })\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // dispatching actions returned by action creators\n    increment: () => dispatch(increment()),\n    decrement: () => dispatch(decrement()),\n    reset: () => dispatch(reset()),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TodoList Component with mapStateToProps\nDESCRIPTION: Implementation of TodoList component with Redux state mapping and selector functions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/introduction/basic-tutorial.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// components/TodoList.js\n\n// ...other imports\nimport { connect } from \"react-redux\";\n\nconst TodoList = // ... UI component implementation\n\nconst mapStateToProps = state => {\n  const { byIds, allIds } = state.todos || {};\n  const todos =\n    allIds && allIds.length\n      ? allIds.map(id => (byIds ? { ...byIds[id], id } : null))\n      : null;\n  return { todos };\n};\n\nexport default connect(mapStateToProps)(TodoList);\n```\n\n----------------------------------------\n\nTITLE: Multi-Parameter MapStateToProps Implementation in React-Redux\nDESCRIPTION: Examples of mapStateToProps implementations that receive both state and ownProps parameters, due to having either no mandatory parameters or two parameters.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/connect.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (state, ownProps) => {\n  console.log(state) // state\n  console.log(ownProps) // ownProps\n}\n\nfunction mapStateToProps() {\n  console.log(arguments[0]) // state\n  console.log(arguments[1]) // ownProps\n}\n\nconst mapStateToProps = (...args) => {\n  console.log(args[0]) // state\n  console.log(args[1]) // ownProps\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Connect Pattern Examples\nDESCRIPTION: More complex connect() implementations showing various combinations of mapState and mapDispatch\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/connect.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nexport default connect(mapStateToProps)(TodoApp)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nexport default connect(mapStateToProps, actionCreators)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Basic Redux Connect with mapStateToProps and Action Creators\nDESCRIPTION: Demonstrates basic usage of connect() HOC with both state mapping and action creators injection.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/introduction/basic-tutorial.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n// ... Component\nconst mapStateToProps = (state) => state.partOfState\nexport default connect(mapStateToProps, actionCreators)(Component)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating mapStateToProps Without ownProps in React-Redux\nDESCRIPTION: This snippet shows examples of mapStateToProps functions that do not receive ownProps as the second argument due to their function definition.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  console.log(state) // state\n  console.log(arguments[1]) // undefined\n}\n\nconst mapStateToProps = (state, ownProps = {}) => {\n  console.log(state) // state\n  console.log(ownProps) // {}\n}\n```\n\n----------------------------------------\n\nTITLE: Connected Counter Component with Action Dispatching Props\nDESCRIPTION: Example of a Counter component using the action dispatching functions provided as props by mapDispatchToProps.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Counter({ count, increment, decrement, reset }) {\n  return (\n    <div>\n      <button onClick={decrement}>-</button>\n      <span>{count}</span>\n      <button onClick={increment}>+</button>\n      <button onClick={reset}>reset</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Connect Usage Examples\nDESCRIPTION: Collection of common connect() usage patterns, from basic to advanced implementations\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default connect()(TodoApp)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n\nexport default connect(null, actionCreators)(TodoApp)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// don't do this!\nexport default connect((state) => state)(TodoApp)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nexport default connect(mapStateToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Complex MapDispatchToProps Return Example\nDESCRIPTION: Comprehensive example showing different ways to return dispatch functions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/connect.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst createMyAction = () => ({ type: 'MY_ACTION' })\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const boundActions = bindActionCreators({ createMyAction }, dispatch)\n  return {\n    dispatchPlainObject: () => dispatch({ type: 'MY_ACTION' }),\n    dispatchActionCreatedByActionCreator: () => dispatch(createMyAction()),\n    ...boundActions,\n    // you may return dispatch here\n    dispatch,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Parameter mapStateToProps Implementation in React Redux\nDESCRIPTION: Demonstrates mapStateToProps functions with single parameters that won't receive ownProps as the second argument. Includes both regular function and arrow function syntax examples.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  console.log(state) // state\n  console.log(arguments[1]) // undefined\n}\n\nconst mapStateToProps = (state, ownProps = {}) => {\n  console.log(state) // state\n  console.log(ownProps) // {}\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Selector Factory Implementation\nDESCRIPTION: Example implementation of a selector factory that injects todos for specific users and binds action creators with user context. Demonstrates advanced usage of connectAdvanced with custom state selection and action binding.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/connect-advanced.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction selectorFactory(dispatch) {\n  let ownProps = {}\n  let result = {}\n\n  const actions = bindActionCreators(actionCreators, dispatch)\n  const addTodo = (text) => actions.addTodo(ownProps.userId, text)\n\n  return (nextState, nextOwnProps) => {\n    const todos = nextState.todos[nextOwnProps.userId]\n    const nextResult = { ...nextOwnProps, todos, addTodo }\n    ownProps = nextOwnProps\n    if (!shallowEqual(result, nextResult)) result = nextResult\n    return result\n  }\n}\nexport default connectAdvanced(selectorFactory)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Defining addTodo Action Creator for Redux\nDESCRIPTION: Shows the implementation of an action creator function for adding a todo item, which generates a unique ID for each new todo.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/introduction/basic-tutorial.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// redux/actions.js\nimport { ADD_TODO } from './actionTypes'\n\nlet nextTodoId = 0\nexport const addTodo = (content) => ({\n  type: ADD_TODO,\n  payload: {\n    id: ++nextTodoId,\n    content,\n  },\n})\n\n// ... other actions\n```\n\n----------------------------------------\n\nTITLE: Using ConnectedProps with TypeScript\nDESCRIPTION: Shows how to use the ConnectedProps helper type to automatically infer Redux-connected component props, reducing the need for manual type declarations.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/static-types.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect, ConnectedProps } from 'react-redux'\n\ninterface RootState {\n  isOn: boolean\n}\n\nconst mapState = (state: RootState) => ({\n  isOn: state.isOn,\n})\n\nconst mapDispatch = {\n  toggleOn: () => ({ type: 'TOGGLE_IS_ON' }),\n}\n\nconst connector = connect(mapState, mapDispatch)\n\n// The inferred type will look like:\n// {isOn: boolean, toggleOn: () => void}\ntype PropsFromRedux = ConnectedProps<typeof connector>\n```\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Props extends PropsFromRedux {\n  backgroundColor: string\n}\n\nconst MyComponent = (props: Props) => (\n  <div style={{ backgroundColor: props.backgroundColor }}>\n    <button onClick={props.toggleOn}>\n      Toggle is {props.isOn ? 'ON' : 'OFF'}\n    </button>\n  </div>\n)\n\nexport default connector(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Implementing mapStateToProps with State and ownProps in TypeScript\nDESCRIPTION: Example showing how to use both state and ownProps in mapStateToProps to retrieve specific data based on component props in a TypeScript implementation.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Todo.js\n\nfunction mapStateToProps(state, ownProps) {\n  const { visibilityFilter } = state\n  // ownProps would look like { \"id\" : 123 }\n  const { id } = ownProps\n  const todo = getTodoById(state, id)\n\n  // component receives additionally:\n  return { todo, visibilityFilter }\n}\n\n// Later, in your application, a parent component renders:\n<ConnectedTodo id={123} />\n// and your component receives props.id, props.todo, and props.visibilityFilter\n```\n\n----------------------------------------\n\nTITLE: Internal bindActionCreators Call in React-Redux\nDESCRIPTION: Demonstrates how React-Redux internally uses bindActionCreators to bind action creators to the store's dispatch when using the object shorthand form.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// internally, React-Redux calls bindActionCreators\n// to bind the action creators to the dispatch of your store\nbindActionCreators(mapDispatchToProps, dispatch)\n```\n\n----------------------------------------\n\nTITLE: MapDispatchToProps with OwnProps\nDESCRIPTION: Example showing mapDispatchToProps with component props integration.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/connect.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  toggleTodo: () => dispatch(toggleTodo(ownProps.todoId))\n}\n```\n\n----------------------------------------\n\nTITLE: Using bindActionCreators in Redux\nDESCRIPTION: Demonstrates how to use bindActionCreators to wrap action creators with dispatch calls. Shows both single action creator binding and binding multiple action creators in an object.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bindActionCreators } from 'redux'\n\nconst increment = () => ({ type: 'INCREMENT' })\nconst decrement = () => ({ type: 'DECREMENT' })\nconst reset = () => ({ type: 'RESET' })\n\n// binding an action creator\n// returns (...args) => dispatch(increment(...args))\nconst boundIncrement = bindActionCreators(increment, dispatch)\n\n// binding an object full of action creators\nconst boundActionCreators = bindActionCreators(\n  { increment, decrement, reset },\n  dispatch,\n)\n```\n\n----------------------------------------\n\nTITLE: Injecting specific state slice in React-Redux\nDESCRIPTION: Example showing how to inject a specific slice of state (todos) using mapStateToProps, which is a more efficient approach.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nexport default connect(mapStateToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Connect Options Object Structure\nDESCRIPTION: The structure of the options object that can be passed as the fourth parameter to connect(), showing various customization options for performance optimization and context configuration.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  context?: Object,\n  areStatesEqual?: Function,\n  areOwnPropsEqual?: Function,\n  areStatePropsEqual?: Function,\n  areMergedPropsEqual?: Function,\n  forwardRef?: boolean,\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dispatched Actions in a React Component\nDESCRIPTION: This snippet shows how to use the dispatched actions as props in a React component after they have been mapped by mapDispatchToProps.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Counter({ count, increment, decrement, reset }) {\n  return (\n    <div>\n      <button onClick={decrement}>-</button>\n      <span>{count}</span>\n      <button onClick={increment}>+</button>\n      <button onClick={reset}>reset</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting TodoList with Filtered Todos\nDESCRIPTION: Connects TodoList component using selector to get filtered todos from state\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/introduction/basic-tutorial.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// components/TodoList.js\n\n// ...\n\nconst mapStateToProps = (state) => {\n  const { visibilityFilter } = state\n  const todos = getTodosByVisibilityFilter(state, visibilityFilter)\n  return { todos }\n}\n\nexport default connect(mapStateToProps)(TodoList)\n```\n\n----------------------------------------\n\nTITLE: MapDispatchToProps Object Shorthand\nDESCRIPTION: Example of using the object shorthand form for mapDispatchToProps.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/connect.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addTodo, deleteTodo, toggleTodo } from './actionCreators'\n\nconst mapDispatchToProps = {\n  addTodo,\n  deleteTodo,\n  toggleTodo,\n}\n\nexport default connect(null, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: mapStateToProps Example with ownProps Parameter\nDESCRIPTION: Demonstrates a mapStateToProps function that uses both state and ownProps parameters to select a specific todo item based on the component's id prop.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (state, ownProps) => ({\n  todo: state.todos[ownProps.id],\n})\n```\n\n----------------------------------------\n\nTITLE: Connecting Components with Default Dispatch Prop in React Redux\nDESCRIPTION: Demonstrates how to connect a component without specifying mapDispatchToProps, which results in the component receiving dispatch as a prop by default.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconnect()(MyComponent)\n// which is equivalent with\nconnect(null, null)(MyComponent)\n\n// or\nconnect(mapStateToProps /** no second argument */)(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Using Provider with React Router\nDESCRIPTION: Example of integrating React Redux Provider with React Router to make Redux store available throughout the application's routing structure.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <Route path=\"/\" component={App}>\n        <Route path=\"foo\" component={Foo} />\n        <Route path=\"bar\" component={Bar} />\n      </Route>\n    </Router>\n  </Provider>,\n  document.getElementById('root'),\n)\n```\n\n----------------------------------------\n\nTITLE: Passing Action Dispatchers to Child Components\nDESCRIPTION: Example of passing action dispatching functions to child components, allowing unconnected components to dispatch Redux actions without being aware of Redux.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// pass down toggleTodo to child component\n// making Todo able to dispatch the toggleTodo action\nconst TodoList = ({ todos, toggleTodo }) => (\n  <div>\n    {todos.map((todo) => (\n      <Todo todo={todo} onClick={toggleTodo} />\n    ))}\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Properties from mapStateToProps in React Redux\nDESCRIPTION: Example showing how to return multiple properties from a mapStateToProps function. Each field in the returned object becomes a prop for the connected component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  return {\n    a: 42,\n    todos: state.todos,\n    filter: state.visibilityFilter,\n  }\n}\n\n// component will receive: props.a, props.todos, and props.filter\n```\n\n----------------------------------------\n\nTITLE: Using bindActionCreators in Redux\nDESCRIPTION: Demonstrates how to use Redux's bindActionCreators utility to automatically wrap action creators with dispatch calls, both for individual action creators and objects of action creators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bindActionCreators } from 'redux'\n\nconst increment = () => ({ type: 'INCREMENT' })\nconst decrement = () => ({ type: 'DECREMENT' })\nconst reset = () => ({ type: 'RESET' })\n\n// binding an action creator\n// returns (...args) => dispatch(increment(...args))\nconst boundIncrement = bindActionCreators(increment, dispatch)\n\n// binding an object full of action creators\nconst boundActionCreators = bindActionCreators(\n  { increment, decrement, reset },\n  dispatch,\n)\n// returns\n// {\n//   increment: (...args) => dispatch(increment(...args)),\n//   decrement: (...args) => dispatch(decrement(...args)),\n//   reset: (...args) => dispatch(reset(...args)),\n// }\n```\n\n----------------------------------------\n\nTITLE: Basic Connect Function Signature\nDESCRIPTION: Shows the basic function signature of connect with its optional parameters for mapping state and dispatch to props.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/connect.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconnect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])\n```\n\n----------------------------------------\n\nTITLE: MapStateToProps with Two Parameters\nDESCRIPTION: Demonstrates how mapStateToProps receives both state and ownProps when defined with two parameters.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/connect.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (state, ownProps) => {\n  console.log(state) // state\n  console.log(ownProps) // ownProps\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useDispatch Implementation\nDESCRIPTION: Basic example showing how to use useDispatch hook to dispatch actions in a component\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/hooks.md#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useDispatch } from 'react-redux'\n\nexport const CounterComponent = ({ value }) => {\n  const dispatch = useDispatch()\n\n  return (\n    <div>\n      <span>{value}</span>\n      <button onClick={() => dispatch({ type: 'increment-counter' })}>\n        Increment counter\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using mergeProps to Customize Props in React-Redux\nDESCRIPTION: Demonstrates using the mergeProps parameter to customize the final props passed to a component, modifying both state and action creators based on component props. This enables creating components with convenient, simplified interfaces.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/connect.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mergeProps(stateProps, dispatchProps, ownProps) {\n  return Object.assign({}, ownProps, {\n    todos: stateProps.todos[ownProps.userId],\n    addTodo: (text) => dispatchProps.addTodo(ownProps.userId, text),\n  })\n}\n\nexport default connect(mapStateToProps, actionCreators, mergeProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Action Creators into Single Actions Prop in React-Redux\nDESCRIPTION: Demonstrates combining action creators from different sources into a single 'actions' prop. This pattern provides a clean API for accessing all actions while maintaining organization in the code.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as todoActionCreators from './todoActionCreators'\nimport * as counterActionCreators from './counterActionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(\n      { ...todoActionCreators, ...counterActionCreators },\n      dispatch,\n    ),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating mapStateToProps With ownProps in React-Redux\nDESCRIPTION: Examples showing how mapStateToProps receives ownProps when the function has zero or two mandatory parameters, or when using rest parameters or the arguments object.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state, ownProps) {\n  console.log(state) // state\n  console.log(ownProps) // ownProps\n}\n\nfunction mapStateToProps() {\n  console.log(arguments[0]) // state\n  console.log(arguments[1]) // ownProps\n}\n\nfunction mapStateToProps(...args) {\n  console.log(args[0]) // state\n  console.log(args[1]) // ownProps\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Properties from mapStateToProps in JavaScript\nDESCRIPTION: Demonstrates returning multiple properties from a mapStateToProps function, which will all be passed as props to the connected component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  return {\n    a: 42,\n    todos: state.todos,\n    filter: state.visibilityFilter,\n  }\n}\n\n// component will receive: props.a, props.todos, and props.filter\n```\n\n----------------------------------------\n\nTITLE: Implementing mapStateToProps with State Parameter in React Redux\nDESCRIPTION: Shows a basic implementation of mapStateToProps in a TodoList component that extracts todo IDs from the Redux store state.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// TodoList.js\n\nfunction mapStateToProps(state) {\n  const { todos } = state\n  return { todoList: todos.allIds }\n}\n\nexport default connect(mapStateToProps)(TodoList)\n```\n\n----------------------------------------\n\nTITLE: Direct Component Connection Pattern\nDESCRIPTION: Shows the common pattern of immediately calling connect() and its wrapper function\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/connect.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { login, logout } from './actionCreators'\n\nconst mapState = (state) => state.user\nconst mapDispatch = { login, logout }\n\n// call connect to generate the wrapper function, and immediately call\n// the wrapper function to generate the final wrapper component.\n\nexport default connect(mapState, mapDispatch)(Login)\n```\n\n----------------------------------------\n\nTITLE: Using ownProps in mapDispatchToProps Function\nDESCRIPTION: This snippet shows how to use the optional ownProps parameter in mapDispatchToProps to access the props passed to the connected component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// binds on component re-rendering\n<button onClick={() => this.props.toggleTodo(this.props.todoId)} />\n\n// binds on `props` change\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  toggleTodo: () => dispatch(toggleTodo(ownProps.todoId))\n}\n```\n\n----------------------------------------\n\nTITLE: Using Selectors with Props Across Multiple Component Instances\nDESCRIPTION: Demonstrates how to use memoized selectors that depend on props across multiple component instances. Each instance needs its own selector instance, which is created using useMemo.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/hooks.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { createSelector } from 'reselect'\n\nconst makeSelectCompletedTodosCount = () =>\n  createSelector(\n    (state) => state.todos,\n    (_, completed) => completed,\n    (todos, completed) =>\n      todos.filter((todo) => todo.completed === completed).length,\n  )\n\nexport const CompletedTodosCount = ({ completed }) => {\n  const selectCompletedTodosCount = useMemo(makeSelectCompletedTodosCount, [])\n\n  const matchingCount = useSelector((state) =>\n    selectCompletedTodosCount(state, completed),\n  )\n\n  return <div>{matchingCount}</div>\n}\n\nexport const App = () => {\n  return (\n    <>\n      <span>Number of done todos:</span>\n      <CompletedTodosCount completed={true} />\n      <span>Number of unfinished todos:</span>\n      <CompletedTodosCount completed={false} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Props from mapStateToProps\nDESCRIPTION: This example demonstrates how to return multiple props from mapStateToProps, including both static values and data from the state.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  return {\n    a: 42,\n    todos: state.todos,\n    filter: state.visibilityFilter,\n  }\n}\n\n// component will receive: props.a, props.todos, and props.filter\n```\n\n----------------------------------------\n\nTITLE: Connecting VisibilityFilters with State and Actions\nDESCRIPTION: Demonstrates connecting a component with both mapStateToProps for reading filter state and mapDispatchToProps for dispatching filter actions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/introduction/basic-tutorial.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// components/VisibilityFilters.js\n\n// ... other imports\nimport { connect } from \"react-redux\";\nimport { setFilter } from \"../redux/actions\";\n\nconst VisibilityFilters = // ... component implementation\n\nconst mapStateToProps = state => {\n  return { activeFilter: state.visibilityFilter };\n};\nexport default connect(\n  mapStateToProps,\n  { setFilter }\n)(VisibilityFilters);\n```\n\n----------------------------------------\n\nTITLE: MapStateToProps with Default OwnProps\nDESCRIPTION: Example of a mapStateToProps function with a default parameter that still won't receive actual ownProps due to how connect detects arity.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst mapStateToProps = (state, ownProps = {}) => {\n  console.log(state) // state\n  console.log(ownProps) // {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using ownProps Parameter in mapDispatchToProps\nDESCRIPTION: Comparison between re-binding on component re-rendering versus re-binding on props change using the ownProps parameter in mapDispatchToProps.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// binds on component re-rendering\n<button onClick={() => this.props.toggleTodo(this.props.todoId)} />\n\n// binds on `props` change\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  toggleTodo: () => dispatch(toggleTodo(ownProps.todoId))\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Specific State Slice\nDESCRIPTION: Example showing how to inject specific state (todos) using mapStateToProps.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nexport default connect(mapStateToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Connect Implementation with Action Creators\nDESCRIPTION: Examples of different ways to connect a component with action creators, including using a named object and inline object definition.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport {increment, decrement, reset} from \"./counterActions\";\n\nconst actionCreators = {\n  increment,\n  decrement,\n  reset\n}\n\nexport default connect(mapState, actionCreators)(Counter);\n\n// or\nexport default connect(\n  mapState,\n  { increment, decrement, reset }\n)(Counter);\n```\n\n----------------------------------------\n\nTITLE: Comparing Dispatch Approaches with React Redux\nDESCRIPTION: Compares two approaches for dispatching actions in a button click handler: directly using dispatch versus using a pre-defined action creator function.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// button needs to be aware of \"dispatch\"\n<button onClick={() => dispatch({ type: \"SOMETHING\" })} />\n\n// button unaware of \"dispatch\",\n<button onClick={doSomething} />\n```\n\n----------------------------------------\n\nTITLE: Injecting Just Dispatch Without State Subscription in React-Redux\nDESCRIPTION: Example of connecting a component to Redux by only injecting the dispatch function, without subscribing to any state changes. This is useful when the component only needs to dispatch actions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport default connect()(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Custom useActions Hook Implementation\nDESCRIPTION: Custom hook implementation for binding action creators with Redux dispatch function.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/hooks.md#2025-04-21_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport { bindActionCreators } from 'redux'\nimport { useDispatch } from 'react-redux'\nimport { useMemo } from 'react'\n\nexport function useActions(actions, deps) {\n  const dispatch = useDispatch()\n  return useMemo(\n    () => {\n      if (Array.isArray(actions)) {\n        return actions.map(a => bindActionCreators(a, dispatch))\n      }\n      return bindActionCreators(actions, dispatch)\n    },\n    deps ? [dispatch, ...deps] : [dispatch]\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom mapDispatchToProps with Manual Dispatch\nDESCRIPTION: Example of a custom mapDispatchToProps function that includes both action creators and the dispatch function.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    increment: () => dispatch(increment()),\n    decrement: () => dispatch(decrement()),\n    reset: () => dispatch(reset()),\n    dispatch,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Connect Usage Examples\nDESCRIPTION: Collection of basic connect() usage patterns showing different ways to inject dispatch and state\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/connect.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport default connect()(TodoApp)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n\nexport default connect(null, actionCreators)(TodoApp)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// don't do this!\nexport default connect((state) => state)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: bindActionCreators with Manual Dispatch\nDESCRIPTION: Shows how to use bindActionCreators while still maintaining access to the dispatch function.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bindActionCreators } from 'redux'\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    dispatch,\n    ...bindActionCreators({ increment, decrement, reset }, dispatch),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting VisibilityFilters with State and Actions\nDESCRIPTION: Demonstrates connecting VisibilityFilters component with both state mapping and action creators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/connect.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// components/VisibilityFilters.js\n\n// ... other imports\nimport { connect } from \"react-redux\";\nimport { setFilter } from \"../redux/actions\";\n\nconst VisibilityFilters = // ... component implementation\n\nconst mapStateToProps = state => {\n  return { activeFilter: state.visibilityFilter };\n};\nexport default connect(\n  mapStateToProps,\n  { setFilter }\n)(VisibilityFilters);\n```\n\n----------------------------------------\n\nTITLE: Using bindActionCreators in mapDispatchToProps\nDESCRIPTION: Example of using bindActionCreators in a mapDispatchToProps function to simplify the wrapping of action creators with dispatch calls.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bindActionCreators } from 'redux'\n// ...\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ increment, decrement, reset }, dispatch)\n}\n\n// component receives props.increment, props.decrement, props.reset\nconnect(null, mapDispatchToProps)(Counter)\n```\n\n----------------------------------------\n\nTITLE: Force State Updates Implementation\nDESCRIPTION: Example showing how to force state updates by always returning false in areStatesEqual\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/connect.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst areStatesEqual = () => false\n```\n\n----------------------------------------\n\nTITLE: Connecting Components with Custom Context in React Redux\nDESCRIPTION: This example shows two methods of connecting React components to Redux using a custom context: passing the context as an option to connect, and passing it as a prop to the connected component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/accessing-store.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// You can pass the context as an option to connect\nexport default connect(mapState, mapDispatch, null, { context: MyContext })(\n  MyComponent,\n)\n\n// or, call connect as normal to start\nconst ConnectedComponent = connect(mapState, mapDispatch)(MyComponent)\n\n// Later, pass the custom context as a prop to the connected component\n<ConnectedComponent context={MyContext} />\n```\n\n----------------------------------------\n\nTITLE: Defining Root State Type in TypeScript with Redux\nDESCRIPTION: Shows how to define the root state type using TypeScript inference from the root reducer combination. This provides automatic type updates as reducer functions are modified.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/static-types.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const rootReducer = combineReducers({\n  posts: postsReducer,\n  comments: commentsReducer,\n  users: usersReducer,\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n// {posts: PostsState, comments: CommentsState, users: UsersState}\n```\n\n----------------------------------------\n\nTITLE: Forwarding Arguments in mapDispatchToProps Functions\nDESCRIPTION: This example demonstrates how to forward arguments to action creators when defining mapDispatchToProps as a function.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // explicitly forwarding arguments\n    onClick: (event) => dispatch(trackClick(event)),\n\n    // implicitly forwarding arguments\n    onReceiveImpressions: (...impressions) =>\n      dispatch(trackImpressions(impressions)),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Redux Stores with Custom Contexts in React\nDESCRIPTION: This code demonstrates how to set up and use multiple Redux stores in a React application by leveraging custom context instances for each store.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/accessing-store.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// a naive example\nconst ContextA = React.createContext();\nconst ContextB = React.createContext();\n\n// assuming reducerA and reducerB are proper reducer functions\nconst storeA = createStore(reducerA);\nconst storeB = createStore(reducerB);\n\n// supply the context instances to Provider\nfunction App() {\n  return (\n    <Provider store={storeA} context={ContextA} />\n      <Provider store={storeB} context={ContextB}>\n        <RootModule />\n      </Provider>\n    </Provider>\n  );\n}\n\n// fetch the corresponding store with connected components\n// you need to use the correct context\nconnect(mapStateA, null, null, { context: ContextA })(MyComponentA)\n\n// You may also pass the alternate context instance directly to the connected component instead\n<ConnectedMyComponentA context={ContextA} />\n\n// it is possible to chain connect()\n// in this case MyComponent will receive merged props from both stores\ncompose(\n  connect(mapStateA, null, null, { context: ContextA }),\n  connect(mapStateB, null, null, { context: ContextB })\n)(MyComponent);\n```\n\n----------------------------------------\n\nTITLE: Adding Slice Reducers to the Redux Store\nDESCRIPTION: Imports the counter reducer and adds it to the Redux store configuration, allowing the store to handle updates to the counter state.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/quick-start.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configureStore } from '@reduxjs/toolkit'\nimport counterReducer from '../features/counter/counterSlice'\n\nexport default configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining mapDispatchToProps as a Function in React-Redux\nDESCRIPTION: This snippet shows how to define mapDispatchToProps as a function, which allows for customization of the dispatching behavior and access to dispatch and ownProps.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // dispatching plain actions\n    increment: () => dispatch({ type: 'INCREMENT' }),\n    decrement: () => dispatch({ type: 'DECREMENT' }),\n    reset: () => dispatch({ type: 'RESET' }),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Parameter MapStateToProps Implementation in React-Redux\nDESCRIPTION: Examples of mapStateToProps implementations that only receive the state parameter and not ownProps, due to having exactly one mandatory parameter.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/connect.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  console.log(state) // state\n  console.log(arguments[1]) // undefined\n}\n\nconst mapStateToProps = (state, ownProps = {}) => {\n  console.log(state) // state\n  console.log(ownProps) // {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Component with mapDispatchToProps in React Redux\nDESCRIPTION: Shows a functional Counter component that receives action dispatching functions as props from mapDispatchToProps.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Counter({ count, increment, decrement, reset }) {\n  return (\n    <div>\n      <button onClick={decrement}>-</button>\n      <span>{count}</span>\n      <button onClick={increment}>+</button>\n      <button onClick={reset}>reset</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Action Dispatchers on Props Change in React Redux\nDESCRIPTION: Example showing how to bind action dispatchers when component props change, by defining mapDispatchToProps with both dispatch and ownProps parameters.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return <button onClick={() => this.props.toggleTodo()} />\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    toggleTodo: () => dispatch(toggleTodo(ownProps.todoId))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connect Without mapStateToProps\nDESCRIPTION: Demonstrates how to use connect with only mapDispatchToProps by passing null as the first argument.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconnect(null, mapDispatchToProps)(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Connecting VisibilityFilters with State and Actions\nDESCRIPTION: Implementation of connecting VisibilityFilters component with both state access and action dispatching capabilities\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/introduction/basic-tutorial.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// components/VisibilityFilters.js\n\n// ... other imports\nimport { connect } from \"react-redux\";\nimport { setFilter } from \"../redux/actions\";\n\nconst VisibilityFilters = // ... component implementation\n\nconst mapStateToProps = state => {\n  return { activeFilter: state.visibilityFilter };\n};\nexport default connect(\n  mapStateToProps,\n  { setFilter }\n)(VisibilityFilters);\n```\n\n----------------------------------------\n\nTITLE: Manual Dispatch Injection with bindActionCreators\nDESCRIPTION: Example showing how to manually inject dispatch alongside bound action creators using bindActionCreators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bindActionCreators } from 'redux'\n// ...\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    dispatch,\n    ...bindActionCreators({ increment, decrement, reset }, dispatch),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MapStateToProps Types in TypeScript for React-Redux\nDESCRIPTION: Type definitions for mapping Redux state to component props in React-Redux. These types define how components can access and transform state data from the store.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.dt-types.api.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport type MapStateToProps<\n  TStateProps,\n  TOwnProps,\n  State = DefaultRootState,\n> = (state: State, ownProps: TOwnProps) => TStateProps\n\n// @public (undocumented)\nexport type MapStateToPropsFactory<\n  TStateProps,\n  TOwnProps,\n  State = DefaultRootState,\n> = (\n  initialState: State,\n  ownProps: TOwnProps,\n) => MapStateToProps<TStateProps, TOwnProps, State>\n\n// @public (undocumented)\nexport type MapStateToPropsParam<\n  TStateProps,\n  TOwnProps,\n  State = DefaultRootState,\n> =\n  | MapStateToPropsFactory<TStateProps, TOwnProps, State>\n  | MapStateToProps<TStateProps, TOwnProps, State>\n  | null\n  | undefined\n```\n\n----------------------------------------\n\nTITLE: Accessing ReactReduxContext Directly\nDESCRIPTION: Shows how to directly access the Redux store using ReactReduxContext.Consumer. This approach is not considered part of the public API and may break without notice, but can be useful in rare cases.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/accessing-store.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactReduxContext } from 'react-redux'\n\n// in your connected component\nfunction MyConnectedComponent() {\n  return (\n    <ReactReduxContext.Consumer>\n      {({ store }) => {\n        // do something useful with the store, like passing it to a child\n        // component where it can be used in lifecycle methods\n      }}\n    </ReactReduxContext.Consumer>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic mapStateToProps with State Only in JavaScript\nDESCRIPTION: Demonstrates creating a simple mapStateToProps function that extracts todos from the state and passes them to a TodoList component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// TodoList.js\n\nfunction mapStateToProps(state) {\n  const { todos } = state\n  return { todoList: todos.allIds }\n}\n\nexport default connect(mapStateToProps)(TodoList)\n```\n\n----------------------------------------\n\nTITLE: Injecting state and flattened action creators in React-Redux\nDESCRIPTION: Example showing how to inject todos from state and flatten multiple sets of action creators as direct props on the component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as todoActionCreators from './todoActionCreators'\nimport * as counterActionCreators from './counterActionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    { ...todoActionCreators, ...counterActionCreators },\n    dispatch,\n  )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Defining Provider Props Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the props for the Provider component, including the Redux store, server state snapshot, context, stability check, and children.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/Provider.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ProviderProps<A extends Action = AnyAction, S = any> {\n  /**\n   * The single Redux store in your application.\n   */\n  store: Store<S, A>\n\n  /**\n   * An optional server state snapshot. Will be used during initial hydration render\n   * if available, to ensure that the UI output is consistent with the HTML generated on the server.\n   * New in 8.0\n   */\n  serverState?: S\n\n  /**\n   * Optional context to be used internally in react-redux. Use React.createContext()\n   * to create a context to be used.\n   * If this is used, you'll need to customize `connect` by supplying the same\n   * context provided to the Provider.\n   * Set the initial value to null, and the hooks will error\n   * if this is not overwritten by Provider.\n   */\n  context?: Context<ReactReduxContextValue<S, A> | null>\n\n  /** Global configuration for the `useSelector` stability check */\n  stabilityCheck?: StabilityCheck\n\n  /** The top-level React elements in your component tree, such as `<App />` **/\n  children: ReactNode\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting TodoList with Filtered Todos\nDESCRIPTION: Connects TodoList component using selector to get filtered todos based on current visibility filter.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/introduction/basic-tutorial.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// components/TodoList.js\n\n// ...\n\nconst mapStateToProps = (state) => {\n  const { visibilityFilter } = state\n  const todos = getTodosByVisibilityFilter(state, visibilityFilter)\n  return { todos }\n}\n\nexport default connect(mapStateToProps)(TodoList)\n```\n\n----------------------------------------\n\nTITLE: Injecting All Action Creators Directly as Props in React-Redux\nDESCRIPTION: Shows how to inject all action creators from multiple sources directly as individual props. This approach flattens the props structure but may lead to prop naming conflicts if not managed carefully.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as todoActionCreators from './todoActionCreators'\nimport * as counterActionCreators from './counterActionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    { ...todoActionCreators, ...counterActionCreators },\n    dispatch,\n  )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Context to Redux Provider in React\nDESCRIPTION: This snippet demonstrates how to supply a custom context instance to the Redux Provider component, allowing for customized store propagation.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/accessing-store.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Provider context={MyContext} store={store}>\n  <App />\n</Provider>\n```\n\n----------------------------------------\n\nTITLE: Injecting Multiple Grouped Action Creator Sets in React-Redux\nDESCRIPTION: Demonstrates how to organize actions from different domains by grouping them under separate props (todoActions and counterActions). This approach helps maintain separation of concerns in components that handle multiple features.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/connect.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as todoActionCreators from './todoActionCreators'\nimport * as counterActionCreators from './counterActionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    todoActions: bindActionCreators(todoActionCreators, dispatch),\n    counterActions: bindActionCreators(counterActionCreators, dispatch),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Fields from mapStateToProps\nDESCRIPTION: Example showing how mapStateToProps can return multiple fields that will become props for the connected component, including both static values and state-derived values.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  return {\n    a: 42,\n    todos: state.todos,\n    filter: state.visibilityFilter,\n  }\n}\n\n// component will receive: props.a, props.todos, and props.filter\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Selector Factory with connectAdvanced() in React Redux\nDESCRIPTION: Example demonstrating how to create a custom selector factory for connectAdvanced() that injects todos for a specific user and provides an addTodo action bound to the user ID from props.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect-advanced.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as actionCreators from './actionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction selectorFactory(dispatch) {\n  let ownProps = {}\n  let result = {}\n\n  const actions = bindActionCreators(actionCreators, dispatch)\n  const addTodo = (text) => actions.addTodo(ownProps.userId, text)\n\n  return (nextState, nextOwnProps) => {\n    const todos = nextState.todos[nextOwnProps.userId]\n    const nextResult = { ...nextOwnProps, todos, addTodo }\n    ownProps = nextOwnProps\n    if (!shallowEqual(result, nextResult)) result = nextResult\n    return result\n  }\n}\nexport default connectAdvanced(selectorFactory)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Basic mapDispatchToProps Function Implementation\nDESCRIPTION: Example of implementing mapDispatchToProps as a function that returns action dispatching methods.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // dispatching plain actions\n    increment: () => dispatch({ type: 'INCREMENT' }),\n    decrement: () => dispatch({ type: 'DECREMENT' }),\n    reset: () => dispatch({ type: 'RESET' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using bindActionCreators in Redux\nDESCRIPTION: Example of using Redux's bindActionCreators utility to wrap action creators with dispatch calls, showing both binding a single action creator and an object of action creators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bindActionCreators } from 'redux'\n\nconst increment = () => ({ type: 'INCREMENT' })\nconst decrement = () => ({ type: 'DECREMENT' })\nconst reset = () => ({ type: 'RESET' })\n\n// binding an action creator\n// returns (...args) => dispatch(increment(...args))\nconst boundIncrement = bindActionCreators(increment, dispatch)\n\n// binding an object full of action creators\nconst boundActionCreators = bindActionCreators(\n  { increment, decrement, reset },\n  dispatch,\n)\n// returns\n// {\n//   increment: (...args) => dispatch(increment(...args)),\n//   decrement: (...args) => dispatch(decrement(...args)),\n//   reset: (...args) => dispatch(reset(...args)),\n// }\n```\n\n----------------------------------------\n\nTITLE: Injecting state based on component props in React-Redux\nDESCRIPTION: Example demonstrating how to inject a specific slice of state that depends on the component's own props using ownProps parameter.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n\nfunction mapStateToProps(state, ownProps) {\n  return { todos: state.todos[ownProps.userId] }\n}\n\nexport default connect(mapStateToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Exporting Batch Function\nDESCRIPTION: Re-exports the 'batch' function from react-dom, which is used for batching React state updates.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.api.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport { batch }\n```\n\n----------------------------------------\n\nTITLE: Returning an Object from mapDispatchToProps in React-Redux\nDESCRIPTION: This example demonstrates the conventional way of returning an object from mapDispatchToProps, where each field becomes a prop for the component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst increment = () => ({ type: 'INCREMENT' })\nconst decrement = () => ({ type: 'DECREMENT' })\nconst reset = () => ({ type: 'RESET' })\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // dispatching actions returned by action creators\n    increment: () => dispatch(increment()),\n    decrement: () => dispatch(decrement()),\n    reset: () => dispatch(reset()),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete AddTodo Component Implementation with Redux\nDESCRIPTION: Full implementation of the AddTodo component with Redux connection. Shows how to handle form input state and dispatch the addTodo action when the button is clicked.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/introduction/basic-tutorial.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// components/AddTodo.js\n\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../redux/actions'\n\nclass AddTodo extends React.Component {\n  // ...\n\n  handleAddTodo = () => {\n    // dispatches actions to add todo\n    this.props.addTodo(this.state.input)\n\n    // sets state back to empty string\n    this.setState({ input: '' })\n  }\n\n  render() {\n    return (\n      <div>\n        <input\n          onChange={(e) => this.updateInput(e.target.value)}\n          value={this.state.input}\n        />\n        <button className=\"add-todo\" onClick={this.handleAddTodo}>\n          Add Todo\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default connect(null, { addTodo })(AddTodo)\n```\n\n----------------------------------------\n\nTITLE: Configuring connect() with pure:false for Context-Dependent Components\nDESCRIPTION: This snippet shows how to configure the Redux connect() function with pure:false option for components that depend on React context or global state. This bypasses the default shouldComponentUpdate optimization.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/troubleshooting.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nexport default connect(mapStateToProps, null, null, {\n  pure: false,\n})(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Connecting Todo Component with toggleTodo Action\nDESCRIPTION: Shows how to connect a Todo component to dispatch toggleTodo action using connect() and mapDispatchToProps object syntax.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/introduction/basic-tutorial.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// components/Todo.js\n\n// ... other imports\nimport { connect } from \"react-redux\";\nimport { toggleTodo } from \"../redux/actions\";\n\nconst Todo = // ... component implementation\n\nexport default connect(\n  null,\n  { toggleTodo }\n)(Todo);\n```\n\n----------------------------------------\n\nTITLE: Declarative Action Dispatching Examples\nDESCRIPTION: Comparison between direct dispatch and declarative action dispatching patterns.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// button needs to be aware of \"dispatch\"\n<button onClick={() => dispatch({ type: \"SOMETHING\" })} />\n\n// button unaware of \"dispatch\",\n<button onClick={doSomething} />\n```\n\n----------------------------------------\n\nTITLE: Defining mapDispatchToProps as a Function with Plain Actions\nDESCRIPTION: Example of defining mapDispatchToProps as a function that returns an object with methods that dispatch plain action objects.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // dispatching plain actions\n    increment: () => dispatch({ type: 'INCREMENT' }),\n    decrement: () => dispatch({ type: 'DECREMENT' }),\n    reset: () => dispatch({ type: 'RESET' }),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic mapStateToProps Example\nDESCRIPTION: Example of a mapStateToProps function taking only the state parameter\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (state) => ({ todos: state.todos })\n```\n\n----------------------------------------\n\nTITLE: Connect Function Signature\nDESCRIPTION: Basic function signature showing the four optional parameters of connect()\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction connect(mapStateToProps?, mapDispatchToProps?, mergeProps?, options?)\n```\n\n----------------------------------------\n\nTITLE: Binding Action Creators on Component Mount in React Redux\nDESCRIPTION: Shows a pattern where action creators are bound to component props when the component mounts, with explicit passing of props.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return <button onClick={() => this.props.toggleTodo(this.props.todoId)} />\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    toggleTodo: todoId => dispatch(toggleTodo(todoId))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Counter Component with Action Props\nDESCRIPTION: Example of a Counter component using mapped dispatch props instead of direct dispatch.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Counter({ count, increment, decrement, reset }) {\n  return (\n    <div>\n      <button onClick={decrement}>-</button>\n      <span>{count}</span>\n      <button onClick={increment}>+</button>\n      <button onClick={reset}>reset</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Action Dispatchers on Component Mount in React Redux\nDESCRIPTION: Example showing how to bind action dispatchers when the component mounts, by defining mapDispatchToProps with only the dispatch parameter.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return <button onClick={() => this.props.toggleTodo(this.props.todoId)} />\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    toggleTodo: todoId => dispatch(toggleTodo(todoId))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Parameter mapStateToProps Implementation in React-Redux\nDESCRIPTION: Demonstrates mapStateToProps functions that will receive ownProps through various parameter configurations including rest parameters and no parameters.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (state, ownProps) => {\n  console.log(state) // state\n  console.log(ownProps) // ownProps\n}\n\nfunction mapStateToProps() {\n  console.log(arguments[0]) // state\n  console.log(arguments[1]) // ownProps\n}\n\nconst mapStateToProps = (...args) => {\n  console.log(args[0]) // state\n  console.log(args[1]) // ownProps\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Environment in Single Test File\nDESCRIPTION: Shows how to configure the Jest test environment for a single test file to prevent useLayoutEffect warnings by setting it to 'node' environment.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * @jest-environment node\n */\n```\n\n----------------------------------------\n\nTITLE: Custom mapDispatchToProps with Dispatch\nDESCRIPTION: Example of a custom mapDispatchToProps implementation that includes both action creators and dispatch function.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    increment: () => dispatch(increment()),\n    decrement: () => dispatch(decrement()),\n    reset: () => dispatch(reset()),\n    dispatch,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing mapDispatchToProps with Dispatch Parameter in React Redux\nDESCRIPTION: Example of a mapDispatchToProps function that takes just the dispatch parameter. It returns an object with functions that dispatch different actions when called.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/connect.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // dispatching plain actions\n    increment: () => dispatch({ type: 'INCREMENT' }),\n    decrement: () => dispatch({ type: 'DECREMENT' }),\n    reset: () => dispatch({ type: 'RESET' }),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning React Redux Repository\nDESCRIPTION: Command to clone the React Redux repository after forking it on GitHub. This is the first step in the contribution workflow.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-username/react-redux.git\n```\n\n----------------------------------------\n\nTITLE: mapDispatchToProps Function with dispatch Parameter\nDESCRIPTION: Example of a mapDispatchToProps function that takes only the dispatch parameter and returns action dispatching methods for increment, decrement, and reset operations.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // dispatching plain actions\n    increment: () => dispatch({ type: 'INCREMENT' }),\n    decrement: () => dispatch({ type: 'DECREMENT' }),\n    reset: () => dispatch({ type: 'RESET' }),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting VisibilityFilters with State and Actions\nDESCRIPTION: Shows how to connect a VisibilityFilters component with both state mapping for active filter and action dispatch for setting filters.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/introduction/basic-tutorial.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// components/VisibilityFilters.js\n\n// ... other imports\nimport { connect } from \"react-redux\";\nimport { setFilter } from \"../redux/actions\";\n\nconst VisibilityFilters = // ... component implementation\n\nconst mapStateToProps = state => {\n  return { activeFilter: state.visibilityFilter };\n};\nexport default connect(\n  mapStateToProps,\n  { setFilter }\n)(VisibilityFilters);\n```\n\n----------------------------------------\n\nTITLE: MapStateToProps Multiple Parameters Behavior in React-Redux\nDESCRIPTION: Shows how mapStateToProps receives ownProps when defined with zero, two mandatory parameters, or rest parameters.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state, ownProps) {\n  console.log(state) // state\n  console.log(ownProps) // ownProps\n}\n\nfunction mapStateToProps() {\n  console.log(arguments[0]) // state\n  console.log(arguments[1]) // ownProps\n}\n\nfunction mapStateToProps(...args) {\n  console.log(args[0]) // state\n  console.log(args[1]) // ownProps\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Connect Implementation Examples\nDESCRIPTION: Complex examples showing various ways to map state and dispatch to props\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/connect.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nexport default connect(mapStateToProps)(TodoApp)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nexport default connect(mapStateToProps, actionCreators)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: mapDispatchToProps Function Example\nDESCRIPTION: Example of mapDispatchToProps function with action dispatching\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    increment: () => dispatch({ type: 'INCREMENT' }),\n    decrement: () => dispatch({ type: 'DECREMENT' }),\n    reset: () => dispatch({ type: 'RESET' })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Different Ways to Use actionCreators with connect\nDESCRIPTION: Demonstrates various ways to define and pass action creators to the connect function.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport {increment, decrement, reset} from \"./counterActions\";\n\nconst actionCreators = {\n  increment,\n  decrement,\n  reset\n}\n\nexport default connect(mapState, actionCreators)(Counter);\n\n// or\nexport default connect(\n  mapState,\n  { increment, decrement, reset }\n)(Counter);\n```\n\n----------------------------------------\n\nTITLE: Custom mapDispatchToProps with Manual Dispatch\nDESCRIPTION: Example of a custom mapDispatchToProps function that includes dispatch along with action creators\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    increment: () => dispatch(increment()),\n    decrement: () => dispatch(decrement()),\n    reset: () => dispatch(reset()),\n    dispatch,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connect with Action Creators\nDESCRIPTION: Different ways to use action creators with connect, including named object and inline definition\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport {increment, decrement, reset} from \"./counterActions\";\n\nconst actionCreators = {\n  increment,\n  decrement,\n  reset\n}\n\nexport default connect(mapState, actionCreators)(Counter);\n\n// or\nexport default connect(\n  mapState,\n  { increment, decrement, reset }\n)(Counter);\n```\n\n----------------------------------------\n\nTITLE: Single Parameter mapStateToProps Implementation in React-Redux\nDESCRIPTION: Examples of mapStateToProps functions with single mandatory parameter which won't receive ownProps as second argument.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  console.log(state) // state\n  console.log(arguments[1]) // undefined\n}\n\nconst mapStateToProps = (state, ownProps = {}) => {\n  console.log(state) // state\n  console.log(ownProps) // {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React-Redux via Yarn\nDESCRIPTION: Command to install React-Redux package using Yarn package manager\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/introduction/quick-start.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-redux\n```\n\n----------------------------------------\n\nTITLE: Connect with Action Creators\nDESCRIPTION: Demonstrates connecting a component with action creators without subscribing to store.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/connect.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n\nexport default connect(null, actionCreators)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: TodoList Component with Action Props\nDESCRIPTION: Example showing how to pass down action dispatching functions to child components.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst TodoList = ({ todos, toggleTodo }) => (\n  <div>\n    {todos.map((todo) => (\n      <Todo todo={todo} onClick={toggleTodo} />\n    ))}\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Top Navigation Links\nDESCRIPTION: JavaScript configuration for adding various types of links to the top navigation bar\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/README.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  headerLinks: [\n    ...\n    /* you can add docs */\n    { doc: 'my-examples', label: 'Examples' },\n    /* you can add custom pages */\n    { page: 'help', label: 'Help' },\n    /* you can add external links */\n    { href: 'https://github.com/facebook/Docusaurus', label: 'GitHub' },\n    ...\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting TodoList Component Using mapStateToProps\nDESCRIPTION: Demonstrates how to connect a TodoList component to the Redux store with mapStateToProps to access and transform the todos data from the store. This allows the component to render the list of todos.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/introduction/basic-tutorial.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// components/TodoList.js\n\n// ...other imports\nimport { connect } from \"react-redux\";\n\nconst TodoList = // ... UI component implementation\n\nconst mapStateToProps = state => {\n  const { byIds, allIds } = state.todos || {};\n  const todos =\n    allIds && allIds.length\n      ? allIds.map(id => (byIds ? { ...byIds[id], id } : null))\n      : null;\n  return { todos };\n};\n\nexport default connect(mapStateToProps)(TodoList);\n```\n\n----------------------------------------\n\nTITLE: Implementing mapStateToProps with State Parameter in React Redux\nDESCRIPTION: Example of a mapStateToProps function that takes only the state parameter. This function is called whenever the store state changes and returns an object containing todos from the state.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/connect.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (state) => ({ todos: state.todos })\n```\n\n----------------------------------------\n\nTITLE: Counter Component with Dispatching Props\nDESCRIPTION: Example of a Counter component that receives action dispatching functions as props, allowing it to trigger Redux actions without being aware of the dispatch mechanism.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Counter({ count, increment, decrement, reset }) {\n  return (\n    <div>\n      <button onClick={decrement}>-</button>\n      <span>{count}</span>\n      <button onClick={increment}>+</button>\n      <button onClick={reset}>reset</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: mapStateToProps Implementation with State and Props Parameters\nDESCRIPTION: An implementation of mapStateToProps that uses both state and component props (ownProps) to select a specific todo item by its ID.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (state, ownProps) => ({\n  todo: state.todos[ownProps.id],\n})\n```\n\n----------------------------------------\n\nTITLE: mapDispatchToProps with ownProps\nDESCRIPTION: Example showing mapDispatchToProps with dispatch and ownProps parameters\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  toggleTodo: () => dispatch(toggleTodo(ownProps.todoId))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing mapStateToProps with State Only\nDESCRIPTION: Example of a mapStateToProps function that extracts todos data from the Redux store state and passes it to a TodoList component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// TodoList.js\n\nfunction mapStateToProps(state) {\n  const { todos } = state\n  return { todoList: todos.allIds }\n}\n\nexport default connect(mapStateToProps)(TodoList)\n```\n\n----------------------------------------\n\nTITLE: Basic MapStateToProps Implementation\nDESCRIPTION: Example of a simple mapStateToProps function taking only the state parameter.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/connect.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (state) => ({ todos: state.todos })\n```\n\n----------------------------------------\n\nTITLE: Custom mapDispatchToProps with Manual Action Dispatching\nDESCRIPTION: Example of a custom mapDispatchToProps implementation that manually creates action dispatching functions and includes dispatch itself.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    increment: () => dispatch(increment()),\n    decrement: () => dispatch(decrement()),\n    reset: () => dispatch(reset()),\n    dispatch,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting State Based on Component Props in React-Redux\nDESCRIPTION: Example of using component props (userId) to determine which slice of state to inject. This pattern is useful for components that need access to different data based on their props.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n\nfunction mapStateToProps(state, ownProps) {\n  return { todos: state.todos[ownProps.userId] }\n}\n\nexport default connect(mapStateToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Passing Action Functions to Child Components in React Redux\nDESCRIPTION: Example of passing down action dispatching functions to unconnected child components, allowing them to dispatch actions without knowing about Redux.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// pass down toggleTodo to child component\n// making Todo able to dispatch the toggleTodo action\nconst TodoList = ({ todos, toggleTodo }) => (\n  <div>\n    {todos.map((todo) => (\n      <Todo todo={todo} onClick={toggleTodo} />\n    ))}\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Connect without mapStateToProps\nDESCRIPTION: Shows how to use connect with mapDispatchToProps but without mapStateToProps.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconnect(null, mapDispatchToProps)(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Typing useSelector Hook with Explicit State Type\nDESCRIPTION: Examples of typing the useSelector hook both with a separate selector function and inline, by explicitly defining the RootState type parameter.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/usage-with-typescript.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RootState {\n  isOn: boolean\n}\n\n// TS infers type: (state: RootState) => boolean\nconst selectIsOn = (state: RootState) => state.isOn\n\n// TS infers `isOn` is boolean\nconst isOn = useSelector(selectIsOn)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst isOn = useSelector((state: RootState) => state.isOn)\n```\n\n----------------------------------------\n\nTITLE: Connecting VisibilityFilters with State and Actions\nDESCRIPTION: Implements connection for VisibilityFilters component with both state mapping and action dispatching.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/introduction/basic-tutorial.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// components/VisibilityFilters.js\n\n// ... other imports\nimport { connect } from \"react-redux\";\nimport { setFilter } from \"../redux/actions\";\n\nconst VisibilityFilters = // ... component implementation\n\nconst mapStateToProps = state => {\n  return { activeFilter: state.visibilityFilter };\n};\nexport default connect(\n  mapStateToProps,\n  { setFilter }\n)(VisibilityFilters);\n```\n\n----------------------------------------\n\nTITLE: Connecting AddTodo Component to Redux Store\nDESCRIPTION: Shows how to connect a component to the Redux store by using connect with mapDispatchToProps. The component doesn't need state, so mapStateToProps is null.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/introduction/basic-tutorial.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// components/AddTodo.js\n\n// ... other imports\nimport { connect } from 'react-redux'\nimport { addTodo } from '../redux/actions'\n\nclass AddTodo extends React.Component {\n  // ... component implementation\n}\n\nexport default connect(null, { addTodo })(AddTodo)\n```\n\n----------------------------------------\n\nTITLE: Injecting Combined Action Creators Directly as Props in React-Redux\nDESCRIPTION: Demonstrates injecting all action creators from multiple sources directly as props instead of nesting them under an object. This flattens the props structure but can lead to naming conflicts between actions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/connect.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as todoActionCreators from './todoActionCreators'\nimport * as counterActionCreators from './counterActionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    Object.assign({}, todoActionCreators, counterActionCreators),\n    dispatch,\n  )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Object Shorthand mapDispatchToProps\nDESCRIPTION: Example showing the object shorthand form of mapDispatchToProps\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addTodo, deleteTodo, toggleTodo } from './actionCreators'\n\nconst mapDispatchToProps = {\n  addTodo,\n  deleteTodo,\n  toggleTodo,\n}\n\nexport default connect(null, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Defining mapStateToProps Function Signature in React Redux\nDESCRIPTION: Demonstrates the function signature for mapStateToProps, showing it takes a state parameter and an optional ownProps parameter.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state, ownProps?)\n```\n\n----------------------------------------\n\nTITLE: Memoized useDispatch with useCallback Example\nDESCRIPTION: Shows how to optimize dispatch callback using useCallback hook to prevent unnecessary child component renders.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/hooks.md#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\n\nexport const CounterComponent = ({ value }) => {\n  const dispatch = useDispatch()\n  const incrementCounter = useCallback(\n    () => dispatch({ type: 'increment-counter' }),\n    [dispatch],\n  )\n\n  return (\n    <div>\n      <span>{value}</span>\n      <MyIncrementButton onIncrement={incrementCounter} />\n    </div>\n  )\n}\n\nexport const MyIncrementButton = React.memo(({ onIncrement }) => (\n  <button onClick={onIncrement}>Increment counter</button>\n))\n```\n\n----------------------------------------\n\nTITLE: mapDispatchToProps with Action Arguments\nDESCRIPTION: Example showing how to forward arguments to action creators in mapDispatchToProps.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // explicitly forwarding arguments\n    onClick: (event) => dispatch(trackClick(event)),\n\n    // implicitly forwarding arguments\n    onReceiveImpressions: (...impressions) =>\n      dispatch(trackImpressions(impressions))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting State and a Specific Action Creator in React-Redux\nDESCRIPTION: Demonstrates how to connect a component to Redux by injecting todos state and a single specific action creator (addTodo). This pattern is useful when a component only needs access to certain actions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/connect.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addTodo } from './actionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ addTodo }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Using Default Dispatch Prop in a Counter Component\nDESCRIPTION: Example of a Counter component that uses the default props.dispatch to dispatch INCREMENT, DECREMENT, and RESET actions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Counter({ count, dispatch }) {\n  return (\n    <div>\n      <button onClick={() => dispatch({ type: 'DECREMENT' })}>-</button>\n      <span>{count}</span>\n      <button onClick={() => dispatch({ type: 'INCREMENT' })}>+</button>\n      <button onClick={() => dispatch({ type: 'RESET' })}>reset</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using bindActionCreators with mapDispatchToProps\nDESCRIPTION: Example showing how to use Redux bindActionCreators to simplify mapDispatchToProps implementation.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bindActionCreators } from 'redux'\n\nconst increment = () => ({ type: 'INCREMENT' })\nconst decrement = () => ({ type: 'DECREMENT' })\nconst reset = () => ({ type: 'RESET' })\n\n// binding an action creator\n// returns (...args) => dispatch(increment(...args))\nconst boundIncrement = bindActionCreators(increment, dispatch)\n\n// binding an object full of action creators\nconst boundActionCreators = bindActionCreators(\n  { increment, decrement, reset },\n  dispatch\n)\n```\n\n----------------------------------------\n\nTITLE: Manual Typing of connect HOC\nDESCRIPTION: Complete example of manually typing connect higher-order component with state, dispatch, and own props.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/static-types.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { connect } from 'react-redux'\n\ninterface StateProps {\n  isOn: boolean\n}\n\ninterface DispatchProps {\n  toggleOn: () => void\n}\n\ninterface OwnProps {\n  backgroundColor: string\n}\n\ntype Props = StateProps & DispatchProps & OwnProps\n\nconst mapState = (state: RootState) => ({\n  isOn: state.isOn,\n})\n\nconst mapDispatch = {\n  toggleOn: () => ({ type: 'TOGGLE_IS_ON' }),\n}\n\nconst MyComponent = (props: Props) => (\n  <div style={{ backgroundColor: props.backgroundColor }}>\n    <button onClick={props.toggleOn}>\n      Toggle is {props.isOn ? 'ON' : 'OFF'}\n    </button>\n  </div>\n)\n\nexport default connect<StateProps, DispatchProps, OwnProps>(\n  mapState,\n  mapDispatch,\n)(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Basic Redux Connect Pattern with mapStateToProps and Action Creators\nDESCRIPTION: Demonstrates the basic usage of connect() to subscribe to store state and inject action creators as props.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/introduction/basic-tutorial.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n// ... Component\nconst mapStateToProps = (state) => state.partOfState\nexport default connect(mapStateToProps, actionCreators)(Component)\n```\n\n----------------------------------------\n\nTITLE: MapStateToProps Multiple Parameters Behavior in React-Redux\nDESCRIPTION: Shows how mapStateToProps behaves when defined with zero, two, or rest parameters, where it will receive both state and ownProps as arguments in all cases.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state, ownProps) {\n  console.log(state) // state\n  console.log(ownProps) // ownProps\n}\n\nfunction mapStateToProps() {\n  console.log(arguments[0]) // state\n  console.log(arguments[1]) // ownProps\n}\n\nfunction mapStateToProps(...args) {\n  console.log(args[0]) // state\n  console.log(args[1]) // ownProps\n}\n```\n\n----------------------------------------\n\nTITLE: TodoList Component with MapStateToProps\nDESCRIPTION: Implementation of TodoList component showing how to map Redux state to component props using selectors.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/connect.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// components/TodoList.js\n\n// ...other imports\nimport { connect } from \"react-redux\";\n\nconst TodoList = // ... UI component implementation\n\nconst mapStateToProps = state => {\n  const { byIds, allIds } = state.todos || {};\n  const todos =\n    allIds && allIds.length\n      ? allIds.map(id => (byIds ? { ...byIds[id], id } : null))\n      : null;\n  return { todos };\n};\n\nexport default connect(mapStateToProps)(TodoList);\n```\n\n----------------------------------------\n\nTITLE: Manual Dispatch Injection with bindActionCreators in React Redux\nDESCRIPTION: Example showing how to manually inject dispatch along with bound action creators using mapDispatchToProps function. This approach allows component to retain access to dispatch while also having bound action creators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bindActionCreators } from 'redux'\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    dispatch,\n    ...bindActionCreators({ increment, decrement, reset }, dispatch),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ownProps in mapStateToProps for a Todo Component\nDESCRIPTION: Shows how to use the optional ownProps argument in mapStateToProps to access component props and combine them with state data.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Todo.js\n\nfunction mapStateToProps(state, ownProps) {\n  const { visibilityFilter } = state\n  const { id } = ownProps\n  const todo = getTodoById(state, id)\n\n  // component receives additionally:\n  return { todo, visibilityFilter }\n}\n\n// Later, in your application, a parent component renders:\n<ConnectedTodo id={123} />\n// and your component receives props.id, props.todo, and props.visibilityFilter\n```\n\n----------------------------------------\n\nTITLE: Connecting Todo Component with Toggle Action\nDESCRIPTION: Shows how to connect a Todo component to dispatch toggleTodo action using connect().\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/connect.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// components/Todo.js\n\n// ... other imports\nimport { connect } from \"react-redux\";\nimport { toggleTodo } from \"../redux/actions\";\n\nconst Todo = // ... component implementation\n\nexport default connect(\n  null,\n  { toggleTodo }\n)(Todo);\n```\n\n----------------------------------------\n\nTITLE: Basic useStore Hook Example\nDESCRIPTION: Demonstrates basic usage of useStore hook to access Redux store directly in a component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/hooks.md#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useStore } from 'react-redux'\n\nexport const CounterComponent = ({ value }) => {\n  const store = useStore()\n\n  // EXAMPLE ONLY! Do not do this in a real app.\n  // The component will not automatically update if the store state changes\n  return <div>{store.getState()}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Dispatch Injection in mapDispatchToProps\nDESCRIPTION: Demonstrates how to manually include dispatch in mapDispatchToProps return object along with bound action creators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bindActionCreators } from 'redux'\n// ...\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    dispatch,\n    ...bindActionCreators({ increment, decrement, reset }, dispatch),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Connect Pattern in React-Redux\nDESCRIPTION: Shows the common pattern of immediately invoking the connect function to generate a connected component. This pattern is the most frequently used approach for connecting components to Redux stores.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { login, logout } from './actionCreators'\n\nconst mapState = (state) => state.user\nconst mapDispatch = { login, logout }\n\n// call connect to generate the wrapper function, and immediately call\n// the wrapper function to generate the final wrapper component.\n\nexport default connect(mapState, mapDispatch)(Login)\n```\n\n----------------------------------------\n\nTITLE: Direct connect() implementation in React-Redux\nDESCRIPTION: Example showing the common pattern of immediately calling the wrapper function returned by connect() to create the connected component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { login, logout } from './actionCreators'\n\nconst mapState = (state) => state.user\nconst mapDispatch = { login, logout }\n\n// call connect to generate the wrapper function, and immediately call\n// the wrapper function to generate the final wrapper component.\n\nexport default connect(mapState, mapDispatch)(Login)\n```\n\n----------------------------------------\n\nTITLE: Basic Redux Connect Pattern Implementation\nDESCRIPTION: Demonstrates the basic pattern of connecting a React component to Redux store using mapStateToProps and mapDispatchToProps.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/introduction/basic-tutorial.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (state, ownProps) => ({\n  // ... computed data from state and optionally ownProps\n})\n\nconst mapDispatchToProps = {\n  // ... normally is an object full of action creators\n}\n\n// `connect` returns a new function that accepts the component to wrap:\nconst connectToStore = connect(mapStateToProps, mapDispatchToProps)\n// and that function returns the connected, wrapper component:\nconst ConnectedComponent = connectToStore(Component)\n\n// We normally do both in one step, like this:\nconnect(mapStateToProps, mapDispatchToProps)(Component)\n```\n\n----------------------------------------\n\nTITLE: Injecting State and All Action Creators in React-Redux\nDESCRIPTION: Demonstrates how to connect a component to Redux by injecting the todos state and passing all action creators as individual props. This approach provides direct access to both state and all actions in the component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/connect.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nexport default connect(mapStateToProps, actionCreators)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: MapStateToProps Using Rest Parameters\nDESCRIPTION: Example of a mapStateToProps function using ES6 rest parameters to capture state and ownProps as an array.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst mapStateToProps = (...args) => {\n  console.log(args[0]) // state\n  console.log(args[1]) // ownProps\n}\n```\n\n----------------------------------------\n\nTITLE: Complex mapDispatchToProps Function with Multiple Return Options\nDESCRIPTION: Demonstrates a mapDispatchToProps function that provides different ways to dispatch actions, including plain objects, action creators, and bound action creators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst createMyAction = () => ({ type: 'MY_ACTION' })\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const boundActions = bindActionCreators({ createMyAction }, dispatch)\n  return {\n    dispatchPlainObject: () => dispatch({ type: 'MY_ACTION' }),\n    dispatchActionCreatedByActionCreator: () => dispatch(createMyAction()),\n    ...boundActions,\n    // you may return dispatch here\n    dispatch,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TodoList Component with Selectors\nDESCRIPTION: Simplified TodoList component implementation using selector functions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/introduction/basic-tutorial.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// components/TodoList.js\n\n// ...other imports\nimport { connect } from \"react-redux\";\nimport { getTodos } from \"../redux/selectors\";\n\nconst TodoList = // ... UI component implementation\n\nexport default connect(state => ({ todos: getTodos(state) }))(TodoList);\n```\n\n----------------------------------------\n\nTITLE: Injecting state and specific action creator in React-Redux\nDESCRIPTION: Example demonstrating how to inject todos from state and a specific action creator (addTodo) using bindActionCreators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addTodo } from './actionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ addTodo }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: MapStateToProps Single Parameter Behavior in React-Redux\nDESCRIPTION: Demonstrates how mapStateToProps behaves with a single mandatory parameter, where it will not receive ownProps as an argument.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  console.log(state) // state\n  console.log(arguments[1]) // undefined\n}\nconst mapStateToProps = (state, ownProps = {}) => {\n  console.log(state) // state\n  console.log(ownProps) // undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Custom State Equality Check in React-Redux\nDESCRIPTION: Example of overriding areStatesEqual to optimize performance by comparing specific state slices\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/connect.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst areStatesEqual = (next, prev) =>\n  prev.entities.todos === next.entities.todos\n```\n\n----------------------------------------\n\nTITLE: Connecting Todo Component with toggleTodo Action\nDESCRIPTION: Demonstrates connecting a Todo component to Redux store with just mapDispatchToProps to inject the toggleTodo action creator.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/introduction/basic-tutorial.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// components/Todo.js\n\n// ... other imports\nimport { connect } from \"react-redux\";\nimport { toggleTodo } from \"../redux/actions\";\n\nconst Todo = // ... component implementation\n\nexport default connect(\n  null,\n  { toggleTodo }\n)(Todo);\n```\n\n----------------------------------------\n\nTITLE: Internal bindActionCreators Usage Example\nDESCRIPTION: Shows how React-Redux internally binds action creators to the store's dispatch function when using the object shorthand form of mapDispatchToProps.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// internally, React-Redux calls bindActionCreators\n// to bind the action creators to the dispatch of your store\nbindActionCreators(mapDispatchToProps, dispatch)\n```\n\n----------------------------------------\n\nTITLE: Immediate Connect Implementation\nDESCRIPTION: Shows the more common pattern of immediately connecting a component\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/connect.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { login, logout } from './actionCreators'\n\nconst mapState = (state) => state.user\nconst mapDispatch = { login, logout }\n\n// call connect to generate the wrapper function, and immediately call\n// the wrapper function to generate the final wrapper component.\n\nexport default connect(mapState, mapDispatch)(Login)\n```\n\n----------------------------------------\n\nTITLE: MapStateToProps Using Arguments\nDESCRIPTION: Example of a mapStateToProps function without parameters that accesses state and ownProps through the arguments object.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api.md#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nfunction mapStateToProps() {\n  console.log(arguments[0]) // state\n  console.log(arguments[1]) // ownProps\n}\n```\n\n----------------------------------------\n\nTITLE: Identity Function Check Configuration\nDESCRIPTION: Demonstrates how to configure identity function checks both globally and per-hook for preventing whole-state selections\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/hooks.md#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Provider store={store} identityFunctionCheck=\"always\">\n  {children}\n</Provider>\n```\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component() {\n  const count = useSelector(selectCount, {\n    devModeChecks: { identityFunctionCheck: 'never' },\n  })\n  // run once (default)\n  const user = useSelector(selectUser, {\n    devModeChecks: { identityFunctionCheck: 'once' },\n  })\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding areStatesEqual for Impure Redux Reducers\nDESCRIPTION: Example of overriding areStatesEqual to always return false, which is useful when working with impure reducers that mutate store state. This ensures component updates occur even when state is mutated in place.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst areStatesEqual = () => false\n```\n\n----------------------------------------\n\nTITLE: Comparing Direct Dispatch vs Encapsulated Action Functions\nDESCRIPTION: Comparison between a button that directly uses dispatch and one that uses an encapsulated action function, demonstrating the more declarative approach.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// button needs to be aware of \"dispatch\"\n<button onClick={() => dispatch({ type: \"SOMETHING\" })} />\n\n// button unaware of \"dispatch\",\n<button onClick={doSomething} />\n```\n\n----------------------------------------\n\nTITLE: Implementing mapStateToProps with Multiple Parameters\nDESCRIPTION: Examples demonstrating how mapStateToProps receives ownProps when defined with zero or two mandatory parameters, or using rest parameters.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state, ownProps) {\n  console.log(state) // state\n  console.log(ownProps) // ownProps\n}\n\nfunction mapStateToProps() {\n  console.log(arguments[0]) // state\n  console.log(arguments[1]) // ownProps\n}\n\nfunction mapStateToProps(...args) {\n  console.log(args[0]) // state\n  console.log(args[1]) // ownProps\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Context Setup with React-Redux Hooks\nDESCRIPTION: Shows how to create custom context and hook creators for cases where multiple Redux stores need to coexist. Demonstrates creating custom versions of useStore, useDispatch, and useSelector.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/hooks.md#2025-04-21_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react'\nimport {\n  Provider,\n  createStoreHook,\n  createDispatchHook,\n  createSelectorHook\n} from 'react-redux'\n\nconst MyContext = React.createContext(null)\n\n// Export your custom hooks if you wish to use them in other files.\nexport const useStore = createStoreHook(MyContext)\nexport const useDispatch = createDispatchHook(MyContext)\nexport const useSelector = createSelectorHook(MyContext)\n\nconst myStore = createStore(rootReducer)\n\nexport function MyProvider({ children }) {\n  return (\n    <Provider context={MyContext} store={myStore}>\n      {children}\n    </Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating mapStateToProps Without ownProps Parameter in React Redux\nDESCRIPTION: This code snippet shows how mapStateToProps behaves when it has one mandatory parameter. In these cases, the function will not receive ownProps as a second argument, even if a default parameter is provided.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  console.log(state) // state\n  console.log(arguments[1]) // undefined\n}\nconst mapStateToProps = (state, ownProps = {}) => {\n  console.log(state) // state\n  console.log(ownProps) // {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectProps Interface\nDESCRIPTION: Specifies the additional props that are injected into a connected component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.api.md#2025-04-21_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ConnectProps {\n  context?: ReactReduxContextInstance\n  reactReduxForwardedRef?: React_2.ForwardedRef<unknown>\n  store?: Store\n}\n```\n\n----------------------------------------\n\nTITLE: Redux Selectors Implementation\nDESCRIPTION: Implementation of Redux selector functions for accessing and transforming todo state data.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/introduction/basic-tutorial.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// redux/selectors.js\n\nexport const getTodosState = (store) => store.todos\n\nexport const getTodoList = (store) =>\n  getTodosState(store) ? getTodosState(store).allIds : []\n\nexport const getTodoById = (store, id) =>\n  getTodosState(store) ? { ...getTodosState(store).byIds[id], id } : {}\n\nexport const getTodos = (store) =>\n  getTodoList(store).map((id) => getTodoById(store, id))\n```\n\n----------------------------------------\n\nTITLE: Custom Context Configuration with connect()\nDESCRIPTION: Demonstrates how to provide a custom React Context instance to a connected component in React-Redux v6 and above using the options parameter.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// const MyContext = React.createContext();\nconnect(mapStateToProps, mapDispatchToProps, null, { context: MyContext })(\n  MyComponent,\n)\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectedProps Type\nDESCRIPTION: Creates a utility type for inferring the props of a connected component based on the connector function used.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.api.md#2025-04-21_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ConnectedProps<TConnector> =\n  TConnector extends InferableComponentEnhancerWithProps<\n    infer TInjectedProps,\n    any\n  >\n    ? unknown extends TInjectedProps\n      ? TConnector extends InferableComponentEnhancer<infer TInjectedProps>\n        ? TInjectedProps\n        : never\n      : TInjectedProps\n    : never\n```\n\n----------------------------------------\n\nTITLE: ConnectAdvanced API Definition\nDESCRIPTION: Definition and usage of the connectAdvanced API for more complex Redux connections.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconnectAdvanced(selectorFactory, [connectOptions])\n```\n\n----------------------------------------\n\nTITLE: Basic mapDispatchToProps Implementation\nDESCRIPTION: A function that maps Redux dispatch to component props, providing methods to dispatch plain action objects for increment, decrement, and reset operations.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // dispatching plain actions\n    increment: () => dispatch({ type: 'INCREMENT' }),\n    decrement: () => dispatch({ type: 'DECREMENT' }),\n    reset: () => dispatch({ type: 'RESET' }),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Store via ReactReduxContext\nDESCRIPTION: Example showing how to access the Redux store directly using ReactReduxContext.Consumer in a component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/Provider.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ReactReduxContext } from 'react-redux'\n\n// in your connected component\nrender() {\n  return (\n    <ReactReduxContext.Consumer>\n      {({ store }) => {\n        // do something with the store here\n      }}\n    </ReactReduxContext.Consumer>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Action Creators in mapDispatchToProps\nDESCRIPTION: Example of using action creators inside mapDispatchToProps, following the convention of naming the field keys the same as the action creators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst increment = () => ({ type: 'INCREMENT' })\nconst decrement = () => ({ type: 'DECREMENT' })\nconst reset = () => ({ type: 'RESET' })\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // dispatching actions returned by action creators\n    increment: () => dispatch(increment()),\n    decrement: () => dispatch(decrement()),\n    reset: () => dispatch(reset()),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: mapStateToProps with ownProps\nDESCRIPTION: Example showing mapStateToProps using both state and ownProps parameters\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (state, ownProps) => ({\n  todo: state.todos[ownProps.id],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Full AddTodo Component with Redux Integration\nDESCRIPTION: Complete implementation of the AddTodo component with state management, event handlers, and Redux integration. Shows how to dispatch the addTodo action when the Add Todo button is clicked.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/introduction/basic-tutorial.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// components/AddTodo.js\n\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../redux/actions'\n\nclass AddTodo extends React.Component {\n  // ...\n\n  handleAddTodo = () => {\n    // dispatches actions to add todo\n    this.props.addTodo(this.state.input)\n\n    // sets state back to empty string\n    this.setState({ input: '' })\n  }\n\n  render() {\n    return (\n      <div>\n        <input\n          onChange={(e) => this.updateInput(e.target.value)}\n          value={this.state.input}\n        />\n        <button className=\"add-todo\" onClick={this.handleAddTodo}>\n          Add Todo\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default connect(null, { addTodo })(AddTodo)\n```\n\n----------------------------------------\n\nTITLE: Connecting Components with Default Dispatch Prop in React-Redux\nDESCRIPTION: This snippet demonstrates how to connect a component without specifying mapDispatchToProps, which provides the dispatch function as a prop by default.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconnect()(MyComponent)\n// which is equivalent with\nconnect(null, null)(MyComponent)\n\n// or\nconnect(mapStateToProps /** no second argument */)(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Advanced Connect Integration Patterns\nDESCRIPTION: Examples of complex connect() configurations using action creators and custom props mapping\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as todoActionCreators from './todoActionCreators'\nimport * as counterActionCreators from './counterActionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(\n      { ...todoActionCreators, ...counterActionCreators },\n      dispatch,\n    ),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Todo Filtering Selector Implementation\nDESCRIPTION: Implements a selector function to filter todos based on visibility filter state value.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/introduction/basic-tutorial.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// redux/selectors.js\n\n// ... other selectors\nexport const getTodosByVisibilityFilter = (store, visibilityFilter) => {\n  const allTodos = getTodos(store)\n  switch (visibilityFilter) {\n    case VISIBILITY_FILTERS.COMPLETED:\n      return allTodos.filter((todo) => todo.completed)\n    case VISIBILITY_FILTERS.INCOMPLETE:\n      return allTodos.filter((todo) => !todo.completed)\n    case VISIBILITY_FILTERS.ALL:\n    default:\n      return allTodos\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Factory Function Pattern with Memoized Selectors in React-Redux\nDESCRIPTION: Implementation of a factory function pattern that creates unique selector instances per component, utilizing memoization for performance optimization.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst makeUniqueSelectorInstance = () =>\n  createSelector([selectItems, selectItemId], (items, itemId) => items[itemId])\nconst makeMapState = (state) => {\n  const selectItemForThisComponent = makeUniqueSelectorInstance()\n  return function realMapState(state, ownProps) {\n    const item = selectItemForThisComponent(state, ownProps.itemId)\n    return { item }\n  }\n}\nexport default connect(makeMapState)(SomeComponent)\n```\n\n----------------------------------------\n\nTITLE: Binding Action Creators on Props Change in React Redux\nDESCRIPTION: Demonstrates binding action creators when component props change by using the second ownProps parameter of mapDispatchToProps.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return <button onClick={() => this.props.toggleTodo()} />\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    toggleTodo: () => dispatch(toggleTodo(ownProps.todoId))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Context Implementation\nDESCRIPTION: Shows how to create and use custom context with React-Redux hooks for isolated store instances\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/hooks.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport {\n  Provider,\n  createStoreHook,\n  createDispatchHook,\n  createSelectorHook,\n} from 'react-redux'\n\nconst MyContext = React.createContext(null)\n\n// Export your custom hooks if you wish to use them in other files.\nexport const useStore = createStoreHook(MyContext)\nexport const useDispatch = createDispatchHook(MyContext)\nexport const useSelector = createSelectorHook(MyContext)\n\nconst myStore = createStore(rootReducer)\n\nexport function MyProvider({ children }) {\n  return (\n    <Provider context={MyContext} store={myStore}>\n      {children}\n    </Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Todo Component with toggleTodo Action\nDESCRIPTION: Shows how to connect a Todo component to dispatch toggleTodo action using connect().\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/introduction/basic-tutorial.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// components/Todo.js\n\n// ... other imports\nimport { connect } from \"react-redux\";\nimport { toggleTodo } from \"../redux/actions\";\n\nconst Todo = // ... component implementation\n\nexport default connect(\n  null,\n  { toggleTodo }\n)(Todo);\n```\n\n----------------------------------------\n\nTITLE: Connecting TodoList with Filtered Todos\nDESCRIPTION: Shows how to connect TodoList component with filtered todos using a selector.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/connect.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// components/TodoList.js\n\n// ...\n\nconst mapStateToProps = (state) => {\n  const { visibilityFilter } = state\n  const todos = getTodosByVisibilityFilter(state, visibilityFilter)\n  return { todos }\n}\n\nexport default connect(mapStateToProps)(TodoList)\n```\n\n----------------------------------------\n\nTITLE: bindActionCreators with Dispatch\nDESCRIPTION: Alternative approach using bindActionCreators while maintaining access to dispatch.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bindActionCreators } from 'redux'\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    dispatch,\n    ...bindActionCreators({ increment, decrement, reset }, dispatch),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Internal bindActionCreators Implementation in React Redux\nDESCRIPTION: Demonstrates how React Redux internally handles the object shorthand form of mapDispatchToProps using bindActionCreators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n(dispatch) => bindActionCreators(mapDispatchToProps, dispatch)\n```\n\n----------------------------------------\n\nTITLE: Connect HOC Usage Pattern\nDESCRIPTION: Demonstrates creating and using a reusable connected component wrapper\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/connect.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { login, logout } from './actionCreators'\n\nconst mapState = (state) => state.user\nconst mapDispatch = { login, logout }\n\n// first call: returns a hoc that you can use to wrap any component\nconst connectUser = connect(mapState, mapDispatch)\n\n// second call: returns the wrapper component with mergedProps\n// you may use the hoc to enable different components to get the same behavior\nconst ConnectedUserLogin = connectUser(Login)\nconst ConnectedUserProfile = connectUser(Profile)\n```\n\n----------------------------------------\n\nTITLE: Injecting State Slice and All Action Creators in React-Redux\nDESCRIPTION: Demonstrates connecting a component by injecting a specific state slice (todos) and all action creators as props. This pattern provides the component access to both state and all available actions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nexport default connect(mapStateToProps, actionCreators)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Installing React-Redux via NPM\nDESCRIPTION: Command to install React-Redux package using NPM package manager\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/introduction/quick-start.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save react-redux\n```\n\n----------------------------------------\n\nTITLE: Complex mapDispatchToProps Example\nDESCRIPTION: Advanced example showing different ways to dispatch actions\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst createMyAction = () => ({ type: 'MY_ACTION' })\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const boundActions = bindActionCreators({ createMyAction }, dispatch)\n  return {\n    dispatchPlainObject: () => dispatch({ type: 'MY_ACTION' }),\n    dispatchActionCreatedByActionCreator: () => dispatch(createMyAction()),\n    ...boundActions,\n    dispatch,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Provider with React Router\nDESCRIPTION: This example shows how to integrate the Provider component with React Router. It wraps the entire router structure, including routes and components, with the Provider to ensure all nested components have access to the Redux store.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/api.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <Route path=\"/\" component={App}>\n        <Route path=\"foo\" component={Foo} />\n        <Route path=\"bar\" component={Bar} />\n      </Route>\n    </Router>\n  </Provider>,\n  document.getElementById('root'),\n)\n```\n\n----------------------------------------\n\nTITLE: Using mergeProps to customize props in React-Redux\nDESCRIPTION: Advanced example showing how to use mergeProps to customize both state and dispatch-related props based on the component's own props.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mergeProps(stateProps, dispatchProps, ownProps) {\n  return Object.assign({}, ownProps, {\n    todos: stateProps.todos[ownProps.userId],\n    addTodo: (text) => dispatchProps.addTodo(ownProps.userId, text),\n  })\n}\n\nexport default connect(mapStateToProps, actionCreators, mergeProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Equality Function with useSelector\nDESCRIPTION: Shows how to create and use a custom equality function with useSelector to control when components re-render based on state changes in the Redux store.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/hooks.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { useSelector } from 'react-redux'\n\n// equality function\nconst customEqual = (oldValue, newValue) => oldValue === newValue\n\n// later\nconst selectedData = useSelector(selectorReturningObject, customEqual)\n```\n\n----------------------------------------\n\nTITLE: Providing the Redux Store to React Components using Provider\nDESCRIPTION: This snippet shows how to make the Redux store available to the React application using the Provider component from react-redux. It wraps the main TodoApp component with Provider, passing the store as a prop.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/introduction/basic-tutorial.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// index.js\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport TodoApp from './TodoApp'\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <TodoApp />\n  </Provider>,\n  rootElement\n)\n```\n\n----------------------------------------\n\nTITLE: Using Batch in Redux Thunk with TypeScript\nDESCRIPTION: Example showing how to use the batch function in a Redux thunk to combine multiple dispatch calls into a single render update\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/batch.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { batch } from 'react-redux'\n\nfunction myThunk() {\n  return (dispatch, getState) => {\n    // should only result in one combined re-render, not two\n    batch(() => {\n      dispatch(increment())\n      dispatch(increment())\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Object Shorthand mapDispatchToProps\nDESCRIPTION: Simplified object form of mapDispatchToProps that React Redux automatically processes\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = {\n  increment,\n  decrement,\n  reset,\n}\n```\n\n----------------------------------------\n\nTITLE: Button Click Handler with Props Example\nDESCRIPTION: Shows a React component button with onClick handler that uses injected props from mapDispatchToProps.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// binds on component re-rendering\n<button onClick={() => this.props.toggleTodo(this.props.todoId)} />\n\n// binds on `props` change\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  toggleTodo: () => dispatch(toggleTodo(ownProps.todoId))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Context in React-Redux Connect\nDESCRIPTION: Example showing how to supply a custom context instance to React-Redux connect function. Requires v6.0 or higher.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconnect(mapStateToProps, mapDispatchToProps, null, { context: MyContext })(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Implementing mapStateToProps in a TodoList Component\nDESCRIPTION: Demonstrates a simple mapStateToProps function that extracts todo IDs from the state for a TodoList component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// TodoList.js\n\nfunction mapStateToProps(state) {\n  const { todos } = state\n  return { todoList: todos.allIds }\n}\n\nexport default connect(mapStateToProps)(TodoList)\n```\n\n----------------------------------------\n\nTITLE: Injecting State and Specific Action Creator in React-Redux\nDESCRIPTION: Example of connecting a component by injecting a state slice and a specific action creator. This approach is useful when a component only needs access to a subset of available actions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addTodo } from './actionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ addTodo }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Using connectAdvanced() Function Signature in React Redux\nDESCRIPTION: The basic function signature for connectAdvanced(), showing it accepts a selectorFactory function and optional connectOptions object to create a higher-order component that connects React components to Redux.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect-advanced.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconnectAdvanced(selectorFactory, connectOptions?)\n```\n\n----------------------------------------\n\nTITLE: MapStateToProps with Rest Parameters\nDESCRIPTION: Demonstrates accessing state and ownProps using rest parameters syntax.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/connect.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (...args) => {\n  console.log(args[0]) // state\n  console.log(args[1]) // ownProps\n}\n```\n\n----------------------------------------\n\nTITLE: Basic State Equality Check Implementation\nDESCRIPTION: Example of custom areStatesEqual implementation that checks equality of specific state slice\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/connect.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst areStatesEqual = (next, prev) =>\n  prev.entities.todos === next.entities.todos\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Context in React Redux\nDESCRIPTION: Demonstrates how to supply a custom context instance to the Provider component instead of using the default ReactReduxContext.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/accessing-store.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Provider context={MyContext} store={store}>\n  <App />\n</Provider>\n```\n\n----------------------------------------\n\nTITLE: Internal bindActionCreators Usage in React Redux\nDESCRIPTION: Example showing how React Redux internally uses bindActionCreators to bind the action creators in the object shorthand form to the store's dispatch function.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/connect.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// internally, React-Redux calls bindActionCreators\n// to bind the action creators to the dispatch of your store\nbindActionCreators(mapDispatchToProps, dispatch)\n```\n\n----------------------------------------\n\nTITLE: Injecting State and Action Creators as a Grouped Object in React-Redux\nDESCRIPTION: Shows how to connect a component to Redux by injecting todos state and grouping all action creators under an 'actions' property using bindActionCreators. This creates a cleaner props interface when there are many actions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/connect.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return { actions: bindActionCreators(actionCreators, dispatch) }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Connect with Custom Context\nDESCRIPTION: Example showing how to use connect with a custom context instance.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/connect.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconnect(mapStateToProps, mapDispatchToProps, null, { context: MyContext })(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Selectors for Todo Data\nDESCRIPTION: Defines selector functions to extract and transform todo data from the Redux store. These selectors encapsulate the logic for accessing nested state properties and mapping between different data structures.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/introduction/basic-tutorial.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// redux/selectors.js\n\nexport const getTodosState = (store) => store.todos\n\nexport const getTodoList = (store) =>\n  getTodosState(store) ? getTodosState(store).allIds : []\n\nexport const getTodoById = (store, id) =>\n  getTodosState(store) ? { ...getTodosState(store).byIds[id], id } : {}\n\nexport const getTodos = (store) =>\n  getTodoList(store).map((id) => getTodoById(store, id))\n```\n\n----------------------------------------\n\nTITLE: Using Custom Context with connect() in React Redux v6\nDESCRIPTION: Example of using the context option with connect() in React Redux v6 to provide a custom React context instance instead of the default one.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/connect.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// const MyContext = React.createContext();\nconnect(mapStateToProps, mapDispatchToProps, null, { context: MyContext })(\n  MyComponent,\n)\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Fields from mapStateToProps\nDESCRIPTION: Illustrates how mapStateToProps can return multiple fields, each becoming a prop for the connected component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  return {\n    a: 42,\n    todos: state.todos,\n    filter: state.visibilityFilter,\n  }\n}\n\n// component will receive: props.a, props.todos, and props.filter\n```\n\n----------------------------------------\n\nTITLE: Defining Provider Component and Context for React-Redux\nDESCRIPTION: Type definitions for the Provider component and React context that makes the Redux store available to connected components.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.dt-types.api.md#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport class Provider<A extends Action = AnyAction> extends Component<\n  ProviderProps<A>\n> {}\n\n// @public (undocumented)\nexport interface ProviderProps<A extends Action = AnyAction> {\n  context?: Context<ReactReduxContextValue>\n  store: Store<any, A>\n}\n\n// @public\nexport const ReactReduxContext: Context<ReactReduxContextValue>\n\n// @public (undocumented)\nexport interface ReactReduxContextValue<\n  SS = any,\n  A extends Action = AnyAction,\n> {\n  // (undocumented)\n  store: Store<SS, A>\n  // (undocumented)\n  storeState: SS\n}\n```\n\n----------------------------------------\n\nTITLE: Using batch() in a Redux Thunk Action Creator\nDESCRIPTION: Demonstrates how to use the batch() function in a Redux thunk action creator to combine multiple dispatch calls into a single render update.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/batch.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { batch } from 'react-redux'\n\nfunction myThunk() {\n  return (dispatch, getState) => {\n    // should only result in one combined re-render, not two\n    batch(() => {\n      dispatch(increment())\n      dispatch(increment())\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Multiple Sets of Action Creators with Different Namespaces in React-Redux\nDESCRIPTION: Shows how to inject multiple sets of action creators under different prop namespaces. This pattern is useful for organizing actions from different domains or features within a component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as todoActionCreators from './todoActionCreators'\nimport * as counterActionCreators from './counterActionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    todoActions: bindActionCreators(todoActionCreators, dispatch),\n    counterActions: bindActionCreators(counterActionCreators, dispatch),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Using createProvider for Multiple Redux Stores\nDESCRIPTION: Example showing how to use the createProvider function to support multiple Redux stores. This approach creates a custom Provider and connect function that use a specific store key in the React context.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/Provider.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ncreateProvider([storeKey])\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { connect, createProvider } from 'react-redux'\n\nconst STORE_KEY = 'componentStore'\n\nexport const Provider = createProvider(STORE_KEY)\n\nfunction connectExtended(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps,\n  options = {},\n) {\n  options.storeKey = STORE_KEY\n  return connect(mapStateToProps, mapDispatchToProps, mergeProps, options)\n}\n\nexport { connectExtended as connect }\n```\n\n----------------------------------------\n\nTITLE: Todo Filtering Selector Implementation\nDESCRIPTION: Selector function implementation for filtering todos based on visibility filter state\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/introduction/basic-tutorial.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// redux/selectors.js\n\n// ... other selectors\nexport const getTodosByVisibilityFilter = (store, visibilityFilter) => {\n  const allTodos = getTodos(store)\n  switch (visibilityFilter) {\n    case VISIBILITY_FILTERS.COMPLETED:\n      return allTodos.filter((todo) => todo.completed)\n    case VISIBILITY_FILTERS.INCOMPLETE:\n      return allTodos.filter((todo) => !todo.completed)\n    case VISIBILITY_FILTERS.ALL:\n    default:\n      return allTodos\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Provider with React Router\nDESCRIPTION: Illustrates how to combine the Provider component with React Router. This setup allows Redux state management across different routes in a React application.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/Provider.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { Router, Route } from 'react-router-dom'\n\nimport { App } from './App'\nimport { Foo } from './Foo'\nimport { Bar } from './Bar'\nimport createStore from './createReduxStore'\n\nconst store = createStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <Route exact path=\"/\" component={App} />\n      <Route path=\"/foo\" component={Foo} />\n      <Route path=\"/bar\" component={Bar} />\n    </Router>\n  </Provider>,\n  document.getElementById('root'),\n)\n```\n\n----------------------------------------\n\nTITLE: React Redux bindActionCreators Internal Implementation\nDESCRIPTION: Shows how React Redux internally processes the object shorthand form of mapDispatchToProps using bindActionCreators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// React Redux does this for you automatically:\n;(dispatch) => bindActionCreators(mapDispatchToProps, dispatch)\n```\n\n----------------------------------------\n\nTITLE: Connect with Custom Context\nDESCRIPTION: Example showing how to use connect with a custom context instance\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconnect(mapStateToProps, mapDispatchToProps, null, { context: MyContext })(\n  MyComponent,\n)\n```\n\n----------------------------------------\n\nTITLE: Custom mapDispatchToProps with Dispatch\nDESCRIPTION: Example of a custom mapDispatchToProps function that includes dispatch in its return object.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    increment: () => dispatch(increment()),\n    decrement: () => dispatch(decrement()),\n    reset: () => dispatch(reset()),\n    dispatch,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using bindActionCreators with Connect\nDESCRIPTION: Example showing how to use bindActionCreators to bind multiple action creators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return { actions: bindActionCreators(actionCreators, dispatch) }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Injecting action creators without store subscription in React-Redux\nDESCRIPTION: Example showing how to inject all action creators without subscribing to the store by passing null as the first argument.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n\nexport default connect(null, actionCreators)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Optimized Counter Component with React.memo\nDESCRIPTION: Shows how to optimize component rendering using React.memo with useSelector hook.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/hooks.md#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nconst CounterComponent = ({ name }) => {\n  const counter = useSelector(state => state.counter)\n  return (\n    <div>\n      {name}: {counter}\n    </div>\n  )\n}\n\nexport const MemoizedCounterComponent = React.memo(CounterComponent)\n```\n\n----------------------------------------\n\nTITLE: Basic connect() Usage Patterns with No mapDispatchToProps in React Redux\nDESCRIPTION: Examples of calling connect() without providing a mapDispatchToProps parameter. In these cases, the connected component will receive dispatch as a prop by default.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/connect.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// do not pass `mapDispatchToProps`\nconnect()(MyComponent)\nconnect(mapState)(MyComponent)\nconnect(mapState, null, mergeProps, options)(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Connect Without mapDispatchToProps\nDESCRIPTION: Shows how connect behaves when mapDispatchToProps is not provided.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// component receives `dispatch`\nconnect(mapStateToProps /** no second argument*/)(Component)\n```\n\n----------------------------------------\n\nTITLE: Stability Check Configuration in TSX\nDESCRIPTION: Shows how to configure stability checks globally via Provider context and individually per useSelector hook\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/hooks.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Provider store={store} stabilityCheck=\"always\">\n  {children}\n</Provider>\n```\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component() {\n  const count = useSelector(selectCount, {\n    devModeChecks: { stabilityCheck: 'never' },\n  })\n  // run once (default)\n  const user = useSelector(selectUser, {\n    devModeChecks: { stabilityCheck: 'once' },\n  })\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Declarative Action Dispatching in React Components\nDESCRIPTION: This snippet compares two approaches to dispatching actions: one that directly uses dispatch and another that uses a more declarative function.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// button needs to be aware of \"dispatch\"\n<button onClick={() => dispatch({ type: \"SOMETHING\" })} />\n\n// button unaware of \"dispatch\",\n<button onClick={doSomething} />\n```\n\n----------------------------------------\n\nTITLE: Typing useDispatch Hook with Default and Custom Types\nDESCRIPTION: Examples of typing the useDispatch hook using both the default Dispatch type from Redux core and a customized AppDispatch type for correct middleware support.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/usage-with-typescript.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst dispatch = useDispatch()\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// store.ts\nexport type AppDispatch = typeof store.dispatch\n\n// MyComponent.tsx\nconst dispatch: AppDispatch = useDispatch()\n```\n\n----------------------------------------\n\nTITLE: MapStateToProps Multiple Parameters Behavior in React-Redux\nDESCRIPTION: Shows how mapStateToProps behaves with zero, two, or rest parameters. In these cases, the function will receive both state and ownProps arguments.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state, ownProps) {\n  console.log(state) // state\n  console.log(ownProps) // ownProps\n}\n\nfunction mapStateToProps() {\n  console.log(arguments[0]) // state\n  console.log(arguments[1]) // ownProps\n}\n\nfunction mapStateToProps(...args) {\n  console.log(args[0]) // state\n  console.log(args[1]) // ownProps\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Store via ReactReduxContext in React-Redux\nDESCRIPTION: Demonstrates how to access the Redux store directly using ReactReduxContext.Consumer within a connected component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/Provider.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ReactReduxContext } from 'react-redux'\n\n// in your connected component\nrender() {\n  return (\n    <ReactReduxContext.Consumer>\n      {({ store }) => {\n        // do something with the store here\n      }}\n    </ReactReduxContext.Consumer>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Redux with UI - Core Steps\nDESCRIPTION: The fundamental steps required to integrate Redux with any UI layer, demonstrating why a binding library like React Redux is beneficial.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/introduction/why-use-react-redux.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Create a Redux store\n2. Subscribe to updates\n3. Inside the subscription callback:\n   1. Get the current store state\n   2. Extract the data needed by this piece of UI\n   3. Update the UI with the data\n4. If necessary, render the UI with initial state\n5. Respond to UI inputs by dispatching Redux actions\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Connected Components\nDESCRIPTION: Demonstrates creating a reusable higher-order component with connect() and applying it to multiple components\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/connect.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { login, logout } from './actionCreators'\n\nconst mapState = (state) => state.user\nconst mapDispatch = { login, logout }\n\n// first call: returns a hoc that you can use to wrap any component\nconst connectUser = connect(mapState, mapDispatch)\n\n// second call: returns the wrapper component with mergedProps\n// you may use the hoc to enable different components to get the same behavior\nconst ConnectedUserLogin = connectUser(Login)\nconst ConnectedUserProfile = connectUser(Profile)\n```\n\n----------------------------------------\n\nTITLE: Defining React Redux Core Hooks\nDESCRIPTION: Core hooks for accessing Redux store and dispatch functions within components. Includes useDispatch, useSelector, and useStore hooks.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.api.md#2025-04-21_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const useDispatch: () => Dispatch<AnyAction>\n\nexport const useSelector: <TState = DefaultRootState, Selected = unknown>(\n  selector: (state: TState) => Selected,\n  equalityFn?: EqualityFn<Selected> | undefined,\n) => Selected\n\nexport const useStore: () => Store<any, AnyAction>\n```\n\n----------------------------------------\n\nTITLE: Basic useStore Hook Example\nDESCRIPTION: Demonstrates usage of useStore hook to access Redux store directly. Shows a simple example of getting state, though direct store access is not recommended for typical use cases.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/hooks.md#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport { useStore } from 'react-redux'\n\nexport const CounterComponent = ({ value }) => {\n  const store = useStore()\n\n  // EXAMPLE ONLY! Do not do this in a real app.\n  // The component will not automatically update if the store state changes\n  return <div>{store.getState()}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting a React component to Redux store with connect()\nDESCRIPTION: Example of using the connect function to connect a React component to the Redux store. The example shows how to map state to props and connect action creators to dispatch functions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/introduction/quick-start.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { connect } from 'react-redux'\nimport { increment, decrement, reset } from './actionCreators'\n\n// const Counter = ...\n\nconst mapStateToProps = (state /*, ownProps*/) => {\n  return {\n    counter: state.counter,\n  }\n}\n\nconst mapDispatchToProps = { increment, decrement, reset }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter)\n```\n\n----------------------------------------\n\nTITLE: Connect Without mapStateToProps\nDESCRIPTION: Shows how to use mapDispatchToProps without mapStateToProps by passing null as the first argument.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconnect(null, mapDispatchToProps)(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Redux Action Creator Implementation\nDESCRIPTION: Shows how to implement a Redux action creator for adding todos, including unique ID generation.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/connect.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// redux/actions.js\nimport { ADD_TODO } from './actionTypes'\n\nlet nextTodoId = 0\nexport const addTodo = (content) => ({\n  type: ADD_TODO,\n  payload: {\n    id: ++nextTodoId,\n    content,\n  },\n})\n\n// ... other actions\n```\n\n----------------------------------------\n\nTITLE: Complete AddTodo Component Implementation\nDESCRIPTION: Full implementation of the AddTodo component including state management and event handling with Redux integration.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/connect.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// components/AddTodo.js\n\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../redux/actions'\n\nclass AddTodo extends React.Component {\n  // ...\n\n  handleAddTodo = () => {\n    // dispatches actions to add todo\n    this.props.addTodo(this.state.input)\n\n    // sets state back to empty string\n    this.setState({ input: '' })\n  }\n\n  render() {\n    return (\n      <div>\n        <input\n          onChange={(e) => this.updateInput(e.target.value)}\n          value={this.state.input}\n        />\n        <button className=\"add-todo\" onClick={this.handleAddTodo}>\n          Add Todo\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default connect(null, { addTodo })(AddTodo)\n```\n\n----------------------------------------\n\nTITLE: Defining mapDispatchToProps as a Function with Plain Actions\nDESCRIPTION: Example of defining a mapDispatchToProps function that returns an object with methods that dispatch plain action objects. This approach encapsulates the dispatch logic.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // dispatching plain actions\n    increment: () => dispatch({ type: 'INCREMENT' }),\n    decrement: () => dispatch({ type: 'DECREMENT' }),\n    reset: () => dispatch({ type: 'RESET' }),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Context in React Redux\nDESCRIPTION: Demonstrates how to supply a custom context instance to the Provider component and connected components in React Redux. This allows for customization of how the store is passed to components.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/accessing-store.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Provider context={MyContext} store={store}>\n  <App />\n</Provider>\n```\n\nLANGUAGE: js\nCODE:\n```\n// You can pass the context as an option to connect\nexport default connect(\n  mapState,\n  mapDispatch,\n  null,\n  { context: MyContext }\n)(MyComponent)\n\n// or, call connect as normal to start\nconst ConnectedComponent = connect(\n  mapState,\n  mapDispatch\n)(MyComponent)\n\n// Later, pass the custom context as a prop to the connected component\n<ConnectedComponent context={MyContext} />\n```\n\n----------------------------------------\n\nTITLE: Accessing Redux Store Context in React Components\nDESCRIPTION: Demonstrates how to access the Redux store using the ReactReduxContext consumer in a connected component. This method allows direct access to the store without custom context.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/Provider.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { ReactReduxContext } from 'react-redux'\n\n// in your connected component\nrender() {\n  return (\n    <ReactReduxContext.Consumer>\n      {({ store }) => {\n        // do something with the store here\n      }}\n    </ReactReduxContext.Consumer>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Counter Component with Direct Dispatch\nDESCRIPTION: Example of a Counter component using props.dispatch directly to dispatch actions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Counter({ count, dispatch }) {\n  return (\n    <div>\n      <button onClick={() => dispatch({ type: 'DECREMENT' })}>-</button>\n      <span>{count}</span>\n      <button onClick={() => dispatch({ type: 'INCREMENT' })}>+</button>\n      <button onClick={() => dispatch({ type: 'RESET' })}>reset</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using connect() with temporary variable in React-Redux\nDESCRIPTION: Example demonstrating how to use connect() by first creating a higher-order component and then applying it to multiple components to share the same connected behavior.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { login, logout } from './actionCreators'\n\nconst mapState = (state) => state.user\nconst mapDispatch = { login, logout }\n\n// first call: returns a hoc that you can use to wrap any component\nconst connectUser = connect(mapState, mapDispatch)\n\n// second call: returns the wrapper component with mergedProps\n// you may use the hoc to enable different components to get the same behavior\nconst ConnectedUserLogin = connectUser(Login)\nconst ConnectedUserProfile = connectUser(Profile)\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Action Creator for Adding Todos\nDESCRIPTION: Defines the addTodo action creator function that creates action objects with incrementing IDs. This action creator will be connected to components to enable adding new todos to the Redux store.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/introduction/basic-tutorial.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// redux/actions.js\nimport { ADD_TODO } from './actionTypes'\n\nlet nextTodoId = 0\nexport const addTodo = (content) => ({\n  type: ADD_TODO,\n  payload: {\n    id: ++nextTodoId,\n    content,\n  },\n})\n\n// ... other actions\n```\n\n----------------------------------------\n\nTITLE: Defining Basic mapStateToProps Function Signature in JavaScript\nDESCRIPTION: Shows the basic function signature for mapStateToProps, which takes state and optional ownProps parameters and returns an object of data.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state, ownProps?)\n```\n\n----------------------------------------\n\nTITLE: Todo Filtering Selector Implementation\nDESCRIPTION: Implements a selector function to filter todos based on the visibility filter state.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/introduction/basic-tutorial.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// redux/selectors.js\n\n// ... other selectors\nexport const getTodosByVisibilityFilter = (store, visibilityFilter) => {\n  const allTodos = getTodos(store)\n  switch (visibilityFilter) {\n    case VISIBILITY_FILTERS.COMPLETED:\n      return allTodos.filter((todo) => todo.completed)\n    case VISIBILITY_FILTERS.INCOMPLETE:\n      return allTodos.filter((todo) => !todo.completed)\n    case VISIBILITY_FILTERS.ALL:\n    default:\n      return allTodos\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Selector Types for React-Redux\nDESCRIPTION: Type definitions for Redux selectors that extract and transform data from the store state. These types provide type safety for selector functions and selector factories.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.dt-types.api.md#2025-04-21_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport type RootStateOrAny = AnyIfEmpty<DefaultRootState>\n\n// @public (undocumented)\nexport type Selector<S, TProps, TOwnProps = null> = TOwnProps extends\n  | null\n  | undefined\n  ? (state: S) => TProps\n  : (state: S, ownProps: TOwnProps) => TProps\n\n// @public\nexport type SelectorFactory<S, TProps, TOwnProps, TFactoryOptions> = (\n  dispatch: Dispatch<Action>,\n  factoryOptions: TFactoryOptions,\n) => Selector<S, TProps, TOwnProps>\n\n// @public\nexport function shallowEqual<T>(left: T, right: any): boolean\n\n// @public\nexport type Shared<InjectedProps, DecorationTargetProps> = {\n  [P in Extract<\n    keyof InjectedProps,\n    keyof DecorationTargetProps\n  >]?: InjectedProps[P] extends DecorationTargetProps[P]\n    ? DecorationTargetProps[P]\n    : never\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting AddTodo Component to Redux\nDESCRIPTION: Example of connecting a React component to Redux store using connect(), focusing on action dispatching.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/connect.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// components/AddTodo.js\n\n// ... other imports\nimport { connect } from 'react-redux'\nimport { addTodo } from '../redux/actions'\n\nclass AddTodo extends React.Component {\n  // ... component implementation\n}\n\nexport default connect(null, { addTodo })(AddTodo)\n```\n\n----------------------------------------\n\nTITLE: Rendering with React Router 0.13 in Redux Application\nDESCRIPTION: Demonstrates how to set up the root view of a React Redux application using React Router 0.13. This shows the proper way to pass router state down to components to ensure views update correctly on route changes.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nRouter.run(routes, Router.HistoryLocation, (Handler, routerState) => {\n  // note \"routerState\" here\n  ReactDOM.render(\n    <Provider store={store}>\n      {/* note \"routerState\" here */}\n      <Handler routerState={routerState} />\n    </Provider>,\n    document.getElementById('root'),\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: React Redux Provider with React Router Integration\nDESCRIPTION: Example showing how to combine React Redux Provider with React Router for route-based component rendering.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/Provider.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { Router, Route } from 'react-router-dom'\n\nimport { App } from './App'\nimport { Foo } from './Foo'\nimport { Bar } from './Bar'\nimport createStore from './createReduxStore'\n\nconst store = createStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <Route exact path=\"/\" component={App} />\n      <Route path=\"/foo\" component={Foo} />\n      <Route path=\"/bar\" component={Bar} />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n)\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Stores with Custom Contexts in React Redux\nDESCRIPTION: Illustrates how to use multiple Redux stores by providing custom contexts. This approach allows for isolation of stores in separate context instances.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/accessing-store.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// a naive example\nconst ContextA = React.createContext(null);\nconst ContextB = React.createContext(null);\n\n// assuming reducerA and reducerB are proper reducer functions\nconst storeA = createStore(reducerA);\nconst storeB = createStore(reducerB);\n\n// supply the context instances to Provider\nfunction App() {\n  return (\n    <Provider store={storeA} context={ContextA} />\n      <Provider store={storeB} context={ContextB}>\n        <RootModule />\n      </Provider>\n    </Provider>\n  );\n}\n\n// fetch the corresponding store with connected components\n// you need to use the correct context\nconnect(mapStateA, null, null, { context: ContextA })(MyComponentA)\n\n// You may also pass the alternate context instance directly to the connected component instead\n<ConnectedMyComponentA context={ContextA} />\n\n// it is possible to chain connect()\n// in this case MyComponent will receive merged props from both stores\ncompose(\n  connect(mapStateA, null, null, { context: ContextA }),\n  connect(mapStateB, null, null, { context: ContextB })\n)(MyComponent);\n```\n\n----------------------------------------\n\nTITLE: Accessing Store with ReactReduxContext in React Components\nDESCRIPTION: Demonstrates how to access the Redux store directly using the ReactReduxContext Consumer component, allowing you to work with the store inside render methods without using connect().\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/Provider.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { ReactReduxContext } from 'react-redux'\n\n// in your connected component\nrender() {\n  return (\n    <ReactReduxContext.Consumer>\n      {({ store }) => {\n        // do something with the store here\n      }}\n    </ReactReduxContext.Consumer>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Dispatch Approaches in React Redux\nDESCRIPTION: Comparison of button click handlers with direct dispatch versus encapsulated action dispatching. The encapsulated approach is more declarative and hides Redux implementation details.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// button needs to be aware of \"dispatch\"\n<button onClick={() => dispatch({ type: \"SOMETHING\" })} />\n\n// button unaware of \"dispatch\",\n<button onClick={doSomething} />\n```\n\n----------------------------------------\n\nTITLE: Injecting only dispatch in React-Redux\nDESCRIPTION: Basic example of using connect() to inject just the dispatch function without subscribing to the store.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default connect()(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Supplying Custom Context to Connected Components\nDESCRIPTION: Shows how to provide a custom context instance to connected components. This can be done either as an option to the connect function or as a prop to the connected component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/accessing-store.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// You can pass the context as an option to connect\nexport default connect(mapState, mapDispatch, null, { context: MyContext })(\n  MyComponent,\n)\n\n// or, call connect as normal to start\nconst ConnectedComponent = connect(mapState, mapDispatch)(MyComponent)\n\n// Later, pass the custom context as a prop to the connected component\n;<ConnectedComponent context={MyContext} />\n```\n\n----------------------------------------\n\nTITLE: Injecting Action Creators without Store Subscription\nDESCRIPTION: Example showing how to inject all action creators without subscribing to store changes.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n\nexport default connect(null, actionCreators)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Connecting TodoList Component to Redux Store\nDESCRIPTION: Demonstrates how to connect the TodoList component to the Redux store using mapStateToProps to access the todos state.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/introduction/basic-tutorial.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// components/TodoList.js\n\n// ...other imports\nimport { connect } from \"react-redux\";\n\nconst TodoList = // ... UI component implementation\n\nconst mapStateToProps = state => {\n  const { byIds, allIds } = state.todos || {};\n  const todos =\n    allIds && allIds.length\n      ? allIds.map(id => (byIds ? { ...byIds[id], id } : null))\n      : null;\n  return { todos };\n};\n\nexport default connect(mapStateToProps)(TodoList);\n```\n\n----------------------------------------\n\nTITLE: Defining Thunk Resolution Types for React-Redux\nDESCRIPTION: Complex type definitions for handling Redux Thunk action creators in connected components. These types ensure thunk actions are properly typed when dispatched.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.dt-types.api.md#2025-04-21_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport type ResolveArrayThunks<TDispatchProps extends ReadonlyArray<any>> =\n  TDispatchProps extends [\n    infer A1,\n    infer A2,\n    infer A3,\n    infer A4,\n    infer A5,\n    infer A6,\n    infer A7,\n    infer A8,\n    infer A9,\n  ]\n    ? [\n        HandleThunkActionCreator<A1>,\n        HandleThunkActionCreator<A2>,\n        HandleThunkActionCreator<A3>,\n        HandleThunkActionCreator<A4>,\n        HandleThunkActionCreator<A5>,\n        HandleThunkActionCreator<A6>,\n        HandleThunkActionCreator<A7>,\n        HandleThunkActionCreator<A8>,\n        HandleThunkActionCreator<A9>,\n      ]\n    : TDispatchProps extends [\n          infer A1,\n          infer A2,\n          infer A3,\n          infer A4,\n          infer A5,\n          infer A6,\n          infer A7,\n          infer A8,\n        ]\n      ? [\n          HandleThunkActionCreator<A1>,\n          HandleThunkActionCreator<A2>,\n          HandleThunkActionCreator<A3>,\n          HandleThunkActionCreator<A4>,\n          HandleThunkActionCreator<A5>,\n          HandleThunkActionCreator<A6>,\n          HandleThunkActionCreator<A7>,\n          HandleThunkActionCreator<A8>,\n        ]\n      : TDispatchProps extends [\n            infer A1,\n            infer A2,\n            infer A3,\n            infer A4,\n            infer A5,\n            infer A6,\n            infer A7,\n          ]\n        ? [\n            HandleThunkActionCreator<A1>,\n            HandleThunkActionCreator<A2>,\n            HandleThunkActionCreator<A3>,\n            HandleThunkActionCreator<A4>,\n            HandleThunkActionCreator<A5>,\n            HandleThunkActionCreator<A6>,\n            HandleThunkActionCreator<A7>,\n          ]\n        : TDispatchProps extends [\n              infer A1,\n              infer A2,\n              infer A3,\n              infer A4,\n              infer A5,\n              infer A6,\n            ]\n          ? [\n              HandleThunkActionCreator<A1>,\n              HandleThunkActionCreator<A2>,\n              HandleThunkActionCreator<A3>,\n              HandleThunkActionCreator<A4>,\n              HandleThunkActionCreator<A5>,\n              HandleThunkActionCreator<A6>,\n            ]\n          : TDispatchProps extends [\n                infer A1,\n                infer A2,\n                infer A3,\n                infer A4,\n                infer A5,\n              ]\n            ? [\n                HandleThunkActionCreator<A1>,\n                HandleThunkActionCreator<A2>,\n                HandleThunkActionCreator<A3>,\n                HandleThunkActionCreator<A4>,\n                HandleThunkActionCreator<A5>,\n              ]\n            : TDispatchProps extends [infer A1, infer A2, infer A3, infer A4]\n              ? [\n                  HandleThunkActionCreator<A1>,\n                  HandleThunkActionCreator<A2>,\n                  HandleThunkActionCreator<A3>,\n                  HandleThunkActionCreator<A4>,\n                ]\n              : TDispatchProps extends [infer A1, infer A2, infer A3]\n                ? [\n                    HandleThunkActionCreator<A1>,\n                    HandleThunkActionCreator<A2>,\n                    HandleThunkActionCreator<A3>,\n                  ]\n                : TDispatchProps extends [infer A1, infer A2]\n                  ? [HandleThunkActionCreator<A1>, HandleThunkActionCreator<A2>]\n                  : TDispatchProps extends [infer A1]\n                    ? [HandleThunkActionCreator<A1>]\n                    : TDispatchProps extends Array<infer A>\n                      ? Array<HandleThunkActionCreator<A>>\n                      : TDispatchProps extends ReadonlyArray<infer A>\n                        ? ReadonlyArray<HandleThunkActionCreator<A>>\n                        : never\n\n// @public (undocumented)\nexport type ResolveThunks<TDispatchProps> = TDispatchProps extends {\n  [key: string]: any\n}\n  ? {\n      [C in keyof TDispatchProps]: HandleThunkActionCreator<TDispatchProps[C]>\n    }\n  : TDispatchProps\n```\n\n----------------------------------------\n\nTITLE: TodoList Component with Selectors\nDESCRIPTION: Enhanced TodoList component implementation using Redux selectors for state management.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/connect.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// components/TodoList.js\n\n// ...other imports\nimport { connect } from \"react-redux\";\nimport { getTodos } from \"../redux/selectors\";\n\nconst TodoList = // ... UI component implementation\n\nexport default connect(state => ({ todos: getTodos(state) }))(TodoList);\n```\n\n----------------------------------------\n\nTITLE: Defining React Hooks for Redux in TypeScript\nDESCRIPTION: Type definitions for React hooks that provide access to Redux store functionality. These hooks allow functional components to access Redux state and dispatch actions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.dt-types.api.md#2025-04-21_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface TypedUseSelectorHook<TState> {\n  // (undocumented)\n  <TSelected>(\n    selector: (state: TState) => TSelected,\n    equalityFn?: (left: TSelected, right: TSelected) => boolean,\n  ): TSelected\n}\n\n// @public\nexport function useDispatch<TDispatch = Dispatch<any>>(): TDispatch\n\n// @public (undocumented)\nexport function useDispatch<A extends Action = AnyAction>(): Dispatch<A>\n\n// @public\nexport function useSelector<TState = DefaultRootState, TSelected = unknown>(\n  selector: (state: TState) => TSelected,\n  equalityFn?: (left: TSelected, right: TSelected) => boolean,\n): TSelected\n\n// @public\nexport function useStore<\n  S = RootStateOrAny,\n  A extends Action = AnyAction,\n>(): Store<S, A>\n```\n\n----------------------------------------\n\nTITLE: Implementing mapDispatchToProps with bindActionCreators\nDESCRIPTION: Shows how to implement mapDispatchToProps using bindActionCreators and connect it to a component.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bindActionCreators } from 'redux'\n// ...\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ increment, decrement, reset }, dispatch)\n}\n\n// component receives props.increment, props.decrement, props.reset\nconnect(null, mapDispatchToProps)(Counter)\n```\n\n----------------------------------------\n\nTITLE: Defining React Redux Provider Component\nDESCRIPTION: React component that provides Redux store context to child components. Takes store and optional context as props.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.api.md#2025-04-21_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function Provider({\n  store,\n  context,\n  children,\n}: ProviderProps): JSX.Element\n```\n\n----------------------------------------\n\nTITLE: Injecting Action Creators Without State Subscription in React-Redux\nDESCRIPTION: Demonstrates how to inject all action creators as props without subscribing to the store. This is useful when a component only needs to dispatch actions but doesn't need access to the store state.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n\nexport default connect(null, actionCreators)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Connecting TodoList with Filtered Todos\nDESCRIPTION: Shows how to connect TodoList component using mapStateToProps with a selector to get filtered todos based on current visibility filter.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/introduction/basic-tutorial.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// components/TodoList.js\n\n// ...\n\nconst mapStateToProps = (state) => {\n  const { visibilityFilter } = state\n  const todos = getTodosByVisibilityFilter(state, visibilityFilter)\n  return { todos }\n}\n\nexport default connect(mapStateToProps)(TodoList)\n```\n\n----------------------------------------\n\nTITLE: MapStateToProps Without OwnProps\nDESCRIPTION: Demonstrates how mapStateToProps behaves when defined with a single parameter, where ownProps will not be received.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/connect.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  console.log(state) // state\n  console.log(arguments[1]) // undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Connect with Factory Functions\nDESCRIPTION: Example showing how to use factory functions for performance optimizations.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addTodo } from './actionCreators'\n\nfunction mapStateToPropsFactory(initialState, initialProps) {\n  const getSomeProperty= createSelector(...);\n  const anotherProperty = 200 + initialState[initialProps.another];\n  return function(state){\n    return {\n      anotherProperty,\n      someProperty: getSomeProperty(state),\n      todos: state.todos\n    }\n  }\n}\n\nfunction mapDispatchToPropsFactory(initialState, initialProps) {\n  function goToSomeLink(){\n    initialProps.history.push('some/link');\n  }\n  return function(dispatch){\n    return {\n      addTodo\n    }\n  }\n}\n\n\nexport default connect(mapStateToPropsFactory, mapDispatchToPropsFactory)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Selector Factory with User-Specific Todos\nDESCRIPTION: Example showing how to create a custom selector factory that injects user-specific todos and bound action creators based on props. Demonstrates advanced usage of connectAdvanced with state management and action binding.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect-advanced.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction selectorFactory(dispatch) {\n  let ownProps = {}\n  let result = {}\n\n  const actions = bindActionCreators(actionCreators, dispatch)\n  const addTodo = (text) => actions.addTodo(ownProps.userId, text)\n\n  return (nextState, nextOwnProps) => {\n    const todos = nextState.todos[nextOwnProps.userId]\n    const nextResult = { ...nextOwnProps, todos, addTodo }\n    ownProps = nextOwnProps\n    if (!shallowEqual(result, nextResult)) result = nextResult\n    return result\n  }\n}\nexport default connectAdvanced(selectorFactory)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Defining Redux Mapping Type Definitions\nDESCRIPTION: Type definitions for mapping state and dispatch to component props, including factory and function interfaces.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.api.md#2025-04-21_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type MapStateToProps<\n  TStateProps,\n  TOwnProps,\n  State = DefaultRootState,\n> = (state: State, ownProps: TOwnProps) => TStateProps\n\nexport type MapDispatchToProps<TDispatchProps, TOwnProps> =\n  | MapDispatchToPropsFunction<TDispatchProps, TOwnProps>\n  | TDispatchProps\n```\n\n----------------------------------------\n\nTITLE: Configuring connect() with pure:false Option in React Redux\nDESCRIPTION: Demonstrates how to use the pure:false option with connect() to handle components that depend on React context or external state. This disables the performance optimization that prevents unnecessary re-renders.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/troubleshooting.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nexport default connect(mapStateToProps, null, null, {\n  pure: false,\n})(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: MapStateToProps Single Parameter Behavior in React-Redux\nDESCRIPTION: Demonstrates how mapStateToProps behaves with a single mandatory parameter, where it will not receive ownProps as an argument. This includes both standard function declaration and arrow function with default parameter.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  console.log(state) // state\n  console.log(arguments[1]) // undefined\n}\nconst mapStateToProps = (state, ownProps = {}) => {\n  console.log(state) // state\n  console.log(ownProps) // undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Connect without mapDispatchToProps\nDESCRIPTION: Example showing how to use connect without a second argument to receive dispatch prop.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// component receives `dispatch`\nconnect(mapStateToProps /** no second argument*/)(Component)\n```\n\n----------------------------------------\n\nTITLE: Defining mapDispatchToProps as a Function with Plain Actions in React Redux\nDESCRIPTION: Example of defining mapDispatchToProps as a function that returns an object with methods that dispatch plain action objects.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // dispatching plain actions\n    increment: () => dispatch({ type: 'INCREMENT' }),\n    decrement: () => dispatch({ type: 'DECREMENT' }),\n    reset: () => dispatch({ type: 'RESET' }),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React-Redux Connect Interface Definition\nDESCRIPTION: Comprehensive type definition for the connect higher-order component interface, including multiple overloads for different connection patterns and options.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.dt-types.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Connect<DefaultState = DefaultRootState> {\n  (): InferableComponentEnhancer<DispatchProp>\n\n  <TStateProps = {}, no_dispatch = {}, TOwnProps = {}, State = DefaultState>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n  ): InferableComponentEnhancerWithProps<TStateProps & DispatchProp, TOwnProps>\n\n  <no_state = {}, TDispatchProps = {}, TOwnProps = {}>(\n    mapStateToProps: null | undefined,\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>,\n  ): InferableComponentEnhancerWithProps<TDispatchProps, TOwnProps>\n\n  // Additional overloads omitted for brevity...\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting State and Bound Action Creators as a Named Prop in React-Redux\nDESCRIPTION: Shows how to use bindActionCreators to inject all action creators as a single 'actions' prop. This pattern keeps action creators organized under a namespace in the component's props.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return { actions: bindActionCreators(actionCreators, dispatch) }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Selector Factory with User-Specific Todos\nDESCRIPTION: Creates a selector factory that injects todos for specific users based on props and binds action creators with userId. Uses advanced connection pattern with memoization for performance optimization.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction selectorFactory(dispatch) {\n  let ownProps = {}\n  let result = {}\n  const actions = bindActionCreators(actionCreators, dispatch)\n  const addTodo = (text) => actions.addTodo(ownProps.userId, text)\n  return (nextState, nextOwnProps) => {\n    const todos = nextState.todos[nextOwnProps.userId]\n    const nextResult = { ...nextOwnProps, todos, addTodo }\n    ownProps = nextOwnProps\n    if (!shallowEqual(result, nextResult)) result = nextResult\n    return result\n  }\n}\nexport default connectAdvanced(selectorFactory)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Using Default Dispatch Prop in a React Component\nDESCRIPTION: This example shows how to use the default dispatch prop in a Counter component to dispatch actions directly.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Counter({ count, dispatch }) {\n  return (\n    <div>\n      <button onClick={() => dispatch({ type: 'DECREMENT' })}>-</button>\n      <span>{count}</span>\n      <button onClick={() => dispatch({ type: 'INCREMENT' })}>+</button>\n      <button onClick={() => dispatch({ type: 'RESET' })}>reset</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Hook Creation Functions\nDESCRIPTION: Declares functions for creating custom hooks: createDispatchHook, createSelectorHook, and createStoreHook.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.api.md#2025-04-21_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function createDispatchHook(\n  context?: Context<ReactReduxContextValue<any, AnyAction> | null>,\n): () => Dispatch<AnyAction>\n\nexport function createSelectorHook(\n  context?: Context<ReactReduxContextValue<any, AnyAction> | null>,\n): <TState = DefaultRootState, Selected = unknown>(\n  selector: (state: TState) => Selected,\n  equalityFn?: EqualityFn<Selected>,\n) => Selected\n\nexport function createStoreHook(\n  context?: Context<ReactReduxContextValue<any, AnyAction> | null>,\n): () => Store<any, AnyAction>\n```\n\n----------------------------------------\n\nTITLE: Creating New Redux Projects with Templates\nDESCRIPTION: Commands for creating new Redux projects using official Vite template or Next.js template.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/introduction/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Vite with our Redux+TS template\n# (using the `degit` tool to clone and extract the template)\nnpx degit reduxjs/redux-templates/packages/vite-template-redux my-app\n\n# Next.js using the `with-redux` template\nnpx create-next-app --example with-redux my-app\n```\n\n----------------------------------------\n\nTITLE: Forcing re-renders with impure reducers in React-Redux\nDESCRIPTION: Example of overriding areStatesEqual to always return false, useful when dealing with impure reducers that mutate store state.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst areStatesEqual = () => false\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Environment Globally\nDESCRIPTION: Demonstrates how to configure the Jest test environment globally in package.json to prevent useLayoutEffect warnings across all test files.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/troubleshooting.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-project\",\n  \"jest\": {\n    \"testEnvironment\": \"node\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Router State in Nested View Components\nDESCRIPTION: Demonstrates how to pass router state down to nested route handler components when using React Router 0.13 with Redux to ensure view updates on route changes.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/troubleshooting.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nrender() {\n  // Keep passing it down\n  return <RouteHandler routerState={this.props.routerState} />\n}\n```\n\n----------------------------------------\n\nTITLE: MapStateToProps Single Parameter Behavior in React-Redux\nDESCRIPTION: Demonstrates how mapStateToProps behaves with a single mandatory parameter. In these cases, the function will not receive ownProps as a second argument.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  console.log(state) // state\n  console.log(arguments[1]) // undefined\n}\nconst mapStateToProps = (state, ownProps = {}) => {\n  console.log(state) // state\n  console.log(ownProps) // undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Connect Function Overloads\nDESCRIPTION: Declares multiple overloads for the 'connect' function, which is the core of react-redux for connecting React components to the Redux store.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.api.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const connect: {\n  (): InferableComponentEnhancer<DispatchProp>\n  <\n    TStateProps = {},\n    no_dispatch = {},\n    TOwnProps = {},\n    State = DefaultRootState,\n  >(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n  ): InferableComponentEnhancerWithProps<\n    TStateProps & DispatchProp<AnyAction>,\n    TOwnProps\n  >\n  // ... (additional overloads omitted for brevity)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MapDispatchToProps Types in TypeScript for React-Redux\nDESCRIPTION: Type definitions for mapping dispatch functions to component props in React-Redux. These types define various ways to connect Redux actions to React components.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.dt-types.api.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type MapDispatchToPropsFunction<TDispatchProps, TOwnProps> = (\n  dispatch: Dispatch<Action>,\n  ownProps: TOwnProps,\n) => TDispatchProps\n\n// @public (undocumented)\nexport type MapDispatchToPropsNonObject<TDispatchProps, TOwnProps> =\n  | MapDispatchToPropsFactory<TDispatchProps, TOwnProps>\n  | MapDispatchToPropsFunction<TDispatchProps, TOwnProps>\n\n// @public (undocumented)\nexport type MapDispatchToPropsParam<TDispatchProps, TOwnProps> =\n  | MapDispatchToPropsFactory<TDispatchProps, TOwnProps>\n  | MapDispatchToProps<TDispatchProps, TOwnProps>\n```\n\n----------------------------------------\n\nTITLE: Custom Selector Factory Implementation with User-Specific Todos\nDESCRIPTION: Example implementation of a selector factory that injects user-specific todos and bound action creators. The factory creates a selector that combines Redux state with component props and handles memoization.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/connect-advanced.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction selectorFactory(dispatch) {\n  let ownProps = {}\n  let result = {}\n  const actions = bindActionCreators(actionCreators, dispatch)\n  const addTodo = (text) => actions.addTodo(ownProps.userId, text)\n  return (nextState, nextOwnProps) => {\n    const todos = nextState.todos[nextOwnProps.userId]\n    const nextResult = { ...nextOwnProps, todos, addTodo }\n    ownProps = nextOwnProps\n    if (!shallowEqual(result, nextResult)) result = nextResult\n    return result\n  }\n}\nexport default connectAdvanced(selectorFactory)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Creating Pre-typed Redux Hooks with .withTypes() Method (v9.1.0+)\nDESCRIPTION: The newer approach using the .withTypes() method introduced in React Redux v9.1.0 for creating pre-typed hooks, which simplifies type definitions for Redux state and actions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/usage-with-typescript.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDispatch, useSelector, useStore } from 'react-redux'\nimport type { AppDispatch, AppStore, RootState } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = useDispatch.withTypes<AppDispatch>()\nexport const useAppSelector = useSelector.withTypes<RootState>()\nexport const useAppStore = useStore.withTypes<AppStore>()\n```\n\n----------------------------------------\n\nTITLE: MapStateToProps Without OwnProps\nDESCRIPTION: Example of a mapStateToProps function with one parameter that won't receive ownProps. This function only receives the Redux state.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction mapStateToProps(state) {\n  console.log(state) // state\n  console.log(arguments[1]) // undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Entire Redux State\nDESCRIPTION: Example showing how to inject the entire state (not recommended for performance reasons).\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default connect((state) => state)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Connect Usage Without mapStateToProps\nDESCRIPTION: Demonstrates how to use connect with only mapDispatchToProps by passing null as the first argument.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconnect(null, mapDispatchToProps)(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Injecting State and Action Creators\nDESCRIPTION: Example showing how to inject both state and action creators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nexport default connect(mapStateToProps, actionCreators)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Integrating Provider with React Router\nDESCRIPTION: Example demonstrating how to combine React-Redux Provider with React Router. This allows both routing and Redux state management to work together in the same application.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/Provider.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { Router, Route } from 'react-router-dom'\n\nimport { App } from './App'\nimport { Foo } from './Foo'\nimport { Bar } from './Bar'\nimport createStore from './createReduxStore'\n\nconst store = createStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <Route path=\"/\" component={App}>\n        <Route path=\"foo\" component={Foo} />\n        <Route path=\"bar\" component={Bar} />\n      </Route>\n    </Router>\n  </Provider>,\n  document.getElementById('root'),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectAdvanced Function\nDESCRIPTION: Declares the 'connectAdvanced' function, which is a more flexible way to connect a React component to a Redux store.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.api.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function connectAdvanced<S, TProps, TOwnProps, TFactoryOptions = {}>(\n  selectorFactory: SelectorFactory<S, TProps, unknown, unknown>,\n  {\n    getDisplayName,\n    methodName,\n    shouldHandleStateChanges,\n    forwardRef,\n    context,\n    ...connectOptions\n  }?: ConnectAdvancedOptions & Partial<TFactoryOptions>,\n): AdvancedComponentDecorator<TProps, TOwnProps & ConnectProps>\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Types for Props Handling in React-Redux\nDESCRIPTION: Utility type definitions for handling props injection, merging, and type safety in React-Redux connected components.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.dt-types.api.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport type Matching<InjectedProps, DecorationTargetProps> = {\n  [P in keyof DecorationTargetProps]: P extends keyof InjectedProps\n    ? InjectedProps[P] extends DecorationTargetProps[P]\n      ? DecorationTargetProps[P]\n      : InjectedProps[P]\n    : DecorationTargetProps[P]\n}\n\n// @public (undocumented)\nexport type MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps> = (\n  stateProps: TStateProps,\n  dispatchProps: TDispatchProps,\n  ownProps: TOwnProps,\n) => TMergedProps\n\n// @public (undocumented)\ntype Omit_2<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\nexport { Omit_2 as Omit }\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Action Creator Sets in React-Redux\nDESCRIPTION: Shows how to merge multiple action creator sets into a single 'actions' prop, combining them with Object.assign before binding. This provides a unified interface for actions while maintaining organization in the source code.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/connect.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as todoActionCreators from './todoActionCreators'\nimport * as counterActionCreators from './counterActionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(\n      Object.assign({}, todoActionCreators, counterActionCreators),\n      dispatch,\n    ),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Using ConnectedProps with React-Redux\nDESCRIPTION: Demonstrates using ConnectedProps helper type to automatically infer Redux-connected component props.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/static-types.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { connect, ConnectedProps } from 'react-redux'\n\ninterface RootState {\n  isOn: boolean\n}\n\nconst mapState = (state: RootState) => ({\n  isOn: state.isOn,\n})\n\nconst mapDispatch = {\n  toggleOn: () => ({ type: 'TOGGLE_IS_ON' }),\n}\n\nconst connector = connect(mapState, mapDispatch)\n\ninterface Props extends PropsFromRedux {\n  backgroundColor: string\n}\n\nconst MyComponent = (props: Props) => (\n  <div style={{ backgroundColor: props.backgroundColor }}>\n    <button onClick={props.toggleOn}>\n      Toggle is {props.isOn ? 'ON' : 'OFF'}\n    </button>\n  </div>\n)\n\nexport default connector(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Basic mapStateToProps Example with State Parameter\nDESCRIPTION: Shows a simple implementation of mapStateToProps function that takes only the state parameter and maps todos from state to component props.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (state) => ({ todos: state.todos })\n```\n\n----------------------------------------\n\nTITLE: Demonstrating mapStateToProps Without ownProps in React-Redux\nDESCRIPTION: Examples showing how mapStateToProps does not receive ownProps when the function has only one mandatory parameter, even if there's an optional parameter with a default value.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  console.log(state) // state\n  console.log(arguments[1]) // undefined\n}\nconst mapStateToProps = (state, ownProps = {}) => {\n  console.log(state) // state\n  console.log(ownProps) // undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing ReactReduxContext Directly in Components\nDESCRIPTION: Shows how to directly access the Redux store within a component by using the ReactReduxContext consumer. This approach is not recommended as part of the public API and may break without notice.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/accessing-store.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ReactReduxContext } from 'react-redux'\n\n// in your connected component\nfunction MyConnectedComponent() {\n  return (\n    <ReactReduxContext.Consumer>\n      {({ store }) => {\n        // do something useful with the store, like passing it to a child\n        // component where it can be used in lifecycle methods\n      }}\n    </ReactReduxContext.Consumer>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Redux Templates with Vite or Next.js\nDESCRIPTION: Command line instructions for creating new React Redux applications using either the official Redux+TS template for Vite or Next.js with the with-redux template. These commands set up projects with Redux Toolkit and React-Redux pre-configured.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Vite with our Redux+TS template\n# (using the `degit` tool to clone and extract the template)\nnpx degit reduxjs/redux-templates/packages/vite-template-redux my-app\n\n# Next.js using the `with-redux` template\nnpx create-next-app --example with-redux my-app\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Provider with Store Key\nDESCRIPTION: Demonstrates how to create a custom Provider component with a specific store key for scenarios requiring multiple Redux stores. Includes creation of extended connect HOC with custom store key configuration.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { connect, createProvider } from 'react-redux'\n\nconst STORE_KEY = 'componentStore'\n\nexport const Provider = createProvider(STORE_KEY)\n\nfunction connectExtended(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps,\n  options = {},\n) {\n  options.storeKey = STORE_KEY\n  return connect(mapStateToProps, mapDispatchToProps, mergeProps, options)\n}\n\nexport { connectExtended as connect }\n```\n\n----------------------------------------\n\nTITLE: Basic connectAdvanced Function Signature\nDESCRIPTION: Basic function signature showing the core connectAdvanced method that connects React components to Redux store.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/connect-advanced.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconnectAdvanced(selectorFactory, connectOptions?)\n```\n\n----------------------------------------\n\nTITLE: React-Redux Core Type Imports and Definitions\nDESCRIPTION: Essential type imports from React and Redux along with core type definitions for React-Redux functionality including component decorators and utility types.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.dt-types.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Action } from 'redux'\nimport { AnyAction } from 'redux'\nimport { ClassAttributes } from 'react'\nimport { Component } from 'react'\nimport { ComponentClass } from 'react'\nimport { ComponentType } from 'react'\nimport { Context } from 'react'\nimport { Dispatch } from 'redux'\nimport hoistNonReactStatics = require('hoist-non-react-statics')\nimport { NamedExoticComponent } from 'react'\nimport { Store } from 'redux'\n\n// @public (undocumented)\nexport type AdvancedComponentDecorator<TProps, TOwnProps> = (\n  component: ComponentType<TProps>,\n) => NamedExoticComponent<TOwnProps>\n\n// @public (undocumented)\nexport type AnyIfEmpty<T extends object> = keyof T extends never ? any : T\n\n// @public\nexport function batch(cb: () => void): void\n```\n\n----------------------------------------\n\nTITLE: Using batch() in a Redux Thunk\nDESCRIPTION: Example of using the batch() function in a Redux thunk to combine multiple dispatch calls into a single render update. This is useful for optimizing performance when dispatching multiple actions in succession.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/batch.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { batch } from 'react-redux'\n\nfunction myThunk() {\n  return (dispatch, getState) => {\n    // should only result in one combined re-render, not two\n    batch(() => {\n      dispatch(increment())\n      dispatch(increment())\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Redux Stores with Custom Contexts\nDESCRIPTION: Demonstrates how to use multiple Redux stores in a React application by providing separate context instances for each store, creating isolation between them.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/accessing-store.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// a naive example\nconst ContextA = React.createContext();\nconst ContextB = React.createContext();\n\n// assuming reducerA and reducerB are proper reducer functions\nconst storeA = createStore(reducerA);\nconst storeB = createStore(reducerB);\n\n// supply the context instances to Provider\nfunction App() {\n  return (\n    <Provider store={storeA} context={ContextA} />\n      <Provider store={storeB} context={ContextB}>\n        <RootModule />\n      </Provider>\n    </Provider>\n  );\n}\n\n// fetch the corresponding store with connected components\n// you need to use the correct context\nconnect(mapStateA, null, null, { context: ContextA })(MyComponentA)\n\n// You may also pass the alternate context instance directly to the connected component instead\n<ConnectedMyComponentA context={ContextA} />\n\n// it is possible to chain connect()\n// in this case MyComponent will receive merged props from both stores\ncompose(\n  connect(mapStateA, null, null, { context: ContextA }),\n  connect(mapStateB, null, null, { context: ContextB })\n)(MyComponent);\n```\n\n----------------------------------------\n\nTITLE: Defining Root State Type with TypeScript in Redux\nDESCRIPTION: Shows how to define and infer the root state type using TypeScript's ReturnType utility with a combined reducer.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/static-types.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const rootReducer = combineReducers({\n  posts: postsReducer,\n  comments: commentsReducer,\n  users: usersReducer,\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n// {posts: PostsState, comments: CommentsState, users: UsersState}\n```\n\n----------------------------------------\n\nTITLE: Combining multiple action creator sets under single property in React-Redux\nDESCRIPTION: Example demonstrating how to inject todos from state and combine two sets of action creators under a single 'actions' property.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as todoActionCreators from './todoActionCreators'\nimport * as counterActionCreators from './counterActionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(\n      { ...todoActionCreators, ...counterActionCreators },\n      dispatch,\n    ),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Rendering with React Router 0.13 and Redux Provider in Root View\nDESCRIPTION: This snippet demonstrates how to properly pass router state when using React Router 0.13 with Redux to ensure views update correctly on route changes. It shows the setup in the root component with Router.run and Provider.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nRouter.run(routes, Router.HistoryLocation, (Handler, routerState) => {\n  // note \"routerState\" here\n  ReactDOM.render(\n    <Provider store={store}>\n      {/* note \"routerState\" here */}\n      <Handler routerState={routerState} />\n    </Provider>,\n    document.getElementById('root'),\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Redux Action Creators for Todo Application\nDESCRIPTION: Defines an action creator function for adding todos in a Redux application, which includes a unique ID generator and the appropriate action type and payload structure.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/introduction/basic-tutorial.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// redux/actions.js\nimport { ADD_TODO } from './actionTypes'\n\nlet nextTodoId = 0\nexport const addTodo = (content) => ({\n  type: ADD_TODO,\n  payload: {\n    id: ++nextTodoId,\n    content,\n  },\n})\n\n// ... other actions\n```\n\n----------------------------------------\n\nTITLE: Installing React Redux with npm\nDESCRIPTION: Command to install React Redux using npm package manager. React Redux 7.x requires React 16.8.3 or later.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/introduction/quick-start.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-redux\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Injecting Entire Redux State into Component\nDESCRIPTION: Example of an anti-pattern that injects the entire Redux state into a component. This approach is discouraged as it eliminates performance optimizations by causing the component to re-render after every state change.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// don't do this!\nexport default connect((state) => state)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Initializing connectAdvanced Function in React Redux\nDESCRIPTION: Basic syntax and usage example of the connectAdvanced function that connects a React component to a Redux store.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/connect-advanced.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconnectAdvanced(selectorFactory, [connectOptions])\n```\n\n----------------------------------------\n\nTITLE: Using Props to Determine State Mapping in React-Redux\nDESCRIPTION: Shows how to access component props within mapStateToProps to dynamically determine what state to inject. This enables creating reusable components that can work with different slices of state based on props.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/connect.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n\nfunction mapStateToProps(state, ownProps) {\n  return { todos: state.todos[ownProps.userId] }\n}\n\nexport default connect(mapStateToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Defining batch() Function Signature in JavaScript\nDESCRIPTION: Defines the signature of the batch() function, which takes a single function parameter.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/batch.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbatch(fn: Function)\n```\n\n----------------------------------------\n\nTITLE: Typing useSelector Hook in React-Redux\nDESCRIPTION: Demonstrates type inference for useSelector hook with explicit state parameter typing.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/static-types.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RootState {\n  isOn: boolean\n}\n\n// TS infers type: (state: RootState) => boolean\nconst selectIsOn = (state: RootState) => state.isOn\n\n// TS infers `isOn` is boolean\nconst isOn = useSelector(selectIsOn)\n```\n\n----------------------------------------\n\nTITLE: Internal bindActionCreators Call in React-Redux\nDESCRIPTION: Demonstrates how React-Redux internally handles the object shorthand form of mapDispatchToProps.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// React-Redux does this for you automatically:\n;(dispatch) => bindActionCreators(mapDispatchToProps, dispatch)\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Injecting entire state in React-Redux\nDESCRIPTION: Example of an anti-pattern that should be avoided because it injects the entire state, causing performance issues by triggering re-renders for any state change.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// don't do this!\nexport default connect((state) => state)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Connect Function Signature in React-Redux\nDESCRIPTION: The basic signature of the connect() function showing its optional parameters: mapStateToProps, mapDispatchToProps, mergeProps, and options.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction connect(mapStateToProps?, mapDispatchToProps?, mergeProps?, options?)\n```\n\n----------------------------------------\n\nTITLE: Installing React Redux with npm\nDESCRIPTION: Command to install React Redux package using npm package manager. React Redux 6.x requires React 16.4 or later.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/introduction/quick-start.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-redux\n```\n\n----------------------------------------\n\nTITLE: Rendering React Redux Provider with React Router\nDESCRIPTION: This snippet demonstrates how to properly render a React Redux Provider component with React Router, passing the router state to the Handler component. This solution addresses view update issues on route changes with React Router 0.13.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nRouter.run(routes, Router.HistoryLocation, (Handler, routerState) => {\n  // note \"routerState\" here\n  ReactDOM.render(\n    <Provider store={store}>\n      {/* note \"routerState\" here */}\n      <Handler routerState={routerState} />\n    </Provider>,\n    document.getElementById('root'),\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Connecting Todo Component with toggleTodo Action\nDESCRIPTION: Demonstrates connecting a Todo component to dispatch toggleTodo action using connect()\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/introduction/basic-tutorial.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// components/Todo.js\n\n// ... other imports\nimport { connect } from \"react-redux\";\nimport { toggleTodo } from \"../redux/actions\";\n\nconst Todo = // ... component implementation\n\nexport default connect(\n  null,\n  { toggleTodo }\n)(Todo);\n```\n\n----------------------------------------\n\nTITLE: Manually Injecting Dispatch with bindActionCreators\nDESCRIPTION: Example showing how to manually inject dispatch while using bindActionCreators to bind action creators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bindActionCreators } from 'redux'\n// ...\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    dispatch,\n    ...bindActionCreators({ increment, decrement, reset }, dispatch),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MapStateToProps with Default OwnProps\nDESCRIPTION: Shows mapStateToProps with default parameter for ownProps, demonstrating parameter handling.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/connect.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (state, ownProps = {}) => {\n  console.log(state) // state\n  console.log(ownProps) // {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Connect Options Interface for React-Redux\nDESCRIPTION: Interface for configuration options used when connecting React components to Redux stores. These options control how props are compared and how components are optimized.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.dt-types.api.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport interface Options<\n  State = DefaultRootState,\n  TStateProps = {},\n  TOwnProps = {},\n  TMergedProps = {},\n> extends ConnectOptions {\n  areMergedPropsEqual?: (\n    nextMergedProps: TMergedProps,\n    prevMergedProps: TMergedProps,\n  ) => boolean\n\n  areOwnPropsEqual?: (\n    nextOwnProps: TOwnProps,\n    prevOwnProps: TOwnProps,\n  ) => boolean\n\n  areStatePropsEqual?: (\n    nextStateProps: TStateProps,\n    prevStateProps: TStateProps,\n  ) => boolean\n\n  areStatesEqual?: (nextState: State, prevState: State) => boolean\n\n  forwardRef?: boolean\n\n  pure?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Redux Connect without Store Subscription\nDESCRIPTION: Simple example showing how to inject just dispatch without listening to store changes.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default connect()(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Context to React Redux Provider\nDESCRIPTION: Demonstrates how to supply a custom context instance to the React Redux Provider component. This allows you to override the default context mechanism that React Redux uses internally.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/accessing-store.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Provider context={MyContext} store={store}>\n  <App />\n</Provider>\n```\n\n----------------------------------------\n\nTITLE: Connecting AddTodo Component to Redux Store\nDESCRIPTION: Connects a React component to Redux using the connect function, focusing on action dispatching with mapDispatchToProps. This enables the component to dispatch addTodo actions without manual dispatch calls.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/introduction/basic-tutorial.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// components/AddTodo.js\n\n// ... other imports\nimport { connect } from 'react-redux'\nimport { addTodo } from '../redux/actions'\n\nclass AddTodo extends React.Component {\n  // ... component implementation\n}\n\nexport default connect(null, { addTodo })(AddTodo)\n```\n\n----------------------------------------\n\nTITLE: Installing React Redux with Package Managers\nDESCRIPTION: Commands for installing React Redux using npm or yarn package managers.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/introduction/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# If you use npm:\nnpm install react-redux\n\n# Or if you use Yarn:\nyarn add react-redux\n```\n\n----------------------------------------\n\nTITLE: Unstable Selector Example in TypeScript\nDESCRIPTION: Demonstrates an unstable selector pattern that causes unnecessary rerenders by returning a new object reference on each call\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/hooks.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst { count, user } = useSelector((state) => ({\n  count: state.count,\n  user: state.user,\n}))\n```\n\n----------------------------------------\n\nTITLE: Object Shorthand Form of mapDispatchToProps\nDESCRIPTION: Shows the simplified object shorthand syntax for mapDispatchToProps, which is the recommended approach for most use cases.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = {\n  increment,\n  decrement,\n  reset,\n}\n```\n\n----------------------------------------\n\nTITLE: Custom mapDispatchToProps with Dispatch\nDESCRIPTION: Examples of custom mapDispatchToProps functions that maintain access to dispatch.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    increment: () => dispatch(increment()),\n    decrement: () => dispatch(decrement()),\n    reset: () => dispatch(reset()),\n    dispatch,\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bindActionCreators } from 'redux'\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    dispatch,\n    ...bindActionCreators({ increment, decrement, reset }, dispatch),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MapStateToProps with Arguments Object\nDESCRIPTION: Shows how to access state and ownProps using the arguments object.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/connect.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps() {\n  console.log(arguments[0]) // state\n  console.log(arguments[1]) // ownProps\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Connect Usage Without mapDispatchToProps\nDESCRIPTION: Shows how to connect a component without providing mapDispatchToProps, which automatically injects dispatch as a prop.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconnect(mapStateToProps /** no second argument*/)(Component)\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectAdvancedOptions Interface\nDESCRIPTION: Specifies the options that can be passed to the connectAdvanced function.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.api.md#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ConnectAdvancedOptions {\n  context?: typeof ReactReduxContext\n  forwardRef?: boolean\n  getDisplayName?: (name: string) => string\n  methodName?: string\n  pure?: boolean\n  shouldHandleStateChanges?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Connected Components\nDESCRIPTION: Example demonstrating how to create and reuse a higher-order component created by connect()\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { login, logout } from './actionCreators'\n\nconst mapState = (state) => state.user\nconst mapDispatch = { login, logout }\n\n// first call: returns a hoc that you can use to wrap any component\nconst connectUser = connect(mapState, mapDispatch)\n\n// second call: returns the wrapper component with mergedProps\n// you may use the hoc to enable different components to get the same behavior\nconst ConnectedUserLogin = connectUser(Login)\nconst ConnectedUserProfile = connectUser(Profile)\n```\n\n----------------------------------------\n\nTITLE: Alternative Order for Defining Connected Component Types\nDESCRIPTION: Demonstrates an alternative approach where the component is declared before the connector, showing the flexibility of TypeScript's declaration ordering.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/usage-with-typescript.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// alternately, declare `type Props = PropsFromRedux & {backgroundColor: string}`\ninterface Props extends PropsFromRedux {\n  backgroundColor: string;\n}\n\nconst MyComponent = (props: Props) => /* same as above */\n\nconst connector = connect(/* same as above*/)\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nexport default connector(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Force State Updates in React-Redux\nDESCRIPTION: Example of forcing updates by always returning false from areStatesEqual for impure reducers\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/connect.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst areStatesEqual = () => false\n```\n\n----------------------------------------\n\nTITLE: Passing Router State to Nested Components in React Router 0.13\nDESCRIPTION: Shows how to implement the render method in nested components to continue passing down the router state. This ensures that all components in the hierarchy have access to the router state.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/troubleshooting.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nrender() {\n  // Keep passing it down\n  return <RouteHandler routerState={this.props.routerState} />\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Redux with yarn\nDESCRIPTION: Command to install React Redux package using yarn package manager. This is an alternative to using npm.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/introduction/quick-start.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-redux\n```\n\n----------------------------------------\n\nTITLE: Object Shorthand mapDispatchToProps\nDESCRIPTION: Shows the simplified object shorthand syntax for mapDispatchToProps that automatically binds action creators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapDispatchToProps = {\n  increment,\n  decrement,\n  reset,\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Down Action Dispatching to Child Components in React-Redux\nDESCRIPTION: This example demonstrates how to pass down action dispatching functions to child components, allowing them to dispatch actions without being directly connected to Redux.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n// pass down toggleTodo to child component\n// making Todo able to dispatch the toggleTodo action\nconst TodoList = ({ todos, toggleTodo }) => (\n  <div>\n    {todos.map((todo) => (\n      <Todo todo={todo} onClick={toggleTodo} />\n    ))}\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Types and Interfaces\nDESCRIPTION: Declares various utility types and interfaces used throughout the library, such as DefaultRootState, DispatchProp, and EqualityFn.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.api.md#2025-04-21_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface DefaultRootState {}\n\nexport interface DispatchProp<A extends Action = AnyAction> {\n  dispatch: Dispatch<A>\n}\n\nexport type DistributiveOmit<T, K extends keyof T> = T extends unknown\n  ? Omit_2<T, K>\n  : never\n\nexport type EqualityFn<T> = (a: T | undefined, b: T | undefined) => boolean\n\nexport type FixTypeLater = any\n\nexport type GetProps<C> =\n  C extends ComponentType<infer P>\n    ? C extends ComponentClass<P>\n      ? ClassAttributes<InstanceType<C>> & P\n      : P\n    : never\n\nexport type HandleThunkActionCreator<TActionCreator> = TActionCreator extends (\n  ...args: any[]\n) => any\n  ? InferThunkActionCreatorType<TActionCreator>\n  : TActionCreator\n\nexport type InferableComponentEnhancer<TInjectedProps> =\n  InferableComponentEnhancerWithProps<TInjectedProps, {}>\n\nexport type InferableComponentEnhancerWithProps<TInjectedProps, TNeedsProps> = <\n  C extends ComponentType<Matching<TInjectedProps, GetProps<C>>>,\n>(\n  component: C,\n) => ConnectedComponent<\n  C,\n  DistributiveOmit<GetProps<C>, keyof Shared<TInjectedProps, GetProps<C>>> &\n    TNeedsProps\n>\n```\n\n----------------------------------------\n\nTITLE: Defining Advanced Component Decorator Type\nDESCRIPTION: Defines a type for an advanced component decorator that takes a component type and returns a new component type with different props.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.api.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type AdvancedComponentDecorator<TProps, TOwnProps> = (\n  component: ComponentType<TProps>,\n) => ComponentType<TOwnProps>\n```\n\n----------------------------------------\n\nTITLE: Initializing connectAdvanced Function Signature\nDESCRIPTION: Basic function signature showing the parameters for connectAdvanced with optional connectOptions.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect-advanced.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconnectAdvanced(selectorFactory, connectOptions?)\n```\n\n----------------------------------------\n\nTITLE: Counter Component with Connected Action Creators in React Redux\nDESCRIPTION: Example of a Counter component that receives action dispatching functions as props from mapDispatchToProps, allowing direct calling of these functions without using dispatch.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Counter({ count, increment, decrement, reset }) {\n  return (\n    <div>\n      <button onClick={decrement}>-</button>\n      <span>{count}</span>\n      <button onClick={increment}>+</button>\n      <button onClick={reset}>reset</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Connect with Full State\nDESCRIPTION: Shows how to inject the entire state (not recommended for performance reasons).\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/connect.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport default connect((state) => state)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: MapStateToProps with OwnProps\nDESCRIPTION: Example showing mapStateToProps using both state and component props parameters.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/connect.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst mapStateToProps = (state, ownProps) => ({\n  todo: state.todos[ownProps.id],\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of batch() Function in React-Redux\nDESCRIPTION: Shows the function signature for the batch() API in React-Redux, which takes a function as its only parameter.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/batch.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbatch(fn: Function)\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Syntax for mapDispatchToProps in React-Redux\nDESCRIPTION: Demonstrates the shorthand object syntax for mapDispatchToProps to inject specific action creators. This syntax is more concise than the function form and automatically binds the actions to dispatch.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/connect.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addTodo, deleteTodo } from './actionCreators'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nconst mapDispatchToProps = {\n  addTodo,\n  deleteTodo,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Props from mapStateToProps in React Redux\nDESCRIPTION: Shows how mapStateToProps returns an object where each field becomes a prop for the connected component with values from the Redux store.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  return {\n    a: 42,\n    todos: state.todos,\n    filter: state.visibilityFilter,\n  }\n}\n\n// component will receive: props.a, props.todos, and props.filter\n```\n\n----------------------------------------\n\nTITLE: Defining AnyIfEmpty Utility Type\nDESCRIPTION: Creates a utility type that returns 'any' if the input object type is empty, otherwise returns the input type.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.api.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type AnyIfEmpty<T extends object> = keyof T extends never ? any : T\n```\n\n----------------------------------------\n\nTITLE: Implementing a TypeScript Redux Slice\nDESCRIPTION: Creates a Redux slice with TypeScript, defining state interface, initial state, and properly typed reducers with PayloadAction. Also exports typed selectors that work with the RootState.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/typescript.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport type { RootState } from '../../app/store'\n\n// Define a type for the slice state\ninterface CounterState {\n  value: number\n}\n\n// Define the initial state using that type\nconst initialState: CounterState = {\n  value: 0,\n}\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.value += 1\n    },\n    decrement: (state) => {\n      state.value -= 1\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload\n    },\n  },\n})\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\n\n// Other code such as selectors can use the imported `RootState` type\nexport const selectCount = (state: RootState) => state.counter.value\n\nexport default counterSlice.reducer\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectedComponent Type\nDESCRIPTION: Creates a type for a connected component, which includes the original component's static properties and a WrappedComponent property.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.api.md#2025-04-21_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type ConnectedComponent<\n  C extends ComponentType<any>,\n  P,\n> = ComponentType<P> &\n  NonReactStatics<C> & {\n    WrappedComponent: C\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Syntax for Injecting State and Actions in React-Redux\nDESCRIPTION: Shows a more concise way to connect a component to Redux by using the object shorthand syntax for mapDispatchToProps. This simplified pattern automatically wraps the action creators in dispatch calls.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/connect.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addTodo, deleteTodo } from './actionCreators'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nconst mapDispatchToProps = {\n  addTodo,\n  deleteTodo,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Passing Router State in Nested Views\nDESCRIPTION: This code snippet shows how to pass down the router state in nested views when using React Router 0.13. This ensures that all components have access to the router state, resolving update issues on route changes.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/troubleshooting.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nrender() {\n  // Keep passing it down\n  return <RouteHandler routerState={this.props.routerState} />\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Command to install project dependencies using Yarn v2. Note that Yarn v1.22 must be installed globally as a prerequisite.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Using Selectors with Connect for TodoList Component\nDESCRIPTION: Shows how to use selector functions with the connect function to provide data to the TodoList component. This approach extracts the data access logic into reusable selectors for better maintainability.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/introduction/basic-tutorial.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// components/TodoList.js\n\n// ...other imports\nimport { connect } from \"react-redux\";\nimport { getTodos } from \"../redux/selectors\";\n\nconst TodoList = // ... UI component implementation\n\nexport default connect(state => ({ todos: getTodos(state) }))(TodoList);\n```\n\n----------------------------------------\n\nTITLE: Basic Connect Usage\nDESCRIPTION: Shows how to connect a component with just dispatch injection.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/connect.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default connect()(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Basic React Redux Provider Setup\nDESCRIPTION: Example of setting up Provider at the root level of a React application with Redux store.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/Provider.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport { App } from './App'\nimport createStore from './createReduxStore'\n\nconst store = createStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing React Router 0.13 with Redux Provider in Root View\nDESCRIPTION: Shows how to properly integrate React Router 0.13 with Redux by passing router state to the Handler component. This addresses the issue where views don't update on route changes.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nRouter.run(routes, Router.HistoryLocation, (Handler, routerState) => {\n  // note \"routerState\" here\n  ReactDOM.render(\n    <Provider store={store}>\n      {/* note \"routerState\" here */}\n      <Handler routerState={routerState} />\n    </Provider>,\n    document.getElementById('root'),\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring React Redux Connect for Impure Components\nDESCRIPTION: This snippet demonstrates how to configure the connect function from React Redux to work with impure components that depend on external state or context. By setting the 'pure' option to false, the component will update whenever its parent renders, but at the cost of performance.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/troubleshooting.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nexport default connect(mapStateToProps, null, null, {\n  pure: false,\n})(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Initializing connectAdvanced Basic Usage - JavaScript\nDESCRIPTION: Basic syntax demonstration of connectAdvanced function that connects a React component to Redux store. Takes a selectorFactory function and optional connectOptions as parameters.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/connect-advanced.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconnectAdvanced(selectorFactory, connectOptions?)\n```\n\n----------------------------------------\n\nTITLE: Importing React Redux Types and Functions\nDESCRIPTION: Defines imports from 'redux', 'react-dom', 'react', and other dependencies used throughout the react-redux library.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/etc/react-redux.api.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Action } from 'redux'\nimport { AnyAction } from 'redux'\nimport { unstable_batchedUpdates as batch } from 'react-dom'\nimport { ClassAttributes } from 'react'\nimport { ComponentClass } from 'react'\nimport { ComponentType } from 'react'\nimport { Context } from 'react'\nimport { Dispatch } from 'redux'\nimport type { NonReactStatics } from 'hoist-non-react-statics'\nimport { default as React_2 } from 'react'\nimport { ReactNode } from 'react'\nimport { Store } from 'redux'\n```\n\n----------------------------------------\n\nTITLE: Building CommonJS Modules Only\nDESCRIPTION: Command to create only the CommonJS module-per-module build of React Redux.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:lib\n```\n\n----------------------------------------\n\nTITLE: Building UMD Modules\nDESCRIPTION: Commands to create UMD builds of React Redux. The first command creates a standard UMD build, while the second creates a minified version.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:umd\nyarn build:umd:min\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Navigation Links\nDESCRIPTION: Adding blog link to the site header navigation in siteConfig.js\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nheaderLinks: [\n    ...\n    { blog: true, label: 'Blog' },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Redux Stores with Custom Contexts\nDESCRIPTION: Demonstrates how to use multiple Redux stores by providing multiple custom context instances. Each store is isolated in its own context, allowing components to connect to specific stores.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/using-react-redux/accessing-store.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// a naive example\nconst ContextA = React.createContext();\nconst ContextB = React.createContext();\n\n// assuming reducerA and reducerB are proper reducer functions\nconst storeA = createStore(reducerA);\nconst storeB = createStore(reducerB);\n\n// supply the context instances to Provider\nfunction App() {\n  return (\n    <Provider store={storeA} context={ContextA} />\n      <Provider store={storeB} context={ContextB}>\n        <RootModule />\n      </Provider>\n    </Provider>\n  );\n}\n\n// fetch the corresponding store with connected components\n// you need to use the correct context\nconnect(mapStateA, null, null, { context: ContextA })(MyComponentA)\n\n// You may also pass the alternate context instance directly to the connected component instead\n<ConnectedMyComponentA context={ContextA} />\n\n// it is possible to chain connect()\n// in this case MyComponent will receive merged props from both stores\ncompose(\n  connect(mapStateA, null, null, { context: ContextA }),\n  connect(mapStateB, null, null, { context: ContextB })\n)(MyComponent);\n```\n\n----------------------------------------\n\nTITLE: Supplying Custom Context to Connected Components\nDESCRIPTION: Shows how to provide a custom context instance to connected components when using connect() or as a component prop.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/accessing-store.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// You can pass the context as an option to connect\nexport default connect(\n  mapState,\n  mapDispatch,\n  null,\n  { context: MyContext }\n)(MyComponent)\n\n// or, call connect as normal to start\nconst ConnectedComponent = connect(\n  mapState,\n  mapDispatch\n)(MyComponent)\n\n// Later, pass the custom context as a prop to the connected component\n<ConnectedComponent context={MyContext} />\n```\n\n----------------------------------------\n\nTITLE: Connect Implementation with Action Creators in React Redux\nDESCRIPTION: Shows different ways to use the connect function with action creators, including using a named object and inline object definition.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport {increment, decrement, reset} from \"./counterActions\";\n\nconst actionCreators = {\n  increment,\n  decrement,\n  reset\n}\n\nexport default connect(mapState, actionCreators)(Counter);\n\n// or\nexport default connect(\n  mapState,\n  { increment, decrement, reset }\n)(Counter);\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Watch Mode\nDESCRIPTION: Command to continuously watch files and run tests when changes are detected, useful during active development.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn test --watch\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Command-line instructions for starting the Next.js development server using npm, yarn, or pnpm. This allows developers to run the project locally for development and testing purposes.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/examples/publish-ci/rr-rsc-context/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Page Navigation\nDESCRIPTION: Configuration for adding custom pages to the site navigation header\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/README.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  headerLinks: [\n    ...\n    { page: 'my-new-custom-page', label: 'My New Custom Page' },\n    ...\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing ReactReduxContext Directly in React Components\nDESCRIPTION: Shows how to directly access the Redux store in components by using the ReactReduxContext. This is considered an advanced technique and not part of the public API.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/using-react-redux/accessing-store.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactReduxContext } from 'react-redux'\n\n// Somewhere inside of a <Provider>\nfunction MyConnectedComponent() {\n  // Access the store via the `useContext` hook\n  const { store } = useContext(ReactReduxContext)\n\n  // alternately, use the render props form of the context\n  /*\n  return (\n    <ReactReduxContext.Consumer>\n      {({ store }) => {\n        // do something useful with the store, like passing it to a child\n        // component where it can be used in lifecycle methods\n      }}\n    </ReactReduxContext.Consumer>\n  )\n  */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing mapStateToProps with Single Parameter\nDESCRIPTION: Examples showing how mapStateToProps behaves with a single mandatory parameter. In these cases, the function will not receive ownProps as an argument.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/using-react-redux/connect-extracting-data-with-mapStateToProps.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  console.log(state) // state\n  console.log(arguments[1]) // undefined\n}\nconst mapStateToProps = (state, ownProps = {}) => {\n  console.log(state) // state\n  console.log(ownProps) // undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Command to run the test suite for React Redux using Jest.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Starting Docusaurus Dev Server\nDESCRIPTION: Command to start the local development server\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Start the site\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Building React Redux Package\nDESCRIPTION: Command to build both CommonJS module-per-module and UMD builds of the React Redux package.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Defining batch() Function in React Redux\nDESCRIPTION: Signature of the batch() function in React Redux. It takes a single function parameter and batches React updates within that function into a single render pass.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/api/batch.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbatch(fn: Function)\n```\n\n----------------------------------------\n\nTITLE: Basic Connect Usage with Default Dispatch\nDESCRIPTION: Examples showing how to connect a component with default dispatch behavior when no mapDispatchToProps is provided.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/using-react-redux/connect-dispatching-actions-with-mapDispatchToProps.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconnect()(MyComponent)\n// which is equivalent with\nconnect(null, null)(MyComponent)\n\n// or\nconnect(mapStateToProps /** no second argument */)(MyComponent)\n```\n\n----------------------------------------\n\nTITLE: Creating Blog Post\nDESCRIPTION: Example of a blog post file with author metadata in Markdown format\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/README.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n---\nauthor: Frank Li\nauthorURL: https://twitter.com/foobarbaz\nauthorFBID: 503283835\ntitle: New Blog Post\n---\n\nLorem Ipsum...\n```\n\n----------------------------------------\n\nTITLE: Basic Batch Function Signature in JavaScript\nDESCRIPTION: The core batch function signature that accepts a callback function to batch multiple React updates\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/batch.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbatch((fn: () => void))\n```\n\n----------------------------------------\n\nTITLE: Connect with Specific State Selection\nDESCRIPTION: Demonstrates connecting a component with specific state selection using mapStateToProps.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/api/connect.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nexport default connect(mapStateToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Passing Router State in Nested React Router Components\nDESCRIPTION: This code shows how to pass down the router state in nested views when using React Router 0.13 with Redux. This ensures proper updates on route changes in child components.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/troubleshooting.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nrender() {\n  // Keep passing it down\n  return <RouteHandler routerState={this.props.routerState} />\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering with React Router 0.13 in Redux Root Component\nDESCRIPTION: Shows how to properly connect React Router 0.13 with Redux by passing router state to the Handler component. This solution fixes components not updating on route changes by ensuring router state propagation.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nRouter.run(routes, Router.HistoryLocation, (Handler, routerState) => {\n  // note \"routerState\" here\n  ReactDOM.render(\n    <Provider store={store}>\n      {/* note \"routerState\" here */}\n      <Handler routerState={routerState} />\n    </Provider>,\n    document.getElementById('root'),\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Running ESLint for Code Linting\nDESCRIPTION: Command to perform code linting using ESLint to ensure code quality and adherence to project standards.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Selector Factory - JavaScript\nDESCRIPTION: Example showing how to create a custom selector factory that injects todos for specific users and binds action creators. Demonstrates advanced usage with props injection and state selection.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/connect-advanced.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\nimport { bindActionCreators } from 'redux'\n\nfunction selectorFactory(dispatch) {\n  let ownProps = {}\n  let result = {}\n\n  const actions = bindActionCreators(actionCreators, dispatch)\n  const addTodo = (text) => actions.addTodo(ownProps.userId, text)\n\n  return (nextState, nextOwnProps) => {\n    const todos = nextState.todos[nextOwnProps.userId]\n    const nextResult = { ...nextOwnProps, todos, addTodo }\n    ownProps = nextOwnProps\n    if (!shallowEqual(result, nextResult)) result = nextResult\n    return result\n  }\n}\nexport default connectAdvanced(selectorFactory)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Installing React Redux with npm\nDESCRIPTION: Command to install React Redux using npm package manager. React Redux 7.1 requires React 16.8.3 or later.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/introduction/quick-start.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-redux\n```\n\n----------------------------------------\n\nTITLE: Creating Redux Selectors for Todo Data\nDESCRIPTION: Defines selector functions to extract and transform todo data from the Redux store. These selectors encapsulate the logic for accessing normalized state structure and converting it to derived data for components.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/introduction/basic-tutorial.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// redux/selectors.js\n\nexport const getTodosState = (store) => store.todos\n\nexport const getTodoList = (store) =>\n  getTodosState(store) ? getTodosState(store).allIds : []\n\nexport const getTodoById = (store, id) =>\n  getTodosState(store) ? { ...getTodosState(store).byIds[id], id } : {}\n\nexport const getTodos = (store) =>\n  getTodoList(store).map((id) => getTodoById(store, id))\n```\n\n----------------------------------------\n\nTITLE: Connecting TodoList Component with mapStateToProps\nDESCRIPTION: Demonstrates how to connect a TodoList component to the Redux store using mapStateToProps, transforming the normalized state structure (byIds and allIds) into a list of todo objects.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/introduction/basic-tutorial.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// components/TodoList.js\n\n// ...other imports\nimport { connect } from \"react-redux\";\n\nconst TodoList = // ... UI component implementation\n\nconst mapStateToProps = state => {\n  const { byIds, allIds } = state.todos || {};\n  const todos =\n    allIds && allIds.length\n      ? allIds.map(id => (byIds ? { ...byIds[id], id } : null))\n      : null;\n  return { todos };\n};\n\nexport default connect(mapStateToProps)(TodoList);\n```\n\n----------------------------------------\n\nTITLE: Installing React Redux with yarn\nDESCRIPTION: Command to install React Redux using yarn package manager. React Redux 7.x requires React 16.8.3 or later.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.0/introduction/quick-start.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-redux\n```\n\n----------------------------------------\n\nTITLE: Disabling Pure Rendering in Redux Connect HOC\nDESCRIPTION: Shows how to disable the default pure rendering behavior of connect() by passing the pure: false option. This is useful when components depend on React context or external global state that isn't passed through props.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/troubleshooting.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nexport default connect(mapStateToProps, null, null, {\n  pure: false,\n})(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Configuring connect() with pure: false for Context-Dependent Components\nDESCRIPTION: Shows how to disable the pure rendering optimization in React-Redux's connect() function when components depend on React context or other external state. This ensures components update properly but reduces performance.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-5.x/troubleshooting.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nexport default connect(mapStateToProps, null, null, {\n  pure: false,\n})(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Creating Typed Redux Hooks\nDESCRIPTION: Defines typed versions of useDispatch and useSelector hooks to provide proper TypeScript support throughout the application, avoiding repetitive type annotations and ensuring proper thunk middleware types.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/tutorials/typescript.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = useDispatch.withTypes<AppDispatch>()\nexport const useAppSelector = useSelector.withTypes<RootState>()\n```\n\n----------------------------------------\n\nTITLE: Passing Router State in Nested React Router Components\nDESCRIPTION: Demonstrates how to pass down router state to nested components when using React Router 0.13 with Redux. This ensures route changes propagate properly through the component hierarchy.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/troubleshooting.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nrender() {\n  // Keep passing it down\n  return <RouteHandler routerState={this.props.routerState} />\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting TodoList Component with Selectors\nDESCRIPTION: Refactors the TodoList component to use selectors for accessing Redux state. This approach simplifies the component and centralizes the data access logic in the selectors.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/introduction/basic-tutorial.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// components/TodoList.js\n\n// ...other imports\nimport { connect } from \"react-redux\";\nimport { getTodos } from \"../redux/selectors\";\n\nconst TodoList = // ... UI component implementation\n\nexport default connect(state => ({ todos: getTodos(state) }))(TodoList);\n```\n\n----------------------------------------\n\nTITLE: Using Component Props in Event Handlers with mapDispatchToProps\nDESCRIPTION: Examples showing how to bind component props to event handlers, both directly in the component and through the mapDispatchToProps function.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// binds on component re-rendering\n<button onClick={() => this.props.toggleTodo(this.props.todoId)} />\n\n// binds on `props` change\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  toggleTodo: () => dispatch(toggleTodo(ownProps.todoId)),\n})\n```\n\n----------------------------------------\n\nTITLE: Single Parameter mapStateToProps Examples in React-Redux\nDESCRIPTION: Demonstrates how mapStateToProps functions with a single parameter don't receive ownProps. Includes both regular function and arrow function syntax examples.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/api/connect.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapStateToProps(state) {\n  console.log(state) // state\n  console.log(arguments[1]) // undefined\n}\n\nconst mapStateToProps = (state, ownProps = {}) => {\n  console.log(state) // state\n  console.log(ownProps) // {}\n}\n```\n\n----------------------------------------\n\nTITLE: useSelector Hook Signature in JavaScript\nDESCRIPTION: Shows the function signature for the useSelector hook. This hook extracts data from the Redux store state using a selector function and an optional equality function for comparison.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/api/hooks.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst result: any = useSelector(selector: Function, equalityFn?: Function)\n```\n\n----------------------------------------\n\nTITLE: Using shorthand syntax for mapDispatchToProps in React-Redux\nDESCRIPTION: Example showing the shorthand object syntax for mapDispatchToProps to inject specific action creators (addTodo and deleteTodo).\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addTodo, deleteTodo } from './actionCreators'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nconst mapDispatchToProps = {\n  addTodo,\n  deleteTodo,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Direct Component Connection Pattern\nDESCRIPTION: Common pattern for immediately connecting a component without storing the wrapper function\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { login, logout } from './actionCreators'\n\nconst mapState = (state) => state.user\nconst mapDispatch = { login, logout }\n\n// call connect to generate the wrapper function, and immediately call\n// the wrapper function to generate the final wrapper component.\n\nexport default connect(mapState, mapDispatch)(Login)\n```\n\n----------------------------------------\n\nTITLE: Injecting state slice and all action creators in React-Redux\nDESCRIPTION: Example demonstrating how to inject both a specific slice of state and all imported action creators.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-6.x/api/connect.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as actionCreators from './actionCreators'\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos }\n}\n\nexport default connect(mapStateToProps, actionCreators)(TodoApp)\n```\n\n----------------------------------------\n\nTITLE: Installing React Redux with yarn\nDESCRIPTION: Command to install React Redux using yarn package manager. This is an alternative to npm installation.\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.1/introduction/quick-start.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-redux\n```\n\n----------------------------------------\n\nTITLE: Installing React Redux using yarn\nDESCRIPTION: Command to install React Redux package using yarn package manager\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/versioned_docs/version-7.2/introduction/quick-start.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-redux\n```\n\n----------------------------------------\n\nTITLE: Editing Markdown Documentation\nDESCRIPTION: Example of a Markdown documentation file with frontmatter metadata\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/README.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: page-needs-edit\ntitle: This Doc Needs To Be Edited\n---\n\nEdit me...\n```\n\n----------------------------------------\n\nTITLE: Creating New Documentation Page\nDESCRIPTION: Example of creating a new Markdown documentation file with required frontmatter\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/README.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: newly-created-doc\ntitle: This Doc Needs To Be Edited\n---\n\nMy new content here..\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Navigation\nDESCRIPTION: JavaScript configuration for adding new documentation to the sidebar navigation\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"docs\": {\n    \"Getting Started\": [\n      \"quick-start\",\n      \"newly-created-doc\" // new doc here\n    ],\n    ...\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Docusaurus Dependencies\nDESCRIPTION: Command to install website dependencies using Yarn package manager\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Install dependencies\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Docusaurus Project Structure\nDESCRIPTION: Example directory structure for a Docusaurus project showing key folders and files\nSOURCE: https://github.com/reduxjs/react-redux/blob/master/website/README.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nmy-docusaurus/\n  docs/\n    doc-1.md\n    doc-2.md\n    doc-3.md\n  website/\n    blog/\n      2016-3-11-oldest-post.md\n      2017-10-24-newest-post.md\n    core/\n    node_modules/\n    pages/\n    static/\n      css/\n      img/\n    package.json\n    sidebar.json\n    siteConfig.js\n```"
  }
]