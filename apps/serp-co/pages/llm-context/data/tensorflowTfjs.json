[
  {
    "owner": "tensorflow",
    "repo": "tfjs",
    "content": "TITLE: Reading CSV and Training Model with TensorFlow.js Data\nDESCRIPTION: This snippet demonstrates how to use TensorFlow.js Data to read a CSV file, prepare the dataset, define a model, and train it using the prepared data. It includes loading the CSV, mapping the data, batching, creating a sequential model, and fitting the model with the dataset.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-data/README.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as tf from '@tensorflow/tfjs';\n\nconst csvUrl = 'https://storage.googleapis.com/tfjs-examples/multivariate-linear-regression/data/boston-housing-train.csv';\n\nasync function run() {\n  // We want to predict the column \"medv\", which represents a median value of a\n  // home (in $1000s), so we mark it as a label.\n  const csvDataset = tf.data.csv(\n    csvUrl, {\n      columnConfigs: {\n        medv: {\n          isLabel: true\n        }\n      }\n    });\n  // Number of features is the number of column names minus one for the label\n  // column.\n  const numOfFeatures = (await csvDataset.columnNames()).length - 1;\n\n  // Prepare the Dataset for training.\n  const flattenedDataset =\n    csvDataset\n    .map(({xs, ys}) => {\n      // Convert xs(features) and ys(labels) from object form (keyed by column\n      // name) to array form.\n      return {xs: Object.values(xs), ys: Object.values(ys)};\n    })\n    .batch(10);\n\n  // Define the model.\n  const model = tf.sequential();\n  model.add(tf.layers.dense({\n    inputShape: [numOfFeatures],\n    units: 1\n  }));\n  model.compile({\n    optimizer: tf.train.sgd(0.000001),\n    loss: 'meanSquaredError'\n  });\n\n  // Fit the model using the prepared Dataset\n  return model.fitDataset(flattenedDataset, {\n    epochs: 10,\n    callbacks: {\n      onEpochEnd: async (epoch, logs) => {\n        console.log(epoch, logs.loss);\n      }\n    }\n  });\n}\n\nrun().then(() => console.log('Done'));\n```\n\n----------------------------------------\n\nTITLE: Importing Complete TensorFlow.js Package\nDESCRIPTION: Example showing how to import both Core and Layers APIs using the complete @tensorflow/tfjs package. This gives access to both low-level operations like matMul() and softmax(), as well as higher-level Layers API functionality.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-core/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as tf from '@tensorflow/tfjs';\n// You have the Core API: tf.matMul(), tf.softmax(), ...\n// You also have Layers API: tf.model(), tf.layers.dense(), ...\n```\n\n----------------------------------------\n\nTITLE: Importing WebGPU Backend via NPM in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the TensorFlow.js WebGPU backend using NPM. It shows the process of importing TensorFlow.js, adding the WebGPU backend to the global registry, and setting WebGPU as the active backend.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-webgpu/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import @tensorflow/tfjs or @tensorflow/tfjs-core\nimport * as tf from '@tensorflow/tfjs';\n// Add the WebGPU backend to the global backend registry.\nimport '@tensorflow/tfjs-backend-webgpu';\n// Set the backend to WebGPU and wait for the module to be ready.\ntf.setBackend('webgpu').then(() => main());\n```\n\n----------------------------------------\n\nTITLE: Converting tf.keras SavedModel using TensorFlow.js Converter\nDESCRIPTION: Example command to convert a tf.keras SavedModel to a TensorFlow.js format using the tensorflowjs_converter tool.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntensorflowjs_converter \\\n    --input_format=keras_saved_model \\\n    /tmp/my_tf_keras_saved_model/1542211770 \\\n    /tmp/my_tfjs_model\n```\n\n----------------------------------------\n\nTITLE: Loading and Running TensorFlow.js Model in Browser\nDESCRIPTION: Example of loading a converted TensorFlow.js model in the browser using tf.loadGraphModel() or tf.loadLayersModel(). It demonstrates importing TensorFlow.js, loading the model, and making a prediction on an image element.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as tf from '@tensorflow/tfjs';\n\nconst MODEL_URL = 'https://.../mobilenet/model.json';\n\n// For Keras use tf.loadLayersModel().\nconst model = await tf.loadGraphModel(MODEL_URL);\nconst cat = document.getElementById('cat');\nmodel.predict(tf.browser.fromPixels(cat));\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Regression with TensorFlow.js via NPM Import\nDESCRIPTION: This JavaScript snippet demonstrates how to use TensorFlow.js via NPM import to create, train, and make predictions with a simple linear regression model. It shows model definition, training with synthetic data, and inference with the trained model.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as tf from '@tensorflow/tfjs';\n\n// Define a model for linear regression.\nconst model = tf.sequential();\nmodel.add(tf.layers.dense({units: 1, inputShape: [1]}));\n\n// Prepare the model for training: Specify the loss and the optimizer.\nmodel.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n\n// Generate some synthetic data for training.\nconst xs = tf.tensor2d([1, 2, 3, 4], [4, 1]);\nconst ys = tf.tensor2d([1, 3, 5, 7], [4, 1]);\n\n// Train the model using the data.\nmodel.fit(xs, ys).then(() => {\n  // Use the model to do inference on a data point the model hasn't seen before:\n  model.predict(tf.tensor2d([5], [1, 1])).print();\n});\n```\n\n----------------------------------------\n\nTITLE: Running Inference with TFLite Model in JavaScript\nDESCRIPTION: Code demonstrating how to prepare input tensors from an image, run inference using a TFLite model, and access the output data.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-tflite/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Prepare input tensors.\nconst img = tf.browser.fromPixels(document.querySelector('img'));\nconst input = tf.sub(tf.div(tf.expandDims(img), 127.5), 1);\n\n// Run inference and get output tensors.\nlet outputTensor = tfliteModel.predict(input) as tf.Tensor;\nconsole.log(outputTensor.dataSync());\n```\n\n----------------------------------------\n\nTITLE: Loading Pre-trained Keras Model in TensorFlow.js\nDESCRIPTION: Demonstrates how to load a pre-trained Keras model that has been converted to TensorFlow.js format. The model can then be used for inference, evaluation, or further training in the browser.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-layers/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as tf from '@tensorflow/tfjs';\n\nconst model = await tf.loadLayersModel('http://foo.bar/tfjs_artifacts/model.json');\n// Now the model is ready for inference, evaluation or re-training.\n```\n\n----------------------------------------\n\nTITLE: Running MobileNet Model with WebAssembly Backend in JavaScript\nDESCRIPTION: This snippet demonstrates how to run the MobileNet model using the WebAssembly backend. It loads an image, resizes it, loads the MobileNet model, and makes a prediction.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  let img = tf.browser.fromPixels(document.getElementById('img'))\n      .resizeBilinear([224, 224])\n      .expandDims(0)\n      .toFloat();\n\n  let model = await tf.loadGraphModel(\n    'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/2',\n    {fromTFHub: true});\n  const y = model.predict(img);\n\n  y.print();\n}\nmain();\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Regression with TensorFlow.js via HTML Script Tag\nDESCRIPTION: This HTML snippet demonstrates how to include TensorFlow.js via a CDN script tag and implement a simple linear regression model directly in a webpage. It shows model definition, compilation, synthetic data generation, model training, and prediction.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n  <head>\n    <!-- Load TensorFlow.js -->\n    <script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs/dist/tf.min.js\"> </script>\n\n\n    <!-- Place your code in the script tag below. You can also use an external .js file -->\n    <script>\n      // Notice there is no 'import' statement. 'tf' is available on the index-page\n      // because of the script tag above.\n\n      // Define a model for linear regression.\n      const model = tf.sequential();\n      model.add(tf.layers.dense({units: 1, inputShape: [1]}));\n\n      // Prepare the model for training: Specify the loss and the optimizer.\n      model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n\n      // Generate some synthetic data for training.\n      const xs = tf.tensor2d([1, 2, 3, 4], [4, 1]);\n      const ys = tf.tensor2d([1, 3, 5, 7], [4, 1]);\n\n      // Train the model using the data.\n      model.fit(xs, ys).then(() => {\n        // Use the model to do inference on a data point the model hasn't seen before:\n        // Open the browser devtools to see the output\n        model.predict(tf.tensor2d([5], [1, 1])).print();\n      });\n    </script>\n  </head>\n\n  <body>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Converting TensorFlow SavedModel using TensorFlow.js Converter\nDESCRIPTION: Example command to convert a TensorFlow SavedModel to a TensorFlow.js graph model format using the tensorflowjs_converter tool.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntensorflowjs_converter \\\n    --input_format=tf_saved_model \\\n    --output_format=tfjs_graph_model \\\n    --signature_name=serving_default \\\n    --saved_model_tags=serve \\\n    /mobilenet/saved_model \\\n    /mobilenet/web_model\n```\n\n----------------------------------------\n\nTITLE: Loading an AutoML Image Classification Model\nDESCRIPTION: JavaScript code to load an AutoML image classification model using the provided API. The model URL should point to the model.json file.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-automl/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as automl from '@tensorflow/tfjs-automl';\nconst modelUrl = 'model.json'; // URL to the model.json file.\nconst model = await automl.loadImageClassification(modelUrl);\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Forward Pass with TensorFlow.js\nDESCRIPTION: Shows how to manually implement the forward pass of a neural network model using the loaded weight map and TensorFlow.js operations like matrix multiplication and addition.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst input = tf.tensor(...);\ntf.matMul(weightMap['fc1/weights'], input).add(weightMap['fc1/bias']);\n```\n\n----------------------------------------\n\nTITLE: Creating and Training Linear Regression Model with TensorFlow.js\nDESCRIPTION: Demonstrates how to build, train and execute a simple linear regression model using TensorFlow.js Layers API. The example shows creating a sequential model with one dense layer, compiling it with mean squared error loss and SGD optimizer, and training it on synthetic data.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-layers/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as tf from '@tensorflow/tfjs';\n\n// A sequential model is a container which you can add layers to.\nconst model = tf.sequential();\n\n// Add a dense layer with 1 output unit.\nmodel.add(tf.layers.dense({units: 1, inputShape: [1]}));\n\n// Specify the loss type and optimizer for training.\nmodel.compile({loss: 'meanSquaredError', optimizer: 'SGD'});\n\n// Generate some synthetic data for training.\nconst xs = tf.tensor2d([[1], [2], [3], [4]], [4, 1]);\nconst ys = tf.tensor2d([[1], [3], [5], [7]], [4, 1]);\n\n// Train the model.\nawait model.fit(xs, ys, {epochs: 500});\n\n// After the training, perform inference.\nconst output = model.predict(tf.tensor2d([[5]], [1, 1]));\noutput.print();\n```\n\n----------------------------------------\n\nTITLE: Importing WebGPU Backend via Script Tag in HTML\nDESCRIPTION: This snippet shows how to include the TensorFlow.js WebGPU backend using script tags in an HTML file. It loads the main TensorFlow.js library and the WebGPU backend from CDN, then sets WebGPU as the active backend.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-webgpu/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Import @tensorflow/tfjs or @tensorflow/tfjs-core -->\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs/dist/tf.min.js\"> </script>\n\n<!-- Add the WebGPU backend to the global backend registry -->\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-webgpu/dist/tf-backend-webgpu.js\"></script>\n<script>\n// Set the backend to WebGPU and wait for the module to be ready\ntf.setBackend('webgpu').then(() => main());\n</script>\n```\n\n----------------------------------------\n\nTITLE: Making a Prediction with an Object Detection Model\nDESCRIPTION: JavaScript code to detect objects in an image using the loaded object detection model. The function accepts options to control detection sensitivity and output.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-automl/README.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst img = document.getElementById('img');\nconst options = {score: 0.5, iou: 0.5, topk: 20};\nconst predictions = await model.detect(img, options);\n```\n\n----------------------------------------\n\nTITLE: Loading a TFLite Model in JavaScript\nDESCRIPTION: Code showing how to load a TFLite model from a URL using the loadTFLiteModel async function.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-tflite/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst tfliteModel = await tflite.loadTFLiteModel('url/to/your/model.tflite');\n```\n\n----------------------------------------\n\nTITLE: Loading TensorFlow.js Model from File System in Node.js\nDESCRIPTION: Demonstrates how to load a TensorFlow.js model from the local file system in a Node.js environment using the tfjs-node package and the loadGraphModel function with a file URI path.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Load the tfjs-node binding\nimport * as tf from '@tensorflow/tfjs-node';\n\nconst MODEL_PATH = 'file:///tmp/mobilenet/model.json';\nconst model = await tf.loadGraphModel(MODEL_PATH);\n```\n\n----------------------------------------\n\nTITLE: Setting Threads Count for WebAssembly Backend via NPM in JavaScript\nDESCRIPTION: This snippet demonstrates how to set and get the threads count for the WebAssembly backend using NPM imports. It sets the count before initializing the backend and logs the actual count after initialization.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as tf from '@tensorflow/tfjs';\nimport {getThreadsCount, setThreadsCount} from '@tensorflow/tfjs-backend-wasm';\n\nsetThreadsCount(2);\ntf.setBackend('wasm').then(() => {\n  console.log(getThreadsCount());\n});\n```\n\n----------------------------------------\n\nTITLE: Quantizing MobileNet Model with Float16 in TensorFlow.js Converter\nDESCRIPTION: Command to convert a TensorFlow Hub MobileNet model to TensorFlow.js format with float16 quantization, which reduces model size while preserving better accuracy compared to integer quantization.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ntensorflowjs_converter \\\n    --quantize_float16 \\\n    --input_format=tf_hub \\\n    'https://tfhub.dev/google/imagenet/mobilenet_v1_100_224/classification/1' \\\n    /mobilenet/web_model\n```\n\n----------------------------------------\n\nTITLE: Enabling Profiling for TFLite Model in JavaScript\nDESCRIPTION: Code demonstrating how to enable profiling when loading a TFLite model, which allows collecting performance metrics during inference.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-tflite/README.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst tfliteModel = await tflite.loadTFLiteModel(\n    'path/to/your/my_model.tflite',\n    {enableProfiling: true});\n```\n\n----------------------------------------\n\nTITLE: Installing CPU TensorFlow.js for Node.js using npm or yarn\nDESCRIPTION: Commands to install the CPU version of TensorFlow.js for Node.js using either npm or yarn package managers.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @tensorflow/tfjs-node\n(or)\nyarn add @tensorflow/tfjs-node\n```\n\n----------------------------------------\n\nTITLE: Setting Threads Count for WebAssembly Backend via Script Tag in JavaScript\nDESCRIPTION: This snippet shows how to set and get the threads count for the WebAssembly backend when imported via script tag. It sets the count before initializing the backend and logs the actual count after initialization.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntf.wasm.setThreadsCount(2);\ntf.setBackend('wasm').then(() => {\n  console.log(tf.wasm.getThreadsCount());\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Flax/JAX Model with Dynamic Shapes\nDESCRIPTION: Example of converting a Flax Dense layer to TensorFlow.js format with dynamic shapes. It demonstrates the use of the polymorphic_shapes argument to specify dynamic dimensions in the input.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\njax_conversion.convert_jax(\n  apply_fn=module.apply,\n  params=params,\n  input_signatures=[((None, 4), np.float32)],\n  polymorphic_shapes=[\"(b, 4)\"],\n  model_dir=tfjs_model_dir)\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for TensorFlow.js Resource Loading in React Native\nDESCRIPTION: Configuration for Metro bundler to support loading .bin files used by TensorFlow.js models with bundleResourceIO. This adds the 'bin' extension to the asset extensions list that Metro processes.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-react-native/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig } = require('metro-config');\nmodule.exports = (async () => {\n  const defaultConfig = await getDefaultConfig();\n  const { assetExts } = defaultConfig.resolver;\n  return {\n    resolver: {\n      // Add bin to assetExts\n      assetExts: [...assetExts, 'bin'],\n    }\n  };\n})();\n```\n\n----------------------------------------\n\nTITLE: Initializing TensorFlow.js in React Native Component\nDESCRIPTION: React component implementation showing how to properly initialize TensorFlow.js in a React Native application. The code waits for TensorFlow to be ready before allowing the app to use TensorFlow functionality.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-react-native/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as tf from '@tensorflow/tfjs';\nimport '@tensorflow/tfjs-react-native';\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isTfReady: false,\n    };\n  }\n\n  async componentDidMount() {\n    // Wait for tf to be ready.\n    await tf.ready();\n    // Signal to the app that tensorflow.js can now be used.\n    this.setState({\n      isTfReady: true,\n    });\n  }\n\n\n  render() {\n    //\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading an Object Detection Model with Custom IO Handler\nDESCRIPTION: Advanced approach to load an AutoML object detection model using any IO handler, useful for non-browser platforms where HTTP loading may not be available.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-automl/README.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as automl from '@tensorflow/tfjs-automl';\nimport * as tf from '@tensorflow/tfjs';\n// You can load the graph model using any IO handler\nconst graphModel = await tf.loadGraphModel(string|io.IOHandler); // a url or ioHandler instance\n// You can load the dictionary using any api available to the platform\nconst dict = readDictionary(\"path/to/dict.txt\");\nconst model = new automl.ObjectDetectionModel(graphModel, dict);\n```\n\n----------------------------------------\n\nTITLE: Importing WebAssembly Backend via Script Tag in HTML\nDESCRIPTION: This snippet shows how to import the WebAssembly backend using script tags in HTML, set it as the active backend, and wait for it to be ready before running the main function.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Import @tensorflow/tfjs or @tensorflow/tfjs-core -->\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs/dist/tf.min.js\"> </script>\n\n<!-- Adds the WASM backend to the global backend registry -->\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm/dist/tf-backend-wasm.js\"></script>\n<script>\ntf.setBackend('wasm').then(() => main());\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting WASM Modules Location for TFLite in JavaScript\nDESCRIPTION: Optional code to set a custom path for loading WASM modules used by the TFLite package, useful when serving the modules from a different location.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-tflite/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntflite.setWasmPath('https://your-server/path');\n```\n\n----------------------------------------\n\nTITLE: Loading TensorFlow.js Model with Credentials\nDESCRIPTION: Example of loading a TensorFlow.js model with credentials for accessing model files. It demonstrates the use of the RequestOption parameter to include credentials in the request.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst model = await loadGraphModel(MODEL_URL,\n    {credentials: 'include'});\n```\n\n----------------------------------------\n\nTITLE: Converting Flax/JAX Model to TensorFlow.js Format in Python\nDESCRIPTION: Example of converting a Flax Dense layer to TensorFlow.js format using the jax_conversion.convert_jax() function. It demonstrates initializing a Flax module, creating inputs and parameters, and calling the conversion function with appropriate arguments.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom flax import linen as nn\nfrom jax import random\nimport jax.numpy as jnp\nfrom tensorflowjs.converters import jax_conversion\n\nmodule = nn.Dense(features=4)\ninputs = jnp.ones((3, 4))\nparams = module.init(random.PRNKey(0), inputs)['params']\n\njax_conversion.convert_jax(\n  apply_fn=module.apply,\n  params=params,\n  input_signatures=[((3, 4), np.float32)],\n  model_dir=tfjs_model_dir)\n```\n\n----------------------------------------\n\nTITLE: Importing TensorFlow.js CPU Backend via NPM\nDESCRIPTION: Shows how to import the TensorFlow.js core and CPU backend packages using NPM module imports. This method is suitable for Node.js and bundled web applications.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-cpu/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import @tensorflow/tfjs-core\nimport * as tf from '@tensorflow/tfjs-core';\n// Adds the CPU backend to the global backend registry.\nimport '@tensorflow/tfjs-backend-cpu';\n```\n\n----------------------------------------\n\nTITLE: Converting JAX Model with Weight Quantization\nDESCRIPTION: Example of converting a JAX model to TensorFlow.js format with weight quantization. It demonstrates the use of the quantization_dtype_map option to specify which weights should be quantized.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\njax_conversion.convert_jax(\n  apply_fn=module.apply,\n  params=params,\n  input_signatures=[((3, 4), np.float32)],\n  model_dir=tfjs_model_dir,\n  quantization_dtype_map={'float16': '*'})\n```\n\n----------------------------------------\n\nTITLE: Saving Keras Model for TensorFlow.js\nDESCRIPTION: Shows how to save a Keras model in Python using the tensorflowjs converter to make it compatible with TensorFlow.js. This enables moving models trained in Python to the browser environment.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-layers/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport tensorflowjs as tfjs\n\n# ... Create and train your Keras model.\n\n# Save your Keras model in TensorFlow.js format.\ntfjs.converters.save_keras_model(model, '/path/to/tfjs_artifacts/')\n\n# Then use your favorite web server to serve the directory at a URL, say\n#   http://foo.bar/tfjs_artifacts/model.json\n```\n\n----------------------------------------\n\nTITLE: Importing WebAssembly Backend via NPM in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the WebAssembly backend using NPM, set it as the active backend, and wait for it to be ready before running the main function.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import @tensorflow/tfjs or @tensorflow/tfjs-core\nimport * as tf from '@tensorflow/tfjs';\n// Adds the WASM backend to the global backend registry.\nimport '@tensorflow/tfjs-backend-wasm';\n// Set the backend to WASM and wait for the module to be ready.\ntf.setBackend('wasm').then(() => main());\n```\n\n----------------------------------------\n\nTITLE: Running inference with a TFDF model\nDESCRIPTION: Example of preparing input tensors, running inference with a loaded TFDF model, and accessing the output data.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-tfdf/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Prepare input tensors.\nconst input = tf.tensor1d(['test', 'strings']);\n\n// Run inference and get output tensors.\nconst outputTensor = await tfdfModel.executeAsync(input);\nconsole.log(outputTensor.dataSync());\n```\n\n----------------------------------------\n\nTITLE: Importing TensorFlow.js WebGL Backend via NPM\nDESCRIPTION: Demonstrates how to import the TensorFlow.js core library and add the WebGL backend to the global backend registry using NPM. This enables GPU acceleration for TensorFlow.js operations.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-webgl/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import @tensorflow/tfjs-core\nimport * as tf from '@tensorflow/tfjs-core';\n// Adds the WebGL backend to the global backend registry.\nimport '@tensorflow/tfjs-backend-webgl';\n```\n\n----------------------------------------\n\nTITLE: Importing TensorFlow.js in Node.js applications\nDESCRIPTION: JavaScript code to import the TensorFlow.js Node.js binding in a Node.js application, with options for both CPU and GPU backends.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/README.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Load the binding\nconst tf = require('@tensorflow/tfjs-node');\n\n// Or if running with GPU:\nconst tf = require('@tensorflow/tfjs-node-gpu');\n```\n\n----------------------------------------\n\nTITLE: Accessing WebGL Texture Data with TensorFlow.js\nDESCRIPTION: Demonstrates how to access tensor data as WebGL textures using dataToGPU() API. Shows texture binding, processing, and cleanup steps while keeping data on the GPU. Includes handling of texture shapes and memory management.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/docs/OPTIMIZATION_PURE_GPU_PIPELINE.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Getting the texture that holds the data on GPU.\n// data has below fields:\n// {texture, texShape, tensorRef}\n// texture: A WebGLTexture.\n// texShape: the [height, width] of the texture.\n// tensorRef: the tensor associated with the texture.\n//\n// Here the tensor has a shape of [1, videoHeight, videoWidth, 4],\n// which represents an image. In this case, we can specify the texture\n// to use the image's shape as its shape.\nconst data =\n      tensor.dataToGPU({customTexShape: [videoHeight, videoWidth]});\n\n// Once we have the texture, we can bind it and pass it to the downstream\n// webgl processing steps to use the texture.\ngl.bindTexture(gl.TEXTURE_2D, data.texture);\n\n// Some webgl processing steps.\n\n// Once all the processing is done, we can render the result on the canvas.\ngl.blitFramebuffer(0, 0, videoWidth, videoHeight, 0, videoHeight, videoWidth, 0, gl.COLOR_BUFFER_BIT, gl.LINEAR);\n\n// Remember to dispose the texture after use, otherwise, there will be\n// memory leak.\ndata.tensorRef.dispose();\n```\n\n----------------------------------------\n\nTITLE: Loading Model Weights Directly in TensorFlow.js\nDESCRIPTION: Demonstrates how to directly load model weights from a remote source as a map from weight names to tensors, which allows manual implementation of the forward pass using the ops API.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as tf from '@tensorflow/tfjs';\n\nconst modelUrl = \"https://example.org/model/model.json\";\n\nconst response = await fetch(modelUrl);\nthis.weightManifest = (await response.json())['weightsManifest'];\nconst weightMap = await tf.io.loadWeights(\n        this.weightManifest, \"https://example.org/model\");\n```\n\n----------------------------------------\n\nTITLE: Converting TensorFlow Frozen Model using TensorFlow.js Converter\nDESCRIPTION: Example command to convert a deprecated TensorFlow Frozen Model to a web-friendly format using the tensorflowjs_converter tool.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntensorflowjs_converter \\\n    --input_format=tf_frozen_model \\\n    --output_node_names='MobilenetV1/Predictions/Reshape_1' \\\n    /mobilenet/frozen_model.pb \\\n    /mobilenet/web_model\n```\n\n----------------------------------------\n\nTITLE: Importing TensorFlow.js Core API Only\nDESCRIPTION: Example showing how to import only the Core API for reduced bundle size. Note that this requires separate backend import (CPU, WebGL, or WASM) and excludes the Layers API functionality.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-core/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as tfc from '@tensorflow/tfjs-core';\n// You have the Core API: tfc.matMul(), tfc.softmax(), ...\n// No Layers API.\n```\n\n----------------------------------------\n\nTITLE: Loading an AutoML Object Detection Model\nDESCRIPTION: JavaScript code to load an AutoML object detection model using the provided API. The model URL should point to the model.json file.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-automl/README.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as automl from '@tensorflow/tfjs-automl';\nconst modelUrl = 'model.json'; // URL to the model.json file.\nconst model = await automl.loadObjectDetection(modelUrl);\n```\n\n----------------------------------------\n\nTITLE: Including TensorFlow.js CPU Backend via Script Tags\nDESCRIPTION: Demonstrates how to include TensorFlow.js core and CPU backend using CDN script tags in HTML. This method is suitable for direct browser usage without a build system.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-cpu/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Import @tensorflow/tfjs-core -->\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-core\"></script>\n\n<!-- Adds the CPU backend to the global backend registry -->\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-cpu\"></script>\n```\n\n----------------------------------------\n\nTITLE: Selective Weight Quantization with Pattern Matching in TensorFlow.js\nDESCRIPTION: Shows how to selectively quantize specific weights in a model using wildcard pattern matching, which allows for targeted size reduction while maximizing performance by preserving precision in critical layers.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ntensorflowjs_converter \\\n    --quantize_float16=\"conv/*/weights\"\n```\n\n----------------------------------------\n\nTITLE: Importing TFDF packages via NPM in JavaScript\nDESCRIPTION: Example of importing the required TensorFlow.js packages through NPM, including the core library, CPU backend, converter, and TFDF package.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-tfdf/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import @tensorflow/tfjs-core\nimport * as tf from '@tensorflow/tfjs-core';\n// Adds the CPU backend.\nimport '@tensorflow/tfjs-backend-cpu';\n// Import @tensorflow/tfjs-converter\nimport * as tf from '@tensorflow/tfjs-converter';\n// Import @tensorflow/tfjs-tfdf.\nimport * as tfdf from '@tensorflow/tfjs-tfdf';\n```\n\n----------------------------------------\n\nTITLE: Making a Prediction with an Image Classification Model\nDESCRIPTION: JavaScript code to classify an image using the loaded image classification model. The function accepts various image formats and supports optional settings like centerCrop.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-automl/README.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst img = document.getElementById('img');\nconst options = {centerCrop: true};\nconst predictions = await model.classify(img, options);\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Expo Web with TensorFlow.js\nDESCRIPTION: Webpack configuration for Expo web applications to properly transpile TensorFlow.js packages. This ensures that all @tensorflow modules are included in the transpilation process to avoid loader errors.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-react-native/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst createExpoWebpackConfigAsync = require('@expo/webpack-config');\n\nmodule.exports = async function(env, argv) {\n  const config = await createExpoWebpackConfigAsync(\n      {\n        ...env,\n        babel: {\n          dangerouslyAddModulePathsToTranspile: [\n            // Ensure that all packages starting with @tensorflow are\n            // transpiled.\n            '@tensorflow',\n          ],\n        },\n      },\n      argv);\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Loading an Image Classification Model with Custom IO Handler\nDESCRIPTION: Advanced approach to load an AutoML image classification model using any IO handler, useful for non-browser platforms where HTTP loading may not be available.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-automl/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as automl from '@tensorflow/tfjs-automl';\nimport * as tf from '@tensorflow/tfjs';\n// You can load the graph model using any IO handler\nconst graphModel = await tf.loadGraphModel(string|io.IOHandler); // a url or ioHandler instance\n// You can load the dictionary using any api available to the platform\nconst dict = loadDictionary(\"path/to/dict.txt\");\nconst model = new automl.ImageClassificationModel(graphModel, dict);\n```\n\n----------------------------------------\n\nTITLE: Importing TensorFlow.js WebGL Backend via Script Tags (ES2017)\nDESCRIPTION: Demonstrates how to include the ES2017 versions of TensorFlow.js core and WebGL backend using script tags. This provides modern JavaScript features while maintaining browser compatibility.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-webgl/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Import @tensorflow/tfjs-core -->\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-core@2.0.0-rc.4/dist/tf-core.es2017.js\"></script>\n\n<!-- Adds the WebGL backend to the global backend registry -->\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-webgl@2.0.0-rc.4/dist/tf-backend-webgl.es2017.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting custom WASM module location for TFDF\nDESCRIPTION: Code snippet showing how to customize the location where TFDF looks for WASM module files, which is useful when serving files from a custom server path.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-tfdf/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// `base` is the URL to the main javascript file's directory.\n// To return the default URL of the file use `${base}${path}`.\ntfdf.setLocateFile((path, base) => {\n  return `https://your-server/.../${path}`;\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing WebGPU Buffer Data with TensorFlow.js\nDESCRIPTION: Shows how to access tensor data as WebGPU buffers using dataToGPU() API. Includes buffer binding, creation of bind groups, and proper resource cleanup for WebGPU pipeline implementation.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/docs/OPTIMIZATION_PURE_GPU_PIPELINE.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Getting the buffer that holds the data on GPU.\n// data has below fields:\n// {buffer, bufSize, tensorRef}\n// buffer: A GPUBuffer.\n// bufSize: the size of the buffer.\n// tensorRef: the tensor associated with the buffer.\n//\n// Unlike webgl backend, There is no parameter for dataToGPU API on the webgpu\n// backend, and the size of returned buffer is the same as the tensor size.\nconst data = tensor.dataToGPU();\n\n// Once we have the buffer, we can bind it and pass it to the downstream\n// webgpu processing steps to use the buffer.\nconst uniformBindGroup = device.createBindGroup({\n  layout: pipeline.getBindGroupLayout(0),\n  entries: [\n    {\n      binding: 1,\n      resource: {\n        buffer: data.buffer,\n      },\n    },\n    ...\n  ],\n});\n\n// Some webgpu processing steps.\n\n// Defines the mapping between resources of all GPUBindGroup objects\npassEncoder.setBindGroup(0, uniformBindGroup);\n\n// Some webgpu processing steps.\n\n// Remember to dispose the buffer after use, otherwise, there will be\n// memory leak.\ndata.tensorRef.dispose();\n```\n\n----------------------------------------\n\nTITLE: Benchmark Pre-configuration JSON Format\nDESCRIPTION: JSON schema for defining benchmark configurations including models to test, number of runs, backends, and browser specifications for both desktop and mobile devices.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/benchmarks/browserstack-benchmark/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"benchmark\": {\n    \"model\": [\"model_name\"], //List of one or more custom or official models to be benchmarked\n    \"numRuns\": positive_integer,\n    \"backend\": [\"backend_name\"] //List of one or more backends to be benchmarked\n  },\n  \"browsers\": {\n    \"local\": {},  // Benchmark on your local device\n    \"unique_identifier_laptop_or_desktop\": {\n      \"base\": \"BrowserStack\",\n      \"browser\": \"browser_name\",\n      \"browser_version\": \"browser_version\",\n      \"os\": \"os_name\",\n      \"os_version\": \"os_version\",\n      \"device\": null\n    },\n    \"unique_identifier_mobile_device\": {\n      \"base\": \"BrowserStack\",\n      \"browser\": \"iphone_or_android\",\n      \"browser_version\": null,\n      \"os\": \"os_name\",\n      \"os_version\": \"os_version\",\n      \"device\": \"device_name\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Legacy TensorFlow.js Models from .pb to JSON Format\nDESCRIPTION: Instructions for using the built-in migration tool to convert models generated by previous versions of TensorFlow.js (0.15.x) from the legacy .pb format to the newer JSON format.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:tensorflow/tfjs-converter.git\ncd tfjs-converter\nyarn\nyarn ts-node tools/pb2json_converter.ts pb_model_directory/ json_model_directory/\n```\n\n----------------------------------------\n\nTITLE: Converting Keras HDF5 Model using TensorFlow.js Converter\nDESCRIPTION: Example command to convert a Keras HDF5 model to a TensorFlow.js format using the tensorflowjs_converter tool.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntensorflowjs_converter \\\n    --input_format=keras \\\n    /tmp/my_keras_model.h5 \\\n    /tmp/my_tfjs_model\n```\n\n----------------------------------------\n\nTITLE: Setting WASM Paths for TensorFlow.js\nDESCRIPTION: Code to configure the TensorFlow.js library with the correct paths to the WASM binaries. This imports the WASM files from node_modules and uses setWasmPaths to tell the library where to find the binaries at runtime.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/starter/webpack/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {setWasmPaths} from '@tensorflow/tfjs-backend-wasm';\n\nimport wasmSimdPath from './node_modules/@tensorflow/tfjs-backend-wasm/dist/tfjs-backend-wasm-simd.wasm';\nimport wasmSimdThreadedPath from './node_modules/@tensorflow/tfjs-backend-wasm/dist/tfjs-backend-wasm-threaded-simd.wasm';\nimport wasmPath from './node_modules/@tensorflow/tfjs-backend-wasm/dist/tfjs-backend-wasm.wasm';\n\nsetWasmPaths({\n  'tfjs-backend-wasm.wasm': wasmPath,\n  'tfjs-backend-wasm-simd.wasm': wasmSimdPath,\n  'tfjs-backend-wasm-threaded-simd.wasm': wasmSimdThreadedPath\n});\n```\n\n----------------------------------------\n\nTITLE: Running TensorFlow.js Converter via Bazel\nDESCRIPTION: Command to run the TensorFlow.js converter directly through its Bazel target from within the tfjs repository. This approach is useful for development or when working with the source code.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/python/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn bazel run //tfjs-converter/python/tensorflowjs/converters:converter -- --help\n```\n\n----------------------------------------\n\nTITLE: Storing and accessing TensorFlow.js models in IndexedDB\nDESCRIPTION: JavaScript code to create, save, and reference a TensorFlow.js sequential model in the browser's IndexedDB. This demonstrates creating a simple dense layer model and storing it for benchmarking.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/benchmarks/local-benchmark/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst indexDBModel = tf.sequential(\n     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\nconst saveResults = await indexDBModel.save('indexeddb://my-model-1');\n```\n\n----------------------------------------\n\nTITLE: Importing TFLite Packages via NPM in JavaScript\nDESCRIPTION: Code snippet showing how to import the required TensorFlow.js packages via NPM including the CPU backend, core package, and TFLite package.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-tflite/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Adds the CPU backend.\nimport '@tensorflow/tfjs-backend-cpu';\n// Import @tensorflow/tfjs-core\nimport * as tf from '@tensorflow/tfjs-core';\n// Import @tensorflow/tfjs-tflite.\nimport * as tflite from '@tensorflow/tfjs-tflite';\n```\n\n----------------------------------------\n\nTITLE: Creating and rendering a barchart with tfjs-vis\nDESCRIPTION: Example of using tfjs-vis to create a barchart visualization. This shows how to get a visualization surface from the visor and render a barchart with sample data.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-vis/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n  { index: 0, value: 50 },\n  { index: 1, value: 100 },\n  { index: 2, value: 150 },\n];\n\n// Get a surface\nconst surface = tfvis.visor().surface({ name: 'Barchart', tab: 'Charts' });\n\n// Render a barchart on that surface\ntfvis.render.barchart(surface, data, {});\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Files Copy for WASM in package.json\nDESCRIPTION: Package.json configuration snippet that enables copying of WASM files from the tfjs-backend-wasm package to the Parcel output directory. Uses parcel-plugin-static-files-copy to handle static file copying during build.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/starter/parcel/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"staticFiles\": {\n    \"staticPath\": \"./node_modules/@tensorflow/tfjs-backend-wasm/dist\",\n    \"excludeGlob\": [\"**/!(*.wasm)\"]\n  }\n```\n\n----------------------------------------\n\nTITLE: Running TensorFlow.js Inference CLI in Node Environment\nDESCRIPTION: This snippet demonstrates how to run the TensorFlow.js Inference CLI tool in a Node environment. It includes steps for checking out the code, navigating to the correct directory, installing dependencies, and executing the inference command with required arguments.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-inference/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/tensorflow/tfjs.git\ncd tfjs-inference\nyarn\nts-node src/index.ts --model_path=MODEL_PATH --inputs_dir=INPUTS_DIR --outputs_dir=OUTPUTS_DIR\n```\n\n----------------------------------------\n\nTITLE: Storing and accessing TensorFlow.js models in LocalStorage\nDESCRIPTION: JavaScript code to create, save, and reference a TensorFlow.js sequential model in the browser's LocalStorage. This shows how to create a simple dense layer model and store it for benchmarking.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/benchmarks/local-benchmark/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst localStorageModel = tf.sequential(\n     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\nconst saveResults = await localStorageModel.save('localstorage://my-model-1');\n```\n\n----------------------------------------\n\nTITLE: Loading a TFDF model in JavaScript\nDESCRIPTION: Simple example of loading a TensorFlow Decision Forests model from a URL using the TFDF package.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-tfdf/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst tfdfModel = await tfdf.loadTFDFModel('url/to/your/model.json');\n```\n\n----------------------------------------\n\nTITLE: Setting custom CDN storage using environment variables\nDESCRIPTION: Commands to set the custom CDN storage location for TensorFlow.js binaries using environment variables when installing packages.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/README.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nTFJS_NODE_CDN_STORAGE=\"https://yourmirrorofchoice.com/\" npm install <package>\n(or)\nTFJS_NODE_CDN_STORAGE=\"https://yourmirrorofchoice.com/\" yarn install <package>\n```\n\n----------------------------------------\n\nTITLE: Configuring custom binary installation with JSON\nDESCRIPTION: Example JSON configuration file for specifying custom TensorFlow binary and pre-compiled addon locations for the installation process.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/README.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"tf-lib\": \"url-to-download-customized-binary\",\n  \"addon\": {\n    \"host\": \"host-of-pre-compiled-addon\",\n    \"remote_path\": \"remote-path-of-pre-compiled-addon\",\n    \"package_name\": \"file-name-of-pre-compile-addon\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting TensorFlow Hub Module using TensorFlow.js Converter\nDESCRIPTION: Example command to convert a TensorFlow Hub module to a web-friendly format using the tensorflowjs_converter tool.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntensorflowjs_converter \\\n    --input_format=tf_hub \\\n    'https://tfhub.dev/google/imagenet/mobilenet_v1_100_224/classification/1' \\\n    /mobilenet/web_model\n```\n\n----------------------------------------\n\nTITLE: Writing Benchmark Results to External File\nDESCRIPTION: Command to write benchmark results to an external file in HTML or JSON format for later analysis and visualization.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/benchmarks/browserstack-benchmark/README.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnode app.js --outfile=js\n```\n\n----------------------------------------\n\nTITLE: Installing GPU TensorFlow.js for Node.js using npm or yarn\nDESCRIPTION: Commands to install the GPU version of TensorFlow.js for Node.js for Linux/Windows platforms using either npm or yarn package managers.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @tensorflow/tfjs-node-gpu\n(or)\nyarn add @tensorflow/tfjs-node-gpu\n```\n\n----------------------------------------\n\nTITLE: Installing TensorFlow.js Converter in Python\nDESCRIPTION: Command to install the TensorFlow.js converter package with interactive CLI support using pip.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install tensorflowjs[wizard]\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests for TensorFlow.js-Converter Using Bazel\nDESCRIPTION: This snippet demonstrates how to run Python unit tests for TensorFlow.js-Converter using Bazel. It requires changing to the python directory and having Bazel installed before running the tests.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/DEVELOPMENT.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd python\nbazel test tensorflowjs/...\n```\n\n----------------------------------------\n\nTITLE: Expected Console Output from MobileNet Demo\nDESCRIPTION: Example console output showing the execution of the MobileNet inference, including information about the OpenGL environment, model loading time, cold start time, and inference performance over 100 iterations.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-nodegl/demo/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ node run_mobilenet_inference.js dog.jpg\nPlatform node has already been set. Overwriting the platform with [object Object].\n  - gl.VERSION: OpenGL ES 3.0 (ANGLE 2.1.0.9512a0ef062a)\n  - gl.RENDERER: ANGLE (Intel Inc., Intel(R) Iris(TM) Plus Graphics 640, OpenGL 4.1 core)\n  - Loading model...\n  - Mobilenet load: 6450.763924002647ms\n  - Coldstarting model...\n  - Mobilenet cold start: 297.92842200398445ms\n  - Running inference (100x) ...\n  - Mobilenet inference: (100x) : 35.75772546708584ms\n```\n\n----------------------------------------\n\nTITLE: Importing TFLite Packages via Script Tags in HTML\nDESCRIPTION: HTML code showing how to include TensorFlow.js packages via CDN script tags, including the core package, CPU backend, and TFLite package with proper path configuration.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-tflite/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Import @tensorflow/tfjs-core -->\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-core\"></script>\n<!-- Adds the CPU backend -->\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-cpu\"></script>\n<!--\n  Import @tensorflow/tfjs-tflite\n\n  Note that we need to explicitly load dist/tf-tflite.min.js so that it can\n  locate WASM module files from their default location (dist/).\n-->\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-tflite/dist/tf-tflite.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Building and Running tfjs-layers Benchmarks\nDESCRIPTION: This script builds the benchmark demo from the root of tfjs-layers. It constructs Keras models in Python, benchmarks their training using TensorFlow backend, and sets up a local HTTP server for viewing results.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-layers/demos/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/build-benchmarks-demo.sh\n```\n\n----------------------------------------\n\nTITLE: Running Python Linter for TensorFlow.js-Converter\nDESCRIPTION: This snippet demonstrates how to run the Python linter (pylint) on the tensorflowjs package. It requires changing to the python directory before running the linter.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/DEVELOPMENT.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd python\npylint tensorflowjs\n```\n\n----------------------------------------\n\nTITLE: Importing TFDF packages via script tags in HTML\nDESCRIPTION: Example of including the required TensorFlow.js packages using HTML script tags, including the core library, CPU backend, converter, and TFDF package.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-tfdf/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Import @tensorflow/tfjs-core -->\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-core\"></script>\n<!-- Adds the CPU backend -->\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-cpu\"></script>\n<!-- Import @tensorflow/tfjs-converter -->\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-converter\"></script>\n<!--\n  Import @tensorflow/tfjs-tfdf\n\n  Note that we need to explicitly load dist/tf-tfdf.min.js so that it can\n  locate WASM module files from their default location (dist/).\n-->\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-tfdf/dist/tf-tfdf.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: TensorFlow.js Core Setup\nDESCRIPTION: Commands for cloning and setting up the TensorFlow.js Core API development environment.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/DEVELOPMENT.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/tensorflow/tfjs-core.git\n$ cd tfjs-core\n$ yarn # Installs dependencies.\n```\n\n----------------------------------------\n\nTITLE: Rebuilding TensorFlow.js Node package for Raspberry Pi\nDESCRIPTION: Command to rebuild the TensorFlow.js Node.js native addon from source for Raspberry Pi compatibility.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ npm rebuild @tensorflow/tfjs-node --build-from-source\n```\n\n----------------------------------------\n\nTITLE: Enabling GPU Support for TensorFlow.js Node.js Bindings\nDESCRIPTION: Switches the local workflow to use CUDA/GPU by installing from source with the TensorFlow GPU library.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/DEVELOPMENT.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn enable-gpu\n```\n\n----------------------------------------\n\nTITLE: Building tfjs-vis from source with yarn\nDESCRIPTION: Commands to install dependencies and build the tfjs-vis library from source using yarn.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-vis/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Installing TensorFlow.js Python Package with Wizard Support\nDESCRIPTION: Command to install the tensorflowjs pip package with support for the interactive CLI wizard feature. This enables model conversion through an interactive prompt-based interface.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/python/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install tensorflowjs[wizard]\n```\n\n----------------------------------------\n\nTITLE: Viewing TensorFlow.js Converter CLI Help\nDESCRIPTION: Command to display the help documentation for the tensorflowjs_converter command-line tool. This shows all available options for converting models to TensorFlow.js format.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/python/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntensorflowjs_converter --help\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for TensorFlow.js Converter\nDESCRIPTION: Commands to install the required system dependencies for building TensorFlow.js converter from source, including Python build dependencies and necessary development packages.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get build-dep python3\nsudo apt install libssl-dev libffi-dev zlib1g-dev\n```\n\n----------------------------------------\n\nTITLE: Running TensorFlow.js Tests with Tag Filtering\nDESCRIPTION: Demonstrates how to run tests filtered by specific tags using environment variables. The example shows filtering for SMOKE, REGRESSION, and GOLDEN tests.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport TAGS=#SMOKE,#REGRESSION,#GOLDEN\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Creating Modular Op Definition in TypeScript\nDESCRIPTION: Shows how to create a modular op definition file with the squaredDifference operation, including input validation, tensor conversion, and kernel execution logic.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-core/development/op_modularization.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ENGINE, ForwardFunc} from '../engine';\nimport {SquaredDifference, SquaredDifferenceInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\nimport {scalar} from './tensor_ops';\n\n\nfunction squaredDifference_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  let $a = convertToTensor(a, 'a', 'squaredDifference');\n  let $b = convertToTensor(b, 'b', 'squaredDifference');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n  // ****************\n  // Modularization note: this gradient definition should be removed from\n  // here once the modular gradient is implemented in the steps below.\n  //*****************\n  const der = (dy: Tensor, saved: Tensor[]) => {\n    const [$a, $b] = saved;\n    const two = scalar(2);\n    const derA = () => dy.mul($a.sub($b).mul(two));\n    const derB = () => dy.mul($b.sub($a).mul(two));\n    return {a: derA, b: derB};\n  };\n  // ****************\n  // END Modularization note\n  //*****************\n\n\n  const forward: ForwardFunc<Tensor> = (backend, save) => {\n    const res = backend.squaredDifference($a, $b);\n    save([$a, $b]);\n    return res;\n  };\n\n  const inputs: SquaredDifferenceInputs = {a: $a, b: $b};\n  const attrs = {};\n\n  const inputsToSave = [$a, $b];\n  const outputToSave: boolean[] = [];\n  return ENGINE.runKernelFunc(\n               forward, inputs as unknown as NamedTensorMap, der,\n               SquaredDifference, attrs, inputsToSave, outputToSave) as T;\n}\n\nexport const squaredDifference = op({squaredDifference_});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Addon Module for TensorFlow.js Node.js Bindings\nDESCRIPTION: Installs all dependencies and devDependencies listed in package.json. Also downloads the TensorFlow C library and native node addon.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/DEVELOPMENT.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Installing TensorFlow.js Node.js Bindings from Source\nDESCRIPTION: Clears local binary and addon resources, downloads the TensorFlow C library, and compiles the native addon from source files instead of downloading pre-compiled addon.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/DEVELOPMENT.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn install-from-source\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for TensorFlow.js\nDESCRIPTION: A requirements specification listing all the Python packages needed for TensorFlow.js with their version constraints. It includes ML frameworks like TensorFlow, JAX, Flax, and supporting libraries with specific version ranges to ensure compatibility.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/python/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nflax>=0.7.5\nimportlib_resources>=5.9.0\njax>=0.4.23\njaxlib>=0.4.23\ntensorflow>=2.13.0,<3\ntf-keras>=2.16.0\ntensorflow-decision-forests>=1.9.0\nsix>=1.16.0,<2\ntensorflow-hub>=0.16.1\npackaging~=23.1\n```\n\n----------------------------------------\n\nTITLE: Running TensorFlow.js Tests with Grep Pattern\nDESCRIPTION: Shows how to run tests filtered by a grep pattern, specifically filtering for tests containing 'cpu' in their description.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nyarn test --grep cpu\n```\n\n----------------------------------------\n\nTITLE: Running TensorFlow.js Converter Tests and Linting\nDESCRIPTION: Commands to run tests and linting for the tfjs-converter package to ensure code quality before submitting contributions, which is an essential part of the development workflow.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncd tfjs-converter\nyarn test\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Running TensorFlow.js Interactive Wizard\nDESCRIPTION: Command to launch the interactive wizard for TensorFlow.js model conversion. The wizard provides a step-by-step guided interface for converting models without needing to remember all command-line parameters.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/python/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntensorflowjs_wizard\n```\n\n----------------------------------------\n\nTITLE: Development setup commands for TensorFlow.js Node.js backend\nDESCRIPTION: Shell commands for setting up the development environment for TensorFlow.js Node.js backend, including dependency installation and testing.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/README.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n# Download and install JS dependencies, including libtensorflow 1.8.\nyarn\n\n# Run TFJS tests against Node.js backend:\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Publishing Local Package Changes in tfjs-layers\nDESCRIPTION: Commands for testing changes between tfjs-layers and tfjs packages. This process involves locally publishing the modified package and linking it to the main tfjs repo.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-layers/DEVELOPMENT.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn publish-local\n```\n\n----------------------------------------\n\nTITLE: Exporting Modularized Op in TypeScript\nDESCRIPTION: Shows how to export the modularized squaredDifference operation from the ops.ts file to make it available throughout the library.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-core/development/op_modularization.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport {squaredDifference} from './squared_difference';\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests for TensorFlow.js Converter\nDESCRIPTION: Command to run all the Python tests for the TensorFlow.js converter, which is necessary to verify the Python side of the converter functionality when making changes to the conversion process.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nyarn run-python-tests\n```\n\n----------------------------------------\n\nTITLE: Setting Thread Count for TFLite Model in JavaScript\nDESCRIPTION: Code showing how to customize the number of threads used by the TFLite model during loading, which can affect performance.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-tflite/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst tfliteModel = await tflite.loadTFLiteModel(\n    'path/to/your/my_model.tflite',\n    {numThreads: navigator.hardwareConcurrency / 2});\n```\n\n----------------------------------------\n\nTITLE: Compiling JavaScript Files from TypeScript in TensorFlow.js Node\nDESCRIPTION: Builds the JavaScript files from TypeScript source code for the TensorFlow.js Node.js bindings.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/DEVELOPMENT.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Loading tfjs-vis via script tags\nDESCRIPTION: HTML script tags to load both TensorFlow.js and tfjs-vis libraries from CDN. Note that TensorFlow.js is a prerequisite for tfjs-vis.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-vis/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs\"> </script>\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-vis\"></script>\n```\n\n----------------------------------------\n\nTITLE: Testing the TensorFlow.js WASM Backend\nDESCRIPTION: Command to run the test suite for the TensorFlow.js WASM backend using Yarn. This validates the functionality of the backend implementation.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Building TensorFlow from source for optimal performance\nDESCRIPTION: Shell commands to build the TensorFlow library from source for optimal performance on specific hardware, producing a libtensorflow package.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/README.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n./configure\nbazel build --config=opt --config=monolithic //tensorflow/tools/lib_package:libtensorflow\n```\n\n----------------------------------------\n\nTITLE: Running Basic Development Commands for TensorFlow.js\nDESCRIPTION: Essential commands that must succeed before submitting a PR, including building the project, formatting code, linting, and running unit tests.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-layers/DEVELOPMENT.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn build\nyarn format\nyarn lint\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Single-Run Mode\nDESCRIPTION: Command to run tests once and exit the karma process, which is particularly helpful on Windows systems where the default watch mode can cause issues with test termination.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nyarn test --single-run\n```\n\n----------------------------------------\n\nTITLE: Creating Chained Op Augmentor in TypeScript\nDESCRIPTION: Demonstrates how to create a chained operation augmentor that extends the Tensor prototype with the squaredDifference method for a fluent API.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-core/development/op_modularization.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {squaredDifference} from '../../ops/squared_difference';\nimport {Tensor} from '../../tensor';\nimport {Rank, TensorLike} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    squaredDifference<T extends Tensor>(b: Tensor|TensorLike): T;\n  }\n}\n\nTensor.prototype.squaredDifference = function<T extends Tensor>(b: Tensor|\n                                                                TensorLike): T {\n  this.throwIfDisposed();\n  return squaredDifference(this, b);\n};\n```\n\n----------------------------------------\n\nTITLE: Building and Installing TensorFlow.js Pip Package\nDESCRIPTION: This snippet shows how to build and install the tensorflowjs pip package. It uses the build-pip-package.sh script to create the package and then installs it using pip. The script requires specifying a directory for storing the pip wheel file.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/DEVELOPMENT.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncd python\n\n# You need to specify a folder where the pip wheel file will be stored, e.g.,\n./build-pip-package.sh /tmp/my_tensorflowjs_pip\n\n# If the script succeeds, you can use `pip install` to install the pip package:\n\npip install --force-reinstall \\\n  /tmp/my_tensorflowjs_pip/tensorflowjs-0.0.1-py2-none-any.whl\n```\n\n----------------------------------------\n\nTITLE: Installing Windows build tools to resolve msbuild.exe errors\nDESCRIPTION: Command to install the required Windows build tools globally, which resolves msbuild.exe related errors during the installation of tfjs-node. This installs necessary components for compiling native Node.js addons.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g --production windows-build-tools\n```\n\n----------------------------------------\n\nTITLE: Testing the WebGPU Backend with Chrome Canary\nDESCRIPTION: This command demonstrates how to run tests for the TensorFlow.js WebGPU backend. It specifies that the Canary channel of Chrome is used for testing, with an optional parameter to specify the Chrome Canary binary path.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-webgpu/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn test  # --test_env=CHROME_CANARY_BIN=/path/to/chrome\n```\n\n----------------------------------------\n\nTITLE: Running Debug Test Server\nDESCRIPTION: Commands to keep the Karma test server active for debugging.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/DEVELOPMENT.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# For packages with only browser tests\n$ yarn test-debug\n# For packages with browser and node tests\n$ yarn test-browser-debug\n```\n\n----------------------------------------\n\nTITLE: Building and Testing TensorFlow.js Pip Package\nDESCRIPTION: This snippet demonstrates how to build and test the tensorflowjs pip package in a single step. It uses the --test flag with the build-pip-package.sh script to run a test-on-install after building the package. It's recommended to use a virtualenv or pipenv for this process.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/DEVELOPMENT.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n./build-pip-package.sh --test /tmp/my_tensorflowjs_pip\n```\n\n----------------------------------------\n\nTITLE: Running node-gyp configure with verbose output for troubleshooting\nDESCRIPTION: Command to diagnose binding compilation issues by running node-gyp with verbose output flag. This helps identify missing dependencies or configuration problems when installing tfjs-node.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode-gyp configure --verbose\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running the Benchmark Tool\nDESCRIPTION: Commands to clone the TFJS repository, navigate to the benchmark directory, install dependencies, and start the benchmark server on port 8001.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/benchmarks/browserstack-benchmark/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/tensorflow/tfjs.git\ncd tfjs/e2e/benchmarks/browserstack-benchmark\nyarn install\n\nnode app.js\n```\n\n----------------------------------------\n\nTITLE: Running TensorFlow.js Cartoonizer Demo Locally\nDESCRIPTION: Command to run the cartoonizer demo in development mode with live reloading. This launches a local server using the watch script defined in package.json.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-tflite/demo/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn watch\n```\n\n----------------------------------------\n\nTITLE: Building the TensorFlow.js WASM Backend\nDESCRIPTION: Command to build the TensorFlow.js WASM backend using Yarn. This builds the necessary WebAssembly binaries and JavaScript wrapper code.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Building the WebGPU Backend with Yarn\nDESCRIPTION: This command shows how to build the TensorFlow.js WebGPU backend using Yarn package manager. It's a simple command to execute the build process for development purposes.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-webgpu/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Checking architecture type on Mac OS X with M1 chip\nDESCRIPTION: Command to verify that the terminal is running in arm64 mode on Mac OS X with M1 chip.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nuname -m\n```\n\n----------------------------------------\n\nTITLE: Installing custom-built TensorFlow binary\nDESCRIPTION: Shell commands to copy and extract a custom-built TensorFlow binary package to replace the default one in the tfjs-node module.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/README.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncp bazel-bin/tensorflow/tools/lib_package/libtensorflow.tar.gz ~/myproject/node_modules/@tensorflow/tfjs-node/deps\ncd path-to-my-project/node_modules/@tensorflow/tfjs-node/deps\ntar -xf libtensorflow.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Building Dependencies for TensorFlow.js Cartoonizer Demo\nDESCRIPTION: Commands to build the necessary dependencies for the cartoonizer demo. This involves first building the required dependencies with yarn build-deps and then installing project dependencies with yarn.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-tflite/demo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn build-deps\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Yarn\nDESCRIPTION: Commands for running linting and tests at the repository root and package level.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/DEVELOPMENT.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Run this at the root of the repository\n$ yarn lint\n# cd into the package directory you want to test\n$ yarn test\n# You may also need to run 'yarn lint' in the directory you want to test\n$ yarn lint\n```\n\n----------------------------------------\n\nTITLE: Specifying TensorFlow.js Python Dependencies\nDESCRIPTION: This snippet lists the Python package dependencies for TensorFlow.js, including package names, versions, and hash values. It covers a wide range of packages necessary for TensorFlow.js functionality, including core TensorFlow libraries, scientific computing tools, and various TensorFlow-related extensions.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/python/requirements_lock.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nscipy==1.9.3 \\\n    --hash=sha256:06d2e1b4c491dc7d8eacea139a1b0b295f74e1a1a0f704c375028f8320d16e31 \\\n    --hash=sha256:0d54222d7a3ba6022fdf5773931b5d7c56efe41ede7f7128c7b1637700409108 \\\n    --hash=sha256:1884b66a54887e21addf9c16fb588720a8309a57b2e258ae1c7986d4444d3bc0 \\\n    --hash=sha256:1a72d885fa44247f92743fc20732ae55564ff2a519e8302fb7e18717c5355a8b \\\n    --hash=sha256:2318bef588acc7a574f5bfdff9c172d0b1bf2c8143d9582e05f878e580a3781e \\\n    --hash=sha256:4db5b30849606a95dcf519763dd3ab6fe9bd91df49eba517359e450a7d80ce2e \\\n    --hash=sha256:545c83ffb518094d8c9d83cce216c0c32f8c04aaf28b92cc8283eda0685162d5 \\\n    --hash=sha256:5a04cd7d0d3eff6ea4719371cbc44df31411862b9646db617c99718ff68d4840 \\\n    --hash=sha256:5b88e6d91ad9d59478fafe92a7c757d00c59e3bdc3331be8ada76a4f8d683f58 \\\n    --hash=sha256:68239b6aa6f9c593da8be1509a05cb7f9efe98b80f43a5861cd24c7557e98523 \\\n    --hash=sha256:83b89e9586c62e787f5012e8475fbb12185bafb996a03257e9675cd73d3736dd \\\n    --hash=sha256:83c06e62a390a9167da60bedd4575a14c1f58ca9dfde59830fc42e5197283dab \\\n    --hash=sha256:90453d2b93ea82a9f434e4e1cba043e779ff67b92f7a0e85d05d286a3625df3c \\\n    --hash=sha256:abaf921531b5aeaafced90157db505e10345e45038c39e5d9b6c7922d68085cb \\\n    --hash=sha256:b41bc822679ad1c9a5f023bc93f6d0543129ca0f37c1ce294dd9d386f0a21096 \\\n    --hash=sha256:c68db6b290cbd4049012990d7fe71a2abd9ffbe82c0056ebe0f01df8be5436b0 \\\n    --hash=sha256:cff3a5295234037e39500d35316a4c5794739433528310e117b8a9a0c76d20fc \\\n    --hash=sha256:d01e1dd7b15bd2449c8bfc6b7cc67d630700ed655654f0dfcf121600bad205c9 \\\n    --hash=sha256:d644a64e174c16cb4b2e41dfea6af722053e83d066da7343f333a54dae9bc31c \\\n    --hash=sha256:da8245491d73ed0a994ed9c2e380fd058ce2fa8a18da204681f2fe1f57f98f95 \\\n    --hash=sha256:fbc5c05c85c1a02be77b1ff591087c83bc44579c6d2bd9fb798bb64ea5e1a027\n    # via\n    #   jax\n    #   jaxlib\nsetuptools==65.6.3 \\\n    --hash=sha256:57f6f22bde4e042978bcd50176fdb381d7c21a9efa4041202288d3737a0c6a54 \\\n    --hash=sha256:a7620757bf984b58deaf32fc8a4577a9bbc0850cf92c20e1ce41c38c19e5fb75\n    # via\n    #   tensorboard\n    #   tensorflow\nsix==1.16.0 \\\n    --hash=sha256:1e61c37477a1626458e36f7b1d82aa5c9b094fa4802892072e49de9c60c4c926 \\\n    --hash=sha256:8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254\n    # via\n    #   -r tfjs-converter/python/requirements.txt\n    #   astunparse\n    #   google-pasta\n    #   python-dateutil\n    #   tensorboard\n    #   tensorflow\n    #   tensorflow-decision-forests\ntensorboard==2.16.2 \\\n    --hash=sha256:9f2b4e7dad86667615c0e5cd072f1ea8403fc032a299f0072d6f74855775cc45\n    # via tensorflow\ntensorboard-data-server==0.7.0 \\\n    --hash=sha256:64aa1be7c23e80b1a42c13b686eb0875bb70f5e755f4d2b8de5c1d880cf2267f \\\n    --hash=sha256:753d4214799b31da7b6d93837959abebbc6afa86e69eacf1e9a317a48daa31eb \\\n    --hash=sha256:eb7fa518737944dbf4f0cf83c2e40a7ac346bf91be2e6a0215de98be74e85454\n    # via tensorboard\ntensorflow==2.16.1 \\\n    --hash=sha256:03b946e73bf48d857928329b8b321b00b42fe1b4f774c6580666683b0629689f \\\n    --hash=sha256:093573a8eb93ef9511e7015b8de9659ed27156f2f05e6d1211f8f4cb76407ee1 \\\n    --hash=sha256:09cac3c6a8fbf85a9b95491b58086154dd00a09956ed31823bb45c6605f0e881 \\\n    --hash=sha256:1c5611e7357b7a4bc6dccc60750c91e27cdff82622fc917848f22add5ab8de26 \\\n    --hash=sha256:1e96047657c64459a36a0cc211a3d003df96c7be3f95a84f7b705715f5697270 \\\n    --hash=sha256:21a3c6d76a39f52754c389326f6bef8aef3c26b5bc89ca365add4a69483e569e \\\n    --hash=sha256:42858b5d14159a2b9cc01c7f5a88e063b0601f20430cb358374005a67da38114 \\\n    --hash=sha256:4a123fbb5788ba30d1113ce01bb166ddf85056fcb40e287c32a929ebfa4aa061 \\\n    --hash=sha256:617df9fa2d697c4bc22fa3ee87eb01d580ab1bd0438fea15c4ec2f2870c40bb0 \\\n    --hash=sha256:8231a9d7bba92a51231dcdcc3073920ad7d22fa88c64c7e2ecb7f1feac9d5fcb \\\n    --hash=sha256:8e376ab46fb1df18a1f927d77011d36ecf7b717a81cbfe4a941c7bf5236939b3 \\\n    --hash=sha256:92152aa77c402684e9066885515af6a45d88455c4453a818052c7369357078d8 \\\n    --hash=sha256:930c61100cce3a5cb63d30fe6776504405214e8398a26ca968222ecb8b8f9404 \\\n    --hash=sha256:ab79f156dd746c2dae906e3b4c5daac3855742941752e5a2c28f094c56eed466 \\\n    --hash=sha256:ae0554471d472b8095f8a5204d878389d0d4bc88f6ef6edcd477b952dff5cfab \\\n    --hash=sha256:bbf06d879070dfce2617c7d2bb19696bb1b2bcbb3b4ae009520e7166dd75dfc2 \\\n    --hash=sha256:c612cdd436bb55b8dae1ecdd1d253496c95b006870b7165b8480c6606b8622aa \\\n    --hash=sha256:cc2065d1d27f9f89fea8a0fe8fdf6c437ae60987cd7f2928e0d00e532e79e44d \\\n    --hash=sha256:e9cf3fba7f389ff8b8342c5fbebb2529321e0ce9e03d7bcb3657ee0876686c36 \\\n    --hash=sha256:f8a5b83ca4bf1813da158f63479cfdf848c0761e5120258417b3a96074a489f5\n    # via\n    #   -r tfjs-converter/python/requirements.txt\n    #   tensorflow-decision-forests\n    #   tf-keras\ntensorflow-decision-forests==1.9.0 \\\n    --hash=sha256:54d9bb6040fb7698860a23f38ec8a5ce4c2d162f7a54ce82b1b13cf353bac31a \\\n    --hash=sha256:688d522d4de7f8e868f068df383d6cfe7f898cba60811f325f470c784ce365e2 \\\n    --hash=sha256:7868b1ad4054b14d3f45635fb7eab73495a25900ea4cf12fecc140c3c2004909 \\\n    --hash=sha256:942d0501ed95ef2964d1fdb4196b34b75794cc19276770c169de8d4638efa350 \\\n    --hash=sha256:baafff33647e87565b8e93bff92f3bace89e4efb5cfd2aceff1a05de52ab3d16 \\\n    --hash=sha256:bbc76e92c693114037e5380fcc11201d260e7290f30a56daf23306e0103dd9bb \\\n    --hash=sha256:bf85a2d292bcce59d31518f102baa6b8c42d40e73dd5b667d4df83564b2b01dd \\\n    --hash=sha256:c5fe3b8fca3579f9342995a85f1c66b8c3524d002ff6cab92d90b557a79715ef \\\n    --hash=sha256:f24a830e9d0c3283579ce8406009580ab9295371a014001511963be7c19f8b07\n    # via -r tfjs-converter/python/requirements.txt\ntensorflow-hub==0.16.1 \\\n    --hash=sha256:e10c184b3d08daeafada11ffea2dd46781725b6bef01fad1f74d6634ad05311f\n    # via -r tfjs-converter/python/requirements.txt\ntensorflow-io-gcs-filesystem==0.34.0 \\\n    --hash=sha256:027a07553367187f918a99661f63ae0506b91b77a70bee9c7ccaf3920bf7cfe7 \\\n    --hash=sha256:0dafed144673e1173528768fe208a7c5a6e8edae40208381cac420ee7c918ec9 \\\n    --hash=sha256:182b0fbde7e9a537fda0b354c28b0b6c035736728de8fe2db7ef49cf90352014 \\\n    --hash=sha256:2b035f4c92639657b6d376929d550ac3dee9e6c0523eb434eefe0a27bae3d05b \\\n    --hash=sha256:396bfff61b49f80b86ddebe0c76ae0f2731689cee49ad7d782625180b50b13af \\\n    --hash=sha256:3f346b287ed2400e09b13cfd8524222fd70a66aadb9164c645286c2087007e9f \\\n    --hash=sha256:44ad387a812a78e7424bb8bee3820521ae1c044bddf72b1e163e8df95c124a74 \\\n    --hash=sha256:5813c336b4f7cb0a01ff4cc6cbd3edf11ef67305baf0e3cf634911b702f493f8 \\\n    --hash=sha256:6e6353123a5b51397950138a118876af833a7db66b531123bb86f82e80ab0e72 \\\n    --hash=sha256:7f60183473f0ca966451bb1d1bb5dc29b3cf9c74d1d0e7f2ed46760ed56bd4af \\\n    --hash=sha256:8d8664bddbe4e7b56ce94db8b93ea9077a158fb5e15364e11e29f93015ceea24 \\\n    --hash=sha256:a17a616d2c7fae83de4424404815843507d40d4eb0d507c636a5493a20c3d958 \\\n    --hash=sha256:b20622f8572fcb6c93e8f7d626327472f263e47ebd63d2153ef09162ef5ef7b5 \\\n    --hash=sha256:b9a93fcb01db269bc845a1ced431f3c61201755ce5f9ec4885760f30122276ef \\\n    --hash=sha256:cbe26c4a3332589c7b724f147df453b5c226993aa8d346a15536358d77b364c4 \\\n    --hash=sha256:d3feba2dd76f7c188137c34642d68d378f0eed81636cb95090ecb1496722707c \\\n    --hash=sha256:d831702fbb270996b27cda7fde06e0825b2ea81fd8dd3ead35242f4f8b3889b8 \\\n    --hash=sha256:ec4604c99cbb5b708f4516dee27aa655abae222b876c98b740f4c2f89dd5c001 \\\n    --hash=sha256:f211d2b3db8f9931765992b607b71cbfb98c8cd6169079d004a67a94ab10ecb4\n    # via tensorflow\ntensorstore==0.1.41 \\\n    --hash=sha256:025a62bb9122364885e90469af05fec2f62ad05f46ff46d9eae1d76ad9125563 \\\n    --hash=sha256:2aa81581f768382a38584698a3fcb07a533fc391067467326656f24ab019cba1 \\\n    --hash=sha256:2c4c578e82866b8f764de871ff7e0a81fe0949ac3565d8d2eb10f29e43020a52 \\\n    --hash=sha256:2d65ea0fd5ac96a9d577f16bb917ae8a0a121d2093472bfb7bd762b1e32c753b \\\n    --hash=sha256:5168f7f71e51da7d6cc85a11cd5d102d9eae750d5f5a3ee90cc9ebae10226621 \\\n    --hash=sha256:620ad460023eeeae721e2e25a2a3e2b608f09cd169c1f68af7043c6d44e88cbf \\\n    --hash=sha256:634c78fd62cd6e5357291ccb9671e43262f818f9cf7cc58f701b5bd80d1c1ef7 \\\n    --hash=sha256:6b3b14616f9141b12e61c0c46d1c954927f7f307498d8b9d2261ff2bd4005bbd \\\n    --hash=sha256:74e317ef7cba8c0208c5d8d9f1406eac37f58e8f92b3f7caa9a72b8b118b1c09 \\\n    --hash=sha256:803fa2bcbc93f43fe0b3b5b70d78882d3b266a70d419acfc7fdd515f89cba79b \\\n    --hash=sha256:8b5dbc0e809c90377527e0f65829d6abcdf5c69f892f433ed2cb8508d4ba519a \\\n    --hash=sha256:8df13f990acc58889160eff5b2e1df029cdfffdf020ce5044e655242c1016bb1 \\\n    --hash=sha256:91549a16b1ef2d6bc5ac8f28eed32737001fcfe33309f1ba126cd4c1e08b971b \\\n    --hash=sha256:96fb62a880bf25da7e12ad4bba00a82deb2daf6f59050e8db6f0b04107120799 \\\n    --hash=sha256:a99b87b65dfca65a830503bdfd2e5168a69b5290807cb8e922fa5a1acea2edec \\\n    --hash=sha256:bbd58cedddce29216703a63ea42db010b6151c7bc05ac741af50aa31e31491fb \\\n    --hash=sha256:c400aa46fc814edd69c72fcdf202dbd8c666ae684b534e81350a3a30ab16bdfc\n    # via\n    #   flax\n    #   orbax-checkpoint\ntermcolor==2.1.1 \\\n    --hash=sha256:67cee2009adc6449c650f6bcf3bdeed00c8ba53a8cda5362733c53e0a39fb70b \\\n    --hash=sha256:fa852e957f97252205e105dd55bbc23b419a70fec0085708fc0515e399f304fd\n    # via tensorflow\ntf-keras==2.16.0 \\\n    --hash=sha256:b2ad0541fa7d9e92c4b7a1b96593377afb58aaff374299a6ca6be1a42f51d899 \\\n    --hash=sha256:db53891f1ac98197c2acced98cdca8c06ba8255655a6cb7eb95ed49676118280\n    # via\n    #   -r tfjs-converter/python/requirements.txt\n    #   tensorflow-decision-forests\n    #   tensorflow-hub\ntoolz==0.12.0 \\\n    --hash=sha256:2059bd4148deb1884bb0eb770a3cde70e7f954cfbbdc2285f1f2de01fd21eb6f \\\n    --hash=sha256:88c570861c440ee3f2f6037c4654613228ff40c93a6c25e0eba70d17282c6194\n    # via chex\ntyping-extensions==4.4.0 \\\n    --hash=sha256:1511434bb92bf8dd198c12b1cc812e800d4181cfcb867674e0f8279cc93087aa \\\n    --hash=sha256:16fa4864408f655d35ec496218b85f79b3437c829e93320c7c9215ccfd92489e\n    # via\n    #   flax\n    #   optax\n    #   optree\n```\n\n----------------------------------------\n\nTITLE: Building and Uploading Node Addon to GCP for TensorFlow.js\nDESCRIPTION: Compiles, compresses, and uploads a new node addon to Google Cloud Platform bucket for publishing.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/DEVELOPMENT.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn build-and-upload-addon publish\n```\n\n----------------------------------------\n\nTITLE: Running the MNIST Demo Locally with Yarn\nDESCRIPTION: Commands for setting up and running the tfjs-vis MNIST demo locally. First build the npm package in the tfjs-vis folder, then start the demo in watch mode from the demos folder.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-vis/demos/mnist/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n- run `yarn build-npm` in the `tfjs-vis` folder\n- run `yarn watch` from the `demos` folder\n```\n\n----------------------------------------\n\nTITLE: Building and Uploading libtensorflow for Custom Platforms (ARM64)\nDESCRIPTION: Builds a custom version of libtensorflow for platforms like linux-arm64 that don't have official tensorflow binaries.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/DEVELOPMENT.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ngcloud builds submit . --config=scripts/build-libtensorflow-arm64.yml\n```\n\n----------------------------------------\n\nTITLE: Downloading TensorFlow.js benchmark tool and model using Shell commands\nDESCRIPTION: Shell commands to clone the TensorFlow.js repository, navigate to the benchmarks directory, download a MobileNet model, and extract it to a local directory for benchmarking.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/benchmarks/local-benchmark/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/tensorflow/tfjs.git\ncd tfjs/e2e/benchmarks/\n```\n\nLANGUAGE: shell\nCODE:\n```\nwget -O model.tar.gz \"https://tfhub.dev/google/tfjs-model/imagenet/mobilenet_v2_130_224/classification/3/default/1?tfjs-format=compressed\"\nmkdir model\ntar -xf model.tar.gz -C model/\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpx http-server\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up TensorFlow.js Development Environment\nDESCRIPTION: Commands to clone the TensorFlow.js repository and install project dependencies using yarn, which is the first step in setting up a development environment for contributing to the project.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/tensorflow/tfjs.git\ncd tfjs\nyarn # Installs dependencies.\n```\n\n----------------------------------------\n\nTITLE: Building NPM Package for TensorFlow.js Node.js Bindings\nDESCRIPTION: Builds a new version of tfjs-node/tfjs-node-gpu NPM tarball without updating the pre-compiled node addon on GCP.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/DEVELOPMENT.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn build-npm\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for TensorFlow.js-Converter\nDESCRIPTION: This snippet shows how to install the required Python dependencies for testing the TensorFlow.js-Converter. It uses pip to install the dependencies listed in the requirements.txt file.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/DEVELOPMENT.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd python\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Building tfjs-backend-nodegl Package\nDESCRIPTION: Commands to navigate to the tfjs-backend-nodegl directory and build the package by installing dependencies and compiling TypeScript.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-nodegl/demo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd tfjs-backend-nodegl\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn && yarn tsc\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies with Hash Verification\nDESCRIPTION: Detailed package dependency specifications with version pinning and SHA256 hash verification for security. Includes core ML packages like TensorFlow, Keras, JAX and their dependencies.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/python/requirements-dev_lock.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nh5py==3.10.0 \\\n    --hash=sha256:012ab448590e3c4f5a8dd0f3533255bc57f80629bf7c5054cf4c87b30085063c \\\n    --hash=sha256:212bb997a91e6a895ce5e2f365ba764debeaef5d2dca5c6fb7098d66607adf99\n```\n\n----------------------------------------\n\nTITLE: Running the Object Detection Demo\nDESCRIPTION: Shell commands to run the object detection demo included in the package, which starts a local HTTP server on port 1234.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-automl/README.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncd demo/object_detection\nyarn\nyarn watch\n```\n\n----------------------------------------\n\nTITLE: Building the TFDF package from source\nDESCRIPTION: Shell commands for building the TFDF package from source using Yarn.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-tfdf/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Publishing TensorFlow.js Node NPM Package\nDESCRIPTION: Compiles a new node addon, uploads it to GCP, then builds and publishes a new npm package.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/DEVELOPMENT.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn publish-npm\n```\n\n----------------------------------------\n\nTITLE: Testing the TFDF package\nDESCRIPTION: Shell command for running tests for the TFDF package.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-tfdf/README.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn test\n```\n\n----------------------------------------\n\nTITLE: Configuring TensorFlow.js Dependencies with Pinned Versions and Hash Verification\nDESCRIPTION: A requirements file that specifies Python package dependencies for TensorFlow.js with exact versions and hashes for security. The file lists packages like urllib3, werkzeug, wheel, wrapt, wurlitzer, and zipp along with their version constraints and SHA-256 hashes for verification.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/python/requirements_lock.txt#2025-04-23_snippet_4\n\nLANGUAGE: pip\nCODE:\n```\nurllib3==1.26.13 \\\n    --hash=sha256:47cc05d99aaa09c9e72ed5809b60e7ba354e64b59c9c173ac3018642d8bb41fc \\\n    --hash=sha256:c083dd0dce68dbfbe1129d5271cb90f9447dea7d52097c6e0126120c521ddea8\n    # via requests\nwerkzeug==2.2.2 \\\n    --hash=sha256:7ea2d48322cc7c0f8b3a215ed73eabd7b5d75d0b50e31ab006286ccff9e00b8f \\\n    --hash=sha256:f979ab81f58d7318e064e99c4506445d60135ac5cd2e177a2de0089bfd4c9bd5\n    # via tensorboard\nwheel==0.38.4 \\\n    --hash=sha256:965f5259b566725405b05e7cf774052044b1ed30119b5d586b2703aafe8719ac \\\n    --hash=sha256:b60533f3f5d530e971d6737ca6d58681ee434818fab630c83a734bb10c083ce8\n    # via\n    #   astunparse\n    #   tensorflow-decision-forests\nwrapt==1.14.1 \\\n    --hash=sha256:00b6d4ea20a906c0ca56d84f93065b398ab74b927a7a3dbd470f6fc503f95dc3 \\\n    --hash=sha256:01c205616a89d09827986bc4e859bcabd64f5a0662a7fe95e0d359424e0e071b \\\n    --hash=sha256:02b41b633c6261feff8ddd8d11c711df6842aba629fdd3da10249a53211a72c4 \\\n    --hash=sha256:07f7a7d0f388028b2df1d916e94bbb40624c59b48ecc6cbc232546706fac74c2 \\\n    --hash=sha256:11871514607b15cfeb87c547a49bca19fde402f32e2b1c24a632506c0a756656 \\\n    --hash=sha256:1b376b3f4896e7930f1f772ac4b064ac12598d1c38d04907e696cc4d794b43d3 \\\n    --hash=sha256:21ac0156c4b089b330b7666db40feee30a5d52634cc4560e1905d6529a3897ff \\\n    --hash=sha256:257fd78c513e0fb5cdbe058c27a0624c9884e735bbd131935fd49e9fe719d310 \\\n    --hash=sha256:2b39d38039a1fdad98c87279b48bc5dce2c0ca0d73483b12cb72aa9609278e8a \\\n    --hash=sha256:2cf71233a0ed05ccdabe209c606fe0bac7379fdcf687f39b944420d2a09fdb57 \\\n    --hash=sha256:2fe803deacd09a233e4762a1adcea5db5d31e6be577a43352936179d14d90069 \\\n    --hash=sha256:3232822c7d98d23895ccc443bbdf57c7412c5a65996c30442ebe6ed3df335383 \\\n    --hash=sha256:34aa51c45f28ba7f12accd624225e2b1e5a3a45206aa191f6f9aac931d9d56fe \\\n    --hash=sha256:36f582d0c6bc99d5f39cd3ac2a9062e57f3cf606ade29a0a0d6b323462f4dd87 \\\n    --hash=sha256:380a85cf89e0e69b7cfbe2ea9f765f004ff419f34194018a6827ac0e3edfed4d \\\n    --hash=sha256:40e7bc81c9e2b2734ea4bc1aceb8a8f0ceaac7c5299bc5d69e37c44d9081d43b \\\n    --hash=sha256:43ca3bbbe97af00f49efb06e352eae40434ca9d915906f77def219b88e85d907 \\\n    --hash=sha256:4fcc4649dc762cddacd193e6b55bc02edca674067f5f98166d7713b193932b7f \\\n    --hash=sha256:5a0f54ce2c092aaf439813735584b9537cad479575a09892b8352fea5e988dc0 \\\n    --hash=sha256:5a9a0d155deafd9448baff28c08e150d9b24ff010e899311ddd63c45c2445e28 \\\n    --hash=sha256:5b02d65b9ccf0ef6c34cba6cf5bf2aab1bb2f49c6090bafeecc9cd81ad4ea1c1 \\\n    --hash=sha256:60db23fa423575eeb65ea430cee741acb7c26a1365d103f7b0f6ec412b893853 \\\n    --hash=sha256:642c2e7a804fcf18c222e1060df25fc210b9c58db7c91416fb055897fc27e8cc \\\n    --hash=sha256:6a9a25751acb379b466ff6be78a315e2b439d4c94c1e99cb7266d40a537995d3 \\\n    --hash=sha256:6b1a564e6cb69922c7fe3a678b9f9a3c54e72b469875aa8018f18b4d1dd1adf3 \\\n    --hash=sha256:6d323e1554b3d22cfc03cd3243b5bb815a51f5249fdcbb86fda4bf62bab9e164 \\\n    --hash=sha256:6e743de5e9c3d1b7185870f480587b75b1cb604832e380d64f9504a0535912d1 \\\n    --hash=sha256:709fe01086a55cf79d20f741f39325018f4df051ef39fe921b1ebe780a66184c \\\n    --hash=sha256:7b7c050ae976e286906dd3f26009e117eb000fb2cf3533398c5ad9ccc86867b1 \\\n    --hash=sha256:7d2872609603cb35ca513d7404a94d6d608fc13211563571117046c9d2bcc3d7 \\\n    --hash=sha256:7ef58fb89674095bfc57c4069e95d7a31cfdc0939e2a579882ac7d55aadfd2a1 \\\n    --hash=sha256:80bb5c256f1415f747011dc3604b59bc1f91c6e7150bd7db03b19170ee06b320 \\\n    --hash=sha256:81b19725065dcb43df02b37e03278c011a09e49757287dca60c5aecdd5a0b8ed \\\n    --hash=sha256:833b58d5d0b7e5b9832869f039203389ac7cbf01765639c7309fd50ef619e0b1 \\\n    --hash=sha256:88bd7b6bd70a5b6803c1abf6bca012f7ed963e58c68d76ee20b9d751c74a3248 \\\n    --hash=sha256:8ad85f7f4e20964db4daadcab70b47ab05c7c1cf2a7c1e51087bfaa83831854c \\\n    --hash=sha256:8c0ce1e99116d5ab21355d8ebe53d9460366704ea38ae4d9f6933188f327b456 \\\n    --hash=sha256:8d649d616e5c6a678b26d15ece345354f7c2286acd6db868e65fcc5ff7c24a77 \\\n    --hash=sha256:903500616422a40a98a5a3c4ff4ed9d0066f3b4c951fa286018ecdf0750194ef \\\n    --hash=sha256:9736af4641846491aedb3c3f56b9bc5568d92b0692303b5a305301a95dfd38b1 \\\n    --hash=sha256:988635d122aaf2bdcef9e795435662bcd65b02f4f4c1ae37fbee7401c440b3a7 \\\n    --hash=sha256:9cca3c2cdadb362116235fdbd411735de4328c61425b0aa9f872fd76d02c4e86 \\\n    --hash=sha256:9e0fd32e0148dd5dea6af5fee42beb949098564cc23211a88d799e434255a1f4 \\\n    --hash=sha256:9f3e6f9e05148ff90002b884fbc2a86bd303ae847e472f44ecc06c2cd2fcdb2d \\\n    --hash=sha256:a85d2b46be66a71bedde836d9e41859879cc54a2a04fad1191eb50c2066f6e9d \\\n    --hash=sha256:a9a52172be0b5aae932bef82a79ec0a0ce87288c7d132946d645eba03f0ad8a8 \\\n    --hash=sha256:aa31fdcc33fef9eb2552cbcbfee7773d5a6792c137b359e82879c101e98584c5 \\\n    --hash=sha256:b014c23646a467558be7da3d6b9fa409b2c567d2110599b7cf9a0c5992b3b471 \\\n    --hash=sha256:b21bb4c09ffabfa0e85e3a6b623e19b80e7acd709b9f91452b8297ace2a8ab00 \\\n    --hash=sha256:b5901a312f4d14c59918c221323068fad0540e34324925c8475263841dbdfe68 \\\n    --hash=sha256:b9b7a708dd92306328117d8c4b62e2194d00c365f18eff11a9b53c6f923b01e3 \\\n    --hash=sha256:d1967f46ea8f2db647c786e78d8cc7e4313dbd1b0aca360592d8027b8508e24d \\\n    --hash=sha256:d52a25136894c63de15a35bc0bdc5adb4b0e173b9c0d07a2be9d3ca64a332735 \\\n    --hash=sha256:d77c85fedff92cf788face9bfa3ebaa364448ebb1d765302e9af11bf449ca36d \\\n    --hash=sha256:d79d7d5dc8a32b7093e81e97dad755127ff77bcc899e845f41bf71747af0c569 \\\n    --hash=sha256:dbcda74c67263139358f4d188ae5faae95c30929281bc6866d00573783c422b7 \\\n    --hash=sha256:ddaea91abf8b0d13443f6dac52e89051a5063c7d014710dcb4d4abb2ff811a59 \\\n    --hash=sha256:dee0ce50c6a2dd9056c20db781e9c1cfd33e77d2d569f5d1d9321c641bb903d5 \\\n    --hash=sha256:dee60e1de1898bde3b238f18340eec6148986da0455d8ba7848d50470a7a32fb \\\n    --hash=sha256:e2f83e18fe2f4c9e7db597e988f72712c0c3676d337d8b101f6758107c42425b \\\n    --hash=sha256:e3fb1677c720409d5f671e39bac6c9e0e422584e5f518bfd50aa4cbbea02433f \\\n    --hash=sha256:ee2b1b1769f6707a8a445162ea16dddf74285c3964f605877a20e38545c3c462 \\\n    --hash=sha256:ee6acae74a2b91865910eef5e7de37dc6895ad96fa23603d1d27ea69df545015 \\\n    --hash=sha256:ef3f72c9666bba2bab70d2a8b79f2c6d2c1a42a7f7e2b0ec83bb2f9e383950af\n    # via tensorflow\nwurlitzer==3.0.3 \\\n    --hash=sha256:224f5fe70618be3872c05dfddc8c457191ec1870654596279fcc1edadebe3e5b \\\n    --hash=sha256:ffcc584109f5ecd5244abfde4534f22140f8735a4890ce1abd90b4e503f5f427\n    # via tensorflow-decision-forests\nzipp==3.11.0 \\\n    --hash=sha256:83a28fcb75844b5c0cdaf5aa4003c2d728c77e05f5aeabe8e95e56727005fbaa \\\n    --hash=sha256:a7a22e05929290a67401440b39690ae6563279bced5f314609d9d03798f56766\n    # via\n    #   importlib-metadata\n    #   importlib-resources\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Tests with karma_web_test in Bazel\nDESCRIPTION: Setup for running browser tests using the tfjs_web_test macro which leverages karma_web_test to test in multiple browsers through BrowserStack.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/BAZEL_MIGRATION.md#2025-04-23_snippet_6\n\nLANGUAGE: starlark\nCODE:\n```\nload(\"//tools:tfjs_web_test.bzl\", \"tfjs_web_test\")\n\ntfjs_web_test(\n    name = \"tfjs-core_test\",\n    srcs = [\n        \"//tfjs-core/src:tfjs-core_test_bundle\",\n    ],\n    browsers = [\n        \"bs_chrome_mac\",\n        \"bs_firefox_mac\",\n        \"bs_safari_mac\",\n        \"bs_ios_12\",\n        \"bs_android_10\",\n        \"win_10_chrome\",\n    ],\n    static_files = [\n        # Listed here so sourcemaps are served\n        \"//tfjs-core/src:tfjs-core_test_bundle\",\n        # For the webworker\n        \":tf-core.min.js\",\n        \":tf-core.min.js.map\",\n        \"//tfjs-backend-cpu:tf-backend-cpu.min.js\",\n        \"//tfjs-backend-cpu:tf-backend-cpu.min.js.map\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Deploying the TFDF package\nDESCRIPTION: Shell command for building the TFDF package for NPM deployment.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-tfdf/README.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn build-npm\n```\n\n----------------------------------------\n\nTITLE: Linking Local TensorFlow.js Node Package in Dependent Projects\nDESCRIPTION: Commands to be run in dependent packages to link the locally published tfjs-node package through yalc and compile the node native addon locally.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/DEVELOPMENT.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ yalc link @tensorflow/tfjs-node\n$ cd .yalc/@tensorflow/tfjs-node\n$ yarn && yarn build-addon-from-source\n$ cd ../../..\n```\n\n----------------------------------------\n\nTITLE: Installing TensorFlow.js AutoML via npm/yarn\nDESCRIPTION: Command to install the TensorFlow.js AutoML package using npm or yarn package managers.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-automl/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @tensorflow/tfjs-automl\n```\n\n----------------------------------------\n\nTITLE: Installing TensorFlow.js in Python\nDESCRIPTION: This command installs the TensorFlow.js package using pip. It's a prerequisite for running the benchmarks.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-layers/demos/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install tensorflowjs\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Menu for Benchmark Tool\nDESCRIPTION: Commands to show the help menu and available optional arguments in the shell window.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/benchmarks/browserstack-benchmark/README.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnode app.js --h\n```\n\nLANGUAGE: shell\nCODE:\n```\nnode app.js --help\n```\n\n----------------------------------------\n\nTITLE: Compiling Native Node Addon from Source Files for TensorFlow.js\nDESCRIPTION: Compiles a new native node addon from the source files instead of using pre-compiled binaries.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/DEVELOPMENT.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn build-addon-from-source\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks with a Pre-configured JSON File\nDESCRIPTION: Command to run benchmarks using a pre-defined configuration file that specifies models, backends, and browsers to test.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/benchmarks/browserstack-benchmark/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnode app.js --benchmarks=relative_file_path.json\n```\n\n----------------------------------------\n\nTITLE: Running Specific Python Tests with Filtering\nDESCRIPTION: Command to run a specific Python test case using Bazel's test_filter option. This allows targeting a particular test method for focused debugging or verification.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/python/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn bazel test //tfjs-converter/python/tensorflowjs/converters:tf_saved_model_conversion_v2_test --test_filter=ConvertTest.test_convert_saved_model_v1\n```\n\n----------------------------------------\n\nTITLE: Setting Up Node.js Tests for TensorFlow.js Core with Bazel\nDESCRIPTION: Example of creating a Bazel test target using nodejs_test rule to run the TensorFlow.js Core tests, including necessary data dependencies and workspace configuration.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/BAZEL_MIGRATION.md#2025-04-23_snippet_3\n\nLANGUAGE: starlark\nCODE:\n```\nload(\"@build_bazel_rules_nodejs//:index.bzl\", \"js_library\", \"nodejs_test\")\n\n# This is necessary for tests to have acess to\n# the package.json so src/version_test.ts can 'require()' it.\njs_library(\n    name = \"package_json\",\n    srcs = [\n        \":package.json\",\n    ],\n)\n\nnodejs_test(\n    name = \"tfjs-core_node_test\",\n    data = [\n        \":package_json\",\n        \"//tfjs-backend-cpu/src:tfjs-backend-cpu_lib\",\n        \"//tfjs-core/src:tfjs-core_lib\",\n        \"//tfjs-core/src:tfjs-core_src_lib\",\n        \"//tfjs-core/src:tfjs-core_test_lib\",\n    ],\n    entry_point = \"//tfjs-core/src:test_node.ts\",\n    link_workspace_root = True,\n    tags = [\"ci\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Running Periodic Subset of Benchmark Models\nDESCRIPTION: Command to run a subset of models specified in the benchmarks file in a cycle, with the subset determined by the date of the month.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/benchmarks/browserstack-benchmark/README.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnode app.js --period=15\n```\n\n----------------------------------------\n\nTITLE: Building tfjs-vis from source with npm\nDESCRIPTION: Commands to install dependencies and build the tfjs-vis library from source using npm.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-vis/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Debugger in Test Code\nDESCRIPTION: Python code to set up the debugpy debugger in a test file. This enables interactive debugging with breakpoints in VSCode by listening on port 5724 for a debugger connection.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/python/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport debugpy\ndebugpy.listen(('localhost', 5724))\nprint(\"Waiting for debugger to connect. See tfjs-converter python README\")\ndebugpy.wait_for_client()\n```\n\n----------------------------------------\n\nTITLE: Pushing Benchmark Results to Firestore\nDESCRIPTION: Command to enable pushing successful benchmark results to a Firestore database for storage and analysis.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/benchmarks/browserstack-benchmark/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnode app.js --firestore\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TensorFlow.js MobileNet Demo\nDESCRIPTION: Commands to install dependencies and start a local web server for running the MobileNet demo. The server starts on localhost:1234 and automatically opens the demo page in a browser.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/demo/mobilenet/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd demo # If not already in the demo directory.\nyarn # Installs dependencies.\nyarn mobilenet # Starts a web server and opens a page. Also watches for changes.\n```\n\n----------------------------------------\n\nTITLE: Deploying the TensorFlow.js WASM Backend to NPM\nDESCRIPTION: Commands to build the NPM package for the TensorFlow.js WASM backend and publish it to the NPM registry. This involves running a build script followed by the npm publish command.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n./scripts/build-npm.sh\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Running Filtered Tests\nDESCRIPTION: Command to run a subset of tests by using grep pattern matching.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/DEVELOPMENT.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn test --//:grep=multinomial\n```\n\n----------------------------------------\n\nTITLE: Enabling GPU for local development\nDESCRIPTION: Shell command to enable GPU support for local development of TensorFlow.js Node.js backend.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/README.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n# Switch to GPU for local development:\nyarn enable-gpu\n```\n\n----------------------------------------\n\nTITLE: Preparing and Building the Demo\nDESCRIPTION: Commands to navigate to the demo directory and prepare it by installing dependencies.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-nodegl/demo/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd demo\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Running Subset of Tests with Browser Specification\nDESCRIPTION: Command to run a specific subset of tests in a particular browser using pattern matching, which is useful for focused testing during development without running the entire test suite.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/README.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nyarn test --browsers=Chrome --grep='execute'\n> ...\n> Chrome 64.0.3282 (Linux 0.0.0): Executed 39 of 39 SUCCESS (0.129 secs / 0 secs)\n```\n\n----------------------------------------\n\nTITLE: Publishing TensorFlow.js Node Package Locally for Testing\nDESCRIPTION: Packs the tfjs-node package and publishes it locally through yalc for testing in another repository.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/DEVELOPMENT.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn publish-local\n```\n\n----------------------------------------\n\nTITLE: Installing tfjs-vis with yarn\nDESCRIPTION: Command to install the tfjs-vis library using yarn package manager.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-vis/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @tensorflow/tfjs-vis\n```\n\n----------------------------------------\n\nTITLE: Building and Uploading Node Addon on Windows for TensorFlow.js\nDESCRIPTION: Command to build and upload the native node addon specifically for Windows platforms, to be run on a Windows machine.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/DEVELOPMENT.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn upload-windows-addon\n```\n\n----------------------------------------\n\nTITLE: Linking Local tfjs-layers Package to Main tfjs Repo\nDESCRIPTION: Command to make the tfjs repository depend on a locally published version of tfjs-layers for testing changes.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-layers/DEVELOPMENT.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn link-local @tensorflow/tfjs-layers\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests with Bazel\nDESCRIPTION: Command to run all Python tests for the TensorFlow.js package using Bazel. This executes the test suite to verify the functionality of the Python converter code.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/python/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn bazel test //tfjs-converter/python/...\n```\n\n----------------------------------------\n\nTITLE: Setting up TensorFlow.js Demo Environment\nDESCRIPTION: Commands to initialize and run the TensorFlow.js demo server. Includes package installation and starting a development server with hot reloading on port 1234.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/demo/control_flow/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd demo # If not already in the demo directory.\nyarn # Installs dependencies.\nyarn control_flow # Starts a web server and opens a page. Also watches for changes.\n```\n\n----------------------------------------\n\nTITLE: Building and Running tfjs-vis Demo\nDESCRIPTION: Command line instructions for building and running the tfjs-vis renderers demo locally. Requires running build and watch commands in specific directories.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-vis/demos/api/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn build-npm\nyarn watch\n```\n\n----------------------------------------\n\nTITLE: Deploying Nightly Build Trigger Function in Google Cloud\nDESCRIPTION: This command deploys the 'nightly_tfjs' Cloud Function, which triggers a nightly build on the master branch. It uses Node.js 14 runtime and is triggered by the 'nightly_tfjs' topic.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/scripts/cloud_funcs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngcloud functions deploy nightly_tfjs \\\n  --runtime nodejs14 \\\n  --trigger-topic nightly_tfjs\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for TensorFlow.js Boston Housing Example\nDESCRIPTION: Commands to install the required npm packages for the TensorFlow.js Boston Housing example using either npm or yarn package managers.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-data/demo/boston-housing/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install\n# Or\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Running the MobileNet Inference Demo\nDESCRIPTION: Command to execute the MobileNet inference on an image (dog.jpg) using Node.js.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-nodegl/demo/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ node run_mobilenet_inference.js dog.jpg\n```\n\n----------------------------------------\n\nTITLE: Building npm Package in tfjs Repository\nDESCRIPTION: Command to build a new npm package in the tfjs repository after linking to locally modified dependencies.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-layers/DEVELOPMENT.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn build-npm\n```\n\n----------------------------------------\n\nTITLE: Deploying Nightly Build Trigger Function in Google Cloud\nDESCRIPTION: Command to deploy the converter_python_nightly Cloud Function that triggers nightly builds. The function runs on Node.js 8 runtime and is triggered by a Cloud Pub/Sub topic.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/scripts/cloud_funcs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngcloud functions deploy converter_python_nightly \\\n  --runtime nodejs8 \\\n  --trigger-topic converter_python_nightly\n```\n\n----------------------------------------\n\nTITLE: Listing Package Dependencies with Hashes\nDESCRIPTION: This snippet shows the format used to specify package dependencies with their versions and SHA256 hashes. It includes entries for mccabe, ml-dtypes, msgpack, namex, nest-asyncio, and numpy packages.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/python/requirements-dev_lock.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nmccabe==0.6.1 \\\n    --hash=sha256:ab8a6258860da4b6677da4bd2fe5dc2c659cff31b3ee4f7f5d64e79735b80d42 \\\n    --hash=sha256:dd8d182285a0fe56bace7f45b5e7d1a6ebcbf524e8f3bd87eb0f125271b8831f\n    # via pylint\nml-dtypes==0.3.2 \\\n    --hash=sha256:2c34f2ba9660b21fe1034b608308a01be82bbef2a92fb8199f24dc6bad0d5226 \\\n    --hash=sha256:3a17ef2322e60858d93584e9c52a5be7dd6236b056b7fa1ec57f1bb6ba043e33 \\\n    --hash=sha256:533059bc5f1764fac071ef54598db358c167c51a718f68f5bb55e3dee79d2967\n    # via\n    #   jax\n    #   jaxlib\n    #   keras\n    #   tensorflow\nmsgpack==1.0.4 \\\n    --hash=sha256:002b5c72b6cd9b4bafd790f364b8480e859b4712e91f43014fe01e4f957b8467 \\\n    --hash=sha256:0a68d3ac0104e2d3510de90a1091720157c319ceeb90d74f7b5295a6bee51bae \\\n    --hash=sha256:0df96d6eaf45ceca04b3f3b4b111b86b33785683d682c655063ef8057d61fd92\n    # via\n    #   flax\n    #   orbax-checkpoint\nnamex==0.0.7 \\\n    --hash=sha256:84ba65bc4d22bd909e3d26bf2ffb4b9529b608cb3f9a4336f776b04204ced69b \\\n    --hash=sha256:8a4f062945f405d77cb66b907f16aa2fd83681945e998be840eb6c4154d40108\n    # via keras\nnest-asyncio==1.5.7 \\\n    --hash=sha256:5301c82941b550b3123a1ea772ba9a1c80bad3a182be8c1a5ae6ad3be57a9657 \\\n    --hash=sha256:6a80f7b98f24d9083ed24608977c09dd608d83f91cccc24c9d2cba6d10e01c10\n    # via orbax-checkpoint\nnumpy==1.23.5 \\\n    --hash=sha256:01dd17cbb340bf0fc23981e52e1d18a9d4050792e8fb8363cecbf066a84b827d \\\n    --hash=sha256:06005a2ef6014e9956c09ba07654f9837d9e26696a0470e42beedadb78c11b07 \\\n    --hash=sha256:09b7847f7e83ca37c6e627682f145856de331049013853f344f37b0c9690e3df\n```\n\n----------------------------------------\n\nTITLE: Running Tests for TensorFlow.js Node.js Bindings\nDESCRIPTION: Executes the test suite for the TensorFlow.js Node.js bindings.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/DEVELOPMENT.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn test\n```\n\n----------------------------------------\n\nTITLE: Deploying send_email Cloud Function for TensorFlow.js in Node.js\nDESCRIPTION: This command deploys the 'send_email' Cloud Function using Node.js 8 runtime. It is triggered by the 'cloud-builds' topic and sends email notifications about nightly build status. It requires Mailgun API key and Hangouts URL as environment variables.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-core/scripts/cloud_funcs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngcloud functions deploy send_email \\\n  --runtime nodejs8 \\\n  --stage-bucket learnjs-174218_cloudbuild \\\n  --trigger-topic cloud-builds \\\n  --set-env-vars MAILGUN_API_KEY=\"[API_KEY_HERE]\",HANGOUTS_URL=\"[URL_HERE]\"\n```\n\n----------------------------------------\n\nTITLE: WSL Development Setup\nDESCRIPTION: Commands for setting up development environment in Windows Subsystem for Linux (WSL).\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/DEVELOPMENT.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Add yarn bin to the path\necho \"export PATH=$PATH:~/.yarn/bin/\" >> ~/.bashrc &&\n# Set CHROME_BIN. Change this if your CHROME_BIN has a different path.\necho \"export CHROME_BIN=/mnt/c/Program\\ Files/Google/Chrome/Application/chrome.exe\" >> ~/.bashrc &&\nsource ~/.bashrc &&\n# Clone tfjs.\ngit clone https://github.com/tensorflow/tfjs.git &&\ncd tfjs &&\n# Create the .bazelrc.user file for WSL.\necho \"# Pass necessary WSL variables for running in Windows Subsystem for Linux.\n# WSLENV and WSL_DISTRO_NAME are build-in variables that are needed for running\n# the 'wslpath' command, which Karma uses to resolve file paths.\n# DISPLAY=:0 is passed to the Chrome process to make it launch in a window\n# since running Chrome headlessly from WSL does not seem to work. If you get\n# this working, please send a PR updating these docs (or open an issue :).\nrun --test_env=CHROME_BIN --test_env=WSLENV --test_env=WSL_DISTRO_NAME --define DISPLAY=:0\ntest --test_env=CHROME_BIN --test_env=WSLENV --test_env=WSL_DISTRO_NAME --define DISPLAY=:0\" > .bazelrc.user &&\nprintf \"\\n\\nDone! Try running a browser test to verify the installation worked, e.g. 'cd tfjs-core && yarn && yarn test-browser'\\n\"\n```\n\n----------------------------------------\n\nTITLE: Running tfjs2keras Integration Tests\nDESCRIPTION: Command to run integration tests that verify models exported by tfjs-layers can be correctly loaded by Keras in Python.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-layers/DEVELOPMENT.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn tfjs2keras\n```\n\n----------------------------------------\n\nTITLE: Exporting BrowserStack Credentials in Shell\nDESCRIPTION: Sets environment variables for BrowserStack authentication credentials required to access their Automate service.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/benchmarks/browserstack-benchmark/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport BROWSERSTACK_USERNAME=YOUR_USERNAME\nexport BROWSERSTACK_ACCESS_KEY=YOUR_ACCESS_KEY\n```\n\n----------------------------------------\n\nTITLE: Running Cloud-compatible Version of Benchmarking\nDESCRIPTION: Command to run a GCP-compatible version of the benchmarking tool by blocking the local server.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/benchmarks/browserstack-benchmark/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnode app.js --cloud\n```\n\n----------------------------------------\n\nTITLE: Building NPM Package\nDESCRIPTION: Commands for building and packaging NPM tarballs for distribution.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/DEVELOPMENT.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Example for tfjs-core\n$ yarn build-npm\n# The output is located at ../dist/bin/tfjs-core/tfjs-core_pkg/\n# You can also package as a tar with\n$ yarn bazel run :tfjs-core_pkg.pack\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Retry Attempts\nDESCRIPTION: Command to set the maximum number of attempts a benchmark has to succeed before giving up, providing resilience against transient failures.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/benchmarks/browserstack-benchmark/README.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnode app.js --maxTries=positive_integer\n```\n\n----------------------------------------\n\nTITLE: Configuring WebPack for WASM Files\nDESCRIPTION: WebPack configuration that enables loading WASM files. This snippet adds a rule to the webpack.config.js file to handle .wasm files using file-loader, which provides the serving URL when importing WASM files.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/starter/webpack/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule: {\n  rules: [\n    {\n      test: /\\.wasm$/i,\n      type: 'javascript/auto',\n      use: [\n        {\n          loader: 'file-loader',\n        },\n      ],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Running MNIST Internals Demo Locally with Yarn\nDESCRIPTION: Instructions for setting up and running the MNIST internals demo using Yarn package manager. It involves building the tfjs-vis package and watching the demos folder for changes.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-vis/demos/mnist_internals/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- run `yarn build-npm` in the `tfjs-vis` folder\n- run `yarn watch` from the `demos` folder\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Date for Model Selection\nDESCRIPTION: Command to specify a date for selecting models when using the period parameter, allowing for deterministic model selection.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/benchmarks/browserstack-benchmark/README.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnode app.js --period=15 --date=1\n```\n\n----------------------------------------\n\nTITLE: Deploying Email Notification Function in Google Cloud\nDESCRIPTION: This command deploys the 'send_email' Cloud Function, which sends email and chat notifications about the nightly build status. It uses Node.js 14 runtime, is triggered by the 'cloud-builds' topic, and requires Mailgun API key and Hangouts URL as environment variables.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/scripts/cloud_funcs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngcloud functions deploy send_email \\\n  --runtime nodejs14 \\\n  --stage-bucket learnjs-174218_cloudbuild \\\n  --trigger-topic cloud-builds \\\n  --set-env-vars MAILGUN_API_KEY=\"[API_KEY_HERE]\",HANGOUTS_URL=\"[URL_HERE]\"\n```\n\n----------------------------------------\n\nTITLE: Using Local TensorFlow.js Builds\nDESCRIPTION: Command to use locally built TensorFlow.js packages instead of public CDNs, enabling testing of development versions.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/benchmarks/browserstack-benchmark/README.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnode app.js --localBuild=core,webgl,wasm,cpu,layers,converter,automl\n```\n\n----------------------------------------\n\nTITLE: Including TensorFlow.js AutoML via CDN\nDESCRIPTION: HTML script tag to include the TensorFlow.js AutoML package via a Content Delivery Network (CDN).\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-automl/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-automl\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Parallel Benchmarks\nDESCRIPTION: Command to set the maximum number of benchmarks that can run in parallel, which helps control resource usage.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/benchmarks/browserstack-benchmark/README.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnode app.js --maxBenchmarks=positive_integer\n```\n\n----------------------------------------\n\nTITLE: Deploying sync_reactnative Cloud Function for TensorFlow.js in Node.js\nDESCRIPTION: This command deploys the 'sync_reactnative' Cloud Function using Node.js 8 runtime. It is triggered by the 'sync_reactnative' topic and syncs the current build of the tfjs-react-native integration app to BrowserStack. It requires Hangouts URLs as environment variables.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-core/scripts/cloud_funcs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngcloud functions deploy sync_reactnative \\\n  --runtime nodejs8 \\\n  --trigger-topic sync_reactnative \\\n  --set-env-vars HANGOUTS_URL=\"[URL_HERE]\",BOTS_HANGOUTS_URL=\"[URL_HERE]\"\n```\n\n----------------------------------------\n\nTITLE: Specifying TensorFlow.js NPM Version\nDESCRIPTION: Command to specify a particular npm version of the TensorFlow.js library to benchmark instead of using the latest version.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/benchmarks/browserstack-benchmark/README.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnode app.js --npmVersion=4.4.0\n```\n\n----------------------------------------\n\nTITLE: Moving TypeScript Library Outputs to Dist Directory\nDESCRIPTION: Setup for copying TypeScript library outputs to the dist directory while preserving the file structure, used for preparing npm package contents.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/BAZEL_MIGRATION.md#2025-04-23_snippet_8\n\nLANGUAGE: starlark\nCODE:\n```\nload(\"//tools:copy_to_dist.bzl\", \"copy_ts_library_to_dist\")\n\ncopy_ts_library_to_dist(\n    name = \"copy_src_to_dist\",\n    srcs = [\n        \"//tfjs-core/src:tfjs-core_lib\",\n        \"//tfjs-core/src:tfjs-core_src_lib\",\n        \"//tfjs-core/src:tfjs-core_test_lib\",\n    ],\n    root = \"src\", # Consider 'src' to be the root directory of the copy\n                  # (i.e. create 'dist/index.js' instead of 'dist/src/index.js')\n    dest_dir = \"dist\", # Where to copy the files to. Defaults to 'dist', so it can\n                       # actually be omitted in this case.\n)\n```\n\n----------------------------------------\n\nTITLE: Building and Watching the TensorFlow.js Boston Housing Example\nDESCRIPTION: Command to build the example and continuously watch for changes, which rebuilds the project automatically when source files are modified.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-data/demo/boston-housing/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn watch\n```\n\n----------------------------------------\n\nTITLE: HTML Image Element for Classification\nDESCRIPTION: HTML code defining an image element to be used for image classification with the AutoML model.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-automl/README.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<img id=\"img\" src=\"PATH_TO_IMAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Bazel BUILD File for TensorFlow.js Core\nDESCRIPTION: Example of a Bazel BUILD file for the tfjs-core/src directory that compiles TypeScript sources using ts_library rules with appropriate module naming.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/BAZEL_MIGRATION.md#2025-04-23_snippet_0\n\nLANGUAGE: starlark\nCODE:\n```\nload(\"//tools:defaults.bzl\", \"ts_library\")\n\nTEST_SRCS = [\n    \"**/*_test.ts\",\n    \"image_test_util.ts\",\n]\n\n# Compiles the majority of tfjs-core using the `@tensorflow/tfjs-core/dist`\n# module name.\nts_library(\n    name = \"tfjs-core_src_lib\",\n    srcs = glob(\n        [\"**/*.ts\"],\n        exclude = TEST_SRCS + [\"index.ts\"],\n    ),\n    module_name = \"@tensorflow/tfjs-core/dist\",\n    deps = [\n        \"@npm//@types\",\n        \"@npm//jasmine-core\",\n        \"@npm//seedrandom\",\n    ],\n)\n\n# Compiles the `index.ts` entrypoint of tfjs-core separately from the rest of\n# the sources in order to use the `@tensorflow/tfjs-core` module name instead\n# of `@tensorflow/tfjs-core/dist`,\nts_library(\n    name = \"tfjs-core_lib\",\n    srcs = [\"index.ts\"],\n    module_name = \"@tensorflow/tfjs-core\",\n    deps = [\n        \":tfjs-core_src_lib\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Excluding Tests for Unimplemented Operations in CPU Backend\nDESCRIPTION: This code snippet shows how to exclude tests for operations that are not yet implemented in the CPU backend of TensorFlow.js. It adds a condition to the customInclude method in the run_tests.ts file.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/CONTRIBUTING_MISSING_OP.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Not implemented yet.\nif (testName.includes(test_name)) {\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Publishing Scripts in package.json\nDESCRIPTION: JSON configuration for package.json scripts that enable building and publishing the package using Bazel, used by the monorepo release process.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/BAZEL_MIGRATION.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\" {\n    \"publish-npm\": \"bazel run :tfjs-core_pkg.publish\",\n    \"build\": \"bazel build :tfjs-core_pkg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Bundling TensorFlow.js Core Package with Bazel\nDESCRIPTION: Example of the root BUILD.bazel file for tfjs-core that uses the tfjs_bundle macro to create various bundle formats for different environments.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/BAZEL_MIGRATION.md#2025-04-23_snippet_1\n\nLANGUAGE: starlark\nCODE:\n```\nload(\"//tools:tfjs_bundle.bzl\", \"tfjs_bundle\")\n\ntfjs_bundle(\n    name = \"tf-core\",\n    entry_point = \"//tfjs-core/src:index.ts\",\n    external = [\n        \"node-fetch\",\n        \"util\",\n    ],\n    umd_name = \"tf\",\n    deps = [\n        \"//tfjs-core/src:tfjs-core_lib\",\n        \"//tfjs-core/src:tfjs-core_src_lib\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Excluding Tests for Unimplemented Operations in WebGL Backend\nDESCRIPTION: This code snippet demonstrates how to exclude tests for operations that are not yet implemented in the WebGL backend of TensorFlow.js. It adds a condition to the customInclude method in the setup_test.ts file.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/CONTRIBUTING_MISSING_OP.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Not implemented yet.\nif (testName.includes(test_name)) {\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing build-tfjs-foo Script from package.json\nDESCRIPTION: Instructions for removing legacy build scripts from downstream packages' package.json files that are no longer needed after Bazel migration.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/BAZEL_MIGRATION.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"build-deps\": \"....... && yarn build-tfjs-foo\" // <-- Remove 'yarn build-deps-foo'.\n  \"build-tfjs-foo\": \"remove this script\", // <-- Also remove it here.\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local TensorFlow.js Development Environment\nDESCRIPTION: Temporary commands to publish TensorFlow.js locally and link the local package to the Boston Housing example project. This is used for development before moving to tfjs-examples.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-data/demo/boston-housing/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd ../../\nyarn publish-local\ncd demo/boston-housing\nyarn link-local @tensorflow/tfjs-data\n```\n\n----------------------------------------\n\nTITLE: Setting deprecated CDN storage using environment variables\nDESCRIPTION: Commands to set the custom CDN storage location for TensorFlow.js binaries using the deprecated CDN_STORAGE environment variable.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/README.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nCDN_STORAGE=\"https://yourmirrorofchoice.com/\" npm install <package>\n(or)\nCDN_STORAGE=\"https://yourmirrorofchoice.com/\" yarn install <package>\n```\n\n----------------------------------------\n\nTITLE: Bundling Tests with Esbuild in Bazel\nDESCRIPTION: Configuration for bundling TFJS Core tests using esbuild in Bazel, specifying entry points, external dependencies, and required library dependencies.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/BAZEL_MIGRATION.md#2025-04-23_snippet_5\n\nLANGUAGE: starlark\nCODE:\n```\nload(\"//tools:defaults.bzl\", \"esbuild\")\n\nesbuild(\n    name = \"tfjs-core_test_bundle\",\n    testonly = True,\n    entry_point = \"setup_test.ts\",\n    external = [\n        # webworker tests call 'require('@tensorflow/tfjs')', which\n        # is external to the test bundle.\n        # Note: This is not a bazel target. It's just a string.\n        \"@tensorflow/tfjs\",\n        \"worker_threads\",\n        \"util\",\n    ],\n    sources_content = True,\n    deps = [\n        \":tfjs-core_lib\",\n        \":tfjs-core_test_lib\",\n        \"//tfjs-backend-cpu/src:tfjs-backend-cpu_lib\",\n        \"//tfjs-core:package_json\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Kernel Name and Interface in TypeScript\nDESCRIPTION: Demonstrates how to add necessary kernel names and interfaces to the kernel_names.ts file, including an identifier for the kernel and types for Inputs.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-core/development/op_modularization.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const SquaredDifference = 'SquaredDifference';\nexport type SquaredDifferenceInputs = Pick<NamedTensorInfoMap, 'a'|'b'>;\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for TensorFlow.js\nDESCRIPTION: This snippet shows how to specify Python package dependencies with exact versions and hashes in a requirements file. It includes packages like TensorFlow, Keras, NumPy, and other utilities needed for the TensorFlow.js project.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/python/requirements-dev_lock.txt#2025-04-23_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nabsl-py==1.3.0 \\\n    --hash=sha256:34995df9bd7a09b3b8749e230408f5a2a2dd7a68a0d33c12a3d0cb15a041a507 \\\n    --hash=sha256:463c38a08d2e4cef6c498b76ba5bd4858e4c6ef51da1a5a1f27139a022e20248\n    # via\n    #   chex\n    #   keras\n    #   optax\n    #   orbax-checkpoint\n    #   tensorboard\n    #   tensorflow\n    #   tensorflow-decision-forests\nastroid==2.5 \\\n    --hash=sha256:87ae7f2398b8a0ae5638ddecf9987f081b756e0e9fc071aeebdca525671fc4dc \\\n    --hash=sha256:b31c92f545517dcc452f284bc9c044050862fbe6d93d2b3de4a215a6b384bf0d\n    # via pylint\nastunparse==1.6.3 \\\n    --hash=sha256:5ad93a8456f0d084c3456d059fd9a92cce667963232cbf763eac3bc5b7940872 \\\n    --hash=sha256:c2652417f2c8b5bb325c885ae329bdf3f86424075c4fd1a128674bc6fba4b8e8\n    # via tensorflow\n```\n\n----------------------------------------\n\nTITLE: Compiling TensorFlow.js Tests with Bazel\nDESCRIPTION: Example of using ts_library to compile test files for tfjs-core in Bazel, with appropriate module naming for test file publication.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/BAZEL_MIGRATION.md#2025-04-23_snippet_2\n\nLANGUAGE: starlark\nCODE:\n```\nload(\"//tools:defaults.bzl\", \"ts_library\")\n\nts_library(\n    name = \"tfjs-core_test_lib\",\n    srcs = glob(TEST_SRCS),\n    # TODO(msoulanille): Mark this as testonly once it's no longer needed in the\n    # npm package (for other downstream packages' tests).\n    module_name = \"@tensorflow/tfjs-core/dist\",\n    deps = [\n        \":tfjs-core_lib\",\n        \":tfjs-core_src_lib\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Test Imports with enumerate_tests in Bazel\nDESCRIPTION: Configuration for the enumerate_tests rule that generates a tests.ts file with imports for all test entrypoints, making them available to the test bundle.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/BAZEL_MIGRATION.md#2025-04-23_snippet_7\n\nLANGUAGE: starlark\nCODE:\n```\nload(\"//tools:enumerate_tests.bzl\", \"enumerate_tests\")\n\n# Generates the 'tests.ts' file that imports all test entrypoints.\nenumerate_tests(\n    name = \"tests\",\n    srcs = [\":all_test_entrypoints\"], # all_test_entrypoints is a filegroup\n    root_path = \"tfjs-core/src\",\n)\n```\n\n----------------------------------------\n\nTITLE: Deploying trigger_nightly Cloud Function for TensorFlow.js in Node.js\nDESCRIPTION: This command deploys the 'nightly' Cloud Function using Node.js 8 runtime. It is triggered by the 'nightly' topic and is responsible for programmatically triggering a Cloud Build on the master branch.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-core/scripts/cloud_funcs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngcloud functions deploy nightly \\\n  --runtime nodejs8 \\\n  --trigger-topic nightly\n```\n\n----------------------------------------\n\nTITLE: Setting custom base URI using environment variables\nDESCRIPTION: Commands to set a custom base URI path for TensorFlow.js binaries using environment variables when installing packages.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/README.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nTFJS_NODE_BASE_URI=\"https://yourhost.com/your/path/libtensorflow-\" npm install <package>\n(or)\nTFJS_NODE_BASE_URI=\"https://yourhost.com/your/path/libtensorflow-\" yarn install <package>\n```\n\n----------------------------------------\n\nTITLE: Updating Test Path References for Bazel Migration\nDESCRIPTION: Examples of how to update test file paths in test runner files when migrating to Bazel, changing from TypeScript to JavaScript paths.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/BAZEL_MIGRATION.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst coreTests = 'node_modules/@tensorflow/tfjs-core/src/tests.ts';\nconst unitTests = 'src/**/*_test.ts';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst coreTests = 'tfjs-core/src/tests.js';\nconst unitTests = 'the-package-name/src/**/*_test.js';\n```\n\n----------------------------------------\n\nTITLE: Creating NPM Package with pkg_npm in Bazel\nDESCRIPTION: Configuration for creating an npm package using pkg_npm, including static files and all the build outputs previously copied to the dist directory.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/BAZEL_MIGRATION.md#2025-04-23_snippet_11\n\nLANGUAGE: starlark\nCODE:\n```\nload(\"@build_bazel_rules_nodejs//:index.bzl\", \"pkg_npm\")\n\npkg_npm(\n    name = \"tfjs-core_pkg\",\n    package_name = \"@tensorflow/tfjs-core\",\n    srcs = [\n        # Add any static files the package should include here\n        \"package.json\",\n        \"README.md\",\n    ],\n    tags = [\"ci\"],\n    deps = [\n        \":copy_bundles\",\n        \":copy_miniprogram\",\n        \":copy_miniprogram_map\",\n        \":copy_src_to_dist\",\n        \":copy_test_snippets\", # <- This is only in core, so I've omitted its\n                               # definition in these docs.\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Deploying React Native Sync Function in Google Cloud\nDESCRIPTION: This command deploys the 'sync_reactnative' Cloud Function, which syncs the current build of the tfjs-react-native integration app to BrowserStack. It uses Node.js 14 runtime, is triggered by the 'sync_reactnative' topic, and requires Hangouts URLs as environment variables.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/scripts/cloud_funcs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngcloud functions deploy sync_reactnative \\\n  --runtime nodejs14 \\\n  --trigger-topic sync_reactnative \\\n  --set-env-vars HANGOUTS_URL=\"[URL_HERE]\",BOTS_HANGOUTS_URL=\"[URL_HERE]\"\n```\n\n----------------------------------------\n\nTITLE: Using direct node path for custom module script in package.json\nDESCRIPTION: Example of the workaround command used in package.json files to call the custom module CLI script directly through the node_modules path instead of using npx.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/custom_module/development.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"make-custom-tfjs-modules\": \"node ./node_modules/@tensorflow/tfjs/dist/tools/custom_module/cli.js --config app_tfjs_config.json\",\n```\n\n----------------------------------------\n\nTITLE: Configuring Downstream Dependency Links in package.json\nDESCRIPTION: JSON configuration for downstream packages to correctly reference Bazel-built packages through the link-package system instead of direct npm dependencies.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/BAZEL_MIGRATION.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"devDependencies\": {\n  \"@tensorflow/tfjs-core\": \"link:../link-package/node_modules/@tensorflow/tfjs-core\",\n  \"@tensorflow/tfjs-foo\": \"link:../link-package/node_modules/@tensorflow/tfjs-foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Package to link-package Build System\nDESCRIPTION: TypeScript configuration for adding a new package to the link-package build system, which facilitates correct Node module resolution between Bazel outputs.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/BAZEL_MIGRATION.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst PACKAGES: ReadonlySet<string> = new Set([\n  ..., 'tfjs-foo',\n]);  \n```\n\n----------------------------------------\n\nTITLE: Copying Bundle Outputs to Dist Directory\nDESCRIPTION: Configuration for copying bundle files generated by tfjs_bundle to the dist directory, preparing them for npm package distribution.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/BAZEL_MIGRATION.md#2025-04-23_snippet_9\n\nLANGUAGE: starlark\nCODE:\n```\ncopy_to_dist(\n    name = \"copy_bundles\",\n    srcs = [\n        \":tf-core\",\n        \":tf-core.node\",\n        \":tf-core.es2017\",\n        \":tf-core.es2017.min\",\n        \":tf-core.fesm\",\n        \":tf-core.fesm.min\",\n        \":tf-core.min\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with Hashes\nDESCRIPTION: This snippet defines Python package dependencies with their versions and SHA256 hashes. It includes packages like msgpack, namex, nest-asyncio, numpy, opt-einsum, optax, and optree. The hashes are used to verify the integrity of the downloaded packages.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/python/requirements_lock.txt#2025-04-23_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nmsgpack==1.0.4 \\\n    --hash=sha256:002b5c72b6cd9b4bafd790f364b8480e859b4712e91f43014fe01e4f957b8467 \\\n    --hash=sha256:0a68d3ac0104e2d3510de90a1091720157c319ceeb90d74f7b5295a6bee51bae \\\n    # ... (additional hashes omitted for brevity)\n\nnamex==0.0.7 \\\n    --hash=sha256:84ba65bc4d22bd909e3d26bf2ffb4b9529b608cb3f9a4336f776b04204ced69b \\\n    --hash=sha256:8a4f062945f405d77cb66b907f16aa2fd83681945e998be840eb6c4154d40108\n\nnest-asyncio==1.5.7 \\\n    --hash=sha256:5301c82941b550b3123a1ea772ba9a1c80bad3a182be8c1a5ae6ad3be57a9657 \\\n    --hash=sha256:6a80f7b98f24d9083ed24608977c09dd608d83f91cccc24c9d2cba6d10e01c10\n\nnumpy==1.23.5 \\\n    --hash=sha256:01dd17cbb340bf0fc23981e52e1d18a9d4050792e8fb8363cecbf066a84b827d \\\n    --hash=sha256:06005a2ef6014e9956c09ba07654f9837d9e26696a0470e42beedadb78c11b07 \\\n    # ... (additional hashes omitted for brevity)\n\nopt-einsum==3.3.0 \\\n    --hash=sha256:2455e59e3947d3c275477df7f5205b30635e266fe6dc300e3d9f9646bfcea147 \\\n    --hash=sha256:59f6475f77bbc37dcf7cd748519c0ec60722e91e63ca114e68821c0c54a46549\n\noptax==0.1.4 \\\n    --hash=sha256:12fcf33bd682f9a162a3deb097f864130c3224d76771af2ba09410de80399a9b \\\n    --hash=sha256:fb7a0550d57a6636164a3de25986a8a19be8ff6431fcdf1225b4e05175810f22\n\noptree==0.11.0 \\\n    --hash=sha256:00a63f10d4a476e8e9aa2988daba9b2e88cb369c5aacc12545957d7d00bcd1a7 \\\n    --hash=sha256:0db6968394096223881053dffdcaf2b8e220fd85db904f14aa931e4dc422c046 \\\n    # ... (additional hashes omitted for brevity)\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js architecture on Mac OS X with M1 chip\nDESCRIPTION: Command to check that Node.js is running in arm64 architecture mode on Mac OS X with M1 chip.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnode -e 'console.log(os.arch())'\n```\n\n----------------------------------------\n\nTITLE: Adding Path Mapping to Repo-wide TSLint Config\nDESCRIPTION: Instructions for adding a new Bazel package to the repository-wide TSLint configuration by updating path mappings in tsconfig_tslint.json.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/BAZEL_MIGRATION.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"paths\": {\n  ...,\n  \"@tensorflow/the-new-package\": [\"the-new-package/src/index.ts\"],\n  \"@tensorflow/the-new-package/dist/*\": [\"the-new-package/src/*\"]\n\n```\n\n----------------------------------------\n\nTITLE: Preparing WeChat Miniprogram Files\nDESCRIPTION: Configuration for copying and renaming minified JavaScript files for WeChat miniprogram compatibility, creating the required directory structure.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/BAZEL_MIGRATION.md#2025-04-23_snippet_10\n\nLANGUAGE: starlark\nCODE:\n```\nload(\"@bazel_skylib//rules:copy_file.bzl\", \"copy_file\")\n\ncopy_file(\n    name = \"copy_miniprogram\",\n    src = \":tf-core.min.js\",\n    out = \"dist/miniprogram/index.js\",\n)\n\ncopy_file(\n    name = \"copy_miniprogram_map\",\n    src = \":tf-core.min.js.map\",\n    out = \"dist/miniprogram/index.js.map\",\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Package Dependencies from Requirements\nDESCRIPTION: Requirements file that specifies exact versions of Python packages needed for development and debugging. Includes conditional dependency for pylint that only applies to Python 3+ environments.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/python/requirements-dev.txt#2025-04-23_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\n-r requirements.txt\nPyInquirer==1.0.3\npylint==2.5.0; python_version > '3.0'\nsetuptools==65.6.3\ndebugpy==1.6.5\n```\n\n----------------------------------------\n\nTITLE: Displaying Node Version\nDESCRIPTION: Commands to display the Node.js version currently in use by the benchmark tool.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/benchmarks/browserstack-benchmark/README.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnode app.js --v\n```\n\nLANGUAGE: shell\nCODE:\n```\nnode app.js --version\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode command line tools for Mac OS X\nDESCRIPTION: Command to install Xcode command line tools on Mac OS X, which is required for building native modules.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ xcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Standard npx approach for custom module script in package.json\nDESCRIPTION: The normal way to call the custom module CLI that would be used if yarn properly handled bin scripts with linked dependencies.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/custom_module/development.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"make-custom-tfjs-modules\": \"npx tfjs-custom-module --config app_tfjs_config.json\",\n```\n\n----------------------------------------\n\nTITLE: Generating TensorFlow.js Dependencies with Bazel\nDESCRIPTION: Command used to autogenerate the dependencies requirements file for TensorFlow.js converter using Bazel build system.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/python/requirements_lock.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbazel run //tfjs-converter/python:tensorflowjs_deps_requirements.update\n```\n\n----------------------------------------\n\nTITLE: Running the Image Classification Demo\nDESCRIPTION: Shell commands to run the image classification demo included in the package, which starts a local HTTP server on port 1234.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-automl/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd demo/img_classification\nyarn\nyarn watch\n```\n\n----------------------------------------\n\nTITLE: Referencing External Requirements File in TensorFlow.js Project\nDESCRIPTION: This line references an external requirements.txt file from the tfjs-converter Python directory. This approach allows for maintaining dependencies in a modular way across the TensorFlow.js project.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/e2e/integration_tests/requirements-dev.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-r ../../tfjs-converter/python/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing tfjs-vis with npm\nDESCRIPTION: Command to install the tfjs-vis library using npm package manager.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-vis/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tensorflow/tfjs-vis\n```\n\n----------------------------------------\n\nTITLE: Adding Debugpy Dependency to Bazel BUILD File\nDESCRIPTION: Starlark code to add the debugpy dependency to a test target in a Bazel BUILD file. This is required for interactive debugging support in the tests.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/python/README.md#2025-04-23_snippet_7\n\nLANGUAGE: starlark\nCODE:\n```\n\"//tfjs-converter/python/tensorflowjs:expect_debugpy_installed\"\n```\n\n----------------------------------------\n\nTITLE: Example of Nested Object Serialization in Keras JSON Format\nDESCRIPTION: A TypeScript interface example showing how nested objects are represented in Keras JSON serialization format, with a FooSerialization containing primitive values and a nested QuxSerialization object.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-layers/src/keras_format/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nFooSerialization {\n  class_name: 'Foo';\n  config: {\n    bar: string;\n    baz: number[];\n    qux: QuxSerialization;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Python with path configuration for Windows\nDESCRIPTION: Command to install Python and add it to the system PATH variable using the windows-build-tools package. This resolves the 'python2 not found' error that can occur during the tfjs-node installation process.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-node/WINDOWS_TROUBLESHOOTING.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ npm --add-python-to-path='true' --debug install --global windows-build-tools\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies for TensorFlow.js\nDESCRIPTION: A comprehensive list of Python package dependencies with exact version pinning and hash verification. This requirements-style file ensures reproducible environments by specifying exact versions and hash codes for verification, preventing dependency issues and ensuring security.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/python/requirements_lock.txt#2025-04-23_snippet_1\n\nLANGUAGE: pip\nCODE:\n```\nabsl-py==1.3.0 \\\n    --hash=sha256:34995df9bd7a09b3b8749e230408f5a2a2dd7a68a0d33c12a3d0cb15a041a507 \\\n    --hash=sha256:463c38a08d2e4cef6c498b76ba5bd4858e4c6ef51da1a5a1f27139a022e20248\n    # via\n    #   chex\n    #   keras\n    #   optax\n    #   orbax-checkpoint\n    #   tensorboard\n    #   tensorflow\n    #   tensorflow-decision-forests\nastunparse==1.6.3 \\\n    --hash=sha256:5ad93a8456f0d084c3456d059fd9a92cce667963232cbf763eac3bc5b7940872 \\\n    --hash=sha256:c2652417f2c8b5bb325c885ae329bdf3f86424075c4fd1a128674bc6fba4b8e8\n    # via tensorflow\ncached-property==1.5.2 \\\n    --hash=sha256:9fa5755838eecbb2d234c3aa390bd80fbd3ac6b6869109bfc1b499f7bd89a130 \\\n    --hash=sha256:df4f613cf7ad9a588cc381aaf4a512d26265ecebd5eb9e1ba12f1319eb85a6a0\n    # via orbax-checkpoint\ncertifi==2022.12.7 \\\n    --hash=sha256:35824b4c3a97115964b408844d64aa14db1cc518f6562e8d7261699d1350a9e3 \\\n    --hash=sha256:4ad3232f5e926d6718ec31cfc1fcadfde020920e278684144551c91769c7bc18\n    # via requests\ncharset-normalizer==2.1.1 \\\n    --hash=sha256:5a3d016c7c547f69d6f81fb0db9449ce888b418b5b9952cc5e6e66843e9dd845 \\\n    --hash=sha256:83e9a75d1911279afd89352c68b45348559d1fc0506b054b346651b5e7fee29f\n    # via requests\nchex==0.1.5 \\\n    --hash=sha256:686858320f8f220c82a6c7eeb54dcdcaa4f3d7f66690dacd13a24baa1ee8299e \\\n    --hash=sha256:b3321184850d5fc29b2eca63087cdbdd83a1b3e4f33c1314ff8b3b8bd67abbca\n    # via optax\ncolorama==0.4.6 \\\n    --hash=sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44 \\\n    --hash=sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6\n    # via rich\ncommonmark==0.9.1 \\\n    --hash=sha256:452f9dc859be7f06631ddcb328b6919c67984aca654e5fefb3914d54691aed60 \\\n    --hash=sha256:da2f38c92590f83de410ba1a3cbceafbc74fee9def35f9251ba9a971d6d66fd9\n    # via rich\ndm-tree==0.1.7 \\\n    --hash=sha256:0f01743cc2247170e64798c6b4b31853717054bf9ceec47a1b1b8c2a4baf5792 \\\n    --hash=sha256:1379a02df36e2bbff9819ceafa55ccd436b15af398803f781f372f8ead7ed871 \\\n    --hash=sha256:1410fa2f2cc8dc7c01386f4e93ddeeb56765574ffafb632a9b6bd96496195b10 \\\n    --hash=sha256:20f24cad4decbf4c1f176a959d16e877c73df33b07d7d1f078a5b8abe72f79f8 \\\n    --hash=sha256:2a843608e078d1622ebb5e50962a8c718d3fa1ab9461b95a12395a803545b2f5 \\\n    --hash=sha256:30fec8aca5b92823c0e796a2f33b875b4dccd470b57e91e6c542405c5f77fd2a \\\n    --hash=sha256:3166304411d14c50a5da1c583e24d6069b44de0c9e06479cb36cdf048a466945 \\\n    --hash=sha256:3b00885c21267934a3d3c68660811d3f891c9539fd53712f5b2423c6d74bf1e6 \\\n    --hash=sha256:3ca0a58e219b7b0bc201fea4679971188d0a9028a2543c16803a84e8f8c7eb2c \\\n    --hash=sha256:3fae437135b6cbbdd51e96488a35e78c3617defa0b65265e7e8752d506f933fd \\\n    --hash=sha256:4992ac5c42af1d73042cd2d3af4e7892d3750e6c1bb8e5a4f81534aa6515f350 \\\n    --hash=sha256:51b9bdf1109b47cc22884b1919e6fe38edf28b5aa02e7c661bb760a0e7cf0157 \\\n    --hash=sha256:57edb6fbd88fcdd9908547cbf21045a9d663c0d9e5983dca7e6f9cf8b6584bb5 \\\n    --hash=sha256:7f1f3dca9d669f3c09654ff6d69cfafd86a7f967c3095405b2692ee8d8ef3cfd \\\n    --hash=sha256:7fa0740b7fbae2c3a43a3114a514891b5d6c383050828f36aa1816cf40f73a6a \\\n    --hash=sha256:91c6240e47c9d80dbd7de5a29a2ca663143717a72c613130ba8ac4354fa741a9 \\\n    --hash=sha256:98fce150ceebb0a818f0eace1616004031cfa5e3375f50599ad790ff52414ba9 \\\n    --hash=sha256:9edc1783a08d87c4e130781f55cbd904d6a564f7cce7dfb63f9ef3bee8e38209 \\\n    --hash=sha256:a085f500b295a6bf439c538e9058c7798ecb8c7d0dc916291f3d8d79d6124d17 \\\n    --hash=sha256:b4364fc9a5721a2b840ac8ea75b8f58b430bec9fdc8b99304d2aecb3cfe46b1b \\\n    --hash=sha256:d377bd621b485db42c4aeea0eabbd8f6274b89a9c338c2c1bf69a40c3b86a1fd \\\n    --hash=sha256:f3e2bd9b9c05d1a0039f7c128d8b055c8a05708ef569cdbbeec0a2946e425bd4\n    # via chex\netils==0.9.0 \\\n    --hash=sha256:489103e9e499a566765c60458ee15d185cf0065f2060a4d16a68f8f46962ed0d \\\n    --hash=sha256:635d6f7d1c519eb194304228543a4c5c7df0e6b58243302473e34c18cf720588\n    # via orbax-checkpoint\nflatbuffers==23.5.26 \\\n    --hash=sha256:9ea1144cac05ce5d86e2859f431c6cd5e66cd9c78c558317c7955fb8d4c78d89 \\\n    --hash=sha256:c0ff356da363087b915fde4b8b45bdda73432fc17cddb3c8157472eab1422ad1\n    # via tensorflow\nflax==0.7.5 \\\n    --hash=sha256:bb8cf313e4935089e222fe676e09ea96e9b4d2f9ad355f8acff37c2ca5640d08 \\\n    --hash=sha256:f51043efd60eb194dd4648c778ae3ea291ef3fd03ec975dce69d98de7ca47489\n    # via -r tfjs-converter/python/requirements.txt\ngast==0.4.0 \\\n    --hash=sha256:40feb7b8b8434785585ab224d1568b857edb18297e5a3047f1ba012bc83b42c1 \\\n    --hash=sha256:b7adcdd5adbebf1adf17378da5ba3f543684dbec47b1cda1f3997e573cd542c4\n    # via tensorflow\ngoogle-pasta==0.2.0 \\\n    --hash=sha256:4612951da876b1a10fe3960d7226f0c7682cf901e16ac06e473b267a5afa8954 \\\n    --hash=sha256:b32482794a366b5366a32c92a9a9201b107821889935a02b3e51f6b432ea84ed \\\n    --hash=sha256:c9f2c8dfc8f96d0d5808299920721be30c9eec37f2389f28904f454565c8a16e\n    # via tensorflow\ngrpcio==1.51.1 \\\n    --hash=sha256:094e64236253590d9d4075665c77b329d707b6fca864dd62b144255e199b4f87 \\\n    --hash=sha256:0dc5354e38e5adf2498312f7241b14c7ce3484eefa0082db4297189dcbe272e6 \\\n    --hash=sha256:0e1a9e1b4a23808f1132aa35f968cd8e659f60af3ffd6fb00bcf9a65e7db279f \\\n    --hash=sha256:0fb93051331acbb75b49a2a0fd9239c6ba9528f6bdc1dd400ad1cb66cf864292 \\\n    --hash=sha256:16c71740640ba3a882f50b01bf58154681d44b51f09a5728180a8fdc66c67bd5 \\\n    --hash=sha256:172405ca6bdfedd6054c74c62085946e45ad4d9cec9f3c42b4c9a02546c4c7e9 \\\n    --hash=sha256:17ec9b13cec4a286b9e606b48191e560ca2f3bbdf3986f91e480a95d1582e1a7 \\\n    --hash=sha256:22b011674090594f1f3245960ced7386f6af35485a38901f8afee8ad01541dbd \\\n    --hash=sha256:24ac1154c4b2ab4a0c5326a76161547e70664cd2c39ba75f00fc8a2170964ea2 \\\n    --hash=sha256:257478300735ce3c98d65a930bbda3db172bd4e00968ba743e6a1154ea6edf10 \\\n    --hash=sha256:29cb97d41a4ead83b7bcad23bdb25bdd170b1e2cba16db6d3acbb090bc2de43c \\\n    --hash=sha256:2b170eaf51518275c9b6b22ccb59450537c5a8555326fd96ff7391b5dd75303c \\\n    --hash=sha256:31bb6bc7ff145e2771c9baf612f4b9ebbc9605ccdc5f3ff3d5553de7fc0e0d79 \\\n    --hash=sha256:3c2b3842dcf870912da31a503454a33a697392f60c5e2697c91d133130c2c85d \\\n    --hash=sha256:3f9b0023c2c92bebd1be72cdfca23004ea748be1813a66d684d49d67d836adde \\\n    --hash=sha256:471d39d3370ca923a316d49c8aac66356cea708a11e647e3bdc3d0b5de4f0a40 \\\n    --hash=sha256:49d680356a975d9c66a678eb2dde192d5dc427a7994fb977363634e781614f7c \\\n    --hash=sha256:4c4423ea38a7825b8fed8934d6d9aeebdf646c97e3c608c3b0bcf23616f33877 \\\n    --hash=sha256:506b9b7a4cede87d7219bfb31014d7b471cfc77157da9e820a737ec1ea4b0663 \\\n    --hash=sha256:538d981818e49b6ed1e9c8d5e5adf29f71c4e334e7d459bf47e9b7abb3c30e09 \\\n    --hash=sha256:59dffade859f157bcc55243714d57b286da6ae16469bf1ac0614d281b5f49b67 \\\n    --hash=sha256:5a6ebcdef0ef12005d56d38be30f5156d1cb3373b52e96f147f4a24b0ddb3a9d \\\n    --hash=sha256:5dca372268c6ab6372d37d6b9f9343e7e5b4bc09779f819f9470cd88b2ece3c3 \\\n    --hash=sha256:6df3b63538c362312bc5fa95fb965069c65c3ea91d7ce78ad9c47cab57226f54 \\\n    --hash=sha256:6f0b89967ee11f2b654c23b27086d88ad7bf08c0b3c2a280362f28c3698b2896 \\\n    --hash=sha256:75e29a90dc319f0ad4d87ba6d20083615a00d8276b51512e04ad7452b5c23b04 \\\n    --hash=sha256:7942b32a291421460d6a07883033e392167d30724aa84987e6956cd15f1a21b9 \\\n    --hash=sha256:9235dcd5144a83f9ca6f431bd0eccc46b90e2c22fe27b7f7d77cabb2fb515595 \\\n    --hash=sha256:97d67983189e2e45550eac194d6234fc38b8c3b5396c153821f2d906ed46e0ce \\\n    --hash=sha256:9ff42c5620b4e4530609e11afefa4a62ca91fa0abb045a8957e509ef84e54d30 \\\n    --hash=sha256:a8a0b77e992c64880e6efbe0086fe54dfc0bbd56f72a92d9e48264dcd2a3db98 \\\n    --hash=sha256:aacb54f7789ede5cbf1d007637f792d3e87f1c9841f57dd51abf89337d1b8472 \\\n    --hash=sha256:bc59f7ba87972ab236f8669d8ca7400f02a0eadf273ca00e02af64d588046f02 \\\n    --hash=sha256:cc2bece1737b44d878cc1510ea04469a8073dbbcdd762175168937ae4742dfb3 \\\n    --hash=sha256:cd3baccea2bc5c38aeb14e5b00167bd4e2373a373a5e4d8d850bd193edad150c \\\n    --hash=sha256:dad6533411d033b77f5369eafe87af8583178efd4039c41d7515d3336c53b4f1 \\\n    --hash=sha256:e223a9793522680beae44671b9ed8f6d25bbe5ddf8887e66aebad5e0686049ef \\\n    --hash=sha256:e473525c28251558337b5c1ad3fa969511e42304524a4e404065e165b084c9e4 \\\n    --hash=sha256:e4ef09f8997c4be5f3504cefa6b5c6cc3cf648274ce3cede84d4342a35d76db6 \\\n    --hash=sha256:e6dfc2b6567b1c261739b43d9c59d201c1b89e017afd9e684d85aa7a186c9f7a \\\n    --hash=sha256:eacad297ea60c72dd280d3353d93fb1dcca952ec11de6bb3c49d12a572ba31dd \\\n    --hash=sha256:f1158bccbb919da42544a4d3af5d9296a3358539ffa01018307337365a9a0c64 \\\n    --hash=sha256:f1fec3abaf274cdb85bf3878167cfde5ad4a4d97c68421afda95174de85ba813 \\\n    --hash=sha256:f96ace1540223f26fbe7c4ebbf8a98e3929a6aa0290c8033d12526847b291c0f \\\n    --hash=sha256:fbdbe9a849854fe484c00823f45b7baab159bdd4a46075302281998cb8719df5\n    # via\n    #   tensorboard\n    #   tensorflow\nh5py==3.10.0 \\\n    --hash=sha256:012ab448590e3c4f5a8dd0f3533255bc57f80629bf7c5054cf4c87b30085063c \\\n    --hash=sha256:212bb997a91e6a895ce5e2f365ba764debeaef5d2dca5c6fb7098d66607adf99 \\\n    --hash=sha256:2381e98af081b6df7f6db300cd88f88e740649d77736e4b53db522d8874bf2dc \\\n    --hash=sha256:2c8e4fda19eb769e9a678592e67eaec3a2f069f7570c82d2da909c077aa94339 \\\n    --hash=sha256:3074ec45d3dc6e178c6f96834cf8108bf4a60ccb5ab044e16909580352010a97 \\\n    --hash=sha256:3c97d03f87f215e7759a354460fb4b0d0f27001450b18b23e556e7856a0b21c3 \\\n    --hash=sha256:43a61b2c2ad65b1fabc28802d133eed34debcc2c8b420cb213d3d4ef4d3e2229 \\\n    --hash=sha256:492305a074327e8d2513011fa9fffeb54ecb28a04ca4c4227d7e1e9616d35641 \\\n    --hash=sha256:5dfc65ac21fa2f630323c92453cadbe8d4f504726ec42f6a56cf80c2f90d6c52 \\\n    --hash=sha256:667fe23ab33d5a8a6b77970b229e14ae3bb84e4ea3382cc08567a02e1499eedd \\\n    --hash=sha256:6c013d2e79c00f28ffd0cc24e68665ea03ae9069e167087b2adb5727d2736a52 \\\n    --hash=sha256:781a24263c1270a62cd67be59f293e62b76acfcc207afa6384961762bb88ea03 \\\n    --hash=sha256:86df4c2de68257b8539a18646ceccdcf2c1ce6b1768ada16c8dcfb489eafae20 \\\n    --hash=sha256:90286b79abd085e4e65e07c1bd7ee65a0f15818ea107f44b175d2dfe1a4674b7\n```\n\n----------------------------------------\n\nTITLE: Implementing Modular Gradient in TypeScript\nDESCRIPTION: Shows how to create a modular gradient implementation for the SquaredDifference kernel, defining the backpropagation logic for both input tensors.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-core/development/op_modularization.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {SquaredDifference} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {mul, sub} from '../ops/binary_ops';\nimport {scalar} from '../ops/tensor_ops';\nimport {Tensor} from '../tensor';\n\nexport const squaredDifferenceGradConfig: GradConfig = {\n  kernelName: SquaredDifference,\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [a, b] = saved;\n    const two = scalar(2);\n    const derA = () => mul(dy, mul(two, sub(a, b)));\n    const derB = () => mul(dy, mul(two, sub(b, a)));\n    return {a: derA, b: derB};\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Including TensorFlow.js CPU Backend ES2017 Version\nDESCRIPTION: Shows how to include the ES2017 versions of TensorFlow.js core and CPU backend using CDN script tags. This version is optimized for modern browsers supporting ES2017 features.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-cpu/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Import @tensorflow/tfjs-core -->\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-core@2.0.0-rc.4/dist/tf-core.es2017.js\"></script>\n\n<!-- Adds the CPU backend to the global backend registry -->\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-cpu@2.0.0-rc.4/dist/tf-backend-cpu.es2017.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Importing TensorFlow.js WebGL Backend via Script Tags\nDESCRIPTION: Shows how to include the TensorFlow.js core library and WebGL backend using script tags in HTML. This method is suitable for direct browser usage without a build process.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-webgl/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Import @tensorflow/tfjs-core -->\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-core\"></script>\n\n<!-- Adds the WebGL backend to the global backend registry -->\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-webgl\"></script>\n```\n\n----------------------------------------\n\nTITLE: Example of Deserialized Args Object in Keras JSON Format\nDESCRIPTION: A TypeScript interface example showing how a serialized object is transformed into constructor arguments during deserialization, where nested serialized objects are converted to their corresponding class instances.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-layers/src/keras_format/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n FooArgs {\n   bar: string;\n   baz: number[];\n   qux: Qux;\n }\n```\n\n----------------------------------------\n\nTITLE: Specifying PyInquirer Dependency for TensorFlow.js\nDESCRIPTION: This snippet defines a dependency on PyInquirer version 1.0.3, which is a Python library for creating interactive command-line interfaces. The 'wizard' annotation suggests it's used for wizard-style interactions in the project.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/python/extra-requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPyInquirer==1.0.3: wizard\n```\n\n----------------------------------------\n\nTITLE: Specifying TensorFlow Dependency Version for TensorFlow.js (pip)\nDESCRIPTION: This code snippet defines the required version range for TensorFlow in a pip-compatible format. It specifies that TensorFlow version 2.1.0 or higher, but less than version 3, is required for the TensorFlow.js project.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-inference/python/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\ntensorflow>=2.1.0, <3\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests for TensorFlow.js-Converter Using Script\nDESCRIPTION: This snippet shows how to run Python unit tests for TensorFlow.js-Converter using the provided run-python-tests.sh script. It requires changing to the python directory before executing the script.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/DEVELOPMENT.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd python\n./run-python-tests.sh\n```\n\n----------------------------------------\n\nTITLE: Bazel Command for Updating TensorFlow.js Python Dependencies\nDESCRIPTION: The command used to generate the requirements file using Bazel build system. This command updates the Python dependencies for the tfjs-converter component of the TensorFlow.js project.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-converter/python/requirements-dev_lock.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbazel run //tfjs-converter/python:tensorflowjs_dev_deps_requirements.update\n```\n\n----------------------------------------\n\nTITLE: Registering Gradient Config in TypeScript\nDESCRIPTION: Shows how to register the gradient configuration for the SquaredDifference kernel in the register_all_gradients.ts file.\nSOURCE: https://github.com/tensorflow/tfjs/blob/master/tfjs-core/development/op_modularization.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {squaredDifferenceGradConfig} from './gradients/SquaredDifference_grad';\n\nconst gradConfigs: GradConfig[] = [\n  // add the gradient config to this list.\n  squaredDifferenceGradConfig,\n];\n```"
  }
]