[
  {
    "owner": "nksaraf",
    "repo": "vinxi",
    "content": "TITLE: Creating a Vinxi App with createApp Function in TypeScript\nDESCRIPTION: Demonstrates how to use the createApp function to initialize a Vinxi application with static and HTTP routers. This is the primary entry point for creating Vinxi applications.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/app.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from \"vinxi\";\n\nexport default createApp({\n  routers: [\n    {\n      name: \"public\",\n      type: \"static\",\n      dir: \"./public\",\n    },\n    {\n      name: \"api\",\n      type: \"http\",\n      handler: \"./server.ts\",\n      target: \"server\",\n    },\n    // ... other routers\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vinxi Routers with createApp\nDESCRIPTION: This snippet demonstrates how to create a Vinxi application with multiple routers using the createApp function. It includes a static router for serving files from a public directory and an HTTP router for an API.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vinxi';\n\nexport default createApp({\n  routers: [\n    // A static router serving files from the `public` directory\n    {\n      name: 'public',\n      type: 'static',\n      dir: './public',\n      base: '/',\n    },\n    // A http router for an api\n    {\n      name: 'api',\n      type: 'http',\n      handler: './app/api.ts',\n      base: '/api',\n      plugins: () => [\n        // Vite plugins applying exclusively to `http` router\n      ]\n    }\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Manifest Types in TypeScript\nDESCRIPTION: TypeScript type definitions for the Manifest API structure, including assets, routes, and manifest object properties. Defines the shape of manifest data used for coordination between different parts of the application.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/manifest.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Asset = LinkAsset | ScriptOrStyleAsset;\n\ntype LinkAsset = {\n\ttag: 'link';\n\tattrs: Record<string, string>\n}\n\ntype ScriptOrStyleAsset = {\n\ttag: 'script' | 'style';\n\tattrs: Record<string, string>;\n\tchildren?: string;\n}\n\nexport type Manifest = {\n  /** Name of the router */\n  name: string;\n  /** Handler path for the router */\n  handler: string;\n  base: string;\n  routes(): Promise<\n    {\n      /** Route path */\n      route: string;\n      /** Path to built artifact for this route */\n      path: string;\n    }[]\n  >;\n  target: \"browser\" | \"server\" | \"static\";\n  type: string;\n  inputs: {\n    [key: string]: {\n      /** Assets needed by this entry point */\n      assets(): Promise<Asset[]>;\n      import<T = { default: any; [k: string]: any }>(): Promise<T>;\n      output: {\n        /** Path to built artifact for this entry point. */\n        path: string;\n      };\n    };\n  };\n  chunks: {\n    [key: string]: {\n      assets(): Promise<Asset[]>;\n      import<T = { default: any; [k: string]: any }>(): Promise<T>;\n      output: {\n        path: string;\n      };\n    };\n  };\n  /**\n   * Seriazable JSON representation of the manifest\n   * Useful for sending to the client and hydrating the runtime\n   * by assigning it to `window.manifest`\n   */\n  json(): object;\n  /** Map of assets needed by the inputs and chunks */\n  assets(): Promise<{ [key: string]: Asset[] }>;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vinxi for React SSR\nDESCRIPTION: Example configuration for setting up Vinxi with React SSR. It defines routers for static files, client-side code, and server-side rendering.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/packages/vinxi/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport reactRefresh from \"@vitejs/plugin-react\";\nimport { createApp } from \"vinxi\";\n\nexport default createApp({\n\trouters: [\n\t\t{\n\t\t\tname: \"public\",\n\t\t\ttype: \"static\",\n\t\t\tdir: \"./public\",\n\t\t},\n\t\t{\n\t\t\tname: \"client\",\n\t\t\ttype: \"client\",\n\t\t\thandler: \"./app/client.tsx\",\n\t\t\ttarget: \"browser\",\n\t\t\tplugins: () => [reactRefresh()],\n\t\t\tbase: \"/_build\",\n\t\t},\n\t\t{\n\t\t\tname: \"ssr\",\n\t\t\ttype: \"http\",\n\t\t\thandler: \"./app/server.tsx\",\n\t\t\ttarget: \"server\",\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Using useSession for Session Management in Vinxi HTTP\nDESCRIPTION: Demonstrates how to use the useSession function to read and update session data. It includes setting up a session configuration, defining session data types, and performing operations like reading data, updating, and clearing the session.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/session.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SessionConfig, eventHandler, useSession } from \"vinxi/http\"\n\nconst sessionConfig = {\n  password: \"my-secret\",\n} as SessionConfig\n\ntype SessionData = {\n  user: string\n  role: string\n}\n\nexport default eventHandler(async (event) => {\n  const session = await useSession<SessionData>(event, sessionConfig) // [!code highlight]\n\n  session.data // { user: \"vinxi\", role: \"admin\" }\n  session.id // \"14678\"\n  await session.update({ role: \"member\" })\n  await session.clear()\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useSession<T extends SessionDataT = SessionDataT>(\n  event: HTTPEvent,\n  config: SessionConfig,\n): Promise<{\n  readonly id: string | undefined\n  readonly data: T\n  update: (update: SessionUpdate<T>) => Promise<any>\n  clear: () => Promise<any>\n}>\n```\n\n----------------------------------------\n\nTITLE: HTTP Response Sending in TypeScript\nDESCRIPTION: Functions for sending HTTP responses, including support for different content types and status codes. Provides utilities for sending empty responses and setting response status.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function send(event: HTTPEvent, data?: any, type?: string): Promise<void>;\nexport function send(data?: any, type?: string): Promise<void>;\n/**\n * Respond with an empty payload.<br>\n * Note that calling this function will close the connection and no other data can be sent to the client afterwards.\n *\n * @param event H3 event\n * @param code status code to be send. By default, it is `204 No Content`.\n */\nexport function sendNoContent(event: HTTPEvent, code?: number): void;\nexport function sendNoContent(code?: number): void;\nexport function setResponseStatus(\n```\n\n----------------------------------------\n\nTITLE: Creating Routers in Vinxi Application\nDESCRIPTION: This code demonstrates how to create a Vinxi application with multiple routers. It shows configuration of a static router for serving files from a public directory and an HTTP router for an API endpoint, including how to specify plugins for specific routers.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/router.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from 'vinxi';\n\nexport default createApp({\n  routers: [\n    // A static router serving files from the `public` directory\n    {\n      name: 'public',\n      type: 'static',\n      dir: './public',\n      base: '/',\n    },\n    // A http router for an api\n    {\n      name: 'api',\n      type: 'http',\n      handler: './app/api.ts',\n      base: '/api',\n      plugins: () => [\n        // Vite plugins applying to exclusively to `http` router\n      ]\n    }\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Router in Vinxi\nDESCRIPTION: Example configuration for creating a custom router in Vinxi. This snippet demonstrates the basic structure required for custom router definition, including the resolveConfig function for custom configuration logic, handler specification, and target setting.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/router/custom.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"customRouter\",\n  type: {\n    resolveConfig: (router, app) => {\n      // Custom configuration logic\n    },\n  },\n  handler: \"./app/customHandler.ts\",\n  target: \"server\",\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Request Headers in Vinxi\nDESCRIPTION: Demonstrates how to retrieve request headers using the getRequestHeaders function from Vinxi's HTTP module.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/request.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventHandler, getRequestHeaders } from \"vinxi/http\";\n\nexport default eventHandler(async (event) => {\n  const headers = getRequestHeaders(event); // [!code highlight]\n});\n```\n\n----------------------------------------\n\nTITLE: Running a Vinxi App with Node CLI Commands\nDESCRIPTION: Demonstrates different Node CLI commands for running a Vinxi app in various modes. Includes standard execution, development mode, and build mode.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/app.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode app.js\n```\n\nLANGUAGE: bash\nCODE:\n```\nnode app.js --dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nnode app.js --build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnode .output/server/index.mjs\n```\n\n----------------------------------------\n\nTITLE: Implementing API Handler with nodemailer in TypeScript\nDESCRIPTION: Example of an API handler (api.ts) that uses nodemailer to send an email. This demonstrates how to integrate server-side Node.js packages in a Vinxi app.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/add-to-existing-vite-app.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport nodemailer from \"nodemailer\";\nimport { eventHandler } from \"vinxi/http\";\n\nexport default eventHandler(async (event) => {\n  await nodemailer.sendMail({\n    from: \"\",\n  });\n\n  return \"done\";\n});\n```\n\n----------------------------------------\n\nTITLE: Request Information Utilities\nDESCRIPTION: Functions for extracting request information like host, protocol, URL, and IP address.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getRequestHost(event: HTTPEvent, opts?: { xForwardedHost?: boolean }): string;\n\nexport function getRequestProtocol(event: HTTPEvent, opts?: { xForwardedProto?: boolean }): \"https\" | \"http\";\n\nexport function getRequestURL(event: HTTPEvent, opts?: { xForwardedHost?: boolean; xForwardedProto?: boolean }): URL;\n\nexport function getRequestIP(event: HTTPEvent, opts?: { xForwardedFor?: boolean }): string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Basic FileSystem Router Implementation\nDESCRIPTION: Example implementation of a custom file system router using BaseFileSystemRouter with route configuration in app.config.js.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/file-system-routing.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseFileSystemRouter } from \"vinxi/fs-router\";\n\nclass MyFileSystemRouter extends BaseFileSystemRouter {\n  toPath(filePath) {\n    return filePath.replace(/\\.js$/, \"\");\n  }\n\n  toRoute(filePath) {\n    return {\n      path: this.toPath(filePath),\n      $handler: {\n        src: filePath,\n        pick: [\"default\"],\n      },\n    };\n  }\n}\n\nexport default createApp({\n  routers: [\n    {\n      routes: (router, app) => {\n        return new MyFileSystemRouter(\n          {\n            dir: path.join(__dirname, \"app/routes\"),\n            extensions: [\"jsx\", \"js\", \"tsx\", \"ts\"],\n          },\n          router,\n          app,\n        );\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: CORS Handling in TypeScript\nDESCRIPTION: Functions for managing Cross-Origin Resource Sharing (CORS) headers. Includes utilities for appending CORS headers and handling CORS preflight requests.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function appendCorsPreflightHeaders(\n\tevent: HTTPEvent,\n\toptions: H3CorsOptions,\n): void;\nexport function appendCorsPreflightHeaders(options: H3CorsOptions): void;\n\nexport function appendCorsHeaders(\n\tevent: HTTPEvent,\n\toptions: H3CorsOptions,\n): void;\nexport function appendCorsHeaders(options: H3CorsOptions): void;\n\nexport function handleCors(event: HTTPEvent, options: H3CorsOptions): void;\nexport function handleCors(options: H3CorsOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Parsing Cookies from HTTP Request in Vinxi\nDESCRIPTION: Demonstrates how to use the parseCookies function to extract all cookies from an HTTP event. The function returns an object containing all cookie name-value pairs present in the request.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/cookies.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventHandler, parseCookies } from \"vinxi/http\"\n\nexport default eventHandler(async (event) => {\n  const cookies = parseCookies(event) // [!code highlight]\n\n  cookies[\"authorization\"] // \"*******\"\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced FileSystem Router with Multiple Dependencies\nDESCRIPTION: Extended implementation showing multiple file dependencies including static and dynamic imports with different export selections.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/file-system-routing.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyFileSystemRouter extends BaseFileSystemRouter {\n  toPath(filePath) {\n    return filePath.replace(/\\.js$/, \"\");\n  }\n\n  toRoute(filePath) {\n    return {\n      path: this.toPath(filePath),\n      $handler: {\n        src: filePath,\n        pick: [\"default\"]\n      }\n      $$config: {\n        src: filePath,\n        pick: [\"config\"]\n      }\n      $data: {\n        src: filePath.replace(/\\.js$/, \".data.ts\"),\n        pick: [\"default\"]\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Router in Vinxi\nDESCRIPTION: Example configuration for setting up a client router in Vinxi. Shows basic setup with React refresh plugin, custom base path, and entry point handler.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/router/client.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"client\",\n  type: \"client\",\n  handler: \"./app/client.tsx\",\n  base: \"/_build\",\n  plugins: () => [ reactRefresh() ],\n}\n```\n\n----------------------------------------\n\nTITLE: Session Management in TypeScript\nDESCRIPTION: Functions for handling sessions in HTTP events, including clearing, sealing, unsealing, and updating sessions. Provides type-safe session data management.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function clearSession(\n\tevent: HTTPEvent,\n\tconfig: Partial<SessionConfig>,\n): Promise<void>;\nexport function clearSession(config: Partial<SessionConfig>): Promise<void>;\n\nexport function unsealSession(\n\tevent: HTTPEvent,\n\tconfig: SessionConfig,\n\tsealed: string,\n): Promise<Partial<Session<SessionDataT>>>;\nexport function unsealSession(\n\tconfig: SessionConfig,\n\tsealed: string,\n): Promise<Partial<Session<SessionDataT>>>;\n\nexport function getSession<T extends SessionDataT = SessionDataT>(\n\tevent: HTTPEvent,\n\tconfig: SessionConfig,\n): Promise<Session<T>>;\nexport function getSession<T extends SessionDataT = SessionDataT>(\n\tconfig: SessionConfig,\n): Promise<Session<T>>;\n\nexport function sealSession(event: HTTPEvent, config: SessionConfig): void;\nexport function sealSession(config: SessionConfig): void;\n\nexport function updateSession<T extends SessionDataT = SessionDataT>(\n\tevent: HTTPEvent,\n\tconfig: SessionConfig,\n\tupdate?: SessionUpdate<T>,\n): Promise<Session<T>>;\nexport function updateSession<T extends SessionDataT = SessionDataT>(\n\tconfig: SessionConfig,\n\tupdate?: SessionUpdate<T>,\n): Promise<Session<T>>;\n\nexport function useSession<T extends SessionDataT = SessionDataT>(\n\tevent: HTTPEvent,\n\tconfig: SessionConfig,\n): Promise<{\n\treadonly id: string | undefined;\n\treadonly data: T;\n\tupdate: (update: SessionUpdate<T>) => Promise<any>;\n\tclear: () => Promise<any>;\n}>;\nexport function useSession<T extends SessionDataT = SessionDataT>(\n\tconfig: SessionConfig,\n): Promise<{\n\treadonly id: string | undefined;\n\treadonly data: T;\n\tupdate: (update: SessionUpdate<T>) => Promise<any>;\n\tclear: () => Promise<any>;\n}>;\n```\n\n----------------------------------------\n\nTITLE: HTTP Router Configuration Example\nDESCRIPTION: Example configuration object showing typical setup for an HTTP router including name, type, handler path, base URL, worker configuration, and plugin setup.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/router/http.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"server\",\n  type: \"http\",\n  handler: \"./app/apiHandler.ts\",\n  base: \"/api\",\n  worker: true,\n  plugins: () => [ reactRefresh() ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vinxi for Solid.js SSR\nDESCRIPTION: This snippet demonstrates how to set up Vinxi for Solid.js Server-Side Rendering (SSR). It configures three routers: a static router for public files, a client router for browser-targeted code, and an SSR router for server-side rendering, both using the Solid.js Vite plugin.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from \"vinxi\";\nimport solid from \"vite-plugin-solid\";\n\nexport default createApp({\n\trouters: [\n\t\t{\n\t\t\tname: \"public\",\n\t\t\ttype: \"static\",\n\t\t\tdir: \"./public\",\n\t\t},\n\t\t{\n\t\t\tname: \"client\",\n\t\t\ttype: \"client\",\n\t\t\thandler: \"./app/client.tsx\",\n\t\t\ttarget: \"browser\",\n\t\t\tplugins: () => [solid({ ssr: true })],\n\t\t\tbase: \"/_build\",\n\t\t},\n\t\t{\n\t\t\tname: \"ssr\",\n\t\t\ttype: \"http\",\n\t\t\thandler: \"./app/server.tsx\",\n\t\t\ttarget: \"server\",\n\t\t\tplugins: () => [solid({ ssr: true })],\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Custom HTTP Server with Vinxi\nDESCRIPTION: Shows how to create and start a custom HTTP server using vinxi/http and vinxi/listen, giving more control over the server setup.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/cli.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventHandler, toNodeListener } from \"vinxi/http\";\nimport { listen } from \"vinxi/listen\";\n\nconst handler = eventHandler(async (event) => {\n  return {\n    body: \"Hello World\",\n  };\n});\n\nawait listen(toNodeListener(handler), { port: 3000 });\n```\n\n----------------------------------------\n\nTITLE: Defining Type-Safe Routes with Vinxi and typed-routes in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a type-safe router using Vinxi and the typed-routes library. It sets up route definitions with parameters and generates type-safe route helpers for navigation.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/test/templates/react/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFileRoute, createRouter } from \"@vinxi/react-router\";\nimport { createRouteHelpers } from \"typed-routes\";\n\n// Define the routes with parameters\nexport const routes = {\n  home: \"/\",\n  user: \"/user/:id\",\n  userFriends: \"/user/:id/friends\",\n  settings: \"/settings\",\n} as const;\n\n// Create route helpers for type-safe navigation\nexport const { usePathname, useParams, useRouter, Link, redirect } =\n  createRouteHelpers(routes);\n\n// Create route components using Vinxi's createFileRoute\nexport const Route = createFileRoute(\"/\")({});\nexport const UserRoute = createFileRoute(\"/user/:id\")({});\nexport const UserFriendsRoute = createFileRoute(\"/user/:id/friends\")({});\nexport const SettingsRoute = createFileRoute(\"/settings\")({});\n\n// Create the router for the application\nexport const router = createRouter({\n  routeTree: Route.routeTree,\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Router in Vinxi\nDESCRIPTION: Example configuration for setting up a static router in vinxi. This configuration serves static files from the './public' directory under the base URL '/'.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/router/static.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"public\",\n  type: \"static\",\n  dir: \"./public\",\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Request Body with Zod in Vinxi\nDESCRIPTION: Shows how to validate the request body using Zod and the readValidatedBody function from Vinxi's HTTP module.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/request.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventHandler, readValidatedBody } from \"vinxi/http\";\nimport { z } from \"zod\";\n\nconst objectSchema = z.object({\n  email: z.string(),\n  password: z.string(),\n});\n//\nexport default eventHandler(async (event) => {\n  const body = await readValidatedBody(event, objectSchema.safeParse);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Type-Safe Routes in a React Component with TypeScript\nDESCRIPTION: This code snippet shows how to use the type-safe route helpers in a React component. It demonstrates retrieving the current path, accessing route parameters, and navigating programmatically with full type safety.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/test/templates/react/README.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\n\n// Example of using the helpers in a component\nfunction App() {\n  const pathname = usePathname();\n  const params = useParams();\n  const router = useRouter();\n\n  return (\n    <div>\n      <div>Current path: {pathname}</div>\n      {pathname === routes.user && (\n        <div>User ID: {params.id}</div>\n      )}\n      <button onClick={() => router.navigate(routes.home)}>Go Home</button>\n      <button onClick={() => router.navigate(routes.user, { id: \"123\" })}>Go to User 123</button>\n      <button onClick={() => router.navigate(routes.userFriends, { id: \"123\" })}>Go to User 123's Friends</button>\n      <Link to={routes.settings}>Settings</Link>\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring React SSR with Vinxi\nDESCRIPTION: This code sets up a Vinxi application with React server-side rendering. It creates three routers: one for static files, one for client-side React code with hot module replacement, and one for server-side rendering.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/create-your-first-app.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport reactRefresh from \"@vitejs/plugin-react\";\nimport { createApp } from \"vinxi\";\n\nexport default createApp({\n  routers: [\n    {\n      name: \"public\",\n      type: \"static\",\n      dir: \"./public\",\n    },\n    {\n      name: \"client\",\n      type: \"client\",\n      handler: \"./app/client.tsx\",\n      plugins: () => [reactRefresh()],\n      base: \"/_build\",\n    },\n    {\n      name: \"ssr\",\n      type: \"http\",\n      handler: \"./app/server.tsx\",\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Middleware Definition in TypeScript\nDESCRIPTION: Function for defining middleware with onRequest and onBeforeResponse hooks. Allows for single or multiple middleware functions.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function defineMiddleware(options: {\n\tonRequest?:\n\t\t| import(\"h3\")._RequestMiddleware\n\t\t| import(\"h3\")._RequestMiddleware[];\n\tonBeforeResponse?:\n\t\t| import(\"h3\")._ResponseMiddleware\n\t\t| import(\"h3\")._ResponseMiddleware[];\n}): {\n\tonRequest?:\n\t\t| import(\"h3\")._RequestMiddleware\n\t\t| import(\"h3\")._RequestMiddleware[]\n\t\t| undefined;\n\tonBeforeResponse?:\n\t\t| import(\"h3\")._ResponseMiddleware\n\t\t| import(\"h3\")._ResponseMiddleware[]\n\t\t| undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: Complete SSR Vinxi App Configuration with Path Aliases\nDESCRIPTION: Full Vinxi app configuration for an SSR application with server functions, showing how to add the vite-tsconfig-paths plugin to all relevant routers.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/aliases.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serverFunctions } from \"@vinxi/server-functions/plugin\";\nimport { createApp } from \"vinxi\";\nimport solid from \"vite-plugin-solid\";\n\nexport default createApp({\n  routers: [\n    {\n      name: \"public\",\n      type: \"static\",\n      dir: \"./public\",\n      base: \"/\",\n    },\n    {\n      name: \"ssr\",\n      type: \"http\",\n      base: \"/\",\n      handler: \"./app/server.tsx\",\n      target: \"server\",\n      plugins: () => [tsconfigPaths(), solid({ ssr: true })],\n      link: {\n        client: \"client\",\n      },\n    },\n    {\n      name: \"client\",\n      type: \"client\",\n      handler: \"./app/client.tsx\",\n      target: \"browser\",\n      plugins: () => [\n        tsconfigPaths(),\n        serverFunctions.client(),\n        solid({ ssr: true }),\n      ],\n      base: \"/_build\",\n    },\n    serverFunctions.router({\n      plugins: () => [tsconfigPaths()],\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Body Reading Utilities\nDESCRIPTION: Functions for reading and parsing request bodies in different formats including raw, JSON, validated, multipart form data, and form data.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport function readRawBody<E extends Encoding = \"utf8\">(event: HTTPEvent, encoding?: E): E extends false ? Promise<Buffer | undefined> : Promise<string | undefined>;\n\nexport function readBody<T, Event extends HTTPEvent = HTTPEvent, _T = InferEventInput<\"body\", Event, T>>(event: Event, options?: { strict?: boolean }): Promise<_T>;\n\nexport function readValidatedBody<T, Event extends HTTPEvent = HTTPEvent, _T = InferEventInput<\"body\", Event, T>>(event: Event, validate: ValidateFunction<_T>): Promise<_T>;\n\nexport function readMultipartFormData(event: HTTPEvent): Promise<MultiPartData[] | undefined>;\n\nexport function readFormData(event: HTTPEvent): Promise<FormData>;\n\nexport function getRequestWebStream(event: HTTPEvent): undefined | ReadableStream;\n```\n\n----------------------------------------\n\nTITLE: Server-side Manifest Usage Example\nDESCRIPTION: Demonstrates how to use the Manifest API in a server-side event handler to retrieve client assets for page rendering.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/manifest.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getManifest } from \"vinxi/manifest\";\nimport { eventHandler } from \"vinxi/http\"\n\nexport default eventHandler(() => {\n\tconst clientManifest = getManifest(\"client\");\n\tconst assets = await clientManifest[clientManifest.handler].assets();\n\n\treturn renderPageWithPreloadLinks({\n\t\tassets,\n\t});\n})\n```\n\n----------------------------------------\n\nTITLE: Proxy Request Handling in TypeScript\nDESCRIPTION: Functions for proxying HTTP requests to a target URL. Includes options for customizing the proxy behavior and retrieving proxy-specific headers.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function proxyRequest(\n\tevent: HTTPEvent,\n\ttarget: string,\n\topts?: ProxyOptions,\n): Promise<any>;\nexport function proxyRequest(\n\ttarget: string,\n\topts?: ProxyOptions,\n): Promise<any>;\n\nexport function sendProxy(\n\tevent: HTTPEvent,\n\ttarget: string,\n\topts?: ProxyOptions,\n): Promise<any>;\nexport function sendProxy(target: string, opts?: ProxyOptions): Promise<any>;\n\nexport function getProxyRequestHeaders(event: HTTPEvent): any;\nexport function getProxyRequestHeaders(): any;\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Rules in Vinxi Application\nDESCRIPTION: Demonstrates how to configure route rules in a Vinxi application using the createApp method. The example shows various routing configurations including cache control, SWR caching, static file serving, CORS settings, redirects, and proxying requests to other servers.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/route-rules.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from \"vinxi\";\n\nexport default createApp({\n  server: {\n    routeRules: {\n      \"/_build/assets/**\": { headers: { \"cache-control\": \"s-maxage=0\" } },\n      '/blog/**': { swr: true },\n      '/blog/**': { swr: 600 },\n      '/blog/**': { static: true },\n      '/blog/**': { cache: { /* cache options*/ } },\n      '/assets/**': { headers: { 'cache-control': 's-maxage=0' } },\n      '/api/v1/**': { cors: true, headers: { 'access-control-allow-methods': 'GET' } },\n      '/old-page': { redirect: '/new-page' }, // uses status code 307 (Temporary Redirect)\n      '/old-page2': { redirect: { to:'/new-page2', statusCode: 301 } },\n      '/old-page/**': { redirect: '/new-page/**' },\n      '/proxy/example': { proxy: 'https://example.com' },\n      '/proxy/**': { proxy: '/api/**' },\n    },\n  },\n  routers: [\n    // ...\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Framework Wrapper for Vinxi\nDESCRIPTION: Shows how to wrap Vinxi in a custom framework to provide pre-configured routers and settings. This pattern enables framework creators to build on top of Vinxi.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/app.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from \"vinxi\";\n\nexport function createFrameworkApp() {\n  return createApp({\n    routers: [\n      {\n        name: \"public\",\n        type: \"static\",\n        dir: \"./public\",\n      },\n      {\n        name: \"api\",\n        type: \"http\",\n        handler: \"./server.ts\",\n        target: \"server\",\n      },\n      // ... other routers\n    ],\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Cookie in Vinxi HTTP\nDESCRIPTION: Demonstrates how to set a cookie using the setCookie function. This function allows setting a cookie with a specified name and value, with optional serialization options.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/cookies.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventHandler, setCookie } from \"vinxi/http\"\n\nexport default eventHandler(async (event) => {\n  setCookie(event, \"Authorization\", \"1234567\") // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Cookie Management Functions\nDESCRIPTION: Utility functions for handling cookies including parsing, getting, setting, and deleting cookies.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport function parseCookies(event: HTTPEvent): Record<string, string>;\n\nexport function getCookie(event: HTTPEvent, name: string): string | undefined;\n\nexport function setCookie(event: HTTPEvent, name: string, value: string, serializeOptions?: CookieSerializeOptions): void;\n\nexport function deleteCookie(event: HTTPEvent, name: string, serializeOptions?: CookieSerializeOptions): void;\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Event Handler with Vinxi\nDESCRIPTION: Demonstrates how to create an HTTP event handler using vinxi/http, which Vinxi will automatically serve when the script is run.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/cli.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventHandler } from \"vinxi/http\";\n\nexport default eventHandler(async (event) => {\n  return {\n    body: \"Hello World\",\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Reading Multipart Form Data in Vinxi\nDESCRIPTION: Demonstrates how to read and parse multipart form data from a request using the readMultipartFormData function from Vinxi's HTTP module.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/request.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventHandler, readMultipartFormData } from \"vinxi/http\";\n\nexport default eventHandler(async (event) => {\n  const data = await readMultipartFormData(event); // [!code highlight]\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers in TypeScript\nDESCRIPTION: Functions to set response headers for an HTTP event. Includes methods to set multiple headers, set a single header, append headers, and clear headers.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function setResponseHeaders(\n  event: HTTPEvent,\n  headers: Record<HTTPHeaderName, Parameters<OutgoingMessage[\"setHeader\"]>[1]>,\n): void;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function setResponseHeader(\n  event: HTTPEvent,\n  name: HTTPHeaderName,\n  value: Parameters<OutgoingMessage[\"setHeader\"]>[1],\n): void;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function appendResponseHeaders(\n  event: HTTPEvent,\n  headers: Record<string, string>,\n): void;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function appendResponseHeader(\n  event: HTTPEvent,\n  name: HTTPHeaderName,\n  value: string,\n): void;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function clearResponseHeaders(\n  event: HTTPEvent,\n  headerNames?: string[],\n): void;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function removeResponseHeader(\n  event: HTTPEvent,\n  name: HTTPHeaderName,\n): void;\n```\n\n----------------------------------------\n\nTITLE: Configuring Vinxi for React SSR\nDESCRIPTION: This snippet shows how to configure Vinxi for React Server-Side Rendering (SSR). It sets up three routers: a static router for public files, a client router for browser-targeted code, and an SSR router for server-side rendering.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport reactRefresh from \"@vitejs/plugin-react\";\nimport { createApp } from \"vinxi\";\n\nexport default createApp({\n\trouters: [\n\t\t{\n\t\t\tname: \"public\",\n\t\t\ttype: \"static\",\n\t\t\tdir: \"./public\",\n\t\t},\n\t\t{\n\t\t\tname: \"client\",\n\t\t\ttype: \"client\",\n\t\t\thandler: \"./app/client.tsx\",\n\t\t\ttarget: \"browser\",\n\t\t\tplugins: () => [reactRefresh()],\n\t\t\tbase: \"/_build\",\n\t\t},\n\t\t{\n\t\t\tname: \"ssr\",\n\t\t\ttype: \"http\",\n\t\t\thandler: \"./app/server.tsx\",\n\t\t\ttarget: \"server\",\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Router Parameters in TypeScript\nDESCRIPTION: Functions for retrieving and validating router parameters from HTTP events. Includes options for decoding parameters and type inference.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function getRouterParams(\n\tevent: HTTPEvent,\n\topts?: {\n\t\tdecode?: boolean;\n\t},\n): NonNullable<HTTPEvent[\"context\"][\"params\"]>;\nexport function getRouterParams(\n\topts?: {\n\t\tdecode?: boolean;\n\t},\n): NonNullable<HTTPEvent[\"context\"][\"params\"]>;\n\nexport function getValidatedRouterParams<\n\tT,\n\tEvent extends HTTPEvent = HTTPEvent,\n\t_T = InferEventInput<\"routerParams\", Event, T>,\n>(\n\tevent: Event,\n\tvalidate: ValidateFunction<_T>,\n\topts?: {\n\t\tdecode?: boolean;\n\t},\n): Promise<_T>;\nexport function getValidatedRouterParams<\n\tT,\n\tEvent extends HTTPEvent = HTTPEvent,\n\t_T = InferEventInput<\"routerParams\", Event, T>,\n>(\n\tvalidate: ValidateFunction<_T>,\n\topts?: {\n\t\tdecode?: boolean;\n\t},\n): Promise<_T>;\n\nexport function getRouterParam(\n\tevent: HTTPEvent,\n\tname: string,\n\topts?: {\n\t\tdecode?: boolean;\n\t},\n): string | undefined;\nexport function getRouterParam(\n\tname: string,\n\topts?: {\n\t\tdecode?: boolean;\n\t},\n): string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Reading Form Data in Vinxi\nDESCRIPTION: Shows how to read form data from a request using the readFormData function from Vinxi's HTTP module.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/request.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventHandler, readFormData } from \"vinxi/http\";\n\nexport default eventHandler(async (event) => {\n  const formData = await readFormData(event); // [!code highlight]\n  const email = formData.get(\"email\");\n  const password = formData.get(\"password\");\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vinxi App in TypeScript\nDESCRIPTION: Example of a vite.config.ts file that exports a Vinxi app configuration. It sets up static and SPA routers with custom Vite options and plugins.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/add-to-existing-vite-app.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from \"vinxi\";\nimport { config } from \"vinxi/plugins/config\";\n\nexport default createApp({\n  routers: [\n    {\n      name: \"public\",\n      type: \"static\",\n      dir: \"./public\",\n    },\n    {\n      name: \"client\",\n      type: \"spa\",\n      handler: \"./index.html\",\n      base: \"/\",\n      plugins: () => [\n        config(\"custom\", {\n          // additional vite options\n        }),\n        // additional vite plugins\n      ],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Running Vinxi Development Server with Custom Config\nDESCRIPTION: Starts Vinxi's development server with a custom configuration file. The server looks for an app.config.js file by default, but you can specify a different path.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/cli.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvinxi dev --config path/to/your-app.js\n```\n\n----------------------------------------\n\nTITLE: Getting Query Parameters in Vinxi\nDESCRIPTION: Shows how to retrieve query parameters from a request using the getQuery function from Vinxi's HTTP module.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/request.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventHandler, getQuery } from \"vinxi/http\";\n\nexport default eventHandler(async (event) => {\n  const query = getQuery(event); // [!code highlight]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Error Handler Function in TypeScript\nDESCRIPTION: Function declaration for handling and responding to errors in HTTP handlers. Includes detailed documentation about internal usage by H3 for unhandled errors and debug mode behavior.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Receives an error and returns the corresponding response.\n * H3 internally uses this function to handle unhandled errors.\n * Note that calling this function will close the connection and no other data will be sent to the client afterwards.\n *\n * @param event {HTTPEvent} - H3 event or req passed by h3 handler.\n * @param error {Error | H3Error} - The raised error.\n * @param debug {boolean} - Whether the application is in debug mode.\n * In the debug mode, the stack trace of errors will be returned in the response.\n */\nexport function sendError(\n\tevent: HTTPEvent,\n\terror: Error | H3Error,\n\tdebug?: boolean,\n): void;\nexport function sendError(error: Error | H3Error, debug?: boolean): void;\n```\n\n----------------------------------------\n\nTITLE: Getting Web Request Object in Vinxi\nDESCRIPTION: Demonstrates how to obtain a Web Fetch API compliant Request instance from an HTTPEvent using the getWebRequest function from Vinxi's HTTP module.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/request.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventHandler, getWebRequest } from \"vinxi/http\";\n\nexport default eventHandler(async (event) => {\n  const request = getWebRequest(event); // [!code highlight]\n\n  request.url;\n  request.method;\n  request.headers;\n  request.json();\n  request.formData();\n  request.text();\n  request.arrayBuffer();\n  request.blob();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Stream and Web Response Functions in TypeScript\nDESCRIPTION: Function declarations for sending stream data and web responses in HTTP handlers. Supports both Node.js Readable streams and Web API ReadableStream objects with overloaded function signatures.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport function sendStream(\n\tevent: HTTPEvent,\n\tstream: Readable | ReadableStream,\n): Promise<void>;\nexport function sendStream(stream: Readable | ReadableStream): Promise<void>;\n\nexport function sendWebResponse(\n\tevent: HTTPEvent,\n\tresponse: Response,\n): void | Promise<void>;\nexport function sendWebResponse(response: Response): void | Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Validating Query Parameters in Vinxi\nDESCRIPTION: Demonstrates how to validate query parameters using a custom validation function with getValidatedQuery from Vinxi's HTTP module.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/request.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventHandler, getValidatedQuery } from \"vinxi/http\";\n\nexport default eventHandler(async (event) => {\n  const query = await getValidatedQuery(event, (query) => {\n    return typeof query === \"object\" && query !== null;\n  }); // [!code highlight]\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Request IP in Vinxi\nDESCRIPTION: Demonstrates how to retrieve the request IP address using the getRequestIP function from Vinxi's HTTP module.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/request.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventHandler, getRequestIP } from \"vinxi/http\";\n\nexport default eventHandler(async (event) => {\n  const ip = getRequestIP(event); // [!code highlight]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Middleware in TypeScript\nDESCRIPTION: Function to define middleware for request and response handling in a Vinxi application.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function defineMiddleware(options: {\n  onRequest?:\n    | import(\"h3\")._RequestMiddleware\n    | import(\"h3\")._RequestMiddleware[];\n  onBeforeResponse?:\n    | import(\"h3\")._ResponseMiddleware\n    | import(\"h3\")._ResponseMiddleware[];\n}): {\n  onRequest?:\n    | import(\"h3\")._RequestMiddleware\n    | import(\"h3\")._RequestMiddleware[]\n    | undefined;\n  onBeforeResponse?:\n    | import(\"h3\")._ResponseMiddleware\n    | import(\"h3\")._ResponseMiddleware[]\n    | undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: setCookie Function Signature in Vinxi HTTP\nDESCRIPTION: Type signature for the setCookie function, which sets a cookie with the specified name and value. Optional serialization options can be provided to customize cookie properties.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/cookies.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport function setCookie(\n  event: HTTPEvent,\n  name: string,\n  value: string,\n  serializeOptions?: CookieSerializeOptions,\n): void\n```\n\n----------------------------------------\n\nTITLE: Configuring SPA Router in Vinxi with TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the SPA router in Vinxi. It sets the router type to 'spa', specifies the handler file, and includes a plugin for TypeScript configuration paths.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/router/spa.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"spa\",\n  type: \"spa\",\n  handler: \"./index.html\",\n  plugins: () => [tsconfigPaths()],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Content Type and Redirect Functions in TypeScript\nDESCRIPTION: Function declarations for setting default content types and handling redirects in HTTP responses. Each function supports both explicit HTTPEvent parameter and implicit event access patterns.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport function defaultContentType(event: HTTPEvent, type?: string): void;\nexport function defaultContentType(type?: string): void;\nexport function sendRedirect(\n\tevent: HTTPEvent,\n\tlocation: string,\n\tcode?: number,\n): Promise<void>;\nexport function sendRedirect(location: string, code?: number): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Routing Function in JavaScript\nDESCRIPTION: A function that creates an HTTP routing handler based on provided rules. It supports path matching, standard headers, CORS, compression, and proxying based on configurations.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/test/templates/react-to-web-request/README.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createRoute({\n  base = \"/\",\n  routes = {},\n  rewrites = [],\n  headers = {},\n  cors = false,\n  compress = false,\n  proxy,\n  fetch = global.fetch,\n} = {}) {\n  function handle(req) {\n    // Apply URL rewrites\n    let { pathname } = new URL(req.url, \"http://localhost\");\n    for (const { source, destination } of rewrites) {\n      const pattern = new RegExp(source);\n      if (pattern.test(pathname)) {\n        pathname = pathname.replace(pattern, destination);\n        const newUrl = new URL(req.url, \"http://localhost\");\n        newUrl.pathname = pathname;\n        req = new Request(newUrl, req);\n        break;\n      }\n    }\n\n    // Check for routes match\n    const matchingRoute = Object.keys(routes).find(\n      (path) =>\n        pathname === path ||\n        pathname.startsWith(`${path.replace(/\\/$/, \"\")}/`)\n    );\n\n    if (matchingRoute) {\n      const handler = routes[matchingRoute];\n      if (typeof handler === \"function\") {\n        return handler(req);\n      }\n    }\n\n    // If no route matched and proxy is configured, use proxy\n    if (proxy) {\n      const proxyOptions = createProxyOptions(proxy);\n      const proxyFetch = createConfiguredFetch(proxyOptions);\n      return proxyFetch(req);\n    }\n\n    // Default 404 handler\n    return new Response(\"Not Found\", { status: 404 });\n  }\n\n  return async function handler(req) {\n    try {\n      // Handle CORS if enabled\n      if (cors && req.method === \"OPTIONS\") {\n        const corsHeaders = {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\": \"GET,POST,PUT,DELETE,OPTIONS\",\n          \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\n        };\n        return new Response(null, { headers: corsHeaders });\n      }\n\n      const response = await handle(req);\n\n      // Apply standard headers\n      const responseHeaders = new Headers(response.headers);\n      for (const [key, value] of Object.entries(headers)) {\n        responseHeaders.set(key, value);\n      }\n\n      // Apply CORS headers if enabled\n      if (cors) {\n        responseHeaders.set(\"Access-Control-Allow-Origin\", \"*\");\n      }\n\n      // Return response with updated headers\n      const newResponse = new Response(response.body, {\n        status: response.status,\n        statusText: response.statusText,\n        headers: responseHeaders,\n      });\n\n      // Handle compression if enabled (placeholder - actual implementation would depend on environment)\n      if (compress) {\n        // Compression logic would go here\n        // This is a placeholder as actual compression implementation depends on the environment\n        return newResponse;\n      }\n\n      return newResponse;\n    } catch (error) {\n      console.error(\"Routing error:\", error);\n      return new Response(\"Internal Server Error\", { status: 500 });\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Vinxi Production Server with Custom Preset\nDESCRIPTION: Starts a production server for a Vinxi app using a custom preset. The default preset is 'node-server', but you can change it using the --preset option or SERVER_PRESET environment variable.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/cli.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvinxi start --preset vercel-edge\n\n# OR\nSERVER_PRESET=vercel-edge vinxi start\n```\n\n----------------------------------------\n\nTITLE: HTTP Header Management in TypeScript\nDESCRIPTION: Functions for manipulating HTTP headers, including getting, setting, appending, and removing headers. Provides utilities for both request and response headers.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function getResponseHeaders(\n\tevent: HTTPEvent,\n): ReturnType<HTTPEvent[\"res\"][\"getHeaders\"]>;\nexport function getResponseHeaders(): ReturnType<HTTPEvent[\"res\"][\"getHeaders\"]>;\n\n\nexport function getResponseHeader(\n\tevent: HTTPEvent,\n\tname: HTTPHeaderName,\n): ReturnType<HTTPEvent[\"res\"][\"getHeader\"]>;\nexport function getResponseHeader(\n\tname: HTTPHeaderName,\n): ReturnType<HTTPEvent[\"res\"][\"getHeader\"]>;\n\nexport function setResponseHeaders(\n\tevent: HTTPEvent,\n\theaders: Record<HTTPHeaderName, Parameters<OutgoingMessage[\"setHeader\"]>[1]>,\n): void;\nexport function setResponseHeaders(\n\theaders: Record<HTTPHeaderName, Parameters<OutgoingMessage[\"setHeader\"]>[1]>,\n): void;\n\nexport const setHeaders: typeof setResponseHeaders;\n\n\nexport function setResponseHeader(\n\tevent: HTTPEvent,\n\tname: HTTPHeaderName,\n\tvalue: Parameters<OutgoingMessage[\"setHeader\"]>[1],\n): void;\nexport function setResponseHeader(\n\tname: HTTPHeaderName,\n\tvalue: Parameters<OutgoingMessage[\"setHeader\"]>[1],\n): void;\n\nexport const setHeader: typeof setResponseHeader;\n\nexport function appendResponseHeaders(\n\tevent: HTTPEvent,\n\theaders: Record<string, string>,\n): void;\nexport function appendResponseHeaders(headers: Record<string, string>): void;\n\nexport const appendHeaders: typeof appendResponseHeaders;\n\nexport function appendResponseHeader(\n\tevent: HTTPEvent,\n\tname: HTTPHeaderName,\n\tvalue: string,\n): void;\nexport function appendResponseHeader(\n\tname: HTTPHeaderName,\n\tvalue: string,\n): void;\n\nexport const appendHeader: typeof appendResponseHeader;\n/**\n * Remove all response headers, or only those specified in the headerNames array.\n * @param event H3 event\n * @param headerNames Array of header names to remove\n */\nexport function clearResponseHeaders(\n\tevent: HTTPEvent,\n\theaderNames?: string[],\n): void;\nexport function clearResponseHeaders(headerNames?: string[]): void;\n\nexport function removeResponseHeader(\n\tevent: HTTPEvent,\n\tname: HTTPHeaderName,\n): void;\nexport function removeResponseHeader(name: HTTPHeaderName): void;\n\nexport function writeEarlyHints(\n\tevent: HTTPEvent,\n\thints: string | string[] | Record<string, string | string[]>,\n\tcb?: () => void,\n): void;\nexport function writeEarlyHints(\n\thints: string | string[] | Record<string, string | string[]>,\n\tcb?: () => void,\n): void;\n\nexport function getRequestHeaders(event: HTTPEvent): RequestHeaders;\nexport function getRequestHeaders(): RequestHeaders;\n\nexport const getHeaders: typeof getRequestHeaders;\n\nexport function getRequestHeader(\n\tevent: HTTPEvent,\n\tname: HTTPHeaderName,\n): RequestHeaders[string];\nexport function getRequestHeader(name: HTTPHeaderName): RequestHeaders[string];\n\nexport const getHeader: typeof getRequestHeader;\n\n/**\n * Check request caching headers (`If-Modified-Since`) and add caching headers (Last-Modified, Cache-Control)\n * Note: `public` cache control will be added by default\n * @returns `true` when cache headers are matching. When `true` is returned, no reponse should be sent anymore\n */\nexport function handleCacheHeaders(\n\tevent: HTTPEvent,\n\topts: CacheConditions,\n): boolean;\nexport function handleCacheHeaders(opts: CacheConditions): boolean;\n```\n\n----------------------------------------\n\nTITLE: Getting Request Web Stream in Vinxi\nDESCRIPTION: Demonstrates how to capture a ReadableStream from a request using the getRequestWebStream function from Vinxi's HTTP module.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/request.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventHandler, getRequestWebStream } from \"vinxi/http\";\n\nexport default eventHandler(async (event) => {\n  const stream = getRequestWebStream(event); // [!code highlight]\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Request Headers in TypeScript\nDESCRIPTION: Functions to retrieve request headers from an HTTP event. Includes methods to get all headers or a specific header by name.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getRequestHeaders(event: HTTPEvent): RequestHeaders;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getRequestHeader(\n  event: HTTPEvent,\n  name: HTTPHeaderName,\n): RequestHeaders[string];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session Data with getSession in Vinxi HTTP\nDESCRIPTION: Shows how to use the getSession function to retrieve session data. It includes setting up a session configuration, defining session data types, and accessing session properties like data, id, and createdAt.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/session.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SessionConfig, eventHandler, getSession } from \"vinxi/http\"\n\nconst sessionConfig = {\n  password: \"my-secret\",\n} as SessionConfig\n\ntype SessionData = {\n  user: string\n  role: string\n}\n\nexport default eventHandler(async (event) => {\n  const session = await getSession<SessionData>(event, sessionConfig) // [!code highlight]\n\n  session.data // { user: \"vinxi\", role: \"admin\" }\n  session.id // \"xas21312\n  session.createdAt\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getSession<T extends SessionDataT = SessionDataT>(\n  event: HTTPEvent,\n  config: SessionConfig,\n): Promise<Session<T>>\n```\n\n----------------------------------------\n\nTITLE: Proxying Requests in TypeScript\nDESCRIPTION: Functions to send and proxy requests in a Vinxi application.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport function sendProxy(\n  event: HTTPEvent,\n  options: {\n    target: string | URL;\n    [key: string]: any;\n  },\n): Promise<void>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function proxyRequest(\n  event: HTTPEvent,\n  options: {\n    target: string | URL;\n    [key: string]: any;\n  },\n): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Request Header in Vinxi\nDESCRIPTION: Shows how to get a specific request header by name using the getRequestHeader function from Vinxi's HTTP module.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/request.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventHandler, getRequestHeader } from \"vinxi/http\";\n\nexport default eventHandler(async (event) => {\n  const header = getRequestHeader(event, \"content-type\"); // [!code highlight]\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Session Data with updateSession in Vinxi HTTP\nDESCRIPTION: Demonstrates how to use the updateSession function to update session data. It includes setting up a session configuration, defining session data types, and updating a specific field in the session.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/session.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SessionConfig, eventHandler, updateSession } from \"vinxi/http\"\n\nconst sessionConfig = {\n  password: \"my-secret\",\n} as SessionConfig\n\ntype SessionData = {\n  user: string\n  role: string\n}\n\nexport default eventHandler(async (event) => {\n  const session = await updateSession<SessionData>(event, sessionConfig, { // [!code highlight]\n    role: \"member\", // [!code highlight]\n  }) // [!code highlight]\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function updateSession<T extends SessionDataT = SessionDataT>(\n  event: HTTPEvent,\n  config: SessionConfig,\n  update?: SessionUpdate<T>,\n): Promise<Session<T>>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vinxi for Solid SSR\nDESCRIPTION: Example configuration for setting up Vinxi with Solid SSR. It defines routers for static files, client-side code, and server-side rendering using Solid.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/packages/vinxi/README.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from \"vinxi\";\nimport solid from \"vite-plugin-solid\";\n\nexport default createApp({\n\trouters: [\n\t\t{\n\t\t\tname: \"public\",\n\t\t\ttype: \"static\",\n\t\t\tdir: \"./public\",\n\t\t},\n\t\t{\n\t\t\tname: \"client\",\n\t\t\ttype: \"client\",\n\t\t\thandler: \"./app/client.tsx\",\n\t\t\ttarget: \"browser\",\n\t\t\tplugins: () => [solid({ ssr: true })],\n\t\t\tbase: \"/_build\",\n\t\t},\n\t\t{\n\t\t\tname: \"ssr\",\n\t\t\ttype: \"http\",\n\t\t\thandler: \"./app/server.tsx\",\n\t\t\ttarget: \"server\",\n\t\t\tplugins: () => [solid({ ssr: true })],\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Checking for CORS Preflight Request in Vinxi\nDESCRIPTION: Shows how to determine if a request is a CORS preflight request using the isPreflightRequest function from Vinxi's HTTP module.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/request.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventHandler, isPreflightRequest } from \"vinxi/http\";\n\nexport default eventHandler(async (event) => {\n  const isPreflight = isPreflightRequest(event); // [!code highlight]\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Session Data with clearSession in Vinxi HTTP\nDESCRIPTION: Shows how to use the clearSession function to clear session data. It includes setting up a session configuration and calling the clearSession function within an event handler.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/session.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SessionConfig, clearSession, eventHandler } from \"vinxi/http\"\n\nconst sessionConfig = {\n  password: \"my-secret\",\n} as SessionConfig\n\nexport default eventHandler(async (event) => {\n  await clearSession(event, sessionConfig) // [!code highlight]\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function clearSession(\n  event: HTTPEvent,\n  config: Partial<SessionConfig>,\n): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Solid SSR with Vinxi\nDESCRIPTION: This code configures a Vinxi application with Solid.js server-side rendering. It creates three routers: one for static files, one for client-side Solid code, and one for server-side rendering, both using the solid plugin with SSR enabled.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/create-your-first-app.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from \"vinxi\";\nimport solid from \"vite-plugin-solid\";\n\nexport default createApp({\n  routers: [\n    {\n      name: \"public\",\n      type: \"static\",\n      dir: \"./public\",\n    },\n    {\n      name: \"client\",\n      type: \"client\",\n      handler: \"./app/client.tsx\",\n      plugins: () => [solid({ ssr: true })],\n      base: \"/_build\",\n    },\n    {\n      name: \"ssr\",\n      type: \"http\",\n      handler: \"./app/server.tsx\",\n      plugins: () => [solid({ ssr: true })],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Router Names in Event Handler\nDESCRIPTION: Demonstrates how to access router manifest information within an event handler using the routerName import from vinxi/manifest.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/router/http.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { routerName } from \"vinxi/manifest\";\n\nexport default eventHandler(() => {\n  const serverManifest = getManifest(routerName);\n  const clientManifest = getManifest(\"react-client\");\n});\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Cookie in Vinxi HTTP\nDESCRIPTION: Shows how to retrieve a specific cookie by name using the getCookie function. The function returns the cookie value if found, or undefined if the cookie doesn't exist.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/cookies.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventHandler, getCookie } from \"vinxi/http\"\n\nexport default eventHandler(async (event) => {\n  const authorization = getCookie(event, \"Authorization\") //\n  if (authorization) {\n    // ...\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Query Parameter Handling in TypeScript\nDESCRIPTION: Functions for retrieving and validating query parameters from HTTP events. Includes type inference for improved type safety.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function getQuery<\n\tT,\n\tEvent extends HTTPEvent = HTTPEvent,\n\t_T = Exclude<InferEventInput<\"query\", Event, T>, undefined>,\n>(event: Event): _T;\nexport function getQuery<\n\tT,\n\tEvent extends HTTPEvent = HTTPEvent,\n\t_T = Exclude<InferEventInput<\"query\", Event, T>, undefined>,\n>(): _T;\n\nexport function getValidatedQuery<\n\tT,\n\tEvent extends HTTPEvent = HTTPEvent,\n\t_T = InferEventInput<\"query\", Event, T>,\n>(event: Event, validate: ValidateFunction<_T>): Promise<_T>;\nexport function getValidatedQuery<\n\tT,\n\tEvent extends HTTPEvent = HTTPEvent,\n\t_T = InferEventInput<\"query\", Event, T>,\n>(validate: ValidateFunction<_T>): Promise<_T>;\n```\n\n----------------------------------------\n\nTITLE: Starting a Development Server with app.dev() Method\nDESCRIPTION: Shows how to start the development server for a Vinxi app using the app.dev() method. This is used during development to run the application with hot-reloading and other development features.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/app.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from \"vinxi\";\n\nconst app = createApp({\n  routers: [\n    // ... routers\n  ],\n});\n\nawait app.dev();\n```\n\n----------------------------------------\n\nTITLE: Client-side Manifest Usage Example\nDESCRIPTION: Shows how to use the Manifest API on the client side for hydration purposes, retrieving assets to match server-side rendered content.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/manifest.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getManifest } from \"vinxi/manifest\";\n\nconst clientManifest = getManifest(\"client\");\nconst assets = await clientManifest[clientManifest.handler].assets();\n\n// use assets in hydration\n```\n\n----------------------------------------\n\nTITLE: Getting Request Host in Vinxi\nDESCRIPTION: Shows how to retrieve the request host using the getRequestHost function from Vinxi's HTTP module.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/request.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventHandler, getRequestHost } from \"vinxi/http\";\n\nexport default eventHandler(async (event) => {\n  const host = getRequestHost(event); // [!code highlight]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Configured Fetch Function with Proxy Options in JavaScript\nDESCRIPTION: Function that creates a configured fetch function with proxy options. It handles URL transformation, headers modification, and WebSocket proxying based on the provided options.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/test/templates/react-to-web-request/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createConfiguredFetch(options) {\n  return (input, init) => {\n    const targetURL =\n      typeof input === \"string\"\n        ? new URL(input, options.target)\n        : new URL(input.url, options.target);\n\n    if (options.pathRewrite) {\n      const pathname = targetURL.pathname;\n      const matchedRule = Object.keys(options.pathRewrite).find((rule) => {\n        return pathname.match(new RegExp(rule));\n      });\n\n      if (matchedRule) {\n        targetURL.pathname = pathname.replace(\n          new RegExp(matchedRule),\n          options.pathRewrite[matchedRule]\n        );\n      }\n    }\n\n    if (options.changeOrigin) {\n      init = init || {};\n      init.headers = init.headers || {};\n      init.headers.host = targetURL.host;\n    }\n\n    const url = targetURL.toString();\n\n    const fetchFn = options.fetch;\n\n    if (options.ws && input.headers && input.headers.get(\"upgrade\") === \"websocket\") {\n      // Unfortunately, fetch doesn't support WebSocket proxying yet,\n      // so we'll need to use a different approach for WebSocket connections.\n      // Here's a placeholder for WebSocket proxying logic.\n      console.warn(\"WebSocket proxying is not fully implemented.\");\n      return fetchFn(url, init);\n    }\n\n    return fetchFn(url, init);\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPEvent Response Status Functions in TypeScript\nDESCRIPTION: Function declarations for setting and retrieving HTTP response status codes and text. These functions provide overloaded signatures that either accept an explicit HTTPEvent parameter or use an implicitly available event.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport function setResponseStatus(\n\tevent: HTTPEvent,\n\tcode?: number,\n\ttext?: string,\n): void;\nexport function setResponseStatus(code?: number, text?: string): void;\n\nexport function getResponseStatus(event: HTTPEvent): number;\nexport function getResponseStatus(): number;\n\nexport function getResponseStatusText(event: HTTPEvent): string;\nexport function getResponseStatusText(): string;\n```\n\n----------------------------------------\n\nTITLE: Accessing a Router by Name with getRouter Method\nDESCRIPTION: Shows how to retrieve a specific router by its name using the app.getRouter() method. This allows for runtime manipulation of router configurations.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/app.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from \"vinxi\";\n\nconst app = createApp({\n  routers: [\n    // ... routers\n  ],\n});\n\nconst router = app.getRouter(\"api\");\n```\n\n----------------------------------------\n\nTITLE: Vinxi Router Configuration\nDESCRIPTION: Configuration for Vinxi application with static and SPA routers\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/a-story.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from \"vinxi\";\n\nexport default createApp({\n  routers: [\n    {\n      name: \"public\",\n      type: \"static\",\n      dir: \"./public\",\n      base: \"/\",\n    },\n    {\n      name: \"app\",\n      type: \"spa\",\n      file: \"./index.html\",\n      base: \"/\",\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Script with Vinxi Runtime\nDESCRIPTION: Executes a TypeScript file within the Vinxi runtime, providing features like TypeScript support, ESM/CJS imports, and HMR powered by Vite.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/cli.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nvinxi run script.ts\n```\n\n----------------------------------------\n\nTITLE: Reading Raw Request Body in Vinxi\nDESCRIPTION: Shows how to read the raw request body as a string using the readRawBody function from Vinxi's HTTP module.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/request.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventHandler, readRawBody } from \"vinxi/http\";\n\nexport default eventHandler(async (event) => {\n  const body = await readRawBody(event, \"utf-8\"); // [!code highlight]\n});\n```\n\n----------------------------------------\n\nTITLE: Context and Event Handling in TypeScript\nDESCRIPTION: Functions for accessing the current HTTP event and managing context data. Provides utilities for getting and setting context values.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function getEvent(): HTTPEvent;\n\nexport function getContext(event: HTTPEvent, key: string): any;\nexport function getContext(key: string): any;\n\nexport function setContext(event: HTTPEvent, key: string, value: any): any;\nexport function setContext(key: string, value: any): any;\n```\n\n----------------------------------------\n\nTITLE: Reading Request Body in Vinxi\nDESCRIPTION: Demonstrates how to read and parse the request body as JSON using the readBody function from Vinxi's HTTP module.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/request.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventHandler, readBody } from \"vinxi/http\";\n\nexport default eventHandler(async (event) => {\n  const body = await readBody(event); // [!code highlight]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Method Validation Functions in TypeScript\nDESCRIPTION: Function declarations for checking and asserting HTTP request methods. Supports checking against a single method or an array of acceptable methods, with optional handling for HEAD requests.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n/*****************************************************\n * Method Utilities\n *****************************************************/\n\n\nexport function isMethod(\n\tevent: HTTPEvent,\n\texpected: HTTPMethod | HTTPMethod[],\n\tallowHead?: boolean,\n): boolean;\nexport function isMethod(\n\texpected: HTTPMethod | HTTPMethod[],\n\tallowHead?: boolean,\n): boolean;\n\nexport function assertMethod(\n\tevent: HTTPEvent,\n\texpected: HTTPMethod | HTTPMethod[],\n\tallowHead?: boolean,\n): void;\nexport function assertMethod(\n\texpected: HTTPMethod | HTTPMethod[],\n\tallowHead?: boolean,\n): void;\n```\n\n----------------------------------------\n\nTITLE: Getting Response Headers in TypeScript\nDESCRIPTION: Functions to retrieve response headers from an HTTP event. Includes methods to get all headers or a specific header by name.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getResponseHeaders(\n  event: HTTPEvent,\n): ReturnType<HTTPEvent[\"res\"][\"getHeaders\"]>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getResponseHeader(\n  event: HTTPEvent,\n  name: HTTPHeaderName,\n): ReturnType<HTTPEvent[\"res\"][\"getHeader\"]>;\n```\n\n----------------------------------------\n\nTITLE: Unsealing Session Data with unsealSession in Vinxi HTTP\nDESCRIPTION: Demonstrates how to use the unsealSession function to unseal session data. It includes setting up a session configuration and unsealing a session using a specific session ID.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/session.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SessionConfig, eventHandler, unsealSession } from \"vinxi/http\"\n\nconst sessionConfig = {\n  password: \"my-secret\",\n} as SessionConfig\n\nexport default eventHandler(async (event) => {\n  const session = await unsealSession(event, sessionConfig, \"xas21312\") // [!code highlight]\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function unsealSession(\n  event: HTTPEvent,\n  config: SessionConfig,\n  sealed: string,\n): Promise<Partial<Session<SessionDataT>>>\n```\n\n----------------------------------------\n\nTITLE: Error Handling in TypeScript\nDESCRIPTION: Functions for sending and creating errors in a Vinxi application.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport function sendError(event: HTTPEvent, error: any, debug?: any): void;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport function createError({\n  statusCode,\n  statusMessage,\n  data,\n}: {\n  statusCode?: number;\n  statusMessage?: string;\n  data?: any;\n}): Error;\n```\n\n----------------------------------------\n\nTITLE: Getting Request URL in Vinxi\nDESCRIPTION: Shows how to retrieve the full request URL and access its components using the getRequestURL function from Vinxi's HTTP module.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/request.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { eventHandler, getRequestURL } from \"vinxi/http\";\n\nexport default eventHandler(async (event) => {\n  const url = getRequestURL(event);\n\n  url.protocol; // \"http\"\n  url.hostname; // \"localhost\"\n  url.port; // \"3000\"\n  url.host; // \"localhost:3000\"\n  url.username; // \"\"\n  url.password; // \"\"\n  url.origin; // \"http://localhost:3000\"\n  url.pathname; // \"/products\"\n  url.search; // \"?category=shoes\"\n  url.searchParams; // URLSearchParams { category: \"shoes\" };\n  url.hash; // \"#section\";\n  url.href; // \"http://localhost:3000/products?category=shoes#section\";\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Validation of Request Body in Vinxi\nDESCRIPTION: Demonstrates how to use a custom validation function with readValidatedBody from Vinxi's HTTP module to validate the request body.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/request.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventHandler, readValidatedBody } from \"vinxi/http\";\n\n//\nexport default eventHandler(async (event) => {\n  // With a custom validation function\n  const body = await readValidatedBody(event, (body) => {\n    return typeof body === \"object\" && body !== null;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Vinxi App Configuration with Path Aliases\nDESCRIPTION: Simple Vinxi app configuration that adds the vite-tsconfig-paths plugin to the HTTP router, enabling path aliases to work in the application.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/aliases.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from \"vinxi\";\nimport tsconfigPaths from \"vite-tsconfig-paths\";\n\nexport default createApp({\n  routers: [\n    {\n      base: \"/\",\n      name: \"server\",\n      type: \"http\",\n      plugins: () => [tsconfigPaths()],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Generated Routes with Multiple Dependencies\nDESCRIPTION: Example of generated routes with multiple dependencies showing both static and dynamic imports.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/file-system-routing.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as mod from \"app/routes/hello.tsx?pick=config\";\n\nexport default [\n  {\n    path: \"/hello\",\n    $component: {\n      src: \"app/routes/hello.tsx?pick=default\",\n      import: async () => {\n        return await import(\"app/routes/hello.tsx?pick=default\");\n      },\n    },\n    $$config: {\n      src: \"app/routes/hello.tsx?pick=config\",\n      require: () => {\n        return mod;\n      },\n    },\n    $data: {\n      src: \"app/routes/hello.data.ts?pick=default\",\n      import: async () => {\n        return await import(\"app/routes/hello.data.ts?pick=default\");\n      },\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Building a Vinxi App for Production\nDESCRIPTION: Demonstrates how to build a Vinxi app for production using the app.build() method. This creates optimized assets and server code ready for deployment.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/app.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from \"vinxi\";\n\nconst app = createApp({\n  routers: [\n    // ... routers\n  ],\n});\n\nawait app.build();\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Function in Vinxi Script\nDESCRIPTION: Shows how to export a default function in a TypeScript file that will be executed by the Vinxi runtime.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/cli.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function () {\n  console.log(\"Hello World\");\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Query Parameters in TypeScript\nDESCRIPTION: Function to retrieve and validate query parameters from an HTTP event.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getQuery<\n    T,\n    Event extends H3Event<EventHandlerRequest> = H3Event<EventHandlerRequest>,\n    _T = Exclude<InferEventInput<'query', Event, T>, undefined>\n>(\n    event: Event\n) => _T;\n```\n\n----------------------------------------\n\nTITLE: Routing in TypeScript\nDESCRIPTION: Function to use a base path for routing in a Vinxi application.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useBase(base: string, handler: RequestHandler): RequestHandler;\n```\n\n----------------------------------------\n\nTITLE: Serving Static Vinxi Build with Custom Base URL\nDESCRIPTION: Starts a static file server to preview a Vinxi build with a custom base URL. This is useful for previewing static sites with a specific base path, such as a GitHub repository name.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/cli.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nvinxi serve --dir .output/public --base /my-repo\n```\n\n----------------------------------------\n\nTITLE: parseCookies Function Signature in Vinxi HTTP\nDESCRIPTION: Type signature for the parseCookies function, which parses all cookies from an HTTP event and returns them as a record of string key-value pairs.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/cookies.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function parseCookies(event: HTTPEvent): Record<string, string>\n```\n\n----------------------------------------\n\nTITLE: deleteCookie Function Signature in Vinxi HTTP\nDESCRIPTION: Type signature for the deleteCookie function, which removes a cookie with the specified name from an HTTP event. Optional serialization options can be provided.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/cookies.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport function deleteCookie(\n  event: HTTPEvent,\n  name: string,\n  serializeOptions?: CookieSerializeOptions,\n): void\n```\n\n----------------------------------------\n\nTITLE: Building Vinxi App with Custom Preset\nDESCRIPTION: Builds the Vinxi app for production using a custom preset. The default preset is 'node-server', but you can change it using the --preset option or SERVER_PRESET environment variable.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/cli.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvinxi build --preset vercel-edge\n\n# OR\nSERVER_PRESET=vercel-edge vinxi build\n```\n\n----------------------------------------\n\nTITLE: getCookie Function Signature in Vinxi HTTP\nDESCRIPTION: Type signature for the getCookie function, which retrieves a specific cookie value by name from an HTTP event.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/cookies.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getCookie(event: HTTPEvent, name: string): string | undefined\n```\n\n----------------------------------------\n\nTITLE: Defining CompiledRouter Interface in TypeScript\nDESCRIPTION: Interface definition for CompiledRouter that extends EventTarget with a getRoutes method returning Promise<Route[]>.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/file-system-routing.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CompiledRouter extends EventTarget {\n  getRoutes: () => Promise<Route[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Vinxi Scripting API for Shell Commands\nDESCRIPTION: Demonstrates how to use the Vinxi scripting API (vinxi/sh) to execute shell commands in a TypeScript file.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/cli.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport $ from \"vinxi/sh\";\n\nawait $`echo \"Hello World\"`; // prints \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Writing Early Hints in TypeScript\nDESCRIPTION: Function to write early hints for an HTTP event, allowing for performance optimizations.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function writeEarlyHints(\n  event: HTTPEvent,\n  hints: string | string[] | Record<string, string | string[]>,\n  cb?: () => void,\n): void;\n```\n\n----------------------------------------\n\nTITLE: Route Type Definition in TypeScript\nDESCRIPTION: Type definition for Route object showing path and dynamic file dependencies structure using $ and $$ prefixes.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/file-system-routing.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Route = {\n  path: string;\n  [key: `$$${string}`]: {\n    src: string;\n    pick?: string[];\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Vinxi Framework in an Application\nDESCRIPTION: Demonstrates how to use a custom framework wrapper for Vinxi in an application. This simplifies the app configuration by delegating it to the framework.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/app.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFrameworkApp } from \"framework\";\n\nexport default createFrameworkApp();\n```\n\n----------------------------------------\n\nTITLE: Fetch and Request Utilities\nDESCRIPTION: Functions for handling fetch operations with events and managing web requests.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport function fetchWithEvent<T = unknown, _R = any, F extends (req: RequestInfo | URL, opts?: any) => any = typeof fetch>(event: HTTPEvent, req: RequestInfo | URL, init?: RequestInit & { context?: H3EventContext }, options?: { fetch: F }): unknown extends T ? ReturnType<F> : T;\n\nexport function getWebRequest(event: HTTPEvent): Request;\n```\n\n----------------------------------------\n\nTITLE: Client Email Trigger with Confetti\nDESCRIPTION: Client-side implementation that triggers confetti effect and sends email request when button is clicked.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/a-story.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport confetti from \"canvas-confetti\";\n\ndocument.getElementById(\"my-button\").addEventListener(\"click\", () => {\n  confetti();\n  fetch(\"/api/send-email\", {\n    method: \"POST\",\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom CLI for a Vinxi Framework\nDESCRIPTION: Shows how to create a custom CLI for a Vinxi framework. This enables framework creators to provide their own commands and options for users.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/app.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFrameworkApp } from \"framework\";\n\nconst app = createFrameworkApp();\nif (process.argv.includes(\"--dev\")) {\n  await app.dev();\n} else if (process.argv.includes(\"--build\")) {\n  await app.build();\n}\n```\n\n----------------------------------------\n\nTITLE: Email Service Implementation Start\nDESCRIPTION: Initial setup for email service using nodemailer\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/a-story.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport nodemailer from \"nodemailer\";\nimport { eventHandler } from \"vinxi/http\";\n```\n\n----------------------------------------\n\nTITLE: Enhanced Server Email Handler with Timestamp\nDESCRIPTION: Updated server-side handler that reads the timestamp from request body and includes it in the email text.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/a-story.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport nodemailer from \"nodemailer\";\nimport { eventHandler, readBody } from \"vinxi/http\";\n\nexport default eventHandler(async (event) => {\n  const { time } = await readBody(event);\n  await nodemailer.sendMail({\n    from: \"\",\n    text: `Current time: ${time}`,\n  });\n\n  return \"done\";\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Vinxi App\nDESCRIPTION: Command to create a new Vinxi application using the create-vinxi tool.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/test/templates/multi-spa/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vinxi@latest\n```\n\n----------------------------------------\n\nTITLE: Initializing package.json for Vinxi Project\nDESCRIPTION: Creates the initial package.json file for a Vinxi project with essential scripts for development, building, and starting the application. The file specifies vinxi 0.3.8 as a dependency and configures the project for ES modules.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/a-story.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-app\",\n  \"type\": \"module\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"vinxi dev\",\n    \"build\": \"vinxi build\",\n    \"start\": \"vinxi start\"\n  },\n  \"dependencies\": {\n    \"vinxi\": \"0.3.8\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Client Email Request with Timestamp\nDESCRIPTION: Updated client-side code that includes current timestamp in the email request body.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/a-story.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport confetti from \"canvas-confetti\";\n\ndocument.getElementById(\"my-button\").addEventListener(\"click\", () => {\n  confetti();\n  fetch(\"/api/send-email\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      time: Date.now(),\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Server Email Handler Implementation\nDESCRIPTION: Server-side event handler for processing email requests using Nodemailer. Handles incoming POST requests and sends emails.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/a-story.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport default eventHandler(async (event) => {\n  await nodemailer.sendMail({\n    from: \"\",\n  });\n\n  return \"done\";\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Vinxi via npm\nDESCRIPTION: Command to install Vinxi using npm package manager.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/test/templates/multi-spa/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vinxi\n```\n\n----------------------------------------\n\nTITLE: Running Vinxi Development Server on Custom Port\nDESCRIPTION: Starts Vinxi's development server on a specified port. The default port is 3000, but you can change it using the --port option.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/cli.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvinxi dev --port 3001\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Vinxi Application Configuration\nDESCRIPTION: Initializes a minimal app.config.ts file that creates a Vinxi application instance with default settings using the createApp function.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/a-story.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from \"vinxi\";\n\nexport default createApp();\n```\n\n----------------------------------------\n\nTITLE: Creating Proxy Options with Default Values in JavaScript\nDESCRIPTION: A function that creates proxy options by merging provided options with default values. It handles properties like fetch, rewrites, and WebSocket configuration.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/test/templates/react-to-web-request/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function createProxyOptions(options = {}) {\n  return {\n    ...options,\n    fetch: options.fetch || fetch,\n    rewrites: options.rewrites ?? [],\n    ws: options.ws ?? false,\n    secure: options.secure ?? false,\n    hostRewrite: options.hostRewrite ?? false,\n    pathRewrite: options.pathRewrite,\n    followRedirects: options.followRedirects ?? false,\n    changeOrigin: options.changeOrigin\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Building Vinxi App for Production with Custom Config\nDESCRIPTION: Builds the Vinxi app for production using a custom configuration file. By default, it looks for app.config.js in the current directory.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/cli.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvinxi build --config path/to/your-app.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Vinxi App with API Router in TypeScript\nDESCRIPTION: Updated vite.config.ts file that includes an API router for handling server-side functionality, in addition to the existing static and SPA routers.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/add-to-existing-vite-app.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from \"vinxi\";\n\nexport default createApp({\n  routers: [\n    {\n      name: \"public\",\n      type: \"static\",\n      dir: \"./public\",\n    },\n    {\n      name: \"client\",\n      type: \"spa\",\n      handler: \"./index.html\",\n      base: \"/\",\n      plugins: () => [\n        config(\"custom\", {\n          // additional vite options\n        }),\n        // additional vite plugins\n      ],\n    },\n    {\n      name: \"api\",\n      type: \"http\",\n      handler: \"./api.ts\",\n      base: \"/api\",\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Generated Routes Example\nDESCRIPTION: Example of generated route configuration showing dynamic imports and static requires.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/file-system-routing.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default [\n  {\n    path: \"/hello\",\n    $component: {\n      src: \"app/routes/hello.tsx?pick=default\",\n      import: async () => {\n        return await import(\"app/routes/hello.tsx?pick=default\");\n      },\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Vinxi Server Preset for Bun Deployment\nDESCRIPTION: Example command showing how to build a Vinxi application for the Bun runtime using the SERVER_PRESET environment variable.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/deployment.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSERVER_PRESET=bun npm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in tsconfig.json\nDESCRIPTION: Configuration for tsconfig.json that sets up path aliases, enabling the use of '@/' to reference files from the src directory.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/aliases.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ESNext\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Bundler\",\n    \"allowSyntheticDefaultImports\": true,\n    \"esModuleInterop\": true,\n    \"jsx\": \"react-jsx\",\n    \"allowJs\": true,\n    \"checkJs\": true,\n    \"noEmit\": true,\n    \"types\": [\"vinxi/types/client\"],\n    \"isolatedModules\": true,\n    \"paths\": {\n      \"@/*\": [\"src/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sealing Session Data with sealSession in Vinxi HTTP\nDESCRIPTION: Provides the signature for the sealSession function used to seal session data. It takes an HTTPEvent and SessionConfig as parameters.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/session.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function sealSession(\n  event: HTTPEvent, \n  config: SessionConfig\n): void\n```\n\n----------------------------------------\n\nTITLE: Configuring Vinxi for Static File Serving\nDESCRIPTION: Enhances the app.config.js file to serve static files from a public directory. This creates a router that serves files from the ./public folder at the base URL path.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/a-story.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp } from \"vinxi\";\n\nexport default createApp({\n  routers: [\n    {\n      name: \"public\",\n      type: \"static\",\n      dir: \"./public\",\n      base: \"/\",\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Vinxi via npm\nDESCRIPTION: Command to install Vinxi package using npm.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/packages/vinxi/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vinxi\n```\n\n----------------------------------------\n\nTITLE: Using Relative Imports Without Path Aliases in React Components\nDESCRIPTION: Example of using traditional relative imports in a React component file, showing the cumbersome nature of deep relative paths.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/aliases.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Button from \"../../../../components/atoms/Button/Button\";\n```\n\n----------------------------------------\n\nTITLE: Using Path Aliases in React Components\nDESCRIPTION: Example of using path aliases in a React component file, demonstrating the cleaner and more maintainable import syntax with '@/' prefix.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/aliases.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Button from \"@/components/atoms/Button/Button\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Vinxi in JavaScript\nDESCRIPTION: Example of configuring a Vinxi application using JavaScript, including server and client setup.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/test/templates/multi-spa/README.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from \"vinxi\";\n\nconst app = createApp({\n  server: {\n    port: 3000\n  },\n  routers: [\n    {\n      name: \"public\",\n      mode: \"static\"\n    },\n    {\n      name: \"client\",\n      mode: \"build\",\n      handler: \"./app/client.tsx\"\n    },\n    {\n      name: \"ssr\",\n      mode: \"handler\",\n      handler: \"./app/server.tsx\"\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Home Page for Vinxi Documentation\nDESCRIPTION: This YAML configuration sets up the home page for Vinxi documentation using VitePress. It defines the layout, hero section with project details, and action buttons for navigation. The features section is commented out.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\n\nhero:\n  name: Vinxi\n  text: The Full Stack Javascript SDK\n  tagline: Build your javascript applications and frameworks with ease\n  actions:\n    - theme: brand\n      text: Get Started\n      link: /guide/getting-started\n    - theme: alt\n      text: API Reference\n      link: /api/app\n    - theme: alt\n      text: Try it out\n      link: https://stackblitz.com/github.com/nksaraf/vinxi/tree/main/examples/react/ssr/basic\n# features:\n#   - title: Feature A\n#     details: Lorem ipsum dolor sit amet, consectetur adipiscing elit\n#   - title: Feature B\n#     details: Lorem ipsum dolor sit amet, consectetur adipiscing elit\n#   - title: Feature C\n#     details: Lorem ipsum dolor sit amet, consectetur adipiscing elit\n```\n\n----------------------------------------\n\nTITLE: HTTP Event Type Checking\nDESCRIPTION: Function to verify if an input is an HTTPEvent object.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/response.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport function isHTTPEvent(input: any): input is HTTPEvent;\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic HTML Page for Static Serving\nDESCRIPTION: Creates a simple HTML file to be served by the static file router. This index.html file provides a basic structure with a 'Hello World' heading.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/a-story.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Hello World</title>\n  </head>\n  <body>\n    <h1>Hello World</h1>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Reference Documentation Page\nDESCRIPTION: This YAML frontmatter defines the document layout, title, and navigation order for a reference documentation page in a static site generator (likely Jekyll or similar).\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/reference.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: doc\ntitle: Reference\nnav_order: 2\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Vinxi with Package Managers\nDESCRIPTION: Code snippets showing how to install Vinxi using different package managers including pnpm, npm, yarn, and bun.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/getting-started.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install vinxi\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vinxi\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add vinxi\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun install vinxi\n```\n\n----------------------------------------\n\nTITLE: Installing Vinxi via npm\nDESCRIPTION: Command to install Vinxi package using npm package manager.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/add-to-existing-vite-app.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vinxi\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for Vinxi and Plugin References (0.0.24)\nDESCRIPTION: Dependency update changelog entry for Vinxi v0.0.24 and plugin-references v0.0.14 with commit reference 47abc3c.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/examples/vanilla/partyroom/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [47abc3c]\n  - @vinxi/plugin-references@0.0.14\n  - vinxi@0.0.24\n```\n\n----------------------------------------\n\nTITLE: Installing nodemailer with npm\nDESCRIPTION: Command to install the nodemailer package using npm for server-side email functionality.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/add-to-existing-vite-app.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install nodemailer\n```\n\n----------------------------------------\n\nTITLE: Installing nodemailer with yarn\nDESCRIPTION: Command to install the nodemailer package using yarn for server-side email functionality.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/add-to-existing-vite-app.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add nodemailer\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for Vinxi and Plugin References (0.0.26)\nDESCRIPTION: Dependency update changelog entry for Vinxi v0.0.26 and plugin-references v0.0.16 with commit reference 2b17e0d.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/examples/vanilla/partyroom/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [2b17e0d]\n  - vinxi@0.0.26\n  - @vinxi/plugin-references@0.0.16\n```\n\n----------------------------------------\n\nTITLE: Interactive Button Implementation\nDESCRIPTION: JavaScript code adding click event listener to a button\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/a-story.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ndocument.getElementById(\"my-button\").addEventListener(\"click\", () => {\n  console.log(\"Hello World\");\n});\n```\n\n----------------------------------------\n\nTITLE: Installing nodemailer with pnpm\nDESCRIPTION: Command to install the nodemailer package using pnpm for server-side email functionality.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/add-to-existing-vite-app.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm add nodemailer\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for Vinxi and Plugin References (0.0.25)\nDESCRIPTION: Dependency update changelog entry for Vinxi v0.0.25 and plugin-references v0.0.15 with commit reference 552d8ca.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/examples/vanilla/partyroom/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [552d8ca]\n  - vinxi@0.0.25\n  - @vinxi/plugin-references@0.0.15\n```\n\n----------------------------------------\n\nTITLE: Starting Vinxi Development Server\nDESCRIPTION: Runs the Vinxi development server using the npm script defined in package.json.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/a-story.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Structure\nDESCRIPTION: Initial HTML setup with script inclusion\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/a-story.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Hello World</title>\n  </head>\n  <body>\n    <h1>Hello World</h1>\n    <script src=\"/app.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Structured changelog entries documenting dependency updates and version changes for vinxi and @vinxi/react packages.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/test/templates/react-srv-fn/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [0335776]\n  - vinxi@0.0.40\n\n## null\n\n### Patch Changes\n\n- Updated dependencies [f237894]\n- Updated dependencies [d620072]\n  - vinxi@0.0.39\n```\n\n----------------------------------------\n\nTITLE: Installing vite-tsconfig-paths Plugin\nDESCRIPTION: Commands for installing the vite-tsconfig-paths plugin using different package managers, which is required to make path aliases work with Vite bundler.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/aliases.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vite-tsconfig-paths -D\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add vite-tsconfig-paths -D\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install vite-tsconfig-paths -D\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun install vite-tsconfig-paths -D\n```\n\n----------------------------------------\n\nTITLE: CSS Styling\nDESCRIPTION: Basic CSS styles for the application\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/a-story.md#2025-04-16_snippet_9\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  background-color: #000022;\n  color: #fff;\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Markdown\nDESCRIPTION: A changelog format listing package version updates and dependencies using semantic versioning\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/examples/react/rsc/fw/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# example-react-server\n\n## null\n\n### Patch Changes\n\n- Updated dependencies [6bb17d02]\n- Updated dependencies [1f899056]\n- Updated dependencies [6d71612e]\n  - vinxi@0.5.4\n```\n\n----------------------------------------\n\nTITLE: Installing Vinxi Dependencies\nDESCRIPTION: Installs the required dependencies specified in package.json using npm.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/a-story.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Package Installation Commands\nDESCRIPTION: Commands for installing canvas-confetti using different package managers\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/a-story.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install canvas-confetti\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add canvas-confetti\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add canvas-confetti\n```\n\n----------------------------------------\n\nTITLE: Initial JavaScript Setup\nDESCRIPTION: Basic JavaScript code logging to console\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/guide/a-story.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(\"Hello World\");\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog\nDESCRIPTION: Full version history of @vinxi/openapi package showing changes across multiple releases including breaking changes, features, and dependency updates\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/packages/vinxi-devtools/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @vinxi/openapi\n\n## 0.2.3\n\n### Patch Changes\n\n- ccb418ca: chore: cleanup dependencies of vinxi-devtools\n\n## 0.2.2\n\n### Patch Changes\n\n- 2b526da8: add \"license\" field to library package.json files\n\n## 0.2.1\n\n### Patch Changes\n\n- f1f81b0c: Update package.json\n\n## 0.2.0\n\n### Minor Changes\n\n- d2fcee6: feat: vinxi/http package for all the http server related utilities (vinxi/server reexports)\n\n### Patch Changes\n\n- 0c92d33: breaking: `mode` option on routers has been renamed to `type`\n- 2670f50: breaking: change \"build\" router type to \"client\"\n- 4a14764: breaking: update \"handler\" router types to \"http\"\n\n## 0.1.1\n\n### Patch Changes\n\n- 9c60b73: devtools out\n\n## 0.1.0\n\n### Minor Changes\n\n- e31abb2: chore: bring things to 0.1.x\n\n## 0.0.5\n\n### Patch Changes\n\n- 6fd5455: better build for devtools using hooks\n\n## 0.0.4\n\n### Patch Changes\n\n- 930b2f2: create server components package, remove references package\n\n## 0.0.3\n\n### Patch Changes\n\n- 2cf0023: remove unnecessary devtools server\n- 6ff575e: add devtools flag to vinxi, enabled by default\n- b437331: add vite-plugin-inspect to devtools\n\n## 0.0.2\n\n### Patch Changes\n\n- a009733: move doc out of vinxi core\n- Updated dependencies [a009733]\n  - @vinxi/doc@0.0.3\n```\n\n----------------------------------------\n\nTITLE: Vinxi Changelog Entry with Dependencies\nDESCRIPTION: A changelog entry showing dependency updates to vinxi and vinxi server functions packages along with breaking changes.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/examples/vanilla/spa/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- d2fcee6: feat: vinxi/http package for all the http server related utilities (vinxi/server reexports)\n\n### Patch Changes\n\n- 0c92d33: breaking: `mode` option on routers has been renamed to `type`\n- 2670f50: breaking: change \"build\" router type to \"client\" \n- 4a14764: breaking: update \"handler\" router types to \"http\"\n- Updated dependencies [d2fcee6]\n- Updated dependencies [0c92d33]\n- Updated dependencies [2670f50]\n- Updated dependencies [4a14764]\n  - @vinxi/server-functions@0.4.0\n  - vinxi@0.2.0\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for Vinxi and Plugin References (0.0.27)\nDESCRIPTION: Dependency update changelog entry for Vinxi v0.0.27 and plugin-references v0.0.17 with commit reference 7803042.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/examples/vanilla/partyroom/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [7803042]\n  - vinxi@0.0.27\n  - @vinxi/plugin-references@0.0.17\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog\nDESCRIPTION: A markdown formatted changelog documenting dependency updates and version changes for example-react-spa-basic package. Shows patch changes and dependency version bumps for vinxi and @vinxi/react packages.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/examples/react/spa/basic/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# example-react-spa-basic\n\n## null\n\n### Patch Changes\n\n- Updated dependencies [6bb17d02]\n- Updated dependencies [1f899056]\n- Updated dependencies [6d71612e]\n  - vinxi@0.5.4\n```\n\n----------------------------------------\n\nTITLE: Getting Request Protocol in Vinxi\nDESCRIPTION: Demonstrates how to get the request protocol (http or https) using the getRequestProtocol function from Vinxi's HTTP module.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/docs/api/server/request.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventHandler, getRequestProtocol } from \"vinxi/http\";\n\nexport default eventHandler(async (event) => {\n  const protocol = getRequestProtocol(event); // [!code highlight]\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying 'Yo' in Plaintext\nDESCRIPTION: A simple code snippet that outputs the text 'Yo'. This snippet doesn't specify a particular programming language and appears to be used as a placeholder or example.\nSOURCE: https://github.com/nksaraf/vinxi/blob/main/examples/react/spa/mdx/app/pages/hello.mdx#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nYo\n```"
  }
]