[
  {
    "owner": "streamich",
    "repo": "react-use",
    "content": "TITLE: Using useAsync Hook with React for Fetching Data\nDESCRIPTION: An example of using the useAsync hook to fetch data from a URL. The hook manages loading states, error handling, and displaying the fetched value.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useAsync.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useAsync} from 'react-use';\n\nconst Demo = ({url}) => {\n  const state = useAsync(async () => {\n    const response = await fetch(url);\n    const result = await response.text();\n    return result\n  }, [url]);\n\n  return (\n    <div>\n      {state.loading\n        ? <div>Loading...</div>\n        : state.error\n          ? <div>Error: {state.error.message}</div>\n          : <div>Value: {state.value}</div>\n      }\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating useSet Hook Usage in React\nDESCRIPTION: This snippet demonstrates how to use the useSet hook from react-use library. It shows the initialization of a Set, and usage of various methods like add, remove, toggle, reset, and clear. The component renders buttons to interact with the Set and displays its current state.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useSet.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useSet} from 'react-use';\n\nconst Demo = () => {\n  const [set, { add, has, remove, toggle, reset, clear }] = useSet(new Set(['hello']));\n\n  return (\n    <div>\n      <button onClick={() => add(String(Date.now()))}>Add</button>\n      <button onClick={() => reset()}>Reset</button>\n      <button onClick={() => clear()}>Clear</button>\n      <button onClick={() => remove('hello')} disabled={!has('hello')}>\n        Remove 'hello'\n      </button>\n      <button onClick={() => toggle('hello')}>Toggle hello</button>\n      <pre>{JSON.stringify(Array.from(set), null, 2)}</pre>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useLocalStorage Hook in React Component\nDESCRIPTION: Demonstrates basic usage of useLocalStorage hook to manage a localStorage value with setValue and remove functions. Shows how to initialize, update, and remove a localStorage value.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useLocalStorage.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useLocalStorage } from 'react-use';\n\nconst Demo = () => {\n  const [value, setValue, remove] = useLocalStorage('my-key', 'foo');\n\n  return (\n    <div>\n      <div>Value: {value}</div>\n      <button onClick={() => setValue('bar')}>bar</button>\n      <button onClick={() => setValue('baz')}>baz</button>\n      <button onClick={() => remove()}>Remove</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useClickAway Hook in React Components\nDESCRIPTION: Demonstrates how to implement the useClickAway hook from react-use library to detect when a user clicks outside a specified element. The hook takes a ref to the target element and a callback function that will be executed when an outside click is detected.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useClickAway.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useClickAway} from 'react-use';\n\nconst Demo = () => {\n  const ref = useRef(null);\n  useClickAway(ref, () => {\n    console.log('OUTSIDE CLICKED');\n  });\n\n  return (\n    <div ref={ref} style={{\n      width: 200,\n      height: 200,\n      background: 'red',\n    }} />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing FIFO Queue with useQueue Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useQueue hook from react-use to create a simple FIFO queue in a React component. It shows how to add and remove items from the queue, and display the first item, last item, and size of the queue.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useQueue.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useQueue } from 'react-use';\n\nconst Demo = () => {\n  const { add, remove, first, last, size } = useQueue();\n\n  return (\n    <div>\n      <ul>\n        <li>first: {first}</li>\n        <li>last: {last}</li>\n        <li>size: {size}</li>\n      </ul>\n      <button onClick={() => add((last || 0) + 1)}>Add</button>\n      <button onClick={() => remove()}>Remove</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Toggle State Management with useToggle React Hook\nDESCRIPTION: Demonstrates usage of the useToggle hook to manage a boolean state value in a React component. The hook initializes with a boolean value and returns both the current state and a toggle function that can either flip the boolean or set it to a specific value.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useToggle.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useToggle} from 'react-use';\n\nconst Demo = () => {\n  const [on, toggle] = useToggle(true);\n\n  return (\n    <div>\n      <div>{on ? 'ON' : 'OFF'}</div>\n      <button onClick={toggle}>Toggle</button>\n      <button onClick={() => toggle(true)}>set ON</button>\n      <button onClick={() => toggle(false)}>set OFF</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useDebounce Hook in React Component\nDESCRIPTION: Demonstrates how to use the useDebounce hook in a React component to create a debounced input field. The example shows handling user input with a 2-second delay before updating the debounced value.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useDebounce.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Demo = () => {\n  const [state, setState] = React.useState('Typing stopped');\n  const [val, setVal] = React.useState('');\n  const [debouncedValue, setDebouncedValue] = React.useState('');\n\n  const [, cancel] = useDebounce(\n    () => {\n      setState('Typing stopped');\n      setDebouncedValue(val);\n    },\n    2000,\n    [val]\n  );\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={val}\n        placeholder=\"Debounced input\"\n        onChange={({ currentTarget }) => {\n          setState('Waiting for typing to stop...');\n          setVal(currentTarget.value);\n        }}\n      />\n      <div>{state}</div>\n      <div>\n        Debounced value: {debouncedValue}\n        <button onClick={cancel}>Cancel debounce</button>\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useSessionStorage Hook in React\nDESCRIPTION: Demonstrates how to use the useSessionStorage hook to manage a sessionStorage key in a React component. The example shows setting and updating the value, as well as rendering it in the UI.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useSessionStorage.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useSessionStorage} from 'react-use';\n\nconst Demo = () => {\n  const [value, setValue] = useSessionStorage('my-key', 'foo');\n\n  return (\n    <div>\n      <div>Value: {value}</div>\n      <button onClick={() => setValue('bar')}>bar</button>\n      <button onClick={() => setValue('baz')}>baz</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing usePromise Hook in React Component\nDESCRIPTION: Demonstrates how to use the usePromise hook in a React component. The hook returns a 'mounted' function that wraps a promise, ensuring it only resolves when the component is mounted. This is useful for preventing state updates on unmounted components.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/usePromise.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {usePromise} from 'react-use';\n\nconst Demo = ({promise}) => {\n  const mounted = usePromise();\n  const [value, setValue] = useState();\n\n  useEffect(() => {\n    (async () => {\n      const value = await mounted(promise);\n      // This line will not execute if <Demo> component gets unmounted.\n      setValue(value);\n    })();\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Using useMedia Hook in React Component\nDESCRIPTION: Demonstrates how to use the useMedia hook to track a CSS media query for responsive design. The example checks if the screen width is at least 480px.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useMedia.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useMedia} from 'react-use';\n\nconst Demo = () => {\n  const isWide = useMedia('(min-width: 480px)');\n\n  return (\n    <div>\n      Screen is wide: {isWide ? 'Yes' : 'No'}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useCustomCompareEffect with Deep Comparison in React\nDESCRIPTION: Demonstrates how to use useCustomCompareEffect hook with lodash's isEqual for deep comparison of dependencies. The example shows incrementing a counter based on an options object.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useCustomCompareEffect.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useCounter, useCustomCompareEffect} from 'react-use';\nimport isEqual from 'lodash/isEqual';\n\nconst Demo = () => {\n  const [count, {inc: inc}] = useCounter(0);\n  const options = { step: 2 };\n\n  useCustomCompareEffect(() => {\n    inc(options.step)\n  }, [options], (prevDeps, nextDeps) => isEqual(prevDeps, nextDeps));\n\n  return (\n    <div>\n      <p>useCustomCompareEffect with deep comparison: {count}</p>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useLatest Hook for Asynchronous Access to State in React\nDESCRIPTION: This example demonstrates how to use the useLatest hook to access the latest state value inside an asynchronous callback. The hook creates a ref object that always holds the most current state value, solving the stale closure problem.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useLatest.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useLatest } from 'react-use';\n\nconst Demo = () => {\n  const [count, setCount] = React.useState(0);\n  const latestCount = useLatest(count);\n\n  function handleAlertClick() {\n    setTimeout(() => {\n      alert(`Latest count value: ${latestCount.current}`);\n    }, 3000);\n  }\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n      <button onClick={handleAlertClick}>Show alert</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useAsyncRetry Hook in React Component\nDESCRIPTION: This snippet demonstrates how to use the useAsyncRetry hook in a React component. It fetches data from a URL, handles loading and error states, and provides a retry button.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useAsyncRetry.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useAsyncRetry} from 'react-use';\n\nconst Demo = ({url}) => {\n  const state = useAsyncRetry(async () => {\n    const response = await fetch(url);\n    const result = await response.text();\n    return result;\n  }, [url]);\n\n  return (\n    <div>\n      {state.loading\n        ? <div>Loading...</div>\n        : state.error\n          ? <div>Error: {state.error.message}</div>\n          : <div>Value: {state.value}</div>\n      }\n      {!loading && <button onClick={() => state.retry()}>Start loading</button>}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useGetSet Hook for Asynchronous State Updates in React\nDESCRIPTION: This snippet demonstrates how to use the useGetSet hook to correctly increment a counter after a 1-second delay on each button click. It prevents issues that can occur with nested functions in asynchronous operations.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useGetSet.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useGetSet} from 'react-use';\n\nconst Demo = () => {\n  const [get, set] = useGetSet(0);\n  const onClick = () => {\n    setTimeout(() => {\n      set(get() + 1)\n    }, 1_000);\n  };\n\n  return (\n    <button onClick={onClick}>Clicked: {get()}</button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useHover Hook with React Elements\nDESCRIPTION: Demonstrates how to implement the useHover hook to track when an element is being hovered. The hook accepts a React element or a function that returns one, and returns both the hoverable element and the hover state.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useHover.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useHover} from 'react-use';\n\nconst Demo = () => {\n  const element = (hovered) =>\n    <div>\n      Hover me! {hovered && 'Thanks!'}\n    </div>;\n  const [hoverable, hovered] = useHover(element);\n\n  return (\n    <div>\n      {hoverable}\n      <div>{hovered ? 'HOVERED' : ''}</div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter with useMethods Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useMethods hook to create a simple counter component. It defines an initial state and methods for resetting, incrementing, and decrementing the count.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useMethods.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useMethods } from 'react-use';\n\nconst initialState = {\n  count: 0,\n};\n\nfunction createMethods(state) {\n  return {\n    reset() {\n      return initialState;\n    },\n    increment() {\n      return { ...state, count: state.count + 1 };\n    },\n    decrement() {\n      return { ...state, count: state.count - 1 };\n    },\n  };\n}\n\nconst Demo = () => {\n  const [state, methods] = useMethods(createMethods, initialState);\n\n  return (\n    <>\n      <p>Count: {state.count}</p>\n      <button onClick={methods.decrement}>-</button>\n      <button onClick={methods.increment}>+</button>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useWindowSize Hook in React Component\nDESCRIPTION: Demonstrates how to use the useWindowSize hook to display the current width and height of the browser window in a React component.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useWindowSize.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useWindowSize} from 'react-use';\n\nconst Demo = () => {\n  const {width, height} = useWindowSize();\n\n  return (\n    <div>\n      <div>width: {width}</div>\n      <div>height: {height}</div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useGeolocation Hook in React\nDESCRIPTION: Demonstrates how to import and use the useGeolocation hook to track a user's geographic location and display the resulting state data in a pre-formatted block.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useGeolocation.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useGeolocation} from 'react-use';\n\nconst Demo = () => {\n  const state = useGeolocation();\n\n  return (\n    <pre>\n      {JSON.stringify(state, null, 2)}\n    </pre>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useAsyncFn Hook in React Component\nDESCRIPTION: This snippet demonstrates how to use the useAsyncFn hook in a React component. It handles loading, error, and success states for an asynchronous fetch operation.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useAsyncFn.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useAsyncFn} from 'react-use';\n\nconst Demo = ({url}) => {\n  const [state, doFetch] = useAsyncFn(async () => {\n    const response = await fetch(url);\n    const result = await response.text();\n    return result\n  }, [url]);\n\n  return (\n    <div>\n      {state.loading\n        ? <div>Loading...</div>\n        : state.error\n          ? <div>Error: {state.error.message}</div>\n          : <div>Value: {state.value}</div>\n      }\n      <button onClick={() => doFetch()}>Start loading</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic useKeyPress Hook Implementation in React JSX\nDESCRIPTION: Demonstrates how to use the useKeyPress hook to detect when users press number keys from 0 to 9. The example renders the pressed numbers with plus signs between them when multiple keys are pressed simultaneously.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useKeyPress.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useKeyPress} from 'react-use';\n\nconst keys = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];\n\nconst Demo = () => {\n  const states = [];\n  for (const key of keys) states.push(useKeyPress(key)[0]);\n\n  return (\n    <div style={{textAlign: 'center'}}>\n      Try pressing numbers\n      <br />\n      {states.reduce((s, pressed, index) => s + (pressed ? (s ? ' + ' : '') + keys[index] : ''), '')}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useSetState Hook in React JSX\nDESCRIPTION: This snippet demonstrates how to use the useSetState hook in a React component. It shows the creation of a state object and various ways to update it using the setState method.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useSetState.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useSetState} from 'react-use';\n\nconst Demo = () => {\n  const [state, setState] = useSetState({});\n\n  return (\n    <div>\n      <pre>{JSON.stringify(state, null, 2)}</pre>\n      <button onClick={() => setState({hello: 'world'})}>hello</button>\n      <button onClick={() => setState({foo: 'bar'})}>foo</button>\n      <button \n        onClick={() => {\n          setState((prevState) => ({\n            count: (prevState.count || 0) + 1,\n          }))\n        }}\n      >\n        count\n      </button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter with Min/Max Values using useCounter Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useCounter hook to create multiple counters with minimum and maximum values. It showcases various operations like increment, decrement, set, and reset on the counters.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useCounter.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useCounter, useNumber} from 'react-use';\n\nconst Demo = () => {\n  const [min, { inc: incMin, dec: decMin }] = useCounter(1);\n  const [max, { inc: incMax, dec: decMax }] = useCounter(10);\n  const [value, { inc, dec, set, reset }] = useCounter(5, max, min);\n\n  return (\n    <div>\n      <div>\n        current: { value } [min: { min }; max: { max }]\n      </div>\n\n      <br />\n      Current value: <button onClick={ () => inc() }>Increment</button>\n      <button onClick={ () => dec() }>Decrement</button>\n      <button onClick={ () => inc(5) }>Increment (+5)</button>\n      <button onClick={ () => dec(5) }>Decrement (-5)</button>\n      <button onClick={ () => set(100) }>Set 100</button>\n      <button onClick={ () => reset() }>Reset</button>\n      <button onClick={ () => reset(25) }>Reset (25)</button>\n\n      <br />\n      <br />\n      Min value:\n      <button onClick={ () => incMin() }>Increment</button>\n      <button onClick={ () => decMin() }>Decrement</button>\n\n      <br />\n      <br />\n      Max value:\n      <button onClick={ () => incMax() }>Increment</button>\n      <button onClick={ () => decMax() }>Decrement</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useMeasure Hook in React Component\nDESCRIPTION: Demonstrates how to use the useMeasure hook to track dimensions of an HTML element in a React component. The hook returns a ref and an object containing the element's dimensions and position.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useMeasure.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useMeasure } from \"react-use\";\n\nconst Demo = () => {\n  const [ref, { x, y, width, height, top, right, bottom, left }] = useMeasure();\n\n  return (\n    <div ref={ref}>\n      <div>x: {x}</div>\t\n      <div>y: {y}</div>\n      <div>width: {width}</div>\n      <div>height: {height}</div>\n      <div>top: {top}</div>\n      <div>right: {right}</div>\n      <div>bottom: {bottom}</div>\n      <div>left: {left}</div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useHash Hook in React\nDESCRIPTION: Demonstrates how to use the useHash hook to track and modify browser location hash. The example shows setting an initial hash value on mount and creating an input field to dynamically update the hash. The hook returns the current hash value and a setter function.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useHash.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useHash} from 'react-use';\n\nconst Demo = () => {\n  const [hash, setHash] = useHash();\n\n  useMount(() => {\n    setHash('#/path/to/page?userId=123');\n  });\n\n  return (\n    <div>\n      <div>window.location.href:</div>\n      <div>\n        <pre>{window.location.href}</pre>\n      </div>\n      <div>Edit hash: </div>\n      <div>\n        <input style={{ width: '100%' }} value={hash} onChange={e => setHash(e.target.value)} />\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useEffectOnce Hook in React Component\nDESCRIPTION: Example showing how to use useEffectOnce hook to run an effect once on component mount and cleanup on unmount. The hook takes an effect callback that executes on mount and can return a cleanup function.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useEffectOnce.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useEffectOnce} from 'react-use';\n\nconst Demo = () => {\n  useEffectOnce(() => {\n    console.log('Running effect once on mount')\n\n    return () => {\n      console.log('Running clean-up of effect on unmount')\n    }\n  });\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Using useIntersection Hook in React Components\nDESCRIPTION: Demonstrates how to implement the useIntersection hook to detect when an element is fully in view or partially obscured. The hook takes a ref to the target element and intersection observer options.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useIntersection.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { useIntersection } from 'react-use';\n\nconst Demo = () => {\n  const intersectionRef = React.useRef(null);\n  const intersection = useIntersection(intersectionRef, {\n    root: null,\n    rootMargin: '0px',\n    threshold: 1\n  });\n\n  return (\n    <div ref={intersectionRef}>\n      {intersection && intersection.intersectionRatio < 1\n        ? 'Obscured'\n        : 'Fully in view'}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useVideo Hook in React\nDESCRIPTION: Demonstrates how to use the useVideo hook to create a video player with controls. The example shows how to render the video, display its state, and implement various playback controls.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useVideo.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useVideo} from 'react-use';\n\nconst Demo = () => {\n  const [video, state, controls, ref] = useVideo(\n    <video src=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\" autoPlay />\n  );\n\n  return (\n    <div>\n      {video}\n      <pre>{JSON.stringify(state, null, 2)}</pre>\n      <button onClick={controls.pause}>Pause</button>\n      <button onClick={controls.play}>Play</button>\n      <br/>\n      <button onClick={controls.mute}>Mute</button>\n      <button onClick={controls.unmute}>Un-mute</button>\n      <br/>\n      <button onClick={() => controls.volume(.1)}>Volume: 10%</button>\n      <button onClick={() => controls.volume(.5)}>Volume: 50%</button>\n      <button onClick={() => controls.volume(1)}>Volume: 100%</button>\n      <br/>\n      <button onClick={() => controls.seek(state.time - 5)}>-5 sec</button>\n      <button onClick={() => controls.seek(state.time + 5)}>+5 sec</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Global State in React Components with useGlobalState\nDESCRIPTION: This snippet demonstrates how to create a global state using createGlobalState and use it across multiple components. It shows how to increment and decrement the shared value.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/createGlobalState.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst useGlobalValue = createGlobalState<number>(0);\n\nconst CompA: FC = () => {\n  const [value, setValue] = useGlobalValue();\n\n  return <button onClick={() => setValue(value + 1)}>+</button>;\n};\n\nconst CompB: FC = () => {\n  const [value, setValue] = useGlobalValue();\n\n  return <button onClick={() => setValue(value - 1)}>-</button>;\n};\n\nconst Demo: FC = () => {\n  const [value] = useGlobalValue();\n  return (\n    <div>\n      <p>{value}</p>\n      <CompA />\n      <CompB />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useScroll Hook in React Component\nDESCRIPTION: Demonstrates how to use the useScroll hook in a React component to track scroll position. The hook is applied to a ref of a div element, and the x and y scroll positions are displayed.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useScroll.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useScroll} from 'react-use';\n\nconst Demo = () => {\n  const scrollRef = React.useRef(null);\n  const {x, y} = useScroll(scrollRef);\n\n  return (\n    <div ref={scrollRef}>\n      <div>x: {x}</div>\n      <div>y: {y}</div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useUpdateEffect Hook in React\nDESCRIPTION: Example showing how to use useUpdateEffect hook alongside useState and useEffect. The hook ignores the first render and only executes on subsequent updates. Includes a counter implementation with interval-based updates.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useUpdateEffect.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {useUpdateEffect} from 'react-use';\n\nconst Demo = () => {\n  const [count, setCount] = React.useState(0);\n  \n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setCount(count => count + 1)\n    }, 1000)\n    \n    return () => {\n      clearInterval(interval)\n    }\n  }, [])\n  \n  useUpdateEffect(() => {\n    console.log('count', count) // will only show 1 and beyond\n    \n    return () => { // *OPTIONAL*\n      // do something on unmount\n    }\n  }) // you can include deps array if necessary\n\n  return <div>Count: {count}</div>\n};\n```\n\n----------------------------------------\n\nTITLE: Using useCookie Hook in React Component\nDESCRIPTION: A demonstration of how to use the useCookie hook in a React component. The example shows getting the cookie value, updating it with a counter, and deleting it on component mount.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useCookie.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCookie } from \"react-use\";\n\nconst Demo = () => {\n  const [value, updateCookie, deleteCookie] = useCookie(\"my-cookie\");\n  const [counter, setCounter] = useState(1);\n\n  useEffect(() => {\n    deleteCookie();\n  }, []);\n\n  const updateCookieHandler = () => {\n    updateCookie(`my-awesome-cookie-${counter}`);\n    setCounter(c => c + 1);\n  };\n\n  return (\n    <div>\n      <p>Value: {value}</p>\n      <button onClick={updateCookieHandler}>Update Cookie</button>\n      <br />\n      <button onClick={deleteCookie}>Delete Cookie</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useCopyToClipboard Hook in React Component\nDESCRIPTION: Example showing how to implement clipboard copy functionality in a React component with input field and copy button. Demonstrates error handling and success state display.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useCopyToClipboard.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Demo = () => {\n  const [text, setText] = React.useState('');\n  const [state, copyToClipboard] = useCopyToClipboard();\n\n  return (\n    <div>\n      <input value={text} onChange={e => setText(e.target.value)} />\n      <button type=\"button\" onClick={() => copyToClipboard(text)}>copy text</button>\n      {state.error\n        ? <p>Unable to copy value: {state.error.message}</p>\n        : state.value && <p>Copied {state.value}</p>}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useStateList Hook in React Component\nDESCRIPTION: Example React component demonstrating usage of useStateList hook with buttons for navigation and input fields for direct state manipulation. Shows how to use prev, next, setStateAt, and setState functionalities.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useStateList.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useStateList } from 'react-use';\nimport { useRef } from 'react';\n\nconst stateSet = ['first', 'second', 'third', 'fourth', 'fifth'];\n\nconst Demo = () => {\n  const { state, prev, next, setStateAt, setState, currentIndex, isFirst, isLast } = useStateList(stateSet);\n  const indexInput = useRef<HTMLInputElement>(null);\n  const stateInput = useRef<HTMLInputElement>(null);\n\n  return (\n    <div>\n      <pre>\n        {state} [index: {currentIndex}], [isFirst: {isFirst}], [isLast: {isLast}]\n      </pre>\n      <button onClick={() => prev()}>prev</button>\n      <br />\n      <button onClick={() => next()}>next</button>\n      <br />\n      <input type=\"text\" ref={indexInput} style={{ width: 120 }} />\n      <button onClick={() => setStateAt((indexInput.current!.value as unknown) as number)}>set state by index</button>\n      <br />\n      <input type=\"text\" ref={stateInput} style={{ width: 120 }} />\n      <button onClick={() => setState(stateInput.current!.value)}> set state by value</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: useCopyToClipboard Hook API Reference\nDESCRIPTION: API reference showing the hook's return signature with destructuring. Returns an object containing value, error, and noUserInteraction states, along with the copyToClipboard function.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useCopyToClipboard.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst [{value, error, noUserInteraction}, copyToClipboard] = useCopyToClipboard();\n```\n\n----------------------------------------\n\nTITLE: Advanced Examples of useKey Hook Usage in JavaScript\nDESCRIPTION: Demonstrates two advanced uses of the useKey hook. The first example shows how to listen for a specific key, while the second uses a predicate function and specifies the keyup event.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useKey.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nuseKey('a', () => alert('\"a\" pressed'));\n\nconst predicate = (event) => event.key === 'a'\nuseKey(predicate, handler, {event: 'keyup'});\n```\n\n----------------------------------------\n\nTITLE: Implementing State Validation with useStateValidator in React\nDESCRIPTION: This example demonstrates how to use the useStateValidator hook to validate user input for even numbers. It includes a custom validator function and renders an input field with validation feedback.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useStateValidator.md#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { useCallback } from 'react';\nimport { useStateValidator } from 'react-use';\n\nconst DemoStateValidator = s => [s === '' ? null : (s * 1) % 2 === 0];\nconst Demo = () => {\n  const [state, setState] = React.useState<string | number>(0);\n  const [[isValid]] = useStateValidator(state, DemoStateValidator);\n\n  return (\n    <div>\n      <div>Below field is valid only if number is even</div>\n      <input\n        type=\"number\"\n        min=\"0\"\n        max=\"10\"\n        value={state}\n        onChange={(ev: React.ChangeEvent<HTMLInputElement>) => {\n          setState(ev.target.value);\n        }}\n      />\n      {isValid !== null && <span>{isValid ? 'Valid!' : 'Invalid'}</span>}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Window Resize Handler with useRafState Hook in React\nDESCRIPTION: Example demonstrating how to use useRafState hook to track window dimensions. The state updates are synchronized with requestAnimationFrame for better performance. Uses useMount for lifecycle management and includes cleanup to prevent memory leaks.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useRafState.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useRafState, useMount} from 'react-use';\n\nconst Demo = () => {\n  const [state, setState] = useRafState({\n    width: 0,\n    height: 0,\n  });\n\n  useMount(() => {\n    const onResize = () => {\n      setState({\n        width: window.clientWidth,\n        height: window.height,\n      });\n    };\n\n    window.addEventListener('resize', onResize);\n\n    return () => {\n      window.removeEventListener('resize', onResize);\n    };\n  });\n\n  return <pre>{JSON.stringify(state, null, 2)}</pre>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing State Management with useGetSetState in React\nDESCRIPTION: This snippet demonstrates how to use the useGetSetState hook to manage state in a React component. It allows for asynchronous state updates while avoiding stale state issues.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useGetSetState.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useGetSetState} from 'react-use';\n\nconst Demo = () => {\n  const [get, setState] = useGetSetState({cnt: 0});\n  const onClick = () => {\n    setTimeout(() => {\n      setState({cnt: get().cnt + 1})\n    }, 1000);\n  };\n\n  return (\n    <button onClick={onClick}>Clicked: {get().cnt}</button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useSearchParam Hook in React Component\nDESCRIPTION: Demonstrates how to use the useSearchParam hook to track and manipulate URL search parameters. The example shows a component that reads the 'edit' search parameter and includes buttons to modify it through browser history manipulation.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useSearchParam.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useSearchParam} from 'react-use';\n\nconst Demo = () => {\n  const edit = useSearchParam('edit');\n\n  return (\n    <div>\n      <div>edit: {edit || '🤷‍♂️'}</div>\n      <div>\n        <button onClick={() => history.pushState({}, '', location.pathname + '?edit=123')}>Edit post 123 (?edit=123)</button>\n      </div>\n      <div>\n      <button onClick={() => history.pushState({}, '', location.pathname + '?edit=999')}>Edit post 999 (?edit=999)</button>\n      </div>\n      <div>\n        <button onClick={() => history.pushState({}, '', location.pathname)}>Close modal</button>\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useSize Hook in React Component\nDESCRIPTION: Example showing how to use the useSize hook to track an element's dimensions and display them. The hook takes a render function and initial size object, returning both the rendered element and its current dimensions.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useSize.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useSize} from 'react-use';\n\nconst Demo = () => {\n  const [sized, {width, height}] = useSize(\n    ({width}) => <div style={{background: 'red'}}>Size me up! ({width}px)</div>,\n    { width: 100, height: 100 }\n  );\n\n  return (\n    <div>\n      {sized}\n      <div>width: {width}</div>\n      <div>height: {height}</div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useDeepCompareEffect with Object Dependencies in React\nDESCRIPTION: Example demonstrating how to use the useDeepCompareEffect hook with object dependencies. This hook allows the effect to only re-run when the deep content of dependencies changes, not just references. The example incrementally updates a counter based on an options object.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useDeepCompareEffect.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useCounter, useDeepCompareEffect} from 'react-use';\n\nconst Demo = () => {\n  const [count, {inc: inc}] = useCounter(0);\n  const options = { step: 2 };\n\n  useDeepCompareEffect(() => {\n    inc(options.step)\n  }, [options]);\n\n  return (\n    <div>\n      <p>useDeepCompareEffect: {count}</p>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useDrop Hook in React\nDESCRIPTION: Demonstrates how to use the useDrop hook to handle drop events for the entire page. It logs files, URIs, and text that are dropped or pasted onto the page.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useDrop.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useDrop} from 'react-use';\n\nconst Demo = () => {\n  const state = useDrop({\n    onFiles: files => console.log('files', files),\n    onUri: uri => console.log('uri', uri),\n    onText: text => console.log('text', text),\n  });\n\n  return (\n    <div>\n      Drop something on the page.\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter with useInterval in React\nDESCRIPTION: This snippet demonstrates how to use the useInterval hook to create a counter that can be started, stopped, and have its interval adjusted. It showcases the hook's ability to pause the interval by setting the delay to null.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useInterval.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport {useInterval} from 'react-use';\n\nconst Demo = () => {\n  const [count, setCount] = React.useState(0);\n  const [delay, setDelay] = React.useState(1000);\n  const [isRunning, toggleIsRunning] = useBoolean(true);\n\n  useInterval(\n    () => {\n      setCount(count + 1);\n    },\n    isRunning ? delay : null\n  );\n\n  return (\n    <div>\n      <div>\n        delay: <input value={delay} onChange={event => setDelay(Number(event.target.value))} />\n      </div>\n      <h1>count: {count}</h1>\n      <div>\n        <button onClick={toggleIsRunning}>{isRunning ? 'stop' : 'start'}</button>\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useMediaDevices Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useMediaDevices hook from the react-use library. It imports the hook, uses it within a React component, and renders the resulting state as a JSON string.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useMediaDevices.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useMediaDevices} from 'react-use';\n\nconst Demo = () => {\n  const state = useMediaDevices();\n\n  return (\n    <pre>\n      {JSON.stringify(state, null, 2)}\n    </pre>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using createStateContext for Shared State Between Components in React\nDESCRIPTION: This example demonstrates how to use createStateContext to create shared text state between two input components. It shows the creation of a shared state hook and provider, and how to use them in child components.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/createStateContext.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createStateContext } from 'react-use';\n\nconst [useSharedText, SharedTextProvider] = createStateContext('');\n\nconst ComponentA = () => {\n  const [text, setText] = useSharedText();\n  return (\n    <p>\n      Component A:\n      <br />\n      <input type=\"text\" value={text} onInput={ev => setText(ev.target.value)} />\n    </p>\n  );\n};\n\nconst ComponentB = () => {\n  const [text, setText] = useSharedText();\n  return (\n    <p>\n      Component B:\n      <br />\n      <input type=\"text\" value={text} onInput={ev => setText(ev.target.value)} />\n    </p>\n  );\n};\n\nconst Demo = () => {\n  return (\n    <SharedTextProvider>\n      <p>Those two fields share the same value.</p>\n      <ComponentA />\n      <ComponentB />\n    </SharedTextProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useNetworkState Hook in React Component\nDESCRIPTION: Example demonstrating how to implement the useNetworkState hook in a React component to display network connection information.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useNetworkState.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useNetworkState} from 'react-use';\n\nconst Demo = () => {\n  const state = useNetworkState();\n\n  return (\n    <pre>\n      {JSON.stringify(state, null, 2)}\n    </pre>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useAudio Hook in React Component\nDESCRIPTION: Demonstrates how to use the useAudio hook in a React component, including rendering the audio element and implementing playback controls.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useAudio.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useAudio} from 'react-use';\n\nconst Demo = () => {\n  const [audio, state, controls, ref] = useAudio({\n    src: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-2.mp3',\n    autoPlay: true,\n  });\n\n  return (\n    <div>\n      {audio}\n      <pre>{JSON.stringify(state, null, 2)}</pre>\n      <button onClick={controls.pause}>Pause</button>\n      <button onClick={controls.play}>Play</button>\n      <br/>\n      <button onClick={controls.mute}>Mute</button>\n      <button onClick={controls.unmute}>Un-mute</button>\n      <br/>\n      <button onClick={() => controls.volume(.1)}>Volume: 10%</button>\n      <button onClick={() => controls.volume(.5)}>Volume: 50%</button>\n      <button onClick={() => controls.volume(1)}>Volume: 100%</button>\n      <br/>\n      <button onClick={() => controls.seek(state.time - 5)}>-5 sec</button>\n      <button onClick={() => controls.seek(state.time + 5)}>+5 sec</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useShallowCompareEffect Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useShallowCompareEffect hook in a React component. It increments a counter based on an options object, using shallow comparison for dependency changes.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useShallowCompareEffect.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useCounter, useShallowCompareEffect} from 'react-use';\n\nconst Demo = () => {\n  const [count, {inc: inc}] = useCounter(0);\n  const options = { step: 2 };\n\n  useShallowCompareEffect(() => {\n    inc(options.step)\n  }, [options]);\n\n  return (\n    <div>\n      <p>useShallowCompareEffect: {count}</p>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useLocation Hook in React Component\nDESCRIPTION: This snippet demonstrates how to import and use the useLocation hook from react-use library in a React component. It renders the location state as a JSON string.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useLocation.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useLocation} from 'react-use';\n\nconst Demo = () => {\n  const state = useLocation();\n\n  return (\n    <pre>\n      {JSON.stringify(state, null, 2)}\n    </pre>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Counter with createReducerContext in React\nDESCRIPTION: This snippet demonstrates how to use createReducerContext to create a shared counter state across multiple components. It includes the reducer function, context creation, and usage in two separate components.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/createReducerContext.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createReducerContext } from 'react-use';\n\ntype Action = 'increment' | 'decrement';\n\nconst reducer = (state: number, action: Action) => {\n  switch (action) {\n    case 'increment':\n      return state + 1;\n    case 'decrement':\n      return state - 1;\n    default:\n      throw new Error();\n  }\n};\n\nconst [useSharedCounter, SharedCounterProvider] = createReducerContext(reducer, 0);\n\nconst ComponentA = () => {\n  const [count, dispatch] = useSharedCounter();\n  return (\n    <p>\n      Component A &nbsp;\n      <button type=\"button\" onClick={() => dispatch('decrement')}>\n        -\n      </button>\n      &nbsp;{count}&nbsp;\n      <button type=\"button\" onClick={() => dispatch('increment')}>\n        +\n      </button>\n    </p>\n  );\n};\n\nconst ComponentB = () => {\n  const [count, dispatch] = useSharedCounter();\n  return (\n    <p>\n      Component B &nbsp;\n      <button type=\"button\" onClick={() => dispatch('decrement')}>\n        -\n      </button>\n      &nbsp;{count}&nbsp;\n      <button type=\"button\" onClick={() => dispatch('increment')}>\n        +\n      </button>\n    </p>\n  );\n};\n\nconst Demo = () => {\n  return (\n    <SharedCounterProvider>\n      <p>Those two counters share the same value.</p>\n      <ComponentA />\n      <ComponentB />\n    </SharedCounterProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Window Scroll Position Tracking with useWindowScroll Hook in React\nDESCRIPTION: Demonstrates how to use the useWindowScroll hook to monitor window scroll position. The hook returns an object with x and y coordinates representing the horizontal and vertical scroll positions respectively. The component re-renders automatically when the window is scrolled.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useWindowScroll.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useWindowScroll} from 'react-use';\n\nconst Demo = () => {\n  const {x, y} = useWindowScroll();\n\n  return (\n    <div>\n      <div>x: {x}</div>\n      <div>y: {y}</div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useMouseWheel Hook in React Component\nDESCRIPTION: Demonstrates how to implement the useMouseWheel hook to track mouse wheel scrolling. The hook returns the deltaY value which represents the vertical scroll amount. The example shows how to display the scroll value in a component.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useMouseWheel.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useMouseWheel } from 'react-use';\n\nconst Demo = () => {\n  const mouseWheel = useMouseWheel()\n  return (\n    <>\n      <h3>delta Y Scrolled: {mouseWheel}</h3>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useScrolling Hook in React\nDESCRIPTION: Demonstrates how to use the useScrolling hook in a React component. It creates a scrollable div and displays whether the user is currently scrolling or not.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useScrolling.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useScrolling } from \"react-use\";\n\nconst Demo = () => {\n  const scrollRef = React.useRef(null);\n  const scrolling = useScrolling(scrollRef);\n\n  return (\n    <div ref={scrollRef}>\n      {<div>{scrolling ? \"Scrolling\" : \"Not scrolling\"}</div>}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Spring Animation with useSpring Hook in React\nDESCRIPTION: Example showing how to use useSpring hook to create a spring-based animation between two numeric values with interactive buttons to change the target value.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useSpring.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useSpring from 'react-use/lib/useSpring';\n\nconst Demo = () => {\n  const [target, setTarget] = useState(50);\n  const value = useSpring(target);\n\n  return (\n    <div>\n      {value}\n      <br />\n      <button onClick={() => setTarget(0)}>Set 0</button>\n      <button onClick={() => setTarget(100)}>Set 100</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating useTimeoutFn Hook Usage in React\nDESCRIPTION: This snippet shows how to use the useTimeoutFn hook in a React component. It demonstrates setting up a timeout, canceling it, and resetting it based on user interactions.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useTimeoutFn.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { useTimeoutFn } from 'react-use';\n\nconst Demo = () => {\n  const [state, setState] = React.useState('Not called yet');\n\n  function fn() {\n    setState(`called at ${Date.now()}`);\n  }\n\n  const [isReady, cancel, reset] = useTimeoutFn(fn, 5000);\n  const cancelButtonClick = useCallback(() => {\n    if (isReady() === false) {\n      cancel();\n      setState(`cancelled`);\n    } else {\n      reset();\n      setState('Not called yet');\n    }\n  }, []);\n\n  const readyState = isReady();\n\n  return (\n    <div>\n      <div>{readyState !== null ? 'Function will be called in 5 seconds' : 'Timer cancelled'}</div>\n      <button onClick={cancelButtonClick}> {readyState === false ? 'cancel' : 'restart'} timeout</button>\n      <br />\n      <div>Function state: {readyState === false ? 'Pending' : readyState ? 'Called' : 'Cancelled'}</div>\n      <div>{state}</div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing usePrevious Hook in React\nDESCRIPTION: This code snippet demonstrates how to use the usePrevious hook in a React component. It shows a counter that displays both the current and previous count values.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/usePrevious.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {usePrevious} from 'react-use';\n\nconst Demo = () => {\n  const [count, setCount] = React.useState(0);\n  const prevCount = usePrevious(count);\n\n  return (\n    <p>\n      <button onClick={() => setCount(count + 1)}>+</button>\n      <button onClick={() => setCount(count - 1)}>-</button>\n      <p>\n        Now: {count}, before: {prevCount}\n      </p>\n    </p>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useBeforeUnload with Function Check in React\nDESCRIPTION: Shows how to use the useBeforeUnload hook with a function that returns a boolean value. This approach is recommended when the dirty state changes frequently, by using useCallback with a dependency array.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useBeforeUnload.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useBeforeUnload} from 'react-use';\n\nconst Demo = () => {\n  const [dirty, toggleDirty] = useToggle(false);\n  const dirtyFn = useCallback(() => {\n    return dirty;\n  }, [dirty]);\n  useBeforeUnload(dirtyFn, 'You have unsaved changes, are you sure?');\n\n  return (\n    <div>\n      {dirty && <p>Try to reload or close tab</p>}\n      <button onClick={() => toggleDirty()}>{dirty ? 'Disable' : 'Enable'}</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useMount Hook in React Component\nDESCRIPTION: Demonstrates how to import and use the useMount hook in a React component. The hook executes a function after the component is mounted.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useMount.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useMount} from 'react-use';\n\nconst Demo = () => {\n  useMount(() => alert('MOUNTED'));\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useScratch Hook in React Component\nDESCRIPTION: This snippet demonstrates how to use the useScratch hook in a React component. It shows the setup of the hook, styling of components, and rendering of the scratch area with visual feedback.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useScratch.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useScratch from 'react-use/lib/useScratch';\n\nconst Demo = () => {\n  const [ref, state] = useScratch();\n\n  const blockStyle: React.CSSProperties = {\n    position: 'relative',\n    width: 400,\n    height: 400,\n    border: '1px solid tomato',\n  };\n\n  const preStyle: React.CSSProperties = {\n    pointerEvents: 'none',\n    userSelect: 'none',\n  };\n\n  let { x = 0, y = 0, dx = 0, dy = 0 } = state;\n  if (dx < 0) [x, dx] = [x + dx, -dx];\n  if (dy < 0) [y, dy] = [y + dy, -dy];\n\n  const rectangleStyle: React.CSSProperties = {\n    position: 'absolute',\n    left: x,\n    top: y,\n    width: dx,\n    height: dy,\n    border: '1px solid tomato',\n    pointerEvents: 'none',\n    userSelect: 'none',\n  };\n\n  return (\n    <div ref={ref} style={blockStyle}>\n      <pre style={preStyle}>{JSON.stringify(state, null, 4)}</pre>\n      {state.isScratching && <div style={rectangleStyle} />}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Battery Status Tracking with useBattery Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useBattery hook in a React component. It shows how to handle different states such as unsupported, fetching, and fetched battery information, and displays various battery metrics.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useBattery.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useBattery} from 'react-use';\n\nconst Demo = () => {\n  const batteryState = useBattery();\n\n  if (!batteryState.isSupported) {\n    return (\n      <div>\n        <strong>Battery sensor</strong>: <span>not supported</span>\n      </div>\n    );\n  }\n\n  if (!batteryState.fetched) {\n    return (\n      <div>\n        <strong>Battery sensor</strong>: <span>supported</span> <br />\n        <strong>Battery state</strong>: <span>fetching</span>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <strong>Battery sensor</strong>:&nbsp;&nbsp; <span>supported</span> <br />\n      <strong>Battery state</strong>: <span>fetched</span> <br />\n      <strong>Charge level</strong>:&nbsp;&nbsp; <span>{ (batteryState.level * 100).toFixed(0) }%</span> <br />\n      <strong>Charging</strong>:&nbsp;&nbsp; <span>{ batteryState.charging ? 'yes' : 'no' }</span> <br />\n      <strong>Charging time</strong>:&nbsp;&nbsp;\n      <span>{ batteryState.chargingTime ? batteryState.chargingTime : 'finished' }</span> <br />\n      <strong>Discharging time</strong>:&nbsp;&nbsp; <span>{ batteryState.dischargingTime }</span>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Body Scroll Lock with React Hook\nDESCRIPTION: Example showing how to use useLockBodyScroll hook together with useToggle to create a toggleable scroll lock mechanism. Demonstrates basic implementation with a button to control the lock state.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useLockBodyScroll.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useLockBodyScroll, useToggle} from 'react-use';\n\nconst Demo = () => {\n  const [locked, toggleLocked] = useToggle(false)\n\n  useLockBodyScroll(locked);\n\n  return (\n    <div>\n      <button onClick={() => toggleLocked()}>\n        {locked ? 'Unlock' : 'Lock'}\n      </button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useRendersCount Hook in React TypeScript\nDESCRIPTION: This snippet demonstrates how to use the useRendersCount hook in a React component. It displays the render count and includes a button to trigger re-renders.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useRendersCount.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { useRendersCount } from \"react-use\";  \n\nconst Demo = () => {\n  const update = useUpdate();\n  const rendersCount = useRendersCount();\n\n  return (\n    <div>\n      <span>Renders count: {rendersCount}</span>\n      <br />\n      <button onClick={update}>re-render</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Page Favicon Using useFavicon React Hook\nDESCRIPTION: Demonstrates how to import and use the useFavicon hook from react-use library to set a webpage's favicon. The hook accepts a URL string parameter pointing to the favicon image source.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useFavicon.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useFavicon} from 'react-use';\n\nconst Demo = () => {\n  useFavicon('https://cdn.sstatic.net/Sites/stackoverflow/img/favicon.ico');\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter with useObservable Hook in React\nDESCRIPTION: Demonstrates how to use the useObservable hook with a BehaviorSubject to create a clickable counter. The hook tracks the latest value from the Observable and updates the component state accordingly.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useObservable.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useObservable} from 'react-use';\n\nconst counter$ = new BehaviorSubject(0);\nconst Demo = () => {\n  const value = useObservable(counter$, 0);\n\n  return (\n    <button onClick={() => counter$.next(value + 1)}>\n      Clicked {value} times\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useMouse React Hook in JSX\nDESCRIPTION: This snippet demonstrates how to use the useMouse hook in a React component. It tracks mouse position relative to the document and a specific element, as well as the element's position and dimensions.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useMouse.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useMouse} from 'react-use';\n\nconst Demo = () => {\n  const ref = React.useRef(null);\n  const {docX, docY, posX, posY, elX, elY, elW, elH} = useMouse(ref);\n\n  return (\n    <div ref={ref}>\n      <div>Mouse position in document - x:{docX} y:{docY}</div>\n      <div>Mouse position in element - x:{elX} y:{elY}</div>\n      <div>Element position- x:{posX} y:{posY}</div>\n      <div>Element dimensions - {elW}x{elH}</div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: createStateContext API Reference\nDESCRIPTION: This code snippet shows the API pattern for using createStateContext. It demonstrates how to create the hook and provider, how to wrap components with the provider (optionally overriding the initial value), and how to use the hook in a component.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/createStateContext.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst [useSharedState, SharedStateProvider] = createStateContext(initialValue);\n\n// In wrapper\nconst Wrapper = ({ children }) => (\n  // You can override the initial value for each Provider\n  <SharedStateProvider initialValue={overrideInitialValue}>\n    { children }\n  </SharedStateProvider>\n)\n\n// In a component\nconst Component = () => {\n  const [sharedState, setSharedState] = useSharedState();\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Controls with useKeyPressEvent in React\nDESCRIPTION: Example showing how to use useKeyPressEvent hook to control a counter using keyboard keys. Demonstrates increment, decrement, and reset functionality using ']', '[', and 'r' keys respectively.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useKeyPressEvent.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from React;\nimport {useKeyPressEvent} from 'react-use';\n\nconst Demo = () => {\n  const [count, setCount] = useState(0);\n\n  const increment = () => setCount(count => ++count);\n  const decrement = () => setCount(count => --count);\n  const reset = () => setCount(count => 0);\n\n  useKeyPressEvent(']', increment, increment);\n  useKeyPressEvent('[', decrement, decrement);\n  useKeyPressEvent('r', reset);\n\n  return (\n    <div>\n      <p>\n        Try pressing <code>[</code>, <code>]</code>, and <code>r</code> to\n        see the count incremented and decremented.</p>\n      <p>Count: {count}</p>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useIdle Hook in React Component\nDESCRIPTION: Example of using the useIdle hook in a React component to track user idle state with a 3-second timeout. The component displays whether the user is idle or not.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useIdle.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useIdle} from 'react-use';\n\nconst Demo = () => {\n  const isIdle = useIdle(3e3);\n\n  return (\n    <div>\n      <div>User is idle: {isIdle ? 'Yes 😴' : 'Nope'}</div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: useClickAway Hook API Reference\nDESCRIPTION: Shows the different ways to call the useClickAway hook with various parameters. The hook can be configured to listen for different types of events such as clicks, mousedown, or touchstart by passing an array of event types as the third parameter.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useClickAway.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nuseClickAway(ref, onMouseEvent)\nuseClickAway(ref, onMouseEvent, ['click'])\nuseClickAway(ref, onMouseEvent, ['mousedown', 'touchstart'])\n```\n\n----------------------------------------\n\nTITLE: Using useList Hook in React Component\nDESCRIPTION: Example demonstrating how to use the useList hook to manage an array state with various array manipulation methods like push, filter, sort, etc.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useList.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useList} from 'react-use';\n\nconst Demo = () => {\n  const [list, { set, push, updateAt, insertAt, update, updateFirst, upsert, sort, filter, removeAt, clear, reset }] = useList([1, 2, 3, 4, 5]);\n\n  return (\n    <div>\n      <button onClick={() => set([1, 2, 3])}>Set to [1, 2, 3]</button>\n      <button onClick={() => push(Date.now())}>Push timestamp</button>\n      <button onClick={() => updateAt(1, Date.now())}>Update value at index 1</button>\n      <button onClick={() => remove(1)}>Remove element at index 1</button>\n      <button onClick={() => filter(item => item % 2 === 0)}>Filter even values</button>\n      <button onClick={() => sort((a, b) => a - b)}>Sort ascending</button>\n      <button onClick={() => sort((a, b) => b - a)}>Sort descending</button>\n      <button onClick={clear}>Clear</button>\n      <button onClick={reset}>Reset</button>\n      <pre>{JSON.stringify(list, null, 2)}</pre>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useKey Hook in React\nDESCRIPTION: Demonstrates how to use the useKey hook to increment a counter when the up arrow key is pressed. The hook is imported from react-use and used within a functional component.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useKey.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useKey} from 'react-use';\n\nconst Demo = () => {\n  const [count, set] = useState(0);\n  const increment = () => set(count => ++count);\n  useKey('ArrowUp', increment);\n\n  return (\n    <div>\n      Press arrow up: {count}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useTitle Hook in React\nDESCRIPTION: This snippet demonstrates how to import and use the useTitle hook from the react-use library. The hook is used to set the page title to 'Hello world!' when the component renders.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useTitle.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useTitle} from 'react-use';\n\nconst Demo = () => {\n  useTitle('Hello world!');\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useSlider Hook in a React Component\nDESCRIPTION: This snippet demonstrates how to use the useSlider hook from react-use to create a sliding UI element. It shows how to apply the hook to a ref and use its returned values to update the component's UI based on sliding interactions.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useSlider.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useSlider} from 'react-use';\n\nconst Demo = () => {\n  const ref = React.useRef(null);\n  const {isSliding, value, pos, length} = useSlider(ref);\n\n  return (\n    <div>\n      <div ref={ref} style={{ position: 'relative' }}>\n        <p style={{ textAlign: 'center', color: isSliding ? 'red' : 'green' }}>\n          {Math.round(value * 100)}%\n        </p>\n        <div style={{ position: 'absolute', left: pos }}>🎚</div>\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useRaf Hook for React Animation in JSX\nDESCRIPTION: This snippet demonstrates how to use the useRaf hook in a React component. It creates a Demo component that displays the elapsed time percentage over a 5-second period with a 1-second delay.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useRaf.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useRaf} from 'react-use';\n\nconst Demo = () => {\n  const elapsed = useRaf(5000, 1000);\n\n  return (\n    <div>\n      Elapsed: {elapsed}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Throttling with useThrottleFn in React\nDESCRIPTION: Example showing how to use useThrottleFn to throttle state updates based on input changes. The hook delays the update of throttledValue for 2000ms after the last value change.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useThrottleFn.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { useThrottleFn } from 'react-use';\n\nconst Demo = () => {\n  const [status, setStatus] = React.useState('Updating stopped');\n  const [value, setValue] = React.useState('');\n  const [throttledValue, setThrottledValue] = React.useState('');\n\n  useThrottleFn(\n    () => {\n      setStatus('Waiting for input...');\n      setThrottledValue(value);\n    },\n    2000,\n    [value]\n  );\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={value}\n        placeholder=\"Throttled input\"\n        onChange={({ currentTarget }) => {\n          setStatus('Updating stopped');\n          setValue(currentTarget.value);\n        }}\n      />\n      <div>{status}</div>\n      <div>Throttled value: {throttledValue}</div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useMap Hook in React Component\nDESCRIPTION: Example showing how to implement useMap hook in a React component with various object manipulation methods including set, setAll, remove, and reset. The hook initializes with an object and provides methods to modify its state.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useMap.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useMap} from 'react-use';\n\nconst Demo = () => {\n  const [map, {set, setAll, remove, reset}] = useMap({\n    hello: 'there',\n  });\n\n  return (\n    <div>\n      <button onClick={() => set(String(Date.now()), new Date().toJSON())}>\n        Add\n      </button>\n      <button onClick={() => reset()}>\n        Reset\n      </button>\n      <button onClick={() => setAll({ hello: 'new', data: 'data' })}>\n        Set new data\n      </button>\n      <button onClick={() => remove('hello')} disabled={!map.hello}>\n        Remove 'hello'\n      </button>\n      <pre>{JSON.stringify(map, null, 2)}</pre>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic createMemo Usage Syntax\nDESCRIPTION: This code snippet shows the basic syntax for using createMemo. It demonstrates how to create a memoized hook from a function. The resulting hook maintains the same function signature as the original function.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/createMemo.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst useMemoFn = createMemo(fn);\n```\n\n----------------------------------------\n\nTITLE: Using useIsomorphicLayoutEffect Hook with React\nDESCRIPTION: Example showing how to implement the useIsomorphicLayoutEffect hook in a React component. The hook executes a side effect that logs a value to the console whenever the value prop changes.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useIsomorphicLayoutEffect.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useIsomorphicLayoutEffect} from 'react-use';\n\nconst Demo = ({value}) => {\n  useIsomorphicLayoutEffect(() => {\n    window.console.log(value)\n  }, [value]);\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Using useOrientation Hook in React JSX\nDESCRIPTION: This example demonstrates how to import and use the useOrientation hook in a React component. It renders the orientation state as a JSON string.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useOrientation.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useOrientation} from 'react-use';\n\nconst Demo = () => {\n  const state = useOrientation();\n\n  return (\n    <pre>\n      {JSON.stringify(state, null, 2)}\n    </pre>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useFullscreen Hook with React Components\nDESCRIPTION: Demonstrates how to implement the useFullscreen hook to toggle an element between normal and fullscreen modes. The example includes a video that will be displayed in fullscreen when toggled, with a callback to handle exiting fullscreen.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useFullscreen.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useFullscreen, useToggle} from 'react-use';\n\nconst Demo = () => {\n  const ref = useRef(null)\n  const [show, toggle] = useToggle(false);\n  const isFullscreen = useFullscreen(ref, show, {onClose: () => toggle(false)});\n\n  return (\n    <div ref={ref} style={{backgroundColor: 'white'}}>\n      <div>{isFullscreen ? 'Fullscreen' : 'Not fullscreen'}</div>\n      <button onClick={() => toggle()}>Toggle</button>\n      <video src=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\" autoPlay />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing RAF Loop with React Hook\nDESCRIPTION: Example demonstrating how to use useRafLoop hook to create a counter that updates on each RAF tick. Shows integration with state management and control methods for starting/stopping the loop.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useRafLoop.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport { useRafLoop, useUpdate } from 'react-use';\n\nconst Demo = () => {\n  const [ticks, setTicks] = React.useState(0);\n  const [lastCall, setLastCall] = React.useState(0);\n  const update = useUpdate();\n\n  const [loopStop, loopStart, isActive] = useRafLoop((time) => {\n    setTicks(ticks => ticks + 1);\n    setLastCall(time);\n  });\n\n  return (\n    <div>\n      <div>RAF triggered: {ticks} (times)</div>\n      <div>Last high res timestamp: {lastCall}</div>\n      <br />\n      <button onClick={() => {\n        isActive() ? loopStop() : loopStart();\n        update();\n      }}>{isActive() ? 'STOP' : 'START'}</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: useCookie Hook TypeScript Interface\nDESCRIPTION: The TypeScript interface for the useCookie hook showing the return type as a tuple containing the current cookie value, an update function, and a delete function.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useCookie.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst [value, updateCookie, deleteCookie] = useCookie(cookieName: string);\n```\n\n----------------------------------------\n\nTITLE: Implementing useUpdate Hook in React Component\nDESCRIPTION: This snippet demonstrates how to use the useUpdate hook from the react-use library. It creates a component that displays the current timestamp and includes a button to trigger a re-render using the update function provided by the hook.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useUpdate.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useUpdate} from 'react-use';\n\nconst Demo = () => {\n  const update = useUpdate();\n  return (\n    <>\n      <div>Time: {Date.now()}</div>\n      <button onClick={update}>Update</button>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Harmonic Interval Function in React\nDESCRIPTION: Hook signature for creating synchronized interval-based effects in React. The hook takes a callback function and an optional delay parameter. When multiple components use this hook with the same delay, their effects will trigger simultaneously.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useHarmonicIntervalFn.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nuseHarmonicIntervalFn(fn, delay?: number)\n```\n\n----------------------------------------\n\nTITLE: Implementing useEvent Hook with Keyboard Input in React\nDESCRIPTION: This snippet demonstrates how to use the useEvent hook to handle keyboard events in a React component. It combines useEvent with useList to create a list of pressed keys, with a special case for the 'r' key to reset the list.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useEvent.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useEvent, useList} from 'react-use';\n\nconst Demo = () => {\n  const [list, {push, clear}] = useList();\n\n  const onKeyDown = useCallback(({key}) => {\n    if (key === 'r') clear();\n    push(key);\n  }, []);\n\n  useEvent('keydown', onKeyDown);\n\n  return (\n    <div>\n      <p>\n        Press some keys on your keyboard, <code style={{color: 'tomato'}}>r</code> key resets the list\n      </p>\n      <pre>\n        {JSON.stringify(list, null, 4)}\n      </pre>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Default Breakpoints with React-Use createBreakpoint\nDESCRIPTION: This snippet demonstrates how to use the default breakpoints provided by createBreakpoint. It defines a component that renders different content based on the current breakpoint (laptopL, laptop, tablet, or smaller).\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/createBreakpoint.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport { createBreakpoint } from \"react-use\";\n\nconst useBreakpoint = createBreakpoint();\n\nconst Demo = () => {\n  const breakpoint = useBreakpoint();\n\n  if (breakpoint === \"laptopL\") return <div> This is very big Laptop </div>;\n  else if (breakpoint == \"laptop\") return <div> This is Laptop</div>;\n  else if (breakpoint == \"tablet\") return <div> This is Tablet</div>;\n  else return <div> Too small!</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Device Motion Tracking with useMotion Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useMotion hook from the react-use library to track device motion. The hook returns a state object containing motion data, which is then displayed in a pre-formatted JSON string.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useMotion.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useMotion} from 'react-use';\n\nconst Demo = () => {\n  const state = useMotion();\n\n  return (\n    <pre>\n      {JSON.stringify(state, null, 2)}\n    </pre>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useFirstMountState Hook in React TypeScript Component\nDESCRIPTION: Example demonstrating how to implement the useFirstMountState hook in a React component to detect first mount state. The component displays whether it's on first mount and includes a button to trigger re-renders.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useFirstMountState.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { useFirstMountState } from 'react-use';\n\nconst Demo = () => {\n  const isFirstMount = useFirstMountState();\n  const update = useUpdate();\n\n  return (\n    <div>\n      <span>This component is just mounted: {isFirstMount ? 'YES' : 'NO'}</span>\n      <br />\n      <button onClick={update}>re-render</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Reference Implementation of useSetState in JavaScript\nDESCRIPTION: This snippet provides a reference for using the useSetState hook. It shows how to initialize the state and update it using both object and function approaches.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useSetState.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst [state, setState] = useSetState({cnt: 0});\n\nsetState({cnt: state.cnt + 1});\nsetState((prevState) => ({\n  cnt: prevState + 1,\n}));\n```\n\n----------------------------------------\n\nTITLE: Using Throttle Hooks in React Components\nDESCRIPTION: Demonstrates how to use useThrottle and useThrottleFn hooks to throttle values in a React component. Shows both direct value throttling and function-based throttling approaches.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useThrottle.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { useThrottle, useThrottleFn } from 'react-use';\n\nconst Demo = ({value}) => {\n  const throttledValue = useThrottle(value);\n  // const throttledValue = useThrottleFn(value => value, 200, [value]);\n\n  return (\n    <>\n      <div>Value: {value}</div>\n      <div>Throttled value: {throttledValue}</div>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useSpeech Hook in React Component\nDESCRIPTION: Demonstrates how to import and use the useSpeech hook from react-use library. It shows setting up voice synthesis with custom rate, pitch, and voice, and rendering the state in a pre tag.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useSpeech.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useSpeech} from 'react-use';\n\nconst voices = window.speechSynthesis.getVoices();\n\nconst Demo = () => {\n  const state = useSpeech('Hello world!', { rate: 0.8, pitch: 0.5, voice: voices[0] });\n\n  return (\n    <pre>\n      {JSON.stringify(state, null, 2)}\n    </pre>  \n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing useStartTyping Hook in React\nDESCRIPTION: This snippet demonstrates how to use the useStartTyping hook from the react-use library. The hook takes a callback function that is triggered when the user starts typing, which can be useful for actions like focusing an input field.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useStartTyping.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useStartTyping} from 'react-use';\n\nconst Demo = () => {\n  useStartTyping(() => alert('Started typing...'));\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Using useBeforeUnload with Boolean Check in React\nDESCRIPTION: Demonstrates how to use the useBeforeUnload hook with a boolean dirty state to show a confirmation dialog when the user tries to close or reload the page with unsaved changes.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useBeforeUnload.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useBeforeUnload} from 'react-use';\n\nconst Demo = () => {\n  const [dirty, toggleDirty] = useToggle(false);\n  useBeforeUnload(dirty, 'You have unsaved changes, are you sure?');\n\n  return (\n    <div>\n      {dirty && <p>Try to reload or close tab</p>}\n      <button onClick={() => toggleDirty()}>{dirty ? 'Disable' : 'Enable'}</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: API Reference for useMethods Hook in React\nDESCRIPTION: This snippet provides the API reference for the useMethods hook. It shows the hook's signature and describes its parameters: createMethods function and initialState.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useMethods.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst [state, methods] = useMethods(createMethods, initialState);\n```\n\n----------------------------------------\n\nTITLE: Using useTimeout Hook in React Component\nDESCRIPTION: Demonstrates how to use the useTimeout hook in a React component. The component renders different content based on the timeout state and provides a cancel button.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useTimeout.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useTimeout } from 'react-use';\n\nfunction TestComponent(props: { ms?: number } = {}) {\n  const ms = props.ms || 5000;\n  const [isReady, cancel] = useTimeout(ms);\n\n  return (\n    <div>\n      { isReady() ? 'I\\'m reloaded after timeout' : `I will be reloaded after ${ ms / 1000 }s` }\n      { isReady() === false ? <button onClick={ cancel }>Cancel</button> : '' }\n    </div>\n  );\n}\n\nconst Demo = () => {\n  return (\n    <div>\n      <TestComponent />\n      <TestComponent ms={ 10000 } />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using usePermission Hook in React\nDESCRIPTION: This snippet demonstrates how to use the usePermission hook from the react-use library to query the permission status of the microphone API. The hook returns a state object which is then displayed in a pre-formatted block.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/usePermission.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {usePermission} from 'react-use';\n\nconst Demo = () => {\n  const state = usePermission({ name: 'microphone' });\n\n  return (\n    <pre>\n      {JSON.stringify(state, null, 2)}\n    </pre>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useLogger Hook in React Component\nDESCRIPTION: Demonstrates how to import and use the useLogger hook within a React functional component. The hook logs the component name and props at different lifecycle stages.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useLogger.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useLogger} from 'react-use';\n\nconst Demo = (props) => {\n  useLogger('Demo', props);\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: useLocalStorage Hook Reference Implementation\nDESCRIPTION: Shows different ways to initialize and configure the useLocalStorage hook, including raw mode and custom serialization options.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useLocalStorage.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nuseLocalStorage(key);\nuseLocalStorage(key, initialValue);\nuseLocalStorage(key, initialValue, { raw: true });\nuseLocalStorage(key, initialValue, {\n  raw: false,\n  serializer: (value: T) => string,\n  deserializer: (value: string) => T,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Dispatch with useError Hook in React\nDESCRIPTION: Example showing how to use the useError hook to create an error dispatcher and handle errors in a React component. The code demonstrates implementation within an ErrorBoundary component.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useError.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useError } from 'react-use';\n\nconst Demo = () => {\n  const dispatchError = useError();\n\n  const clickHandler = () => {\n    dispatchError(new Error('Some error!'));\n  };\n\n  return <button onClick={clickHandler}>Click me to throw</button>;\n};\n\n// In parent app\nconst App = () => (\n  <ErrorBoundary>\n    <Demo />\n  </ErrorBoundary>\n);\n```\n\n----------------------------------------\n\nTITLE: Using useDefault Hook with State Management in React\nDESCRIPTION: This example demonstrates how to use the useDefault hook from the react-use library. The hook accepts a default value and an initial value, returning the default when state becomes null or undefined. The demo component shows state management with an option to set the state to null.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useDefault.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useDefault} from 'react-use';\n\nconst Demo = () => {\n  const initialUser = { name: 'Marshall' }\n  const defaultUser = { name: 'Mathers' }\n  const [user, setUser] = useDefault(defaultUser, initialUser);\n\n  return (\n    <div>\n      <div>User: {user.name}</div>\n      <input onChange={e => setUser({ name: e.target.value })} />\n      <button onClick={() => setUser(null)}>set to null</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useMountedState Hook in React Component\nDESCRIPTION: Demonstrates how to use the useMountedState hook to check if a component is mounted before performing actions. The hook returns a function that returns true if the component is mounted and false otherwise.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useMountedState.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport {useMountedState} from 'react-use';\n\nconst Demo = () => {\n  const isMounted = useMountedState();\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      if (isMounted()) {\n        // ...\n      } else {\n        // ...\n      }\n    }, 1000);\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Render-prop Usage of UseKey Component in React\nDESCRIPTION: Shows how to use the UseKey component as a render-prop. This alternative usage imports UseKey from a specific path and uses it to alert when the 'a' key is pressed.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useKey.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport UseKey from 'react-use/lib/component/UseKey';\n\n<UseKey filter='a' fn={() => alert('\"a\" key pressed!')} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Long Press Detection in React Components\nDESCRIPTION: Demonstrates basic usage of useLongPress hook to handle long press events with a 300ms delay. Shows how to attach long press events to a button element with customizable options.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useLongPress.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useLongPress } from 'react-use';\n\nconst Demo = () => {\n  const onLongPress = () => {\n    console.log('calls callback after long pressing 300ms');\n  };\n\n  const defaultOptions = {\n    isPreventDefault: true,\n    delay: 300,\n  };\n  const longPressEvent = useLongPress(onLongPress, defaultOptions);\n\n  return <button {...longPressEvent}>useLongPress</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using useKeyboardJs Hook in React Components\nDESCRIPTION: Example of how to import and use the useKeyboardJs hook in a React component to detect when the key combination 'a + b' is pressed.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useKeyboardJs.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport useKeyboardJs from 'react-use/lib/useKeyboardJs';\n\nconst Demo = () => {\n  const [isPressed] = useKeyboardJs('a + b');\n\n  return (\n    <div>\n      [a + b] pressed: {isPressed ? 'Yes' : 'No'}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useDropArea Hook in React\nDESCRIPTION: Shows how to use the useDropArea hook to handle drop events for a specific element. It returns a bond object to be spread on the target element and logs files, URIs, and text that are dropped or pasted into the area.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useDrop.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useDropArea} from 'react-use';\n\nconst Demo = () => {\n  const [bond, state] = useDropArea({\n    onFiles: files => console.log('files', files),\n    onUri: uri => console.log('uri', uri),\n    onText: text => console.log('text', text),\n  });\n\n  return (\n    <div {...bond}>\n      Drop something here.\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Describing Sensor Hooks Functionality in React\nDESCRIPTION: This snippet explains the concept of 'Sensor Hooks' in React. These hooks listen for changes in interfaces and cause components to re-render with the most current state.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/Sensors.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Sensors\n\n*\"Sensor Hooks\"* listen to changes in some interface and force your components\nto be re-rendered with the new state, up-to-date state.\n```\n\n----------------------------------------\n\nTITLE: Implementing useUpsert Hook in React Component\nDESCRIPTION: This snippet demonstrates how to use the useUpsert hook in a React component. It shows initialization with a comparison function, rendering a list of items with edit and remove functionality, and buttons for adding items and resetting the list.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useUpsert.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useUpsert} from 'react-use';\n\nconst Demo = () => {\n  const comparisonFunction = (a: DemoType, b: DemoType) => {\n    return a.id === b.id;\n  };\n  const [list, { set, upsert, remove }] = useUpsert(comparisonFunction, initialItems);\n\n  return (\n    <div style={{ display: 'inline-flex', flexDirection: 'column' }}>\n      {list.map((item: DemoType, index: number) => (\n        <div key={item.id}>\n          <input value={item.text} onChange={e => upsert({ ...item, text: e.target.value })} />\n          <button onClick={() => remove(index)}>Remove</button>\n        </div>\n      ))}\n      <button onClick={() => upsert({ id: (list.length + 1).toString(), text: '' })}>Add item</button>\n      <button onClick={() => set([])}>Reset</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using createReducer with Redux Middleware in React\nDESCRIPTION: This snippet demonstrates how to use the createReducer function with Redux middleware (thunk and logger) in a React component. It shows a counter implementation with async actions.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/createReducer.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createReducer } from 'react-use';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nconst useThunkReducer = createReducer(thunk, logger);\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    case 'decrement':\n      return { count: state.count - 1 };\n    case 'reset':\n      return { count: action.payload };\n    default:\n      throw new Error();\n  }\n}\n\nconst Demo = ({ initialCount = 1 }) => {\n  // Action creator to increment count, wait a second and then reset\n  const addAndReset = React.useCallback(() => {\n    return dispatch => {\n      dispatch({ type: 'increment' });\n\n      setTimeout(() => {\n        dispatch({ type: 'reset', payload: initialCount });\n      }, 1000);\n    };\n  }, [initialCount]);\n\n  const [state, dispatch] = useThunkReducer(reducer, initialCount);\n\n  return (\n    <div>\n      <p>count: {state.count}</p>\n      <button onClick={() => dispatch(addAndReset())}>Add and reset</button>\n      <button\n        onClick={() => dispatch({ type: 'reset', payload: { count: initialCount }})}\n      >\n        Reset\n      </button>\n      <button onClick={() => dispatch({ type: 'increment' })}>+</button>\n      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic useLifecycles Hook Implementation in React\nDESCRIPTION: Example of how to use the useLifecycles hook from react-use to execute code when a component mounts and unmounts. The hook accepts two callback functions that run at the respective lifecycle events.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useLifecycles.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useLifecycles} from 'react-use';\n\nconst Demo = () => {\n  useLifecycles(() => console.log('MOUNTED'), () => console.log('UNMOUNTED'));\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: useIdle Hook API Reference\nDESCRIPTION: API reference for the useIdle hook showing its function signature and parameters. It takes a timeout in milliseconds and an optional initialState parameter.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useIdle.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nuseIdle(ms, initialState);\n```\n\n----------------------------------------\n\nTITLE: Using createReducerContext in React Components\nDESCRIPTION: This snippet shows the basic usage pattern for createReducerContext, including how to create the context, use it in a wrapper component, and consume it in a child component.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/createReducerContext.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst [useSharedState, SharedStateProvider] = createReducerContext(reducer, initialState);\n\n// In wrapper\nconst Wrapper = ({ children }) => (\n  // You can override the initial state for each Provider\n  <SharedStateProvider initialState={overrideInitialState}>\n    { children }\n  </SharedStateProvider>\n)\n\n// In a component\nconst Component = () => {\n  const [sharedState, dispatch] = useSharedState();\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing usePageLeave React Hook\nDESCRIPTION: Example showing how to import and use the usePageLeave hook from react-use library. The hook takes a callback function that executes when the mouse cursor leaves the page boundaries.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/usePageLeave.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {usePageLeave} from 'react-use';\n\nconst Demo = () => {\n  usePageLeave(() => console.log('Page left...'));\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Breakpoints with React-Use createBreakpoint\nDESCRIPTION: This snippet shows how to create custom breakpoints using createBreakpoint. It defines a component that renders different content based on custom breakpoints (XL, L, S, or smaller).\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/createBreakpoint.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport { createBreakpoint } from \"react-use\";\n\nconst useBreakpoint = createBreakpoint({ XL: 1280, L: 768, S: 350 });\n\nconst Demo = () => {\n  const breakpoint = useBreakpoint();\n\n  if (breakpoint === \"XL\") return <div> XL </div>;\n  else if (breakpoint == \"L\") return <div> LoL</div>;\n  else if (breakpoint == \"S\") return <div> Sexyy</div>;\n  else return <div> Wth</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: useVideo Hook Reference\nDESCRIPTION: Shows the basic usage syntax for the useVideo hook. It can be called with props directly or with a video element with props spread.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useVideo.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst [video, state, controls, ref] = useVideo(props);\nconst [video, state, controls, ref] = useVideo(<video {...props}/>);\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Input with Space Mediation using useMediatedState in React\nDESCRIPTION: Demonstrates how to use useMediatedState hook with a mediator function that prevents multiple consecutive spaces in text input. The mediator function uses regex to replace multiple whitespace characters with a single space.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useMediatedState.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { useMediatedState } from '../useMediatedState';\n\nconst inputMediator = s => s.replace(/[\\s]+/g, ' ');\nconst Demo = () => {\n  const [state, setState] = useMediatedState(inputMediator, '');\n\n  return (\n    <div>\n      <div>You will not be able to enter more than one space</div>\n      <input type=\"text\" min=\"0\" max=\"10\" \n             value={state}\n             onChange={(ev: React.ChangeEvent<HTMLInputElement>) => {\n               setState(ev.target.value);\n             }}\n      />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useVibrate Hook in React Component\nDESCRIPTION: Demonstrates how to use the useVibrate hook in a React component. It shows how to toggle vibration on and off with a button click, using a custom vibration pattern.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useVibrate.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useVibrate} from 'react-use';\n\nconst Demo = () => {\n  const [vibrating, toggleVibrating] = useToggle(false);\n\n  useVibrate(vibrating, [300, 100, 200, 100, 1000, 300], false);\n\n  return (\n    <div>\n      <button onClick={toggleVibrating}>{vibrating ? 'Stop' : 'Vibrate'}</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic useEvent Hook Usage Examples in JavaScript\nDESCRIPTION: These examples show basic usage of the useEvent hook for different scenarios. The first example subscribes to keydown events, while the second example demonstrates how to listen for scroll events on the window object with additional options.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useEvent.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nuseEvent('keydown', handler)\nuseEvent('scroll', handler, window, {capture: true})\n```\n\n----------------------------------------\n\nTITLE: useFullscreen Hook API Reference\nDESCRIPTION: TypeScript API signature for the useFullscreen hook showing required parameters: a ref to the target element, a boolean flag to show fullscreen, and an options object with an onClose callback.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useFullscreen.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nuseFullscreen(ref, show, {onClose})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useCss React Hook\nDESCRIPTION: Demonstrates the basic usage of the useCss hook to apply dynamic CSS styles to a component. It creates a div with red text and border that changes to blue on hover.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useCss.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useCss} from 'react-use';\n\nconst Demo = () => {\n  const className = useCss({\n    color: 'red',\n    border: '1px solid red',\n    '&:hover': {\n      color: 'blue',\n    },\n  });\n\n  return (\n    <div className={className}>\n      Hover me!\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage with ensuredForwardRef\nDESCRIPTION: Demonstrates how to use ensuredForwardRef to create a component with a guaranteed ref. The example shows a child component that safely accesses the forwarded ref in useEffect.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useEnsuredForwardedRef.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {ensuredForwardRef} from 'react-use';\n\nconst Demo = () => {\n  return (\n    <Child />\n  );\n};\n\nconst Child = ensuredForwardRef((props, ref) => {\n  useEffect(() => {\n    console.log(ref.current.getBoundingClientRect())\n  }, [])\n\n  return (\n    <div ref={ref} />\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using useUnmountPromise Hook in React Component\nDESCRIPTION: Demonstrates basic usage of useUnmountPromise hook within a React component to handle async operations that should be cancelled on unmount.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useUnmountPromise.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport useUnmountPromise from 'react-use/lib/useUnmountPromise';\n\nconst Demo = () => {\n  const mounted = useUnmountPromise();\n  useEffect(async () => {\n    await mounted(someFunction()); // Will not resolve if component un-mounts.\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: useUnmountPromise Hook Reference Implementation\nDESCRIPTION: Shows the reference implementation pattern for useUnmountPromise hook, including the error handling callback option for rejected promises after unmount.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useUnmountPromise.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst mounted = useUnmountPromise();\n\nmounted(promise);\nmounted(promise, onError);\n```\n\n----------------------------------------\n\nTITLE: Using useMultiStateValidator Hook in React TypeScript\nDESCRIPTION: Example demonstrating how to use useMultiStateValidator hook to validate multiple number inputs ensuring all values are even numbers. Shows state management and input handling with validation feedback.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useMultiStateValidator.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport { useMultiStateValidator } from 'react-use';\n\nconst DemoStateValidator = (s: number[]) => [s.every((num: number) => !(num % 2))] as [boolean];\nconst Demo = () => {\n  const [state1, setState1] = React.useState<number>(1);\n  const [state2, setState2] = React.useState<number>(1);\n  const [state3, setState3] = React.useState<number>(1);\n  const [[isValid]] = useMultiStateValidator([state1, state2, state3], DemoStateValidator);\n\n  return (\n    <div>\n      <div>Below fields will be valid if all of them is even</div>\n      <input type=\"number\" min=\"1\" max=\"10\" value={state1}\n        onChange={(ev: React.ChangeEvent<HTMLInputElement>) => {\n          setState1((ev.target.value as unknown) as number);\n        }}\n      />\n      <input type=\"number\" min=\"1\" max=\"10\" value={state2}\n        onChange={(ev: React.ChangeEvent<HTMLInputElement>) => {\n          setState2((ev.target.value as unknown) as number);\n        }}\n      />\n      <input type=\"number\" min=\"1\" max=\"10\" value={state3}\n        onChange={(ev: React.ChangeEvent<HTMLInputElement>) => {\n          setState3((ev.target.value as unknown) as number);\n        }}\n      />\n      {isValid !== null && <span>{isValid ? 'Valid!' : 'Invalid'}</span>}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining useStateHistory Hook in TypeScript\nDESCRIPTION: This snippet defines the useStateHistory hook, which extends React's useState hook with history functionality. It returns the current state, a setState function, and a stateHistory object with methods for navigating through the state history.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useStateWithHistory.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst [state, setState, stateHistory] = useStateWithHistory<S = undefined>(\n  initialState?: S | (()=>S),\n  capacity?: number = 10,\n  initialHistory?: S\n);\n```\n\n----------------------------------------\n\nTITLE: useError Hook Reference Usage\nDESCRIPTION: Basic reference example showing the hook syntax and usage pattern. Returns a dispatch function that accepts an Error object as parameter.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useError.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst dispatchError = useError();\n```\n\n----------------------------------------\n\nTITLE: useWindowSize Hook API Reference\nDESCRIPTION: Shows the function signature for the useWindowSize hook. It accepts options including initialWidth, initialHeight, and an onChange callback.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useWindowSize.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nuseWindowSize(options);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pinch Zoom with usePinchZoom React Hook\nDESCRIPTION: This snippet demonstrates how to use the usePinchZoom hook to implement pinch zoom functionality on an image. It tracks the zooming state and updates the image scale accordingly.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/usePinchZoom.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { usePinchZoom } from \"react-use\";\n\nconst Demo = () => {\n  const [scale, setState] = useState(1);\n  const scaleRef = useRef();\n  const { zoomingState, pinchState } = usePinchZoom(scaleRef);\n\n  useEffect(() => {\n    if (zoomingState === \"ZOOM_IN\") {\n      // perform zoom in scaling\n      setState(scale + 0.1)\n    } else if (zoomingState === \"ZOOM_OUT\") {\n      // perform zoom out in scaling\n      setState(scale - 0.1)\n    }\n  }, [zoomingState]);\n\n  return (\n    <div ref={scaleRef}>\n      <img\n        src=\"https://www.olympus-imaging.co.in/content/000107506.jpg\"\n        style={{\n          zoom: scale,\n        }}\n      />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Adding ResizeObserver Polyfill for Legacy Browser Support\nDESCRIPTION: Shows how to add a polyfill for the ResizeObserver API to support legacy browsers. This code dynamically imports the 'resize-observer-polyfill' package if ResizeObserver is not available in the global window object.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useMeasure.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nif (!window.ResizeObserver) {\n  window.ResizeObserver = (await import('resize-observer-polyfill')).default;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useScrollbarWidth Hook\nDESCRIPTION: TypeScript type definition showing the hook's return type as either a number or undefined, depending on DOM readiness.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useScrollbarWidth.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst sbw: number | undefined = useScrollbarWidth();\n```\n\n----------------------------------------\n\nTITLE: Rendering Video Element in React\nDESCRIPTION: Demonstrates how to render the video element returned by the useVideo hook in a React component.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useVideo.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div>{video}</div>\n```\n\n----------------------------------------\n\nTITLE: useSpring Hook Function Signatures\nDESCRIPTION: Reference showing the two possible ways to call useSpring: basic usage with just target value, or advanced usage with tension and friction parameters.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useSpring.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst currentValue = useSpring(targetValue);\nconst currentValue = useSpring(targetValue, tension, friction);\n```\n\n----------------------------------------\n\nTITLE: Alternative useKeyPress Hook Configuration Examples\nDESCRIPTION: Shows different ways to configure the useKeyPress hook. The first example uses a simple string key, while the second demonstrates using a predicate function to detect key presses based on custom logic.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useKeyPress.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst isPressed = useKeyPress('a');\n\nconst predicate = (event) => event.key === 'a';\nconst isPressed = useKeyPress(predicate);\n```\n\n----------------------------------------\n\nTITLE: Implementing Memoized Fibonacci with createMemo in React\nDESCRIPTION: This example demonstrates how to use createMemo to create a memoized version of a fibonacci function. The useMemoFibonacci hook returns cached results for previously computed values, avoiding expensive recalculations.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/createMemo.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {createMemo} from 'react-use';\n\nconst fibonacci = n => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\nconst useMemoFibonacci = createMemo(fibonacci);\n\nconst Demo = () => {\n  const result = useMemoFibonacci(10);\n\n  return (\n    <div>\n      fib(10) = {result}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Global State with Function and Using Functional Updates\nDESCRIPTION: This example shows how to initialize the global state with a function and use functional updates when modifying the state. It demonstrates the flexibility of the useGlobalState hook in handling state updates.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/createGlobalState.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst useGlobalValue = createGlobalState<number>(() => 0);\n\nconst CompA: FC = () => {\n  const [value, setValue] = useGlobalValue();\n\n  return <button onClick={() => setValue(value => value + 1)}>+</button>;\n};\n\nconst CompB: FC = () => {\n  const [value, setValue] = useGlobalValue();\n\n  return <button onClick={() => setValue(value => value - 1)}>-</button>;\n};\n\nconst Demo: FC = () => {\n  const [value] = useGlobalValue();\n  return (\n    <div>\n      <p>{value}</p>\n      <CompA />\n      <CompB />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: useLifecycles Hook API Reference\nDESCRIPTION: Reference documentation showing the function signature for the useLifecycles hook, which accepts mount and unmount callback functions.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useLifecycles.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nuseLifecycles(mount, unmount);\n```\n\n----------------------------------------\n\nTITLE: Using ES6 Named Imports with react-use\nDESCRIPTION: Shows how to import hooks using ES6 named import syntax. This approach is cleaner but works best with tree shaking enabled in your bundler.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/Usage.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useToggle} from 'react-use'\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage with Custom Comparison Function\nDESCRIPTION: Shows how to use usePreviousDistinct with a custom comparison function that compares strings case-insensitively. Demonstrates the flexibility of the hook with custom equality checks.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/usePreviousDistinct.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {usePreviousDistinct} from 'react-use';\n\nconst Demo = () => {\n  const [str, setStr] = React.useState(\"something_lowercase\");\n  const [unrelatedCount] = React.useState(0);\n  const prevStr = usePreviousDistinct(str, (prev, next) => (prev && prev.toUpperCase()) === next.toUpperCase());\n\n  return (\n    <p>\n      Now: {count}, before: {prevCount}\n      Unrelated: {unrelatedCount}\n    </p>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of usePreviousDistinct Hook with Counter\nDESCRIPTION: Demonstrates how to use usePreviousDistinct hook in combination with useCounter to track previous distinct values of a counter. Shows both related and unrelated counter implementations.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/usePreviousDistinct.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {usePreviousDistinct, useCounter} from 'react-use';\n\nconst Demo = () => {\n  const [count, { inc: relatedInc }] = useCounter(0);\n  const [unrelatedCount, { inc }] = useCounter(0);\n  const prevCount = usePreviousDistinct(count);\n\n  return (\n    <p>\n      Now: {count}, before: {prevCount}\n      <button onClick={() => relatedInc()}>Increment</button>\n      Unrelated: {unrelatedCount}\n      <button onClick={() => inc()}>Increment Unrelated</button>\n    </p>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Type Definition for useMediatedState Hook\nDESCRIPTION: Shows the TypeScript type definition and usage pattern for the useMediatedState hook. The hook accepts a mediator function and optional initial state, returning a tuple of state and setState function.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useMediatedState.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [state, setState] = useMediatedState<S=any>(\n  mediator: StateMediator<S>,\n  initialState?: S\n);\n```\n\n----------------------------------------\n\nTITLE: Using useScrollbarWidth Hook in React Component\nDESCRIPTION: Demonstrates how to implement the useScrollbarWidth hook in a React component to display the browser's scrollbar width. Shows conditional rendering based on whether the DOM is ready.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useScrollbarWidth.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Demo = () => {\n  const sbw = useScrollbarWidth();\n\n  return (\n    <div>\n      {sbw === undefined ? `DOM is not ready yet, SBW detection delayed` : `Browser's scrollbar width is ${sbw}px`}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useUnmount Hook in React\nDESCRIPTION: Demonstrates how to use the useUnmount hook to execute a function when a component unmounts. In this example, an alert is shown when the component is unmounted.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useUnmount.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useUnmount} from 'react-use';\n\nconst Demo = () => {\n  useUnmount(() => alert('UNMOUNTED'));\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Function Signature of useKey Hook in JavaScript\nDESCRIPTION: Provides the function signature for the useKey hook. It shows that the hook accepts a filter, handler, options, and dependencies as parameters.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useKey.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nuseKey(filter, handler, options?, deps?)\n```\n\n----------------------------------------\n\nTITLE: useRafLoop Hook Type Definition\nDESCRIPTION: TypeScript type definition for the useRafLoop hook showing its parameters and return types. Includes callback function type and initiallyActive boolean parameter.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useRafLoop.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [stopLoop, startLoop, isActive] = useRafLoop(callback: FrameRequestCallback, initiallyActive = true);\n```\n\n----------------------------------------\n\nTITLE: Example of useCss with Nested Selectors\nDESCRIPTION: Demonstrates using nested selectors with useCss hook. It applies styles to SVG elements and uses a global class selector combined with hover state.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useCss.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst className = useCss({\n  svg: {\n    fill: 'tomato',\n  },\n  '.global_class &:hover svg': {\n    fill: 'orange',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using useTween Hook in React Component\nDESCRIPTION: Demonstrates basic implementation of useTween hook in a React component to create an animated value between 0 and 1.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useTween.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useTween} from 'react-use';\n\nconst Demo = () => {\n  const t = useTween();\n\n  return (\n    <div>\n      Tween: {t}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Audio Controls Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface for the controls object returned by the useVideo hook. It includes methods for play, pause, mute, unmute, volume adjustment, and seeking.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useVideo.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AudioControls {\n  play: () => Promise<void> | void;\n  pause: () => void;\n  mute: () => void;\n  unmute: () => void;\n  volume: (volume: number) => void;\n  seek: (time: number) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: useTimeout Hook API Reference\nDESCRIPTION: Provides the TypeScript type definition for the useTimeout hook. It returns an array with three functions: isReady, cancel, and reset. The hook takes an optional ms parameter for the timeout duration.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useTimeout.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst [\n    isReady: () => boolean | null,\n    cancel: () => void,\n    reset: () => void,\n] = useTimeout(ms: number = 0);\n```\n\n----------------------------------------\n\nTITLE: useLogger Hook Reference Signature\nDESCRIPTION: Provides the function signature for the useLogger hook. It takes a component name as the first argument, followed by any additional parameters to be logged.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useLogger.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nuseLogger(componentName: string, ...rest);\n```\n\n----------------------------------------\n\nTITLE: useLockBodyScroll Hook Type Definition\nDESCRIPTION: TypeScript type definition for the useLockBodyScroll hook. Shows the hook's signature with its parameters: a boolean locked parameter defaulting to true and an optional elementRef parameter for targeting specific HTML elements.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useLockBodyScroll.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseLockBodyScroll(locked: boolean = true, elementRef?: RefObject<HTMLElement>);\n```\n\n----------------------------------------\n\nTITLE: Example of useCss with Hover State\nDESCRIPTION: Shows how to apply hover effects using the useCss hook. This example changes the text color from tomato to orange when hovered.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useCss.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst className = useCss({\n  color: 'tomato',\n  '&:hover': {\n    color: 'orange',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Video State Structure in JSON\nDESCRIPTION: Illustrates the structure of the state object returned by the useVideo hook. It includes information about buffering, current time, duration, pause state, mute state, and volume.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useVideo.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"buffered\": [\n    {\n      \"start\": 0,\n      \"end\": 425.952625\n    }\n  ],\n  \"time\": 5.244996,\n  \"duration\": 425.952625,\n  \"paused\": false,\n  \"muted\": false,\n  \"volume\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: useDebounce Hook TypeScript Interface\nDESCRIPTION: TypeScript interface definition for the useDebounce hook showing its parameters and return types. The hook accepts a function, delay duration, and optional dependency array, returning an isReady status checker and cancel function.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useDebounce.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [\n    isReady: () => boolean | null,\n    cancel: () => void,\n] = useDebounce(fn: Function, ms: number, deps: DependencyList = []);\n```\n\n----------------------------------------\n\nTITLE: Defining useOrientation Hook Return Type in JavaScript\nDESCRIPTION: This snippet shows the structure of the object returned by the useOrientation hook. It includes the angle of rotation and the type of orientation.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useOrientation.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  angle: 0,\n  type: 'landscape-primary'\n}\n```\n\n----------------------------------------\n\nTITLE: API Reference for useHover and useHoverDirty Hooks\nDESCRIPTION: Shows the signature and return values for both useHover and useHoverDirty hooks. useHover can accept either a React element or a function with the hover state, while useHoverDirty works with a React ref.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useHover.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst [newReactElement, isHovering] = useHover(reactElement);\nconst [newReactElement, isHovering] = useHover((isHovering) => reactElement);\nconst isHovering = useHoverDirty(ref);\n```\n\n----------------------------------------\n\nTITLE: useAudio Hook Reference\nDESCRIPTION: Shows the different ways to use the useAudio hook, either with props or with a JSX audio element.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useAudio.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst [audio, state, controls, ref] = useAudio(props);\nconst [audio, state, controls] = useAudio(<audio {...props}/>);\n```\n\n----------------------------------------\n\nTITLE: Throttle Hooks API Reference\nDESCRIPTION: TypeScript interface showing the method signatures for useThrottle and useThrottleFn hooks. Defines the expected parameters and their types.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useThrottle.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseThrottle(value, ms?: number);\nuseThrottleFn(fn, ms, args);\n```\n\n----------------------------------------\n\nTITLE: useThrottleFn Type Definition\nDESCRIPTION: TypeScript type definition for the useThrottleFn hook showing its function signature. Takes a function, milliseconds delay, and dependency array as parameters.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useThrottleFn.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseThrottleFn(fn, ms: number, args: any[]);\n```\n\n----------------------------------------\n\nTITLE: Alternative Usage with useEnsuredForwardedRef Hook\nDESCRIPTION: Shows how to use the useEnsuredForwardedRef hook directly with React.forwardRef. This approach ensures a valid reference even when the ref prop is undefined.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useEnsuredForwardedRef.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useEnsuredForwardedRef} from 'react-use';\n\nconst Demo = () => {\n  return (\n    <Child />\n  );\n};\n\nconst Child = React.forwardRef((props, ref) => {\n  // Here `ref` is undefined\n  const ensuredForwardRef = useEnsuredForwardedRef(ref);\n  // ensuredForwardRef will always be a valid reference.\n\n  useEffect(() => {\n    console.log(ensuredForwardRef.current.getBoundingClientRect())\n  }, [])\n\n  return (\n    <div ref={ensuredForwardRef} />\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Example of useCss with Media Queries\nDESCRIPTION: Shows how to implement responsive designs using media queries with the useCss hook. It changes color based on screen width and includes nested hover states within the media query.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useCss.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst className = useCss({\n  color: 'tomato',\n  '@media only screen and (max-width: 600px)': {\n    color: 'orange',\n    '&:hover': {\n      color: 'red',\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: useSessionStorage Hook API Reference\nDESCRIPTION: Provides the function signature for the useSessionStorage hook. It shows three different ways to call the hook with various parameters: key only, key with initial value, and key with initial value and raw flag.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useSessionStorage.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nuseSessionStorage(key);\nuseSessionStorage(key, initialValue);\nuseSessionStorage(key, initialValue, raw);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature for useDeepCompareEffect Hook\nDESCRIPTION: TypeScript type definition for the useDeepCompareEffect hook, showing the function signature that accepts an effect callback and dependency array. The effect can optionally return a cleanup function.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useDeepCompareEffect.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nuseDeepCompareEffect(effect: () => void | (() => void | undefined), deps: any[]);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useCounter Hook in React\nDESCRIPTION: This snippet provides the TypeScript definition for the useCounter hook. It shows the hook's signature, including its parameters and return value. The hook returns the current counter value and an object with methods to manipulate the counter.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useCounter.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [ current, { inc, dec, get, set, reset } ] = useCounter(initial: number, max: number | null = null, min: number | null = null);\n```\n\n----------------------------------------\n\nTITLE: useKeyPressEvent Hook API Reference\nDESCRIPTION: API reference showing the different ways to call the useKeyPressEvent hook. Shows signatures for keydown-only events, keydown with keyup events, and full configuration with useKeyPress option.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useKeyPressEvent.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nuseKeyPressEvent('<key>', keydown);\nuseKeyPressEvent('<key>', keydown, keyup);\nuseKeyPressEvent('<key>', keydown, keyup, useKeyPress);\n```\n\n----------------------------------------\n\nTITLE: useStateList Hook Type Definition\nDESCRIPTION: TypeScript type definition for useStateList hook showing return type structure with state management functions and status indicators. Includes generic type support for state values.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useStateList.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { state, currentIndex, prev, next, setStateAt, setState, isFirst, isLast } = useStateList<T>(stateSet: T[] = []);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useShallowCompareEffect Hook\nDESCRIPTION: This snippet provides the TypeScript type definition for the useShallowCompareEffect hook. It specifies the hook's parameters: an effect function and a dependency array.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useShallowCompareEffect.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseShallowCompareEffect(effect: () => void | (() => void | undefined), deps: any[]);\n```\n\n----------------------------------------\n\nTITLE: Configuring babel-plugin-import for react-use\nDESCRIPTION: Babel configuration that transforms ES6 named imports to individual imports automatically. This solves potential dependency issues while maintaining clean import syntax in your code.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/Usage.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n      'import',\n      {\n        libraryName: 'react-use',\n        camel2DashComponentName: false,\n        customName(/** @type {string} */ name) {\n          const libraryDirectory = name.startsWith('Use')\n            ? 'lib/component'\n            : name.startsWith('create')\n            ? 'lib/factory'\n            : 'lib'\n          return `react-use/${libraryDirectory}/${name}`\n        }\n      },\n      'import-react-use'\n    ]\n```\n\n----------------------------------------\n\nTITLE: Audio State Object Structure\nDESCRIPTION: Illustrates the structure of the state object returned by the useAudio hook, which includes information about buffering, time, duration, and playback status.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useAudio.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"buffered\": [\n    {\n      \"start\": 0,\n      \"end\": 425.952625\n    }\n  ],\n  \"time\": 5.244996,\n  \"duration\": 425.952625,\n  \"paused\": false,\n  \"muted\": false,\n  \"volume\": 1,\n  \"playing\": true\n}\n```\n\n----------------------------------------\n\nTITLE: useSize Hook API Reference\nDESCRIPTION: API signature for the useSize hook showing its parameters: element (the sized element) and initialSize (containing width and height properties).\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useSize.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nuseSize(element, initialSize);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Reference for useLatest Hook\nDESCRIPTION: This TypeScript reference defines the useLatest hook's signature. It accepts a state parameter of any type T and returns a MutableRefObject containing the current state value.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useLatest.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst latestState = useLatest = <T>(state: T): MutableRefObject<T>;\n```\n\n----------------------------------------\n\nTITLE: useLongPress Hook TypeScript Interface\nDESCRIPTION: TypeScript definition for the useLongPress hook showing its return type and parameters. Includes event handlers for mouse and touch events with configurable options for preventDefault and delay.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useLongPress.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  onMouseDown,\n  onTouchStart,\n  onMouseUp,\n  onMouseLeave,\n  onTouchEnd\n} = useLongPress(\n  callback: (e: TouchEvent | MouseEvent) => void,\n  options?: {\n    isPreventDefault?: true,\n    delay?: 300\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: AudioControls Interface Definition\nDESCRIPTION: Defines the TypeScript interface for the AudioControls object returned by the useAudio hook, specifying methods for controlling audio playback.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useAudio.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AudioControls {\n  play: () => Promise<void> | void;\n  pause: () => void;\n  mute: () => void;\n  unmute: () => void;\n  volume: (volume: number) => void;\n  seek: (time: number) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Reference for useUnmount Hook\nDESCRIPTION: Provides the TypeScript type definition for the useUnmount hook. It takes a function as an argument that returns void or undefined, which will be called when the component unmounts.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useUnmount.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseUnmount(fn: () => void | undefined);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useRendersCount Hook\nDESCRIPTION: This snippet shows the TypeScript type definition for the useRendersCount hook. It returns a number representing the count of renders.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useRendersCount.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst rendersCount: number = useRendersCount();\n```\n\n----------------------------------------\n\nTITLE: API Reference for useInterval Hook in JavaScript\nDESCRIPTION: This snippet provides the API reference for the useInterval hook. It shows the function signature, indicating that the hook takes a callback function and an optional delay parameter.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useInterval.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nuseInterval(callback, delay?: number)\n```\n\n----------------------------------------\n\nTITLE: Network State Interface Definition\nDESCRIPTION: TypeScript interface defining the structure and types for network state properties including online status, connection type, bandwidth, and other network-related information.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useNetworkState.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IUseNetworkState {\n  /**\n   * @desc Whether browser connected to the network or not.\n   */\n  online: boolean | undefined;\n  /**\n   * @desc Previous value of `online` property. Helps to identify if browser\n   * just connected or lost connection.\n   */\n  previous: boolean | undefined;\n  /**\n   * @desc The {Date} object pointing to the moment when state change occurred.\n   */\n  since: Date | undefined;\n  /**\n   * @desc Effective bandwidth estimate in megabits per second, rounded to the\n   * nearest multiple of 25 kilobits per seconds.\n   */\n  downlink: number | undefined;\n  /**\n   * @desc Maximum downlink speed, in megabits per second (Mbps), for the\n   * underlying connection technology\n   */\n  downlinkMax: number | undefined;\n  /**\n   * @desc Effective type of the connection meaning one of 'slow-2g', '2g', '3g', or '4g'.\n   * This value is determined using a combination of recently observed round-trip time\n   * and downlink values.\n   */\n  effectiveType: 'slow-2g' | '2g' | '3g' | '4g' | undefined;\n  /**\n   * @desc Estimated effective round-trip time of the current connection, rounded\n   * to the nearest multiple of 25 milliseconds\n   */\n  rtt: number | undefined;\n  /**\n   * @desc Wheter user has set a reduced data usage option on the user agent.\n   */\n  saveData: boolen | undefined;\n  /**\n   * @desc The type of connection a device is using to communicate with the network.\n   */\n  type: 'bluetooth' | 'cellular' | 'ethernet' | 'none' | 'wifi' | 'wimax' | 'other' | 'unknown' | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: useFirstMountState Hook Type Definition\nDESCRIPTION: Type definition for the useFirstMountState hook showing it returns a boolean value indicating if the component is on its first mount.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useFirstMountState.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst isFirstMount: boolean = useFirstMountState();\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for useEnsuredForwardedRef\nDESCRIPTION: TypeScript type definitions for both ensuredForwardRef and useEnsuredForwardedRef functions, showing their parameter types and return values.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useEnsuredForwardedRef.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nensuredForwardRef<T, P = {}>(Component: RefForwardingComponent<T, P>): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>;\n\nuseEnsuredForwardedRef<T>(ref: React.MutableRefObject<T>): React.MutableRefObject<T>;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useAsyncFn Hook\nDESCRIPTION: This snippet provides the TypeScript type definition for the useAsyncFn hook. It specifies the function signature, including generic types for the result and arguments.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useAsyncFn.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseAsyncFn<Result, Args>(fn, deps?: any[], initialState?: AsyncState<Result>);\n```\n\n----------------------------------------\n\nTITLE: useList Hook TypeScript Interface\nDESCRIPTION: TypeScript definition showing the hook's return type and available methods for array manipulation.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useList.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useList} from \"react-use\";\n\nconst [list, { \n    set, \n    push, \n    updateAt, \n    insertAt, \n    update, \n    updateFirst,\n    upsert, \n    sort, \n    filter, \n    removeAt, \n    remove, \n    clear, \n    reset \n}] = useList(array: any[] | ()=> any[]);\n```\n\n----------------------------------------\n\nTITLE: Markdown State Hook Introduction\nDESCRIPTION: Introductory text describing state hooks functionality for managing boolean, array and map states in React components.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/State.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# State\n\n*\"State Hooks\"* allow you to easily manage state of booleans, arrays, and maps.\n```\n\n----------------------------------------\n\nTITLE: TypeScript Reference for useMount Hook\nDESCRIPTION: Provides the TypeScript type definition for the useMount hook. It takes a function with no parameters and no return value as its argument.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useMount.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nuseMount(fn: () => void);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for useBattery Hook Return Value\nDESCRIPTION: This snippet defines the TypeScript interface for the object returned by the useBattery hook. It includes properties for battery support, charge level, charging status, and charging/discharging times.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useBattery.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst {isSupported, level, charging, dischargingTime, chargingTime} = useBattery();\n```\n\n----------------------------------------\n\nTITLE: useAsync Hook TypeScript Signature\nDESCRIPTION: The TypeScript function signature for the useAsync hook, showing it accepts a function and an optional array of dependencies.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useAsync.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nuseAsync(fn, args?: any[]);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Reducer with Middleware using createReducer\nDESCRIPTION: This snippet shows the basic usage of createReducer function to create a custom reducer hook with middleware. It demonstrates the function signature for creating a middleware-enabled reducer.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/createReducer.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst useMiddlewareReducer = createReducer(...middlewares);\n```\n\n----------------------------------------\n\nTITLE: useMedia Hook TypeScript Definition\nDESCRIPTION: Provides the TypeScript definition for the useMedia hook. It accepts a query string and an optional defaultState boolean parameter, returning a boolean value.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useMedia.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseMedia(query: string, defaultState: boolean = false): boolean;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useCustomCompareEffect Hook\nDESCRIPTION: Type definition for the useCustomCompareEffect hook, showing its parameters including the effect function, dependencies array, and comparison function.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useCustomCompareEffect.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseCustomCompareEffect(effect: () => void | (() => void | undefined), deps: any[], depsEqual: (prevDeps: any[], nextDeps: any[]) => boolean);\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Hooks from react-use\nDESCRIPTION: Demonstrates how to import a single hook directly from its specific path in the react-use library. This approach prevents bundling unused hooks.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/Usage.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport useToggle from 'react-use/lib/useToggle'\n```\n\n----------------------------------------\n\nTITLE: useGeolocation Hook TypeScript Reference\nDESCRIPTION: The TypeScript function signature for the useGeolocation hook showing it accepts PositionOptions as a parameter.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useGeolocation.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nuseGeolocation(options: PositionOptions)\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Header for React-Use Lifecycle Hooks\nDESCRIPTION: Markdown header and description text explaining the purpose of lifecycle hooks in the react-use library.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/Lifecycles.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Lifecycle\n\n*\"Lifecycle Hooks\"* modify and extend built-in React hooks or imitate React Class component lifecycle patterns.\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for useIntersection Hook\nDESCRIPTION: Provides the TypeScript type definition for the useIntersection hook. The hook accepts a ref object to an HTML element and intersection observer initialization options, returning an IntersectionObserverEntry or null.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useIntersection.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nuseIntersection(\n  ref: RefObject<HTMLElement>,\n  options: IntersectionObserverInit,\n): IntersectionObserverEntry | null;\n```\n\n----------------------------------------\n\nTITLE: API Reference for useTimeoutFn Hook\nDESCRIPTION: This snippet provides the TypeScript type definition for the useTimeoutFn hook. It shows the hook's return signature and the types of its parameters.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useTimeoutFn.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [\n    isReady: () => boolean | null,\n    cancel: () => void,\n    reset: () => void,\n] = useTimeoutFn(fn: Function, ms: number = 0);\n```\n\n----------------------------------------\n\nTITLE: useEffectOnce Hook Reference Signature\nDESCRIPTION: Type signature for the useEffectOnce hook showing it accepts an EffectCallback parameter which is the effect function to be executed once.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useEffectOnce.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffectOnce(effect: EffectCallback);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signatures for useMouse and useMouseHovered Hooks\nDESCRIPTION: This snippet provides the TypeScript function signatures for both useMouse and useMouseHovered hooks. useMouseHovered accepts additional options for binding coordinates and controlling when the mousemove event handler is attached.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useMouse.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseMouse(ref);\nuseMouseHovered(ref, {bound: false, whenHovered: false});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of useTween Hook\nDESCRIPTION: TypeScript function signature for useTween hook showing its parameters: easing pattern, animation duration in milliseconds, and delay before animation starts.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useTween.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseTween(easing?: string, ms?: number, delay?: number): number\n```\n\n----------------------------------------\n\nTITLE: useMultiStateValidator Hook API Reference\nDESCRIPTION: API reference showing the type signature and parameters of the useMultiStateValidator hook. Includes state type definitions, validator function signature, and return type information.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useMultiStateValidator.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [validity, revalidate] = useStateValidator(\n  state: any[] | { [p: string]: any } | { [p: number]: any },\n  validator: (state, setValidity?)=>[boolean|null, ...any[]],\n  initialValidity: any = [undefined]\n);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useRaf Hook\nDESCRIPTION: This snippet provides the TypeScript type definition for the useRaf hook. It specifies that the hook takes two optional parameters (ms and delay) and returns a number representing the elapsed time percentage.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useRaf.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseRaf(ms?: number, delay?: number): number;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for usePrevious Hook\nDESCRIPTION: This code snippet provides the TypeScript type definition for the usePrevious hook. It defines a generic function that takes a state of type T and returns the previous state of the same type.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/usePrevious.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst prevState = usePrevious = <T>(state: T): T;\n```\n\n----------------------------------------\n\nTITLE: useVibrate Hook TypeScript Definition\nDESCRIPTION: Provides the TypeScript definition for the useVibrate hook. It specifies the hook's parameters: enabled (boolean), pattern (number or array of numbers), and loop (boolean). The hook returns void.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useVibrate.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseVibrate(\n  enabled: boolean = true,\n  pattern: number | number[] = [1000, 1000],\n  loop: boolean = true\n): void;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useAsyncRetry Hook\nDESCRIPTION: This snippet provides the TypeScript function signature for the useAsyncRetry hook. It shows that the hook accepts a function and an optional array of arguments.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useAsyncRetry.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseAsyncRetry(fn, args?: any[]);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature for useScroll Hook\nDESCRIPTION: Provides the TypeScript signature for the useScroll hook. It takes a RefObject of an HTMLElement as its parameter.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useScroll.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseScroll(ref: RefObject<HTMLElement>);\n```\n\n----------------------------------------\n\nTITLE: Defining useScratch Hook Usage in TypeScript\nDESCRIPTION: This snippet shows the TypeScript definition for using the useScratch hook. It defines the hook's return type, which includes a ref and a state object.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useScratch.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [ref, state] = useScratch();\n```\n\n----------------------------------------\n\nTITLE: useStateValidator Hook Reference in TypeScript\nDESCRIPTION: This code snippet provides the TypeScript reference for the useStateValidator hook. It includes the hook's signature, return values, and parameter descriptions, detailing how to use the hook for state validation in React components.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useStateValidator.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst [validity, revalidate] = useStateValidator(\n  state: any,\n  validator: (state, setValidity?)=>[boolean|null, ...any[]],\n  initialValidity: any\n);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for usePreviousDistinct\nDESCRIPTION: TypeScript type definition for the usePreviousDistinct hook showing the generic type parameter and optional compare function parameter.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/usePreviousDistinct.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst prevState = usePreviousDistinct = <T>(state: T, compare?: (prev: T | undefined, next: T) => boolean): T;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Implementation Using useState for Asynchronous Updates in React\nDESCRIPTION: This snippet shows an incorrect implementation using the standard useState hook. It demonstrates why useGetSet is necessary, as this approach will not increment the counter correctly if the button is clicked multiple times in quick succession.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useGetSet.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst DemoWrong = () => {\n  const [cnt, set] = useState(0);\n  const onClick = () => {\n    setTimeout(() => {\n      set(cnt + 1)\n    }, 1_000);\n  };\n\n  return (\n    <button onClick={onClick}>Clicked: {cnt}</button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ScratchSensorState Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the state object returned by the useScratch hook. It includes properties for tracking the scratch state, coordinates, and element dimensions.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useScratch.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ScratchSensorState {\n  isScratching: boolean;\n  start?: number;\n  end?: number;\n  x?: number;\n  y?: number;\n  dx?: number;\n  dy?: number;\n  docX?: number;\n  docY?: number;\n  posX?: number;\n  posY?: number;\n  elH?: number;\n  elW?: number;\n  elX?: number;\n  elY?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: useNetworkState Hook Function Signature\nDESCRIPTION: TypeScript function signature for the useNetworkState hook, showing the optional initialState parameter and return type.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useNetworkState.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useNetworkState(initialState?: IUseNetworkState | (() => IUseNetworkState)): IUseNetworkState;\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version Release Notes\nDESCRIPTION: Standard changelog format documenting features, bug fixes, and breaking changes across multiple releases of react-use library.\nSOURCE: https://github.com/streamich/react-use/blob/master/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n* add useMountedState hook ([9081b99](https://github.com/streamich/react-use/commit/9081b99))\n\n## [10.3.1](https://github.com/streamich/react-use/compare/v10.3.0...v10.3.1) (2019-08-02)\n\n### Bug Fixes\n\n* **storybook:** fix useKeyboardJs import path ([b7481f6](https://github.com/streamich/react-use/commit/b7481f6))\n* **useKeyboardJs:** fix argument type error ([8c820ce](https://github.com/streamich/react-use/commit/8c820ce))\n* allow string list in useKeyboardJs hook ([aecbd0b](https://github.com/streamich/react-use/commit/aecbd0b))\n```\n\n----------------------------------------\n\nTITLE: useKeyboardJs Hook API Reference\nDESCRIPTION: Function signature of the useKeyboardJs hook showing the input parameters and return values.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useKeyboardJs.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nuseKeyboardJs(combination: string | string[]): [isPressed: boolean, event?: KeyboardEvent]\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for useIsomorphicLayoutEffect\nDESCRIPTION: TypeScript type definition for the useIsomorphicLayoutEffect hook, showing it accepts an effect callback and an optional dependency array.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useIsomorphicLayoutEffect.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseIsomorphicLayoutEffect(effect: EffectCallback, deps?: ReadonlyArray<any> | undefined);\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Changelog Entry\nDESCRIPTION: Standard changelog entry using conventional commits format with version, comparison links, and categorized changes\nSOURCE: https://github.com/streamich/react-use/blob/master/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n# [5.15.0](https://github.com/streamich/react-use/compare/v5.14.0...v5.15.0) (2019-03-25)\n\n### Features\n\n* add useMouse hook ([17dfa8e](https://github.com/streamich/react-use/commit/17dfa8e))\n```\n\n----------------------------------------\n\nTITLE: TypeScript Reference for useScrolling Hook\nDESCRIPTION: Provides the TypeScript type definition for the useScrolling hook. It shows that the hook takes a RefObject of an HTMLElement as its parameter.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useScrolling.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseScrolling(ref: RefObject<HTMLElement>);\n```\n\n----------------------------------------\n\nTITLE: Installing react-use Package\nDESCRIPTION: Command to install the react-use package using npm package manager\nSOURCE: https://github.com/streamich/react-use/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i react-use\n```\n\n----------------------------------------\n\nTITLE: Updating useSet 'has' Method in JavaScript\nDESCRIPTION: Bug fix for the 'has' method in useSet hook to reference the latest set object.\nSOURCE: https://github.com/streamich/react-use/blob/master/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"has\" method in useSet updated to reference latest set object\n```\n\n----------------------------------------\n\nTITLE: Updating useMap 'get' Method in JavaScript\nDESCRIPTION: Bug fix for the 'get' method in useMap hook to reference the latest map object.\nSOURCE: https://github.com/streamich/react-use/blob/master/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"get\" method in useMap updated to reference latest map object\n```\n\n----------------------------------------\n\nTITLE: Installing KeyboardJS Dependency\nDESCRIPTION: Command to install the required keyboardjs peer dependency using npm or yarn package managers.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useKeyboardJs.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm add keyboardjs\n# or\nyarn add keyboardjs\n```\n\n----------------------------------------\n\nTITLE: Adding useUnmountPromise Hook in JavaScript\nDESCRIPTION: New feature implementing the useUnmountPromise hook in the react-use library.\nSOURCE: https://github.com/streamich/react-use/blob/master/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n🎸 add useUnmountPromise hook\n```\n\n----------------------------------------\n\nTITLE: Fixing useUpdate Hook in JavaScript\nDESCRIPTION: Bug fix for useUpdate hook to prevent hitting maxInt and failing to trigger rerender.\nSOURCE: https://github.com/streamich/react-use/blob/master/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nuseUpdate hitting maxInt, failing to trigger rerender\n```\n\n----------------------------------------\n\nTITLE: Implementing useScrollbarWidth Hook in JavaScript\nDESCRIPTION: New feature adding the useScrollbarWidth hook to the react-use library.\nSOURCE: https://github.com/streamich/react-use/blob/master/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nuseScrollbarWidth hook;\n```\n\n----------------------------------------\n\nTITLE: Installing rebound Dependency for useSpring\nDESCRIPTION: Commands to install the required rebound peer dependency using npm or yarn package managers.\nSOURCE: https://github.com/streamich/react-use/blob/master/docs/useSpring.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm add rebound\n# or\nyarn add rebound\n```\n\n----------------------------------------\n\nTITLE: Stabilizing useMap Methods Across Renders in JavaScript\nDESCRIPTION: Bug fix to ensure methods with side effects in useMap hook are stable across renders.\nSOURCE: https://github.com/streamich/react-use/blob/master/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmethods with side effects should be stable across renders.\n```\n\n----------------------------------------\n\nTITLE: Setting up Git remote for react-use project\nDESCRIPTION: This snippet shows how to set up the Git remote to keep the master branch synced with the original repository. It adds the original repo as a remote named 'upstream' and configures the local master branch to track the upstream master.\nSOURCE: https://github.com/streamich/react-use/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add upstream https://github.com/streamich/react-use.git\ngit fetch upstream\ngit branch --set-upstream-to=upstream/master master\n```"
  }
]