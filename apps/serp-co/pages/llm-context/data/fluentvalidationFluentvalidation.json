[
  {
    "owner": "fluentvalidation",
    "repo": "fluentvalidation",
    "content": "TITLE: Creating a Customer Validator in C# with FluentValidation\nDESCRIPTION: This example demonstrates how to create a validator class for a Customer model using FluentValidation. It shows various validation rules including NotEmpty, WithMessage for custom error messages, conditional validation with When, Length constraints, and custom validation logic using Must.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class CustomerValidator : AbstractValidator<Customer> \n{\n  public CustomerValidator()\n  {\n    RuleFor(x => x.Surname).NotEmpty();\n    RuleFor(x => x.Forename).NotEmpty().WithMessage(\"Please specify a first name\");\n    RuleFor(x => x.Discount).NotEqual(0).When(x => x.HasDiscount);\n    RuleFor(x => x.Address).Length(20, 250);\n    RuleFor(x => x.Postcode).Must(BeAValidPostcode).WithMessage(\"Please specify a valid postcode\");\n  }\n\n  private bool BeAValidPostcode(string postcode) \n  {\n    // custom postcode validating logic goes here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Model and Validator Classes in C#\nDESCRIPTION: Example showing the definition of a Person model class and its corresponding PersonValidator that implements AbstractValidator<Person>. The validator defines rules for Id, Name, Email, and Age properties.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/aspnet.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Person \n{\n  public int Id { get; set; }\n  public string Name { get; set; }\n  public string Email { get; set; }\n  public int Age { get; set; }\n}\n\npublic class PersonValidator : AbstractValidator<Person> \n{\n  public PersonValidator() \n  {\n    RuleFor(x => x.Id).NotNull();\n    RuleFor(x => x.Name).Length(0, 10);\n    RuleFor(x => x.Email).EmailAddress();\n    RuleFor(x => x.Age).InclusiveBetween(18, 60);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Property Validation\nDESCRIPTION: Implementation of customer validator with nested address validation.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/start.md#2025-04-17_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CustomerValidator : AbstractValidator<Customer> \n{\n  public CustomerValidator()\n  {\n    RuleFor(customer => customer.Name).NotNull();\n    RuleFor(customer => customer.Address).SetValidator(new AddressValidator());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Validator in FluentValidation\nDESCRIPTION: Defines a simple validator class for a User model that inherits from AbstractValidator<User>. The validator includes a rule that checks if the Name property is not null.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/di.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class UserValidator : AbstractValidator<User>\n{\n  public UserValidator()\n  {\n    RuleFor(x => x.Name).NotNull();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic CustomerValidator Class\nDESCRIPTION: Initial setup of a validator class inheriting from AbstractValidator<Customer>.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/start.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing FluentValidation;\n\npublic class CustomerValidator : AbstractValidator<Customer> \n{\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Validators with ASP.NET Core Dependency Injection\nDESCRIPTION: Code snippets showing how to register validators with the ASP.NET Core service collection. Includes both individual validator registration and automatic registration of all validators in an assembly.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/aspnet.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services) \n{\n    // If you're using MVC or WebApi you'll probably have\n    // a call to AddMvc() or AddControllers() already.\n    services.AddMvc();\n    \n    // ... other configuration ...\n    \n    services.AddScoped<IValidator<Person>, PersonValidator>();\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services) \n{\n    services.AddMvc();\n\n    // ... other configuration ...\n\n    services.AddValidatorsFromAssemblyContaining<PersonValidator>();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous Validator with External API Check in FluentValidation\nDESCRIPTION: Demonstrates how to create an asynchronous validation rule using MustAsync to check if a user ID already exists via an external web API. The validator uses dependency injection to receive an API client and defines an async rule that ensures the ID is unique.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/async.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CustomerValidator : AbstractValidator<Customer> \n{\n  SomeExternalWebApiClient _client;\n\n  public CustomerValidator(SomeExternalWebApiClient client) \n  {\n    _client = client;\n\n    RuleFor(x => x.Id).MustAsync(async (id, cancellation) => \n    {\n      bool exists = await _client.IdExists(id);\n      return !exists;\n    }).WithMessage(\"ID Must be unique\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using InclusiveBetween Validator in C#\nDESCRIPTION: Shows how to use the InclusiveBetween Validator to check if a property value is within a specified range (inclusive).\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.Id).InclusiveBetween(1,10);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Customer Validator with FluentValidation in C#\nDESCRIPTION: This example demonstrates how to define a validator class for a Customer object, including how to set up various validation rules and execute validation. It shows the creation of custom validation methods, conditional validation, and how to access validation results.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/src/FluentValidation/README.md#2025-04-17_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nusing FluentValidation;\n\npublic class CustomerValidator: AbstractValidator<Customer> {\n  public CustomerValidator() {\n    RuleFor(x => x.Surname).NotEmpty();\n    RuleFor(x => x.Forename).NotEmpty().WithMessage(\"Please specify a first name\");\n    RuleFor(x => x.Discount).NotEqual(0).When(x => x.HasDiscount);\n    RuleFor(x => x.Address).Length(20, 250);\n    RuleFor(x => x.Postcode).Must(BeAValidPostcode).WithMessage(\"Please specify a valid postcode\");\n  }\n\n  private bool BeAValidPostcode(string postcode) {\n    // custom postcode validating logic goes here\n  }\n}\n\nvar customer = new Customer();\nvar validator = new CustomerValidator();\n\n// Execute the validator.\nValidationResult results = validator.Validate(customer);\n\n// Inspect any validation failures.\nbool success = results.IsValid;\nList<ValidationFailure> failures = results.Errors;\n```\n\n----------------------------------------\n\nTITLE: Creating Validators for SubClasses in FluentValidation\nDESCRIPTION: This snippet shows how to create validators for the Person and Organisation classes that implement the IContact interface. Each validator contains rules specific to that subclass, demonstrating how validators can be tailored to each type.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/inheritance.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonValidator : AbstractValidator<Person> \n{\n  public PersonValidator() \n  {\n    RuleFor(x => x.Name).NotNull();\n    RuleFor(x => x.Email).NotNull();\n    RuleFor(x => x.DateOfBirth).GreaterThan(DateTime.MinValue);\n  }\n}\n\npublic class OrganisationValidator : AbstractValidator<Organisation> \n{\n  public OrganisationValidator() \n  {\n    RuleFor(x => x.Name).NotNull();\n    RuleFor(x => x.Email).NotNull();\n    RuleFor(x => x.HeadQuarters).SetValidator(new AddressValidator());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Validation and Getting Results\nDESCRIPTION: Example of running validation and obtaining the validation result.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/start.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nCustomer customer = new Customer();\nCustomerValidator validator = new CustomerValidator();\n\nValidationResult result = validator.Validate(customer);\n\n```\n\n----------------------------------------\n\nTITLE: Complex Conditional Validation Chain\nDESCRIPTION: Demonstrates a complex validation chain with multiple conditions and different validators. Shows how conditions affect specific validators when using ApplyConditionTo.CurrentValidator.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/conditions.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(customer => customer.Photo)\n    .NotEmpty()\n    .Matches(\"https://wwww.photos.io/\\\\d+\\\\.png\")\n    .When(customer => customer.IsPreferredCustomer, ApplyConditionTo.CurrentValidator)\n    .Empty()\n    .When(customer => ! customer.IsPreferredCustomer, ApplyConditionTo.CurrentValidator);\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Validator as Extension Method in C#\nDESCRIPTION: An extension method that wraps the Must validation logic to make it reusable across multiple validators. This creates a custom validation rule that can be used with any IList property.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/custom-validators.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class MyCustomValidators {\n  public static IRuleBuilderOptions<T, IList<TElement>> ListMustContainFewerThan<T, TElement>(this IRuleBuilder<T, IList<TElement>> ruleBuilder, int num) {\n\treturn ruleBuilder.Must(list => list.Count < num).WithMessage(\"The list contains too many items\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering collection elements for validation using Where in C#\nDESCRIPTION: Demonstrates how to selectively validate only certain elements in a collection using the Where method to filter elements before applying validation rules.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/collections.md#2025-04-17_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nRuleForEach(x => x.Orders)\n  .Where(x => x.Cost != null)\n  .SetValidator(new OrderValidator());\n```\n\n----------------------------------------\n\nTITLE: Using Custom Method for Validation in C#\nDESCRIPTION: An implementation using the Custom method which provides more control over the validation process, allowing manual creation of ValidationFailure instances.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/custom-validators.md#2025-04-17_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonValidator : AbstractValidator<Person> {\n  public PersonValidator() {\n   RuleFor(x => x.Pets).Custom((list, context) => {\n     if(list.Count > 10) {\n       context.AddFailure(\"The list must contain 10 items or fewer\");\n     }\n   });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Validator in ASP.NET Core Startup\nDESCRIPTION: Shows how to register a validator in the ConfigureServices method of an ASP.NET Core Startup class. The validator is registered with a scoped lifetime as IValidator<User>.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/di.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Startup\n{\n    public Startup(IConfiguration configuration)\n    {\n        Configuration = configuration;\n    }\n\n    public IConfiguration Configuration { get; }\n\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddRazorPages();\n        services.AddScoped<IValidator<User>, UserValidator>();\n    }\n\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n    {\n      // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Predicate Validator in C#\nDESCRIPTION: Demonstrates how to use the Predicate Validator (also known as Must) to perform custom validation logic on a property value. It shows two examples: one with a simple predicate and another using the parent object for comparison.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(customer => customer.Surname).Must(surname => surname == \"Foo\");\n```\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(customer => customer.Surname).Must((customer, surname) => surname != customer.Forename)\n```\n\n----------------------------------------\n\nTITLE: Basic String to Integer Transformation in FluentValidation\nDESCRIPTION: Demonstrates how to transform a string property to a nullable integer before applying validation rules. The transformation uses TryParse to attempt conversion, returning null if parsing fails.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/transform.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nTransform(from: x => x.SomeStringProperty, to: value => int.TryParse(value, out int val) ? (int?) val : null)\n    .GreaterThan(10);\n```\n\n----------------------------------------\n\nTITLE: Validating simple collection elements using RuleForEach in C#\nDESCRIPTION: A validator for the Person class that applies a NotNull validation rule to each element in the AddressLines collection using RuleForEach.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/collections.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonValidator : AbstractValidator<Person> \n{\n  public PersonValidator() \n  {\n    RuleForEach(x => x.AddressLines).NotNull();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using NotEmpty Validator in FluentValidation (C#)\nDESCRIPTION: Ensures that the specified property is not null, empty string, whitespace, or default value. When used on collections, it checks that the collection is not empty.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(customer => customer.Surname).NotEmpty();\n```\n\n----------------------------------------\n\nTITLE: Using NotNull Validator in FluentValidation (C#)\nDESCRIPTION: Ensures that the specified property is not null. Uses the RuleFor method to apply the NotNull validator to the Surname property.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(customer => customer.Surname).NotNull();\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual Validation in ASP.NET Core Controller\nDESCRIPTION: Example of a controller using manual validation with FluentValidation. The controller injects the validator, performs validation, and handles validation results by adding errors to ModelState.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/aspnet.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PeopleController : Controller \n{\n  private IValidator<Person> _validator;\n  private IPersonRepository _repository;\n\n  public PeopleController(IValidator<Person> validator, IPersonRepository repository) \n  {\n    // Inject our validator and also a DB context for storing our person object.\n    _validator = validator;\n    _repository = repository;\n  }\n\n  public ActionResult Create() \n  {\n    return View();\n  }\n\n  [HttpPost]\n  public async Task<IActionResult> Create(Person person) \n  {\n    ValidationResult result = await _validator.ValidateAsync(person);\n\n    if (!result.IsValid) \n    {\n      // Copy the validation results into ModelState.\n      // ASP.NET uses the ModelState collection to populate \n      // error messages in the View.\n      result.AddToModelState(this.ModelState);\n\n      // re-render the view when validation failed.\n      return View(\"Create\", person);\n    }\n\n    _repository.Save(person); //Save the person to the database, or some other logic\n\n    TempData[\"notice\"] = \"Person successfully created\";\n    return RedirectToAction(\"Index\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Validation Error Codes\nDESCRIPTION: Shows how to access and display error codes from validation failures. Demonstrates creating a validator instance, validating an object, and iterating through validation failures to access property names and error codes.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/error-codes.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar validator = new PersonValidator();\nvar result = validator.Validate(new Person());\nforeach (var failure in result.Errors)\n{\n  Console.WriteLine($\"Property: {failure.PropertyName} Error Code: {failure.ErrorCode}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Validating complex type collections using SetValidator in C#\nDESCRIPTION: Demonstrates how to validate a collection of complex types by creating a validator for the element type (Order) and applying it to each item in the collection using SetValidator.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/collections.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderValidator : AbstractValidator<Order> \n{\n  public OrderValidator() \n  {\n    RuleFor(x => x.Total).GreaterThan(0);\n  }\n}\n\npublic class CustomerValidator : AbstractValidator<Customer> \n{\n  public CustomerValidator() \n  {\n    RuleForEach(x => x.Orders).SetValidator(new OrderValidator());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Age-Specific Validator for Person in C#\nDESCRIPTION: Defines a validator class that focuses specifically on age validation for a Person object, implementing a custom method to check if a person is over 18 years old.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/including-rules.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonAgeValidator : AbstractValidator<Person>  \n{\n  public PersonAgeValidator() \n  {\n    RuleFor(x => x.DateOfBirth).Must(BeOver18);\n  }\n\n  protected bool BeOver18(DateTime date) \n  {\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking an Asynchronous Validator in FluentValidation\nDESCRIPTION: Shows how to properly invoke a validator containing asynchronous rules by calling ValidateAsync instead of Validate. This example instantiates a CustomerValidator with an API client dependency and awaits the validation result.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/async.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar validator = new CustomerValidator(new SomeExternalWebApiClient());\nvar result = await validator.ValidateAsync(customer);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Validation Rule\nDESCRIPTION: Adding a simple validation rule to ensure the Surname property is not null.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/start.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing FluentValidation;\n\npublic class CustomerValidator : AbstractValidator<Customer>\n{\n  public CustomerValidator()\n  {\n    RuleFor(customer => customer.Surname).NotNull();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Validator Using Must Method in C#\nDESCRIPTION: A basic implementation of a validator using the Must method to check if a list contains fewer than 10 items. This shows the simplest approach to custom validation.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/custom-validators.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonValidator : AbstractValidator<Person> {\n  public PersonValidator() {\n    RuleFor(x => x.Pets).Must(list => list.Count < 10)\n      .WithMessage(\"The list must contain fewer than 10 items\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Message with String Formatting\nDESCRIPTION: Examples of using custom arguments in validation messages using string.Format and string interpolation, including references to constant values and other property values.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/configuring.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n//Using constant in a custom message:\nRuleFor(customer => customer.Surname)\n  .NotNull()\n  .WithMessage(customer => string.Format(\"This message references some constant values: {0} {1}\", \"hello\", 5))\n\n//Referencing other property values:\nRuleFor(customer => customer.Surname)\n  .NotNull()\n  .WithMessage(customer => $\"This message references some other properties: Forename: {customer.Forename} Discount: {customer.Discount}\");\n```\n\n----------------------------------------\n\nTITLE: Processing Validation Results\nDESCRIPTION: Processing and displaying validation failures using the ValidationResult object.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/start.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing FluentValidation.Results; \n\nCustomer customer = new Customer();\nCustomerValidator validator = new CustomerValidator();\n\nValidationResult results = validator.Validate(customer);\n\nif(! results.IsValid) \n{\n  foreach(var failure in results.Errors)\n  {\n    Console.WriteLine(\"Property \" + failure.PropertyName + \" failed validation. Error was: \" + failure.ErrorMessage);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using collection index in validation messages in C#\nDESCRIPTION: Demonstrates how to access the index of a collection element that caused a validation failure using the {CollectionIndex} placeholder in the error message.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/collections.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonValidator : AbstractValidator<Person> \n{\n  public PersonValidator() \n  {\n    RuleForEach(x => x.AddressLines).NotNull().WithMessage(\"Address {CollectionIndex} is required.\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependent Rules in FluentValidation C#\nDESCRIPTION: Demonstrates how to create dependent validation rules where the Forename validation only executes if the Surname validation passes. Uses the DependentRules method to establish the dependency chain between validation rules.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/dependentrules.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.Surname).NotNull().DependentRules(() => {\n  RuleFor(x => x.Forename).NotNull();\n});\n```\n\n----------------------------------------\n\nTITLE: Constructor Injection Pattern for Validators in C#\nDESCRIPTION: Demonstrates the recommended approach for validator injection using constructor dependency injection.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-12.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonValidator : AbstractValidator<Person> \n{\n  public PersonValidator(IValidator<Address> addressValidator) \n  {\n    RuleFor(x => x.Address).SetValidator(addressValidator);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Customer Validator Class in FluentValidation\nDESCRIPTION: This snippet shows how to define a validator class for a Customer entity with validation rules for Surname, Forename, and a collection of Orders. It demonstrates setting up basic property validators and validators for collection elements.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/specific-properties.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Validator definition\npublic class CustomerValidator : AbstractValidator<Customer>\n{\n  public CustomerValidator()\n  {\n    RuleFor(x => x.Surname).NotNull();\n    RuleFor(x => x.Forename).NotNull();\n    RuleForEach(x => x.Orders).SetValidator(new OrderValidator());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Validation Options\nDESCRIPTION: Example of using validation options API with rule sets and property selection.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/start.md#2025-04-17_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvalidator.Validate(customer, options => \n{\n  options.ThrowOnFailures();\n  options.IncludeRuleSets(\"MyRuleSets\");\n  options.IncludeProperties(x => x.Name);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Validation Failure Severity Levels in FluentValidation\nDESCRIPTION: Example showing how to access and display the severity level of validation failures in the validation result.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/severity.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar validator = new PersonValidator();\nvar result = validator.Validate(new Person());\nforeach (var failure in result.Errors) \n{\n  Console.WriteLine($\"Property: {failure.PropertyName} Severity: {failure.Severity}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rules with Otherwise Clause\nDESCRIPTION: Demonstrates using When with Otherwise to specify alternative validation rules when the condition is not met. Includes rules for both true and false conditions.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/conditions.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nWhen(customer => customer.IsPreferred, () => {\n   RuleFor(customer => customer.CustomerDiscount).GreaterThan(0);\n   RuleFor(customer => customer.CreditCardNumber).NotNull();\n}).Otherwise(() => {\n  RuleFor(customer => customer.CustomerDiscount).Equal(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Credit Card Validator in C#\nDESCRIPTION: Shows how to use the Credit Card Validator to check if a string property could be a valid credit card number.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.CreditCard).CreditCard();\n```\n\n----------------------------------------\n\nTITLE: Using WithMessage for Resource-Based Localization\nDESCRIPTION: Example of using WithMessage with strongly-typed resource wrappers to localize validation messages.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/localization.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.Surname).NotNull().WithMessage(x => MyLocalizedMessages.SurnameRequired);\n```\n\n----------------------------------------\n\nTITLE: Using PropertyValidator Extension Method in C#\nDESCRIPTION: Example showing how to use the extension method that wraps a custom PropertyValidator in a validator class, simplifying the validation rule definition.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/custom-validators.md#2025-04-17_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonValidator : AbstractValidator<Person> {\n    public PersonValidator() {\n       RuleFor(person => person.Pets).ListMustContainFewerThan(10);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Message Override in FluentValidation\nDESCRIPTION: Shows how to override the default validation message using WithMessage method with a static message.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/configuring.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(customer => customer.Surname).NotNull().WithMessage(\"Please ensure that you have entered your Surname\");\n```\n\n----------------------------------------\n\nTITLE: Using TestHelper with Chained Assertions in FluentValidation 9.0\nDESCRIPTION: Demonstrates the improved TestHelper syntax in FluentValidation 9.0 that allows chaining additional assertions onto validation test methods. This example shows how to test validation rules with specific error messages.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-9.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar validator = new InlineValidator<Person>();\nvalidator.RuleFor(x => x.Surname).NotNull().WithMessage(\"required\");\nvalidator.RuleFor(x => x.Address.Line1).NotEqual(\"foo\");\n\n// New advanced test syntax\nvar result = validator.TestValidate(new Person { Address = new Address()) };\nresult.ShouldHaveValidationErrorFor(x => x.Surname).WithMessage(\"required\");\nresult.ShouldNotHaveValidationErrorFor(x => x.Address.Line1);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Validator Extension Method in C#\nDESCRIPTION: Example of using the custom validator extension method in a validator class, which simplifies the validation rule code.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/custom-validators.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.Pets).ListMustContainFewerThan(10);\n```\n\n----------------------------------------\n\nTITLE: Testing FluentValidation Validators with NUnit\nDESCRIPTION: Example of a test fixture that tests a PersonValidator using FluentValidation's TestHelper extensions. It includes tests for both valid and invalid scenarios.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/testing.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing NUnit.Framework;\nusing FluentValidation;\nusing FluentValidation.TestHelper;\n\n[TestFixture]\npublic class PersonValidatorTester\n{\n    private PersonValidator validator;\n\n    [SetUp]\n    public void Setup()\n    {\n       validator = new PersonValidator();\n    }\n\n    [Test]\n    public void Should_have_error_when_Name_is_null()\n    {\n      var model = new Person { Name = null };\n      var result = validator.TestValidate(model);\n      result.ShouldHaveValidationErrorFor(person => person.Name);\n    }\n\n    [Test]\n    public void Should_not_have_error_when_name_is_specified()\n    {\n      var model = new Person { Name = \"Jeremy\" };\n      var result = validator.TestValidate(model);\n      result.ShouldNotHaveValidationErrorFor(person => person.Name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Property Validator on a Rule in FluentValidation 10\nDESCRIPTION: Demonstrates how to access the current property validator on a rule after API changes. The new approach requires going through the Current property to get the component first.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-10.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// before:\nPropertyRule rule = ...;\nIPropertyValidator currentValidator = rule.CurrentValidator;\n\n// after:\nIValidationRule<T,TProperty> rule = ...;\nRuleComponent<T, TProperty> component = rule.Current;\nIPropertyValidator currentValidator = component.CurrentValidator;\n```\n\n----------------------------------------\n\nTITLE: Overriding PreValidate Method in FluentValidation\nDESCRIPTION: Demonstrates how to override the PreValidate method to execute custom code before validation occurs. This example shows how to handle null models by adding a custom validation failure rather than throwing an exception.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/advanced.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyValidator : AbstractValidator<Person> \n{\n  public MyValidator() \n  {\n    RuleFor(x => x.Name).NotNull();\n  }\n\n  protected override bool PreValidate(ValidationContext<Person> context, ValidationResult result) \n  {\n    if (context.InstanceToValidate == null) \n    {\n      result.Errors.Add(new ValidationFailure(\"\", \"Please ensure a model was supplied.\"));\n      return false;\n    }\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Condition Scope Control\nDESCRIPTION: Shows how to control the scope of conditions using ApplyConditionTo parameter. Demonstrates applying conditions to specific validators rather than all preceding validators.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/conditions.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(customer => customer.CustomerDiscount)\n    .GreaterThan(0).When(customer => customer.IsPreferredCustomer, ApplyConditionTo.CurrentValidator)\n    .EqualTo(0).When(customer => ! customer.IsPreferredCustomer, ApplyConditionTo.CurrentValidator);\n```\n\n----------------------------------------\n\nTITLE: Basic FluentValidation Rule Definition\nDESCRIPTION: Example showing a basic validator class with a rule chain containing NotNull and NotEqual validators.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/cascade.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonValidator : AbstractValidator<Person> {\n  public PersonValidator() {\n    RuleFor(x => x.Surname).NotNull().NotEqual(\"foo\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Specific RuleSets (FluentValidation 9.1+)\nDESCRIPTION: Demonstrates how to validate using specific RuleSets in FluentValidation 9.1 and newer versions using the options callback approach.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/rulesets.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar validator = new PersonValidator();\nvar person = new Person();\nvar result = validator.Validate(person, options => options.IncludeRuleSets(\"Names\"));\n```\n\n----------------------------------------\n\nTITLE: Using Length Validator in FluentValidation (C#)\nDESCRIPTION: Ensures that the length of a string property is within the specified range. In this example, the Surname must be between 1 and 250 characters inclusive.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(customer => customer.Surname).Length(1, 250); //must be between 1 and 250 chars (inclusive)\n```\n\n----------------------------------------\n\nTITLE: Migrating from Deprecated Validate Methods in FluentValidation 10\nDESCRIPTION: Shows how to migrate from deprecated Validate method overloads to the new fluent approach using lambda expressions for property inclusion and ruleset selection.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-10.md#2025-04-17_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Validating only specific properties.\n// Before:\nvalidator.Validate(instance, x => x.SomeProperty, x => x.SomeOtherProperty);\nvalidator.Validate(instance, \"SomeProperty\", \"SomeOtherProperty\");\n\n// After:\nvalidator.Validate(instance, v =>\n{\n  v.IncludeProperties(x => x.SomeProperty, x => x.SomeOtherProperty);\n});\n\nvalidator.Validate(instance, v =>\n{\n  v.IncludeProperties(\"SomeProperty\", \"SomeOtherProperty\");\n});\n\n// Validating by ruleset:\n// Before (comma-delmited string to separate multiple rulesets):\nvalidator.Validate(instance, ruleSet: \"SomeRuleSet,AnotherRuleSet\");\n\n// After:\n// Separate parameters for each ruleset.\nvalidator.Validate(instance, v => \n{\n  v.IncludeRuleSets(\"SomeRuleSet\", \"AnotherRuleSet\")\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Codes in FluentValidation Validator\nDESCRIPTION: Demonstrates how to associate custom error codes with validation rules using WithErrorCode() method in a PersonValidator class. Shows implementation of two validation rules, one with a custom error code 'ERR1234' and another with default error code.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/error-codes.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonValidator : AbstractValidator<Person> \n{\n  public PersonValidator() \n  {\n    RuleFor(person => person.Surname).NotNull().WithErrorCode(\"ERR1234\");        \n    RuleFor(person => person.Forename).NotNull();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validation Error Code Output Example\nDESCRIPTION: Shows the console output from running the validation error code retrieval code, displaying both custom and default error codes for failed validations.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/error-codes.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nProperty: Surname Error Code: ERR1234\nProperty: Forename Error Code: NotNullValidator\n```\n\n----------------------------------------\n\nTITLE: Using GreaterThanOrEqualTo Validator in FluentValidation (C#)\nDESCRIPTION: Ensures that the value of a property is greater than or equal to a particular value or another property. Only valid on types implementing IComparable<T>.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n//Greater than a particular value\nRuleFor(customer => customer.CreditLimit).GreaterThanOrEqualTo(1);\n\n//Greater than another property\nRuleFor(customer => customer.CreditLimit).GreaterThanOrEqualTo(customer => customer.MinimumCreditLimit);\n```\n\n----------------------------------------\n\nTITLE: Setting Validator-level CascadeMode in FluentValidation 11\nDESCRIPTION: Shows how to replace AbstractValidator.CascadeMode with ClassLevelCascadeMode and RuleLevelCascadeMode properties for more granular control.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-11.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nClassLevelCascadeMode = CascadeMode.<YourCurrentValue>;\nRuleLevelCascadeMode = CascadeMode.<YourCurrentValue>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Custom Validator Using Custom Method in C#\nDESCRIPTION: An extension method that encapsulates the Custom validation logic to create a reusable validation rule for list item count.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/custom-validators.md#2025-04-17_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IRuleBuilderOptionsConditions<T, IList<TElement>> ListMustContainFewerThan<T, TElement>(this IRuleBuilder<T, IList<TElement>> ruleBuilder, int num) {\n\n  return ruleBuilder.Custom((list, context) => {\n     if(list.Count > 10) {\n       context.AddFailure(\"The list must contain 10 items or fewer\");\n     }\n   });\n}\n```\n\n----------------------------------------\n\nTITLE: Validation with Exception Throwing\nDESCRIPTION: Using ValidateAndThrow method to throw exceptions on validation failure.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/start.md#2025-04-17_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nCustomer customer = new Customer();\nCustomerValidator validator = new CustomerValidator();\n\nvalidator.ValidateAndThrow(customer);\n```\n\n----------------------------------------\n\nTITLE: Extended Custom Validator with Multiple Placeholders in C#\nDESCRIPTION: Further enhancement of the custom validator to include both the maximum allowed elements and the actual count of elements in the validation message.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/custom-validators.md#2025-04-17_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IRuleBuilderOptions<T, IList<TElement>> ListMustContainFewerThan<T, TElement>(this IRuleBuilder<T, IList<TElement>> ruleBuilder, int num) {\n\n  return ruleBuilder.Must((rootObject, list, context) => {\n    context.MessageFormatter\n      .AppendArgument(\"MaxElements\", num)\n      .AppendArgument(\"TotalElements\", list.Count);\n\n    return list.Count < num;\n  })\n  .WithMessage(\"{PropertyName} must contain fewer than {MaxElements} items. The list contains {TotalElements} element\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using LessThanOrEqualTo Validator in FluentValidation (C#)\nDESCRIPTION: Ensures that the value of a property is less than or equal to a particular value or another property. Only valid on types implementing IComparable<T>.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n//Less than a particular value\nRuleFor(customer => customer.CreditLimit).LessThanOrEqualTo(100);\n\n//Less than another property\nRuleFor(customer => customer.CreditLimit).LessThanOrEqualTo(customer => customer.MaxCreditLimit);\n```\n\n----------------------------------------\n\nTITLE: Defining classes with complex type collections in C#\nDESCRIPTION: Definition of Customer and Order classes demonstrating a collection of complex types (Customer has a collection of Order objects) that need validation.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/collections.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Customer \n{\n  public List<Order> Orders { get; set; } = new List<Order>();\n}\n\npublic class Order \n{\n  public double Total { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complete PropertyValidator Class in C#\nDESCRIPTION: A full implementation of a custom PropertyValidator class that validates list count. This approach provides complete control over the validation process and is how FluentValidation's built-in validators are implemented.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/custom-validators.md#2025-04-17_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Collections.Generic;\nusing FluentValidation.Validators;\n\npublic class ListCountValidator<T, TCollectionElement> : PropertyValidator<T, IList<TCollectionElement>> {\n\tprivate int _max;\n\n\tpublic ListCountValidator(int max) {\n\t\t_max = max;\n\t}\n\n\tpublic override bool IsValid(ValidationContext<T> context, IList<TCollectionElement> list) {\n\t\tif(list != null && list.Count >= _max) {\n\t\t\tcontext.MessageFormatter.AppendArgument(\"MaxElements\", _max);\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n  public override string Name => \"ListCountValidator\";\n\n\tprotected override string GetDefaultMessageTemplate(string errorCode)\n\t\t=> \"{PropertyName} must contain fewer than {MaxElements} items.\";\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Validators\nDESCRIPTION: Demonstration of chaining multiple validation rules for a single property.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/start.md#2025-04-17_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing FluentValidation;\n\npublic class CustomerValidator : AbstractValidator<Customer>\n{\n  public CustomerValidator()\n  {\n    RuleFor(customer => customer.Surname).NotNull().NotEqual(\"foo\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated InjectValidator Usage Example in C#\nDESCRIPTION: Shows the old deprecated way of injecting validators using InjectValidator method.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-12.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonValidator : AbstractValidator<Person> \n{\n  public PersonValidator() \n  {\n    RuleFor(x => x.Address).InjectValidator();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RuleSets in FluentValidation Validator\nDESCRIPTION: Shows how to define a PersonValidator class with grouped validation rules using RuleSet. The example groups name-related validations separately from ID validation.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/rulesets.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonValidator : AbstractValidator<Person> \n{\n public PersonValidator() \n {\n     RuleSet(\"Names\", () => \n     {\n        RuleFor(x => x.Surname).NotNull();\n        RuleFor(x => x.Forename).NotNull();\n     });\n\n     RuleFor(x => x.Id).NotEqual(0);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing FluentValidation.AspNetCore using NuGet Package Manager\nDESCRIPTION: This command installs the FluentValidation.AspNetCore package for ASP.NET Core integration using the NuGet package manager console in Visual Studio.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/installation.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nInstall-Package FluentValidation.AspNetCore\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using a Validator in a Service\nDESCRIPTION: Demonstrates how to inject an IValidator<User> into a service class and use it to validate a User object. The validation is performed asynchronously using ValidateAsync method.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/di.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class UserService\n{\n    private readonly IValidator<User> _validator;\n\n    public UserService(IValidator<User> validator)\n    {\n        _validator = validator;\n    }\n\n    public async Task DoSomething(User user)\n    {\n        var validationResult = await _validator.ValidateAsync(user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Inheritance Validation for a Single Property\nDESCRIPTION: This snippet demonstrates how to set up inheritance validation for a single property using SetInheritanceValidator. The validator will apply different validation rules based on the runtime type of the property.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/inheritance.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ContactRequestValidator : AbstractValidator<ContactRequest>\n{\n  public ContactRequestValidator()\n  {\n\n    RuleFor(x => x.Contact).SetInheritanceValidator(v => \n    {\n      v.Add<Organisation>(new OrganisationValidator());\n      v.Add<Person>(new PersonValidator());\n    });\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Equal Validator in FluentValidation (C#)\nDESCRIPTION: Ensures that the value of the specified property is equal to a particular value or equal to the value of another property. Can compare against fixed values or other properties.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n//Equal to a particular value\nRuleFor(customer => customer.Surname).Equal(\"Foo\");\n\n//Equal to another property\nRuleFor(customer => customer.Password).Equal(customer => customer.PasswordConfirmation);\n```\n\n----------------------------------------\n\nTITLE: Single Rule Condition with When\nDESCRIPTION: Demonstrates applying a condition to a single validation rule using the When method. The rule for CustomerDiscount only executes when IsPreferredCustomer is true.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/conditions.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(customer => customer.CustomerDiscount).GreaterThan(0).When(customer => customer.IsPreferredCustomer);\n```\n\n----------------------------------------\n\nTITLE: Using Empty Validator in C#\nDESCRIPTION: Demonstrates the use of the Empty Validator to check if a property value is null, the default value for its type, or an empty collection.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.Surname).Empty();\n```\n\n----------------------------------------\n\nTITLE: Using Equal Validator with Custom Comparer in FluentValidation (C#)\nDESCRIPTION: Uses Equal validator with a custom string comparer to perform case-insensitive comparison. Ensures Surname equals 'Foo' using an ordinal case-insensitive comparison.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(customer => customer.Surname).Equal(\"Foo\", StringComparer.OrdinalIgnoreCase);\n```\n\n----------------------------------------\n\nTITLE: Applying Enum Name Validator in C#\nDESCRIPTION: Shows how to use the Enum Name Validator to check if a string is a valid enum name, with options for case-sensitive and case-insensitive comparisons.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.ErrorLevelName).IsEnumName(typeof(ErrorLevel));\n```\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.ErrorLevelName).IsEnumName(typeof(ErrorLevel), caseSensitive: false);\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Validator in C#\nDESCRIPTION: Demonstrates the use of the Email Validator to ensure that a property value is a valid email address format. It also mentions two validation modes: a simple check and a more complex regex-based validation.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(customer => customer.Email).EmailAddress();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.Email).EmailAddress(EmailValidationMode.Net4xRegex)\n```\n\n----------------------------------------\n\nTITLE: Multiple Rules with Shared Condition\nDESCRIPTION: Shows how to apply the same condition to multiple validation rules using a top-level When method. Multiple rules are grouped together under a single condition.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/conditions.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nWhen(customer => customer.IsPreferred, () => {\n   RuleFor(customer => customer.CustomerDiscount).GreaterThan(0);\n   RuleFor(customer => customer.CreditCardNumber).NotNull();\n});\n```\n\n----------------------------------------\n\nTITLE: NotNullValidator Implementation Example in C#\nDESCRIPTION: Sample implementation of FluentValidation's built-in NotNullValidator, demonstrating a simple but complete PropertyValidator implementation.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/custom-validators.md#2025-04-17_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic class NotNullValidator<T,TProperty> : PropertyValidator<T,TProperty> {\n\n  public override string Name => \"NotNullValidator\";\n\n  public override bool IsValid(ValidationContext<T> context, TProperty value) {\n    return value != null;\n  }\n\n  protected override string GetDefaultMessageTemplate(string errorCode)\n    => \"'{PropertyName}' must not be empty.\";\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using RootContextData to Pass Custom Data Into Validation\nDESCRIPTION: Shows how to pass arbitrary data into the validation pipeline using RootContextData, which is useful for making conditional decisions based on data not available in the validated object.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/advanced.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar person = new Person();\nvar context = new ValidationContext<Person>(person);\ncontext.RootContextData[\"MyCustomData\"] = \"Test\";\nvar validator = new PersonValidator();\nvalidator.Validate(context);\n```\n\n----------------------------------------\n\nTITLE: Multiple Rules with Individual Cascade Modes\nDESCRIPTION: Example showing multiple validation rules each with explicit cascade mode settings.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/cascade.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.Forename).Cascade(CascadeMode.Stop).NotNull().NotEqual(\"foo\");\nRuleFor(x => x.MiddleNames).Cascade(CascadeMode.Stop).NotNull().NotEqual(\"foo\");\nRuleFor(x => x.Surname).Cascade(CascadeMode.Stop).NotNull().NotEqual(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Auto-registering Validators from an Assembly\nDESCRIPTION: Shows how to automatically register all validators from the assembly containing a specific validator type. Uses the AddValidatorsFromAssemblyContaining extension method from FluentValidation.DependencyInjectionExtensions.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/di.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing FluentValidation.DependencyInjectionExtensions;\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddValidatorsFromAssemblyContaining<UserValidator>();\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using RuleForEach in FluentValidation 8\nDESCRIPTION: Demonstrates the recommended approach for validating collection elements in FluentValidation 8, replacing SetCollectionValidator with RuleForEach.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-8.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nRuleForEach(x => x.AddressLines).SetValidator(new AddressLineValidator());\n```\n\n----------------------------------------\n\nTITLE: Using IncludeProperties to Validate a Specific Property\nDESCRIPTION: This snippet demonstrates how to configure a validator to only validate a specific property (Surname) using the IncludeProperties option, ignoring all other property validators defined in the validator class.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/specific-properties.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar validator = new CustomerValidator();\nvalidator.Validate(customer, options => \n{\n  options.IncludeProperties(x => x.Surname);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Severity Level for a Validation Rule in FluentValidation\nDESCRIPTION: Example of using WithSeverity method to set a validation rule's severity level to Warning instead of the default Error.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/severity.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.Surname).NotNull().WithSeverity(Severity.Warning);\n```\n\n----------------------------------------\n\nTITLE: Using InlineValidator for Mocking in FluentValidation Tests\nDESCRIPTION: Example of using InlineValidator to create a stub implementation of a validator that depends on an external service, avoiding the need for a mocking library.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/testing.md#2025-04-17_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Original validator that relies on an external service.\n// External service is used to check that the customer ID is not already used in the database.\npublic class CustomerValidator : AbstractValidator<Customer>\n{\n  public CustomerValidator(ICustomerRepository customerRepository)\n  {\n    RuleFor(x => x.Id)\n      .Must(id => customerRepository.CheckIdNotInUse(id));\n  }\n}\n\n// If you needed to stub this failure in a unit/integration test,\n// you could do the following:\nvar validator = new InlineValidator<Customer>();\nvalidator.RuleFor(x => x.Id).Must(id => false);\n\n// This instance could then be passed into anywhere expecting an IValidator<Customer>\n```\n\n----------------------------------------\n\nTITLE: Using inline ChildRules for collection validation in C#\nDESCRIPTION: Shows how to define validation rules for collection elements inline using the ChildRules method instead of creating a separate validator class.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/collections.md#2025-04-17_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CustomerValidator : AbstractValidator<Customer> \n{\n  public CustomerValidator() \n  {\n    RuleForEach(x => x.Orders).ChildRules(order => \n    {\n      order.RuleFor(x => x.Total).GreaterThan(0);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Rule-Level Cascade Mode\nDESCRIPTION: Demonstrates how to set cascade mode for a specific rule to stop execution if a validator fails.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/cascade.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.Surname).Cascade(CascadeMode.Stop).NotNull().NotEqual(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Applying Regular Expression Validator in C#\nDESCRIPTION: Shows how to use the Regular Expression Validator to ensure that a property value matches a given regular expression pattern.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(customer => customer.Surname).Matches(\"some regex here\");\n```\n\n----------------------------------------\n\nTITLE: Filtering Validators During Auto-registration\nDESCRIPTION: Shows how to use a filter function to exclude specific validators during auto-registration. In this example, CustomerValidator is excluded while all other validators are registered.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/di.md#2025-04-17_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddValidatorsFromAssemblyContaining<MyValidator>(ServiceLifetime.Scoped, \n    filter => filter.ValidatorType != typeof(CustomerValidator));\n```\n\n----------------------------------------\n\nTITLE: Using LessThan Validator in FluentValidation (C#)\nDESCRIPTION: Ensures that the value of a property is less than a particular value or less than the value of another property. Only valid on types implementing IComparable<T>.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n//Less than a particular value\nRuleFor(customer => customer.CreditLimit).LessThan(100);\n\n//Less than another property\nRuleFor(customer => customer.CreditLimit).LessThan(customer => customer.MaxCreditLimit);\n```\n\n----------------------------------------\n\nTITLE: Using MinimumLength Validator in FluentValidation (C#)\nDESCRIPTION: Ensures that the length of a string property is longer than the specified value. Requires the Surname to have at least 10 characters.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(customer => customer.Surname).MinimumLength(10); //must be 10 chars or more\n```\n\n----------------------------------------\n\nTITLE: Setting Default Rule-Level Cascade Mode\nDESCRIPTION: Shows how to set a default cascade mode for all rules in a validator class using RuleLevelCascadeMode property.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/cascade.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nRuleLevelCascadeMode = CascadeMode.Stop;\n\nRuleFor(x => x.Forename).NotNull().NotEqual(\"foo\");\nRuleFor(x => x.MiddleNames).NotNull().NotEqual(\"foo\");\nRuleFor(x => x.Surname).NotNull().NotEqual(\"foo\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation in Minimal API Endpoints with FluentValidation\nDESCRIPTION: This snippet demonstrates how to register a validator with the service provider and manually validate a model in a POST endpoint. It shows the complete workflow of validating input, returning validation errors, or proceeding with the operation if validation passes.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/aspnet.md#2025-04-17_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n\n// Register validator with service provider (or use one of the automatic registration methods)\nbuilder.Services.AddScoped<IValidator<Person>, PersonValidator>();\n\n// Also registering a DB access repository for demo purposes\n// replace this with whatever you're using in your application.\nbuilder.Services.AddScoped<IPersonRepository, PersonRepository>();\n\napp.MapPost(\"/person\", async (IValidator<Person> validator, IPersonRepository repository, Person person) => \n{\n  ValidationResult validationResult = await validator.ValidateAsync(person);\n\n  if (!validationResult.IsValid) \n  {\n    return Results.ValidationProblem(validationResult.ToDictionary());\n  }\n\n  repository.Save(person);\n  return Results.Created($\"/{person.Id}\", person);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom State in FluentValidation Validator\nDESCRIPTION: Shows how to create a PersonValidator class that implements custom state using WithState method. The example assigns a numeric state value to a validation rule for the Forename property.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/custom-state.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonValidator : AbstractValidator<Person> \n{\n  public PersonValidator() \n  {\n    RuleFor(person => person.Surname).NotNull();\n    RuleFor(person => person.Forename).NotNull().WithState(person => 1234);  \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying ExclusiveBetween Validator in C#\nDESCRIPTION: Demonstrates the use of the ExclusiveBetween Validator to check if a property value is within a specified range (exclusive).\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.Id).ExclusiveBetween(1,10);\n```\n\n----------------------------------------\n\nTITLE: Disabling DataAnnotations Validation in ASP.NET Core Integration\nDESCRIPTION: Demonstrates how to update ASP.NET Core integration to disable DataAnnotations validation, replacing the deprecated RunDefaultMvcValidationAfterFluentValidationExecutes property.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-11.md#2025-04-17_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Before:\nservices.AddFluentValidation(fv => {\n  fv.RunDefaultMvcValidationAfterFluentValidationExecutes = false;\n});\n\n// After:\nservices.AddFluentValidation(fv => {\n  fv.DisableDataAnnotationsValidation = true;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Message Placeholders to Validator in C#\nDESCRIPTION: An enhanced version of the extension method that uses custom message placeholders to provide a more descriptive validation error message that includes the maximum allowed elements.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/custom-validators.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IRuleBuilderOptions<T, IList<TElement>> ListMustContainFewerThan<T, TElement>(this IRuleBuilder<T, IList<TElement>> ruleBuilder, int num) {\n\n  return ruleBuilder.Must((rootObject, list, context) => {\n    context.MessageFormatter.AppendArgument(\"MaxElements\", num);\n    return list.Count < num;\n  })\n  .WithMessage(\"{PropertyName} must contain fewer than {MaxElements} items.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using GreaterThan Validator in FluentValidation (C#)\nDESCRIPTION: Ensures that the value of a property is greater than a particular value or greater than the value of another property. Only valid on types implementing IComparable<T>.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n//Greater than a particular value\nRuleFor(customer => customer.CreditLimit).GreaterThan(0);\n\n//Greater than another property\nRuleFor(customer => customer.CreditLimit).GreaterThan(customer => customer.MinimumCreditLimit);\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom State from Validation Results\nDESCRIPTION: Demonstrates how to access the custom state from validation results. The code iterates through validation failures and outputs both the property name and its associated custom state value.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/custom-state.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar validator = new PersonValidator();\nvar result = validator.Validate(new Person());\nforeach (var failure in result.Errors) \n{\n  Console.WriteLine($\"Property: {failure.PropertyName} State: {failure.CustomState}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Language Manager\nDESCRIPTION: Shows how to register a custom LanguageManager in the application's startup routine.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/localization.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nValidatorOptions.Global.LanguageManager = new CustomLanguageManager();\n```\n\n----------------------------------------\n\nTITLE: Combining Validation Messages\nDESCRIPTION: Example of combining multiple validation messages into a single string with a custom separator.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/start.md#2025-04-17_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nValidationResult results = validator.Validate(customer);\nstring allMessages = results.ToString(\"~\");     // In this case, each message will be separated with a `~`\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Method for Custom PropertyValidator in C#\nDESCRIPTION: An extension method that wraps the SetValidator call to make using a custom PropertyValidator more elegant and chainable like built-in validators.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/custom-validators.md#2025-04-17_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class MyValidatorExtensions {\n   public static IRuleBuilderOptions<T, IList<TElement>> ListMustContainFewerThan<T, TElement>(this IRuleBuilder<T, IList<TElement>> ruleBuilder, int num) {\n      return ruleBuilder.SetValidator(new ListCountValidator<T, TElement>(num));\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Inheritance Validation for a Collection Property\nDESCRIPTION: This snippet shows how to apply inheritance validation to each element in a collection using RuleForEach and SetInheritanceValidator. The appropriate validator will be selected based on the runtime type of each collection element.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/inheritance.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ContactRequestValidator : AbstractValidator<ContactRequest>\n{\n  public ContactRequestValidator()\n  {\n\n    RuleForEach(x => x.Contacts).SetInheritanceValidator(v => \n    {\n      v.Add<Organisation>(new OrganisationValidator());\n      v.Add<Person>(new PersonValidator());\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including All RuleSets\nDESCRIPTION: Shows how to execute all rules regardless of RuleSet membership using IncludeAllRuleSets.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/rulesets.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvalidator.Validate(person, options => \n{\n  options.IncludeAllRuleSets();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Culture\nDESCRIPTION: Shows how to force FluentValidation to use a specific culture for all messages.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/localization.md#2025-04-17_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nValidatorOptions.Global.LanguageManager.Culture = new CultureInfo(\"fr\");\n```\n\n----------------------------------------\n\nTITLE: Basic Property Name Rule Definition\nDESCRIPTION: Shows a basic validation rule definition for the NotNull validator.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/configuring.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(customer => customer.Surname).NotNull();\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Validators using Include Method in C#\nDESCRIPTION: Demonstrates how to compose a comprehensive validator by including multiple specialized validators that target the same model type using the Include method.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/including-rules.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonValidator : AbstractValidator<Person> \n{\n  public PersonValidator()\n   {\n    Include(new PersonAgeValidator());\n    Include(new PersonNameValidator());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SetCollectionValidator in FluentValidation 7\nDESCRIPTION: Shows how to use the now-deprecated SetCollectionValidator method to validate elements in a collection in FluentValidation 7.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-8.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.AddressLines).SetCollectionValidator(new AddressLineValidator());\n```\n\n----------------------------------------\n\nTITLE: Including Default Rules with RuleSets\nDESCRIPTION: Demonstrates two equivalent methods to include both RuleSet rules and default rules not in any RuleSet.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/rulesets.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvalidator.Validate(person, options => \n{\n  // Option 1: IncludeRulesNotInRuleSet is the equivalent of using the special ruleset name \"default\"\n  options.IncludeRuleSets(\"Names\").IncludeRulesNotInRuleSet();\n  // Option 2: This does the same thing.\n  option.IncludeRuleSets(\"Names\", \"default\");\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Validation Rules in FluentValidation C#\nDESCRIPTION: Example of a validator class that defines validation rules for a Person object, with rules requiring Surname and Forename to not be null.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/severity.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonValidator : AbstractValidator<Person>\n{\n  public PersonValidator()\n  {\n    RuleFor(person => person.Surname).NotNull();\n    RuleFor(person => person.Forename).NotNull();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Assertions on FluentValidation Results\nDESCRIPTION: Example of performing multiple assertions on a single validation result, including property-specific assertions using both lambda expressions and string names.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/testing.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar person = new Person { Name = \"Jeremy\" };\nvar result = validator.TestValidate(person);\n\n// Assert that there should be a failure for the Name property.\nresult.ShouldHaveValidationErrorFor(x => x.Name);\n\n// Assert that there are no failures for the age property.\nresult.ShouldNotHaveValidationErrorFor(x => x.Age);\n\n// You can also use a string name for properties that can't be easily represented with a lambda, eg:\nresult.ShouldHaveValidationErrorFor(\"Addresses[0].Line1\");\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple RuleSets (FluentValidation 9.1+)\nDESCRIPTION: Shows how to execute multiple RuleSets simultaneously using the IncludeRuleSets method.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/rulesets.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = validator.Validate(person, options => \n{\n  options.IncludeRuleSets(\"Names\", \"MyRuleSet\", \"SomeOtherRuleSet\");\n});\n```\n\n----------------------------------------\n\nTITLE: Refactored String to Integer Transformation with Separate Method\nDESCRIPTION: Shows an improved version of the string to integer transformation by moving the conversion logic into a separate method for better readability and maintainability.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/transform.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTransform(x => x.SomeStringProperty, StringToNullableInt)\n    .GreaterThan(10);\n\nint? StringToNullableInt(string value)\n  => int.TryParse(value, out int val) ? (int?) val : null;\n```\n\n----------------------------------------\n\nTITLE: Testing Specific Validation Failure Components\nDESCRIPTION: Example of chaining assertions to test specific components of a validation failure, including error message, severity, and error code.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/testing.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = validator.TestValidate(person);\n\nresult.ShouldHaveValidationErrorFor(person => person.Name)\n  .WithErrorMessage(\"'Name' must not be empty.\")\n  .WithSeverity(Severity.Error)\n  .WithErrorCode(\"NotNullValidator\");\n```\n\n----------------------------------------\n\nTITLE: Converting Custom Property Validators to Generic Form in FluentValidation 10\nDESCRIPTION: Demonstrates the migration of a custom property validator from the deprecated non-generic form to the new generic form. Shows changes to class inheritance, method signatures, and the addition of the Name property override.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-10.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Before:\npublic class NotNullValidator : PropertyValidator\n{\n  protected override bool IsValid(PropertyValidatorContext context)\n  {\n    return context.PropertyValue != null;\n  }\n\n  protected override string GetDefaultMessageTemplate()\n    => \"A value for {PropertyName} is required\";\n}\n\n// After:\npublic class NotNullValidator<T,TProperty> : PropertyValidator<T, TProperty>\n{\n  public override string Name => \"NotNullValidator\";\n\n  public override bool IsValid(ValidationContext<T> context, TProperty value)\n  {\n    return value != null;\n  }\n\n  protected override string GetDefaultMessageTemplate(string errorCode)\n    => \"A value for {PropertyName} is required\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using NotEqual Validator with Custom Comparer in FluentValidation (C#)\nDESCRIPTION: Uses NotEqual validator with a custom string comparer to perform case-insensitive comparison. Ensures Surname does not equal 'Foo' using an ordinal case-insensitive comparison.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(customer => customer.Surname).NotEqual(\"Foo\", StringComparer.OrdinalIgnoreCase);\n```\n\n----------------------------------------\n\nTITLE: Message Override with PropertyName Placeholder\nDESCRIPTION: Demonstrates using the {PropertyName} placeholder in validation messages which gets replaced with the actual property name at runtime.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/configuring.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(customer => customer.Surname).NotNull().WithMessage(\"Please ensure you have entered your {PropertyName}\");\n```\n\n----------------------------------------\n\nTITLE: Using IValidationContext Instead of Non-Generic Validate Overload\nDESCRIPTION: Shows how to replace the removed IValidator.Validate(object model) method with the overload that accepts an IValidationContext. This change was made to improve type safety in FluentValidation 9.0.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-9.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar context = new ValidationContext<object>(model);\nvar result = validator.Validate(context);\n```\n\n----------------------------------------\n\nTITLE: Setting Stop Cascade Mode in C#\nDESCRIPTION: Demonstrates how to configure cascade mode to stop on first failure using the new API structure.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-12.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nValidatorOptions.Global.DefaultRuleLevelCascadeMode = CascadeMode.Stop;\n```\n\n----------------------------------------\n\nTITLE: Property Name Override with WithName\nDESCRIPTION: Demonstrates how to override the property name in validation messages using the WithName method.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/configuring.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(customer => customer.Surname).NotNull().WithName(\"Last name\");\n```\n\n----------------------------------------\n\nTITLE: Using Callback Syntax for Localized Messages Instead of WithLocalizedMessage\nDESCRIPTION: Demonstrates the new approach for accessing strongly-typed localization wrappers in FluentValidation 9.0, replacing the deprecated WithLocalizedMessage method with a callback that directly accesses the localized resource.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-9.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.Surname).NotNull().WithLocalizedMessage(typeof(MyLocalizedMessages), \"SurnameRequired\");\n```\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.Surname).NotNull().WithMessage(x => MyLocalizedMessages.SurnameRequired);\n```\n\n----------------------------------------\n\nTITLE: Setting Global CascadeMode in FluentValidation 11\nDESCRIPTION: Shows how to replace ValidatorOptions.Global.CascadeMode with the new more specific DefaultClassLevelCascadeMode and DefaultRuleLevelCascadeMode properties.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-11.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nValidatorOptions.Global.DefaultClassLevelCascadeMode = CascadeMode.<YourCurrentValue>;\nValidatorOptions.Global.DefaultRuleLevelCascadeMode = CascadeMode.<YourCurrentValue>;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Property Name with Lambda\nDESCRIPTION: Shows how to use a lambda expression with WithName to generate dynamic property names.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/configuring.md#2025-04-17_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(customer => customer.Surname).NotNull().WithName(customer => \"Last name for customer \" + customer.Id);\n```\n\n----------------------------------------\n\nTITLE: Validating Properties by Path in FluentValidation 8\nDESCRIPTION: Shows how to validate specific nested properties using a full path notation, a new feature in FluentValidation 8.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-8.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvalidator.Validate(customer, \"Address.Line1\", \"Address.Line2\");\n```\n\n----------------------------------------\n\nTITLE: Migrating from PropertyValidatorContext to ValidationContext<T> in FluentValidation 10\nDESCRIPTION: Shows how to adapt code that previously used PropertyValidatorContext.ParentContext to directly use ValidationContext<T> instead. The example demonstrates updating a custom validation using the Must method.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-10.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Before:\nRuleFor(x => x.Foo).Must((instance, value, context) => \n{\n  return context.ParentContext.RootContextData.ContainsKey(\"Something\");\n});\n\n// After:\nRuleFor(x => x.Foo).Must((instance, value, context) => \n{\n  return context.RootContextData.ContainsKey(\"Something\");\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Global StopOnFirstFailure in FluentValidation 11\nDESCRIPTION: Demonstrates how to replace the deprecated StopOnFirstFailure CascadeMode with the new separate configuration for class and rule level cascade modes.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-11.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nValidatorOptions.Global.DefaultClassLevelCascadeMode = CascadeMode.Continue; // Not actually needed as this is the default. Just here for completeness.\nValidatorOptions.Global.DefaultRuleLevelCascadeMode = CascadeMode.Stop;\n```\n\n----------------------------------------\n\nTITLE: Configuring Validator Level Cascade Mode in C#\nDESCRIPTION: Shows how to set cascade mode at the validator level using the new API properties.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-12.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nClassLevelCascadeMode = CascadeMode.<YourCurrentValue>;\nRuleLevelCascadeMode = CascadeMode.<YourCurrentValue>;\n```\n\n----------------------------------------\n\nTITLE: Accessing Property Validators via Rule Components in FluentValidation 10\nDESCRIPTION: Shows how to access property validators after the API changes in FluentValidation 10. The new approach requires accessing validators through the Components collection instead of directly from the Validators property.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-10.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Before:\nIValidationRule rule = ...;\nforeach (IPropertyValidator propertyValidator in rule.Validators) \n{\n  // ...\n}\n\n// After:\nIValidationRule rule = ...;\nforeach (IRuleComponent component in rule.Componetnts) \n{\n  IPropertyValiator propertyValidator = component.Validator;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Validator-level StopOnFirstFailure in FluentValidation 11\nDESCRIPTION: Demonstrates how to replace the deprecated StopOnFirstFailure mode at the validator level with separate class and rule level cascade modes.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-11.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nClassLevelCascadeMode = CascadeMode.Continue;\nRuleLevelCascadeMode = CascadeMode.Stop;\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Cascade Mode Settings in C#\nDESCRIPTION: Shows how to configure global cascade mode settings after the removal of StopOnFirstFailure option. This replaces the deprecated ValidatorOptions.Global.CascadeMode property.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-12.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nValidatorOptions.Global.DefaultClassLevelCascadeMode = CascadeMode.<YourCurrentValue>;\nValidatorOptions.Global.DefaultRuleLevelCascadeMode = CascadeMode.<YourCurrentValue>;\n```\n\n----------------------------------------\n\nTITLE: Updating ASP.NET Client Validator Adaptors for FluentValidation 10\nDESCRIPTION: Shows the changes required for ASP.NET client validator adaptors, including changes to constructor parameters and registration approach. Now uses rule components instead of property validators directly.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-10.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Before:\npublic class MyCustomClientsideAdaptor : ClientValidatorBase\n{\n  public MyCustomClientsideAdaptor(PropertyRule rule, IPropertyValidator validator)\n  : base(rule, validator)\n  {\n\n  }\n\n  public override void AddValidation(ClientModelValidationContext context)\n  {\n    // ...\n  }\n}\n\nservices.AddMvc().AddFluentValidation(fv =>\n{\n  fv.ConfigureClientsideValidation(clientSide =>\n  {\n    clientSide.Add(typeof(MyCustomPropertyValidator), (context, rule, validator) => new MyCustomClientsideAdaptor(rule, validator));\n  })\n})\n\n\n// after:\npublic class MyCustomClientsideAdaptor : ClientValidatorBase\n{\n  public MyCustomClientsideAdaptor(IValidationRule rule, IRuleComponent component)\n  : base(rule, component)\n  {\n\n  }\n\n  public override void AddValidation(ClientModelValidationContext context)\n  {\n    // ...\n  }\n}\n\nservices.AddMvc().AddFluentValidation(fv =>\n{\n  fv.ConfigureClientsideValidation(clientSide =>\n  {\n    clientSide.Add(typeof(IMyCustomPropertyValidator), (context, rule, component) => new MyCustomClientsideAdaptor(rule, component));\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Method for ValidationResult to ModelState Conversion\nDESCRIPTION: Extension method that adds validation errors from FluentValidation's ValidationResult to ASP.NET Core's ModelStateDictionary for displaying errors in views.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/aspnet.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class Extensions \n{\n  public static void AddToModelState(this ValidationResult result, ModelStateDictionary modelState) \n  {\n    foreach (var error in result.Errors) \n    {\n      modelState.AddModelError(error.PropertyName, error.ErrorMessage);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ASP.NET Core View with Validation Error Display\nDESCRIPTION: HTML and Razor syntax for a form that displays validation errors from ModelState using ASP.NET Core Tag Helpers.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/aspnet.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n@model Person\n\n<div asp-validation-summary=\"ModelOnly\"></div>\n\n<form asp-action=\"Create\">\n  Id: <input asp-for=\"Id\" /> <span asp-validation-for=\"Id\"></span>\n  <br />\n  Name: <input asp-for=\"Name\" /> <span asp-validation-for=\"Name\"></span>\n  <br />\n  Email: <input asp-for=\"Email\" /> <span asp-validation-for=\"Email\"></span>\n  <br />\n  Age: <input asp-for=\"Age\" /> <span asp-validation-for=\"Age\"></span>\n\n  <br /><br />\n  <input type=\"submit\" value=\"submit\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Severity with Callback Function\nDESCRIPTION: Demonstrates the new ability to use a callback function to dynamically determine a validation rule's severity in FluentValidation 9.0, compared to the previous approach that required hard-coding the severity value.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-9.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.Surname).NotNull().WithSeverity(Severity.Warning);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.Surname).NotNull().WithSeverity(x => Severity.Warning);\n```\n\n----------------------------------------\n\nTITLE: Implementing IStringLocalizer in Validator\nDESCRIPTION: Demonstrates how to use ASP.NET Core's IStringLocalizer for validation message localization by injecting it into a validator class.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/localization.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonValidator : AbstractValidator<Person> \n{\n  public PersonValidator(IStringLocalizer<Person> localizer)\n   {\n    RuleFor(x => x.Surname).NotNull().WithMessage(x => localizer[\"Surname is required\"]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting ValidationResult to Dictionary Extension Method\nDESCRIPTION: This extension method converts a FluentValidation ValidationResult into a dictionary format suitable for returning in API responses. It groups validation errors by property name and is useful for versions of FluentValidation prior to 11.1 which don't include the ToDictionary method built-in.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/aspnet.md#2025-04-17_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class FluentValidationExtensions\n{\n  public static IDictionary<string, string[]> ToDictionary(this ValidationResult validationResult)\n    {\n      return validationResult.Errors\n        .GroupBy(x => x.PropertyName)\n        .ToDictionary(\n          g => g.Key,\n          g => g.Select(x => x.ErrorMessage).ToArray()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Display Name Resolution for [Display] Attributes\nDESCRIPTION: Shows how to restore the previous behavior of inferring property names from [Display] attributes, which was removed in FluentValidation 9.0 due to conflicts with ASP.NET Core's localization approach.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-9.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nFluentValidation.ValidatorOptions.DisplayNameResolver = (type, memberInfo, expression) => {\n\treturn memberInfo.GetCustomAttribute<System.ComponentModel.DataAnnotations.DisplayAttribute>()?.GetName();\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Language Manager\nDESCRIPTION: Implementation of a custom LanguageManager to override default validation messages with localized versions.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/localization.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CustomLanguageManager : FluentValidation.Resources.LanguageManager\n{\n  public CustomLanguageManager() \n  {\n    AddTranslation(\"en\", \"NotNullValidator\", \"'{PropertyName}' is required.\");\n    AddTranslation(\"en-US\", \"NotNullValidator\", \"'{PropertyName}' is required.\");\n    AddTranslation(\"en-GB\", \"NotNullValidator\", \"'{PropertyName}' is required.\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Model Classes for Inheritance Validation in C#\nDESCRIPTION: This snippet defines an interface IContact and its implementations (Person and Organisation), along with a ContactRequest class that will be validated. The model structure demonstrates a scenario where inheritance validation would be needed.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/inheritance.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// We have an interface that represents a 'contact',\n// for example in a CRM system. All contacts must have a name and email.\npublic interface IContact \n{\n  string Name { get; set; }\n  string Email { get; set; }\n}\n\n// A Person is a type of contact, with a name and a DOB.\npublic class Person : IContact \n{\n  public string Name { get; set; }\n  public string Email { get; set; }\n\n  public DateTime DateOfBirth { get; set; }\n}\n\n// An organisation is another type of contact,\n// with a name and the address of their HQ.\npublic class Organisation : IContact \n{\n  public string Name { get; set; }\n  public string Email { get; set; }\n\n  public Address Headquarters { get; set; }\n}\n\n// Our model class that we'll be validating.\n// This might be a request to send a message to a contact.\npublic class ContactRequest \n{\n  public IContact Contact { get; set; }\n\n  public string MessageToSend { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Ruleset with SetValidator in FluentValidation 8\nDESCRIPTION: Demonstrates how to explicitly define which ruleset will run on a child validator, a new feature in FluentValidation 8.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-8.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.Address).SetValidator(new AddressValidator(), \"myRuleset\");\n```\n\n----------------------------------------\n\nTITLE: Using Callbacks for Dynamic Severity Levels in FluentValidation\nDESCRIPTION: Example of using a callback function with WithSeverity to dynamically determine the severity level based on the validated object.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/severity.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(person => person.Surname).NotNull().WithSeverity(person => Severity.Warning);\n```\n\n----------------------------------------\n\nTITLE: Installing FluentValidation.AspNetCore using .NET Core CLI\nDESCRIPTION: This command adds the FluentValidation.AspNetCore package for ASP.NET Core integration using the dotnet CLI from the command line.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/installation.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package FluentValidation.AspNetCore\n```\n\n----------------------------------------\n\nTITLE: Implementing Enum Validator in C#\nDESCRIPTION: Demonstrates the use of the Enum Validator to check if a numeric value is valid for a specific enum type, preventing invalid casting.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.ErrorLevel).IsInEnum();\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning Message in RST Format\nDESCRIPTION: This code snippet uses RST (reStructuredText) format to display a warning message about the deprecation of ASP.NET WebApi 2 integration with FluentValidation 9.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/webapi.md#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. warning::\n   Integration with ASP.NET WebApi 2 is no longer supported as of FluentValidation 9. Please migrate to ASP.NET Core.\n```\n\n----------------------------------------\n\nTITLE: Using Equal Validator with Ordinal Comparison in FluentValidation 8.x (C#)\nDESCRIPTION: Forces an ordinal comparison in FluentValidation 8.x or older when using Equal with string properties, since older versions used culture-specific comparison by default.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(customer => customer.Surname).Equal(\"Foo\", StringComparer.Ordinal);\n```\n\n----------------------------------------\n\nTITLE: Implementing PrecisionScale Validator in C#\nDESCRIPTION: Demonstrates the use of the PrecisionScale Validator to check if a decimal value has the specified precision and scale. It also explains the ignoreTrailingZeros parameter and its effect on validation.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.Amount).PrecisionScale(4, 2, false);\n```\n\n----------------------------------------\n\nTITLE: Traditional approach with separate collection and element rules in C#\nDESCRIPTION: Shows the recommended approach of having separate rules - one that validates the collection as a whole and another that validates each element in the collection.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/collections.md#2025-04-17_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// This rule acts on the whole collection (using RuleFor)\nRuleFor(x => x.Orders)\n  .Must(x => x.Count <= 10).WithMessage(\"No more than 10 orders are allowed\");\n\n// This rule acts on each individual element (using RuleForEach)\nRuleForEach(x => x.Orders)\n  .Must(order => order.Total > 0).WithMessage(\"Orders must have a total of more than 0\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple FluentValidation Validator in C#\nDESCRIPTION: Example of a basic validator class that checks if a Person's Name property is not null.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/testing.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonValidator : AbstractValidator<Person>\n{\n   public PersonValidator()\n   {\n      RuleFor(person => person.Name).NotNull();\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative approach using ForEach within RuleFor in C#\nDESCRIPTION: Demonstrates an alternative approach that combines collection-level and element-level validation by using the ForEach method within a RuleFor statement.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/collections.md#2025-04-17_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.Orders)\n  .Must(x => x.Count <= 10).WithMessage(\"No more than 10 orders are allowed\")\n  .ForEach(orderRule => \n  {\n    orderRule.Must(order => order.Total > 0).WithMessage(\"Orders must have a total of more than 0\")\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Null Validator in C#\nDESCRIPTION: Shows how to use the Null Validator to check if a property value is null.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.Surname).Null();\n```\n\n----------------------------------------\n\nTITLE: Specifying Service Lifetime for Auto-registered Validators\nDESCRIPTION: Demonstrates how to specify a custom service lifetime (Transient in this case) when auto-registering validators. By default, validators are registered with a Scoped lifetime.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/di.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddValidatorsFromAssemblyContaining<UserValidator>(ServiceLifetime.Transient);\n```\n\n----------------------------------------\n\nTITLE: Complex Property Model Classes\nDESCRIPTION: Definition of Customer and Address classes for complex property validation.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/start.md#2025-04-17_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Customer \n{\n  public string Name { get; set; }\n  public Address Address { get; set; }\n}\n\npublic class Address \n{\n  public string Line1 { get; set; }\n  public string Line2 { get; set; }\n  public string Town { get; set; }\n  public string Country { get; set; }\n  public string Postcode { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Methods for Auto-registering Validators\nDESCRIPTION: Shows alternative methods for auto-registering validators using a type reference or an assembly reference instead of a generic type parameter.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/di.md#2025-04-17_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Load using a type reference rather than the generic.\nservices.AddValidatorsFromAssemblyContaining(typeof(UserValidator));\n\n// Load an assembly reference rather than using a marker type.\nservices.AddValidatorsFromAssembly(Assembly.Load(\"SomeAssembly\"));\n```\n\n----------------------------------------\n\nTITLE: Address Validator Implementation\nDESCRIPTION: Implementation of a validator for the Address class.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/start.md#2025-04-17_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AddressValidator : AbstractValidator<Address> \n{\n  public AddressValidator()\n  {\n    RuleFor(address => address.Postcode).NotNull();\n    //etc\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing RootContextData in Custom Validators\nDESCRIPTION: Demonstrates how to access the RootContextData dictionary within custom validators, allowing for conditional validation logic based on the arbitrary data passed in.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/advanced.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.Surname).Custom((x, context) => \n{\n  if(context.RootContextData.ContainsKey(\"MyCustomData\")) \n  {\n    context.AddFailure(\"My error message\");\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using MaximumLength Validator in FluentValidation (C#)\nDESCRIPTION: Ensures that the length of a string property is no longer than the specified value. Limits the Surname to a maximum of 250 characters.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(customer => customer.Surname).MaximumLength(250); //must be 250 chars or fewer\n```\n\n----------------------------------------\n\nTITLE: Customizing Validation Exception by Overriding RaiseValidationException\nDESCRIPTION: Shows how to customize the exception thrown when validation fails by overriding the RaiseValidationException method, wrapping the default ValidationException in an ArgumentException.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/advanced.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void RaiseValidationException(ValidationContext<T> context, ValidationResult result)\n{\n    var ex = new ValidationException(result.Errors);\n    throw new ArgumentException(ex.Message, ex);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom ValidateAndThrow Extension Method\nDESCRIPTION: Demonstrates how to create a custom extension method that validates an object and throws a specific exception type when validation fails, providing an alternative to overriding RaiseValidationException.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/advanced.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class FluentValidationExtensions\n{\n    public static void ValidateAndThrowArgumentException<T>(this IValidator<T> validator, T instance)\n    {\n        var res = validator.Validate(instance);\n\n        if (!res.IsValid)\n        {\n            var ex = new ValidationException(res.Errors);\n            throw new ArgumentException(ex.Message, ex);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Class Model in C#\nDESCRIPTION: Basic C# class definition for a Customer model with properties for Id, name fields, discount and address.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/start.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Customer \n{\n  public int Id { get; set; }\n  public string Surname { get; set; }\n  public string Forename { get; set; }\n  public decimal Discount { get; set; }\n  public string Address { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Using NotEqual Validator with Value in FluentValidation (C#)\nDESCRIPTION: Ensures that the value of the specified property is not equal to a particular value. Compares the Surname property against the string 'Foo'.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n//Not equal to a particular value\nRuleFor(customer => customer.Surname).NotEqual(\"Foo\");\n\n//Not equal to another property\nRuleFor(customer => customer.Surname).NotEqual(customer => customer.Forename);\n```\n\n----------------------------------------\n\nTITLE: Creating Name-Specific Validator for Person in C#\nDESCRIPTION: Defines a validator class that focuses on name validation for a Person object, implementing rules to validate the Surname and Forename properties.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/including-rules.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonNameValidator : AbstractValidator<Person> \n{\n  public PersonNameValidator() \n  {\n    RuleFor(x => x.Surname).NotNull().Length(0, 255);\n    RuleFor(x => x.Forename).NotNull().Length(0, 255);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Properties of Collection Items with Wildcard Indexers\nDESCRIPTION: This snippet shows how to validate a specific property on all items in a collection using the wildcard indexer syntax. It targets the Cost property of all Orders in a customer's order collection.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/specific-properties.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar validator = new CustomerValidator();\nvalidator.Validate(customer, options => \n{\n  options.IncludeProperties(\"Orders[].Cost\");\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom PropertyValidator in Validation Rules in C#\nDESCRIPTION: Example showing how to use a custom PropertyValidator implementation in a validator class by calling SetValidator.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/custom-validators.md#2025-04-17_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonValidator : AbstractValidator<Person> {\n    public PersonValidator() {\n       RuleFor(person => person.Pets).SetValidator(new ListCountValidator<Person, Pet>(10));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using NotEqual Validator with Ordinal Comparison in FluentValidation 8.x (C#)\nDESCRIPTION: Forces an ordinal comparison in FluentValidation 8.x or older when using NotEqual with string properties, since older versions used culture-specific comparison by default.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/built-in-validators.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(customer => customer.Surname).NotEqual(\"Foo\", StringComparer.Ordinal);\n```\n\n----------------------------------------\n\nTITLE: Alternative ContactRequest Class with a Collection Property\nDESCRIPTION: This snippet shows an alternative version of the ContactRequest class that contains a collection of IContact objects instead of a single property. This demonstrates a scenario where inheritance validation would be needed for collection elements.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/inheritance.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ContactRequest \n{\n  public List<IContact> Contacts { get; } = new();\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Property Name in Custom Validation in C#\nDESCRIPTION: Example showing how to override the property name when adding a validation failure in a Custom validator, providing more flexibility in error reporting.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/custom-validators.md#2025-04-17_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\ncontext.AddFailure(\"SomeOtherProperty\", \"The list must contain 10 items or fewer\");\n// Or you can instantiate the ValidationFailure directly:\ncontext.AddFailure(new ValidationFailure(\"SomeOtherProperty\", \"The list must contain 10 items or fewer\");\n```\n\n----------------------------------------\n\nTITLE: Defining a Person Class with List Property in C#\nDESCRIPTION: A simple class definition showing a Person class with a list of Pet objects that will be used in validation examples.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/custom-validators.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Person {\n  public IList<Pet> Pets {get;set;} = new List<Pet>();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom DisplayNameResolver Configuration\nDESCRIPTION: Example of configuring a custom DisplayNameResolver for global property name resolution.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/configuring.md#2025-04-17_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nValidatorOptions.Global.DisplayNameResolver = (type, member, expression) => \n{\n  if(member != null) \n  {\n     return member.Name + \"Foo\";\n  }\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Person class with a collection property in C#\nDESCRIPTION: A simple Person class that contains a collection of strings representing address lines. This demonstrates a typical collection property that needs validation.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/collections.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Person \n{\n  public List<string> AddressLines { get; set; } = new List<string>();\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Only Method to Verify No Other Validation Failures Occurred\nDESCRIPTION: Example of using the Only method to ensure no other validation failures occurred beyond those specifically tested for.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/testing.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = validator.TestValidate(person);\n\n// Assert that failures only happened for Name property.\nresult.ShouldHaveValidationErrorFor(person => person.Name).Only();\n\n// Assert that failures only happened for Name property and all have the specified message\nresult.ShouldHaveValidationErrorFor(person => person.Name)\n  .WithErrorMessage(\"'Name' must not be empty.\")\n  .Only();\n```\n\n----------------------------------------\n\nTITLE: Updating MessageBuilder Implementation in FluentValidation 11\nDESCRIPTION: Shows how to update MessageBuilder implementation for FluentValidation 11, where MessageBuilder is now set-only and chaining is no longer supported.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/upgrading-to-11.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nreturn ruleBuilder.Configure(rule => {\n  rule.MessageBuilder = context => {\n    // ... some custom logic in here.\n    return context.GetDefaultMessage();\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Legacy RuleSet Execution (FluentValidation 9.0 and older)\nDESCRIPTION: Demonstrates the deprecated syntax for executing RuleSets in FluentValidation 9.0 and older versions.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/rulesets.md#2025-04-17_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar validator = new PersonValidator();\nvar person = new Person();\nvar result = validator.Validate(person, ruleSet: \"Names\");\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvalidator.Validate(person, ruleSet: \"Names,MyRuleSet,SomeOtherRuleSet\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvalidator.Validate(person, ruleSet: \"default,MyRuleSet\")\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvalidator.Validate(person, ruleSet: \"*\")\n```\n\n----------------------------------------\n\nTITLE: Custom State Validation Output Example\nDESCRIPTION: Shows the console output from running the validation with custom state. Demonstrates how the custom state appears in the validation results.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/custom-state.md#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nProperty: Surname State:\nProperty: Forename State: 1234\n```\n\n----------------------------------------\n\nTITLE: Output from Validation with Different Severity Levels\nDESCRIPTION: Example output showing validation failures with different severity levels (Warning and Error) applied to different properties.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/severity.md#2025-04-17_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nProperty: Surname Severity: Warning\nProperty: Forename Severity: Error\n```\n\n----------------------------------------\n\nTITLE: Disabling Localization\nDESCRIPTION: Example of how to disable FluentValidation's localization support globally.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/localization.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nValidatorOptions.Global.LanguageManager.Enabled = false;\n```\n\n----------------------------------------\n\nTITLE: Installing FluentValidation using NuGet Package Manager in Visual Studio\nDESCRIPTION: This command installs the FluentValidation package using the NuGet package manager console within Visual Studio.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/installation.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nInstall-Package FluentValidation\n```\n\n----------------------------------------\n\nTITLE: Installing FluentValidation using .NET Core CLI\nDESCRIPTION: This command adds the FluentValidation package to a .NET project using the dotnet CLI from a terminal window.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/installation.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package FluentValidation\n```\n\n----------------------------------------\n\nTITLE: Setting Rule-Level Cascade Mode in FluentValidation\nDESCRIPTION: Example of setting the validator cascade mode at the rule level, which overrides the global cascade mode option for this specific validation rule.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/Changelog.txt#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nRuleFor(x => x.Surname).Cascade().StopOnFirstFailure()\n```\n\n----------------------------------------\n\nTITLE: Warning Block about Deprecated ASP.NET MVC 5 Integration in reStructuredText\nDESCRIPTION: A reStructuredText directive that displays a warning message informing users that integration with ASP.NET MVC 5 is no longer supported as of FluentValidation 9, recommending migration to ASP.NET Core.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/mvc5.md#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. warning::\n   Integration with ASP.NET MVC 5 is no longer supported as of FluentValidation 9. Please migrate to ASP.NET Core.\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for ReadTheDocs Documentation\nDESCRIPTION: This requirements file defines Python package dependencies for a documentation build system. It references another requirements file 'requirements_rtd.txt', specifies sphinx-autobuild version 0.7.1, and constrains jinja2 to versions below 3.1.0.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-r requirements_rtd.txt\nsphinx-autobuild==0.7.1\njinja2<3.1.0\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: This snippet lists Python package dependencies with their specific version requirements. It includes packages for documentation (Sphinx, alabaster), markup processing (commonmark, recommonmark), and web templating (Jinja2). Some packages have exact version specifications, while others have version constraints.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/requirements_rtd.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmock==1.0.1 \nalabaster==0.7.13\ncommonmark==0.9.1 \nrecommonmark==0.5.0 \nreadthedocs-sphinx-ext<2.3 \njinja2<3.1.0\nrecommonmark==0.5.0 \nsphinx==1.8.5\nsphinx-rtd-theme==0.4.3\ndocutils==0.17\n```\n\n----------------------------------------\n\nTITLE: Setting Global Cascade Mode in FluentValidation\nDESCRIPTION: Example of setting the validator cascade mode globally to StopOnFirstFailure, which changes the default behavior from Continue to stop validation after the first failure.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/Changelog.txt#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nValidationOptions.CascadeMode = ValidatorCascadeMode.StopOnFirstFailure\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default Severity Level in FluentValidation\nDESCRIPTION: Example showing how to set the default severity level globally for all validation rules using the ValidatorOptions class.\nSOURCE: https://github.com/FluentValidation/FluentValidation/blob/main/docs/severity.md#2025-04-17_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nValidatorOptions.Global.Severity = Severity.Info;\n```"
  }
]