[
  {
    "owner": "microsoft",
    "repo": "stl",
    "content": "TITLE: Debugging an executable with Visual Studio (devenv)\nDESCRIPTION: This command starts the Visual Studio debugger with the specified executable and source file, allowing you to step through the code and inspect variables.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_26\n\nLANGUAGE: C++\nCODE:\n```\ndevenv \"C:\\Dev\\STL\\out\\x64\\tests\\std\\tests\\GH_XXXX_meow\\Output\\02\\GH_XXXX_meow.exe\"\n       \"C:\\Dev\\STL\\tests\\std\\tests\\GH_XXXX_meow\\test.cpp\"\n```\n\n----------------------------------------\n\nTITLE: Defining add_benchmark Function\nDESCRIPTION: Defines a custom CMake function `add_benchmark` to simplify the process of creating benchmark executables. The function parses arguments, sets compiler features, includes directories, and links against the Google Benchmark library.\nSOURCE: https://github.com/microsoft/stl/blob/main/benchmarks/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(add_benchmark name)\n    cmake_parse_arguments(PARSE_ARGV 1 \"arg\" \"\" \"CXX_STANDARD\" \"\")\n\n    if(NOT DEFINED arg_CXX_STANDARD)\n        set(arg_CXX_STANDARD 23)\n    elseif(NOT arg_CXX_STANDARD MATCHES \"^[0-9][0-9]$\")\n        message(FATAL_ERROR \"Unexpected value for CXX_STANDARD: ${arg_CXX_STANDARD}\")\n    endif()\n\n    if(NOT DEFINED arg_UNPARSED_ARGUMENTS)\n        message(FATAL_ERROR \"benchmark ${name} does not have any source files\")\n    endif()\n\n    add_executable(benchmark-${name}\n        ${benchmark_headers}\n        ${arg_UNPARSED_ARGUMENTS}\n    )\n\n    target_compile_features(benchmark-${name} PRIVATE cxx_std_${arg_CXX_STANDARD})\n    target_include_directories(benchmark-${name} PRIVATE inc)\n    target_link_libraries(benchmark-${name} PRIVATE benchmark::benchmark)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding STL DLL Targets\nDESCRIPTION: This function `add_stl_dlls` defines the core and satellite STL DLL targets (msvcp140.dll, msvcp140_1.dll, msvcp140_2.dll, msvcp140_atomic_wait.dll, msvcp140_codecvt_ids.dll). It creates object libraries, sets compile definitions and options, links the objects to create shared libraries, and sets target properties such as output names and directories.  It also handles debug and release specific flags.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_stl_dlls D_SUFFIX REL_OR_DBG)\n    set(link_options_Release \"/LTCG;/opt:ref,icf;${VCLIBS_EXPLICIT_MACHINE}\")\n    set(link_options_Debug \"/opt:ref,noicf;${VCLIBS_EXPLICIT_MACHINE}\")\n\n    set(gl_flag_Release \"/GL\")\n    set(gl_flag_Debug \"\")\n\n    # msvcp140.dll\n    add_library(msvcp${D_SUFFIX}_objects OBJECT ${DLL_SOURCES} ${SOURCES} ${DLL_ASAN_SOURCES})\n    target_compile_definitions(msvcp${D_SUFFIX}_objects PRIVATE CRTDLL2 _DLL)\n    target_compile_options(msvcp${D_SUFFIX}_objects PRIVATE ${gl_flag_${REL_OR_DBG}} /EHsc)\n    target_stl_compile_options(msvcp${D_SUFFIX}_objects ${REL_OR_DBG})\n\n    add_library(msvcp${D_SUFFIX}_init_objects OBJECT ${INITIALIZER_SOURCES})\n    target_compile_definitions(msvcp${D_SUFFIX}_init_objects PRIVATE CRTDLL2 _DLL)\n    target_compile_options(msvcp${D_SUFFIX}_init_objects PRIVATE /EHsc)\n    target_stl_compile_options(msvcp${D_SUFFIX}_init_objects ${REL_OR_DBG})\n\n    add_library(msvcp${D_SUFFIX}_eha_objects OBJECT ${EHA_SOURCES})\n    target_compile_definitions(msvcp${D_SUFFIX}_eha_objects PRIVATE CRTDLL2 _DLL)\n    target_compile_options(msvcp${D_SUFFIX}_eha_objects PRIVATE ${gl_flag_${REL_OR_DBG}} /EHa)\n    target_stl_compile_options(msvcp${D_SUFFIX}_eha_objects ${REL_OR_DBG})\n\n    add_library(msvcp${D_SUFFIX} SHARED)\n    target_link_libraries(msvcp${D_SUFFIX} PRIVATE msvcp${D_SUFFIX}_eha_objects msvcp${D_SUFFIX}_objects msvcp${D_SUFFIX}_init_objects \"${TOOLSET_LIB}/vcruntime${D_SUFFIX}.lib\" \"${TOOLSET_LIB}/msvcrt${D_SUFFIX}.lib\" \"ucrt${D_SUFFIX}.lib\")\n    set_target_properties(msvcp${D_SUFFIX} PROPERTIES ARCHIVE_OUTPUT_NAME \"msvcp140_base${D_SUFFIX}${VCLIBS_SUFFIX}\")\n    set_target_properties(msvcp${D_SUFFIX} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}\")\n    set_target_properties(msvcp${D_SUFFIX} PROPERTIES OUTPUT_NAME \"msvcp140${D_SUFFIX}${VCLIBS_SUFFIX}\")\n    target_link_options(msvcp${D_SUFFIX} PRIVATE ${link_options_${REL_OR_DBG}})\n\n    # import library 'statics'\n    add_library(msvcp${D_SUFFIX}_implib_objects OBJECT ${IMPLIB_SOURCES})\n    target_compile_definitions(msvcp${D_SUFFIX}_implib_objects PRIVATE _DLL _ENFORCE_ONLY_CORE_HEADERS)\n    target_compile_options(msvcp${D_SUFFIX}_implib_objects PRIVATE /EHsc) # No /GL!\n    target_stl_compile_options(msvcp${D_SUFFIX}_implib_objects ${REL_OR_DBG})\n\n    add_library(msvcp${D_SUFFIX}_satellite_objects OBJECT ${SATELLITE_DLL_SOURCES})\n    target_compile_definitions(msvcp${D_SUFFIX}_satellite_objects PRIVATE _DLL)\n    target_compile_options(msvcp${D_SUFFIX}_satellite_objects PRIVATE ${gl_flag_${REL_OR_DBG}} /EHsc)\n    target_stl_compile_options(msvcp${D_SUFFIX}_satellite_objects ${REL_OR_DBG})\n\n    # msvcp140_1.dll (the memory_resource satellite)\n    add_library(msvcp_1${D_SUFFIX}_objects OBJECT ${SOURCES_SATELLITE_1})\n    target_compile_definitions(msvcp_1${D_SUFFIX}_objects PRIVATE _BUILDING_SATELLITE_1 _DLL)\n    target_compile_options(msvcp_1${D_SUFFIX}_objects PRIVATE ${gl_flag_${REL_OR_DBG}} /EHsc)\n    target_stl_compile_options(msvcp_1${D_SUFFIX}_objects ${REL_OR_DBG})\n\n    add_library(msvcp_1${D_SUFFIX} SHARED)\n    target_link_libraries(msvcp_1${D_SUFFIX} PRIVATE msvcp_1${D_SUFFIX}_objects msvcp${D_SUFFIX}_satellite_objects \"msvcp${D_SUFFIX}\" \"${TOOLSET_LIB}/vcruntime${D_SUFFIX}.lib\" \"${TOOLSET_LIB}/msvcrt${D_SUFFIX}.lib\" \"ucrt${D_SUFFIX}.lib\")\n    set_target_properties(msvcp_1${D_SUFFIX} PROPERTIES ARCHIVE_OUTPUT_NAME \"msvcp140_1${D_SUFFIX}${VCLIBS_SUFFIX}\")\n    set_target_properties(msvcp_1${D_SUFFIX} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}\")\n    set_target_properties(msvcp_1${D_SUFFIX} PROPERTIES OUTPUT_NAME \"msvcp140_1${D_SUFFIX}${VCLIBS_SUFFIX}\")\n    target_link_options(msvcp_1${D_SUFFIX} PRIVATE ${link_options_${REL_OR_DBG}})\n\n    # msvcp140_2.dll (the special math satellite)\n    add_library(msvcp_2${D_SUFFIX}_objects OBJECT ${SOURCES_SATELLITE_2})\n    target_compile_definitions(msvcp_2${D_SUFFIX}_objects PRIVATE _BUILDING_SATELLITE_2 _DLL)\n    target_compile_options(msvcp_2${D_SUFFIX}_objects PRIVATE ${gl_flag_${REL_OR_DBG}} /EHsc)\n    target_link_libraries(msvcp_2${D_SUFFIX}_objects PRIVATE Boost::math)\n    target_stl_compile_options(msvcp_2${D_SUFFIX}_objects ${REL_OR_DBG})\n\n    add_library(msvcp_2${D_SUFFIX} SHARED)\n    target_link_libraries(msvcp_2${D_SUFFIX} PRIVATE msvcp_2${D_SUFFIX}_objects msvcp${D_SUFFIX}_satellite_objects msvcp${D_SUFFIX}_implib_objects msvcp${D_SUFFIX} \"${TOOLSET_LIB}/vcruntime${D_SUFFIX}.lib\" \"${TOOLSET_LIB}/msvcrt${D_SUFFIX}.lib\" \"ucrt${D_SUFFIX}.lib\")\n    set_target_properties(msvcp_2${D_SUFFIX} PROPERTIES ARCHIVE_OUTPUT_NAME \"msvcp140_2${D_SUFFIX}${VCLIBS_SUFFIX}\")\n    set_target_properties(msvcp_2${D_SUFFIX} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}\")\n    set_target_properties(msvcp_2${D_SUFFIX} PROPERTIES OUTPUT_NAME \"msvcp140_2${D_SUFFIX}${VCLIBS_SUFFIX}\")\n    target_link_options(msvcp_2${D_SUFFIX} PRIVATE ${link_options_${REL_OR_DBG}})\n\n    # msvcp140_atomic_wait.dll (the atomic wait satellite)\n    add_library(msvcp${D_SUFFIX}_atomic_wait_objects OBJECT ${SOURCES_SATELLITE_ATOMIC_WAIT})\n    target_compile_definitions(msvcp${D_SUFFIX}_atomic_wait_objects PRIVATE _BUILDING_SATELLITE_ATOMIC_WAIT _DLL)\n    target_compile_options(msvcp${D_SUFFIX}_atomic_wait_objects PRIVATE ${gl_flag_${REL_OR_DBG}} /EHsc)\n    target_stl_compile_options(msvcp${D_SUFFIX}_atomic_wait_objects ${REL_OR_DBG})\n\n    # generate the .def for msvcp140_atomic_wait.dll\n    generate_satellite_def(\"atomic_wait\" \"${D_SUFFIX}\")\n\n    add_library(msvcp${D_SUFFIX}_atomic_wait SHARED \"${CMAKE_BINARY_DIR}/msvcp_atomic_wait${D_SUFFIX}.def\")\n    target_link_libraries(msvcp${D_SUFFIX}_atomic_wait PRIVATE msvcp${D_SUFFIX}_atomic_wait_objects msvcp${D_SUFFIX}_satellite_objects msvcp${D_SUFFIX}_implib_objects \"msvcp${D_SUFFIX}\" \"${TOOLSET_LIB}/vcruntime${D_SUFFIX}.lib\" \"${TOOLSET_LIB}/msvcrt${D_SUFFIX}.lib\" \"ucrt${D_SUFFIX}.lib\" \"advapi32.lib\")\n    set_target_properties(msvcp${D_SUFFIX}_atomic_wait PROPERTIES ARCHIVE_OUTPUT_NAME \"msvcp140_atomic_wait${D_SUFFIX}${VCLIBS_SUFFIX}\")\n    set_target_properties(msvcp${D_SUFFIX}_atomic_wait PROPERTIES ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}\")\n    set_target_properties(msvcp${D_SUFFIX}_atomic_wait PROPERTIES OUTPUT_NAME \"msvcp140${D_SUFFIX}_atomic_wait${VCLIBS_SUFFIX}\")\n    target_link_options(msvcp${D_SUFFIX}_atomic_wait PRIVATE ${link_options_${REL_OR_DBG}})\n\n    # msvcp140_codecvt_ids.dll\n    add_library(msvcp${D_SUFFIX}_codecvt_ids_objects OBJECT ${SOURCES_SATELLITE_CODECVT_IDS})\n    target_compile_definitions(msvcp${D_SUFFIX}_codecvt_ids_objects PRIVATE _BUILDING_SATELLITE_CODECVT_IDS _DLL)\n    target_compile_options(msvcp${D_SUFFIX}_codecvt_ids_objects PRIVATE ${gl_flag_${REL_OR_DBG}} /EHsc)\n    target_stl_compile_options(msvcp${D_SUFFIX}_codecvt_ids_objects ${REL_OR_DBG})\n\n    add_library(msvcp${D_SUFFIX}_codecvt_ids SHARED)\n    target_link_libraries(msvcp${D_SUFFIX}_codecvt_ids PRIVATE msvcp${D_SUFFIX}_codecvt_ids_objects msvcp${D_SUFFIX}_satellite_objects \"msvcp${D_SUFFIX}\" \"${TOOLSET_LIB}/vcruntime${D_SUFFIX}.lib\" \"${TOOLSET_LIB}/msvcrt${D_SUFFIX}.lib\" \"ucrt${D_SUFFIX}.lib\")\n    set_target_properties(msvcp${D_SUFFIX}_codecvt_ids PROPERTIES ARCHIVE_OUTPUT_NAME \"msvcp140_codecvt_ids${D_SUFFIX}${VCLIBS_SUFFIX}\")\n    set_target_properties(msvcp${D_SUFFIX}_codecvt_ids PROPERTIES ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}\")\n    set_target_properties(msvcp${D_SUFFIX}_codecvt_ids PROPERTIES OUTPUT_NAME \"msvcp140${D_SUFFIX}_codecvt_ids${VCLIBS_SUFFIX}\")\n    target_link_options(msvcp${D_SUFFIX}_codecvt_ids PRIVATE ${link_options_${REL_OR_DBG}})\n\n    # import library\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Address Sanitizer Build Option\nDESCRIPTION: If `STL_ASAN_BUILD` is enabled, this snippet adds compile options to enable the Address Sanitizer (ASan) and disable the Visual C++ ASan library. This helps in detecting memory corruption bugs.\nSOURCE: https://github.com/microsoft/stl/blob/main/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(STL_ASAN_BUILD)\n    message(STATUS \"Building with ASan enabled\")\n    add_compile_options(\"$<$<COMPILE_LANGUAGE:CXX>:-fsanitize=address;-fno-sanitize-address-vcasan-lib>\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Target Architecture Handling\nDESCRIPTION: This snippet handles different target architectures (x86, x64, ARM, ARM64, ARM64EC) by setting variables like `VCLIBS_TARGET_ARCHITECTURE`, `VCLIBS_I386_OR_AMD64`, and `VCLIBS_X86_OR_X64` and adding compile definitions based on the architecture. It also handles ARM64EC specific compile options.\nSOURCE: https://github.com/microsoft/stl/blob/main/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DEFINED VCLIBS_TARGET_ARCHITECTURE)\n    set(VCLIBS_TARGET_ARCHITECTURE \"${CMAKE_CXX_COMPILER_ARCHITECTURE_ID}\")\nendif()\n\nstring(TOLOWER \"${VCLIBS_TARGET_ARCHITECTURE}\" VCLIBS_TARGET_ARCHITECTURE)\n\nif(VCLIBS_TARGET_ARCHITECTURE MATCHES \"^x64$|^x86$\")\n    enable_language(ASM_MASM)\nendif()\n\nif(\"${VCLIBS_TARGET_ARCHITECTURE}\" STREQUAL \"x86\")\n    set(VCLIBS_TARGET_ARCHITECTURE \"x86\")\n    set(VCLIBS_I386_OR_AMD64 \"i386\")\n    set(VCLIBS_X86_OR_X64 \"x86\")\n\n    # Note that we set _WIN32_WINNT to a high level to make declarations available, but still engage downlevel\n    # runtime dynamic linking by setting our own _STL_WIN32_WINNT back to Windows XP.\n    add_compile_definitions(_X86_ _VCRT_WIN32_WINNT=0x0501 _STL_WIN32_WINNT=0x0501)\nelif(VCLIBS_TARGET_ARCHITECTURE STREQUAL \"x64\")\n    set(VCLIBS_TARGET_ARCHITECTURE \"x64\")\n    set(VCLIBS_I386_OR_AMD64 \"amd64\")\n    set(VCLIBS_X86_OR_X64 \"x64\")\n    add_compile_definitions(_AMD64_ _VCRT_WIN32_WINNT=0x0501 _STL_WIN32_WINNT=0x0501)\nelif(VCLIBS_TARGET_ARCHITECTURE STREQUAL \"armv7\")\n    set(VCLIBS_TARGET_ARCHITECTURE \"arm\")\n    set(VCLIBS_I386_OR_AMD64 \"arm\")\n    set(VCLIBS_X86_OR_X64 \"arm\")\n    add_compile_definitions(_ARM_ _VCRT_WIN32_WINNT=0x0602 _STL_WIN32_WINNT=0x0602)\nelif(VCLIBS_TARGET_ARCHITECTURE STREQUAL \"arm64\")\n    set(VCLIBS_TARGET_ARCHITECTURE \"arm64\")\n    set(VCLIBS_I386_OR_AMD64 \"arm64\")\n    set(VCLIBS_X86_OR_X64 \"arm64\")\n    add_compile_definitions(_ARM64_ _VCRT_WIN32_WINNT=0x0A00 _STL_WIN32_WINNT=0x0A00)\nelif(VCLIBS_TARGET_ARCHITECTURE STREQUAL \"arm64ec\")\n    set(VCLIBS_TARGET_ARCHITECTURE \"arm64ec\")\n    set(VCLIBS_I386_OR_AMD64 \"arm64ec\")\n    set(VCLIBS_X86_OR_X64 \"arm64\") # Yes, really: `%VCToolsInstallDir%lib\\arm64ec` only contains the Link Options\n    add_compile_definitions(_AMD64_ _ARM64EC_ _VCRT_WIN32_WINNT=0x0501 _STL_WIN32_WINNT=0x0501)\n    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:/arm64EC>)\n    set(VCLIBS_EXPLICIT_MACHINE \"/machine:arm64ec\")\nelse()\n    message(FATAL_ERROR \"Could not determine target architecture: VCLIBS_TARGET_ARCHITECTURE: ${VCLIBS_TARGET_ARCHITECTURE}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files List with CMake\nDESCRIPTION: This CMake snippet defines a list of header files using the `set` command. The list includes various header files for the Microsoft STL library, specifying their paths relative to `CMAKE_CURRENT_LIST_DIR`. This list is later used to copy the header files to the build output directory.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(HEADERS\n    ${CMAKE_CURRENT_LIST_DIR}/inc/__msvc_all_public_headers.hpp\n    ${CMAKE_CURRENT_LIST_DIR}/inc/__msvc_bit_utils.hpp\n    ${CMAKE_CURRENT_LIST_DIR}/inc/__msvc_chrono.hpp\n    ${CMAKE_CURRENT_LIST_DIR}/inc/__msvc_cxx_stdatomic.hpp\n    ${CMAKE_CURRENT_LIST_DIR}/inc/__msvc_filebuf.hpp\n    ${CMAKE_CURRENT_LIST_DIR}/inc/__msvc_format_ucd_tables.hpp\n    ${CMAKE_CURRENT_LIST_DIR}/inc/__msvc_formatter.hpp\n    ${CMAKE_CURRENT_LIST_DIR}/inc/__msvc_heap_algorithms.hpp\n    ${CMAKE_CURRENT_LIST_DIR}/inc/__msvc_int128.hpp\n    ${CMAKE_CURRENT_LIST_DIR}/inc/__msvc_iter_core.hpp\n    ${CMAKE_CURRENT_LIST_DIR}/inc/__msvc_minmax.hpp\n    ${CMAKE_CURRENT_LIST_DIR}/inc/__msvc_ostream.hpp\n    ${CMAKE_CURRENT_LIST_DIR}/inc/__msvc_print.hpp\n    ${CMAKE_CURRENT_LIST_DIR}/inc/__msvc_ranges_to.hpp\n    ${CMAKE_CURRENT_LIST_DIR}/inc/__msvc_ranges_tuple_formatter.hpp\n    ${CMAKE_CURRENT_LIST_DIR}/inc/__msvc_sanitizer_annotate_container.hpp\n    ${CMAKE_CURRENT_LIST_DIR}/inc/__msvc_string_view.hpp\n    ${CMAKE_CURRENT_LIST_DIR}/inc/__msvc_system_error_abi.hpp\n    ${CMAKE_CURRENT_LIST_DIR}/inc/__msvc_threads_core.hpp\n    ${CMAKE_CURRENT_LIST_DIR}/inc/__msvc_tzdb.hpp\n    ${CMAKE_CURRENT_LIST_DIR}/inc/__msvc_xlocinfo_types.hpp\n    ${CMAKE_CURRENT_LIST_DIR}/inc/algorithm\n    ${CMAKE_CURRENT_LIST_DIR}/inc/any\n    ${CMAKE_CURRENT_LIST_DIR}/inc/array\n    ${CMAKE_CURRENT_LIST_DIR}/inc/atomic\n    ${CMAKE_CURRENT_LIST_DIR}/inc/barrier\n    ${CMAKE_CURRENT_LIST_DIR}/inc/bit\n    ${CMAKE_CURRENT_LIST_DIR}/inc/bitset\n    ${CMAKE_CURRENT_LIST_DIR}/inc/cassert\n    ${CMAKE_CURRENT_LIST_DIR}/inc/ccomplex\n    ${CMAKE_CURRENT_LIST_DIR}/inc/cctype\n    ${CMAKE_CURRENT_LIST_DIR}/inc/cerrno\n    ${CMAKE_CURRENT_LIST_DIR}/inc/cfenv\n    ${CMAKE_CURRENT_LIST_DIR}/inc/cfloat\n    ${CMAKE_CURRENT_LIST_DIR}/inc/charconv\n    ${CMAKE_CURRENT_LIST_DIR}/inc/chrono\n    ${CMAKE_CURRENT_LIST_DIR}/inc/cinttypes\n    ${CMAKE_CURRENT_LIST_DIR}/inc/ciso646\n    ${CMAKE_CURRENT_LIST_DIR}/inc/climits\n    ${CMAKE_CURRENT_LIST_DIR}/inc/clocale\n    ${CMAKE_CURRENT_LIST_DIR}/inc/cmath\n    ${CMAKE_CURRENT_LIST_DIR}/inc/codecvt\n    ${CMAKE_CURRENT_LIST_DIR}/inc/compare\n    ${CMAKE_CURRENT_LIST_DIR}/inc/complex\n    ${CMAKE_CURRENT_LIST_DIR}/inc/concepts\n    ${CMAKE_CURRENT_LIST_DIR}/inc/condition_variable\n    ${CMAKE_CURRENT_LIST_DIR}/inc/coroutine\n    ${CMAKE_CURRENT_LIST_DIR}/inc/csetjmp\n    ${CMAKE_CURRENT_LIST_DIR}/inc/csignal\n    ${CMAKE_CURRENT_LIST_DIR}/inc/cstdalign\n    ${CMAKE_CURRENT_LIST_DIR}/inc/cstdarg\n    ${CMAKE_CURRENT_LIST_DIR}/inc/cstdbool\n    ${CMAKE_CURRENT_LIST_DIR}/inc/cstddef\n    ${CMAKE_CURRENT_LIST_DIR}/inc/cstdint\n    ${CMAKE_CURRENT_LIST_DIR}/inc/cstdio\n    ${CMAKE_CURRENT_LIST_DIR}/inc/cstdlib\n    ${CMAKE_CURRENT_LIST_DIR}/inc/cstring\n    ${CMAKE_CURRENT_LIST_DIR}/inc/ctgmath\n    ${CMAKE_CURRENT_LIST_DIR}/inc/ctime\n    ${CMAKE_CURRENT_LIST_DIR}/inc/cuchar\n    ${CMAKE_CURRENT_LIST_DIR}/inc/cwchar\n    ${CMAKE_CURRENT_LIST_DIR}/inc/cwctype\n    ${CMAKE_CURRENT_LIST_DIR}/inc/deque\n    ${CMAKE_CURRENT_LIST_DIR}/inc/exception\n    ${CMAKE_CURRENT_LIST_DIR}/inc/execution\n    ${CMAKE_CURRENT_LIST_DIR}/inc/expected\n    ${CMAKE_CURRENT_LIST_DIR}/inc/experimental/coroutine\n    ${CMAKE_CURRENT_LIST_DIR}/inc/experimental/filesystem\n    ${CMAKE_CURRENT_LIST_DIR}/inc/experimental/generator\n    ${CMAKE_CURRENT_LIST_DIR}/inc/experimental/resumable\n    ${CMAKE_CURRENT_LIST_DIR}/inc/filesystem\n    ${CMAKE_CURRENT_LIST_DIR}/inc/format\n    ${CMAKE_CURRENT_LIST_DIR}/inc/forward_list\n    ${CMAKE_CURRENT_LIST_DIR}/inc/fstream\n    ${CMAKE_CURRENT_LIST_DIR}/inc/functional\n    ${CMAKE_CURRENT_LIST_DIR}/inc/future\n    ${CMAKE_CURRENT_LIST_DIR}/inc/generator\n    ${CMAKE_CURRENT_LIST_DIR}/inc/hash_map\n    ${CMAKE_CURRENT_LIST_DIR}/inc/hash_set\n    ${CMAKE_CURRENT_LIST_DIR}/inc/header-units.json\n    ${CMAKE_CURRENT_LIST_DIR}/inc/initializer_list\n    ${CMAKE_CURRENT_LIST_DIR}/inc/iomanip\n    ${CMAKE_CURRENT_LIST_DIR}/inc/ios\n    ${CMAKE_CURRENT_LIST_DIR}/inc/iosfwd\n    ${CMAKE_CURRENT_LIST_DIR}/inc/iostream\n    ${CMAKE_CURRENT_LIST_DIR}/inc/iso646.h\n    ${CMAKE_CURRENT_LIST_DIR}/inc/istream\n    ${CMAKE_CURRENT_LIST_DIR}/inc/iterator\n    ${CMAKE_CURRENT_LIST_DIR}/inc/latch\n    ${CMAKE_CURRENT_LIST_DIR}/inc/limits\n    ${CMAKE_CURRENT_LIST_DIR}/inc/list\n    ${CMAKE_CURRENT_LIST_DIR}/inc/locale\n    ${CMAKE_CURRENT_LIST_DIR}/inc/map\n    ${CMAKE_CURRENT_LIST_DIR}/inc/mdspan\n    ${CMAKE_CURRENT_LIST_DIR}/inc/memory\n    ${CMAKE_CURRENT_LIST_DIR}/inc/memory_resource\n    ${CMAKE_CURRENT_LIST_DIR}/inc/mutex\n    ${CMAKE_CURRENT_LIST_DIR}/inc/new\n    ${CMAKE_CURRENT_LIST_DIR}/inc/numbers\n    ${CMAKE_CURRENT_LIST_DIR}/inc/numeric\n    ${CMAKE_CURRENT_LIST_DIR}/inc/optional\n    ${CMAKE_CURRENT_LIST_DIR}/inc/ostream\n    ${CMAKE_CURRENT_LIST_DIR}/inc/print\n    ${CMAKE_CURRENT_LIST_DIR}/inc/queue\n    ${CMAKE_CURRENT_LIST_DIR}/inc/random\n    ${CMAKE_CURRENT_LIST_DIR}/inc/ranges\n    ${CMAKE_CURRENT_LIST_DIR}/inc/ratio\n    ${CMAKE_CURRENT_LIST_DIR}/inc/regex\n    ${CMAKE_CURRENT_LIST_DIR}/inc/scoped_allocator\n    ${CMAKE_CURRENT_LIST_DIR}/inc/semaphore\n    ${CMAKE_CURRENT_LIST_DIR}/inc/set\n    ${CMAKE_CURRENT_LIST_DIR}/inc/shared_mutex\n    ${CMAKE_CURRENT_LIST_DIR}/inc/source_location\n    ${CMAKE_CURRENT_LIST_DIR}/inc/span\n    ${CMAKE_CURRENT_LIST_DIR}/inc/spanstream\n    ${CMAKE_CURRENT_LIST_DIR}/inc/sstream\n    ${CMAKE_CURRENT_LIST_DIR}/inc/stack\n    ${CMAKE_CURRENT_LIST_DIR}/inc/stacktrace\n    ${CMAKE_CURRENT_LIST_DIR}/inc/stdexcept\n    ${CMAKE_CURRENT_LIST_DIR}/inc/stdfloat\n    ${CMAKE_CURRENT_LIST_DIR}/inc/stop_token\n    ${CMAKE_CURRENT_LIST_DIR}/inc/streambuf\n    ${CMAKE_CURRENT_LIST_DIR}/inc/string\n    ${CMAKE_CURRENT_LIST_DIR}/inc/string_view\n    ${CMAKE_CURRENT_LIST_DIR}/inc/strstream\n    ${CMAKE_CURRENT_LIST_DIR}/inc/syncstream\n    ${CMAKE_CURRENT_LIST_DIR}/inc/system_error\n    ${CMAKE_CURRENT_LIST_DIR}/inc/thread\n    ${CMAKE_CURRENT_LIST_DIR}/inc/tuple\n    ${CMAKE_CURRENT_LIST_DIR}/inc/type_traits\n    ${CMAKE_CURRENT_LIST_DIR}/inc/typeindex\n    ${CMAKE_CURRENT_LIST_DIR}/inc/typeinfo\n    ${CMAKE_CURRENT_LIST_DIR}/inc/unordered_map\n    ${CMAKE_CURRENT_LIST_DIR}/inc/unordered_set\n    ${CMAKE_CURRENT_LIST_DIR}/inc/use_ansi.h\n    ${CMAKE_CURRENT_LIST_DIR}/inc/utility\n    ${CMAKE_CURRENT_LIST_DIR}/inc/valarray\n    ${CMAKE_CURRENT_LIST_DIR}/inc/variant\n    ${CMAKE_CURRENT_LIST_DIR}/inc/vector\n    ${CMAKE_CURRENT_LIST_DIR}/inc/version\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xatomic.h\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xatomic_wait.h\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xbit_ops.h\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xcall_once.h\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xcharconv.h\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xcharconv_ryu.h\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xcharconv_ryu_tables.h\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xcharconv_tables.h\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xerrc.h\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xfacet\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xfilesystem_abi.h\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xhash\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xiosbase\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xkeycheck.h\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xlocale\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xlocbuf\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xlocinfo\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xlocmes\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xlocmon\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xlocnum\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xloctime\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xmemory\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xnode_handle.h\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xpolymorphic_allocator.h\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xsmf_control.h\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xstring\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xthreads.h\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xtimec.h\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xtr1common\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xtree\n    ${CMAKE_CURRENT_LIST_DIR}/inc/xutility\n    ${CMAKE_CURRENT_LIST_DIR}/inc/ymath.h\n    ${CMAKE_CURRENT_LIST_DIR}/inc/yvals.h\n    ${CMAKE_CURRENT_LIST_DIR}/inc/yvals_core.h\n)\n```\n\n----------------------------------------\n\nTITLE: Check DLL Dependencies\nDESCRIPTION: This command uses `dumpbin` to list the dependencies of the executable and then filters the output to find the STL DLL dependency.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\ndumpbin /DEPENDENTS .\\example.exe | findstr msvcp\n```\n\n----------------------------------------\n\nTITLE: Finding Clang-Format Executable with CMake\nDESCRIPTION: This snippet uses CMake's `find_program` command to locate the `clang-format` executable. It specifies possible locations and requires the program to be found. It also sets a documentation string for the variable.\nSOURCE: https://github.com/microsoft/stl/blob/main/tools/format/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_program(CLANG_FORMAT\n    NAMES clang-format\n    HINTS \"$ENV{VCINSTALLDIR}/Tools/Llvm/x64/bin\"\n    DOC \"The clang-format program to use\"\n    REQUIRED\n)\n```\n\n----------------------------------------\n\nTITLE: Defining STL Static Libraries in CMake\nDESCRIPTION: This CMake function `add_stl_statics` creates static library targets for the Microsoft STL library. It defines compile definitions and options, links libraries, and sets target properties.  The function takes a flavor suffix (FLAVOR_SUFFIX), release/debug flag (REL_OR_DBG), and iterator debug level (IDL_VALUE) as input.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(add_stl_statics FLAVOR_SUFFIX REL_OR_DBG IDL_VALUE)\n    add_library(libcpmt${FLAVOR_SUFFIX}_eha OBJECT ${EHA_SOURCES})\n    target_compile_definitions(libcpmt${FLAVOR_SUFFIX}_eha PRIVATE _ANNOTATE_STL \"_ITERATOR_DEBUG_LEVEL=${IDL_VALUE}\")\n    target_compile_options(libcpmt${FLAVOR_SUFFIX}_eha PRIVATE /EHa)\n    target_stl_compile_options(libcpmt${FLAVOR_SUFFIX}_eha ${REL_OR_DBG})\n\n    add_library(libcpmt${FLAVOR_SUFFIX} STATIC ${HEADERS} ${IMPLIB_SOURCES} ${SOURCES} ${INITIALIZER_SOURCES} ${STATIC_SOURCES})\n    target_compile_definitions(libcpmt${FLAVOR_SUFFIX} PRIVATE _ANNOTATE_STL \"_ITERATOR_DEBUG_LEVEL=${IDL_VALUE}\")\n    target_compile_options(libcpmt${FLAVOR_SUFFIX} PRIVATE \"$<$<COMPILE_LANGUAGE:CXX>:/EHsc>\")\n    target_link_libraries(libcpmt${FLAVOR_SUFFIX} PRIVATE Boost::math stl_alias_objects libcpmt${FLAVOR_SUFFIX}_eha)\n    target_stl_compile_options(libcpmt${FLAVOR_SUFFIX} ${REL_OR_DBG})\n    set_target_properties(libcpmt${FLAVOR_SUFFIX} PROPERTIES STATIC_LIBRARY_OPTIONS \"${VCLIBS_EXPLICIT_MACHINE}\")\nendfunction()\n\nadd_stl_statics(\"\" Release 0)\nadd_stl_statics(\"1\" Release 1)\nadd_stl_statics(\"d\" Debug 2)\nadd_stl_statics(\"d1\" Debug 1)\nadd_stl_statics(\"d0\" Debug 0)\n```\n\n----------------------------------------\n\nTITLE: Defining STL DLLs in CMake\nDESCRIPTION: This CMake function `add_stl_dlls` creates DLL targets for the Microsoft STL library. It sets dependencies on other library targets and configures target properties such as linker options and output names. The function takes a suffix (D_SUFFIX) and a configuration (Release or Debug) as input.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(add_stl_dlls D_SUFFIX REL_OR_DBG)\n    add_library(msvcp${D_SUFFIX}_implib STATIC ${HEADERS})\n    target_link_libraries(msvcp${D_SUFFIX}_implib stl_alias_objects msvcp${D_SUFFIX}_implib_objects)\n    add_dependencies(msvcp${D_SUFFIX}_implib msvcp${D_SUFFIX} msvcp_1${D_SUFFIX} msvcp_2${D_SUFFIX} msvcp${D_SUFFIX}_atomic_wait msvcp${D_SUFFIX}_codecvt_ids)\n    set_target_properties(msvcp${D_SUFFIX}_implib PROPERTIES STATIC_LIBRARY_OPTIONS \"/NOLOGO;/NODEFAULTLIB;/IGNORE:4006;$<TARGET_LINKER_FILE:msvcp${D_SUFFIX}>;$<TARGET_LINKER_FILE:msvcp_1${D_SUFFIX}>;$<TARGET_LINKER_FILE:msvcp_2${D_SUFFIX}>;$<TARGET_LINKER_FILE:msvcp${D_SUFFIX}_codecvt_ids>;$<TARGET_LINKER_FILE:msvcp${D_SUFFIX}_atomic_wait>;${VCLIBS_EXPLICIT_MACHINE}\")\n    set_target_properties(msvcp${D_SUFFIX}_implib PROPERTIES ARCHIVE_OUTPUT_NAME \"msvcprt${D_SUFFIX}\")\nendfunction()\n\nadd_stl_dlls(\"\" Release)\nadd_stl_dlls(\"d\" Debug)\n```\n\n----------------------------------------\n\nTITLE: Generating Satellite DLL .def Files\nDESCRIPTION: This function `generate_satellite_def` creates a .def file for a satellite DLL. It reads a template .src file, replaces a placeholder with the actual satellite DLL name, and generates the .def file in the binary directory. The `CMAKE_CONFIGURE_DEPENDS` property is updated to track the dependency on the .src file.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(generate_satellite_def SATELLITE_NAME D_SUFFIX)\n    set(full_satellite_name \"msvcp140${D_SUFFIX}_${SATELLITE_NAME}${VCLIBS_SUFFIX}\")\n    string(TOUPPER \"${full_satellite_name}\" upper_full_satellite_name)\n    set(satellite_input_src_file_path \"${CMAKE_CURRENT_LIST_DIR}/src/msvcp_${SATELLITE_NAME}.src\")\n    set(satellite_output_def_file_path \"${CMAKE_BINARY_DIR}/msvcp_${SATELLITE_NAME}${D_SUFFIX}.def\")\n    set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS \"${satellite_input_src_file_path}\")\n\n    # We use the placeholder name \"LIBRARYNAME\" in the corresponding .src file of a satellite DLL\n    # (i.e., we write \"LIBRARY LIBRARYNAME\" as the first non-commented line in the file).\n    #\n    # Here, we dynamically replace this placeholder name with the name of the satellite DLL for\n    # the current build configuration. Then, we write out the new .def file to the binary output\n    # directory.\n    file(READ \"${satellite_input_src_file_path}\" satellite_def_file_contents)\n    string(REPLACE \"LIBRARYNAME\" \"${upper_full_satellite_name}\" satellite_def_file_contents \"${satellite_def_file_contents}\")\n    file(GENERATE OUTPUT \"${satellite_output_def_file_path}\" CONTENT \"${satellite_def_file_contents}\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Finding Python and Setting LIT Flags CMake\nDESCRIPTION: This snippet uses `find_package` to locate the Python 3.13 interpreter. It then defines the LIT_FLAGS variable, setting the output path for test results. Finally, it constructs the STL_LIT_COMMAND using the found Python executable and flags for running the LLVM Integrated Tester (LIT).\nSOURCE: https://github.com/microsoft/stl/blob/main/tests/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Python \"3.13\" REQUIRED COMPONENTS Interpreter)\n\nif(NOT DEFINED LIT_FLAGS)\n    set(LIT_FLAGS \"-o\" \"${CMAKE_CURRENT_BINARY_DIR}/test_results.json\")\nendif()\n\nset(STL_LIT_COMMAND ${Python_EXECUTABLE} ${STL_LIT_OUTPUT} ${LIT_FLAGS})\nget_property(STL_LIT_TEST_DIRS GLOBAL PROPERTY STL_LIT_TEST_DIRS)\n```\n\n----------------------------------------\n\nTITLE: Setting STL Binary Directory\nDESCRIPTION: This block checks if the `STL_BINARY_DIR` variable is defined. If it is, it validates the path and sets up include and link directories for the STL library. If not, it prints a warning.\nSOURCE: https://github.com/microsoft/stl/blob/main/benchmarks/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(DEFINED STL_BINARY_DIR)\n    cmake_path(ABSOLUTE_PATH STL_BINARY_DIR\n        BASE_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/..\"\n        NORMALIZE\n    )\n    if(NOT EXISTS \"${STL_BINARY_DIR}/out\")\n        message(FATAL_ERROR \"Invalid STL_BINARY_DIR '${STL_BINARY_DIR}'\")\n    endif()\n\n    if(NOT DEFINED VCLIBS_TARGET_ARCHITECTURE)\n        set(VCLIBS_TARGET_ARCHITECTURE \"${CMAKE_CXX_COMPILER_ARCHITECTURE_ID}\")\n    endif()\n\n    string(TOLOWER \"${VCLIBS_TARGET_ARCHITECTURE}\" VCLIBS_TARGET_ARCHITECTURE)\n\n    if(\"${VCLIBS_TARGET_ARCHITECTURE}\" STREQUAL \"x86\")\n        set(VCLIBS_I386_OR_AMD64 \"i386\")\n    elseif(VCLIBS_TARGET_ARCHITECTURE STREQUAL \"x64\")\n        set(VCLIBS_I386_OR_AMD64 \"amd64\")\n    elseif(VCLIBS_TARGET_ARCHITECTURE STREQUAL \"armv7\")\n        set(VCLIBS_I386_OR_AMD64 \"arm\")\n    elseif(VCLIBS_TARGET_ARCHITECTURE STREQUAL \"arm64\")\n        set(VCLIBS_I386_OR_AMD64 \"arm64\")\n    else()\n        message(FATAL_ERROR \"Could not determine target architecture: VCLIBS_TARGET_ARCHITECTURE: ${VCLIBS_TARGET_ARCHITECTURE}\")\n    endif()\n\n    include_directories(BEFORE \"${STL_BINARY_DIR}/out/inc\")\n    link_directories(BEFORE \"${STL_BINARY_DIR}/out/lib/${VCLIBS_I386_OR_AMD64}\")\nelse()\n    message(WARNING \"STL_BINARY_DIR not set; benchmarking the globally installed standard library\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties\nDESCRIPTION: This snippet sets various properties for the 'validate-binary' target, including the C++ standard version (23), disabling C++ extensions, requiring the specified C++ standard, and statically linking the standard library with different configurations for Debug and Release builds.\nSOURCE: https://github.com/microsoft/stl/blob/main/tools/validate/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(validate-binary\n    PROPERTIES\n        CXX_STANDARD 23\n        CXX_EXTENSIONS OFF\n        CXX_STANDARD_REQUIRED ON\n        # statically link the standard library\n        MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Set STL Test Suite Variables with CMake\nDESCRIPTION: This snippet sets the variables required for configuring the STL test suite. It defines the locations of the expected results file and the test output directory.\nSOURCE: https://github.com/microsoft/stl/blob/main/tests/std/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(STD_EXPECTED_RESULTS \"${CMAKE_CURRENT_SOURCE_DIR}/expected_results.txt\")\nset(STD_TEST_OUTPUT_DIR \"${STL_TEST_OUTPUT_DIR}/std\")\n```\n\n----------------------------------------\n\nTITLE: Set Environment Variables for libc++ Tests (CMake)\nDESCRIPTION: This snippet sets environment variables required for the libc++ tests. Specifically, it defines the locations for the usual matrix list, expected results, and test output directory.\nSOURCE: https://github.com/microsoft/stl/blob/main/tests/libcxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIBCXX_ENVLST \"${CMAKE_CURRENT_SOURCE_DIR}/usual_matrix.lst\")\nset(LIBCXX_EXPECTED_RESULTS \"${CMAKE_CURRENT_SOURCE_DIR}/expected_results.txt\")\nset(LIBCXX_TEST_OUTPUT_DIR \"${STL_TEST_OUTPUT_DIR}/libcxx\")\n```\n\n----------------------------------------\n\nTITLE: Compiler Version Check\nDESCRIPTION: This snippet checks the C++ compiler version to ensure it meets the minimum required version (VS 2022 17.4 Preview 3 or later). If the compiler version is less than the required version, it generates a fatal error.\nSOURCE: https://github.com/microsoft/stl/blob/main/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"19.44.35109.1\")\n    message(FATAL_ERROR \"The STL must be built with VS 2022 17.14 Preview 3 or later.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Build Type to Release\nDESCRIPTION: Sets the CMake build type to Release. This optimizes the benchmarks with `/O2 /Ob2` compiler flags. Additional compiler flags for debugging are added to allow profiling.\nSOURCE: https://github.com/microsoft/stl/blob/main/benchmarks/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_BUILD_TYPE Release)\n```\n\n----------------------------------------\n\nTITLE: Adding Specific Benchmarks\nDESCRIPTION: Calls the `add_benchmark` function for each benchmark, specifying the source file for each. This creates the executables for each individual benchmark.\nSOURCE: https://github.com/microsoft/stl/blob/main/benchmarks/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_benchmark(adjacent_difference src/adjacent_difference.cpp)\nadd_benchmark(adjacent_find src/adjacent_find.cpp)\nadd_benchmark(bitset_from_string src/bitset_from_string.cpp)\nadd_benchmark(bitset_to_string src/bitset_to_string.cpp)\nadd_benchmark(efficient_nonlocking_print src/efficient_nonlocking_print.cpp)\nadd_benchmark(filesystem src/filesystem.cpp)\nadd_benchmark(fill src/fill.cpp)\nadd_benchmark(find_and_count src/find_and_count.cpp)\nadd_benchmark(find_first_of src/find_first_of.cpp)\nadd_benchmark(has_single_bit src/has_single_bit.cpp)\nadd_benchmark(iota src/iota.cpp)\nadd_benchmark(is_sorted_until src/is_sorted_until.cpp)\nadd_benchmark(locale_classic src/locale_classic.cpp)\nadd_benchmark(minmax_element src/minmax_element.cpp)\nadd_benchmark(mismatch src/mismatch.cpp)\nadd_benchmark(move_only_function src/move_only_function.cpp)\nadd_benchmark(nth_element src/nth_element.cpp)\nadd_benchmark(path_lexically_normal src/path_lexically_normal.cpp)\nadd_benchmark(priority_queue_push_range src/priority_queue_push_range.cpp)\nadd_benchmark(random_integer_generation src/random_integer_generation.cpp)\nadd_benchmark(remove src/remove.cpp)\nadd_benchmark(replace src/replace.cpp)\nadd_benchmark(search src/search.cpp)\nadd_benchmark(search_n src/search_n.cpp)\nadd_benchmark(std_copy src/std_copy.cpp)\nadd_benchmark(sv_equal src/sv_equal.cpp)\nadd_benchmark(swap_ranges src/swap_ranges.cpp)\nadd_benchmark(unique src/unique.cpp)\nadd_benchmark(vector_bool_copy src/vector_bool_copy.cpp)\nadd_benchmark(vector_bool_copy_n src/vector_bool_copy_n.cpp)\nadd_benchmark(vector_bool_move src/vector_bool_move.cpp)\n```\n\n----------------------------------------\n\nTITLE: Building the STL with ASan\nDESCRIPTION: These commands build the STL with Address Sanitizer (ASan) enabled. The `-DSTL_ASAN_BUILD=ON` CMake option enables ASan instrumentation during the build process. This requires an ASan-compatible compiler and linker.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\ncmake --preset x64 -DSTL_ASAN_BUILD=ON\ncmake --build --preset x64\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Files\nDESCRIPTION: This CMake code configures environment files using `configure_file`. These files are generated from template files and placed in the project binary directory.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(set_environment.bat.in \"${PROJECT_BINARY_DIR}/set_environment.bat\" @ONLY)\nconfigure_file(set_environment.ps1.in \"${PROJECT_BINARY_DIR}/set_environment.ps1\" @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Implementation Library\nDESCRIPTION: This CMake snippet defines a list of C++ source files intended for the implementation library (libcpmt[d][01].lib and msvcprt[d].lib). These files contain core functionalities like character conversion, filesystem operations, and formatting utilities.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(IMPLIB_SOURCES\n    ${CMAKE_CURRENT_LIST_DIR}/src/asan_noop.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/charconv.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/filesystem.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/format.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/locale0_implib.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/nothrow.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/print.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/sharedmutex.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/stacktrace.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/syserror_import_lib.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/vector_algorithms.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xcharconv_ryu_tables.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xcharconv_tables_double.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xcharconv_tables_float.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xonce2.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Toolset Options\nDESCRIPTION: This CMake snippet configures various toolset options, including C++ compiler flags, standard libraries, and linker flags for both static and shared libraries. It also defines output directories for archives, libraries, and runtime executables.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_CXX_FLAGS \"\")\nset(CMAKE_CXX_FLAGS_DEBUG \"\")\nset(CMAKE_CXX_FLAGS_RELEASE \"\")\nset(CMAKE_CXX_STANDARD_LIBRARIES \"kernel32.lib\")\nset(CMAKE_CXX_STANDARD_LIBRARIES_INIT \"kernel32.lib\")\nset(CMAKE_MSVC_RUNTIME_LIBRARY \"\")\n\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${STL_ARCHIVE_OUTPUT_DIRECTORY}\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${STL_LIBRARY_OUTPUT_DIRECTORY}\")\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${STL_RUNTIME_OUTPUT_DIRECTORY}\")\n\nset(CMAKE_STATIC_LINKER_FLAGS \"/WX\")\nset(CMAKE_STATIC_LINKER_FLAGS_DEBUG \"\")\nset(CMAKE_STATIC_LINKER_FLAGS_RELEASE \"\")\nset(CMAKE_SHARED_LINKER_FLAGS \"/DEBUG:FULL /WX /RELEASE /SUBSYSTEM:Console /NODEFAULTLIB /INCREMENTAL:NO /MANIFEST:NO /DLL /profile /guard:cf /DEBUGTYPE:cv,fixup /LARGEADDRESSAWARE\")\nset(CMAKE_SHARED_LINKER_FLAGS_DEBUG \"\")\nset(CMAKE_SHARED_LINKER_FLAGS_RELEASE \"\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Targets for Testing CMake\nDESCRIPTION: This snippet defines several custom targets for running tests using the LLVM Integrated Tester (LIT). Each target executes a different variation of the LIT command with specific flags to control which tests are run and how the results are reported.  They are intended to be used for Continuous Integration (CI).\nSOURCE: https://github.com/microsoft/stl/blob/main/tests/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(STL-CI COMMAND ${STL_LIT_COMMAND} -Dnotags=ASAN ${STL_LIT_TEST_DIRS} USES_TERMINAL)\nadd_custom_target(STL-ASan-CI COMMAND ${STL_LIT_COMMAND} -Dtags=ASAN ${STL_LIT_TEST_DIRS} USES_TERMINAL)\nadd_custom_target(test-only-edg COMMAND ${STL_LIT_COMMAND} -Dnotags=ASAN -Dtest-only-edg=True --xunit-xml-output test-results.xml ${STL_LIT_TEST_DIRS} USES_TERMINAL)\n```\n\n----------------------------------------\n\nTITLE: Adding Link Options\nDESCRIPTION: Adds a link option to include debug information in the generated binaries, which is useful for profiling.\nSOURCE: https://github.com/microsoft/stl/blob/main/benchmarks/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_link_options(\"/DEBUG\")\n```\n\n----------------------------------------\n\nTITLE: Finding Files for Clang-Format with CMake GLOB_RECURSE\nDESCRIPTION: This snippet uses CMake's `file(GLOB_RECURSE)` command to find all potentially formatable files within specified directories. The list is then filtered to include only the file types the project supports and excludes hidden files.\nSOURCE: https://github.com/microsoft/stl/blob/main/tools/format/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB_RECURSE maybe_clang_format_files\n    \"../../benchmarks/inc/*\"\n    \"../../benchmarks/src/*\"\n    \"../../stl/inc/*\"\n    \"../../stl/modules/*\"\n    \"../../stl/src/*\"\n    \"../../tests/*\"\n    \"../../tools/*\"\n)\nset(clang_format_files \"\")\n\nforeach(maybe_file IN LISTS maybe_clang_format_files)\n    cmake_path(GET maybe_file FILENAME filename)\n    cmake_path(GET maybe_file EXTENSION LAST_ONLY extension)\n\n    if(extension MATCHES [[^(|\\.cpp|\\.h|\\.hpp|\\.ixx)$]] AND NOT filename MATCHES [[^\\.]])\n        list(APPEND clang_format_files \"${maybe_file}\")\n    endif()\nendforeach()\n\nif(NOT clang_format_files)\n    message(FATAL_ERROR \"Could not find any files to clang-format!\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking Windows SDK Version\nDESCRIPTION: This snippet checks if the Windows SDK version is compatible. It compiles a source code snippet that includes `<sdkddkver.h>` and uses `static_assert` to ensure that `WDK_NTDDI_VERSION` is greater than or equal to `NTDDI_WIN10_NI`. If the check fails, it generates a fatal error message instructing the user to install the Windows 11 SDK.\nSOURCE: https://github.com/microsoft/stl/blob/main/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckCXXSourceCompiles)\ncheck_cxx_source_compiles([=[ \n#include <sdkddkver.h>\nstatic_assert(WDK_NTDDI_VERSION >= NTDDI_WIN10_NI, \"Inspecting WDK_NTDDI_VERSION, the Windows SDK version.\");\nint main() {}\n]=] WINDOWS_SDK_VERSION_CHECK)\n\nif(NOT WINDOWS_SDK_VERSION_CHECK)\n    message(FATAL_ERROR \"The STL must be built with the Windows 11 SDK (10.0.22621.0) or later. Make sure it's available by selecting it in the Individual Components tab of the VS Installer.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running STL tests with stl-lit.py\nDESCRIPTION: This command runs the STL tests using the stl-lit.py script. The `-v` flag enables verbose output, and the path specifies the location of the test suite.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\npython tests\\utils\\stl-lit\\stl-lit.py -v C:\\Dev\\STL\\tests\\std\\tests\\GH_XXXX_meow\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories CMake\nDESCRIPTION: This snippet uses the `add_subdirectory` command to include the libcxx, std, tr1, and stl-lit subdirectories into the build process. This allows CMake to process the CMakeLists.txt files within those directories and incorporate their targets into the overall build.\nSOURCE: https://github.com/microsoft/stl/blob/main/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(libcxx)\nadd_subdirectory(std)\nadd_subdirectory(tr1)\n\n# Add the stl-lit subdirectory last so all the test directories have had a\n# chance to add to the config map and test directory global properties.\nadd_subdirectory(utils/stl-lit)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories\nDESCRIPTION: This snippet adds subdirectories to the build. It includes `boost-math` and `stl`, which presumably contain the source code for the Boost Math library and the Standard Template Library itself.\nSOURCE: https://github.com/microsoft/stl/blob/main/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(boost-math)\nadd_subdirectory(stl)\n```\n\n----------------------------------------\n\nTITLE: Compiling the Example Program\nDESCRIPTION: This command compiles the example.cpp program using the cl compiler with specific flags for no logo, exception handling, warnings as errors, warning level 4, modern C++ standard, and DLL runtime library.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\ncl /nologo /EHsc /W4 /WX /MDd /std:c++latest .\\example.cpp\n```\n\n----------------------------------------\n\nTITLE: Adding Compile Options\nDESCRIPTION: This CMake snippet adds a series of compile options to the compiler, specifying warning levels, code generation options, language standards, and preprocessor configurations. These options fine-tune the compilation process for both C++ and assembly files.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nadd_compile_options(/nologo /WX /Gy\n    \"$<$<COMPILE_LANGUAGE:CXX>:/diagnostics:caret;/W4;/w14265;/w15038;/fastfail;/guard:cf;/Zp8;/std:c++latest;/permissive-;/Zc:preprocessor;/Zc:threadSafeInit-;/Zl>\"\n    \"$<$<COMPILE_LANGUAGE:ASM_MASM>:/W3;/quiet>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Compile Options\nDESCRIPTION: This function `target_stl_compile_options` sets compile options for a given target (`tgt`) based on whether it's a Release or Debug build. It uses `VCLIBS_RELEASE_OPTIONS` and `VCLIBS_DEBUG_OPTIONS` and defines the `_DEBUG` macro for debug builds.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(target_stl_compile_options tgt rel_or_dbg)\n    if(rel_or_dbg STREQUAL \"Release\")\n        target_compile_options(${tgt} PRIVATE ${VCLIBS_RELEASE_OPTIONS})\n    elseif(rel_or_dbg STREQUAL \"Debug\")\n        target_compile_options(${tgt} PRIVATE ${VCLIBS_DEBUG_OPTIONS})\n        target_compile_definitions(${tgt} PRIVATE \"_DEBUG\")\n    else()\n        message(FATAL_ERROR \"INTERNAL ERROR: unexpected value for rel_or_dbg: '${rel_or_dbg}'\")\n    endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: MSVC Analyze Option\nDESCRIPTION: If the `STL_USE_ANALYZE` option is enabled, this snippet adds the `/analyze` compile option to MSVC and disables warning C6553 to address issues related to SAL annotations in the Windows SDK.\nSOURCE: https://github.com/microsoft/stl/blob/main/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(STL_USE_ANALYZE)\n    # TRANSITION OS-40109504: Windows SDK: incorrect SAL annotations on functions the STL uses\n    # warning C6553: The annotation for function 'LCMapStringEx' on _Param_(9)\n    # does not apply to a value type.\n    # There's a bug in the declaration for LCMapStringEx - it applies _In_opt_ to an LPARAM.\n    # LPARAM is a LONG_PTR (intptr_t), and it's invalid to apply _In_opt_ to a non-pointer.\n    # As of the Windows 11 SDK (10.0.22621.0), there are 5 total occurrences of warning C6553 affecting the STL's build.\n    add_compile_options(\"$<$<COMPILE_LANGUAGE:CXX>:/analyze:autolog-;/wd6553>\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Copying Header Files with CMake\nDESCRIPTION: This CMake snippet iterates through the `HEADERS` list, calculates the relative path of each header file, and then copies the file to the output directory using `configure_file` with the `COPYONLY` option. `file(RELATIVE_PATH)` computes the relative path from the source directory to the header file.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(header ${HEADERS})\n    file(RELATIVE_PATH _header_path \"${CMAKE_CURRENT_LIST_DIR}/inc\" \"${header}\")\n    configure_file(\"${header}\" \"${PROJECT_BINARY_DIR}/out/inc/${_header_path}\" COPYONLY)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Set LIT Configuration Map and Test Directories with CMake\nDESCRIPTION: This snippet sets properties for the global STL LIT configuration map and test directories. It uses the set_property command to append the configuration map and test directories to the global properties.\nSOURCE: https://github.com/microsoft/stl/blob/main/tests/std/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(STD_LIT_CONFIG_MAP \"map_config(\\\"${CMAKE_CURRENT_SOURCE_DIR}/lit.cfg\\\", \\\"${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg\\\")\\n\")\nset_property(GLOBAL APPEND_STRING PROPERTY STL_LIT_CONFIG_MAP ${STD_LIT_CONFIG_MAP})\nset_property(GLOBAL APPEND PROPERTY STL_LIT_TEST_DIRS \"${CMAKE_CURRENT_SOURCE_DIR}/tests\")\n```\n\n----------------------------------------\n\nTITLE: Setting Debug and Release Options\nDESCRIPTION: This snippet sets the compile options for debug and release builds. For debug builds, `/Od` is used. For release builds, `/O2` (optimize for speed) and `/Os` (optimize for size) are used.\nSOURCE: https://github.com/microsoft/stl/blob/main/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(VCLIBS_DEBUG_OPTIONS \"$<$<COMPILE_LANGUAGE:CXX>:/Od>\")\n\n# TRANSITION: Potentially remove `/Os` if it results in speed improvements.\n# This requires benchmarking!\n# Note that in MSVC version 19.32.31328,\n# `/Os` results in a binary size difference of 102K\n# in the release DLL (a gain of 18.4%).\n# So, make certain that that tradeoff is considered when or if `/Os` is removed.\n# See GH-2108 for more info.\nset(VCLIBS_RELEASE_OPTIONS \"$<$<COMPILE_LANGUAGE:CXX>:/O2;/Os>\")\n```\n\n----------------------------------------\n\nTITLE: Compiling a single test with debug symbols (cl)\nDESCRIPTION: This command compiles a single test file using the cl compiler, adding debug symbols. The `/Zi` flag enables debug information, and `/Fdbark.pdb` specifies the name of the PDB file.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_25\n\nLANGUAGE: C++\nCODE:\n```\nC:\\Dev\\STL\\out\\x64>cl \"C:\\Dev\\STL\\tests\\std\\tests\\GH_XXXX_meow\\test.cpp\" [... more arguments ...]\n\"-FeC:\\Dev\\STL\\out\\x64\\tests\\std\\tests\\GH_XXXX_meow\\Output\\02\\GH_XXXX_meow.exe\" /Zi /Fdbark.pdb \"-link\"\n[... more arguments ...]\n```\n\n----------------------------------------\n\nTITLE: Adding STL Alias Objects\nDESCRIPTION: This snippet adds a library named `stl_alias_objects`. It conditionally includes architecture-specific alias sources for x86 and x64, or creates an interface library and appends `Synchronization.lib` for ARM64 and ARM architectures.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nif(VCLIBS_TARGET_ARCHITECTURE MATCHES \"^(x86|x64)$\")\n    add_library(stl_alias_objects OBJECT ${ALIAS_SOURCES_X86_X64})\nelse()\n    add_library(stl_alias_objects INTERFACE)\n\n    # on ARM64 and ARM, we can unconditionally expect Synchronization.lib to exist\n    string(APPEND CMAKE_CXX_STANDARD_LIBRARIES \" Synchronization.lib\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Directories\nDESCRIPTION: This CMake snippet adds include directories for the compiler to search for header files. It includes the local 'inc' directory and the 'vcruntime' directory within the toolset root directory. The BEFORE keyword ensures these directories are searched before the system directories.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(BEFORE\n    \"${CMAKE_CURRENT_LIST_DIR}/inc\"\n    \"${TOOLSET_ROOT_DIR}/crt/src/vcruntime\"\n)\n```\n\n----------------------------------------\n\nTITLE: Copying Module Files with CMake\nDESCRIPTION: This CMake snippet iterates through the `MODULE_FILES` list, computes the relative path of each module file, and then copies the file to the output directory using `configure_file` with the `COPYONLY` option. The `file(RELATIVE_PATH)` command determines the relative path from the modules directory.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(module_file ${MODULE_FILES})\n    file(RELATIVE_PATH _module_file_path \"${CMAKE_CURRENT_LIST_DIR}/modules\" \"${module_file}\")\n    configure_file(\"${module_file}\" \"${PROJECT_BINARY_DIR}/out/modules/${_module_file_path}\" COPYONLY)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directories\nDESCRIPTION: This snippet sets the output directories for archives, libraries, and runtime binaries based on the target architecture. It uses variables like `PROJECT_BINARY_DIR`, `VCLIBS_I386_OR_AMD64` to construct the output paths.\nSOURCE: https://github.com/microsoft/stl/blob/main/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(TOOLSET_LIB \"${TOOLSET_ROOT_DIR}/lib/${VCLIBS_X86_OR_X64}\")\nset(STL_ARCHIVE_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/out/lib/${VCLIBS_I386_OR_AMD64}\")\nset(STL_LIBRARY_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/out/lib/${VCLIBS_I386_OR_AMD64}\")\nset(STL_RUNTIME_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/out/bin/${VCLIBS_I386_OR_AMD64}\")\n```\n\n----------------------------------------\n\nTITLE: Setting MSVC Runtime Library\nDESCRIPTION: Configures the MSVC runtime library to be used for the benchmarks. It allows specifying the desired flavor of the standard library, providing options like MultiThreaded, MultiThreadedDLL, etc.\nSOURCE: https://github.com/microsoft/stl/blob/main/benchmarks/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(STL_BENCHMARK_MSVC_RUNTIME_LIBRARY\n    MultiThreaded\n    CACHE STRING \"The flavor of the standard library to use; see https://cmake.org/cmake/help/latest/variable/CMAKE_MSVC_RUNTIME_LIBRARY.html for more information.\")\nset_property(CACHE STL_BENCHMARK_MSVC_RUNTIME_LIBRARY\n    PROPERTY STRINGS\n    \"MultiThreaded;MultiThreadedDLL;MultiThreadedDebug;MultiThreadedDebugDLL\"\n)\nset(CMAKE_MSVC_RUNTIME_LIBRARY \"${STL_BENCHMARK_MSVC_RUNTIME_LIBRARY}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Compile Definitions\nDESCRIPTION: This snippet adds compile definitions to the project. These definitions include settings for iterator debugging, enabling lean and mean Win32, strict mode, CRT wide specifiers, and setting Windows and NTDDI versions.\nSOURCE: https://github.com/microsoft/stl/blob/main/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_compile_definitions(\n    _ALLOW_ITERATOR_DEBUG_LEVEL_MISMATCH WIN32_LEAN_AND_MEAN STRICT _CRT_STDIO_ARBITRARY_WIDE_SPECIFIERS\n    _WIN32_WINNT=0x0A00 NTDDI_VERSION=NTDDI_WIN10_NI)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Satellite Atomic Wait\nDESCRIPTION: This CMake snippet defines a list of C++ source files for a 'satellite' component related to atomic wait operations, parallel algorithms, synchronization streams, and timezone database functionalities.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES_SATELLITE_ATOMIC_WAIT\n    ${CMAKE_CURRENT_LIST_DIR}/src/atomic_wait.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/parallel_algorithms.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/syncstream.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/tzdb.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Global Properties for lit in CMake\nDESCRIPTION: This snippet sets global properties for `lit` configuration. It appends the TR1-specific configuration map and the directory containing TR1 tests to global CMake properties. This allows lit to discover and run the tests.\nSOURCE: https://github.com/microsoft/stl/blob/main/tests/tr1/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(TR1_LIT_CONFIG_MAP \"map_config(\\\"${CMAKE_CURRENT_SOURCE_DIR}/lit.cfg\\\", \\\"${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg\\\")\\n\")\nset_property(GLOBAL APPEND_STRING PROPERTY STL_LIT_CONFIG_MAP ${TR1_LIT_CONFIG_MAP})\nset_property(GLOBAL APPEND PROPERTY STL_LIT_TEST_DIRS \"${CMAKE_CURRENT_SOURCE_DIR}/tests\")\n```\n\n----------------------------------------\n\nTITLE: Checking Clang-Format Version with CMake\nDESCRIPTION: This snippet executes `clang-format --version` and parses the output to verify the version of clang-format. It checks if the version matches the expected version, and issues a fatal error, warning, or status message accordingly.\nSOURCE: https://github.com/microsoft/stl/blob/main/tools/format/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nexecute_process(\n    COMMAND \"${CLANG_FORMAT}\" --version\n    OUTPUT_VARIABLE clang_format_version\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n)\n\nif(clang_format_version MATCHES \"clang-format version ([0-9]+\\.[0-9]+\\.[0-9]+)\")\n    set(expected_version \"19.1.5\")\n    if(CMAKE_MATCH_1 VERSION_LESS expected_version)\n        message(FATAL_ERROR \"Found clang-format: ${CLANG_FORMAT} (\\\"${CMAKE_MATCH_1}\\\", older than expected version \\\"${expected_version}\\\")\")\n    elseif(CMAKE_MATCH_1 VERSION_EQUAL expected_version)\n        message(STATUS \"Found clang-format: ${CLANG_FORMAT} (found expected version \\\"${CMAKE_MATCH_1}\\\")\")\n    elseif(CMAKE_MATCH_1 VERSION_GREATER expected_version)\n        message(WARNING \"Found clang-format: ${CLANG_FORMAT} (\\\"${CMAKE_MATCH_1}\\\", newer than expected version \\\"${expected_version}\\\")\")\n    endif()\nelse()\n    message(FATAL_ERROR \"Unexpected `clang-format --version` output: '${clang_format_version}'\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Satellite 1\nDESCRIPTION: This CMake snippet defines a list of C++ source files for a 'satellite' component, likely representing a set of functionalities that can be optionally included or built separately. This satellite component focuses on memory resources.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES_SATELLITE_1\n    ${CMAKE_CURRENT_LIST_DIR}/src/memory_resource.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Options\nDESCRIPTION: This snippet sets private compile options for the 'validate-binary' target, including warning level, treating warnings as errors, enabling code analysis, and specifying the preprocessor behavior. These options improve code quality and catch potential issues.\nSOURCE: https://github.com/microsoft/stl/blob/main/tools/validate/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_options(validate-binary PRIVATE /W4 /WX /analyze /Zc:preprocessor)\n```\n\n----------------------------------------\n\nTITLE: Building the STL benchmarks\nDESCRIPTION: These commands build the STL benchmarks using CMake. It configures a separate build directory for the benchmarks and then builds them using Ninja. The `STL_BINARY_DIR` variable tells the benchmark build where to find the built STL libraries.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\ncmake --preset x64\ncmake --build --preset x64\ncmake -B out\\bench -S benchmarks -G Ninja -DSTL_BINARY_DIR=out\\x64\ncmake --build out\\bench\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for DLL\nDESCRIPTION: This CMake snippet defines a list of C++ source files that are linked into the msvcp140[d][_clr].dll. These files typically contain entry points and initialization routines for the DLL.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(DLL_SOURCES\n    ${CMAKE_CURRENT_LIST_DIR}/src/dllmain.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/instances.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Running tests with filter-out\nDESCRIPTION: This command executes tests, filtering out certain tests that match a regular expression using the stl-lit.py test runner. It specifies the directories containing the test suites and filters tests by name.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\npython tests\\utils\\stl-lit\\stl-lit.py ..\\..\\llvm-project\\libcxx\\test ..\\..\\tests\\std --filter=iota --filter-out=view\n```\n\n----------------------------------------\n\nTITLE: Adding Google Benchmark Subdirectory\nDESCRIPTION: Adds the Google Benchmark library as a subdirectory to the project. It checks if the Google Benchmark repository is properly initialized and sets some configuration options for the benchmark build.\nSOURCE: https://github.com/microsoft/stl/blob/main/benchmarks/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT EXISTS \"${CMAKE_CURRENT_LIST_DIR}/google-benchmark/.git\")\n    message(FATAL_ERROR \"google-benchmark is not checked out; make sure to run\\n    git submodule update --init benchmarks/google-benchmark\")\nendif()\n\nset(BENCHMARK_ENABLE_DOXYGEN OFF)\nset(BENCHMARK_ENABLE_INSTALL OFF)\nset(BENCHMARK_ENABLE_TESTING OFF)\n\nadd_subdirectory(google-benchmark EXCLUDE_FROM_ALL)\n```\n\n----------------------------------------\n\nTITLE: Configuring lit for TR1 Tests with CMake\nDESCRIPTION: This snippet configures the `lit` testing tool for TR1 tests. It uses `configure_file` to generate a `lit.site.cfg` file from a template and defines a CMake variable to map the configuration.\nSOURCE: https://github.com/microsoft/stl/blob/main/tests/tr1/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in\n  ${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Execution\nDESCRIPTION: This snippet adds a custom target named 'run-validate' that executes the 'validate-binary' program. It specifies the command to run and the working directory where the command should be executed, pointing to the root directory of the project.\nSOURCE: https://github.com/microsoft/stl/blob/main/tools/validate/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(run-validate\n    COMMAND validate-binary\n    WORKING_DIRECTORY \"${CMAKE_CURRENT_LIST_DIR}/../../..\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running tests with ASan enabled\nDESCRIPTION: This command runs the STL tests with the ASan tag, ensuring that only ASan-instrumented tests are executed. The `-Dtags=ASAN` flag filters the test suite to include only tests tagged with ASAN.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\npython tests\\utils\\stl-lit\\stl-lit.py ..\\..\\tests\\std\\tests\\VSO_0000000_vector_algorithms -Dtags=ASAN -v\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for EHA\nDESCRIPTION: This CMake snippet defines a list of C++ source files specifically for the Exception Handling Assistant (EHA), a tool likely used for managing and assisting with exception handling.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(EHA_SOURCES\n    ${CMAKE_CURRENT_LIST_DIR}/src/excptptr.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Running Tests with stl-lit.py\nDESCRIPTION: This command executes the STL test suite using the stl-lit.py test runner. It specifies the directories containing the test suites and disables extra ASan configs to limit runtime.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\npython tests\\utils\\stl-lit\\stl-lit.py -Dnotags=ASAN ..\\..\\llvm-project\\libcxx\\test ..\\..\\tests\\std ..\\..\\tests\\tr1\n```\n\n----------------------------------------\n\nTITLE: Adding Compile Definitions\nDESCRIPTION: This CMake snippet adds compile definitions to the compiler, enabling specific preprocessor flags and configurations for building the STL library. These definitions control internal behaviors and features of the STL.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nadd_compile_definitions(_CRTBLD _VCRT_ALLOW_INTERNALS _HAS_OLD_IOSTREAMS_MEMBERS=1)\n```\n\n----------------------------------------\n\nTITLE: Configure LIT Site Configuration File (CMake)\nDESCRIPTION: This snippet configures the LIT (LLVM Integrated Tester) site configuration file, copying the input configuration file to the binary directory. This step is necessary for LIT to run the tests correctly.\nSOURCE: https://github.com/microsoft/stl/blob/main/tests/libcxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in\n  ${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg)\n```\n\n----------------------------------------\n\nTITLE: Setting LLVM Source Directory - CMake\nDESCRIPTION: This snippet sets the LLVM_SOURCE_DIR variable, which specifies the location of the LLVM source tree. It uses the LLVM_PROJECT_SOURCE_DIR to determine the path, and stores it in the CMake cache for persistence.\nSOURCE: https://github.com/microsoft/stl/blob/main/tests/utils/stl-lit/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(LLVM_SOURCE_DIR \"${LLVM_PROJECT_SOURCE_DIR}/llvm\" CACHE PATH\n    \"Location of the llvm source tree\")\n```\n\n----------------------------------------\n\nTITLE: Running tests with filter\nDESCRIPTION: This command executes tests with names matching a regular expression using the stl-lit.py test runner.  It specifies the directories containing the test suites and filters tests by name.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\npython tests\\utils\\stl-lit\\stl-lit.py ..\\..\\llvm-project\\libcxx\\test ..\\..\\tests\\std --filter=atomic_wait\n```\n\n----------------------------------------\n\nTITLE: Running a benchmark\nDESCRIPTION: This command runs a specific STL benchmark, outputting the results to a CSV file. The `--benchmark_out` flag specifies the output file, and `--benchmark_out_format=csv` sets the output format to CSV.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_31\n\nLANGUAGE: cmd\nCODE:\n```\nout\\bench\\benchmark-std_copy --benchmark_out=benchmark-std_copy-results.csv --benchmark_out_format=csv\n```\n\n----------------------------------------\n\nTITLE: Configure LIT Site Configuration File with CMake\nDESCRIPTION: This snippet configures the LIT site configuration file using the configure_file command. It copies the input file to the binary directory.\nSOURCE: https://github.com/microsoft/stl/blob/main/tests/std/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg\")\n```\n\n----------------------------------------\n\nTITLE: Running the std test suite\nDESCRIPTION: This command executes the std test suite using the stl-lit.py test runner. It specifies the directory containing the std test suite and disables extra ASan configs to limit runtime.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\npython tests\\utils\\stl-lit\\stl-lit.py -Dnotags=ASAN ..\\..\\tests\\std\n```\n\n----------------------------------------\n\nTITLE: Setting TR1 Test Variables in CMake\nDESCRIPTION: This snippet defines variables for the expected results file and test output directory. These variables are used later to configure the test environment.\nSOURCE: https://github.com/microsoft/stl/blob/main/tests/tr1/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TR1_EXPECTED_RESULTS \"${CMAKE_CURRENT_SOURCE_DIR}/expected_results.txt\")\nset(TR1_TEST_OUTPUT_DIR \"${STL_TEST_OUTPUT_DIR}/tr1\")\n```\n\n----------------------------------------\n\nTITLE: Adding Compile Options\nDESCRIPTION: Adds compile options for the C++ language. These options enable specific warnings, diagnostics, and preprocessor configurations.\nSOURCE: https://github.com/microsoft/stl/blob/main/benchmarks/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_compile_options(\"$<$<COMPILE_LANGUAGE:CXX>:/Zi;/nologo;/diagnostics:caret;/W4;/WX;/w14265;/w15038;/w15262;/utf-8;/Zc:preprocessor>\")\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum CMake version required and the languages to be used (CXX for C++). It sets up the basic project configuration.\nSOURCE: https://github.com/microsoft/stl/blob/main/tools/validate/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.30.0)\nproject(msvc_standard_libraries_validate LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Satellite 2\nDESCRIPTION: This CMake snippet defines a list of C++ source files for another 'satellite' component, specifically for special mathematical functions.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES_SATELLITE_2\n    ${CMAKE_CURRENT_LIST_DIR}/src/special_math.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Targets for Clang-Format with CMake\nDESCRIPTION: This snippet creates a custom target named `run-format` and individual custom targets for each file that needs formatting. Each file's custom target executes clang-format on the file, and `run-format` depends on all the individual file targets.\nSOURCE: https://github.com/microsoft/stl/blob/main/tools/format/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(run-format)\n\nforeach(file IN LISTS clang_format_files)\n    cmake_path(RELATIVE_PATH file\n        BASE_DIRECTORY \"${CMAKE_CURRENT_LIST_DIR}/../..\"\n        OUTPUT_VARIABLE relative-file\n    )\n    string(REPLACE \"/\" \"_\" relative-file \"${relative-file}\")\n    set(target_name \"clang-format.${relative-file}\")\n    add_custom_target(\"${target_name}\"\n        COMMAND \"${CLANG_FORMAT}\" -style=file -i \"${file}\"\n        WORKING_DIRECTORY \"${CMAKE_CURRENT_LIST_DIR}/../..\"\n    )\n    add_dependencies(run-format \"${target_name}\")\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Defining Module Files List with CMake\nDESCRIPTION: This CMake snippet defines a list of module files using the `set` command. The list includes paths to module files (e.g., `std.ixx`) relative to `CMAKE_CURRENT_LIST_DIR`. These files likely contain module definitions for the Microsoft STL library.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_FILES\n    ${CMAKE_CURRENT_LIST_DIR}/modules/modules.json\n    ${CMAKE_CURRENT_LIST_DIR}/modules/std.ixx\n    ${CMAKE_CURRENT_LIST_DIR}/modules/std.compat.ixx\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Information Format\nDESCRIPTION: This CMake snippet sets the debug information format for MSVC and MASM compilers. It specifies that embedded debug information should be used.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_MSVC_DEBUG_INFORMATION_FORMAT \"Embedded\")\n```\n\n----------------------------------------\n\nTITLE: Running libcxx map tests\nDESCRIPTION: This command executes the libcxx map tests using the stl-lit.py test runner. It specifies the directory containing the map tests.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\npython tests\\utils\\stl-lit\\stl-lit.py -Dnotags=ASAN ..\\..\\llvm-project\\libcxx\\test\\std\\containers\\associative\\map\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for ASAN\nDESCRIPTION: This CMake snippet defines a list of C++ source files specifically for the Address Sanitizer (ASAN), a tool for detecting memory safety issues.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(ASAN_SOURCES\n    ${CMAKE_CURRENT_LIST_DIR}/src/asan.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: This snippet adds an executable target named 'validate-binary' which is built from the 'validate.cpp' source file. This is the main validation program.\nSOURCE: https://github.com/microsoft/stl/blob/main/tools/validate/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(validate-binary validate.cpp)\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for x64\nDESCRIPTION: This command configures the build for the x64 architecture using CMake. The `--preset` option specifies a pre-defined configuration.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncmake --preset x64\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for ARM64\nDESCRIPTION: This command configures the build for the ARM64 architecture using CMake. The `--preset` option specifies a pre-defined configuration.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ncmake --preset ARM64\n```\n\n----------------------------------------\n\nTITLE: Displaying benchmark help\nDESCRIPTION: This command displays the help message for a specific STL benchmark, listing available command-line flags and options.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_32\n\nLANGUAGE: cmd\nCODE:\n```\nout\\bench\\benchmark-<benchmark-name> --help\n```\n\n----------------------------------------\n\nTITLE: Git Clone STL Repository\nDESCRIPTION: This command clones the Microsoft STL repository from GitHub, including all submodules. It's a crucial first step for building and testing the library.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/microsoft/STL.git --recurse-submodules\n```\n\n----------------------------------------\n\nTITLE: CMake Build for ARM64EC\nDESCRIPTION: This command builds the ARM64EC target using CMake based on the configuration specified by the `--preset` option.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\ncmake --build --preset ARM64EC\n```\n\n----------------------------------------\n\nTITLE: CMake Build for ARM64\nDESCRIPTION: This command builds the ARM64 target using CMake based on the configuration specified by the `--preset` option.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ncmake --build --preset ARM64\n```\n\n----------------------------------------\n\nTITLE: Project Definition in CMake\nDESCRIPTION: This snippet defines the CMake project named `msvc_standard_libraries` and specifies that it uses the C++ language.\nSOURCE: https://github.com/microsoft/stl/blob/main/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(msvc_standard_libraries LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Defining Alias Source Files with CMake\nDESCRIPTION: This CMake snippet defines a list of assembly source files used for implementing aliases, specifically for x86 and x64 architectures. The files listed provide the assembly code for initializing and completing the initialization of aliases.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALIAS_SOURCES_X86_X64\n    ${CMAKE_CURRENT_LIST_DIR}/src/alias_init_once_begin_initialize.asm\n    ${CMAKE_CURRENT_LIST_DIR}/src/alias_init_once_complete.asm\n)\n```\n\n----------------------------------------\n\nTITLE: Running the Executable\nDESCRIPTION: This command executes the compiled example.exe program, which demonstrates basic STL usage.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\n.\\example.exe\n```\n\n----------------------------------------\n\nTITLE: Defining the Project\nDESCRIPTION: Defines the project name and specifies that the project uses the C++ language. This is a fundamental step in any CMake project.\nSOURCE: https://github.com/microsoft/stl/blob/main/benchmarks/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(msvc_standard_libraries_benchmarks LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting General Source Files\nDESCRIPTION: This CMake snippet defines a comprehensive list of C++ source files for various functionalities within the STL, including string comparison, locale handling, atomic operations, input/output streams, threading, and mathematical functions.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES\n    ${CMAKE_CURRENT_LIST_DIR}/src/StlCompareStringA.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/StlCompareStringW.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/StlLCMapStringA.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/StlLCMapStringW.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/_tolower.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/_toupper.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/atomic.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/cerr.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/cin.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/clog.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/cond.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/cout.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/cthread.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/filesys.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/fiopen.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/future.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/iomanip.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/ios.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/iosptrs.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/iostream.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/locale.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/locale0.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/multprec.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/mutex.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/pplerror.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/ppltasks.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/raisehan.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/stdhndlr.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/stdthrow.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/syserror.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/taskscheduler.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/thread0.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/uncaught_exception.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/uncaught_exceptions.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/ushcerr.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/ushcin.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/ushclog.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/ushcout.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/ushiostr.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/wcerr.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/wcin.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/wclog.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/wcout.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/winapinls.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/wiostrea.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/wlocale.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xalloc.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xcosh.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xdateord.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xdint.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xdnorm.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xdscale.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xdtento.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xdtest.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xdunscal.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xexp.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xfcosh.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xfdint.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xfdnorm.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xfdscale.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xfdtento.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xfdtest.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xfdunsca.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xferaise.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xfexp.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xfprec.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xfsinh.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xfvalues.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xgetwctype.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xlcosh.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xldint.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xldscale.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xldtento.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xldtest.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xldunsca.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xlexp.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xlgamma.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xlocale.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xlock.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xlpoly.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xlprec.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xlsinh.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xlvalues.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xmbtowc.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xmtx.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xnotify.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xonce.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xpoly.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xprec.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xrngabort.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xrngdev.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xsinh.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xstod.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xstof.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xstoflt.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xstol.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xstold.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xstoll.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xstopfx.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xstoul.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xstoull.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xstoxflt.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xstrcoll.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xstrxfrm.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xthrow.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xtime.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xtowlower.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xtowupper.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xvalues.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xwcscoll.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xwcsxfrm.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xwctomb.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xwstod.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xwstof.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xwstoflt.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xwstold.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xwstopfx.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/src/xwstoxfl.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files with CRT Initializers\nDESCRIPTION: This CMake snippet defines a list of C++ source files that must not be compiled with the /GL flag because they contain CRT initializers. This is important for maintaining compatibility and correct initialization order.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(INITIALIZER_SOURCES\n    ${CMAKE_CURRENT_LIST_DIR}/src/winapisupp.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Satellite DLL Source Files\nDESCRIPTION: This CMake snippet defines a list of C++ source files that are included in all satellite DLLs. These are common entry points and initialization routines for the satellite DLLs.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nset(SATELLITE_DLL_SOURCES\n    ${CMAKE_CURRENT_LIST_DIR}/src/dllmain_satellite.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Static Source Files\nDESCRIPTION: This CMake snippet defines a list of C++ source files included in the static library libcpmt[d][01].lib. This includes the satellite sources defined above.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nset(STATIC_SOURCES\n    ${SOURCES_SATELLITE_1}\n    ${SOURCES_SATELLITE_2}\n    ${SOURCES_SATELLITE_ATOMIC_WAIT}\n    ${SOURCES_SATELLITE_CODECVT_IDS}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining STL Address Sanitizer Library\nDESCRIPTION: This CMake code defines a static library target for the STL address sanitizer (ASAN). It sets the static library options for the target.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(stl_asan STATIC ${ASAN_SOURCES})\nset_target_properties(stl_asan PROPERTIES STATIC_LIBRARY_OPTIONS \"${VCLIBS_EXPLICIT_MACHINE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting ASAN Sources\nDESCRIPTION: This snippet sets the `DLL_ASAN_SOURCES` variable based on whether `STL_ASAN_BUILD` is enabled. If enabled, it uses `ASAN_SOURCES`; otherwise, it sets `DLL_ASAN_SOURCES` to an empty string.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nif(STL_ASAN_BUILD)\n    set(DLL_ASAN_SOURCES ${ASAN_SOURCES})\nelse()\n    set(DLL_ASAN_SOURCES \"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Global Properties for LIT Configuration (CMake)\nDESCRIPTION: This snippet sets global properties to append the libc++ LIT configuration map and test directories to the overall STL LIT configuration. This integration allows the libc++ tests to be run as part of a larger test suite.\nSOURCE: https://github.com/microsoft/stl/blob/main/tests/libcxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset_property(GLOBAL APPEND_STRING PROPERTY STL_LIT_CONFIG_MAP ${LIBCXX_LIT_CONFIG_MAP})\nset_property(GLOBAL APPEND PROPERTY STL_LIT_TEST_DIRS \"${LIBCXX_SOURCE_DIR}/test/std\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version\nDESCRIPTION: Specifies the minimum CMake version required to build the project. This ensures compatibility with the CMake features used in the script.\nSOURCE: https://github.com/microsoft/stl/blob/main/benchmarks/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.30.0)\n```\n\n----------------------------------------\n\nTITLE: Setting STL Lit Output Path - CMake\nDESCRIPTION: This snippet sets the STL_LIT_OUTPUT variable, which defines the output path for the STL lit Python script. It sets it to the current binary directory and makes it available in the parent scope.\nSOURCE: https://github.com/microsoft/stl/blob/main/tests/utils/stl-lit/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(STL_LIT_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/stl-lit.py\")\nset(STL_LIT_OUTPUT \"${STL_LIT_OUTPUT}\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Define LIT Configuration Map (CMake)\nDESCRIPTION: This snippet defines the LIT configuration map, which maps the configuration files to their corresponding locations in the binary directory. It ensures that the LIT test runner can locate and use the required configuration files during test execution.\nSOURCE: https://github.com/microsoft/stl/blob/main/tests/libcxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIBCXX_LIT_CONFIG_MAP \"map_config(\\\"${LIBCXX_SOURCE_DIR}/test/lit.cfg.py\\\", \\\"${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg\\\")\\n\")\nstring(APPEND LIBCXX_LIT_CONFIG_MAP \"map_config(\\\"${CMAKE_CURRENT_SOURCE_DIR}/lit.cfg\\\", \\\"${CMAKE_CURRENT_BINARY_DIR}/lit.site.cfg\\\")\\n\")\n```\n\n----------------------------------------\n\nTITLE: Setting the PATH environment variable\nDESCRIPTION: This command modifies the PATH environment variable to include the directory containing the STL DLLs, ensuring that the debugger can find the necessary runtime libraries.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_27\n\nLANGUAGE: C++\nCODE:\n```\nset PATH=C:\\Dev\\STL\\out\\x64\\out\\bin\\amd64;%PATH%\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables via Batch Script\nDESCRIPTION: This command runs a batch script to set the necessary environment variables (INCLUDE, LIB, PATH) for consuming the built STL library.  The script is located in the output directory after building.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_13\n\nLANGUAGE: Batch\nCODE:\n```\nC:\\Dev\\STL\\out\\x64\\set_environment.bat\n```\n\n----------------------------------------\n\nTITLE: Defining Benchmark Headers\nDESCRIPTION: Defines a list of header files that are common to all benchmarks. These headers likely contain utility functions or data structures used in the benchmarks.\nSOURCE: https://github.com/microsoft/stl/blob/main/benchmarks/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(benchmark_headers\n    \"inc/lorem.hpp\"\n    \"inc/skewed_allocator.hpp\"\n    \"inc/udt.hpp\"\n    \"inc/utility.hpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Example C++ Program\nDESCRIPTION: A simple C++ program that uses the STL to print \"Hello STL OSS world!\". It demonstrates basic STL usage.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\n#include <iostream>\n\nint main() {\n    std::cout << \"Hello STL OSS world!\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project. It ensures that the CMake version used is at least 3.30.0.\nSOURCE: https://github.com/microsoft/stl/blob/main/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.30.0)\n```\n\n----------------------------------------\n\nTITLE: Toolset Directory Retrieval\nDESCRIPTION: This snippet retrieves the toolset binaries directory, root directory, and sets the toolset library path based on the compiler location. It uses `get_filename_component` to extract directory components from the `CMAKE_CXX_COMPILER` variable.\nSOURCE: https://github.com/microsoft/stl/blob/main/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nget_filename_component(TOOLSET_BINARIES_DIR \"${CMAKE_CXX_COMPILER}\" DIRECTORY) # Example: $\\VC\\Tools\\MSVC\\14.23.27931\\bin\\Hostx86\\x86\nget_filename_component(TOOLSET_ROOT_DIR \"${TOOLSET_BINARIES_DIR}\" DIRECTORY) # $\\VC\\Tools\\MSVC\\14.23.27931\\bin\\Hostx86\nget_filename_component(TOOLSET_ROOT_DIR \"${TOOLSET_ROOT_DIR}\" DIRECTORY) # $\\VC\\Tools\\MSVC\\14.23.27931\\bin\nget_filename_component(TOOLSET_ROOT_DIR \"${TOOLSET_ROOT_DIR}\" DIRECTORY) # $\\VC\\Tools\\MSVC\\14.23.27931\n```\n\n----------------------------------------\n\nTITLE: Setting Directory Variables CMake\nDESCRIPTION: This snippet defines various directory variables used throughout the CMake build process. These variables specify the locations of the STL source code, build output, test utilities, tested headers, and tested modules.\nSOURCE: https://github.com/microsoft/stl/blob/main/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(STL_BUILD_ROOT \"${PROJECT_BINARY_DIR}/out\")\nset(STL_SOURCE_DIR \"${PROJECT_SOURCE_DIR}\")\nset(STL_TEST_OUTPUT_DIR \"${CMAKE_CURRENT_BINARY_DIR}\")\nset(STL_TEST_UTILS_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/utils\")\nset(STL_TESTED_HEADERS_DIR \"${STL_BUILD_ROOT}/inc\")\nset(STL_TESTED_MODULES_DIR \"${STL_BUILD_ROOT}/modules\")\n\nset(LLVM_PROJECT_SOURCE_DIR \"${STL_SOURCE_DIR}/llvm-project\" CACHE PATH\n    \"Location of the llvm-project source tree\")\nset(LIBCXX_SOURCE_DIR \"${LLVM_PROJECT_SOURCE_DIR}/libcxx\" CACHE PATH\n    \"Location of the libcxx source tree\")\n```\n\n----------------------------------------\n\nTITLE: Running a single test\nDESCRIPTION: This command executes a single test using the stl-lit.py test runner. It specifies the directory containing the test.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\npython tests\\utils\\stl-lit\\stl-lit.py -Dnotags=ASAN ..\\..\\tests\\std\\tests\\VSO_0000000_any_calling_conventions\n```\n\n----------------------------------------\n\nTITLE: STL Dependency Block Diagram (Mermaid)\nDESCRIPTION: This Mermaid code defines a flowchart illustrating the dependencies between the STL, VCRuntime, VCStartup, and Universal CRT components. It visually represents how the STL relies on lower-level libraries for compiler support, C library functions, and other runtime services.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_33\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n%%{ init: {\"flowchart\": {\"htmlLabels\": true}} }%%\n    classDef default text-align:left\n    subgraph VisualStudioSubgraph[Visual Studio]\n        direction TB\n        STLNode(\"<b>STL</b>\n        This repo; provides C++ Standard Library headers, separately\n        compiled implementations of most of the iostreams functionality,\n        and a few runtime support components like std::exception_ptr.\")\n        subgraph VCRuntimeSubgraph[VCRuntime]\n            direction TB\n            VCStartupNode(\"<b>VCStartup</b>\n            Provides compiler support mechanisms that\n            live in each binary; such as machinery to\n            call constructors and destructors for global\n            variables, the entry point, and the /GS cookie.\n\n            Merged into static and import libraries of VCRuntime.\")\n            VCRuntimeNode(\"<b>VCRuntime</b>\n            Provides compiler support mechanisms that can be\n            shared between binaries; code that the compiler calls\n            on your behalf, such as the C++ exception handling\n            runtime, string.h intrinsics, math intrinsics, and\n            declarations for CPU-vendor-specific intrinsics.\")\n        end\n    end\n    subgraph WindowsSDKSubgraph[Windows SDK]\n        UniversalCRTNode(\"<b>Universal CRT</b>\n        Windows component that provides C library support, such as printf,\n        C locales, and some POSIX-like shims for the Windows API, like _stat.\")\n    end\n    STLNode ==> VCRuntimeSubgraph & UniversalCRTNode\n    VCStartupNode ==> VCRuntimeNode ==> UniversalCRTNode\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Satellite Codecvt Ids\nDESCRIPTION: This CMake snippet defines a list of C++ source files for a 'satellite' component responsible for code conversion and locale handling, specifically focusing on Unicode locale data.\nSOURCE: https://github.com/microsoft/stl/blob/main/stl/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCES_SATELLITE_CODECVT_IDS\n    ${CMAKE_CURRENT_LIST_DIR}/src/ulocale.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for ARM64EC\nDESCRIPTION: This command configures the build for the ARM64EC architecture using CMake. The `--preset` option specifies a pre-defined configuration.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ncmake --preset ARM64EC\n```\n\n----------------------------------------\n\nTITLE: Batch Script for ARM64 Environment\nDESCRIPTION: This batch script sets up the environment for building the ARM64 target. It calls `vcvarsall.bat` to configure the build environment for ARM64.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_8\n\nLANGUAGE: Batch\nCODE:\n```\n\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\VC\\Auxiliary\\Build\\vcvarsall.bat\" x64_arm64\n```\n\n----------------------------------------\n\nTITLE: Batch Script for ARM Environment\nDESCRIPTION: This batch script sets up the environment for building the ARM target. It calls `vcvarsall.bat` to configure the build environment for ARM.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_5\n\nLANGUAGE: Batch\nCODE:\n```\n\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\VC\\Auxiliary\\Build\\vcvarsall.bat\" x64_arm\n```\n\n----------------------------------------\n\nTITLE: CMake Build for ARM\nDESCRIPTION: This command builds the ARM target using CMake based on the configuration specified by the `--preset` option.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ncmake --build --preset ARM\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet configures a CMake project named 'msvc_standard_libraries_tools' that utilizes C++ (CXX). It also specifies the minimum required CMake version as 3.30.0 and adds 'format' and 'validate' as subdirectories to be included in the build process.\nSOURCE: https://github.com/microsoft/stl/blob/main/tools/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.30.0)\nproject(msvc_standard_libraries_tools LANGUAGES CXX)\n\nadd_subdirectory(format)\nadd_subdirectory(validate)\n```\n\n----------------------------------------\n\nTITLE: CMake Build for x64\nDESCRIPTION: This command builds the x64 target using CMake based on the configuration specified by the `--preset` option.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncmake --build --preset x64\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for x86\nDESCRIPTION: This command configures the build for the x86 architecture using CMake. The `--preset` option specifies a pre-defined configuration.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncmake --preset x86\n```\n\n----------------------------------------\n\nTITLE: CMake Build for x86\nDESCRIPTION: This command builds the x86 target using CMake based on the configuration specified by the `--preset` option.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncmake --build --preset x86\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for ARM\nDESCRIPTION: This command configures the build for the ARM architecture using CMake. The `--preset` option specifies a pre-defined configuration.\nSOURCE: https://github.com/microsoft/stl/blob/main/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ncmake --preset ARM\n```\n\n----------------------------------------\n\nTITLE: Configuring STL Lit Script - CMake\nDESCRIPTION: This snippet configures the stl-lit.in file, using CMake's configure_file command, to generate the actual stl-lit.py script. It retrieves the STL_LIT_CONFIG_MAP global property before configuring the file.\nSOURCE: https://github.com/microsoft/stl/blob/main/tests/utils/stl-lit/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(STL_LIT_CONFIG_MAP GLOBAL PROPERTY STL_LIT_CONFIG_MAP)\nconfigure_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/stl-lit.in\"\n    \"${STL_LIT_OUTPUT}\")\n```"
  }
]