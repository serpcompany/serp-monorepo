[
  {
    "owner": "google",
    "repo": "meridian",
    "content": "TITLE: Installing Meridian and Verifying GPU Availability in Python\nDESCRIPTION: This snippet installs the Meridian library and checks for GPU availability. It imports necessary libraries and prints information about available RAM, GPUs, and CPUs.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_Getting_Started.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Install meridian: from PyPI @ latest release\n!pip install --upgrade google-meridian[colab,and-cuda]\n\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport tensorflow_probability as tfp\nimport arviz as az\n\nimport IPython\n\nfrom meridian import constants\nfrom meridian.data import load\nfrom meridian.data import test_utils\nfrom meridian.model import model\nfrom meridian.model import spec\nfrom meridian.model import prior_distribution\nfrom meridian.analysis import optimizer\nfrom meridian.analysis import analyzer\nfrom meridian.analysis import visualizer\nfrom meridian.analysis import summarizer\nfrom meridian.analysis import formatter\n\n# check if GPU is available\nfrom psutil import virtual_memory\nram_gb = virtual_memory().total / 1e9\nprint('Your runtime has {:.1f} gigabytes of available RAM\\n'.format(ram_gb))\nprint(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))\nprint(\"Num CPUs Available: \", len(tf.config.experimental.list_physical_devices('CPU')))\n```\n\n----------------------------------------\n\nTITLE: Installing Meridian Library in Python\nDESCRIPTION: Installs the Meridian library from PyPI with Colab and CUDA support options. Shows different installation methods including latest release, specific version, and GitHub head.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_RF_Demo.ipynb#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Install meridian: from PyPI @ latest release\n!pip install --upgrade google-meridian[colab,and-cuda]\n\n# Install meridian: from PyPI @ specific version\n# !pip install google-meridian[colab,and-cuda]==1.0.3\n\n# Install meridian: from GitHub @HEAD\n# !pip install --upgrade \"google-meridian[colab,and-cuda] @ git+https://github.com/google/meridian.git\"\n```\n\n----------------------------------------\n\nTITLE: Installing Meridian for Linux GPU Users\nDESCRIPTION: Command to install the latest release of Meridian from PyPI with CUDA support for Linux users with GPU devices. Requires CUDA toolchain and a compatible GPU.\nSOURCE: https://github.com/google/meridian/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ pip install --upgrade google-meridian[and-cuda]\n```\n\n----------------------------------------\n\nTITLE: Installing Meridian for macOS and CPU Users\nDESCRIPTION: Command to install the latest release of Meridian from PyPI for macOS users and general CPU-only environments. Note that there is no official GPU support for macOS.\nSOURCE: https://github.com/google/meridian/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ pip install --upgrade google-meridian\n```\n\n----------------------------------------\n\nTITLE: Installing Unreleased Meridian Version for GPU Users\nDESCRIPTION: Command to install the most recent, unreleased version of Meridian directly from GitHub with CUDA support for GPU users.\nSOURCE: https://github.com/google/meridian/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ pip install --upgrade \"google-meridian[and-cuda] @ git+https://github.com/google/meridian.git\"\n```\n\n----------------------------------------\n\nTITLE: Installing Unreleased Meridian Version for CPU Users\nDESCRIPTION: Command to install the most recent, unreleased version of Meridian directly from GitHub for CPU-only environments.\nSOURCE: https://github.com/google/meridian/blob/main/README.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ pip install --upgrade git+https://github.com/google/meridian.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Columns for Meridian Model in Python\nDESCRIPTION: This code maps column names to their corresponding variable types for use in the Meridian model. It defines the structure of the input data, including time, controls, population, KPI, revenue, media channels, and spends.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_Getting_Started.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncoord_to_columns = load.CoordToColumns(\n    time='time',\n    geo='geo',\n    controls=['GQV', 'Competitor_Sales'],\n    population='population',\n    kpi='conversions',\n    revenue_per_kpi='revenue_per_conversion',\n    media=[\n        'Channel0_impression',\n        'Channel1_impression',\n        'Channel2_impression',\n        'Channel3_impression',\n        'Channel4_impression',\n    ],\n    media_spend=[\n        'Channel0_spend',\n        'Channel1_spend',\n        'Channel2_spend',\n        'Channel3_spend',\n        'Channel4_spend',\n    ],\n    organic_media=['Organic_channel0_impression'],\n    non_media_treatments=['Promo'],\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Column Mappings\nDESCRIPTION: Maps data columns to their corresponding variable types for the Meridian model, including time, controls, population, KPIs, revenue, media channels and spend.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_RF_Demo.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncoord_to_columns = load.CoordToColumns(\n    time='time',\n    geo='geo',\n    controls=['GQV', 'Competitor_Sales'],\n    population='population',\n    kpi='conversions',\n    revenue_per_kpi='revenue_per_conversion',\n    media=[\n        'Channel0_impression',\n        'Channel1_impression',\n        'Channel2_impression',\n        'Channel3_impression',\n    ],\n    media_spend=[\n        'Channel0_spend',\n        'Channel1_spend',\n        'Channel2_spend',\n        'Channel3_spend',\n    ],\n    reach =['Channel4_reach', 'Channel5_reach'],\n    frequency=['Channel4_frequency', 'Channel5_frequency'],\n    rf_spend=['Channel4_spend', 'Channel5_spend'],\n    non_media_treatments=['Discount'],\n)\n```\n\n----------------------------------------\n\nTITLE: Mapping Media Variables to Channel Names in Python\nDESCRIPTION: This snippet creates dictionaries to map media variables and media spends to their corresponding channel names. This mapping is used for display in the two-page HTML output of the Meridian model.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_Getting_Started.ipynb#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncorrect_media_to_channel = {\n    'Channel0_impression': 'Channel_0',\n    'Channel1_impression': 'Channel_1',\n    'Channel2_impression': 'Channel_2',\n    'Channel3_impression': 'Channel_3',\n    'Channel4_impression': 'Channel_4',\n}\ncorrect_media_spend_to_channel = {\n    'Channel0_spend': 'Channel_0',\n    'Channel1_spend': 'Channel_1',\n    'Channel2_spend': 'Channel_2',\n    'Channel3_spend': 'Channel_3',\n    'Channel4_spend': 'Channel_4',\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Media Variables to Channel Names\nDESCRIPTION: Creates mappings between media variables, spends, reach/frequency metrics and their corresponding channel display names for reporting.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_RF_Demo.ipynb#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncorrect_media_to_channel = {\n    'Channel0_impression': 'Channel_0',\n    'Channel1_impression': 'Channel_1',\n    'Channel2_impression': 'Channel_2',\n    'Channel3_impression': 'Channel_3',\n}\ncorrect_media_spend_to_channel = {\n    'Channel0_spend': 'Channel_0',\n    'Channel1_spend': 'Channel_1',\n    'Channel2_spend': 'Channel_2',\n    'Channel3_spend': 'Channel_3',\n}\n\ncorrect_reach_to_channel = {\n    'Channel4_reach': 'Channel4',\n    'Channel5_reach': 'Channel5',\n}\ncorrect_frequency_to_channel = {\n    'Channel4_frequency': 'Channel4',\n    'Channel5_frequency': 'Channel5',\n}\ncorrect_rf_spend_to_channel = {\n    'Channel4_spend': 'Channel4',\n    'Channel5_spend': 'Channel5',\n}\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data for Meridian Model in Python\nDESCRIPTION: This code loads CSV data using the CsvDataLoader class from Meridian. It specifies the data file path, KPI type, and uses the previously defined column mappings and channel names.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_Getting_Started.ipynb#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nloader = load.CsvDataLoader(\n    csv_path=\"https://raw.githubusercontent.com/google/meridian/refs/heads/main/meridian/data/simulated_data/csv/geo_all_channels.csv\",\n    kpi_type='non_revenue',\n    coord_to_columns=coord_to_columns,\n    media_to_channel=correct_media_to_channel,\n    media_spend_to_channel=correct_media_spend_to_channel,\n)\ndata = loader.load()\n```\n\n----------------------------------------\n\nTITLE: Loading Data from CSV\nDESCRIPTION: Loads and configures the data using CsvDataLoader with the previously defined mappings.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_RF_Demo.ipynb#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nloader = load.CsvDataLoader(\n    csv_path=\"https://raw.githubusercontent.com/google/meridian/refs/heads/main/meridian/data/simulated_data/csv/geo_media_rf.csv\",\n    kpi_type='non_revenue',\n    coord_to_columns=coord_to_columns,\n    media_to_channel=correct_media_to_channel,\n    media_spend_to_channel=correct_media_spend_to_channel,\n    reach_to_channel=correct_reach_to_channel,\n    frequency_to_channel=correct_frequency_to_channel,\n    rf_spend_to_channel=correct_rf_spend_to_channel,\n)\ndata = loader.load()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Initializing Meridian Model in Python\nDESCRIPTION: This snippet sets up the Meridian model by defining ROI priors, creating a PriorDistribution object, and initializing the Meridian class with the loaded data and model specification.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_Getting_Started.ipynb#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nroi_mu = 0.2     # Mu for ROI prior for each media channel.\nroi_sigma = 0.9  # Sigma for ROI prior for each media channel.\nprior = prior_distribution.PriorDistribution(\n    roi_m=tfp.distributions.LogNormal(roi_mu, roi_sigma, name=constants.ROI_M)\n)\nmodel_spec = spec.ModelSpec(prior=prior)\n\nmmm = model.Meridian(input_data=data, model_spec=model_spec)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Running Meridian Model\nDESCRIPTION: Initializes and runs the Meridian model with ROI priors and MCMC sampling configuration.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_RF_Demo.ipynb#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nroi_rf_mu = 0.2     # Mu for ROI prior for each RF channel.\nroi_rf_sigma = 0.9  # Sigma for ROI prior for each RF channel.\nprior = prior_distribution.PriorDistribution(\n    roi_rf=tfp.distributions.LogNormal(roi_rf_mu, roi_rf_sigma, name=constants.ROI_RF)\n)\nmodel_spec = spec.ModelSpec(prior=prior)\n\nmmm = model.Meridian(input_data=data, model_spec=model_spec)\n\nmmm.sample_prior(500)\nmmm.sample_posterior(n_chains=7, n_adapt=500, n_burnin=500, n_keep=1000)\n```\n\n----------------------------------------\n\nTITLE: Sampling Prior and Posterior Distributions in Meridian Model\nDESCRIPTION: This code samples from the prior and posterior distributions of the Meridian model parameters. It uses MCMC algorithms to generate samples, specifying the number of chains, adaptation steps, burn-in period, and samples to keep.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_Getting_Started.ipynb#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n%%time\nmmm.sample_prior(500)\nmmm.sample_posterior(n_chains=7, n_adapt=500, n_burnin=500, n_keep=1000, seed=1)\n```\n\n----------------------------------------\n\nTITLE: Running Model Diagnostics\nDESCRIPTION: Performs model diagnostics by checking convergence with r-hat statistics and assessing model fit.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_RF_Demo.ipynb#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmodel_diagnostics = visualizer.ModelDiagnostics(mmm)\nmodel_diagnostics.plot_rhat_boxplot()\n\nmodel_fit = visualizer.ModelFit(mmm)\nmodel_fit.plot_model_fit()\n```\n\n----------------------------------------\n\nTITLE: Running Model Diagnostics for Meridian in Python\nDESCRIPTION: This snippet performs model diagnostics by generating r-hat statistics to assess convergence. It uses the ModelDiagnostics class to plot the r-hat boxplot, which helps in evaluating the model's convergence.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_Getting_Started.ipynb#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmodel_diagnostics = visualizer.ModelDiagnostics(mmm)\nmodel_diagnostics.plot_rhat_boxplot()\n```\n\n----------------------------------------\n\nTITLE: Initializing Summarizer Class in Python\nDESCRIPTION: Creates a summarizer object from an existing MMM model instance to generate result summaries.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_RF_Demo.ipynb#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmmm_summarizer = summarizer.Summarizer(mmm)\n```\n\n----------------------------------------\n\nTITLE: Assessing Model Fit in Meridian using Python\nDESCRIPTION: This code assesses the Meridian model's fit by comparing expected sales against actual sales. It uses the ModelFit class to generate a plot of the model fit, which helps in evaluating the model's performance.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_Getting_Started.ipynb#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmodel_fit = visualizer.ModelFit(mmm)\nmodel_fit.plot_model_fit()\n```\n\n----------------------------------------\n\nTITLE: Mounting Google Drive in Colab\nDESCRIPTION: Mounts Google Drive to access storage in Colab environment.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_RF_Demo.ipynb#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom google.colab import drive\ndrive.mount('/content/drive')\n```\n\n----------------------------------------\n\nTITLE: Initializing Summarizer with Media Mix Model in Python\nDESCRIPTION: Creates a Summarizer object with a previously trained media mix model (mmm) to prepare for generating result summaries.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_Getting_Started.ipynb#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmmm_summarizer = summarizer.Summarizer(mmm)\n```\n\n----------------------------------------\n\nTITLE: Generating Model Results Summary\nDESCRIPTION: Outputs a two-page HTML summary of model results for a specified date range to a file path.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_RF_Demo.ipynb#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfilepath = '/content/drive/MyDrive'\nstart_date = '2021-01-25'\nend_date = '2024-01-15'\nmmm_summarizer.output_model_results_summary('summary_output.html', filepath, start_date, end_date)\n```\n\n----------------------------------------\n\nTITLE: Mounting Google Drive in Colab for File Access\nDESCRIPTION: Mounts Google Drive to the Colab environment to enable reading and writing files to Drive storage.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_Getting_Started.ipynb#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom google.colab import drive\ndrive.mount('/content/drive')\n```\n\n----------------------------------------\n\nTITLE: Displaying HTML Summary Output\nDESCRIPTION: Displays the generated HTML summary output in IPython environment.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_RF_Demo.ipynb#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nIPython.display.HTML(filename='/content/drive/MyDrive/summary_output.html')\n```\n\n----------------------------------------\n\nTITLE: Generating Model Results Summary to HTML File\nDESCRIPTION: Generates a two-page HTML summary of model results for a specified time period and saves it to the designated file path. Requires filepath, start date, and end date parameters.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_Getting_Started.ipynb#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfilepath = '/content/drive/MyDrive'\nstart_date = '2021-01-25'\nend_date = '2024-01-15'\nmmm_summarizer.output_model_results_summary('summary_output.html', filepath, start_date, end_date)\n```\n\n----------------------------------------\n\nTITLE: Running Budget Optimization\nDESCRIPTION: Initializes budget optimizer and runs default optimization scenario to maximize ROI across channels.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_RF_Demo.ipynb#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n%%time\nbudget_optimizer = optimizer.BudgetOptimizer(mmm)\noptimization_results = budget_optimizer.optimize()\n```\n\n----------------------------------------\n\nTITLE: Displaying HTML Summary in Jupyter/Colab\nDESCRIPTION: Displays the generated HTML summary report within the notebook using IPython's display functionality.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_Getting_Started.ipynb#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nIPython.display.HTML(filename='/content/drive/MyDrive/summary_output.html')\n```\n\n----------------------------------------\n\nTITLE: Generating Optimization Report\nDESCRIPTION: Exports optimization results to a two-page HTML report showing optimized allocations and ROI.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_RF_Demo.ipynb#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfilepath = '/content/drive/MyDrive'\noptimization_results.output_optimization_summary('optimization_output.html', filepath)\n```\n\n----------------------------------------\n\nTITLE: Running Budget Optimization to Maximize ROI\nDESCRIPTION: Instantiates the BudgetOptimizer class with the media mix model and runs the default optimization scenario to maximize ROI with a fixed budget. The %%time magic command measures execution time.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_Getting_Started.ipynb#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n%%time\nbudget_optimizer = optimizer.BudgetOptimizer(mmm)\noptimization_results = budget_optimizer.optimize()\n```\n\n----------------------------------------\n\nTITLE: Displaying Optimization Results\nDESCRIPTION: Displays the generated optimization HTML report in IPython environment.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_RF_Demo.ipynb#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nIPython.display.HTML(filename='/content/drive/MyDrive/optimization_output.html')\n```\n\n----------------------------------------\n\nTITLE: Generating Optimization Summary Report\nDESCRIPTION: Outputs a 2-page HTML optimization report containing optimized spend allocations and ROI metrics to the specified file path.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_Getting_Started.ipynb#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfilepath = '/content/drive/MyDrive'\noptimization_results.output_optimization_summary('optimization_output.html', filepath)\n```\n\n----------------------------------------\n\nTITLE: Saving Model Object\nDESCRIPTION: Saves the MMM model object to a pickle file for future use.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_RF_Demo.ipynb#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfile_path='/content/drive/MyDrive/saved_mmm.pkl'\nmodel.save_mmm(mmm, file_path)\n```\n\n----------------------------------------\n\nTITLE: Displaying Optimization HTML Report\nDESCRIPTION: Renders the optimization HTML report in the notebook using IPython's display functionality.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_Getting_Started.ipynb#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nIPython.display.HTML(filename='/content/drive/MyDrive/optimization_output.html')\n```\n\n----------------------------------------\n\nTITLE: Loading Saved Model\nDESCRIPTION: Loads a previously saved MMM model object from a pickle file.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_RF_Demo.ipynb#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nmmm = model.load_mmm(file_path)\n```\n\n----------------------------------------\n\nTITLE: Saving Media Mix Model Object to Disk\nDESCRIPTION: Saves the trained model object to a pickle file to avoid repetitive model runs and conserve computational resources for future use.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_Getting_Started.ipynb#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfile_path='/content/drive/MyDrive/saved_mmm.pkl'\nmodel.save_mmm(mmm, file_path)\n```\n\n----------------------------------------\n\nTITLE: Loading Saved Media Mix Model from Disk\nDESCRIPTION: Loads a previously saved model object from disk to continue analysis without having to retrain the model.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_Getting_Started.ipynb#2025-04-18_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nmmm = model.load_mmm(file_path)\n```\n\n----------------------------------------\n\nTITLE: Citation Format for Meridian\nDESCRIPTION: BibTeX citation format for referencing the Meridian repository in academic or technical documentation.\nSOURCE: https://github.com/google/meridian/blob/main/README.md#2025-04-18_snippet_4\n\nLANGUAGE: BibTeX\nCODE:\n```\n@software{meridian_github,\n  author = {Google Meridian Marketing Mix Modeling Team},\n  title = {Meridian: Marketing Mix Modeling},\n  url = {https://github.com/google/meridian},\n  version = {1.0.9},\n  year = {2025},\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies and Checking GPU Availability\nDESCRIPTION: Sets up required imports from Meridian and other libraries, then checks available GPU and CPU resources.\nSOURCE: https://github.com/google/meridian/blob/main/demo/Meridian_RF_Demo.ipynb#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport tensorflow_probability as tfp\nimport arviz as az\n\nimport IPython\n\nfrom meridian import constants\nfrom meridian.data import load\nfrom meridian.data import test_utils\nfrom meridian.model import model\nfrom meridian.model import spec\nfrom meridian.model import prior_distribution\nfrom meridian.analysis import optimizer\nfrom meridian.analysis import analyzer\nfrom meridian.analysis import visualizer\nfrom meridian.analysis import summarizer\nfrom meridian.analysis import formatter\n\n# check if GPU is available\nfrom psutil import virtual_memory\nram_gb = virtual_memory().total / 1e9\nprint('Your runtime has {:.1f} gigabytes of available RAM\\n'.format(ram_gb))\nprint(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))\nprint(\"Num CPUs Available: \", len(tf.config.experimental.list_physical_devices('CPU')))\n```"
  }
]